
IMSI2020_ProjectFX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d0b4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a50  0801d258  0801d258  0002d258  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801dca8  0801dca8  000313ac  2**0
                  CONTENTS
  4 .ARM          00000008  0801dca8  0801dca8  0002dca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801dcb0  0801dcb0  000313ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801dcb0  0801dcb0  0002dcb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801dcb4  0801dcb4  0002dcb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000013ac  20000000  0801dcb8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000016cc  200013ac  0801f064  000313ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002a78  0801f064  00032a78  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000313ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005648e  00000000  00000000  000313da  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006f55  00000000  00000000  00087868  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000037e8  00000000  00000000  0008e7c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00003538  00000000  00000000  00091fa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022957  00000000  00000000  000954e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00026d21  00000000  00000000  000b7e37  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b523d  00000000  00000000  000deb58  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000fa  00000000  00000000  00193d95  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000fd08  00000000  00000000  00193e90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200013ac 	.word	0x200013ac
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801d23c 	.word	0x0801d23c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200013b0 	.word	0x200013b0
 80001dc:	0801d23c 	.word	0x0801d23c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b972 	b.w	8000f54 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	4688      	mov	r8, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14b      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4615      	mov	r5, r2
 8000c9a:	d967      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0720 	rsb	r7, r2, #32
 8000ca6:	fa01 f302 	lsl.w	r3, r1, r2
 8000caa:	fa20 f707 	lsr.w	r7, r0, r7
 8000cae:	4095      	lsls	r5, r2
 8000cb0:	ea47 0803 	orr.w	r8, r7, r3
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cc0:	fa1f fc85 	uxth.w	ip, r5
 8000cc4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cc8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ccc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18eb      	adds	r3, r5, r3
 8000cd6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cda:	f080 811b 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8118 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000ce4:	3f02      	subs	r7, #2
 8000ce6:	442b      	add	r3, r5
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cf0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cfc:	45a4      	cmp	ip, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	192c      	adds	r4, r5, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d06:	f080 8107 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000d0a:	45a4      	cmp	ip, r4
 8000d0c:	f240 8104 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000d10:	3802      	subs	r0, #2
 8000d12:	442c      	add	r4, r5
 8000d14:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d18:	eba4 040c 	sub.w	r4, r4, ip
 8000d1c:	2700      	movs	r7, #0
 8000d1e:	b11e      	cbz	r6, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c6 4300 	strd	r4, r3, [r6]
 8000d28:	4639      	mov	r1, r7
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0xbe>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80eb 	beq.w	8000f0e <__udivmoddi4+0x286>
 8000d38:	2700      	movs	r7, #0
 8000d3a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d3e:	4638      	mov	r0, r7
 8000d40:	4639      	mov	r1, r7
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f783 	clz	r7, r3
 8000d4a:	2f00      	cmp	r7, #0
 8000d4c:	d147      	bne.n	8000dde <__udivmoddi4+0x156>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0xd0>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80fa 	bhi.w	8000f4c <__udivmoddi4+0x2c4>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	4698      	mov	r8, r3
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	d0e0      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000d66:	e9c6 4800 	strd	r4, r8, [r6]
 8000d6a:	e7dd      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000d6c:	b902      	cbnz	r2, 8000d70 <__udivmoddi4+0xe8>
 8000d6e:	deff      	udf	#255	; 0xff
 8000d70:	fab2 f282 	clz	r2, r2
 8000d74:	2a00      	cmp	r2, #0
 8000d76:	f040 808f 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d7a:	1b49      	subs	r1, r1, r5
 8000d7c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d80:	fa1f f885 	uxth.w	r8, r5
 8000d84:	2701      	movs	r7, #1
 8000d86:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d8a:	0c23      	lsrs	r3, r4, #16
 8000d8c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb08 f10c 	mul.w	r1, r8, ip
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9c:	18eb      	adds	r3, r5, r3
 8000d9e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4299      	cmp	r1, r3
 8000da6:	f200 80cd 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000daa:	4684      	mov	ip, r0
 8000dac:	1a59      	subs	r1, r3, r1
 8000dae:	b2a3      	uxth	r3, r4
 8000db0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000db8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dbc:	fb08 f800 	mul.w	r8, r8, r0
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x14c>
 8000dc4:	192c      	adds	r4, r5, r4
 8000dc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x14a>
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	f200 80b6 	bhi.w	8000f3e <__udivmoddi4+0x2b6>
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	eba4 0408 	sub.w	r4, r4, r8
 8000dd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ddc:	e79f      	b.n	8000d1e <__udivmoddi4+0x96>
 8000dde:	f1c7 0c20 	rsb	ip, r7, #32
 8000de2:	40bb      	lsls	r3, r7
 8000de4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000de8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dec:	fa01 f407 	lsl.w	r4, r1, r7
 8000df0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000df4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000df8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dfc:	4325      	orrs	r5, r4
 8000dfe:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e02:	0c2c      	lsrs	r4, r5, #16
 8000e04:	fb08 3319 	mls	r3, r8, r9, r3
 8000e08:	fa1f fa8e 	uxth.w	sl, lr
 8000e0c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e10:	fb09 f40a 	mul.w	r4, r9, sl
 8000e14:	429c      	cmp	r4, r3
 8000e16:	fa02 f207 	lsl.w	r2, r2, r7
 8000e1a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1e 0303 	adds.w	r3, lr, r3
 8000e24:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e28:	f080 8087 	bcs.w	8000f3a <__udivmoddi4+0x2b2>
 8000e2c:	429c      	cmp	r4, r3
 8000e2e:	f240 8084 	bls.w	8000f3a <__udivmoddi4+0x2b2>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4473      	add	r3, lr
 8000e38:	1b1b      	subs	r3, r3, r4
 8000e3a:	b2ad      	uxth	r5, r5
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3310 	mls	r3, r8, r0, r3
 8000e44:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e48:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e4c:	45a2      	cmp	sl, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1e 0404 	adds.w	r4, lr, r4
 8000e54:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e58:	d26b      	bcs.n	8000f32 <__udivmoddi4+0x2aa>
 8000e5a:	45a2      	cmp	sl, r4
 8000e5c:	d969      	bls.n	8000f32 <__udivmoddi4+0x2aa>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4474      	add	r4, lr
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6a:	eba4 040a 	sub.w	r4, r4, sl
 8000e6e:	454c      	cmp	r4, r9
 8000e70:	46c2      	mov	sl, r8
 8000e72:	464b      	mov	r3, r9
 8000e74:	d354      	bcc.n	8000f20 <__udivmoddi4+0x298>
 8000e76:	d051      	beq.n	8000f1c <__udivmoddi4+0x294>
 8000e78:	2e00      	cmp	r6, #0
 8000e7a:	d069      	beq.n	8000f50 <__udivmoddi4+0x2c8>
 8000e7c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e80:	eb64 0403 	sbc.w	r4, r4, r3
 8000e84:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e88:	40fd      	lsrs	r5, r7
 8000e8a:	40fc      	lsrs	r4, r7
 8000e8c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e90:	e9c6 5400 	strd	r5, r4, [r6]
 8000e94:	2700      	movs	r7, #0
 8000e96:	e747      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f703 	lsr.w	r7, r0, r3
 8000ea0:	4095      	lsls	r5, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eaa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eae:	4338      	orrs	r0, r7
 8000eb0:	0c01      	lsrs	r1, r0, #16
 8000eb2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000eb6:	fa1f f885 	uxth.w	r8, r5
 8000eba:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ebe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec2:	fb07 f308 	mul.w	r3, r7, r8
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ecc:	d907      	bls.n	8000ede <__udivmoddi4+0x256>
 8000ece:	1869      	adds	r1, r5, r1
 8000ed0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ed4:	d22f      	bcs.n	8000f36 <__udivmoddi4+0x2ae>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	d92d      	bls.n	8000f36 <__udivmoddi4+0x2ae>
 8000eda:	3f02      	subs	r7, #2
 8000edc:	4429      	add	r1, r5
 8000ede:	1acb      	subs	r3, r1, r3
 8000ee0:	b281      	uxth	r1, r0
 8000ee2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eee:	fb00 f308 	mul.w	r3, r0, r8
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x27e>
 8000ef6:	1869      	adds	r1, r5, r1
 8000ef8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000efc:	d217      	bcs.n	8000f2e <__udivmoddi4+0x2a6>
 8000efe:	428b      	cmp	r3, r1
 8000f00:	d915      	bls.n	8000f2e <__udivmoddi4+0x2a6>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4429      	add	r1, r5
 8000f06:	1ac9      	subs	r1, r1, r3
 8000f08:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f0c:	e73b      	b.n	8000d86 <__udivmoddi4+0xfe>
 8000f0e:	4637      	mov	r7, r6
 8000f10:	4630      	mov	r0, r6
 8000f12:	e709      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f14:	4607      	mov	r7, r0
 8000f16:	e6e7      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f18:	4618      	mov	r0, r3
 8000f1a:	e6fb      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f1c:	4541      	cmp	r1, r8
 8000f1e:	d2ab      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f20:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f24:	eb69 020e 	sbc.w	r2, r9, lr
 8000f28:	3801      	subs	r0, #1
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	e7a4      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f2e:	4660      	mov	r0, ip
 8000f30:	e7e9      	b.n	8000f06 <__udivmoddi4+0x27e>
 8000f32:	4618      	mov	r0, r3
 8000f34:	e795      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f36:	4667      	mov	r7, ip
 8000f38:	e7d1      	b.n	8000ede <__udivmoddi4+0x256>
 8000f3a:	4681      	mov	r9, r0
 8000f3c:	e77c      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f3e:	3802      	subs	r0, #2
 8000f40:	442c      	add	r4, r5
 8000f42:	e747      	b.n	8000dd4 <__udivmoddi4+0x14c>
 8000f44:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f48:	442b      	add	r3, r5
 8000f4a:	e72f      	b.n	8000dac <__udivmoddi4+0x124>
 8000f4c:	4638      	mov	r0, r7
 8000f4e:	e708      	b.n	8000d62 <__udivmoddi4+0xda>
 8000f50:	4637      	mov	r7, r6
 8000f52:	e6e9      	b.n	8000d28 <__udivmoddi4+0xa0>

08000f54 <__aeabi_idiv0>:
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <MX_BlueNRG_MS_Init>:
  PRINT_CSV("%02ld:%02ld:%02ld.%03ld", ms/(60*60*1000)%24, ms/(60*1000)%60, (ms/1000)%60, ms%1000);
}
#endif

void MX_BlueNRG_MS_Init(void)
{
 8000f58:	b5b0      	push	{r4, r5, r7, lr}
 8000f5a:	b08a      	sub	sp, #40	; 0x28
 8000f5c:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN BlueNRG_MS_Init_PreTreatment */
  
  /* USER CODE END BlueNRG_MS_Init_PreTreatment */

  /* Initialize the peripherals and the BLE Stack */
  const char *name = "BlueNRG";    
 8000f5e:	4b66      	ldr	r3, [pc, #408]	; (80010f8 <MX_BlueNRG_MS_Init+0x1a0>)
 8000f60:	613b      	str	r3, [r7, #16]
  uint8_t  bdaddr_len_out;
  uint8_t  hwVersion;
  uint16_t fwVersion;
  int ret;  
  
  User_Init();
 8000f62:	f000 f8f3 	bl	800114c <User_Init>
  
  /* Get the User Button initial state */
  user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 8000f66:	2000      	movs	r0, #0
 8000f68:	f007 fe2c 	bl	8008bc4 <BSP_PB_GetState>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	b2da      	uxtb	r2, r3
 8000f70:	4b62      	ldr	r3, [pc, #392]	; (80010fc <MX_BlueNRG_MS_Init+0x1a4>)
 8000f72:	701a      	strb	r2, [r3, #0]
    
  hci_init(user_notify, NULL);
 8000f74:	2100      	movs	r1, #0
 8000f76:	4862      	ldr	r0, [pc, #392]	; (8001100 <MX_BlueNRG_MS_Init+0x1a8>)
 8000f78:	f00e f8be 	bl	800f0f8 <hci_init>
  
  /* get the BlueNRG HW and FW versions */
  getBlueNRGVersion(&hwVersion, &fwVersion);
 8000f7c:	1dba      	adds	r2, r7, #6
 8000f7e:	f107 0308 	add.w	r3, r7, #8
 8000f82:	4611      	mov	r1, r2
 8000f84:	4618      	mov	r0, r3
 8000f86:	f00d ff2e 	bl	800ede6 <getBlueNRGVersion>
   * Reset BlueNRG again otherwise we won't
   * be able to change its MAC address.
   * aci_hal_write_config_data() must be the first
   * command after reset otherwise it will fail.
   */
  hci_reset(); 
 8000f8a:	f00d ff70 	bl	800ee6e <hci_reset>
  HAL_Delay(100);
 8000f8e:	2064      	movs	r0, #100	; 0x64
 8000f90:	f007 ff60 	bl	8008e54 <HAL_Delay>
 
  PRINTF("HWver %d\nFWver %d\n", hwVersion, fwVersion);
 8000f94:	7a3b      	ldrb	r3, [r7, #8]
 8000f96:	4619      	mov	r1, r3
 8000f98:	88fb      	ldrh	r3, [r7, #6]
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	4859      	ldr	r0, [pc, #356]	; (8001104 <MX_BlueNRG_MS_Init+0x1ac>)
 8000f9e:	f019 fb43 	bl	801a628 <iprintf>
  if (hwVersion > 0x30) { /* X-NUCLEO-IDB05A1 expansion board is used */
 8000fa2:	7a3b      	ldrb	r3, [r7, #8]
 8000fa4:	2b30      	cmp	r3, #48	; 0x30
 8000fa6:	d902      	bls.n	8000fae <MX_BlueNRG_MS_Init+0x56>
    bnrg_expansion_board = IDB05A1;    
 8000fa8:	4b57      	ldr	r3, [pc, #348]	; (8001108 <MX_BlueNRG_MS_Init+0x1b0>)
 8000faa:	2201      	movs	r2, #1
 8000fac:	701a      	strb	r2, [r3, #0]
  }
  
  ret = aci_hal_read_config_data(CONFIG_DATA_RANDOM_ADDRESS, BDADDR_SIZE, &bdaddr_len_out, bdaddr);
 8000fae:	f107 0209 	add.w	r2, r7, #9
 8000fb2:	4b56      	ldr	r3, [pc, #344]	; (800110c <MX_BlueNRG_MS_Init+0x1b4>)
 8000fb4:	2106      	movs	r1, #6
 8000fb6:	2080      	movs	r0, #128	; 0x80
 8000fb8:	f00d fe91 	bl	800ecde <aci_hal_read_config_data>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	617b      	str	r3, [r7, #20]
  
  if (ret) {
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d002      	beq.n	8000fcc <MX_BlueNRG_MS_Init+0x74>
    PRINTF("Read Static Random address failed.\n");
 8000fc6:	4852      	ldr	r0, [pc, #328]	; (8001110 <MX_BlueNRG_MS_Init+0x1b8>)
 8000fc8:	f019 fba2 	bl	801a710 <puts>
  }

  if ((bdaddr[5] & 0xC0) != 0xC0) {
 8000fcc:	4b4f      	ldr	r3, [pc, #316]	; (800110c <MX_BlueNRG_MS_Init+0x1b4>)
 8000fce:	795b      	ldrb	r3, [r3, #5]
 8000fd0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8000fd4:	2bc0      	cmp	r3, #192	; 0xc0
 8000fd6:	d003      	beq.n	8000fe0 <MX_BlueNRG_MS_Init+0x88>
    PRINTF("Static Random address not well formed.\n");
 8000fd8:	484e      	ldr	r0, [pc, #312]	; (8001114 <MX_BlueNRG_MS_Init+0x1bc>)
 8000fda:	f019 fb99 	bl	801a710 <puts>
    while(1);
 8000fde:	e7fe      	b.n	8000fde <MX_BlueNRG_MS_Init+0x86>
  }
  
  /* GATT Init */
  ret = aci_gatt_init();    
 8000fe0:	f00d fc3c 	bl	800e85c <aci_gatt_init>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	617b      	str	r3, [r7, #20]
  if(ret){
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d002      	beq.n	8000ff4 <MX_BlueNRG_MS_Init+0x9c>
    PRINTF("GATT_Init failed.\n");
 8000fee:	484a      	ldr	r0, [pc, #296]	; (8001118 <MX_BlueNRG_MS_Init+0x1c0>)
 8000ff0:	f019 fb8e 	bl	801a710 <puts>
  }

  /* GAP Init */
  if (bnrg_expansion_board == IDB05A1) {
 8000ff4:	4b44      	ldr	r3, [pc, #272]	; (8001108 <MX_BlueNRG_MS_Init+0x1b0>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d110      	bne.n	800101e <MX_BlueNRG_MS_Init+0xc6>
    ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8000ffc:	f107 020e 	add.w	r2, r7, #14
 8001000:	f107 030a 	add.w	r3, r7, #10
 8001004:	9301      	str	r3, [sp, #4]
 8001006:	f107 030c 	add.w	r3, r7, #12
 800100a:	9300      	str	r3, [sp, #0]
 800100c:	4613      	mov	r3, r2
 800100e:	2207      	movs	r2, #7
 8001010:	2100      	movs	r1, #0
 8001012:	2001      	movs	r0, #1
 8001014:	f00d f9f3 	bl	800e3fe <aci_gap_init_IDB05A1>
 8001018:	4603      	mov	r3, r0
 800101a:	617b      	str	r3, [r7, #20]
 800101c:	e00a      	b.n	8001034 <MX_BlueNRG_MS_Init+0xdc>
  }
  else {
    ret = aci_gap_init_IDB04A1(GAP_PERIPHERAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 800101e:	f107 030a 	add.w	r3, r7, #10
 8001022:	f107 020c 	add.w	r2, r7, #12
 8001026:	f107 010e 	add.w	r1, r7, #14
 800102a:	2001      	movs	r0, #1
 800102c:	f00d fa37 	bl	800e49e <aci_gap_init_IDB04A1>
 8001030:	4603      	mov	r3, r0
 8001032:	617b      	str	r3, [r7, #20]
  }
  if (ret != BLE_STATUS_SUCCESS) {
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d002      	beq.n	8001040 <MX_BlueNRG_MS_Init+0xe8>
    PRINTF("GAP_Init failed.\n");
 800103a:	4838      	ldr	r0, [pc, #224]	; (800111c <MX_BlueNRG_MS_Init+0x1c4>)
 800103c:	f019 fb68 	bl	801a710 <puts>
  }

  /* Update device name */
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 8001040:	89fc      	ldrh	r4, [r7, #14]
 8001042:	89bd      	ldrh	r5, [r7, #12]
                                   strlen(name), (uint8_t *)name);
 8001044:	6938      	ldr	r0, [r7, #16]
 8001046:	f7ff f8cb 	bl	80001e0 <strlen>
 800104a:	4603      	mov	r3, r0
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 800104c:	b2da      	uxtb	r2, r3
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	9300      	str	r3, [sp, #0]
 8001052:	4613      	mov	r3, r2
 8001054:	2200      	movs	r2, #0
 8001056:	4629      	mov	r1, r5
 8001058:	4620      	mov	r0, r4
 800105a:	f00d fd80 	bl	800eb5e <aci_gatt_update_char_value>
 800105e:	4603      	mov	r3, r0
 8001060:	617b      	str	r3, [r7, #20]
  if (ret) {
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d003      	beq.n	8001070 <MX_BlueNRG_MS_Init+0x118>
    PRINTF("aci_gatt_update_char_value failed.\n");            
 8001068:	482d      	ldr	r0, [pc, #180]	; (8001120 <MX_BlueNRG_MS_Init+0x1c8>)
 800106a:	f019 fb51 	bl	801a710 <puts>
    while(1);
 800106e:	e7fe      	b.n	800106e <MX_BlueNRG_MS_Init+0x116>
  }
  
  ret = aci_gap_set_auth_requirement(MITM_PROTECTION_REQUIRED,
 8001070:	2301      	movs	r3, #1
 8001072:	9303      	str	r3, [sp, #12]
 8001074:	4b2b      	ldr	r3, [pc, #172]	; (8001124 <MX_BlueNRG_MS_Init+0x1cc>)
 8001076:	9302      	str	r3, [sp, #8]
 8001078:	2300      	movs	r3, #0
 800107a:	9301      	str	r3, [sp, #4]
 800107c:	2310      	movs	r3, #16
 800107e:	9300      	str	r3, [sp, #0]
 8001080:	2307      	movs	r3, #7
 8001082:	2200      	movs	r2, #0
 8001084:	2100      	movs	r1, #0
 8001086:	2001      	movs	r0, #1
 8001088:	f00d fb42 	bl	800e710 <aci_gap_set_auth_requirement>
 800108c:	4603      	mov	r3, r0
 800108e:	617b      	str	r3, [r7, #20]
                                     7,
                                     16,
                                     USE_FIXED_PIN_FOR_PAIRING,
                                     123456,
                                     BONDING);
  if (ret) {
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d003      	beq.n	800109e <MX_BlueNRG_MS_Init+0x146>
    PRINTF("aci_gap_set_authentication_requirement failed.\n");
 8001096:	4824      	ldr	r0, [pc, #144]	; (8001128 <MX_BlueNRG_MS_Init+0x1d0>)
 8001098:	f019 fb3a 	bl	801a710 <puts>
    while(1);
 800109c:	e7fe      	b.n	800109c <MX_BlueNRG_MS_Init+0x144>
  }
  
  PRINTF("BLE Stack Initialized\n");
 800109e:	4823      	ldr	r0, [pc, #140]	; (800112c <MX_BlueNRG_MS_Init+0x1d4>)
 80010a0:	f019 fb36 	bl	801a710 <puts>
  
  ret = Add_HWServW2ST_Service();
 80010a4:	f000 ff5e 	bl	8001f64 <Add_HWServW2ST_Service>
 80010a8:	4603      	mov	r3, r0
 80010aa:	617b      	str	r3, [r7, #20]
  if(ret == BLE_STATUS_SUCCESS) {
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d10a      	bne.n	80010c8 <MX_BlueNRG_MS_Init+0x170>
    PRINTF("BlueMS HW service added successfully.\n");
 80010b2:	481f      	ldr	r0, [pc, #124]	; (8001130 <MX_BlueNRG_MS_Init+0x1d8>)
 80010b4:	f019 fb2c 	bl	801a710 <puts>
  } else {
    PRINTF("Error while adding BlueMS HW service: 0x%02x\r\n", ret);
    while(1);
  }
  
  ret = Add_SWServW2ST_Service();
 80010b8:	f001 f82c 	bl	8002114 <Add_SWServW2ST_Service>
 80010bc:	4603      	mov	r3, r0
 80010be:	617b      	str	r3, [r7, #20]
  if(ret == BLE_STATUS_SUCCESS) {
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d109      	bne.n	80010da <MX_BlueNRG_MS_Init+0x182>
 80010c6:	e004      	b.n	80010d2 <MX_BlueNRG_MS_Init+0x17a>
    PRINTF("Error while adding BlueMS HW service: 0x%02x\r\n", ret);
 80010c8:	6979      	ldr	r1, [r7, #20]
 80010ca:	481a      	ldr	r0, [pc, #104]	; (8001134 <MX_BlueNRG_MS_Init+0x1dc>)
 80010cc:	f019 faac 	bl	801a628 <iprintf>
    while(1);
 80010d0:	e7fe      	b.n	80010d0 <MX_BlueNRG_MS_Init+0x178>
     PRINTF("BlueMS SW service added successfully.\n");
 80010d2:	4819      	ldr	r0, [pc, #100]	; (8001138 <MX_BlueNRG_MS_Init+0x1e0>)
 80010d4:	f019 fb1c 	bl	801a710 <puts>
 80010d8:	e004      	b.n	80010e4 <MX_BlueNRG_MS_Init+0x18c>
  } else {
     PRINTF("Error while adding BlueMS HW service: 0x%02x\r\n", ret);
 80010da:	6979      	ldr	r1, [r7, #20]
 80010dc:	4815      	ldr	r0, [pc, #84]	; (8001134 <MX_BlueNRG_MS_Init+0x1dc>)
 80010de:	f019 faa3 	bl	801a628 <iprintf>
     while(1);
 80010e2:	e7fe      	b.n	80010e2 <MX_BlueNRG_MS_Init+0x18a>
  }

  /* Set output power level */
  ret = aci_hal_set_tx_power_level(1,4);
 80010e4:	2104      	movs	r1, #4
 80010e6:	2001      	movs	r0, #1
 80010e8:	f00d fe4c 	bl	800ed84 <aci_hal_set_tx_power_level>
 80010ec:	4603      	mov	r3, r0
 80010ee:	617b      	str	r3, [r7, #20]
  
  /* USER CODE BEGIN BlueNRG_MS_Init_PostTreatment */
  
  /* USER CODE END BlueNRG_MS_Init_PostTreatment */
}
 80010f0:	bf00      	nop
 80010f2:	3718      	adds	r7, #24
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bdb0      	pop	{r4, r5, r7, pc}
 80010f8:	0801d258 	.word	0x0801d258
 80010fc:	200011c0 	.word	0x200011c0
 8001100:	08002741 	.word	0x08002741
 8001104:	0801d260 	.word	0x0801d260
 8001108:	200021b1 	.word	0x200021b1
 800110c:	200027a0 	.word	0x200027a0
 8001110:	0801d274 	.word	0x0801d274
 8001114:	0801d298 	.word	0x0801d298
 8001118:	0801d2c0 	.word	0x0801d2c0
 800111c:	0801d2d4 	.word	0x0801d2d4
 8001120:	0801d2e8 	.word	0x0801d2e8
 8001124:	0001e240 	.word	0x0001e240
 8001128:	0801d30c 	.word	0x0801d30c
 800112c:	0801d33c 	.word	0x0801d33c
 8001130:	0801d354 	.word	0x0801d354
 8001134:	0801d37c 	.word	0x0801d37c
 8001138:	0801d3ac 	.word	0x0801d3ac

0800113c <MX_BlueNRG_MS_Process>:

/*
 * BlueNRG-MS background task
 */
void MX_BlueNRG_MS_Process(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BlueNRG_MS_Process_PreTreatment */
  
  /* USER CODE END BlueNRG_MS_Process_PreTreatment */
  
  User_Process();  
 8001140:	f000 f812 	bl	8001168 <User_Process>
  hci_user_evt_proc();
 8001144:	f00e f952 	bl	800f3ec <hci_user_evt_proc>

  /* USER CODE BEGIN BlueNRG_MS_Process_PostTreatment */
  
  /* USER CODE END BlueNRG_MS_Process_PostTreatment */
}
 8001148:	bf00      	nop
 800114a:	bd80      	pop	{r7, pc}

0800114c <User_Init>:
 *
 * @param  None
 * @retval None
 */
static void User_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8001150:	2101      	movs	r1, #1
 8001152:	2000      	movs	r0, #0
 8001154:	f007 fcb6 	bl	8008ac4 <BSP_PB_Init>
  BSP_LED_Init(LED2);
 8001158:	2000      	movs	r0, #0
 800115a:	f007 fc39 	bl	80089d0 <BSP_LED_Init>
  
  BSP_COM_Init(COM1);
 800115e:	2000      	movs	r0, #0
 8001160:	f007 fd54 	bl	8008c0c <BSP_COM_Init>
}
 8001164:	bf00      	nop
 8001166:	bd80      	pop	{r7, pc}

08001168 <User_Process>:
 *
 * @param  None
 * @retval None
 */
static void User_Process(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
  float data_t;
  float data_p;
  static uint32_t counter = 0;
  
  if (set_connectable)
 800116e:	4b2c      	ldr	r3, [pc, #176]	; (8001220 <User_Process+0xb8>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	b2db      	uxtb	r3, r3
 8001174:	2b00      	cmp	r3, #0
 8001176:	d004      	beq.n	8001182 <User_Process+0x1a>
  {
    Set_DeviceConnectable();
 8001178:	f001 fa56 	bl	8002628 <Set_DeviceConnectable>
    set_connectable = FALSE;
 800117c:	4b28      	ldr	r3, [pc, #160]	; (8001220 <User_Process+0xb8>)
 800117e:	2200      	movs	r2, #0
 8001180:	701a      	strb	r2, [r3, #0]
    while (BSP_PB_GetState(BUTTON_KEY) == !user_button_init_state);
    
    /* Debouncing */
    HAL_Delay(50);
#endif
    BSP_LED_Toggle(LED2);
 8001182:	2000      	movs	r0, #0
 8001184:	f007 fc88 	bl	8008a98 <BSP_LED_Toggle>
    
    if (connected)
 8001188:	4b26      	ldr	r3, [pc, #152]	; (8001224 <User_Process+0xbc>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d042      	beq.n	8001216 <User_Process+0xae>
    {
      /* Set a random seed */
      srand(HAL_GetTick());
 8001190:	f007 fe54 	bl	8008e3c <HAL_GetTick>
 8001194:	4603      	mov	r3, r0
 8001196:	4618      	mov	r0, r3
 8001198:	f019 fac2 	bl	801a720 <srand>
	  
      /* Update emulated Environmental data */
      Set_Random_Environmental_Values(&data_t, &data_p);
 800119c:	463a      	mov	r2, r7
 800119e:	1d3b      	adds	r3, r7, #4
 80011a0:	4611      	mov	r1, r2
 80011a2:	4618      	mov	r0, r3
 80011a4:	f000 f84c 	bl	8001240 <Set_Random_Environmental_Values>
      BlueMS_Environmental_Update((int32_t)(data_p *100), (int16_t)(data_t * 10));
 80011a8:	edd7 7a00 	vldr	s15, [r7]
 80011ac:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001228 <User_Process+0xc0>
 80011b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011b4:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 80011b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80011bc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80011c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011c8:	ee17 3a90 	vmov	r3, s15
 80011cc:	b21b      	sxth	r3, r3
 80011ce:	4619      	mov	r1, r3
 80011d0:	ee16 0a90 	vmov	r0, s13
 80011d4:	f001 f9dc 	bl	8002590 <BlueMS_Environmental_Update>
	              
      /* Update emulated Acceleration, Gyroscope and Sensor Fusion data */
      Set_Random_Motion_Values(counter);
 80011d8:	4b14      	ldr	r3, [pc, #80]	; (800122c <User_Process+0xc4>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4618      	mov	r0, r3
 80011de:	f000 f8a9 	bl	8001334 <Set_Random_Motion_Values>
      Acc_Update(&x_axes, &g_axes, &m_axes);      
 80011e2:	4a13      	ldr	r2, [pc, #76]	; (8001230 <User_Process+0xc8>)
 80011e4:	4913      	ldr	r1, [pc, #76]	; (8001234 <User_Process+0xcc>)
 80011e6:	4814      	ldr	r0, [pc, #80]	; (8001238 <User_Process+0xd0>)
 80011e8:	f001 f828 	bl	800223c <Acc_Update>
      Quat_Update(&q_axes);
 80011ec:	4813      	ldr	r0, [pc, #76]	; (800123c <User_Process+0xd4>)
 80011ee:	f001 f8b7 	bl	8002360 <Quat_Update>
      
      counter ++;
 80011f2:	4b0e      	ldr	r3, [pc, #56]	; (800122c <User_Process+0xc4>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	3301      	adds	r3, #1
 80011f8:	4a0c      	ldr	r2, [pc, #48]	; (800122c <User_Process+0xc4>)
 80011fa:	6013      	str	r3, [r2, #0]
      if (counter == 40) {
 80011fc:	4b0b      	ldr	r3, [pc, #44]	; (800122c <User_Process+0xc4>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2b28      	cmp	r3, #40	; 0x28
 8001202:	d104      	bne.n	800120e <User_Process+0xa6>
        counter = 0;
 8001204:	4b09      	ldr	r3, [pc, #36]	; (800122c <User_Process+0xc4>)
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
        Reset_Motion_Values();
 800120a:	f000 fdb1 	bl	8001d70 <Reset_Motion_Values>
      }
#if !USE_BUTTON      
      HAL_Delay(1000); /* wait 1 sec before sending new data */
 800120e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001212:	f007 fe1f 	bl	8008e54 <HAL_Delay>
#if USE_BUTTON
    /* Reset the User Button flag */
    user_button_pressed = 0;
  }
#endif  
}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	200011c1 	.word	0x200011c1
 8001224:	200021bc 	.word	0x200021bc
 8001228:	42c80000 	.word	0x42c80000
 800122c:	200021b4 	.word	0x200021b4
 8001230:	200021d8 	.word	0x200021d8
 8001234:	200021cc 	.word	0x200021cc
 8001238:	200021c0 	.word	0x200021c0
 800123c:	200021e4 	.word	0x200021e4

08001240 <Set_Random_Environmental_Values>:
 * @param  float pointer to temperature data
 * @param  float pointer to pressure data
 * @retval None
 */
static void Set_Random_Environmental_Values(float *data_t, float *data_p)
{ 
 8001240:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]
  *data_t = 27.0 + ((uint64_t)rand()*5)/RAND_MAX;     /* T sensor emulation */
 800124a:	f019 fa8d 	bl	801a768 <rand>
 800124e:	4603      	mov	r3, r0
 8001250:	461d      	mov	r5, r3
 8001252:	ea4f 76e5 	mov.w	r6, r5, asr #31
 8001256:	4629      	mov	r1, r5
 8001258:	4632      	mov	r2, r6
 800125a:	f04f 0300 	mov.w	r3, #0
 800125e:	f04f 0400 	mov.w	r4, #0
 8001262:	0094      	lsls	r4, r2, #2
 8001264:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8001268:	008b      	lsls	r3, r1, #2
 800126a:	4619      	mov	r1, r3
 800126c:	4622      	mov	r2, r4
 800126e:	194b      	adds	r3, r1, r5
 8001270:	eb42 0406 	adc.w	r4, r2, r6
 8001274:	4618      	mov	r0, r3
 8001276:	4621      	mov	r1, r4
 8001278:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800127c:	f04f 0300 	mov.w	r3, #0
 8001280:	f7ff fcea 	bl	8000c58 <__aeabi_uldivmod>
 8001284:	4603      	mov	r3, r0
 8001286:	460c      	mov	r4, r1
 8001288:	4618      	mov	r0, r3
 800128a:	4621      	mov	r1, r4
 800128c:	f7ff f986 	bl	800059c <__aeabi_ul2d>
 8001290:	f04f 0200 	mov.w	r2, #0
 8001294:	4b25      	ldr	r3, [pc, #148]	; (800132c <Set_Random_Environmental_Values+0xec>)
 8001296:	f7ff f801 	bl	800029c <__adddf3>
 800129a:	4603      	mov	r3, r0
 800129c:	460c      	mov	r4, r1
 800129e:	4618      	mov	r0, r3
 80012a0:	4621      	mov	r1, r4
 80012a2:	f7ff fc89 	bl	8000bb8 <__aeabi_d2f>
 80012a6:	4602      	mov	r2, r0
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	601a      	str	r2, [r3, #0]
  *data_p = 1000.0 + ((uint64_t)rand()*80)/RAND_MAX; /* P sensor emulation */
 80012ac:	f019 fa5c 	bl	801a768 <rand>
 80012b0:	4603      	mov	r3, r0
 80012b2:	461d      	mov	r5, r3
 80012b4:	ea4f 76e5 	mov.w	r6, r5, asr #31
 80012b8:	462b      	mov	r3, r5
 80012ba:	4634      	mov	r4, r6
 80012bc:	f04f 0100 	mov.w	r1, #0
 80012c0:	f04f 0200 	mov.w	r2, #0
 80012c4:	00a2      	lsls	r2, r4, #2
 80012c6:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 80012ca:	0099      	lsls	r1, r3, #2
 80012cc:	460b      	mov	r3, r1
 80012ce:	4614      	mov	r4, r2
 80012d0:	195b      	adds	r3, r3, r5
 80012d2:	eb44 0406 	adc.w	r4, r4, r6
 80012d6:	f04f 0100 	mov.w	r1, #0
 80012da:	f04f 0200 	mov.w	r2, #0
 80012de:	0122      	lsls	r2, r4, #4
 80012e0:	ea42 7213 	orr.w	r2, r2, r3, lsr #28
 80012e4:	0119      	lsls	r1, r3, #4
 80012e6:	460b      	mov	r3, r1
 80012e8:	4614      	mov	r4, r2
 80012ea:	4618      	mov	r0, r3
 80012ec:	4621      	mov	r1, r4
 80012ee:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80012f2:	f04f 0300 	mov.w	r3, #0
 80012f6:	f7ff fcaf 	bl	8000c58 <__aeabi_uldivmod>
 80012fa:	4603      	mov	r3, r0
 80012fc:	460c      	mov	r4, r1
 80012fe:	4618      	mov	r0, r3
 8001300:	4621      	mov	r1, r4
 8001302:	f7ff f94b 	bl	800059c <__aeabi_ul2d>
 8001306:	f04f 0200 	mov.w	r2, #0
 800130a:	4b09      	ldr	r3, [pc, #36]	; (8001330 <Set_Random_Environmental_Values+0xf0>)
 800130c:	f7fe ffc6 	bl	800029c <__adddf3>
 8001310:	4603      	mov	r3, r0
 8001312:	460c      	mov	r4, r1
 8001314:	4618      	mov	r0, r3
 8001316:	4621      	mov	r1, r4
 8001318:	f7ff fc4e 	bl	8000bb8 <__aeabi_d2f>
 800131c:	4602      	mov	r2, r0
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	601a      	str	r2, [r3, #0]
}
 8001322:	bf00      	nop
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800132a:	bf00      	nop
 800132c:	403b0000 	.word	0x403b0000
 8001330:	408f4000 	.word	0x408f4000

08001334 <Set_Random_Motion_Values>:
 * @brief  Set random values for all motion sensor data
 * @param  uint32_t counter for changing the rotation direction
 * @retval None
 */
static void Set_Random_Motion_Values(uint32_t cnt)
{ 
 8001334:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  /* Update Acceleration, Gyroscope and Sensor Fusion data */
  if (cnt < 20) {
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2b13      	cmp	r3, #19
 8001340:	f200 827c 	bhi.w	800183c <Set_Random_Motion_Values+0x508>
    x_axes.AXIS_X +=  (10  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8001344:	f019 fa10 	bl	801a768 <rand>
 8001348:	4603      	mov	r3, r0
 800134a:	4619      	mov	r1, r3
 800134c:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f04f 0400 	mov.w	r4, #0
 8001356:	fb03 f502 	mul.w	r5, r3, r2
 800135a:	fb01 f004 	mul.w	r0, r1, r4
 800135e:	4428      	add	r0, r5
 8001360:	fba1 3403 	umull	r3, r4, r1, r3
 8001364:	1902      	adds	r2, r0, r4
 8001366:	4614      	mov	r4, r2
 8001368:	461d      	mov	r5, r3
 800136a:	4626      	mov	r6, r4
 800136c:	1969      	adds	r1, r5, r5
 800136e:	eb46 0206 	adc.w	r2, r6, r6
 8001372:	460d      	mov	r5, r1
 8001374:	4616      	mov	r6, r2
 8001376:	18e8      	adds	r0, r5, r3
 8001378:	eb46 0104 	adc.w	r1, r6, r4
 800137c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001380:	f04f 0300 	mov.w	r3, #0
 8001384:	f7ff fc68 	bl	8000c58 <__aeabi_uldivmod>
 8001388:	4603      	mov	r3, r0
 800138a:	460c      	mov	r4, r1
 800138c:	4619      	mov	r1, r3
 800138e:	4622      	mov	r2, r4
 8001390:	f111 030a 	adds.w	r3, r1, #10
 8001394:	f142 0400 	adc.w	r4, r2, #0
 8001398:	4ae0      	ldr	r2, [pc, #896]	; (800171c <Set_Random_Motion_Values+0x3e8>)
 800139a:	6812      	ldr	r2, [r2, #0]
 800139c:	4413      	add	r3, r2
 800139e:	461a      	mov	r2, r3
 80013a0:	4bde      	ldr	r3, [pc, #888]	; (800171c <Set_Random_Motion_Values+0x3e8>)
 80013a2:	601a      	str	r2, [r3, #0]
    x_axes.AXIS_Y += -(10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 80013a4:	f019 f9e0 	bl	801a768 <rand>
 80013a8:	4603      	mov	r3, r0
 80013aa:	4619      	mov	r1, r3
 80013ac:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f04f 0400 	mov.w	r4, #0
 80013b6:	fb03 f502 	mul.w	r5, r3, r2
 80013ba:	fb01 f004 	mul.w	r0, r1, r4
 80013be:	4428      	add	r0, r5
 80013c0:	fba1 5603 	umull	r5, r6, r1, r3
 80013c4:	1983      	adds	r3, r0, r6
 80013c6:	461e      	mov	r6, r3
 80013c8:	4629      	mov	r1, r5
 80013ca:	4632      	mov	r2, r6
 80013cc:	f04f 0300 	mov.w	r3, #0
 80013d0:	f04f 0400 	mov.w	r4, #0
 80013d4:	0094      	lsls	r4, r2, #2
 80013d6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80013da:	008b      	lsls	r3, r1, #2
 80013dc:	4619      	mov	r1, r3
 80013de:	4622      	mov	r2, r4
 80013e0:	194b      	adds	r3, r1, r5
 80013e2:	eb42 0406 	adc.w	r4, r2, r6
 80013e6:	4618      	mov	r0, r3
 80013e8:	4621      	mov	r1, r4
 80013ea:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80013ee:	f04f 0300 	mov.w	r3, #0
 80013f2:	f7ff fc31 	bl	8000c58 <__aeabi_uldivmod>
 80013f6:	4603      	mov	r3, r0
 80013f8:	460c      	mov	r4, r1
 80013fa:	4619      	mov	r1, r3
 80013fc:	4622      	mov	r2, r4
 80013fe:	f06f 0309 	mvn.w	r3, #9
 8001402:	f04f 34ff 	mov.w	r4, #4294967295
 8001406:	1a5b      	subs	r3, r3, r1
 8001408:	eb64 0402 	sbc.w	r4, r4, r2
 800140c:	461d      	mov	r5, r3
 800140e:	4626      	mov	r6, r4
 8001410:	4ac2      	ldr	r2, [pc, #776]	; (800171c <Set_Random_Motion_Values+0x3e8>)
 8001412:	6852      	ldr	r2, [r2, #4]
 8001414:	462b      	mov	r3, r5
 8001416:	4413      	add	r3, r2
 8001418:	461a      	mov	r2, r3
 800141a:	4bc0      	ldr	r3, [pc, #768]	; (800171c <Set_Random_Motion_Values+0x3e8>)
 800141c:	605a      	str	r2, [r3, #4]
    x_axes.AXIS_Z +=  (10  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 800141e:	f019 f9a3 	bl	801a768 <rand>
 8001422:	4603      	mov	r3, r0
 8001424:	4619      	mov	r1, r3
 8001426:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	f04f 0400 	mov.w	r4, #0
 8001430:	fb03 f502 	mul.w	r5, r3, r2
 8001434:	fb01 f004 	mul.w	r0, r1, r4
 8001438:	4428      	add	r0, r5
 800143a:	fba1 5603 	umull	r5, r6, r1, r3
 800143e:	1983      	adds	r3, r0, r6
 8001440:	461e      	mov	r6, r3
 8001442:	4629      	mov	r1, r5
 8001444:	4632      	mov	r2, r6
 8001446:	f04f 0300 	mov.w	r3, #0
 800144a:	f04f 0400 	mov.w	r4, #0
 800144e:	00d4      	lsls	r4, r2, #3
 8001450:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001454:	00cb      	lsls	r3, r1, #3
 8001456:	4619      	mov	r1, r3
 8001458:	4622      	mov	r2, r4
 800145a:	1b49      	subs	r1, r1, r5
 800145c:	eb62 0206 	sbc.w	r2, r2, r6
 8001460:	4608      	mov	r0, r1
 8001462:	4611      	mov	r1, r2
 8001464:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001468:	f04f 0300 	mov.w	r3, #0
 800146c:	f7ff fbf4 	bl	8000c58 <__aeabi_uldivmod>
 8001470:	4603      	mov	r3, r0
 8001472:	460c      	mov	r4, r1
 8001474:	4619      	mov	r1, r3
 8001476:	4622      	mov	r2, r4
 8001478:	f111 030a 	adds.w	r3, r1, #10
 800147c:	f142 0400 	adc.w	r4, r2, #0
 8001480:	4aa6      	ldr	r2, [pc, #664]	; (800171c <Set_Random_Motion_Values+0x3e8>)
 8001482:	6892      	ldr	r2, [r2, #8]
 8001484:	4413      	add	r3, r2
 8001486:	461a      	mov	r2, r3
 8001488:	4ba4      	ldr	r3, [pc, #656]	; (800171c <Set_Random_Motion_Values+0x3e8>)
 800148a:	609a      	str	r2, [r3, #8]
    g_axes.AXIS_X +=  (100 + ((uint64_t)rand()*2*cnt)/RAND_MAX);
 800148c:	f019 f96c 	bl	801a768 <rand>
 8001490:	4603      	mov	r3, r0
 8001492:	4619      	mov	r1, r3
 8001494:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f04f 0400 	mov.w	r4, #0
 800149e:	fb03 f502 	mul.w	r5, r3, r2
 80014a2:	fb01 f004 	mul.w	r0, r1, r4
 80014a6:	4428      	add	r0, r5
 80014a8:	fba1 5603 	umull	r5, r6, r1, r3
 80014ac:	1982      	adds	r2, r0, r6
 80014ae:	4616      	mov	r6, r2
 80014b0:	196b      	adds	r3, r5, r5
 80014b2:	eb46 0406 	adc.w	r4, r6, r6
 80014b6:	4618      	mov	r0, r3
 80014b8:	4621      	mov	r1, r4
 80014ba:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80014be:	f04f 0300 	mov.w	r3, #0
 80014c2:	f7ff fbc9 	bl	8000c58 <__aeabi_uldivmod>
 80014c6:	4603      	mov	r3, r0
 80014c8:	460c      	mov	r4, r1
 80014ca:	4619      	mov	r1, r3
 80014cc:	4622      	mov	r2, r4
 80014ce:	f111 0364 	adds.w	r3, r1, #100	; 0x64
 80014d2:	f142 0400 	adc.w	r4, r2, #0
 80014d6:	4a92      	ldr	r2, [pc, #584]	; (8001720 <Set_Random_Motion_Values+0x3ec>)
 80014d8:	6812      	ldr	r2, [r2, #0]
 80014da:	4413      	add	r3, r2
 80014dc:	461a      	mov	r2, r3
 80014de:	4b90      	ldr	r3, [pc, #576]	; (8001720 <Set_Random_Motion_Values+0x3ec>)
 80014e0:	601a      	str	r2, [r3, #0]
    g_axes.AXIS_Y += -(100 + ((uint64_t)rand()*4*cnt)/RAND_MAX);
 80014e2:	f019 f941 	bl	801a768 <rand>
 80014e6:	4603      	mov	r3, r0
 80014e8:	4619      	mov	r1, r3
 80014ea:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f04f 0400 	mov.w	r4, #0
 80014f4:	fb03 f502 	mul.w	r5, r3, r2
 80014f8:	fb01 f004 	mul.w	r0, r1, r4
 80014fc:	4428      	add	r0, r5
 80014fe:	fba1 3403 	umull	r3, r4, r1, r3
 8001502:	1902      	adds	r2, r0, r4
 8001504:	4614      	mov	r4, r2
 8001506:	f04f 0000 	mov.w	r0, #0
 800150a:	f04f 0100 	mov.w	r1, #0
 800150e:	00a1      	lsls	r1, r4, #2
 8001510:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 8001514:	0098      	lsls	r0, r3, #2
 8001516:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800151a:	f04f 0300 	mov.w	r3, #0
 800151e:	f7ff fb9b 	bl	8000c58 <__aeabi_uldivmod>
 8001522:	4603      	mov	r3, r0
 8001524:	460c      	mov	r4, r1
 8001526:	4619      	mov	r1, r3
 8001528:	4622      	mov	r2, r4
 800152a:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800152e:	f04f 34ff 	mov.w	r4, #4294967295
 8001532:	1a5b      	subs	r3, r3, r1
 8001534:	eb64 0402 	sbc.w	r4, r4, r2
 8001538:	461d      	mov	r5, r3
 800153a:	4626      	mov	r6, r4
 800153c:	4a78      	ldr	r2, [pc, #480]	; (8001720 <Set_Random_Motion_Values+0x3ec>)
 800153e:	6852      	ldr	r2, [r2, #4]
 8001540:	462b      	mov	r3, r5
 8001542:	4413      	add	r3, r2
 8001544:	461a      	mov	r2, r3
 8001546:	4b76      	ldr	r3, [pc, #472]	; (8001720 <Set_Random_Motion_Values+0x3ec>)
 8001548:	605a      	str	r2, [r3, #4]
    g_axes.AXIS_Z +=  (100 + ((uint64_t)rand()*6*cnt)/RAND_MAX);
 800154a:	f019 f90d 	bl	801a768 <rand>
 800154e:	4603      	mov	r3, r0
 8001550:	4619      	mov	r1, r3
 8001552:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f04f 0400 	mov.w	r4, #0
 800155c:	fb03 f502 	mul.w	r5, r3, r2
 8001560:	fb01 f004 	mul.w	r0, r1, r4
 8001564:	4428      	add	r0, r5
 8001566:	fba1 1203 	umull	r1, r2, r1, r3
 800156a:	1883      	adds	r3, r0, r2
 800156c:	461a      	mov	r2, r3
 800156e:	460d      	mov	r5, r1
 8001570:	4616      	mov	r6, r2
 8001572:	196b      	adds	r3, r5, r5
 8001574:	eb46 0406 	adc.w	r4, r6, r6
 8001578:	461d      	mov	r5, r3
 800157a:	4626      	mov	r6, r4
 800157c:	186d      	adds	r5, r5, r1
 800157e:	eb46 0602 	adc.w	r6, r6, r2
 8001582:	196b      	adds	r3, r5, r5
 8001584:	eb46 0406 	adc.w	r4, r6, r6
 8001588:	461d      	mov	r5, r3
 800158a:	4626      	mov	r6, r4
 800158c:	4628      	mov	r0, r5
 800158e:	4631      	mov	r1, r6
 8001590:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001594:	f04f 0300 	mov.w	r3, #0
 8001598:	f7ff fb5e 	bl	8000c58 <__aeabi_uldivmod>
 800159c:	4603      	mov	r3, r0
 800159e:	460c      	mov	r4, r1
 80015a0:	4619      	mov	r1, r3
 80015a2:	4622      	mov	r2, r4
 80015a4:	f111 0364 	adds.w	r3, r1, #100	; 0x64
 80015a8:	f142 0400 	adc.w	r4, r2, #0
 80015ac:	4a5c      	ldr	r2, [pc, #368]	; (8001720 <Set_Random_Motion_Values+0x3ec>)
 80015ae:	6892      	ldr	r2, [r2, #8]
 80015b0:	4413      	add	r3, r2
 80015b2:	461a      	mov	r2, r3
 80015b4:	4b5a      	ldr	r3, [pc, #360]	; (8001720 <Set_Random_Motion_Values+0x3ec>)
 80015b6:	609a      	str	r2, [r3, #8]
    m_axes.AXIS_X +=  (3  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 80015b8:	f019 f8d6 	bl	801a768 <rand>
 80015bc:	4603      	mov	r3, r0
 80015be:	4619      	mov	r1, r3
 80015c0:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f04f 0400 	mov.w	r4, #0
 80015ca:	fb03 f502 	mul.w	r5, r3, r2
 80015ce:	fb01 f004 	mul.w	r0, r1, r4
 80015d2:	4428      	add	r0, r5
 80015d4:	fba1 3403 	umull	r3, r4, r1, r3
 80015d8:	1902      	adds	r2, r0, r4
 80015da:	4614      	mov	r4, r2
 80015dc:	461d      	mov	r5, r3
 80015de:	4626      	mov	r6, r4
 80015e0:	1969      	adds	r1, r5, r5
 80015e2:	eb46 0206 	adc.w	r2, r6, r6
 80015e6:	460d      	mov	r5, r1
 80015e8:	4616      	mov	r6, r2
 80015ea:	18e8      	adds	r0, r5, r3
 80015ec:	eb46 0104 	adc.w	r1, r6, r4
 80015f0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80015f4:	f04f 0300 	mov.w	r3, #0
 80015f8:	f7ff fb2e 	bl	8000c58 <__aeabi_uldivmod>
 80015fc:	4603      	mov	r3, r0
 80015fe:	460c      	mov	r4, r1
 8001600:	4619      	mov	r1, r3
 8001602:	4622      	mov	r2, r4
 8001604:	1ccb      	adds	r3, r1, #3
 8001606:	f142 0400 	adc.w	r4, r2, #0
 800160a:	4a46      	ldr	r2, [pc, #280]	; (8001724 <Set_Random_Motion_Values+0x3f0>)
 800160c:	6812      	ldr	r2, [r2, #0]
 800160e:	4413      	add	r3, r2
 8001610:	461a      	mov	r2, r3
 8001612:	4b44      	ldr	r3, [pc, #272]	; (8001724 <Set_Random_Motion_Values+0x3f0>)
 8001614:	601a      	str	r2, [r3, #0]
    m_axes.AXIS_Y += -(3  + ((uint64_t)rand()*4*cnt)/RAND_MAX);
 8001616:	f019 f8a7 	bl	801a768 <rand>
 800161a:	4603      	mov	r3, r0
 800161c:	4619      	mov	r1, r3
 800161e:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f04f 0400 	mov.w	r4, #0
 8001628:	fb03 f502 	mul.w	r5, r3, r2
 800162c:	fb01 f004 	mul.w	r0, r1, r4
 8001630:	4428      	add	r0, r5
 8001632:	fba1 3403 	umull	r3, r4, r1, r3
 8001636:	1902      	adds	r2, r0, r4
 8001638:	4614      	mov	r4, r2
 800163a:	f04f 0000 	mov.w	r0, #0
 800163e:	f04f 0100 	mov.w	r1, #0
 8001642:	00a1      	lsls	r1, r4, #2
 8001644:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 8001648:	0098      	lsls	r0, r3, #2
 800164a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800164e:	f04f 0300 	mov.w	r3, #0
 8001652:	f7ff fb01 	bl	8000c58 <__aeabi_uldivmod>
 8001656:	4603      	mov	r3, r0
 8001658:	460c      	mov	r4, r1
 800165a:	4619      	mov	r1, r3
 800165c:	4622      	mov	r2, r4
 800165e:	f06f 0302 	mvn.w	r3, #2
 8001662:	f04f 34ff 	mov.w	r4, #4294967295
 8001666:	1a5b      	subs	r3, r3, r1
 8001668:	eb64 0402 	sbc.w	r4, r4, r2
 800166c:	461d      	mov	r5, r3
 800166e:	4626      	mov	r6, r4
 8001670:	4a2c      	ldr	r2, [pc, #176]	; (8001724 <Set_Random_Motion_Values+0x3f0>)
 8001672:	6852      	ldr	r2, [r2, #4]
 8001674:	462b      	mov	r3, r5
 8001676:	4413      	add	r3, r2
 8001678:	461a      	mov	r2, r3
 800167a:	4b2a      	ldr	r3, [pc, #168]	; (8001724 <Set_Random_Motion_Values+0x3f0>)
 800167c:	605a      	str	r2, [r3, #4]
    m_axes.AXIS_Z +=  (3  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 800167e:	f019 f873 	bl	801a768 <rand>
 8001682:	4603      	mov	r3, r0
 8001684:	4619      	mov	r1, r3
 8001686:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	f04f 0400 	mov.w	r4, #0
 8001690:	fb03 f502 	mul.w	r5, r3, r2
 8001694:	fb01 f004 	mul.w	r0, r1, r4
 8001698:	4428      	add	r0, r5
 800169a:	fba1 5603 	umull	r5, r6, r1, r3
 800169e:	1983      	adds	r3, r0, r6
 80016a0:	461e      	mov	r6, r3
 80016a2:	4629      	mov	r1, r5
 80016a4:	4632      	mov	r2, r6
 80016a6:	f04f 0300 	mov.w	r3, #0
 80016aa:	f04f 0400 	mov.w	r4, #0
 80016ae:	0094      	lsls	r4, r2, #2
 80016b0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80016b4:	008b      	lsls	r3, r1, #2
 80016b6:	4619      	mov	r1, r3
 80016b8:	4622      	mov	r2, r4
 80016ba:	194b      	adds	r3, r1, r5
 80016bc:	eb42 0406 	adc.w	r4, r2, r6
 80016c0:	4618      	mov	r0, r3
 80016c2:	4621      	mov	r1, r4
 80016c4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80016c8:	f04f 0300 	mov.w	r3, #0
 80016cc:	f7ff fac4 	bl	8000c58 <__aeabi_uldivmod>
 80016d0:	4603      	mov	r3, r0
 80016d2:	460c      	mov	r4, r1
 80016d4:	4619      	mov	r1, r3
 80016d6:	4622      	mov	r2, r4
 80016d8:	1ccb      	adds	r3, r1, #3
 80016da:	f142 0400 	adc.w	r4, r2, #0
 80016de:	4a11      	ldr	r2, [pc, #68]	; (8001724 <Set_Random_Motion_Values+0x3f0>)
 80016e0:	6892      	ldr	r2, [r2, #8]
 80016e2:	4413      	add	r3, r2
 80016e4:	461a      	mov	r2, r3
 80016e6:	4b0f      	ldr	r3, [pc, #60]	; (8001724 <Set_Random_Motion_Values+0x3f0>)
 80016e8:	609a      	str	r2, [r3, #8]
    
    q_axes.AXIS_X -= (100  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 80016ea:	f019 f83d 	bl	801a768 <rand>
 80016ee:	4603      	mov	r3, r0
 80016f0:	4619      	mov	r1, r3
 80016f2:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	f04f 0400 	mov.w	r4, #0
 80016fc:	fb03 f502 	mul.w	r5, r3, r2
 8001700:	fb01 f004 	mul.w	r0, r1, r4
 8001704:	4428      	add	r0, r5
 8001706:	fba1 3403 	umull	r3, r4, r1, r3
 800170a:	1902      	adds	r2, r0, r4
 800170c:	4614      	mov	r4, r2
 800170e:	461d      	mov	r5, r3
 8001710:	4626      	mov	r6, r4
 8001712:	1969      	adds	r1, r5, r5
 8001714:	eb46 0206 	adc.w	r2, r6, r6
 8001718:	e006      	b.n	8001728 <Set_Random_Motion_Values+0x3f4>
 800171a:	bf00      	nop
 800171c:	200021c0 	.word	0x200021c0
 8001720:	200021cc 	.word	0x200021cc
 8001724:	200021d8 	.word	0x200021d8
 8001728:	460d      	mov	r5, r1
 800172a:	4616      	mov	r6, r2
 800172c:	18e8      	adds	r0, r5, r3
 800172e:	eb46 0104 	adc.w	r1, r6, r4
 8001732:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001736:	f04f 0300 	mov.w	r3, #0
 800173a:	f7ff fa8d 	bl	8000c58 <__aeabi_uldivmod>
 800173e:	4603      	mov	r3, r0
 8001740:	460c      	mov	r4, r1
 8001742:	4619      	mov	r1, r3
 8001744:	4622      	mov	r2, r4
 8001746:	f111 0364 	adds.w	r3, r1, #100	; 0x64
 800174a:	f142 0400 	adc.w	r4, r2, #0
 800174e:	4a3a      	ldr	r2, [pc, #232]	; (8001838 <Set_Random_Motion_Values+0x504>)
 8001750:	6812      	ldr	r2, [r2, #0]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	461a      	mov	r2, r3
 8001756:	4b38      	ldr	r3, [pc, #224]	; (8001838 <Set_Random_Motion_Values+0x504>)
 8001758:	601a      	str	r2, [r3, #0]
    q_axes.AXIS_Y += (100  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 800175a:	f019 f805 	bl	801a768 <rand>
 800175e:	4603      	mov	r3, r0
 8001760:	4619      	mov	r1, r3
 8001762:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	f04f 0400 	mov.w	r4, #0
 800176c:	fb03 f502 	mul.w	r5, r3, r2
 8001770:	fb01 f004 	mul.w	r0, r1, r4
 8001774:	4428      	add	r0, r5
 8001776:	fba1 5603 	umull	r5, r6, r1, r3
 800177a:	1983      	adds	r3, r0, r6
 800177c:	461e      	mov	r6, r3
 800177e:	4629      	mov	r1, r5
 8001780:	4632      	mov	r2, r6
 8001782:	f04f 0300 	mov.w	r3, #0
 8001786:	f04f 0400 	mov.w	r4, #0
 800178a:	0094      	lsls	r4, r2, #2
 800178c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8001790:	008b      	lsls	r3, r1, #2
 8001792:	4619      	mov	r1, r3
 8001794:	4622      	mov	r2, r4
 8001796:	194b      	adds	r3, r1, r5
 8001798:	eb42 0406 	adc.w	r4, r2, r6
 800179c:	4618      	mov	r0, r3
 800179e:	4621      	mov	r1, r4
 80017a0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80017a4:	f04f 0300 	mov.w	r3, #0
 80017a8:	f7ff fa56 	bl	8000c58 <__aeabi_uldivmod>
 80017ac:	4603      	mov	r3, r0
 80017ae:	460c      	mov	r4, r1
 80017b0:	4619      	mov	r1, r3
 80017b2:	4622      	mov	r2, r4
 80017b4:	f111 0364 	adds.w	r3, r1, #100	; 0x64
 80017b8:	f142 0400 	adc.w	r4, r2, #0
 80017bc:	4a1e      	ldr	r2, [pc, #120]	; (8001838 <Set_Random_Motion_Values+0x504>)
 80017be:	6852      	ldr	r2, [r2, #4]
 80017c0:	4413      	add	r3, r2
 80017c2:	461a      	mov	r2, r3
 80017c4:	4b1c      	ldr	r3, [pc, #112]	; (8001838 <Set_Random_Motion_Values+0x504>)
 80017c6:	605a      	str	r2, [r3, #4]
    q_axes.AXIS_Z -= (100  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 80017c8:	f018 ffce 	bl	801a768 <rand>
 80017cc:	4603      	mov	r3, r0
 80017ce:	4619      	mov	r1, r3
 80017d0:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f04f 0400 	mov.w	r4, #0
 80017da:	fb03 f502 	mul.w	r5, r3, r2
 80017de:	fb01 f004 	mul.w	r0, r1, r4
 80017e2:	4428      	add	r0, r5
 80017e4:	fba1 5603 	umull	r5, r6, r1, r3
 80017e8:	1983      	adds	r3, r0, r6
 80017ea:	461e      	mov	r6, r3
 80017ec:	4629      	mov	r1, r5
 80017ee:	4632      	mov	r2, r6
 80017f0:	f04f 0300 	mov.w	r3, #0
 80017f4:	f04f 0400 	mov.w	r4, #0
 80017f8:	00d4      	lsls	r4, r2, #3
 80017fa:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80017fe:	00cb      	lsls	r3, r1, #3
 8001800:	4619      	mov	r1, r3
 8001802:	4622      	mov	r2, r4
 8001804:	1b49      	subs	r1, r1, r5
 8001806:	eb62 0206 	sbc.w	r2, r2, r6
 800180a:	4608      	mov	r0, r1
 800180c:	4611      	mov	r1, r2
 800180e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001812:	f04f 0300 	mov.w	r3, #0
 8001816:	f7ff fa1f 	bl	8000c58 <__aeabi_uldivmod>
 800181a:	4603      	mov	r3, r0
 800181c:	460c      	mov	r4, r1
 800181e:	4619      	mov	r1, r3
 8001820:	4622      	mov	r2, r4
 8001822:	f111 0364 	adds.w	r3, r1, #100	; 0x64
 8001826:	f142 0400 	adc.w	r4, r2, #0
 800182a:	4a03      	ldr	r2, [pc, #12]	; (8001838 <Set_Random_Motion_Values+0x504>)
 800182c:	6892      	ldr	r2, [r2, #8]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	461a      	mov	r2, r3
 8001832:	4b01      	ldr	r3, [pc, #4]	; (8001838 <Set_Random_Motion_Values+0x504>)
 8001834:	609a      	str	r2, [r3, #8]
    q_axes.AXIS_X += (200 + ((uint64_t)rand()*7*cnt)/RAND_MAX);
    q_axes.AXIS_Y -= (150 + ((uint64_t)rand()*3*cnt)/RAND_MAX);
    q_axes.AXIS_Z += (10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
  }
  
}
 8001836:	e295      	b.n	8001d64 <Set_Random_Motion_Values+0xa30>
 8001838:	200021e4 	.word	0x200021e4
    x_axes.AXIS_X += -(10  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 800183c:	f018 ff94 	bl	801a768 <rand>
 8001840:	4603      	mov	r3, r0
 8001842:	4619      	mov	r1, r3
 8001844:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f04f 0400 	mov.w	r4, #0
 800184e:	fb03 f502 	mul.w	r5, r3, r2
 8001852:	fb01 f004 	mul.w	r0, r1, r4
 8001856:	4428      	add	r0, r5
 8001858:	fba1 3403 	umull	r3, r4, r1, r3
 800185c:	1902      	adds	r2, r0, r4
 800185e:	4614      	mov	r4, r2
 8001860:	461d      	mov	r5, r3
 8001862:	4626      	mov	r6, r4
 8001864:	1969      	adds	r1, r5, r5
 8001866:	eb46 0206 	adc.w	r2, r6, r6
 800186a:	460d      	mov	r5, r1
 800186c:	4616      	mov	r6, r2
 800186e:	18e8      	adds	r0, r5, r3
 8001870:	eb46 0104 	adc.w	r1, r6, r4
 8001874:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001878:	f04f 0300 	mov.w	r3, #0
 800187c:	f7ff f9ec 	bl	8000c58 <__aeabi_uldivmod>
 8001880:	4603      	mov	r3, r0
 8001882:	460c      	mov	r4, r1
 8001884:	4619      	mov	r1, r3
 8001886:	4622      	mov	r2, r4
 8001888:	f06f 0309 	mvn.w	r3, #9
 800188c:	f04f 34ff 	mov.w	r4, #4294967295
 8001890:	1a5b      	subs	r3, r3, r1
 8001892:	eb64 0402 	sbc.w	r4, r4, r2
 8001896:	461d      	mov	r5, r3
 8001898:	4626      	mov	r6, r4
 800189a:	4ae0      	ldr	r2, [pc, #896]	; (8001c1c <Set_Random_Motion_Values+0x8e8>)
 800189c:	6812      	ldr	r2, [r2, #0]
 800189e:	462b      	mov	r3, r5
 80018a0:	4413      	add	r3, r2
 80018a2:	461a      	mov	r2, r3
 80018a4:	4bdd      	ldr	r3, [pc, #884]	; (8001c1c <Set_Random_Motion_Values+0x8e8>)
 80018a6:	601a      	str	r2, [r3, #0]
    x_axes.AXIS_Y +=  (10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 80018a8:	f018 ff5e 	bl	801a768 <rand>
 80018ac:	4603      	mov	r3, r0
 80018ae:	4619      	mov	r1, r3
 80018b0:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f04f 0400 	mov.w	r4, #0
 80018ba:	fb03 f502 	mul.w	r5, r3, r2
 80018be:	fb01 f004 	mul.w	r0, r1, r4
 80018c2:	4428      	add	r0, r5
 80018c4:	fba1 5603 	umull	r5, r6, r1, r3
 80018c8:	1983      	adds	r3, r0, r6
 80018ca:	461e      	mov	r6, r3
 80018cc:	4629      	mov	r1, r5
 80018ce:	4632      	mov	r2, r6
 80018d0:	f04f 0300 	mov.w	r3, #0
 80018d4:	f04f 0400 	mov.w	r4, #0
 80018d8:	0094      	lsls	r4, r2, #2
 80018da:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80018de:	008b      	lsls	r3, r1, #2
 80018e0:	4619      	mov	r1, r3
 80018e2:	4622      	mov	r2, r4
 80018e4:	194b      	adds	r3, r1, r5
 80018e6:	eb42 0406 	adc.w	r4, r2, r6
 80018ea:	4618      	mov	r0, r3
 80018ec:	4621      	mov	r1, r4
 80018ee:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80018f2:	f04f 0300 	mov.w	r3, #0
 80018f6:	f7ff f9af 	bl	8000c58 <__aeabi_uldivmod>
 80018fa:	4603      	mov	r3, r0
 80018fc:	460c      	mov	r4, r1
 80018fe:	4619      	mov	r1, r3
 8001900:	4622      	mov	r2, r4
 8001902:	f111 030a 	adds.w	r3, r1, #10
 8001906:	f142 0400 	adc.w	r4, r2, #0
 800190a:	4ac4      	ldr	r2, [pc, #784]	; (8001c1c <Set_Random_Motion_Values+0x8e8>)
 800190c:	6852      	ldr	r2, [r2, #4]
 800190e:	4413      	add	r3, r2
 8001910:	461a      	mov	r2, r3
 8001912:	4bc2      	ldr	r3, [pc, #776]	; (8001c1c <Set_Random_Motion_Values+0x8e8>)
 8001914:	605a      	str	r2, [r3, #4]
    x_axes.AXIS_Z += -(10  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8001916:	f018 ff27 	bl	801a768 <rand>
 800191a:	4603      	mov	r3, r0
 800191c:	4619      	mov	r1, r3
 800191e:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f04f 0400 	mov.w	r4, #0
 8001928:	fb03 f502 	mul.w	r5, r3, r2
 800192c:	fb01 f004 	mul.w	r0, r1, r4
 8001930:	4428      	add	r0, r5
 8001932:	fba1 5603 	umull	r5, r6, r1, r3
 8001936:	1983      	adds	r3, r0, r6
 8001938:	461e      	mov	r6, r3
 800193a:	4629      	mov	r1, r5
 800193c:	4632      	mov	r2, r6
 800193e:	f04f 0300 	mov.w	r3, #0
 8001942:	f04f 0400 	mov.w	r4, #0
 8001946:	00d4      	lsls	r4, r2, #3
 8001948:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800194c:	00cb      	lsls	r3, r1, #3
 800194e:	4619      	mov	r1, r3
 8001950:	4622      	mov	r2, r4
 8001952:	1b49      	subs	r1, r1, r5
 8001954:	eb62 0206 	sbc.w	r2, r2, r6
 8001958:	4608      	mov	r0, r1
 800195a:	4611      	mov	r1, r2
 800195c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001960:	f04f 0300 	mov.w	r3, #0
 8001964:	f7ff f978 	bl	8000c58 <__aeabi_uldivmod>
 8001968:	4603      	mov	r3, r0
 800196a:	460c      	mov	r4, r1
 800196c:	4619      	mov	r1, r3
 800196e:	4622      	mov	r2, r4
 8001970:	f06f 0309 	mvn.w	r3, #9
 8001974:	f04f 34ff 	mov.w	r4, #4294967295
 8001978:	1a5b      	subs	r3, r3, r1
 800197a:	eb64 0402 	sbc.w	r4, r4, r2
 800197e:	461d      	mov	r5, r3
 8001980:	4626      	mov	r6, r4
 8001982:	4aa6      	ldr	r2, [pc, #664]	; (8001c1c <Set_Random_Motion_Values+0x8e8>)
 8001984:	6892      	ldr	r2, [r2, #8]
 8001986:	462b      	mov	r3, r5
 8001988:	4413      	add	r3, r2
 800198a:	461a      	mov	r2, r3
 800198c:	4ba3      	ldr	r3, [pc, #652]	; (8001c1c <Set_Random_Motion_Values+0x8e8>)
 800198e:	609a      	str	r2, [r3, #8]
    g_axes.AXIS_X += -(100 + ((uint64_t)rand()*2*cnt)/RAND_MAX);
 8001990:	f018 feea 	bl	801a768 <rand>
 8001994:	4603      	mov	r3, r0
 8001996:	4619      	mov	r1, r3
 8001998:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f04f 0400 	mov.w	r4, #0
 80019a2:	fb03 f502 	mul.w	r5, r3, r2
 80019a6:	fb01 f004 	mul.w	r0, r1, r4
 80019aa:	4428      	add	r0, r5
 80019ac:	fba1 5603 	umull	r5, r6, r1, r3
 80019b0:	1982      	adds	r2, r0, r6
 80019b2:	4616      	mov	r6, r2
 80019b4:	196b      	adds	r3, r5, r5
 80019b6:	eb46 0406 	adc.w	r4, r6, r6
 80019ba:	4618      	mov	r0, r3
 80019bc:	4621      	mov	r1, r4
 80019be:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80019c2:	f04f 0300 	mov.w	r3, #0
 80019c6:	f7ff f947 	bl	8000c58 <__aeabi_uldivmod>
 80019ca:	4603      	mov	r3, r0
 80019cc:	460c      	mov	r4, r1
 80019ce:	4619      	mov	r1, r3
 80019d0:	4622      	mov	r2, r4
 80019d2:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80019d6:	f04f 34ff 	mov.w	r4, #4294967295
 80019da:	1a5b      	subs	r3, r3, r1
 80019dc:	eb64 0402 	sbc.w	r4, r4, r2
 80019e0:	461d      	mov	r5, r3
 80019e2:	4626      	mov	r6, r4
 80019e4:	4a8e      	ldr	r2, [pc, #568]	; (8001c20 <Set_Random_Motion_Values+0x8ec>)
 80019e6:	6812      	ldr	r2, [r2, #0]
 80019e8:	462b      	mov	r3, r5
 80019ea:	4413      	add	r3, r2
 80019ec:	461a      	mov	r2, r3
 80019ee:	4b8c      	ldr	r3, [pc, #560]	; (8001c20 <Set_Random_Motion_Values+0x8ec>)
 80019f0:	601a      	str	r2, [r3, #0]
    g_axes.AXIS_Y +=  (100 + ((uint64_t)rand()*4*cnt)/RAND_MAX);
 80019f2:	f018 feb9 	bl	801a768 <rand>
 80019f6:	4603      	mov	r3, r0
 80019f8:	4619      	mov	r1, r3
 80019fa:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f04f 0400 	mov.w	r4, #0
 8001a04:	fb03 f502 	mul.w	r5, r3, r2
 8001a08:	fb01 f004 	mul.w	r0, r1, r4
 8001a0c:	4428      	add	r0, r5
 8001a0e:	fba1 3403 	umull	r3, r4, r1, r3
 8001a12:	1902      	adds	r2, r0, r4
 8001a14:	4614      	mov	r4, r2
 8001a16:	f04f 0000 	mov.w	r0, #0
 8001a1a:	f04f 0100 	mov.w	r1, #0
 8001a1e:	00a1      	lsls	r1, r4, #2
 8001a20:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 8001a24:	0098      	lsls	r0, r3, #2
 8001a26:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001a2a:	f04f 0300 	mov.w	r3, #0
 8001a2e:	f7ff f913 	bl	8000c58 <__aeabi_uldivmod>
 8001a32:	4603      	mov	r3, r0
 8001a34:	460c      	mov	r4, r1
 8001a36:	4619      	mov	r1, r3
 8001a38:	4622      	mov	r2, r4
 8001a3a:	f111 0364 	adds.w	r3, r1, #100	; 0x64
 8001a3e:	f142 0400 	adc.w	r4, r2, #0
 8001a42:	4a77      	ldr	r2, [pc, #476]	; (8001c20 <Set_Random_Motion_Values+0x8ec>)
 8001a44:	6852      	ldr	r2, [r2, #4]
 8001a46:	4413      	add	r3, r2
 8001a48:	461a      	mov	r2, r3
 8001a4a:	4b75      	ldr	r3, [pc, #468]	; (8001c20 <Set_Random_Motion_Values+0x8ec>)
 8001a4c:	605a      	str	r2, [r3, #4]
    g_axes.AXIS_Z += -(100 + ((uint64_t)rand()*6*cnt)/RAND_MAX);
 8001a4e:	f018 fe8b 	bl	801a768 <rand>
 8001a52:	4603      	mov	r3, r0
 8001a54:	4619      	mov	r1, r3
 8001a56:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	f04f 0400 	mov.w	r4, #0
 8001a60:	fb03 f502 	mul.w	r5, r3, r2
 8001a64:	fb01 f004 	mul.w	r0, r1, r4
 8001a68:	4428      	add	r0, r5
 8001a6a:	fba1 1203 	umull	r1, r2, r1, r3
 8001a6e:	1883      	adds	r3, r0, r2
 8001a70:	461a      	mov	r2, r3
 8001a72:	460d      	mov	r5, r1
 8001a74:	4616      	mov	r6, r2
 8001a76:	196b      	adds	r3, r5, r5
 8001a78:	eb46 0406 	adc.w	r4, r6, r6
 8001a7c:	461d      	mov	r5, r3
 8001a7e:	4626      	mov	r6, r4
 8001a80:	186d      	adds	r5, r5, r1
 8001a82:	eb46 0602 	adc.w	r6, r6, r2
 8001a86:	196b      	adds	r3, r5, r5
 8001a88:	eb46 0406 	adc.w	r4, r6, r6
 8001a8c:	461d      	mov	r5, r3
 8001a8e:	4626      	mov	r6, r4
 8001a90:	4628      	mov	r0, r5
 8001a92:	4631      	mov	r1, r6
 8001a94:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001a98:	f04f 0300 	mov.w	r3, #0
 8001a9c:	f7ff f8dc 	bl	8000c58 <__aeabi_uldivmod>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	460c      	mov	r4, r1
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4622      	mov	r2, r4
 8001aa8:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8001aac:	f04f 34ff 	mov.w	r4, #4294967295
 8001ab0:	1a5b      	subs	r3, r3, r1
 8001ab2:	eb64 0402 	sbc.w	r4, r4, r2
 8001ab6:	461d      	mov	r5, r3
 8001ab8:	4626      	mov	r6, r4
 8001aba:	4a59      	ldr	r2, [pc, #356]	; (8001c20 <Set_Random_Motion_Values+0x8ec>)
 8001abc:	6892      	ldr	r2, [r2, #8]
 8001abe:	462b      	mov	r3, r5
 8001ac0:	4413      	add	r3, r2
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	4b56      	ldr	r3, [pc, #344]	; (8001c20 <Set_Random_Motion_Values+0x8ec>)
 8001ac6:	609a      	str	r2, [r3, #8]
    m_axes.AXIS_X += -(3  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8001ac8:	f018 fe4e 	bl	801a768 <rand>
 8001acc:	4603      	mov	r3, r0
 8001ace:	4619      	mov	r1, r3
 8001ad0:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f04f 0400 	mov.w	r4, #0
 8001ada:	fb03 f502 	mul.w	r5, r3, r2
 8001ade:	fb01 f004 	mul.w	r0, r1, r4
 8001ae2:	4428      	add	r0, r5
 8001ae4:	fba1 5603 	umull	r5, r6, r1, r3
 8001ae8:	1983      	adds	r3, r0, r6
 8001aea:	461e      	mov	r6, r3
 8001aec:	4629      	mov	r1, r5
 8001aee:	4632      	mov	r2, r6
 8001af0:	f04f 0300 	mov.w	r3, #0
 8001af4:	f04f 0400 	mov.w	r4, #0
 8001af8:	00d4      	lsls	r4, r2, #3
 8001afa:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001afe:	00cb      	lsls	r3, r1, #3
 8001b00:	4619      	mov	r1, r3
 8001b02:	4622      	mov	r2, r4
 8001b04:	1b49      	subs	r1, r1, r5
 8001b06:	eb62 0206 	sbc.w	r2, r2, r6
 8001b0a:	4608      	mov	r0, r1
 8001b0c:	4611      	mov	r1, r2
 8001b0e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001b12:	f04f 0300 	mov.w	r3, #0
 8001b16:	f7ff f89f 	bl	8000c58 <__aeabi_uldivmod>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	460c      	mov	r4, r1
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4622      	mov	r2, r4
 8001b22:	f06f 0302 	mvn.w	r3, #2
 8001b26:	f04f 34ff 	mov.w	r4, #4294967295
 8001b2a:	1a5b      	subs	r3, r3, r1
 8001b2c:	eb64 0402 	sbc.w	r4, r4, r2
 8001b30:	461d      	mov	r5, r3
 8001b32:	4626      	mov	r6, r4
 8001b34:	4a3b      	ldr	r2, [pc, #236]	; (8001c24 <Set_Random_Motion_Values+0x8f0>)
 8001b36:	6812      	ldr	r2, [r2, #0]
 8001b38:	462b      	mov	r3, r5
 8001b3a:	4413      	add	r3, r2
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	4b39      	ldr	r3, [pc, #228]	; (8001c24 <Set_Random_Motion_Values+0x8f0>)
 8001b40:	601a      	str	r2, [r3, #0]
    m_axes.AXIS_Y +=  (3  + ((uint64_t)rand()*9*cnt)/RAND_MAX);
 8001b42:	f018 fe11 	bl	801a768 <rand>
 8001b46:	4603      	mov	r3, r0
 8001b48:	4619      	mov	r1, r3
 8001b4a:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f04f 0400 	mov.w	r4, #0
 8001b54:	fb03 f502 	mul.w	r5, r3, r2
 8001b58:	fb01 f004 	mul.w	r0, r1, r4
 8001b5c:	4428      	add	r0, r5
 8001b5e:	fba1 5603 	umull	r5, r6, r1, r3
 8001b62:	1983      	adds	r3, r0, r6
 8001b64:	461e      	mov	r6, r3
 8001b66:	4629      	mov	r1, r5
 8001b68:	4632      	mov	r2, r6
 8001b6a:	f04f 0300 	mov.w	r3, #0
 8001b6e:	f04f 0400 	mov.w	r4, #0
 8001b72:	00d4      	lsls	r4, r2, #3
 8001b74:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001b78:	00cb      	lsls	r3, r1, #3
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4622      	mov	r2, r4
 8001b7e:	194b      	adds	r3, r1, r5
 8001b80:	eb42 0406 	adc.w	r4, r2, r6
 8001b84:	4618      	mov	r0, r3
 8001b86:	4621      	mov	r1, r4
 8001b88:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001b8c:	f04f 0300 	mov.w	r3, #0
 8001b90:	f7ff f862 	bl	8000c58 <__aeabi_uldivmod>
 8001b94:	4603      	mov	r3, r0
 8001b96:	460c      	mov	r4, r1
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4622      	mov	r2, r4
 8001b9c:	1ccb      	adds	r3, r1, #3
 8001b9e:	f142 0400 	adc.w	r4, r2, #0
 8001ba2:	4a20      	ldr	r2, [pc, #128]	; (8001c24 <Set_Random_Motion_Values+0x8f0>)
 8001ba4:	6852      	ldr	r2, [r2, #4]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	461a      	mov	r2, r3
 8001baa:	4b1e      	ldr	r3, [pc, #120]	; (8001c24 <Set_Random_Motion_Values+0x8f0>)
 8001bac:	605a      	str	r2, [r3, #4]
    m_axes.AXIS_Z += -(3  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8001bae:	f018 fddb 	bl	801a768 <rand>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f04f 0400 	mov.w	r4, #0
 8001bc0:	fb03 f502 	mul.w	r5, r3, r2
 8001bc4:	fb01 f004 	mul.w	r0, r1, r4
 8001bc8:	4428      	add	r0, r5
 8001bca:	fba1 3403 	umull	r3, r4, r1, r3
 8001bce:	1902      	adds	r2, r0, r4
 8001bd0:	4614      	mov	r4, r2
 8001bd2:	461d      	mov	r5, r3
 8001bd4:	4626      	mov	r6, r4
 8001bd6:	1969      	adds	r1, r5, r5
 8001bd8:	eb46 0206 	adc.w	r2, r6, r6
 8001bdc:	460d      	mov	r5, r1
 8001bde:	4616      	mov	r6, r2
 8001be0:	18e8      	adds	r0, r5, r3
 8001be2:	eb46 0104 	adc.w	r1, r6, r4
 8001be6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001bea:	f04f 0300 	mov.w	r3, #0
 8001bee:	f7ff f833 	bl	8000c58 <__aeabi_uldivmod>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	460c      	mov	r4, r1
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4622      	mov	r2, r4
 8001bfa:	f06f 0302 	mvn.w	r3, #2
 8001bfe:	f04f 34ff 	mov.w	r4, #4294967295
 8001c02:	1a5b      	subs	r3, r3, r1
 8001c04:	eb64 0402 	sbc.w	r4, r4, r2
 8001c08:	461d      	mov	r5, r3
 8001c0a:	4626      	mov	r6, r4
 8001c0c:	4a05      	ldr	r2, [pc, #20]	; (8001c24 <Set_Random_Motion_Values+0x8f0>)
 8001c0e:	6892      	ldr	r2, [r2, #8]
 8001c10:	462b      	mov	r3, r5
 8001c12:	4413      	add	r3, r2
 8001c14:	461a      	mov	r2, r3
 8001c16:	4b03      	ldr	r3, [pc, #12]	; (8001c24 <Set_Random_Motion_Values+0x8f0>)
 8001c18:	609a      	str	r2, [r3, #8]
 8001c1a:	e005      	b.n	8001c28 <Set_Random_Motion_Values+0x8f4>
 8001c1c:	200021c0 	.word	0x200021c0
 8001c20:	200021cc 	.word	0x200021cc
 8001c24:	200021d8 	.word	0x200021d8
    q_axes.AXIS_X += (200 + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8001c28:	f018 fd9e 	bl	801a768 <rand>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	4619      	mov	r1, r3
 8001c30:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f04f 0400 	mov.w	r4, #0
 8001c3a:	fb03 f502 	mul.w	r5, r3, r2
 8001c3e:	fb01 f004 	mul.w	r0, r1, r4
 8001c42:	4428      	add	r0, r5
 8001c44:	fba1 5603 	umull	r5, r6, r1, r3
 8001c48:	1983      	adds	r3, r0, r6
 8001c4a:	461e      	mov	r6, r3
 8001c4c:	4629      	mov	r1, r5
 8001c4e:	4632      	mov	r2, r6
 8001c50:	f04f 0300 	mov.w	r3, #0
 8001c54:	f04f 0400 	mov.w	r4, #0
 8001c58:	00d4      	lsls	r4, r2, #3
 8001c5a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001c5e:	00cb      	lsls	r3, r1, #3
 8001c60:	4619      	mov	r1, r3
 8001c62:	4622      	mov	r2, r4
 8001c64:	1b49      	subs	r1, r1, r5
 8001c66:	eb62 0206 	sbc.w	r2, r2, r6
 8001c6a:	4608      	mov	r0, r1
 8001c6c:	4611      	mov	r1, r2
 8001c6e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001c72:	f04f 0300 	mov.w	r3, #0
 8001c76:	f7fe ffef 	bl	8000c58 <__aeabi_uldivmod>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	460c      	mov	r4, r1
 8001c7e:	4619      	mov	r1, r3
 8001c80:	4622      	mov	r2, r4
 8001c82:	f111 03c8 	adds.w	r3, r1, #200	; 0xc8
 8001c86:	f142 0400 	adc.w	r4, r2, #0
 8001c8a:	4a38      	ldr	r2, [pc, #224]	; (8001d6c <Set_Random_Motion_Values+0xa38>)
 8001c8c:	6812      	ldr	r2, [r2, #0]
 8001c8e:	4413      	add	r3, r2
 8001c90:	461a      	mov	r2, r3
 8001c92:	4b36      	ldr	r3, [pc, #216]	; (8001d6c <Set_Random_Motion_Values+0xa38>)
 8001c94:	601a      	str	r2, [r3, #0]
    q_axes.AXIS_Y -= (150 + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8001c96:	f018 fd67 	bl	801a768 <rand>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f04f 0400 	mov.w	r4, #0
 8001ca8:	fb03 f502 	mul.w	r5, r3, r2
 8001cac:	fb01 f004 	mul.w	r0, r1, r4
 8001cb0:	4428      	add	r0, r5
 8001cb2:	fba1 3403 	umull	r3, r4, r1, r3
 8001cb6:	1902      	adds	r2, r0, r4
 8001cb8:	4614      	mov	r4, r2
 8001cba:	461d      	mov	r5, r3
 8001cbc:	4626      	mov	r6, r4
 8001cbe:	1969      	adds	r1, r5, r5
 8001cc0:	eb46 0206 	adc.w	r2, r6, r6
 8001cc4:	460d      	mov	r5, r1
 8001cc6:	4616      	mov	r6, r2
 8001cc8:	18e8      	adds	r0, r5, r3
 8001cca:	eb46 0104 	adc.w	r1, r6, r4
 8001cce:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001cd2:	f04f 0300 	mov.w	r3, #0
 8001cd6:	f7fe ffbf 	bl	8000c58 <__aeabi_uldivmod>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	460c      	mov	r4, r1
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4622      	mov	r2, r4
 8001ce2:	f111 0396 	adds.w	r3, r1, #150	; 0x96
 8001ce6:	f142 0400 	adc.w	r4, r2, #0
 8001cea:	4a20      	ldr	r2, [pc, #128]	; (8001d6c <Set_Random_Motion_Values+0xa38>)
 8001cec:	6852      	ldr	r2, [r2, #4]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	4b1e      	ldr	r3, [pc, #120]	; (8001d6c <Set_Random_Motion_Values+0xa38>)
 8001cf4:	605a      	str	r2, [r3, #4]
    q_axes.AXIS_Z += (10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 8001cf6:	f018 fd37 	bl	801a768 <rand>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f04f 0400 	mov.w	r4, #0
 8001d08:	fb03 f502 	mul.w	r5, r3, r2
 8001d0c:	fb01 f004 	mul.w	r0, r1, r4
 8001d10:	4428      	add	r0, r5
 8001d12:	fba1 5603 	umull	r5, r6, r1, r3
 8001d16:	1983      	adds	r3, r0, r6
 8001d18:	461e      	mov	r6, r3
 8001d1a:	4629      	mov	r1, r5
 8001d1c:	4632      	mov	r2, r6
 8001d1e:	f04f 0300 	mov.w	r3, #0
 8001d22:	f04f 0400 	mov.w	r4, #0
 8001d26:	0094      	lsls	r4, r2, #2
 8001d28:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8001d2c:	008b      	lsls	r3, r1, #2
 8001d2e:	4619      	mov	r1, r3
 8001d30:	4622      	mov	r2, r4
 8001d32:	194b      	adds	r3, r1, r5
 8001d34:	eb42 0406 	adc.w	r4, r2, r6
 8001d38:	4618      	mov	r0, r3
 8001d3a:	4621      	mov	r1, r4
 8001d3c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001d40:	f04f 0300 	mov.w	r3, #0
 8001d44:	f7fe ff88 	bl	8000c58 <__aeabi_uldivmod>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	460c      	mov	r4, r1
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4622      	mov	r2, r4
 8001d50:	f111 030a 	adds.w	r3, r1, #10
 8001d54:	f142 0400 	adc.w	r4, r2, #0
 8001d58:	4a04      	ldr	r2, [pc, #16]	; (8001d6c <Set_Random_Motion_Values+0xa38>)
 8001d5a:	6892      	ldr	r2, [r2, #8]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	461a      	mov	r2, r3
 8001d60:	4b02      	ldr	r3, [pc, #8]	; (8001d6c <Set_Random_Motion_Values+0xa38>)
 8001d62:	609a      	str	r2, [r3, #8]
}
 8001d64:	bf00      	nop
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d6c:	200021e4 	.word	0x200021e4

08001d70 <Reset_Motion_Values>:
 * @brief  Reset values for all motion sensor data
 * @param  None
 * @retval None
 */
static void Reset_Motion_Values(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  x_axes.AXIS_X = (x_axes.AXIS_X)%2000 == 0 ? -x_axes.AXIS_X : 10;
 8001d74:	4b6e      	ldr	r3, [pc, #440]	; (8001f30 <Reset_Motion_Values+0x1c0>)
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	4b6e      	ldr	r3, [pc, #440]	; (8001f34 <Reset_Motion_Values+0x1c4>)
 8001d7a:	fb83 1302 	smull	r1, r3, r3, r2
 8001d7e:	11d9      	asrs	r1, r3, #7
 8001d80:	17d3      	asrs	r3, r2, #31
 8001d82:	1acb      	subs	r3, r1, r3
 8001d84:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001d88:	fb01 f303 	mul.w	r3, r1, r3
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d103      	bne.n	8001d9a <Reset_Motion_Values+0x2a>
 8001d92:	4b67      	ldr	r3, [pc, #412]	; (8001f30 <Reset_Motion_Values+0x1c0>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	425b      	negs	r3, r3
 8001d98:	e000      	b.n	8001d9c <Reset_Motion_Values+0x2c>
 8001d9a:	230a      	movs	r3, #10
 8001d9c:	4a64      	ldr	r2, [pc, #400]	; (8001f30 <Reset_Motion_Values+0x1c0>)
 8001d9e:	6013      	str	r3, [r2, #0]
  x_axes.AXIS_Y = (x_axes.AXIS_Y)%2000 == 0 ? -x_axes.AXIS_Y : -10;
 8001da0:	4b63      	ldr	r3, [pc, #396]	; (8001f30 <Reset_Motion_Values+0x1c0>)
 8001da2:	685a      	ldr	r2, [r3, #4]
 8001da4:	4b63      	ldr	r3, [pc, #396]	; (8001f34 <Reset_Motion_Values+0x1c4>)
 8001da6:	fb83 1302 	smull	r1, r3, r3, r2
 8001daa:	11d9      	asrs	r1, r3, #7
 8001dac:	17d3      	asrs	r3, r2, #31
 8001dae:	1acb      	subs	r3, r1, r3
 8001db0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001db4:	fb01 f303 	mul.w	r3, r1, r3
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d103      	bne.n	8001dc6 <Reset_Motion_Values+0x56>
 8001dbe:	4b5c      	ldr	r3, [pc, #368]	; (8001f30 <Reset_Motion_Values+0x1c0>)
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	425b      	negs	r3, r3
 8001dc4:	e001      	b.n	8001dca <Reset_Motion_Values+0x5a>
 8001dc6:	f06f 0309 	mvn.w	r3, #9
 8001dca:	4a59      	ldr	r2, [pc, #356]	; (8001f30 <Reset_Motion_Values+0x1c0>)
 8001dcc:	6053      	str	r3, [r2, #4]
  x_axes.AXIS_Z = (x_axes.AXIS_Z)%2000 == 0 ? -x_axes.AXIS_Z : 10;
 8001dce:	4b58      	ldr	r3, [pc, #352]	; (8001f30 <Reset_Motion_Values+0x1c0>)
 8001dd0:	689a      	ldr	r2, [r3, #8]
 8001dd2:	4b58      	ldr	r3, [pc, #352]	; (8001f34 <Reset_Motion_Values+0x1c4>)
 8001dd4:	fb83 1302 	smull	r1, r3, r3, r2
 8001dd8:	11d9      	asrs	r1, r3, #7
 8001dda:	17d3      	asrs	r3, r2, #31
 8001ddc:	1acb      	subs	r3, r1, r3
 8001dde:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001de2:	fb01 f303 	mul.w	r3, r1, r3
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d103      	bne.n	8001df4 <Reset_Motion_Values+0x84>
 8001dec:	4b50      	ldr	r3, [pc, #320]	; (8001f30 <Reset_Motion_Values+0x1c0>)
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	425b      	negs	r3, r3
 8001df2:	e000      	b.n	8001df6 <Reset_Motion_Values+0x86>
 8001df4:	230a      	movs	r3, #10
 8001df6:	4a4e      	ldr	r2, [pc, #312]	; (8001f30 <Reset_Motion_Values+0x1c0>)
 8001df8:	6093      	str	r3, [r2, #8]
  g_axes.AXIS_X = (g_axes.AXIS_X)%2000 == 0 ? -g_axes.AXIS_X : 100;
 8001dfa:	4b4f      	ldr	r3, [pc, #316]	; (8001f38 <Reset_Motion_Values+0x1c8>)
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	4b4d      	ldr	r3, [pc, #308]	; (8001f34 <Reset_Motion_Values+0x1c4>)
 8001e00:	fb83 1302 	smull	r1, r3, r3, r2
 8001e04:	11d9      	asrs	r1, r3, #7
 8001e06:	17d3      	asrs	r3, r2, #31
 8001e08:	1acb      	subs	r3, r1, r3
 8001e0a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001e0e:	fb01 f303 	mul.w	r3, r1, r3
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d103      	bne.n	8001e20 <Reset_Motion_Values+0xb0>
 8001e18:	4b47      	ldr	r3, [pc, #284]	; (8001f38 <Reset_Motion_Values+0x1c8>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	425b      	negs	r3, r3
 8001e1e:	e000      	b.n	8001e22 <Reset_Motion_Values+0xb2>
 8001e20:	2364      	movs	r3, #100	; 0x64
 8001e22:	4a45      	ldr	r2, [pc, #276]	; (8001f38 <Reset_Motion_Values+0x1c8>)
 8001e24:	6013      	str	r3, [r2, #0]
  g_axes.AXIS_Y = (g_axes.AXIS_Y)%2000 == 0 ? -g_axes.AXIS_Y : -100;
 8001e26:	4b44      	ldr	r3, [pc, #272]	; (8001f38 <Reset_Motion_Values+0x1c8>)
 8001e28:	685a      	ldr	r2, [r3, #4]
 8001e2a:	4b42      	ldr	r3, [pc, #264]	; (8001f34 <Reset_Motion_Values+0x1c4>)
 8001e2c:	fb83 1302 	smull	r1, r3, r3, r2
 8001e30:	11d9      	asrs	r1, r3, #7
 8001e32:	17d3      	asrs	r3, r2, #31
 8001e34:	1acb      	subs	r3, r1, r3
 8001e36:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001e3a:	fb01 f303 	mul.w	r3, r1, r3
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d103      	bne.n	8001e4c <Reset_Motion_Values+0xdc>
 8001e44:	4b3c      	ldr	r3, [pc, #240]	; (8001f38 <Reset_Motion_Values+0x1c8>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	425b      	negs	r3, r3
 8001e4a:	e001      	b.n	8001e50 <Reset_Motion_Values+0xe0>
 8001e4c:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8001e50:	4a39      	ldr	r2, [pc, #228]	; (8001f38 <Reset_Motion_Values+0x1c8>)
 8001e52:	6053      	str	r3, [r2, #4]
  g_axes.AXIS_Z = (g_axes.AXIS_Z)%2000 == 0 ? -g_axes.AXIS_Z : 100;
 8001e54:	4b38      	ldr	r3, [pc, #224]	; (8001f38 <Reset_Motion_Values+0x1c8>)
 8001e56:	689a      	ldr	r2, [r3, #8]
 8001e58:	4b36      	ldr	r3, [pc, #216]	; (8001f34 <Reset_Motion_Values+0x1c4>)
 8001e5a:	fb83 1302 	smull	r1, r3, r3, r2
 8001e5e:	11d9      	asrs	r1, r3, #7
 8001e60:	17d3      	asrs	r3, r2, #31
 8001e62:	1acb      	subs	r3, r1, r3
 8001e64:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001e68:	fb01 f303 	mul.w	r3, r1, r3
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d103      	bne.n	8001e7a <Reset_Motion_Values+0x10a>
 8001e72:	4b31      	ldr	r3, [pc, #196]	; (8001f38 <Reset_Motion_Values+0x1c8>)
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	425b      	negs	r3, r3
 8001e78:	e000      	b.n	8001e7c <Reset_Motion_Values+0x10c>
 8001e7a:	2364      	movs	r3, #100	; 0x64
 8001e7c:	4a2e      	ldr	r2, [pc, #184]	; (8001f38 <Reset_Motion_Values+0x1c8>)
 8001e7e:	6093      	str	r3, [r2, #8]
  m_axes.AXIS_X = (g_axes.AXIS_X)%2000 == 0 ? -m_axes.AXIS_X : 3;
 8001e80:	4b2d      	ldr	r3, [pc, #180]	; (8001f38 <Reset_Motion_Values+0x1c8>)
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	4b2b      	ldr	r3, [pc, #172]	; (8001f34 <Reset_Motion_Values+0x1c4>)
 8001e86:	fb83 1302 	smull	r1, r3, r3, r2
 8001e8a:	11d9      	asrs	r1, r3, #7
 8001e8c:	17d3      	asrs	r3, r2, #31
 8001e8e:	1acb      	subs	r3, r1, r3
 8001e90:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001e94:	fb01 f303 	mul.w	r3, r1, r3
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d103      	bne.n	8001ea6 <Reset_Motion_Values+0x136>
 8001e9e:	4b27      	ldr	r3, [pc, #156]	; (8001f3c <Reset_Motion_Values+0x1cc>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	425b      	negs	r3, r3
 8001ea4:	e000      	b.n	8001ea8 <Reset_Motion_Values+0x138>
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	4a24      	ldr	r2, [pc, #144]	; (8001f3c <Reset_Motion_Values+0x1cc>)
 8001eaa:	6013      	str	r3, [r2, #0]
  m_axes.AXIS_Y = (g_axes.AXIS_Y)%2000 == 0 ? -m_axes.AXIS_Y : -3;
 8001eac:	4b22      	ldr	r3, [pc, #136]	; (8001f38 <Reset_Motion_Values+0x1c8>)
 8001eae:	685a      	ldr	r2, [r3, #4]
 8001eb0:	4b20      	ldr	r3, [pc, #128]	; (8001f34 <Reset_Motion_Values+0x1c4>)
 8001eb2:	fb83 1302 	smull	r1, r3, r3, r2
 8001eb6:	11d9      	asrs	r1, r3, #7
 8001eb8:	17d3      	asrs	r3, r2, #31
 8001eba:	1acb      	subs	r3, r1, r3
 8001ebc:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001ec0:	fb01 f303 	mul.w	r3, r1, r3
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d103      	bne.n	8001ed2 <Reset_Motion_Values+0x162>
 8001eca:	4b1c      	ldr	r3, [pc, #112]	; (8001f3c <Reset_Motion_Values+0x1cc>)
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	425b      	negs	r3, r3
 8001ed0:	e001      	b.n	8001ed6 <Reset_Motion_Values+0x166>
 8001ed2:	f06f 0302 	mvn.w	r3, #2
 8001ed6:	4a19      	ldr	r2, [pc, #100]	; (8001f3c <Reset_Motion_Values+0x1cc>)
 8001ed8:	6053      	str	r3, [r2, #4]
  m_axes.AXIS_Z = (g_axes.AXIS_Z)%2000 == 0 ? -m_axes.AXIS_Z : 3;
 8001eda:	4b17      	ldr	r3, [pc, #92]	; (8001f38 <Reset_Motion_Values+0x1c8>)
 8001edc:	689a      	ldr	r2, [r3, #8]
 8001ede:	4b15      	ldr	r3, [pc, #84]	; (8001f34 <Reset_Motion_Values+0x1c4>)
 8001ee0:	fb83 1302 	smull	r1, r3, r3, r2
 8001ee4:	11d9      	asrs	r1, r3, #7
 8001ee6:	17d3      	asrs	r3, r2, #31
 8001ee8:	1acb      	subs	r3, r1, r3
 8001eea:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001eee:	fb01 f303 	mul.w	r3, r1, r3
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d103      	bne.n	8001f00 <Reset_Motion_Values+0x190>
 8001ef8:	4b10      	ldr	r3, [pc, #64]	; (8001f3c <Reset_Motion_Values+0x1cc>)
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	425b      	negs	r3, r3
 8001efe:	e000      	b.n	8001f02 <Reset_Motion_Values+0x192>
 8001f00:	2303      	movs	r3, #3
 8001f02:	4a0e      	ldr	r2, [pc, #56]	; (8001f3c <Reset_Motion_Values+0x1cc>)
 8001f04:	6093      	str	r3, [r2, #8]
  q_axes.AXIS_X = -q_axes.AXIS_X;
 8001f06:	4b0e      	ldr	r3, [pc, #56]	; (8001f40 <Reset_Motion_Values+0x1d0>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	425b      	negs	r3, r3
 8001f0c:	4a0c      	ldr	r2, [pc, #48]	; (8001f40 <Reset_Motion_Values+0x1d0>)
 8001f0e:	6013      	str	r3, [r2, #0]
  q_axes.AXIS_Y = -q_axes.AXIS_Y;
 8001f10:	4b0b      	ldr	r3, [pc, #44]	; (8001f40 <Reset_Motion_Values+0x1d0>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	425b      	negs	r3, r3
 8001f16:	4a0a      	ldr	r2, [pc, #40]	; (8001f40 <Reset_Motion_Values+0x1d0>)
 8001f18:	6053      	str	r3, [r2, #4]
  q_axes.AXIS_Z = -q_axes.AXIS_Z;
 8001f1a:	4b09      	ldr	r3, [pc, #36]	; (8001f40 <Reset_Motion_Values+0x1d0>)
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	425b      	negs	r3, r3
 8001f20:	4a07      	ldr	r2, [pc, #28]	; (8001f40 <Reset_Motion_Values+0x1d0>)
 8001f22:	6093      	str	r3, [r2, #8]
}
 8001f24:	bf00      	nop
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	200021c0 	.word	0x200021c0
 8001f34:	10624dd3 	.word	0x10624dd3
 8001f38:	200021cc 	.word	0x200021cc
 8001f3c:	200021d8 	.word	0x200021d8
 8001f40:	200021e4 	.word	0x200021e4

08001f44 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	71fb      	strb	r3, [r7, #7]
  /* Set the User Button flag */
  user_button_pressed = 1;
 8001f4e:	4b04      	ldr	r3, [pc, #16]	; (8001f60 <BSP_PB_Callback+0x1c>)
 8001f50:	2201      	movs	r2, #1
 8001f52:	701a      	strb	r2, [r3, #0]
}
 8001f54:	bf00      	nop
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr
 8001f60:	200021b2 	.word	0x200021b2

08001f64 <Add_HWServW2ST_Service>:
 * @brief  Add the 'HW' service (and the Environmental and AccGyr characteristics).
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_HWServW2ST_Service(void)
{
 8001f64:	b5b0      	push	{r4, r5, r7, lr}
 8001f66:	b08c      	sub	sp, #48	; 0x30
 8001f68:	af06      	add	r7, sp, #24
  tBleStatus ret;
  uint8_t uuid[16];
  
  /* Add_HWServW2ST_Service */
  COPY_HW_SENS_W2ST_SERVICE_UUID(uuid);  
 8001f6a:	231b      	movs	r3, #27
 8001f6c:	713b      	strb	r3, [r7, #4]
 8001f6e:	23c5      	movs	r3, #197	; 0xc5
 8001f70:	717b      	strb	r3, [r7, #5]
 8001f72:	23d5      	movs	r3, #213	; 0xd5
 8001f74:	71bb      	strb	r3, [r7, #6]
 8001f76:	23a5      	movs	r3, #165	; 0xa5
 8001f78:	71fb      	strb	r3, [r7, #7]
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	723b      	strb	r3, [r7, #8]
 8001f7e:	2300      	movs	r3, #0
 8001f80:	727b      	strb	r3, [r7, #9]
 8001f82:	23b4      	movs	r3, #180	; 0xb4
 8001f84:	72bb      	strb	r3, [r7, #10]
 8001f86:	239a      	movs	r3, #154	; 0x9a
 8001f88:	72fb      	strb	r3, [r7, #11]
 8001f8a:	23e1      	movs	r3, #225	; 0xe1
 8001f8c:	733b      	strb	r3, [r7, #12]
 8001f8e:	2311      	movs	r3, #17
 8001f90:	737b      	strb	r3, [r7, #13]
 8001f92:	2301      	movs	r3, #1
 8001f94:	73bb      	strb	r3, [r7, #14]
 8001f96:	2300      	movs	r3, #0
 8001f98:	73fb      	strb	r3, [r7, #15]
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	743b      	strb	r3, [r7, #16]
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	747b      	strb	r3, [r7, #17]
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	74bb      	strb	r3, [r7, #18]
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 8001faa:	4b55      	ldr	r3, [pc, #340]	; (8002100 <Add_HWServW2ST_Service+0x19c>)
 8001fac:	461d      	mov	r5, r3
 8001fae:	1d3c      	adds	r4, r7, #4
 8001fb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fb2:	6028      	str	r0, [r5, #0]
 8001fb4:	6069      	str	r1, [r5, #4]
 8001fb6:	60aa      	str	r2, [r5, #8]
 8001fb8:	60eb      	str	r3, [r5, #12]
  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid.Service_UUID_128, PRIMARY_SERVICE, 
 8001fba:	4b52      	ldr	r3, [pc, #328]	; (8002104 <Add_HWServW2ST_Service+0x1a0>)
 8001fbc:	9300      	str	r3, [sp, #0]
 8001fbe:	2310      	movs	r3, #16
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	494f      	ldr	r1, [pc, #316]	; (8002100 <Add_HWServW2ST_Service+0x19c>)
 8001fc4:	2002      	movs	r0, #2
 8001fc6:	f00c fc6c 	bl	800e8a2 <aci_gatt_add_serv>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	75fb      	strb	r3, [r7, #23]
                          1+3*5, &HWServW2STHandle); 
  if (ret != BLE_STATUS_SUCCESS) 
 8001fce:	7dfb      	ldrb	r3, [r7, #23]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <Add_HWServW2ST_Service+0x74>
    return BLE_STATUS_ERROR;    
 8001fd4:	2347      	movs	r3, #71	; 0x47
 8001fd6:	e08e      	b.n	80020f6 <Add_HWServW2ST_Service+0x192>
  
  /* Fill the Environmental BLE Characteristc */
  COPY_ENVIRONMENTAL_W2ST_CHAR_UUID(uuid);
 8001fd8:	231b      	movs	r3, #27
 8001fda:	713b      	strb	r3, [r7, #4]
 8001fdc:	23c5      	movs	r3, #197	; 0xc5
 8001fde:	717b      	strb	r3, [r7, #5]
 8001fe0:	23d5      	movs	r3, #213	; 0xd5
 8001fe2:	71bb      	strb	r3, [r7, #6]
 8001fe4:	23a5      	movs	r3, #165	; 0xa5
 8001fe6:	71fb      	strb	r3, [r7, #7]
 8001fe8:	2302      	movs	r3, #2
 8001fea:	723b      	strb	r3, [r7, #8]
 8001fec:	2300      	movs	r3, #0
 8001fee:	727b      	strb	r3, [r7, #9]
 8001ff0:	2336      	movs	r3, #54	; 0x36
 8001ff2:	72bb      	strb	r3, [r7, #10]
 8001ff4:	23ac      	movs	r3, #172	; 0xac
 8001ff6:	72fb      	strb	r3, [r7, #11]
 8001ff8:	23e1      	movs	r3, #225	; 0xe1
 8001ffa:	733b      	strb	r3, [r7, #12]
 8001ffc:	2311      	movs	r3, #17
 8001ffe:	737b      	strb	r3, [r7, #13]
 8002000:	2301      	movs	r3, #1
 8002002:	73bb      	strb	r3, [r7, #14]
 8002004:	2300      	movs	r3, #0
 8002006:	73fb      	strb	r3, [r7, #15]
 8002008:	2300      	movs	r3, #0
 800200a:	743b      	strb	r3, [r7, #16]
 800200c:	2300      	movs	r3, #0
 800200e:	747b      	strb	r3, [r7, #17]
 8002010:	2300      	movs	r3, #0
 8002012:	74bb      	strb	r3, [r7, #18]
 8002014:	2300      	movs	r3, #0
 8002016:	74fb      	strb	r3, [r7, #19]
  uuid[14] |= 0x04; /* One Temperature value*/
 8002018:	7cbb      	ldrb	r3, [r7, #18]
 800201a:	f043 0304 	orr.w	r3, r3, #4
 800201e:	b2db      	uxtb	r3, r3
 8002020:	74bb      	strb	r3, [r7, #18]
  uuid[14] |= 0x10; /* Pressure value*/
 8002022:	7cbb      	ldrb	r3, [r7, #18]
 8002024:	f043 0310 	orr.w	r3, r3, #16
 8002028:	b2db      	uxtb	r3, r3
 800202a:	74bb      	strb	r3, [r7, #18]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);  
 800202c:	4b36      	ldr	r3, [pc, #216]	; (8002108 <Add_HWServW2ST_Service+0x1a4>)
 800202e:	461d      	mov	r5, r3
 8002030:	1d3c      	adds	r4, r7, #4
 8002032:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002034:	6028      	str	r0, [r5, #0]
 8002036:	6069      	str	r1, [r5, #4]
 8002038:	60aa      	str	r2, [r5, #8]
 800203a:	60eb      	str	r3, [r5, #12]
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128, 
 800203c:	4b31      	ldr	r3, [pc, #196]	; (8002104 <Add_HWServW2ST_Service+0x1a0>)
 800203e:	8818      	ldrh	r0, [r3, #0]
 8002040:	4b32      	ldr	r3, [pc, #200]	; (800210c <Add_HWServW2ST_Service+0x1a8>)
 8002042:	9305      	str	r3, [sp, #20]
 8002044:	2300      	movs	r3, #0
 8002046:	9304      	str	r3, [sp, #16]
 8002048:	2310      	movs	r3, #16
 800204a:	9303      	str	r3, [sp, #12]
 800204c:	2304      	movs	r3, #4
 800204e:	9302      	str	r3, [sp, #8]
 8002050:	2300      	movs	r3, #0
 8002052:	9301      	str	r3, [sp, #4]
 8002054:	2312      	movs	r3, #18
 8002056:	9300      	str	r3, [sp, #0]
 8002058:	2308      	movs	r3, #8
 800205a:	4a2b      	ldr	r2, [pc, #172]	; (8002108 <Add_HWServW2ST_Service+0x1a4>)
 800205c:	2102      	movs	r1, #2
 800205e:	f00c fcac 	bl	800e9ba <aci_gatt_add_char>
 8002062:	4603      	mov	r3, r0
 8002064:	75fb      	strb	r3, [r7, #23]
                           2+2+4, 
                           CHAR_PROP_NOTIFY|CHAR_PROP_READ, 
                           ATTR_PERMISSION_NONE, 
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &EnvironmentalCharHandle);
  if (ret != BLE_STATUS_SUCCESS) 
 8002066:	7dfb      	ldrb	r3, [r7, #23]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <Add_HWServW2ST_Service+0x10c>
    return BLE_STATUS_ERROR;
 800206c:	2347      	movs	r3, #71	; 0x47
 800206e:	e042      	b.n	80020f6 <Add_HWServW2ST_Service+0x192>
  
  
  /* Fill the AccGyroMag BLE Characteristc */
  COPY_ACC_GYRO_MAG_W2ST_CHAR_UUID(uuid);
 8002070:	231b      	movs	r3, #27
 8002072:	713b      	strb	r3, [r7, #4]
 8002074:	23c5      	movs	r3, #197	; 0xc5
 8002076:	717b      	strb	r3, [r7, #5]
 8002078:	23d5      	movs	r3, #213	; 0xd5
 800207a:	71bb      	strb	r3, [r7, #6]
 800207c:	23a5      	movs	r3, #165	; 0xa5
 800207e:	71fb      	strb	r3, [r7, #7]
 8002080:	2302      	movs	r3, #2
 8002082:	723b      	strb	r3, [r7, #8]
 8002084:	2300      	movs	r3, #0
 8002086:	727b      	strb	r3, [r7, #9]
 8002088:	2336      	movs	r3, #54	; 0x36
 800208a:	72bb      	strb	r3, [r7, #10]
 800208c:	23ac      	movs	r3, #172	; 0xac
 800208e:	72fb      	strb	r3, [r7, #11]
 8002090:	23e1      	movs	r3, #225	; 0xe1
 8002092:	733b      	strb	r3, [r7, #12]
 8002094:	2311      	movs	r3, #17
 8002096:	737b      	strb	r3, [r7, #13]
 8002098:	2301      	movs	r3, #1
 800209a:	73bb      	strb	r3, [r7, #14]
 800209c:	2300      	movs	r3, #0
 800209e:	73fb      	strb	r3, [r7, #15]
 80020a0:	2300      	movs	r3, #0
 80020a2:	743b      	strb	r3, [r7, #16]
 80020a4:	2300      	movs	r3, #0
 80020a6:	747b      	strb	r3, [r7, #17]
 80020a8:	23e0      	movs	r3, #224	; 0xe0
 80020aa:	74bb      	strb	r3, [r7, #18]
 80020ac:	2300      	movs	r3, #0
 80020ae:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);  
 80020b0:	4b15      	ldr	r3, [pc, #84]	; (8002108 <Add_HWServW2ST_Service+0x1a4>)
 80020b2:	461d      	mov	r5, r3
 80020b4:	1d3c      	adds	r4, r7, #4
 80020b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020b8:	6028      	str	r0, [r5, #0]
 80020ba:	6069      	str	r1, [r5, #4]
 80020bc:	60aa      	str	r2, [r5, #8]
 80020be:	60eb      	str	r3, [r5, #12]
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128, 
 80020c0:	4b10      	ldr	r3, [pc, #64]	; (8002104 <Add_HWServW2ST_Service+0x1a0>)
 80020c2:	8818      	ldrh	r0, [r3, #0]
 80020c4:	4b12      	ldr	r3, [pc, #72]	; (8002110 <Add_HWServW2ST_Service+0x1ac>)
 80020c6:	9305      	str	r3, [sp, #20]
 80020c8:	2300      	movs	r3, #0
 80020ca:	9304      	str	r3, [sp, #16]
 80020cc:	2310      	movs	r3, #16
 80020ce:	9303      	str	r3, [sp, #12]
 80020d0:	2304      	movs	r3, #4
 80020d2:	9302      	str	r3, [sp, #8]
 80020d4:	2300      	movs	r3, #0
 80020d6:	9301      	str	r3, [sp, #4]
 80020d8:	2310      	movs	r3, #16
 80020da:	9300      	str	r3, [sp, #0]
 80020dc:	2314      	movs	r3, #20
 80020de:	4a0a      	ldr	r2, [pc, #40]	; (8002108 <Add_HWServW2ST_Service+0x1a4>)
 80020e0:	2102      	movs	r1, #2
 80020e2:	f00c fc6a 	bl	800e9ba <aci_gatt_add_char>
 80020e6:	4603      	mov	r3, r0
 80020e8:	75fb      	strb	r3, [r7, #23]
                           2+3*3*2, 
                           CHAR_PROP_NOTIFY, 
                           ATTR_PERMISSION_NONE, 
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &AccGyroMagCharHandle);
  if (ret != BLE_STATUS_SUCCESS) 
 80020ea:	7dfb      	ldrb	r3, [r7, #23]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <Add_HWServW2ST_Service+0x190>
    return BLE_STATUS_ERROR;
 80020f0:	2347      	movs	r3, #71	; 0x47
 80020f2:	e000      	b.n	80020f6 <Add_HWServW2ST_Service+0x192>
  
  return BLE_STATUS_SUCCESS;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3718      	adds	r7, #24
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bdb0      	pop	{r4, r5, r7, pc}
 80020fe:	bf00      	nop
 8002100:	200027c4 	.word	0x200027c4
 8002104:	200027be 	.word	0x200027be
 8002108:	200027ac 	.word	0x200027ac
 800210c:	200027a8 	.word	0x200027a8
 8002110:	200027c0 	.word	0x200027c0

08002114 <Add_SWServW2ST_Service>:
 * @brief  Add the SW Feature service using a vendor specific profile
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_SWServW2ST_Service(void)
{
 8002114:	b5b0      	push	{r4, r5, r7, lr}
 8002116:	b08c      	sub	sp, #48	; 0x30
 8002118:	af06      	add	r7, sp, #24
  tBleStatus ret;
  int32_t NumberOfRecords=1;
 800211a:	2301      	movs	r3, #1
 800211c:	617b      	str	r3, [r7, #20]
  uint8_t uuid[16];

  COPY_SW_SENS_W2ST_SERVICE_UUID(uuid);
 800211e:	231b      	movs	r3, #27
 8002120:	703b      	strb	r3, [r7, #0]
 8002122:	23c5      	movs	r3, #197	; 0xc5
 8002124:	707b      	strb	r3, [r7, #1]
 8002126:	23d5      	movs	r3, #213	; 0xd5
 8002128:	70bb      	strb	r3, [r7, #2]
 800212a:	23a5      	movs	r3, #165	; 0xa5
 800212c:	70fb      	strb	r3, [r7, #3]
 800212e:	2302      	movs	r3, #2
 8002130:	713b      	strb	r3, [r7, #4]
 8002132:	2300      	movs	r3, #0
 8002134:	717b      	strb	r3, [r7, #5]
 8002136:	23b4      	movs	r3, #180	; 0xb4
 8002138:	71bb      	strb	r3, [r7, #6]
 800213a:	239a      	movs	r3, #154	; 0x9a
 800213c:	71fb      	strb	r3, [r7, #7]
 800213e:	23e1      	movs	r3, #225	; 0xe1
 8002140:	723b      	strb	r3, [r7, #8]
 8002142:	2311      	movs	r3, #17
 8002144:	727b      	strb	r3, [r7, #9]
 8002146:	2302      	movs	r3, #2
 8002148:	72bb      	strb	r3, [r7, #10]
 800214a:	2300      	movs	r3, #0
 800214c:	72fb      	strb	r3, [r7, #11]
 800214e:	2300      	movs	r3, #0
 8002150:	733b      	strb	r3, [r7, #12]
 8002152:	2300      	movs	r3, #0
 8002154:	737b      	strb	r3, [r7, #13]
 8002156:	2300      	movs	r3, #0
 8002158:	73bb      	strb	r3, [r7, #14]
 800215a:	2300      	movs	r3, #0
 800215c:	73fb      	strb	r3, [r7, #15]
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 800215e:	4b33      	ldr	r3, [pc, #204]	; (800222c <Add_SWServW2ST_Service+0x118>)
 8002160:	461d      	mov	r5, r3
 8002162:	463c      	mov	r4, r7
 8002164:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002166:	6028      	str	r0, [r5, #0]
 8002168:	6069      	str	r1, [r5, #4]
 800216a:	60aa      	str	r2, [r5, #8]
 800216c:	60eb      	str	r3, [r5, #12]
  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid.Service_UUID_128, PRIMARY_SERVICE, 
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	b2db      	uxtb	r3, r3
 8002172:	461a      	mov	r2, r3
 8002174:	0052      	lsls	r2, r2, #1
 8002176:	4413      	add	r3, r2
 8002178:	b2db      	uxtb	r3, r3
 800217a:	3301      	adds	r3, #1
 800217c:	b2da      	uxtb	r2, r3
 800217e:	4b2c      	ldr	r3, [pc, #176]	; (8002230 <Add_SWServW2ST_Service+0x11c>)
 8002180:	9300      	str	r3, [sp, #0]
 8002182:	4613      	mov	r3, r2
 8002184:	2201      	movs	r2, #1
 8002186:	4929      	ldr	r1, [pc, #164]	; (800222c <Add_SWServW2ST_Service+0x118>)
 8002188:	2002      	movs	r0, #2
 800218a:	f00c fb8a 	bl	800e8a2 <aci_gatt_add_serv>
 800218e:	4603      	mov	r3, r0
 8002190:	74fb      	strb	r3, [r7, #19]
                          1+3*NumberOfRecords, &SWServW2STHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 8002192:	7cfb      	ldrb	r3, [r7, #19]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d141      	bne.n	800221c <Add_SWServW2ST_Service+0x108>
    goto fail;
  }

  COPY_QUATERNIONS_W2ST_CHAR_UUID(uuid);
 8002198:	231b      	movs	r3, #27
 800219a:	703b      	strb	r3, [r7, #0]
 800219c:	23c5      	movs	r3, #197	; 0xc5
 800219e:	707b      	strb	r3, [r7, #1]
 80021a0:	23d5      	movs	r3, #213	; 0xd5
 80021a2:	70bb      	strb	r3, [r7, #2]
 80021a4:	23a5      	movs	r3, #165	; 0xa5
 80021a6:	70fb      	strb	r3, [r7, #3]
 80021a8:	2302      	movs	r3, #2
 80021aa:	713b      	strb	r3, [r7, #4]
 80021ac:	2300      	movs	r3, #0
 80021ae:	717b      	strb	r3, [r7, #5]
 80021b0:	2336      	movs	r3, #54	; 0x36
 80021b2:	71bb      	strb	r3, [r7, #6]
 80021b4:	23ac      	movs	r3, #172	; 0xac
 80021b6:	71fb      	strb	r3, [r7, #7]
 80021b8:	23e1      	movs	r3, #225	; 0xe1
 80021ba:	723b      	strb	r3, [r7, #8]
 80021bc:	2311      	movs	r3, #17
 80021be:	727b      	strb	r3, [r7, #9]
 80021c0:	2301      	movs	r3, #1
 80021c2:	72bb      	strb	r3, [r7, #10]
 80021c4:	2300      	movs	r3, #0
 80021c6:	72fb      	strb	r3, [r7, #11]
 80021c8:	2300      	movs	r3, #0
 80021ca:	733b      	strb	r3, [r7, #12]
 80021cc:	2301      	movs	r3, #1
 80021ce:	737b      	strb	r3, [r7, #13]
 80021d0:	2300      	movs	r3, #0
 80021d2:	73bb      	strb	r3, [r7, #14]
 80021d4:	2300      	movs	r3, #0
 80021d6:	73fb      	strb	r3, [r7, #15]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 80021d8:	4b16      	ldr	r3, [pc, #88]	; (8002234 <Add_SWServW2ST_Service+0x120>)
 80021da:	461d      	mov	r5, r3
 80021dc:	463c      	mov	r4, r7
 80021de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021e0:	6028      	str	r0, [r5, #0]
 80021e2:	6069      	str	r1, [r5, #4]
 80021e4:	60aa      	str	r2, [r5, #8]
 80021e6:	60eb      	str	r3, [r5, #12]
  ret =  aci_gatt_add_char(SWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128, 
 80021e8:	4b11      	ldr	r3, [pc, #68]	; (8002230 <Add_SWServW2ST_Service+0x11c>)
 80021ea:	8818      	ldrh	r0, [r3, #0]
 80021ec:	4b12      	ldr	r3, [pc, #72]	; (8002238 <Add_SWServW2ST_Service+0x124>)
 80021ee:	9305      	str	r3, [sp, #20]
 80021f0:	2300      	movs	r3, #0
 80021f2:	9304      	str	r3, [sp, #16]
 80021f4:	2310      	movs	r3, #16
 80021f6:	9303      	str	r3, [sp, #12]
 80021f8:	2304      	movs	r3, #4
 80021fa:	9302      	str	r3, [sp, #8]
 80021fc:	2300      	movs	r3, #0
 80021fe:	9301      	str	r3, [sp, #4]
 8002200:	2310      	movs	r3, #16
 8002202:	9300      	str	r3, [sp, #0]
 8002204:	2308      	movs	r3, #8
 8002206:	4a0b      	ldr	r2, [pc, #44]	; (8002234 <Add_SWServW2ST_Service+0x120>)
 8002208:	2102      	movs	r1, #2
 800220a:	f00c fbd6 	bl	800e9ba <aci_gatt_add_char>
 800220e:	4603      	mov	r3, r0
 8002210:	74fb      	strb	r3, [r7, #19]
                           CHAR_PROP_NOTIFY,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &QuaternionsCharHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 8002212:	7cfb      	ldrb	r3, [r7, #19]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d103      	bne.n	8002220 <Add_SWServW2ST_Service+0x10c>
    goto fail;
  }

  return BLE_STATUS_SUCCESS;
 8002218:	2300      	movs	r3, #0
 800221a:	e003      	b.n	8002224 <Add_SWServW2ST_Service+0x110>
    goto fail;
 800221c:	bf00      	nop
 800221e:	e000      	b.n	8002222 <Add_SWServW2ST_Service+0x10e>
    goto fail;
 8002220:	bf00      	nop

fail:  
  return BLE_STATUS_ERROR;
 8002222:	2347      	movs	r3, #71	; 0x47
}
 8002224:	4618      	mov	r0, r3
 8002226:	3718      	adds	r7, #24
 8002228:	46bd      	mov	sp, r7
 800222a:	bdb0      	pop	{r4, r5, r7, pc}
 800222c:	200027c4 	.word	0x200027c4
 8002230:	200027bc 	.word	0x200027bc
 8002234:	200027ac 	.word	0x200027ac
 8002238:	200027aa 	.word	0x200027aa

0800223c <Acc_Update>:
 * @brief  Update acceleration characteristic value
 * @param  AxesRaw_t structure containing acceleration value in mg.
 * @retval tBleStatus Status
 */
tBleStatus Acc_Update(AxesRaw_t *x_axes, AxesRaw_t *g_axes, AxesRaw_t *m_axes)
{  
 800223c:	b580      	push	{r7, lr}
 800223e:	b08c      	sub	sp, #48	; 0x30
 8002240:	af02      	add	r7, sp, #8
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	607a      	str	r2, [r7, #4]
  uint8_t buff[2+2*3*3];
  tBleStatus ret;
  
  HOST_TO_LE_16(buff,(HAL_GetTick()>>3));
 8002248:	f006 fdf8 	bl	8008e3c <HAL_GetTick>
 800224c:	4603      	mov	r3, r0
 800224e:	08db      	lsrs	r3, r3, #3
 8002250:	b2db      	uxtb	r3, r3
 8002252:	743b      	strb	r3, [r7, #16]
 8002254:	f006 fdf2 	bl	8008e3c <HAL_GetTick>
 8002258:	4603      	mov	r3, r0
 800225a:	0adb      	lsrs	r3, r3, #11
 800225c:	b2db      	uxtb	r3, r3
 800225e:	747b      	strb	r3, [r7, #17]
  
  HOST_TO_LE_16(buff+2,-x_axes->AXIS_Y);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	b2db      	uxtb	r3, r3
 8002266:	425b      	negs	r3, r3
 8002268:	b2db      	uxtb	r3, r3
 800226a:	74bb      	strb	r3, [r7, #18]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	425b      	negs	r3, r3
 8002272:	121b      	asrs	r3, r3, #8
 8002274:	b2db      	uxtb	r3, r3
 8002276:	74fb      	strb	r3, [r7, #19]
  HOST_TO_LE_16(buff+4, x_axes->AXIS_X);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	b2db      	uxtb	r3, r3
 800227e:	753b      	strb	r3, [r7, #20]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	121b      	asrs	r3, r3, #8
 8002286:	b2db      	uxtb	r3, r3
 8002288:	757b      	strb	r3, [r7, #21]
  HOST_TO_LE_16(buff+6,-x_axes->AXIS_Z);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	b2db      	uxtb	r3, r3
 8002290:	425b      	negs	r3, r3
 8002292:	b2db      	uxtb	r3, r3
 8002294:	75bb      	strb	r3, [r7, #22]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	425b      	negs	r3, r3
 800229c:	121b      	asrs	r3, r3, #8
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	75fb      	strb	r3, [r7, #23]
    
  HOST_TO_LE_16(buff+8,g_axes->AXIS_Y);
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	763b      	strb	r3, [r7, #24]
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	121b      	asrs	r3, r3, #8
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	767b      	strb	r3, [r7, #25]
  HOST_TO_LE_16(buff+10,g_axes->AXIS_X);
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	76bb      	strb	r3, [r7, #26]
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	121b      	asrs	r3, r3, #8
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	76fb      	strb	r3, [r7, #27]
  HOST_TO_LE_16(buff+12,g_axes->AXIS_Z);
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	773b      	strb	r3, [r7, #28]
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	121b      	asrs	r3, r3, #8
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	777b      	strb	r3, [r7, #29]
  
  HOST_TO_LE_16(buff+14,m_axes->AXIS_Y);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	77bb      	strb	r3, [r7, #30]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	121b      	asrs	r3, r3, #8
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	77fb      	strb	r3, [r7, #31]
  HOST_TO_LE_16(buff+16,m_axes->AXIS_X);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	f887 3020 	strb.w	r3, [r7, #32]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	121b      	asrs	r3, r3, #8
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  HOST_TO_LE_16(buff+18,m_axes->AXIS_Z);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	b2db      	uxtb	r3, r3
 8002306:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	121b      	asrs	r3, r3, #8
 8002310:	b2db      	uxtb	r3, r3
 8002312:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    
  ret = aci_gatt_update_char_value(HWServW2STHandle, AccGyroMagCharHandle,
 8002316:	4b0f      	ldr	r3, [pc, #60]	; (8002354 <Acc_Update+0x118>)
 8002318:	8818      	ldrh	r0, [r3, #0]
 800231a:	4b0f      	ldr	r3, [pc, #60]	; (8002358 <Acc_Update+0x11c>)
 800231c:	8819      	ldrh	r1, [r3, #0]
 800231e:	f107 0310 	add.w	r3, r7, #16
 8002322:	9300      	str	r3, [sp, #0]
 8002324:	2314      	movs	r3, #20
 8002326:	2200      	movs	r2, #0
 8002328:	f00c fc19 	bl	800eb5e <aci_gatt_update_char_value>
 800232c:	4603      	mov	r3, r0
 800232e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				   0, 2+2*3*3, buff);
  if (ret != BLE_STATUS_SUCCESS){
 8002332:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002336:	2b00      	cmp	r3, #0
 8002338:	d007      	beq.n	800234a <Acc_Update+0x10e>
    PRINTF("Error while updating Acceleration characteristic: 0x%02X\n",ret) ;
 800233a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800233e:	4619      	mov	r1, r3
 8002340:	4806      	ldr	r0, [pc, #24]	; (800235c <Acc_Update+0x120>)
 8002342:	f018 f971 	bl	801a628 <iprintf>
    return BLE_STATUS_ERROR ;
 8002346:	2347      	movs	r3, #71	; 0x47
 8002348:	e000      	b.n	800234c <Acc_Update+0x110>
  }

  return BLE_STATUS_SUCCESS;  
 800234a:	2300      	movs	r3, #0
}
 800234c:	4618      	mov	r0, r3
 800234e:	3728      	adds	r7, #40	; 0x28
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	200027be 	.word	0x200027be
 8002358:	200027c0 	.word	0x200027c0
 800235c:	0801d3d4 	.word	0x0801d3d4

08002360 <Quat_Update>:
 * @brief  Update quaternions characteristic value
 * @param  SensorAxes_t *data Structure containing the quaterions
 * @retval tBleStatus      Status
 */
tBleStatus Quat_Update(AxesRaw_t *data)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b088      	sub	sp, #32
 8002364:	af02      	add	r7, sp, #8
 8002366:	6078      	str	r0, [r7, #4]
  tBleStatus ret;
  uint8_t buff[2+6*SEND_N_QUATERNIONS];

  HOST_TO_LE_16(buff,(HAL_GetTick()>>3));
 8002368:	f006 fd68 	bl	8008e3c <HAL_GetTick>
 800236c:	4603      	mov	r3, r0
 800236e:	08db      	lsrs	r3, r3, #3
 8002370:	b2db      	uxtb	r3, r3
 8002372:	733b      	strb	r3, [r7, #12]
 8002374:	f006 fd62 	bl	8008e3c <HAL_GetTick>
 8002378:	4603      	mov	r3, r0
 800237a:	0adb      	lsrs	r3, r3, #11
 800237c:	b2db      	uxtb	r3, r3
 800237e:	737b      	strb	r3, [r7, #13]

#if SEND_N_QUATERNIONS == 1
  HOST_TO_LE_16(buff+2,data[0].AXIS_X);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	b2db      	uxtb	r3, r3
 8002386:	73bb      	strb	r3, [r7, #14]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	121b      	asrs	r3, r3, #8
 800238e:	b2db      	uxtb	r3, r3
 8002390:	73fb      	strb	r3, [r7, #15]
  HOST_TO_LE_16(buff+4,data[0].AXIS_Y);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	b2db      	uxtb	r3, r3
 8002398:	743b      	strb	r3, [r7, #16]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	121b      	asrs	r3, r3, #8
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	747b      	strb	r3, [r7, #17]
  HOST_TO_LE_16(buff+6,data[0].AXIS_Z);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	74bb      	strb	r3, [r7, #18]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	121b      	asrs	r3, r3, #8
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	74fb      	strb	r3, [r7, #19]
  HOST_TO_LE_16(buff+18,data[2].AXIS_Z);
#else
#error SEND_N_QUATERNIONS could be only 1,2,3
#endif
  
  ret = aci_gatt_update_char_value(SWServW2STHandle, QuaternionsCharHandle,
 80023b6:	4b0e      	ldr	r3, [pc, #56]	; (80023f0 <Quat_Update+0x90>)
 80023b8:	8818      	ldrh	r0, [r3, #0]
 80023ba:	4b0e      	ldr	r3, [pc, #56]	; (80023f4 <Quat_Update+0x94>)
 80023bc:	8819      	ldrh	r1, [r3, #0]
 80023be:	f107 030c 	add.w	r3, r7, #12
 80023c2:	9300      	str	r3, [sp, #0]
 80023c4:	2308      	movs	r3, #8
 80023c6:	2200      	movs	r2, #0
 80023c8:	f00c fbc9 	bl	800eb5e <aci_gatt_update_char_value>
 80023cc:	4603      	mov	r3, r0
 80023ce:	75fb      	strb	r3, [r7, #23]
				   0, 2+6*SEND_N_QUATERNIONS, buff);
  if (ret != BLE_STATUS_SUCCESS){
 80023d0:	7dfb      	ldrb	r3, [r7, #23]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d006      	beq.n	80023e4 <Quat_Update+0x84>
    PRINTF("Error while updating Sensor Fusion characteristic: 0x%02X\n",ret) ;
 80023d6:	7dfb      	ldrb	r3, [r7, #23]
 80023d8:	4619      	mov	r1, r3
 80023da:	4807      	ldr	r0, [pc, #28]	; (80023f8 <Quat_Update+0x98>)
 80023dc:	f018 f924 	bl	801a628 <iprintf>
    return BLE_STATUS_ERROR ;
 80023e0:	2347      	movs	r3, #71	; 0x47
 80023e2:	e000      	b.n	80023e6 <Quat_Update+0x86>
  }
  
  return BLE_STATUS_SUCCESS;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3718      	adds	r7, #24
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	200027bc 	.word	0x200027bc
 80023f4:	200027aa 	.word	0x200027aa
 80023f8:	0801d410 	.word	0x0801d410

080023fc <Read_Request_CB>:
* Description    : Update the sensor valuse.
* Input          : Handle of the characteristic to update.
* Return         : None.
*******************************************************************************/
void Read_Request_CB(uint16_t handle)
{
 80023fc:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8002400:	b086      	sub	sp, #24
 8002402:	af00      	add	r7, sp, #0
 8002404:	4603      	mov	r3, r0
 8002406:	80fb      	strh	r3, [r7, #6]
  tBleStatus ret;
  
  if(handle == AccGyroMagCharHandle + 1)
 8002408:	88fa      	ldrh	r2, [r7, #6]
 800240a:	4b57      	ldr	r3, [pc, #348]	; (8002568 <Read_Request_CB+0x16c>)
 800240c:	881b      	ldrh	r3, [r3, #0]
 800240e:	3301      	adds	r3, #1
 8002410:	429a      	cmp	r2, r3
 8002412:	d105      	bne.n	8002420 <Read_Request_CB+0x24>
  {    
    Acc_Update(&x_axes, &g_axes, &m_axes);
 8002414:	4a55      	ldr	r2, [pc, #340]	; (800256c <Read_Request_CB+0x170>)
 8002416:	4956      	ldr	r1, [pc, #344]	; (8002570 <Read_Request_CB+0x174>)
 8002418:	4856      	ldr	r0, [pc, #344]	; (8002574 <Read_Request_CB+0x178>)
 800241a:	f7ff ff0f 	bl	800223c <Acc_Update>
 800241e:	e08b      	b.n	8002538 <Read_Request_CB+0x13c>
  }
  else if (handle == EnvironmentalCharHandle + 1)
 8002420:	88fa      	ldrh	r2, [r7, #6]
 8002422:	4b55      	ldr	r3, [pc, #340]	; (8002578 <Read_Request_CB+0x17c>)
 8002424:	881b      	ldrh	r3, [r3, #0]
 8002426:	3301      	adds	r3, #1
 8002428:	429a      	cmp	r2, r3
 800242a:	f040 8085 	bne.w	8002538 <Read_Request_CB+0x13c>
  {
    float data_t, data_p;
    data_t = 27.0 + ((uint64_t)rand()*5)/RAND_MAX; //T sensor emulation        
 800242e:	f018 f99b 	bl	801a768 <rand>
 8002432:	4603      	mov	r3, r0
 8002434:	461d      	mov	r5, r3
 8002436:	ea4f 76e5 	mov.w	r6, r5, asr #31
 800243a:	4629      	mov	r1, r5
 800243c:	4632      	mov	r2, r6
 800243e:	f04f 0300 	mov.w	r3, #0
 8002442:	f04f 0400 	mov.w	r4, #0
 8002446:	0094      	lsls	r4, r2, #2
 8002448:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800244c:	008b      	lsls	r3, r1, #2
 800244e:	4619      	mov	r1, r3
 8002450:	4622      	mov	r2, r4
 8002452:	194b      	adds	r3, r1, r5
 8002454:	eb42 0406 	adc.w	r4, r2, r6
 8002458:	4618      	mov	r0, r3
 800245a:	4621      	mov	r1, r4
 800245c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002460:	f04f 0300 	mov.w	r3, #0
 8002464:	f7fe fbf8 	bl	8000c58 <__aeabi_uldivmod>
 8002468:	4603      	mov	r3, r0
 800246a:	460c      	mov	r4, r1
 800246c:	4618      	mov	r0, r3
 800246e:	4621      	mov	r1, r4
 8002470:	f7fe f894 	bl	800059c <__aeabi_ul2d>
 8002474:	f04f 0200 	mov.w	r2, #0
 8002478:	4b40      	ldr	r3, [pc, #256]	; (800257c <Read_Request_CB+0x180>)
 800247a:	f7fd ff0f 	bl	800029c <__adddf3>
 800247e:	4603      	mov	r3, r0
 8002480:	460c      	mov	r4, r1
 8002482:	4618      	mov	r0, r3
 8002484:	4621      	mov	r1, r4
 8002486:	f7fe fb97 	bl	8000bb8 <__aeabi_d2f>
 800248a:	4603      	mov	r3, r0
 800248c:	617b      	str	r3, [r7, #20]
    data_p = 1000.0 + ((uint64_t)rand()*100)/RAND_MAX; //P sensor emulation        
 800248e:	f018 f96b 	bl	801a768 <rand>
 8002492:	4603      	mov	r3, r0
 8002494:	461d      	mov	r5, r3
 8002496:	ea4f 76e5 	mov.w	r6, r5, asr #31
 800249a:	46ab      	mov	fp, r5
 800249c:	46b4      	mov	ip, r6
 800249e:	eb1b 030b 	adds.w	r3, fp, fp
 80024a2:	eb4c 040c 	adc.w	r4, ip, ip
 80024a6:	469b      	mov	fp, r3
 80024a8:	46a4      	mov	ip, r4
 80024aa:	eb1b 0b05 	adds.w	fp, fp, r5
 80024ae:	eb4c 0c06 	adc.w	ip, ip, r6
 80024b2:	f04f 0100 	mov.w	r1, #0
 80024b6:	f04f 0200 	mov.w	r2, #0
 80024ba:	ea4f 124c 	mov.w	r2, ip, lsl #5
 80024be:	ea42 62db 	orr.w	r2, r2, fp, lsr #27
 80024c2:	ea4f 114b 	mov.w	r1, fp, lsl #5
 80024c6:	eb1b 0b01 	adds.w	fp, fp, r1
 80024ca:	eb4c 0c02 	adc.w	ip, ip, r2
 80024ce:	eb1b 0005 	adds.w	r0, fp, r5
 80024d2:	eb4c 0106 	adc.w	r1, ip, r6
 80024d6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80024da:	f04f 0300 	mov.w	r3, #0
 80024de:	f7fe fbbb 	bl	8000c58 <__aeabi_uldivmod>
 80024e2:	4603      	mov	r3, r0
 80024e4:	460c      	mov	r4, r1
 80024e6:	4618      	mov	r0, r3
 80024e8:	4621      	mov	r1, r4
 80024ea:	f7fe f857 	bl	800059c <__aeabi_ul2d>
 80024ee:	f04f 0200 	mov.w	r2, #0
 80024f2:	4b23      	ldr	r3, [pc, #140]	; (8002580 <Read_Request_CB+0x184>)
 80024f4:	f7fd fed2 	bl	800029c <__adddf3>
 80024f8:	4603      	mov	r3, r0
 80024fa:	460c      	mov	r4, r1
 80024fc:	4618      	mov	r0, r3
 80024fe:	4621      	mov	r1, r4
 8002500:	f7fe fb5a 	bl	8000bb8 <__aeabi_d2f>
 8002504:	4603      	mov	r3, r0
 8002506:	613b      	str	r3, [r7, #16]
    BlueMS_Environmental_Update((int32_t)(data_p *100), (int16_t)(data_t * 10)); 
 8002508:	edd7 7a04 	vldr	s15, [r7, #16]
 800250c:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8002584 <Read_Request_CB+0x188>
 8002510:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002514:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8002518:	edd7 7a05 	vldr	s15, [r7, #20]
 800251c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002520:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002524:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002528:	ee17 3a90 	vmov	r3, s15
 800252c:	b21b      	sxth	r3, r3
 800252e:	4619      	mov	r1, r3
 8002530:	ee16 0a90 	vmov	r0, s13
 8002534:	f000 f82c 	bl	8002590 <BlueMS_Environmental_Update>
  }

  if(connection_handle !=0)
 8002538:	4b13      	ldr	r3, [pc, #76]	; (8002588 <Read_Request_CB+0x18c>)
 800253a:	881b      	ldrh	r3, [r3, #0]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d00e      	beq.n	800255e <Read_Request_CB+0x162>
  { 
    ret = aci_gatt_allow_read(connection_handle);
 8002540:	4b11      	ldr	r3, [pc, #68]	; (8002588 <Read_Request_CB+0x18c>)
 8002542:	881b      	ldrh	r3, [r3, #0]
 8002544:	4618      	mov	r0, r3
 8002546:	f00c fb9d 	bl	800ec84 <aci_gatt_allow_read>
 800254a:	4603      	mov	r3, r0
 800254c:	73fb      	strb	r3, [r7, #15]
    if (ret != BLE_STATUS_SUCCESS)
 800254e:	7bfb      	ldrb	r3, [r7, #15]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d004      	beq.n	800255e <Read_Request_CB+0x162>
    {
      PRINTF("aci_gatt_allow_read() failed: 0x%02x\r\n", ret); 
 8002554:	7bfb      	ldrb	r3, [r7, #15]
 8002556:	4619      	mov	r1, r3
 8002558:	480c      	ldr	r0, [pc, #48]	; (800258c <Read_Request_CB+0x190>)
 800255a:	f018 f865 	bl	801a628 <iprintf>
    }
  }
}
 800255e:	bf00      	nop
 8002560:	3718      	adds	r7, #24
 8002562:	46bd      	mov	sp, r7
 8002564:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8002568:	200027c0 	.word	0x200027c0
 800256c:	200021d8 	.word	0x200021d8
 8002570:	200021cc 	.word	0x200021cc
 8002574:	200021c0 	.word	0x200021c0
 8002578:	200027a8 	.word	0x200027a8
 800257c:	403b0000 	.word	0x403b0000
 8002580:	408f4000 	.word	0x408f4000
 8002584:	42c80000 	.word	0x42c80000
 8002588:	200021b8 	.word	0x200021b8
 800258c:	0801d44c 	.word	0x0801d44c

08002590 <BlueMS_Environmental_Update>:

tBleStatus BlueMS_Environmental_Update(int32_t press, int16_t temp)
{  
 8002590:	b580      	push	{r7, lr}
 8002592:	b088      	sub	sp, #32
 8002594:	af02      	add	r7, sp, #8
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	460b      	mov	r3, r1
 800259a:	807b      	strh	r3, [r7, #2]
  tBleStatus ret;
  uint8_t buff[8];
  HOST_TO_LE_16(buff, HAL_GetTick()>>3);
 800259c:	f006 fc4e 	bl	8008e3c <HAL_GetTick>
 80025a0:	4603      	mov	r3, r0
 80025a2:	08db      	lsrs	r3, r3, #3
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	733b      	strb	r3, [r7, #12]
 80025a8:	f006 fc48 	bl	8008e3c <HAL_GetTick>
 80025ac:	4603      	mov	r3, r0
 80025ae:	0adb      	lsrs	r3, r3, #11
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	737b      	strb	r3, [r7, #13]
  
  HOST_TO_LE_32(buff+2,press);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	73bb      	strb	r3, [r7, #14]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	121b      	asrs	r3, r3, #8
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	73fb      	strb	r3, [r7, #15]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	141b      	asrs	r3, r3, #16
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	743b      	strb	r3, [r7, #16]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	161b      	asrs	r3, r3, #24
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	747b      	strb	r3, [r7, #17]
  HOST_TO_LE_16(buff+6,temp);
 80025d2:	887b      	ldrh	r3, [r7, #2]
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	74bb      	strb	r3, [r7, #18]
 80025d8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80025dc:	121b      	asrs	r3, r3, #8
 80025de:	b21b      	sxth	r3, r3
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	74fb      	strb	r3, [r7, #19]
  
  ret = aci_gatt_update_char_value(HWServW2STHandle, EnvironmentalCharHandle, 
 80025e4:	4b0d      	ldr	r3, [pc, #52]	; (800261c <BlueMS_Environmental_Update+0x8c>)
 80025e6:	8818      	ldrh	r0, [r3, #0]
 80025e8:	4b0d      	ldr	r3, [pc, #52]	; (8002620 <BlueMS_Environmental_Update+0x90>)
 80025ea:	8819      	ldrh	r1, [r3, #0]
 80025ec:	f107 030c 	add.w	r3, r7, #12
 80025f0:	9300      	str	r3, [sp, #0]
 80025f2:	2308      	movs	r3, #8
 80025f4:	2200      	movs	r2, #0
 80025f6:	f00c fab2 	bl	800eb5e <aci_gatt_update_char_value>
 80025fa:	4603      	mov	r3, r0
 80025fc:	75fb      	strb	r3, [r7, #23]
                                   0, 8, buff);
  
  if (ret != BLE_STATUS_SUCCESS){
 80025fe:	7dfb      	ldrb	r3, [r7, #23]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d006      	beq.n	8002612 <BlueMS_Environmental_Update+0x82>
    PRINTF("Error while updating TEMP characteristic: 0x%04X\n",ret) ;
 8002604:	7dfb      	ldrb	r3, [r7, #23]
 8002606:	4619      	mov	r1, r3
 8002608:	4806      	ldr	r0, [pc, #24]	; (8002624 <BlueMS_Environmental_Update+0x94>)
 800260a:	f018 f80d 	bl	801a628 <iprintf>
    return BLE_STATUS_ERROR ;
 800260e:	2347      	movs	r3, #71	; 0x47
 8002610:	e000      	b.n	8002614 <BlueMS_Environmental_Update+0x84>
  }
  
  return BLE_STATUS_SUCCESS;	
 8002612:	2300      	movs	r3, #0
}
 8002614:	4618      	mov	r0, r3
 8002616:	3718      	adds	r7, #24
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	200027be 	.word	0x200027be
 8002620:	200027a8 	.word	0x200027a8
 8002624:	0801d474 	.word	0x0801d474

08002628 <Set_DeviceConnectable>:
 * Input          : None.
 * Output         : None.
 * Return         : None.
 *******************************************************************************/
void Set_DeviceConnectable(void)
{  
 8002628:	b580      	push	{r7, lr}
 800262a:	b092      	sub	sp, #72	; 0x48
 800262c:	af08      	add	r7, sp, #32
  uint8_t ret;
  const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,SENSOR_DEMO_NAME}; 
 800262e:	4a3f      	ldr	r2, [pc, #252]	; (800272c <Set_DeviceConnectable+0x104>)
 8002630:	f107 031c 	add.w	r3, r7, #28
 8002634:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002638:	e883 0003 	stmia.w	r3, {r0, r1}
    
  uint8_t manuf_data[26] = {
 800263c:	2302      	movs	r3, #2
 800263e:	703b      	strb	r3, [r7, #0]
 8002640:	230a      	movs	r3, #10
 8002642:	707b      	strb	r3, [r7, #1]
 8002644:	2300      	movs	r3, #0
 8002646:	70bb      	strb	r3, [r7, #2]
 8002648:	2308      	movs	r3, #8
 800264a:	70fb      	strb	r3, [r7, #3]
 800264c:	2309      	movs	r3, #9
 800264e:	713b      	strb	r3, [r7, #4]
 8002650:	2342      	movs	r3, #66	; 0x42
 8002652:	717b      	strb	r3, [r7, #5]
 8002654:	236c      	movs	r3, #108	; 0x6c
 8002656:	71bb      	strb	r3, [r7, #6]
 8002658:	2375      	movs	r3, #117	; 0x75
 800265a:	71fb      	strb	r3, [r7, #7]
 800265c:	2365      	movs	r3, #101	; 0x65
 800265e:	723b      	strb	r3, [r7, #8]
 8002660:	234e      	movs	r3, #78	; 0x4e
 8002662:	727b      	strb	r3, [r7, #9]
 8002664:	2352      	movs	r3, #82	; 0x52
 8002666:	72bb      	strb	r3, [r7, #10]
 8002668:	2347      	movs	r3, #71	; 0x47
 800266a:	72fb      	strb	r3, [r7, #11]
 800266c:	230d      	movs	r3, #13
 800266e:	733b      	strb	r3, [r7, #12]
 8002670:	23ff      	movs	r3, #255	; 0xff
 8002672:	737b      	strb	r3, [r7, #13]
 8002674:	2301      	movs	r3, #1
 8002676:	73bb      	strb	r3, [r7, #14]
 8002678:	2302      	movs	r3, #2
 800267a:	73fb      	strb	r3, [r7, #15]
 800267c:	2300      	movs	r3, #0
 800267e:	743b      	strb	r3, [r7, #16]
 8002680:	23f4      	movs	r3, #244	; 0xf4
 8002682:	747b      	strb	r3, [r7, #17]
 8002684:	2300      	movs	r3, #0
 8002686:	74bb      	strb	r3, [r7, #18]
 8002688:	2300      	movs	r3, #0
 800268a:	74fb      	strb	r3, [r7, #19]
    0x02,
    0x00,
    0xF4, /* ACC+Gyro+Mag 0xE0 | 0x04 Temp | 0x10 Pressure */
    0x00, /*  */
    0x00, /*  */
    bdaddr[5], /* BLE MAC start -MSB first- */
 800268c:	4b28      	ldr	r3, [pc, #160]	; (8002730 <Set_DeviceConnectable+0x108>)
 800268e:	795b      	ldrb	r3, [r3, #5]
  uint8_t manuf_data[26] = {
 8002690:	753b      	strb	r3, [r7, #20]
    bdaddr[4],
 8002692:	4b27      	ldr	r3, [pc, #156]	; (8002730 <Set_DeviceConnectable+0x108>)
 8002694:	791b      	ldrb	r3, [r3, #4]
  uint8_t manuf_data[26] = {
 8002696:	757b      	strb	r3, [r7, #21]
    bdaddr[3],
 8002698:	4b25      	ldr	r3, [pc, #148]	; (8002730 <Set_DeviceConnectable+0x108>)
 800269a:	78db      	ldrb	r3, [r3, #3]
  uint8_t manuf_data[26] = {
 800269c:	75bb      	strb	r3, [r7, #22]
    bdaddr[2],
 800269e:	4b24      	ldr	r3, [pc, #144]	; (8002730 <Set_DeviceConnectable+0x108>)
 80026a0:	789b      	ldrb	r3, [r3, #2]
  uint8_t manuf_data[26] = {
 80026a2:	75fb      	strb	r3, [r7, #23]
    bdaddr[1],
 80026a4:	4b22      	ldr	r3, [pc, #136]	; (8002730 <Set_DeviceConnectable+0x108>)
 80026a6:	785b      	ldrb	r3, [r3, #1]
  uint8_t manuf_data[26] = {
 80026a8:	763b      	strb	r3, [r7, #24]
    bdaddr[0]  /* BLE MAC stop */
 80026aa:	4b21      	ldr	r3, [pc, #132]	; (8002730 <Set_DeviceConnectable+0x108>)
 80026ac:	781b      	ldrb	r3, [r3, #0]
  uint8_t manuf_data[26] = {
 80026ae:	767b      	strb	r3, [r7, #25]
  };
  
  manuf_data[18] |= 0x01; /* Sensor Fusion */
 80026b0:	7cbb      	ldrb	r3, [r7, #18]
 80026b2:	f043 0301 	orr.w	r3, r3, #1
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	74bb      	strb	r3, [r7, #18]
  
  hci_le_set_scan_resp_data(0, NULL);
 80026ba:	2100      	movs	r1, #0
 80026bc:	2000      	movs	r0, #0
 80026be:	f00c fc42 	bl	800ef46 <hci_le_set_scan_resp_data>
  
  PRINTF("Set General Discoverable Mode.\n");
 80026c2:	481c      	ldr	r0, [pc, #112]	; (8002734 <Set_DeviceConnectable+0x10c>)
 80026c4:	f018 f824 	bl	801a710 <puts>
  
  ret = aci_gap_set_discoverable(ADV_DATA_TYPE,
 80026c8:	2300      	movs	r3, #0
 80026ca:	9306      	str	r3, [sp, #24]
 80026cc:	2300      	movs	r3, #0
 80026ce:	9305      	str	r3, [sp, #20]
 80026d0:	2300      	movs	r3, #0
 80026d2:	9304      	str	r3, [sp, #16]
 80026d4:	2300      	movs	r3, #0
 80026d6:	9303      	str	r3, [sp, #12]
 80026d8:	f107 031c 	add.w	r3, r7, #28
 80026dc:	9302      	str	r3, [sp, #8]
 80026de:	2308      	movs	r3, #8
 80026e0:	9301      	str	r3, [sp, #4]
 80026e2:	2300      	movs	r3, #0
 80026e4:	9300      	str	r3, [sp, #0]
 80026e6:	2301      	movs	r3, #1
 80026e8:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 80026ec:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 80026f0:	2000      	movs	r0, #0
 80026f2:	f00b ff1e 	bl	800e532 <aci_gap_set_discoverable>
 80026f6:	4603      	mov	r3, r0
 80026f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                (ADV_INTERVAL_MIN_MS*1000)/625,(ADV_INTERVAL_MAX_MS*1000)/625,
                                 STATIC_RANDOM_ADDR, NO_WHITE_LIST_USE,
                                 sizeof(local_name), local_name, 0, NULL, 0, 0); 
  
  aci_gap_update_adv_data(26, manuf_data);
 80026fc:	463b      	mov	r3, r7
 80026fe:	4619      	mov	r1, r3
 8002700:	201a      	movs	r0, #26
 8002702:	f00c f859 	bl	800e7b8 <aci_gap_update_adv_data>
  
  if(ret != BLE_STATUS_SUCCESS)
 8002706:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800270a:	2b00      	cmp	r3, #0
 800270c:	d006      	beq.n	800271c <Set_DeviceConnectable+0xf4>
  {
    PRINTF("aci_gap_set_discoverable() failed: 0x%02x\r\n", ret);
 800270e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002712:	4619      	mov	r1, r3
 8002714:	4808      	ldr	r0, [pc, #32]	; (8002738 <Set_DeviceConnectable+0x110>)
 8002716:	f017 ff87 	bl	801a628 <iprintf>
  }
  else
    PRINTF("aci_gap_set_discoverable() --> SUCCESS\r\n");
}
 800271a:	e002      	b.n	8002722 <Set_DeviceConnectable+0xfa>
    PRINTF("aci_gap_set_discoverable() --> SUCCESS\r\n");
 800271c:	4807      	ldr	r0, [pc, #28]	; (800273c <Set_DeviceConnectable+0x114>)
 800271e:	f017 fff7 	bl	801a710 <puts>
}
 8002722:	bf00      	nop
 8002724:	3728      	adds	r7, #40	; 0x28
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	0801d51c 	.word	0x0801d51c
 8002730:	200027a0 	.word	0x200027a0
 8002734:	0801d4a8 	.word	0x0801d4a8
 8002738:	0801d4c8 	.word	0x0801d4c8
 800273c:	0801d4f4 	.word	0x0801d4f4

08002740 <user_notify>:
 *         parsed.
 * @param  void* Pointer to the ACI packet
 * @retval None
 */
void user_notify(void * pData)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b088      	sub	sp, #32
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  hci_uart_pckt *hci_pckt = pData;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	61fb      	str	r3, [r7, #28]
  /* obtain event packet */
  hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	3301      	adds	r3, #1
 8002750:	61bb      	str	r3, [r7, #24]
  
  if(hci_pckt->type != HCI_EVENT_PKT)
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	2b04      	cmp	r3, #4
 8002758:	d139      	bne.n	80027ce <user_notify+0x8e>
    return;
  
  switch(event_pckt->evt){
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	2b3e      	cmp	r3, #62	; 0x3e
 8002760:	d006      	beq.n	8002770 <user_notify+0x30>
 8002762:	2bff      	cmp	r3, #255	; 0xff
 8002764:	d01b      	beq.n	800279e <user_notify+0x5e>
 8002766:	2b05      	cmp	r3, #5
 8002768:	d132      	bne.n	80027d0 <user_notify+0x90>
    
  case EVT_DISCONN_COMPLETE:
    {
      GAP_DisconnectionComplete_CB();
 800276a:	f000 f835 	bl	80027d8 <GAP_DisconnectionComplete_CB>
    }
    break;
 800276e:	e02f      	b.n	80027d0 <user_notify+0x90>
    
  case EVT_LE_META_EVENT:
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	3302      	adds	r3, #2
 8002774:	60fb      	str	r3, [r7, #12]
      
      switch(evt->subevent){
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d000      	beq.n	8002780 <user_notify+0x40>
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
        }
        break;
      }
    }
    break;
 800277e:	e027      	b.n	80027d0 <user_notify+0x90>
          evt_le_connection_complete *cc = (void *)evt->data;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	3301      	adds	r3, #1
 8002784:	60bb      	str	r3, [r7, #8]
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	1d5a      	adds	r2, r3, #5
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8002790:	b29b      	uxth	r3, r3
 8002792:	4619      	mov	r1, r3
 8002794:	4610      	mov	r0, r2
 8002796:	f000 f837 	bl	8002808 <GAP_ConnectionComplete_CB>
        break;
 800279a:	bf00      	nop
    break;
 800279c:	e018      	b.n	80027d0 <user_notify+0x90>
    
  case EVT_VENDOR:
    {
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	3302      	adds	r3, #2
 80027a2:	617b      	str	r3, [r7, #20]
      switch(blue_evt->ecode){
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	881b      	ldrh	r3, [r3, #0]
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	461a      	mov	r2, r3
 80027ac:	f640 4314 	movw	r3, #3092	; 0xc14
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d000      	beq.n	80027b6 <user_notify+0x76>
        }
        break;        
      }
      
    }
    break;
 80027b4:	e00c      	b.n	80027d0 <user_notify+0x90>
          evt_gatt_read_permit_req *pr = (void*)blue_evt->data;                    
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	3302      	adds	r3, #2
 80027ba:	613b      	str	r3, [r7, #16]
          Read_Request_CB(pr->attr_handle);                    
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	885b      	ldrh	r3, [r3, #2]
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7ff fe1a 	bl	80023fc <Read_Request_CB>
        break;        
 80027c8:	bf00      	nop
    break;
 80027ca:	bf00      	nop
 80027cc:	e000      	b.n	80027d0 <user_notify+0x90>
    return;
 80027ce:	bf00      	nop
  }    
}
 80027d0:	3720      	adds	r7, #32
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
	...

080027d8 <GAP_DisconnectionComplete_CB>:
 * @brief  This function is called when the peer device gets disconnected.
 * @param  None 
 * @retval None
 */
void GAP_DisconnectionComplete_CB(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
  connected = FALSE;
 80027dc:	4b06      	ldr	r3, [pc, #24]	; (80027f8 <GAP_DisconnectionComplete_CB+0x20>)
 80027de:	2200      	movs	r2, #0
 80027e0:	601a      	str	r2, [r3, #0]
  PRINTF("Disconnected\n");
 80027e2:	4806      	ldr	r0, [pc, #24]	; (80027fc <GAP_DisconnectionComplete_CB+0x24>)
 80027e4:	f017 ff94 	bl	801a710 <puts>
  /* Make the device connectable again. */
  set_connectable = TRUE;
 80027e8:	4b05      	ldr	r3, [pc, #20]	; (8002800 <GAP_DisconnectionComplete_CB+0x28>)
 80027ea:	2201      	movs	r2, #1
 80027ec:	701a      	strb	r2, [r3, #0]
  notification_enabled = FALSE;
 80027ee:	4b05      	ldr	r3, [pc, #20]	; (8002804 <GAP_DisconnectionComplete_CB+0x2c>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	701a      	strb	r2, [r3, #0]
}
 80027f4:	bf00      	nop
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	200021bc 	.word	0x200021bc
 80027fc:	0801d524 	.word	0x0801d524
 8002800:	200011c1 	.word	0x200011c1
 8002804:	200021ba 	.word	0x200021ba

08002808 <GAP_ConnectionComplete_CB>:
 * @param  uint8_t Address of peer device
 * @param  uint16_t Connection handle
 * @retval None
 */
void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle)
{  
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	460b      	mov	r3, r1
 8002812:	807b      	strh	r3, [r7, #2]
  connected = TRUE;
 8002814:	4b11      	ldr	r3, [pc, #68]	; (800285c <GAP_ConnectionComplete_CB+0x54>)
 8002816:	2201      	movs	r2, #1
 8002818:	601a      	str	r2, [r3, #0]
  connection_handle = handle;
 800281a:	4a11      	ldr	r2, [pc, #68]	; (8002860 <GAP_ConnectionComplete_CB+0x58>)
 800281c:	887b      	ldrh	r3, [r7, #2]
 800281e:	8013      	strh	r3, [r2, #0]
  
  PRINTF("Connected to device:");
 8002820:	4810      	ldr	r0, [pc, #64]	; (8002864 <GAP_ConnectionComplete_CB+0x5c>)
 8002822:	f017 ff01 	bl	801a628 <iprintf>
  for(uint32_t i = 5; i > 0; i--){
 8002826:	2305      	movs	r3, #5
 8002828:	60fb      	str	r3, [r7, #12]
 800282a:	e00a      	b.n	8002842 <GAP_ConnectionComplete_CB+0x3a>
    PRINTF("%02X-", addr[i]);
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	4413      	add	r3, r2
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	4619      	mov	r1, r3
 8002836:	480c      	ldr	r0, [pc, #48]	; (8002868 <GAP_ConnectionComplete_CB+0x60>)
 8002838:	f017 fef6 	bl	801a628 <iprintf>
  for(uint32_t i = 5; i > 0; i--){
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	3b01      	subs	r3, #1
 8002840:	60fb      	str	r3, [r7, #12]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d1f1      	bne.n	800282c <GAP_ConnectionComplete_CB+0x24>
  }
  PRINTF("%02X\n", addr[0]);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	4619      	mov	r1, r3
 800284e:	4807      	ldr	r0, [pc, #28]	; (800286c <GAP_ConnectionComplete_CB+0x64>)
 8002850:	f017 feea 	bl	801a628 <iprintf>
}
 8002854:	bf00      	nop
 8002856:	3710      	adds	r7, #16
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	200021bc 	.word	0x200021bc
 8002860:	200021b8 	.word	0x200021b8
 8002864:	0801d534 	.word	0x0801d534
 8002868:	0801d54c 	.word	0x0801d54c
 800286c:	0801d554 	.word	0x0801d554

08002870 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct 
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b088      	sub	sp, #32
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002878:	2300      	movs	r3, #0
 800287a:	60bb      	str	r3, [r7, #8]
 800287c:	4b1d      	ldr	r3, [pc, #116]	; (80028f4 <HCI_TL_SPI_Init+0x84>)
 800287e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002880:	4a1c      	ldr	r2, [pc, #112]	; (80028f4 <HCI_TL_SPI_Init+0x84>)
 8002882:	f043 0301 	orr.w	r3, r3, #1
 8002886:	6313      	str	r3, [r2, #48]	; 0x30
 8002888:	4b1a      	ldr	r3, [pc, #104]	; (80028f4 <HCI_TL_SPI_Init+0x84>)
 800288a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288c:	f003 0301 	and.w	r3, r3, #1
 8002890:	60bb      	str	r3, [r7, #8]
 8002892:	68bb      	ldr	r3, [r7, #8]
  
  /*Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8002894:	2301      	movs	r3, #1
 8002896:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002898:	4b17      	ldr	r3, [pc, #92]	; (80028f8 <HCI_TL_SPI_Init+0x88>)
 800289a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289c:	2300      	movs	r3, #0
 800289e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 80028a0:	f107 030c 	add.w	r3, r7, #12
 80028a4:	4619      	mov	r1, r3
 80028a6:	4815      	ldr	r0, [pc, #84]	; (80028fc <HCI_TL_SPI_Init+0x8c>)
 80028a8:	f007 fb28 	bl	8009efc <HAL_GPIO_Init>
   
  /*Configure CS & RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 80028ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028b2:	2301      	movs	r3, #1
 80028b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b6:	2300      	movs	r3, #0
 80028b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ba:	2300      	movs	r3, #0
 80028bc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 80028be:	f107 030c 	add.w	r3, r7, #12
 80028c2:	4619      	mov	r1, r3
 80028c4:	480d      	ldr	r0, [pc, #52]	; (80028fc <HCI_TL_SPI_Init+0x8c>)
 80028c6:	f007 fb19 	bl	8009efc <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 80028ca:	2302      	movs	r3, #2
 80028cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028ce:	2301      	movs	r3, #1
 80028d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d2:	2300      	movs	r3, #0
 80028d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d6:	2300      	movs	r3, #0
 80028d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct); 
 80028da:	f107 030c 	add.w	r3, r7, #12
 80028de:	4619      	mov	r1, r3
 80028e0:	4806      	ldr	r0, [pc, #24]	; (80028fc <HCI_TL_SPI_Init+0x8c>)
 80028e2:	f007 fb0b 	bl	8009efc <HAL_GPIO_Init>
    
  return BSP_SPI1_Init();
 80028e6:	f000 fd6b 	bl	80033c0 <BSP_SPI1_Init>
 80028ea:	4603      	mov	r3, r0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3720      	adds	r7, #32
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	40023800 	.word	0x40023800
 80028f8:	10110000 	.word	0x10110000
 80028fc:	40020000 	.word	0x40020000

08002900 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN); 
 8002904:	2101      	movs	r1, #1
 8002906:	4807      	ldr	r0, [pc, #28]	; (8002924 <HCI_TL_SPI_DeInit+0x24>)
 8002908:	f007 fc7a 	bl	800a200 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN); 
 800290c:	2102      	movs	r1, #2
 800290e:	4805      	ldr	r0, [pc, #20]	; (8002924 <HCI_TL_SPI_DeInit+0x24>)
 8002910:	f007 fc76 	bl	800a200 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);   
 8002914:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002918:	4802      	ldr	r0, [pc, #8]	; (8002924 <HCI_TL_SPI_DeInit+0x24>)
 800291a:	f007 fc71 	bl	800a200 <HAL_GPIO_DeInit>
  return 0;
 800291e:	2300      	movs	r3, #0
}
 8002920:	4618      	mov	r0, r3
 8002922:	bd80      	pop	{r7, pc}
 8002924:	40020000 	.word	0x40020000

08002928 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 800292c:	2200      	movs	r2, #0
 800292e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002932:	4809      	ldr	r0, [pc, #36]	; (8002958 <HCI_TL_SPI_Reset+0x30>)
 8002934:	f007 fd5e 	bl	800a3f4 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8002938:	2005      	movs	r0, #5
 800293a:	f006 fa8b 	bl	8008e54 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 800293e:	2201      	movs	r2, #1
 8002940:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002944:	4804      	ldr	r0, [pc, #16]	; (8002958 <HCI_TL_SPI_Reset+0x30>)
 8002946:	f007 fd55 	bl	800a3f4 <HAL_GPIO_WritePin>
  HAL_Delay(5);    
 800294a:	2005      	movs	r0, #5
 800294c:	f006 fa82 	bl	8008e54 <HAL_Delay>
  return 0;
 8002950:	2300      	movs	r3, #0
}  
 8002952:	4618      	mov	r0, r3
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	40020000 	.word	0x40020000

0800295c <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b088      	sub	sp, #32
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	460b      	mov	r3, r1
 8002966:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 8002968:	2300      	movs	r3, #0
 800296a:	777b      	strb	r3, [r7, #29]
  uint8_t char_ff = 0xff;
 800296c:	23ff      	movs	r3, #255	; 0xff
 800296e:	773b      	strb	r3, [r7, #28]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8002970:	230b      	movs	r3, #11
 8002972:	753b      	strb	r3, [r7, #20]
 8002974:	2300      	movs	r3, #0
 8002976:	757b      	strb	r3, [r7, #21]
 8002978:	2300      	movs	r3, #0
 800297a:	75bb      	strb	r3, [r7, #22]
 800297c:	2300      	movs	r3, #0
 800297e:	75fb      	strb	r3, [r7, #23]
 8002980:	2300      	movs	r3, #0
 8002982:	763b      	strb	r3, [r7, #24]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8002984:	2200      	movs	r2, #0
 8002986:	2102      	movs	r1, #2
 8002988:	4820      	ldr	r0, [pc, #128]	; (8002a0c <HCI_TL_SPI_Receive+0xb0>)
 800298a:	f007 fd33 	bl	800a3f4 <HAL_GPIO_WritePin>

  /* Read the header */  
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 800298e:	f107 010c 	add.w	r1, r7, #12
 8002992:	f107 0314 	add.w	r3, r7, #20
 8002996:	2205      	movs	r2, #5
 8002998:	4618      	mov	r0, r3
 800299a:	f000 fd41 	bl	8003420 <BSP_SPI1_SendRecv>
  	
  if(header_slave[0] == 0x02) 
 800299e:	7b3b      	ldrb	r3, [r7, #12]
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d129      	bne.n	80029f8 <HCI_TL_SPI_Receive+0x9c>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 80029a4:	7c3b      	ldrb	r3, [r7, #16]
 80029a6:	021b      	lsls	r3, r3, #8
 80029a8:	b21a      	sxth	r2, r3
 80029aa:	7bfb      	ldrb	r3, [r7, #15]
 80029ac:	b21b      	sxth	r3, r3
 80029ae:	4313      	orrs	r3, r2
 80029b0:	b21b      	sxth	r3, r3
 80029b2:	83fb      	strh	r3, [r7, #30]
  
    if(byte_count > 0) {
 80029b4:	8bfb      	ldrh	r3, [r7, #30]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d01e      	beq.n	80029f8 <HCI_TL_SPI_Receive+0x9c>
  
      /* avoid to read more data that size of the buffer */

      if (byte_count > size){
 80029ba:	8bfa      	ldrh	r2, [r7, #30]
 80029bc:	887b      	ldrh	r3, [r7, #2]
 80029be:	429a      	cmp	r2, r3
 80029c0:	d901      	bls.n	80029c6 <HCI_TL_SPI_Receive+0x6a>
        byte_count = size;
 80029c2:	887b      	ldrh	r3, [r7, #2]
 80029c4:	83fb      	strh	r3, [r7, #30]
      }        
  
      for(len = 0; len < byte_count; len++)
 80029c6:	2300      	movs	r3, #0
 80029c8:	777b      	strb	r3, [r7, #29]
 80029ca:	e010      	b.n	80029ee <HCI_TL_SPI_Receive+0x92>
      {                                               
        BSP_SPI1_SendRecv(&char_ff, (uint8_t*)&read_char, 1);  
 80029cc:	f107 011b 	add.w	r1, r7, #27
 80029d0:	f107 031c 	add.w	r3, r7, #28
 80029d4:	2201      	movs	r2, #1
 80029d6:	4618      	mov	r0, r3
 80029d8:	f000 fd22 	bl	8003420 <BSP_SPI1_SendRecv>
        buffer[len] = read_char;
 80029dc:	7f7b      	ldrb	r3, [r7, #29]
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	4413      	add	r3, r2
 80029e2:	7efa      	ldrb	r2, [r7, #27]
 80029e4:	b2d2      	uxtb	r2, r2
 80029e6:	701a      	strb	r2, [r3, #0]
      for(len = 0; len < byte_count; len++)
 80029e8:	7f7b      	ldrb	r3, [r7, #29]
 80029ea:	3301      	adds	r3, #1
 80029ec:	777b      	strb	r3, [r7, #29]
 80029ee:	7f7b      	ldrb	r3, [r7, #29]
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	8bfa      	ldrh	r2, [r7, #30]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d8e9      	bhi.n	80029cc <HCI_TL_SPI_Receive+0x70>
      }      
    }    
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80029f8:	2201      	movs	r2, #1
 80029fa:	2102      	movs	r1, #2
 80029fc:	4803      	ldr	r0, [pc, #12]	; (8002a0c <HCI_TL_SPI_Receive+0xb0>)
 80029fe:	f007 fcf9 	bl	800a3f4 <HAL_GPIO_WritePin>
    }
    PRINT_CSV("\n");
  }
#endif
  
  return len;  
 8002a02:	7f7b      	ldrb	r3, [r7, #29]
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3720      	adds	r7, #32
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	40020000 	.word	0x40020000

08002a10 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{  
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b088      	sub	sp, #32
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	460b      	mov	r3, r1
 8002a1a:	807b      	strh	r3, [r7, #2]
  int32_t result;  
  
  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8002a1c:	230a      	movs	r3, #10
 8002a1e:	743b      	strb	r3, [r7, #16]
 8002a20:	2300      	movs	r3, #0
 8002a22:	747b      	strb	r3, [r7, #17]
 8002a24:	2300      	movs	r3, #0
 8002a26:	74bb      	strb	r3, [r7, #18]
 8002a28:	2300      	movs	r3, #0
 8002a2a:	74fb      	strb	r3, [r7, #19]
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	753b      	strb	r3, [r7, #20]
  uint8_t header_slave[HEADER_SIZE];
  
  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 8002a30:	f006 fa04 	bl	8008e3c <HAL_GetTick>
 8002a34:	61b8      	str	r0, [r7, #24]
  
  do
  {
    result = 0;
 8002a36:	2300      	movs	r3, #0
 8002a38:	61fb      	str	r3, [r7, #28]
    
    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	2102      	movs	r1, #2
 8002a3e:	481c      	ldr	r0, [pc, #112]	; (8002ab0 <HCI_TL_SPI_Send+0xa0>)
 8002a40:	f007 fcd8 	bl	800a3f4 <HAL_GPIO_WritePin>
    
    /* Read header */  
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 8002a44:	f107 0108 	add.w	r1, r7, #8
 8002a48:	f107 0310 	add.w	r3, r7, #16
 8002a4c:	2205      	movs	r2, #5
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f000 fce6 	bl	8003420 <BSP_SPI1_SendRecv>
    
    if(header_slave[0] == 0x02) 
 8002a54:	7a3b      	ldrb	r3, [r7, #8]
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d10f      	bne.n	8002a7a <HCI_TL_SPI_Send+0x6a>
    {
      /* SPI is ready */
      if(header_slave[1] >= size) 
 8002a5a:	7a7b      	ldrb	r3, [r7, #9]
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	887a      	ldrh	r2, [r7, #2]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d806      	bhi.n	8002a72 <HCI_TL_SPI_Send+0x62>
      {
        BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 8002a64:	887b      	ldrh	r3, [r7, #2]
 8002a66:	461a      	mov	r2, r3
 8002a68:	4912      	ldr	r1, [pc, #72]	; (8002ab4 <HCI_TL_SPI_Send+0xa4>)
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f000 fcd8 	bl	8003420 <BSP_SPI1_SendRecv>
 8002a70:	e006      	b.n	8002a80 <HCI_TL_SPI_Send+0x70>
      } 
      else 
      {
        /* Buffer is too small */
        result = -2;
 8002a72:	f06f 0301 	mvn.w	r3, #1
 8002a76:	61fb      	str	r3, [r7, #28]
 8002a78:	e002      	b.n	8002a80 <HCI_TL_SPI_Send+0x70>
      }
    } else {
      /* SPI is not ready */
      result = -1;
 8002a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a7e:	61fb      	str	r3, [r7, #28]
    }
    
    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8002a80:	2201      	movs	r2, #1
 8002a82:	2102      	movs	r1, #2
 8002a84:	480a      	ldr	r0, [pc, #40]	; (8002ab0 <HCI_TL_SPI_Send+0xa0>)
 8002a86:	f007 fcb5 	bl	800a3f4 <HAL_GPIO_WritePin>
    
    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 8002a8a:	f006 f9d7 	bl	8008e3c <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	2b0f      	cmp	r3, #15
 8002a96:	d903      	bls.n	8002aa0 <HCI_TL_SPI_Send+0x90>
    {
      result = -3;
 8002a98:	f06f 0302 	mvn.w	r3, #2
 8002a9c:	61fb      	str	r3, [r7, #28]
      break;
 8002a9e:	e002      	b.n	8002aa6 <HCI_TL_SPI_Send+0x96>
    }
  } while(result < 0);
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	dbc7      	blt.n	8002a36 <HCI_TL_SPI_Send+0x26>
  
  return result;
 8002aa6:	69fb      	ldr	r3, [r7, #28]
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3720      	adds	r7, #32
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	40020000 	.word	0x40020000
 8002ab4:	200021f0 	.word	0x200021f0

08002ab8 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8002abc:	2101      	movs	r1, #1
 8002abe:	4805      	ldr	r0, [pc, #20]	; (8002ad4 <IsDataAvailable+0x1c>)
 8002ac0:	f007 fc80 	bl	800a3c4 <HAL_GPIO_ReadPin>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	bf0c      	ite	eq
 8002aca:	2301      	moveq	r3, #1
 8002acc:	2300      	movne	r3, #0
 8002ace:	b2db      	uxtb	r3, r3
} 
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	40020000 	.word	0x40020000

08002ad8 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */ 
void hci_tl_lowlevel_init(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b088      	sub	sp, #32
 8002adc:	af00      	add	r7, sp, #0
  
  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;  
  
  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 8002ade:	4b13      	ldr	r3, [pc, #76]	; (8002b2c <hci_tl_lowlevel_init+0x54>)
 8002ae0:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 8002ae2:	4b13      	ldr	r3, [pc, #76]	; (8002b30 <hci_tl_lowlevel_init+0x58>)
 8002ae4:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 8002ae6:	4b13      	ldr	r3, [pc, #76]	; (8002b34 <hci_tl_lowlevel_init+0x5c>)
 8002ae8:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 8002aea:	4b13      	ldr	r3, [pc, #76]	; (8002b38 <hci_tl_lowlevel_init+0x60>)
 8002aec:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 8002aee:	4b13      	ldr	r3, [pc, #76]	; (8002b3c <hci_tl_lowlevel_init+0x64>)
 8002af0:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 8002af2:	4b13      	ldr	r3, [pc, #76]	; (8002b40 <hci_tl_lowlevel_init+0x68>)
 8002af4:	61fb      	str	r3, [r7, #28]
  
  hci_register_io_bus (&fops);
 8002af6:	1d3b      	adds	r3, r7, #4
 8002af8:	4618      	mov	r0, r3
 8002afa:	f00c fb3f 	bl	800f17c <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */
  
  /* USER CODE END hci_tl_lowlevel_init 2 */
  
  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 8002afe:	f04f 61c0 	mov.w	r1, #100663296	; 0x6000000
 8002b02:	4810      	ldr	r0, [pc, #64]	; (8002b44 <hci_tl_lowlevel_init+0x6c>)
 8002b04:	f007 f9c2 	bl	8009e8c <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti0, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 8002b08:	4a0f      	ldr	r2, [pc, #60]	; (8002b48 <hci_tl_lowlevel_init+0x70>)
 8002b0a:	2100      	movs	r1, #0
 8002b0c:	480d      	ldr	r0, [pc, #52]	; (8002b44 <hci_tl_lowlevel_init+0x6c>)
 8002b0e:	f007 f9a3 	bl	8009e58 <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002b12:	2200      	movs	r2, #0
 8002b14:	2100      	movs	r1, #0
 8002b16:	2006      	movs	r0, #6
 8002b18:	f006 fe63 	bl	80097e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002b1c:	2006      	movs	r0, #6
 8002b1e:	f006 fe7c 	bl	800981a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */
  
  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 8002b22:	bf00      	nop
 8002b24:	3720      	adds	r7, #32
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	08002871 	.word	0x08002871
 8002b30:	08002901 	.word	0x08002901
 8002b34:	08002a11 	.word	0x08002a11
 8002b38:	0800295d 	.word	0x0800295d
 8002b3c:	08002929 	.word	0x08002929
 8002b40:	080035dd 	.word	0x080035dd
 8002b44:	200027d4 	.word	0x200027d4
 8002b48:	08002b4d 	.word	0x08002b4d

08002b4c <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 8002b50:	e005      	b.n	8002b5e <hci_tl_lowlevel_isr+0x12>
  {        
    if (hci_notify_asynch_evt(NULL))
 8002b52:	2000      	movs	r0, #0
 8002b54:	f00c fc74 	bl	800f440 <hci_notify_asynch_evt>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d105      	bne.n	8002b6a <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 8002b5e:	f7ff ffab 	bl	8002ab8 <IsDataAvailable>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d1f4      	bne.n	8002b52 <hci_tl_lowlevel_isr+0x6>
 8002b68:	e000      	b.n	8002b6c <hci_tl_lowlevel_isr+0x20>
    {
      return;
 8002b6a:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */ 
}
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b72:	f006 f8fd 	bl	8008d70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b76:	f000 f815 	bl	8002ba4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b7a:	f000 fa1d 	bl	8002fb8 <MX_GPIO_Init>
  MX_DMA_Init();
 8002b7e:	f000 f9fb 	bl	8002f78 <MX_DMA_Init>
  MX_ADC1_Init();
 8002b82:	f000 f893 	bl	8002cac <MX_ADC1_Init>
  MX_CRC_Init();
 8002b86:	f000 f8f1 	bl	8002d6c <MX_CRC_Init>
  MX_RTC_Init();
 8002b8a:	f000 f903 	bl	8002d94 <MX_RTC_Init>
  MX_TIM2_Init();
 8002b8e:	f000 f95b 	bl	8002e48 <MX_TIM2_Init>
  MX_BlueNRG_MS_Init();
 8002b92:	f7fe f9e1 	bl	8000f58 <MX_BlueNRG_MS_Init>
  MX_MEMS_Init();
 8002b96:	f00a fedb 	bl	800d950 <MX_MEMS_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_BlueNRG_MS_Process();
 8002b9a:	f7fe facf 	bl	800113c <MX_BlueNRG_MS_Process>
  MX_MEMS_Process();
 8002b9e:	f00a fedd 	bl	800d95c <MX_MEMS_Process>
  MX_BlueNRG_MS_Process();
 8002ba2:	e7fa      	b.n	8002b9a <main+0x2c>

08002ba4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b098      	sub	sp, #96	; 0x60
 8002ba8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002baa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002bae:	2230      	movs	r2, #48	; 0x30
 8002bb0:	2100      	movs	r1, #0
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f017 fd2f 	bl	801a616 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002bb8:	f107 031c 	add.w	r3, r7, #28
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	601a      	str	r2, [r3, #0]
 8002bc0:	605a      	str	r2, [r3, #4]
 8002bc2:	609a      	str	r2, [r3, #8]
 8002bc4:	60da      	str	r2, [r3, #12]
 8002bc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002bc8:	f107 0308 	add.w	r3, r7, #8
 8002bcc:	2200      	movs	r2, #0
 8002bce:	601a      	str	r2, [r3, #0]
 8002bd0:	605a      	str	r2, [r3, #4]
 8002bd2:	609a      	str	r2, [r3, #8]
 8002bd4:	60da      	str	r2, [r3, #12]
 8002bd6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bd8:	2300      	movs	r3, #0
 8002bda:	607b      	str	r3, [r7, #4]
 8002bdc:	4b31      	ldr	r3, [pc, #196]	; (8002ca4 <SystemClock_Config+0x100>)
 8002bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be0:	4a30      	ldr	r2, [pc, #192]	; (8002ca4 <SystemClock_Config+0x100>)
 8002be2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002be6:	6413      	str	r3, [r2, #64]	; 0x40
 8002be8:	4b2e      	ldr	r3, [pc, #184]	; (8002ca4 <SystemClock_Config+0x100>)
 8002bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf0:	607b      	str	r3, [r7, #4]
 8002bf2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	603b      	str	r3, [r7, #0]
 8002bf8:	4b2b      	ldr	r3, [pc, #172]	; (8002ca8 <SystemClock_Config+0x104>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002c00:	4a29      	ldr	r2, [pc, #164]	; (8002ca8 <SystemClock_Config+0x104>)
 8002c02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c06:	6013      	str	r3, [r2, #0]
 8002c08:	4b27      	ldr	r3, [pc, #156]	; (8002ca8 <SystemClock_Config+0x104>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002c10:	603b      	str	r3, [r7, #0]
 8002c12:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8002c14:	230a      	movs	r3, #10
 8002c16:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002c1c:	2310      	movs	r3, #16
 8002c1e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002c20:	2301      	movs	r3, #1
 8002c22:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c24:	2302      	movs	r3, #2
 8002c26:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002c2c:	2308      	movs	r3, #8
 8002c2e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 72;
 8002c30:	2348      	movs	r3, #72	; 0x48
 8002c32:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002c34:	2302      	movs	r3, #2
 8002c36:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002c38:	2307      	movs	r3, #7
 8002c3a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c3c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002c40:	4618      	mov	r0, r3
 8002c42:	f008 fc19 	bl	800b478 <HAL_RCC_OscConfig>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d001      	beq.n	8002c50 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8002c4c:	f000 fa44 	bl	80030d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c50:	230f      	movs	r3, #15
 8002c52:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c54:	2302      	movs	r3, #2
 8002c56:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002c5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c60:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002c62:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002c66:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002c68:	f107 031c 	add.w	r3, r7, #28
 8002c6c:	2102      	movs	r1, #2
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f008 fe72 	bl	800b958 <HAL_RCC_ClockConfig>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <SystemClock_Config+0xda>
  {
    Error_Handler();
 8002c7a:	f000 fa2d 	bl	80030d8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002c7e:	2302      	movs	r3, #2
 8002c80:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002c82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c86:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c88:	f107 0308 	add.w	r3, r7, #8
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f009 f855 	bl	800bd3c <HAL_RCCEx_PeriphCLKConfig>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d001      	beq.n	8002c9c <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8002c98:	f000 fa1e 	bl	80030d8 <Error_Handler>
  }
}
 8002c9c:	bf00      	nop
 8002c9e:	3760      	adds	r7, #96	; 0x60
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	40023800 	.word	0x40023800
 8002ca8:	40007000 	.word	0x40007000

08002cac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002cb2:	463b      	mov	r3, r7
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	601a      	str	r2, [r3, #0]
 8002cb8:	605a      	str	r2, [r3, #4]
 8002cba:	609a      	str	r2, [r3, #8]
 8002cbc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8002cbe:	4b28      	ldr	r3, [pc, #160]	; (8002d60 <MX_ADC1_Init+0xb4>)
 8002cc0:	4a28      	ldr	r2, [pc, #160]	; (8002d64 <MX_ADC1_Init+0xb8>)
 8002cc2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002cc4:	4b26      	ldr	r3, [pc, #152]	; (8002d60 <MX_ADC1_Init+0xb4>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002cca:	4b25      	ldr	r3, [pc, #148]	; (8002d60 <MX_ADC1_Init+0xb4>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002cd0:	4b23      	ldr	r3, [pc, #140]	; (8002d60 <MX_ADC1_Init+0xb4>)
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002cd6:	4b22      	ldr	r3, [pc, #136]	; (8002d60 <MX_ADC1_Init+0xb4>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002cdc:	4b20      	ldr	r3, [pc, #128]	; (8002d60 <MX_ADC1_Init+0xb4>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002ce4:	4b1e      	ldr	r3, [pc, #120]	; (8002d60 <MX_ADC1_Init+0xb4>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002cea:	4b1d      	ldr	r3, [pc, #116]	; (8002d60 <MX_ADC1_Init+0xb4>)
 8002cec:	4a1e      	ldr	r2, [pc, #120]	; (8002d68 <MX_ADC1_Init+0xbc>)
 8002cee:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002cf0:	4b1b      	ldr	r3, [pc, #108]	; (8002d60 <MX_ADC1_Init+0xb4>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8002cf6:	4b1a      	ldr	r3, [pc, #104]	; (8002d60 <MX_ADC1_Init+0xb4>)
 8002cf8:	2202      	movs	r2, #2
 8002cfa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002cfc:	4b18      	ldr	r3, [pc, #96]	; (8002d60 <MX_ADC1_Init+0xb4>)
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002d04:	4b16      	ldr	r3, [pc, #88]	; (8002d60 <MX_ADC1_Init+0xb4>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002d0a:	4815      	ldr	r0, [pc, #84]	; (8002d60 <MX_ADC1_Init+0xb4>)
 8002d0c:	f006 f8c4 	bl	8008e98 <HAL_ADC_Init>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d001      	beq.n	8002d1a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8002d16:	f000 f9df 	bl	80030d8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002d1a:	230a      	movs	r3, #10
 8002d1c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8002d22:	2301      	movs	r3, #1
 8002d24:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d26:	463b      	mov	r3, r7
 8002d28:	4619      	mov	r1, r3
 8002d2a:	480d      	ldr	r0, [pc, #52]	; (8002d60 <MX_ADC1_Init+0xb4>)
 8002d2c:	f006 fa56 	bl	80091dc <HAL_ADC_ConfigChannel>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8002d36:	f000 f9cf 	bl	80030d8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8002d3a:	230b      	movs	r3, #11
 8002d3c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002d3e:	2302      	movs	r3, #2
 8002d40:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d42:	463b      	mov	r3, r7
 8002d44:	4619      	mov	r1, r3
 8002d46:	4806      	ldr	r0, [pc, #24]	; (8002d60 <MX_ADC1_Init+0xb4>)
 8002d48:	f006 fa48 	bl	80091dc <HAL_ADC_ConfigChannel>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d001      	beq.n	8002d56 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8002d52:	f000 f9c1 	bl	80030d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002d56:	bf00      	nop
 8002d58:	3710      	adds	r7, #16
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	20002824 	.word	0x20002824
 8002d64:	40012000 	.word	0x40012000
 8002d68:	0f000001 	.word	0x0f000001

08002d6c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002d70:	4b06      	ldr	r3, [pc, #24]	; (8002d8c <MX_CRC_Init+0x20>)
 8002d72:	4a07      	ldr	r2, [pc, #28]	; (8002d90 <MX_CRC_Init+0x24>)
 8002d74:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002d76:	4805      	ldr	r0, [pc, #20]	; (8002d8c <MX_CRC_Init+0x20>)
 8002d78:	f006 fd69 	bl	800984e <HAL_CRC_Init>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8002d82:	f000 f9a9 	bl	80030d8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8002d86:	bf00      	nop
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	200027dc 	.word	0x200027dc
 8002d90:	40023000 	.word	0x40023000

08002d94 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b086      	sub	sp, #24
 8002d98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002d9a:	1d3b      	adds	r3, r7, #4
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	601a      	str	r2, [r3, #0]
 8002da0:	605a      	str	r2, [r3, #4]
 8002da2:	609a      	str	r2, [r3, #8]
 8002da4:	60da      	str	r2, [r3, #12]
 8002da6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002da8:	2300      	movs	r3, #0
 8002daa:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8002dac:	4b24      	ldr	r3, [pc, #144]	; (8002e40 <MX_RTC_Init+0xac>)
 8002dae:	4a25      	ldr	r2, [pc, #148]	; (8002e44 <MX_RTC_Init+0xb0>)
 8002db0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002db2:	4b23      	ldr	r3, [pc, #140]	; (8002e40 <MX_RTC_Init+0xac>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002db8:	4b21      	ldr	r3, [pc, #132]	; (8002e40 <MX_RTC_Init+0xac>)
 8002dba:	227f      	movs	r2, #127	; 0x7f
 8002dbc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002dbe:	4b20      	ldr	r3, [pc, #128]	; (8002e40 <MX_RTC_Init+0xac>)
 8002dc0:	22ff      	movs	r2, #255	; 0xff
 8002dc2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002dc4:	4b1e      	ldr	r3, [pc, #120]	; (8002e40 <MX_RTC_Init+0xac>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002dca:	4b1d      	ldr	r3, [pc, #116]	; (8002e40 <MX_RTC_Init+0xac>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002dd0:	4b1b      	ldr	r3, [pc, #108]	; (8002e40 <MX_RTC_Init+0xac>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002dd6:	481a      	ldr	r0, [pc, #104]	; (8002e40 <MX_RTC_Init+0xac>)
 8002dd8:	f009 f89e 	bl	800bf18 <HAL_RTC_Init>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8002de2:	f000 f979 	bl	80030d8 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 8002de6:	2300      	movs	r3, #0
 8002de8:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8002dea:	2300      	movs	r3, #0
 8002dec:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8002dee:	2300      	movs	r3, #0
 8002df0:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002df2:	2300      	movs	r3, #0
 8002df4:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002df6:	2300      	movs	r3, #0
 8002df8:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002dfa:	1d3b      	adds	r3, r7, #4
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	4619      	mov	r1, r3
 8002e00:	480f      	ldr	r0, [pc, #60]	; (8002e40 <MX_RTC_Init+0xac>)
 8002e02:	f009 f91a 	bl	800c03a <HAL_RTC_SetTime>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d001      	beq.n	8002e10 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8002e0c:	f000 f964 	bl	80030d8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002e10:	2301      	movs	r3, #1
 8002e12:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002e14:	2301      	movs	r3, #1
 8002e16:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002e20:	463b      	mov	r3, r7
 8002e22:	2201      	movs	r2, #1
 8002e24:	4619      	mov	r1, r3
 8002e26:	4806      	ldr	r0, [pc, #24]	; (8002e40 <MX_RTC_Init+0xac>)
 8002e28:	f009 fa22 	bl	800c270 <HAL_RTC_SetDate>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8002e32:	f000 f951 	bl	80030d8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002e36:	bf00      	nop
 8002e38:	3718      	adds	r7, #24
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	200028cc 	.word	0x200028cc
 8002e44:	40002800 	.word	0x40002800

08002e48 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b086      	sub	sp, #24
 8002e4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e4e:	f107 0308 	add.w	r3, r7, #8
 8002e52:	2200      	movs	r2, #0
 8002e54:	601a      	str	r2, [r3, #0]
 8002e56:	605a      	str	r2, [r3, #4]
 8002e58:	609a      	str	r2, [r3, #8]
 8002e5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e5c:	463b      	mov	r3, r7
 8002e5e:	2200      	movs	r2, #0
 8002e60:	601a      	str	r2, [r3, #0]
 8002e62:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002e64:	4b1d      	ldr	r3, [pc, #116]	; (8002edc <MX_TIM2_Init+0x94>)
 8002e66:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002e6a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200;
 8002e6c:	4b1b      	ldr	r3, [pc, #108]	; (8002edc <MX_TIM2_Init+0x94>)
 8002e6e:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8002e72:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e74:	4b19      	ldr	r3, [pc, #100]	; (8002edc <MX_TIM2_Init+0x94>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8002e7a:	4b18      	ldr	r3, [pc, #96]	; (8002edc <MX_TIM2_Init+0x94>)
 8002e7c:	2264      	movs	r2, #100	; 0x64
 8002e7e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e80:	4b16      	ldr	r3, [pc, #88]	; (8002edc <MX_TIM2_Init+0x94>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e86:	4b15      	ldr	r3, [pc, #84]	; (8002edc <MX_TIM2_Init+0x94>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002e8c:	4813      	ldr	r0, [pc, #76]	; (8002edc <MX_TIM2_Init+0x94>)
 8002e8e:	f009 fe3f 	bl	800cb10 <HAL_TIM_Base_Init>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d001      	beq.n	8002e9c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002e98:	f000 f91e 	bl	80030d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ea0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002ea2:	f107 0308 	add.w	r3, r7, #8
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	480c      	ldr	r0, [pc, #48]	; (8002edc <MX_TIM2_Init+0x94>)
 8002eaa:	f009 fe5c 	bl	800cb66 <HAL_TIM_ConfigClockSource>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d001      	beq.n	8002eb8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002eb4:	f000 f910 	bl	80030d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002eb8:	2320      	movs	r3, #32
 8002eba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002ec0:	463b      	mov	r3, r7
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	4805      	ldr	r0, [pc, #20]	; (8002edc <MX_TIM2_Init+0x94>)
 8002ec6:	f00a f81f 	bl	800cf08 <HAL_TIMEx_MasterConfigSynchronization>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d001      	beq.n	8002ed4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002ed0:	f000 f902 	bl	80030d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002ed4:	bf00      	nop
 8002ed6:	3718      	adds	r7, #24
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	200028ec 	.word	0x200028ec

08002ee0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM3_Init(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b086      	sub	sp, #24
 8002ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ee6:	f107 0308 	add.w	r3, r7, #8
 8002eea:	2200      	movs	r2, #0
 8002eec:	601a      	str	r2, [r3, #0]
 8002eee:	605a      	str	r2, [r3, #4]
 8002ef0:	609a      	str	r2, [r3, #8]
 8002ef2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ef4:	463b      	mov	r3, r7
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	601a      	str	r2, [r3, #0]
 8002efa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002efc:	4b1c      	ldr	r3, [pc, #112]	; (8002f70 <MX_TIM3_Init+0x90>)
 8002efe:	4a1d      	ldr	r2, [pc, #116]	; (8002f74 <MX_TIM3_Init+0x94>)
 8002f00:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002f02:	4b1b      	ldr	r3, [pc, #108]	; (8002f70 <MX_TIM3_Init+0x90>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f08:	4b19      	ldr	r3, [pc, #100]	; (8002f70 <MX_TIM3_Init+0x90>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8002f0e:	4b18      	ldr	r3, [pc, #96]	; (8002f70 <MX_TIM3_Init+0x90>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f14:	4b16      	ldr	r3, [pc, #88]	; (8002f70 <MX_TIM3_Init+0x90>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f1a:	4b15      	ldr	r3, [pc, #84]	; (8002f70 <MX_TIM3_Init+0x90>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002f20:	4813      	ldr	r0, [pc, #76]	; (8002f70 <MX_TIM3_Init+0x90>)
 8002f22:	f009 fdf5 	bl	800cb10 <HAL_TIM_Base_Init>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d001      	beq.n	8002f30 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8002f2c:	f000 f8d4 	bl	80030d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f34:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002f36:	f107 0308 	add.w	r3, r7, #8
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	480c      	ldr	r0, [pc, #48]	; (8002f70 <MX_TIM3_Init+0x90>)
 8002f3e:	f009 fe12 	bl	800cb66 <HAL_TIM_ConfigClockSource>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d001      	beq.n	8002f4c <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8002f48:	f000 f8c6 	bl	80030d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f50:	2300      	movs	r3, #0
 8002f52:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002f54:	463b      	mov	r3, r7
 8002f56:	4619      	mov	r1, r3
 8002f58:	4805      	ldr	r0, [pc, #20]	; (8002f70 <MX_TIM3_Init+0x90>)
 8002f5a:	f009 ffd5 	bl	800cf08 <HAL_TIMEx_MasterConfigSynchronization>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d001      	beq.n	8002f68 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8002f64:	f000 f8b8 	bl	80030d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002f68:	bf00      	nop
 8002f6a:	3718      	adds	r7, #24
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	200027e4 	.word	0x200027e4
 8002f74:	40000400 	.word	0x40000400

08002f78 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002f7e:	2300      	movs	r3, #0
 8002f80:	607b      	str	r3, [r7, #4]
 8002f82:	4b0c      	ldr	r3, [pc, #48]	; (8002fb4 <MX_DMA_Init+0x3c>)
 8002f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f86:	4a0b      	ldr	r2, [pc, #44]	; (8002fb4 <MX_DMA_Init+0x3c>)
 8002f88:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f8e:	4b09      	ldr	r3, [pc, #36]	; (8002fb4 <MX_DMA_Init+0x3c>)
 8002f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f96:	607b      	str	r3, [r7, #4]
 8002f98:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	2100      	movs	r1, #0
 8002f9e:	2038      	movs	r0, #56	; 0x38
 8002fa0:	f006 fc1f 	bl	80097e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002fa4:	2038      	movs	r0, #56	; 0x38
 8002fa6:	f006 fc38 	bl	800981a <HAL_NVIC_EnableIRQ>

}
 8002faa:	bf00      	nop
 8002fac:	3708      	adds	r7, #8
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	40023800 	.word	0x40023800

08002fb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b08a      	sub	sp, #40	; 0x28
 8002fbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fbe:	f107 0314 	add.w	r3, r7, #20
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	601a      	str	r2, [r3, #0]
 8002fc6:	605a      	str	r2, [r3, #4]
 8002fc8:	609a      	str	r2, [r3, #8]
 8002fca:	60da      	str	r2, [r3, #12]
 8002fcc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fce:	2300      	movs	r3, #0
 8002fd0:	613b      	str	r3, [r7, #16]
 8002fd2:	4b3c      	ldr	r3, [pc, #240]	; (80030c4 <MX_GPIO_Init+0x10c>)
 8002fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd6:	4a3b      	ldr	r2, [pc, #236]	; (80030c4 <MX_GPIO_Init+0x10c>)
 8002fd8:	f043 0304 	orr.w	r3, r3, #4
 8002fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8002fde:	4b39      	ldr	r3, [pc, #228]	; (80030c4 <MX_GPIO_Init+0x10c>)
 8002fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe2:	f003 0304 	and.w	r3, r3, #4
 8002fe6:	613b      	str	r3, [r7, #16]
 8002fe8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002fea:	2300      	movs	r3, #0
 8002fec:	60fb      	str	r3, [r7, #12]
 8002fee:	4b35      	ldr	r3, [pc, #212]	; (80030c4 <MX_GPIO_Init+0x10c>)
 8002ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff2:	4a34      	ldr	r2, [pc, #208]	; (80030c4 <MX_GPIO_Init+0x10c>)
 8002ff4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8002ffa:	4b32      	ldr	r3, [pc, #200]	; (80030c4 <MX_GPIO_Init+0x10c>)
 8002ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003002:	60fb      	str	r3, [r7, #12]
 8003004:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003006:	2300      	movs	r3, #0
 8003008:	60bb      	str	r3, [r7, #8]
 800300a:	4b2e      	ldr	r3, [pc, #184]	; (80030c4 <MX_GPIO_Init+0x10c>)
 800300c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300e:	4a2d      	ldr	r2, [pc, #180]	; (80030c4 <MX_GPIO_Init+0x10c>)
 8003010:	f043 0301 	orr.w	r3, r3, #1
 8003014:	6313      	str	r3, [r2, #48]	; 0x30
 8003016:	4b2b      	ldr	r3, [pc, #172]	; (80030c4 <MX_GPIO_Init+0x10c>)
 8003018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301a:	f003 0301 	and.w	r3, r3, #1
 800301e:	60bb      	str	r3, [r7, #8]
 8003020:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003022:	2300      	movs	r3, #0
 8003024:	607b      	str	r3, [r7, #4]
 8003026:	4b27      	ldr	r3, [pc, #156]	; (80030c4 <MX_GPIO_Init+0x10c>)
 8003028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302a:	4a26      	ldr	r2, [pc, #152]	; (80030c4 <MX_GPIO_Init+0x10c>)
 800302c:	f043 0302 	orr.w	r3, r3, #2
 8003030:	6313      	str	r3, [r2, #48]	; 0x30
 8003032:	4b24      	ldr	r3, [pc, #144]	; (80030c4 <MX_GPIO_Init+0x10c>)
 8003034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	607b      	str	r3, [r7, #4]
 800303c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 800303e:	2200      	movs	r2, #0
 8003040:	f44f 7191 	mov.w	r1, #290	; 0x122
 8003044:	4820      	ldr	r0, [pc, #128]	; (80030c8 <MX_GPIO_Init+0x110>)
 8003046:	f007 f9d5 	bl	800a3f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800304a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800304e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003050:	4b1e      	ldr	r3, [pc, #120]	; (80030cc <MX_GPIO_Init+0x114>)
 8003052:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003054:	2300      	movs	r3, #0
 8003056:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003058:	f107 0314 	add.w	r3, r7, #20
 800305c:	4619      	mov	r1, r3
 800305e:	481c      	ldr	r0, [pc, #112]	; (80030d0 <MX_GPIO_Init+0x118>)
 8003060:	f006 ff4c 	bl	8009efc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003064:	2301      	movs	r3, #1
 8003066:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003068:	4b1a      	ldr	r3, [pc, #104]	; (80030d4 <MX_GPIO_Init+0x11c>)
 800306a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800306c:	2300      	movs	r3, #0
 800306e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003070:	f107 0314 	add.w	r3, r7, #20
 8003074:	4619      	mov	r1, r3
 8003076:	4814      	ldr	r0, [pc, #80]	; (80030c8 <MX_GPIO_Init+0x110>)
 8003078:	f006 ff40 	bl	8009efc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 LD2_Pin PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|LD2_Pin|GPIO_PIN_8;
 800307c:	f44f 7391 	mov.w	r3, #290	; 0x122
 8003080:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003082:	2301      	movs	r3, #1
 8003084:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003086:	2300      	movs	r3, #0
 8003088:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800308a:	2300      	movs	r3, #0
 800308c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800308e:	f107 0314 	add.w	r3, r7, #20
 8003092:	4619      	mov	r1, r3
 8003094:	480c      	ldr	r0, [pc, #48]	; (80030c8 <MX_GPIO_Init+0x110>)
 8003096:	f006 ff31 	bl	8009efc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800309a:	2200      	movs	r2, #0
 800309c:	2100      	movs	r1, #0
 800309e:	2006      	movs	r0, #6
 80030a0:	f006 fb9f 	bl	80097e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80030a4:	2006      	movs	r0, #6
 80030a6:	f006 fbb8 	bl	800981a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80030aa:	2200      	movs	r2, #0
 80030ac:	2100      	movs	r1, #0
 80030ae:	2028      	movs	r0, #40	; 0x28
 80030b0:	f006 fb97 	bl	80097e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80030b4:	2028      	movs	r0, #40	; 0x28
 80030b6:	f006 fbb0 	bl	800981a <HAL_NVIC_EnableIRQ>

}
 80030ba:	bf00      	nop
 80030bc:	3728      	adds	r7, #40	; 0x28
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	40023800 	.word	0x40023800
 80030c8:	40020000 	.word	0x40020000
 80030cc:	10210000 	.word	0x10210000
 80030d0:	40020800 	.word	0x40020800
 80030d4:	10110000 	.word	0x10110000

080030d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80030d8:	b480      	push	{r7}
 80030da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80030dc:	bf00      	nop
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
	...

080030e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030ee:	2300      	movs	r3, #0
 80030f0:	607b      	str	r3, [r7, #4]
 80030f2:	4b10      	ldr	r3, [pc, #64]	; (8003134 <HAL_MspInit+0x4c>)
 80030f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f6:	4a0f      	ldr	r2, [pc, #60]	; (8003134 <HAL_MspInit+0x4c>)
 80030f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030fc:	6453      	str	r3, [r2, #68]	; 0x44
 80030fe:	4b0d      	ldr	r3, [pc, #52]	; (8003134 <HAL_MspInit+0x4c>)
 8003100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003102:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003106:	607b      	str	r3, [r7, #4]
 8003108:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800310a:	2300      	movs	r3, #0
 800310c:	603b      	str	r3, [r7, #0]
 800310e:	4b09      	ldr	r3, [pc, #36]	; (8003134 <HAL_MspInit+0x4c>)
 8003110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003112:	4a08      	ldr	r2, [pc, #32]	; (8003134 <HAL_MspInit+0x4c>)
 8003114:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003118:	6413      	str	r3, [r2, #64]	; 0x40
 800311a:	4b06      	ldr	r3, [pc, #24]	; (8003134 <HAL_MspInit+0x4c>)
 800311c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003122:	603b      	str	r3, [r7, #0]
 8003124:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003126:	2007      	movs	r0, #7
 8003128:	f006 fb50 	bl	80097cc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800312c:	bf00      	nop
 800312e:	3708      	adds	r7, #8
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}
 8003134:	40023800 	.word	0x40023800

08003138 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b08a      	sub	sp, #40	; 0x28
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003140:	f107 0314 	add.w	r3, r7, #20
 8003144:	2200      	movs	r2, #0
 8003146:	601a      	str	r2, [r3, #0]
 8003148:	605a      	str	r2, [r3, #4]
 800314a:	609a      	str	r2, [r3, #8]
 800314c:	60da      	str	r2, [r3, #12]
 800314e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a33      	ldr	r2, [pc, #204]	; (8003224 <HAL_ADC_MspInit+0xec>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d15f      	bne.n	800321a <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800315a:	2300      	movs	r3, #0
 800315c:	613b      	str	r3, [r7, #16]
 800315e:	4b32      	ldr	r3, [pc, #200]	; (8003228 <HAL_ADC_MspInit+0xf0>)
 8003160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003162:	4a31      	ldr	r2, [pc, #196]	; (8003228 <HAL_ADC_MspInit+0xf0>)
 8003164:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003168:	6453      	str	r3, [r2, #68]	; 0x44
 800316a:	4b2f      	ldr	r3, [pc, #188]	; (8003228 <HAL_ADC_MspInit+0xf0>)
 800316c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800316e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003172:	613b      	str	r3, [r7, #16]
 8003174:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003176:	2300      	movs	r3, #0
 8003178:	60fb      	str	r3, [r7, #12]
 800317a:	4b2b      	ldr	r3, [pc, #172]	; (8003228 <HAL_ADC_MspInit+0xf0>)
 800317c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317e:	4a2a      	ldr	r2, [pc, #168]	; (8003228 <HAL_ADC_MspInit+0xf0>)
 8003180:	f043 0304 	orr.w	r3, r3, #4
 8003184:	6313      	str	r3, [r2, #48]	; 0x30
 8003186:	4b28      	ldr	r3, [pc, #160]	; (8003228 <HAL_ADC_MspInit+0xf0>)
 8003188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318a:	f003 0304 	and.w	r3, r3, #4
 800318e:	60fb      	str	r3, [r7, #12]
 8003190:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003192:	2303      	movs	r3, #3
 8003194:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003196:	2303      	movs	r3, #3
 8003198:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800319a:	2300      	movs	r3, #0
 800319c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800319e:	f107 0314 	add.w	r3, r7, #20
 80031a2:	4619      	mov	r1, r3
 80031a4:	4821      	ldr	r0, [pc, #132]	; (800322c <HAL_ADC_MspInit+0xf4>)
 80031a6:	f006 fea9 	bl	8009efc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80031aa:	4b21      	ldr	r3, [pc, #132]	; (8003230 <HAL_ADC_MspInit+0xf8>)
 80031ac:	4a21      	ldr	r2, [pc, #132]	; (8003234 <HAL_ADC_MspInit+0xfc>)
 80031ae:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80031b0:	4b1f      	ldr	r3, [pc, #124]	; (8003230 <HAL_ADC_MspInit+0xf8>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80031b6:	4b1e      	ldr	r3, [pc, #120]	; (8003230 <HAL_ADC_MspInit+0xf8>)
 80031b8:	2200      	movs	r2, #0
 80031ba:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80031bc:	4b1c      	ldr	r3, [pc, #112]	; (8003230 <HAL_ADC_MspInit+0xf8>)
 80031be:	2200      	movs	r2, #0
 80031c0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80031c2:	4b1b      	ldr	r3, [pc, #108]	; (8003230 <HAL_ADC_MspInit+0xf8>)
 80031c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031c8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80031ca:	4b19      	ldr	r3, [pc, #100]	; (8003230 <HAL_ADC_MspInit+0xf8>)
 80031cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80031d0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80031d2:	4b17      	ldr	r3, [pc, #92]	; (8003230 <HAL_ADC_MspInit+0xf8>)
 80031d4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80031d8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80031da:	4b15      	ldr	r3, [pc, #84]	; (8003230 <HAL_ADC_MspInit+0xf8>)
 80031dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80031e0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80031e2:	4b13      	ldr	r3, [pc, #76]	; (8003230 <HAL_ADC_MspInit+0xf8>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80031e8:	4b11      	ldr	r3, [pc, #68]	; (8003230 <HAL_ADC_MspInit+0xf8>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80031ee:	4810      	ldr	r0, [pc, #64]	; (8003230 <HAL_ADC_MspInit+0xf8>)
 80031f0:	f006 fb4a 	bl	8009888 <HAL_DMA_Init>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d001      	beq.n	80031fe <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80031fa:	f7ff ff6d 	bl	80030d8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a0b      	ldr	r2, [pc, #44]	; (8003230 <HAL_ADC_MspInit+0xf8>)
 8003202:	639a      	str	r2, [r3, #56]	; 0x38
 8003204:	4a0a      	ldr	r2, [pc, #40]	; (8003230 <HAL_ADC_MspInit+0xf8>)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800320a:	2200      	movs	r2, #0
 800320c:	2100      	movs	r1, #0
 800320e:	2012      	movs	r0, #18
 8003210:	f006 fae7 	bl	80097e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003214:	2012      	movs	r0, #18
 8003216:	f006 fb00 	bl	800981a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800321a:	bf00      	nop
 800321c:	3728      	adds	r7, #40	; 0x28
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	40012000 	.word	0x40012000
 8003228:	40023800 	.word	0x40023800
 800322c:	40020800 	.word	0x40020800
 8003230:	2000286c 	.word	0x2000286c
 8003234:	40026410 	.word	0x40026410

08003238 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8003238:	b480      	push	{r7}
 800323a:	b085      	sub	sp, #20
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a0b      	ldr	r2, [pc, #44]	; (8003274 <HAL_CRC_MspInit+0x3c>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d10d      	bne.n	8003266 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800324a:	2300      	movs	r3, #0
 800324c:	60fb      	str	r3, [r7, #12]
 800324e:	4b0a      	ldr	r3, [pc, #40]	; (8003278 <HAL_CRC_MspInit+0x40>)
 8003250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003252:	4a09      	ldr	r2, [pc, #36]	; (8003278 <HAL_CRC_MspInit+0x40>)
 8003254:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003258:	6313      	str	r3, [r2, #48]	; 0x30
 800325a:	4b07      	ldr	r3, [pc, #28]	; (8003278 <HAL_CRC_MspInit+0x40>)
 800325c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003262:	60fb      	str	r3, [r7, #12]
 8003264:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8003266:	bf00      	nop
 8003268:	3714      	adds	r7, #20
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	40023000 	.word	0x40023000
 8003278:	40023800 	.word	0x40023800

0800327c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a05      	ldr	r2, [pc, #20]	; (80032a0 <HAL_RTC_MspInit+0x24>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d102      	bne.n	8003294 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800328e:	4b05      	ldr	r3, [pc, #20]	; (80032a4 <HAL_RTC_MspInit+0x28>)
 8003290:	2201      	movs	r2, #1
 8003292:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003294:	bf00      	nop
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr
 80032a0:	40002800 	.word	0x40002800
 80032a4:	42470e3c 	.word	0x42470e3c

080032a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b085      	sub	sp, #20
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032b8:	d10e      	bne.n	80032d8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80032ba:	2300      	movs	r3, #0
 80032bc:	60fb      	str	r3, [r7, #12]
 80032be:	4b13      	ldr	r3, [pc, #76]	; (800330c <HAL_TIM_Base_MspInit+0x64>)
 80032c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c2:	4a12      	ldr	r2, [pc, #72]	; (800330c <HAL_TIM_Base_MspInit+0x64>)
 80032c4:	f043 0301 	orr.w	r3, r3, #1
 80032c8:	6413      	str	r3, [r2, #64]	; 0x40
 80032ca:	4b10      	ldr	r3, [pc, #64]	; (800330c <HAL_TIM_Base_MspInit+0x64>)
 80032cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	60fb      	str	r3, [r7, #12]
 80032d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80032d6:	e012      	b.n	80032fe <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a0c      	ldr	r2, [pc, #48]	; (8003310 <HAL_TIM_Base_MspInit+0x68>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d10d      	bne.n	80032fe <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80032e2:	2300      	movs	r3, #0
 80032e4:	60bb      	str	r3, [r7, #8]
 80032e6:	4b09      	ldr	r3, [pc, #36]	; (800330c <HAL_TIM_Base_MspInit+0x64>)
 80032e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ea:	4a08      	ldr	r2, [pc, #32]	; (800330c <HAL_TIM_Base_MspInit+0x64>)
 80032ec:	f043 0302 	orr.w	r3, r3, #2
 80032f0:	6413      	str	r3, [r2, #64]	; 0x40
 80032f2:	4b06      	ldr	r3, [pc, #24]	; (800330c <HAL_TIM_Base_MspInit+0x64>)
 80032f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f6:	f003 0302 	and.w	r3, r3, #2
 80032fa:	60bb      	str	r3, [r7, #8]
 80032fc:	68bb      	ldr	r3, [r7, #8]
}
 80032fe:	bf00      	nop
 8003300:	3714      	adds	r7, #20
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop
 800330c:	40023800 	.word	0x40023800
 8003310:	40000400 	.word	0x40000400

08003314 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003314:	b480      	push	{r7}
 8003316:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003318:	bf00      	nop
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr

08003322 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003322:	b480      	push	{r7}
 8003324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003326:	e7fe      	b.n	8003326 <HardFault_Handler+0x4>

08003328 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003328:	b480      	push	{r7}
 800332a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800332c:	e7fe      	b.n	800332c <MemManage_Handler+0x4>

0800332e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800332e:	b480      	push	{r7}
 8003330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003332:	e7fe      	b.n	8003332 <BusFault_Handler+0x4>

08003334 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003334:	b480      	push	{r7}
 8003336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003338:	e7fe      	b.n	8003338 <UsageFault_Handler+0x4>

0800333a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800333a:	b480      	push	{r7}
 800333c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800333e:	bf00      	nop
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr

08003348 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003348:	b480      	push	{r7}
 800334a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800334c:	bf00      	nop
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr

08003356 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003356:	b480      	push	{r7}
 8003358:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800335a:	bf00      	nop
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003368:	f005 fd54 	bl	8008e14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800336c:	bf00      	nop
 800336e:	bd80      	pop	{r7, pc}

08003370 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 8003374:	4802      	ldr	r0, [pc, #8]	; (8003380 <EXTI0_IRQHandler+0x10>)
 8003376:	f006 fd9d 	bl	8009eb4 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800337a:	bf00      	nop
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	200027d4 	.word	0x200027d4

08003384 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003388:	4802      	ldr	r0, [pc, #8]	; (8003394 <ADC_IRQHandler+0x10>)
 800338a:	f005 fdc8 	bl	8008f1e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800338e:	bf00      	nop
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	20002824 	.word	0x20002824

08003398 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 800339c:	4802      	ldr	r0, [pc, #8]	; (80033a8 <EXTI15_10_IRQHandler+0x10>)
 800339e:	f006 fd89 	bl	8009eb4 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80033a2:	bf00      	nop
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	20001328 	.word	0x20001328

080033ac <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80033b0:	4802      	ldr	r0, [pc, #8]	; (80033bc <DMA2_Stream0_IRQHandler+0x10>)
 80033b2:	f006 fb17 	bl	80099e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80033b6:	bf00      	nop
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	2000286c 	.word	0x2000286c

080033c0 <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL. 
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void) 
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80033c6:	2300      	movs	r3, #0
 80033c8:	607b      	str	r3, [r7, #4]
  
  hspi1.Instance  = SPI1;
 80033ca:	4b12      	ldr	r3, [pc, #72]	; (8003414 <BSP_SPI1_Init+0x54>)
 80033cc:	4a12      	ldr	r2, [pc, #72]	; (8003418 <BSP_SPI1_Init+0x58>)
 80033ce:	601a      	str	r2, [r3, #0]
  
  if(SPI1InitCounter++ == 0)
 80033d0:	4b12      	ldr	r3, [pc, #72]	; (800341c <BSP_SPI1_Init+0x5c>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	1c5a      	adds	r2, r3, #1
 80033d6:	4911      	ldr	r1, [pc, #68]	; (800341c <BSP_SPI1_Init+0x5c>)
 80033d8:	600a      	str	r2, [r1, #0]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d114      	bne.n	8003408 <BSP_SPI1_Init+0x48>
  {    
	if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET) 
 80033de:	480d      	ldr	r0, [pc, #52]	; (8003414 <BSP_SPI1_Init+0x54>)
 80033e0:	f009 fadc 	bl	800c99c <HAL_SPI_GetState>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d10e      	bne.n	8003408 <BSP_SPI1_Init+0x48>
	{ 
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
		/* Init the SPI Msp */
		SPI1_MspInit(&hspi1);
 80033ea:	480a      	ldr	r0, [pc, #40]	; (8003414 <BSP_SPI1_Init+0x54>)
 80033ec:	f000 f93a 	bl	8003664 <SPI1_MspInit>
			{
				return BSP_ERROR_MSP_FAILURE;
			}
		}	
#endif   
		if(ret == BSP_ERROR_NONE)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d108      	bne.n	8003408 <BSP_SPI1_Init+0x48>
		{
			/* Init the SPI */
			if (MX_SPI1_Init(&hspi1) != HAL_OK)
 80033f6:	4807      	ldr	r0, [pc, #28]	; (8003414 <BSP_SPI1_Init+0x54>)
 80033f8:	f000 f8f8 	bl	80035ec <MX_SPI1_Init>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d002      	beq.n	8003408 <BSP_SPI1_Init+0x48>
			{
				ret = BSP_ERROR_BUS_FAILURE;
 8003402:	f06f 0307 	mvn.w	r3, #7
 8003406:	607b      	str	r3, [r7, #4]
			}
		}
	}
  }	

  return ret;
 8003408:	687b      	ldr	r3, [r7, #4]
}
 800340a:	4618      	mov	r0, r3
 800340c:	3708      	adds	r7, #8
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	20002980 	.word	0x20002980
 8003418:	40013000 	.word	0x40013000
 800341c:	200022f0 	.word	0x200022f0

08003420 <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b088      	sub	sp, #32
 8003424:	af02      	add	r7, sp, #8
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	4613      	mov	r3, r2
 800342c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800342e:	2300      	movs	r3, #0
 8003430:	617b      	str	r3, [r7, #20]
  
  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8003432:	88fa      	ldrh	r2, [r7, #6]
 8003434:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003438:	9300      	str	r3, [sp, #0]
 800343a:	4613      	mov	r3, r2
 800343c:	68ba      	ldr	r2, [r7, #8]
 800343e:	68f9      	ldr	r1, [r7, #12]
 8003440:	4806      	ldr	r0, [pc, #24]	; (800345c <BSP_SPI1_SendRecv+0x3c>)
 8003442:	f009 f909 	bl	800c658 <HAL_SPI_TransmitReceive>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d002      	beq.n	8003452 <BSP_SPI1_SendRecv+0x32>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 800344c:	f06f 0305 	mvn.w	r3, #5
 8003450:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8003452:	697b      	ldr	r3, [r7, #20]
}
 8003454:	4618      	mov	r0, r3
 8003456:	3718      	adds	r7, #24
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}
 800345c:	20002980 	.word	0x20002980

08003460 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void) 
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8003466:	2300      	movs	r3, #0
 8003468:	607b      	str	r3, [r7, #4]
  
  hi2c1.Instance  = I2C1;
 800346a:	4b13      	ldr	r3, [pc, #76]	; (80034b8 <BSP_I2C1_Init+0x58>)
 800346c:	4a13      	ldr	r2, [pc, #76]	; (80034bc <BSP_I2C1_Init+0x5c>)
 800346e:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8003470:	4b13      	ldr	r3, [pc, #76]	; (80034c0 <BSP_I2C1_Init+0x60>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	1c5a      	adds	r2, r3, #1
 8003476:	4912      	ldr	r1, [pc, #72]	; (80034c0 <BSP_I2C1_Init+0x60>)
 8003478:	600a      	str	r2, [r1, #0]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d117      	bne.n	80034ae <BSP_I2C1_Init+0x4e>
  {     
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 800347e:	480e      	ldr	r0, [pc, #56]	; (80034b8 <BSP_I2C1_Init+0x58>)
 8003480:	f007 fc88 	bl	800ad94 <HAL_I2C_GetState>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d111      	bne.n	80034ae <BSP_I2C1_Init+0x4e>
    {  
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 800348a:	480b      	ldr	r0, [pc, #44]	; (80034b8 <BSP_I2C1_Init+0x58>)
 800348c:	f000 f976 	bl	800377c <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d10b      	bne.n	80034ae <BSP_I2C1_Init+0x4e>
	  {
    	/* Init the I2C */
    	if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8003496:	4808      	ldr	r0, [pc, #32]	; (80034b8 <BSP_I2C1_Init+0x58>)
 8003498:	f000 f93c 	bl	8003714 <MX_I2C1_Init>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d003      	beq.n	80034aa <BSP_I2C1_Init+0x4a>
    	{
      	  ret = BSP_ERROR_BUS_FAILURE;
 80034a2:	f06f 0307 	mvn.w	r3, #7
 80034a6:	607b      	str	r3, [r7, #4]
 80034a8:	e001      	b.n	80034ae <BSP_I2C1_Init+0x4e>
    	}
        else
        {
      	  ret = BSP_ERROR_NONE;
 80034aa:	2300      	movs	r3, #0
 80034ac:	607b      	str	r3, [r7, #4]
        }
      }	
    }
  }
  return ret;
 80034ae:	687b      	ldr	r3, [r7, #4]
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3708      	adds	r7, #8
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	2000292c 	.word	0x2000292c
 80034bc:	40005400 	.word	0x40005400
 80034c0:	200022f4 	.word	0x200022f4

080034c4 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void) 
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80034ca:	2300      	movs	r3, #0
 80034cc:	607b      	str	r3, [r7, #4]
  
  if (I2C1InitCounter > 0)
 80034ce:	4b0f      	ldr	r3, [pc, #60]	; (800350c <BSP_I2C1_DeInit+0x48>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d014      	beq.n	8003500 <BSP_I2C1_DeInit+0x3c>
  {       
    if (--I2C1InitCounter == 0)
 80034d6:	4b0d      	ldr	r3, [pc, #52]	; (800350c <BSP_I2C1_DeInit+0x48>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	3b01      	subs	r3, #1
 80034dc:	4a0b      	ldr	r2, [pc, #44]	; (800350c <BSP_I2C1_DeInit+0x48>)
 80034de:	6013      	str	r3, [r2, #0]
 80034e0:	4b0a      	ldr	r3, [pc, #40]	; (800350c <BSP_I2C1_DeInit+0x48>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d10b      	bne.n	8003500 <BSP_I2C1_DeInit+0x3c>
    {    
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */ 
      I2C1_MspDeInit(&hi2c1);
 80034e8:	4809      	ldr	r0, [pc, #36]	; (8003510 <BSP_I2C1_DeInit+0x4c>)
 80034ea:	f000 f981 	bl	80037f0 <I2C1_MspDeInit>
  #endif  
      /* DeInit the I2C */ 
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 80034ee:	4808      	ldr	r0, [pc, #32]	; (8003510 <BSP_I2C1_DeInit+0x4c>)
 80034f0:	f007 f8ec 	bl	800a6cc <HAL_I2C_DeInit>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d002      	beq.n	8003500 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 80034fa:	f06f 0307 	mvn.w	r3, #7
 80034fe:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8003500:	687b      	ldr	r3, [r7, #4]
}
 8003502:	4618      	mov	r0, r3
 8003504:	3708      	adds	r7, #8
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	200022f4 	.word	0x200022f4
 8003510:	2000292c 	.word	0x2000292c

08003514 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b08a      	sub	sp, #40	; 0x28
 8003518:	af04      	add	r7, sp, #16
 800351a:	60ba      	str	r2, [r7, #8]
 800351c:	461a      	mov	r2, r3
 800351e:	4603      	mov	r3, r0
 8003520:	81fb      	strh	r3, [r7, #14]
 8003522:	460b      	mov	r3, r1
 8003524:	81bb      	strh	r3, [r7, #12]
 8003526:	4613      	mov	r3, r2
 8003528:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;  
 800352a:	2300      	movs	r3, #0
 800352c:	617b      	str	r3, [r7, #20]
  
  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 800352e:	89ba      	ldrh	r2, [r7, #12]
 8003530:	89f9      	ldrh	r1, [r7, #14]
 8003532:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003536:	9302      	str	r3, [sp, #8]
 8003538:	88fb      	ldrh	r3, [r7, #6]
 800353a:	9301      	str	r3, [sp, #4]
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	9300      	str	r3, [sp, #0]
 8003540:	2301      	movs	r3, #1
 8003542:	480c      	ldr	r0, [pc, #48]	; (8003574 <BSP_I2C1_WriteReg+0x60>)
 8003544:	f007 f906 	bl	800a754 <HAL_I2C_Mem_Write>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00c      	beq.n	8003568 <BSP_I2C1_WriteReg+0x54>
  {    
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 800354e:	4809      	ldr	r0, [pc, #36]	; (8003574 <BSP_I2C1_WriteReg+0x60>)
 8003550:	f007 fc2e 	bl	800adb0 <HAL_I2C_GetError>
 8003554:	4603      	mov	r3, r0
 8003556:	2b04      	cmp	r3, #4
 8003558:	d103      	bne.n	8003562 <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800355a:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800355e:	617b      	str	r3, [r7, #20]
 8003560:	e002      	b.n	8003568 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8003562:	f06f 0303 	mvn.w	r3, #3
 8003566:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8003568:	697b      	ldr	r3, [r7, #20]
}
 800356a:	4618      	mov	r0, r3
 800356c:	3718      	adds	r7, #24
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	2000292c 	.word	0x2000292c

08003578 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length) 
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b08a      	sub	sp, #40	; 0x28
 800357c:	af04      	add	r7, sp, #16
 800357e:	60ba      	str	r2, [r7, #8]
 8003580:	461a      	mov	r2, r3
 8003582:	4603      	mov	r3, r0
 8003584:	81fb      	strh	r3, [r7, #14]
 8003586:	460b      	mov	r3, r1
 8003588:	81bb      	strh	r3, [r7, #12]
 800358a:	4613      	mov	r3, r2
 800358c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800358e:	2300      	movs	r3, #0
 8003590:	617b      	str	r3, [r7, #20]
  
  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8003592:	89ba      	ldrh	r2, [r7, #12]
 8003594:	89f9      	ldrh	r1, [r7, #14]
 8003596:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800359a:	9302      	str	r3, [sp, #8]
 800359c:	88fb      	ldrh	r3, [r7, #6]
 800359e:	9301      	str	r3, [sp, #4]
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	9300      	str	r3, [sp, #0]
 80035a4:	2301      	movs	r3, #1
 80035a6:	480c      	ldr	r0, [pc, #48]	; (80035d8 <BSP_I2C1_ReadReg+0x60>)
 80035a8:	f007 f9ce 	bl	800a948 <HAL_I2C_Mem_Read>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00c      	beq.n	80035cc <BSP_I2C1_ReadReg+0x54>
  { 
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 80035b2:	4809      	ldr	r0, [pc, #36]	; (80035d8 <BSP_I2C1_ReadReg+0x60>)
 80035b4:	f007 fbfc 	bl	800adb0 <HAL_I2C_GetError>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b04      	cmp	r3, #4
 80035bc:	d103      	bne.n	80035c6 <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80035be:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80035c2:	617b      	str	r3, [r7, #20]
 80035c4:	e002      	b.n	80035cc <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80035c6:	f06f 0303 	mvn.w	r3, #3
 80035ca:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80035cc:	697b      	ldr	r3, [r7, #20]
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3718      	adds	r7, #24
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	2000292c 	.word	0x2000292c

080035dc <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 80035dc:	b580      	push	{r7, lr}
 80035de:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80035e0:	f005 fc2c 	bl	8008e3c <HAL_GetTick>
 80035e4:	4603      	mov	r3, r0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	bd80      	pop	{r7, pc}
	...

080035ec <MX_SPI1_Init>:

/* SPI1 init function */ 

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80035f4:	2300      	movs	r3, #0
 80035f6:	73fb      	strb	r3, [r7, #15]
  hspi->Instance = SPI1;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4a19      	ldr	r2, [pc, #100]	; (8003660 <MX_SPI1_Init+0x74>)
 80035fc:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003604:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003624:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 10;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	220a      	movs	r2, #10
 8003642:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f008 ff99 	bl	800c57c <HAL_SPI_Init>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d001      	beq.n	8003654 <MX_SPI1_Init+0x68>
  {
    ret = HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8003654:	7bfb      	ldrb	r3, [r7, #15]
}
 8003656:	4618      	mov	r0, r3
 8003658:	3710      	adds	r7, #16
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	40013000 	.word	0x40013000

08003664 <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b08a      	sub	sp, #40	; 0x28
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800366c:	2300      	movs	r3, #0
 800366e:	613b      	str	r3, [r7, #16]
 8003670:	4b25      	ldr	r3, [pc, #148]	; (8003708 <SPI1_MspInit+0xa4>)
 8003672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003674:	4a24      	ldr	r2, [pc, #144]	; (8003708 <SPI1_MspInit+0xa4>)
 8003676:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800367a:	6453      	str	r3, [r2, #68]	; 0x44
 800367c:	4b22      	ldr	r3, [pc, #136]	; (8003708 <SPI1_MspInit+0xa4>)
 800367e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003680:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003684:	613b      	str	r3, [r7, #16]
 8003686:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003688:	2300      	movs	r3, #0
 800368a:	60fb      	str	r3, [r7, #12]
 800368c:	4b1e      	ldr	r3, [pc, #120]	; (8003708 <SPI1_MspInit+0xa4>)
 800368e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003690:	4a1d      	ldr	r2, [pc, #116]	; (8003708 <SPI1_MspInit+0xa4>)
 8003692:	f043 0301 	orr.w	r3, r3, #1
 8003696:	6313      	str	r3, [r2, #48]	; 0x30
 8003698:	4b1b      	ldr	r3, [pc, #108]	; (8003708 <SPI1_MspInit+0xa4>)
 800369a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369c:	f003 0301 	and.w	r3, r3, #1
 80036a0:	60fb      	str	r3, [r7, #12]
 80036a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036a4:	2300      	movs	r3, #0
 80036a6:	60bb      	str	r3, [r7, #8]
 80036a8:	4b17      	ldr	r3, [pc, #92]	; (8003708 <SPI1_MspInit+0xa4>)
 80036aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ac:	4a16      	ldr	r2, [pc, #88]	; (8003708 <SPI1_MspInit+0xa4>)
 80036ae:	f043 0302 	orr.w	r3, r3, #2
 80036b2:	6313      	str	r3, [r2, #48]	; 0x30
 80036b4:	4b14      	ldr	r3, [pc, #80]	; (8003708 <SPI1_MspInit+0xa4>)
 80036b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b8:	f003 0302 	and.w	r3, r3, #2
 80036bc:	60bb      	str	r3, [r7, #8]
 80036be:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80036c0:	23c0      	movs	r3, #192	; 0xc0
 80036c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036c4:	2302      	movs	r3, #2
 80036c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c8:	2300      	movs	r3, #0
 80036ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036cc:	2303      	movs	r3, #3
 80036ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80036d0:	2305      	movs	r3, #5
 80036d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036d4:	f107 0314 	add.w	r3, r7, #20
 80036d8:	4619      	mov	r1, r3
 80036da:	480c      	ldr	r0, [pc, #48]	; (800370c <SPI1_MspInit+0xa8>)
 80036dc:	f006 fc0e 	bl	8009efc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80036e0:	2308      	movs	r3, #8
 80036e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036e4:	2302      	movs	r3, #2
 80036e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e8:	2300      	movs	r3, #0
 80036ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036ec:	2303      	movs	r3, #3
 80036ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80036f0:	2305      	movs	r3, #5
 80036f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036f4:	f107 0314 	add.w	r3, r7, #20
 80036f8:	4619      	mov	r1, r3
 80036fa:	4805      	ldr	r0, [pc, #20]	; (8003710 <SPI1_MspInit+0xac>)
 80036fc:	f006 fbfe 	bl	8009efc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 8003700:	bf00      	nop
 8003702:	3728      	adds	r7, #40	; 0x28
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	40023800 	.word	0x40023800
 800370c:	40020000 	.word	0x40020000
 8003710:	40020400 	.word	0x40020400

08003714 <MX_I2C1_Init>:
}

/* I2C1 init function */ 

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800371c:	2300      	movs	r3, #0
 800371e:	73fb      	strb	r3, [r7, #15]
  hi2c->Instance = I2C1;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4a14      	ldr	r2, [pc, #80]	; (8003774 <MX_I2C1_Init+0x60>)
 8003724:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 100000;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a13      	ldr	r2, [pc, #76]	; (8003778 <MX_I2C1_Init+0x64>)
 800372a:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800373e:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f006 fe7f 	bl	800a45c <HAL_I2C_Init>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d001      	beq.n	8003768 <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8003768:	7bfb      	ldrb	r3, [r7, #15]
}
 800376a:	4618      	mov	r0, r3
 800376c:	3710      	adds	r7, #16
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	40005400 	.word	0x40005400
 8003778:	000186a0 	.word	0x000186a0

0800377c <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b08a      	sub	sp, #40	; 0x28
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003784:	2300      	movs	r3, #0
 8003786:	613b      	str	r3, [r7, #16]
 8003788:	4b17      	ldr	r3, [pc, #92]	; (80037e8 <I2C1_MspInit+0x6c>)
 800378a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378c:	4a16      	ldr	r2, [pc, #88]	; (80037e8 <I2C1_MspInit+0x6c>)
 800378e:	f043 0302 	orr.w	r3, r3, #2
 8003792:	6313      	str	r3, [r2, #48]	; 0x30
 8003794:	4b14      	ldr	r3, [pc, #80]	; (80037e8 <I2C1_MspInit+0x6c>)
 8003796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003798:	f003 0302 	and.w	r3, r3, #2
 800379c:	613b      	str	r3, [r7, #16]
 800379e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80037a0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80037a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80037a6:	2312      	movs	r3, #18
 80037a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80037aa:	2301      	movs	r3, #1
 80037ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037ae:	2303      	movs	r3, #3
 80037b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80037b2:	2304      	movs	r3, #4
 80037b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037b6:	f107 0314 	add.w	r3, r7, #20
 80037ba:	4619      	mov	r1, r3
 80037bc:	480b      	ldr	r0, [pc, #44]	; (80037ec <I2C1_MspInit+0x70>)
 80037be:	f006 fb9d 	bl	8009efc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80037c2:	2300      	movs	r3, #0
 80037c4:	60fb      	str	r3, [r7, #12]
 80037c6:	4b08      	ldr	r3, [pc, #32]	; (80037e8 <I2C1_MspInit+0x6c>)
 80037c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ca:	4a07      	ldr	r2, [pc, #28]	; (80037e8 <I2C1_MspInit+0x6c>)
 80037cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80037d0:	6413      	str	r3, [r2, #64]	; 0x40
 80037d2:	4b05      	ldr	r3, [pc, #20]	; (80037e8 <I2C1_MspInit+0x6c>)
 80037d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037da:	60fb      	str	r3, [r7, #12]
 80037dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 80037de:	bf00      	nop
 80037e0:	3728      	adds	r7, #40	; 0x28
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	40023800 	.word	0x40023800
 80037ec:	40020400 	.word	0x40020400

080037f0 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80037f8:	4b07      	ldr	r3, [pc, #28]	; (8003818 <I2C1_MspDeInit+0x28>)
 80037fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fc:	4a06      	ldr	r2, [pc, #24]	; (8003818 <I2C1_MspDeInit+0x28>)
 80037fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003802:	6413      	str	r3, [r2, #64]	; 0x40
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8|GPIO_PIN_9);
 8003804:	f44f 7140 	mov.w	r1, #768	; 0x300
 8003808:	4804      	ldr	r0, [pc, #16]	; (800381c <I2C1_MspDeInit+0x2c>)
 800380a:	f006 fcf9 	bl	800a200 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 800380e:	bf00      	nop
 8003810:	3708      	adds	r7, #8
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	40023800 	.word	0x40023800
 800381c:	40020400 	.word	0x40020400

08003820 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b086      	sub	sp, #24
 8003824:	af00      	add	r7, sp, #0
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	60b9      	str	r1, [r7, #8]
 800382a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800382c:	2300      	movs	r3, #0
 800382e:	617b      	str	r3, [r7, #20]
 8003830:	e00a      	b.n	8003848 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003832:	f3af 8000 	nop.w
 8003836:	4601      	mov	r1, r0
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	1c5a      	adds	r2, r3, #1
 800383c:	60ba      	str	r2, [r7, #8]
 800383e:	b2ca      	uxtb	r2, r1
 8003840:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	3301      	adds	r3, #1
 8003846:	617b      	str	r3, [r7, #20]
 8003848:	697a      	ldr	r2, [r7, #20]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	429a      	cmp	r2, r3
 800384e:	dbf0      	blt.n	8003832 <_read+0x12>
	}

return len;
 8003850:	687b      	ldr	r3, [r7, #4]
}
 8003852:	4618      	mov	r0, r3
 8003854:	3718      	adds	r7, #24
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}

0800385a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800385a:	b580      	push	{r7, lr}
 800385c:	b086      	sub	sp, #24
 800385e:	af00      	add	r7, sp, #0
 8003860:	60f8      	str	r0, [r7, #12]
 8003862:	60b9      	str	r1, [r7, #8]
 8003864:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003866:	2300      	movs	r3, #0
 8003868:	617b      	str	r3, [r7, #20]
 800386a:	e009      	b.n	8003880 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	1c5a      	adds	r2, r3, #1
 8003870:	60ba      	str	r2, [r7, #8]
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	4618      	mov	r0, r3
 8003876:	f005 fa2b 	bl	8008cd0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	3301      	adds	r3, #1
 800387e:	617b      	str	r3, [r7, #20]
 8003880:	697a      	ldr	r2, [r7, #20]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	429a      	cmp	r2, r3
 8003886:	dbf1      	blt.n	800386c <_write+0x12>
	}
	return len;
 8003888:	687b      	ldr	r3, [r7, #4]
}
 800388a:	4618      	mov	r0, r3
 800388c:	3718      	adds	r7, #24
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}

08003892 <_close>:

int _close(int file)
{
 8003892:	b480      	push	{r7}
 8003894:	b083      	sub	sp, #12
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
	return -1;
 800389a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800389e:	4618      	mov	r0, r3
 80038a0:	370c      	adds	r7, #12
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr

080038aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80038aa:	b480      	push	{r7}
 80038ac:	b083      	sub	sp, #12
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	6078      	str	r0, [r7, #4]
 80038b2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80038ba:	605a      	str	r2, [r3, #4]
	return 0;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	370c      	adds	r7, #12
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr

080038ca <_isatty>:

int _isatty(int file)
{
 80038ca:	b480      	push	{r7}
 80038cc:	b083      	sub	sp, #12
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
	return 1;
 80038d2:	2301      	movs	r3, #1
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b085      	sub	sp, #20
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	607a      	str	r2, [r7, #4]
	return 0;
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3714      	adds	r7, #20
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr
	...

080038fc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003904:	4b11      	ldr	r3, [pc, #68]	; (800394c <_sbrk+0x50>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d102      	bne.n	8003912 <_sbrk+0x16>
		heap_end = &end;
 800390c:	4b0f      	ldr	r3, [pc, #60]	; (800394c <_sbrk+0x50>)
 800390e:	4a10      	ldr	r2, [pc, #64]	; (8003950 <_sbrk+0x54>)
 8003910:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003912:	4b0e      	ldr	r3, [pc, #56]	; (800394c <_sbrk+0x50>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003918:	4b0c      	ldr	r3, [pc, #48]	; (800394c <_sbrk+0x50>)
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	4413      	add	r3, r2
 8003920:	466a      	mov	r2, sp
 8003922:	4293      	cmp	r3, r2
 8003924:	d907      	bls.n	8003936 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003926:	f016 fe41 	bl	801a5ac <__errno>
 800392a:	4602      	mov	r2, r0
 800392c:	230c      	movs	r3, #12
 800392e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003930:	f04f 33ff 	mov.w	r3, #4294967295
 8003934:	e006      	b.n	8003944 <_sbrk+0x48>
	}

	heap_end += incr;
 8003936:	4b05      	ldr	r3, [pc, #20]	; (800394c <_sbrk+0x50>)
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4413      	add	r3, r2
 800393e:	4a03      	ldr	r2, [pc, #12]	; (800394c <_sbrk+0x50>)
 8003940:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003942:	68fb      	ldr	r3, [r7, #12]
}
 8003944:	4618      	mov	r0, r3
 8003946:	3710      	adds	r7, #16
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	200022f8 	.word	0x200022f8
 8003950:	20002a78 	.word	0x20002a78

08003954 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003954:	b480      	push	{r7}
 8003956:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003958:	4b08      	ldr	r3, [pc, #32]	; (800397c <SystemInit+0x28>)
 800395a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800395e:	4a07      	ldr	r2, [pc, #28]	; (800397c <SystemInit+0x28>)
 8003960:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003964:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003968:	4b04      	ldr	r3, [pc, #16]	; (800397c <SystemInit+0x28>)
 800396a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800396e:	609a      	str	r2, [r3, #8]
#endif
}
 8003970:	bf00      	nop
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr
 800397a:	bf00      	nop
 800397c:	e000ed00 	.word	0xe000ed00

08003980 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003980:	f8df d034 	ldr.w	sp, [pc, #52]	; 80039b8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003984:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003986:	e003      	b.n	8003990 <LoopCopyDataInit>

08003988 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003988:	4b0c      	ldr	r3, [pc, #48]	; (80039bc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800398a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800398c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800398e:	3104      	adds	r1, #4

08003990 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003990:	480b      	ldr	r0, [pc, #44]	; (80039c0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003992:	4b0c      	ldr	r3, [pc, #48]	; (80039c4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003994:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003996:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003998:	d3f6      	bcc.n	8003988 <CopyDataInit>
  ldr  r2, =_sbss
 800399a:	4a0b      	ldr	r2, [pc, #44]	; (80039c8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800399c:	e002      	b.n	80039a4 <LoopFillZerobss>

0800399e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800399e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80039a0:	f842 3b04 	str.w	r3, [r2], #4

080039a4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80039a4:	4b09      	ldr	r3, [pc, #36]	; (80039cc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80039a6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80039a8:	d3f9      	bcc.n	800399e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80039aa:	f7ff ffd3 	bl	8003954 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80039ae:	f016 fe03 	bl	801a5b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80039b2:	f7ff f8dc 	bl	8002b6e <main>
  bx  lr    
 80039b6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80039b8:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80039bc:	0801dcb8 	.word	0x0801dcb8
  ldr  r0, =_sdata
 80039c0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80039c4:	200013ac 	.word	0x200013ac
  ldr  r2, =_sbss
 80039c8:	200013ac 	.word	0x200013ac
  ldr  r3, = _ebss
 80039cc:	20002a78 	.word	0x20002a78

080039d0 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80039d0:	e7fe      	b.n	80039d0 <DMA1_Stream0_IRQHandler>
	...

080039d4 <HTS221_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_RegisterBusIO(HTS221_Object_t *pObj, HTS221_IO_t *pIO)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d103      	bne.n	80039ec <HTS221_RegisterBusIO+0x18>
  {
    ret = HTS221_ERROR;
 80039e4:	f04f 33ff 	mov.w	r3, #4294967295
 80039e8:	60fb      	str	r3, [r7, #12]
 80039ea:	e030      	b.n	8003a4e <HTS221_RegisterBusIO+0x7a>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	685a      	ldr	r2, [r3, #4]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	689a      	ldr	r2, [r3, #8]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	7b1a      	ldrb	r2, [r3, #12]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	691a      	ldr	r2, [r3, #16]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	695a      	ldr	r2, [r3, #20]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	699a      	ldr	r2, [r3, #24]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4a0c      	ldr	r2, [pc, #48]	; (8003a58 <HTS221_RegisterBusIO+0x84>)
 8003a28:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a0b      	ldr	r2, [pc, #44]	; (8003a5c <HTS221_RegisterBusIO+0x88>)
 8003a2e:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init != NULL)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d004      	beq.n	8003a48 <HTS221_RegisterBusIO+0x74>
    {
      ret = pObj->IO.Init();
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4798      	blx	r3
 8003a44:	60f8      	str	r0, [r7, #12]
 8003a46:	e002      	b.n	8003a4e <HTS221_RegisterBusIO+0x7a>
    }
    else
    {
      ret = HTS221_ERROR;
 8003a48:	f04f 33ff 	mov.w	r3, #4294967295
 8003a4c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3710      	adds	r7, #16
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	080040e9 	.word	0x080040e9
 8003a5c:	0800414b 	.word	0x0800414b

08003a60 <HTS221_Init>:
 * @brief  Initialize the HTS221 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_Init(HTS221_Object_t *pObj)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d108      	bne.n	8003a84 <HTS221_Init+0x24>
  {
    if (HTS221_Initialize(pObj) != HTS221_OK)
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 fad5 	bl	8004022 <HTS221_Initialize>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d002      	beq.n	8003a84 <HTS221_Init+0x24>
    {
      return HTS221_ERROR;
 8003a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a82:	e004      	b.n	8003a8e <HTS221_Init+0x2e>
    }
  }

  pObj->is_initialized = 1;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return HTS221_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3708      	adds	r7, #8
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <HTS221_DeInit>:
 * @brief  Deinitialize the HTS221 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_DeInit(HTS221_Object_t *pObj)
{
 8003a96:	b580      	push	{r7, lr}
 8003a98:	b082      	sub	sp, #8
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d111      	bne.n	8003acc <HTS221_DeInit+0x36>
  {
    if (HTS221_HUM_Disable(pObj) != HTS221_OK)
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f000 f878 	bl	8003b9e <HTS221_HUM_Disable>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d002      	beq.n	8003aba <HTS221_DeInit+0x24>
    {
      return HTS221_ERROR;
 8003ab4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ab8:	e00d      	b.n	8003ad6 <HTS221_DeInit+0x40>
    }

    if (HTS221_TEMP_Disable(pObj) != HTS221_OK)
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 f977 	bl	8003dae <HTS221_TEMP_Disable>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d002      	beq.n	8003acc <HTS221_DeInit+0x36>
    {
      return HTS221_ERROR;
 8003ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8003aca:	e004      	b.n	8003ad6 <HTS221_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return HTS221_OK;
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3708      	adds	r7, #8
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}

08003ade <HTS221_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_ReadID(HTS221_Object_t *pObj, uint8_t *Id)
{
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	b082      	sub	sp, #8
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
 8003ae6:	6039      	str	r1, [r7, #0]
  if (hts221_device_id_get(&(pObj->Ctx), Id) != HTS221_OK)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	331c      	adds	r3, #28
 8003aec:	6839      	ldr	r1, [r7, #0]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f000 fc32 	bl	8004358 <hts221_device_id_get>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d002      	beq.n	8003b00 <HTS221_ReadID+0x22>
  {
    return HTS221_ERROR;
 8003afa:	f04f 33ff 	mov.w	r3, #4294967295
 8003afe:	e000      	b.n	8003b02 <HTS221_ReadID+0x24>
  }

  return HTS221_OK;
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3708      	adds	r7, #8
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
	...

08003b0c <HTS221_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to HTS221 sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_GetCapabilities(HTS221_Object_t *pObj, HTS221_Capabilities_t *Capabilities)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 1;
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	2201      	movs	r2, #1
 8003b1a:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	2201      	movs	r2, #1
 8003b26:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 12.5f;
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	4a07      	ldr	r2, [pc, #28]	; (8003b50 <HTS221_GetCapabilities+0x44>)
 8003b32:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 12.5f;
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	4a06      	ldr	r2, [pc, #24]	; (8003b50 <HTS221_GetCapabilities+0x44>)
 8003b38:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 0.0f;
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	f04f 0200 	mov.w	r2, #0
 8003b40:	60da      	str	r2, [r3, #12]
  return HTS221_OK;
 8003b42:	2300      	movs	r3, #0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr
 8003b50:	41480000 	.word	0x41480000

08003b54 <HTS221_HUM_Enable>:
 * @brief  Enable the HTS221 humidity sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_Enable(HTS221_Object_t *pObj)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d101      	bne.n	8003b6a <HTS221_HUM_Enable+0x16>
  {
    return HTS221_OK;
 8003b66:	2300      	movs	r3, #0
 8003b68:	e015      	b.n	8003b96 <HTS221_HUM_Enable+0x42>
  }

  /* Check if the HTS221 temperature sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->temp_is_enabled == 0U)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d10b      	bne.n	8003b8c <HTS221_HUM_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	331c      	adds	r3, #28
 8003b78:	2101      	movs	r1, #1
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f000 fbfd 	bl	800437a <hts221_power_on_set>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d002      	beq.n	8003b8c <HTS221_HUM_Enable+0x38>
    {
      return HTS221_ERROR;
 8003b86:	f04f 33ff 	mov.w	r3, #4294967295
 8003b8a:	e004      	b.n	8003b96 <HTS221_HUM_Enable+0x42>
    }
  }

  pObj->hum_is_enabled = 1;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return HTS221_OK;
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3708      	adds	r7, #8
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}

08003b9e <HTS221_HUM_Disable>:
 * @brief  Disable the HTS221 humidity sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_Disable(HTS221_Object_t *pObj)
{
 8003b9e:	b580      	push	{r7, lr}
 8003ba0:	b082      	sub	sp, #8
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->hum_is_enabled == 0U)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d101      	bne.n	8003bb4 <HTS221_HUM_Disable+0x16>
  {
    return HTS221_OK;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	e015      	b.n	8003be0 <HTS221_HUM_Disable+0x42>
  }

  /* Check if the HTS221 temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d10b      	bne.n	8003bd6 <HTS221_HUM_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	331c      	adds	r3, #28
 8003bc2:	2100      	movs	r1, #0
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f000 fbd8 	bl	800437a <hts221_power_on_set>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d002      	beq.n	8003bd6 <HTS221_HUM_Disable+0x38>
    {
      return HTS221_ERROR;
 8003bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8003bd4:	e004      	b.n	8003be0 <HTS221_HUM_Disable+0x42>
    }
  }

  pObj->hum_is_enabled = 0;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return HTS221_OK;
 8003bde:	2300      	movs	r3, #0
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3708      	adds	r7, #8
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <HTS221_HUM_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 8003bf2:	6839      	ldr	r1, [r7, #0]
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f000 f9a1 	bl	8003f3c <HTS221_GetOutputDataRate>
 8003bfa:	4603      	mov	r3, r0
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3708      	adds	r7, #8
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <HTS221_HUM_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8003c0e:	6839      	ldr	r1, [r7, #0]
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f000 f9d7 	bl	8003fc4 <HTS221_SetOutputDataRate>
 8003c16:	4603      	mov	r3, r0
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3708      	adds	r7, #8
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <HTS221_HUM_GetHumidity>:
 * @param  pObj the device pObj
 * @param  Value pointer where the humidity value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_GetHumidity(HTS221_Object_t *pObj, float *Value)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b088      	sub	sp, #32
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_humidity;
  hts221_axis1bit16_t coeff;
  lin_t lin_hum;

  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	331c      	adds	r3, #28
 8003c2e:	f107 0218 	add.w	r2, r7, #24
 8003c32:	4611      	mov	r1, r2
 8003c34:	4618      	mov	r0, r3
 8003c36:	f000 fc48 	bl	80044ca <hts221_hum_adc_point_0_get>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d002      	beq.n	8003c46 <HTS221_HUM_GetHumidity+0x26>
  {
    return HTS221_ERROR;
 8003c40:	f04f 33ff 	mov.w	r3, #4294967295
 8003c44:	e086      	b.n	8003d54 <HTS221_HUM_GetHumidity+0x134>
  }

  lin_hum.x0 = (float)coeff.i16bit;
 8003c46:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003c4a:	ee07 3a90 	vmov	s15, r3
 8003c4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c52:	edc7 7a02 	vstr	s15, [r7, #8]

  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	331c      	adds	r3, #28
 8003c5a:	f107 0218 	add.w	r2, r7, #24
 8003c5e:	4611      	mov	r1, r2
 8003c60:	4618      	mov	r0, r3
 8003c62:	f000 fbb0 	bl	80043c6 <hts221_hum_rh_point_0_get>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d002      	beq.n	8003c72 <HTS221_HUM_GetHumidity+0x52>
  {
    return HTS221_ERROR;
 8003c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8003c70:	e070      	b.n	8003d54 <HTS221_HUM_GetHumidity+0x134>
  }

  lin_hum.y0 = (float)coeff.u8bit[0];
 8003c72:	7e3b      	ldrb	r3, [r7, #24]
 8003c74:	ee07 3a90 	vmov	s15, r3
 8003c78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c7c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	331c      	adds	r3, #28
 8003c84:	f107 0218 	add.w	r2, r7, #24
 8003c88:	4611      	mov	r1, r2
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f000 fc2e 	bl	80044ec <hts221_hum_adc_point_1_get>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d002      	beq.n	8003c9c <HTS221_HUM_GetHumidity+0x7c>
  {
    return HTS221_ERROR;
 8003c96:	f04f 33ff 	mov.w	r3, #4294967295
 8003c9a:	e05b      	b.n	8003d54 <HTS221_HUM_GetHumidity+0x134>
  }

  lin_hum.x1 = (float)coeff.i16bit;
 8003c9c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003ca0:	ee07 3a90 	vmov	s15, r3
 8003ca4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ca8:	edc7 7a04 	vstr	s15, [r7, #16]

  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	331c      	adds	r3, #28
 8003cb0:	f107 0218 	add.w	r2, r7, #24
 8003cb4:	4611      	mov	r1, r2
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f000 fb9c 	bl	80043f4 <hts221_hum_rh_point_1_get>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d002      	beq.n	8003cc8 <HTS221_HUM_GetHumidity+0xa8>
  {
    return HTS221_ERROR;
 8003cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8003cc6:	e045      	b.n	8003d54 <HTS221_HUM_GetHumidity+0x134>
  }

  lin_hum.y1 = (float)coeff.u8bit[0];
 8003cc8:	7e3b      	ldrb	r3, [r7, #24]
 8003cca:	ee07 3a90 	vmov	s15, r3
 8003cce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cd2:	edc7 7a05 	vstr	s15, [r7, #20]

  (void)memset(data_raw_humidity.u8bit, 0x00, sizeof(int16_t));
 8003cd6:	f107 031c 	add.w	r3, r7, #28
 8003cda:	2202      	movs	r2, #2
 8003cdc:	2100      	movs	r1, #0
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f016 fc99 	bl	801a616 <memset>
  if (hts221_humidity_raw_get(&(pObj->Ctx), data_raw_humidity.u8bit) != HTS221_OK)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	331c      	adds	r3, #28
 8003ce8:	f107 021c 	add.w	r2, r7, #28
 8003cec:	4611      	mov	r1, r2
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f000 fb10 	bl	8004314 <hts221_humidity_raw_get>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d002      	beq.n	8003d00 <HTS221_HUM_GetHumidity+0xe0>
  {
    return HTS221_ERROR;
 8003cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8003cfe:	e029      	b.n	8003d54 <HTS221_HUM_GetHumidity+0x134>
  }

  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 8003d00:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003d04:	ee07 3a90 	vmov	s15, r3
 8003d08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d0c:	f107 0308 	add.w	r3, r7, #8
 8003d10:	ee17 1a90 	vmov	r1, s15
 8003d14:	4618      	mov	r0, r3
 8003d16:	f000 f9b0 	bl	800407a <Linear_Interpolation>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	601a      	str	r2, [r3, #0]

  if (*Value < 0.0f)
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	edd3 7a00 	vldr	s15, [r3]
 8003d26:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d2e:	d503      	bpl.n	8003d38 <HTS221_HUM_GetHumidity+0x118>
  {
    *Value = 0.0f;
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	f04f 0200 	mov.w	r2, #0
 8003d36:	601a      	str	r2, [r3, #0]
  }

  if (*Value > 100.0f)
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	edd3 7a00 	vldr	s15, [r3]
 8003d3e:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8003d5c <HTS221_HUM_GetHumidity+0x13c>
 8003d42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d4a:	dd02      	ble.n	8003d52 <HTS221_HUM_GetHumidity+0x132>
  {
    *Value = 100.0f;
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	4a04      	ldr	r2, [pc, #16]	; (8003d60 <HTS221_HUM_GetHumidity+0x140>)
 8003d50:	601a      	str	r2, [r3, #0]
  }

  return HTS221_OK;
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3720      	adds	r7, #32
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	42c80000 	.word	0x42c80000
 8003d60:	42c80000 	.word	0x42c80000

08003d64 <HTS221_TEMP_Enable>:
 * @brief  Enable the HTS221 temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_Enable(HTS221_Object_t *pObj)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d101      	bne.n	8003d7a <HTS221_TEMP_Enable+0x16>
  {
    return HTS221_OK;
 8003d76:	2300      	movs	r3, #0
 8003d78:	e015      	b.n	8003da6 <HTS221_TEMP_Enable+0x42>
  }

  /* Check if the HTS221 humidity sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->hum_is_enabled == 0U)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d10b      	bne.n	8003d9c <HTS221_TEMP_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	331c      	adds	r3, #28
 8003d88:	2101      	movs	r1, #1
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f000 faf5 	bl	800437a <hts221_power_on_set>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d002      	beq.n	8003d9c <HTS221_TEMP_Enable+0x38>
    {
      return HTS221_ERROR;
 8003d96:	f04f 33ff 	mov.w	r3, #4294967295
 8003d9a:	e004      	b.n	8003da6 <HTS221_TEMP_Enable+0x42>
    }
  }

  pObj->temp_is_enabled = 1;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HTS221_OK;
 8003da4:	2300      	movs	r3, #0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3708      	adds	r7, #8
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}

08003dae <HTS221_TEMP_Disable>:
 * @brief  Disable the HTS221 temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_Disable(HTS221_Object_t *pObj)
{
 8003dae:	b580      	push	{r7, lr}
 8003db0:	b082      	sub	sp, #8
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d101      	bne.n	8003dc4 <HTS221_TEMP_Disable+0x16>
  {
    return HTS221_OK;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	e015      	b.n	8003df0 <HTS221_TEMP_Disable+0x42>
  }

  /* Check if the HTS221 humidity sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->hum_is_enabled == 0U)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d10b      	bne.n	8003de6 <HTS221_TEMP_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	331c      	adds	r3, #28
 8003dd2:	2100      	movs	r1, #0
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f000 fad0 	bl	800437a <hts221_power_on_set>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d002      	beq.n	8003de6 <HTS221_TEMP_Disable+0x38>
    {
      return HTS221_ERROR;
 8003de0:	f04f 33ff 	mov.w	r3, #4294967295
 8003de4:	e004      	b.n	8003df0 <HTS221_TEMP_Disable+0x42>
    }
  }

  pObj->temp_is_enabled = 0;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HTS221_OK;
 8003dee:	2300      	movs	r3, #0
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3708      	adds	r7, #8
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <HTS221_TEMP_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b082      	sub	sp, #8
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 8003e02:	6839      	ldr	r1, [r7, #0]
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f000 f899 	bl	8003f3c <HTS221_GetOutputDataRate>
 8003e0a:	4603      	mov	r3, r0
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3708      	adds	r7, #8
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <HTS221_TEMP_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8003e1e:	6839      	ldr	r1, [r7, #0]
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f000 f8cf 	bl	8003fc4 <HTS221_SetOutputDataRate>
 8003e26:	4603      	mov	r3, r0
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3708      	adds	r7, #8
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <HTS221_TEMP_GetTemperature>:
 * @param  pObj the device pObj
 * @param  Value pointer where the temperature value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_GetTemperature(HTS221_Object_t *pObj, float *Value)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b088      	sub	sp, #32
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_temperature;
  hts221_axis1bit16_t coeff;
  lin_t lin_temp;

  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	331c      	adds	r3, #28
 8003e3e:	f107 0218 	add.w	r2, r7, #24
 8003e42:	4611      	mov	r1, r2
 8003e44:	4618      	mov	r0, r3
 8003e46:	f000 fb62 	bl	800450e <hts221_temp_adc_point_0_get>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d002      	beq.n	8003e56 <HTS221_TEMP_GetTemperature+0x26>
  {
    return HTS221_ERROR;
 8003e50:	f04f 33ff 	mov.w	r3, #4294967295
 8003e54:	e06d      	b.n	8003f32 <HTS221_TEMP_GetTemperature+0x102>
  }

  lin_temp.x0 = (float)coeff.i16bit;
 8003e56:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003e5a:	ee07 3a90 	vmov	s15, r3
 8003e5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e62:	edc7 7a02 	vstr	s15, [r7, #8]

  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	331c      	adds	r3, #28
 8003e6a:	f107 0218 	add.w	r2, r7, #24
 8003e6e:	4611      	mov	r1, r2
 8003e70:	4618      	mov	r0, r3
 8003e72:	f000 fad6 	bl	8004422 <hts221_temp_deg_point_0_get>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d002      	beq.n	8003e82 <HTS221_TEMP_GetTemperature+0x52>
  {
    return HTS221_ERROR;
 8003e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e80:	e057      	b.n	8003f32 <HTS221_TEMP_GetTemperature+0x102>
  }

  lin_temp.y0 = (float)coeff.u8bit[0];
 8003e82:	7e3b      	ldrb	r3, [r7, #24]
 8003e84:	ee07 3a90 	vmov	s15, r3
 8003e88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e8c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	331c      	adds	r3, #28
 8003e94:	f107 0218 	add.w	r2, r7, #24
 8003e98:	4611      	mov	r1, r2
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f000 fb48 	bl	8004530 <hts221_temp_adc_point_1_get>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d002      	beq.n	8003eac <HTS221_TEMP_GetTemperature+0x7c>
  {
    return HTS221_ERROR;
 8003ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8003eaa:	e042      	b.n	8003f32 <HTS221_TEMP_GetTemperature+0x102>
  }

  lin_temp.x1 = (float)coeff.i16bit;
 8003eac:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003eb0:	ee07 3a90 	vmov	s15, r3
 8003eb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003eb8:	edc7 7a04 	vstr	s15, [r7, #16]

  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	331c      	adds	r3, #28
 8003ec0:	f107 0218 	add.w	r2, r7, #24
 8003ec4:	4611      	mov	r1, r2
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f000 fad5 	bl	8004476 <hts221_temp_deg_point_1_get>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d002      	beq.n	8003ed8 <HTS221_TEMP_GetTemperature+0xa8>
  {
    return HTS221_ERROR;
 8003ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ed6:	e02c      	b.n	8003f32 <HTS221_TEMP_GetTemperature+0x102>
  }

  lin_temp.y1 = (float)coeff.u8bit[0];
 8003ed8:	7e3b      	ldrb	r3, [r7, #24]
 8003eda:	ee07 3a90 	vmov	s15, r3
 8003ede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ee2:	edc7 7a05 	vstr	s15, [r7, #20]

  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 8003ee6:	f107 031c 	add.w	r3, r7, #28
 8003eea:	2202      	movs	r2, #2
 8003eec:	2100      	movs	r1, #0
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f016 fb91 	bl	801a616 <memset>
  if (hts221_temperature_raw_get(&(pObj->Ctx), data_raw_temperature.u8bit) != HTS221_OK)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	331c      	adds	r3, #28
 8003ef8:	f107 021c 	add.w	r2, r7, #28
 8003efc:	4611      	mov	r1, r2
 8003efe:	4618      	mov	r0, r3
 8003f00:	f000 fa19 	bl	8004336 <hts221_temperature_raw_get>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d002      	beq.n	8003f10 <HTS221_TEMP_GetTemperature+0xe0>
  {
    return HTS221_ERROR;
 8003f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f0e:	e010      	b.n	8003f32 <HTS221_TEMP_GetTemperature+0x102>
  }

  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 8003f10:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003f14:	ee07 3a90 	vmov	s15, r3
 8003f18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f1c:	f107 0308 	add.w	r3, r7, #8
 8003f20:	ee17 1a90 	vmov	r1, s15
 8003f24:	4618      	mov	r0, r3
 8003f26:	f000 f8a8 	bl	800407a <Linear_Interpolation>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	601a      	str	r2, [r3, #0]

  return HTS221_OK;
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3720      	adds	r7, #32
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
	...

08003f3c <HTS221_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	6039      	str	r1, [r7, #0]
  int32_t ret = HTS221_OK;
 8003f46:	2300      	movs	r3, #0
 8003f48:	60fb      	str	r3, [r7, #12]
  hts221_odr_t odr_low_level;

  if (hts221_data_rate_get(&(pObj->Ctx), &odr_low_level) != HTS221_OK)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	331c      	adds	r3, #28
 8003f4e:	f107 020b 	add.w	r2, r7, #11
 8003f52:	4611      	mov	r1, r2
 8003f54:	4618      	mov	r0, r3
 8003f56:	f000 f97f 	bl	8004258 <hts221_data_rate_get>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d002      	beq.n	8003f66 <HTS221_GetOutputDataRate+0x2a>
  {
    return HTS221_ERROR;
 8003f60:	f04f 33ff 	mov.w	r3, #4294967295
 8003f64:	e025      	b.n	8003fb2 <HTS221_GetOutputDataRate+0x76>
  }

  switch (odr_low_level)
 8003f66:	7afb      	ldrb	r3, [r7, #11]
 8003f68:	2b03      	cmp	r3, #3
 8003f6a:	d81d      	bhi.n	8003fa8 <HTS221_GetOutputDataRate+0x6c>
 8003f6c:	a201      	add	r2, pc, #4	; (adr r2, 8003f74 <HTS221_GetOutputDataRate+0x38>)
 8003f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f72:	bf00      	nop
 8003f74:	08003f85 	.word	0x08003f85
 8003f78:	08003f8f 	.word	0x08003f8f
 8003f7c:	08003f99 	.word	0x08003f99
 8003f80:	08003fa1 	.word	0x08003fa1
  {
    case HTS221_ONE_SHOT:
      *Odr = 0.0f;
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	f04f 0200 	mov.w	r2, #0
 8003f8a:	601a      	str	r2, [r3, #0]
      break;
 8003f8c:	e010      	b.n	8003fb0 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_1Hz:
      *Odr = 1.0f;
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003f94:	601a      	str	r2, [r3, #0]
      break;
 8003f96:	e00b      	b.n	8003fb0 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_7Hz:
      *Odr = 7.0f;
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	4a08      	ldr	r2, [pc, #32]	; (8003fbc <HTS221_GetOutputDataRate+0x80>)
 8003f9c:	601a      	str	r2, [r3, #0]
      break;
 8003f9e:	e007      	b.n	8003fb0 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_12Hz5:
      *Odr = 12.5f;
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	4a07      	ldr	r2, [pc, #28]	; (8003fc0 <HTS221_GetOutputDataRate+0x84>)
 8003fa4:	601a      	str	r2, [r3, #0]
      break;
 8003fa6:	e003      	b.n	8003fb0 <HTS221_GetOutputDataRate+0x74>

    default:
      ret = HTS221_ERROR;
 8003fa8:	f04f 33ff 	mov.w	r3, #4294967295
 8003fac:	60fb      	str	r3, [r7, #12]
      break;
 8003fae:	bf00      	nop
  }

  return ret;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3710      	adds	r7, #16
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	40e00000 	.word	0x40e00000
 8003fc0:	41480000 	.word	0x41480000

08003fc4 <HTS221_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
  hts221_odr_t new_odr;

  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 8003fce:	edd7 7a00 	vldr	s15, [r7]
 8003fd2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003fd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fde:	d801      	bhi.n	8003fe4 <HTS221_SetOutputDataRate+0x20>
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e00b      	b.n	8003ffc <HTS221_SetOutputDataRate+0x38>
 8003fe4:	edd7 7a00 	vldr	s15, [r7]
 8003fe8:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8003fec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ff4:	d801      	bhi.n	8003ffa <HTS221_SetOutputDataRate+0x36>
 8003ff6:	2302      	movs	r3, #2
 8003ff8:	e000      	b.n	8003ffc <HTS221_SetOutputDataRate+0x38>
 8003ffa:	2303      	movs	r3, #3
  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
 8003ffc:	73fb      	strb	r3, [r7, #15]
            :                 HTS221_ODR_12Hz5;

  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	331c      	adds	r3, #28
 8004002:	7bfa      	ldrb	r2, [r7, #15]
 8004004:	4611      	mov	r1, r2
 8004006:	4618      	mov	r0, r3
 8004008:	f000 f900 	bl	800420c <hts221_data_rate_set>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d002      	beq.n	8004018 <HTS221_SetOutputDataRate+0x54>
  {
    return HTS221_ERROR;
 8004012:	f04f 33ff 	mov.w	r3, #4294967295
 8004016:	e000      	b.n	800401a <HTS221_SetOutputDataRate+0x56>
  }

  return HTS221_OK;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3710      	adds	r7, #16
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}

08004022 <HTS221_Initialize>:
 * @brief  Initialize the HTS221 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_Initialize(HTS221_Object_t *pObj)
{
 8004022:	b580      	push	{r7, lr}
 8004024:	b082      	sub	sp, #8
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
  /* Power off the component. */
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	331c      	adds	r3, #28
 800402e:	2100      	movs	r1, #0
 8004030:	4618      	mov	r0, r3
 8004032:	f000 f9a2 	bl	800437a <hts221_power_on_set>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d002      	beq.n	8004042 <HTS221_Initialize+0x20>
  {
    return HTS221_ERROR;
 800403c:	f04f 33ff 	mov.w	r3, #4294967295
 8004040:	e017      	b.n	8004072 <HTS221_Initialize+0x50>
  }

  /* Enable BDU */
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	331c      	adds	r3, #28
 8004046:	2101      	movs	r1, #1
 8004048:	4618      	mov	r0, r3
 800404a:	f000 f93d 	bl	80042c8 <hts221_block_data_update_set>
 800404e:	4603      	mov	r3, r0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d002      	beq.n	800405a <HTS221_Initialize+0x38>
  {
    return HTS221_ERROR;
 8004054:	f04f 33ff 	mov.w	r3, #4294967295
 8004058:	e00b      	b.n	8004072 <HTS221_Initialize+0x50>
  }

  /* Set default ODR */
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 800405a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f7ff ffb0 	bl	8003fc4 <HTS221_SetOutputDataRate>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d002      	beq.n	8004070 <HTS221_Initialize+0x4e>
  {
    return HTS221_ERROR;
 800406a:	f04f 33ff 	mov.w	r3, #4294967295
 800406e:	e000      	b.n	8004072 <HTS221_Initialize+0x50>
  }

  return HTS221_OK;
 8004070:	2300      	movs	r3, #0
}
 8004072:	4618      	mov	r0, r3
 8004074:	3708      	adds	r7, #8
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}

0800407a <Linear_Interpolation>:
 * @param  Lin the line
 * @param  Coeff the coefficient
 * @retval Calculation result
 */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
 800407a:	b480      	push	{r7}
 800407c:	b083      	sub	sp, #12
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]
 8004082:	6039      	str	r1, [r7, #0]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	ed93 7a03 	vldr	s14, [r3, #12]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	edd3 7a01 	vldr	s15, [r3, #4]
 8004090:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004094:	edd7 7a00 	vldr	s15, [r7]
 8004098:	ee27 7a27 	vmul.f32	s14, s14, s15
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	edd3 6a02 	vldr	s13, [r3, #8]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	edd3 7a01 	vldr	s15, [r3, #4]
 80040a8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	ed93 6a00 	vldr	s12, [r3]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	edd3 7a03 	vldr	s15, [r3, #12]
 80040b8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80040bc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80040c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	edd3 6a02 	vldr	s13, [r3, #8]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	edd3 7a00 	vldr	s15, [r3]
 80040d0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80040d4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80040d8:	ee16 3a90 	vmov	r3, s13
}
 80040dc:	4618      	mov	r0, r3
 80040de:	370c      	adds	r7, #12
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr

080040e8 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80040e8:	b590      	push	{r4, r7, lr}
 80040ea:	b087      	sub	sp, #28
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	60f8      	str	r0, [r7, #12]
 80040f0:	607a      	str	r2, [r7, #4]
 80040f2:	461a      	mov	r2, r3
 80040f4:	460b      	mov	r3, r1
 80040f6:	72fb      	strb	r3, [r7, #11]
 80040f8:	4613      	mov	r3, r2
 80040fa:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d10e      	bne.n	8004126 <ReadRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	695c      	ldr	r4, [r3, #20]
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	7b1b      	ldrb	r3, [r3, #12]
 8004110:	b298      	uxth	r0, r3
 8004112:	7afb      	ldrb	r3, [r7, #11]
 8004114:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004118:	b2db      	uxtb	r3, r3
 800411a:	b299      	uxth	r1, r3
 800411c:	893b      	ldrh	r3, [r7, #8]
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	47a0      	blx	r4
 8004122:	4603      	mov	r3, r0
 8004124:	e00d      	b.n	8004142 <ReadRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	695c      	ldr	r4, [r3, #20]
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	7b1b      	ldrb	r3, [r3, #12]
 800412e:	b298      	uxth	r0, r3
 8004130:	7afb      	ldrb	r3, [r7, #11]
 8004132:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004136:	b2db      	uxtb	r3, r3
 8004138:	b299      	uxth	r1, r3
 800413a:	893b      	ldrh	r3, [r7, #8]
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	47a0      	blx	r4
 8004140:	4603      	mov	r3, r0
  }
}
 8004142:	4618      	mov	r0, r3
 8004144:	371c      	adds	r7, #28
 8004146:	46bd      	mov	sp, r7
 8004148:	bd90      	pop	{r4, r7, pc}

0800414a <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800414a:	b590      	push	{r4, r7, lr}
 800414c:	b087      	sub	sp, #28
 800414e:	af00      	add	r7, sp, #0
 8004150:	60f8      	str	r0, [r7, #12]
 8004152:	607a      	str	r2, [r7, #4]
 8004154:	461a      	mov	r2, r3
 8004156:	460b      	mov	r3, r1
 8004158:	72fb      	strb	r3, [r7, #11]
 800415a:	4613      	mov	r3, r2
 800415c:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d10e      	bne.n	8004188 <WriteRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	691c      	ldr	r4, [r3, #16]
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	7b1b      	ldrb	r3, [r3, #12]
 8004172:	b298      	uxth	r0, r3
 8004174:	7afb      	ldrb	r3, [r7, #11]
 8004176:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800417a:	b2db      	uxtb	r3, r3
 800417c:	b299      	uxth	r1, r3
 800417e:	893b      	ldrh	r3, [r7, #8]
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	47a0      	blx	r4
 8004184:	4603      	mov	r3, r0
 8004186:	e00d      	b.n	80041a4 <WriteRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	691c      	ldr	r4, [r3, #16]
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	7b1b      	ldrb	r3, [r3, #12]
 8004190:	b298      	uxth	r0, r3
 8004192:	7afb      	ldrb	r3, [r7, #11]
 8004194:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004198:	b2db      	uxtb	r3, r3
 800419a:	b299      	uxth	r1, r3
 800419c:	893b      	ldrh	r3, [r7, #8]
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	47a0      	blx	r4
 80041a2:	4603      	mov	r3, r0
  }
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	371c      	adds	r7, #28
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd90      	pop	{r4, r7, pc}

080041ac <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                        uint16_t len)
{
 80041ac:	b590      	push	{r4, r7, lr}
 80041ae:	b087      	sub	sp, #28
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	607a      	str	r2, [r7, #4]
 80041b6:	461a      	mov	r2, r3
 80041b8:	460b      	mov	r3, r1
 80041ba:	72fb      	strb	r3, [r7, #11]
 80041bc:	4613      	mov	r3, r2
 80041be:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	685c      	ldr	r4, [r3, #4]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6898      	ldr	r0, [r3, #8]
 80041c8:	893b      	ldrh	r3, [r7, #8]
 80041ca:	7af9      	ldrb	r1, [r7, #11]
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	47a0      	blx	r4
 80041d0:	6178      	str	r0, [r7, #20]
  return ret;
 80041d2:	697b      	ldr	r3, [r7, #20]
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	371c      	adds	r7, #28
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd90      	pop	{r4, r7, pc}

080041dc <hts221_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 80041dc:	b590      	push	{r4, r7, lr}
 80041de:	b087      	sub	sp, #28
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	607a      	str	r2, [r7, #4]
 80041e6:	461a      	mov	r2, r3
 80041e8:	460b      	mov	r3, r1
 80041ea:	72fb      	strb	r3, [r7, #11]
 80041ec:	4613      	mov	r3, r2
 80041ee:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681c      	ldr	r4, [r3, #0]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6898      	ldr	r0, [r3, #8]
 80041f8:	893b      	ldrh	r3, [r7, #8]
 80041fa:	7af9      	ldrb	r1, [r7, #11]
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	47a0      	blx	r4
 8004200:	6178      	str	r0, [r7, #20]
  return ret;
 8004202:	697b      	ldr	r3, [r7, #20]
}
 8004204:	4618      	mov	r0, r3
 8004206:	371c      	adds	r7, #28
 8004208:	46bd      	mov	sp, r7
 800420a:	bd90      	pop	{r4, r7, pc}

0800420c <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	460b      	mov	r3, r1
 8004216:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 8004218:	f107 0208 	add.w	r2, r7, #8
 800421c:	2301      	movs	r3, #1
 800421e:	2120      	movs	r1, #32
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f7ff ffc3 	bl	80041ac <hts221_read_reg>
 8004226:	60f8      	str	r0, [r7, #12]

  if(ret == 0){
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d10f      	bne.n	800424e <hts221_data_rate_set+0x42>
    reg.odr = (uint8_t)val;
 800422e:	78fb      	ldrb	r3, [r7, #3]
 8004230:	f003 0303 	and.w	r3, r3, #3
 8004234:	b2da      	uxtb	r2, r3
 8004236:	7a3b      	ldrb	r3, [r7, #8]
 8004238:	f362 0301 	bfi	r3, r2, #0, #2
 800423c:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 800423e:	f107 0208 	add.w	r2, r7, #8
 8004242:	2301      	movs	r3, #1
 8004244:	2120      	movs	r1, #32
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f7ff ffc8 	bl	80041dc <hts221_write_reg>
 800424c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800424e:	68fb      	ldr	r3, [r7, #12]
}
 8004250:	4618      	mov	r0, r3
 8004252:	3710      	adds	r7, #16
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}

08004258 <hts221_data_rate_get>:
  * @param  val     Get the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_get(stmdev_ctx_t *ctx, hts221_odr_t *val)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b084      	sub	sp, #16
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	6039      	str	r1, [r7, #0]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 8004262:	f107 0208 	add.w	r2, r7, #8
 8004266:	2301      	movs	r3, #1
 8004268:	2120      	movs	r1, #32
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f7ff ff9e 	bl	80041ac <hts221_read_reg>
 8004270:	60f8      	str	r0, [r7, #12]

  switch (reg.odr) {
 8004272:	7a3b      	ldrb	r3, [r7, #8]
 8004274:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8004278:	b2db      	uxtb	r3, r3
 800427a:	2b03      	cmp	r3, #3
 800427c:	d81a      	bhi.n	80042b4 <hts221_data_rate_get+0x5c>
 800427e:	a201      	add	r2, pc, #4	; (adr r2, 8004284 <hts221_data_rate_get+0x2c>)
 8004280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004284:	08004295 	.word	0x08004295
 8004288:	0800429d 	.word	0x0800429d
 800428c:	080042a5 	.word	0x080042a5
 8004290:	080042ad 	.word	0x080042ad
    case HTS221_ONE_SHOT:
      *val = HTS221_ONE_SHOT;
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	2200      	movs	r2, #0
 8004298:	701a      	strb	r2, [r3, #0]
      break;
 800429a:	e00f      	b.n	80042bc <hts221_data_rate_get+0x64>
    case HTS221_ODR_1Hz:
      *val = HTS221_ODR_1Hz;
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	2201      	movs	r2, #1
 80042a0:	701a      	strb	r2, [r3, #0]
      break;
 80042a2:	e00b      	b.n	80042bc <hts221_data_rate_get+0x64>
    case HTS221_ODR_7Hz:
      *val = HTS221_ODR_7Hz;
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	2202      	movs	r2, #2
 80042a8:	701a      	strb	r2, [r3, #0]
      break;
 80042aa:	e007      	b.n	80042bc <hts221_data_rate_get+0x64>
    case HTS221_ODR_12Hz5:
      *val = HTS221_ODR_12Hz5;
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	2203      	movs	r2, #3
 80042b0:	701a      	strb	r2, [r3, #0]
      break;
 80042b2:	e003      	b.n	80042bc <hts221_data_rate_get+0x64>
    default:
      *val = HTS221_ODR_ND;
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	2204      	movs	r2, #4
 80042b8:	701a      	strb	r2, [r3, #0]
      break;
 80042ba:	bf00      	nop
  }

  return ret;
 80042bc:	68fb      	ldr	r3, [r7, #12]
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3710      	adds	r7, #16
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop

080042c8 <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	460b      	mov	r3, r1
 80042d2:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 80042d4:	f107 0208 	add.w	r2, r7, #8
 80042d8:	2301      	movs	r3, #1
 80042da:	2120      	movs	r1, #32
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f7ff ff65 	bl	80041ac <hts221_read_reg>
 80042e2:	60f8      	str	r0, [r7, #12]

  if(ret == 0){
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d10f      	bne.n	800430a <hts221_block_data_update_set+0x42>
    reg.bdu = val;
 80042ea:	78fb      	ldrb	r3, [r7, #3]
 80042ec:	f003 0301 	and.w	r3, r3, #1
 80042f0:	b2da      	uxtb	r2, r3
 80042f2:	7a3b      	ldrb	r3, [r7, #8]
 80042f4:	f362 0382 	bfi	r3, r2, #2, #1
 80042f8:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 80042fa:	f107 0208 	add.w	r2, r7, #8
 80042fe:	2301      	movs	r3, #1
 8004300:	2120      	movs	r1, #32
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f7ff ff6a 	bl	80041dc <hts221_write_reg>
 8004308:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800430a:	68fb      	ldr	r3, [r7, #12]
}
 800430c:	4618      	mov	r0, r3
 800430e:	3710      	adds	r7, #16
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 800431e:	2302      	movs	r3, #2
 8004320:	683a      	ldr	r2, [r7, #0]
 8004322:	2128      	movs	r1, #40	; 0x28
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f7ff ff41 	bl	80041ac <hts221_read_reg>
 800432a:	60f8      	str	r0, [r7, #12]
  return ret;
 800432c:	68fb      	ldr	r3, [r7, #12]
}
 800432e:	4618      	mov	r0, r3
 8004330:	3710      	adds	r7, #16
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}

08004336 <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004336:	b580      	push	{r7, lr}
 8004338:	b084      	sub	sp, #16
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
 800433e:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 8004340:	2302      	movs	r3, #2
 8004342:	683a      	ldr	r2, [r7, #0]
 8004344:	212a      	movs	r1, #42	; 0x2a
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f7ff ff30 	bl	80041ac <hts221_read_reg>
 800434c:	60f8      	str	r0, [r7, #12]
  return ret;
 800434e:	68fb      	ldr	r3, [r7, #12]
}
 8004350:	4618      	mov	r0, r3
 8004352:	3710      	adds	r7, #16
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}

08004358 <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 8004362:	2301      	movs	r3, #1
 8004364:	683a      	ldr	r2, [r7, #0]
 8004366:	210f      	movs	r1, #15
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f7ff ff1f 	bl	80041ac <hts221_read_reg>
 800436e:	60f8      	str	r0, [r7, #12]
  return ret;
 8004370:	68fb      	ldr	r3, [r7, #12]
}
 8004372:	4618      	mov	r0, r3
 8004374:	3710      	adds	r7, #16
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}

0800437a <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800437a:	b580      	push	{r7, lr}
 800437c:	b084      	sub	sp, #16
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
 8004382:	460b      	mov	r3, r1
 8004384:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 8004386:	f107 0208 	add.w	r2, r7, #8
 800438a:	2301      	movs	r3, #1
 800438c:	2120      	movs	r1, #32
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f7ff ff0c 	bl	80041ac <hts221_read_reg>
 8004394:	60f8      	str	r0, [r7, #12]

  if(ret == 0){
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d10f      	bne.n	80043bc <hts221_power_on_set+0x42>
    reg.pd = val;
 800439c:	78fb      	ldrb	r3, [r7, #3]
 800439e:	f003 0301 	and.w	r3, r3, #1
 80043a2:	b2da      	uxtb	r2, r3
 80043a4:	7a3b      	ldrb	r3, [r7, #8]
 80043a6:	f362 13c7 	bfi	r3, r2, #7, #1
 80043aa:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 80043ac:	f107 0208 	add.w	r2, r7, #8
 80043b0:	2301      	movs	r3, #1
 80043b2:	2120      	movs	r1, #32
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f7ff ff11 	bl	80041dc <hts221_write_reg>
 80043ba:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80043bc:	68fb      	ldr	r3, [r7, #12]
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3710      	adds	r7, #16
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}

080043c6 <hts221_hum_rh_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80043c6:	b580      	push	{r7, lr}
 80043c8:	b084      	sub	sp, #16
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6078      	str	r0, [r7, #4]
 80043ce:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, buff, 1);
 80043d0:	2301      	movs	r3, #1
 80043d2:	683a      	ldr	r2, [r7, #0]
 80043d4:	2130      	movs	r1, #48	; 0x30
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f7ff fee8 	bl	80041ac <hts221_read_reg>
 80043dc:	60f8      	str	r0, [r7, #12]
  *buff = (uint8_t)(((uint16_t)(*buff) >> 1) & 0x7FFFu);
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	085b      	lsrs	r3, r3, #1
 80043e4:	b2da      	uxtb	r2, r3
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	701a      	strb	r2, [r3, #0]

  return ret;
 80043ea:	68fb      	ldr	r3, [r7, #12]
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3710      	adds	r7, #16
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <hts221_hum_rh_point_1_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b084      	sub	sp, #16
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, buff, 1);
 80043fe:	2301      	movs	r3, #1
 8004400:	683a      	ldr	r2, [r7, #0]
 8004402:	2131      	movs	r1, #49	; 0x31
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f7ff fed1 	bl	80041ac <hts221_read_reg>
 800440a:	60f8      	str	r0, [r7, #12]
  *buff = (uint8_t)(((uint16_t)(*buff) >> 1) & 0x7FFFu);
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	781b      	ldrb	r3, [r3, #0]
 8004410:	085b      	lsrs	r3, r3, #1
 8004412:	b2da      	uxtb	r2, r3
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	701a      	strb	r2, [r3, #0]

  return ret;
 8004418:	68fb      	ldr	r3, [r7, #12]
}
 800441a:	4618      	mov	r0, r3
 800441c:	3710      	adds	r7, #16
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}

08004422 <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004422:	b580      	push	{r7, lr}
 8004424:	b086      	sub	sp, #24
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
 800442a:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 800442c:	f107 020f 	add.w	r2, r7, #15
 8004430:	2301      	movs	r3, #1
 8004432:	2132      	movs	r1, #50	; 0x32
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f7ff feb9 	bl	80041ac <hts221_read_reg>
 800443a:	6178      	str	r0, [r7, #20]

  if(ret == 0){
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d114      	bne.n	800446c <hts221_temp_deg_point_0_get+0x4a>
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t*) &reg, 1);
 8004442:	f107 0210 	add.w	r2, r7, #16
 8004446:	2301      	movs	r3, #1
 8004448:	2135      	movs	r1, #53	; 0x35
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f7ff feae 	bl	80041ac <hts221_read_reg>
 8004450:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t0_msb;
 8004452:	7c3b      	ldrb	r3, [r7, #16]
 8004454:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8004458:	b2db      	uxtb	r3, r3
 800445a:	74fb      	strb	r3, [r7, #19]
    *(buff) = (uint8_t)(((coeff_h << 8) + coeff_l) >> 3);
 800445c:	7cfb      	ldrb	r3, [r7, #19]
 800445e:	021b      	lsls	r3, r3, #8
 8004460:	7bfa      	ldrb	r2, [r7, #15]
 8004462:	4413      	add	r3, r2
 8004464:	10db      	asrs	r3, r3, #3
 8004466:	b2da      	uxtb	r2, r3
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800446c:	697b      	ldr	r3, [r7, #20]
}
 800446e:	4618      	mov	r0, r3
 8004470:	3718      	adds	r7, #24
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}

08004476 <hts221_temp_deg_point_1_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004476:	b580      	push	{r7, lr}
 8004478:	b086      	sub	sp, #24
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
 800447e:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 8004480:	f107 020f 	add.w	r2, r7, #15
 8004484:	2301      	movs	r3, #1
 8004486:	2133      	movs	r1, #51	; 0x33
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f7ff fe8f 	bl	80041ac <hts221_read_reg>
 800448e:	6178      	str	r0, [r7, #20]

  if(ret == 0){
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d114      	bne.n	80044c0 <hts221_temp_deg_point_1_get+0x4a>
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t*) &reg, 1);
 8004496:	f107 0210 	add.w	r2, r7, #16
 800449a:	2301      	movs	r3, #1
 800449c:	2135      	movs	r1, #53	; 0x35
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f7ff fe84 	bl	80041ac <hts221_read_reg>
 80044a4:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t1_msb;
 80044a6:	7c3b      	ldrb	r3, [r7, #16]
 80044a8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	74fb      	strb	r3, [r7, #19]
    *(buff) = (uint8_t)(((coeff_h << 8) + coeff_l) >> 3);
 80044b0:	7cfb      	ldrb	r3, [r7, #19]
 80044b2:	021b      	lsls	r3, r3, #8
 80044b4:	7bfa      	ldrb	r2, [r7, #15]
 80044b6:	4413      	add	r3, r2
 80044b8:	10db      	asrs	r3, r3, #3
 80044ba:	b2da      	uxtb	r2, r3
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 80044c0:	697b      	ldr	r3, [r7, #20]
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3718      	adds	r7, #24
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}

080044ca <hts221_hum_adc_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80044ca:	b580      	push	{r7, lr}
 80044cc:	b084      	sub	sp, #16
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
 80044d2:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, buff, 2);
 80044d4:	2302      	movs	r3, #2
 80044d6:	683a      	ldr	r2, [r7, #0]
 80044d8:	2136      	movs	r1, #54	; 0x36
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f7ff fe66 	bl	80041ac <hts221_read_reg>
 80044e0:	60f8      	str	r0, [r7, #12]
  return ret;
 80044e2:	68fb      	ldr	r3, [r7, #12]
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3710      	adds	r7, #16
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}

080044ec <hts221_hum_adc_point_1_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, buff, 2);
 80044f6:	2302      	movs	r3, #2
 80044f8:	683a      	ldr	r2, [r7, #0]
 80044fa:	213a      	movs	r1, #58	; 0x3a
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f7ff fe55 	bl	80041ac <hts221_read_reg>
 8004502:	60f8      	str	r0, [r7, #12]
  return ret;
 8004504:	68fb      	ldr	r3, [r7, #12]
}
 8004506:	4618      	mov	r0, r3
 8004508:	3710      	adds	r7, #16
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}

0800450e <hts221_temp_adc_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800450e:	b580      	push	{r7, lr}
 8004510:	b084      	sub	sp, #16
 8004512:	af00      	add	r7, sp, #0
 8004514:	6078      	str	r0, [r7, #4]
 8004516:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, buff, 2);
 8004518:	2302      	movs	r3, #2
 800451a:	683a      	ldr	r2, [r7, #0]
 800451c:	213c      	movs	r1, #60	; 0x3c
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f7ff fe44 	bl	80041ac <hts221_read_reg>
 8004524:	60f8      	str	r0, [r7, #12]
  return ret;
 8004526:	68fb      	ldr	r3, [r7, #12]
}
 8004528:	4618      	mov	r0, r3
 800452a:	3710      	adds	r7, #16
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <hts221_temp_adc_point_1_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b084      	sub	sp, #16
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, buff, 2);
 800453a:	2302      	movs	r3, #2
 800453c:	683a      	ldr	r2, [r7, #0]
 800453e:	213e      	movs	r1, #62	; 0x3e
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f7ff fe33 	bl	80041ac <hts221_read_reg>
 8004546:	60f8      	str	r0, [r7, #12]
  return ret;
 8004548:	68fb      	ldr	r3, [r7, #12]
}
 800454a:	4618      	mov	r0, r3
 800454c:	3710      	adds	r7, #16
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
	...

08004554 <LPS22HB_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_RegisterBusIO(LPS22HB_Object_t *pObj, LPS22HB_IO_t *pIO)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HB_OK;
 800455e:	2300      	movs	r3, #0
 8004560:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d103      	bne.n	8004570 <LPS22HB_RegisterBusIO+0x1c>
  {
    ret = LPS22HB_ERROR;
 8004568:	f04f 33ff 	mov.w	r3, #4294967295
 800456c:	60fb      	str	r3, [r7, #12]
 800456e:	e04d      	b.n	800460c <LPS22HB_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	685a      	ldr	r2, [r3, #4]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	689a      	ldr	r2, [r3, #8]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	7b1a      	ldrb	r2, [r3, #12]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	691a      	ldr	r2, [r3, #16]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	695a      	ldr	r2, [r3, #20]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	699a      	ldr	r2, [r3, #24]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	4a1b      	ldr	r2, [pc, #108]	; (8004618 <LPS22HB_RegisterBusIO+0xc4>)
 80045ac:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a1a      	ldr	r2, [pc, #104]	; (800461c <LPS22HB_RegisterBusIO+0xc8>)
 80045b2:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d103      	bne.n	80045ca <LPS22HB_RegisterBusIO+0x76>
    {
      ret = LPS22HB_ERROR;
 80045c2:	f04f 33ff 	mov.w	r3, #4294967295
 80045c6:	60fb      	str	r3, [r7, #12]
 80045c8:	e020      	b.n	800460c <LPS22HB_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LPS22HB_OK)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4798      	blx	r3
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d003      	beq.n	80045de <LPS22HB_RegisterBusIO+0x8a>
    {
      ret = LPS22HB_ERROR;
 80045d6:	f04f 33ff 	mov.w	r3, #4294967295
 80045da:	60fb      	str	r3, [r7, #12]
 80045dc:	e016      	b.n	800460c <LPS22HB_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LPS22HB_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d112      	bne.n	800460c <LPS22HB_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d10d      	bne.n	800460c <LPS22HB_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 80045f0:	2301      	movs	r3, #1
 80045f2:	72fb      	strb	r3, [r7, #11]

          if (LPS22HB_Write_Reg(pObj, LPS22HB_CTRL_REG1, data) != LPS22HB_OK)
 80045f4:	7afb      	ldrb	r3, [r7, #11]
 80045f6:	461a      	mov	r2, r3
 80045f8:	2110      	movs	r1, #16
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 f9d5 	bl	80049aa <LPS22HB_Write_Reg>
 8004600:	4603      	mov	r3, r0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d002      	beq.n	800460c <LPS22HB_RegisterBusIO+0xb8>
          {
            ret = LPS22HB_ERROR;
 8004606:	f04f 33ff 	mov.w	r3, #4294967295
 800460a:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 800460c:	68fb      	ldr	r3, [r7, #12]
}
 800460e:	4618      	mov	r0, r3
 8004610:	3710      	adds	r7, #16
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	08004c63 	.word	0x08004c63
 800461c:	08004ce9 	.word	0x08004ce9

08004620 <LPS22HB_Init>:
 * @brief  Initialize the LPS22HB sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_Init(LPS22HB_Object_t *pObj)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b082      	sub	sp, #8
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800462e:	2b00      	cmp	r3, #0
 8004630:	d108      	bne.n	8004644 <LPS22HB_Init+0x24>
  {
    if (LPS22HB_Initialize(pObj) != LPS22HB_OK)
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f000 fabc 	bl	8004bb0 <LPS22HB_Initialize>
 8004638:	4603      	mov	r3, r0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d002      	beq.n	8004644 <LPS22HB_Init+0x24>
    {
      return LPS22HB_ERROR;
 800463e:	f04f 33ff 	mov.w	r3, #4294967295
 8004642:	e004      	b.n	800464e <LPS22HB_Init+0x2e>
    }
  }

  pObj->is_initialized = 1U;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LPS22HB_OK;
 800464c:	2300      	movs	r3, #0
}
 800464e:	4618      	mov	r0, r3
 8004650:	3708      	adds	r7, #8
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}

08004656 <LPS22HB_DeInit>:
 * @brief  Deinitialize the LPS22HB sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_DeInit(LPS22HB_Object_t *pObj)
{
 8004656:	b580      	push	{r7, lr}
 8004658:	b082      	sub	sp, #8
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004664:	2b01      	cmp	r3, #1
 8004666:	d111      	bne.n	800468c <LPS22HB_DeInit+0x36>
  {
    if (LPS22HB_PRESS_Disable(pObj) != LPS22HB_OK)
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f000 f877 	bl	800475c <LPS22HB_PRESS_Disable>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d002      	beq.n	800467a <LPS22HB_DeInit+0x24>
    {
      return LPS22HB_ERROR;
 8004674:	f04f 33ff 	mov.w	r3, #4294967295
 8004678:	e00d      	b.n	8004696 <LPS22HB_DeInit+0x40>
    }

    if (LPS22HB_TEMP_Disable(pObj) != LPS22HB_OK)
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f000 f913 	bl	80048a6 <LPS22HB_TEMP_Disable>
 8004680:	4603      	mov	r3, r0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d002      	beq.n	800468c <LPS22HB_DeInit+0x36>
    {
      return LPS22HB_ERROR;
 8004686:	f04f 33ff 	mov.w	r3, #4294967295
 800468a:	e004      	b.n	8004696 <LPS22HB_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LPS22HB_OK;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	3708      	adds	r7, #8
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}

0800469e <LPS22HB_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_ReadID(LPS22HB_Object_t *pObj, uint8_t *Id)
{
 800469e:	b580      	push	{r7, lr}
 80046a0:	b082      	sub	sp, #8
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]
 80046a6:	6039      	str	r1, [r7, #0]
  if (lps22hb_device_id_get(&(pObj->Ctx), Id) != LPS22HB_OK)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	331c      	adds	r3, #28
 80046ac:	6839      	ldr	r1, [r7, #0]
 80046ae:	4618      	mov	r0, r3
 80046b0:	f000 fc98 	bl	8004fe4 <lps22hb_device_id_get>
 80046b4:	4603      	mov	r3, r0
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d002      	beq.n	80046c0 <LPS22HB_ReadID+0x22>
  {
    return LPS22HB_ERROR;
 80046ba:	f04f 33ff 	mov.w	r3, #4294967295
 80046be:	e000      	b.n	80046c2 <LPS22HB_ReadID+0x24>
  }

  return LPS22HB_OK;
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3708      	adds	r7, #8
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
	...

080046cc <LPS22HB_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LPS22HB sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_GetCapabilities(LPS22HB_Object_t *pObj, LPS22HB_Capabilities_t *Capabilities)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	2200      	movs	r2, #0
 80046da:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 1;
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	2201      	movs	r2, #1
 80046e0:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	2201      	movs	r2, #1
 80046e6:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	2200      	movs	r2, #0
 80046ec:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 0.0f;
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	f04f 0200 	mov.w	r2, #0
 80046f4:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 75.0f;
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	4a05      	ldr	r2, [pc, #20]	; (8004710 <LPS22HB_GetCapabilities+0x44>)
 80046fa:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 75.0f;
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	4a04      	ldr	r2, [pc, #16]	; (8004710 <LPS22HB_GetCapabilities+0x44>)
 8004700:	60da      	str	r2, [r3, #12]
  return LPS22HB_OK;
 8004702:	2300      	movs	r3, #0
}
 8004704:	4618      	mov	r0, r3
 8004706:	370c      	adds	r7, #12
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr
 8004710:	42960000 	.word	0x42960000

08004714 <LPS22HB_PRESS_Enable>:
 * @brief  Enable the LPS22HB pressure sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_Enable(LPS22HB_Object_t *pObj)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b082      	sub	sp, #8
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004722:	2b01      	cmp	r3, #1
 8004724:	d101      	bne.n	800472a <LPS22HB_PRESS_Enable+0x16>
  {
    return LPS22HB_OK;
 8004726:	2300      	movs	r3, #0
 8004728:	e014      	b.n	8004754 <LPS22HB_PRESS_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hb_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HB_OK)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f103 021c 	add.w	r2, r3, #28
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004736:	4619      	mov	r1, r3
 8004738:	4610      	mov	r0, r2
 800473a:	f000 fbc7 	bl	8004ecc <lps22hb_data_rate_set>
 800473e:	4603      	mov	r3, r0
 8004740:	2b00      	cmp	r3, #0
 8004742:	d002      	beq.n	800474a <LPS22HB_PRESS_Enable+0x36>
  {
    return LPS22HB_ERROR;
 8004744:	f04f 33ff 	mov.w	r3, #4294967295
 8004748:	e004      	b.n	8004754 <LPS22HB_PRESS_Enable+0x40>
  }

  pObj->press_is_enabled = 1;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2201      	movs	r2, #1
 800474e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LPS22HB_OK;
 8004752:	2300      	movs	r3, #0
}
 8004754:	4618      	mov	r0, r3
 8004756:	3708      	adds	r7, #8
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <LPS22HB_PRESS_Disable>:
 * @brief  Disable the LPS22HB pressure sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_Disable(LPS22HB_Object_t *pObj)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->press_is_enabled == 0U)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800476a:	2b00      	cmp	r3, #0
 800476c:	d101      	bne.n	8004772 <LPS22HB_PRESS_Disable+0x16>
  {
    return LPS22HB_OK;
 800476e:	2300      	movs	r3, #0
 8004770:	e024      	b.n	80047bc <LPS22HB_PRESS_Disable+0x60>
  }

  /* Check if the LPS22HB temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004778:	2b00      	cmp	r3, #0
 800477a:	d11a      	bne.n	80047b2 <LPS22HB_PRESS_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f103 021c 	add.w	r2, r3, #28
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	332b      	adds	r3, #43	; 0x2b
 8004786:	4619      	mov	r1, r3
 8004788:	4610      	mov	r0, r2
 800478a:	f000 fbc5 	bl	8004f18 <lps22hb_data_rate_get>
 800478e:	4603      	mov	r3, r0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d002      	beq.n	800479a <LPS22HB_PRESS_Disable+0x3e>
    {
      return LPS22HB_ERROR;
 8004794:	f04f 33ff 	mov.w	r3, #4294967295
 8004798:	e010      	b.n	80047bc <LPS22HB_PRESS_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	331c      	adds	r3, #28
 800479e:	2100      	movs	r1, #0
 80047a0:	4618      	mov	r0, r3
 80047a2:	f000 fb93 	bl	8004ecc <lps22hb_data_rate_set>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d002      	beq.n	80047b2 <LPS22HB_PRESS_Disable+0x56>
    {
      return LPS22HB_ERROR;
 80047ac:	f04f 33ff 	mov.w	r3, #4294967295
 80047b0:	e004      	b.n	80047bc <LPS22HB_PRESS_Disable+0x60>
    }
  }

  pObj->press_is_enabled = 0;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LPS22HB_OK;
 80047ba:	2300      	movs	r3, #0
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3708      	adds	r7, #8
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <LPS22HB_PRESS_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_GetOutputDataRate(LPS22HB_Object_t *pObj, float *Odr)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
  return LPS22HB_GetOutputDataRate(pObj, Odr);
 80047ce:	6839      	ldr	r1, [r7, #0]
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f000 f905 	bl	80049e0 <LPS22HB_GetOutputDataRate>
 80047d6:	4603      	mov	r3, r0
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3708      	adds	r7, #8
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}

080047e0 <LPS22HB_PRESS_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_SetOutputDataRate(LPS22HB_Object_t *pObj, float Odr)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b082      	sub	sp, #8
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	6039      	str	r1, [r7, #0]
  /* Check if the component is enabled */
  if (pObj->press_is_enabled == 1U)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d105      	bne.n	8004800 <LPS22HB_PRESS_SetOutputDataRate+0x20>
  {
    return LPS22HB_SetOutputDataRate_When_Enabled(pObj, Odr);
 80047f4:	6839      	ldr	r1, [r7, #0]
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f000 f946 	bl	8004a88 <LPS22HB_SetOutputDataRate_When_Enabled>
 80047fc:	4603      	mov	r3, r0
 80047fe:	e004      	b.n	800480a <LPS22HB_PRESS_SetOutputDataRate+0x2a>
  }
  else
  {
    return LPS22HB_SetOutputDataRate_When_Disabled(pObj, Odr);
 8004800:	6839      	ldr	r1, [r7, #0]
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f000 f996 	bl	8004b34 <LPS22HB_SetOutputDataRate_When_Disabled>
 8004808:	4603      	mov	r3, r0
  }
}
 800480a:	4618      	mov	r0, r3
 800480c:	3708      	adds	r7, #8
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}

08004812 <LPS22HB_PRESS_GetPressure>:
 * @param  pObj the device pObj
 * @param  Value pointer where the pressure value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_GetPressure(LPS22HB_Object_t *pObj, float *Value)
{
 8004812:	b580      	push	{r7, lr}
 8004814:	b084      	sub	sp, #16
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
 800481a:	6039      	str	r1, [r7, #0]
  lps22hb_axis1bit32_t data_raw_pressure;

  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 800481c:	f107 030c 	add.w	r3, r7, #12
 8004820:	2204      	movs	r2, #4
 8004822:	2100      	movs	r1, #0
 8004824:	4618      	mov	r0, r3
 8004826:	f015 fef6 	bl	801a616 <memset>
  if (lps22hb_pressure_raw_get(&(pObj->Ctx), data_raw_pressure.u8bit) != LPS22HB_OK)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	331c      	adds	r3, #28
 800482e:	f107 020c 	add.w	r2, r7, #12
 8004832:	4611      	mov	r1, r2
 8004834:	4618      	mov	r0, r3
 8004836:	f000 fbb3 	bl	8004fa0 <lps22hb_pressure_raw_get>
 800483a:	4603      	mov	r3, r0
 800483c:	2b00      	cmp	r3, #0
 800483e:	d002      	beq.n	8004846 <LPS22HB_PRESS_GetPressure+0x34>
  {
    return LPS22HB_ERROR;
 8004840:	f04f 33ff 	mov.w	r3, #4294967295
 8004844:	e007      	b.n	8004856 <LPS22HB_PRESS_GetPressure+0x44>
  }

  *Value = lps22hb_from_lsb_to_hpa(data_raw_pressure.i32bit);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	4618      	mov	r0, r3
 800484a:	f000 fac1 	bl	8004dd0 <lps22hb_from_lsb_to_hpa>
 800484e:	4602      	mov	r2, r0
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	601a      	str	r2, [r3, #0]

  return LPS22HB_OK;
 8004854:	2300      	movs	r3, #0
}
 8004856:	4618      	mov	r0, r3
 8004858:	3710      	adds	r7, #16
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}

0800485e <LPS22HB_TEMP_Enable>:
 * @brief  Enable the LPS22HB temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_Enable(LPS22HB_Object_t *pObj)
{
 800485e:	b580      	push	{r7, lr}
 8004860:	b082      	sub	sp, #8
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800486c:	2b01      	cmp	r3, #1
 800486e:	d101      	bne.n	8004874 <LPS22HB_TEMP_Enable+0x16>
  {
    return LPS22HB_OK;
 8004870:	2300      	movs	r3, #0
 8004872:	e014      	b.n	800489e <LPS22HB_TEMP_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hb_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HB_OK)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f103 021c 	add.w	r2, r3, #28
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004880:	4619      	mov	r1, r3
 8004882:	4610      	mov	r0, r2
 8004884:	f000 fb22 	bl	8004ecc <lps22hb_data_rate_set>
 8004888:	4603      	mov	r3, r0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d002      	beq.n	8004894 <LPS22HB_TEMP_Enable+0x36>
  {
    return LPS22HB_ERROR;
 800488e:	f04f 33ff 	mov.w	r3, #4294967295
 8004892:	e004      	b.n	800489e <LPS22HB_TEMP_Enable+0x40>
  }

  pObj->temp_is_enabled = 1;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LPS22HB_OK;
 800489c:	2300      	movs	r3, #0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3708      	adds	r7, #8
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}

080048a6 <LPS22HB_TEMP_Disable>:
 * @brief  Disable the LPS22HB temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_Disable(LPS22HB_Object_t *pObj)
{
 80048a6:	b580      	push	{r7, lr}
 80048a8:	b082      	sub	sp, #8
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d101      	bne.n	80048bc <LPS22HB_TEMP_Disable+0x16>
  {
    return LPS22HB_OK;
 80048b8:	2300      	movs	r3, #0
 80048ba:	e024      	b.n	8004906 <LPS22HB_TEMP_Disable+0x60>
  }

  /* Check if the LPS22HB pressure sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->press_is_enabled == 0U)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d11a      	bne.n	80048fc <LPS22HB_TEMP_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f103 021c 	add.w	r2, r3, #28
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	332b      	adds	r3, #43	; 0x2b
 80048d0:	4619      	mov	r1, r3
 80048d2:	4610      	mov	r0, r2
 80048d4:	f000 fb20 	bl	8004f18 <lps22hb_data_rate_get>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d002      	beq.n	80048e4 <LPS22HB_TEMP_Disable+0x3e>
    {
      return LPS22HB_ERROR;
 80048de:	f04f 33ff 	mov.w	r3, #4294967295
 80048e2:	e010      	b.n	8004906 <LPS22HB_TEMP_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	331c      	adds	r3, #28
 80048e8:	2100      	movs	r1, #0
 80048ea:	4618      	mov	r0, r3
 80048ec:	f000 faee 	bl	8004ecc <lps22hb_data_rate_set>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d002      	beq.n	80048fc <LPS22HB_TEMP_Disable+0x56>
    {
      return LPS22HB_ERROR;
 80048f6:	f04f 33ff 	mov.w	r3, #4294967295
 80048fa:	e004      	b.n	8004906 <LPS22HB_TEMP_Disable+0x60>
    }
  }

  pObj->temp_is_enabled = 0;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LPS22HB_OK;
 8004904:	2300      	movs	r3, #0
}
 8004906:	4618      	mov	r0, r3
 8004908:	3708      	adds	r7, #8
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}

0800490e <LPS22HB_TEMP_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_GetOutputDataRate(LPS22HB_Object_t *pObj, float *Odr)
{
 800490e:	b580      	push	{r7, lr}
 8004910:	b082      	sub	sp, #8
 8004912:	af00      	add	r7, sp, #0
 8004914:	6078      	str	r0, [r7, #4]
 8004916:	6039      	str	r1, [r7, #0]
  return LPS22HB_GetOutputDataRate(pObj, Odr);
 8004918:	6839      	ldr	r1, [r7, #0]
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f000 f860 	bl	80049e0 <LPS22HB_GetOutputDataRate>
 8004920:	4603      	mov	r3, r0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3708      	adds	r7, #8
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}

0800492a <LPS22HB_TEMP_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_SetOutputDataRate(LPS22HB_Object_t *pObj, float Odr)
{
 800492a:	b580      	push	{r7, lr}
 800492c:	b082      	sub	sp, #8
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
 8004932:	6039      	str	r1, [r7, #0]
  /* Check if the component is enabled */
  if (pObj->temp_is_enabled == 1U)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800493a:	2b01      	cmp	r3, #1
 800493c:	d105      	bne.n	800494a <LPS22HB_TEMP_SetOutputDataRate+0x20>
  {
    return LPS22HB_SetOutputDataRate_When_Enabled(pObj, Odr);
 800493e:	6839      	ldr	r1, [r7, #0]
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f000 f8a1 	bl	8004a88 <LPS22HB_SetOutputDataRate_When_Enabled>
 8004946:	4603      	mov	r3, r0
 8004948:	e004      	b.n	8004954 <LPS22HB_TEMP_SetOutputDataRate+0x2a>
  }
  else
  {
    return LPS22HB_SetOutputDataRate_When_Disabled(pObj, Odr);
 800494a:	6839      	ldr	r1, [r7, #0]
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f000 f8f1 	bl	8004b34 <LPS22HB_SetOutputDataRate_When_Disabled>
 8004952:	4603      	mov	r3, r0
  }
}
 8004954:	4618      	mov	r0, r3
 8004956:	3708      	adds	r7, #8
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}

0800495c <LPS22HB_TEMP_GetTemperature>:
 * @param  pObj the device pObj
 * @param  Value pointer where the temperature value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_GetTemperature(LPS22HB_Object_t *pObj, float *Value)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	6039      	str	r1, [r7, #0]
  lps22hb_axis1bit16_t data_raw_temperature;

  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 8004966:	f107 030c 	add.w	r3, r7, #12
 800496a:	2202      	movs	r2, #2
 800496c:	2100      	movs	r1, #0
 800496e:	4618      	mov	r0, r3
 8004970:	f015 fe51 	bl	801a616 <memset>
  if (lps22hb_temperature_raw_get(&(pObj->Ctx), data_raw_temperature.u8bit) != LPS22HB_OK)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	331c      	adds	r3, #28
 8004978:	f107 020c 	add.w	r2, r7, #12
 800497c:	4611      	mov	r1, r2
 800497e:	4618      	mov	r0, r3
 8004980:	f000 fb1f 	bl	8004fc2 <lps22hb_temperature_raw_get>
 8004984:	4603      	mov	r3, r0
 8004986:	2b00      	cmp	r3, #0
 8004988:	d002      	beq.n	8004990 <LPS22HB_TEMP_GetTemperature+0x34>
  {
    return LPS22HB_ERROR;
 800498a:	f04f 33ff 	mov.w	r3, #4294967295
 800498e:	e008      	b.n	80049a2 <LPS22HB_TEMP_GetTemperature+0x46>
  }

  *Value = lps22hb_from_lsb_to_degc(data_raw_temperature.i16bit);
 8004990:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004994:	4618      	mov	r0, r3
 8004996:	f000 fa33 	bl	8004e00 <lps22hb_from_lsb_to_degc>
 800499a:	4602      	mov	r2, r0
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	601a      	str	r2, [r3, #0]

  return LPS22HB_OK;
 80049a0:	2300      	movs	r3, #0
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3710      	adds	r7, #16
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}

080049aa <LPS22HB_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_Write_Reg(LPS22HB_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80049aa:	b580      	push	{r7, lr}
 80049ac:	b082      	sub	sp, #8
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	6078      	str	r0, [r7, #4]
 80049b2:	460b      	mov	r3, r1
 80049b4:	70fb      	strb	r3, [r7, #3]
 80049b6:	4613      	mov	r3, r2
 80049b8:	70bb      	strb	r3, [r7, #2]
  if (lps22hb_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HB_OK)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f103 001c 	add.w	r0, r3, #28
 80049c0:	1cba      	adds	r2, r7, #2
 80049c2:	78f9      	ldrb	r1, [r7, #3]
 80049c4:	2301      	movs	r3, #1
 80049c6:	f000 f9ea 	bl	8004d9e <lps22hb_write_reg>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d002      	beq.n	80049d6 <LPS22HB_Write_Reg+0x2c>
  {
    return LPS22HB_ERROR;
 80049d0:	f04f 33ff 	mov.w	r3, #4294967295
 80049d4:	e000      	b.n	80049d8 <LPS22HB_Write_Reg+0x2e>
  }

  return LPS22HB_OK;
 80049d6:	2300      	movs	r3, #0
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3708      	adds	r7, #8
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <LPS22HB_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_GetOutputDataRate(LPS22HB_Object_t *pObj, float *Odr)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HB_OK;
 80049ea:	2300      	movs	r3, #0
 80049ec:	60fb      	str	r3, [r7, #12]
  lps22hb_odr_t odr_low_level;

  if (lps22hb_data_rate_get(&(pObj->Ctx), &odr_low_level) != LPS22HB_OK)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	331c      	adds	r3, #28
 80049f2:	f107 020b 	add.w	r2, r7, #11
 80049f6:	4611      	mov	r1, r2
 80049f8:	4618      	mov	r0, r3
 80049fa:	f000 fa8d 	bl	8004f18 <lps22hb_data_rate_get>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d002      	beq.n	8004a0a <LPS22HB_GetOutputDataRate+0x2a>
  {
    return LPS22HB_ERROR;
 8004a04:	f04f 33ff 	mov.w	r3, #4294967295
 8004a08:	e031      	b.n	8004a6e <LPS22HB_GetOutputDataRate+0x8e>
  }

  switch (odr_low_level)
 8004a0a:	7afb      	ldrb	r3, [r7, #11]
 8004a0c:	2b05      	cmp	r3, #5
 8004a0e:	d829      	bhi.n	8004a64 <LPS22HB_GetOutputDataRate+0x84>
 8004a10:	a201      	add	r2, pc, #4	; (adr r2, 8004a18 <LPS22HB_GetOutputDataRate+0x38>)
 8004a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a16:	bf00      	nop
 8004a18:	08004a31 	.word	0x08004a31
 8004a1c:	08004a3b 	.word	0x08004a3b
 8004a20:	08004a45 	.word	0x08004a45
 8004a24:	08004a4d 	.word	0x08004a4d
 8004a28:	08004a55 	.word	0x08004a55
 8004a2c:	08004a5d 	.word	0x08004a5d
  {
    case LPS22HB_POWER_DOWN:
      *Odr = 0.0f;
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	f04f 0200 	mov.w	r2, #0
 8004a36:	601a      	str	r2, [r3, #0]
      break;
 8004a38:	e018      	b.n	8004a6c <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_1_Hz:
      *Odr = 1.0f;
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004a40:	601a      	str	r2, [r3, #0]
      break;
 8004a42:	e013      	b.n	8004a6c <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_10_Hz:
      *Odr = 10.0f;
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	4a0c      	ldr	r2, [pc, #48]	; (8004a78 <LPS22HB_GetOutputDataRate+0x98>)
 8004a48:	601a      	str	r2, [r3, #0]
      break;
 8004a4a:	e00f      	b.n	8004a6c <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_25_Hz:
      *Odr = 25.0f;
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	4a0b      	ldr	r2, [pc, #44]	; (8004a7c <LPS22HB_GetOutputDataRate+0x9c>)
 8004a50:	601a      	str	r2, [r3, #0]
      break;
 8004a52:	e00b      	b.n	8004a6c <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_50_Hz:
      *Odr = 50.0f;
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	4a0a      	ldr	r2, [pc, #40]	; (8004a80 <LPS22HB_GetOutputDataRate+0xa0>)
 8004a58:	601a      	str	r2, [r3, #0]
      break;
 8004a5a:	e007      	b.n	8004a6c <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_75_Hz:
      *Odr = 75.0f;
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	4a09      	ldr	r2, [pc, #36]	; (8004a84 <LPS22HB_GetOutputDataRate+0xa4>)
 8004a60:	601a      	str	r2, [r3, #0]
      break;
 8004a62:	e003      	b.n	8004a6c <LPS22HB_GetOutputDataRate+0x8c>

    default:
      ret = LPS22HB_ERROR;
 8004a64:	f04f 33ff 	mov.w	r3, #4294967295
 8004a68:	60fb      	str	r3, [r7, #12]
      break;
 8004a6a:	bf00      	nop
  }

  return ret;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3710      	adds	r7, #16
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	41200000 	.word	0x41200000
 8004a7c:	41c80000 	.word	0x41c80000
 8004a80:	42480000 	.word	0x42480000
 8004a84:	42960000 	.word	0x42960000

08004a88 <LPS22HB_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_SetOutputDataRate_When_Enabled(LPS22HB_Object_t *pObj, float Odr)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	6039      	str	r1, [r7, #0]
  lps22hb_odr_t new_odr;

  new_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
            : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 8004a92:	edd7 7a00 	vldr	s15, [r7]
 8004a96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004aa2:	d801      	bhi.n	8004aa8 <LPS22HB_SetOutputDataRate_When_Enabled+0x20>
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e021      	b.n	8004aec <LPS22HB_SetOutputDataRate_When_Enabled+0x64>
 8004aa8:	edd7 7a00 	vldr	s15, [r7]
 8004aac:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004ab0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ab8:	d801      	bhi.n	8004abe <LPS22HB_SetOutputDataRate_When_Enabled+0x36>
 8004aba:	2302      	movs	r3, #2
 8004abc:	e016      	b.n	8004aec <LPS22HB_SetOutputDataRate_When_Enabled+0x64>
 8004abe:	edd7 7a00 	vldr	s15, [r7]
 8004ac2:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8004ac6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004aca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ace:	d801      	bhi.n	8004ad4 <LPS22HB_SetOutputDataRate_When_Enabled+0x4c>
 8004ad0:	2303      	movs	r3, #3
 8004ad2:	e00b      	b.n	8004aec <LPS22HB_SetOutputDataRate_When_Enabled+0x64>
 8004ad4:	edd7 7a00 	vldr	s15, [r7]
 8004ad8:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8004b30 <LPS22HB_SetOutputDataRate_When_Enabled+0xa8>
 8004adc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ae4:	d801      	bhi.n	8004aea <LPS22HB_SetOutputDataRate_When_Enabled+0x62>
 8004ae6:	2304      	movs	r3, #4
 8004ae8:	e000      	b.n	8004aec <LPS22HB_SetOutputDataRate_When_Enabled+0x64>
 8004aea:	2305      	movs	r3, #5
  new_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
 8004aec:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 25.0f) ? LPS22HB_ODR_25_Hz
            : (Odr <= 50.0f) ? LPS22HB_ODR_50_Hz
            :                  LPS22HB_ODR_75_Hz;

  if (lps22hb_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HB_OK)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	331c      	adds	r3, #28
 8004af2:	7bfa      	ldrb	r2, [r7, #15]
 8004af4:	4611      	mov	r1, r2
 8004af6:	4618      	mov	r0, r3
 8004af8:	f000 f9e8 	bl	8004ecc <lps22hb_data_rate_set>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d002      	beq.n	8004b08 <LPS22HB_SetOutputDataRate_When_Enabled+0x80>
  {
    return LPS22HB_ERROR;
 8004b02:	f04f 33ff 	mov.w	r3, #4294967295
 8004b06:	e00f      	b.n	8004b28 <LPS22HB_SetOutputDataRate_When_Enabled+0xa0>
  }

  if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f103 021c 	add.w	r2, r3, #28
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	332b      	adds	r3, #43	; 0x2b
 8004b12:	4619      	mov	r1, r3
 8004b14:	4610      	mov	r0, r2
 8004b16:	f000 f9ff 	bl	8004f18 <lps22hb_data_rate_get>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d002      	beq.n	8004b26 <LPS22HB_SetOutputDataRate_When_Enabled+0x9e>
  {
    return LPS22HB_ERROR;
 8004b20:	f04f 33ff 	mov.w	r3, #4294967295
 8004b24:	e000      	b.n	8004b28 <LPS22HB_SetOutputDataRate_When_Enabled+0xa0>
  }

  return LPS22HB_OK;
 8004b26:	2300      	movs	r3, #0
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3710      	adds	r7, #16
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	42480000 	.word	0x42480000

08004b34 <LPS22HB_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_SetOutputDataRate_When_Disabled(LPS22HB_Object_t *pObj, float Odr)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	6039      	str	r1, [r7, #0]
  pObj->last_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
                   : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 8004b3e:	edd7 7a00 	vldr	s15, [r7]
 8004b42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b4e:	d801      	bhi.n	8004b54 <LPS22HB_SetOutputDataRate_When_Disabled+0x20>
 8004b50:	2301      	movs	r3, #1
 8004b52:	e021      	b.n	8004b98 <LPS22HB_SetOutputDataRate_When_Disabled+0x64>
 8004b54:	edd7 7a00 	vldr	s15, [r7]
 8004b58:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004b5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b64:	d801      	bhi.n	8004b6a <LPS22HB_SetOutputDataRate_When_Disabled+0x36>
 8004b66:	2302      	movs	r3, #2
 8004b68:	e016      	b.n	8004b98 <LPS22HB_SetOutputDataRate_When_Disabled+0x64>
 8004b6a:	edd7 7a00 	vldr	s15, [r7]
 8004b6e:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8004b72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b7a:	d801      	bhi.n	8004b80 <LPS22HB_SetOutputDataRate_When_Disabled+0x4c>
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	e00b      	b.n	8004b98 <LPS22HB_SetOutputDataRate_When_Disabled+0x64>
 8004b80:	edd7 7a00 	vldr	s15, [r7]
 8004b84:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8004bac <LPS22HB_SetOutputDataRate_When_Disabled+0x78>
 8004b88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b90:	d801      	bhi.n	8004b96 <LPS22HB_SetOutputDataRate_When_Disabled+0x62>
 8004b92:	2304      	movs	r3, #4
 8004b94:	e000      	b.n	8004b98 <LPS22HB_SetOutputDataRate_When_Disabled+0x64>
 8004b96:	2305      	movs	r3, #5
  pObj->last_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                   : (Odr <= 25.0f) ? LPS22HB_ODR_25_Hz
                   : (Odr <= 50.0f) ? LPS22HB_ODR_50_Hz
                   :                  LPS22HB_ODR_75_Hz;

  return LPS22HB_OK;
 8004b9e:	2300      	movs	r3, #0
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	370c      	adds	r7, #12
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr
 8004bac:	42480000 	.word	0x42480000

08004bb0 <LPS22HB_Initialize>:
 * @brief  Initialize the LPS22HB sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_Initialize(LPS22HB_Object_t *pObj)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b082      	sub	sp, #8
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  /* Set Power mode */
  if (lps22hb_low_power_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	331c      	adds	r3, #28
 8004bbc:	2101      	movs	r1, #1
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f000 fa21 	bl	8005006 <lps22hb_low_power_set>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d002      	beq.n	8004bd0 <LPS22HB_Initialize+0x20>
  {
    return LPS22HB_ERROR;
 8004bca:	f04f 33ff 	mov.w	r3, #4294967295
 8004bce:	e044      	b.n	8004c5a <LPS22HB_Initialize+0xaa>
  }

  /* Power down the device */
  if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	331c      	adds	r3, #28
 8004bd4:	2100      	movs	r1, #0
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f000 f978 	bl	8004ecc <lps22hb_data_rate_set>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d002      	beq.n	8004be8 <LPS22HB_Initialize+0x38>
  {
    return LPS22HB_ERROR;
 8004be2:	f04f 33ff 	mov.w	r3, #4294967295
 8004be6:	e038      	b.n	8004c5a <LPS22HB_Initialize+0xaa>
  }

  /* Disable low-pass filter on LPS22HB pressure data */
  if (lps22hb_low_pass_filter_mode_set(&(pObj->Ctx), LPS22HB_LPF_ODR_DIV_9) != LPS22HB_OK)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	331c      	adds	r3, #28
 8004bec:	2102      	movs	r1, #2
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f000 f946 	bl	8004e80 <lps22hb_low_pass_filter_mode_set>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d002      	beq.n	8004c00 <LPS22HB_Initialize+0x50>
  {
    return LPS22HB_ERROR;
 8004bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8004bfe:	e02c      	b.n	8004c5a <LPS22HB_Initialize+0xaa>
  }

  if (lps22hb_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	331c      	adds	r3, #28
 8004c04:	2101      	movs	r1, #1
 8004c06:	4618      	mov	r0, r3
 8004c08:	f000 f914 	bl	8004e34 <lps22hb_block_data_update_set>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d002      	beq.n	8004c18 <LPS22HB_Initialize+0x68>
  {
    return LPS22HB_ERROR;
 8004c12:	f04f 33ff 	mov.w	r3, #4294967295
 8004c16:	e020      	b.n	8004c5a <LPS22HB_Initialize+0xaa>
  }

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d10b      	bne.n	8004c38 <LPS22HB_Initialize+0x88>
  {
    if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_DISABLE) != LPS22HB_OK)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	331c      	adds	r3, #28
 8004c24:	2100      	movs	r1, #0
 8004c26:	4618      	mov	r0, r3
 8004c28:	f000 fa13 	bl	8005052 <lps22hb_auto_add_inc_set>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00e      	beq.n	8004c50 <LPS22HB_Initialize+0xa0>
    {
      return LPS22HB_ERROR;
 8004c32:	f04f 33ff 	mov.w	r3, #4294967295
 8004c36:	e010      	b.n	8004c5a <LPS22HB_Initialize+0xaa>
    }
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	331c      	adds	r3, #28
 8004c3c:	2101      	movs	r1, #1
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f000 fa07 	bl	8005052 <lps22hb_auto_add_inc_set>
 8004c44:	4603      	mov	r3, r0
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d002      	beq.n	8004c50 <LPS22HB_Initialize+0xa0>
    {
      return LPS22HB_ERROR;
 8004c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c4e:	e004      	b.n	8004c5a <LPS22HB_Initialize+0xaa>
    }
  }

  pObj->last_odr = LPS22HB_ODR_25_Hz;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2203      	movs	r2, #3
 8004c54:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  return LPS22HB_OK;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3708      	adds	r7, #8
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}

08004c62 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004c62:	b590      	push	{r4, r7, lr}
 8004c64:	b089      	sub	sp, #36	; 0x24
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	60f8      	str	r0, [r7, #12]
 8004c6a:	607a      	str	r2, [r7, #4]
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	460b      	mov	r3, r1
 8004c70:	72fb      	strb	r3, [r7, #11]
 8004c72:	4613      	mov	r3, r2
 8004c74:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = LPS22HB_OK;
 8004c76:	2300      	movs	r3, #0
 8004c78:	61bb      	str	r3, [r7, #24]
  LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d121      	bne.n	8004cca <ReadRegWrap+0x68>
  {
    for (i = 0; i < Length; i++)
 8004c86:	2300      	movs	r3, #0
 8004c88:	83fb      	strh	r3, [r7, #30]
 8004c8a:	e018      	b.n	8004cbe <ReadRegWrap+0x5c>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	695c      	ldr	r4, [r3, #20]
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	7b1b      	ldrb	r3, [r3, #12]
 8004c94:	b298      	uxth	r0, r3
 8004c96:	7afb      	ldrb	r3, [r7, #11]
 8004c98:	b29a      	uxth	r2, r3
 8004c9a:	8bfb      	ldrh	r3, [r7, #30]
 8004c9c:	4413      	add	r3, r2
 8004c9e:	b299      	uxth	r1, r3
 8004ca0:	8bfb      	ldrh	r3, [r7, #30]
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	441a      	add	r2, r3
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	47a0      	blx	r4
 8004caa:	61b8      	str	r0, [r7, #24]
      if (ret != LPS22HB_OK)
 8004cac:	69bb      	ldr	r3, [r7, #24]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d002      	beq.n	8004cb8 <ReadRegWrap+0x56>
      {
        return LPS22HB_ERROR;
 8004cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8004cb6:	e013      	b.n	8004ce0 <ReadRegWrap+0x7e>
    for (i = 0; i < Length; i++)
 8004cb8:	8bfb      	ldrh	r3, [r7, #30]
 8004cba:	3301      	adds	r3, #1
 8004cbc:	83fb      	strh	r3, [r7, #30]
 8004cbe:	8bfa      	ldrh	r2, [r7, #30]
 8004cc0:	893b      	ldrh	r3, [r7, #8]
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d3e2      	bcc.n	8004c8c <ReadRegWrap+0x2a>
      }
    }

    return ret;
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	e00a      	b.n	8004ce0 <ReadRegWrap+0x7e>
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	695c      	ldr	r4, [r3, #20]
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	7b1b      	ldrb	r3, [r3, #12]
 8004cd2:	b298      	uxth	r0, r3
 8004cd4:	7afb      	ldrb	r3, [r7, #11]
 8004cd6:	b299      	uxth	r1, r3
 8004cd8:	893b      	ldrh	r3, [r7, #8]
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	47a0      	blx	r4
 8004cde:	4603      	mov	r3, r0
  }
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3724      	adds	r7, #36	; 0x24
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd90      	pop	{r4, r7, pc}

08004ce8 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004ce8:	b590      	push	{r4, r7, lr}
 8004cea:	b089      	sub	sp, #36	; 0x24
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	607a      	str	r2, [r7, #4]
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	460b      	mov	r3, r1
 8004cf6:	72fb      	strb	r3, [r7, #11]
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = LPS22HB_OK;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	61bb      	str	r3, [r7, #24]
  LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d121      	bne.n	8004d50 <WriteRegWrap+0x68>
  {
    for (i = 0; i < Length; i++)
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	83fb      	strh	r3, [r7, #30]
 8004d10:	e018      	b.n	8004d44 <WriteRegWrap+0x5c>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	691c      	ldr	r4, [r3, #16]
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	7b1b      	ldrb	r3, [r3, #12]
 8004d1a:	b298      	uxth	r0, r3
 8004d1c:	7afb      	ldrb	r3, [r7, #11]
 8004d1e:	b29a      	uxth	r2, r3
 8004d20:	8bfb      	ldrh	r3, [r7, #30]
 8004d22:	4413      	add	r3, r2
 8004d24:	b299      	uxth	r1, r3
 8004d26:	8bfb      	ldrh	r3, [r7, #30]
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	441a      	add	r2, r3
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	47a0      	blx	r4
 8004d30:	61b8      	str	r0, [r7, #24]
      if (ret != LPS22HB_OK)
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d002      	beq.n	8004d3e <WriteRegWrap+0x56>
      {
        return LPS22HB_ERROR;
 8004d38:	f04f 33ff 	mov.w	r3, #4294967295
 8004d3c:	e013      	b.n	8004d66 <WriteRegWrap+0x7e>
    for (i = 0; i < Length; i++)
 8004d3e:	8bfb      	ldrh	r3, [r7, #30]
 8004d40:	3301      	adds	r3, #1
 8004d42:	83fb      	strh	r3, [r7, #30]
 8004d44:	8bfa      	ldrh	r2, [r7, #30]
 8004d46:	893b      	ldrh	r3, [r7, #8]
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d3e2      	bcc.n	8004d12 <WriteRegWrap+0x2a>
      }
    }

    return ret;
 8004d4c:	69bb      	ldr	r3, [r7, #24]
 8004d4e:	e00a      	b.n	8004d66 <WriteRegWrap+0x7e>
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	691c      	ldr	r4, [r3, #16]
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	7b1b      	ldrb	r3, [r3, #12]
 8004d58:	b298      	uxth	r0, r3
 8004d5a:	7afb      	ldrb	r3, [r7, #11]
 8004d5c:	b299      	uxth	r1, r3
 8004d5e:	893b      	ldrh	r3, [r7, #8]
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	47a0      	blx	r4
 8004d64:	4603      	mov	r3, r0
  }
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3724      	adds	r7, #36	; 0x24
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd90      	pop	{r4, r7, pc}

08004d6e <lps22hb_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hb_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 8004d6e:	b590      	push	{r4, r7, lr}
 8004d70:	b087      	sub	sp, #28
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	60f8      	str	r0, [r7, #12]
 8004d76:	607a      	str	r2, [r7, #4]
 8004d78:	461a      	mov	r2, r3
 8004d7a:	460b      	mov	r3, r1
 8004d7c:	72fb      	strb	r3, [r7, #11]
 8004d7e:	4613      	mov	r3, r2
 8004d80:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	685c      	ldr	r4, [r3, #4]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6898      	ldr	r0, [r3, #8]
 8004d8a:	893b      	ldrh	r3, [r7, #8]
 8004d8c:	7af9      	ldrb	r1, [r7, #11]
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	47a0      	blx	r4
 8004d92:	6178      	str	r0, [r7, #20]
  return ret;
 8004d94:	697b      	ldr	r3, [r7, #20]
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	371c      	adds	r7, #28
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd90      	pop	{r4, r7, pc}

08004d9e <lps22hb_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hb_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 8004d9e:	b590      	push	{r4, r7, lr}
 8004da0:	b087      	sub	sp, #28
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	60f8      	str	r0, [r7, #12]
 8004da6:	607a      	str	r2, [r7, #4]
 8004da8:	461a      	mov	r2, r3
 8004daa:	460b      	mov	r3, r1
 8004dac:	72fb      	strb	r3, [r7, #11]
 8004dae:	4613      	mov	r3, r2
 8004db0:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681c      	ldr	r4, [r3, #0]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	6898      	ldr	r0, [r3, #8]
 8004dba:	893b      	ldrh	r3, [r7, #8]
 8004dbc:	7af9      	ldrb	r1, [r7, #11]
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	47a0      	blx	r4
 8004dc2:	6178      	str	r0, [r7, #20]
  return ret;
 8004dc4:	697b      	ldr	r3, [r7, #20]
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	371c      	adds	r7, #28
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd90      	pop	{r4, r7, pc}
	...

08004dd0 <lps22hb_from_lsb_to_hpa>:
  * @{
  *
  */

float_t lps22hb_from_lsb_to_hpa(int32_t lsb)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  return ( (float_t)lsb / 4096.0f );
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	ee07 3a90 	vmov	s15, r3
 8004dde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004de2:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004dfc <lps22hb_from_lsb_to_hpa+0x2c>
 8004de6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004dea:	ee16 3a90 	vmov	r3, s13
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	370c      	adds	r7, #12
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr
 8004dfa:	bf00      	nop
 8004dfc:	45800000 	.word	0x45800000

08004e00 <lps22hb_from_lsb_to_degc>:

float_t lps22hb_from_lsb_to_degc(int16_t lsb)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b083      	sub	sp, #12
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	4603      	mov	r3, r0
 8004e08:	80fb      	strh	r3, [r7, #6]
  return ( (float_t)lsb / 100.0f );
 8004e0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e0e:	ee07 3a90 	vmov	s15, r3
 8004e12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e16:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004e30 <lps22hb_from_lsb_to_degc+0x30>
 8004e1a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004e1e:	ee16 3a90 	vmov	r3, s13
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	370c      	adds	r7, #12
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr
 8004e2e:	bf00      	nop
 8004e30:	42c80000 	.word	0x42c80000

08004e34 <lps22hb_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	460b      	mov	r3, r1
 8004e3e:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8004e40:	f107 0208 	add.w	r2, r7, #8
 8004e44:	2301      	movs	r3, #1
 8004e46:	2110      	movs	r1, #16
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f7ff ff90 	bl	8004d6e <lps22hb_read_reg>
 8004e4e:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d10f      	bne.n	8004e76 <lps22hb_block_data_update_set+0x42>
    ctrl_reg1.bdu = val;
 8004e56:	78fb      	ldrb	r3, [r7, #3]
 8004e58:	f003 0301 	and.w	r3, r3, #1
 8004e5c:	b2da      	uxtb	r2, r3
 8004e5e:	7a3b      	ldrb	r3, [r7, #8]
 8004e60:	f362 0341 	bfi	r3, r2, #1, #1
 8004e64:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8004e66:	f107 0208 	add.w	r2, r7, #8
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	2110      	movs	r1, #16
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f7ff ff95 	bl	8004d9e <lps22hb_write_reg>
 8004e74:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8004e76:	68fb      	ldr	r3, [r7, #12]
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3710      	adds	r7, #16
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <lps22hb_low_pass_filter_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_low_pass_filter_mode_set(stmdev_ctx_t *ctx,
                                          lps22hb_lpfp_t val)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b084      	sub	sp, #16
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	460b      	mov	r3, r1
 8004e8a:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8004e8c:	f107 0208 	add.w	r2, r7, #8
 8004e90:	2301      	movs	r3, #1
 8004e92:	2110      	movs	r1, #16
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f7ff ff6a 	bl	8004d6e <lps22hb_read_reg>
 8004e9a:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d10f      	bne.n	8004ec2 <lps22hb_low_pass_filter_mode_set+0x42>
    ctrl_reg1.lpfp = (uint8_t)val;
 8004ea2:	78fb      	ldrb	r3, [r7, #3]
 8004ea4:	f003 0303 	and.w	r3, r3, #3
 8004ea8:	b2da      	uxtb	r2, r3
 8004eaa:	7a3b      	ldrb	r3, [r7, #8]
 8004eac:	f362 0383 	bfi	r3, r2, #2, #2
 8004eb0:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8004eb2:	f107 0208 	add.w	r2, r7, #8
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	2110      	movs	r1, #16
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f7ff ff6f 	bl	8004d9e <lps22hb_write_reg>
 8004ec0:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3710      	adds	r7, #16
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}

08004ecc <lps22hb_data_rate_set>:
  * @param  val    Change the values of odr in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_data_rate_set(stmdev_ctx_t *ctx, lps22hb_odr_t val)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	460b      	mov	r3, r1
 8004ed6:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8004ed8:	f107 0208 	add.w	r2, r7, #8
 8004edc:	2301      	movs	r3, #1
 8004ede:	2110      	movs	r1, #16
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f7ff ff44 	bl	8004d6e <lps22hb_read_reg>
 8004ee6:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d10f      	bne.n	8004f0e <lps22hb_data_rate_set+0x42>
    ctrl_reg1.odr = (uint8_t)val;
 8004eee:	78fb      	ldrb	r3, [r7, #3]
 8004ef0:	f003 0307 	and.w	r3, r3, #7
 8004ef4:	b2da      	uxtb	r2, r3
 8004ef6:	7a3b      	ldrb	r3, [r7, #8]
 8004ef8:	f362 1306 	bfi	r3, r2, #4, #3
 8004efc:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8004efe:	f107 0208 	add.w	r2, r7, #8
 8004f02:	2301      	movs	r3, #1
 8004f04:	2110      	movs	r1, #16
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f7ff ff49 	bl	8004d9e <lps22hb_write_reg>
 8004f0c:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3710      	adds	r7, #16
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <lps22hb_data_rate_get>:
  * @param  val    Get the values of odr in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_data_rate_get(stmdev_ctx_t *ctx, lps22hb_odr_t *val)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8004f22:	f107 0208 	add.w	r2, r7, #8
 8004f26:	2301      	movs	r3, #1
 8004f28:	2110      	movs	r1, #16
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f7ff ff1f 	bl	8004d6e <lps22hb_read_reg>
 8004f30:	60f8      	str	r0, [r7, #12]
  switch (ctrl_reg1.odr){
 8004f32:	7a3b      	ldrb	r3, [r7, #8]
 8004f34:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	2b05      	cmp	r3, #5
 8004f3c:	d826      	bhi.n	8004f8c <lps22hb_data_rate_get+0x74>
 8004f3e:	a201      	add	r2, pc, #4	; (adr r2, 8004f44 <lps22hb_data_rate_get+0x2c>)
 8004f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f44:	08004f5d 	.word	0x08004f5d
 8004f48:	08004f65 	.word	0x08004f65
 8004f4c:	08004f6d 	.word	0x08004f6d
 8004f50:	08004f75 	.word	0x08004f75
 8004f54:	08004f7d 	.word	0x08004f7d
 8004f58:	08004f85 	.word	0x08004f85
    case LPS22HB_POWER_DOWN:
      *val = LPS22HB_POWER_DOWN;
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	701a      	strb	r2, [r3, #0]
      break;
 8004f62:	e017      	b.n	8004f94 <lps22hb_data_rate_get+0x7c>
    case LPS22HB_ODR_1_Hz:
      *val = LPS22HB_ODR_1_Hz;
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	2201      	movs	r2, #1
 8004f68:	701a      	strb	r2, [r3, #0]
      break;
 8004f6a:	e013      	b.n	8004f94 <lps22hb_data_rate_get+0x7c>
    case LPS22HB_ODR_10_Hz:
      *val = LPS22HB_ODR_10_Hz;
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	2202      	movs	r2, #2
 8004f70:	701a      	strb	r2, [r3, #0]
      break;
 8004f72:	e00f      	b.n	8004f94 <lps22hb_data_rate_get+0x7c>
    case LPS22HB_ODR_25_Hz:
      *val = LPS22HB_ODR_25_Hz;
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	2203      	movs	r2, #3
 8004f78:	701a      	strb	r2, [r3, #0]
      break;
 8004f7a:	e00b      	b.n	8004f94 <lps22hb_data_rate_get+0x7c>
    case LPS22HB_ODR_50_Hz:
      *val = LPS22HB_ODR_50_Hz;
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	2204      	movs	r2, #4
 8004f80:	701a      	strb	r2, [r3, #0]
      break;
 8004f82:	e007      	b.n	8004f94 <lps22hb_data_rate_get+0x7c>
    case LPS22HB_ODR_75_Hz:
      *val = LPS22HB_ODR_75_Hz;
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	2205      	movs	r2, #5
 8004f88:	701a      	strb	r2, [r3, #0]
      break;
 8004f8a:	e003      	b.n	8004f94 <lps22hb_data_rate_get+0x7c>
    default:
      *val = LPS22HB_ODR_1_Hz;
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	701a      	strb	r2, [r3, #0]
      break;
 8004f92:	bf00      	nop
  }

  return ret;
 8004f94:	68fb      	ldr	r3, [r7, #12]
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3710      	adds	r7, #16
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop

08004fa0 <lps22hb_pressure_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_pressure_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret =  lps22hb_read_reg(ctx, LPS22HB_PRESS_OUT_XL, buff, 3);
 8004faa:	2303      	movs	r3, #3
 8004fac:	683a      	ldr	r2, [r7, #0]
 8004fae:	2128      	movs	r1, #40	; 0x28
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f7ff fedc 	bl	8004d6e <lps22hb_read_reg>
 8004fb6:	60f8      	str	r0, [r7, #12]
  return ret;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3710      	adds	r7, #16
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}

08004fc2 <lps22hb_temperature_raw_get>:
  * @param  buff   Buffer that stores data read.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_temperature_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004fc2:	b580      	push	{r7, lr}
 8004fc4:	b084      	sub	sp, #16
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	6078      	str	r0, [r7, #4]
 8004fca:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret =  lps22hb_read_reg(ctx, LPS22HB_TEMP_OUT_L, (uint8_t*) buff, 2);
 8004fcc:	2302      	movs	r3, #2
 8004fce:	683a      	ldr	r2, [r7, #0]
 8004fd0:	212b      	movs	r1, #43	; 0x2b
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f7ff fecb 	bl	8004d6e <lps22hb_read_reg>
 8004fd8:	60f8      	str	r0, [r7, #12]
  return ret;
 8004fda:	68fb      	ldr	r3, [r7, #12]
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3710      	adds	r7, #16
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <lps22hb_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b084      	sub	sp, #16
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret =  lps22hb_read_reg(ctx, LPS22HB_WHO_AM_I, (uint8_t*) buff, 1);
 8004fee:	2301      	movs	r3, #1
 8004ff0:	683a      	ldr	r2, [r7, #0]
 8004ff2:	210f      	movs	r1, #15
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f7ff feba 	bl	8004d6e <lps22hb_read_reg>
 8004ffa:	60f8      	str	r0, [r7, #12]
  return ret;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3710      	adds	r7, #16
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}

08005006 <lps22hb_low_power_set>:
  * @param  val    Change the values of lc_en in reg RES_CONF
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_low_power_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005006:	b580      	push	{r7, lr}
 8005008:	b084      	sub	sp, #16
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
 800500e:	460b      	mov	r3, r1
 8005010:	70fb      	strb	r3, [r7, #3]
  lps22hb_res_conf_t res_conf;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_RES_CONF, (uint8_t*)&res_conf, 1);
 8005012:	f107 0208 	add.w	r2, r7, #8
 8005016:	2301      	movs	r3, #1
 8005018:	211a      	movs	r1, #26
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f7ff fea7 	bl	8004d6e <lps22hb_read_reg>
 8005020:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d10f      	bne.n	8005048 <lps22hb_low_power_set+0x42>
    res_conf.lc_en = val;
 8005028:	78fb      	ldrb	r3, [r7, #3]
 800502a:	f003 0301 	and.w	r3, r3, #1
 800502e:	b2da      	uxtb	r2, r3
 8005030:	7a3b      	ldrb	r3, [r7, #8]
 8005032:	f362 0300 	bfi	r3, r2, #0, #1
 8005036:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_RES_CONF, (uint8_t*)&res_conf, 1);
 8005038:	f107 0208 	add.w	r2, r7, #8
 800503c:	2301      	movs	r3, #1
 800503e:	211a      	movs	r1, #26
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f7ff feac 	bl	8004d9e <lps22hb_write_reg>
 8005046:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8005048:	68fb      	ldr	r3, [r7, #12]
}
 800504a:	4618      	mov	r0, r3
 800504c:	3710      	adds	r7, #16
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}

08005052 <lps22hb_auto_add_inc_set>:
  * @param  val    Change the values of if_add_inc in reg CTRL_REG2
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_auto_add_inc_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005052:	b580      	push	{r7, lr}
 8005054:	b084      	sub	sp, #16
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
 800505a:	460b      	mov	r3, r1
 800505c:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
 800505e:	f107 0208 	add.w	r2, r7, #8
 8005062:	2301      	movs	r3, #1
 8005064:	2111      	movs	r1, #17
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f7ff fe81 	bl	8004d6e <lps22hb_read_reg>
 800506c:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d10f      	bne.n	8005094 <lps22hb_auto_add_inc_set+0x42>
    ctrl_reg2.if_add_inc = val;
 8005074:	78fb      	ldrb	r3, [r7, #3]
 8005076:	f003 0301 	and.w	r3, r3, #1
 800507a:	b2da      	uxtb	r2, r3
 800507c:	7a3b      	ldrb	r3, [r7, #8]
 800507e:	f362 1304 	bfi	r3, r2, #4, #1
 8005082:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
 8005084:	f107 0208 	add.w	r2, r7, #8
 8005088:	2301      	movs	r3, #1
 800508a:	2111      	movs	r1, #17
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f7ff fe86 	bl	8004d9e <lps22hb_write_reg>
 8005092:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8005094:	68fb      	ldr	r3, [r7, #12]
}
 8005096:	4618      	mov	r0, r3
 8005098:	3710      	adds	r7, #16
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
	...

080050a0 <LSM303AGR_ACC_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_RegisterBusIO(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80050aa:	2300      	movs	r3, #0
 80050ac:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d103      	bne.n	80050bc <LSM303AGR_ACC_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 80050b4:	f04f 33ff 	mov.w	r3, #4294967295
 80050b8:	60fb      	str	r3, [r7, #12]
 80050ba:	e04d      	b.n	8005158 <LSM303AGR_ACC_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	685a      	ldr	r2, [r3, #4]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	689a      	ldr	r2, [r3, #8]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	7b1a      	ldrb	r2, [r3, #12]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	691a      	ldr	r2, [r3, #16]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	695a      	ldr	r2, [r3, #20]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	699a      	ldr	r2, [r3, #24]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadAccRegWrap;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a1b      	ldr	r2, [pc, #108]	; (8005164 <LSM303AGR_ACC_RegisterBusIO+0xc4>)
 80050f8:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteAccRegWrap;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a1a      	ldr	r2, [pc, #104]	; (8005168 <LSM303AGR_ACC_RegisterBusIO+0xc8>)
 80050fe:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d103      	bne.n	8005116 <LSM303AGR_ACC_RegisterBusIO+0x76>
    {
      ret = LSM303AGR_ERROR;
 800510e:	f04f 33ff 	mov.w	r3, #4294967295
 8005112:	60fb      	str	r3, [r7, #12]
 8005114:	e020      	b.n	8005158 <LSM303AGR_ACC_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4798      	blx	r3
 800511c:	4603      	mov	r3, r0
 800511e:	2b00      	cmp	r3, #0
 8005120:	d003      	beq.n	800512a <LSM303AGR_ACC_RegisterBusIO+0x8a>
    {
      ret = LSM303AGR_ERROR;
 8005122:	f04f 33ff 	mov.w	r3, #4294967295
 8005126:	60fb      	str	r3, [r7, #12]
 8005128:	e016      	b.n	8005158 <LSM303AGR_ACC_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM303AGR_SPI_3WIRES_BUS) /* SPI 3-Wires */
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	2b01      	cmp	r3, #1
 8005130:	d112      	bne.n	8005158 <LSM303AGR_ACC_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005138:	2b00      	cmp	r3, #0
 800513a:	d10d      	bne.n	8005158 <LSM303AGR_ACC_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 800513c:	2301      	movs	r3, #1
 800513e:	72fb      	strb	r3, [r7, #11]

          if (LSM303AGR_ACC_Write_Reg(pObj, LSM303AGR_CTRL_REG4_A, data) != LSM303AGR_OK)
 8005140:	7afb      	ldrb	r3, [r7, #11]
 8005142:	461a      	mov	r2, r3
 8005144:	2123      	movs	r1, #35	; 0x23
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 fb50 	bl	80057ec <LSM303AGR_ACC_Write_Reg>
 800514c:	4603      	mov	r3, r0
 800514e:	2b00      	cmp	r3, #0
 8005150:	d002      	beq.n	8005158 <LSM303AGR_ACC_RegisterBusIO+0xb8>
          {
            return LSM303AGR_ERROR;
 8005152:	f04f 33ff 	mov.w	r3, #4294967295
 8005156:	e000      	b.n	800515a <LSM303AGR_ACC_RegisterBusIO+0xba>
        }
      }
    }
  }

  return ret;
 8005158:	68fb      	ldr	r3, [r7, #12]
}
 800515a:	4618      	mov	r0, r3
 800515c:	3710      	adds	r7, #16
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop
 8005164:	08005ff5 	.word	0x08005ff5
 8005168:	08006057 	.word	0x08006057

0800516c <LSM303AGR_ACC_Init>:
 * @brief  Initialize the LSM303AGR sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Init(LSM303AGR_ACC_Object_t *pObj)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b082      	sub	sp, #8
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_xl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	331c      	adds	r3, #28
 8005178:	2101      	movs	r1, #1
 800517a:	4618      	mov	r0, r3
 800517c:	f001 f942 	bl	8006404 <lsm303agr_xl_block_data_update_set>
 8005180:	4603      	mov	r3, r0
 8005182:	2b00      	cmp	r3, #0
 8005184:	d002      	beq.n	800518c <LSM303AGR_ACC_Init+0x20>
  {
    return LSM303AGR_ERROR;
 8005186:	f04f 33ff 	mov.w	r3, #4294967295
 800518a:	e02c      	b.n	80051e6 <LSM303AGR_ACC_Init+0x7a>
  }

  /* FIFO mode selection */
  if (lsm303agr_xl_fifo_mode_set(&(pObj->Ctx), LSM303AGR_BYPASS_MODE) != LSM303AGR_OK)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	331c      	adds	r3, #28
 8005190:	2100      	movs	r1, #0
 8005192:	4618      	mov	r0, r3
 8005194:	f001 fa71 	bl	800667a <lsm303agr_xl_fifo_mode_set>
 8005198:	4603      	mov	r3, r0
 800519a:	2b00      	cmp	r3, #0
 800519c:	d002      	beq.n	80051a4 <LSM303AGR_ACC_Init+0x38>
  {
    return LSM303AGR_ERROR;
 800519e:	f04f 33ff 	mov.w	r3, #4294967295
 80051a2:	e020      	b.n	80051e6 <LSM303AGR_ACC_Init+0x7a>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM303AGR_XL_ODR_100Hz;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2205      	movs	r2, #5
 80051a8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	331c      	adds	r3, #28
 80051b0:	2100      	movs	r1, #0
 80051b2:	4618      	mov	r0, r3
 80051b4:	f001 f846 	bl	8006244 <lsm303agr_xl_data_rate_set>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d002      	beq.n	80051c4 <LSM303AGR_ACC_Init+0x58>
  {
    return LSM303AGR_ERROR;
 80051be:	f04f 33ff 	mov.w	r3, #4294967295
 80051c2:	e010      	b.n	80051e6 <LSM303AGR_ACC_Init+0x7a>
  }

  /* Full scale selection. */
  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), LSM303AGR_2g) != LSM303AGR_OK)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	331c      	adds	r3, #28
 80051c8:	2100      	movs	r1, #0
 80051ca:	4618      	mov	r0, r3
 80051cc:	f001 f8bc 	bl	8006348 <lsm303agr_xl_full_scale_set>
 80051d0:	4603      	mov	r3, r0
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d002      	beq.n	80051dc <LSM303AGR_ACC_Init+0x70>
  {
    return LSM303AGR_ERROR;
 80051d6:	f04f 33ff 	mov.w	r3, #4294967295
 80051da:	e004      	b.n	80051e6 <LSM303AGR_ACC_Init+0x7a>
  }

  pObj->is_initialized = 1;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 80051e4:	2300      	movs	r3, #0
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3708      	adds	r7, #8
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}

080051ee <LSM303AGR_ACC_DeInit>:
 * @brief  Deinitialize the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_DeInit(LSM303AGR_ACC_Object_t *pObj)
{
 80051ee:	b580      	push	{r7, lr}
 80051f0:	b082      	sub	sp, #8
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM303AGR_ACC_Disable(pObj) != LSM303AGR_OK)
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f000 f87c 	bl	80052f4 <LSM303AGR_ACC_Disable>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d002      	beq.n	8005208 <LSM303AGR_ACC_DeInit+0x1a>
  {
    return LSM303AGR_ERROR;
 8005202:	f04f 33ff 	mov.w	r3, #4294967295
 8005206:	e008      	b.n	800521a <LSM303AGR_ACC_DeInit+0x2c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM303AGR_XL_POWER_DOWN;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  pObj->is_initialized = 0;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	3708      	adds	r7, #8
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}

08005222 <LSM303AGR_ACC_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_ReadID(LSM303AGR_ACC_Object_t *pObj, uint8_t *Id)
{
 8005222:	b580      	push	{r7, lr}
 8005224:	b082      	sub	sp, #8
 8005226:	af00      	add	r7, sp, #0
 8005228:	6078      	str	r0, [r7, #4]
 800522a:	6039      	str	r1, [r7, #0]
  if (lsm303agr_xl_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	331c      	adds	r3, #28
 8005230:	6839      	ldr	r1, [r7, #0]
 8005232:	4618      	mov	r0, r3
 8005234:	f001 f9d9 	bl	80065ea <lsm303agr_xl_device_id_get>
 8005238:	4603      	mov	r3, r0
 800523a:	2b00      	cmp	r3, #0
 800523c:	d002      	beq.n	8005244 <LSM303AGR_ACC_ReadID+0x22>
  {
    return LSM303AGR_ERROR;
 800523e:	f04f 33ff 	mov.w	r3, #4294967295
 8005242:	e000      	b.n	8005246 <LSM303AGR_ACC_ReadID+0x24>
  }

  return LSM303AGR_OK;
 8005244:	2300      	movs	r3, #0
}
 8005246:	4618      	mov	r0, r3
 8005248:	3708      	adds	r7, #8
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
	...

08005250 <LSM303AGR_ACC_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM303AGR accelerometer sensor capabilities
 * @retval Component status
 */
int32_t LSM303AGR_ACC_GetCapabilities(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	2201      	movs	r2, #1
 800525e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	2200      	movs	r2, #0
 8005264:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	2200      	movs	r2, #0
 800526a:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	2200      	movs	r2, #0
 8005270:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	2200      	movs	r2, #0
 8005276:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	2210      	movs	r2, #16
 800527c:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	2200      	movs	r2, #0
 8005282:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	f04f 0200 	mov.w	r2, #0
 800528a:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 400.0f;
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	4a06      	ldr	r2, [pc, #24]	; (80052a8 <LSM303AGR_ACC_GetCapabilities+0x58>)
 8005290:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	f04f 0200 	mov.w	r2, #0
 8005298:	619a      	str	r2, [r3, #24]
  return LSM303AGR_OK;
 800529a:	2300      	movs	r3, #0
}
 800529c:	4618      	mov	r0, r3
 800529e:	370c      	adds	r7, #12
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr
 80052a8:	43c80000 	.word	0x43c80000

080052ac <LSM303AGR_ACC_Enable>:
 * @brief  Enable the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Enable(LSM303AGR_ACC_Object_t *pObj)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b082      	sub	sp, #8
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d101      	bne.n	80052c2 <LSM303AGR_ACC_Enable+0x16>
  {
    return LSM303AGR_OK;
 80052be:	2300      	movs	r3, #0
 80052c0:	e014      	b.n	80052ec <LSM303AGR_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM303AGR_OK)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f103 021c 	add.w	r2, r3, #28
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80052ce:	4619      	mov	r1, r3
 80052d0:	4610      	mov	r0, r2
 80052d2:	f000 ffb7 	bl	8006244 <lsm303agr_xl_data_rate_set>
 80052d6:	4603      	mov	r3, r0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d002      	beq.n	80052e2 <LSM303AGR_ACC_Enable+0x36>
  {
    return LSM303AGR_ERROR;
 80052dc:	f04f 33ff 	mov.w	r3, #4294967295
 80052e0:	e004      	b.n	80052ec <LSM303AGR_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2201      	movs	r2, #1
 80052e6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 80052ea:	2300      	movs	r3, #0
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3708      	adds	r7, #8
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}

080052f4 <LSM303AGR_ACC_Disable>:
 * @brief  Disable the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Disable(LSM303AGR_ACC_Object_t *pObj)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b082      	sub	sp, #8
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005302:	2b00      	cmp	r3, #0
 8005304:	d101      	bne.n	800530a <LSM303AGR_ACC_Disable+0x16>
  {
    return LSM303AGR_OK;
 8005306:	2300      	movs	r3, #0
 8005308:	e01f      	b.n	800534a <LSM303AGR_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM303AGR_OK)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f103 021c 	add.w	r2, r3, #28
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	332a      	adds	r3, #42	; 0x2a
 8005314:	4619      	mov	r1, r3
 8005316:	4610      	mov	r0, r2
 8005318:	f000 ffba 	bl	8006290 <lsm303agr_xl_data_rate_get>
 800531c:	4603      	mov	r3, r0
 800531e:	2b00      	cmp	r3, #0
 8005320:	d002      	beq.n	8005328 <LSM303AGR_ACC_Disable+0x34>
  {
    return LSM303AGR_ERROR;
 8005322:	f04f 33ff 	mov.w	r3, #4294967295
 8005326:	e010      	b.n	800534a <LSM303AGR_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	331c      	adds	r3, #28
 800532c:	2100      	movs	r1, #0
 800532e:	4618      	mov	r0, r3
 8005330:	f000 ff88 	bl	8006244 <lsm303agr_xl_data_rate_set>
 8005334:	4603      	mov	r3, r0
 8005336:	2b00      	cmp	r3, #0
 8005338:	d002      	beq.n	8005340 <LSM303AGR_ACC_Disable+0x4c>
  {
    return LSM303AGR_ERROR;
 800533a:	f04f 33ff 	mov.w	r3, #4294967295
 800533e:	e004      	b.n	800534a <LSM303AGR_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8005348:	2300      	movs	r3, #0
}
 800534a:	4618      	mov	r0, r3
 800534c:	3708      	adds	r7, #8
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}

08005352 <LSM303AGR_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetSensitivity(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8005352:	b580      	push	{r7, lr}
 8005354:	b084      	sub	sp, #16
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
 800535a:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 800535c:	2300      	movs	r3, #0
 800535e:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	331c      	adds	r3, #28
 8005364:	f107 020b 	add.w	r2, r7, #11
 8005368:	4611      	mov	r1, r2
 800536a:	4618      	mov	r0, r3
 800536c:	f000 ff36 	bl	80061dc <lsm303agr_xl_operating_mode_get>
 8005370:	4603      	mov	r3, r0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d002      	beq.n	800537c <LSM303AGR_ACC_GetSensitivity+0x2a>
  {
    return LSM303AGR_ERROR;
 8005376:	f04f 33ff 	mov.w	r3, #4294967295
 800537a:	e02e      	b.n	80053da <LSM303AGR_ACC_GetSensitivity+0x88>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (op_mode)
 800537c:	7afb      	ldrb	r3, [r7, #11]
 800537e:	2b01      	cmp	r3, #1
 8005380:	d00d      	beq.n	800539e <LSM303AGR_ACC_GetSensitivity+0x4c>
 8005382:	2b02      	cmp	r3, #2
 8005384:	d015      	beq.n	80053b2 <LSM303AGR_ACC_GetSensitivity+0x60>
 8005386:	2b00      	cmp	r3, #0
 8005388:	d11d      	bne.n	80053c6 <LSM303AGR_ACC_GetSensitivity+0x74>
  {
    case LSM303AGR_HR_12bit:
      if (LSM303AGR_ACC_GetSensitivityHR(pObj, Sensitivity) != LSM303AGR_OK)
 800538a:	6839      	ldr	r1, [r7, #0]
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f000 fca5 	bl	8005cdc <LSM303AGR_ACC_GetSensitivityHR>
 8005392:	4603      	mov	r3, r0
 8005394:	2b00      	cmp	r3, #0
 8005396:	d01a      	beq.n	80053ce <LSM303AGR_ACC_GetSensitivity+0x7c>
      {
        return LSM303AGR_ERROR;
 8005398:	f04f 33ff 	mov.w	r3, #4294967295
 800539c:	e01d      	b.n	80053da <LSM303AGR_ACC_GetSensitivity+0x88>
      }
      break;

    case LSM303AGR_NM_10bit:
      if (LSM303AGR_ACC_GetSensitivityNM(pObj, Sensitivity) != LSM303AGR_OK)
 800539e:	6839      	ldr	r1, [r7, #0]
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f000 fce1 	bl	8005d68 <LSM303AGR_ACC_GetSensitivityNM>
 80053a6:	4603      	mov	r3, r0
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d012      	beq.n	80053d2 <LSM303AGR_ACC_GetSensitivity+0x80>
      {
        return LSM303AGR_ERROR;
 80053ac:	f04f 33ff 	mov.w	r3, #4294967295
 80053b0:	e013      	b.n	80053da <LSM303AGR_ACC_GetSensitivity+0x88>
      }
      break;

    case LSM303AGR_LP_8bit:
      if (LSM303AGR_ACC_GetSensitivityLP(pObj, Sensitivity) != LSM303AGR_OK)
 80053b2:	6839      	ldr	r1, [r7, #0]
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f000 fd1d 	bl	8005df4 <LSM303AGR_ACC_GetSensitivityLP>
 80053ba:	4603      	mov	r3, r0
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d00a      	beq.n	80053d6 <LSM303AGR_ACC_GetSensitivity+0x84>
      {
        return LSM303AGR_ERROR;
 80053c0:	f04f 33ff 	mov.w	r3, #4294967295
 80053c4:	e009      	b.n	80053da <LSM303AGR_ACC_GetSensitivity+0x88>
      }
      break;

    default:
      ret = LSM303AGR_ERROR;
 80053c6:	f04f 33ff 	mov.w	r3, #4294967295
 80053ca:	60fb      	str	r3, [r7, #12]
      break;
 80053cc:	e004      	b.n	80053d8 <LSM303AGR_ACC_GetSensitivity+0x86>
      break;
 80053ce:	bf00      	nop
 80053d0:	e002      	b.n	80053d8 <LSM303AGR_ACC_GetSensitivity+0x86>
      break;
 80053d2:	bf00      	nop
 80053d4:	e000      	b.n	80053d8 <LSM303AGR_ACC_GetSensitivity+0x86>
      break;
 80053d6:	bf00      	nop
  }

  return ret;
 80053d8:	68fb      	ldr	r3, [r7, #12]
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3710      	adds	r7, #16
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
	...

080053e4 <LSM303AGR_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetOutputDataRate(LSM303AGR_ACC_Object_t *pObj, float *Odr)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b084      	sub	sp, #16
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80053ee:	2300      	movs	r3, #0
 80053f0:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;
  lsm303agr_odr_a_t odr_low_level;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	331c      	adds	r3, #28
 80053f6:	f107 020b 	add.w	r2, r7, #11
 80053fa:	4611      	mov	r1, r2
 80053fc:	4618      	mov	r0, r3
 80053fe:	f000 feed 	bl	80061dc <lsm303agr_xl_operating_mode_get>
 8005402:	4603      	mov	r3, r0
 8005404:	2b00      	cmp	r3, #0
 8005406:	d002      	beq.n	800540e <LSM303AGR_ACC_GetOutputDataRate+0x2a>
  {
    return LSM303AGR_ERROR;
 8005408:	f04f 33ff 	mov.w	r3, #4294967295
 800540c:	e09f      	b.n	800554e <LSM303AGR_ACC_GetOutputDataRate+0x16a>
  }

  /* Get current output data rate. */
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	331c      	adds	r3, #28
 8005412:	f107 020a 	add.w	r2, r7, #10
 8005416:	4611      	mov	r1, r2
 8005418:	4618      	mov	r0, r3
 800541a:	f000 ff39 	bl	8006290 <lsm303agr_xl_data_rate_get>
 800541e:	4603      	mov	r3, r0
 8005420:	2b00      	cmp	r3, #0
 8005422:	d002      	beq.n	800542a <LSM303AGR_ACC_GetOutputDataRate+0x46>
  {
    return LSM303AGR_ERROR;
 8005424:	f04f 33ff 	mov.w	r3, #4294967295
 8005428:	e091      	b.n	800554e <LSM303AGR_ACC_GetOutputDataRate+0x16a>
  }

  if (op_mode == LSM303AGR_LP_8bit) /* LP mode */
 800542a:	7afb      	ldrb	r3, [r7, #11]
 800542c:	2b02      	cmp	r3, #2
 800542e:	d148      	bne.n	80054c2 <LSM303AGR_ACC_GetOutputDataRate+0xde>
  {
    switch (odr_low_level)
 8005430:	7abb      	ldrb	r3, [r7, #10]
 8005432:	2b09      	cmp	r3, #9
 8005434:	d840      	bhi.n	80054b8 <LSM303AGR_ACC_GetOutputDataRate+0xd4>
 8005436:	a201      	add	r2, pc, #4	; (adr r2, 800543c <LSM303AGR_ACC_GetOutputDataRate+0x58>)
 8005438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800543c:	08005465 	.word	0x08005465
 8005440:	0800546f 	.word	0x0800546f
 8005444:	08005479 	.word	0x08005479
 8005448:	08005481 	.word	0x08005481
 800544c:	08005489 	.word	0x08005489
 8005450:	08005491 	.word	0x08005491
 8005454:	08005499 	.word	0x08005499
 8005458:	080054a1 	.word	0x080054a1
 800545c:	080054a9 	.word	0x080054a9
 8005460:	080054b1 	.word	0x080054b1
    {
      case LSM303AGR_XL_POWER_DOWN:
        *Odr = 0.0f;
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	f04f 0200 	mov.w	r2, #0
 800546a:	601a      	str	r2, [r3, #0]
        break;
 800546c:	e06e      	b.n	800554c <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_1Hz:
        *Odr = 1.0f;
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005474:	601a      	str	r2, [r3, #0]
        break;
 8005476:	e069      	b.n	800554c <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_10Hz:
        *Odr = 10.0f;
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	4a37      	ldr	r2, [pc, #220]	; (8005558 <LSM303AGR_ACC_GetOutputDataRate+0x174>)
 800547c:	601a      	str	r2, [r3, #0]
        break;
 800547e:	e065      	b.n	800554c <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_25Hz:
        *Odr = 25.0f;
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	4a36      	ldr	r2, [pc, #216]	; (800555c <LSM303AGR_ACC_GetOutputDataRate+0x178>)
 8005484:	601a      	str	r2, [r3, #0]
        break;
 8005486:	e061      	b.n	800554c <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_50Hz:
        *Odr = 50.0f;
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	4a35      	ldr	r2, [pc, #212]	; (8005560 <LSM303AGR_ACC_GetOutputDataRate+0x17c>)
 800548c:	601a      	str	r2, [r3, #0]
        break;
 800548e:	e05d      	b.n	800554c <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_100Hz:
        *Odr = 100.0f;
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	4a34      	ldr	r2, [pc, #208]	; (8005564 <LSM303AGR_ACC_GetOutputDataRate+0x180>)
 8005494:	601a      	str	r2, [r3, #0]
        break;
 8005496:	e059      	b.n	800554c <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_200Hz:
        *Odr = 200.0f;
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	4a33      	ldr	r2, [pc, #204]	; (8005568 <LSM303AGR_ACC_GetOutputDataRate+0x184>)
 800549c:	601a      	str	r2, [r3, #0]
        break;
 800549e:	e055      	b.n	800554c <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_400Hz:
        *Odr = 400.0f;
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	4a32      	ldr	r2, [pc, #200]	; (800556c <LSM303AGR_ACC_GetOutputDataRate+0x188>)
 80054a4:	601a      	str	r2, [r3, #0]
        break;
 80054a6:	e051      	b.n	800554c <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_1kHz620_LP:
        *Odr = 1620.0f;
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	4a31      	ldr	r2, [pc, #196]	; (8005570 <LSM303AGR_ACC_GetOutputDataRate+0x18c>)
 80054ac:	601a      	str	r2, [r3, #0]
        break;
 80054ae:	e04d      	b.n	800554c <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
        *Odr = 5376.0f;
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	4a30      	ldr	r2, [pc, #192]	; (8005574 <LSM303AGR_ACC_GetOutputDataRate+0x190>)
 80054b4:	601a      	str	r2, [r3, #0]
        break;
 80054b6:	e049      	b.n	800554c <LSM303AGR_ACC_GetOutputDataRate+0x168>

      default:
        ret = LSM303AGR_ERROR;
 80054b8:	f04f 33ff 	mov.w	r3, #4294967295
 80054bc:	60fb      	str	r3, [r7, #12]
        break;
 80054be:	bf00      	nop
 80054c0:	e044      	b.n	800554c <LSM303AGR_ACC_GetOutputDataRate+0x168>
    }
  }
  else /* HR and NM modes */
  {
    switch (odr_low_level)
 80054c2:	7abb      	ldrb	r3, [r7, #10]
 80054c4:	2b09      	cmp	r3, #9
 80054c6:	d83d      	bhi.n	8005544 <LSM303AGR_ACC_GetOutputDataRate+0x160>
 80054c8:	a201      	add	r2, pc, #4	; (adr r2, 80054d0 <LSM303AGR_ACC_GetOutputDataRate+0xec>)
 80054ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ce:	bf00      	nop
 80054d0:	080054f9 	.word	0x080054f9
 80054d4:	08005503 	.word	0x08005503
 80054d8:	0800550d 	.word	0x0800550d
 80054dc:	08005515 	.word	0x08005515
 80054e0:	0800551d 	.word	0x0800551d
 80054e4:	08005525 	.word	0x08005525
 80054e8:	0800552d 	.word	0x0800552d
 80054ec:	08005535 	.word	0x08005535
 80054f0:	08005545 	.word	0x08005545
 80054f4:	0800553d 	.word	0x0800553d
    {
      case LSM303AGR_XL_POWER_DOWN:
        *Odr = 0.0f;
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	f04f 0200 	mov.w	r2, #0
 80054fe:	601a      	str	r2, [r3, #0]
        break;
 8005500:	e024      	b.n	800554c <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_1Hz:
        *Odr = 1.0f;
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005508:	601a      	str	r2, [r3, #0]
        break;
 800550a:	e01f      	b.n	800554c <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_10Hz:
        *Odr = 10.0f;
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	4a12      	ldr	r2, [pc, #72]	; (8005558 <LSM303AGR_ACC_GetOutputDataRate+0x174>)
 8005510:	601a      	str	r2, [r3, #0]
        break;
 8005512:	e01b      	b.n	800554c <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_25Hz:
        *Odr = 25.0f;
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	4a11      	ldr	r2, [pc, #68]	; (800555c <LSM303AGR_ACC_GetOutputDataRate+0x178>)
 8005518:	601a      	str	r2, [r3, #0]
        break;
 800551a:	e017      	b.n	800554c <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_50Hz:
        *Odr = 50.0f;
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	4a10      	ldr	r2, [pc, #64]	; (8005560 <LSM303AGR_ACC_GetOutputDataRate+0x17c>)
 8005520:	601a      	str	r2, [r3, #0]
        break;
 8005522:	e013      	b.n	800554c <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_100Hz:
        *Odr = 100.0f;
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	4a0f      	ldr	r2, [pc, #60]	; (8005564 <LSM303AGR_ACC_GetOutputDataRate+0x180>)
 8005528:	601a      	str	r2, [r3, #0]
        break;
 800552a:	e00f      	b.n	800554c <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_200Hz:
        *Odr = 200.0f;
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	4a0e      	ldr	r2, [pc, #56]	; (8005568 <LSM303AGR_ACC_GetOutputDataRate+0x184>)
 8005530:	601a      	str	r2, [r3, #0]
        break;
 8005532:	e00b      	b.n	800554c <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_400Hz:
        *Odr = 400.0f;
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	4a0d      	ldr	r2, [pc, #52]	; (800556c <LSM303AGR_ACC_GetOutputDataRate+0x188>)
 8005538:	601a      	str	r2, [r3, #0]
        break;
 800553a:	e007      	b.n	800554c <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
        *Odr = 1344.0f;
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	4a0e      	ldr	r2, [pc, #56]	; (8005578 <LSM303AGR_ACC_GetOutputDataRate+0x194>)
 8005540:	601a      	str	r2, [r3, #0]
        break;
 8005542:	e003      	b.n	800554c <LSM303AGR_ACC_GetOutputDataRate+0x168>

      default:
        ret = LSM303AGR_ERROR;
 8005544:	f04f 33ff 	mov.w	r3, #4294967295
 8005548:	60fb      	str	r3, [r7, #12]
        break;
 800554a:	bf00      	nop
    }
  }

  return ret;
 800554c:	68fb      	ldr	r3, [r7, #12]
}
 800554e:	4618      	mov	r0, r3
 8005550:	3710      	adds	r7, #16
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	41200000 	.word	0x41200000
 800555c:	41c80000 	.word	0x41c80000
 8005560:	42480000 	.word	0x42480000
 8005564:	42c80000 	.word	0x42c80000
 8005568:	43480000 	.word	0x43480000
 800556c:	43c80000 	.word	0x43c80000
 8005570:	44ca8000 	.word	0x44ca8000
 8005574:	45a80000 	.word	0x45a80000
 8005578:	44a80000 	.word	0x44a80000

0800557c <LSM303AGR_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_SetOutputDataRate(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b082      	sub	sp, #8
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800558c:	2b01      	cmp	r3, #1
 800558e:	d105      	bne.n	800559c <LSM303AGR_ACC_SetOutputDataRate+0x20>
  {
    return LSM303AGR_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8005590:	6839      	ldr	r1, [r7, #0]
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 fc74 	bl	8005e80 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>
 8005598:	4603      	mov	r3, r0
 800559a:	e004      	b.n	80055a6 <LSM303AGR_ACC_SetOutputDataRate+0x2a>
  }
  else
  {
    return LSM303AGR_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 800559c:	6839      	ldr	r1, [r7, #0]
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 fcd0 	bl	8005f44 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>
 80055a4:	4603      	mov	r3, r0
  }
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3708      	adds	r7, #8
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
	...

080055b0 <LSM303AGR_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetFullScale(LSM303AGR_ACC_Object_t *pObj, int32_t *FullScale)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80055ba:	2300      	movs	r3, #0
 80055bc:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM303AGR_OK)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	331c      	adds	r3, #28
 80055c2:	f107 020b 	add.w	r2, r7, #11
 80055c6:	4611      	mov	r1, r2
 80055c8:	4618      	mov	r0, r3
 80055ca:	f000 fee3 	bl	8006394 <lsm303agr_xl_full_scale_get>
 80055ce:	4603      	mov	r3, r0
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d002      	beq.n	80055da <LSM303AGR_ACC_GetFullScale+0x2a>
  {
    return LSM303AGR_ERROR;
 80055d4:	f04f 33ff 	mov.w	r3, #4294967295
 80055d8:	e023      	b.n	8005622 <LSM303AGR_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 80055da:	7afb      	ldrb	r3, [r7, #11]
 80055dc:	2b03      	cmp	r3, #3
 80055de:	d81b      	bhi.n	8005618 <LSM303AGR_ACC_GetFullScale+0x68>
 80055e0:	a201      	add	r2, pc, #4	; (adr r2, 80055e8 <LSM303AGR_ACC_GetFullScale+0x38>)
 80055e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055e6:	bf00      	nop
 80055e8:	080055f9 	.word	0x080055f9
 80055ec:	08005601 	.word	0x08005601
 80055f0:	08005609 	.word	0x08005609
 80055f4:	08005611 	.word	0x08005611
  {
    case LSM303AGR_2g:
      *FullScale =  2;
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	2202      	movs	r2, #2
 80055fc:	601a      	str	r2, [r3, #0]
      break;
 80055fe:	e00f      	b.n	8005620 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_4g:
      *FullScale =  4;
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	2204      	movs	r2, #4
 8005604:	601a      	str	r2, [r3, #0]
      break;
 8005606:	e00b      	b.n	8005620 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_8g:
      *FullScale =  8;
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	2208      	movs	r2, #8
 800560c:	601a      	str	r2, [r3, #0]
      break;
 800560e:	e007      	b.n	8005620 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_16g:
      *FullScale = 16;
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	2210      	movs	r2, #16
 8005614:	601a      	str	r2, [r3, #0]
      break;
 8005616:	e003      	b.n	8005620 <LSM303AGR_ACC_GetFullScale+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8005618:	f04f 33ff 	mov.w	r3, #4294967295
 800561c:	60fb      	str	r3, [r7, #12]
      break;
 800561e:	bf00      	nop
  }

  return ret;
 8005620:	68fb      	ldr	r3, [r7, #12]
}
 8005622:	4618      	mov	r0, r3
 8005624:	3710      	adds	r7, #16
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
 800562a:	bf00      	nop

0800562c <LSM303AGR_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_SetFullScale(LSM303AGR_ACC_Object_t *pObj, int32_t FullScale)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b084      	sub	sp, #16
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	6039      	str	r1, [r7, #0]
  lsm303agr_fs_a_t new_fs;

  new_fs = (FullScale <= 2) ? LSM303AGR_2g
           : (FullScale <= 4) ? LSM303AGR_4g
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	2b02      	cmp	r3, #2
 800563a:	dd0b      	ble.n	8005654 <LSM303AGR_ACC_SetFullScale+0x28>
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	2b04      	cmp	r3, #4
 8005640:	dd06      	ble.n	8005650 <LSM303AGR_ACC_SetFullScale+0x24>
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	2b08      	cmp	r3, #8
 8005646:	dc01      	bgt.n	800564c <LSM303AGR_ACC_SetFullScale+0x20>
 8005648:	2302      	movs	r3, #2
 800564a:	e004      	b.n	8005656 <LSM303AGR_ACC_SetFullScale+0x2a>
 800564c:	2303      	movs	r3, #3
 800564e:	e002      	b.n	8005656 <LSM303AGR_ACC_SetFullScale+0x2a>
 8005650:	2301      	movs	r3, #1
 8005652:	e000      	b.n	8005656 <LSM303AGR_ACC_SetFullScale+0x2a>
 8005654:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM303AGR_2g
 8005656:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM303AGR_8g
           :                    LSM303AGR_16g;

  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM303AGR_OK)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	331c      	adds	r3, #28
 800565c:	7bfa      	ldrb	r2, [r7, #15]
 800565e:	4611      	mov	r1, r2
 8005660:	4618      	mov	r0, r3
 8005662:	f000 fe71 	bl	8006348 <lsm303agr_xl_full_scale_set>
 8005666:	4603      	mov	r3, r0
 8005668:	2b00      	cmp	r3, #0
 800566a:	d002      	beq.n	8005672 <LSM303AGR_ACC_SetFullScale+0x46>
  {
    return LSM303AGR_ERROR;
 800566c:	f04f 33ff 	mov.w	r3, #4294967295
 8005670:	e000      	b.n	8005674 <LSM303AGR_ACC_SetFullScale+0x48>
  }

  return LSM303AGR_OK;
 8005672:	2300      	movs	r3, #0
}
 8005674:	4618      	mov	r0, r3
 8005676:	3710      	adds	r7, #16
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}

0800567c <LSM303AGR_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetAxesRaw(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b088      	sub	sp, #32
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]
  int16_t divisor = 1;
 8005686:	2301      	movs	r3, #1
 8005688:	83fb      	strh	r3, [r7, #30]
  lsm303agr_axis3bit16_t data_raw;
  int32_t ret = LSM303AGR_OK;
 800568a:	2300      	movs	r3, #0
 800568c:	61bb      	str	r3, [r7, #24]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	331c      	adds	r3, #28
 8005692:	f107 020f 	add.w	r2, r7, #15
 8005696:	4611      	mov	r1, r2
 8005698:	4618      	mov	r0, r3
 800569a:	f000 fd9f 	bl	80061dc <lsm303agr_xl_operating_mode_get>
 800569e:	4603      	mov	r3, r0
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d002      	beq.n	80056aa <LSM303AGR_ACC_GetAxesRaw+0x2e>
  {
    return LSM303AGR_ERROR;
 80056a4:	f04f 33ff 	mov.w	r3, #4294967295
 80056a8:	e047      	b.n	800573a <LSM303AGR_ACC_GetAxesRaw+0xbe>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (op_mode)
 80056aa:	7bfb      	ldrb	r3, [r7, #15]
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d006      	beq.n	80056be <LSM303AGR_ACC_GetAxesRaw+0x42>
 80056b0:	2b02      	cmp	r3, #2
 80056b2:	d007      	beq.n	80056c4 <LSM303AGR_ACC_GetAxesRaw+0x48>
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d109      	bne.n	80056cc <LSM303AGR_ACC_GetAxesRaw+0x50>
  {
    case LSM303AGR_HR_12bit:
      divisor = 16;
 80056b8:	2310      	movs	r3, #16
 80056ba:	83fb      	strh	r3, [r7, #30]
      break;
 80056bc:	e00a      	b.n	80056d4 <LSM303AGR_ACC_GetAxesRaw+0x58>

    case LSM303AGR_NM_10bit:
      divisor = 64;
 80056be:	2340      	movs	r3, #64	; 0x40
 80056c0:	83fb      	strh	r3, [r7, #30]
      break;
 80056c2:	e007      	b.n	80056d4 <LSM303AGR_ACC_GetAxesRaw+0x58>

    case LSM303AGR_LP_8bit:
      divisor = 256;
 80056c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80056c8:	83fb      	strh	r3, [r7, #30]
      break;
 80056ca:	e003      	b.n	80056d4 <LSM303AGR_ACC_GetAxesRaw+0x58>

    default:
      ret = LSM303AGR_ERROR;
 80056cc:	f04f 33ff 	mov.w	r3, #4294967295
 80056d0:	61bb      	str	r3, [r7, #24]
      break;
 80056d2:	bf00      	nop
  }

  if (ret == LSM303AGR_ERROR)
 80056d4:	69bb      	ldr	r3, [r7, #24]
 80056d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056da:	d101      	bne.n	80056e0 <LSM303AGR_ACC_GetAxesRaw+0x64>
  {
    return ret;
 80056dc:	69bb      	ldr	r3, [r7, #24]
 80056de:	e02c      	b.n	800573a <LSM303AGR_ACC_GetAxesRaw+0xbe>
  }

  /* Read raw data values. */
  if (lsm303agr_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM303AGR_OK)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	331c      	adds	r3, #28
 80056e4:	f107 0210 	add.w	r2, r7, #16
 80056e8:	4611      	mov	r1, r2
 80056ea:	4618      	mov	r0, r3
 80056ec:	f000 feb0 	bl	8006450 <lsm303agr_acceleration_raw_get>
 80056f0:	4603      	mov	r3, r0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d002      	beq.n	80056fc <LSM303AGR_ACC_GetAxesRaw+0x80>
  {
    return LSM303AGR_ERROR;
 80056f6:	f04f 33ff 	mov.w	r3, #4294967295
 80056fa:	e01e      	b.n	800573a <LSM303AGR_ACC_GetAxesRaw+0xbe>
  }

  /* Format the data. */
  Value->x = (data_raw.i16bit[0] / divisor);
 80056fc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005700:	461a      	mov	r2, r3
 8005702:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005706:	fb92 f3f3 	sdiv	r3, r2, r3
 800570a:	b21a      	sxth	r2, r3
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	801a      	strh	r2, [r3, #0]
  Value->y = (data_raw.i16bit[1] / divisor);
 8005710:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005714:	461a      	mov	r2, r3
 8005716:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800571a:	fb92 f3f3 	sdiv	r3, r2, r3
 800571e:	b21a      	sxth	r2, r3
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	805a      	strh	r2, [r3, #2]
  Value->z = (data_raw.i16bit[2] / divisor);
 8005724:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005728:	461a      	mov	r2, r3
 800572a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800572e:	fb92 f3f3 	sdiv	r3, r2, r3
 8005732:	b21a      	sxth	r2, r3
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	809a      	strh	r2, [r3, #4]

  return ret;
 8005738:	69bb      	ldr	r3, [r7, #24]
}
 800573a:	4618      	mov	r0, r3
 800573c:	3720      	adds	r7, #32
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}

08005742 <LSM303AGR_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetAxes(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Axes_t *Acceleration)
{
 8005742:	b580      	push	{r7, lr}
 8005744:	b086      	sub	sp, #24
 8005746:	af00      	add	r7, sp, #0
 8005748:	6078      	str	r0, [r7, #4]
 800574a:	6039      	str	r1, [r7, #0]
  LSM303AGR_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 800574c:	f04f 0300 	mov.w	r3, #0
 8005750:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LSM303AGR_ACC_GetAxesRaw(pObj, &data_raw) != LSM303AGR_OK)
 8005752:	f107 0310 	add.w	r3, r7, #16
 8005756:	4619      	mov	r1, r3
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f7ff ff8f 	bl	800567c <LSM303AGR_ACC_GetAxesRaw>
 800575e:	4603      	mov	r3, r0
 8005760:	2b00      	cmp	r3, #0
 8005762:	d002      	beq.n	800576a <LSM303AGR_ACC_GetAxes+0x28>
  {
    return LSM303AGR_ERROR;
 8005764:	f04f 33ff 	mov.w	r3, #4294967295
 8005768:	e03c      	b.n	80057e4 <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Get LSM303AGR actual sensitivity. */
  if (LSM303AGR_ACC_GetSensitivity(pObj, &sensitivity) != LSM303AGR_OK)
 800576a:	f107 030c 	add.w	r3, r7, #12
 800576e:	4619      	mov	r1, r3
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f7ff fdee 	bl	8005352 <LSM303AGR_ACC_GetSensitivity>
 8005776:	4603      	mov	r3, r0
 8005778:	2b00      	cmp	r3, #0
 800577a:	d002      	beq.n	8005782 <LSM303AGR_ACC_GetAxes+0x40>
  {
    return LSM303AGR_ERROR;
 800577c:	f04f 33ff 	mov.w	r3, #4294967295
 8005780:	e030      	b.n	80057e4 <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8005782:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005786:	ee07 3a90 	vmov	s15, r3
 800578a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800578e:	edd7 7a03 	vldr	s15, [r7, #12]
 8005792:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005796:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800579a:	ee17 2a90 	vmov	r2, s15
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 80057a2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80057a6:	ee07 3a90 	vmov	s15, r3
 80057aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80057ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80057b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80057ba:	ee17 2a90 	vmov	r2, s15
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 80057c2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80057c6:	ee07 3a90 	vmov	s15, r3
 80057ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80057ce:	edd7 7a03 	vldr	s15, [r7, #12]
 80057d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80057da:	ee17 2a90 	vmov	r2, s15
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 80057e2:	2300      	movs	r3, #0
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3718      	adds	r7, #24
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}

080057ec <LSM303AGR_ACC_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Write_Reg(LSM303AGR_ACC_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b082      	sub	sp, #8
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	460b      	mov	r3, r1
 80057f6:	70fb      	strb	r3, [r7, #3]
 80057f8:	4613      	mov	r3, r2
 80057fa:	70bb      	strb	r3, [r7, #2]
  if (lsm303agr_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM303AGR_OK)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f103 001c 	add.w	r0, r3, #28
 8005802:	1cba      	adds	r2, r7, #2
 8005804:	78f9      	ldrb	r1, [r7, #3]
 8005806:	2301      	movs	r3, #1
 8005808:	f000 fcd0 	bl	80061ac <lsm303agr_write_reg>
 800580c:	4603      	mov	r3, r0
 800580e:	2b00      	cmp	r3, #0
 8005810:	d002      	beq.n	8005818 <LSM303AGR_ACC_Write_Reg+0x2c>
  {
    return LSM303AGR_ERROR;
 8005812:	f04f 33ff 	mov.w	r3, #4294967295
 8005816:	e000      	b.n	800581a <LSM303AGR_ACC_Write_Reg+0x2e>
  }

  return LSM303AGR_OK;
 8005818:	2300      	movs	r3, #0
}
 800581a:	4618      	mov	r0, r3
 800581c:	3708      	adds	r7, #8
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
	...

08005824 <LSM303AGR_MAG_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_RegisterBusIO(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 800582e:	2300      	movs	r3, #0
 8005830:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d103      	bne.n	8005840 <LSM303AGR_MAG_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 8005838:	f04f 33ff 	mov.w	r3, #4294967295
 800583c:	60fb      	str	r3, [r7, #12]
 800583e:	e04b      	b.n	80058d8 <LSM303AGR_MAG_RegisterBusIO+0xb4>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	685a      	ldr	r2, [r3, #4]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	689a      	ldr	r2, [r3, #8]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	7b1a      	ldrb	r2, [r3, #12]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	691a      	ldr	r2, [r3, #16]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	695a      	ldr	r2, [r3, #20]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	699a      	ldr	r2, [r3, #24]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4a1a      	ldr	r2, [pc, #104]	; (80058e4 <LSM303AGR_MAG_RegisterBusIO+0xc0>)
 800587c:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteMagRegWrap;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4a19      	ldr	r2, [pc, #100]	; (80058e8 <LSM303AGR_MAG_RegisterBusIO+0xc4>)
 8005882:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d103      	bne.n	800589a <LSM303AGR_MAG_RegisterBusIO+0x76>
    {
      ret = LSM303AGR_ERROR;
 8005892:	f04f 33ff 	mov.w	r3, #4294967295
 8005896:	60fb      	str	r3, [r7, #12]
 8005898:	e01e      	b.n	80058d8 <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4798      	blx	r3
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d003      	beq.n	80058ae <LSM303AGR_MAG_RegisterBusIO+0x8a>
    {
      ret = LSM303AGR_ERROR;
 80058a6:	f04f 33ff 	mov.w	r3, #4294967295
 80058aa:	60fb      	str	r3, [r7, #12]
 80058ac:	e014      	b.n	80058d8 <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else
    {
      if (pObj->IO.BusType != LSM303AGR_I2C_BUS) /* If the bus type is not I2C */
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d010      	beq.n	80058d8 <LSM303AGR_MAG_RegisterBusIO+0xb4>
      {
        /* Disable I2C interface support only the first time */
        if (pObj->is_initialized == 0U)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d10b      	bne.n	80058d8 <LSM303AGR_MAG_RegisterBusIO+0xb4>
        {
          /* Disable I2C interface on the component */
          if (lsm303agr_mag_i2c_interface_set(&(pObj->Ctx), LSM303AGR_I2C_DISABLE) != LSM303AGR_OK)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	331c      	adds	r3, #28
 80058c4:	2101      	movs	r1, #1
 80058c6:	4618      	mov	r0, r3
 80058c8:	f000 fefd 	bl	80066c6 <lsm303agr_mag_i2c_interface_set>
 80058cc:	4603      	mov	r3, r0
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d002      	beq.n	80058d8 <LSM303AGR_MAG_RegisterBusIO+0xb4>
          {
            return LSM303AGR_ERROR;
 80058d2:	f04f 33ff 	mov.w	r3, #4294967295
 80058d6:	e000      	b.n	80058da <LSM303AGR_MAG_RegisterBusIO+0xb6>
        }
      }
    }
  }

  return ret;
 80058d8:	68fb      	ldr	r3, [r7, #12]
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3710      	adds	r7, #16
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	bf00      	nop
 80058e4:	080060b9 	.word	0x080060b9
 80058e8:	0800611b 	.word	0x0800611b

080058ec <LSM303AGR_MAG_Init>:
 * @brief  Initialize the LSM303AGR sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Init(LSM303AGR_MAG_Object_t *pObj)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b082      	sub	sp, #8
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_mag_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	331c      	adds	r3, #28
 80058f8:	2101      	movs	r1, #1
 80058fa:	4618      	mov	r0, r3
 80058fc:	f000 fe3e 	bl	800657c <lsm303agr_mag_block_data_update_set>
 8005900:	4603      	mov	r3, r0
 8005902:	2b00      	cmp	r3, #0
 8005904:	d002      	beq.n	800590c <LSM303AGR_MAG_Init+0x20>
  {
    return LSM303AGR_ERROR;
 8005906:	f04f 33ff 	mov.w	r3, #4294967295
 800590a:	e028      	b.n	800595e <LSM303AGR_MAG_Init+0x72>
  }

  /* Operating mode selection - power down */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	331c      	adds	r3, #28
 8005910:	2102      	movs	r1, #2
 8005912:	4618      	mov	r0, r3
 8005914:	f000 fdad 	bl	8006472 <lsm303agr_mag_operating_mode_set>
 8005918:	4603      	mov	r3, r0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d002      	beq.n	8005924 <LSM303AGR_MAG_Init+0x38>
  {
    return LSM303AGR_ERROR;
 800591e:	f04f 33ff 	mov.w	r3, #4294967295
 8005922:	e01c      	b.n	800595e <LSM303AGR_MAG_Init+0x72>
  }

  /* Output data rate selection */
  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), LSM303AGR_MG_ODR_100Hz) != LSM303AGR_OK)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	331c      	adds	r3, #28
 8005928:	2103      	movs	r1, #3
 800592a:	4618      	mov	r0, r3
 800592c:	f000 fdc7 	bl	80064be <lsm303agr_mag_data_rate_set>
 8005930:	4603      	mov	r3, r0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d002      	beq.n	800593c <LSM303AGR_MAG_Init+0x50>
  {
    return LSM303AGR_ERROR;
 8005936:	f04f 33ff 	mov.w	r3, #4294967295
 800593a:	e010      	b.n	800595e <LSM303AGR_MAG_Init+0x72>
  }

  /* Self Test disabled. */
  if (lsm303agr_mag_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LSM303AGR_OK)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	331c      	adds	r3, #28
 8005940:	2100      	movs	r1, #0
 8005942:	4618      	mov	r0, r3
 8005944:	f000 fe73 	bl	800662e <lsm303agr_mag_self_test_set>
 8005948:	4603      	mov	r3, r0
 800594a:	2b00      	cmp	r3, #0
 800594c:	d002      	beq.n	8005954 <LSM303AGR_MAG_Init+0x68>
  {
    return LSM303AGR_ERROR;
 800594e:	f04f 33ff 	mov.w	r3, #4294967295
 8005952:	e004      	b.n	800595e <LSM303AGR_MAG_Init+0x72>
  }

  pObj->is_initialized = 1;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 800595c:	2300      	movs	r3, #0
}
 800595e:	4618      	mov	r0, r3
 8005960:	3708      	adds	r7, #8
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}

08005966 <LSM303AGR_MAG_DeInit>:
 * @brief  Deinitialize the LSM303AGR magnetometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_DeInit(LSM303AGR_MAG_Object_t *pObj)
{
 8005966:	b580      	push	{r7, lr}
 8005968:	b082      	sub	sp, #8
 800596a:	af00      	add	r7, sp, #0
 800596c:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM303AGR_MAG_Disable(pObj) != LSM303AGR_OK)
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 f874 	bl	8005a5c <LSM303AGR_MAG_Disable>
 8005974:	4603      	mov	r3, r0
 8005976:	2b00      	cmp	r3, #0
 8005978:	d002      	beq.n	8005980 <LSM303AGR_MAG_DeInit+0x1a>
  {
    return LSM303AGR_ERROR;
 800597a:	f04f 33ff 	mov.w	r3, #4294967295
 800597e:	e004      	b.n	800598a <LSM303AGR_MAG_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2200      	movs	r2, #0
 8005984:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8005988:	2300      	movs	r3, #0
}
 800598a:	4618      	mov	r0, r3
 800598c:	3708      	adds	r7, #8
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}

08005992 <LSM303AGR_MAG_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_ReadID(LSM303AGR_MAG_Object_t *pObj, uint8_t *Id)
{
 8005992:	b580      	push	{r7, lr}
 8005994:	b082      	sub	sp, #8
 8005996:	af00      	add	r7, sp, #0
 8005998:	6078      	str	r0, [r7, #4]
 800599a:	6039      	str	r1, [r7, #0]
  if (lsm303agr_mag_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	331c      	adds	r3, #28
 80059a0:	6839      	ldr	r1, [r7, #0]
 80059a2:	4618      	mov	r0, r3
 80059a4:	f000 fe32 	bl	800660c <lsm303agr_mag_device_id_get>
 80059a8:	4603      	mov	r3, r0
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d002      	beq.n	80059b4 <LSM303AGR_MAG_ReadID+0x22>
  {
    return LSM303AGR_ERROR;
 80059ae:	f04f 33ff 	mov.w	r3, #4294967295
 80059b2:	e000      	b.n	80059b6 <LSM303AGR_MAG_ReadID+0x24>
  }

  return LSM303AGR_OK;
 80059b4:	2300      	movs	r3, #0
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3708      	adds	r7, #8
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
	...

080059c0 <LSM303AGR_MAG_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM303AGR magnetometer sensor capabilities
 * @retval Component status
 */
int32_t LSM303AGR_MAG_GetCapabilities(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	2200      	movs	r2, #0
 80059ce:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	2200      	movs	r2, #0
 80059d4:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	2201      	movs	r2, #1
 80059da:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	2200      	movs	r2, #0
 80059e0:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	2200      	movs	r2, #0
 80059e6:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	2200      	movs	r2, #0
 80059ec:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	2232      	movs	r2, #50	; 0x32
 80059f2:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	f04f 0200 	mov.w	r2, #0
 80059fa:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	f04f 0200 	mov.w	r2, #0
 8005a02:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	4a04      	ldr	r2, [pc, #16]	; (8005a18 <LSM303AGR_MAG_GetCapabilities+0x58>)
 8005a08:	619a      	str	r2, [r3, #24]
  return LSM303AGR_OK;
 8005a0a:	2300      	movs	r3, #0
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	370c      	adds	r7, #12
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr
 8005a18:	42c80000 	.word	0x42c80000

08005a1c <LSM303AGR_MAG_Enable>:
 * @brief Enable the LSM303AGR magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Enable(LSM303AGR_MAG_Object_t *pObj)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b082      	sub	sp, #8
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d101      	bne.n	8005a32 <LSM303AGR_MAG_Enable+0x16>
  {
    return LSM303AGR_OK;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	e010      	b.n	8005a54 <LSM303AGR_MAG_Enable+0x38>
  }

  /* Output data rate selection. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_CONTINUOUS_MODE) != LSM303AGR_OK)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	331c      	adds	r3, #28
 8005a36:	2100      	movs	r1, #0
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f000 fd1a 	bl	8006472 <lsm303agr_mag_operating_mode_set>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d002      	beq.n	8005a4a <LSM303AGR_MAG_Enable+0x2e>
  {
    return LSM303AGR_ERROR;
 8005a44:	f04f 33ff 	mov.w	r3, #4294967295
 8005a48:	e004      	b.n	8005a54 <LSM303AGR_MAG_Enable+0x38>
  }

  pObj->mag_is_enabled = 1;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8005a52:	2300      	movs	r3, #0
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3708      	adds	r7, #8
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}

08005a5c <LSM303AGR_MAG_Disable>:
 * @brief Disable the LSM303AGR magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Disable(LSM303AGR_MAG_Object_t *pObj)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b082      	sub	sp, #8
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d101      	bne.n	8005a72 <LSM303AGR_MAG_Disable+0x16>
  {
    return LSM303AGR_OK;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	e010      	b.n	8005a94 <LSM303AGR_MAG_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	331c      	adds	r3, #28
 8005a76:	2102      	movs	r1, #2
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f000 fcfa 	bl	8006472 <lsm303agr_mag_operating_mode_set>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d002      	beq.n	8005a8a <LSM303AGR_MAG_Disable+0x2e>
  {
    return LSM303AGR_ERROR;
 8005a84:	f04f 33ff 	mov.w	r3, #4294967295
 8005a88:	e004      	b.n	8005a94 <LSM303AGR_MAG_Disable+0x38>
  }

  pObj->mag_is_enabled = 0;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8005a92:	2300      	movs	r3, #0
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3708      	adds	r7, #8
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}

08005a9c <LSM303AGR_MAG_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetSensitivity(LSM303AGR_MAG_Object_t *pObj, float *Sensitivity)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b083      	sub	sp, #12
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	6039      	str	r1, [r7, #0]
  *Sensitivity = LSM303AGR_MAG_SENSITIVITY_FS_50GAUSS;
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8005aac:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 8005aae:	2300      	movs	r3, #0
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	370c      	adds	r7, #12
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr

08005abc <LSM303AGR_MAG_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetOutputDataRate(LSM303AGR_MAG_Object_t *pObj, float *Odr)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b084      	sub	sp, #16
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	60fb      	str	r3, [r7, #12]
  lsm303agr_mg_odr_m_t odr_low_level;

  /* Get current output data rate. */
  if (lsm303agr_mag_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	331c      	adds	r3, #28
 8005ace:	f107 020b 	add.w	r2, r7, #11
 8005ad2:	4611      	mov	r1, r2
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f000 fd19 	bl	800650c <lsm303agr_mag_data_rate_get>
 8005ada:	4603      	mov	r3, r0
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d002      	beq.n	8005ae6 <LSM303AGR_MAG_GetOutputDataRate+0x2a>
  {
    return LSM303AGR_ERROR;
 8005ae0:	f04f 33ff 	mov.w	r3, #4294967295
 8005ae4:	e023      	b.n	8005b2e <LSM303AGR_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 8005ae6:	7afb      	ldrb	r3, [r7, #11]
 8005ae8:	2b03      	cmp	r3, #3
 8005aea:	d81b      	bhi.n	8005b24 <LSM303AGR_MAG_GetOutputDataRate+0x68>
 8005aec:	a201      	add	r2, pc, #4	; (adr r2, 8005af4 <LSM303AGR_MAG_GetOutputDataRate+0x38>)
 8005aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005af2:	bf00      	nop
 8005af4:	08005b05 	.word	0x08005b05
 8005af8:	08005b0d 	.word	0x08005b0d
 8005afc:	08005b15 	.word	0x08005b15
 8005b00:	08005b1d 	.word	0x08005b1d
  {
    case LSM303AGR_MG_ODR_10Hz:
      *Odr = 10.0f;
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	4a0c      	ldr	r2, [pc, #48]	; (8005b38 <LSM303AGR_MAG_GetOutputDataRate+0x7c>)
 8005b08:	601a      	str	r2, [r3, #0]
      break;
 8005b0a:	e00f      	b.n	8005b2c <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_20Hz:
      *Odr = 20.0f;
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	4a0b      	ldr	r2, [pc, #44]	; (8005b3c <LSM303AGR_MAG_GetOutputDataRate+0x80>)
 8005b10:	601a      	str	r2, [r3, #0]
      break;
 8005b12:	e00b      	b.n	8005b2c <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_50Hz:
      *Odr = 50.0f;
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	4a0a      	ldr	r2, [pc, #40]	; (8005b40 <LSM303AGR_MAG_GetOutputDataRate+0x84>)
 8005b18:	601a      	str	r2, [r3, #0]
      break;
 8005b1a:	e007      	b.n	8005b2c <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_100Hz:
      *Odr = 100.0f;
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	4a09      	ldr	r2, [pc, #36]	; (8005b44 <LSM303AGR_MAG_GetOutputDataRate+0x88>)
 8005b20:	601a      	str	r2, [r3, #0]
      break;
 8005b22:	e003      	b.n	8005b2c <LSM303AGR_MAG_GetOutputDataRate+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8005b24:	f04f 33ff 	mov.w	r3, #4294967295
 8005b28:	60fb      	str	r3, [r7, #12]
      break;
 8005b2a:	bf00      	nop
  }

  return ret;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3710      	adds	r7, #16
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	bf00      	nop
 8005b38:	41200000 	.word	0x41200000
 8005b3c:	41a00000 	.word	0x41a00000
 8005b40:	42480000 	.word	0x42480000
 8005b44:	42c80000 	.word	0x42c80000

08005b48 <LSM303AGR_MAG_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_SetOutputDataRate(LSM303AGR_MAG_Object_t *pObj, float Odr)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b084      	sub	sp, #16
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	6039      	str	r1, [r7, #0]
  lsm303agr_mg_odr_m_t new_odr;

  new_odr = (Odr <= 10.000f) ? LSM303AGR_MG_ODR_10Hz
            : (Odr <= 20.000f) ? LSM303AGR_MG_ODR_20Hz
 8005b52:	edd7 7a00 	vldr	s15, [r7]
 8005b56:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005b5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b62:	d801      	bhi.n	8005b68 <LSM303AGR_MAG_SetOutputDataRate+0x20>
 8005b64:	2300      	movs	r3, #0
 8005b66:	e016      	b.n	8005b96 <LSM303AGR_MAG_SetOutputDataRate+0x4e>
 8005b68:	edd7 7a00 	vldr	s15, [r7]
 8005b6c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8005b70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b78:	d801      	bhi.n	8005b7e <LSM303AGR_MAG_SetOutputDataRate+0x36>
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e00b      	b.n	8005b96 <LSM303AGR_MAG_SetOutputDataRate+0x4e>
 8005b7e:	edd7 7a00 	vldr	s15, [r7]
 8005b82:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8005bbc <LSM303AGR_MAG_SetOutputDataRate+0x74>
 8005b86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b8e:	d801      	bhi.n	8005b94 <LSM303AGR_MAG_SetOutputDataRate+0x4c>
 8005b90:	2302      	movs	r3, #2
 8005b92:	e000      	b.n	8005b96 <LSM303AGR_MAG_SetOutputDataRate+0x4e>
 8005b94:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LSM303AGR_MG_ODR_10Hz
 8005b96:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LSM303AGR_MG_ODR_50Hz
            :                    LSM303AGR_MG_ODR_100Hz;

  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	331c      	adds	r3, #28
 8005b9c:	7bfa      	ldrb	r2, [r7, #15]
 8005b9e:	4611      	mov	r1, r2
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f000 fc8c 	bl	80064be <lsm303agr_mag_data_rate_set>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d002      	beq.n	8005bb2 <LSM303AGR_MAG_SetOutputDataRate+0x6a>
  {
    return LSM303AGR_ERROR;
 8005bac:	f04f 33ff 	mov.w	r3, #4294967295
 8005bb0:	e000      	b.n	8005bb4 <LSM303AGR_MAG_SetOutputDataRate+0x6c>
  }

  return LSM303AGR_OK;
 8005bb2:	2300      	movs	r3, #0
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3710      	adds	r7, #16
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}
 8005bbc:	42480000 	.word	0x42480000

08005bc0 <LSM303AGR_MAG_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t *FullScale)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b083      	sub	sp, #12
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	2232      	movs	r2, #50	; 0x32
 8005bce:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 8005bd0:	2300      	movs	r3, #0
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	370c      	adds	r7, #12
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr

08005bde <LSM303AGR_MAG_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_SetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t FullScale)
{
 8005bde:	b480      	push	{r7}
 8005be0:	b083      	sub	sp, #12
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	6078      	str	r0, [r7, #4]
 8005be6:	6039      	str	r1, [r7, #0]
  return LSM303AGR_OK;
 8005be8:	2300      	movs	r3, #0
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	370c      	adds	r7, #12
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr

08005bf6 <LSM303AGR_MAG_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetAxesRaw(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 8005bf6:	b580      	push	{r7, lr}
 8005bf8:	b084      	sub	sp, #16
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]
 8005bfe:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM303AGR_OK)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	331c      	adds	r3, #28
 8005c04:	f107 0208 	add.w	r2, r7, #8
 8005c08:	4611      	mov	r1, r2
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f000 fcdc 	bl	80065c8 <lsm303agr_magnetic_raw_get>
 8005c10:	4603      	mov	r3, r0
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d002      	beq.n	8005c1c <LSM303AGR_MAG_GetAxesRaw+0x26>
  {
    return LSM303AGR_ERROR;
 8005c16:	f04f 33ff 	mov.w	r3, #4294967295
 8005c1a:	e00c      	b.n	8005c36 <LSM303AGR_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8005c1c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8005c24:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8005c2c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	809a      	strh	r2, [r3, #4]

  return LSM303AGR_OK;
 8005c34:	2300      	movs	r3, #0
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3710      	adds	r7, #16
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}

08005c3e <LSM303AGR_MAG_GetAxes>:
 * @param  pObj the device pObj
 * @param  MagneticField pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetAxes(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Axes_t *MagneticField)
{
 8005c3e:	b580      	push	{r7, lr}
 8005c40:	b086      	sub	sp, #24
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	6078      	str	r0, [r7, #4]
 8005c46:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM303AGR_OK)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	331c      	adds	r3, #28
 8005c4c:	f107 0210 	add.w	r2, r7, #16
 8005c50:	4611      	mov	r1, r2
 8005c52:	4618      	mov	r0, r3
 8005c54:	f000 fcb8 	bl	80065c8 <lsm303agr_magnetic_raw_get>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d002      	beq.n	8005c64 <LSM303AGR_MAG_GetAxes+0x26>
  {
    return LSM303AGR_ERROR;
 8005c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8005c62:	e036      	b.n	8005cd2 <LSM303AGR_MAG_GetAxes+0x94>
  }

  /* Get LSM303AGR actual sensitivity. */
  (void)LSM303AGR_MAG_GetSensitivity(pObj, &sensitivity);
 8005c64:	f107 030c 	add.w	r3, r7, #12
 8005c68:	4619      	mov	r1, r3
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f7ff ff16 	bl	8005a9c <LSM303AGR_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8005c70:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005c74:	ee07 3a90 	vmov	s15, r3
 8005c78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005c7c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005c80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c88:	ee17 2a90 	vmov	r2, s15
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8005c90:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005c94:	ee07 3a90 	vmov	s15, r3
 8005c98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005c9c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005ca0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ca4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005ca8:	ee17 2a90 	vmov	r2, s15
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8005cb0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005cb4:	ee07 3a90 	vmov	s15, r3
 8005cb8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005cbc:	edd7 7a03 	vldr	s15, [r7, #12]
 8005cc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005cc8:	ee17 2a90 	vmov	r2, s15
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 8005cd0:	2300      	movs	r3, #0
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3718      	adds	r7, #24
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
	...

08005cdc <LSM303AGR_ACC_GetSensitivityHR>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityHR(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b084      	sub	sp, #16
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	331c      	adds	r3, #28
 8005cee:	f107 020b 	add.w	r2, r7, #11
 8005cf2:	4611      	mov	r1, r2
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f000 fb4d 	bl	8006394 <lsm303agr_xl_full_scale_get>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d002      	beq.n	8005d06 <LSM303AGR_ACC_GetSensitivityHR+0x2a>
  {
    return LSM303AGR_ERROR;
 8005d00:	f04f 33ff 	mov.w	r3, #4294967295
 8005d04:	e023      	b.n	8005d4e <LSM303AGR_ACC_GetSensitivityHR+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 8005d06:	7afb      	ldrb	r3, [r7, #11]
 8005d08:	2b03      	cmp	r3, #3
 8005d0a:	d81b      	bhi.n	8005d44 <LSM303AGR_ACC_GetSensitivityHR+0x68>
 8005d0c:	a201      	add	r2, pc, #4	; (adr r2, 8005d14 <LSM303AGR_ACC_GetSensitivityHR+0x38>)
 8005d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d12:	bf00      	nop
 8005d14:	08005d25 	.word	0x08005d25
 8005d18:	08005d2d 	.word	0x08005d2d
 8005d1c:	08005d35 	.word	0x08005d35
 8005d20:	08005d3d 	.word	0x08005d3d
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_HIGH_RESOLUTION_MODE;
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	4a0c      	ldr	r2, [pc, #48]	; (8005d58 <LSM303AGR_ACC_GetSensitivityHR+0x7c>)
 8005d28:	601a      	str	r2, [r3, #0]
      break;
 8005d2a:	e00f      	b.n	8005d4c <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_HIGH_RESOLUTION_MODE;
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	4a0b      	ldr	r2, [pc, #44]	; (8005d5c <LSM303AGR_ACC_GetSensitivityHR+0x80>)
 8005d30:	601a      	str	r2, [r3, #0]
      break;
 8005d32:	e00b      	b.n	8005d4c <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_HIGH_RESOLUTION_MODE;
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	4a0a      	ldr	r2, [pc, #40]	; (8005d60 <LSM303AGR_ACC_GetSensitivityHR+0x84>)
 8005d38:	601a      	str	r2, [r3, #0]
      break;
 8005d3a:	e007      	b.n	8005d4c <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_HIGH_RESOLUTION_MODE;
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	4a09      	ldr	r2, [pc, #36]	; (8005d64 <LSM303AGR_ACC_GetSensitivityHR+0x88>)
 8005d40:	601a      	str	r2, [r3, #0]
      break;
 8005d42:	e003      	b.n	8005d4c <LSM303AGR_ACC_GetSensitivityHR+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8005d44:	f04f 33ff 	mov.w	r3, #4294967295
 8005d48:	60fb      	str	r3, [r7, #12]
      break;
 8005d4a:	bf00      	nop
  }

  return ret;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3710      	adds	r7, #16
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	bf00      	nop
 8005d58:	3f7ae148 	.word	0x3f7ae148
 8005d5c:	3ff9999a 	.word	0x3ff9999a
 8005d60:	4079999a 	.word	0x4079999a
 8005d64:	413b851f 	.word	0x413b851f

08005d68 <LSM303AGR_ACC_GetSensitivityNM>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityNM(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8005d72:	2300      	movs	r3, #0
 8005d74:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	331c      	adds	r3, #28
 8005d7a:	f107 020b 	add.w	r2, r7, #11
 8005d7e:	4611      	mov	r1, r2
 8005d80:	4618      	mov	r0, r3
 8005d82:	f000 fb07 	bl	8006394 <lsm303agr_xl_full_scale_get>
 8005d86:	4603      	mov	r3, r0
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d002      	beq.n	8005d92 <LSM303AGR_ACC_GetSensitivityNM+0x2a>
  {
    return LSM303AGR_ERROR;
 8005d8c:	f04f 33ff 	mov.w	r3, #4294967295
 8005d90:	e023      	b.n	8005dda <LSM303AGR_ACC_GetSensitivityNM+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 8005d92:	7afb      	ldrb	r3, [r7, #11]
 8005d94:	2b03      	cmp	r3, #3
 8005d96:	d81b      	bhi.n	8005dd0 <LSM303AGR_ACC_GetSensitivityNM+0x68>
 8005d98:	a201      	add	r2, pc, #4	; (adr r2, 8005da0 <LSM303AGR_ACC_GetSensitivityNM+0x38>)
 8005d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d9e:	bf00      	nop
 8005da0:	08005db1 	.word	0x08005db1
 8005da4:	08005db9 	.word	0x08005db9
 8005da8:	08005dc1 	.word	0x08005dc1
 8005dac:	08005dc9 	.word	0x08005dc9
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_NORMAL_MODE;
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	4a0c      	ldr	r2, [pc, #48]	; (8005de4 <LSM303AGR_ACC_GetSensitivityNM+0x7c>)
 8005db4:	601a      	str	r2, [r3, #0]
      break;
 8005db6:	e00f      	b.n	8005dd8 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_NORMAL_MODE;
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	4a0b      	ldr	r2, [pc, #44]	; (8005de8 <LSM303AGR_ACC_GetSensitivityNM+0x80>)
 8005dbc:	601a      	str	r2, [r3, #0]
      break;
 8005dbe:	e00b      	b.n	8005dd8 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_NORMAL_MODE;
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	4a0a      	ldr	r2, [pc, #40]	; (8005dec <LSM303AGR_ACC_GetSensitivityNM+0x84>)
 8005dc4:	601a      	str	r2, [r3, #0]
      break;
 8005dc6:	e007      	b.n	8005dd8 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_NORMAL_MODE;
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	4a09      	ldr	r2, [pc, #36]	; (8005df0 <LSM303AGR_ACC_GetSensitivityNM+0x88>)
 8005dcc:	601a      	str	r2, [r3, #0]
      break;
 8005dce:	e003      	b.n	8005dd8 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8005dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8005dd4:	60fb      	str	r3, [r7, #12]
      break;
 8005dd6:	bf00      	nop
  }

  return ret;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3710      	adds	r7, #16
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
 8005de2:	bf00      	nop
 8005de4:	4079999a 	.word	0x4079999a
 8005de8:	40fa3d71 	.word	0x40fa3d71
 8005dec:	417a147b 	.word	0x417a147b
 8005df0:	423b999a 	.word	0x423b999a

08005df4 <LSM303AGR_ACC_GetSensitivityLP>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityLP(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	331c      	adds	r3, #28
 8005e06:	f107 020b 	add.w	r2, r7, #11
 8005e0a:	4611      	mov	r1, r2
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f000 fac1 	bl	8006394 <lsm303agr_xl_full_scale_get>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d002      	beq.n	8005e1e <LSM303AGR_ACC_GetSensitivityLP+0x2a>
  {
    return LSM303AGR_ERROR;
 8005e18:	f04f 33ff 	mov.w	r3, #4294967295
 8005e1c:	e023      	b.n	8005e66 <LSM303AGR_ACC_GetSensitivityLP+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 8005e1e:	7afb      	ldrb	r3, [r7, #11]
 8005e20:	2b03      	cmp	r3, #3
 8005e22:	d81b      	bhi.n	8005e5c <LSM303AGR_ACC_GetSensitivityLP+0x68>
 8005e24:	a201      	add	r2, pc, #4	; (adr r2, 8005e2c <LSM303AGR_ACC_GetSensitivityLP+0x38>)
 8005e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e2a:	bf00      	nop
 8005e2c:	08005e3d 	.word	0x08005e3d
 8005e30:	08005e45 	.word	0x08005e45
 8005e34:	08005e4d 	.word	0x08005e4d
 8005e38:	08005e55 	.word	0x08005e55
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_LOW_POWER_MODE;
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	4a0c      	ldr	r2, [pc, #48]	; (8005e70 <LSM303AGR_ACC_GetSensitivityLP+0x7c>)
 8005e40:	601a      	str	r2, [r3, #0]
      break;
 8005e42:	e00f      	b.n	8005e64 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_LOW_POWER_MODE;
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	4a0b      	ldr	r2, [pc, #44]	; (8005e74 <LSM303AGR_ACC_GetSensitivityLP+0x80>)
 8005e48:	601a      	str	r2, [r3, #0]
      break;
 8005e4a:	e00b      	b.n	8005e64 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_LOW_POWER_MODE;
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	4a0a      	ldr	r2, [pc, #40]	; (8005e78 <LSM303AGR_ACC_GetSensitivityLP+0x84>)
 8005e50:	601a      	str	r2, [r3, #0]
      break;
 8005e52:	e007      	b.n	8005e64 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_LOW_POWER_MODE;
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	4a09      	ldr	r2, [pc, #36]	; (8005e7c <LSM303AGR_ACC_GetSensitivityLP+0x88>)
 8005e58:	601a      	str	r2, [r3, #0]
      break;
 8005e5a:	e003      	b.n	8005e64 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8005e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8005e60:	60fb      	str	r3, [r7, #12]
      break;
 8005e62:	bf00      	nop
  }

  return ret;
 8005e64:	68fb      	ldr	r3, [r7, #12]
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3710      	adds	r7, #16
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	417a147b 	.word	0x417a147b
 8005e74:	41fa147b 	.word	0x41fa147b
 8005e78:	427a147b 	.word	0x427a147b
 8005e7c:	433b947b 	.word	0x433b947b

08005e80 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Enabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b084      	sub	sp, #16
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
  lsm303agr_odr_a_t new_odr;

  new_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
            : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 8005e8a:	edd7 7a00 	vldr	s15, [r7]
 8005e8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e9a:	d801      	bhi.n	8005ea0 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x20>
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	e037      	b.n	8005f10 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x90>
 8005ea0:	edd7 7a00 	vldr	s15, [r7]
 8005ea4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005ea8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005eb0:	d801      	bhi.n	8005eb6 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x36>
 8005eb2:	2302      	movs	r3, #2
 8005eb4:	e02c      	b.n	8005f10 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x90>
 8005eb6:	edd7 7a00 	vldr	s15, [r7]
 8005eba:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8005ebe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ec6:	d801      	bhi.n	8005ecc <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x4c>
 8005ec8:	2303      	movs	r3, #3
 8005eca:	e021      	b.n	8005f10 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x90>
 8005ecc:	edd7 7a00 	vldr	s15, [r7]
 8005ed0:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8005f38 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xb8>
 8005ed4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005edc:	d801      	bhi.n	8005ee2 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x62>
 8005ede:	2304      	movs	r3, #4
 8005ee0:	e016      	b.n	8005f10 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x90>
 8005ee2:	edd7 7a00 	vldr	s15, [r7]
 8005ee6:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8005f3c <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8005eea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ef2:	d801      	bhi.n	8005ef8 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x78>
 8005ef4:	2305      	movs	r3, #5
 8005ef6:	e00b      	b.n	8005f10 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x90>
 8005ef8:	edd7 7a00 	vldr	s15, [r7]
 8005efc:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8005f40 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8005f00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f08:	d801      	bhi.n	8005f0e <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x8e>
 8005f0a:	2306      	movs	r3, #6
 8005f0c:	e000      	b.n	8005f10 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x90>
 8005f0e:	2307      	movs	r3, #7
  new_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 8005f10:	73fb      	strb	r3, [r7, #15]
            : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
            : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
            :                    LSM303AGR_XL_ODR_400Hz;

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	331c      	adds	r3, #28
 8005f16:	7bfa      	ldrb	r2, [r7, #15]
 8005f18:	4611      	mov	r1, r2
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f000 f992 	bl	8006244 <lsm303agr_xl_data_rate_set>
 8005f20:	4603      	mov	r3, r0
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d002      	beq.n	8005f2c <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xac>
  {
    return LSM303AGR_ERROR;
 8005f26:	f04f 33ff 	mov.w	r3, #4294967295
 8005f2a:	e000      	b.n	8005f2e <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xae>
  }

  return LSM303AGR_OK;
 8005f2c:	2300      	movs	r3, #0
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3710      	adds	r7, #16
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop
 8005f38:	42480000 	.word	0x42480000
 8005f3c:	42c80000 	.word	0x42c80000
 8005f40:	43480000 	.word	0x43480000

08005f44 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Disabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b083      	sub	sp, #12
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	6039      	str	r1, [r7, #0]
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
                  : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 8005f4e:	edd7 7a00 	vldr	s15, [r7]
 8005f52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f5e:	d801      	bhi.n	8005f64 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x20>
 8005f60:	2301      	movs	r3, #1
 8005f62:	e037      	b.n	8005fd4 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x90>
 8005f64:	edd7 7a00 	vldr	s15, [r7]
 8005f68:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005f6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f74:	d801      	bhi.n	8005f7a <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x36>
 8005f76:	2302      	movs	r3, #2
 8005f78:	e02c      	b.n	8005fd4 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x90>
 8005f7a:	edd7 7a00 	vldr	s15, [r7]
 8005f7e:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8005f82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f8a:	d801      	bhi.n	8005f90 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x4c>
 8005f8c:	2303      	movs	r3, #3
 8005f8e:	e021      	b.n	8005fd4 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x90>
 8005f90:	edd7 7a00 	vldr	s15, [r7]
 8005f94:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005fe8 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xa4>
 8005f98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fa0:	d801      	bhi.n	8005fa6 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x62>
 8005fa2:	2304      	movs	r3, #4
 8005fa4:	e016      	b.n	8005fd4 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x90>
 8005fa6:	edd7 7a00 	vldr	s15, [r7]
 8005faa:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8005fec <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xa8>
 8005fae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fb6:	d801      	bhi.n	8005fbc <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x78>
 8005fb8:	2305      	movs	r3, #5
 8005fba:	e00b      	b.n	8005fd4 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x90>
 8005fbc:	edd7 7a00 	vldr	s15, [r7]
 8005fc0:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8005ff0 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xac>
 8005fc4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fcc:	d801      	bhi.n	8005fd2 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x8e>
 8005fce:	2306      	movs	r3, #6
 8005fd0:	e000      	b.n	8005fd4 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x90>
 8005fd2:	2307      	movs	r3, #7
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
                  : (Odr <=   50.0f) ? LSM303AGR_XL_ODR_50Hz
                  : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
                  : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
                  :                    LSM303AGR_XL_ODR_400Hz;

  return LSM303AGR_OK;
 8005fda:	2300      	movs	r3, #0
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	370c      	adds	r7, #12
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr
 8005fe8:	42480000 	.word	0x42480000
 8005fec:	42c80000 	.word	0x42c80000
 8005ff0:	43480000 	.word	0x43480000

08005ff4 <ReadAccRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005ff4:	b590      	push	{r4, r7, lr}
 8005ff6:	b087      	sub	sp, #28
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	60f8      	str	r0, [r7, #12]
 8005ffc:	607a      	str	r2, [r7, #4]
 8005ffe:	461a      	mov	r2, r3
 8006000:	460b      	mov	r3, r1
 8006002:	72fb      	strb	r3, [r7, #11]
 8006004:	4613      	mov	r3, r2
 8006006:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d10e      	bne.n	8006032 <ReadAccRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	695c      	ldr	r4, [r3, #20]
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	7b1b      	ldrb	r3, [r3, #12]
 800601c:	b298      	uxth	r0, r3
 800601e:	7afb      	ldrb	r3, [r7, #11]
 8006020:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006024:	b2db      	uxtb	r3, r3
 8006026:	b299      	uxth	r1, r3
 8006028:	893b      	ldrh	r3, [r7, #8]
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	47a0      	blx	r4
 800602e:	4603      	mov	r3, r0
 8006030:	e00d      	b.n	800604e <ReadAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	695c      	ldr	r4, [r3, #20]
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	7b1b      	ldrb	r3, [r3, #12]
 800603a:	b298      	uxth	r0, r3
 800603c:	7afb      	ldrb	r3, [r7, #11]
 800603e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006042:	b2db      	uxtb	r3, r3
 8006044:	b299      	uxth	r1, r3
 8006046:	893b      	ldrh	r3, [r7, #8]
 8006048:	687a      	ldr	r2, [r7, #4]
 800604a:	47a0      	blx	r4
 800604c:	4603      	mov	r3, r0
  }
}
 800604e:	4618      	mov	r0, r3
 8006050:	371c      	adds	r7, #28
 8006052:	46bd      	mov	sp, r7
 8006054:	bd90      	pop	{r4, r7, pc}

08006056 <WriteAccRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8006056:	b590      	push	{r4, r7, lr}
 8006058:	b087      	sub	sp, #28
 800605a:	af00      	add	r7, sp, #0
 800605c:	60f8      	str	r0, [r7, #12]
 800605e:	607a      	str	r2, [r7, #4]
 8006060:	461a      	mov	r2, r3
 8006062:	460b      	mov	r3, r1
 8006064:	72fb      	strb	r3, [r7, #11]
 8006066:	4613      	mov	r3, r2
 8006068:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d10e      	bne.n	8006094 <WriteAccRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	691c      	ldr	r4, [r3, #16]
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	7b1b      	ldrb	r3, [r3, #12]
 800607e:	b298      	uxth	r0, r3
 8006080:	7afb      	ldrb	r3, [r7, #11]
 8006082:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006086:	b2db      	uxtb	r3, r3
 8006088:	b299      	uxth	r1, r3
 800608a:	893b      	ldrh	r3, [r7, #8]
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	47a0      	blx	r4
 8006090:	4603      	mov	r3, r0
 8006092:	e00d      	b.n	80060b0 <WriteAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	691c      	ldr	r4, [r3, #16]
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	7b1b      	ldrb	r3, [r3, #12]
 800609c:	b298      	uxth	r0, r3
 800609e:	7afb      	ldrb	r3, [r7, #11]
 80060a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	b299      	uxth	r1, r3
 80060a8:	893b      	ldrh	r3, [r7, #8]
 80060aa:	687a      	ldr	r2, [r7, #4]
 80060ac:	47a0      	blx	r4
 80060ae:	4603      	mov	r3, r0
  }
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	371c      	adds	r7, #28
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd90      	pop	{r4, r7, pc}

080060b8 <ReadMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80060b8:	b590      	push	{r4, r7, lr}
 80060ba:	b087      	sub	sp, #28
 80060bc:	af00      	add	r7, sp, #0
 80060be:	60f8      	str	r0, [r7, #12]
 80060c0:	607a      	str	r2, [r7, #4]
 80060c2:	461a      	mov	r2, r3
 80060c4:	460b      	mov	r3, r1
 80060c6:	72fb      	strb	r3, [r7, #11]
 80060c8:	4613      	mov	r3, r2
 80060ca:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d10e      	bne.n	80060f6 <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	695c      	ldr	r4, [r3, #20]
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	7b1b      	ldrb	r3, [r3, #12]
 80060e0:	b298      	uxth	r0, r3
 80060e2:	7afb      	ldrb	r3, [r7, #11]
 80060e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	b299      	uxth	r1, r3
 80060ec:	893b      	ldrh	r3, [r7, #8]
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	47a0      	blx	r4
 80060f2:	4603      	mov	r3, r0
 80060f4:	e00d      	b.n	8006112 <ReadMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	695c      	ldr	r4, [r3, #20]
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	7b1b      	ldrb	r3, [r3, #12]
 80060fe:	b298      	uxth	r0, r3
 8006100:	7afb      	ldrb	r3, [r7, #11]
 8006102:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006106:	b2db      	uxtb	r3, r3
 8006108:	b299      	uxth	r1, r3
 800610a:	893b      	ldrh	r3, [r7, #8]
 800610c:	687a      	ldr	r2, [r7, #4]
 800610e:	47a0      	blx	r4
 8006110:	4603      	mov	r3, r0
  }
}
 8006112:	4618      	mov	r0, r3
 8006114:	371c      	adds	r7, #28
 8006116:	46bd      	mov	sp, r7
 8006118:	bd90      	pop	{r4, r7, pc}

0800611a <WriteMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800611a:	b590      	push	{r4, r7, lr}
 800611c:	b087      	sub	sp, #28
 800611e:	af00      	add	r7, sp, #0
 8006120:	60f8      	str	r0, [r7, #12]
 8006122:	607a      	str	r2, [r7, #4]
 8006124:	461a      	mov	r2, r3
 8006126:	460b      	mov	r3, r1
 8006128:	72fb      	strb	r3, [r7, #11]
 800612a:	4613      	mov	r3, r2
 800612c:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d10e      	bne.n	8006158 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	691c      	ldr	r4, [r3, #16]
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	7b1b      	ldrb	r3, [r3, #12]
 8006142:	b298      	uxth	r0, r3
 8006144:	7afb      	ldrb	r3, [r7, #11]
 8006146:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800614a:	b2db      	uxtb	r3, r3
 800614c:	b299      	uxth	r1, r3
 800614e:	893b      	ldrh	r3, [r7, #8]
 8006150:	687a      	ldr	r2, [r7, #4]
 8006152:	47a0      	blx	r4
 8006154:	4603      	mov	r3, r0
 8006156:	e00d      	b.n	8006174 <WriteMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	691c      	ldr	r4, [r3, #16]
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	7b1b      	ldrb	r3, [r3, #12]
 8006160:	b298      	uxth	r0, r3
 8006162:	7afb      	ldrb	r3, [r7, #11]
 8006164:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006168:	b2db      	uxtb	r3, r3
 800616a:	b299      	uxth	r1, r3
 800616c:	893b      	ldrh	r3, [r7, #8]
 800616e:	687a      	ldr	r2, [r7, #4]
 8006170:	47a0      	blx	r4
 8006172:	4603      	mov	r3, r0
  }
}
 8006174:	4618      	mov	r0, r3
 8006176:	371c      	adds	r7, #28
 8006178:	46bd      	mov	sp, r7
 800617a:	bd90      	pop	{r4, r7, pc}

0800617c <lsm303agr_read_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm303agr_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 800617c:	b590      	push	{r4, r7, lr}
 800617e:	b087      	sub	sp, #28
 8006180:	af00      	add	r7, sp, #0
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	607a      	str	r2, [r7, #4]
 8006186:	461a      	mov	r2, r3
 8006188:	460b      	mov	r3, r1
 800618a:	72fb      	strb	r3, [r7, #11]
 800618c:	4613      	mov	r3, r2
 800618e:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	685c      	ldr	r4, [r3, #4]
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	6898      	ldr	r0, [r3, #8]
 8006198:	893b      	ldrh	r3, [r7, #8]
 800619a:	7af9      	ldrb	r1, [r7, #11]
 800619c:	687a      	ldr	r2, [r7, #4]
 800619e:	47a0      	blx	r4
 80061a0:	6178      	str	r0, [r7, #20]
  return ret;
 80061a2:	697b      	ldr	r3, [r7, #20]
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	371c      	adds	r7, #28
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd90      	pop	{r4, r7, pc}

080061ac <lsm303agr_write_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm303agr_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 80061ac:	b590      	push	{r4, r7, lr}
 80061ae:	b087      	sub	sp, #28
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	607a      	str	r2, [r7, #4]
 80061b6:	461a      	mov	r2, r3
 80061b8:	460b      	mov	r3, r1
 80061ba:	72fb      	strb	r3, [r7, #11]
 80061bc:	4613      	mov	r3, r2
 80061be:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681c      	ldr	r4, [r3, #0]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	6898      	ldr	r0, [r3, #8]
 80061c8:	893b      	ldrh	r3, [r7, #8]
 80061ca:	7af9      	ldrb	r1, [r7, #11]
 80061cc:	687a      	ldr	r2, [r7, #4]
 80061ce:	47a0      	blx	r4
 80061d0:	6178      	str	r0, [r7, #20]
  return ret;
 80061d2:	697b      	ldr	r3, [r7, #20]
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	371c      	adds	r7, #28
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd90      	pop	{r4, r7, pc}

080061dc <lsm303agr_xl_operating_mode_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_operating_mode_get(stmdev_ctx_t *ctx,
                                        lsm303agr_op_md_a_t *val)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b086      	sub	sp, #24
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;
  
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 80061e6:	f107 020c 	add.w	r2, r7, #12
 80061ea:	2301      	movs	r3, #1
 80061ec:	2120      	movs	r1, #32
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f7ff ffc4 	bl	800617c <lsm303agr_read_reg>
 80061f4:	6178      	str	r0, [r7, #20]
                           (uint8_t*)&ctrl_reg1_a, 1);
  if(ret == 0){
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d107      	bne.n	800620c <lsm303agr_xl_operating_mode_get+0x30>
    ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 80061fc:	f107 0210 	add.w	r2, r7, #16
 8006200:	2301      	movs	r3, #1
 8006202:	2123      	movs	r1, #35	; 0x23
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f7ff ffb9 	bl	800617c <lsm303agr_read_reg>
 800620a:	6178      	str	r0, [r7, #20]
                             (uint8_t*)&ctrl_reg4_a, 1);
  }

  if ( ctrl_reg1_a.lpen != PROPERTY_DISABLE ){
 800620c:	7b3b      	ldrb	r3, [r7, #12]
 800620e:	f003 0308 	and.w	r3, r3, #8
 8006212:	b2db      	uxtb	r3, r3
 8006214:	2b00      	cmp	r3, #0
 8006216:	d003      	beq.n	8006220 <lsm303agr_xl_operating_mode_get+0x44>
    *val = LSM303AGR_LP_8bit;
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	2202      	movs	r2, #2
 800621c:	701a      	strb	r2, [r3, #0]
 800621e:	e00c      	b.n	800623a <lsm303agr_xl_operating_mode_get+0x5e>
  } else if (ctrl_reg4_a.hr  != PROPERTY_DISABLE ) {
 8006220:	7c3b      	ldrb	r3, [r7, #16]
 8006222:	f003 0308 	and.w	r3, r3, #8
 8006226:	b2db      	uxtb	r3, r3
 8006228:	2b00      	cmp	r3, #0
 800622a:	d003      	beq.n	8006234 <lsm303agr_xl_operating_mode_get+0x58>
    *val = LSM303AGR_HR_12bit;
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	2200      	movs	r2, #0
 8006230:	701a      	strb	r2, [r3, #0]
 8006232:	e002      	b.n	800623a <lsm303agr_xl_operating_mode_get+0x5e>
  } else{
    *val = LSM303AGR_NM_10bit;
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	2201      	movs	r2, #1
 8006238:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800623a:	697b      	ldr	r3, [r7, #20]
}
 800623c:	4618      	mov	r0, r3
 800623e:	3718      	adds	r7, #24
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}

08006244 <lsm303agr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t val)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b084      	sub	sp, #16
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	460b      	mov	r3, r1
 800624e:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8006250:	f107 0208 	add.w	r2, r7, #8
 8006254:	2301      	movs	r3, #1
 8006256:	2120      	movs	r1, #32
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f7ff ff8f 	bl	800617c <lsm303agr_read_reg>
 800625e:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&ctrl_reg1_a, 1);
  if(ret == 0){
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d10f      	bne.n	8006286 <lsm303agr_xl_data_rate_set+0x42>
    ctrl_reg1_a.odr = (uint8_t)val;
 8006266:	78fb      	ldrb	r3, [r7, #3]
 8006268:	f003 030f 	and.w	r3, r3, #15
 800626c:	b2da      	uxtb	r2, r3
 800626e:	7a3b      	ldrb	r3, [r7, #8]
 8006270:	f362 1307 	bfi	r3, r2, #4, #4
 8006274:	723b      	strb	r3, [r7, #8]
   ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8006276:	f107 0208 	add.w	r2, r7, #8
 800627a:	2301      	movs	r3, #1
 800627c:	2120      	movs	r1, #32
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f7ff ff94 	bl	80061ac <lsm303agr_write_reg>
 8006284:	60f8      	str	r0, [r7, #12]
                             (uint8_t*)&ctrl_reg1_a, 1);
  }

  return ret;
 8006286:	68fb      	ldr	r3, [r7, #12]
}
 8006288:	4618      	mov	r0, r3
 800628a:	3710      	adds	r7, #16
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}

08006290 <lsm303agr_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_get(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t *val)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b084      	sub	sp, #16
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 800629a:	f107 0208 	add.w	r2, r7, #8
 800629e:	2301      	movs	r3, #1
 80062a0:	2120      	movs	r1, #32
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f7ff ff6a 	bl	800617c <lsm303agr_read_reg>
 80062a8:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&ctrl_reg1_a, 1);

  switch (ctrl_reg1_a.odr){
 80062aa:	7a3b      	ldrb	r3, [r7, #8]
 80062ac:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80062b0:	b2db      	uxtb	r3, r3
 80062b2:	2b09      	cmp	r3, #9
 80062b4:	d83e      	bhi.n	8006334 <lsm303agr_xl_data_rate_get+0xa4>
 80062b6:	a201      	add	r2, pc, #4	; (adr r2, 80062bc <lsm303agr_xl_data_rate_get+0x2c>)
 80062b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062bc:	080062e5 	.word	0x080062e5
 80062c0:	080062ed 	.word	0x080062ed
 80062c4:	080062f5 	.word	0x080062f5
 80062c8:	080062fd 	.word	0x080062fd
 80062cc:	08006305 	.word	0x08006305
 80062d0:	0800630d 	.word	0x0800630d
 80062d4:	08006315 	.word	0x08006315
 80062d8:	0800631d 	.word	0x0800631d
 80062dc:	08006325 	.word	0x08006325
 80062e0:	0800632d 	.word	0x0800632d
    case LSM303AGR_XL_POWER_DOWN:
      *val = LSM303AGR_XL_POWER_DOWN;
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	2200      	movs	r2, #0
 80062e8:	701a      	strb	r2, [r3, #0]
      break;
 80062ea:	e027      	b.n	800633c <lsm303agr_xl_data_rate_get+0xac>
    case LSM303AGR_XL_ODR_1Hz:
      *val = LSM303AGR_XL_ODR_1Hz;
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	2201      	movs	r2, #1
 80062f0:	701a      	strb	r2, [r3, #0]
      break;
 80062f2:	e023      	b.n	800633c <lsm303agr_xl_data_rate_get+0xac>
    case LSM303AGR_XL_ODR_10Hz:
      *val = LSM303AGR_XL_ODR_10Hz;
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	2202      	movs	r2, #2
 80062f8:	701a      	strb	r2, [r3, #0]
      break;
 80062fa:	e01f      	b.n	800633c <lsm303agr_xl_data_rate_get+0xac>
    case LSM303AGR_XL_ODR_25Hz:
      *val = LSM303AGR_XL_ODR_25Hz;
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	2203      	movs	r2, #3
 8006300:	701a      	strb	r2, [r3, #0]
      break;
 8006302:	e01b      	b.n	800633c <lsm303agr_xl_data_rate_get+0xac>
    case LSM303AGR_XL_ODR_50Hz:
      *val = LSM303AGR_XL_ODR_50Hz;
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	2204      	movs	r2, #4
 8006308:	701a      	strb	r2, [r3, #0]
      break;
 800630a:	e017      	b.n	800633c <lsm303agr_xl_data_rate_get+0xac>
    case LSM303AGR_XL_ODR_100Hz:
      *val = LSM303AGR_XL_ODR_100Hz;
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	2205      	movs	r2, #5
 8006310:	701a      	strb	r2, [r3, #0]
      break;
 8006312:	e013      	b.n	800633c <lsm303agr_xl_data_rate_get+0xac>
    case LSM303AGR_XL_ODR_200Hz:
      *val = LSM303AGR_XL_ODR_200Hz;
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	2206      	movs	r2, #6
 8006318:	701a      	strb	r2, [r3, #0]
      break;
 800631a:	e00f      	b.n	800633c <lsm303agr_xl_data_rate_get+0xac>
    case LSM303AGR_XL_ODR_400Hz:
      *val = LSM303AGR_XL_ODR_400Hz;
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	2207      	movs	r2, #7
 8006320:	701a      	strb	r2, [r3, #0]
      break;
 8006322:	e00b      	b.n	800633c <lsm303agr_xl_data_rate_get+0xac>
    case LSM303AGR_XL_ODR_1kHz620_LP:
      *val = LSM303AGR_XL_ODR_1kHz620_LP;
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	2208      	movs	r2, #8
 8006328:	701a      	strb	r2, [r3, #0]
      break;
 800632a:	e007      	b.n	800633c <lsm303agr_xl_data_rate_get+0xac>
    case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
      *val = LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP;
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	2209      	movs	r2, #9
 8006330:	701a      	strb	r2, [r3, #0]
      break;
 8006332:	e003      	b.n	800633c <lsm303agr_xl_data_rate_get+0xac>
    default:
      *val = LSM303AGR_XL_POWER_DOWN;
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	2200      	movs	r2, #0
 8006338:	701a      	strb	r2, [r3, #0]
      break;
 800633a:	bf00      	nop
  }

  return ret;
 800633c:	68fb      	ldr	r3, [r7, #12]
}
 800633e:	4618      	mov	r0, r3
 8006340:	3710      	adds	r7, #16
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
 8006346:	bf00      	nop

08006348 <lsm303agr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t val)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	460b      	mov	r3, r1
 8006352:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8006354:	f107 0208 	add.w	r2, r7, #8
 8006358:	2301      	movs	r3, #1
 800635a:	2123      	movs	r1, #35	; 0x23
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f7ff ff0d 	bl	800617c <lsm303agr_read_reg>
 8006362:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&ctrl_reg4_a, 1);
  if(ret == 0){
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d10f      	bne.n	800638a <lsm303agr_xl_full_scale_set+0x42>
    ctrl_reg4_a.fs = (uint8_t)val;
 800636a:	78fb      	ldrb	r3, [r7, #3]
 800636c:	f003 0303 	and.w	r3, r3, #3
 8006370:	b2da      	uxtb	r2, r3
 8006372:	7a3b      	ldrb	r3, [r7, #8]
 8006374:	f362 1305 	bfi	r3, r2, #4, #2
 8006378:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 800637a:	f107 0208 	add.w	r2, r7, #8
 800637e:	2301      	movs	r3, #1
 8006380:	2123      	movs	r1, #35	; 0x23
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f7ff ff12 	bl	80061ac <lsm303agr_write_reg>
 8006388:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&ctrl_reg4_a, 1);
  }

  return ret;
 800638a:	68fb      	ldr	r3, [r7, #12]
}
 800638c:	4618      	mov	r0, r3
 800638e:	3710      	adds	r7, #16
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <lsm303agr_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_get(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t *val)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b084      	sub	sp, #16
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 800639e:	f107 0208 	add.w	r2, r7, #8
 80063a2:	2301      	movs	r3, #1
 80063a4:	2123      	movs	r1, #35	; 0x23
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f7ff fee8 	bl	800617c <lsm303agr_read_reg>
 80063ac:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&ctrl_reg4_a, 1);

  switch (ctrl_reg4_a.fs){
 80063ae:	7a3b      	ldrb	r3, [r7, #8]
 80063b0:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	2b03      	cmp	r3, #3
 80063b8:	d81a      	bhi.n	80063f0 <lsm303agr_xl_full_scale_get+0x5c>
 80063ba:	a201      	add	r2, pc, #4	; (adr r2, 80063c0 <lsm303agr_xl_full_scale_get+0x2c>)
 80063bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063c0:	080063d1 	.word	0x080063d1
 80063c4:	080063d9 	.word	0x080063d9
 80063c8:	080063e1 	.word	0x080063e1
 80063cc:	080063e9 	.word	0x080063e9
    case LSM303AGR_2g:
      *val = LSM303AGR_2g;
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	2200      	movs	r2, #0
 80063d4:	701a      	strb	r2, [r3, #0]
      break;
 80063d6:	e00f      	b.n	80063f8 <lsm303agr_xl_full_scale_get+0x64>
    case LSM303AGR_4g:
      *val = LSM303AGR_4g;
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	2201      	movs	r2, #1
 80063dc:	701a      	strb	r2, [r3, #0]
      break;
 80063de:	e00b      	b.n	80063f8 <lsm303agr_xl_full_scale_get+0x64>
    case LSM303AGR_8g:
      *val = LSM303AGR_8g;
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	2202      	movs	r2, #2
 80063e4:	701a      	strb	r2, [r3, #0]
      break;
 80063e6:	e007      	b.n	80063f8 <lsm303agr_xl_full_scale_get+0x64>
    case LSM303AGR_16g:
      *val = LSM303AGR_16g;
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	2203      	movs	r2, #3
 80063ec:	701a      	strb	r2, [r3, #0]
      break;
 80063ee:	e003      	b.n	80063f8 <lsm303agr_xl_full_scale_get+0x64>
    default:
      *val = LSM303AGR_2g;
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	2200      	movs	r2, #0
 80063f4:	701a      	strb	r2, [r3, #0]
      break;
 80063f6:	bf00      	nop
  }
  return ret;
 80063f8:	68fb      	ldr	r3, [r7, #12]
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3710      	adds	r7, #16
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
 8006402:	bf00      	nop

08006404 <lsm303agr_xl_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_block_data_update_set(stmdev_ctx_t *ctx,
                                           uint8_t val)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b084      	sub	sp, #16
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	460b      	mov	r3, r1
 800640e:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8006410:	f107 0208 	add.w	r2, r7, #8
 8006414:	2301      	movs	r3, #1
 8006416:	2123      	movs	r1, #35	; 0x23
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f7ff feaf 	bl	800617c <lsm303agr_read_reg>
 800641e:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&ctrl_reg4_a, 1);
  if(ret == 0){
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d10f      	bne.n	8006446 <lsm303agr_xl_block_data_update_set+0x42>
    ctrl_reg4_a.bdu = (uint8_t)val;
 8006426:	78fb      	ldrb	r3, [r7, #3]
 8006428:	f003 0301 	and.w	r3, r3, #1
 800642c:	b2da      	uxtb	r2, r3
 800642e:	7a3b      	ldrb	r3, [r7, #8]
 8006430:	f362 13c7 	bfi	r3, r2, #7, #1
 8006434:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8006436:	f107 0208 	add.w	r2, r7, #8
 800643a:	2301      	movs	r3, #1
 800643c:	2123      	movs	r1, #35	; 0x23
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f7ff feb4 	bl	80061ac <lsm303agr_write_reg>
 8006444:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&ctrl_reg4_a, 1);
  }

  return ret;
 8006446:	68fb      	ldr	r3, [r7, #12]
}
 8006448:	4618      	mov	r0, r3
 800644a:	3710      	adds	r7, #16
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}

08006450 <lsm303agr_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_acceleration_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b084      	sub	sp, #16
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUT_X_L_A, buff, 6);
 800645a:	2306      	movs	r3, #6
 800645c:	683a      	ldr	r2, [r7, #0]
 800645e:	2128      	movs	r1, #40	; 0x28
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f7ff fe8b 	bl	800617c <lsm303agr_read_reg>
 8006466:	60f8      	str	r0, [r7, #12]
  return ret;
 8006468:	68fb      	ldr	r3, [r7, #12]
}
 800646a:	4618      	mov	r0, r3
 800646c:	3710      	adds	r7, #16
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}

08006472 <lsm303agr_mag_operating_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_operating_mode_set(stmdev_ctx_t *ctx,
                                         lsm303agr_md_m_t val)
{
 8006472:	b580      	push	{r7, lr}
 8006474:	b084      	sub	sp, #16
 8006476:	af00      	add	r7, sp, #0
 8006478:	6078      	str	r0, [r7, #4]
 800647a:	460b      	mov	r3, r1
 800647c:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 800647e:	f107 0208 	add.w	r2, r7, #8
 8006482:	2301      	movs	r3, #1
 8006484:	2160      	movs	r1, #96	; 0x60
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f7ff fe78 	bl	800617c <lsm303agr_read_reg>
 800648c:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&cfg_reg_a_m, 1);
  if(ret == 0){
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d10f      	bne.n	80064b4 <lsm303agr_mag_operating_mode_set+0x42>
    cfg_reg_a_m.md = (uint8_t)val;
 8006494:	78fb      	ldrb	r3, [r7, #3]
 8006496:	f003 0303 	and.w	r3, r3, #3
 800649a:	b2da      	uxtb	r2, r3
 800649c:	7a3b      	ldrb	r3, [r7, #8]
 800649e:	f362 0301 	bfi	r3, r2, #0, #2
 80064a2:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 80064a4:	f107 0208 	add.w	r2, r7, #8
 80064a8:	2301      	movs	r3, #1
 80064aa:	2160      	movs	r1, #96	; 0x60
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f7ff fe7d 	bl	80061ac <lsm303agr_write_reg>
 80064b2:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&cfg_reg_a_m, 1);
  }

  return ret;
 80064b4:	68fb      	ldr	r3, [r7, #12]
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3710      	adds	r7, #16
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}

080064be <lsm303agr_mag_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t val)
{
 80064be:	b580      	push	{r7, lr}
 80064c0:	b084      	sub	sp, #16
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	6078      	str	r0, [r7, #4]
 80064c6:	460b      	mov	r3, r1
 80064c8:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 80064ca:	f107 0208 	add.w	r2, r7, #8
 80064ce:	2301      	movs	r3, #1
 80064d0:	2160      	movs	r1, #96	; 0x60
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f7ff fe52 	bl	800617c <lsm303agr_read_reg>
 80064d8:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&cfg_reg_a_m, 1);
  if(ret == 0){
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d10f      	bne.n	8006500 <lsm303agr_mag_data_rate_set+0x42>
    cfg_reg_a_m.odr = (uint8_t)val;
 80064e0:	78fb      	ldrb	r3, [r7, #3]
 80064e2:	f003 0303 	and.w	r3, r3, #3
 80064e6:	b2da      	uxtb	r2, r3
 80064e8:	7a3b      	ldrb	r3, [r7, #8]
 80064ea:	f362 0383 	bfi	r3, r2, #2, #2
 80064ee:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 80064f0:	f107 0208 	add.w	r2, r7, #8
 80064f4:	2301      	movs	r3, #1
 80064f6:	2160      	movs	r1, #96	; 0x60
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f7ff fe57 	bl	80061ac <lsm303agr_write_reg>
 80064fe:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&cfg_reg_a_m, 1);
  }

  return ret;
 8006500:	68fb      	ldr	r3, [r7, #12]
}
 8006502:	4618      	mov	r0, r3
 8006504:	3710      	adds	r7, #16
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}
	...

0800650c <lsm303agr_mag_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_get(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t *val)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b084      	sub	sp, #16
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	6039      	str	r1, [r7, #0]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8006516:	f107 0208 	add.w	r2, r7, #8
 800651a:	2301      	movs	r3, #1
 800651c:	2160      	movs	r1, #96	; 0x60
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f7ff fe2c 	bl	800617c <lsm303agr_read_reg>
 8006524:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&cfg_reg_a_m, 1);

    switch (cfg_reg_a_m.odr){
 8006526:	7a3b      	ldrb	r3, [r7, #8]
 8006528:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800652c:	b2db      	uxtb	r3, r3
 800652e:	2b03      	cmp	r3, #3
 8006530:	d81a      	bhi.n	8006568 <lsm303agr_mag_data_rate_get+0x5c>
 8006532:	a201      	add	r2, pc, #4	; (adr r2, 8006538 <lsm303agr_mag_data_rate_get+0x2c>)
 8006534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006538:	08006549 	.word	0x08006549
 800653c:	08006551 	.word	0x08006551
 8006540:	08006559 	.word	0x08006559
 8006544:	08006561 	.word	0x08006561
    case LSM303AGR_MG_ODR_10Hz:
      *val = LSM303AGR_MG_ODR_10Hz;
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	2200      	movs	r2, #0
 800654c:	701a      	strb	r2, [r3, #0]
      break;
 800654e:	e00f      	b.n	8006570 <lsm303agr_mag_data_rate_get+0x64>
    case LSM303AGR_MG_ODR_20Hz:
      *val = LSM303AGR_MG_ODR_20Hz;
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	2201      	movs	r2, #1
 8006554:	701a      	strb	r2, [r3, #0]
      break;
 8006556:	e00b      	b.n	8006570 <lsm303agr_mag_data_rate_get+0x64>
    case LSM303AGR_MG_ODR_50Hz:
      *val = LSM303AGR_MG_ODR_50Hz;
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	2202      	movs	r2, #2
 800655c:	701a      	strb	r2, [r3, #0]
      break;
 800655e:	e007      	b.n	8006570 <lsm303agr_mag_data_rate_get+0x64>
    case LSM303AGR_MG_ODR_100Hz:
      *val = LSM303AGR_MG_ODR_100Hz;
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	2203      	movs	r2, #3
 8006564:	701a      	strb	r2, [r3, #0]
      break;
 8006566:	e003      	b.n	8006570 <lsm303agr_mag_data_rate_get+0x64>
    default:
      *val = LSM303AGR_MG_ODR_10Hz;
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	2200      	movs	r2, #0
 800656c:	701a      	strb	r2, [r3, #0]
      break;
 800656e:	bf00      	nop
  }
  return ret;
 8006570:	68fb      	ldr	r3, [r7, #12]
}
 8006572:	4618      	mov	r0, r3
 8006574:	3710      	adds	r7, #16
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}
 800657a:	bf00      	nop

0800657c <lsm303agr_mag_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_block_data_update_set(stmdev_ctx_t *ctx,
                                            uint8_t val)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b084      	sub	sp, #16
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	460b      	mov	r3, r1
 8006586:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8006588:	f107 0208 	add.w	r2, r7, #8
 800658c:	2301      	movs	r3, #1
 800658e:	2162      	movs	r1, #98	; 0x62
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f7ff fdf3 	bl	800617c <lsm303agr_read_reg>
 8006596:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&cfg_reg_c_m, 1);
  if(ret == 0){
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d10f      	bne.n	80065be <lsm303agr_mag_block_data_update_set+0x42>
    cfg_reg_c_m.bdu = (uint8_t)val;
 800659e:	78fb      	ldrb	r3, [r7, #3]
 80065a0:	f003 0301 	and.w	r3, r3, #1
 80065a4:	b2da      	uxtb	r2, r3
 80065a6:	7a3b      	ldrb	r3, [r7, #8]
 80065a8:	f362 1304 	bfi	r3, r2, #4, #1
 80065ac:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 80065ae:	f107 0208 	add.w	r2, r7, #8
 80065b2:	2301      	movs	r3, #1
 80065b4:	2162      	movs	r1, #98	; 0x62
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f7ff fdf8 	bl	80061ac <lsm303agr_write_reg>
 80065bc:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&cfg_reg_c_m, 1);
  }

  return ret;
 80065be:	68fb      	ldr	r3, [r7, #12]
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3710      	adds	r7, #16
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}

080065c8 <lsm303agr_magnetic_raw_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_magnetic_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b084      	sub	sp, #16
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUTX_L_REG_M, buff, 6);
 80065d2:	2306      	movs	r3, #6
 80065d4:	683a      	ldr	r2, [r7, #0]
 80065d6:	2168      	movs	r1, #104	; 0x68
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f7ff fdcf 	bl	800617c <lsm303agr_read_reg>
 80065de:	60f8      	str	r0, [r7, #12]
  return ret;
 80065e0:	68fb      	ldr	r3, [r7, #12]
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3710      	adds	r7, #16
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}

080065ea <lsm303agr_xl_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80065ea:	b580      	push	{r7, lr}
 80065ec:	b084      	sub	sp, #16
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	6078      	str	r0, [r7, #4]
 80065f2:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_A, buff, 1);
 80065f4:	2301      	movs	r3, #1
 80065f6:	683a      	ldr	r2, [r7, #0]
 80065f8:	210f      	movs	r1, #15
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f7ff fdbe 	bl	800617c <lsm303agr_read_reg>
 8006600:	60f8      	str	r0, [r7, #12]
  return ret;
 8006602:	68fb      	ldr	r3, [r7, #12]
}
 8006604:	4618      	mov	r0, r3
 8006606:	3710      	adds	r7, #16
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}

0800660c <lsm303agr_mag_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b084      	sub	sp, #16
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_M, buff, 1);
 8006616:	2301      	movs	r3, #1
 8006618:	683a      	ldr	r2, [r7, #0]
 800661a:	214f      	movs	r1, #79	; 0x4f
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f7ff fdad 	bl	800617c <lsm303agr_read_reg>
 8006622:	60f8      	str	r0, [r7, #12]
  return ret;
 8006624:	68fb      	ldr	r3, [r7, #12]
}
 8006626:	4618      	mov	r0, r3
 8006628:	3710      	adds	r7, #16
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}

0800662e <lsm303agr_mag_self_test_set>:
  * @param  val    Change the values of self_test in reg CFG_REG_C_M
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800662e:	b580      	push	{r7, lr}
 8006630:	b084      	sub	sp, #16
 8006632:	af00      	add	r7, sp, #0
 8006634:	6078      	str	r0, [r7, #4]
 8006636:	460b      	mov	r3, r1
 8006638:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 800663a:	f107 0208 	add.w	r2, r7, #8
 800663e:	2301      	movs	r3, #1
 8006640:	2162      	movs	r1, #98	; 0x62
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f7ff fd9a 	bl	800617c <lsm303agr_read_reg>
 8006648:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&cfg_reg_c_m, 1);
  if(ret == 0){
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d10f      	bne.n	8006670 <lsm303agr_mag_self_test_set+0x42>
    cfg_reg_c_m.self_test = (uint8_t)val;
 8006650:	78fb      	ldrb	r3, [r7, #3]
 8006652:	f003 0301 	and.w	r3, r3, #1
 8006656:	b2da      	uxtb	r2, r3
 8006658:	7a3b      	ldrb	r3, [r7, #8]
 800665a:	f362 0341 	bfi	r3, r2, #1, #1
 800665e:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8006660:	f107 0208 	add.w	r2, r7, #8
 8006664:	2301      	movs	r3, #1
 8006666:	2162      	movs	r1, #98	; 0x62
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f7ff fd9f 	bl	80061ac <lsm303agr_write_reg>
 800666e:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&cfg_reg_c_m, 1);
  }

  return ret;
 8006670:	68fb      	ldr	r3, [r7, #12]
}
 8006672:	4618      	mov	r0, r3
 8006674:	3710      	adds	r7, #16
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}

0800667a <lsm303agr_xl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_fifo_mode_set(stmdev_ctx_t *ctx,
                                   lsm303agr_fm_a_t val)
{
 800667a:	b580      	push	{r7, lr}
 800667c:	b084      	sub	sp, #16
 800667e:	af00      	add	r7, sp, #0
 8006680:	6078      	str	r0, [r7, #4]
 8006682:	460b      	mov	r3, r1
 8006684:	70fb      	strb	r3, [r7, #3]
  lsm303agr_fifo_ctrl_reg_a_t fifo_ctrl_reg_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 8006686:	f107 0208 	add.w	r2, r7, #8
 800668a:	2301      	movs	r3, #1
 800668c:	212e      	movs	r1, #46	; 0x2e
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f7ff fd74 	bl	800617c <lsm303agr_read_reg>
 8006694:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&fifo_ctrl_reg_a, 1);
  if(ret == 0){
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d10f      	bne.n	80066bc <lsm303agr_xl_fifo_mode_set+0x42>
    fifo_ctrl_reg_a.fm = (uint8_t)val;
 800669c:	78fb      	ldrb	r3, [r7, #3]
 800669e:	f003 0303 	and.w	r3, r3, #3
 80066a2:	b2da      	uxtb	r2, r3
 80066a4:	7a3b      	ldrb	r3, [r7, #8]
 80066a6:	f362 1387 	bfi	r3, r2, #6, #2
 80066aa:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 80066ac:	f107 0208 	add.w	r2, r7, #8
 80066b0:	2301      	movs	r3, #1
 80066b2:	212e      	movs	r1, #46	; 0x2e
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f7ff fd79 	bl	80061ac <lsm303agr_write_reg>
 80066ba:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&fifo_ctrl_reg_a, 1);
  }

  return ret;
 80066bc:	68fb      	ldr	r3, [r7, #12]
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3710      	adds	r7, #16
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}

080066c6 <lsm303agr_mag_i2c_interface_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_i2c_interface_set(stmdev_ctx_t *ctx,
                                        lsm303agr_i2c_dis_m_t val)
{
 80066c6:	b580      	push	{r7, lr}
 80066c8:	b084      	sub	sp, #16
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	6078      	str	r0, [r7, #4]
 80066ce:	460b      	mov	r3, r1
 80066d0:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 80066d2:	f107 0208 	add.w	r2, r7, #8
 80066d6:	2301      	movs	r3, #1
 80066d8:	2162      	movs	r1, #98	; 0x62
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f7ff fd4e 	bl	800617c <lsm303agr_read_reg>
 80066e0:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&cfg_reg_c_m, 1);
  if(ret == 0){
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d10f      	bne.n	8006708 <lsm303agr_mag_i2c_interface_set+0x42>
    cfg_reg_c_m.i2c_dis = (uint8_t)val;
 80066e8:	78fb      	ldrb	r3, [r7, #3]
 80066ea:	f003 0301 	and.w	r3, r3, #1
 80066ee:	b2da      	uxtb	r2, r3
 80066f0:	7a3b      	ldrb	r3, [r7, #8]
 80066f2:	f362 1345 	bfi	r3, r2, #5, #1
 80066f6:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 80066f8:	f107 0208 	add.w	r2, r7, #8
 80066fc:	2301      	movs	r3, #1
 80066fe:	2162      	movs	r1, #98	; 0x62
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f7ff fd53 	bl	80061ac <lsm303agr_write_reg>
 8006706:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&cfg_reg_c_m, 1);
  }

  return ret;
 8006708:	68fb      	ldr	r3, [r7, #12]
}
 800670a:	4618      	mov	r0, r3
 800670c:	3710      	adds	r7, #16
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
	...

08006714 <LSM6DSL_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_RegisterBusIO(LSM6DSL_Object_t *pObj, LSM6DSL_IO_t *pIO)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b084      	sub	sp, #16
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 800671e:	2300      	movs	r3, #0
 8006720:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d103      	bne.n	8006730 <LSM6DSL_RegisterBusIO+0x1c>
  {
    ret = LSM6DSL_ERROR;
 8006728:	f04f 33ff 	mov.w	r3, #4294967295
 800672c:	60fb      	str	r3, [r7, #12]
 800672e:	e04d      	b.n	80067cc <LSM6DSL_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	681a      	ldr	r2, [r3, #0]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	685a      	ldr	r2, [r3, #4]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	689a      	ldr	r2, [r3, #8]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	7b1a      	ldrb	r2, [r3, #12]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	691a      	ldr	r2, [r3, #16]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	695a      	ldr	r2, [r3, #20]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	699a      	ldr	r2, [r3, #24]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	4a1b      	ldr	r2, [pc, #108]	; (80067d8 <LSM6DSL_RegisterBusIO+0xc4>)
 800676c:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	4a1a      	ldr	r2, [pc, #104]	; (80067dc <LSM6DSL_RegisterBusIO+0xc8>)
 8006772:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d103      	bne.n	800678a <LSM6DSL_RegisterBusIO+0x76>
    {
      ret = LSM6DSL_ERROR;
 8006782:	f04f 33ff 	mov.w	r3, #4294967295
 8006786:	60fb      	str	r3, [r7, #12]
 8006788:	e020      	b.n	80067cc <LSM6DSL_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSL_OK)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4798      	blx	r3
 8006790:	4603      	mov	r3, r0
 8006792:	2b00      	cmp	r3, #0
 8006794:	d003      	beq.n	800679e <LSM6DSL_RegisterBusIO+0x8a>
    {
      ret = LSM6DSL_ERROR;
 8006796:	f04f 33ff 	mov.w	r3, #4294967295
 800679a:	60fb      	str	r3, [r7, #12]
 800679c:	e016      	b.n	80067cc <LSM6DSL_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	2b02      	cmp	r3, #2
 80067a4:	d112      	bne.n	80067cc <LSM6DSL_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d10d      	bne.n	80067cc <LSM6DSL_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 80067b0:	230c      	movs	r3, #12
 80067b2:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 80067b4:	7afb      	ldrb	r3, [r7, #11]
 80067b6:	461a      	mov	r2, r3
 80067b8:	2112      	movs	r1, #18
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 fd29 	bl	8007212 <LSM6DSL_Write_Reg>
 80067c0:	4603      	mov	r3, r0
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d002      	beq.n	80067cc <LSM6DSL_RegisterBusIO+0xb8>
          {
            ret = LSM6DSL_ERROR;
 80067c6:	f04f 33ff 	mov.w	r3, #4294967295
 80067ca:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80067cc:	68fb      	ldr	r3, [r7, #12]
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3710      	adds	r7, #16
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}
 80067d6:	bf00      	nop
 80067d8:	08007679 	.word	0x08007679
 80067dc:	080076af 	.word	0x080076af

080067e0 <LSM6DSL_Init>:
 * @brief  Initialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Init(LSM6DSL_Object_t *pObj)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b082      	sub	sp, #8
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	331c      	adds	r3, #28
 80067ec:	2101      	movs	r1, #1
 80067ee:	4618      	mov	r0, r3
 80067f0:	f001 f9dd 	bl	8007bae <lsm6dsl_auto_increment_set>
 80067f4:	4603      	mov	r3, r0
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d002      	beq.n	8006800 <LSM6DSL_Init+0x20>
  {
    return LSM6DSL_ERROR;
 80067fa:	f04f 33ff 	mov.w	r3, #4294967295
 80067fe:	e054      	b.n	80068aa <LSM6DSL_Init+0xca>
  }

  /* Enable BDU */
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	331c      	adds	r3, #28
 8006804:	2101      	movs	r1, #1
 8006806:	4618      	mov	r0, r3
 8006808:	f001 f978 	bl	8007afc <lsm6dsl_block_data_update_set>
 800680c:	4603      	mov	r3, r0
 800680e:	2b00      	cmp	r3, #0
 8006810:	d002      	beq.n	8006818 <LSM6DSL_Init+0x38>
  {
    return LSM6DSL_ERROR;
 8006812:	f04f 33ff 	mov.w	r3, #4294967295
 8006816:	e048      	b.n	80068aa <LSM6DSL_Init+0xca>
  }

  /* FIFO mode selection */
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	331c      	adds	r3, #28
 800681c:	2100      	movs	r1, #0
 800681e:	4618      	mov	r0, r3
 8006820:	f001 f9eb 	bl	8007bfa <lsm6dsl_fifo_mode_set>
 8006824:	4603      	mov	r3, r0
 8006826:	2b00      	cmp	r3, #0
 8006828:	d002      	beq.n	8006830 <LSM6DSL_Init+0x50>
  {
    return LSM6DSL_ERROR;
 800682a:	f04f 33ff 	mov.w	r3, #4294967295
 800682e:	e03c      	b.n	80068aa <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2204      	movs	r2, #4
 8006834:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	331c      	adds	r3, #28
 800683c:	2100      	movs	r1, #0
 800683e:	4618      	mov	r0, r3
 8006840:	f000 ffde 	bl	8007800 <lsm6dsl_xl_data_rate_set>
 8006844:	4603      	mov	r3, r0
 8006846:	2b00      	cmp	r3, #0
 8006848:	d002      	beq.n	8006850 <LSM6DSL_Init+0x70>
  {
    return LSM6DSL_ERROR;
 800684a:	f04f 33ff 	mov.w	r3, #4294967295
 800684e:	e02c      	b.n	80068aa <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	331c      	adds	r3, #28
 8006854:	2100      	movs	r1, #0
 8006856:	4618      	mov	r0, r3
 8006858:	f000 ff74 	bl	8007744 <lsm6dsl_xl_full_scale_set>
 800685c:	4603      	mov	r3, r0
 800685e:	2b00      	cmp	r3, #0
 8006860:	d002      	beq.n	8006868 <LSM6DSL_Init+0x88>
  {
    return LSM6DSL_ERROR;
 8006862:	f04f 33ff 	mov.w	r3, #4294967295
 8006866:	e020      	b.n	80068aa <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2204      	movs	r2, #4
 800686c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	331c      	adds	r3, #28
 8006874:	2100      	movs	r1, #0
 8006876:	4618      	mov	r0, r3
 8006878:	f001 f8b8 	bl	80079ec <lsm6dsl_gy_data_rate_set>
 800687c:	4603      	mov	r3, r0
 800687e:	2b00      	cmp	r3, #0
 8006880:	d002      	beq.n	8006888 <LSM6DSL_Init+0xa8>
  {
    return LSM6DSL_ERROR;
 8006882:	f04f 33ff 	mov.w	r3, #4294967295
 8006886:	e010      	b.n	80068aa <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	331c      	adds	r3, #28
 800688c:	2106      	movs	r1, #6
 800688e:	4618      	mov	r0, r3
 8006890:	f001 f844 	bl	800791c <lsm6dsl_gy_full_scale_set>
 8006894:	4603      	mov	r3, r0
 8006896:	2b00      	cmp	r3, #0
 8006898:	d002      	beq.n	80068a0 <LSM6DSL_Init+0xc0>
  {
    return LSM6DSL_ERROR;
 800689a:	f04f 33ff 	mov.w	r3, #4294967295
 800689e:	e004      	b.n	80068aa <LSM6DSL_Init+0xca>
  }

  pObj->is_initialized = 1;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2201      	movs	r2, #1
 80068a4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 80068a8:	2300      	movs	r3, #0
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3708      	adds	r7, #8
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}

080068b2 <LSM6DSL_DeInit>:
 * @brief  Deinitialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_DeInit(LSM6DSL_Object_t *pObj)
{
 80068b2:	b580      	push	{r7, lr}
 80068b4:	b082      	sub	sp, #8
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSL_ACC_Disable(pObj) != LSM6DSL_OK)
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 f888 	bl	80069d0 <LSM6DSL_ACC_Disable>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d002      	beq.n	80068cc <LSM6DSL_DeInit+0x1a>
  {
    return LSM6DSL_ERROR;
 80068c6:	f04f 33ff 	mov.w	r3, #4294967295
 80068ca:	e015      	b.n	80068f8 <LSM6DSL_DeInit+0x46>
  }

  if (LSM6DSL_GYRO_Disable(pObj) != LSM6DSL_OK)
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f000 fa98 	bl	8006e02 <LSM6DSL_GYRO_Disable>
 80068d2:	4603      	mov	r3, r0
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d002      	beq.n	80068de <LSM6DSL_DeInit+0x2c>
  {
    return LSM6DSL_ERROR;
 80068d8:	f04f 33ff 	mov.w	r3, #4294967295
 80068dc:	e00c      	b.n	80068f8 <LSM6DSL_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_OFF;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2200      	movs	r2, #0
 80068e2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  pObj->gyro_odr = LSM6DSL_GY_ODR_OFF;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2200      	movs	r2, #0
 80068ea:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  pObj->is_initialized = 0;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2200      	movs	r2, #0
 80068f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 80068f6:	2300      	movs	r3, #0
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3708      	adds	r7, #8
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}

08006900 <LSM6DSL_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ReadID(LSM6DSL_Object_t *pObj, uint8_t *Id)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b082      	sub	sp, #8
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
 8006908:	6039      	str	r1, [r7, #0]
  if (lsm6dsl_device_id_get(&(pObj->Ctx), Id) != LSM6DSL_OK)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	331c      	adds	r3, #28
 800690e:	6839      	ldr	r1, [r7, #0]
 8006910:	4618      	mov	r0, r3
 8006912:	f001 f93b 	bl	8007b8c <lsm6dsl_device_id_get>
 8006916:	4603      	mov	r3, r0
 8006918:	2b00      	cmp	r3, #0
 800691a:	d002      	beq.n	8006922 <LSM6DSL_ReadID+0x22>
  {
    return LSM6DSL_ERROR;
 800691c:	f04f 33ff 	mov.w	r3, #4294967295
 8006920:	e000      	b.n	8006924 <LSM6DSL_ReadID+0x24>
  }

  return LSM6DSL_OK;
 8006922:	2300      	movs	r3, #0
}
 8006924:	4618      	mov	r0, r3
 8006926:	3708      	adds	r7, #8
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}

0800692c <LSM6DSL_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM6DSL sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GetCapabilities(LSM6DSL_Object_t *pObj, LSM6DSL_Capabilities_t *Capabilities)
{
 800692c:	b480      	push	{r7}
 800692e:	b083      	sub	sp, #12
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	2201      	movs	r2, #1
 800693a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	2201      	movs	r2, #1
 8006940:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	2200      	movs	r2, #0
 8006946:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	2200      	movs	r2, #0
 800694c:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006954:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	2210      	movs	r2, #16
 800695a:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	2200      	movs	r2, #0
 8006960:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	4a07      	ldr	r2, [pc, #28]	; (8006984 <LSM6DSL_GetCapabilities+0x58>)
 8006966:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	4a06      	ldr	r2, [pc, #24]	; (8006984 <LSM6DSL_GetCapabilities+0x58>)
 800696c:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	f04f 0200 	mov.w	r2, #0
 8006974:	619a      	str	r2, [r3, #24]
  return LSM6DSL_OK;
 8006976:	2300      	movs	r3, #0
}
 8006978:	4618      	mov	r0, r3
 800697a:	370c      	adds	r7, #12
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr
 8006984:	45d02000 	.word	0x45d02000

08006988 <LSM6DSL_ACC_Enable>:
 * @brief  Enable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Enable(LSM6DSL_Object_t *pObj)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b082      	sub	sp, #8
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8006996:	2b01      	cmp	r3, #1
 8006998:	d101      	bne.n	800699e <LSM6DSL_ACC_Enable+0x16>
  {
    return LSM6DSL_OK;
 800699a:	2300      	movs	r3, #0
 800699c:	e014      	b.n	80069c8 <LSM6DSL_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f103 021c 	add.w	r2, r3, #28
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80069aa:	4619      	mov	r1, r3
 80069ac:	4610      	mov	r0, r2
 80069ae:	f000 ff27 	bl	8007800 <lsm6dsl_xl_data_rate_set>
 80069b2:	4603      	mov	r3, r0
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d002      	beq.n	80069be <LSM6DSL_ACC_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 80069b8:	f04f 33ff 	mov.w	r3, #4294967295
 80069bc:	e004      	b.n	80069c8 <LSM6DSL_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2201      	movs	r2, #1
 80069c2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 80069c6:	2300      	movs	r3, #0
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	3708      	adds	r7, #8
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}

080069d0 <LSM6DSL_ACC_Disable>:
 * @brief  Disable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Disable(LSM6DSL_Object_t *pObj)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b082      	sub	sp, #8
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d101      	bne.n	80069e6 <LSM6DSL_ACC_Disable+0x16>
  {
    return LSM6DSL_OK;
 80069e2:	2300      	movs	r3, #0
 80069e4:	e01f      	b.n	8006a26 <LSM6DSL_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSL_OK)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f103 021c 	add.w	r2, r3, #28
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	332b      	adds	r3, #43	; 0x2b
 80069f0:	4619      	mov	r1, r3
 80069f2:	4610      	mov	r0, r2
 80069f4:	f000 ff2a 	bl	800784c <lsm6dsl_xl_data_rate_get>
 80069f8:	4603      	mov	r3, r0
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d002      	beq.n	8006a04 <LSM6DSL_ACC_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 80069fe:	f04f 33ff 	mov.w	r3, #4294967295
 8006a02:	e010      	b.n	8006a26 <LSM6DSL_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	331c      	adds	r3, #28
 8006a08:	2100      	movs	r1, #0
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f000 fef8 	bl	8007800 <lsm6dsl_xl_data_rate_set>
 8006a10:	4603      	mov	r3, r0
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d002      	beq.n	8006a1c <LSM6DSL_ACC_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 8006a16:	f04f 33ff 	mov.w	r3, #4294967295
 8006a1a:	e004      	b.n	8006a26 <LSM6DSL_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 8006a24:	2300      	movs	r3, #0
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3708      	adds	r7, #8
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
	...

08006a30 <LSM6DSL_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b084      	sub	sp, #16
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	331c      	adds	r3, #28
 8006a42:	f107 020b 	add.w	r2, r7, #11
 8006a46:	4611      	mov	r1, r2
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f000 fea1 	bl	8007790 <lsm6dsl_xl_full_scale_get>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d002      	beq.n	8006a5a <LSM6DSL_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 8006a54:	f04f 33ff 	mov.w	r3, #4294967295
 8006a58:	e023      	b.n	8006aa2 <LSM6DSL_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8006a5a:	7afb      	ldrb	r3, [r7, #11]
 8006a5c:	2b03      	cmp	r3, #3
 8006a5e:	d81b      	bhi.n	8006a98 <LSM6DSL_ACC_GetSensitivity+0x68>
 8006a60:	a201      	add	r2, pc, #4	; (adr r2, 8006a68 <LSM6DSL_ACC_GetSensitivity+0x38>)
 8006a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a66:	bf00      	nop
 8006a68:	08006a79 	.word	0x08006a79
 8006a6c:	08006a91 	.word	0x08006a91
 8006a70:	08006a81 	.word	0x08006a81
 8006a74:	08006a89 	.word	0x08006a89
  {
    case LSM6DSL_2g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_2G;
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	4a0c      	ldr	r2, [pc, #48]	; (8006aac <LSM6DSL_ACC_GetSensitivity+0x7c>)
 8006a7c:	601a      	str	r2, [r3, #0]
      break;
 8006a7e:	e00f      	b.n	8006aa0 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_4g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_4G;
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	4a0b      	ldr	r2, [pc, #44]	; (8006ab0 <LSM6DSL_ACC_GetSensitivity+0x80>)
 8006a84:	601a      	str	r2, [r3, #0]
      break;
 8006a86:	e00b      	b.n	8006aa0 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_8g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_8G;
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	4a0a      	ldr	r2, [pc, #40]	; (8006ab4 <LSM6DSL_ACC_GetSensitivity+0x84>)
 8006a8c:	601a      	str	r2, [r3, #0]
      break;
 8006a8e:	e007      	b.n	8006aa0 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_16g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_16G;
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	4a09      	ldr	r2, [pc, #36]	; (8006ab8 <LSM6DSL_ACC_GetSensitivity+0x88>)
 8006a94:	601a      	str	r2, [r3, #0]
      break;
 8006a96:	e003      	b.n	8006aa0 <LSM6DSL_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSL_ERROR;
 8006a98:	f04f 33ff 	mov.w	r3, #4294967295
 8006a9c:	60fb      	str	r3, [r7, #12]
      break;
 8006a9e:	bf00      	nop
  }

  return ret;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3710      	adds	r7, #16
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
 8006aaa:	bf00      	nop
 8006aac:	3d79db23 	.word	0x3d79db23
 8006ab0:	3df9db23 	.word	0x3df9db23
 8006ab4:	3e79db23 	.word	0x3e79db23
 8006ab8:	3ef9db23 	.word	0x3ef9db23

08006abc <LSM6DSL_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b084      	sub	sp, #16
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	331c      	adds	r3, #28
 8006ace:	f107 020b 	add.w	r2, r7, #11
 8006ad2:	4611      	mov	r1, r2
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f000 feb9 	bl	800784c <lsm6dsl_xl_data_rate_get>
 8006ada:	4603      	mov	r3, r0
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d002      	beq.n	8006ae6 <LSM6DSL_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 8006ae0:	f04f 33ff 	mov.w	r3, #4294967295
 8006ae4:	e054      	b.n	8006b90 <LSM6DSL_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 8006ae6:	7afb      	ldrb	r3, [r7, #11]
 8006ae8:	2b0b      	cmp	r3, #11
 8006aea:	d84c      	bhi.n	8006b86 <LSM6DSL_ACC_GetOutputDataRate+0xca>
 8006aec:	a201      	add	r2, pc, #4	; (adr r2, 8006af4 <LSM6DSL_ACC_GetOutputDataRate+0x38>)
 8006aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006af2:	bf00      	nop
 8006af4:	08006b25 	.word	0x08006b25
 8006af8:	08006b37 	.word	0x08006b37
 8006afc:	08006b3f 	.word	0x08006b3f
 8006b00:	08006b47 	.word	0x08006b47
 8006b04:	08006b4f 	.word	0x08006b4f
 8006b08:	08006b57 	.word	0x08006b57
 8006b0c:	08006b5f 	.word	0x08006b5f
 8006b10:	08006b67 	.word	0x08006b67
 8006b14:	08006b6f 	.word	0x08006b6f
 8006b18:	08006b77 	.word	0x08006b77
 8006b1c:	08006b7f 	.word	0x08006b7f
 8006b20:	08006b2f 	.word	0x08006b2f
  {
    case LSM6DSL_XL_ODR_OFF:
      *Odr = 0.0f;
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	f04f 0200 	mov.w	r2, #0
 8006b2a:	601a      	str	r2, [r3, #0]
      break;
 8006b2c:	e02f      	b.n	8006b8e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1Hz6:
      *Odr = 1.6f;
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	4a19      	ldr	r2, [pc, #100]	; (8006b98 <LSM6DSL_ACC_GetOutputDataRate+0xdc>)
 8006b32:	601a      	str	r2, [r3, #0]
      break;
 8006b34:	e02b      	b.n	8006b8e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	4a18      	ldr	r2, [pc, #96]	; (8006b9c <LSM6DSL_ACC_GetOutputDataRate+0xe0>)
 8006b3a:	601a      	str	r2, [r3, #0]
      break;
 8006b3c:	e027      	b.n	8006b8e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_26Hz:
      *Odr = 26.0f;
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	4a17      	ldr	r2, [pc, #92]	; (8006ba0 <LSM6DSL_ACC_GetOutputDataRate+0xe4>)
 8006b42:	601a      	str	r2, [r3, #0]
      break;
 8006b44:	e023      	b.n	8006b8e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_52Hz:
      *Odr = 52.0f;
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	4a16      	ldr	r2, [pc, #88]	; (8006ba4 <LSM6DSL_ACC_GetOutputDataRate+0xe8>)
 8006b4a:	601a      	str	r2, [r3, #0]
      break;
 8006b4c:	e01f      	b.n	8006b8e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_104Hz:
      *Odr = 104.0f;
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	4a15      	ldr	r2, [pc, #84]	; (8006ba8 <LSM6DSL_ACC_GetOutputDataRate+0xec>)
 8006b52:	601a      	str	r2, [r3, #0]
      break;
 8006b54:	e01b      	b.n	8006b8e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_208Hz:
      *Odr = 208.0f;
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	4a14      	ldr	r2, [pc, #80]	; (8006bac <LSM6DSL_ACC_GetOutputDataRate+0xf0>)
 8006b5a:	601a      	str	r2, [r3, #0]
      break;
 8006b5c:	e017      	b.n	8006b8e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_416Hz:
      *Odr = 416.0f;
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	4a13      	ldr	r2, [pc, #76]	; (8006bb0 <LSM6DSL_ACC_GetOutputDataRate+0xf4>)
 8006b62:	601a      	str	r2, [r3, #0]
      break;
 8006b64:	e013      	b.n	8006b8e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_833Hz:
      *Odr = 833.0f;
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	4a12      	ldr	r2, [pc, #72]	; (8006bb4 <LSM6DSL_ACC_GetOutputDataRate+0xf8>)
 8006b6a:	601a      	str	r2, [r3, #0]
      break;
 8006b6c:	e00f      	b.n	8006b8e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1k66Hz:
      *Odr = 1660.0f;
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	4a11      	ldr	r2, [pc, #68]	; (8006bb8 <LSM6DSL_ACC_GetOutputDataRate+0xfc>)
 8006b72:	601a      	str	r2, [r3, #0]
      break;
 8006b74:	e00b      	b.n	8006b8e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_3k33Hz:
      *Odr = 3330.0f;
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	4a10      	ldr	r2, [pc, #64]	; (8006bbc <LSM6DSL_ACC_GetOutputDataRate+0x100>)
 8006b7a:	601a      	str	r2, [r3, #0]
      break;
 8006b7c:	e007      	b.n	8006b8e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_6k66Hz:
      *Odr = 6660.0f;
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	4a0f      	ldr	r2, [pc, #60]	; (8006bc0 <LSM6DSL_ACC_GetOutputDataRate+0x104>)
 8006b82:	601a      	str	r2, [r3, #0]
      break;
 8006b84:	e003      	b.n	8006b8e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSL_ERROR;
 8006b86:	f04f 33ff 	mov.w	r3, #4294967295
 8006b8a:	60fb      	str	r3, [r7, #12]
      break;
 8006b8c:	bf00      	nop
  }

  return ret;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3710      	adds	r7, #16
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}
 8006b98:	3fcccccd 	.word	0x3fcccccd
 8006b9c:	41480000 	.word	0x41480000
 8006ba0:	41d00000 	.word	0x41d00000
 8006ba4:	42500000 	.word	0x42500000
 8006ba8:	42d00000 	.word	0x42d00000
 8006bac:	43500000 	.word	0x43500000
 8006bb0:	43d00000 	.word	0x43d00000
 8006bb4:	44504000 	.word	0x44504000
 8006bb8:	44cf8000 	.word	0x44cf8000
 8006bbc:	45502000 	.word	0x45502000
 8006bc0:	45d02000 	.word	0x45d02000

08006bc4 <LSM6DSL_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b082      	sub	sp, #8
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
 8006bcc:	6039      	str	r1, [r7, #0]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d105      	bne.n	8006be4 <LSM6DSL_ACC_SetOutputDataRate+0x20>
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8006bd8:	6839      	ldr	r1, [r7, #0]
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f000 fb34 	bl	8007248 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>
 8006be0:	4603      	mov	r3, r0
 8006be2:	e004      	b.n	8006bee <LSM6DSL_ACC_SetOutputDataRate+0x2a>
  }
  else
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8006be4:	6839      	ldr	r1, [r7, #0]
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f000 fbb8 	bl	800735c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>
 8006bec:	4603      	mov	r3, r0
  }
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3708      	adds	r7, #8
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}
	...

08006bf8 <LSM6DSL_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetFullScale(LSM6DSL_Object_t *pObj, int32_t *FullScale)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b084      	sub	sp, #16
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
 8006c00:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8006c02:	2300      	movs	r3, #0
 8006c04:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	331c      	adds	r3, #28
 8006c0a:	f107 020b 	add.w	r2, r7, #11
 8006c0e:	4611      	mov	r1, r2
 8006c10:	4618      	mov	r0, r3
 8006c12:	f000 fdbd 	bl	8007790 <lsm6dsl_xl_full_scale_get>
 8006c16:	4603      	mov	r3, r0
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d002      	beq.n	8006c22 <LSM6DSL_ACC_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 8006c1c:	f04f 33ff 	mov.w	r3, #4294967295
 8006c20:	e023      	b.n	8006c6a <LSM6DSL_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8006c22:	7afb      	ldrb	r3, [r7, #11]
 8006c24:	2b03      	cmp	r3, #3
 8006c26:	d81b      	bhi.n	8006c60 <LSM6DSL_ACC_GetFullScale+0x68>
 8006c28:	a201      	add	r2, pc, #4	; (adr r2, 8006c30 <LSM6DSL_ACC_GetFullScale+0x38>)
 8006c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c2e:	bf00      	nop
 8006c30:	08006c41 	.word	0x08006c41
 8006c34:	08006c59 	.word	0x08006c59
 8006c38:	08006c49 	.word	0x08006c49
 8006c3c:	08006c51 	.word	0x08006c51
  {
    case LSM6DSL_2g:
      *FullScale =  2;
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	2202      	movs	r2, #2
 8006c44:	601a      	str	r2, [r3, #0]
      break;
 8006c46:	e00f      	b.n	8006c68 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_4g:
      *FullScale =  4;
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	2204      	movs	r2, #4
 8006c4c:	601a      	str	r2, [r3, #0]
      break;
 8006c4e:	e00b      	b.n	8006c68 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_8g:
      *FullScale =  8;
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	2208      	movs	r2, #8
 8006c54:	601a      	str	r2, [r3, #0]
      break;
 8006c56:	e007      	b.n	8006c68 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_16g:
      *FullScale = 16;
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	2210      	movs	r2, #16
 8006c5c:	601a      	str	r2, [r3, #0]
      break;
 8006c5e:	e003      	b.n	8006c68 <LSM6DSL_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSL_ERROR;
 8006c60:	f04f 33ff 	mov.w	r3, #4294967295
 8006c64:	60fb      	str	r3, [r7, #12]
      break;
 8006c66:	bf00      	nop
  }

  return ret;
 8006c68:	68fb      	ldr	r3, [r7, #12]
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3710      	adds	r7, #16
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}
 8006c72:	bf00      	nop

08006c74 <LSM6DSL_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b084      	sub	sp, #16
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
           : (FullScale <= 4) ? LSM6DSL_4g
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	2b02      	cmp	r3, #2
 8006c82:	dd0b      	ble.n	8006c9c <LSM6DSL_ACC_SetFullScale+0x28>
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	2b04      	cmp	r3, #4
 8006c88:	dd06      	ble.n	8006c98 <LSM6DSL_ACC_SetFullScale+0x24>
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	2b08      	cmp	r3, #8
 8006c8e:	dc01      	bgt.n	8006c94 <LSM6DSL_ACC_SetFullScale+0x20>
 8006c90:	2303      	movs	r3, #3
 8006c92:	e004      	b.n	8006c9e <LSM6DSL_ACC_SetFullScale+0x2a>
 8006c94:	2301      	movs	r3, #1
 8006c96:	e002      	b.n	8006c9e <LSM6DSL_ACC_SetFullScale+0x2a>
 8006c98:	2302      	movs	r3, #2
 8006c9a:	e000      	b.n	8006c9e <LSM6DSL_ACC_SetFullScale+0x2a>
 8006c9c:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
 8006c9e:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSL_8g
           :                    LSM6DSL_16g;

  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	331c      	adds	r3, #28
 8006ca4:	7bfa      	ldrb	r2, [r7, #15]
 8006ca6:	4611      	mov	r1, r2
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f000 fd4b 	bl	8007744 <lsm6dsl_xl_full_scale_set>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d002      	beq.n	8006cba <LSM6DSL_ACC_SetFullScale+0x46>
  {
    return LSM6DSL_ERROR;
 8006cb4:	f04f 33ff 	mov.w	r3, #4294967295
 8006cb8:	e000      	b.n	8006cbc <LSM6DSL_ACC_SetFullScale+0x48>
  }

  return LSM6DSL_OK;
 8006cba:	2300      	movs	r3, #0
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	3710      	adds	r7, #16
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}

08006cc4 <LSM6DSL_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b084      	sub	sp, #16
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	331c      	adds	r3, #28
 8006cd2:	f107 0208 	add.w	r2, r7, #8
 8006cd6:	4611      	mov	r1, r2
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f000 ff46 	bl	8007b6a <lsm6dsl_acceleration_raw_get>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d002      	beq.n	8006cea <LSM6DSL_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 8006ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8006ce8:	e00c      	b.n	8006d04 <LSM6DSL_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8006cea:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8006cf2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8006cfa:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 8006d02:	2300      	movs	r3, #0
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3710      	adds	r7, #16
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <LSM6DSL_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *Acceleration)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b086      	sub	sp, #24
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 8006d16:	f04f 0300 	mov.w	r3, #0
 8006d1a:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	331c      	adds	r3, #28
 8006d20:	f107 0210 	add.w	r2, r7, #16
 8006d24:	4611      	mov	r1, r2
 8006d26:	4618      	mov	r0, r3
 8006d28:	f000 ff1f 	bl	8007b6a <lsm6dsl_acceleration_raw_get>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d002      	beq.n	8006d38 <LSM6DSL_ACC_GetAxes+0x2c>
  {
    return LSM6DSL_ERROR;
 8006d32:	f04f 33ff 	mov.w	r3, #4294967295
 8006d36:	e03c      	b.n	8006db2 <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8006d38:	f107 030c 	add.w	r3, r7, #12
 8006d3c:	4619      	mov	r1, r3
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f7ff fe76 	bl	8006a30 <LSM6DSL_ACC_GetSensitivity>
 8006d44:	4603      	mov	r3, r0
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d002      	beq.n	8006d50 <LSM6DSL_ACC_GetAxes+0x44>
  {
    return LSM6DSL_ERROR;
 8006d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8006d4e:	e030      	b.n	8006db2 <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8006d50:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006d54:	ee07 3a90 	vmov	s15, r3
 8006d58:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006d5c:	edd7 7a03 	vldr	s15, [r7, #12]
 8006d60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006d68:	ee17 2a90 	vmov	r2, s15
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8006d70:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006d74:	ee07 3a90 	vmov	s15, r3
 8006d78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006d7c:	edd7 7a03 	vldr	s15, [r7, #12]
 8006d80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006d88:	ee17 2a90 	vmov	r2, s15
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8006d90:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006d94:	ee07 3a90 	vmov	s15, r3
 8006d98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006d9c:	edd7 7a03 	vldr	s15, [r7, #12]
 8006da0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006da4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006da8:	ee17 2a90 	vmov	r2, s15
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 8006db0:	2300      	movs	r3, #0
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3718      	adds	r7, #24
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}

08006dba <LSM6DSL_GYRO_Enable>:
 * @brief  Enable the LSM6DSL gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_Enable(LSM6DSL_Object_t *pObj)
{
 8006dba:	b580      	push	{r7, lr}
 8006dbc:	b082      	sub	sp, #8
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	d101      	bne.n	8006dd0 <LSM6DSL_GYRO_Enable+0x16>
  {
    return LSM6DSL_OK;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	e014      	b.n	8006dfa <LSM6DSL_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSL_OK)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f103 021c 	add.w	r2, r3, #28
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006ddc:	4619      	mov	r1, r3
 8006dde:	4610      	mov	r0, r2
 8006de0:	f000 fe04 	bl	80079ec <lsm6dsl_gy_data_rate_set>
 8006de4:	4603      	mov	r3, r0
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d002      	beq.n	8006df0 <LSM6DSL_GYRO_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8006dea:	f04f 33ff 	mov.w	r3, #4294967295
 8006dee:	e004      	b.n	8006dfa <LSM6DSL_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2201      	movs	r2, #1
 8006df4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 8006df8:	2300      	movs	r3, #0
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3708      	adds	r7, #8
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}

08006e02 <LSM6DSL_GYRO_Disable>:
 * @brief  Disable the LSM6DSL gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_Disable(LSM6DSL_Object_t *pObj)
{
 8006e02:	b580      	push	{r7, lr}
 8006e04:	b082      	sub	sp, #8
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d101      	bne.n	8006e18 <LSM6DSL_GYRO_Disable+0x16>
  {
    return LSM6DSL_OK;
 8006e14:	2300      	movs	r3, #0
 8006e16:	e01f      	b.n	8006e58 <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSL_OK)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f103 021c 	add.w	r2, r3, #28
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	332c      	adds	r3, #44	; 0x2c
 8006e22:	4619      	mov	r1, r3
 8006e24:	4610      	mov	r0, r2
 8006e26:	f000 fe07 	bl	8007a38 <lsm6dsl_gy_data_rate_get>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d002      	beq.n	8006e36 <LSM6DSL_GYRO_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 8006e30:	f04f 33ff 	mov.w	r3, #4294967295
 8006e34:	e010      	b.n	8006e58 <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	331c      	adds	r3, #28
 8006e3a:	2100      	movs	r1, #0
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f000 fdd5 	bl	80079ec <lsm6dsl_gy_data_rate_set>
 8006e42:	4603      	mov	r3, r0
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d002      	beq.n	8006e4e <LSM6DSL_GYRO_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 8006e48:	f04f 33ff 	mov.w	r3, #4294967295
 8006e4c:	e004      	b.n	8006e58 <LSM6DSL_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2200      	movs	r2, #0
 8006e52:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 8006e56:	2300      	movs	r3, #0
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3708      	adds	r7, #8
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}

08006e60 <LSM6DSL_GYRO_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b084      	sub	sp, #16
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	331c      	adds	r3, #28
 8006e72:	f107 020b 	add.w	r2, r7, #11
 8006e76:	4611      	mov	r1, r2
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f000 fd75 	bl	8007968 <lsm6dsl_gy_full_scale_get>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d002      	beq.n	8006e8a <LSM6DSL_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 8006e84:	f04f 33ff 	mov.w	r3, #4294967295
 8006e88:	e02d      	b.n	8006ee6 <LSM6DSL_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8006e8a:	7afb      	ldrb	r3, [r7, #11]
 8006e8c:	2b06      	cmp	r3, #6
 8006e8e:	d825      	bhi.n	8006edc <LSM6DSL_GYRO_GetSensitivity+0x7c>
 8006e90:	a201      	add	r2, pc, #4	; (adr r2, 8006e98 <LSM6DSL_GYRO_GetSensitivity+0x38>)
 8006e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e96:	bf00      	nop
 8006e98:	08006ebd 	.word	0x08006ebd
 8006e9c:	08006eb5 	.word	0x08006eb5
 8006ea0:	08006ec5 	.word	0x08006ec5
 8006ea4:	08006edd 	.word	0x08006edd
 8006ea8:	08006ecd 	.word	0x08006ecd
 8006eac:	08006edd 	.word	0x08006edd
 8006eb0:	08006ed5 	.word	0x08006ed5
  {
    case LSM6DSL_125dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_125DPS;
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	4a0e      	ldr	r2, [pc, #56]	; (8006ef0 <LSM6DSL_GYRO_GetSensitivity+0x90>)
 8006eb8:	601a      	str	r2, [r3, #0]
      break;
 8006eba:	e013      	b.n	8006ee4 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_250dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_250DPS;
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	4a0d      	ldr	r2, [pc, #52]	; (8006ef4 <LSM6DSL_GYRO_GetSensitivity+0x94>)
 8006ec0:	601a      	str	r2, [r3, #0]
      break;
 8006ec2:	e00f      	b.n	8006ee4 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_500dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_500DPS;
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	4a0c      	ldr	r2, [pc, #48]	; (8006ef8 <LSM6DSL_GYRO_GetSensitivity+0x98>)
 8006ec8:	601a      	str	r2, [r3, #0]
      break;
 8006eca:	e00b      	b.n	8006ee4 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_1000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_1000DPS;
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	4a0b      	ldr	r2, [pc, #44]	; (8006efc <LSM6DSL_GYRO_GetSensitivity+0x9c>)
 8006ed0:	601a      	str	r2, [r3, #0]
      break;
 8006ed2:	e007      	b.n	8006ee4 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_2000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_2000DPS;
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	4a0a      	ldr	r2, [pc, #40]	; (8006f00 <LSM6DSL_GYRO_GetSensitivity+0xa0>)
 8006ed8:	601a      	str	r2, [r3, #0]
      break;
 8006eda:	e003      	b.n	8006ee4 <LSM6DSL_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSL_ERROR;
 8006edc:	f04f 33ff 	mov.w	r3, #4294967295
 8006ee0:	60fb      	str	r3, [r7, #12]
      break;
 8006ee2:	bf00      	nop
  }

  return ret;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3710      	adds	r7, #16
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}
 8006eee:	bf00      	nop
 8006ef0:	408c0000 	.word	0x408c0000
 8006ef4:	410c0000 	.word	0x410c0000
 8006ef8:	418c0000 	.word	0x418c0000
 8006efc:	420c0000 	.word	0x420c0000
 8006f00:	428c0000 	.word	0x428c0000

08006f04 <LSM6DSL_GYRO_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b084      	sub	sp, #16
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	331c      	adds	r3, #28
 8006f16:	f107 020b 	add.w	r2, r7, #11
 8006f1a:	4611      	mov	r1, r2
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f000 fd8b 	bl	8007a38 <lsm6dsl_gy_data_rate_get>
 8006f22:	4603      	mov	r3, r0
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d002      	beq.n	8006f2e <LSM6DSL_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 8006f28:	f04f 33ff 	mov.w	r3, #4294967295
 8006f2c:	e04e      	b.n	8006fcc <LSM6DSL_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8006f2e:	7afb      	ldrb	r3, [r7, #11]
 8006f30:	2b0a      	cmp	r3, #10
 8006f32:	d846      	bhi.n	8006fc2 <LSM6DSL_GYRO_GetOutputDataRate+0xbe>
 8006f34:	a201      	add	r2, pc, #4	; (adr r2, 8006f3c <LSM6DSL_GYRO_GetOutputDataRate+0x38>)
 8006f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f3a:	bf00      	nop
 8006f3c:	08006f69 	.word	0x08006f69
 8006f40:	08006f73 	.word	0x08006f73
 8006f44:	08006f7b 	.word	0x08006f7b
 8006f48:	08006f83 	.word	0x08006f83
 8006f4c:	08006f8b 	.word	0x08006f8b
 8006f50:	08006f93 	.word	0x08006f93
 8006f54:	08006f9b 	.word	0x08006f9b
 8006f58:	08006fa3 	.word	0x08006fa3
 8006f5c:	08006fab 	.word	0x08006fab
 8006f60:	08006fb3 	.word	0x08006fb3
 8006f64:	08006fbb 	.word	0x08006fbb
  {
    case LSM6DSL_GY_ODR_OFF:
      *Odr = 0.0f;
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	f04f 0200 	mov.w	r2, #0
 8006f6e:	601a      	str	r2, [r3, #0]
      break;
 8006f70:	e02b      	b.n	8006fca <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_12Hz5:
      *Odr = 12.5f;
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	4a17      	ldr	r2, [pc, #92]	; (8006fd4 <LSM6DSL_GYRO_GetOutputDataRate+0xd0>)
 8006f76:	601a      	str	r2, [r3, #0]
      break;
 8006f78:	e027      	b.n	8006fca <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_26Hz:
      *Odr = 26.0f;
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	4a16      	ldr	r2, [pc, #88]	; (8006fd8 <LSM6DSL_GYRO_GetOutputDataRate+0xd4>)
 8006f7e:	601a      	str	r2, [r3, #0]
      break;
 8006f80:	e023      	b.n	8006fca <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_52Hz:
      *Odr = 52.0f;
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	4a15      	ldr	r2, [pc, #84]	; (8006fdc <LSM6DSL_GYRO_GetOutputDataRate+0xd8>)
 8006f86:	601a      	str	r2, [r3, #0]
      break;
 8006f88:	e01f      	b.n	8006fca <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_104Hz:
      *Odr = 104.0f;
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	4a14      	ldr	r2, [pc, #80]	; (8006fe0 <LSM6DSL_GYRO_GetOutputDataRate+0xdc>)
 8006f8e:	601a      	str	r2, [r3, #0]
      break;
 8006f90:	e01b      	b.n	8006fca <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_208Hz:
      *Odr = 208.0f;
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	4a13      	ldr	r2, [pc, #76]	; (8006fe4 <LSM6DSL_GYRO_GetOutputDataRate+0xe0>)
 8006f96:	601a      	str	r2, [r3, #0]
      break;
 8006f98:	e017      	b.n	8006fca <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_416Hz:
      *Odr = 416.0f;
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	4a12      	ldr	r2, [pc, #72]	; (8006fe8 <LSM6DSL_GYRO_GetOutputDataRate+0xe4>)
 8006f9e:	601a      	str	r2, [r3, #0]
      break;
 8006fa0:	e013      	b.n	8006fca <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_833Hz:
      *Odr = 833.0f;
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	4a11      	ldr	r2, [pc, #68]	; (8006fec <LSM6DSL_GYRO_GetOutputDataRate+0xe8>)
 8006fa6:	601a      	str	r2, [r3, #0]
      break;
 8006fa8:	e00f      	b.n	8006fca <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_1k66Hz:
      *Odr =  1660.0f;
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	4a10      	ldr	r2, [pc, #64]	; (8006ff0 <LSM6DSL_GYRO_GetOutputDataRate+0xec>)
 8006fae:	601a      	str	r2, [r3, #0]
      break;
 8006fb0:	e00b      	b.n	8006fca <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_3k33Hz:
      *Odr =  3330.0f;
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	4a0f      	ldr	r2, [pc, #60]	; (8006ff4 <LSM6DSL_GYRO_GetOutputDataRate+0xf0>)
 8006fb6:	601a      	str	r2, [r3, #0]
      break;
 8006fb8:	e007      	b.n	8006fca <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_6k66Hz:
      *Odr =  6660.0f;
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	4a0e      	ldr	r2, [pc, #56]	; (8006ff8 <LSM6DSL_GYRO_GetOutputDataRate+0xf4>)
 8006fbe:	601a      	str	r2, [r3, #0]
      break;
 8006fc0:	e003      	b.n	8006fca <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSL_ERROR;
 8006fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8006fc6:	60fb      	str	r3, [r7, #12]
      break;
 8006fc8:	bf00      	nop
  }

  return ret;
 8006fca:	68fb      	ldr	r3, [r7, #12]
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	3710      	adds	r7, #16
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}
 8006fd4:	41480000 	.word	0x41480000
 8006fd8:	41d00000 	.word	0x41d00000
 8006fdc:	42500000 	.word	0x42500000
 8006fe0:	42d00000 	.word	0x42d00000
 8006fe4:	43500000 	.word	0x43500000
 8006fe8:	43d00000 	.word	0x43d00000
 8006fec:	44504000 	.word	0x44504000
 8006ff0:	44cf8000 	.word	0x44cf8000
 8006ff4:	45502000 	.word	0x45502000
 8006ff8:	45d02000 	.word	0x45d02000

08006ffc <LSM6DSL_GYRO_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b082      	sub	sp, #8
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	6039      	str	r1, [r7, #0]
  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800700c:	2b01      	cmp	r3, #1
 800700e:	d105      	bne.n	800701c <LSM6DSL_GYRO_SetOutputDataRate+0x20>
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 8007010:	6839      	ldr	r1, [r7, #0]
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f000 fa24 	bl	8007460 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>
 8007018:	4603      	mov	r3, r0
 800701a:	e004      	b.n	8007026 <LSM6DSL_GYRO_SetOutputDataRate+0x2a>
  }
  else
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 800701c:	6839      	ldr	r1, [r7, #0]
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f000 faa8 	bl	8007574 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>
 8007024:	4603      	mov	r3, r0
  }
}
 8007026:	4618      	mov	r0, r3
 8007028:	3708      	adds	r7, #8
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}
	...

08007030 <LSM6DSL_GYRO_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetFullScale(LSM6DSL_Object_t *pObj, int32_t  *FullScale)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b084      	sub	sp, #16
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 800703a:	2300      	movs	r3, #0
 800703c:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	331c      	adds	r3, #28
 8007042:	f107 020b 	add.w	r2, r7, #11
 8007046:	4611      	mov	r1, r2
 8007048:	4618      	mov	r0, r3
 800704a:	f000 fc8d 	bl	8007968 <lsm6dsl_gy_full_scale_get>
 800704e:	4603      	mov	r3, r0
 8007050:	2b00      	cmp	r3, #0
 8007052:	d002      	beq.n	800705a <LSM6DSL_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 8007054:	f04f 33ff 	mov.w	r3, #4294967295
 8007058:	e030      	b.n	80070bc <LSM6DSL_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 800705a:	7afb      	ldrb	r3, [r7, #11]
 800705c:	2b06      	cmp	r3, #6
 800705e:	d828      	bhi.n	80070b2 <LSM6DSL_GYRO_GetFullScale+0x82>
 8007060:	a201      	add	r2, pc, #4	; (adr r2, 8007068 <LSM6DSL_GYRO_GetFullScale+0x38>)
 8007062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007066:	bf00      	nop
 8007068:	0800708d 	.word	0x0800708d
 800706c:	08007085 	.word	0x08007085
 8007070:	08007095 	.word	0x08007095
 8007074:	080070b3 	.word	0x080070b3
 8007078:	0800709f 	.word	0x0800709f
 800707c:	080070b3 	.word	0x080070b3
 8007080:	080070a9 	.word	0x080070a9
  {
    case LSM6DSL_125dps:
      *FullScale =  125;
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	227d      	movs	r2, #125	; 0x7d
 8007088:	601a      	str	r2, [r3, #0]
      break;
 800708a:	e016      	b.n	80070ba <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_250dps:
      *FullScale =  250;
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	22fa      	movs	r2, #250	; 0xfa
 8007090:	601a      	str	r2, [r3, #0]
      break;
 8007092:	e012      	b.n	80070ba <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_500dps:
      *FullScale =  500;
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800709a:	601a      	str	r2, [r3, #0]
      break;
 800709c:	e00d      	b.n	80070ba <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_1000dps:
      *FullScale = 1000;
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80070a4:	601a      	str	r2, [r3, #0]
      break;
 80070a6:	e008      	b.n	80070ba <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_2000dps:
      *FullScale = 2000;
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80070ae:	601a      	str	r2, [r3, #0]
      break;
 80070b0:	e003      	b.n	80070ba <LSM6DSL_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSL_ERROR;
 80070b2:	f04f 33ff 	mov.w	r3, #4294967295
 80070b6:	60fb      	str	r3, [r7, #12]
      break;
 80070b8:	bf00      	nop
  }

  return ret;
 80070ba:	68fb      	ldr	r3, [r7, #12]
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3710      	adds	r7, #16
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}

080070c4 <LSM6DSL_GYRO_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b084      	sub	sp, #16
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
           : (FullScale <= 250)  ? LSM6DSL_250dps
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	2b7d      	cmp	r3, #125	; 0x7d
 80070d2:	dd12      	ble.n	80070fa <LSM6DSL_GYRO_SetFullScale+0x36>
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	2bfa      	cmp	r3, #250	; 0xfa
 80070d8:	dd0d      	ble.n	80070f6 <LSM6DSL_GYRO_SetFullScale+0x32>
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80070e0:	dd07      	ble.n	80070f2 <LSM6DSL_GYRO_SetFullScale+0x2e>
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80070e8:	dc01      	bgt.n	80070ee <LSM6DSL_GYRO_SetFullScale+0x2a>
 80070ea:	2304      	movs	r3, #4
 80070ec:	e006      	b.n	80070fc <LSM6DSL_GYRO_SetFullScale+0x38>
 80070ee:	2306      	movs	r3, #6
 80070f0:	e004      	b.n	80070fc <LSM6DSL_GYRO_SetFullScale+0x38>
 80070f2:	2302      	movs	r3, #2
 80070f4:	e002      	b.n	80070fc <LSM6DSL_GYRO_SetFullScale+0x38>
 80070f6:	2300      	movs	r3, #0
 80070f8:	e000      	b.n	80070fc <LSM6DSL_GYRO_SetFullScale+0x38>
 80070fa:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
 80070fc:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSL_500dps
           : (FullScale <= 1000) ? LSM6DSL_1000dps
           :                       LSM6DSL_2000dps;

  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	331c      	adds	r3, #28
 8007102:	7bfa      	ldrb	r2, [r7, #15]
 8007104:	4611      	mov	r1, r2
 8007106:	4618      	mov	r0, r3
 8007108:	f000 fc08 	bl	800791c <lsm6dsl_gy_full_scale_set>
 800710c:	4603      	mov	r3, r0
 800710e:	2b00      	cmp	r3, #0
 8007110:	d002      	beq.n	8007118 <LSM6DSL_GYRO_SetFullScale+0x54>
  {
    return LSM6DSL_ERROR;
 8007112:	f04f 33ff 	mov.w	r3, #4294967295
 8007116:	e000      	b.n	800711a <LSM6DSL_GYRO_SetFullScale+0x56>
  }

  return LSM6DSL_OK;
 8007118:	2300      	movs	r3, #0
}
 800711a:	4618      	mov	r0, r3
 800711c:	3710      	adds	r7, #16
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}

08007122 <LSM6DSL_GYRO_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 8007122:	b580      	push	{r7, lr}
 8007124:	b084      	sub	sp, #16
 8007126:	af00      	add	r7, sp, #0
 8007128:	6078      	str	r0, [r7, #4]
 800712a:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	331c      	adds	r3, #28
 8007130:	f107 0208 	add.w	r2, r7, #8
 8007134:	4611      	mov	r1, r2
 8007136:	4618      	mov	r0, r3
 8007138:	f000 fd06 	bl	8007b48 <lsm6dsl_angular_rate_raw_get>
 800713c:	4603      	mov	r3, r0
 800713e:	2b00      	cmp	r3, #0
 8007140:	d002      	beq.n	8007148 <LSM6DSL_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 8007142:	f04f 33ff 	mov.w	r3, #4294967295
 8007146:	e00c      	b.n	8007162 <LSM6DSL_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8007148:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8007150:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8007158:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 8007160:	2300      	movs	r3, #0
}
 8007162:	4618      	mov	r0, r3
 8007164:	3710      	adds	r7, #16
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}

0800716a <LSM6DSL_GYRO_GetAxes>:
 * @param  pObj the device pObj
 * @param  AngularRate pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *AngularRate)
{
 800716a:	b580      	push	{r7, lr}
 800716c:	b086      	sub	sp, #24
 800716e:	af00      	add	r7, sp, #0
 8007170:	6078      	str	r0, [r7, #4]
 8007172:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	331c      	adds	r3, #28
 8007178:	f107 0210 	add.w	r2, r7, #16
 800717c:	4611      	mov	r1, r2
 800717e:	4618      	mov	r0, r3
 8007180:	f000 fce2 	bl	8007b48 <lsm6dsl_angular_rate_raw_get>
 8007184:	4603      	mov	r3, r0
 8007186:	2b00      	cmp	r3, #0
 8007188:	d002      	beq.n	8007190 <LSM6DSL_GYRO_GetAxes+0x26>
  {
    return LSM6DSL_ERROR;
 800718a:	f04f 33ff 	mov.w	r3, #4294967295
 800718e:	e03c      	b.n	800720a <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8007190:	f107 030c 	add.w	r3, r7, #12
 8007194:	4619      	mov	r1, r3
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f7ff fe62 	bl	8006e60 <LSM6DSL_GYRO_GetSensitivity>
 800719c:	4603      	mov	r3, r0
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d002      	beq.n	80071a8 <LSM6DSL_GYRO_GetAxes+0x3e>
  {
    return LSM6DSL_ERROR;
 80071a2:	f04f 33ff 	mov.w	r3, #4294967295
 80071a6:	e030      	b.n	800720a <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80071a8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80071ac:	ee07 3a90 	vmov	s15, r3
 80071b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80071b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80071b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80071c0:	ee17 2a90 	vmov	r2, s15
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80071c8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80071cc:	ee07 3a90 	vmov	s15, r3
 80071d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80071d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80071d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80071e0:	ee17 2a90 	vmov	r2, s15
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80071e8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80071ec:	ee07 3a90 	vmov	s15, r3
 80071f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80071f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80071f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007200:	ee17 2a90 	vmov	r2, s15
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 8007208:	2300      	movs	r3, #0
}
 800720a:	4618      	mov	r0, r3
 800720c:	3718      	adds	r7, #24
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}

08007212 <LSM6DSL_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Write_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8007212:	b580      	push	{r7, lr}
 8007214:	b082      	sub	sp, #8
 8007216:	af00      	add	r7, sp, #0
 8007218:	6078      	str	r0, [r7, #4]
 800721a:	460b      	mov	r3, r1
 800721c:	70fb      	strb	r3, [r7, #3]
 800721e:	4613      	mov	r3, r2
 8007220:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f103 001c 	add.w	r0, r3, #28
 8007228:	1cba      	adds	r2, r7, #2
 800722a:	78f9      	ldrb	r1, [r7, #3]
 800722c:	2301      	movs	r3, #1
 800722e:	f000 fa71 	bl	8007714 <lsm6dsl_write_reg>
 8007232:	4603      	mov	r3, r0
 8007234:	2b00      	cmp	r3, #0
 8007236:	d002      	beq.n	800723e <LSM6DSL_Write_Reg+0x2c>
  {
    return LSM6DSL_ERROR;
 8007238:	f04f 33ff 	mov.w	r3, #4294967295
 800723c:	e000      	b.n	8007240 <LSM6DSL_Write_Reg+0x2e>
  }

  return LSM6DSL_OK;
 800723e:	2300      	movs	r3, #0
}
 8007240:	4618      	mov	r0, r3
 8007242:	3708      	adds	r7, #8
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}

08007248 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b084      	sub	sp, #16
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	6039      	str	r1, [r7, #0]
  lsm6dsl_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8007252:	edd7 7a00 	vldr	s15, [r7]
 8007256:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800725a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800725e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007262:	d801      	bhi.n	8007268 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x20>
 8007264:	2301      	movs	r3, #1
 8007266:	e058      	b.n	800731a <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8007268:	edd7 7a00 	vldr	s15, [r7]
 800726c:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8007270:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007278:	d801      	bhi.n	800727e <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x36>
 800727a:	2302      	movs	r3, #2
 800727c:	e04d      	b.n	800731a <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 800727e:	edd7 7a00 	vldr	s15, [r7]
 8007282:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8007340 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf8>
 8007286:	eef4 7ac7 	vcmpe.f32	s15, s14
 800728a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800728e:	d801      	bhi.n	8007294 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x4c>
 8007290:	2303      	movs	r3, #3
 8007292:	e042      	b.n	800731a <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8007294:	edd7 7a00 	vldr	s15, [r7]
 8007298:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8007344 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xfc>
 800729c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80072a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072a4:	d801      	bhi.n	80072aa <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x62>
 80072a6:	2304      	movs	r3, #4
 80072a8:	e037      	b.n	800731a <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 80072aa:	edd7 7a00 	vldr	s15, [r7]
 80072ae:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8007348 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x100>
 80072b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80072b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072ba:	d801      	bhi.n	80072c0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x78>
 80072bc:	2305      	movs	r3, #5
 80072be:	e02c      	b.n	800731a <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 80072c0:	edd7 7a00 	vldr	s15, [r7]
 80072c4:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800734c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x104>
 80072c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80072cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072d0:	d801      	bhi.n	80072d6 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x8e>
 80072d2:	2306      	movs	r3, #6
 80072d4:	e021      	b.n	800731a <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 80072d6:	edd7 7a00 	vldr	s15, [r7]
 80072da:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8007350 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x108>
 80072de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80072e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072e6:	d801      	bhi.n	80072ec <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xa4>
 80072e8:	2307      	movs	r3, #7
 80072ea:	e016      	b.n	800731a <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 80072ec:	edd7 7a00 	vldr	s15, [r7]
 80072f0:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8007354 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x10c>
 80072f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80072f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072fc:	d801      	bhi.n	8007302 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xba>
 80072fe:	2308      	movs	r3, #8
 8007300:	e00b      	b.n	800731a <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8007302:	edd7 7a00 	vldr	s15, [r7]
 8007306:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8007358 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x110>
 800730a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800730e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007312:	d801      	bhi.n	8007318 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd0>
 8007314:	2309      	movs	r3, #9
 8007316:	e000      	b.n	800731a <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8007318:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 800731a:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
          :                    LSM6DSL_XL_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	331c      	adds	r3, #28
 8007320:	7bfa      	ldrb	r2, [r7, #15]
 8007322:	4611      	mov	r1, r2
 8007324:	4618      	mov	r0, r3
 8007326:	f000 fa6b 	bl	8007800 <lsm6dsl_xl_data_rate_set>
 800732a:	4603      	mov	r3, r0
 800732c:	2b00      	cmp	r3, #0
 800732e:	d002      	beq.n	8007336 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xee>
  {
    return LSM6DSL_ERROR;
 8007330:	f04f 33ff 	mov.w	r3, #4294967295
 8007334:	e000      	b.n	8007338 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf0>
  }

  return LSM6DSL_OK;
 8007336:	2300      	movs	r3, #0
}
 8007338:	4618      	mov	r0, r3
 800733a:	3710      	adds	r7, #16
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}
 8007340:	42500000 	.word	0x42500000
 8007344:	42d00000 	.word	0x42d00000
 8007348:	43500000 	.word	0x43500000
 800734c:	43d00000 	.word	0x43d00000
 8007350:	44504000 	.word	0x44504000
 8007354:	44cf8000 	.word	0x44cf8000
 8007358:	45502000 	.word	0x45502000

0800735c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 800735c:	b480      	push	{r7}
 800735e:	b083      	sub	sp, #12
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
 8007364:	6039      	str	r1, [r7, #0]
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
                : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8007366:	edd7 7a00 	vldr	s15, [r7]
 800736a:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800736e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007376:	d801      	bhi.n	800737c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x20>
 8007378:	2301      	movs	r3, #1
 800737a:	e058      	b.n	800742e <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 800737c:	edd7 7a00 	vldr	s15, [r7]
 8007380:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8007384:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800738c:	d801      	bhi.n	8007392 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x36>
 800738e:	2302      	movs	r3, #2
 8007390:	e04d      	b.n	800742e <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8007392:	edd7 7a00 	vldr	s15, [r7]
 8007396:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8007444 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xe8>
 800739a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800739e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073a2:	d801      	bhi.n	80073a8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x4c>
 80073a4:	2303      	movs	r3, #3
 80073a6:	e042      	b.n	800742e <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 80073a8:	edd7 7a00 	vldr	s15, [r7]
 80073ac:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8007448 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xec>
 80073b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80073b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073b8:	d801      	bhi.n	80073be <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x62>
 80073ba:	2304      	movs	r3, #4
 80073bc:	e037      	b.n	800742e <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 80073be:	edd7 7a00 	vldr	s15, [r7]
 80073c2:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800744c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf0>
 80073c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80073ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073ce:	d801      	bhi.n	80073d4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x78>
 80073d0:	2305      	movs	r3, #5
 80073d2:	e02c      	b.n	800742e <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 80073d4:	edd7 7a00 	vldr	s15, [r7]
 80073d8:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8007450 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf4>
 80073dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80073e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073e4:	d801      	bhi.n	80073ea <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x8e>
 80073e6:	2306      	movs	r3, #6
 80073e8:	e021      	b.n	800742e <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 80073ea:	edd7 7a00 	vldr	s15, [r7]
 80073ee:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8007454 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf8>
 80073f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80073f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073fa:	d801      	bhi.n	8007400 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xa4>
 80073fc:	2307      	movs	r3, #7
 80073fe:	e016      	b.n	800742e <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8007400:	edd7 7a00 	vldr	s15, [r7]
 8007404:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8007458 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xfc>
 8007408:	eef4 7ac7 	vcmpe.f32	s15, s14
 800740c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007410:	d801      	bhi.n	8007416 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xba>
 8007412:	2308      	movs	r3, #8
 8007414:	e00b      	b.n	800742e <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8007416:	edd7 7a00 	vldr	s15, [r7]
 800741a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800745c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x100>
 800741e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007426:	d801      	bhi.n	800742c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd0>
 8007428:	2309      	movs	r3, #9
 800742a:	e000      	b.n	800742e <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 800742c:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 800742e:	687a      	ldr	r2, [r7, #4]
 8007430:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                : (Odr <=  833.0f) ? LSM6DSL_XL_ODR_833Hz
                : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
                : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
                :                    LSM6DSL_XL_ODR_6k66Hz;

  return LSM6DSL_OK;
 8007434:	2300      	movs	r3, #0
}
 8007436:	4618      	mov	r0, r3
 8007438:	370c      	adds	r7, #12
 800743a:	46bd      	mov	sp, r7
 800743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007440:	4770      	bx	lr
 8007442:	bf00      	nop
 8007444:	42500000 	.word	0x42500000
 8007448:	42d00000 	.word	0x42d00000
 800744c:	43500000 	.word	0x43500000
 8007450:	43d00000 	.word	0x43d00000
 8007454:	44504000 	.word	0x44504000
 8007458:	44cf8000 	.word	0x44cf8000
 800745c:	45502000 	.word	0x45502000

08007460 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b084      	sub	sp, #16
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
 8007468:	6039      	str	r1, [r7, #0]
  lsm6dsl_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 800746a:	edd7 7a00 	vldr	s15, [r7]
 800746e:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8007472:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800747a:	d801      	bhi.n	8007480 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x20>
 800747c:	2301      	movs	r3, #1
 800747e:	e058      	b.n	8007532 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 8007480:	edd7 7a00 	vldr	s15, [r7]
 8007484:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8007488:	eef4 7ac7 	vcmpe.f32	s15, s14
 800748c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007490:	d801      	bhi.n	8007496 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x36>
 8007492:	2302      	movs	r3, #2
 8007494:	e04d      	b.n	8007532 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 8007496:	edd7 7a00 	vldr	s15, [r7]
 800749a:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8007558 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf8>
 800749e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80074a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074a6:	d801      	bhi.n	80074ac <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x4c>
 80074a8:	2303      	movs	r3, #3
 80074aa:	e042      	b.n	8007532 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 80074ac:	edd7 7a00 	vldr	s15, [r7]
 80074b0:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800755c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 80074b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80074b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074bc:	d801      	bhi.n	80074c2 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x62>
 80074be:	2304      	movs	r3, #4
 80074c0:	e037      	b.n	8007532 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 80074c2:	edd7 7a00 	vldr	s15, [r7]
 80074c6:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8007560 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x100>
 80074ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80074ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074d2:	d801      	bhi.n	80074d8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x78>
 80074d4:	2305      	movs	r3, #5
 80074d6:	e02c      	b.n	8007532 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 80074d8:	edd7 7a00 	vldr	s15, [r7]
 80074dc:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8007564 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x104>
 80074e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80074e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074e8:	d801      	bhi.n	80074ee <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x8e>
 80074ea:	2306      	movs	r3, #6
 80074ec:	e021      	b.n	8007532 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 80074ee:	edd7 7a00 	vldr	s15, [r7]
 80074f2:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8007568 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x108>
 80074f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80074fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074fe:	d801      	bhi.n	8007504 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xa4>
 8007500:	2307      	movs	r3, #7
 8007502:	e016      	b.n	8007532 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 8007504:	edd7 7a00 	vldr	s15, [r7]
 8007508:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800756c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 800750c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007514:	d801      	bhi.n	800751a <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xba>
 8007516:	2308      	movs	r3, #8
 8007518:	e00b      	b.n	8007532 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 800751a:	edd7 7a00 	vldr	s15, [r7]
 800751e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8007570 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x110>
 8007522:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800752a:	d801      	bhi.n	8007530 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd0>
 800752c:	2309      	movs	r3, #9
 800752e:	e000      	b.n	8007532 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 8007530:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 8007532:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
          :                    LSM6DSL_GY_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	331c      	adds	r3, #28
 8007538:	7bfa      	ldrb	r2, [r7, #15]
 800753a:	4611      	mov	r1, r2
 800753c:	4618      	mov	r0, r3
 800753e:	f000 fa55 	bl	80079ec <lsm6dsl_gy_data_rate_set>
 8007542:	4603      	mov	r3, r0
 8007544:	2b00      	cmp	r3, #0
 8007546:	d002      	beq.n	800754e <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xee>
  {
    return LSM6DSL_ERROR;
 8007548:	f04f 33ff 	mov.w	r3, #4294967295
 800754c:	e000      	b.n	8007550 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  }

  return LSM6DSL_OK;
 800754e:	2300      	movs	r3, #0
}
 8007550:	4618      	mov	r0, r3
 8007552:	3710      	adds	r7, #16
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}
 8007558:	42500000 	.word	0x42500000
 800755c:	42d00000 	.word	0x42d00000
 8007560:	43500000 	.word	0x43500000
 8007564:	43d00000 	.word	0x43d00000
 8007568:	44504000 	.word	0x44504000
 800756c:	44cf8000 	.word	0x44cf8000
 8007570:	45502000 	.word	0x45502000

08007574 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8007574:	b480      	push	{r7}
 8007576:	b083      	sub	sp, #12
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	6039      	str	r1, [r7, #0]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
                 : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 800757e:	edd7 7a00 	vldr	s15, [r7]
 8007582:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8007586:	eef4 7ac7 	vcmpe.f32	s15, s14
 800758a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800758e:	d801      	bhi.n	8007594 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x20>
 8007590:	2301      	movs	r3, #1
 8007592:	e058      	b.n	8007646 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8007594:	edd7 7a00 	vldr	s15, [r7]
 8007598:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800759c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075a4:	d801      	bhi.n	80075aa <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x36>
 80075a6:	2302      	movs	r3, #2
 80075a8:	e04d      	b.n	8007646 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 80075aa:	edd7 7a00 	vldr	s15, [r7]
 80075ae:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800765c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 80075b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075ba:	d801      	bhi.n	80075c0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x4c>
 80075bc:	2303      	movs	r3, #3
 80075be:	e042      	b.n	8007646 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 80075c0:	edd7 7a00 	vldr	s15, [r7]
 80075c4:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8007660 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xec>
 80075c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075d0:	d801      	bhi.n	80075d6 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x62>
 80075d2:	2304      	movs	r3, #4
 80075d4:	e037      	b.n	8007646 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 80075d6:	edd7 7a00 	vldr	s15, [r7]
 80075da:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8007664 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 80075de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075e6:	d801      	bhi.n	80075ec <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x78>
 80075e8:	2305      	movs	r3, #5
 80075ea:	e02c      	b.n	8007646 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 80075ec:	edd7 7a00 	vldr	s15, [r7]
 80075f0:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8007668 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 80075f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075fc:	d801      	bhi.n	8007602 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x8e>
 80075fe:	2306      	movs	r3, #6
 8007600:	e021      	b.n	8007646 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8007602:	edd7 7a00 	vldr	s15, [r7]
 8007606:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800766c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 800760a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800760e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007612:	d801      	bhi.n	8007618 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xa4>
 8007614:	2307      	movs	r3, #7
 8007616:	e016      	b.n	8007646 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8007618:	edd7 7a00 	vldr	s15, [r7]
 800761c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8007670 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 8007620:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007628:	d801      	bhi.n	800762e <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xba>
 800762a:	2308      	movs	r3, #8
 800762c:	e00b      	b.n	8007646 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 800762e:	edd7 7a00 	vldr	s15, [r7]
 8007632:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8007674 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8007636:	eef4 7ac7 	vcmpe.f32	s15, s14
 800763a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800763e:	d801      	bhi.n	8007644 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd0>
 8007640:	2309      	movs	r3, #9
 8007642:	e000      	b.n	8007646 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8007644:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 8007646:	687a      	ldr	r2, [r7, #4]
 8007648:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
                 : (Odr <=  833.0f) ? LSM6DSL_GY_ODR_833Hz
                 : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
                 : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
                 :                    LSM6DSL_GY_ODR_6k66Hz;

  return LSM6DSL_OK;
 800764c:	2300      	movs	r3, #0
}
 800764e:	4618      	mov	r0, r3
 8007650:	370c      	adds	r7, #12
 8007652:	46bd      	mov	sp, r7
 8007654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007658:	4770      	bx	lr
 800765a:	bf00      	nop
 800765c:	42500000 	.word	0x42500000
 8007660:	42d00000 	.word	0x42d00000
 8007664:	43500000 	.word	0x43500000
 8007668:	43d00000 	.word	0x43d00000
 800766c:	44504000 	.word	0x44504000
 8007670:	44cf8000 	.word	0x44cf8000
 8007674:	45502000 	.word	0x45502000

08007678 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8007678:	b590      	push	{r4, r7, lr}
 800767a:	b087      	sub	sp, #28
 800767c:	af00      	add	r7, sp, #0
 800767e:	60f8      	str	r0, [r7, #12]
 8007680:	607a      	str	r2, [r7, #4]
 8007682:	461a      	mov	r2, r3
 8007684:	460b      	mov	r3, r1
 8007686:	72fb      	strb	r3, [r7, #11]
 8007688:	4613      	mov	r3, r2
 800768a:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	695c      	ldr	r4, [r3, #20]
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	7b1b      	ldrb	r3, [r3, #12]
 8007698:	b298      	uxth	r0, r3
 800769a:	7afb      	ldrb	r3, [r7, #11]
 800769c:	b299      	uxth	r1, r3
 800769e:	893b      	ldrh	r3, [r7, #8]
 80076a0:	687a      	ldr	r2, [r7, #4]
 80076a2:	47a0      	blx	r4
 80076a4:	4603      	mov	r3, r0
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	371c      	adds	r7, #28
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd90      	pop	{r4, r7, pc}

080076ae <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80076ae:	b590      	push	{r4, r7, lr}
 80076b0:	b087      	sub	sp, #28
 80076b2:	af00      	add	r7, sp, #0
 80076b4:	60f8      	str	r0, [r7, #12]
 80076b6:	607a      	str	r2, [r7, #4]
 80076b8:	461a      	mov	r2, r3
 80076ba:	460b      	mov	r3, r1
 80076bc:	72fb      	strb	r3, [r7, #11]
 80076be:	4613      	mov	r3, r2
 80076c0:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	691c      	ldr	r4, [r3, #16]
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	7b1b      	ldrb	r3, [r3, #12]
 80076ce:	b298      	uxth	r0, r3
 80076d0:	7afb      	ldrb	r3, [r7, #11]
 80076d2:	b299      	uxth	r1, r3
 80076d4:	893b      	ldrh	r3, [r7, #8]
 80076d6:	687a      	ldr	r2, [r7, #4]
 80076d8:	47a0      	blx	r4
 80076da:	4603      	mov	r3, r0
}
 80076dc:	4618      	mov	r0, r3
 80076de:	371c      	adds	r7, #28
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd90      	pop	{r4, r7, pc}

080076e4 <lsm6dsl_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 80076e4:	b590      	push	{r4, r7, lr}
 80076e6:	b087      	sub	sp, #28
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	60f8      	str	r0, [r7, #12]
 80076ec:	607a      	str	r2, [r7, #4]
 80076ee:	461a      	mov	r2, r3
 80076f0:	460b      	mov	r3, r1
 80076f2:	72fb      	strb	r3, [r7, #11]
 80076f4:	4613      	mov	r3, r2
 80076f6:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	685c      	ldr	r4, [r3, #4]
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	6898      	ldr	r0, [r3, #8]
 8007700:	893b      	ldrh	r3, [r7, #8]
 8007702:	7af9      	ldrb	r1, [r7, #11]
 8007704:	687a      	ldr	r2, [r7, #4]
 8007706:	47a0      	blx	r4
 8007708:	6178      	str	r0, [r7, #20]
  return ret;
 800770a:	697b      	ldr	r3, [r7, #20]
}
 800770c:	4618      	mov	r0, r3
 800770e:	371c      	adds	r7, #28
 8007710:	46bd      	mov	sp, r7
 8007712:	bd90      	pop	{r4, r7, pc}

08007714 <lsm6dsl_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 8007714:	b590      	push	{r4, r7, lr}
 8007716:	b087      	sub	sp, #28
 8007718:	af00      	add	r7, sp, #0
 800771a:	60f8      	str	r0, [r7, #12]
 800771c:	607a      	str	r2, [r7, #4]
 800771e:	461a      	mov	r2, r3
 8007720:	460b      	mov	r3, r1
 8007722:	72fb      	strb	r3, [r7, #11]
 8007724:	4613      	mov	r3, r2
 8007726:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681c      	ldr	r4, [r3, #0]
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	6898      	ldr	r0, [r3, #8]
 8007730:	893b      	ldrh	r3, [r7, #8]
 8007732:	7af9      	ldrb	r1, [r7, #11]
 8007734:	687a      	ldr	r2, [r7, #4]
 8007736:	47a0      	blx	r4
 8007738:	6178      	str	r0, [r7, #20]
  return ret;
 800773a:	697b      	ldr	r3, [r7, #20]
}
 800773c:	4618      	mov	r0, r3
 800773e:	371c      	adds	r7, #28
 8007740:	46bd      	mov	sp, r7
 8007742:	bd90      	pop	{r4, r7, pc}

08007744 <lsm6dsl_xl_full_scale_set>:
  * @param  val    Change the values of fs_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx, lsm6dsl_fs_xl_t val)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b084      	sub	sp, #16
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
 800774c:	460b      	mov	r3, r1
 800774e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8007750:	f107 0208 	add.w	r2, r7, #8
 8007754:	2301      	movs	r3, #1
 8007756:	2110      	movs	r1, #16
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f7ff ffc3 	bl	80076e4 <lsm6dsl_read_reg>
 800775e:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d10f      	bne.n	8007786 <lsm6dsl_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t) val;
 8007766:	78fb      	ldrb	r3, [r7, #3]
 8007768:	f003 0303 	and.w	r3, r3, #3
 800776c:	b2da      	uxtb	r2, r3
 800776e:	7a3b      	ldrb	r3, [r7, #8]
 8007770:	f362 0383 	bfi	r3, r2, #2, #2
 8007774:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8007776:	f107 0208 	add.w	r2, r7, #8
 800777a:	2301      	movs	r3, #1
 800777c:	2110      	movs	r1, #16
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f7ff ffc8 	bl	8007714 <lsm6dsl_write_reg>
 8007784:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8007786:	68fb      	ldr	r3, [r7, #12]
}
 8007788:	4618      	mov	r0, r3
 800778a:	3710      	adds	r7, #16
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}

08007790 <lsm6dsl_xl_full_scale_get>:
  * @param  val    Get the values of fs_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_get(stmdev_ctx_t *ctx, lsm6dsl_fs_xl_t *val)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b084      	sub	sp, #16
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 800779a:	f107 0208 	add.w	r2, r7, #8
 800779e:	2301      	movs	r3, #1
 80077a0:	2110      	movs	r1, #16
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f7ff ff9e 	bl	80076e4 <lsm6dsl_read_reg>
 80077a8:	60f8      	str	r0, [r7, #12]
  switch (ctrl1_xl.fs_xl) {
 80077aa:	7a3b      	ldrb	r3, [r7, #8]
 80077ac:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80077b0:	b2db      	uxtb	r3, r3
 80077b2:	2b03      	cmp	r3, #3
 80077b4:	d81a      	bhi.n	80077ec <lsm6dsl_xl_full_scale_get+0x5c>
 80077b6:	a201      	add	r2, pc, #4	; (adr r2, 80077bc <lsm6dsl_xl_full_scale_get+0x2c>)
 80077b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077bc:	080077cd 	.word	0x080077cd
 80077c0:	080077d5 	.word	0x080077d5
 80077c4:	080077dd 	.word	0x080077dd
 80077c8:	080077e5 	.word	0x080077e5
    case LSM6DSL_2g:
      *val = LSM6DSL_2g;
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	2200      	movs	r2, #0
 80077d0:	701a      	strb	r2, [r3, #0]
      break;
 80077d2:	e00f      	b.n	80077f4 <lsm6dsl_xl_full_scale_get+0x64>
    case LSM6DSL_16g:
      *val = LSM6DSL_16g;
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	2201      	movs	r2, #1
 80077d8:	701a      	strb	r2, [r3, #0]
      break;
 80077da:	e00b      	b.n	80077f4 <lsm6dsl_xl_full_scale_get+0x64>
    case LSM6DSL_4g:
      *val = LSM6DSL_4g;
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	2202      	movs	r2, #2
 80077e0:	701a      	strb	r2, [r3, #0]
      break;
 80077e2:	e007      	b.n	80077f4 <lsm6dsl_xl_full_scale_get+0x64>
    case LSM6DSL_8g:
      *val = LSM6DSL_8g;
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	2203      	movs	r2, #3
 80077e8:	701a      	strb	r2, [r3, #0]
      break;
 80077ea:	e003      	b.n	80077f4 <lsm6dsl_xl_full_scale_get+0x64>
    default:
      *val = LSM6DSL_XL_FS_ND;
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	2204      	movs	r2, #4
 80077f0:	701a      	strb	r2, [r3, #0]
      break;
 80077f2:	bf00      	nop
  }

  return ret;
 80077f4:	68fb      	ldr	r3, [r7, #12]
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3710      	adds	r7, #16
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}
 80077fe:	bf00      	nop

08007800 <lsm6dsl_xl_data_rate_set>:
  * @param  val    Change the values of odr_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx, lsm6dsl_odr_xl_t val)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b084      	sub	sp, #16
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	460b      	mov	r3, r1
 800780a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 800780c:	f107 0208 	add.w	r2, r7, #8
 8007810:	2301      	movs	r3, #1
 8007812:	2110      	movs	r1, #16
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f7ff ff65 	bl	80076e4 <lsm6dsl_read_reg>
 800781a:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d10f      	bne.n	8007842 <lsm6dsl_xl_data_rate_set+0x42>
    ctrl1_xl.odr_xl = (uint8_t) val;
 8007822:	78fb      	ldrb	r3, [r7, #3]
 8007824:	f003 030f 	and.w	r3, r3, #15
 8007828:	b2da      	uxtb	r2, r3
 800782a:	7a3b      	ldrb	r3, [r7, #8]
 800782c:	f362 1307 	bfi	r3, r2, #4, #4
 8007830:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8007832:	f107 0208 	add.w	r2, r7, #8
 8007836:	2301      	movs	r3, #1
 8007838:	2110      	movs	r1, #16
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f7ff ff6a 	bl	8007714 <lsm6dsl_write_reg>
 8007840:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8007842:	68fb      	ldr	r3, [r7, #12]
}
 8007844:	4618      	mov	r0, r3
 8007846:	3710      	adds	r7, #16
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}

0800784c <lsm6dsl_xl_data_rate_get>:
  * @param  val    Get the values of odr_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_get(stmdev_ctx_t *ctx, lsm6dsl_odr_xl_t *val)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b084      	sub	sp, #16
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
 8007854:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8007856:	f107 0208 	add.w	r2, r7, #8
 800785a:	2301      	movs	r3, #1
 800785c:	2110      	movs	r1, #16
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f7ff ff40 	bl	80076e4 <lsm6dsl_read_reg>
 8007864:	60f8      	str	r0, [r7, #12]
  switch (ctrl1_xl.odr_xl) {
 8007866:	7a3b      	ldrb	r3, [r7, #8]
 8007868:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800786c:	b2db      	uxtb	r3, r3
 800786e:	2b0b      	cmp	r3, #11
 8007870:	d84a      	bhi.n	8007908 <lsm6dsl_xl_data_rate_get+0xbc>
 8007872:	a201      	add	r2, pc, #4	; (adr r2, 8007878 <lsm6dsl_xl_data_rate_get+0x2c>)
 8007874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007878:	080078a9 	.word	0x080078a9
 800787c:	080078b1 	.word	0x080078b1
 8007880:	080078b9 	.word	0x080078b9
 8007884:	080078c1 	.word	0x080078c1
 8007888:	080078c9 	.word	0x080078c9
 800788c:	080078d1 	.word	0x080078d1
 8007890:	080078d9 	.word	0x080078d9
 8007894:	080078e1 	.word	0x080078e1
 8007898:	080078e9 	.word	0x080078e9
 800789c:	080078f1 	.word	0x080078f1
 80078a0:	080078f9 	.word	0x080078f9
 80078a4:	08007901 	.word	0x08007901
    case LSM6DSL_XL_ODR_OFF:
      *val = LSM6DSL_XL_ODR_OFF;
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	2200      	movs	r2, #0
 80078ac:	701a      	strb	r2, [r3, #0]
      break;
 80078ae:	e02f      	b.n	8007910 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_12Hz5:
      *val = LSM6DSL_XL_ODR_12Hz5;
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	2201      	movs	r2, #1
 80078b4:	701a      	strb	r2, [r3, #0]
      break;
 80078b6:	e02b      	b.n	8007910 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_26Hz:
      *val = LSM6DSL_XL_ODR_26Hz;
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	2202      	movs	r2, #2
 80078bc:	701a      	strb	r2, [r3, #0]
      break;
 80078be:	e027      	b.n	8007910 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_52Hz:
      *val = LSM6DSL_XL_ODR_52Hz;
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	2203      	movs	r2, #3
 80078c4:	701a      	strb	r2, [r3, #0]
      break;
 80078c6:	e023      	b.n	8007910 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_104Hz:
      *val = LSM6DSL_XL_ODR_104Hz;
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	2204      	movs	r2, #4
 80078cc:	701a      	strb	r2, [r3, #0]
      break;
 80078ce:	e01f      	b.n	8007910 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_208Hz:
      *val = LSM6DSL_XL_ODR_208Hz;
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	2205      	movs	r2, #5
 80078d4:	701a      	strb	r2, [r3, #0]
      break;
 80078d6:	e01b      	b.n	8007910 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_416Hz:
      *val = LSM6DSL_XL_ODR_416Hz;
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	2206      	movs	r2, #6
 80078dc:	701a      	strb	r2, [r3, #0]
      break;
 80078de:	e017      	b.n	8007910 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_833Hz:
      *val = LSM6DSL_XL_ODR_833Hz;
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	2207      	movs	r2, #7
 80078e4:	701a      	strb	r2, [r3, #0]
      break;
 80078e6:	e013      	b.n	8007910 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_1k66Hz:
      *val = LSM6DSL_XL_ODR_1k66Hz;
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	2208      	movs	r2, #8
 80078ec:	701a      	strb	r2, [r3, #0]
      break;
 80078ee:	e00f      	b.n	8007910 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_3k33Hz:
      *val = LSM6DSL_XL_ODR_3k33Hz;
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	2209      	movs	r2, #9
 80078f4:	701a      	strb	r2, [r3, #0]
      break;
 80078f6:	e00b      	b.n	8007910 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_6k66Hz:
      *val = LSM6DSL_XL_ODR_6k66Hz;
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	220a      	movs	r2, #10
 80078fc:	701a      	strb	r2, [r3, #0]
      break;
 80078fe:	e007      	b.n	8007910 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_1Hz6:
      *val = LSM6DSL_XL_ODR_1Hz6;
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	220b      	movs	r2, #11
 8007904:	701a      	strb	r2, [r3, #0]
      break;
 8007906:	e003      	b.n	8007910 <lsm6dsl_xl_data_rate_get+0xc4>
    default:
      *val = LSM6DSL_XL_ODR_ND;
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	220c      	movs	r2, #12
 800790c:	701a      	strb	r2, [r3, #0]
      break;
 800790e:	bf00      	nop
  }

  return ret;
 8007910:	68fb      	ldr	r3, [r7, #12]
}
 8007912:	4618      	mov	r0, r3
 8007914:	3710      	adds	r7, #16
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}
 800791a:	bf00      	nop

0800791c <lsm6dsl_gy_full_scale_set>:
  * @param  val    Change the values of fs_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx, lsm6dsl_fs_g_t val)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b084      	sub	sp, #16
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	460b      	mov	r3, r1
 8007926:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8007928:	f107 0208 	add.w	r2, r7, #8
 800792c:	2301      	movs	r3, #1
 800792e:	2111      	movs	r1, #17
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f7ff fed7 	bl	80076e4 <lsm6dsl_read_reg>
 8007936:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d10f      	bne.n	800795e <lsm6dsl_gy_full_scale_set+0x42>
    ctrl2_g.fs_g = (uint8_t) val;
 800793e:	78fb      	ldrb	r3, [r7, #3]
 8007940:	f003 0307 	and.w	r3, r3, #7
 8007944:	b2da      	uxtb	r2, r3
 8007946:	7a3b      	ldrb	r3, [r7, #8]
 8007948:	f362 0343 	bfi	r3, r2, #1, #3
 800794c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 800794e:	f107 0208 	add.w	r2, r7, #8
 8007952:	2301      	movs	r3, #1
 8007954:	2111      	movs	r1, #17
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f7ff fedc 	bl	8007714 <lsm6dsl_write_reg>
 800795c:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800795e:	68fb      	ldr	r3, [r7, #12]
}
 8007960:	4618      	mov	r0, r3
 8007962:	3710      	adds	r7, #16
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}

08007968 <lsm6dsl_gy_full_scale_get>:
  * @param  val    Get the values of fs_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_get(stmdev_ctx_t *ctx, lsm6dsl_fs_g_t *val)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b084      	sub	sp, #16
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8007972:	f107 0208 	add.w	r2, r7, #8
 8007976:	2301      	movs	r3, #1
 8007978:	2111      	movs	r1, #17
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f7ff feb2 	bl	80076e4 <lsm6dsl_read_reg>
 8007980:	60f8      	str	r0, [r7, #12]
  switch (ctrl2_g.fs_g) {
 8007982:	7a3b      	ldrb	r3, [r7, #8]
 8007984:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8007988:	b2db      	uxtb	r3, r3
 800798a:	2b06      	cmp	r3, #6
 800798c:	d824      	bhi.n	80079d8 <lsm6dsl_gy_full_scale_get+0x70>
 800798e:	a201      	add	r2, pc, #4	; (adr r2, 8007994 <lsm6dsl_gy_full_scale_get+0x2c>)
 8007990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007994:	080079b1 	.word	0x080079b1
 8007998:	080079b9 	.word	0x080079b9
 800799c:	080079c1 	.word	0x080079c1
 80079a0:	080079d9 	.word	0x080079d9
 80079a4:	080079c9 	.word	0x080079c9
 80079a8:	080079d9 	.word	0x080079d9
 80079ac:	080079d1 	.word	0x080079d1
    case LSM6DSL_250dps:
      *val = LSM6DSL_250dps;
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	2200      	movs	r2, #0
 80079b4:	701a      	strb	r2, [r3, #0]
      break;
 80079b6:	e013      	b.n	80079e0 <lsm6dsl_gy_full_scale_get+0x78>
    case LSM6DSL_125dps:
      *val = LSM6DSL_125dps;
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	2201      	movs	r2, #1
 80079bc:	701a      	strb	r2, [r3, #0]
      break;
 80079be:	e00f      	b.n	80079e0 <lsm6dsl_gy_full_scale_get+0x78>
    case LSM6DSL_500dps:
      *val = LSM6DSL_500dps;
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	2202      	movs	r2, #2
 80079c4:	701a      	strb	r2, [r3, #0]
      break;
 80079c6:	e00b      	b.n	80079e0 <lsm6dsl_gy_full_scale_get+0x78>
    case LSM6DSL_1000dps:
      *val = LSM6DSL_1000dps;
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	2204      	movs	r2, #4
 80079cc:	701a      	strb	r2, [r3, #0]
      break;
 80079ce:	e007      	b.n	80079e0 <lsm6dsl_gy_full_scale_get+0x78>
    case LSM6DSL_2000dps:
      *val = LSM6DSL_2000dps;
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	2206      	movs	r2, #6
 80079d4:	701a      	strb	r2, [r3, #0]
      break;
 80079d6:	e003      	b.n	80079e0 <lsm6dsl_gy_full_scale_get+0x78>
    default:
      *val = LSM6DSL_GY_FS_ND;
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	2207      	movs	r2, #7
 80079dc:	701a      	strb	r2, [r3, #0]
      break;
 80079de:	bf00      	nop
  }

  return ret;
 80079e0:	68fb      	ldr	r3, [r7, #12]
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	3710      	adds	r7, #16
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}
 80079ea:	bf00      	nop

080079ec <lsm6dsl_gy_data_rate_set>:
  * @param  val    Change the values of odr_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx, lsm6dsl_odr_g_t val)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b084      	sub	sp, #16
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
 80079f4:	460b      	mov	r3, r1
 80079f6:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 80079f8:	f107 0208 	add.w	r2, r7, #8
 80079fc:	2301      	movs	r3, #1
 80079fe:	2111      	movs	r1, #17
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f7ff fe6f 	bl	80076e4 <lsm6dsl_read_reg>
 8007a06:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d10f      	bne.n	8007a2e <lsm6dsl_gy_data_rate_set+0x42>
    ctrl2_g.odr_g = (uint8_t) val;
 8007a0e:	78fb      	ldrb	r3, [r7, #3]
 8007a10:	f003 030f 	and.w	r3, r3, #15
 8007a14:	b2da      	uxtb	r2, r3
 8007a16:	7a3b      	ldrb	r3, [r7, #8]
 8007a18:	f362 1307 	bfi	r3, r2, #4, #4
 8007a1c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8007a1e:	f107 0208 	add.w	r2, r7, #8
 8007a22:	2301      	movs	r3, #1
 8007a24:	2111      	movs	r1, #17
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f7ff fe74 	bl	8007714 <lsm6dsl_write_reg>
 8007a2c:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3710      	adds	r7, #16
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}

08007a38 <lsm6dsl_gy_data_rate_get>:
  * @param  val    Get the values of odr_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_get(stmdev_ctx_t *ctx, lsm6dsl_odr_g_t *val)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b084      	sub	sp, #16
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8007a42:	f107 0208 	add.w	r2, r7, #8
 8007a46:	2301      	movs	r3, #1
 8007a48:	2111      	movs	r1, #17
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f7ff fe4a 	bl	80076e4 <lsm6dsl_read_reg>
 8007a50:	60f8      	str	r0, [r7, #12]
  switch (ctrl2_g.odr_g) {
 8007a52:	7a3b      	ldrb	r3, [r7, #8]
 8007a54:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8007a58:	b2db      	uxtb	r3, r3
 8007a5a:	2b0a      	cmp	r3, #10
 8007a5c:	d844      	bhi.n	8007ae8 <lsm6dsl_gy_data_rate_get+0xb0>
 8007a5e:	a201      	add	r2, pc, #4	; (adr r2, 8007a64 <lsm6dsl_gy_data_rate_get+0x2c>)
 8007a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a64:	08007a91 	.word	0x08007a91
 8007a68:	08007a99 	.word	0x08007a99
 8007a6c:	08007aa1 	.word	0x08007aa1
 8007a70:	08007aa9 	.word	0x08007aa9
 8007a74:	08007ab1 	.word	0x08007ab1
 8007a78:	08007ab9 	.word	0x08007ab9
 8007a7c:	08007ac1 	.word	0x08007ac1
 8007a80:	08007ac9 	.word	0x08007ac9
 8007a84:	08007ad1 	.word	0x08007ad1
 8007a88:	08007ad9 	.word	0x08007ad9
 8007a8c:	08007ae1 	.word	0x08007ae1
    case LSM6DSL_GY_ODR_OFF:
      *val = LSM6DSL_GY_ODR_OFF;
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	2200      	movs	r2, #0
 8007a94:	701a      	strb	r2, [r3, #0]
      break;
 8007a96:	e02b      	b.n	8007af0 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_12Hz5:
      *val = LSM6DSL_GY_ODR_12Hz5;
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	701a      	strb	r2, [r3, #0]
      break;
 8007a9e:	e027      	b.n	8007af0 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_26Hz:
      *val = LSM6DSL_GY_ODR_26Hz;
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	2202      	movs	r2, #2
 8007aa4:	701a      	strb	r2, [r3, #0]
      break;
 8007aa6:	e023      	b.n	8007af0 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_52Hz:
      *val = LSM6DSL_GY_ODR_52Hz;
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	2203      	movs	r2, #3
 8007aac:	701a      	strb	r2, [r3, #0]
      break;
 8007aae:	e01f      	b.n	8007af0 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_104Hz:
      *val = LSM6DSL_GY_ODR_104Hz;
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	2204      	movs	r2, #4
 8007ab4:	701a      	strb	r2, [r3, #0]
      break;
 8007ab6:	e01b      	b.n	8007af0 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_208Hz:
      *val = LSM6DSL_GY_ODR_208Hz;
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	2205      	movs	r2, #5
 8007abc:	701a      	strb	r2, [r3, #0]
      break;
 8007abe:	e017      	b.n	8007af0 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_416Hz:
      *val = LSM6DSL_GY_ODR_416Hz;
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	2206      	movs	r2, #6
 8007ac4:	701a      	strb	r2, [r3, #0]
      break;
 8007ac6:	e013      	b.n	8007af0 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_833Hz:
      *val = LSM6DSL_GY_ODR_833Hz;
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	2207      	movs	r2, #7
 8007acc:	701a      	strb	r2, [r3, #0]
      break;
 8007ace:	e00f      	b.n	8007af0 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_1k66Hz:
      *val = LSM6DSL_GY_ODR_1k66Hz;
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	2208      	movs	r2, #8
 8007ad4:	701a      	strb	r2, [r3, #0]
      break;
 8007ad6:	e00b      	b.n	8007af0 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_3k33Hz:
      *val = LSM6DSL_GY_ODR_3k33Hz;
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	2209      	movs	r2, #9
 8007adc:	701a      	strb	r2, [r3, #0]
      break;
 8007ade:	e007      	b.n	8007af0 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_6k66Hz:
      *val = LSM6DSL_GY_ODR_6k66Hz;
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	220a      	movs	r2, #10
 8007ae4:	701a      	strb	r2, [r3, #0]
      break;
 8007ae6:	e003      	b.n	8007af0 <lsm6dsl_gy_data_rate_get+0xb8>
    default:
      *val = LSM6DSL_GY_ODR_ND;
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	220b      	movs	r2, #11
 8007aec:	701a      	strb	r2, [r3, #0]
      break;
 8007aee:	bf00      	nop
  }

  return ret;
 8007af0:	68fb      	ldr	r3, [r7, #12]
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	3710      	adds	r7, #16
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}
 8007afa:	bf00      	nop

08007afc <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b084      	sub	sp, #16
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	460b      	mov	r3, r1
 8007b06:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8007b08:	f107 0208 	add.w	r2, r7, #8
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	2112      	movs	r1, #18
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f7ff fde7 	bl	80076e4 <lsm6dsl_read_reg>
 8007b16:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d10f      	bne.n	8007b3e <lsm6dsl_block_data_update_set+0x42>
    ctrl3_c.bdu = val;
 8007b1e:	78fb      	ldrb	r3, [r7, #3]
 8007b20:	f003 0301 	and.w	r3, r3, #1
 8007b24:	b2da      	uxtb	r2, r3
 8007b26:	7a3b      	ldrb	r3, [r7, #8]
 8007b28:	f362 1386 	bfi	r3, r2, #6, #1
 8007b2c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8007b2e:	f107 0208 	add.w	r2, r7, #8
 8007b32:	2301      	movs	r3, #1
 8007b34:	2112      	movs	r1, #18
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f7ff fdec 	bl	8007714 <lsm6dsl_write_reg>
 8007b3c:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	3710      	adds	r7, #16
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}

08007b48 <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b084      	sub	sp, #16
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 8007b52:	2306      	movs	r3, #6
 8007b54:	683a      	ldr	r2, [r7, #0]
 8007b56:	2122      	movs	r1, #34	; 0x22
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f7ff fdc3 	bl	80076e4 <lsm6dsl_read_reg>
 8007b5e:	60f8      	str	r0, [r7, #12]
  return ret;
 8007b60:	68fb      	ldr	r3, [r7, #12]
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3710      	adds	r7, #16
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}

08007b6a <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8007b6a:	b580      	push	{r7, lr}
 8007b6c:	b084      	sub	sp, #16
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	6078      	str	r0, [r7, #4]
 8007b72:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 8007b74:	2306      	movs	r3, #6
 8007b76:	683a      	ldr	r2, [r7, #0]
 8007b78:	2128      	movs	r1, #40	; 0x28
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f7ff fdb2 	bl	80076e4 <lsm6dsl_read_reg>
 8007b80:	60f8      	str	r0, [r7, #12]
  return ret;
 8007b82:	68fb      	ldr	r3, [r7, #12]
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3710      	adds	r7, #16
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}

08007b8c <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b084      	sub	sp, #16
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
 8007b94:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 8007b96:	2301      	movs	r3, #1
 8007b98:	683a      	ldr	r2, [r7, #0]
 8007b9a:	210f      	movs	r1, #15
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f7ff fda1 	bl	80076e4 <lsm6dsl_read_reg>
 8007ba2:	60f8      	str	r0, [r7, #12]
  return ret;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3710      	adds	r7, #16
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}

08007bae <lsm6dsl_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8007bae:	b580      	push	{r7, lr}
 8007bb0:	b084      	sub	sp, #16
 8007bb2:	af00      	add	r7, sp, #0
 8007bb4:	6078      	str	r0, [r7, #4]
 8007bb6:	460b      	mov	r3, r1
 8007bb8:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8007bba:	f107 0208 	add.w	r2, r7, #8
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	2112      	movs	r1, #18
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f7ff fd8e 	bl	80076e4 <lsm6dsl_read_reg>
 8007bc8:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d10f      	bne.n	8007bf0 <lsm6dsl_auto_increment_set+0x42>
    ctrl3_c.if_inc = val;
 8007bd0:	78fb      	ldrb	r3, [r7, #3]
 8007bd2:	f003 0301 	and.w	r3, r3, #1
 8007bd6:	b2da      	uxtb	r2, r3
 8007bd8:	7a3b      	ldrb	r3, [r7, #8]
 8007bda:	f362 0382 	bfi	r3, r2, #2, #1
 8007bde:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8007be0:	f107 0208 	add.w	r2, r7, #8
 8007be4:	2301      	movs	r3, #1
 8007be6:	2112      	movs	r1, #18
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f7ff fd93 	bl	8007714 <lsm6dsl_write_reg>
 8007bee:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3710      	adds	r7, #16
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}

08007bfa <lsm6dsl_fifo_mode_set>:
  * @param  val    Change the values of fifo_mode in reg FIFO_CTRL5
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx, lsm6dsl_fifo_mode_t val)
{
 8007bfa:	b580      	push	{r7, lr}
 8007bfc:	b084      	sub	sp, #16
 8007bfe:	af00      	add	r7, sp, #0
 8007c00:	6078      	str	r0, [r7, #4]
 8007c02:	460b      	mov	r3, r1
 8007c04:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5, (uint8_t*)&fifo_ctrl5, 1);
 8007c06:	f107 0208 	add.w	r2, r7, #8
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	210a      	movs	r1, #10
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f7ff fd68 	bl	80076e4 <lsm6dsl_read_reg>
 8007c14:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d10f      	bne.n	8007c3c <lsm6dsl_fifo_mode_set+0x42>
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 8007c1c:	78fb      	ldrb	r3, [r7, #3]
 8007c1e:	f003 0307 	and.w	r3, r3, #7
 8007c22:	b2da      	uxtb	r2, r3
 8007c24:	7a3b      	ldrb	r3, [r7, #8]
 8007c26:	f362 0302 	bfi	r3, r2, #0, #3
 8007c2a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5, (uint8_t*)&fifo_ctrl5, 1);
 8007c2c:	f107 0208 	add.w	r2, r7, #8
 8007c30:	2301      	movs	r3, #1
 8007c32:	210a      	movs	r1, #10
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f7ff fd6d 	bl	8007714 <lsm6dsl_write_reg>
 8007c3a:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	3710      	adds	r7, #16
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}
	...

08007c48 <IKS01A2_ENV_SENSOR_Init>:
 *         - ENV_TEMPERATURE and/or ENV_HUMIDITY for instance 0
 *         - ENV_TEMPERATURE and/or ENV_PRESSURE for instance 1
 * @retval BSP status
 */
int32_t IKS01A2_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b08a      	sub	sp, #40	; 0x28
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
 8007c50:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8007c52:	2300      	movs	r3, #0
 8007c54:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t function = ENV_TEMPERATURE;
 8007c56:	2301      	movs	r3, #1
 8007c58:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t component_functions = 0;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	61bb      	str	r3, [r7, #24]
  IKS01A2_ENV_SENSOR_Capabilities_t cap;

  switch (Instance)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d002      	beq.n	8007c6a <IKS01A2_ENV_SENSOR_Init+0x22>
 8007c64:	2b01      	cmp	r3, #1
 8007c66:	d032      	beq.n	8007cce <IKS01A2_ENV_SENSOR_Init+0x86>
 8007c68:	e063      	b.n	8007d32 <IKS01A2_ENV_SENSOR_Init+0xea>
  {
#if (USE_IKS01A2_ENV_SENSOR_HTS221_0 == 1)
    case IKS01A2_HTS221_0:
      if (HTS221_0_Probe(Functions) != BSP_ERROR_NONE)
 8007c6a:	6838      	ldr	r0, [r7, #0]
 8007c6c:	f000 f932 	bl	8007ed4 <HTS221_0_Probe>
 8007c70:	4603      	mov	r3, r0
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d002      	beq.n	8007c7c <IKS01A2_ENV_SENSOR_Init+0x34>
      {
        return BSP_ERROR_NO_INIT;
 8007c76:	f04f 33ff 	mov.w	r3, #4294967295
 8007c7a:	e098      	b.n	8007dae <IKS01A2_ENV_SENSOR_Init+0x166>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8007c7c:	4a4e      	ldr	r2, [pc, #312]	; (8007db8 <IKS01A2_ENV_SENSOR_Init+0x170>)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c84:	68db      	ldr	r3, [r3, #12]
 8007c86:	494d      	ldr	r1, [pc, #308]	; (8007dbc <IKS01A2_ENV_SENSOR_Init+0x174>)
 8007c88:	687a      	ldr	r2, [r7, #4]
 8007c8a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007c8e:	f107 0108 	add.w	r1, r7, #8
 8007c92:	4610      	mov	r0, r2
 8007c94:	4798      	blx	r3
 8007c96:	4603      	mov	r3, r0
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d002      	beq.n	8007ca2 <IKS01A2_ENV_SENSOR_Init+0x5a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8007c9c:	f06f 0306 	mvn.w	r3, #6
 8007ca0:	e085      	b.n	8007dae <IKS01A2_ENV_SENSOR_Init+0x166>
      }
      if (cap.Temperature == 1U)
 8007ca2:	7a3b      	ldrb	r3, [r7, #8]
 8007ca4:	2b01      	cmp	r3, #1
 8007ca6:	d103      	bne.n	8007cb0 <IKS01A2_ENV_SENSOR_Init+0x68>
      {
        component_functions |= ENV_TEMPERATURE;
 8007ca8:	69bb      	ldr	r3, [r7, #24]
 8007caa:	f043 0301 	orr.w	r3, r3, #1
 8007cae:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 8007cb0:	7abb      	ldrb	r3, [r7, #10]
 8007cb2:	2b01      	cmp	r3, #1
 8007cb4:	d103      	bne.n	8007cbe <IKS01A2_ENV_SENSOR_Init+0x76>
      {
        component_functions |= ENV_HUMIDITY;
 8007cb6:	69bb      	ldr	r3, [r7, #24]
 8007cb8:	f043 0304 	orr.w	r3, r3, #4
 8007cbc:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 8007cbe:	7a7b      	ldrb	r3, [r7, #9]
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	d13a      	bne.n	8007d3a <IKS01A2_ENV_SENSOR_Init+0xf2>
      {
        component_functions |= ENV_PRESSURE;
 8007cc4:	69bb      	ldr	r3, [r7, #24]
 8007cc6:	f043 0302 	orr.w	r3, r3, #2
 8007cca:	61bb      	str	r3, [r7, #24]
      }
      break;
 8007ccc:	e035      	b.n	8007d3a <IKS01A2_ENV_SENSOR_Init+0xf2>
#endif

#if (USE_IKS01A2_ENV_SENSOR_LPS22HB_0 == 1)
    case IKS01A2_LPS22HB_0:
      if (LPS22HB_0_Probe(Functions) != BSP_ERROR_NONE)
 8007cce:	6838      	ldr	r0, [r7, #0]
 8007cd0:	f000 f9ba 	bl	8008048 <LPS22HB_0_Probe>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d002      	beq.n	8007ce0 <IKS01A2_ENV_SENSOR_Init+0x98>
      {
        return BSP_ERROR_NO_INIT;
 8007cda:	f04f 33ff 	mov.w	r3, #4294967295
 8007cde:	e066      	b.n	8007dae <IKS01A2_ENV_SENSOR_Init+0x166>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8007ce0:	4a35      	ldr	r2, [pc, #212]	; (8007db8 <IKS01A2_ENV_SENSOR_Init+0x170>)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ce8:	68db      	ldr	r3, [r3, #12]
 8007cea:	4934      	ldr	r1, [pc, #208]	; (8007dbc <IKS01A2_ENV_SENSOR_Init+0x174>)
 8007cec:	687a      	ldr	r2, [r7, #4]
 8007cee:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007cf2:	f107 0108 	add.w	r1, r7, #8
 8007cf6:	4610      	mov	r0, r2
 8007cf8:	4798      	blx	r3
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d002      	beq.n	8007d06 <IKS01A2_ENV_SENSOR_Init+0xbe>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8007d00:	f06f 0306 	mvn.w	r3, #6
 8007d04:	e053      	b.n	8007dae <IKS01A2_ENV_SENSOR_Init+0x166>
      }
      if (cap.Temperature == 1U)
 8007d06:	7a3b      	ldrb	r3, [r7, #8]
 8007d08:	2b01      	cmp	r3, #1
 8007d0a:	d103      	bne.n	8007d14 <IKS01A2_ENV_SENSOR_Init+0xcc>
      {
        component_functions |= ENV_TEMPERATURE;
 8007d0c:	69bb      	ldr	r3, [r7, #24]
 8007d0e:	f043 0301 	orr.w	r3, r3, #1
 8007d12:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 8007d14:	7abb      	ldrb	r3, [r7, #10]
 8007d16:	2b01      	cmp	r3, #1
 8007d18:	d103      	bne.n	8007d22 <IKS01A2_ENV_SENSOR_Init+0xda>
      {
        component_functions |= ENV_HUMIDITY;
 8007d1a:	69bb      	ldr	r3, [r7, #24]
 8007d1c:	f043 0304 	orr.w	r3, r3, #4
 8007d20:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 8007d22:	7a7b      	ldrb	r3, [r7, #9]
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d10a      	bne.n	8007d3e <IKS01A2_ENV_SENSOR_Init+0xf6>
      {
        component_functions |= ENV_PRESSURE;
 8007d28:	69bb      	ldr	r3, [r7, #24]
 8007d2a:	f043 0302 	orr.w	r3, r3, #2
 8007d2e:	61bb      	str	r3, [r7, #24]
      }
      break;
 8007d30:	e005      	b.n	8007d3e <IKS01A2_ENV_SENSOR_Init+0xf6>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8007d32:	f06f 0301 	mvn.w	r3, #1
 8007d36:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007d38:	e002      	b.n	8007d40 <IKS01A2_ENV_SENSOR_Init+0xf8>
      break;
 8007d3a:	bf00      	nop
 8007d3c:	e000      	b.n	8007d40 <IKS01A2_ENV_SENSOR_Init+0xf8>
      break;
 8007d3e:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8007d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d001      	beq.n	8007d4a <IKS01A2_ENV_SENSOR_Init+0x102>
  {
    return ret;
 8007d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d48:	e031      	b.n	8007dae <IKS01A2_ENV_SENSOR_Init+0x166>
  }

  for (i = 0; i < IKS01A2_ENV_FUNCTIONS_NBR; i++)
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	61fb      	str	r3, [r7, #28]
 8007d4e:	e02a      	b.n	8007da6 <IKS01A2_ENV_SENSOR_Init+0x15e>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8007d50:	683a      	ldr	r2, [r7, #0]
 8007d52:	6a3b      	ldr	r3, [r7, #32]
 8007d54:	4013      	ands	r3, r2
 8007d56:	6a3a      	ldr	r2, [r7, #32]
 8007d58:	429a      	cmp	r2, r3
 8007d5a:	d11e      	bne.n	8007d9a <IKS01A2_ENV_SENSOR_Init+0x152>
 8007d5c:	69ba      	ldr	r2, [r7, #24]
 8007d5e:	6a3b      	ldr	r3, [r7, #32]
 8007d60:	4013      	ands	r3, r2
 8007d62:	6a3a      	ldr	r2, [r7, #32]
 8007d64:	429a      	cmp	r2, r3
 8007d66:	d118      	bne.n	8007d9a <IKS01A2_ENV_SENSOR_Init+0x152>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8007d68:	4a15      	ldr	r2, [pc, #84]	; (8007dc0 <IKS01A2_ENV_SENSOR_Init+0x178>)
 8007d6a:	6a3b      	ldr	r3, [r7, #32]
 8007d6c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007d70:	4814      	ldr	r0, [pc, #80]	; (8007dc4 <IKS01A2_ENV_SENSOR_Init+0x17c>)
 8007d72:	687a      	ldr	r2, [r7, #4]
 8007d74:	4613      	mov	r3, r2
 8007d76:	005b      	lsls	r3, r3, #1
 8007d78:	4413      	add	r3, r2
 8007d7a:	440b      	add	r3, r1
 8007d7c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	490e      	ldr	r1, [pc, #56]	; (8007dbc <IKS01A2_ENV_SENSOR_Init+0x174>)
 8007d84:	687a      	ldr	r2, [r7, #4]
 8007d86:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007d8a:	4610      	mov	r0, r2
 8007d8c:	4798      	blx	r3
 8007d8e:	4603      	mov	r3, r0
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d002      	beq.n	8007d9a <IKS01A2_ENV_SENSOR_Init+0x152>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8007d94:	f06f 0304 	mvn.w	r3, #4
 8007d98:	e009      	b.n	8007dae <IKS01A2_ENV_SENSOR_Init+0x166>
      }
    }
    function = function << 1;
 8007d9a:	6a3b      	ldr	r3, [r7, #32]
 8007d9c:	005b      	lsls	r3, r3, #1
 8007d9e:	623b      	str	r3, [r7, #32]
  for (i = 0; i < IKS01A2_ENV_FUNCTIONS_NBR; i++)
 8007da0:	69fb      	ldr	r3, [r7, #28]
 8007da2:	3301      	adds	r3, #1
 8007da4:	61fb      	str	r3, [r7, #28]
 8007da6:	69fb      	ldr	r3, [r7, #28]
 8007da8:	2b02      	cmp	r3, #2
 8007daa:	d9d1      	bls.n	8007d50 <IKS01A2_ENV_SENSOR_Init+0x108>
  }

  return ret;
 8007dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3728      	adds	r7, #40	; 0x28
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}
 8007db6:	bf00      	nop
 8007db8:	20002314 	.word	0x20002314
 8007dbc:	200029d8 	.word	0x200029d8
 8007dc0:	200012f8 	.word	0x200012f8
 8007dc4:	200022fc 	.word	0x200022fc

08007dc8 <IKS01A2_ENV_SENSOR_Enable>:
 *         - ENV_TEMPERATURE or ENV_HUMIDITY for instance 0
 *         - ENV_TEMPERATURE or ENV_PRESSURE for instance 1
 * @retval BSP status
 */
int32_t IKS01A2_ENV_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b084      	sub	sp, #16
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
 8007dd0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A2_ENV_INSTANCES_NBR)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	d903      	bls.n	8007de0 <IKS01A2_ENV_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8007dd8:	f06f 0301 	mvn.w	r3, #1
 8007ddc:	60fb      	str	r3, [r7, #12]
 8007dde:	e028      	b.n	8007e32 <IKS01A2_ENV_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 8007de0:	4a16      	ldr	r2, [pc, #88]	; (8007e3c <IKS01A2_ENV_SENSOR_Enable+0x74>)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	4013      	ands	r3, r2
 8007dec:	683a      	ldr	r2, [r7, #0]
 8007dee:	429a      	cmp	r2, r3
 8007df0:	d11c      	bne.n	8007e2c <IKS01A2_ENV_SENSOR_Enable+0x64>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8007df2:	4a13      	ldr	r2, [pc, #76]	; (8007e40 <IKS01A2_ENV_SENSOR_Enable+0x78>)
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007dfa:	4812      	ldr	r0, [pc, #72]	; (8007e44 <IKS01A2_ENV_SENSOR_Enable+0x7c>)
 8007dfc:	687a      	ldr	r2, [r7, #4]
 8007dfe:	4613      	mov	r3, r2
 8007e00:	005b      	lsls	r3, r3, #1
 8007e02:	4413      	add	r3, r2
 8007e04:	440b      	add	r3, r1
 8007e06:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	490e      	ldr	r1, [pc, #56]	; (8007e48 <IKS01A2_ENV_SENSOR_Enable+0x80>)
 8007e0e:	687a      	ldr	r2, [r7, #4]
 8007e10:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007e14:	4610      	mov	r0, r2
 8007e16:	4798      	blx	r3
 8007e18:	4603      	mov	r3, r0
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d003      	beq.n	8007e26 <IKS01A2_ENV_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007e1e:	f06f 0304 	mvn.w	r3, #4
 8007e22:	60fb      	str	r3, [r7, #12]
 8007e24:	e005      	b.n	8007e32 <IKS01A2_ENV_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8007e26:	2300      	movs	r3, #0
 8007e28:	60fb      	str	r3, [r7, #12]
 8007e2a:	e002      	b.n	8007e32 <IKS01A2_ENV_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8007e2c:	f06f 0301 	mvn.w	r3, #1
 8007e30:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8007e32:	68fb      	ldr	r3, [r7, #12]
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	3710      	adds	r7, #16
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}
 8007e3c:	2000231c 	.word	0x2000231c
 8007e40:	200012f8 	.word	0x200012f8
 8007e44:	200022fc 	.word	0x200022fc
 8007e48:	200029d8 	.word	0x200029d8

08007e4c <IKS01A2_ENV_SENSOR_GetValue>:
 *         - ENV_TEMPERATURE or ENV_PRESSURE for instance 1
 * @param  Value pointer to environmental sensor value
 * @retval BSP status
 */
int32_t IKS01A2_ENV_SENSOR_GetValue(uint32_t Instance, uint32_t Function, float *Value)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b086      	sub	sp, #24
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	60f8      	str	r0, [r7, #12]
 8007e54:	60b9      	str	r1, [r7, #8]
 8007e56:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_ENV_INSTANCES_NBR)
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	2b01      	cmp	r3, #1
 8007e5c:	d903      	bls.n	8007e66 <IKS01A2_ENV_SENSOR_GetValue+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8007e5e:	f06f 0301 	mvn.w	r3, #1
 8007e62:	617b      	str	r3, [r7, #20]
 8007e64:	e029      	b.n	8007eba <IKS01A2_ENV_SENSOR_GetValue+0x6e>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 8007e66:	4a17      	ldr	r2, [pc, #92]	; (8007ec4 <IKS01A2_ENV_SENSOR_GetValue+0x78>)
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	4013      	ands	r3, r2
 8007e72:	68ba      	ldr	r2, [r7, #8]
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d11d      	bne.n	8007eb4 <IKS01A2_ENV_SENSOR_GetValue+0x68>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetValue(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 8007e78:	4a13      	ldr	r2, [pc, #76]	; (8007ec8 <IKS01A2_ENV_SENSOR_GetValue+0x7c>)
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007e80:	4812      	ldr	r0, [pc, #72]	; (8007ecc <IKS01A2_ENV_SENSOR_GetValue+0x80>)
 8007e82:	68fa      	ldr	r2, [r7, #12]
 8007e84:	4613      	mov	r3, r2
 8007e86:	005b      	lsls	r3, r3, #1
 8007e88:	4413      	add	r3, r2
 8007e8a:	440b      	add	r3, r1
 8007e8c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8007e90:	691b      	ldr	r3, [r3, #16]
 8007e92:	490f      	ldr	r1, [pc, #60]	; (8007ed0 <IKS01A2_ENV_SENSOR_GetValue+0x84>)
 8007e94:	68fa      	ldr	r2, [r7, #12]
 8007e96:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007e9a:	6879      	ldr	r1, [r7, #4]
 8007e9c:	4610      	mov	r0, r2
 8007e9e:	4798      	blx	r3
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d003      	beq.n	8007eae <IKS01A2_ENV_SENSOR_GetValue+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007ea6:	f06f 0304 	mvn.w	r3, #4
 8007eaa:	617b      	str	r3, [r7, #20]
 8007eac:	e005      	b.n	8007eba <IKS01A2_ENV_SENSOR_GetValue+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	617b      	str	r3, [r7, #20]
 8007eb2:	e002      	b.n	8007eba <IKS01A2_ENV_SENSOR_GetValue+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8007eb4:	f06f 0301 	mvn.w	r3, #1
 8007eb8:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8007eba:	697b      	ldr	r3, [r7, #20]
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3718      	adds	r7, #24
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}
 8007ec4:	2000231c 	.word	0x2000231c
 8007ec8:	200012f8 	.word	0x200012f8
 8007ecc:	200022fc 	.word	0x200022fc
 8007ed0:	200029d8 	.word	0x200029d8

08007ed4 <HTS221_0_Probe>:
 * @param  Functions Environmental sensor functions. Could be :
 *         - ENV_TEMPERATURE and/or ENV_HUMIDITY
 * @retval BSP status
 */
static int32_t HTS221_0_Probe(uint32_t Functions)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b090      	sub	sp, #64	; 0x40
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  HTS221_IO_t            io_ctx;
  uint8_t                id;
  int32_t                ret = BSP_ERROR_NONE;
 8007edc:	2300      	movs	r3, #0
 8007ede:	63fb      	str	r3, [r7, #60]	; 0x3c
  static HTS221_Object_t hts221_obj_0;
  HTS221_Capabilities_t  cap;

  /* Configure the environmental sensor driver */
  io_ctx.BusType     = HTS221_I2C_BUS; /* I2C */
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.Address     = HTS221_I2C_ADDRESS;
 8007ee4:	23bf      	movs	r3, #191	; 0xbf
 8007ee6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  io_ctx.Init        = IKS01A2_I2C_Init;
 8007eea:	4b49      	ldr	r3, [pc, #292]	; (8008010 <HTS221_0_Probe+0x13c>)
 8007eec:	623b      	str	r3, [r7, #32]
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8007eee:	4b49      	ldr	r3, [pc, #292]	; (8008014 <HTS221_0_Probe+0x140>)
 8007ef0:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8007ef2:	4b49      	ldr	r3, [pc, #292]	; (8008018 <HTS221_0_Probe+0x144>)
 8007ef4:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8007ef6:	4b49      	ldr	r3, [pc, #292]	; (800801c <HTS221_0_Probe+0x148>)
 8007ef8:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.GetTick     = IKS01A2_GetTick;
 8007efa:	4b49      	ldr	r3, [pc, #292]	; (8008020 <HTS221_0_Probe+0x14c>)
 8007efc:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 8007efe:	f107 0320 	add.w	r3, r7, #32
 8007f02:	4619      	mov	r1, r3
 8007f04:	4847      	ldr	r0, [pc, #284]	; (8008024 <HTS221_0_Probe+0x150>)
 8007f06:	f7fb fd65 	bl	80039d4 <HTS221_RegisterBusIO>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d003      	beq.n	8007f18 <HTS221_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007f10:	f06f 0306 	mvn.w	r3, #6
 8007f14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f16:	e076      	b.n	8008006 <HTS221_0_Probe+0x132>
  }
  else if (HTS221_ReadID(&hts221_obj_0, &id) != HTS221_OK)
 8007f18:	f107 031f 	add.w	r3, r7, #31
 8007f1c:	4619      	mov	r1, r3
 8007f1e:	4841      	ldr	r0, [pc, #260]	; (8008024 <HTS221_0_Probe+0x150>)
 8007f20:	f7fb fddd 	bl	8003ade <HTS221_ReadID>
 8007f24:	4603      	mov	r3, r0
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d003      	beq.n	8007f32 <HTS221_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007f2a:	f06f 0306 	mvn.w	r3, #6
 8007f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f30:	e069      	b.n	8008006 <HTS221_0_Probe+0x132>
  }
  else if (id != HTS221_ID)
 8007f32:	7ffb      	ldrb	r3, [r7, #31]
 8007f34:	2bbc      	cmp	r3, #188	; 0xbc
 8007f36:	d003      	beq.n	8007f40 <HTS221_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007f38:	f06f 0306 	mvn.w	r3, #6
 8007f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f3e:	e062      	b.n	8008006 <HTS221_0_Probe+0x132>
  }
  else
  {
    (void)HTS221_GetCapabilities(&hts221_obj_0, &cap);
 8007f40:	f107 030c 	add.w	r3, r7, #12
 8007f44:	4619      	mov	r1, r3
 8007f46:	4837      	ldr	r0, [pc, #220]	; (8008024 <HTS221_0_Probe+0x150>)
 8007f48:	f7fb fde0 	bl	8003b0c <HTS221_GetCapabilities>
    EnvCtx[IKS01A2_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8007f4c:	7b3b      	ldrb	r3, [r7, #12]
 8007f4e:	461a      	mov	r2, r3
 8007f50:	7b7b      	ldrb	r3, [r7, #13]
 8007f52:	005b      	lsls	r3, r3, #1
 8007f54:	431a      	orrs	r2, r3
                                           uint32_t)cap.Humidity << 2);
 8007f56:	7bbb      	ldrb	r3, [r7, #14]
 8007f58:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A2_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8007f5a:	4313      	orrs	r3, r2
 8007f5c:	4a32      	ldr	r2, [pc, #200]	; (8008028 <HTS221_0_Probe+0x154>)
 8007f5e:	6013      	str	r3, [r2, #0]

    EnvCompObj[IKS01A2_HTS221_0] = &hts221_obj_0;
 8007f60:	4b32      	ldr	r3, [pc, #200]	; (800802c <HTS221_0_Probe+0x158>)
 8007f62:	4a30      	ldr	r2, [pc, #192]	; (8008024 <HTS221_0_Probe+0x150>)
 8007f64:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A2_HTS221_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&HTS221_COMMON_Driver;
 8007f66:	4b32      	ldr	r3, [pc, #200]	; (8008030 <HTS221_0_Probe+0x15c>)
 8007f68:	4a32      	ldr	r2, [pc, #200]	; (8008034 <HTS221_0_Probe+0x160>)
 8007f6a:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8007f6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d11d      	bne.n	8007fae <HTS221_0_Probe+0xda>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f003 0301 	and.w	r3, r3, #1
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d018      	beq.n	8007fae <HTS221_0_Probe+0xda>
 8007f7c:	7b3b      	ldrb	r3, [r7, #12]
 8007f7e:	2b01      	cmp	r3, #1
 8007f80:	d115      	bne.n	8007fae <HTS221_0_Probe+0xda>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_HTS221_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_TEMP_Driver;
 8007f82:	4b2d      	ldr	r3, [pc, #180]	; (8008038 <HTS221_0_Probe+0x164>)
 8007f84:	685b      	ldr	r3, [r3, #4]
 8007f86:	4a2d      	ldr	r2, [pc, #180]	; (800803c <HTS221_0_Probe+0x168>)
 8007f88:	492d      	ldr	r1, [pc, #180]	; (8008040 <HTS221_0_Probe+0x16c>)
 8007f8a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_HTS221_0]->Init(EnvCompObj[IKS01A2_HTS221_0]) != HTS221_OK)
 8007f8e:	4b28      	ldr	r3, [pc, #160]	; (8008030 <HTS221_0_Probe+0x15c>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4a25      	ldr	r2, [pc, #148]	; (800802c <HTS221_0_Probe+0x158>)
 8007f96:	6812      	ldr	r2, [r2, #0]
 8007f98:	4610      	mov	r0, r2
 8007f9a:	4798      	blx	r3
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d003      	beq.n	8007faa <HTS221_0_Probe+0xd6>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007fa2:	f06f 0304 	mvn.w	r3, #4
 8007fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fa8:	e001      	b.n	8007fae <HTS221_0_Probe+0xda>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8007faa:	2300      	movs	r3, #0
 8007fac:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 8007fae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d11d      	bne.n	8007ff0 <HTS221_0_Probe+0x11c>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f003 0304 	and.w	r3, r3, #4
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d018      	beq.n	8007ff0 <HTS221_0_Probe+0x11c>
 8007fbe:	7bbb      	ldrb	r3, [r7, #14]
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	d115      	bne.n	8007ff0 <HTS221_0_Probe+0x11c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_HTS221_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_HUM_Driver;
 8007fc4:	4b1c      	ldr	r3, [pc, #112]	; (8008038 <HTS221_0_Probe+0x164>)
 8007fc6:	691b      	ldr	r3, [r3, #16]
 8007fc8:	4a1c      	ldr	r2, [pc, #112]	; (800803c <HTS221_0_Probe+0x168>)
 8007fca:	491e      	ldr	r1, [pc, #120]	; (8008044 <HTS221_0_Probe+0x170>)
 8007fcc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_HTS221_0]->Init(EnvCompObj[IKS01A2_HTS221_0]) != HTS221_OK)
 8007fd0:	4b17      	ldr	r3, [pc, #92]	; (8008030 <HTS221_0_Probe+0x15c>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4a15      	ldr	r2, [pc, #84]	; (800802c <HTS221_0_Probe+0x158>)
 8007fd8:	6812      	ldr	r2, [r2, #0]
 8007fda:	4610      	mov	r0, r2
 8007fdc:	4798      	blx	r3
 8007fde:	4603      	mov	r3, r0
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d003      	beq.n	8007fec <HTS221_0_Probe+0x118>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007fe4:	f06f 0304 	mvn.w	r3, #4
 8007fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fea:	e001      	b.n	8007ff0 <HTS221_0_Probe+0x11c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8007fec:	2300      	movs	r3, #0
 8007fee:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 8007ff0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d107      	bne.n	8008006 <HTS221_0_Probe+0x132>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f003 0302 	and.w	r3, r3, #2
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d002      	beq.n	8008006 <HTS221_0_Probe+0x132>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008000:	f06f 0304 	mvn.w	r3, #4
 8008004:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }

  return ret;
 8008006:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008008:	4618      	mov	r0, r3
 800800a:	3740      	adds	r7, #64	; 0x40
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}
 8008010:	08003461 	.word	0x08003461
 8008014:	080034c5 	.word	0x080034c5
 8008018:	08003579 	.word	0x08003579
 800801c:	08003515 	.word	0x08003515
 8008020:	080035dd 	.word	0x080035dd
 8008024:	20002324 	.word	0x20002324
 8008028:	2000231c 	.word	0x2000231c
 800802c:	200029d8 	.word	0x200029d8
 8008030:	20002314 	.word	0x20002314
 8008034:	200011c8 	.word	0x200011c8
 8008038:	200012f8 	.word	0x200012f8
 800803c:	200022fc 	.word	0x200022fc
 8008040:	200011ec 	.word	0x200011ec
 8008044:	200011d8 	.word	0x200011d8

08008048 <LPS22HB_0_Probe>:
 * @param  Functions Environmental sensor functions. Could be :
 *         - ENV_TEMPERATURE and/or ENV_PRESSURE
 * @retval BSP status
 */
static int32_t LPS22HB_0_Probe(uint32_t Functions)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b090      	sub	sp, #64	; 0x40
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  LPS22HB_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 8008050:	2300      	movs	r3, #0
 8008052:	63fb      	str	r3, [r7, #60]	; 0x3c
  static LPS22HB_Object_t lps22hb_obj_0;
  LPS22HB_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = LPS22HB_I2C_BUS; /* I2C */
 8008054:	2300      	movs	r3, #0
 8008056:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.Address     = LPS22HB_I2C_ADD_H;
 8008058:	23bb      	movs	r3, #187	; 0xbb
 800805a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  io_ctx.Init        = IKS01A2_I2C_Init;
 800805e:	4b4a      	ldr	r3, [pc, #296]	; (8008188 <LPS22HB_0_Probe+0x140>)
 8008060:	623b      	str	r3, [r7, #32]
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8008062:	4b4a      	ldr	r3, [pc, #296]	; (800818c <LPS22HB_0_Probe+0x144>)
 8008064:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8008066:	4b4a      	ldr	r3, [pc, #296]	; (8008190 <LPS22HB_0_Probe+0x148>)
 8008068:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 800806a:	4b4a      	ldr	r3, [pc, #296]	; (8008194 <LPS22HB_0_Probe+0x14c>)
 800806c:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.GetTick     = IKS01A2_GetTick;
 800806e:	4b4a      	ldr	r3, [pc, #296]	; (8008198 <LPS22HB_0_Probe+0x150>)
 8008070:	63bb      	str	r3, [r7, #56]	; 0x38

  if (LPS22HB_RegisterBusIO(&lps22hb_obj_0, &io_ctx) != LPS22HB_OK)
 8008072:	f107 0320 	add.w	r3, r7, #32
 8008076:	4619      	mov	r1, r3
 8008078:	4848      	ldr	r0, [pc, #288]	; (800819c <LPS22HB_0_Probe+0x154>)
 800807a:	f7fc fa6b 	bl	8004554 <LPS22HB_RegisterBusIO>
 800807e:	4603      	mov	r3, r0
 8008080:	2b00      	cmp	r3, #0
 8008082:	d003      	beq.n	800808c <LPS22HB_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008084:	f06f 0306 	mvn.w	r3, #6
 8008088:	63fb      	str	r3, [r7, #60]	; 0x3c
 800808a:	e078      	b.n	800817e <LPS22HB_0_Probe+0x136>
  }
  else if (LPS22HB_ReadID(&lps22hb_obj_0, &id) != LPS22HB_OK)
 800808c:	f107 031f 	add.w	r3, r7, #31
 8008090:	4619      	mov	r1, r3
 8008092:	4842      	ldr	r0, [pc, #264]	; (800819c <LPS22HB_0_Probe+0x154>)
 8008094:	f7fc fb03 	bl	800469e <LPS22HB_ReadID>
 8008098:	4603      	mov	r3, r0
 800809a:	2b00      	cmp	r3, #0
 800809c:	d003      	beq.n	80080a6 <LPS22HB_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800809e:	f06f 0306 	mvn.w	r3, #6
 80080a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080a4:	e06b      	b.n	800817e <LPS22HB_0_Probe+0x136>
  }
  else if (id != LPS22HB_ID)
 80080a6:	7ffb      	ldrb	r3, [r7, #31]
 80080a8:	2bb1      	cmp	r3, #177	; 0xb1
 80080aa:	d003      	beq.n	80080b4 <LPS22HB_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80080ac:	f06f 0306 	mvn.w	r3, #6
 80080b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080b2:	e064      	b.n	800817e <LPS22HB_0_Probe+0x136>
  }
  else
  {
    (void)LPS22HB_GetCapabilities(&lps22hb_obj_0, &cap);
 80080b4:	f107 030c 	add.w	r3, r7, #12
 80080b8:	4619      	mov	r1, r3
 80080ba:	4838      	ldr	r0, [pc, #224]	; (800819c <LPS22HB_0_Probe+0x154>)
 80080bc:	f7fc fb06 	bl	80046cc <LPS22HB_GetCapabilities>

    EnvCtx[IKS01A2_LPS22HB_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 80080c0:	7b3b      	ldrb	r3, [r7, #12]
 80080c2:	461a      	mov	r2, r3
 80080c4:	7b7b      	ldrb	r3, [r7, #13]
 80080c6:	005b      	lsls	r3, r3, #1
 80080c8:	431a      	orrs	r2, r3
                                            uint32_t)cap.Humidity << 2);
 80080ca:	7bbb      	ldrb	r3, [r7, #14]
 80080cc:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A2_LPS22HB_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 80080ce:	4313      	orrs	r3, r2
 80080d0:	4a33      	ldr	r2, [pc, #204]	; (80081a0 <LPS22HB_0_Probe+0x158>)
 80080d2:	6053      	str	r3, [r2, #4]

    EnvCompObj[IKS01A2_LPS22HB_0] = &lps22hb_obj_0;
 80080d4:	4b33      	ldr	r3, [pc, #204]	; (80081a4 <LPS22HB_0_Probe+0x15c>)
 80080d6:	4a31      	ldr	r2, [pc, #196]	; (800819c <LPS22HB_0_Probe+0x154>)
 80080d8:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A2_LPS22HB_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HB_COMMON_Driver;
 80080da:	4b33      	ldr	r3, [pc, #204]	; (80081a8 <LPS22HB_0_Probe+0x160>)
 80080dc:	4a33      	ldr	r2, [pc, #204]	; (80081ac <LPS22HB_0_Probe+0x164>)
 80080de:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 80080e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d11e      	bne.n	8008124 <LPS22HB_0_Probe+0xdc>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f003 0301 	and.w	r3, r3, #1
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d019      	beq.n	8008124 <LPS22HB_0_Probe+0xdc>
 80080f0:	7b3b      	ldrb	r3, [r7, #12]
 80080f2:	2b01      	cmp	r3, #1
 80080f4:	d116      	bne.n	8008124 <LPS22HB_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_LPS22HB_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HB_TEMP_Driver;
 80080f6:	4b2e      	ldr	r3, [pc, #184]	; (80081b0 <LPS22HB_0_Probe+0x168>)
 80080f8:	685b      	ldr	r3, [r3, #4]
 80080fa:	4a2e      	ldr	r2, [pc, #184]	; (80081b4 <LPS22HB_0_Probe+0x16c>)
 80080fc:	3303      	adds	r3, #3
 80080fe:	492e      	ldr	r1, [pc, #184]	; (80081b8 <LPS22HB_0_Probe+0x170>)
 8008100:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_LPS22HB_0]->Init(EnvCompObj[IKS01A2_LPS22HB_0]) != LPS22HB_OK)
 8008104:	4b28      	ldr	r3, [pc, #160]	; (80081a8 <LPS22HB_0_Probe+0x160>)
 8008106:	685b      	ldr	r3, [r3, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4a26      	ldr	r2, [pc, #152]	; (80081a4 <LPS22HB_0_Probe+0x15c>)
 800810c:	6852      	ldr	r2, [r2, #4]
 800810e:	4610      	mov	r0, r2
 8008110:	4798      	blx	r3
 8008112:	4603      	mov	r3, r0
 8008114:	2b00      	cmp	r3, #0
 8008116:	d003      	beq.n	8008120 <LPS22HB_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008118:	f06f 0304 	mvn.w	r3, #4
 800811c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800811e:	e001      	b.n	8008124 <LPS22HB_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008120:	2300      	movs	r3, #0
 8008122:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 8008124:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008126:	2b00      	cmp	r3, #0
 8008128:	d11e      	bne.n	8008168 <LPS22HB_0_Probe+0x120>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f003 0302 	and.w	r3, r3, #2
 8008130:	2b00      	cmp	r3, #0
 8008132:	d019      	beq.n	8008168 <LPS22HB_0_Probe+0x120>
 8008134:	7b7b      	ldrb	r3, [r7, #13]
 8008136:	2b01      	cmp	r3, #1
 8008138:	d116      	bne.n	8008168 <LPS22HB_0_Probe+0x120>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_LPS22HB_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HB_PRESS_Driver;
 800813a:	4b1d      	ldr	r3, [pc, #116]	; (80081b0 <LPS22HB_0_Probe+0x168>)
 800813c:	689b      	ldr	r3, [r3, #8]
 800813e:	4a1d      	ldr	r2, [pc, #116]	; (80081b4 <LPS22HB_0_Probe+0x16c>)
 8008140:	3303      	adds	r3, #3
 8008142:	491e      	ldr	r1, [pc, #120]	; (80081bc <LPS22HB_0_Probe+0x174>)
 8008144:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_LPS22HB_0]->Init(EnvCompObj[IKS01A2_LPS22HB_0]) != LPS22HB_OK)
 8008148:	4b17      	ldr	r3, [pc, #92]	; (80081a8 <LPS22HB_0_Probe+0x160>)
 800814a:	685b      	ldr	r3, [r3, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	4a15      	ldr	r2, [pc, #84]	; (80081a4 <LPS22HB_0_Probe+0x15c>)
 8008150:	6852      	ldr	r2, [r2, #4]
 8008152:	4610      	mov	r0, r2
 8008154:	4798      	blx	r3
 8008156:	4603      	mov	r3, r0
 8008158:	2b00      	cmp	r3, #0
 800815a:	d003      	beq.n	8008164 <LPS22HB_0_Probe+0x11c>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800815c:	f06f 0304 	mvn.w	r3, #4
 8008160:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008162:	e001      	b.n	8008168 <LPS22HB_0_Probe+0x120>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008164:	2300      	movs	r3, #0
 8008166:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 8008168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800816a:	2b00      	cmp	r3, #0
 800816c:	d107      	bne.n	800817e <LPS22HB_0_Probe+0x136>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f003 0304 	and.w	r3, r3, #4
 8008174:	2b00      	cmp	r3, #0
 8008176:	d002      	beq.n	800817e <LPS22HB_0_Probe+0x136>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008178:	f06f 0304 	mvn.w	r3, #4
 800817c:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }
  return ret;
 800817e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008180:	4618      	mov	r0, r3
 8008182:	3740      	adds	r7, #64	; 0x40
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}
 8008188:	08003461 	.word	0x08003461
 800818c:	080034c5 	.word	0x080034c5
 8008190:	08003579 	.word	0x08003579
 8008194:	08003515 	.word	0x08003515
 8008198:	080035dd 	.word	0x080035dd
 800819c:	20002350 	.word	0x20002350
 80081a0:	2000231c 	.word	0x2000231c
 80081a4:	200029d8 	.word	0x200029d8
 80081a8:	20002314 	.word	0x20002314
 80081ac:	20001200 	.word	0x20001200
 80081b0:	200012f8 	.word	0x200012f8
 80081b4:	200022fc 	.word	0x200022fc
 80081b8:	20001224 	.word	0x20001224
 80081bc:	20001210 	.word	0x20001210

080081c0 <IKS01A2_MOTION_SENSOR_Init>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b08e      	sub	sp, #56	; 0x38
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
 80081c8:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80081ca:	2300      	movs	r3, #0
 80081cc:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 80081ce:	2301      	movs	r3, #1
 80081d0:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 80081d2:	2300      	movs	r3, #0
 80081d4:	62bb      	str	r3, [r7, #40]	; 0x28
  IKS01A2_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2b01      	cmp	r3, #1
 80081da:	d036      	beq.n	800824a <IKS01A2_MOTION_SENSOR_Init+0x8a>
 80081dc:	2b01      	cmp	r3, #1
 80081de:	d302      	bcc.n	80081e6 <IKS01A2_MOTION_SENSOR_Init+0x26>
 80081e0:	2b02      	cmp	r3, #2
 80081e2:	d064      	beq.n	80082ae <IKS01A2_MOTION_SENSOR_Init+0xee>
 80081e4:	e095      	b.n	8008312 <IKS01A2_MOTION_SENSOR_Init+0x152>
  {
#if (USE_IKS01A2_MOTION_SENSOR_LSM6DSL_0 == 1)
    case IKS01A2_LSM6DSL_0:
      if (LSM6DSL_0_Probe(Functions) != BSP_ERROR_NONE)
 80081e6:	6838      	ldr	r0, [r7, #0]
 80081e8:	f000 f9ee 	bl	80085c8 <LSM6DSL_0_Probe>
 80081ec:	4603      	mov	r3, r0
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d002      	beq.n	80081f8 <IKS01A2_MOTION_SENSOR_Init+0x38>
      {
        return BSP_ERROR_NO_INIT;
 80081f2:	f04f 33ff 	mov.w	r3, #4294967295
 80081f6:	e0cc      	b.n	8008392 <IKS01A2_MOTION_SENSOR_Init+0x1d2>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80081f8:	4a68      	ldr	r2, [pc, #416]	; (800839c <IKS01A2_MOTION_SENSOR_Init+0x1dc>)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008200:	68db      	ldr	r3, [r3, #12]
 8008202:	4967      	ldr	r1, [pc, #412]	; (80083a0 <IKS01A2_MOTION_SENSOR_Init+0x1e0>)
 8008204:	687a      	ldr	r2, [r7, #4]
 8008206:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800820a:	f107 010c 	add.w	r1, r7, #12
 800820e:	4610      	mov	r0, r2
 8008210:	4798      	blx	r3
 8008212:	4603      	mov	r3, r0
 8008214:	2b00      	cmp	r3, #0
 8008216:	d002      	beq.n	800821e <IKS01A2_MOTION_SENSOR_Init+0x5e>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8008218:	f06f 0306 	mvn.w	r3, #6
 800821c:	e0b9      	b.n	8008392 <IKS01A2_MOTION_SENSOR_Init+0x1d2>
      }
      if (cap.Acc == 1U)
 800821e:	7b3b      	ldrb	r3, [r7, #12]
 8008220:	2b01      	cmp	r3, #1
 8008222:	d103      	bne.n	800822c <IKS01A2_MOTION_SENSOR_Init+0x6c>
      {
        component_functions |= MOTION_ACCELERO;
 8008224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008226:	f043 0302 	orr.w	r3, r3, #2
 800822a:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 800822c:	7b7b      	ldrb	r3, [r7, #13]
 800822e:	2b01      	cmp	r3, #1
 8008230:	d103      	bne.n	800823a <IKS01A2_MOTION_SENSOR_Init+0x7a>
      {
        component_functions |= MOTION_GYRO;
 8008232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008234:	f043 0301 	orr.w	r3, r3, #1
 8008238:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 800823a:	7bbb      	ldrb	r3, [r7, #14]
 800823c:	2b01      	cmp	r3, #1
 800823e:	d16c      	bne.n	800831a <IKS01A2_MOTION_SENSOR_Init+0x15a>
      {
        component_functions |= MOTION_MAGNETO;
 8008240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008242:	f043 0304 	orr.w	r3, r3, #4
 8008246:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8008248:	e067      	b.n	800831a <IKS01A2_MOTION_SENSOR_Init+0x15a>
#endif

#if (USE_IKS01A2_MOTION_SENSOR_LSM303AGR_ACC_0 == 1)
    case IKS01A2_LSM303AGR_ACC_0:
      if (LSM303AGR_ACC_0_Probe(Functions) != BSP_ERROR_NONE)
 800824a:	6838      	ldr	r0, [r7, #0]
 800824c:	f000 fa78 	bl	8008740 <LSM303AGR_ACC_0_Probe>
 8008250:	4603      	mov	r3, r0
 8008252:	2b00      	cmp	r3, #0
 8008254:	d002      	beq.n	800825c <IKS01A2_MOTION_SENSOR_Init+0x9c>
      {
        return BSP_ERROR_NO_INIT;
 8008256:	f04f 33ff 	mov.w	r3, #4294967295
 800825a:	e09a      	b.n	8008392 <IKS01A2_MOTION_SENSOR_Init+0x1d2>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800825c:	4a4f      	ldr	r2, [pc, #316]	; (800839c <IKS01A2_MOTION_SENSOR_Init+0x1dc>)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008264:	68db      	ldr	r3, [r3, #12]
 8008266:	494e      	ldr	r1, [pc, #312]	; (80083a0 <IKS01A2_MOTION_SENSOR_Init+0x1e0>)
 8008268:	687a      	ldr	r2, [r7, #4]
 800826a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800826e:	f107 010c 	add.w	r1, r7, #12
 8008272:	4610      	mov	r0, r2
 8008274:	4798      	blx	r3
 8008276:	4603      	mov	r3, r0
 8008278:	2b00      	cmp	r3, #0
 800827a:	d002      	beq.n	8008282 <IKS01A2_MOTION_SENSOR_Init+0xc2>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800827c:	f06f 0306 	mvn.w	r3, #6
 8008280:	e087      	b.n	8008392 <IKS01A2_MOTION_SENSOR_Init+0x1d2>
      }
      if (cap.Acc == 1U)
 8008282:	7b3b      	ldrb	r3, [r7, #12]
 8008284:	2b01      	cmp	r3, #1
 8008286:	d103      	bne.n	8008290 <IKS01A2_MOTION_SENSOR_Init+0xd0>
      {
        component_functions |= MOTION_ACCELERO;
 8008288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800828a:	f043 0302 	orr.w	r3, r3, #2
 800828e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8008290:	7b7b      	ldrb	r3, [r7, #13]
 8008292:	2b01      	cmp	r3, #1
 8008294:	d103      	bne.n	800829e <IKS01A2_MOTION_SENSOR_Init+0xde>
      {
        component_functions |= MOTION_GYRO;
 8008296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008298:	f043 0301 	orr.w	r3, r3, #1
 800829c:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 800829e:	7bbb      	ldrb	r3, [r7, #14]
 80082a0:	2b01      	cmp	r3, #1
 80082a2:	d13c      	bne.n	800831e <IKS01A2_MOTION_SENSOR_Init+0x15e>
      {
        component_functions |= MOTION_MAGNETO;
 80082a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a6:	f043 0304 	orr.w	r3, r3, #4
 80082aa:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 80082ac:	e037      	b.n	800831e <IKS01A2_MOTION_SENSOR_Init+0x15e>
#endif

#if (USE_IKS01A2_MOTION_SENSOR_LSM303AGR_MAG_0 == 1)
    case IKS01A2_LSM303AGR_MAG_0:
      if (LSM303AGR_MAG_0_Probe(Functions) != BSP_ERROR_NONE)
 80082ae:	6838      	ldr	r0, [r7, #0]
 80082b0:	f000 faea 	bl	8008888 <LSM303AGR_MAG_0_Probe>
 80082b4:	4603      	mov	r3, r0
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d002      	beq.n	80082c0 <IKS01A2_MOTION_SENSOR_Init+0x100>
      {
        return BSP_ERROR_NO_INIT;
 80082ba:	f04f 33ff 	mov.w	r3, #4294967295
 80082be:	e068      	b.n	8008392 <IKS01A2_MOTION_SENSOR_Init+0x1d2>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80082c0:	4a36      	ldr	r2, [pc, #216]	; (800839c <IKS01A2_MOTION_SENSOR_Init+0x1dc>)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082c8:	68db      	ldr	r3, [r3, #12]
 80082ca:	4935      	ldr	r1, [pc, #212]	; (80083a0 <IKS01A2_MOTION_SENSOR_Init+0x1e0>)
 80082cc:	687a      	ldr	r2, [r7, #4]
 80082ce:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80082d2:	f107 010c 	add.w	r1, r7, #12
 80082d6:	4610      	mov	r0, r2
 80082d8:	4798      	blx	r3
 80082da:	4603      	mov	r3, r0
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d002      	beq.n	80082e6 <IKS01A2_MOTION_SENSOR_Init+0x126>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80082e0:	f06f 0306 	mvn.w	r3, #6
 80082e4:	e055      	b.n	8008392 <IKS01A2_MOTION_SENSOR_Init+0x1d2>
      }
      if (cap.Acc == 1U)
 80082e6:	7b3b      	ldrb	r3, [r7, #12]
 80082e8:	2b01      	cmp	r3, #1
 80082ea:	d103      	bne.n	80082f4 <IKS01A2_MOTION_SENSOR_Init+0x134>
      {
        component_functions |= MOTION_ACCELERO;
 80082ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ee:	f043 0302 	orr.w	r3, r3, #2
 80082f2:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 80082f4:	7b7b      	ldrb	r3, [r7, #13]
 80082f6:	2b01      	cmp	r3, #1
 80082f8:	d103      	bne.n	8008302 <IKS01A2_MOTION_SENSOR_Init+0x142>
      {
        component_functions |= MOTION_GYRO;
 80082fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082fc:	f043 0301 	orr.w	r3, r3, #1
 8008300:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8008302:	7bbb      	ldrb	r3, [r7, #14]
 8008304:	2b01      	cmp	r3, #1
 8008306:	d10c      	bne.n	8008322 <IKS01A2_MOTION_SENSOR_Init+0x162>
      {
        component_functions |= MOTION_MAGNETO;
 8008308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800830a:	f043 0304 	orr.w	r3, r3, #4
 800830e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8008310:	e007      	b.n	8008322 <IKS01A2_MOTION_SENSOR_Init+0x162>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8008312:	f06f 0301 	mvn.w	r3, #1
 8008316:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8008318:	e004      	b.n	8008324 <IKS01A2_MOTION_SENSOR_Init+0x164>
      break;
 800831a:	bf00      	nop
 800831c:	e002      	b.n	8008324 <IKS01A2_MOTION_SENSOR_Init+0x164>
      break;
 800831e:	bf00      	nop
 8008320:	e000      	b.n	8008324 <IKS01A2_MOTION_SENSOR_Init+0x164>
      break;
 8008322:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8008324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008326:	2b00      	cmp	r3, #0
 8008328:	d001      	beq.n	800832e <IKS01A2_MOTION_SENSOR_Init+0x16e>
  {
    return ret;
 800832a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800832c:	e031      	b.n	8008392 <IKS01A2_MOTION_SENSOR_Init+0x1d2>
  }

  for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++)
 800832e:	2300      	movs	r3, #0
 8008330:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008332:	e02a      	b.n	800838a <IKS01A2_MOTION_SENSOR_Init+0x1ca>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8008334:	683a      	ldr	r2, [r7, #0]
 8008336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008338:	4013      	ands	r3, r2
 800833a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800833c:	429a      	cmp	r2, r3
 800833e:	d11e      	bne.n	800837e <IKS01A2_MOTION_SENSOR_Init+0x1be>
 8008340:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008344:	4013      	ands	r3, r2
 8008346:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008348:	429a      	cmp	r2, r3
 800834a:	d118      	bne.n	800837e <IKS01A2_MOTION_SENSOR_Init+0x1be>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800834c:	4a15      	ldr	r2, [pc, #84]	; (80083a4 <IKS01A2_MOTION_SENSOR_Init+0x1e4>)
 800834e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008350:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008354:	4814      	ldr	r0, [pc, #80]	; (80083a8 <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 8008356:	687a      	ldr	r2, [r7, #4]
 8008358:	4613      	mov	r3, r2
 800835a:	005b      	lsls	r3, r3, #1
 800835c:	4413      	add	r3, r2
 800835e:	440b      	add	r3, r1
 8008360:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	490e      	ldr	r1, [pc, #56]	; (80083a0 <IKS01A2_MOTION_SENSOR_Init+0x1e0>)
 8008368:	687a      	ldr	r2, [r7, #4]
 800836a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800836e:	4610      	mov	r0, r2
 8008370:	4798      	blx	r3
 8008372:	4603      	mov	r3, r0
 8008374:	2b00      	cmp	r3, #0
 8008376:	d002      	beq.n	800837e <IKS01A2_MOTION_SENSOR_Init+0x1be>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8008378:	f06f 0304 	mvn.w	r3, #4
 800837c:	e009      	b.n	8008392 <IKS01A2_MOTION_SENSOR_Init+0x1d2>
      }
    }
    function = function << 1;
 800837e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008380:	005b      	lsls	r3, r3, #1
 8008382:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++)
 8008384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008386:	3301      	adds	r3, #1
 8008388:	62fb      	str	r3, [r7, #44]	; 0x2c
 800838a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800838c:	2b02      	cmp	r3, #2
 800838e:	d9d1      	bls.n	8008334 <IKS01A2_MOTION_SENSOR_Init+0x174>
  }

  return ret;
 8008390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008392:	4618      	mov	r0, r3
 8008394:	3738      	adds	r7, #56	; 0x38
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}
 800839a:	bf00      	nop
 800839c:	200023a0 	.word	0x200023a0
 80083a0:	200029e0 	.word	0x200029e0
 80083a4:	2000130c 	.word	0x2000130c
 80083a8:	2000237c 	.word	0x2000237c

080083ac <IKS01A2_MOTION_SENSOR_Enable>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b084      	sub	sp, #16
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2b02      	cmp	r3, #2
 80083ba:	d903      	bls.n	80083c4 <IKS01A2_MOTION_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80083bc:	f06f 0301 	mvn.w	r3, #1
 80083c0:	60fb      	str	r3, [r7, #12]
 80083c2:	e028      	b.n	8008416 <IKS01A2_MOTION_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 80083c4:	4a16      	ldr	r2, [pc, #88]	; (8008420 <IKS01A2_MOTION_SENSOR_Enable+0x74>)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	4013      	ands	r3, r2
 80083d0:	683a      	ldr	r2, [r7, #0]
 80083d2:	429a      	cmp	r2, r3
 80083d4:	d11c      	bne.n	8008410 <IKS01A2_MOTION_SENSOR_Enable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 80083d6:	4a13      	ldr	r2, [pc, #76]	; (8008424 <IKS01A2_MOTION_SENSOR_Enable+0x78>)
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80083de:	4812      	ldr	r0, [pc, #72]	; (8008428 <IKS01A2_MOTION_SENSOR_Enable+0x7c>)
 80083e0:	687a      	ldr	r2, [r7, #4]
 80083e2:	4613      	mov	r3, r2
 80083e4:	005b      	lsls	r3, r3, #1
 80083e6:	4413      	add	r3, r2
 80083e8:	440b      	add	r3, r1
 80083ea:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	490e      	ldr	r1, [pc, #56]	; (800842c <IKS01A2_MOTION_SENSOR_Enable+0x80>)
 80083f2:	687a      	ldr	r2, [r7, #4]
 80083f4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80083f8:	4610      	mov	r0, r2
 80083fa:	4798      	blx	r3
 80083fc:	4603      	mov	r3, r0
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d003      	beq.n	800840a <IKS01A2_MOTION_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008402:	f06f 0304 	mvn.w	r3, #4
 8008406:	60fb      	str	r3, [r7, #12]
 8008408:	e005      	b.n	8008416 <IKS01A2_MOTION_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800840a:	2300      	movs	r3, #0
 800840c:	60fb      	str	r3, [r7, #12]
 800840e:	e002      	b.n	8008416 <IKS01A2_MOTION_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8008410:	f06f 0301 	mvn.w	r3, #1
 8008414:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8008416:	68fb      	ldr	r3, [r7, #12]
}
 8008418:	4618      	mov	r0, r3
 800841a:	3710      	adds	r7, #16
 800841c:	46bd      	mov	sp, r7
 800841e:	bd80      	pop	{r7, pc}
 8008420:	200023ac 	.word	0x200023ac
 8008424:	2000130c 	.word	0x2000130c
 8008428:	2000237c 	.word	0x2000237c
 800842c:	200029e0 	.word	0x200029e0

08008430 <IKS01A2_MOTION_SENSOR_GetAxes>:
 *         - MOTION_MAGNETO for instance 2
 * @param  Axes pointer to axes data structure
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b086      	sub	sp, #24
 8008434:	af00      	add	r7, sp, #0
 8008436:	60f8      	str	r0, [r7, #12]
 8008438:	60b9      	str	r1, [r7, #8]
 800843a:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	2b02      	cmp	r3, #2
 8008440:	d903      	bls.n	800844a <IKS01A2_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8008442:	f06f 0301 	mvn.w	r3, #1
 8008446:	617b      	str	r3, [r7, #20]
 8008448:	e029      	b.n	800849e <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800844a:	4a17      	ldr	r2, [pc, #92]	; (80084a8 <IKS01A2_MOTION_SENSOR_GetAxes+0x78>)
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	4013      	ands	r3, r2
 8008456:	68ba      	ldr	r2, [r7, #8]
 8008458:	429a      	cmp	r2, r3
 800845a:	d11d      	bne.n	8008498 <IKS01A2_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 800845c:	4a13      	ldr	r2, [pc, #76]	; (80084ac <IKS01A2_MOTION_SENSOR_GetAxes+0x7c>)
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008464:	4812      	ldr	r0, [pc, #72]	; (80084b0 <IKS01A2_MOTION_SENSOR_GetAxes+0x80>)
 8008466:	68fa      	ldr	r2, [r7, #12]
 8008468:	4613      	mov	r3, r2
 800846a:	005b      	lsls	r3, r3, #1
 800846c:	4413      	add	r3, r2
 800846e:	440b      	add	r3, r1
 8008470:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8008474:	69db      	ldr	r3, [r3, #28]
 8008476:	490f      	ldr	r1, [pc, #60]	; (80084b4 <IKS01A2_MOTION_SENSOR_GetAxes+0x84>)
 8008478:	68fa      	ldr	r2, [r7, #12]
 800847a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800847e:	6879      	ldr	r1, [r7, #4]
 8008480:	4610      	mov	r0, r2
 8008482:	4798      	blx	r3
 8008484:	4603      	mov	r3, r0
 8008486:	2b00      	cmp	r3, #0
 8008488:	d003      	beq.n	8008492 <IKS01A2_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800848a:	f06f 0304 	mvn.w	r3, #4
 800848e:	617b      	str	r3, [r7, #20]
 8008490:	e005      	b.n	800849e <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008492:	2300      	movs	r3, #0
 8008494:	617b      	str	r3, [r7, #20]
 8008496:	e002      	b.n	800849e <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8008498:	f06f 0301 	mvn.w	r3, #1
 800849c:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800849e:	697b      	ldr	r3, [r7, #20]
}
 80084a0:	4618      	mov	r0, r3
 80084a2:	3718      	adds	r7, #24
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}
 80084a8:	200023ac 	.word	0x200023ac
 80084ac:	2000130c 	.word	0x2000130c
 80084b0:	2000237c 	.word	0x2000237c
 80084b4:	200029e0 	.word	0x200029e0

080084b8 <IKS01A2_MOTION_SENSOR_SetOutputDataRate>:
 *         - MOTION_MAGNETO for instance 2
 * @param  Odr Output Data Rate value to be set
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_SetOutputDataRate(uint32_t Instance, uint32_t Function, float Odr)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b086      	sub	sp, #24
 80084bc:	af00      	add	r7, sp, #0
 80084be:	60f8      	str	r0, [r7, #12]
 80084c0:	60b9      	str	r1, [r7, #8]
 80084c2:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	2b02      	cmp	r3, #2
 80084c8:	d903      	bls.n	80084d2 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80084ca:	f06f 0301 	mvn.w	r3, #1
 80084ce:	617b      	str	r3, [r7, #20]
 80084d0:	e029      	b.n	8008526 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 80084d2:	4a17      	ldr	r2, [pc, #92]	; (8008530 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x78>)
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	4013      	ands	r3, r2
 80084de:	68ba      	ldr	r2, [r7, #8]
 80084e0:	429a      	cmp	r2, r3
 80084e2:	d11d      	bne.n	8008520 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 80084e4:	4a13      	ldr	r2, [pc, #76]	; (8008534 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x7c>)
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80084ec:	4812      	ldr	r0, [pc, #72]	; (8008538 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x80>)
 80084ee:	68fa      	ldr	r2, [r7, #12]
 80084f0:	4613      	mov	r3, r2
 80084f2:	005b      	lsls	r3, r3, #1
 80084f4:	4413      	add	r3, r2
 80084f6:	440b      	add	r3, r1
 80084f8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80084fc:	691b      	ldr	r3, [r3, #16]
 80084fe:	490f      	ldr	r1, [pc, #60]	; (800853c <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x84>)
 8008500:	68fa      	ldr	r2, [r7, #12]
 8008502:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008506:	6879      	ldr	r1, [r7, #4]
 8008508:	4610      	mov	r0, r2
 800850a:	4798      	blx	r3
 800850c:	4603      	mov	r3, r0
 800850e:	2b00      	cmp	r3, #0
 8008510:	d003      	beq.n	800851a <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008512:	f06f 0304 	mvn.w	r3, #4
 8008516:	617b      	str	r3, [r7, #20]
 8008518:	e005      	b.n	8008526 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800851a:	2300      	movs	r3, #0
 800851c:	617b      	str	r3, [r7, #20]
 800851e:	e002      	b.n	8008526 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8008520:	f06f 0301 	mvn.w	r3, #1
 8008524:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8008526:	697b      	ldr	r3, [r7, #20]
}
 8008528:	4618      	mov	r0, r3
 800852a:	3718      	adds	r7, #24
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}
 8008530:	200023ac 	.word	0x200023ac
 8008534:	2000130c 	.word	0x2000130c
 8008538:	2000237c 	.word	0x2000237c
 800853c:	200029e0 	.word	0x200029e0

08008540 <IKS01A2_MOTION_SENSOR_SetFullScale>:
 *         - MOTION_MAGNETO for instance 2
 * @param  Fullscale Fullscale value to be set
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_SetFullScale(uint32_t Instance, uint32_t Function, int32_t Fullscale)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b086      	sub	sp, #24
 8008544:	af00      	add	r7, sp, #0
 8008546:	60f8      	str	r0, [r7, #12]
 8008548:	60b9      	str	r1, [r7, #8]
 800854a:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	2b02      	cmp	r3, #2
 8008550:	d903      	bls.n	800855a <IKS01A2_MOTION_SENSOR_SetFullScale+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8008552:	f06f 0301 	mvn.w	r3, #1
 8008556:	617b      	str	r3, [r7, #20]
 8008558:	e029      	b.n	80085ae <IKS01A2_MOTION_SENSOR_SetFullScale+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800855a:	4a17      	ldr	r2, [pc, #92]	; (80085b8 <IKS01A2_MOTION_SENSOR_SetFullScale+0x78>)
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	4013      	ands	r3, r2
 8008566:	68ba      	ldr	r2, [r7, #8]
 8008568:	429a      	cmp	r2, r3
 800856a:	d11d      	bne.n	80085a8 <IKS01A2_MOTION_SENSOR_SetFullScale+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetFullScale(MotionCompObj[Instance],
 800856c:	4a13      	ldr	r2, [pc, #76]	; (80085bc <IKS01A2_MOTION_SENSOR_SetFullScale+0x7c>)
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008574:	4812      	ldr	r0, [pc, #72]	; (80085c0 <IKS01A2_MOTION_SENSOR_SetFullScale+0x80>)
 8008576:	68fa      	ldr	r2, [r7, #12]
 8008578:	4613      	mov	r3, r2
 800857a:	005b      	lsls	r3, r3, #1
 800857c:	4413      	add	r3, r2
 800857e:	440b      	add	r3, r1
 8008580:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8008584:	699b      	ldr	r3, [r3, #24]
 8008586:	490f      	ldr	r1, [pc, #60]	; (80085c4 <IKS01A2_MOTION_SENSOR_SetFullScale+0x84>)
 8008588:	68fa      	ldr	r2, [r7, #12]
 800858a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800858e:	6879      	ldr	r1, [r7, #4]
 8008590:	4610      	mov	r0, r2
 8008592:	4798      	blx	r3
 8008594:	4603      	mov	r3, r0
 8008596:	2b00      	cmp	r3, #0
 8008598:	d003      	beq.n	80085a2 <IKS01A2_MOTION_SENSOR_SetFullScale+0x62>
          Fullscale) != BSP_ERROR_NONE)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800859a:	f06f 0304 	mvn.w	r3, #4
 800859e:	617b      	str	r3, [r7, #20]
 80085a0:	e005      	b.n	80085ae <IKS01A2_MOTION_SENSOR_SetFullScale+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80085a2:	2300      	movs	r3, #0
 80085a4:	617b      	str	r3, [r7, #20]
 80085a6:	e002      	b.n	80085ae <IKS01A2_MOTION_SENSOR_SetFullScale+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80085a8:	f06f 0301 	mvn.w	r3, #1
 80085ac:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 80085ae:	697b      	ldr	r3, [r7, #20]
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	3718      	adds	r7, #24
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}
 80085b8:	200023ac 	.word	0x200023ac
 80085bc:	2000130c 	.word	0x2000130c
 80085c0:	2000237c 	.word	0x2000237c
 80085c4:	200029e0 	.word	0x200029e0

080085c8 <LSM6DSL_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 0 if component ID is OK
 * @retval BSP status
 */
static int32_t LSM6DSL_0_Probe(uint32_t Functions)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b092      	sub	sp, #72	; 0x48
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  LSM6DSL_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSL_Object_t lsm6dsl_obj_0;
  LSM6DSL_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 80085d0:	2300      	movs	r3, #0
 80085d2:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSL_I2C_BUS; /* I2C */
 80085d4:	2300      	movs	r3, #0
 80085d6:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM6DSL_I2C_ADD_H;
 80085d8:	23d7      	movs	r3, #215	; 0xd7
 80085da:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 80085de:	4b4a      	ldr	r3, [pc, #296]	; (8008708 <LSM6DSL_0_Probe+0x140>)
 80085e0:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 80085e2:	4b4a      	ldr	r3, [pc, #296]	; (800870c <LSM6DSL_0_Probe+0x144>)
 80085e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 80085e6:	4b4a      	ldr	r3, [pc, #296]	; (8008710 <LSM6DSL_0_Probe+0x148>)
 80085e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 80085ea:	4b4a      	ldr	r3, [pc, #296]	; (8008714 <LSM6DSL_0_Probe+0x14c>)
 80085ec:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 80085ee:	4b4a      	ldr	r3, [pc, #296]	; (8008718 <LSM6DSL_0_Probe+0x150>)
 80085f0:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM6DSL_RegisterBusIO(&lsm6dsl_obj_0, &io_ctx) != LSM6DSL_OK)
 80085f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80085f6:	4619      	mov	r1, r3
 80085f8:	4848      	ldr	r0, [pc, #288]	; (800871c <LSM6DSL_0_Probe+0x154>)
 80085fa:	f7fe f88b 	bl	8006714 <LSM6DSL_RegisterBusIO>
 80085fe:	4603      	mov	r3, r0
 8008600:	2b00      	cmp	r3, #0
 8008602:	d003      	beq.n	800860c <LSM6DSL_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008604:	f06f 0306 	mvn.w	r3, #6
 8008608:	647b      	str	r3, [r7, #68]	; 0x44
 800860a:	e077      	b.n	80086fc <LSM6DSL_0_Probe+0x134>
  }
  else if (LSM6DSL_ReadID(&lsm6dsl_obj_0, &id) != LSM6DSL_OK)
 800860c:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8008610:	4619      	mov	r1, r3
 8008612:	4842      	ldr	r0, [pc, #264]	; (800871c <LSM6DSL_0_Probe+0x154>)
 8008614:	f7fe f974 	bl	8006900 <LSM6DSL_ReadID>
 8008618:	4603      	mov	r3, r0
 800861a:	2b00      	cmp	r3, #0
 800861c:	d003      	beq.n	8008626 <LSM6DSL_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800861e:	f06f 0306 	mvn.w	r3, #6
 8008622:	647b      	str	r3, [r7, #68]	; 0x44
 8008624:	e06a      	b.n	80086fc <LSM6DSL_0_Probe+0x134>
  }
  else if (id != LSM6DSL_ID)
 8008626:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800862a:	2b6a      	cmp	r3, #106	; 0x6a
 800862c:	d003      	beq.n	8008636 <LSM6DSL_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800862e:	f06f 0306 	mvn.w	r3, #6
 8008632:	647b      	str	r3, [r7, #68]	; 0x44
 8008634:	e062      	b.n	80086fc <LSM6DSL_0_Probe+0x134>
  }
  else
  {
    (void)LSM6DSL_GetCapabilities(&lsm6dsl_obj_0, &cap);
 8008636:	f107 0308 	add.w	r3, r7, #8
 800863a:	4619      	mov	r1, r3
 800863c:	4837      	ldr	r0, [pc, #220]	; (800871c <LSM6DSL_0_Probe+0x154>)
 800863e:	f7fe f975 	bl	800692c <LSM6DSL_GetCapabilities>
    MotionCtx[IKS01A2_LSM6DSL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8008642:	7a7b      	ldrb	r3, [r7, #9]
 8008644:	461a      	mov	r2, r3
 8008646:	7a3b      	ldrb	r3, [r7, #8]
 8008648:	005b      	lsls	r3, r3, #1
 800864a:	431a      	orrs	r2, r3
 800864c:	7abb      	ldrb	r3, [r7, #10]
 800864e:	009b      	lsls	r3, r3, #2
 8008650:	4313      	orrs	r3, r2
 8008652:	4a33      	ldr	r2, [pc, #204]	; (8008720 <LSM6DSL_0_Probe+0x158>)
 8008654:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A2_LSM6DSL_0] = &lsm6dsl_obj_0;
 8008656:	4b33      	ldr	r3, [pc, #204]	; (8008724 <LSM6DSL_0_Probe+0x15c>)
 8008658:	4a30      	ldr	r2, [pc, #192]	; (800871c <LSM6DSL_0_Probe+0x154>)
 800865a:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM6DSL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSL_COMMON_Driver;
 800865c:	4b32      	ldr	r3, [pc, #200]	; (8008728 <LSM6DSL_0_Probe+0x160>)
 800865e:	4a33      	ldr	r2, [pc, #204]	; (800872c <LSM6DSL_0_Probe+0x164>)
 8008660:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8008662:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008664:	2b00      	cmp	r3, #0
 8008666:	d11d      	bne.n	80086a4 <LSM6DSL_0_Probe+0xdc>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f003 0301 	and.w	r3, r3, #1
 800866e:	2b00      	cmp	r3, #0
 8008670:	d018      	beq.n	80086a4 <LSM6DSL_0_Probe+0xdc>
 8008672:	7a7b      	ldrb	r3, [r7, #9]
 8008674:	2b01      	cmp	r3, #1
 8008676:	d115      	bne.n	80086a4 <LSM6DSL_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSL_GYRO_Driver;
 8008678:	4b2d      	ldr	r3, [pc, #180]	; (8008730 <LSM6DSL_0_Probe+0x168>)
 800867a:	685b      	ldr	r3, [r3, #4]
 800867c:	4a2d      	ldr	r2, [pc, #180]	; (8008734 <LSM6DSL_0_Probe+0x16c>)
 800867e:	492e      	ldr	r1, [pc, #184]	; (8008738 <LSM6DSL_0_Probe+0x170>)
 8008680:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 8008684:	4b28      	ldr	r3, [pc, #160]	; (8008728 <LSM6DSL_0_Probe+0x160>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4a26      	ldr	r2, [pc, #152]	; (8008724 <LSM6DSL_0_Probe+0x15c>)
 800868c:	6812      	ldr	r2, [r2, #0]
 800868e:	4610      	mov	r0, r2
 8008690:	4798      	blx	r3
 8008692:	4603      	mov	r3, r0
 8008694:	2b00      	cmp	r3, #0
 8008696:	d003      	beq.n	80086a0 <LSM6DSL_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008698:	f06f 0304 	mvn.w	r3, #4
 800869c:	647b      	str	r3, [r7, #68]	; 0x44
 800869e:	e001      	b.n	80086a4 <LSM6DSL_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80086a0:	2300      	movs	r3, #0
 80086a2:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 80086a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d11d      	bne.n	80086e6 <LSM6DSL_0_Probe+0x11e>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f003 0302 	and.w	r3, r3, #2
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d018      	beq.n	80086e6 <LSM6DSL_0_Probe+0x11e>
 80086b4:	7a3b      	ldrb	r3, [r7, #8]
 80086b6:	2b01      	cmp	r3, #1
 80086b8:	d115      	bne.n	80086e6 <LSM6DSL_0_Probe+0x11e>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80086ba:	4b1d      	ldr	r3, [pc, #116]	; (8008730 <LSM6DSL_0_Probe+0x168>)
 80086bc:	689b      	ldr	r3, [r3, #8]
 80086be:	4a1d      	ldr	r2, [pc, #116]	; (8008734 <LSM6DSL_0_Probe+0x16c>)
 80086c0:	491e      	ldr	r1, [pc, #120]	; (800873c <LSM6DSL_0_Probe+0x174>)
 80086c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM6DSL_ACC_Driver;

      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 80086c6:	4b18      	ldr	r3, [pc, #96]	; (8008728 <LSM6DSL_0_Probe+0x160>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a15      	ldr	r2, [pc, #84]	; (8008724 <LSM6DSL_0_Probe+0x15c>)
 80086ce:	6812      	ldr	r2, [r2, #0]
 80086d0:	4610      	mov	r0, r2
 80086d2:	4798      	blx	r3
 80086d4:	4603      	mov	r3, r0
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d003      	beq.n	80086e2 <LSM6DSL_0_Probe+0x11a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80086da:	f06f 0304 	mvn.w	r3, #4
 80086de:	647b      	str	r3, [r7, #68]	; 0x44
 80086e0:	e001      	b.n	80086e6 <LSM6DSL_0_Probe+0x11e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80086e2:	2300      	movs	r3, #0
 80086e4:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 80086e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d107      	bne.n	80086fc <LSM6DSL_0_Probe+0x134>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f003 0304 	and.w	r3, r3, #4
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d002      	beq.n	80086fc <LSM6DSL_0_Probe+0x134>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80086f6:	f06f 0304 	mvn.w	r3, #4
 80086fa:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 80086fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3748      	adds	r7, #72	; 0x48
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}
 8008706:	bf00      	nop
 8008708:	08003461 	.word	0x08003461
 800870c:	080034c5 	.word	0x080034c5
 8008710:	08003579 	.word	0x08003579
 8008714:	08003515 	.word	0x08003515
 8008718:	080035dd 	.word	0x080035dd
 800871c:	200023b8 	.word	0x200023b8
 8008720:	200023ac 	.word	0x200023ac
 8008724:	200029e0 	.word	0x200029e0
 8008728:	200023a0 	.word	0x200023a0
 800872c:	200012a0 	.word	0x200012a0
 8008730:	2000130c 	.word	0x2000130c
 8008734:	2000237c 	.word	0x2000237c
 8008738:	200012d4 	.word	0x200012d4
 800873c:	200012b0 	.word	0x200012b0

08008740 <LSM303AGR_ACC_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 1 if component ID is OK
 * @retval error status
 */
static int32_t LSM303AGR_ACC_0_Probe(uint32_t Functions)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b092      	sub	sp, #72	; 0x48
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  LSM303AGR_IO_t                io_ctx;
  uint8_t                       id;
  static LSM303AGR_ACC_Object_t lsm303agr_acc_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;
 8008748:	2300      	movs	r3, #0
 800874a:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 800874c:	2300      	movs	r3, #0
 800874e:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM303AGR_I2C_ADD_XL;
 8008750:	2333      	movs	r3, #51	; 0x33
 8008752:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 8008756:	4b3f      	ldr	r3, [pc, #252]	; (8008854 <LSM303AGR_ACC_0_Probe+0x114>)
 8008758:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 800875a:	4b3f      	ldr	r3, [pc, #252]	; (8008858 <LSM303AGR_ACC_0_Probe+0x118>)
 800875c:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 800875e:	4b3f      	ldr	r3, [pc, #252]	; (800885c <LSM303AGR_ACC_0_Probe+0x11c>)
 8008760:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8008762:	4b3f      	ldr	r3, [pc, #252]	; (8008860 <LSM303AGR_ACC_0_Probe+0x120>)
 8008764:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 8008766:	4b3f      	ldr	r3, [pc, #252]	; (8008864 <LSM303AGR_ACC_0_Probe+0x124>)
 8008768:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM303AGR_ACC_RegisterBusIO(&lsm303agr_acc_obj_0, &io_ctx) != LSM303AGR_OK)
 800876a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800876e:	4619      	mov	r1, r3
 8008770:	483d      	ldr	r0, [pc, #244]	; (8008868 <LSM303AGR_ACC_0_Probe+0x128>)
 8008772:	f7fc fc95 	bl	80050a0 <LSM303AGR_ACC_RegisterBusIO>
 8008776:	4603      	mov	r3, r0
 8008778:	2b00      	cmp	r3, #0
 800877a:	d003      	beq.n	8008784 <LSM303AGR_ACC_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800877c:	f06f 0306 	mvn.w	r3, #6
 8008780:	647b      	str	r3, [r7, #68]	; 0x44
 8008782:	e062      	b.n	800884a <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else if (LSM303AGR_ACC_ReadID(&lsm303agr_acc_obj_0, &id) != LSM303AGR_OK)
 8008784:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8008788:	4619      	mov	r1, r3
 800878a:	4837      	ldr	r0, [pc, #220]	; (8008868 <LSM303AGR_ACC_0_Probe+0x128>)
 800878c:	f7fc fd49 	bl	8005222 <LSM303AGR_ACC_ReadID>
 8008790:	4603      	mov	r3, r0
 8008792:	2b00      	cmp	r3, #0
 8008794:	d003      	beq.n	800879e <LSM303AGR_ACC_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008796:	f06f 0306 	mvn.w	r3, #6
 800879a:	647b      	str	r3, [r7, #68]	; 0x44
 800879c:	e055      	b.n	800884a <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else if (id != (uint8_t)LSM303AGR_ID_XL)
 800879e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80087a2:	2b33      	cmp	r3, #51	; 0x33
 80087a4:	d003      	beq.n	80087ae <LSM303AGR_ACC_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80087a6:	f06f 0306 	mvn.w	r3, #6
 80087aa:	647b      	str	r3, [r7, #68]	; 0x44
 80087ac:	e04d      	b.n	800884a <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else
  {
    (void)LSM303AGR_ACC_GetCapabilities(&lsm303agr_acc_obj_0, &cap);
 80087ae:	f107 0308 	add.w	r3, r7, #8
 80087b2:	4619      	mov	r1, r3
 80087b4:	482c      	ldr	r0, [pc, #176]	; (8008868 <LSM303AGR_ACC_0_Probe+0x128>)
 80087b6:	f7fc fd4b 	bl	8005250 <LSM303AGR_ACC_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 80087ba:	7a7b      	ldrb	r3, [r7, #9]
 80087bc:	461a      	mov	r2, r3
 80087be:	7a3b      	ldrb	r3, [r7, #8]
 80087c0:	005b      	lsls	r3, r3, #1
 80087c2:	431a      	orrs	r2, r3
                                                     uint32_t)cap.Magneto << 2);
 80087c4:	7abb      	ldrb	r3, [r7, #10]
 80087c6:	009b      	lsls	r3, r3, #2
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 80087c8:	4313      	orrs	r3, r2
 80087ca:	4a28      	ldr	r2, [pc, #160]	; (800886c <LSM303AGR_ACC_0_Probe+0x12c>)
 80087cc:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A2_LSM303AGR_ACC_0] = &lsm303agr_acc_obj_0;
 80087ce:	4b28      	ldr	r3, [pc, #160]	; (8008870 <LSM303AGR_ACC_0_Probe+0x130>)
 80087d0:	4a25      	ldr	r2, [pc, #148]	; (8008868 <LSM303AGR_ACC_0_Probe+0x128>)
 80087d2:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_ACC_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_ACC_COMMON_Driver;
 80087d4:	4b27      	ldr	r3, [pc, #156]	; (8008874 <LSM303AGR_ACC_0_Probe+0x134>)
 80087d6:	4a28      	ldr	r2, [pc, #160]	; (8008878 <LSM303AGR_ACC_0_Probe+0x138>)
 80087d8:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 80087da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d11e      	bne.n	800881e <LSM303AGR_ACC_0_Probe+0xde>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f003 0302 	and.w	r3, r3, #2
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d019      	beq.n	800881e <LSM303AGR_ACC_0_Probe+0xde>
 80087ea:	7a3b      	ldrb	r3, [r7, #8]
 80087ec:	2b01      	cmp	r3, #1
 80087ee:	d116      	bne.n	800881e <LSM303AGR_ACC_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM303AGR_ACC_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80087f0:	4b22      	ldr	r3, [pc, #136]	; (800887c <LSM303AGR_ACC_0_Probe+0x13c>)
 80087f2:	689b      	ldr	r3, [r3, #8]
 80087f4:	4a22      	ldr	r2, [pc, #136]	; (8008880 <LSM303AGR_ACC_0_Probe+0x140>)
 80087f6:	3303      	adds	r3, #3
 80087f8:	4922      	ldr	r1, [pc, #136]	; (8008884 <LSM303AGR_ACC_0_Probe+0x144>)
 80087fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM303AGR_ACC_Driver;

      if (MotionDrv[IKS01A2_LSM303AGR_ACC_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_ACC_0]) != LSM303AGR_OK)
 80087fe:	4b1d      	ldr	r3, [pc, #116]	; (8008874 <LSM303AGR_ACC_0_Probe+0x134>)
 8008800:	685b      	ldr	r3, [r3, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	4a1a      	ldr	r2, [pc, #104]	; (8008870 <LSM303AGR_ACC_0_Probe+0x130>)
 8008806:	6852      	ldr	r2, [r2, #4]
 8008808:	4610      	mov	r0, r2
 800880a:	4798      	blx	r3
 800880c:	4603      	mov	r3, r0
 800880e:	2b00      	cmp	r3, #0
 8008810:	d003      	beq.n	800881a <LSM303AGR_ACC_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008812:	f06f 0304 	mvn.w	r3, #4
 8008816:	647b      	str	r3, [r7, #68]	; 0x44
 8008818:	e001      	b.n	800881e <LSM303AGR_ACC_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800881a:	2300      	movs	r3, #0
 800881c:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 800881e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008820:	2b00      	cmp	r3, #0
 8008822:	d107      	bne.n	8008834 <LSM303AGR_ACC_0_Probe+0xf4>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f003 0301 	and.w	r3, r3, #1
 800882a:	2b00      	cmp	r3, #0
 800882c:	d002      	beq.n	8008834 <LSM303AGR_ACC_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800882e:	f06f 0304 	mvn.w	r3, #4
 8008832:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8008834:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008836:	2b00      	cmp	r3, #0
 8008838:	d107      	bne.n	800884a <LSM303AGR_ACC_0_Probe+0x10a>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f003 0304 	and.w	r3, r3, #4
 8008840:	2b00      	cmp	r3, #0
 8008842:	d002      	beq.n	800884a <LSM303AGR_ACC_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008844:	f06f 0304 	mvn.w	r3, #4
 8008848:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 800884a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800884c:	4618      	mov	r0, r3
 800884e:	3748      	adds	r7, #72	; 0x48
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}
 8008854:	08003461 	.word	0x08003461
 8008858:	080034c5 	.word	0x080034c5
 800885c:	08003579 	.word	0x08003579
 8008860:	08003515 	.word	0x08003515
 8008864:	080035dd 	.word	0x080035dd
 8008868:	200023e8 	.word	0x200023e8
 800886c:	200023ac 	.word	0x200023ac
 8008870:	200029e0 	.word	0x200029e0
 8008874:	200023a0 	.word	0x200023a0
 8008878:	20001238 	.word	0x20001238
 800887c:	2000130c 	.word	0x2000130c
 8008880:	2000237c 	.word	0x2000237c
 8008884:	20001248 	.word	0x20001248

08008888 <LSM303AGR_MAG_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 2 if component ID is OK
 * @retval error status
 */
static int32_t LSM303AGR_MAG_0_Probe(uint32_t Functions)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b092      	sub	sp, #72	; 0x48
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
  LSM303AGR_IO_t                io_ctx;
  uint8_t                       id;
  static LSM303AGR_MAG_Object_t lsm303agr_mag_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;
 8008890:	2300      	movs	r3, #0
 8008892:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the magneto driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 8008894:	2300      	movs	r3, #0
 8008896:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM303AGR_I2C_ADD_MG;
 8008898:	233d      	movs	r3, #61	; 0x3d
 800889a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 800889e:	4b3f      	ldr	r3, [pc, #252]	; (800899c <LSM303AGR_MAG_0_Probe+0x114>)
 80088a0:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 80088a2:	4b3f      	ldr	r3, [pc, #252]	; (80089a0 <LSM303AGR_MAG_0_Probe+0x118>)
 80088a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 80088a6:	4b3f      	ldr	r3, [pc, #252]	; (80089a4 <LSM303AGR_MAG_0_Probe+0x11c>)
 80088a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 80088aa:	4b3f      	ldr	r3, [pc, #252]	; (80089a8 <LSM303AGR_MAG_0_Probe+0x120>)
 80088ac:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 80088ae:	4b3f      	ldr	r3, [pc, #252]	; (80089ac <LSM303AGR_MAG_0_Probe+0x124>)
 80088b0:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM303AGR_MAG_RegisterBusIO(&lsm303agr_mag_obj_0, &io_ctx) != LSM303AGR_OK)
 80088b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80088b6:	4619      	mov	r1, r3
 80088b8:	483d      	ldr	r0, [pc, #244]	; (80089b0 <LSM303AGR_MAG_0_Probe+0x128>)
 80088ba:	f7fc ffb3 	bl	8005824 <LSM303AGR_MAG_RegisterBusIO>
 80088be:	4603      	mov	r3, r0
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d003      	beq.n	80088cc <LSM303AGR_MAG_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80088c4:	f06f 0306 	mvn.w	r3, #6
 80088c8:	647b      	str	r3, [r7, #68]	; 0x44
 80088ca:	e062      	b.n	8008992 <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else if (LSM303AGR_MAG_ReadID(&lsm303agr_mag_obj_0, &id) != LSM303AGR_OK)
 80088cc:	f107 0327 	add.w	r3, r7, #39	; 0x27
 80088d0:	4619      	mov	r1, r3
 80088d2:	4837      	ldr	r0, [pc, #220]	; (80089b0 <LSM303AGR_MAG_0_Probe+0x128>)
 80088d4:	f7fd f85d 	bl	8005992 <LSM303AGR_MAG_ReadID>
 80088d8:	4603      	mov	r3, r0
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d003      	beq.n	80088e6 <LSM303AGR_MAG_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80088de:	f06f 0306 	mvn.w	r3, #6
 80088e2:	647b      	str	r3, [r7, #68]	; 0x44
 80088e4:	e055      	b.n	8008992 <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else if (id != (uint8_t)LSM303AGR_ID_MG)
 80088e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80088ea:	2b40      	cmp	r3, #64	; 0x40
 80088ec:	d003      	beq.n	80088f6 <LSM303AGR_MAG_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80088ee:	f06f 0306 	mvn.w	r3, #6
 80088f2:	647b      	str	r3, [r7, #68]	; 0x44
 80088f4:	e04d      	b.n	8008992 <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else
  {
    (void)LSM303AGR_MAG_GetCapabilities(&lsm303agr_mag_obj_0, &cap);
 80088f6:	f107 0308 	add.w	r3, r7, #8
 80088fa:	4619      	mov	r1, r3
 80088fc:	482c      	ldr	r0, [pc, #176]	; (80089b0 <LSM303AGR_MAG_0_Probe+0x128>)
 80088fe:	f7fd f85f 	bl	80059c0 <LSM303AGR_MAG_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8008902:	7a7b      	ldrb	r3, [r7, #9]
 8008904:	461a      	mov	r2, r3
 8008906:	7a3b      	ldrb	r3, [r7, #8]
 8008908:	005b      	lsls	r3, r3, #1
 800890a:	431a      	orrs	r2, r3
                                                     uint32_t)cap.Magneto << 2);
 800890c:	7abb      	ldrb	r3, [r7, #10]
 800890e:	009b      	lsls	r3, r3, #2
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8008910:	4313      	orrs	r3, r2
 8008912:	4a28      	ldr	r2, [pc, #160]	; (80089b4 <LSM303AGR_MAG_0_Probe+0x12c>)
 8008914:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A2_LSM303AGR_MAG_0] = &lsm303agr_mag_obj_0;
 8008916:	4b28      	ldr	r3, [pc, #160]	; (80089b8 <LSM303AGR_MAG_0_Probe+0x130>)
 8008918:	4a25      	ldr	r2, [pc, #148]	; (80089b0 <LSM303AGR_MAG_0_Probe+0x128>)
 800891a:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_MAG_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_MAG_COMMON_Driver;
 800891c:	4b27      	ldr	r3, [pc, #156]	; (80089bc <LSM303AGR_MAG_0_Probe+0x134>)
 800891e:	4a28      	ldr	r2, [pc, #160]	; (80089c0 <LSM303AGR_MAG_0_Probe+0x138>)
 8008920:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 8008922:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008924:	2b00      	cmp	r3, #0
 8008926:	d11e      	bne.n	8008966 <LSM303AGR_MAG_0_Probe+0xde>
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f003 0304 	and.w	r3, r3, #4
 800892e:	2b00      	cmp	r3, #0
 8008930:	d019      	beq.n	8008966 <LSM303AGR_MAG_0_Probe+0xde>
 8008932:	7abb      	ldrb	r3, [r7, #10]
 8008934:	2b01      	cmp	r3, #1
 8008936:	d116      	bne.n	8008966 <LSM303AGR_MAG_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM303AGR_MAG_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8008938:	4b22      	ldr	r3, [pc, #136]	; (80089c4 <LSM303AGR_MAG_0_Probe+0x13c>)
 800893a:	691b      	ldr	r3, [r3, #16]
 800893c:	4a22      	ldr	r2, [pc, #136]	; (80089c8 <LSM303AGR_MAG_0_Probe+0x140>)
 800893e:	3306      	adds	r3, #6
 8008940:	4922      	ldr	r1, [pc, #136]	; (80089cc <LSM303AGR_MAG_0_Probe+0x144>)
 8008942:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM303AGR_MAG_Driver;

      if (MotionDrv[IKS01A2_LSM303AGR_MAG_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_MAG_0]) != LSM303AGR_OK)
 8008946:	4b1d      	ldr	r3, [pc, #116]	; (80089bc <LSM303AGR_MAG_0_Probe+0x134>)
 8008948:	689b      	ldr	r3, [r3, #8]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	4a1a      	ldr	r2, [pc, #104]	; (80089b8 <LSM303AGR_MAG_0_Probe+0x130>)
 800894e:	6892      	ldr	r2, [r2, #8]
 8008950:	4610      	mov	r0, r2
 8008952:	4798      	blx	r3
 8008954:	4603      	mov	r3, r0
 8008956:	2b00      	cmp	r3, #0
 8008958:	d003      	beq.n	8008962 <LSM303AGR_MAG_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800895a:	f06f 0304 	mvn.w	r3, #4
 800895e:	647b      	str	r3, [r7, #68]	; 0x44
 8008960:	e001      	b.n	8008966 <LSM303AGR_MAG_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008962:	2300      	movs	r3, #0
 8008964:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 8008966:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008968:	2b00      	cmp	r3, #0
 800896a:	d107      	bne.n	800897c <LSM303AGR_MAG_0_Probe+0xf4>
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f003 0302 	and.w	r3, r3, #2
 8008972:	2b00      	cmp	r3, #0
 8008974:	d002      	beq.n	800897c <LSM303AGR_MAG_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008976:	f06f 0304 	mvn.w	r3, #4
 800897a:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 800897c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800897e:	2b00      	cmp	r3, #0
 8008980:	d107      	bne.n	8008992 <LSM303AGR_MAG_0_Probe+0x10a>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f003 0301 	and.w	r3, r3, #1
 8008988:	2b00      	cmp	r3, #0
 800898a:	d002      	beq.n	8008992 <LSM303AGR_MAG_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800898c:	f06f 0304 	mvn.w	r3, #4
 8008990:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 8008992:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8008994:	4618      	mov	r0, r3
 8008996:	3748      	adds	r7, #72	; 0x48
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}
 800899c:	08003461 	.word	0x08003461
 80089a0:	080034c5 	.word	0x080034c5
 80089a4:	08003579 	.word	0x08003579
 80089a8:	08003515 	.word	0x08003515
 80089ac:	080035dd 	.word	0x080035dd
 80089b0:	20002414 	.word	0x20002414
 80089b4:	200023ac 	.word	0x200023ac
 80089b8:	200029e0 	.word	0x200029e0
 80089bc:	200023a0 	.word	0x200023a0
 80089c0:	2000126c 	.word	0x2000126c
 80089c4:	2000130c 	.word	0x2000130c
 80089c8:	2000237c 	.word	0x2000237c
 80089cc:	2000127c 	.word	0x2000127c

080089d0 <BSP_LED_Init>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b088      	sub	sp, #32
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	4603      	mov	r3, r0
 80089d8:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* LED2 is on the same GPIO Port */
  LED2_GPIO_CLK_ENABLE();    
 80089da:	2300      	movs	r3, #0
 80089dc:	60bb      	str	r3, [r7, #8]
 80089de:	4b16      	ldr	r3, [pc, #88]	; (8008a38 <BSP_LED_Init+0x68>)
 80089e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089e2:	4a15      	ldr	r2, [pc, #84]	; (8008a38 <BSP_LED_Init+0x68>)
 80089e4:	f043 0301 	orr.w	r3, r3, #1
 80089e8:	6313      	str	r3, [r2, #48]	; 0x30
 80089ea:	4b13      	ldr	r3, [pc, #76]	; (8008a38 <BSP_LED_Init+0x68>)
 80089ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089ee:	f003 0301 	and.w	r3, r3, #1
 80089f2:	60bb      	str	r3, [r7, #8]
 80089f4:	68bb      	ldr	r3, [r7, #8]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin   = LED_PIN [Led];
 80089f6:	2320      	movs	r3, #32
 80089f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 80089fa:	2301      	movs	r3, #1
 80089fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 80089fe:	2301      	movs	r3, #1
 8008a00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH; 
 8008a02:	2302      	movs	r3, #2
 8008a04:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(LED_PORT [Led], &GPIO_InitStruct); 
 8008a06:	79fb      	ldrb	r3, [r7, #7]
 8008a08:	4a0c      	ldr	r2, [pc, #48]	; (8008a3c <BSP_LED_Init+0x6c>)
 8008a0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a0e:	f107 020c 	add.w	r2, r7, #12
 8008a12:	4611      	mov	r1, r2
 8008a14:	4618      	mov	r0, r3
 8008a16:	f001 fa71 	bl	8009efc <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 8008a1a:	79fb      	ldrb	r3, [r7, #7]
 8008a1c:	4a07      	ldr	r2, [pc, #28]	; (8008a3c <BSP_LED_Init+0x6c>)
 8008a1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a22:	2120      	movs	r1, #32
 8008a24:	2200      	movs	r2, #0
 8008a26:	4618      	mov	r0, r3
 8008a28:	f001 fce4 	bl	800a3f4 <HAL_GPIO_WritePin>
  
  return BSP_ERROR_NONE;
 8008a2c:	2300      	movs	r3, #0
}
 8008a2e:	4618      	mov	r0, r3
 8008a30:	3720      	adds	r7, #32
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}
 8008a36:	bf00      	nop
 8008a38:	40023800 	.word	0x40023800
 8008a3c:	20001320 	.word	0x20001320

08008a40 <BSP_LED_On>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b082      	sub	sp, #8
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	4603      	mov	r3, r0
 8008a48:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_SET);
 8008a4a:	79fb      	ldrb	r3, [r7, #7]
 8008a4c:	4a06      	ldr	r2, [pc, #24]	; (8008a68 <BSP_LED_On+0x28>)
 8008a4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a52:	2120      	movs	r1, #32
 8008a54:	2201      	movs	r2, #1
 8008a56:	4618      	mov	r0, r3
 8008a58:	f001 fccc 	bl	800a3f4 <HAL_GPIO_WritePin>
  
  return BSP_ERROR_NONE;
 8008a5c:	2300      	movs	r3, #0
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3708      	adds	r7, #8
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}
 8008a66:	bf00      	nop
 8008a68:	20001320 	.word	0x20001320

08008a6c <BSP_LED_Off>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b082      	sub	sp, #8
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	4603      	mov	r3, r0
 8008a74:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 8008a76:	79fb      	ldrb	r3, [r7, #7]
 8008a78:	4a06      	ldr	r2, [pc, #24]	; (8008a94 <BSP_LED_Off+0x28>)
 8008a7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a7e:	2120      	movs	r1, #32
 8008a80:	2200      	movs	r2, #0
 8008a82:	4618      	mov	r0, r3
 8008a84:	f001 fcb6 	bl	800a3f4 <HAL_GPIO_WritePin>
  
  return BSP_ERROR_NONE;
 8008a88:	2300      	movs	r3, #0
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3708      	adds	r7, #8
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}
 8008a92:	bf00      	nop
 8008a94:	20001320 	.word	0x20001320

08008a98 <BSP_LED_Toggle>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b082      	sub	sp, #8
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8008aa2:	79fb      	ldrb	r3, [r7, #7]
 8008aa4:	4a06      	ldr	r2, [pc, #24]	; (8008ac0 <BSP_LED_Toggle+0x28>)
 8008aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008aaa:	2220      	movs	r2, #32
 8008aac:	4611      	mov	r1, r2
 8008aae:	4618      	mov	r0, r3
 8008ab0:	f001 fcb9 	bl	800a426 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 8008ab4:	2300      	movs	r3, #0
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3708      	adds	r7, #8
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}
 8008abe:	bf00      	nop
 8008ac0:	20001320 	.word	0x20001320

08008ac4 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line 
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b08a      	sub	sp, #40	; 0x28
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	4603      	mov	r3, r0
 8008acc:	460a      	mov	r2, r1
 8008ace:	71fb      	strb	r3, [r7, #7]
 8008ad0:	4613      	mov	r3, r2
 8008ad2:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	627b      	str	r3, [r7, #36]	; 0x24
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};                                                
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};  											     
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  
  /* Enable the BUTTON clock*/ 
  USER_BUTTON_GPIO_CLK_ENABLE();
 8008ad8:	2300      	movs	r3, #0
 8008ada:	60fb      	str	r3, [r7, #12]
 8008adc:	4b32      	ldr	r3, [pc, #200]	; (8008ba8 <BSP_PB_Init+0xe4>)
 8008ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ae0:	4a31      	ldr	r2, [pc, #196]	; (8008ba8 <BSP_PB_Init+0xe4>)
 8008ae2:	f043 0304 	orr.w	r3, r3, #4
 8008ae6:	6313      	str	r3, [r2, #48]	; 0x30
 8008ae8:	4b2f      	ldr	r3, [pc, #188]	; (8008ba8 <BSP_PB_Init+0xe4>)
 8008aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aec:	f003 0304 	and.w	r3, r3, #4
 8008af0:	60fb      	str	r3, [r7, #12]
 8008af2:	68fb      	ldr	r3, [r7, #12]
  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8008af4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008af8:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8008afa:	2302      	movs	r3, #2
 8008afc:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8008afe:	2302      	movs	r3, #2
 8008b00:	61fb      	str	r3, [r7, #28]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8008b02:	79bb      	ldrb	r3, [r7, #6]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d10c      	bne.n	8008b22 <BSP_PB_Init+0x5e>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8008b08:	2300      	movs	r3, #0
 8008b0a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8008b0c:	79fb      	ldrb	r3, [r7, #7]
 8008b0e:	4a27      	ldr	r2, [pc, #156]	; (8008bac <BSP_PB_Init+0xe8>)
 8008b10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b14:	f107 0210 	add.w	r2, r7, #16
 8008b18:	4611      	mov	r1, r2
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	f001 f9ee 	bl	8009efc <HAL_GPIO_Init>
 8008b20:	e03d      	b.n	8008b9e <BSP_PB_Init+0xda>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {      
    /* Configure Button pin as input with External interrupt */    
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8008b22:	4b23      	ldr	r3, [pc, #140]	; (8008bb0 <BSP_PB_Init+0xec>)
 8008b24:	617b      	str	r3, [r7, #20]
    
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8008b26:	79fb      	ldrb	r3, [r7, #7]
 8008b28:	4a20      	ldr	r2, [pc, #128]	; (8008bac <BSP_PB_Init+0xe8>)
 8008b2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b2e:	f107 0210 	add.w	r2, r7, #16
 8008b32:	4611      	mov	r1, r2
 8008b34:	4618      	mov	r0, r3
 8008b36:	f001 f9e1 	bl	8009efc <HAL_GPIO_Init>
    
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8008b3a:	79fb      	ldrb	r3, [r7, #7]
 8008b3c:	00db      	lsls	r3, r3, #3
 8008b3e:	4a1d      	ldr	r2, [pc, #116]	; (8008bb4 <BSP_PB_Init+0xf0>)
 8008b40:	1898      	adds	r0, r3, r2
 8008b42:	79fb      	ldrb	r3, [r7, #7]
 8008b44:	4a1c      	ldr	r2, [pc, #112]	; (8008bb8 <BSP_PB_Init+0xf4>)
 8008b46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b4a:	4619      	mov	r1, r3
 8008b4c:	f001 f99e 	bl	8009e8c <HAL_EXTI_GetHandle>
 8008b50:	4603      	mov	r3, r0
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d003      	beq.n	8008b5e <BSP_PB_Init+0x9a>
	{
      ret = BSP_ERROR_PERIPH_FAILURE;
 8008b56:	f06f 0303 	mvn.w	r3, #3
 8008b5a:	627b      	str	r3, [r7, #36]	; 0x24
 8008b5c:	e01f      	b.n	8008b9e <BSP_PB_Init+0xda>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 8008b5e:	79fb      	ldrb	r3, [r7, #7]
 8008b60:	00db      	lsls	r3, r3, #3
 8008b62:	4a14      	ldr	r2, [pc, #80]	; (8008bb4 <BSP_PB_Init+0xf0>)
 8008b64:	1898      	adds	r0, r3, r2
 8008b66:	79fb      	ldrb	r3, [r7, #7]
 8008b68:	4a14      	ldr	r2, [pc, #80]	; (8008bbc <BSP_PB_Init+0xf8>)
 8008b6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b6e:	461a      	mov	r2, r3
 8008b70:	2100      	movs	r1, #0
 8008b72:	f001 f971 	bl	8009e58 <HAL_EXTI_RegisterCallback>
 8008b76:	4603      	mov	r3, r0
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d003      	beq.n	8008b84 <BSP_PB_Init+0xc0>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8008b7c:	f06f 0303 	mvn.w	r3, #3
 8008b80:	627b      	str	r3, [r7, #36]	; 0x24
 8008b82:	e00c      	b.n	8008b9e <BSP_PB_Init+0xda>
    }
	else
	{
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8008b84:	2028      	movs	r0, #40	; 0x28
 8008b86:	79fb      	ldrb	r3, [r7, #7]
 8008b88:	4a0d      	ldr	r2, [pc, #52]	; (8008bc0 <BSP_PB_Init+0xfc>)
 8008b8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	4619      	mov	r1, r3
 8008b92:	f000 fe26 	bl	80097e2 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8008b96:	2328      	movs	r3, #40	; 0x28
 8008b98:	4618      	mov	r0, r3
 8008b9a:	f000 fe3e 	bl	800981a <HAL_NVIC_EnableIRQ>
	}
  }
  
  return ret;
 8008b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3728      	adds	r7, #40	; 0x28
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}
 8008ba8:	40023800 	.word	0x40023800
 8008bac:	20001324 	.word	0x20001324
 8008bb0:	10110000 	.word	0x10110000
 8008bb4:	20001328 	.word	0x20001328
 8008bb8:	0801d7d8 	.word	0x0801d7d8
 8008bbc:	0801d7dc 	.word	0x0801d7dc
 8008bc0:	0801d7e0 	.word	0x0801d7e0

08008bc4 <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b082      	sub	sp, #8
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	4603      	mov	r3, r0
 8008bcc:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 8008bce:	79fb      	ldrb	r3, [r7, #7]
 8008bd0:	4a09      	ldr	r2, [pc, #36]	; (8008bf8 <BSP_PB_GetState+0x34>)
 8008bd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008bd6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008bda:	4611      	mov	r1, r2
 8008bdc:	4618      	mov	r0, r3
 8008bde:	f001 fbf1 	bl	800a3c4 <HAL_GPIO_ReadPin>
 8008be2:	4603      	mov	r3, r0
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	bf0c      	ite	eq
 8008be8:	2301      	moveq	r3, #1
 8008bea:	2300      	movne	r3, #0
 8008bec:	b2db      	uxtb	r3, r3
}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	3708      	adds	r7, #8
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}
 8008bf6:	bf00      	nop
 8008bf8:	20001324 	.word	0x20001324

08008bfc <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{   
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8008c00:	2000      	movs	r0, #0
 8008c02:	f7f9 f99f 	bl	8001f44 <BSP_PB_Callback>
}
 8008c06:	bf00      	nop
 8008c08:	bd80      	pop	{r7, pc}
	...

08008c0c <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM) 
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b084      	sub	sp, #16
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	4603      	mov	r3, r0
 8008c14:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8008c16:	2300      	movs	r3, #0
 8008c18:	60fb      	str	r3, [r7, #12]
  
  if(COM > COMn)
 8008c1a:	79fb      	ldrb	r3, [r7, #7]
 8008c1c:	2b01      	cmp	r3, #1
 8008c1e:	d903      	bls.n	8008c28 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8008c20:	f06f 0301 	mvn.w	r3, #1
 8008c24:	60fb      	str	r3, [r7, #12]
 8008c26:	e01c      	b.n	8008c62 <BSP_COM_Init+0x56>
  }
  else
  {  
     hcom_uart[COM].Instance = COM_USART[COM];
 8008c28:	79fa      	ldrb	r2, [r7, #7]
 8008c2a:	79fb      	ldrb	r3, [r7, #7]
 8008c2c:	490f      	ldr	r1, [pc, #60]	; (8008c6c <BSP_COM_Init+0x60>)
 8008c2e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008c32:	490f      	ldr	r1, [pc, #60]	; (8008c70 <BSP_COM_Init+0x64>)
 8008c34:	019b      	lsls	r3, r3, #6
 8008c36:	440b      	add	r3, r1
 8008c38:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 8008c3a:	79fb      	ldrb	r3, [r7, #7]
 8008c3c:	019b      	lsls	r3, r3, #6
 8008c3e:	4a0c      	ldr	r2, [pc, #48]	; (8008c70 <BSP_COM_Init+0x64>)
 8008c40:	4413      	add	r3, r2
 8008c42:	4618      	mov	r0, r3
 8008c44:	f000 f85c 	bl	8008d00 <USART2_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
  
    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 8008c48:	79fb      	ldrb	r3, [r7, #7]
 8008c4a:	019b      	lsls	r3, r3, #6
 8008c4c:	4a08      	ldr	r2, [pc, #32]	; (8008c70 <BSP_COM_Init+0x64>)
 8008c4e:	4413      	add	r3, r2
 8008c50:	4618      	mov	r0, r3
 8008c52:	f000 f80f 	bl	8008c74 <MX_USART2_UART_Init>
 8008c56:	4603      	mov	r3, r0
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d002      	beq.n	8008c62 <BSP_COM_Init+0x56>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8008c5c:	f06f 0303 	mvn.w	r3, #3
 8008c60:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8008c62:	68fb      	ldr	r3, [r7, #12]
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	3710      	adds	r7, #16
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}
 8008c6c:	20001330 	.word	0x20001330
 8008c70:	200029ec 	.word	0x200029ec

08008c74 <MX_USART2_UART_Init>:
 */

/* USART2 init function */ 

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b084      	sub	sp, #16
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	73fb      	strb	r3, [r7, #15]
  huart->Instance = USART2;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	4a12      	ldr	r2, [pc, #72]	; (8008ccc <MX_USART2_UART_Init+0x58>)
 8008c84:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008c8c:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2200      	movs	r2, #0
 8008c92:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2200      	movs	r2, #0
 8008c98:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	220c      	movs	r2, #12
 8008ca4:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2200      	movs	r2, #0
 8008caa:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2200      	movs	r2, #0
 8008cb0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(huart) != HAL_OK)
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f004 f996 	bl	800cfe4 <HAL_UART_Init>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d001      	beq.n	8008cc2 <MX_USART2_UART_Init+0x4e>
  {
    ret = HAL_ERROR;
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3710      	adds	r7, #16
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}
 8008ccc:	40004400 	.word	0x40004400

08008cd0 <__io_putchar>:
#ifdef __GNUC__ 
 int __io_putchar (int ch) 
#else 
 int fputc (int ch, FILE *f) 
#endif /* __GNUC__ */ 
{ 
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b082      	sub	sp, #8
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT); 
 8008cd8:	4b07      	ldr	r3, [pc, #28]	; (8008cf8 <__io_putchar+0x28>)
 8008cda:	781b      	ldrb	r3, [r3, #0]
 8008cdc:	019b      	lsls	r3, r3, #6
 8008cde:	4a07      	ldr	r2, [pc, #28]	; (8008cfc <__io_putchar+0x2c>)
 8008ce0:	1898      	adds	r0, r3, r2
 8008ce2:	1d39      	adds	r1, r7, #4
 8008ce4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008ce8:	2201      	movs	r2, #1
 8008cea:	f004 f9d2 	bl	800d092 <HAL_UART_Transmit>
  return ch;
 8008cee:	687b      	ldr	r3, [r7, #4]
}
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	3708      	adds	r7, #8
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bd80      	pop	{r7, pc}
 8008cf8:	20002440 	.word	0x20002440
 8008cfc:	200029ec 	.word	0x200029ec

08008d00 <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b08a      	sub	sp, #40	; 0x28
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 8008d08:	2300      	movs	r3, #0
 8008d0a:	613b      	str	r3, [r7, #16]
 8008d0c:	4b16      	ldr	r3, [pc, #88]	; (8008d68 <USART2_MspInit+0x68>)
 8008d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d10:	4a15      	ldr	r2, [pc, #84]	; (8008d68 <USART2_MspInit+0x68>)
 8008d12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d16:	6413      	str	r3, [r2, #64]	; 0x40
 8008d18:	4b13      	ldr	r3, [pc, #76]	; (8008d68 <USART2_MspInit+0x68>)
 8008d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d20:	613b      	str	r3, [r7, #16]
 8008d22:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008d24:	2300      	movs	r3, #0
 8008d26:	60fb      	str	r3, [r7, #12]
 8008d28:	4b0f      	ldr	r3, [pc, #60]	; (8008d68 <USART2_MspInit+0x68>)
 8008d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d2c:	4a0e      	ldr	r2, [pc, #56]	; (8008d68 <USART2_MspInit+0x68>)
 8008d2e:	f043 0301 	orr.w	r3, r3, #1
 8008d32:	6313      	str	r3, [r2, #48]	; 0x30
 8008d34:	4b0c      	ldr	r3, [pc, #48]	; (8008d68 <USART2_MspInit+0x68>)
 8008d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d38:	f003 0301 	and.w	r3, r3, #1
 8008d3c:	60fb      	str	r3, [r7, #12]
 8008d3e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8008d40:	230c      	movs	r3, #12
 8008d42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d44:	2302      	movs	r3, #2
 8008d46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d48:	2300      	movs	r3, #0
 8008d4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8008d50:	2307      	movs	r3, #7
 8008d52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d54:	f107 0314 	add.w	r3, r7, #20
 8008d58:	4619      	mov	r1, r3
 8008d5a:	4804      	ldr	r0, [pc, #16]	; (8008d6c <USART2_MspInit+0x6c>)
 8008d5c:	f001 f8ce 	bl	8009efc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 8008d60:	bf00      	nop
 8008d62:	3728      	adds	r7, #40	; 0x28
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}
 8008d68:	40023800 	.word	0x40023800
 8008d6c:	40020000 	.word	0x40020000

08008d70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008d74:	4b0e      	ldr	r3, [pc, #56]	; (8008db0 <HAL_Init+0x40>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	4a0d      	ldr	r2, [pc, #52]	; (8008db0 <HAL_Init+0x40>)
 8008d7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008d7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008d80:	4b0b      	ldr	r3, [pc, #44]	; (8008db0 <HAL_Init+0x40>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	4a0a      	ldr	r2, [pc, #40]	; (8008db0 <HAL_Init+0x40>)
 8008d86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008d8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008d8c:	4b08      	ldr	r3, [pc, #32]	; (8008db0 <HAL_Init+0x40>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4a07      	ldr	r2, [pc, #28]	; (8008db0 <HAL_Init+0x40>)
 8008d92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008d98:	2003      	movs	r0, #3
 8008d9a:	f000 fd17 	bl	80097cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008d9e:	2000      	movs	r0, #0
 8008da0:	f000 f808 	bl	8008db4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008da4:	f7fa f9a0 	bl	80030e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008da8:	2300      	movs	r3, #0
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	bd80      	pop	{r7, pc}
 8008dae:	bf00      	nop
 8008db0:	40023c00 	.word	0x40023c00

08008db4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b082      	sub	sp, #8
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008dbc:	4b12      	ldr	r3, [pc, #72]	; (8008e08 <HAL_InitTick+0x54>)
 8008dbe:	681a      	ldr	r2, [r3, #0]
 8008dc0:	4b12      	ldr	r3, [pc, #72]	; (8008e0c <HAL_InitTick+0x58>)
 8008dc2:	781b      	ldrb	r3, [r3, #0]
 8008dc4:	4619      	mov	r1, r3
 8008dc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008dca:	fbb3 f3f1 	udiv	r3, r3, r1
 8008dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f000 fd2f 	bl	8009836 <HAL_SYSTICK_Config>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d001      	beq.n	8008de2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008dde:	2301      	movs	r3, #1
 8008de0:	e00e      	b.n	8008e00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2b0f      	cmp	r3, #15
 8008de6:	d80a      	bhi.n	8008dfe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008de8:	2200      	movs	r2, #0
 8008dea:	6879      	ldr	r1, [r7, #4]
 8008dec:	f04f 30ff 	mov.w	r0, #4294967295
 8008df0:	f000 fcf7 	bl	80097e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008df4:	4a06      	ldr	r2, [pc, #24]	; (8008e10 <HAL_InitTick+0x5c>)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	e000      	b.n	8008e00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008dfe:	2301      	movs	r3, #1
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	3708      	adds	r7, #8
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}
 8008e08:	200011c4 	.word	0x200011c4
 8008e0c:	20001338 	.word	0x20001338
 8008e10:	20001334 	.word	0x20001334

08008e14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008e14:	b480      	push	{r7}
 8008e16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008e18:	4b06      	ldr	r3, [pc, #24]	; (8008e34 <HAL_IncTick+0x20>)
 8008e1a:	781b      	ldrb	r3, [r3, #0]
 8008e1c:	461a      	mov	r2, r3
 8008e1e:	4b06      	ldr	r3, [pc, #24]	; (8008e38 <HAL_IncTick+0x24>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	4413      	add	r3, r2
 8008e24:	4a04      	ldr	r2, [pc, #16]	; (8008e38 <HAL_IncTick+0x24>)
 8008e26:	6013      	str	r3, [r2, #0]
}
 8008e28:	bf00      	nop
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e30:	4770      	bx	lr
 8008e32:	bf00      	nop
 8008e34:	20001338 	.word	0x20001338
 8008e38:	20002a2c 	.word	0x20002a2c

08008e3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	af00      	add	r7, sp, #0
  return uwTick;
 8008e40:	4b03      	ldr	r3, [pc, #12]	; (8008e50 <HAL_GetTick+0x14>)
 8008e42:	681b      	ldr	r3, [r3, #0]
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	46bd      	mov	sp, r7
 8008e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4c:	4770      	bx	lr
 8008e4e:	bf00      	nop
 8008e50:	20002a2c 	.word	0x20002a2c

08008e54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b084      	sub	sp, #16
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008e5c:	f7ff ffee 	bl	8008e3c <HAL_GetTick>
 8008e60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e6c:	d005      	beq.n	8008e7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008e6e:	4b09      	ldr	r3, [pc, #36]	; (8008e94 <HAL_Delay+0x40>)
 8008e70:	781b      	ldrb	r3, [r3, #0]
 8008e72:	461a      	mov	r2, r3
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	4413      	add	r3, r2
 8008e78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008e7a:	bf00      	nop
 8008e7c:	f7ff ffde 	bl	8008e3c <HAL_GetTick>
 8008e80:	4602      	mov	r2, r0
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	1ad3      	subs	r3, r2, r3
 8008e86:	68fa      	ldr	r2, [r7, #12]
 8008e88:	429a      	cmp	r2, r3
 8008e8a:	d8f7      	bhi.n	8008e7c <HAL_Delay+0x28>
  {
  }
}
 8008e8c:	bf00      	nop
 8008e8e:	3710      	adds	r7, #16
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}
 8008e94:	20001338 	.word	0x20001338

08008e98 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b084      	sub	sp, #16
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d101      	bne.n	8008eae <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8008eaa:	2301      	movs	r3, #1
 8008eac:	e033      	b.n	8008f16 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d109      	bne.n	8008eca <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f7fa f93e 	bl	8003138 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ece:	f003 0310 	and.w	r3, r3, #16
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d118      	bne.n	8008f08 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eda:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008ede:	f023 0302 	bic.w	r3, r3, #2
 8008ee2:	f043 0202 	orr.w	r2, r3, #2
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f000 fa98 	bl	8009420 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008efa:	f023 0303 	bic.w	r3, r3, #3
 8008efe:	f043 0201 	orr.w	r2, r3, #1
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	641a      	str	r2, [r3, #64]	; 0x40
 8008f06:	e001      	b.n	8008f0c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8008f08:	2301      	movs	r3, #1
 8008f0a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8008f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	3710      	adds	r7, #16
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}

08008f1e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8008f1e:	b580      	push	{r7, lr}
 8008f20:	b084      	sub	sp, #16
 8008f22:	af00      	add	r7, sp, #0
 8008f24:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8008f26:	2300      	movs	r3, #0
 8008f28:	60fb      	str	r3, [r7, #12]
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f003 0302 	and.w	r3, r3, #2
 8008f38:	2b02      	cmp	r3, #2
 8008f3a:	bf0c      	ite	eq
 8008f3c:	2301      	moveq	r3, #1
 8008f3e:	2300      	movne	r3, #0
 8008f40:	b2db      	uxtb	r3, r3
 8008f42:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	685b      	ldr	r3, [r3, #4]
 8008f4a:	f003 0320 	and.w	r3, r3, #32
 8008f4e:	2b20      	cmp	r3, #32
 8008f50:	bf0c      	ite	eq
 8008f52:	2301      	moveq	r3, #1
 8008f54:	2300      	movne	r3, #0
 8008f56:	b2db      	uxtb	r3, r3
 8008f58:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d049      	beq.n	8008ff4 <HAL_ADC_IRQHandler+0xd6>
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d046      	beq.n	8008ff4 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f6a:	f003 0310 	and.w	r3, r3, #16
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d105      	bne.n	8008f7e <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f76:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	689b      	ldr	r3, [r3, #8]
 8008f84:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d12b      	bne.n	8008fe4 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d127      	bne.n	8008fe4 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f9a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d006      	beq.n	8008fb0 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	689b      	ldr	r3, [r3, #8]
 8008fa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d119      	bne.n	8008fe4 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	685a      	ldr	r2, [r3, #4]
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f022 0220 	bic.w	r2, r2, #32
 8008fbe:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fc4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d105      	bne.n	8008fe4 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fdc:	f043 0201 	orr.w	r2, r3, #1
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f000 f8db 	bl	80091a0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f06f 0212 	mvn.w	r2, #18
 8008ff2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f003 0304 	and.w	r3, r3, #4
 8008ffe:	2b04      	cmp	r3, #4
 8009000:	bf0c      	ite	eq
 8009002:	2301      	moveq	r3, #1
 8009004:	2300      	movne	r3, #0
 8009006:	b2db      	uxtb	r3, r3
 8009008:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	685b      	ldr	r3, [r3, #4]
 8009010:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009014:	2b80      	cmp	r3, #128	; 0x80
 8009016:	bf0c      	ite	eq
 8009018:	2301      	moveq	r3, #1
 800901a:	2300      	movne	r3, #0
 800901c:	b2db      	uxtb	r3, r3
 800901e:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d057      	beq.n	80090d6 <HAL_ADC_IRQHandler+0x1b8>
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d054      	beq.n	80090d6 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009030:	f003 0310 	and.w	r3, r3, #16
 8009034:	2b00      	cmp	r3, #0
 8009036:	d105      	bne.n	8009044 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800903c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	689b      	ldr	r3, [r3, #8]
 800904a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800904e:	2b00      	cmp	r3, #0
 8009050:	d139      	bne.n	80090c6 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009058:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800905c:	2b00      	cmp	r3, #0
 800905e:	d006      	beq.n	800906e <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	689b      	ldr	r3, [r3, #8]
 8009066:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800906a:	2b00      	cmp	r3, #0
 800906c:	d12b      	bne.n	80090c6 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	685b      	ldr	r3, [r3, #4]
 8009074:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8009078:	2b00      	cmp	r3, #0
 800907a:	d124      	bne.n	80090c6 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	689b      	ldr	r3, [r3, #8]
 8009082:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8009086:	2b00      	cmp	r3, #0
 8009088:	d11d      	bne.n	80090c6 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800908e:	2b00      	cmp	r3, #0
 8009090:	d119      	bne.n	80090c6 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	685a      	ldr	r2, [r3, #4]
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80090a0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d105      	bne.n	80090c6 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090be:	f043 0201 	orr.w	r2, r3, #1
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f000 faa6 	bl	8009618 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f06f 020c 	mvn.w	r2, #12
 80090d4:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f003 0301 	and.w	r3, r3, #1
 80090e0:	2b01      	cmp	r3, #1
 80090e2:	bf0c      	ite	eq
 80090e4:	2301      	moveq	r3, #1
 80090e6:	2300      	movne	r3, #0
 80090e8:	b2db      	uxtb	r3, r3
 80090ea:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	685b      	ldr	r3, [r3, #4]
 80090f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090f6:	2b40      	cmp	r3, #64	; 0x40
 80090f8:	bf0c      	ite	eq
 80090fa:	2301      	moveq	r3, #1
 80090fc:	2300      	movne	r3, #0
 80090fe:	b2db      	uxtb	r3, r3
 8009100:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d017      	beq.n	8009138 <HAL_ADC_IRQHandler+0x21a>
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d014      	beq.n	8009138 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f003 0301 	and.w	r3, r3, #1
 8009118:	2b01      	cmp	r3, #1
 800911a:	d10d      	bne.n	8009138 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009120:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	f000 f843 	bl	80091b4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f06f 0201 	mvn.w	r2, #1
 8009136:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f003 0320 	and.w	r3, r3, #32
 8009142:	2b20      	cmp	r3, #32
 8009144:	bf0c      	ite	eq
 8009146:	2301      	moveq	r3, #1
 8009148:	2300      	movne	r3, #0
 800914a:	b2db      	uxtb	r3, r3
 800914c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	685b      	ldr	r3, [r3, #4]
 8009154:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009158:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800915c:	bf0c      	ite	eq
 800915e:	2301      	moveq	r3, #1
 8009160:	2300      	movne	r3, #0
 8009162:	b2db      	uxtb	r3, r3
 8009164:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d015      	beq.n	8009198 <HAL_ADC_IRQHandler+0x27a>
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d012      	beq.n	8009198 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009176:	f043 0202 	orr.w	r2, r3, #2
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f06f 0220 	mvn.w	r2, #32
 8009186:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f000 f81d 	bl	80091c8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f06f 0220 	mvn.w	r2, #32
 8009196:	601a      	str	r2, [r3, #0]
  }
}
 8009198:	bf00      	nop
 800919a:	3710      	adds	r7, #16
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}

080091a0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b083      	sub	sp, #12
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80091a8:	bf00      	nop
 80091aa:	370c      	adds	r7, #12
 80091ac:	46bd      	mov	sp, r7
 80091ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b2:	4770      	bx	lr

080091b4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80091b4:	b480      	push	{r7}
 80091b6:	b083      	sub	sp, #12
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80091bc:	bf00      	nop
 80091be:	370c      	adds	r7, #12
 80091c0:	46bd      	mov	sp, r7
 80091c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c6:	4770      	bx	lr

080091c8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80091c8:	b480      	push	{r7}
 80091ca:	b083      	sub	sp, #12
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80091d0:	bf00      	nop
 80091d2:	370c      	adds	r7, #12
 80091d4:	46bd      	mov	sp, r7
 80091d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091da:	4770      	bx	lr

080091dc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80091dc:	b480      	push	{r7}
 80091de:	b085      	sub	sp, #20
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
 80091e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80091e6:	2300      	movs	r3, #0
 80091e8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091f0:	2b01      	cmp	r3, #1
 80091f2:	d101      	bne.n	80091f8 <HAL_ADC_ConfigChannel+0x1c>
 80091f4:	2302      	movs	r3, #2
 80091f6:	e105      	b.n	8009404 <HAL_ADC_ConfigChannel+0x228>
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2201      	movs	r2, #1
 80091fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	2b09      	cmp	r3, #9
 8009206:	d925      	bls.n	8009254 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	68d9      	ldr	r1, [r3, #12]
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	b29b      	uxth	r3, r3
 8009214:	461a      	mov	r2, r3
 8009216:	4613      	mov	r3, r2
 8009218:	005b      	lsls	r3, r3, #1
 800921a:	4413      	add	r3, r2
 800921c:	3b1e      	subs	r3, #30
 800921e:	2207      	movs	r2, #7
 8009220:	fa02 f303 	lsl.w	r3, r2, r3
 8009224:	43da      	mvns	r2, r3
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	400a      	ands	r2, r1
 800922c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	68d9      	ldr	r1, [r3, #12]
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	689a      	ldr	r2, [r3, #8]
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	b29b      	uxth	r3, r3
 800923e:	4618      	mov	r0, r3
 8009240:	4603      	mov	r3, r0
 8009242:	005b      	lsls	r3, r3, #1
 8009244:	4403      	add	r3, r0
 8009246:	3b1e      	subs	r3, #30
 8009248:	409a      	lsls	r2, r3
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	430a      	orrs	r2, r1
 8009250:	60da      	str	r2, [r3, #12]
 8009252:	e022      	b.n	800929a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	6919      	ldr	r1, [r3, #16]
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	b29b      	uxth	r3, r3
 8009260:	461a      	mov	r2, r3
 8009262:	4613      	mov	r3, r2
 8009264:	005b      	lsls	r3, r3, #1
 8009266:	4413      	add	r3, r2
 8009268:	2207      	movs	r2, #7
 800926a:	fa02 f303 	lsl.w	r3, r2, r3
 800926e:	43da      	mvns	r2, r3
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	400a      	ands	r2, r1
 8009276:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	6919      	ldr	r1, [r3, #16]
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	689a      	ldr	r2, [r3, #8]
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	b29b      	uxth	r3, r3
 8009288:	4618      	mov	r0, r3
 800928a:	4603      	mov	r3, r0
 800928c:	005b      	lsls	r3, r3, #1
 800928e:	4403      	add	r3, r0
 8009290:	409a      	lsls	r2, r3
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	430a      	orrs	r2, r1
 8009298:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	685b      	ldr	r3, [r3, #4]
 800929e:	2b06      	cmp	r3, #6
 80092a0:	d824      	bhi.n	80092ec <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	685a      	ldr	r2, [r3, #4]
 80092ac:	4613      	mov	r3, r2
 80092ae:	009b      	lsls	r3, r3, #2
 80092b0:	4413      	add	r3, r2
 80092b2:	3b05      	subs	r3, #5
 80092b4:	221f      	movs	r2, #31
 80092b6:	fa02 f303 	lsl.w	r3, r2, r3
 80092ba:	43da      	mvns	r2, r3
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	400a      	ands	r2, r1
 80092c2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	b29b      	uxth	r3, r3
 80092d0:	4618      	mov	r0, r3
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	685a      	ldr	r2, [r3, #4]
 80092d6:	4613      	mov	r3, r2
 80092d8:	009b      	lsls	r3, r3, #2
 80092da:	4413      	add	r3, r2
 80092dc:	3b05      	subs	r3, #5
 80092de:	fa00 f203 	lsl.w	r2, r0, r3
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	430a      	orrs	r2, r1
 80092e8:	635a      	str	r2, [r3, #52]	; 0x34
 80092ea:	e04c      	b.n	8009386 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	685b      	ldr	r3, [r3, #4]
 80092f0:	2b0c      	cmp	r3, #12
 80092f2:	d824      	bhi.n	800933e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	685a      	ldr	r2, [r3, #4]
 80092fe:	4613      	mov	r3, r2
 8009300:	009b      	lsls	r3, r3, #2
 8009302:	4413      	add	r3, r2
 8009304:	3b23      	subs	r3, #35	; 0x23
 8009306:	221f      	movs	r2, #31
 8009308:	fa02 f303 	lsl.w	r3, r2, r3
 800930c:	43da      	mvns	r2, r3
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	400a      	ands	r2, r1
 8009314:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	b29b      	uxth	r3, r3
 8009322:	4618      	mov	r0, r3
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	685a      	ldr	r2, [r3, #4]
 8009328:	4613      	mov	r3, r2
 800932a:	009b      	lsls	r3, r3, #2
 800932c:	4413      	add	r3, r2
 800932e:	3b23      	subs	r3, #35	; 0x23
 8009330:	fa00 f203 	lsl.w	r2, r0, r3
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	430a      	orrs	r2, r1
 800933a:	631a      	str	r2, [r3, #48]	; 0x30
 800933c:	e023      	b.n	8009386 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	685a      	ldr	r2, [r3, #4]
 8009348:	4613      	mov	r3, r2
 800934a:	009b      	lsls	r3, r3, #2
 800934c:	4413      	add	r3, r2
 800934e:	3b41      	subs	r3, #65	; 0x41
 8009350:	221f      	movs	r2, #31
 8009352:	fa02 f303 	lsl.w	r3, r2, r3
 8009356:	43da      	mvns	r2, r3
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	400a      	ands	r2, r1
 800935e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	b29b      	uxth	r3, r3
 800936c:	4618      	mov	r0, r3
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	685a      	ldr	r2, [r3, #4]
 8009372:	4613      	mov	r3, r2
 8009374:	009b      	lsls	r3, r3, #2
 8009376:	4413      	add	r3, r2
 8009378:	3b41      	subs	r3, #65	; 0x41
 800937a:	fa00 f203 	lsl.w	r2, r0, r3
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	430a      	orrs	r2, r1
 8009384:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009386:	4b22      	ldr	r3, [pc, #136]	; (8009410 <HAL_ADC_ConfigChannel+0x234>)
 8009388:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	4a21      	ldr	r2, [pc, #132]	; (8009414 <HAL_ADC_ConfigChannel+0x238>)
 8009390:	4293      	cmp	r3, r2
 8009392:	d109      	bne.n	80093a8 <HAL_ADC_ConfigChannel+0x1cc>
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	2b12      	cmp	r3, #18
 800939a:	d105      	bne.n	80093a8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	685b      	ldr	r3, [r3, #4]
 80093a0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	4a19      	ldr	r2, [pc, #100]	; (8009414 <HAL_ADC_ConfigChannel+0x238>)
 80093ae:	4293      	cmp	r3, r2
 80093b0:	d123      	bne.n	80093fa <HAL_ADC_ConfigChannel+0x21e>
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	2b10      	cmp	r3, #16
 80093b8:	d003      	beq.n	80093c2 <HAL_ADC_ConfigChannel+0x1e6>
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	2b11      	cmp	r3, #17
 80093c0:	d11b      	bne.n	80093fa <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	685b      	ldr	r3, [r3, #4]
 80093c6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	2b10      	cmp	r3, #16
 80093d4:	d111      	bne.n	80093fa <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80093d6:	4b10      	ldr	r3, [pc, #64]	; (8009418 <HAL_ADC_ConfigChannel+0x23c>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	4a10      	ldr	r2, [pc, #64]	; (800941c <HAL_ADC_ConfigChannel+0x240>)
 80093dc:	fba2 2303 	umull	r2, r3, r2, r3
 80093e0:	0c9a      	lsrs	r2, r3, #18
 80093e2:	4613      	mov	r3, r2
 80093e4:	009b      	lsls	r3, r3, #2
 80093e6:	4413      	add	r3, r2
 80093e8:	005b      	lsls	r3, r3, #1
 80093ea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80093ec:	e002      	b.n	80093f4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	3b01      	subs	r3, #1
 80093f2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d1f9      	bne.n	80093ee <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2200      	movs	r2, #0
 80093fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8009402:	2300      	movs	r3, #0
}
 8009404:	4618      	mov	r0, r3
 8009406:	3714      	adds	r7, #20
 8009408:	46bd      	mov	sp, r7
 800940a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940e:	4770      	bx	lr
 8009410:	40012300 	.word	0x40012300
 8009414:	40012000 	.word	0x40012000
 8009418:	200011c4 	.word	0x200011c4
 800941c:	431bde83 	.word	0x431bde83

08009420 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009420:	b480      	push	{r7}
 8009422:	b085      	sub	sp, #20
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009428:	4b79      	ldr	r3, [pc, #484]	; (8009610 <ADC_Init+0x1f0>)
 800942a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	685b      	ldr	r3, [r3, #4]
 8009430:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	685a      	ldr	r2, [r3, #4]
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	685b      	ldr	r3, [r3, #4]
 8009440:	431a      	orrs	r2, r3
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	685a      	ldr	r2, [r3, #4]
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009454:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	6859      	ldr	r1, [r3, #4]
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	691b      	ldr	r3, [r3, #16]
 8009460:	021a      	lsls	r2, r3, #8
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	430a      	orrs	r2, r1
 8009468:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	685a      	ldr	r2, [r3, #4]
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8009478:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	6859      	ldr	r1, [r3, #4]
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	689a      	ldr	r2, [r3, #8]
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	430a      	orrs	r2, r1
 800948a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	689a      	ldr	r2, [r3, #8]
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800949a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	6899      	ldr	r1, [r3, #8]
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	68da      	ldr	r2, [r3, #12]
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	430a      	orrs	r2, r1
 80094ac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094b2:	4a58      	ldr	r2, [pc, #352]	; (8009614 <ADC_Init+0x1f4>)
 80094b4:	4293      	cmp	r3, r2
 80094b6:	d022      	beq.n	80094fe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	689a      	ldr	r2, [r3, #8]
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80094c6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	6899      	ldr	r1, [r3, #8]
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	430a      	orrs	r2, r1
 80094d8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	689a      	ldr	r2, [r3, #8]
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80094e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	6899      	ldr	r1, [r3, #8]
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	430a      	orrs	r2, r1
 80094fa:	609a      	str	r2, [r3, #8]
 80094fc:	e00f      	b.n	800951e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	689a      	ldr	r2, [r3, #8]
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800950c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	689a      	ldr	r2, [r3, #8]
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800951c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	689a      	ldr	r2, [r3, #8]
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f022 0202 	bic.w	r2, r2, #2
 800952c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	6899      	ldr	r1, [r3, #8]
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	7e1b      	ldrb	r3, [r3, #24]
 8009538:	005a      	lsls	r2, r3, #1
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	430a      	orrs	r2, r1
 8009540:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d01b      	beq.n	8009584 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	685a      	ldr	r2, [r3, #4]
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800955a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	685a      	ldr	r2, [r3, #4]
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800956a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	6859      	ldr	r1, [r3, #4]
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009576:	3b01      	subs	r3, #1
 8009578:	035a      	lsls	r2, r3, #13
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	430a      	orrs	r2, r1
 8009580:	605a      	str	r2, [r3, #4]
 8009582:	e007      	b.n	8009594 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	685a      	ldr	r2, [r3, #4]
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009592:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80095a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	69db      	ldr	r3, [r3, #28]
 80095ae:	3b01      	subs	r3, #1
 80095b0:	051a      	lsls	r2, r3, #20
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	430a      	orrs	r2, r1
 80095b8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	689a      	ldr	r2, [r3, #8]
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80095c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	6899      	ldr	r1, [r3, #8]
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80095d6:	025a      	lsls	r2, r3, #9
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	430a      	orrs	r2, r1
 80095de:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	689a      	ldr	r2, [r3, #8]
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80095ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	6899      	ldr	r1, [r3, #8]
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	695b      	ldr	r3, [r3, #20]
 80095fa:	029a      	lsls	r2, r3, #10
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	430a      	orrs	r2, r1
 8009602:	609a      	str	r2, [r3, #8]
}
 8009604:	bf00      	nop
 8009606:	3714      	adds	r7, #20
 8009608:	46bd      	mov	sp, r7
 800960a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960e:	4770      	bx	lr
 8009610:	40012300 	.word	0x40012300
 8009614:	0f000001 	.word	0x0f000001

08009618 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8009618:	b480      	push	{r7}
 800961a:	b083      	sub	sp, #12
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8009620:	bf00      	nop
 8009622:	370c      	adds	r7, #12
 8009624:	46bd      	mov	sp, r7
 8009626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962a:	4770      	bx	lr

0800962c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800962c:	b480      	push	{r7}
 800962e:	b085      	sub	sp, #20
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f003 0307 	and.w	r3, r3, #7
 800963a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800963c:	4b0c      	ldr	r3, [pc, #48]	; (8009670 <__NVIC_SetPriorityGrouping+0x44>)
 800963e:	68db      	ldr	r3, [r3, #12]
 8009640:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009642:	68ba      	ldr	r2, [r7, #8]
 8009644:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009648:	4013      	ands	r3, r2
 800964a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009650:	68bb      	ldr	r3, [r7, #8]
 8009652:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009654:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009658:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800965c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800965e:	4a04      	ldr	r2, [pc, #16]	; (8009670 <__NVIC_SetPriorityGrouping+0x44>)
 8009660:	68bb      	ldr	r3, [r7, #8]
 8009662:	60d3      	str	r3, [r2, #12]
}
 8009664:	bf00      	nop
 8009666:	3714      	adds	r7, #20
 8009668:	46bd      	mov	sp, r7
 800966a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966e:	4770      	bx	lr
 8009670:	e000ed00 	.word	0xe000ed00

08009674 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009674:	b480      	push	{r7}
 8009676:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009678:	4b04      	ldr	r3, [pc, #16]	; (800968c <__NVIC_GetPriorityGrouping+0x18>)
 800967a:	68db      	ldr	r3, [r3, #12]
 800967c:	0a1b      	lsrs	r3, r3, #8
 800967e:	f003 0307 	and.w	r3, r3, #7
}
 8009682:	4618      	mov	r0, r3
 8009684:	46bd      	mov	sp, r7
 8009686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968a:	4770      	bx	lr
 800968c:	e000ed00 	.word	0xe000ed00

08009690 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009690:	b480      	push	{r7}
 8009692:	b083      	sub	sp, #12
 8009694:	af00      	add	r7, sp, #0
 8009696:	4603      	mov	r3, r0
 8009698:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800969a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	db0b      	blt.n	80096ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80096a2:	79fb      	ldrb	r3, [r7, #7]
 80096a4:	f003 021f 	and.w	r2, r3, #31
 80096a8:	4907      	ldr	r1, [pc, #28]	; (80096c8 <__NVIC_EnableIRQ+0x38>)
 80096aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80096ae:	095b      	lsrs	r3, r3, #5
 80096b0:	2001      	movs	r0, #1
 80096b2:	fa00 f202 	lsl.w	r2, r0, r2
 80096b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80096ba:	bf00      	nop
 80096bc:	370c      	adds	r7, #12
 80096be:	46bd      	mov	sp, r7
 80096c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c4:	4770      	bx	lr
 80096c6:	bf00      	nop
 80096c8:	e000e100 	.word	0xe000e100

080096cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80096cc:	b480      	push	{r7}
 80096ce:	b083      	sub	sp, #12
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	4603      	mov	r3, r0
 80096d4:	6039      	str	r1, [r7, #0]
 80096d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80096d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	db0a      	blt.n	80096f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	b2da      	uxtb	r2, r3
 80096e4:	490c      	ldr	r1, [pc, #48]	; (8009718 <__NVIC_SetPriority+0x4c>)
 80096e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80096ea:	0112      	lsls	r2, r2, #4
 80096ec:	b2d2      	uxtb	r2, r2
 80096ee:	440b      	add	r3, r1
 80096f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80096f4:	e00a      	b.n	800970c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	b2da      	uxtb	r2, r3
 80096fa:	4908      	ldr	r1, [pc, #32]	; (800971c <__NVIC_SetPriority+0x50>)
 80096fc:	79fb      	ldrb	r3, [r7, #7]
 80096fe:	f003 030f 	and.w	r3, r3, #15
 8009702:	3b04      	subs	r3, #4
 8009704:	0112      	lsls	r2, r2, #4
 8009706:	b2d2      	uxtb	r2, r2
 8009708:	440b      	add	r3, r1
 800970a:	761a      	strb	r2, [r3, #24]
}
 800970c:	bf00      	nop
 800970e:	370c      	adds	r7, #12
 8009710:	46bd      	mov	sp, r7
 8009712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009716:	4770      	bx	lr
 8009718:	e000e100 	.word	0xe000e100
 800971c:	e000ed00 	.word	0xe000ed00

08009720 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009720:	b480      	push	{r7}
 8009722:	b089      	sub	sp, #36	; 0x24
 8009724:	af00      	add	r7, sp, #0
 8009726:	60f8      	str	r0, [r7, #12]
 8009728:	60b9      	str	r1, [r7, #8]
 800972a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	f003 0307 	and.w	r3, r3, #7
 8009732:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009734:	69fb      	ldr	r3, [r7, #28]
 8009736:	f1c3 0307 	rsb	r3, r3, #7
 800973a:	2b04      	cmp	r3, #4
 800973c:	bf28      	it	cs
 800973e:	2304      	movcs	r3, #4
 8009740:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009742:	69fb      	ldr	r3, [r7, #28]
 8009744:	3304      	adds	r3, #4
 8009746:	2b06      	cmp	r3, #6
 8009748:	d902      	bls.n	8009750 <NVIC_EncodePriority+0x30>
 800974a:	69fb      	ldr	r3, [r7, #28]
 800974c:	3b03      	subs	r3, #3
 800974e:	e000      	b.n	8009752 <NVIC_EncodePriority+0x32>
 8009750:	2300      	movs	r3, #0
 8009752:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009754:	f04f 32ff 	mov.w	r2, #4294967295
 8009758:	69bb      	ldr	r3, [r7, #24]
 800975a:	fa02 f303 	lsl.w	r3, r2, r3
 800975e:	43da      	mvns	r2, r3
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	401a      	ands	r2, r3
 8009764:	697b      	ldr	r3, [r7, #20]
 8009766:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009768:	f04f 31ff 	mov.w	r1, #4294967295
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	fa01 f303 	lsl.w	r3, r1, r3
 8009772:	43d9      	mvns	r1, r3
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009778:	4313      	orrs	r3, r2
         );
}
 800977a:	4618      	mov	r0, r3
 800977c:	3724      	adds	r7, #36	; 0x24
 800977e:	46bd      	mov	sp, r7
 8009780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009784:	4770      	bx	lr
	...

08009788 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b082      	sub	sp, #8
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	3b01      	subs	r3, #1
 8009794:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009798:	d301      	bcc.n	800979e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800979a:	2301      	movs	r3, #1
 800979c:	e00f      	b.n	80097be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800979e:	4a0a      	ldr	r2, [pc, #40]	; (80097c8 <SysTick_Config+0x40>)
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	3b01      	subs	r3, #1
 80097a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80097a6:	210f      	movs	r1, #15
 80097a8:	f04f 30ff 	mov.w	r0, #4294967295
 80097ac:	f7ff ff8e 	bl	80096cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80097b0:	4b05      	ldr	r3, [pc, #20]	; (80097c8 <SysTick_Config+0x40>)
 80097b2:	2200      	movs	r2, #0
 80097b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80097b6:	4b04      	ldr	r3, [pc, #16]	; (80097c8 <SysTick_Config+0x40>)
 80097b8:	2207      	movs	r2, #7
 80097ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80097bc:	2300      	movs	r3, #0
}
 80097be:	4618      	mov	r0, r3
 80097c0:	3708      	adds	r7, #8
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}
 80097c6:	bf00      	nop
 80097c8:	e000e010 	.word	0xe000e010

080097cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b082      	sub	sp, #8
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f7ff ff29 	bl	800962c <__NVIC_SetPriorityGrouping>
}
 80097da:	bf00      	nop
 80097dc:	3708      	adds	r7, #8
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}

080097e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80097e2:	b580      	push	{r7, lr}
 80097e4:	b086      	sub	sp, #24
 80097e6:	af00      	add	r7, sp, #0
 80097e8:	4603      	mov	r3, r0
 80097ea:	60b9      	str	r1, [r7, #8]
 80097ec:	607a      	str	r2, [r7, #4]
 80097ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80097f0:	2300      	movs	r3, #0
 80097f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80097f4:	f7ff ff3e 	bl	8009674 <__NVIC_GetPriorityGrouping>
 80097f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80097fa:	687a      	ldr	r2, [r7, #4]
 80097fc:	68b9      	ldr	r1, [r7, #8]
 80097fe:	6978      	ldr	r0, [r7, #20]
 8009800:	f7ff ff8e 	bl	8009720 <NVIC_EncodePriority>
 8009804:	4602      	mov	r2, r0
 8009806:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800980a:	4611      	mov	r1, r2
 800980c:	4618      	mov	r0, r3
 800980e:	f7ff ff5d 	bl	80096cc <__NVIC_SetPriority>
}
 8009812:	bf00      	nop
 8009814:	3718      	adds	r7, #24
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}

0800981a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800981a:	b580      	push	{r7, lr}
 800981c:	b082      	sub	sp, #8
 800981e:	af00      	add	r7, sp, #0
 8009820:	4603      	mov	r3, r0
 8009822:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009828:	4618      	mov	r0, r3
 800982a:	f7ff ff31 	bl	8009690 <__NVIC_EnableIRQ>
}
 800982e:	bf00      	nop
 8009830:	3708      	adds	r7, #8
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}

08009836 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009836:	b580      	push	{r7, lr}
 8009838:	b082      	sub	sp, #8
 800983a:	af00      	add	r7, sp, #0
 800983c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f7ff ffa2 	bl	8009788 <SysTick_Config>
 8009844:	4603      	mov	r3, r0
}
 8009846:	4618      	mov	r0, r3
 8009848:	3708      	adds	r7, #8
 800984a:	46bd      	mov	sp, r7
 800984c:	bd80      	pop	{r7, pc}

0800984e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800984e:	b580      	push	{r7, lr}
 8009850:	b082      	sub	sp, #8
 8009852:	af00      	add	r7, sp, #0
 8009854:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d101      	bne.n	8009860 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800985c:	2301      	movs	r3, #1
 800985e:	e00e      	b.n	800987e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	795b      	ldrb	r3, [r3, #5]
 8009864:	b2db      	uxtb	r3, r3
 8009866:	2b00      	cmp	r3, #0
 8009868:	d105      	bne.n	8009876 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2200      	movs	r2, #0
 800986e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f7f9 fce1 	bl	8003238 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2201      	movs	r2, #1
 800987a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800987c:	2300      	movs	r3, #0
}
 800987e:	4618      	mov	r0, r3
 8009880:	3708      	adds	r7, #8
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}
	...

08009888 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b086      	sub	sp, #24
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8009890:	2300      	movs	r3, #0
 8009892:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8009894:	f7ff fad2 	bl	8008e3c <HAL_GetTick>
 8009898:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d101      	bne.n	80098a4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80098a0:	2301      	movs	r3, #1
 80098a2:	e099      	b.n	80099d8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2200      	movs	r2, #0
 80098a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2202      	movs	r2, #2
 80098b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	681a      	ldr	r2, [r3, #0]
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f022 0201 	bic.w	r2, r2, #1
 80098c2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80098c4:	e00f      	b.n	80098e6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80098c6:	f7ff fab9 	bl	8008e3c <HAL_GetTick>
 80098ca:	4602      	mov	r2, r0
 80098cc:	693b      	ldr	r3, [r7, #16]
 80098ce:	1ad3      	subs	r3, r2, r3
 80098d0:	2b05      	cmp	r3, #5
 80098d2:	d908      	bls.n	80098e6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2220      	movs	r2, #32
 80098d8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2203      	movs	r2, #3
 80098de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80098e2:	2303      	movs	r3, #3
 80098e4:	e078      	b.n	80099d8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	f003 0301 	and.w	r3, r3, #1
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d1e8      	bne.n	80098c6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80098fc:	697a      	ldr	r2, [r7, #20]
 80098fe:	4b38      	ldr	r3, [pc, #224]	; (80099e0 <HAL_DMA_Init+0x158>)
 8009900:	4013      	ands	r3, r2
 8009902:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	685a      	ldr	r2, [r3, #4]
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	689b      	ldr	r3, [r3, #8]
 800990c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009912:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	691b      	ldr	r3, [r3, #16]
 8009918:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800991e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	699b      	ldr	r3, [r3, #24]
 8009924:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800992a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	6a1b      	ldr	r3, [r3, #32]
 8009930:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009932:	697a      	ldr	r2, [r7, #20]
 8009934:	4313      	orrs	r3, r2
 8009936:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800993c:	2b04      	cmp	r3, #4
 800993e:	d107      	bne.n	8009950 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009948:	4313      	orrs	r3, r2
 800994a:	697a      	ldr	r2, [r7, #20]
 800994c:	4313      	orrs	r3, r2
 800994e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	697a      	ldr	r2, [r7, #20]
 8009956:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	695b      	ldr	r3, [r3, #20]
 800995e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8009960:	697b      	ldr	r3, [r7, #20]
 8009962:	f023 0307 	bic.w	r3, r3, #7
 8009966:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800996c:	697a      	ldr	r2, [r7, #20]
 800996e:	4313      	orrs	r3, r2
 8009970:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009976:	2b04      	cmp	r3, #4
 8009978:	d117      	bne.n	80099aa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800997e:	697a      	ldr	r2, [r7, #20]
 8009980:	4313      	orrs	r3, r2
 8009982:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009988:	2b00      	cmp	r3, #0
 800998a:	d00e      	beq.n	80099aa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f000 f9e9 	bl	8009d64 <DMA_CheckFifoParam>
 8009992:	4603      	mov	r3, r0
 8009994:	2b00      	cmp	r3, #0
 8009996:	d008      	beq.n	80099aa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2240      	movs	r2, #64	; 0x40
 800999c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2201      	movs	r2, #1
 80099a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80099a6:	2301      	movs	r3, #1
 80099a8:	e016      	b.n	80099d8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	697a      	ldr	r2, [r7, #20]
 80099b0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	f000 f9a0 	bl	8009cf8 <DMA_CalcBaseAndBitshift>
 80099b8:	4603      	mov	r3, r0
 80099ba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80099c0:	223f      	movs	r2, #63	; 0x3f
 80099c2:	409a      	lsls	r2, r3
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2200      	movs	r2, #0
 80099cc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2201      	movs	r2, #1
 80099d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80099d6:	2300      	movs	r3, #0
}
 80099d8:	4618      	mov	r0, r3
 80099da:	3718      	adds	r7, #24
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}
 80099e0:	f010803f 	.word	0xf010803f

080099e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b086      	sub	sp, #24
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80099ec:	2300      	movs	r3, #0
 80099ee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80099f0:	4b92      	ldr	r3, [pc, #584]	; (8009c3c <HAL_DMA_IRQHandler+0x258>)
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	4a92      	ldr	r2, [pc, #584]	; (8009c40 <HAL_DMA_IRQHandler+0x25c>)
 80099f6:	fba2 2303 	umull	r2, r3, r2, r3
 80099fa:	0a9b      	lsrs	r3, r3, #10
 80099fc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a02:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8009a04:	693b      	ldr	r3, [r7, #16]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a0e:	2208      	movs	r2, #8
 8009a10:	409a      	lsls	r2, r3
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	4013      	ands	r3, r2
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d01a      	beq.n	8009a50 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f003 0304 	and.w	r3, r3, #4
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d013      	beq.n	8009a50 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	681a      	ldr	r2, [r3, #0]
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f022 0204 	bic.w	r2, r2, #4
 8009a36:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a3c:	2208      	movs	r2, #8
 8009a3e:	409a      	lsls	r2, r3
 8009a40:	693b      	ldr	r3, [r7, #16]
 8009a42:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a48:	f043 0201 	orr.w	r2, r3, #1
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a54:	2201      	movs	r2, #1
 8009a56:	409a      	lsls	r2, r3
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	4013      	ands	r3, r2
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d012      	beq.n	8009a86 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	695b      	ldr	r3, [r3, #20]
 8009a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d00b      	beq.n	8009a86 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a72:	2201      	movs	r2, #1
 8009a74:	409a      	lsls	r2, r3
 8009a76:	693b      	ldr	r3, [r7, #16]
 8009a78:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a7e:	f043 0202 	orr.w	r2, r3, #2
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a8a:	2204      	movs	r2, #4
 8009a8c:	409a      	lsls	r2, r3
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	4013      	ands	r3, r2
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d012      	beq.n	8009abc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f003 0302 	and.w	r3, r3, #2
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d00b      	beq.n	8009abc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009aa8:	2204      	movs	r2, #4
 8009aaa:	409a      	lsls	r2, r3
 8009aac:	693b      	ldr	r3, [r7, #16]
 8009aae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ab4:	f043 0204 	orr.w	r2, r3, #4
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ac0:	2210      	movs	r2, #16
 8009ac2:	409a      	lsls	r2, r3
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	4013      	ands	r3, r2
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d043      	beq.n	8009b54 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f003 0308 	and.w	r3, r3, #8
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d03c      	beq.n	8009b54 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ade:	2210      	movs	r2, #16
 8009ae0:	409a      	lsls	r2, r3
 8009ae2:	693b      	ldr	r3, [r7, #16]
 8009ae4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d018      	beq.n	8009b26 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d108      	bne.n	8009b14 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d024      	beq.n	8009b54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	4798      	blx	r3
 8009b12:	e01f      	b.n	8009b54 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d01b      	beq.n	8009b54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b20:	6878      	ldr	r0, [r7, #4]
 8009b22:	4798      	blx	r3
 8009b24:	e016      	b.n	8009b54 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d107      	bne.n	8009b44 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	681a      	ldr	r2, [r3, #0]
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f022 0208 	bic.w	r2, r2, #8
 8009b42:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d003      	beq.n	8009b54 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b58:	2220      	movs	r2, #32
 8009b5a:	409a      	lsls	r2, r3
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	4013      	ands	r3, r2
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	f000 808e 	beq.w	8009c82 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f003 0310 	and.w	r3, r3, #16
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	f000 8086 	beq.w	8009c82 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b7a:	2220      	movs	r2, #32
 8009b7c:	409a      	lsls	r2, r3
 8009b7e:	693b      	ldr	r3, [r7, #16]
 8009b80:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009b88:	b2db      	uxtb	r3, r3
 8009b8a:	2b05      	cmp	r3, #5
 8009b8c:	d136      	bne.n	8009bfc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	681a      	ldr	r2, [r3, #0]
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f022 0216 	bic.w	r2, r2, #22
 8009b9c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	695a      	ldr	r2, [r3, #20]
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009bac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d103      	bne.n	8009bbe <HAL_DMA_IRQHandler+0x1da>
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d007      	beq.n	8009bce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	681a      	ldr	r2, [r3, #0]
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	f022 0208 	bic.w	r2, r2, #8
 8009bcc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009bd2:	223f      	movs	r2, #63	; 0x3f
 8009bd4:	409a      	lsls	r2, r3
 8009bd6:	693b      	ldr	r3, [r7, #16]
 8009bd8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2200      	movs	r2, #0
 8009bde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2201      	movs	r2, #1
 8009be6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d07d      	beq.n	8009cee <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	4798      	blx	r3
        }
        return;
 8009bfa:	e078      	b.n	8009cee <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d01c      	beq.n	8009c44 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d108      	bne.n	8009c2a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d030      	beq.n	8009c82 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	4798      	blx	r3
 8009c28:	e02b      	b.n	8009c82 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d027      	beq.n	8009c82 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	4798      	blx	r3
 8009c3a:	e022      	b.n	8009c82 <HAL_DMA_IRQHandler+0x29e>
 8009c3c:	200011c4 	.word	0x200011c4
 8009c40:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d10f      	bne.n	8009c72 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	681a      	ldr	r2, [r3, #0]
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f022 0210 	bic.w	r2, r2, #16
 8009c60:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2200      	movs	r2, #0
 8009c66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2201      	movs	r2, #1
 8009c6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d003      	beq.n	8009c82 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d032      	beq.n	8009cf0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c8e:	f003 0301 	and.w	r3, r3, #1
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d022      	beq.n	8009cdc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2205      	movs	r2, #5
 8009c9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	681a      	ldr	r2, [r3, #0]
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	f022 0201 	bic.w	r2, r2, #1
 8009cac:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	3301      	adds	r3, #1
 8009cb2:	60bb      	str	r3, [r7, #8]
 8009cb4:	697a      	ldr	r2, [r7, #20]
 8009cb6:	429a      	cmp	r2, r3
 8009cb8:	d307      	bcc.n	8009cca <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	f003 0301 	and.w	r3, r3, #1
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d1f2      	bne.n	8009cae <HAL_DMA_IRQHandler+0x2ca>
 8009cc8:	e000      	b.n	8009ccc <HAL_DMA_IRQHandler+0x2e8>
          break;
 8009cca:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2200      	movs	r2, #0
 8009cd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2201      	movs	r2, #1
 8009cd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d005      	beq.n	8009cf0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	4798      	blx	r3
 8009cec:	e000      	b.n	8009cf0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8009cee:	bf00      	nop
    }
  }
}
 8009cf0:	3718      	adds	r7, #24
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}
 8009cf6:	bf00      	nop

08009cf8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009cf8:	b480      	push	{r7}
 8009cfa:	b085      	sub	sp, #20
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	b2db      	uxtb	r3, r3
 8009d06:	3b10      	subs	r3, #16
 8009d08:	4a14      	ldr	r2, [pc, #80]	; (8009d5c <DMA_CalcBaseAndBitshift+0x64>)
 8009d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8009d0e:	091b      	lsrs	r3, r3, #4
 8009d10:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8009d12:	4a13      	ldr	r2, [pc, #76]	; (8009d60 <DMA_CalcBaseAndBitshift+0x68>)
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	4413      	add	r3, r2
 8009d18:	781b      	ldrb	r3, [r3, #0]
 8009d1a:	461a      	mov	r2, r3
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	2b03      	cmp	r3, #3
 8009d24:	d909      	bls.n	8009d3a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8009d2e:	f023 0303 	bic.w	r3, r3, #3
 8009d32:	1d1a      	adds	r2, r3, #4
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	659a      	str	r2, [r3, #88]	; 0x58
 8009d38:	e007      	b.n	8009d4a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8009d42:	f023 0303 	bic.w	r3, r3, #3
 8009d46:	687a      	ldr	r2, [r7, #4]
 8009d48:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8009d4e:	4618      	mov	r0, r3
 8009d50:	3714      	adds	r7, #20
 8009d52:	46bd      	mov	sp, r7
 8009d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d58:	4770      	bx	lr
 8009d5a:	bf00      	nop
 8009d5c:	aaaaaaab 	.word	0xaaaaaaab
 8009d60:	0801d7e4 	.word	0x0801d7e4

08009d64 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009d64:	b480      	push	{r7}
 8009d66:	b085      	sub	sp, #20
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d74:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	699b      	ldr	r3, [r3, #24]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d11f      	bne.n	8009dbe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8009d7e:	68bb      	ldr	r3, [r7, #8]
 8009d80:	2b03      	cmp	r3, #3
 8009d82:	d855      	bhi.n	8009e30 <DMA_CheckFifoParam+0xcc>
 8009d84:	a201      	add	r2, pc, #4	; (adr r2, 8009d8c <DMA_CheckFifoParam+0x28>)
 8009d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d8a:	bf00      	nop
 8009d8c:	08009d9d 	.word	0x08009d9d
 8009d90:	08009daf 	.word	0x08009daf
 8009d94:	08009d9d 	.word	0x08009d9d
 8009d98:	08009e31 	.word	0x08009e31
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009da0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d045      	beq.n	8009e34 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8009da8:	2301      	movs	r3, #1
 8009daa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009dac:	e042      	b.n	8009e34 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009db2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009db6:	d13f      	bne.n	8009e38 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8009db8:	2301      	movs	r3, #1
 8009dba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009dbc:	e03c      	b.n	8009e38 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	699b      	ldr	r3, [r3, #24]
 8009dc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009dc6:	d121      	bne.n	8009e0c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	2b03      	cmp	r3, #3
 8009dcc:	d836      	bhi.n	8009e3c <DMA_CheckFifoParam+0xd8>
 8009dce:	a201      	add	r2, pc, #4	; (adr r2, 8009dd4 <DMA_CheckFifoParam+0x70>)
 8009dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dd4:	08009de5 	.word	0x08009de5
 8009dd8:	08009deb 	.word	0x08009deb
 8009ddc:	08009de5 	.word	0x08009de5
 8009de0:	08009dfd 	.word	0x08009dfd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8009de4:	2301      	movs	r3, #1
 8009de6:	73fb      	strb	r3, [r7, #15]
      break;
 8009de8:	e02f      	b.n	8009e4a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d024      	beq.n	8009e40 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8009df6:	2301      	movs	r3, #1
 8009df8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009dfa:	e021      	b.n	8009e40 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e00:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009e04:	d11e      	bne.n	8009e44 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8009e06:	2301      	movs	r3, #1
 8009e08:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8009e0a:	e01b      	b.n	8009e44 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8009e0c:	68bb      	ldr	r3, [r7, #8]
 8009e0e:	2b02      	cmp	r3, #2
 8009e10:	d902      	bls.n	8009e18 <DMA_CheckFifoParam+0xb4>
 8009e12:	2b03      	cmp	r3, #3
 8009e14:	d003      	beq.n	8009e1e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8009e16:	e018      	b.n	8009e4a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8009e18:	2301      	movs	r3, #1
 8009e1a:	73fb      	strb	r3, [r7, #15]
      break;
 8009e1c:	e015      	b.n	8009e4a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d00e      	beq.n	8009e48 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	73fb      	strb	r3, [r7, #15]
      break;
 8009e2e:	e00b      	b.n	8009e48 <DMA_CheckFifoParam+0xe4>
      break;
 8009e30:	bf00      	nop
 8009e32:	e00a      	b.n	8009e4a <DMA_CheckFifoParam+0xe6>
      break;
 8009e34:	bf00      	nop
 8009e36:	e008      	b.n	8009e4a <DMA_CheckFifoParam+0xe6>
      break;
 8009e38:	bf00      	nop
 8009e3a:	e006      	b.n	8009e4a <DMA_CheckFifoParam+0xe6>
      break;
 8009e3c:	bf00      	nop
 8009e3e:	e004      	b.n	8009e4a <DMA_CheckFifoParam+0xe6>
      break;
 8009e40:	bf00      	nop
 8009e42:	e002      	b.n	8009e4a <DMA_CheckFifoParam+0xe6>
      break;   
 8009e44:	bf00      	nop
 8009e46:	e000      	b.n	8009e4a <DMA_CheckFifoParam+0xe6>
      break;
 8009e48:	bf00      	nop
    }
  } 
  
  return status; 
 8009e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	3714      	adds	r7, #20
 8009e50:	46bd      	mov	sp, r7
 8009e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e56:	4770      	bx	lr

08009e58 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8009e58:	b480      	push	{r7}
 8009e5a:	b087      	sub	sp, #28
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	60f8      	str	r0, [r7, #12]
 8009e60:	460b      	mov	r3, r1
 8009e62:	607a      	str	r2, [r7, #4]
 8009e64:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8009e66:	2300      	movs	r3, #0
 8009e68:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8009e6a:	7afb      	ldrb	r3, [r7, #11]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d103      	bne.n	8009e78 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	687a      	ldr	r2, [r7, #4]
 8009e74:	605a      	str	r2, [r3, #4]
      break;
 8009e76:	e002      	b.n	8009e7e <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8009e78:	2301      	movs	r3, #1
 8009e7a:	75fb      	strb	r3, [r7, #23]
      break;
 8009e7c:	bf00      	nop
  }

  return status;
 8009e7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e80:	4618      	mov	r0, r3
 8009e82:	371c      	adds	r7, #28
 8009e84:	46bd      	mov	sp, r7
 8009e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8a:	4770      	bx	lr

08009e8c <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b083      	sub	sp, #12
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
 8009e94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d101      	bne.n	8009ea0 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8009e9c:	2301      	movs	r3, #1
 8009e9e:	e003      	b.n	8009ea8 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	683a      	ldr	r2, [r7, #0]
 8009ea4:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8009ea6:	2300      	movs	r3, #0
  }
}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	370c      	adds	r7, #12
 8009eac:	46bd      	mov	sp, r7
 8009eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb2:	4770      	bx	lr

08009eb4 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b084      	sub	sp, #16
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f003 031f 	and.w	r3, r3, #31
 8009ec4:	2201      	movs	r2, #1
 8009ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8009eca:	60fb      	str	r3, [r7, #12]

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 8009ecc:	4b0a      	ldr	r3, [pc, #40]	; (8009ef8 <HAL_EXTI_IRQHandler+0x44>)
 8009ece:	695b      	ldr	r3, [r3, #20]
 8009ed0:	68fa      	ldr	r2, [r7, #12]
 8009ed2:	4013      	ands	r3, r2
 8009ed4:	60bb      	str	r3, [r7, #8]
  if (regval != 0x00u)
 8009ed6:	68bb      	ldr	r3, [r7, #8]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d009      	beq.n	8009ef0 <HAL_EXTI_IRQHandler+0x3c>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 8009edc:	4a06      	ldr	r2, [pc, #24]	; (8009ef8 <HAL_EXTI_IRQHandler+0x44>)
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	685b      	ldr	r3, [r3, #4]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d002      	beq.n	8009ef0 <HAL_EXTI_IRQHandler+0x3c>
    {
      hexti->PendingCallback();
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	685b      	ldr	r3, [r3, #4]
 8009eee:	4798      	blx	r3
    }
  }
}
 8009ef0:	bf00      	nop
 8009ef2:	3710      	adds	r7, #16
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bd80      	pop	{r7, pc}
 8009ef8:	40013c00 	.word	0x40013c00

08009efc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009efc:	b480      	push	{r7}
 8009efe:	b089      	sub	sp, #36	; 0x24
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
 8009f04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8009f06:	2300      	movs	r3, #0
 8009f08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8009f0e:	2300      	movs	r3, #0
 8009f10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009f12:	2300      	movs	r3, #0
 8009f14:	61fb      	str	r3, [r7, #28]
 8009f16:	e159      	b.n	800a1cc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009f18:	2201      	movs	r2, #1
 8009f1a:	69fb      	ldr	r3, [r7, #28]
 8009f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8009f20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	697a      	ldr	r2, [r7, #20]
 8009f28:	4013      	ands	r3, r2
 8009f2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8009f2c:	693a      	ldr	r2, [r7, #16]
 8009f2e:	697b      	ldr	r3, [r7, #20]
 8009f30:	429a      	cmp	r2, r3
 8009f32:	f040 8148 	bne.w	800a1c6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	685b      	ldr	r3, [r3, #4]
 8009f3a:	2b01      	cmp	r3, #1
 8009f3c:	d00b      	beq.n	8009f56 <HAL_GPIO_Init+0x5a>
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	685b      	ldr	r3, [r3, #4]
 8009f42:	2b02      	cmp	r3, #2
 8009f44:	d007      	beq.n	8009f56 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009f4a:	2b11      	cmp	r3, #17
 8009f4c:	d003      	beq.n	8009f56 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	685b      	ldr	r3, [r3, #4]
 8009f52:	2b12      	cmp	r3, #18
 8009f54:	d130      	bne.n	8009fb8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	689b      	ldr	r3, [r3, #8]
 8009f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009f5c:	69fb      	ldr	r3, [r7, #28]
 8009f5e:	005b      	lsls	r3, r3, #1
 8009f60:	2203      	movs	r2, #3
 8009f62:	fa02 f303 	lsl.w	r3, r2, r3
 8009f66:	43db      	mvns	r3, r3
 8009f68:	69ba      	ldr	r2, [r7, #24]
 8009f6a:	4013      	ands	r3, r2
 8009f6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	68da      	ldr	r2, [r3, #12]
 8009f72:	69fb      	ldr	r3, [r7, #28]
 8009f74:	005b      	lsls	r3, r3, #1
 8009f76:	fa02 f303 	lsl.w	r3, r2, r3
 8009f7a:	69ba      	ldr	r2, [r7, #24]
 8009f7c:	4313      	orrs	r3, r2
 8009f7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	69ba      	ldr	r2, [r7, #24]
 8009f84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	685b      	ldr	r3, [r3, #4]
 8009f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009f8c:	2201      	movs	r2, #1
 8009f8e:	69fb      	ldr	r3, [r7, #28]
 8009f90:	fa02 f303 	lsl.w	r3, r2, r3
 8009f94:	43db      	mvns	r3, r3
 8009f96:	69ba      	ldr	r2, [r7, #24]
 8009f98:	4013      	ands	r3, r2
 8009f9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	685b      	ldr	r3, [r3, #4]
 8009fa0:	091b      	lsrs	r3, r3, #4
 8009fa2:	f003 0201 	and.w	r2, r3, #1
 8009fa6:	69fb      	ldr	r3, [r7, #28]
 8009fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8009fac:	69ba      	ldr	r2, [r7, #24]
 8009fae:	4313      	orrs	r3, r2
 8009fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	69ba      	ldr	r2, [r7, #24]
 8009fb6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	68db      	ldr	r3, [r3, #12]
 8009fbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009fbe:	69fb      	ldr	r3, [r7, #28]
 8009fc0:	005b      	lsls	r3, r3, #1
 8009fc2:	2203      	movs	r2, #3
 8009fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8009fc8:	43db      	mvns	r3, r3
 8009fca:	69ba      	ldr	r2, [r7, #24]
 8009fcc:	4013      	ands	r3, r2
 8009fce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	689a      	ldr	r2, [r3, #8]
 8009fd4:	69fb      	ldr	r3, [r7, #28]
 8009fd6:	005b      	lsls	r3, r3, #1
 8009fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8009fdc:	69ba      	ldr	r2, [r7, #24]
 8009fde:	4313      	orrs	r3, r2
 8009fe0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	69ba      	ldr	r2, [r7, #24]
 8009fe6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	685b      	ldr	r3, [r3, #4]
 8009fec:	2b02      	cmp	r3, #2
 8009fee:	d003      	beq.n	8009ff8 <HAL_GPIO_Init+0xfc>
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	685b      	ldr	r3, [r3, #4]
 8009ff4:	2b12      	cmp	r3, #18
 8009ff6:	d123      	bne.n	800a040 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009ff8:	69fb      	ldr	r3, [r7, #28]
 8009ffa:	08da      	lsrs	r2, r3, #3
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	3208      	adds	r2, #8
 800a000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a004:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800a006:	69fb      	ldr	r3, [r7, #28]
 800a008:	f003 0307 	and.w	r3, r3, #7
 800a00c:	009b      	lsls	r3, r3, #2
 800a00e:	220f      	movs	r2, #15
 800a010:	fa02 f303 	lsl.w	r3, r2, r3
 800a014:	43db      	mvns	r3, r3
 800a016:	69ba      	ldr	r2, [r7, #24]
 800a018:	4013      	ands	r3, r2
 800a01a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	691a      	ldr	r2, [r3, #16]
 800a020:	69fb      	ldr	r3, [r7, #28]
 800a022:	f003 0307 	and.w	r3, r3, #7
 800a026:	009b      	lsls	r3, r3, #2
 800a028:	fa02 f303 	lsl.w	r3, r2, r3
 800a02c:	69ba      	ldr	r2, [r7, #24]
 800a02e:	4313      	orrs	r3, r2
 800a030:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a032:	69fb      	ldr	r3, [r7, #28]
 800a034:	08da      	lsrs	r2, r3, #3
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	3208      	adds	r2, #8
 800a03a:	69b9      	ldr	r1, [r7, #24]
 800a03c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800a046:	69fb      	ldr	r3, [r7, #28]
 800a048:	005b      	lsls	r3, r3, #1
 800a04a:	2203      	movs	r2, #3
 800a04c:	fa02 f303 	lsl.w	r3, r2, r3
 800a050:	43db      	mvns	r3, r3
 800a052:	69ba      	ldr	r2, [r7, #24]
 800a054:	4013      	ands	r3, r2
 800a056:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	685b      	ldr	r3, [r3, #4]
 800a05c:	f003 0203 	and.w	r2, r3, #3
 800a060:	69fb      	ldr	r3, [r7, #28]
 800a062:	005b      	lsls	r3, r3, #1
 800a064:	fa02 f303 	lsl.w	r3, r2, r3
 800a068:	69ba      	ldr	r2, [r7, #24]
 800a06a:	4313      	orrs	r3, r2
 800a06c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	69ba      	ldr	r2, [r7, #24]
 800a072:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	685b      	ldr	r3, [r3, #4]
 800a078:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	f000 80a2 	beq.w	800a1c6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a082:	2300      	movs	r3, #0
 800a084:	60fb      	str	r3, [r7, #12]
 800a086:	4b56      	ldr	r3, [pc, #344]	; (800a1e0 <HAL_GPIO_Init+0x2e4>)
 800a088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a08a:	4a55      	ldr	r2, [pc, #340]	; (800a1e0 <HAL_GPIO_Init+0x2e4>)
 800a08c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a090:	6453      	str	r3, [r2, #68]	; 0x44
 800a092:	4b53      	ldr	r3, [pc, #332]	; (800a1e0 <HAL_GPIO_Init+0x2e4>)
 800a094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a096:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a09a:	60fb      	str	r3, [r7, #12]
 800a09c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a09e:	4a51      	ldr	r2, [pc, #324]	; (800a1e4 <HAL_GPIO_Init+0x2e8>)
 800a0a0:	69fb      	ldr	r3, [r7, #28]
 800a0a2:	089b      	lsrs	r3, r3, #2
 800a0a4:	3302      	adds	r3, #2
 800a0a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a0aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800a0ac:	69fb      	ldr	r3, [r7, #28]
 800a0ae:	f003 0303 	and.w	r3, r3, #3
 800a0b2:	009b      	lsls	r3, r3, #2
 800a0b4:	220f      	movs	r2, #15
 800a0b6:	fa02 f303 	lsl.w	r3, r2, r3
 800a0ba:	43db      	mvns	r3, r3
 800a0bc:	69ba      	ldr	r2, [r7, #24]
 800a0be:	4013      	ands	r3, r2
 800a0c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	4a48      	ldr	r2, [pc, #288]	; (800a1e8 <HAL_GPIO_Init+0x2ec>)
 800a0c6:	4293      	cmp	r3, r2
 800a0c8:	d019      	beq.n	800a0fe <HAL_GPIO_Init+0x202>
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	4a47      	ldr	r2, [pc, #284]	; (800a1ec <HAL_GPIO_Init+0x2f0>)
 800a0ce:	4293      	cmp	r3, r2
 800a0d0:	d013      	beq.n	800a0fa <HAL_GPIO_Init+0x1fe>
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	4a46      	ldr	r2, [pc, #280]	; (800a1f0 <HAL_GPIO_Init+0x2f4>)
 800a0d6:	4293      	cmp	r3, r2
 800a0d8:	d00d      	beq.n	800a0f6 <HAL_GPIO_Init+0x1fa>
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	4a45      	ldr	r2, [pc, #276]	; (800a1f4 <HAL_GPIO_Init+0x2f8>)
 800a0de:	4293      	cmp	r3, r2
 800a0e0:	d007      	beq.n	800a0f2 <HAL_GPIO_Init+0x1f6>
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	4a44      	ldr	r2, [pc, #272]	; (800a1f8 <HAL_GPIO_Init+0x2fc>)
 800a0e6:	4293      	cmp	r3, r2
 800a0e8:	d101      	bne.n	800a0ee <HAL_GPIO_Init+0x1f2>
 800a0ea:	2304      	movs	r3, #4
 800a0ec:	e008      	b.n	800a100 <HAL_GPIO_Init+0x204>
 800a0ee:	2307      	movs	r3, #7
 800a0f0:	e006      	b.n	800a100 <HAL_GPIO_Init+0x204>
 800a0f2:	2303      	movs	r3, #3
 800a0f4:	e004      	b.n	800a100 <HAL_GPIO_Init+0x204>
 800a0f6:	2302      	movs	r3, #2
 800a0f8:	e002      	b.n	800a100 <HAL_GPIO_Init+0x204>
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	e000      	b.n	800a100 <HAL_GPIO_Init+0x204>
 800a0fe:	2300      	movs	r3, #0
 800a100:	69fa      	ldr	r2, [r7, #28]
 800a102:	f002 0203 	and.w	r2, r2, #3
 800a106:	0092      	lsls	r2, r2, #2
 800a108:	4093      	lsls	r3, r2
 800a10a:	69ba      	ldr	r2, [r7, #24]
 800a10c:	4313      	orrs	r3, r2
 800a10e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a110:	4934      	ldr	r1, [pc, #208]	; (800a1e4 <HAL_GPIO_Init+0x2e8>)
 800a112:	69fb      	ldr	r3, [r7, #28]
 800a114:	089b      	lsrs	r3, r3, #2
 800a116:	3302      	adds	r3, #2
 800a118:	69ba      	ldr	r2, [r7, #24]
 800a11a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800a11e:	4b37      	ldr	r3, [pc, #220]	; (800a1fc <HAL_GPIO_Init+0x300>)
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a124:	693b      	ldr	r3, [r7, #16]
 800a126:	43db      	mvns	r3, r3
 800a128:	69ba      	ldr	r2, [r7, #24]
 800a12a:	4013      	ands	r3, r2
 800a12c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	685b      	ldr	r3, [r3, #4]
 800a132:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a136:	2b00      	cmp	r3, #0
 800a138:	d003      	beq.n	800a142 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800a13a:	69ba      	ldr	r2, [r7, #24]
 800a13c:	693b      	ldr	r3, [r7, #16]
 800a13e:	4313      	orrs	r3, r2
 800a140:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800a142:	4a2e      	ldr	r2, [pc, #184]	; (800a1fc <HAL_GPIO_Init+0x300>)
 800a144:	69bb      	ldr	r3, [r7, #24]
 800a146:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800a148:	4b2c      	ldr	r3, [pc, #176]	; (800a1fc <HAL_GPIO_Init+0x300>)
 800a14a:	685b      	ldr	r3, [r3, #4]
 800a14c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a14e:	693b      	ldr	r3, [r7, #16]
 800a150:	43db      	mvns	r3, r3
 800a152:	69ba      	ldr	r2, [r7, #24]
 800a154:	4013      	ands	r3, r2
 800a156:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	685b      	ldr	r3, [r3, #4]
 800a15c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a160:	2b00      	cmp	r3, #0
 800a162:	d003      	beq.n	800a16c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800a164:	69ba      	ldr	r2, [r7, #24]
 800a166:	693b      	ldr	r3, [r7, #16]
 800a168:	4313      	orrs	r3, r2
 800a16a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800a16c:	4a23      	ldr	r2, [pc, #140]	; (800a1fc <HAL_GPIO_Init+0x300>)
 800a16e:	69bb      	ldr	r3, [r7, #24]
 800a170:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800a172:	4b22      	ldr	r3, [pc, #136]	; (800a1fc <HAL_GPIO_Init+0x300>)
 800a174:	689b      	ldr	r3, [r3, #8]
 800a176:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a178:	693b      	ldr	r3, [r7, #16]
 800a17a:	43db      	mvns	r3, r3
 800a17c:	69ba      	ldr	r2, [r7, #24]
 800a17e:	4013      	ands	r3, r2
 800a180:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	685b      	ldr	r3, [r3, #4]
 800a186:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d003      	beq.n	800a196 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800a18e:	69ba      	ldr	r2, [r7, #24]
 800a190:	693b      	ldr	r3, [r7, #16]
 800a192:	4313      	orrs	r3, r2
 800a194:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800a196:	4a19      	ldr	r2, [pc, #100]	; (800a1fc <HAL_GPIO_Init+0x300>)
 800a198:	69bb      	ldr	r3, [r7, #24]
 800a19a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800a19c:	4b17      	ldr	r3, [pc, #92]	; (800a1fc <HAL_GPIO_Init+0x300>)
 800a19e:	68db      	ldr	r3, [r3, #12]
 800a1a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a1a2:	693b      	ldr	r3, [r7, #16]
 800a1a4:	43db      	mvns	r3, r3
 800a1a6:	69ba      	ldr	r2, [r7, #24]
 800a1a8:	4013      	ands	r3, r2
 800a1aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	685b      	ldr	r3, [r3, #4]
 800a1b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d003      	beq.n	800a1c0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800a1b8:	69ba      	ldr	r2, [r7, #24]
 800a1ba:	693b      	ldr	r3, [r7, #16]
 800a1bc:	4313      	orrs	r3, r2
 800a1be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800a1c0:	4a0e      	ldr	r2, [pc, #56]	; (800a1fc <HAL_GPIO_Init+0x300>)
 800a1c2:	69bb      	ldr	r3, [r7, #24]
 800a1c4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a1c6:	69fb      	ldr	r3, [r7, #28]
 800a1c8:	3301      	adds	r3, #1
 800a1ca:	61fb      	str	r3, [r7, #28]
 800a1cc:	69fb      	ldr	r3, [r7, #28]
 800a1ce:	2b0f      	cmp	r3, #15
 800a1d0:	f67f aea2 	bls.w	8009f18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800a1d4:	bf00      	nop
 800a1d6:	3724      	adds	r7, #36	; 0x24
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1de:	4770      	bx	lr
 800a1e0:	40023800 	.word	0x40023800
 800a1e4:	40013800 	.word	0x40013800
 800a1e8:	40020000 	.word	0x40020000
 800a1ec:	40020400 	.word	0x40020400
 800a1f0:	40020800 	.word	0x40020800
 800a1f4:	40020c00 	.word	0x40020c00
 800a1f8:	40021000 	.word	0x40021000
 800a1fc:	40013c00 	.word	0x40013c00

0800a200 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800a200:	b480      	push	{r7}
 800a202:	b087      	sub	sp, #28
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
 800a208:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800a20a:	2300      	movs	r3, #0
 800a20c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800a20e:	2300      	movs	r3, #0
 800a210:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800a212:	2300      	movs	r3, #0
 800a214:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a216:	2300      	movs	r3, #0
 800a218:	617b      	str	r3, [r7, #20]
 800a21a:	e0bb      	b.n	800a394 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800a21c:	2201      	movs	r2, #1
 800a21e:	697b      	ldr	r3, [r7, #20]
 800a220:	fa02 f303 	lsl.w	r3, r2, r3
 800a224:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800a226:	683a      	ldr	r2, [r7, #0]
 800a228:	693b      	ldr	r3, [r7, #16]
 800a22a:	4013      	ands	r3, r2
 800a22c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800a22e:	68fa      	ldr	r2, [r7, #12]
 800a230:	693b      	ldr	r3, [r7, #16]
 800a232:	429a      	cmp	r2, r3
 800a234:	f040 80ab 	bne.w	800a38e <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800a238:	4a5b      	ldr	r2, [pc, #364]	; (800a3a8 <HAL_GPIO_DeInit+0x1a8>)
 800a23a:	697b      	ldr	r3, [r7, #20]
 800a23c:	089b      	lsrs	r3, r3, #2
 800a23e:	3302      	adds	r3, #2
 800a240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a244:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800a246:	697b      	ldr	r3, [r7, #20]
 800a248:	f003 0303 	and.w	r3, r3, #3
 800a24c:	009b      	lsls	r3, r3, #2
 800a24e:	220f      	movs	r2, #15
 800a250:	fa02 f303 	lsl.w	r3, r2, r3
 800a254:	68ba      	ldr	r2, [r7, #8]
 800a256:	4013      	ands	r3, r2
 800a258:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	4a53      	ldr	r2, [pc, #332]	; (800a3ac <HAL_GPIO_DeInit+0x1ac>)
 800a25e:	4293      	cmp	r3, r2
 800a260:	d019      	beq.n	800a296 <HAL_GPIO_DeInit+0x96>
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	4a52      	ldr	r2, [pc, #328]	; (800a3b0 <HAL_GPIO_DeInit+0x1b0>)
 800a266:	4293      	cmp	r3, r2
 800a268:	d013      	beq.n	800a292 <HAL_GPIO_DeInit+0x92>
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	4a51      	ldr	r2, [pc, #324]	; (800a3b4 <HAL_GPIO_DeInit+0x1b4>)
 800a26e:	4293      	cmp	r3, r2
 800a270:	d00d      	beq.n	800a28e <HAL_GPIO_DeInit+0x8e>
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	4a50      	ldr	r2, [pc, #320]	; (800a3b8 <HAL_GPIO_DeInit+0x1b8>)
 800a276:	4293      	cmp	r3, r2
 800a278:	d007      	beq.n	800a28a <HAL_GPIO_DeInit+0x8a>
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	4a4f      	ldr	r2, [pc, #316]	; (800a3bc <HAL_GPIO_DeInit+0x1bc>)
 800a27e:	4293      	cmp	r3, r2
 800a280:	d101      	bne.n	800a286 <HAL_GPIO_DeInit+0x86>
 800a282:	2304      	movs	r3, #4
 800a284:	e008      	b.n	800a298 <HAL_GPIO_DeInit+0x98>
 800a286:	2307      	movs	r3, #7
 800a288:	e006      	b.n	800a298 <HAL_GPIO_DeInit+0x98>
 800a28a:	2303      	movs	r3, #3
 800a28c:	e004      	b.n	800a298 <HAL_GPIO_DeInit+0x98>
 800a28e:	2302      	movs	r3, #2
 800a290:	e002      	b.n	800a298 <HAL_GPIO_DeInit+0x98>
 800a292:	2301      	movs	r3, #1
 800a294:	e000      	b.n	800a298 <HAL_GPIO_DeInit+0x98>
 800a296:	2300      	movs	r3, #0
 800a298:	697a      	ldr	r2, [r7, #20]
 800a29a:	f002 0203 	and.w	r2, r2, #3
 800a29e:	0092      	lsls	r2, r2, #2
 800a2a0:	4093      	lsls	r3, r2
 800a2a2:	68ba      	ldr	r2, [r7, #8]
 800a2a4:	429a      	cmp	r2, r3
 800a2a6:	d132      	bne.n	800a30e <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800a2a8:	4b45      	ldr	r3, [pc, #276]	; (800a3c0 <HAL_GPIO_DeInit+0x1c0>)
 800a2aa:	681a      	ldr	r2, [r3, #0]
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	43db      	mvns	r3, r3
 800a2b0:	4943      	ldr	r1, [pc, #268]	; (800a3c0 <HAL_GPIO_DeInit+0x1c0>)
 800a2b2:	4013      	ands	r3, r2
 800a2b4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800a2b6:	4b42      	ldr	r3, [pc, #264]	; (800a3c0 <HAL_GPIO_DeInit+0x1c0>)
 800a2b8:	685a      	ldr	r2, [r3, #4]
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	43db      	mvns	r3, r3
 800a2be:	4940      	ldr	r1, [pc, #256]	; (800a3c0 <HAL_GPIO_DeInit+0x1c0>)
 800a2c0:	4013      	ands	r3, r2
 800a2c2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800a2c4:	4b3e      	ldr	r3, [pc, #248]	; (800a3c0 <HAL_GPIO_DeInit+0x1c0>)
 800a2c6:	689a      	ldr	r2, [r3, #8]
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	43db      	mvns	r3, r3
 800a2cc:	493c      	ldr	r1, [pc, #240]	; (800a3c0 <HAL_GPIO_DeInit+0x1c0>)
 800a2ce:	4013      	ands	r3, r2
 800a2d0:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800a2d2:	4b3b      	ldr	r3, [pc, #236]	; (800a3c0 <HAL_GPIO_DeInit+0x1c0>)
 800a2d4:	68da      	ldr	r2, [r3, #12]
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	43db      	mvns	r3, r3
 800a2da:	4939      	ldr	r1, [pc, #228]	; (800a3c0 <HAL_GPIO_DeInit+0x1c0>)
 800a2dc:	4013      	ands	r3, r2
 800a2de:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800a2e0:	697b      	ldr	r3, [r7, #20]
 800a2e2:	f003 0303 	and.w	r3, r3, #3
 800a2e6:	009b      	lsls	r3, r3, #2
 800a2e8:	220f      	movs	r2, #15
 800a2ea:	fa02 f303 	lsl.w	r3, r2, r3
 800a2ee:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800a2f0:	4a2d      	ldr	r2, [pc, #180]	; (800a3a8 <HAL_GPIO_DeInit+0x1a8>)
 800a2f2:	697b      	ldr	r3, [r7, #20]
 800a2f4:	089b      	lsrs	r3, r3, #2
 800a2f6:	3302      	adds	r3, #2
 800a2f8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a2fc:	68bb      	ldr	r3, [r7, #8]
 800a2fe:	43da      	mvns	r2, r3
 800a300:	4829      	ldr	r0, [pc, #164]	; (800a3a8 <HAL_GPIO_DeInit+0x1a8>)
 800a302:	697b      	ldr	r3, [r7, #20]
 800a304:	089b      	lsrs	r3, r3, #2
 800a306:	400a      	ands	r2, r1
 800a308:	3302      	adds	r3, #2
 800a30a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681a      	ldr	r2, [r3, #0]
 800a312:	697b      	ldr	r3, [r7, #20]
 800a314:	005b      	lsls	r3, r3, #1
 800a316:	2103      	movs	r1, #3
 800a318:	fa01 f303 	lsl.w	r3, r1, r3
 800a31c:	43db      	mvns	r3, r3
 800a31e:	401a      	ands	r2, r3
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800a324:	697b      	ldr	r3, [r7, #20]
 800a326:	08da      	lsrs	r2, r3, #3
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	3208      	adds	r2, #8
 800a32c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a330:	697b      	ldr	r3, [r7, #20]
 800a332:	f003 0307 	and.w	r3, r3, #7
 800a336:	009b      	lsls	r3, r3, #2
 800a338:	220f      	movs	r2, #15
 800a33a:	fa02 f303 	lsl.w	r3, r2, r3
 800a33e:	43db      	mvns	r3, r3
 800a340:	697a      	ldr	r2, [r7, #20]
 800a342:	08d2      	lsrs	r2, r2, #3
 800a344:	4019      	ands	r1, r3
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	3208      	adds	r2, #8
 800a34a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	68da      	ldr	r2, [r3, #12]
 800a352:	697b      	ldr	r3, [r7, #20]
 800a354:	005b      	lsls	r3, r3, #1
 800a356:	2103      	movs	r1, #3
 800a358:	fa01 f303 	lsl.w	r3, r1, r3
 800a35c:	43db      	mvns	r3, r3
 800a35e:	401a      	ands	r2, r3
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	685a      	ldr	r2, [r3, #4]
 800a368:	2101      	movs	r1, #1
 800a36a:	697b      	ldr	r3, [r7, #20]
 800a36c:	fa01 f303 	lsl.w	r3, r1, r3
 800a370:	43db      	mvns	r3, r3
 800a372:	401a      	ands	r2, r3
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	689a      	ldr	r2, [r3, #8]
 800a37c:	697b      	ldr	r3, [r7, #20]
 800a37e:	005b      	lsls	r3, r3, #1
 800a380:	2103      	movs	r1, #3
 800a382:	fa01 f303 	lsl.w	r3, r1, r3
 800a386:	43db      	mvns	r3, r3
 800a388:	401a      	ands	r2, r3
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a38e:	697b      	ldr	r3, [r7, #20]
 800a390:	3301      	adds	r3, #1
 800a392:	617b      	str	r3, [r7, #20]
 800a394:	697b      	ldr	r3, [r7, #20]
 800a396:	2b0f      	cmp	r3, #15
 800a398:	f67f af40 	bls.w	800a21c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800a39c:	bf00      	nop
 800a39e:	371c      	adds	r7, #28
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a6:	4770      	bx	lr
 800a3a8:	40013800 	.word	0x40013800
 800a3ac:	40020000 	.word	0x40020000
 800a3b0:	40020400 	.word	0x40020400
 800a3b4:	40020800 	.word	0x40020800
 800a3b8:	40020c00 	.word	0x40020c00
 800a3bc:	40021000 	.word	0x40021000
 800a3c0:	40013c00 	.word	0x40013c00

0800a3c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a3c4:	b480      	push	{r7}
 800a3c6:	b085      	sub	sp, #20
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
 800a3cc:	460b      	mov	r3, r1
 800a3ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	691a      	ldr	r2, [r3, #16]
 800a3d4:	887b      	ldrh	r3, [r7, #2]
 800a3d6:	4013      	ands	r3, r2
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d002      	beq.n	800a3e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a3dc:	2301      	movs	r3, #1
 800a3de:	73fb      	strb	r3, [r7, #15]
 800a3e0:	e001      	b.n	800a3e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a3e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	3714      	adds	r7, #20
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f2:	4770      	bx	lr

0800a3f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a3f4:	b480      	push	{r7}
 800a3f6:	b083      	sub	sp, #12
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
 800a3fc:	460b      	mov	r3, r1
 800a3fe:	807b      	strh	r3, [r7, #2]
 800a400:	4613      	mov	r3, r2
 800a402:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800a404:	787b      	ldrb	r3, [r7, #1]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d003      	beq.n	800a412 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a40a:	887a      	ldrh	r2, [r7, #2]
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800a410:	e003      	b.n	800a41a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800a412:	887b      	ldrh	r3, [r7, #2]
 800a414:	041a      	lsls	r2, r3, #16
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	619a      	str	r2, [r3, #24]
}
 800a41a:	bf00      	nop
 800a41c:	370c      	adds	r7, #12
 800a41e:	46bd      	mov	sp, r7
 800a420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a424:	4770      	bx	lr

0800a426 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a426:	b480      	push	{r7}
 800a428:	b083      	sub	sp, #12
 800a42a:	af00      	add	r7, sp, #0
 800a42c:	6078      	str	r0, [r7, #4]
 800a42e:	460b      	mov	r3, r1
 800a430:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	695a      	ldr	r2, [r3, #20]
 800a436:	887b      	ldrh	r3, [r7, #2]
 800a438:	401a      	ands	r2, r3
 800a43a:	887b      	ldrh	r3, [r7, #2]
 800a43c:	429a      	cmp	r2, r3
 800a43e:	d104      	bne.n	800a44a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800a440:	887b      	ldrh	r3, [r7, #2]
 800a442:	041a      	lsls	r2, r3, #16
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800a448:	e002      	b.n	800a450 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800a44a:	887a      	ldrh	r2, [r7, #2]
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	619a      	str	r2, [r3, #24]
}
 800a450:	bf00      	nop
 800a452:	370c      	adds	r7, #12
 800a454:	46bd      	mov	sp, r7
 800a456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45a:	4770      	bx	lr

0800a45c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b084      	sub	sp, #16
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d101      	bne.n	800a46e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a46a:	2301      	movs	r3, #1
 800a46c:	e11f      	b.n	800a6ae <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a474:	b2db      	uxtb	r3, r3
 800a476:	2b00      	cmp	r3, #0
 800a478:	d106      	bne.n	800a488 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2200      	movs	r2, #0
 800a47e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	f000 f951 	bl	800a72a <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2224      	movs	r2, #36	; 0x24
 800a48c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	681a      	ldr	r2, [r3, #0]
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	f022 0201 	bic.w	r2, r2, #1
 800a49e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	681a      	ldr	r2, [r3, #0]
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a4ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	681a      	ldr	r2, [r3, #0]
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a4be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800a4c0:	f001 fc14 	bl	800bcec <HAL_RCC_GetPCLK1Freq>
 800a4c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	685b      	ldr	r3, [r3, #4]
 800a4ca:	4a7b      	ldr	r2, [pc, #492]	; (800a6b8 <HAL_I2C_Init+0x25c>)
 800a4cc:	4293      	cmp	r3, r2
 800a4ce:	d807      	bhi.n	800a4e0 <HAL_I2C_Init+0x84>
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	4a7a      	ldr	r2, [pc, #488]	; (800a6bc <HAL_I2C_Init+0x260>)
 800a4d4:	4293      	cmp	r3, r2
 800a4d6:	bf94      	ite	ls
 800a4d8:	2301      	movls	r3, #1
 800a4da:	2300      	movhi	r3, #0
 800a4dc:	b2db      	uxtb	r3, r3
 800a4de:	e006      	b.n	800a4ee <HAL_I2C_Init+0x92>
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	4a77      	ldr	r2, [pc, #476]	; (800a6c0 <HAL_I2C_Init+0x264>)
 800a4e4:	4293      	cmp	r3, r2
 800a4e6:	bf94      	ite	ls
 800a4e8:	2301      	movls	r3, #1
 800a4ea:	2300      	movhi	r3, #0
 800a4ec:	b2db      	uxtb	r3, r3
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d001      	beq.n	800a4f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800a4f2:	2301      	movs	r3, #1
 800a4f4:	e0db      	b.n	800a6ae <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	4a72      	ldr	r2, [pc, #456]	; (800a6c4 <HAL_I2C_Init+0x268>)
 800a4fa:	fba2 2303 	umull	r2, r3, r2, r3
 800a4fe:	0c9b      	lsrs	r3, r3, #18
 800a500:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	685b      	ldr	r3, [r3, #4]
 800a508:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	68ba      	ldr	r2, [r7, #8]
 800a512:	430a      	orrs	r2, r1
 800a514:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	6a1b      	ldr	r3, [r3, #32]
 800a51c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	685b      	ldr	r3, [r3, #4]
 800a524:	4a64      	ldr	r2, [pc, #400]	; (800a6b8 <HAL_I2C_Init+0x25c>)
 800a526:	4293      	cmp	r3, r2
 800a528:	d802      	bhi.n	800a530 <HAL_I2C_Init+0xd4>
 800a52a:	68bb      	ldr	r3, [r7, #8]
 800a52c:	3301      	adds	r3, #1
 800a52e:	e009      	b.n	800a544 <HAL_I2C_Init+0xe8>
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800a536:	fb02 f303 	mul.w	r3, r2, r3
 800a53a:	4a63      	ldr	r2, [pc, #396]	; (800a6c8 <HAL_I2C_Init+0x26c>)
 800a53c:	fba2 2303 	umull	r2, r3, r2, r3
 800a540:	099b      	lsrs	r3, r3, #6
 800a542:	3301      	adds	r3, #1
 800a544:	687a      	ldr	r2, [r7, #4]
 800a546:	6812      	ldr	r2, [r2, #0]
 800a548:	430b      	orrs	r3, r1
 800a54a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	69db      	ldr	r3, [r3, #28]
 800a552:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800a556:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	685b      	ldr	r3, [r3, #4]
 800a55e:	4956      	ldr	r1, [pc, #344]	; (800a6b8 <HAL_I2C_Init+0x25c>)
 800a560:	428b      	cmp	r3, r1
 800a562:	d80d      	bhi.n	800a580 <HAL_I2C_Init+0x124>
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	1e59      	subs	r1, r3, #1
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	685b      	ldr	r3, [r3, #4]
 800a56c:	005b      	lsls	r3, r3, #1
 800a56e:	fbb1 f3f3 	udiv	r3, r1, r3
 800a572:	3301      	adds	r3, #1
 800a574:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a578:	2b04      	cmp	r3, #4
 800a57a:	bf38      	it	cc
 800a57c:	2304      	movcc	r3, #4
 800a57e:	e04f      	b.n	800a620 <HAL_I2C_Init+0x1c4>
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	689b      	ldr	r3, [r3, #8]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d111      	bne.n	800a5ac <HAL_I2C_Init+0x150>
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	1e58      	subs	r0, r3, #1
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	6859      	ldr	r1, [r3, #4]
 800a590:	460b      	mov	r3, r1
 800a592:	005b      	lsls	r3, r3, #1
 800a594:	440b      	add	r3, r1
 800a596:	fbb0 f3f3 	udiv	r3, r0, r3
 800a59a:	3301      	adds	r3, #1
 800a59c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	bf0c      	ite	eq
 800a5a4:	2301      	moveq	r3, #1
 800a5a6:	2300      	movne	r3, #0
 800a5a8:	b2db      	uxtb	r3, r3
 800a5aa:	e012      	b.n	800a5d2 <HAL_I2C_Init+0x176>
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	1e58      	subs	r0, r3, #1
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	6859      	ldr	r1, [r3, #4]
 800a5b4:	460b      	mov	r3, r1
 800a5b6:	009b      	lsls	r3, r3, #2
 800a5b8:	440b      	add	r3, r1
 800a5ba:	0099      	lsls	r1, r3, #2
 800a5bc:	440b      	add	r3, r1
 800a5be:	fbb0 f3f3 	udiv	r3, r0, r3
 800a5c2:	3301      	adds	r3, #1
 800a5c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	bf0c      	ite	eq
 800a5cc:	2301      	moveq	r3, #1
 800a5ce:	2300      	movne	r3, #0
 800a5d0:	b2db      	uxtb	r3, r3
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d001      	beq.n	800a5da <HAL_I2C_Init+0x17e>
 800a5d6:	2301      	movs	r3, #1
 800a5d8:	e022      	b.n	800a620 <HAL_I2C_Init+0x1c4>
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	689b      	ldr	r3, [r3, #8]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d10e      	bne.n	800a600 <HAL_I2C_Init+0x1a4>
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	1e58      	subs	r0, r3, #1
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	6859      	ldr	r1, [r3, #4]
 800a5ea:	460b      	mov	r3, r1
 800a5ec:	005b      	lsls	r3, r3, #1
 800a5ee:	440b      	add	r3, r1
 800a5f0:	fbb0 f3f3 	udiv	r3, r0, r3
 800a5f4:	3301      	adds	r3, #1
 800a5f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a5fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a5fe:	e00f      	b.n	800a620 <HAL_I2C_Init+0x1c4>
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	1e58      	subs	r0, r3, #1
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	6859      	ldr	r1, [r3, #4]
 800a608:	460b      	mov	r3, r1
 800a60a:	009b      	lsls	r3, r3, #2
 800a60c:	440b      	add	r3, r1
 800a60e:	0099      	lsls	r1, r3, #2
 800a610:	440b      	add	r3, r1
 800a612:	fbb0 f3f3 	udiv	r3, r0, r3
 800a616:	3301      	adds	r3, #1
 800a618:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a61c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a620:	6879      	ldr	r1, [r7, #4]
 800a622:	6809      	ldr	r1, [r1, #0]
 800a624:	4313      	orrs	r3, r2
 800a626:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	69da      	ldr	r2, [r3, #28]
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	6a1b      	ldr	r3, [r3, #32]
 800a63a:	431a      	orrs	r2, r3
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	430a      	orrs	r2, r1
 800a642:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	689b      	ldr	r3, [r3, #8]
 800a64a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800a64e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a652:	687a      	ldr	r2, [r7, #4]
 800a654:	6911      	ldr	r1, [r2, #16]
 800a656:	687a      	ldr	r2, [r7, #4]
 800a658:	68d2      	ldr	r2, [r2, #12]
 800a65a:	4311      	orrs	r1, r2
 800a65c:	687a      	ldr	r2, [r7, #4]
 800a65e:	6812      	ldr	r2, [r2, #0]
 800a660:	430b      	orrs	r3, r1
 800a662:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	68db      	ldr	r3, [r3, #12]
 800a66a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	695a      	ldr	r2, [r3, #20]
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	699b      	ldr	r3, [r3, #24]
 800a676:	431a      	orrs	r2, r3
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	430a      	orrs	r2, r1
 800a67e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	681a      	ldr	r2, [r3, #0]
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	f042 0201 	orr.w	r2, r2, #1
 800a68e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2200      	movs	r2, #0
 800a694:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	2220      	movs	r2, #32
 800a69a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a6ac:	2300      	movs	r3, #0
}
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	3710      	adds	r7, #16
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	bd80      	pop	{r7, pc}
 800a6b6:	bf00      	nop
 800a6b8:	000186a0 	.word	0x000186a0
 800a6bc:	001e847f 	.word	0x001e847f
 800a6c0:	003d08ff 	.word	0x003d08ff
 800a6c4:	431bde83 	.word	0x431bde83
 800a6c8:	10624dd3 	.word	0x10624dd3

0800a6cc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b082      	sub	sp, #8
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d101      	bne.n	800a6de <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800a6da:	2301      	movs	r3, #1
 800a6dc:	e021      	b.n	800a722 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	2224      	movs	r2, #36	; 0x24
 800a6e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	681a      	ldr	r2, [r3, #0]
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	f022 0201 	bic.w	r2, r2, #1
 800a6f4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800a6f6:	6878      	ldr	r0, [r7, #4]
 800a6f8:	f000 f821 	bl	800a73e <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	2200      	movs	r2, #0
 800a700:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2200      	movs	r2, #0
 800a706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2200      	movs	r2, #0
 800a70e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2200      	movs	r2, #0
 800a714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2200      	movs	r2, #0
 800a71c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a720:	2300      	movs	r3, #0
}
 800a722:	4618      	mov	r0, r3
 800a724:	3708      	adds	r7, #8
 800a726:	46bd      	mov	sp, r7
 800a728:	bd80      	pop	{r7, pc}

0800a72a <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800a72a:	b480      	push	{r7}
 800a72c:	b083      	sub	sp, #12
 800a72e:	af00      	add	r7, sp, #0
 800a730:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800a732:	bf00      	nop
 800a734:	370c      	adds	r7, #12
 800a736:	46bd      	mov	sp, r7
 800a738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73c:	4770      	bx	lr

0800a73e <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800a73e:	b480      	push	{r7}
 800a740:	b083      	sub	sp, #12
 800a742:	af00      	add	r7, sp, #0
 800a744:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800a746:	bf00      	nop
 800a748:	370c      	adds	r7, #12
 800a74a:	46bd      	mov	sp, r7
 800a74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a750:	4770      	bx	lr
	...

0800a754 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b088      	sub	sp, #32
 800a758:	af02      	add	r7, sp, #8
 800a75a:	60f8      	str	r0, [r7, #12]
 800a75c:	4608      	mov	r0, r1
 800a75e:	4611      	mov	r1, r2
 800a760:	461a      	mov	r2, r3
 800a762:	4603      	mov	r3, r0
 800a764:	817b      	strh	r3, [r7, #10]
 800a766:	460b      	mov	r3, r1
 800a768:	813b      	strh	r3, [r7, #8]
 800a76a:	4613      	mov	r3, r2
 800a76c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a76e:	f7fe fb65 	bl	8008e3c <HAL_GetTick>
 800a772:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a77a:	b2db      	uxtb	r3, r3
 800a77c:	2b20      	cmp	r3, #32
 800a77e:	f040 80d9 	bne.w	800a934 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a782:	697b      	ldr	r3, [r7, #20]
 800a784:	9300      	str	r3, [sp, #0]
 800a786:	2319      	movs	r3, #25
 800a788:	2201      	movs	r2, #1
 800a78a:	496d      	ldr	r1, [pc, #436]	; (800a940 <HAL_I2C_Mem_Write+0x1ec>)
 800a78c:	68f8      	ldr	r0, [r7, #12]
 800a78e:	f000 fc95 	bl	800b0bc <I2C_WaitOnFlagUntilTimeout>
 800a792:	4603      	mov	r3, r0
 800a794:	2b00      	cmp	r3, #0
 800a796:	d001      	beq.n	800a79c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800a798:	2302      	movs	r3, #2
 800a79a:	e0cc      	b.n	800a936 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a7a2:	2b01      	cmp	r3, #1
 800a7a4:	d101      	bne.n	800a7aa <HAL_I2C_Mem_Write+0x56>
 800a7a6:	2302      	movs	r3, #2
 800a7a8:	e0c5      	b.n	800a936 <HAL_I2C_Mem_Write+0x1e2>
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	2201      	movs	r2, #1
 800a7ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	f003 0301 	and.w	r3, r3, #1
 800a7bc:	2b01      	cmp	r3, #1
 800a7be:	d007      	beq.n	800a7d0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	681a      	ldr	r2, [r3, #0]
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	f042 0201 	orr.w	r2, r2, #1
 800a7ce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	681a      	ldr	r2, [r3, #0]
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a7de:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	2221      	movs	r2, #33	; 0x21
 800a7e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	2240      	movs	r2, #64	; 0x40
 800a7ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	6a3a      	ldr	r2, [r7, #32]
 800a7fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a800:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a806:	b29a      	uxth	r2, r3
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	4a4d      	ldr	r2, [pc, #308]	; (800a944 <HAL_I2C_Mem_Write+0x1f0>)
 800a810:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a812:	88f8      	ldrh	r0, [r7, #6]
 800a814:	893a      	ldrh	r2, [r7, #8]
 800a816:	8979      	ldrh	r1, [r7, #10]
 800a818:	697b      	ldr	r3, [r7, #20]
 800a81a:	9301      	str	r3, [sp, #4]
 800a81c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a81e:	9300      	str	r3, [sp, #0]
 800a820:	4603      	mov	r3, r0
 800a822:	68f8      	ldr	r0, [r7, #12]
 800a824:	f000 fad0 	bl	800adc8 <I2C_RequestMemoryWrite>
 800a828:	4603      	mov	r3, r0
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d052      	beq.n	800a8d4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800a82e:	2301      	movs	r3, #1
 800a830:	e081      	b.n	800a936 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a832:	697a      	ldr	r2, [r7, #20]
 800a834:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a836:	68f8      	ldr	r0, [r7, #12]
 800a838:	f000 fd16 	bl	800b268 <I2C_WaitOnTXEFlagUntilTimeout>
 800a83c:	4603      	mov	r3, r0
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d00d      	beq.n	800a85e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a846:	2b04      	cmp	r3, #4
 800a848:	d107      	bne.n	800a85a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	681a      	ldr	r2, [r3, #0]
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a858:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a85a:	2301      	movs	r3, #1
 800a85c:	e06b      	b.n	800a936 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a862:	781a      	ldrb	r2, [r3, #0]
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a86e:	1c5a      	adds	r2, r3, #1
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a878:	3b01      	subs	r3, #1
 800a87a:	b29a      	uxth	r2, r3
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a884:	b29b      	uxth	r3, r3
 800a886:	3b01      	subs	r3, #1
 800a888:	b29a      	uxth	r2, r3
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	695b      	ldr	r3, [r3, #20]
 800a894:	f003 0304 	and.w	r3, r3, #4
 800a898:	2b04      	cmp	r3, #4
 800a89a:	d11b      	bne.n	800a8d4 <HAL_I2C_Mem_Write+0x180>
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d017      	beq.n	800a8d4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8a8:	781a      	ldrb	r2, [r3, #0]
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8b4:	1c5a      	adds	r2, r3, #1
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a8be:	3b01      	subs	r3, #1
 800a8c0:	b29a      	uxth	r2, r3
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a8ca:	b29b      	uxth	r3, r3
 800a8cc:	3b01      	subs	r3, #1
 800a8ce:	b29a      	uxth	r2, r3
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d1aa      	bne.n	800a832 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a8dc:	697a      	ldr	r2, [r7, #20]
 800a8de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a8e0:	68f8      	ldr	r0, [r7, #12]
 800a8e2:	f000 fd02 	bl	800b2ea <I2C_WaitOnBTFFlagUntilTimeout>
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d00d      	beq.n	800a908 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8f0:	2b04      	cmp	r3, #4
 800a8f2:	d107      	bne.n	800a904 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	681a      	ldr	r2, [r3, #0]
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a902:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a904:	2301      	movs	r3, #1
 800a906:	e016      	b.n	800a936 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	681a      	ldr	r2, [r3, #0]
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a916:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	2220      	movs	r2, #32
 800a91c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	2200      	movs	r2, #0
 800a924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	2200      	movs	r2, #0
 800a92c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a930:	2300      	movs	r3, #0
 800a932:	e000      	b.n	800a936 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800a934:	2302      	movs	r3, #2
  }
}
 800a936:	4618      	mov	r0, r3
 800a938:	3718      	adds	r7, #24
 800a93a:	46bd      	mov	sp, r7
 800a93c:	bd80      	pop	{r7, pc}
 800a93e:	bf00      	nop
 800a940:	00100002 	.word	0x00100002
 800a944:	ffff0000 	.word	0xffff0000

0800a948 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b08c      	sub	sp, #48	; 0x30
 800a94c:	af02      	add	r7, sp, #8
 800a94e:	60f8      	str	r0, [r7, #12]
 800a950:	4608      	mov	r0, r1
 800a952:	4611      	mov	r1, r2
 800a954:	461a      	mov	r2, r3
 800a956:	4603      	mov	r3, r0
 800a958:	817b      	strh	r3, [r7, #10]
 800a95a:	460b      	mov	r3, r1
 800a95c:	813b      	strh	r3, [r7, #8]
 800a95e:	4613      	mov	r3, r2
 800a960:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a962:	f7fe fa6b 	bl	8008e3c <HAL_GetTick>
 800a966:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a96e:	b2db      	uxtb	r3, r3
 800a970:	2b20      	cmp	r3, #32
 800a972:	f040 8208 	bne.w	800ad86 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a978:	9300      	str	r3, [sp, #0]
 800a97a:	2319      	movs	r3, #25
 800a97c:	2201      	movs	r2, #1
 800a97e:	497b      	ldr	r1, [pc, #492]	; (800ab6c <HAL_I2C_Mem_Read+0x224>)
 800a980:	68f8      	ldr	r0, [r7, #12]
 800a982:	f000 fb9b 	bl	800b0bc <I2C_WaitOnFlagUntilTimeout>
 800a986:	4603      	mov	r3, r0
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d001      	beq.n	800a990 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800a98c:	2302      	movs	r3, #2
 800a98e:	e1fb      	b.n	800ad88 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a996:	2b01      	cmp	r3, #1
 800a998:	d101      	bne.n	800a99e <HAL_I2C_Mem_Read+0x56>
 800a99a:	2302      	movs	r3, #2
 800a99c:	e1f4      	b.n	800ad88 <HAL_I2C_Mem_Read+0x440>
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	2201      	movs	r2, #1
 800a9a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	f003 0301 	and.w	r3, r3, #1
 800a9b0:	2b01      	cmp	r3, #1
 800a9b2:	d007      	beq.n	800a9c4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	681a      	ldr	r2, [r3, #0]
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	f042 0201 	orr.w	r2, r2, #1
 800a9c2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	681a      	ldr	r2, [r3, #0]
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a9d2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	2222      	movs	r2, #34	; 0x22
 800a9d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	2240      	movs	r2, #64	; 0x40
 800a9e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a9ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800a9f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a9fa:	b29a      	uxth	r2, r3
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	4a5b      	ldr	r2, [pc, #364]	; (800ab70 <HAL_I2C_Mem_Read+0x228>)
 800aa04:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800aa06:	88f8      	ldrh	r0, [r7, #6]
 800aa08:	893a      	ldrh	r2, [r7, #8]
 800aa0a:	8979      	ldrh	r1, [r7, #10]
 800aa0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa0e:	9301      	str	r3, [sp, #4]
 800aa10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa12:	9300      	str	r3, [sp, #0]
 800aa14:	4603      	mov	r3, r0
 800aa16:	68f8      	ldr	r0, [r7, #12]
 800aa18:	f000 fa6a 	bl	800aef0 <I2C_RequestMemoryRead>
 800aa1c:	4603      	mov	r3, r0
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d001      	beq.n	800aa26 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800aa22:	2301      	movs	r3, #1
 800aa24:	e1b0      	b.n	800ad88 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d113      	bne.n	800aa56 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800aa2e:	2300      	movs	r3, #0
 800aa30:	623b      	str	r3, [r7, #32]
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	695b      	ldr	r3, [r3, #20]
 800aa38:	623b      	str	r3, [r7, #32]
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	699b      	ldr	r3, [r3, #24]
 800aa40:	623b      	str	r3, [r7, #32]
 800aa42:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	681a      	ldr	r2, [r3, #0]
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aa52:	601a      	str	r2, [r3, #0]
 800aa54:	e184      	b.n	800ad60 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa5a:	2b01      	cmp	r3, #1
 800aa5c:	d11b      	bne.n	800aa96 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	681a      	ldr	r2, [r3, #0]
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aa6c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800aa6e:	2300      	movs	r3, #0
 800aa70:	61fb      	str	r3, [r7, #28]
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	695b      	ldr	r3, [r3, #20]
 800aa78:	61fb      	str	r3, [r7, #28]
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	699b      	ldr	r3, [r3, #24]
 800aa80:	61fb      	str	r3, [r7, #28]
 800aa82:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	681a      	ldr	r2, [r3, #0]
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aa92:	601a      	str	r2, [r3, #0]
 800aa94:	e164      	b.n	800ad60 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa9a:	2b02      	cmp	r3, #2
 800aa9c:	d11b      	bne.n	800aad6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	681a      	ldr	r2, [r3, #0]
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aaac:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	681a      	ldr	r2, [r3, #0]
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aabc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800aabe:	2300      	movs	r3, #0
 800aac0:	61bb      	str	r3, [r7, #24]
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	695b      	ldr	r3, [r3, #20]
 800aac8:	61bb      	str	r3, [r7, #24]
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	699b      	ldr	r3, [r3, #24]
 800aad0:	61bb      	str	r3, [r7, #24]
 800aad2:	69bb      	ldr	r3, [r7, #24]
 800aad4:	e144      	b.n	800ad60 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800aad6:	2300      	movs	r3, #0
 800aad8:	617b      	str	r3, [r7, #20]
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	695b      	ldr	r3, [r3, #20]
 800aae0:	617b      	str	r3, [r7, #20]
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	699b      	ldr	r3, [r3, #24]
 800aae8:	617b      	str	r3, [r7, #20]
 800aaea:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800aaec:	e138      	b.n	800ad60 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aaf2:	2b03      	cmp	r3, #3
 800aaf4:	f200 80f1 	bhi.w	800acda <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aafc:	2b01      	cmp	r3, #1
 800aafe:	d123      	bne.n	800ab48 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ab00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab02:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ab04:	68f8      	ldr	r0, [r7, #12]
 800ab06:	f000 fc31 	bl	800b36c <I2C_WaitOnRXNEFlagUntilTimeout>
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d001      	beq.n	800ab14 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800ab10:	2301      	movs	r3, #1
 800ab12:	e139      	b.n	800ad88 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	691a      	ldr	r2, [r3, #16]
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab1e:	b2d2      	uxtb	r2, r2
 800ab20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab26:	1c5a      	adds	r2, r3, #1
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab30:	3b01      	subs	r3, #1
 800ab32:	b29a      	uxth	r2, r3
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab3c:	b29b      	uxth	r3, r3
 800ab3e:	3b01      	subs	r3, #1
 800ab40:	b29a      	uxth	r2, r3
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ab46:	e10b      	b.n	800ad60 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab4c:	2b02      	cmp	r3, #2
 800ab4e:	d14e      	bne.n	800abee <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800ab50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab52:	9300      	str	r3, [sp, #0]
 800ab54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab56:	2200      	movs	r2, #0
 800ab58:	4906      	ldr	r1, [pc, #24]	; (800ab74 <HAL_I2C_Mem_Read+0x22c>)
 800ab5a:	68f8      	ldr	r0, [r7, #12]
 800ab5c:	f000 faae 	bl	800b0bc <I2C_WaitOnFlagUntilTimeout>
 800ab60:	4603      	mov	r3, r0
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d008      	beq.n	800ab78 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800ab66:	2301      	movs	r3, #1
 800ab68:	e10e      	b.n	800ad88 <HAL_I2C_Mem_Read+0x440>
 800ab6a:	bf00      	nop
 800ab6c:	00100002 	.word	0x00100002
 800ab70:	ffff0000 	.word	0xffff0000
 800ab74:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	681a      	ldr	r2, [r3, #0]
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ab86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	691a      	ldr	r2, [r3, #16]
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab92:	b2d2      	uxtb	r2, r2
 800ab94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab9a:	1c5a      	adds	r2, r3, #1
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aba4:	3b01      	subs	r3, #1
 800aba6:	b29a      	uxth	r2, r3
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800abb0:	b29b      	uxth	r3, r3
 800abb2:	3b01      	subs	r3, #1
 800abb4:	b29a      	uxth	r2, r3
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	691a      	ldr	r2, [r3, #16]
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abc4:	b2d2      	uxtb	r2, r2
 800abc6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abcc:	1c5a      	adds	r2, r3, #1
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800abd6:	3b01      	subs	r3, #1
 800abd8:	b29a      	uxth	r2, r3
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800abe2:	b29b      	uxth	r3, r3
 800abe4:	3b01      	subs	r3, #1
 800abe6:	b29a      	uxth	r2, r3
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	855a      	strh	r2, [r3, #42]	; 0x2a
 800abec:	e0b8      	b.n	800ad60 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800abee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abf0:	9300      	str	r3, [sp, #0]
 800abf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abf4:	2200      	movs	r2, #0
 800abf6:	4966      	ldr	r1, [pc, #408]	; (800ad90 <HAL_I2C_Mem_Read+0x448>)
 800abf8:	68f8      	ldr	r0, [r7, #12]
 800abfa:	f000 fa5f 	bl	800b0bc <I2C_WaitOnFlagUntilTimeout>
 800abfe:	4603      	mov	r3, r0
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d001      	beq.n	800ac08 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800ac04:	2301      	movs	r3, #1
 800ac06:	e0bf      	b.n	800ad88 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	681a      	ldr	r2, [r3, #0]
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ac16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	691a      	ldr	r2, [r3, #16]
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac22:	b2d2      	uxtb	r2, r2
 800ac24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac2a:	1c5a      	adds	r2, r3, #1
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac34:	3b01      	subs	r3, #1
 800ac36:	b29a      	uxth	r2, r3
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac40:	b29b      	uxth	r3, r3
 800ac42:	3b01      	subs	r3, #1
 800ac44:	b29a      	uxth	r2, r3
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800ac4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac4c:	9300      	str	r3, [sp, #0]
 800ac4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac50:	2200      	movs	r2, #0
 800ac52:	494f      	ldr	r1, [pc, #316]	; (800ad90 <HAL_I2C_Mem_Read+0x448>)
 800ac54:	68f8      	ldr	r0, [r7, #12]
 800ac56:	f000 fa31 	bl	800b0bc <I2C_WaitOnFlagUntilTimeout>
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d001      	beq.n	800ac64 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800ac60:	2301      	movs	r3, #1
 800ac62:	e091      	b.n	800ad88 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	681a      	ldr	r2, [r3, #0]
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ac72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	691a      	ldr	r2, [r3, #16]
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac7e:	b2d2      	uxtb	r2, r2
 800ac80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac86:	1c5a      	adds	r2, r3, #1
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac90:	3b01      	subs	r3, #1
 800ac92:	b29a      	uxth	r2, r3
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac9c:	b29b      	uxth	r3, r3
 800ac9e:	3b01      	subs	r3, #1
 800aca0:	b29a      	uxth	r2, r3
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	691a      	ldr	r2, [r3, #16]
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acb0:	b2d2      	uxtb	r2, r2
 800acb2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acb8:	1c5a      	adds	r2, r3, #1
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800acc2:	3b01      	subs	r3, #1
 800acc4:	b29a      	uxth	r2, r3
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800acce:	b29b      	uxth	r3, r3
 800acd0:	3b01      	subs	r3, #1
 800acd2:	b29a      	uxth	r2, r3
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	855a      	strh	r2, [r3, #42]	; 0x2a
 800acd8:	e042      	b.n	800ad60 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800acda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acdc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800acde:	68f8      	ldr	r0, [r7, #12]
 800ace0:	f000 fb44 	bl	800b36c <I2C_WaitOnRXNEFlagUntilTimeout>
 800ace4:	4603      	mov	r3, r0
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d001      	beq.n	800acee <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800acea:	2301      	movs	r3, #1
 800acec:	e04c      	b.n	800ad88 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	691a      	ldr	r2, [r3, #16]
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acf8:	b2d2      	uxtb	r2, r2
 800acfa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad00:	1c5a      	adds	r2, r3, #1
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ad0a:	3b01      	subs	r3, #1
 800ad0c:	b29a      	uxth	r2, r3
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ad16:	b29b      	uxth	r3, r3
 800ad18:	3b01      	subs	r3, #1
 800ad1a:	b29a      	uxth	r2, r3
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	695b      	ldr	r3, [r3, #20]
 800ad26:	f003 0304 	and.w	r3, r3, #4
 800ad2a:	2b04      	cmp	r3, #4
 800ad2c:	d118      	bne.n	800ad60 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	691a      	ldr	r2, [r3, #16]
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad38:	b2d2      	uxtb	r2, r2
 800ad3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad40:	1c5a      	adds	r2, r3, #1
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ad4a:	3b01      	subs	r3, #1
 800ad4c:	b29a      	uxth	r2, r3
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ad56:	b29b      	uxth	r3, r3
 800ad58:	3b01      	subs	r3, #1
 800ad5a:	b29a      	uxth	r2, r3
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	f47f aec2 	bne.w	800aaee <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	2220      	movs	r2, #32
 800ad6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	2200      	movs	r2, #0
 800ad76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800ad82:	2300      	movs	r3, #0
 800ad84:	e000      	b.n	800ad88 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800ad86:	2302      	movs	r3, #2
  }
}
 800ad88:	4618      	mov	r0, r3
 800ad8a:	3728      	adds	r7, #40	; 0x28
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	bd80      	pop	{r7, pc}
 800ad90:	00010004 	.word	0x00010004

0800ad94 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800ad94:	b480      	push	{r7}
 800ad96:	b083      	sub	sp, #12
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ada2:	b2db      	uxtb	r3, r3
}
 800ada4:	4618      	mov	r0, r3
 800ada6:	370c      	adds	r7, #12
 800ada8:	46bd      	mov	sp, r7
 800adaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adae:	4770      	bx	lr

0800adb0 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800adb0:	b480      	push	{r7}
 800adb2:	b083      	sub	sp, #12
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800adbc:	4618      	mov	r0, r3
 800adbe:	370c      	adds	r7, #12
 800adc0:	46bd      	mov	sp, r7
 800adc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc6:	4770      	bx	lr

0800adc8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b088      	sub	sp, #32
 800adcc:	af02      	add	r7, sp, #8
 800adce:	60f8      	str	r0, [r7, #12]
 800add0:	4608      	mov	r0, r1
 800add2:	4611      	mov	r1, r2
 800add4:	461a      	mov	r2, r3
 800add6:	4603      	mov	r3, r0
 800add8:	817b      	strh	r3, [r7, #10]
 800adda:	460b      	mov	r3, r1
 800addc:	813b      	strh	r3, [r7, #8]
 800adde:	4613      	mov	r3, r2
 800ade0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	681a      	ldr	r2, [r3, #0]
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800adf0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800adf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adf4:	9300      	str	r3, [sp, #0]
 800adf6:	6a3b      	ldr	r3, [r7, #32]
 800adf8:	2200      	movs	r2, #0
 800adfa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800adfe:	68f8      	ldr	r0, [r7, #12]
 800ae00:	f000 f95c 	bl	800b0bc <I2C_WaitOnFlagUntilTimeout>
 800ae04:	4603      	mov	r3, r0
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d00c      	beq.n	800ae24 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d003      	beq.n	800ae20 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ae1e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800ae20:	2303      	movs	r3, #3
 800ae22:	e05f      	b.n	800aee4 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800ae24:	897b      	ldrh	r3, [r7, #10]
 800ae26:	b2db      	uxtb	r3, r3
 800ae28:	461a      	mov	r2, r3
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800ae32:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ae34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae36:	6a3a      	ldr	r2, [r7, #32]
 800ae38:	492c      	ldr	r1, [pc, #176]	; (800aeec <I2C_RequestMemoryWrite+0x124>)
 800ae3a:	68f8      	ldr	r0, [r7, #12]
 800ae3c:	f000 f995 	bl	800b16a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ae40:	4603      	mov	r3, r0
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d001      	beq.n	800ae4a <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 800ae46:	2301      	movs	r3, #1
 800ae48:	e04c      	b.n	800aee4 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	617b      	str	r3, [r7, #20]
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	695b      	ldr	r3, [r3, #20]
 800ae54:	617b      	str	r3, [r7, #20]
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	699b      	ldr	r3, [r3, #24]
 800ae5c:	617b      	str	r3, [r7, #20]
 800ae5e:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ae60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae62:	6a39      	ldr	r1, [r7, #32]
 800ae64:	68f8      	ldr	r0, [r7, #12]
 800ae66:	f000 f9ff 	bl	800b268 <I2C_WaitOnTXEFlagUntilTimeout>
 800ae6a:	4603      	mov	r3, r0
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d00d      	beq.n	800ae8c <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae74:	2b04      	cmp	r3, #4
 800ae76:	d107      	bne.n	800ae88 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	681a      	ldr	r2, [r3, #0]
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ae86:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800ae88:	2301      	movs	r3, #1
 800ae8a:	e02b      	b.n	800aee4 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ae8c:	88fb      	ldrh	r3, [r7, #6]
 800ae8e:	2b01      	cmp	r3, #1
 800ae90:	d105      	bne.n	800ae9e <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800ae92:	893b      	ldrh	r3, [r7, #8]
 800ae94:	b2da      	uxtb	r2, r3
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	611a      	str	r2, [r3, #16]
 800ae9c:	e021      	b.n	800aee2 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800ae9e:	893b      	ldrh	r3, [r7, #8]
 800aea0:	0a1b      	lsrs	r3, r3, #8
 800aea2:	b29b      	uxth	r3, r3
 800aea4:	b2da      	uxtb	r2, r3
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800aeac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aeae:	6a39      	ldr	r1, [r7, #32]
 800aeb0:	68f8      	ldr	r0, [r7, #12]
 800aeb2:	f000 f9d9 	bl	800b268 <I2C_WaitOnTXEFlagUntilTimeout>
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d00d      	beq.n	800aed8 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aec0:	2b04      	cmp	r3, #4
 800aec2:	d107      	bne.n	800aed4 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	681a      	ldr	r2, [r3, #0]
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aed2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800aed4:	2301      	movs	r3, #1
 800aed6:	e005      	b.n	800aee4 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800aed8:	893b      	ldrh	r3, [r7, #8]
 800aeda:	b2da      	uxtb	r2, r3
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800aee2:	2300      	movs	r3, #0
}
 800aee4:	4618      	mov	r0, r3
 800aee6:	3718      	adds	r7, #24
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bd80      	pop	{r7, pc}
 800aeec:	00010002 	.word	0x00010002

0800aef0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b088      	sub	sp, #32
 800aef4:	af02      	add	r7, sp, #8
 800aef6:	60f8      	str	r0, [r7, #12]
 800aef8:	4608      	mov	r0, r1
 800aefa:	4611      	mov	r1, r2
 800aefc:	461a      	mov	r2, r3
 800aefe:	4603      	mov	r3, r0
 800af00:	817b      	strh	r3, [r7, #10]
 800af02:	460b      	mov	r3, r1
 800af04:	813b      	strh	r3, [r7, #8]
 800af06:	4613      	mov	r3, r2
 800af08:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	681a      	ldr	r2, [r3, #0]
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800af18:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	681a      	ldr	r2, [r3, #0]
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800af28:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800af2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af2c:	9300      	str	r3, [sp, #0]
 800af2e:	6a3b      	ldr	r3, [r7, #32]
 800af30:	2200      	movs	r2, #0
 800af32:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800af36:	68f8      	ldr	r0, [r7, #12]
 800af38:	f000 f8c0 	bl	800b0bc <I2C_WaitOnFlagUntilTimeout>
 800af3c:	4603      	mov	r3, r0
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d00c      	beq.n	800af5c <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d003      	beq.n	800af58 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	f44f 7200 	mov.w	r2, #512	; 0x200
 800af56:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800af58:	2303      	movs	r3, #3
 800af5a:	e0a9      	b.n	800b0b0 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800af5c:	897b      	ldrh	r3, [r7, #10]
 800af5e:	b2db      	uxtb	r3, r3
 800af60:	461a      	mov	r2, r3
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800af6a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800af6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af6e:	6a3a      	ldr	r2, [r7, #32]
 800af70:	4951      	ldr	r1, [pc, #324]	; (800b0b8 <I2C_RequestMemoryRead+0x1c8>)
 800af72:	68f8      	ldr	r0, [r7, #12]
 800af74:	f000 f8f9 	bl	800b16a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800af78:	4603      	mov	r3, r0
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d001      	beq.n	800af82 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 800af7e:	2301      	movs	r3, #1
 800af80:	e096      	b.n	800b0b0 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800af82:	2300      	movs	r3, #0
 800af84:	617b      	str	r3, [r7, #20]
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	695b      	ldr	r3, [r3, #20]
 800af8c:	617b      	str	r3, [r7, #20]
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	699b      	ldr	r3, [r3, #24]
 800af94:	617b      	str	r3, [r7, #20]
 800af96:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800af98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af9a:	6a39      	ldr	r1, [r7, #32]
 800af9c:	68f8      	ldr	r0, [r7, #12]
 800af9e:	f000 f963 	bl	800b268 <I2C_WaitOnTXEFlagUntilTimeout>
 800afa2:	4603      	mov	r3, r0
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d00d      	beq.n	800afc4 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afac:	2b04      	cmp	r3, #4
 800afae:	d107      	bne.n	800afc0 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	681a      	ldr	r2, [r3, #0]
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800afbe:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800afc0:	2301      	movs	r3, #1
 800afc2:	e075      	b.n	800b0b0 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800afc4:	88fb      	ldrh	r3, [r7, #6]
 800afc6:	2b01      	cmp	r3, #1
 800afc8:	d105      	bne.n	800afd6 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800afca:	893b      	ldrh	r3, [r7, #8]
 800afcc:	b2da      	uxtb	r2, r3
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	611a      	str	r2, [r3, #16]
 800afd4:	e021      	b.n	800b01a <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800afd6:	893b      	ldrh	r3, [r7, #8]
 800afd8:	0a1b      	lsrs	r3, r3, #8
 800afda:	b29b      	uxth	r3, r3
 800afdc:	b2da      	uxtb	r2, r3
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800afe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afe6:	6a39      	ldr	r1, [r7, #32]
 800afe8:	68f8      	ldr	r0, [r7, #12]
 800afea:	f000 f93d 	bl	800b268 <I2C_WaitOnTXEFlagUntilTimeout>
 800afee:	4603      	mov	r3, r0
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d00d      	beq.n	800b010 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aff8:	2b04      	cmp	r3, #4
 800affa:	d107      	bne.n	800b00c <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	681a      	ldr	r2, [r3, #0]
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b00a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b00c:	2301      	movs	r3, #1
 800b00e:	e04f      	b.n	800b0b0 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b010:	893b      	ldrh	r3, [r7, #8]
 800b012:	b2da      	uxtb	r2, r3
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b01a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b01c:	6a39      	ldr	r1, [r7, #32]
 800b01e:	68f8      	ldr	r0, [r7, #12]
 800b020:	f000 f922 	bl	800b268 <I2C_WaitOnTXEFlagUntilTimeout>
 800b024:	4603      	mov	r3, r0
 800b026:	2b00      	cmp	r3, #0
 800b028:	d00d      	beq.n	800b046 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b02e:	2b04      	cmp	r3, #4
 800b030:	d107      	bne.n	800b042 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	681a      	ldr	r2, [r3, #0]
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b040:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b042:	2301      	movs	r3, #1
 800b044:	e034      	b.n	800b0b0 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	681a      	ldr	r2, [r3, #0]
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b054:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b058:	9300      	str	r3, [sp, #0]
 800b05a:	6a3b      	ldr	r3, [r7, #32]
 800b05c:	2200      	movs	r2, #0
 800b05e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b062:	68f8      	ldr	r0, [r7, #12]
 800b064:	f000 f82a 	bl	800b0bc <I2C_WaitOnFlagUntilTimeout>
 800b068:	4603      	mov	r3, r0
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d00c      	beq.n	800b088 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d003      	beq.n	800b084 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b082:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b084:	2303      	movs	r3, #3
 800b086:	e013      	b.n	800b0b0 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800b088:	897b      	ldrh	r3, [r7, #10]
 800b08a:	b2db      	uxtb	r3, r3
 800b08c:	f043 0301 	orr.w	r3, r3, #1
 800b090:	b2da      	uxtb	r2, r3
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b09a:	6a3a      	ldr	r2, [r7, #32]
 800b09c:	4906      	ldr	r1, [pc, #24]	; (800b0b8 <I2C_RequestMemoryRead+0x1c8>)
 800b09e:	68f8      	ldr	r0, [r7, #12]
 800b0a0:	f000 f863 	bl	800b16a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b0a4:	4603      	mov	r3, r0
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d001      	beq.n	800b0ae <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 800b0aa:	2301      	movs	r3, #1
 800b0ac:	e000      	b.n	800b0b0 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 800b0ae:	2300      	movs	r3, #0
}
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	3718      	adds	r7, #24
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	bd80      	pop	{r7, pc}
 800b0b8:	00010002 	.word	0x00010002

0800b0bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b084      	sub	sp, #16
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	60f8      	str	r0, [r7, #12]
 800b0c4:	60b9      	str	r1, [r7, #8]
 800b0c6:	603b      	str	r3, [r7, #0]
 800b0c8:	4613      	mov	r3, r2
 800b0ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b0cc:	e025      	b.n	800b11a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b0ce:	683b      	ldr	r3, [r7, #0]
 800b0d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0d4:	d021      	beq.n	800b11a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b0d6:	f7fd feb1 	bl	8008e3c <HAL_GetTick>
 800b0da:	4602      	mov	r2, r0
 800b0dc:	69bb      	ldr	r3, [r7, #24]
 800b0de:	1ad3      	subs	r3, r2, r3
 800b0e0:	683a      	ldr	r2, [r7, #0]
 800b0e2:	429a      	cmp	r2, r3
 800b0e4:	d302      	bcc.n	800b0ec <I2C_WaitOnFlagUntilTimeout+0x30>
 800b0e6:	683b      	ldr	r3, [r7, #0]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d116      	bne.n	800b11a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	2220      	movs	r2, #32
 800b0f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	2200      	movs	r2, #0
 800b0fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b106:	f043 0220 	orr.w	r2, r3, #32
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	2200      	movs	r2, #0
 800b112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b116:	2301      	movs	r3, #1
 800b118:	e023      	b.n	800b162 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b11a:	68bb      	ldr	r3, [r7, #8]
 800b11c:	0c1b      	lsrs	r3, r3, #16
 800b11e:	b2db      	uxtb	r3, r3
 800b120:	2b01      	cmp	r3, #1
 800b122:	d10d      	bne.n	800b140 <I2C_WaitOnFlagUntilTimeout+0x84>
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	695b      	ldr	r3, [r3, #20]
 800b12a:	43da      	mvns	r2, r3
 800b12c:	68bb      	ldr	r3, [r7, #8]
 800b12e:	4013      	ands	r3, r2
 800b130:	b29b      	uxth	r3, r3
 800b132:	2b00      	cmp	r3, #0
 800b134:	bf0c      	ite	eq
 800b136:	2301      	moveq	r3, #1
 800b138:	2300      	movne	r3, #0
 800b13a:	b2db      	uxtb	r3, r3
 800b13c:	461a      	mov	r2, r3
 800b13e:	e00c      	b.n	800b15a <I2C_WaitOnFlagUntilTimeout+0x9e>
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	699b      	ldr	r3, [r3, #24]
 800b146:	43da      	mvns	r2, r3
 800b148:	68bb      	ldr	r3, [r7, #8]
 800b14a:	4013      	ands	r3, r2
 800b14c:	b29b      	uxth	r3, r3
 800b14e:	2b00      	cmp	r3, #0
 800b150:	bf0c      	ite	eq
 800b152:	2301      	moveq	r3, #1
 800b154:	2300      	movne	r3, #0
 800b156:	b2db      	uxtb	r3, r3
 800b158:	461a      	mov	r2, r3
 800b15a:	79fb      	ldrb	r3, [r7, #7]
 800b15c:	429a      	cmp	r2, r3
 800b15e:	d0b6      	beq.n	800b0ce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b160:	2300      	movs	r3, #0
}
 800b162:	4618      	mov	r0, r3
 800b164:	3710      	adds	r7, #16
 800b166:	46bd      	mov	sp, r7
 800b168:	bd80      	pop	{r7, pc}

0800b16a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800b16a:	b580      	push	{r7, lr}
 800b16c:	b084      	sub	sp, #16
 800b16e:	af00      	add	r7, sp, #0
 800b170:	60f8      	str	r0, [r7, #12]
 800b172:	60b9      	str	r1, [r7, #8]
 800b174:	607a      	str	r2, [r7, #4]
 800b176:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b178:	e051      	b.n	800b21e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	695b      	ldr	r3, [r3, #20]
 800b180:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b184:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b188:	d123      	bne.n	800b1d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	681a      	ldr	r2, [r3, #0]
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b198:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b1a2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	2220      	movs	r2, #32
 800b1ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1be:	f043 0204 	orr.w	r2, r3, #4
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b1ce:	2301      	movs	r3, #1
 800b1d0:	e046      	b.n	800b260 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1d8:	d021      	beq.n	800b21e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b1da:	f7fd fe2f 	bl	8008e3c <HAL_GetTick>
 800b1de:	4602      	mov	r2, r0
 800b1e0:	683b      	ldr	r3, [r7, #0]
 800b1e2:	1ad3      	subs	r3, r2, r3
 800b1e4:	687a      	ldr	r2, [r7, #4]
 800b1e6:	429a      	cmp	r2, r3
 800b1e8:	d302      	bcc.n	800b1f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d116      	bne.n	800b21e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	2220      	movs	r2, #32
 800b1fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	2200      	movs	r2, #0
 800b202:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b20a:	f043 0220 	orr.w	r2, r3, #32
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	2200      	movs	r2, #0
 800b216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b21a:	2301      	movs	r3, #1
 800b21c:	e020      	b.n	800b260 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b21e:	68bb      	ldr	r3, [r7, #8]
 800b220:	0c1b      	lsrs	r3, r3, #16
 800b222:	b2db      	uxtb	r3, r3
 800b224:	2b01      	cmp	r3, #1
 800b226:	d10c      	bne.n	800b242 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	695b      	ldr	r3, [r3, #20]
 800b22e:	43da      	mvns	r2, r3
 800b230:	68bb      	ldr	r3, [r7, #8]
 800b232:	4013      	ands	r3, r2
 800b234:	b29b      	uxth	r3, r3
 800b236:	2b00      	cmp	r3, #0
 800b238:	bf14      	ite	ne
 800b23a:	2301      	movne	r3, #1
 800b23c:	2300      	moveq	r3, #0
 800b23e:	b2db      	uxtb	r3, r3
 800b240:	e00b      	b.n	800b25a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	699b      	ldr	r3, [r3, #24]
 800b248:	43da      	mvns	r2, r3
 800b24a:	68bb      	ldr	r3, [r7, #8]
 800b24c:	4013      	ands	r3, r2
 800b24e:	b29b      	uxth	r3, r3
 800b250:	2b00      	cmp	r3, #0
 800b252:	bf14      	ite	ne
 800b254:	2301      	movne	r3, #1
 800b256:	2300      	moveq	r3, #0
 800b258:	b2db      	uxtb	r3, r3
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d18d      	bne.n	800b17a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800b25e:	2300      	movs	r3, #0
}
 800b260:	4618      	mov	r0, r3
 800b262:	3710      	adds	r7, #16
 800b264:	46bd      	mov	sp, r7
 800b266:	bd80      	pop	{r7, pc}

0800b268 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b084      	sub	sp, #16
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	60f8      	str	r0, [r7, #12]
 800b270:	60b9      	str	r1, [r7, #8]
 800b272:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b274:	e02d      	b.n	800b2d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b276:	68f8      	ldr	r0, [r7, #12]
 800b278:	f000 f8ce 	bl	800b418 <I2C_IsAcknowledgeFailed>
 800b27c:	4603      	mov	r3, r0
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d001      	beq.n	800b286 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b282:	2301      	movs	r3, #1
 800b284:	e02d      	b.n	800b2e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b286:	68bb      	ldr	r3, [r7, #8]
 800b288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b28c:	d021      	beq.n	800b2d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b28e:	f7fd fdd5 	bl	8008e3c <HAL_GetTick>
 800b292:	4602      	mov	r2, r0
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	1ad3      	subs	r3, r2, r3
 800b298:	68ba      	ldr	r2, [r7, #8]
 800b29a:	429a      	cmp	r2, r3
 800b29c:	d302      	bcc.n	800b2a4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800b29e:	68bb      	ldr	r3, [r7, #8]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d116      	bne.n	800b2d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	2220      	movs	r2, #32
 800b2ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2be:	f043 0220 	orr.w	r2, r3, #32
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b2ce:	2301      	movs	r3, #1
 800b2d0:	e007      	b.n	800b2e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	695b      	ldr	r3, [r3, #20]
 800b2d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2dc:	2b80      	cmp	r3, #128	; 0x80
 800b2de:	d1ca      	bne.n	800b276 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b2e0:	2300      	movs	r3, #0
}
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	3710      	adds	r7, #16
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	bd80      	pop	{r7, pc}

0800b2ea <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b2ea:	b580      	push	{r7, lr}
 800b2ec:	b084      	sub	sp, #16
 800b2ee:	af00      	add	r7, sp, #0
 800b2f0:	60f8      	str	r0, [r7, #12]
 800b2f2:	60b9      	str	r1, [r7, #8]
 800b2f4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b2f6:	e02d      	b.n	800b354 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b2f8:	68f8      	ldr	r0, [r7, #12]
 800b2fa:	f000 f88d 	bl	800b418 <I2C_IsAcknowledgeFailed>
 800b2fe:	4603      	mov	r3, r0
 800b300:	2b00      	cmp	r3, #0
 800b302:	d001      	beq.n	800b308 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b304:	2301      	movs	r3, #1
 800b306:	e02d      	b.n	800b364 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b308:	68bb      	ldr	r3, [r7, #8]
 800b30a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b30e:	d021      	beq.n	800b354 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b310:	f7fd fd94 	bl	8008e3c <HAL_GetTick>
 800b314:	4602      	mov	r2, r0
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	1ad3      	subs	r3, r2, r3
 800b31a:	68ba      	ldr	r2, [r7, #8]
 800b31c:	429a      	cmp	r2, r3
 800b31e:	d302      	bcc.n	800b326 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800b320:	68bb      	ldr	r3, [r7, #8]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d116      	bne.n	800b354 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	2200      	movs	r2, #0
 800b32a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	2220      	movs	r2, #32
 800b330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	2200      	movs	r2, #0
 800b338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b340:	f043 0220 	orr.w	r2, r3, #32
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	2200      	movs	r2, #0
 800b34c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b350:	2301      	movs	r3, #1
 800b352:	e007      	b.n	800b364 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	695b      	ldr	r3, [r3, #20]
 800b35a:	f003 0304 	and.w	r3, r3, #4
 800b35e:	2b04      	cmp	r3, #4
 800b360:	d1ca      	bne.n	800b2f8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b362:	2300      	movs	r3, #0
}
 800b364:	4618      	mov	r0, r3
 800b366:	3710      	adds	r7, #16
 800b368:	46bd      	mov	sp, r7
 800b36a:	bd80      	pop	{r7, pc}

0800b36c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b084      	sub	sp, #16
 800b370:	af00      	add	r7, sp, #0
 800b372:	60f8      	str	r0, [r7, #12]
 800b374:	60b9      	str	r1, [r7, #8]
 800b376:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b378:	e042      	b.n	800b400 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	695b      	ldr	r3, [r3, #20]
 800b380:	f003 0310 	and.w	r3, r3, #16
 800b384:	2b10      	cmp	r3, #16
 800b386:	d119      	bne.n	800b3bc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	f06f 0210 	mvn.w	r2, #16
 800b390:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	2200      	movs	r2, #0
 800b396:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	2220      	movs	r2, #32
 800b39c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b3b8:	2301      	movs	r3, #1
 800b3ba:	e029      	b.n	800b410 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b3bc:	f7fd fd3e 	bl	8008e3c <HAL_GetTick>
 800b3c0:	4602      	mov	r2, r0
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	1ad3      	subs	r3, r2, r3
 800b3c6:	68ba      	ldr	r2, [r7, #8]
 800b3c8:	429a      	cmp	r2, r3
 800b3ca:	d302      	bcc.n	800b3d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800b3cc:	68bb      	ldr	r3, [r7, #8]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d116      	bne.n	800b400 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	2220      	movs	r2, #32
 800b3dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3ec:	f043 0220 	orr.w	r2, r3, #32
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b3fc:	2301      	movs	r3, #1
 800b3fe:	e007      	b.n	800b410 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	695b      	ldr	r3, [r3, #20]
 800b406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b40a:	2b40      	cmp	r3, #64	; 0x40
 800b40c:	d1b5      	bne.n	800b37a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800b40e:	2300      	movs	r3, #0
}
 800b410:	4618      	mov	r0, r3
 800b412:	3710      	adds	r7, #16
 800b414:	46bd      	mov	sp, r7
 800b416:	bd80      	pop	{r7, pc}

0800b418 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800b418:	b480      	push	{r7}
 800b41a:	b083      	sub	sp, #12
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	695b      	ldr	r3, [r3, #20]
 800b426:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b42a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b42e:	d11b      	bne.n	800b468 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b438:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	2200      	movs	r2, #0
 800b43e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2220      	movs	r2, #32
 800b444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	2200      	movs	r2, #0
 800b44c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b454:	f043 0204 	orr.w	r2, r3, #4
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2200      	movs	r2, #0
 800b460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800b464:	2301      	movs	r3, #1
 800b466:	e000      	b.n	800b46a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800b468:	2300      	movs	r3, #0
}
 800b46a:	4618      	mov	r0, r3
 800b46c:	370c      	adds	r7, #12
 800b46e:	46bd      	mov	sp, r7
 800b470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b474:	4770      	bx	lr
	...

0800b478 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b478:	b580      	push	{r7, lr}
 800b47a:	b086      	sub	sp, #24
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d101      	bne.n	800b48a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b486:	2301      	movs	r3, #1
 800b488:	e25b      	b.n	800b942 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	f003 0301 	and.w	r3, r3, #1
 800b492:	2b00      	cmp	r3, #0
 800b494:	d075      	beq.n	800b582 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800b496:	4ba3      	ldr	r3, [pc, #652]	; (800b724 <HAL_RCC_OscConfig+0x2ac>)
 800b498:	689b      	ldr	r3, [r3, #8]
 800b49a:	f003 030c 	and.w	r3, r3, #12
 800b49e:	2b04      	cmp	r3, #4
 800b4a0:	d00c      	beq.n	800b4bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b4a2:	4ba0      	ldr	r3, [pc, #640]	; (800b724 <HAL_RCC_OscConfig+0x2ac>)
 800b4a4:	689b      	ldr	r3, [r3, #8]
 800b4a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800b4aa:	2b08      	cmp	r3, #8
 800b4ac:	d112      	bne.n	800b4d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b4ae:	4b9d      	ldr	r3, [pc, #628]	; (800b724 <HAL_RCC_OscConfig+0x2ac>)
 800b4b0:	685b      	ldr	r3, [r3, #4]
 800b4b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b4b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b4ba:	d10b      	bne.n	800b4d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b4bc:	4b99      	ldr	r3, [pc, #612]	; (800b724 <HAL_RCC_OscConfig+0x2ac>)
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d05b      	beq.n	800b580 <HAL_RCC_OscConfig+0x108>
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	685b      	ldr	r3, [r3, #4]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d157      	bne.n	800b580 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800b4d0:	2301      	movs	r3, #1
 800b4d2:	e236      	b.n	800b942 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	685b      	ldr	r3, [r3, #4]
 800b4d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b4dc:	d106      	bne.n	800b4ec <HAL_RCC_OscConfig+0x74>
 800b4de:	4b91      	ldr	r3, [pc, #580]	; (800b724 <HAL_RCC_OscConfig+0x2ac>)
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	4a90      	ldr	r2, [pc, #576]	; (800b724 <HAL_RCC_OscConfig+0x2ac>)
 800b4e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b4e8:	6013      	str	r3, [r2, #0]
 800b4ea:	e01d      	b.n	800b528 <HAL_RCC_OscConfig+0xb0>
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	685b      	ldr	r3, [r3, #4]
 800b4f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b4f4:	d10c      	bne.n	800b510 <HAL_RCC_OscConfig+0x98>
 800b4f6:	4b8b      	ldr	r3, [pc, #556]	; (800b724 <HAL_RCC_OscConfig+0x2ac>)
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	4a8a      	ldr	r2, [pc, #552]	; (800b724 <HAL_RCC_OscConfig+0x2ac>)
 800b4fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b500:	6013      	str	r3, [r2, #0]
 800b502:	4b88      	ldr	r3, [pc, #544]	; (800b724 <HAL_RCC_OscConfig+0x2ac>)
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	4a87      	ldr	r2, [pc, #540]	; (800b724 <HAL_RCC_OscConfig+0x2ac>)
 800b508:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b50c:	6013      	str	r3, [r2, #0]
 800b50e:	e00b      	b.n	800b528 <HAL_RCC_OscConfig+0xb0>
 800b510:	4b84      	ldr	r3, [pc, #528]	; (800b724 <HAL_RCC_OscConfig+0x2ac>)
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	4a83      	ldr	r2, [pc, #524]	; (800b724 <HAL_RCC_OscConfig+0x2ac>)
 800b516:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b51a:	6013      	str	r3, [r2, #0]
 800b51c:	4b81      	ldr	r3, [pc, #516]	; (800b724 <HAL_RCC_OscConfig+0x2ac>)
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	4a80      	ldr	r2, [pc, #512]	; (800b724 <HAL_RCC_OscConfig+0x2ac>)
 800b522:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b526:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	685b      	ldr	r3, [r3, #4]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d013      	beq.n	800b558 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b530:	f7fd fc84 	bl	8008e3c <HAL_GetTick>
 800b534:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b536:	e008      	b.n	800b54a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b538:	f7fd fc80 	bl	8008e3c <HAL_GetTick>
 800b53c:	4602      	mov	r2, r0
 800b53e:	693b      	ldr	r3, [r7, #16]
 800b540:	1ad3      	subs	r3, r2, r3
 800b542:	2b64      	cmp	r3, #100	; 0x64
 800b544:	d901      	bls.n	800b54a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800b546:	2303      	movs	r3, #3
 800b548:	e1fb      	b.n	800b942 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b54a:	4b76      	ldr	r3, [pc, #472]	; (800b724 <HAL_RCC_OscConfig+0x2ac>)
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b552:	2b00      	cmp	r3, #0
 800b554:	d0f0      	beq.n	800b538 <HAL_RCC_OscConfig+0xc0>
 800b556:	e014      	b.n	800b582 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b558:	f7fd fc70 	bl	8008e3c <HAL_GetTick>
 800b55c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b55e:	e008      	b.n	800b572 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b560:	f7fd fc6c 	bl	8008e3c <HAL_GetTick>
 800b564:	4602      	mov	r2, r0
 800b566:	693b      	ldr	r3, [r7, #16]
 800b568:	1ad3      	subs	r3, r2, r3
 800b56a:	2b64      	cmp	r3, #100	; 0x64
 800b56c:	d901      	bls.n	800b572 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b56e:	2303      	movs	r3, #3
 800b570:	e1e7      	b.n	800b942 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b572:	4b6c      	ldr	r3, [pc, #432]	; (800b724 <HAL_RCC_OscConfig+0x2ac>)
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d1f0      	bne.n	800b560 <HAL_RCC_OscConfig+0xe8>
 800b57e:	e000      	b.n	800b582 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b580:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	f003 0302 	and.w	r3, r3, #2
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d063      	beq.n	800b656 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800b58e:	4b65      	ldr	r3, [pc, #404]	; (800b724 <HAL_RCC_OscConfig+0x2ac>)
 800b590:	689b      	ldr	r3, [r3, #8]
 800b592:	f003 030c 	and.w	r3, r3, #12
 800b596:	2b00      	cmp	r3, #0
 800b598:	d00b      	beq.n	800b5b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b59a:	4b62      	ldr	r3, [pc, #392]	; (800b724 <HAL_RCC_OscConfig+0x2ac>)
 800b59c:	689b      	ldr	r3, [r3, #8]
 800b59e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800b5a2:	2b08      	cmp	r3, #8
 800b5a4:	d11c      	bne.n	800b5e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b5a6:	4b5f      	ldr	r3, [pc, #380]	; (800b724 <HAL_RCC_OscConfig+0x2ac>)
 800b5a8:	685b      	ldr	r3, [r3, #4]
 800b5aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d116      	bne.n	800b5e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b5b2:	4b5c      	ldr	r3, [pc, #368]	; (800b724 <HAL_RCC_OscConfig+0x2ac>)
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	f003 0302 	and.w	r3, r3, #2
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d005      	beq.n	800b5ca <HAL_RCC_OscConfig+0x152>
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	68db      	ldr	r3, [r3, #12]
 800b5c2:	2b01      	cmp	r3, #1
 800b5c4:	d001      	beq.n	800b5ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800b5c6:	2301      	movs	r3, #1
 800b5c8:	e1bb      	b.n	800b942 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b5ca:	4b56      	ldr	r3, [pc, #344]	; (800b724 <HAL_RCC_OscConfig+0x2ac>)
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	691b      	ldr	r3, [r3, #16]
 800b5d6:	00db      	lsls	r3, r3, #3
 800b5d8:	4952      	ldr	r1, [pc, #328]	; (800b724 <HAL_RCC_OscConfig+0x2ac>)
 800b5da:	4313      	orrs	r3, r2
 800b5dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b5de:	e03a      	b.n	800b656 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	68db      	ldr	r3, [r3, #12]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d020      	beq.n	800b62a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b5e8:	4b4f      	ldr	r3, [pc, #316]	; (800b728 <HAL_RCC_OscConfig+0x2b0>)
 800b5ea:	2201      	movs	r2, #1
 800b5ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b5ee:	f7fd fc25 	bl	8008e3c <HAL_GetTick>
 800b5f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b5f4:	e008      	b.n	800b608 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b5f6:	f7fd fc21 	bl	8008e3c <HAL_GetTick>
 800b5fa:	4602      	mov	r2, r0
 800b5fc:	693b      	ldr	r3, [r7, #16]
 800b5fe:	1ad3      	subs	r3, r2, r3
 800b600:	2b02      	cmp	r3, #2
 800b602:	d901      	bls.n	800b608 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800b604:	2303      	movs	r3, #3
 800b606:	e19c      	b.n	800b942 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b608:	4b46      	ldr	r3, [pc, #280]	; (800b724 <HAL_RCC_OscConfig+0x2ac>)
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	f003 0302 	and.w	r3, r3, #2
 800b610:	2b00      	cmp	r3, #0
 800b612:	d0f0      	beq.n	800b5f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b614:	4b43      	ldr	r3, [pc, #268]	; (800b724 <HAL_RCC_OscConfig+0x2ac>)
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	691b      	ldr	r3, [r3, #16]
 800b620:	00db      	lsls	r3, r3, #3
 800b622:	4940      	ldr	r1, [pc, #256]	; (800b724 <HAL_RCC_OscConfig+0x2ac>)
 800b624:	4313      	orrs	r3, r2
 800b626:	600b      	str	r3, [r1, #0]
 800b628:	e015      	b.n	800b656 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b62a:	4b3f      	ldr	r3, [pc, #252]	; (800b728 <HAL_RCC_OscConfig+0x2b0>)
 800b62c:	2200      	movs	r2, #0
 800b62e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b630:	f7fd fc04 	bl	8008e3c <HAL_GetTick>
 800b634:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b636:	e008      	b.n	800b64a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b638:	f7fd fc00 	bl	8008e3c <HAL_GetTick>
 800b63c:	4602      	mov	r2, r0
 800b63e:	693b      	ldr	r3, [r7, #16]
 800b640:	1ad3      	subs	r3, r2, r3
 800b642:	2b02      	cmp	r3, #2
 800b644:	d901      	bls.n	800b64a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800b646:	2303      	movs	r3, #3
 800b648:	e17b      	b.n	800b942 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b64a:	4b36      	ldr	r3, [pc, #216]	; (800b724 <HAL_RCC_OscConfig+0x2ac>)
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	f003 0302 	and.w	r3, r3, #2
 800b652:	2b00      	cmp	r3, #0
 800b654:	d1f0      	bne.n	800b638 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	f003 0308 	and.w	r3, r3, #8
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d030      	beq.n	800b6c4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	695b      	ldr	r3, [r3, #20]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d016      	beq.n	800b698 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b66a:	4b30      	ldr	r3, [pc, #192]	; (800b72c <HAL_RCC_OscConfig+0x2b4>)
 800b66c:	2201      	movs	r2, #1
 800b66e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b670:	f7fd fbe4 	bl	8008e3c <HAL_GetTick>
 800b674:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b676:	e008      	b.n	800b68a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b678:	f7fd fbe0 	bl	8008e3c <HAL_GetTick>
 800b67c:	4602      	mov	r2, r0
 800b67e:	693b      	ldr	r3, [r7, #16]
 800b680:	1ad3      	subs	r3, r2, r3
 800b682:	2b02      	cmp	r3, #2
 800b684:	d901      	bls.n	800b68a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800b686:	2303      	movs	r3, #3
 800b688:	e15b      	b.n	800b942 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b68a:	4b26      	ldr	r3, [pc, #152]	; (800b724 <HAL_RCC_OscConfig+0x2ac>)
 800b68c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b68e:	f003 0302 	and.w	r3, r3, #2
 800b692:	2b00      	cmp	r3, #0
 800b694:	d0f0      	beq.n	800b678 <HAL_RCC_OscConfig+0x200>
 800b696:	e015      	b.n	800b6c4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b698:	4b24      	ldr	r3, [pc, #144]	; (800b72c <HAL_RCC_OscConfig+0x2b4>)
 800b69a:	2200      	movs	r2, #0
 800b69c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b69e:	f7fd fbcd 	bl	8008e3c <HAL_GetTick>
 800b6a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b6a4:	e008      	b.n	800b6b8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b6a6:	f7fd fbc9 	bl	8008e3c <HAL_GetTick>
 800b6aa:	4602      	mov	r2, r0
 800b6ac:	693b      	ldr	r3, [r7, #16]
 800b6ae:	1ad3      	subs	r3, r2, r3
 800b6b0:	2b02      	cmp	r3, #2
 800b6b2:	d901      	bls.n	800b6b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800b6b4:	2303      	movs	r3, #3
 800b6b6:	e144      	b.n	800b942 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b6b8:	4b1a      	ldr	r3, [pc, #104]	; (800b724 <HAL_RCC_OscConfig+0x2ac>)
 800b6ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b6bc:	f003 0302 	and.w	r3, r3, #2
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d1f0      	bne.n	800b6a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	f003 0304 	and.w	r3, r3, #4
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	f000 80a0 	beq.w	800b812 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b6d6:	4b13      	ldr	r3, [pc, #76]	; (800b724 <HAL_RCC_OscConfig+0x2ac>)
 800b6d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d10f      	bne.n	800b702 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	60bb      	str	r3, [r7, #8]
 800b6e6:	4b0f      	ldr	r3, [pc, #60]	; (800b724 <HAL_RCC_OscConfig+0x2ac>)
 800b6e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6ea:	4a0e      	ldr	r2, [pc, #56]	; (800b724 <HAL_RCC_OscConfig+0x2ac>)
 800b6ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b6f0:	6413      	str	r3, [r2, #64]	; 0x40
 800b6f2:	4b0c      	ldr	r3, [pc, #48]	; (800b724 <HAL_RCC_OscConfig+0x2ac>)
 800b6f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b6fa:	60bb      	str	r3, [r7, #8]
 800b6fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b6fe:	2301      	movs	r3, #1
 800b700:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b702:	4b0b      	ldr	r3, [pc, #44]	; (800b730 <HAL_RCC_OscConfig+0x2b8>)
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d121      	bne.n	800b752 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b70e:	4b08      	ldr	r3, [pc, #32]	; (800b730 <HAL_RCC_OscConfig+0x2b8>)
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	4a07      	ldr	r2, [pc, #28]	; (800b730 <HAL_RCC_OscConfig+0x2b8>)
 800b714:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b718:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b71a:	f7fd fb8f 	bl	8008e3c <HAL_GetTick>
 800b71e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b720:	e011      	b.n	800b746 <HAL_RCC_OscConfig+0x2ce>
 800b722:	bf00      	nop
 800b724:	40023800 	.word	0x40023800
 800b728:	42470000 	.word	0x42470000
 800b72c:	42470e80 	.word	0x42470e80
 800b730:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b734:	f7fd fb82 	bl	8008e3c <HAL_GetTick>
 800b738:	4602      	mov	r2, r0
 800b73a:	693b      	ldr	r3, [r7, #16]
 800b73c:	1ad3      	subs	r3, r2, r3
 800b73e:	2b02      	cmp	r3, #2
 800b740:	d901      	bls.n	800b746 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800b742:	2303      	movs	r3, #3
 800b744:	e0fd      	b.n	800b942 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b746:	4b81      	ldr	r3, [pc, #516]	; (800b94c <HAL_RCC_OscConfig+0x4d4>)
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d0f0      	beq.n	800b734 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	689b      	ldr	r3, [r3, #8]
 800b756:	2b01      	cmp	r3, #1
 800b758:	d106      	bne.n	800b768 <HAL_RCC_OscConfig+0x2f0>
 800b75a:	4b7d      	ldr	r3, [pc, #500]	; (800b950 <HAL_RCC_OscConfig+0x4d8>)
 800b75c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b75e:	4a7c      	ldr	r2, [pc, #496]	; (800b950 <HAL_RCC_OscConfig+0x4d8>)
 800b760:	f043 0301 	orr.w	r3, r3, #1
 800b764:	6713      	str	r3, [r2, #112]	; 0x70
 800b766:	e01c      	b.n	800b7a2 <HAL_RCC_OscConfig+0x32a>
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	689b      	ldr	r3, [r3, #8]
 800b76c:	2b05      	cmp	r3, #5
 800b76e:	d10c      	bne.n	800b78a <HAL_RCC_OscConfig+0x312>
 800b770:	4b77      	ldr	r3, [pc, #476]	; (800b950 <HAL_RCC_OscConfig+0x4d8>)
 800b772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b774:	4a76      	ldr	r2, [pc, #472]	; (800b950 <HAL_RCC_OscConfig+0x4d8>)
 800b776:	f043 0304 	orr.w	r3, r3, #4
 800b77a:	6713      	str	r3, [r2, #112]	; 0x70
 800b77c:	4b74      	ldr	r3, [pc, #464]	; (800b950 <HAL_RCC_OscConfig+0x4d8>)
 800b77e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b780:	4a73      	ldr	r2, [pc, #460]	; (800b950 <HAL_RCC_OscConfig+0x4d8>)
 800b782:	f043 0301 	orr.w	r3, r3, #1
 800b786:	6713      	str	r3, [r2, #112]	; 0x70
 800b788:	e00b      	b.n	800b7a2 <HAL_RCC_OscConfig+0x32a>
 800b78a:	4b71      	ldr	r3, [pc, #452]	; (800b950 <HAL_RCC_OscConfig+0x4d8>)
 800b78c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b78e:	4a70      	ldr	r2, [pc, #448]	; (800b950 <HAL_RCC_OscConfig+0x4d8>)
 800b790:	f023 0301 	bic.w	r3, r3, #1
 800b794:	6713      	str	r3, [r2, #112]	; 0x70
 800b796:	4b6e      	ldr	r3, [pc, #440]	; (800b950 <HAL_RCC_OscConfig+0x4d8>)
 800b798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b79a:	4a6d      	ldr	r2, [pc, #436]	; (800b950 <HAL_RCC_OscConfig+0x4d8>)
 800b79c:	f023 0304 	bic.w	r3, r3, #4
 800b7a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	689b      	ldr	r3, [r3, #8]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d015      	beq.n	800b7d6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b7aa:	f7fd fb47 	bl	8008e3c <HAL_GetTick>
 800b7ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b7b0:	e00a      	b.n	800b7c8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b7b2:	f7fd fb43 	bl	8008e3c <HAL_GetTick>
 800b7b6:	4602      	mov	r2, r0
 800b7b8:	693b      	ldr	r3, [r7, #16]
 800b7ba:	1ad3      	subs	r3, r2, r3
 800b7bc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7c0:	4293      	cmp	r3, r2
 800b7c2:	d901      	bls.n	800b7c8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800b7c4:	2303      	movs	r3, #3
 800b7c6:	e0bc      	b.n	800b942 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b7c8:	4b61      	ldr	r3, [pc, #388]	; (800b950 <HAL_RCC_OscConfig+0x4d8>)
 800b7ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7cc:	f003 0302 	and.w	r3, r3, #2
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d0ee      	beq.n	800b7b2 <HAL_RCC_OscConfig+0x33a>
 800b7d4:	e014      	b.n	800b800 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b7d6:	f7fd fb31 	bl	8008e3c <HAL_GetTick>
 800b7da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b7dc:	e00a      	b.n	800b7f4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b7de:	f7fd fb2d 	bl	8008e3c <HAL_GetTick>
 800b7e2:	4602      	mov	r2, r0
 800b7e4:	693b      	ldr	r3, [r7, #16]
 800b7e6:	1ad3      	subs	r3, r2, r3
 800b7e8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7ec:	4293      	cmp	r3, r2
 800b7ee:	d901      	bls.n	800b7f4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800b7f0:	2303      	movs	r3, #3
 800b7f2:	e0a6      	b.n	800b942 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b7f4:	4b56      	ldr	r3, [pc, #344]	; (800b950 <HAL_RCC_OscConfig+0x4d8>)
 800b7f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7f8:	f003 0302 	and.w	r3, r3, #2
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d1ee      	bne.n	800b7de <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b800:	7dfb      	ldrb	r3, [r7, #23]
 800b802:	2b01      	cmp	r3, #1
 800b804:	d105      	bne.n	800b812 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b806:	4b52      	ldr	r3, [pc, #328]	; (800b950 <HAL_RCC_OscConfig+0x4d8>)
 800b808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b80a:	4a51      	ldr	r2, [pc, #324]	; (800b950 <HAL_RCC_OscConfig+0x4d8>)
 800b80c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b810:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	699b      	ldr	r3, [r3, #24]
 800b816:	2b00      	cmp	r3, #0
 800b818:	f000 8092 	beq.w	800b940 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b81c:	4b4c      	ldr	r3, [pc, #304]	; (800b950 <HAL_RCC_OscConfig+0x4d8>)
 800b81e:	689b      	ldr	r3, [r3, #8]
 800b820:	f003 030c 	and.w	r3, r3, #12
 800b824:	2b08      	cmp	r3, #8
 800b826:	d05c      	beq.n	800b8e2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	699b      	ldr	r3, [r3, #24]
 800b82c:	2b02      	cmp	r3, #2
 800b82e:	d141      	bne.n	800b8b4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b830:	4b48      	ldr	r3, [pc, #288]	; (800b954 <HAL_RCC_OscConfig+0x4dc>)
 800b832:	2200      	movs	r2, #0
 800b834:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b836:	f7fd fb01 	bl	8008e3c <HAL_GetTick>
 800b83a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b83c:	e008      	b.n	800b850 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b83e:	f7fd fafd 	bl	8008e3c <HAL_GetTick>
 800b842:	4602      	mov	r2, r0
 800b844:	693b      	ldr	r3, [r7, #16]
 800b846:	1ad3      	subs	r3, r2, r3
 800b848:	2b02      	cmp	r3, #2
 800b84a:	d901      	bls.n	800b850 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800b84c:	2303      	movs	r3, #3
 800b84e:	e078      	b.n	800b942 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b850:	4b3f      	ldr	r3, [pc, #252]	; (800b950 <HAL_RCC_OscConfig+0x4d8>)
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d1f0      	bne.n	800b83e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	69da      	ldr	r2, [r3, #28]
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	6a1b      	ldr	r3, [r3, #32]
 800b864:	431a      	orrs	r2, r3
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b86a:	019b      	lsls	r3, r3, #6
 800b86c:	431a      	orrs	r2, r3
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b872:	085b      	lsrs	r3, r3, #1
 800b874:	3b01      	subs	r3, #1
 800b876:	041b      	lsls	r3, r3, #16
 800b878:	431a      	orrs	r2, r3
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b87e:	061b      	lsls	r3, r3, #24
 800b880:	4933      	ldr	r1, [pc, #204]	; (800b950 <HAL_RCC_OscConfig+0x4d8>)
 800b882:	4313      	orrs	r3, r2
 800b884:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b886:	4b33      	ldr	r3, [pc, #204]	; (800b954 <HAL_RCC_OscConfig+0x4dc>)
 800b888:	2201      	movs	r2, #1
 800b88a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b88c:	f7fd fad6 	bl	8008e3c <HAL_GetTick>
 800b890:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b892:	e008      	b.n	800b8a6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b894:	f7fd fad2 	bl	8008e3c <HAL_GetTick>
 800b898:	4602      	mov	r2, r0
 800b89a:	693b      	ldr	r3, [r7, #16]
 800b89c:	1ad3      	subs	r3, r2, r3
 800b89e:	2b02      	cmp	r3, #2
 800b8a0:	d901      	bls.n	800b8a6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800b8a2:	2303      	movs	r3, #3
 800b8a4:	e04d      	b.n	800b942 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b8a6:	4b2a      	ldr	r3, [pc, #168]	; (800b950 <HAL_RCC_OscConfig+0x4d8>)
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d0f0      	beq.n	800b894 <HAL_RCC_OscConfig+0x41c>
 800b8b2:	e045      	b.n	800b940 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b8b4:	4b27      	ldr	r3, [pc, #156]	; (800b954 <HAL_RCC_OscConfig+0x4dc>)
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b8ba:	f7fd fabf 	bl	8008e3c <HAL_GetTick>
 800b8be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b8c0:	e008      	b.n	800b8d4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b8c2:	f7fd fabb 	bl	8008e3c <HAL_GetTick>
 800b8c6:	4602      	mov	r2, r0
 800b8c8:	693b      	ldr	r3, [r7, #16]
 800b8ca:	1ad3      	subs	r3, r2, r3
 800b8cc:	2b02      	cmp	r3, #2
 800b8ce:	d901      	bls.n	800b8d4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800b8d0:	2303      	movs	r3, #3
 800b8d2:	e036      	b.n	800b942 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b8d4:	4b1e      	ldr	r3, [pc, #120]	; (800b950 <HAL_RCC_OscConfig+0x4d8>)
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d1f0      	bne.n	800b8c2 <HAL_RCC_OscConfig+0x44a>
 800b8e0:	e02e      	b.n	800b940 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	699b      	ldr	r3, [r3, #24]
 800b8e6:	2b01      	cmp	r3, #1
 800b8e8:	d101      	bne.n	800b8ee <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800b8ea:	2301      	movs	r3, #1
 800b8ec:	e029      	b.n	800b942 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800b8ee:	4b18      	ldr	r3, [pc, #96]	; (800b950 <HAL_RCC_OscConfig+0x4d8>)
 800b8f0:	685b      	ldr	r3, [r3, #4]
 800b8f2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	69db      	ldr	r3, [r3, #28]
 800b8fe:	429a      	cmp	r2, r3
 800b900:	d11c      	bne.n	800b93c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b90c:	429a      	cmp	r2, r3
 800b90e:	d115      	bne.n	800b93c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800b910:	68fa      	ldr	r2, [r7, #12]
 800b912:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800b916:	4013      	ands	r3, r2
 800b918:	687a      	ldr	r2, [r7, #4]
 800b91a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b91c:	4293      	cmp	r3, r2
 800b91e:	d10d      	bne.n	800b93c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800b92a:	429a      	cmp	r2, r3
 800b92c:	d106      	bne.n	800b93c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800b938:	429a      	cmp	r2, r3
 800b93a:	d001      	beq.n	800b940 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800b93c:	2301      	movs	r3, #1
 800b93e:	e000      	b.n	800b942 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800b940:	2300      	movs	r3, #0
}
 800b942:	4618      	mov	r0, r3
 800b944:	3718      	adds	r7, #24
 800b946:	46bd      	mov	sp, r7
 800b948:	bd80      	pop	{r7, pc}
 800b94a:	bf00      	nop
 800b94c:	40007000 	.word	0x40007000
 800b950:	40023800 	.word	0x40023800
 800b954:	42470060 	.word	0x42470060

0800b958 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b084      	sub	sp, #16
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
 800b960:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d101      	bne.n	800b96c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b968:	2301      	movs	r3, #1
 800b96a:	e0cc      	b.n	800bb06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b96c:	4b68      	ldr	r3, [pc, #416]	; (800bb10 <HAL_RCC_ClockConfig+0x1b8>)
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	f003 030f 	and.w	r3, r3, #15
 800b974:	683a      	ldr	r2, [r7, #0]
 800b976:	429a      	cmp	r2, r3
 800b978:	d90c      	bls.n	800b994 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b97a:	4b65      	ldr	r3, [pc, #404]	; (800bb10 <HAL_RCC_ClockConfig+0x1b8>)
 800b97c:	683a      	ldr	r2, [r7, #0]
 800b97e:	b2d2      	uxtb	r2, r2
 800b980:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b982:	4b63      	ldr	r3, [pc, #396]	; (800bb10 <HAL_RCC_ClockConfig+0x1b8>)
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	f003 030f 	and.w	r3, r3, #15
 800b98a:	683a      	ldr	r2, [r7, #0]
 800b98c:	429a      	cmp	r2, r3
 800b98e:	d001      	beq.n	800b994 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800b990:	2301      	movs	r3, #1
 800b992:	e0b8      	b.n	800bb06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	f003 0302 	and.w	r3, r3, #2
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d020      	beq.n	800b9e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	f003 0304 	and.w	r3, r3, #4
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d005      	beq.n	800b9b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b9ac:	4b59      	ldr	r3, [pc, #356]	; (800bb14 <HAL_RCC_ClockConfig+0x1bc>)
 800b9ae:	689b      	ldr	r3, [r3, #8]
 800b9b0:	4a58      	ldr	r2, [pc, #352]	; (800bb14 <HAL_RCC_ClockConfig+0x1bc>)
 800b9b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b9b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	f003 0308 	and.w	r3, r3, #8
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d005      	beq.n	800b9d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b9c4:	4b53      	ldr	r3, [pc, #332]	; (800bb14 <HAL_RCC_ClockConfig+0x1bc>)
 800b9c6:	689b      	ldr	r3, [r3, #8]
 800b9c8:	4a52      	ldr	r2, [pc, #328]	; (800bb14 <HAL_RCC_ClockConfig+0x1bc>)
 800b9ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b9ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b9d0:	4b50      	ldr	r3, [pc, #320]	; (800bb14 <HAL_RCC_ClockConfig+0x1bc>)
 800b9d2:	689b      	ldr	r3, [r3, #8]
 800b9d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	689b      	ldr	r3, [r3, #8]
 800b9dc:	494d      	ldr	r1, [pc, #308]	; (800bb14 <HAL_RCC_ClockConfig+0x1bc>)
 800b9de:	4313      	orrs	r3, r2
 800b9e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	f003 0301 	and.w	r3, r3, #1
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d044      	beq.n	800ba78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	685b      	ldr	r3, [r3, #4]
 800b9f2:	2b01      	cmp	r3, #1
 800b9f4:	d107      	bne.n	800ba06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b9f6:	4b47      	ldr	r3, [pc, #284]	; (800bb14 <HAL_RCC_ClockConfig+0x1bc>)
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d119      	bne.n	800ba36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ba02:	2301      	movs	r3, #1
 800ba04:	e07f      	b.n	800bb06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	685b      	ldr	r3, [r3, #4]
 800ba0a:	2b02      	cmp	r3, #2
 800ba0c:	d003      	beq.n	800ba16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ba12:	2b03      	cmp	r3, #3
 800ba14:	d107      	bne.n	800ba26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ba16:	4b3f      	ldr	r3, [pc, #252]	; (800bb14 <HAL_RCC_ClockConfig+0x1bc>)
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d109      	bne.n	800ba36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ba22:	2301      	movs	r3, #1
 800ba24:	e06f      	b.n	800bb06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ba26:	4b3b      	ldr	r3, [pc, #236]	; (800bb14 <HAL_RCC_ClockConfig+0x1bc>)
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	f003 0302 	and.w	r3, r3, #2
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d101      	bne.n	800ba36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ba32:	2301      	movs	r3, #1
 800ba34:	e067      	b.n	800bb06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ba36:	4b37      	ldr	r3, [pc, #220]	; (800bb14 <HAL_RCC_ClockConfig+0x1bc>)
 800ba38:	689b      	ldr	r3, [r3, #8]
 800ba3a:	f023 0203 	bic.w	r2, r3, #3
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	685b      	ldr	r3, [r3, #4]
 800ba42:	4934      	ldr	r1, [pc, #208]	; (800bb14 <HAL_RCC_ClockConfig+0x1bc>)
 800ba44:	4313      	orrs	r3, r2
 800ba46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ba48:	f7fd f9f8 	bl	8008e3c <HAL_GetTick>
 800ba4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ba4e:	e00a      	b.n	800ba66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ba50:	f7fd f9f4 	bl	8008e3c <HAL_GetTick>
 800ba54:	4602      	mov	r2, r0
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	1ad3      	subs	r3, r2, r3
 800ba5a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba5e:	4293      	cmp	r3, r2
 800ba60:	d901      	bls.n	800ba66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ba62:	2303      	movs	r3, #3
 800ba64:	e04f      	b.n	800bb06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ba66:	4b2b      	ldr	r3, [pc, #172]	; (800bb14 <HAL_RCC_ClockConfig+0x1bc>)
 800ba68:	689b      	ldr	r3, [r3, #8]
 800ba6a:	f003 020c 	and.w	r2, r3, #12
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	685b      	ldr	r3, [r3, #4]
 800ba72:	009b      	lsls	r3, r3, #2
 800ba74:	429a      	cmp	r2, r3
 800ba76:	d1eb      	bne.n	800ba50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800ba78:	4b25      	ldr	r3, [pc, #148]	; (800bb10 <HAL_RCC_ClockConfig+0x1b8>)
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	f003 030f 	and.w	r3, r3, #15
 800ba80:	683a      	ldr	r2, [r7, #0]
 800ba82:	429a      	cmp	r2, r3
 800ba84:	d20c      	bcs.n	800baa0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ba86:	4b22      	ldr	r3, [pc, #136]	; (800bb10 <HAL_RCC_ClockConfig+0x1b8>)
 800ba88:	683a      	ldr	r2, [r7, #0]
 800ba8a:	b2d2      	uxtb	r2, r2
 800ba8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ba8e:	4b20      	ldr	r3, [pc, #128]	; (800bb10 <HAL_RCC_ClockConfig+0x1b8>)
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	f003 030f 	and.w	r3, r3, #15
 800ba96:	683a      	ldr	r2, [r7, #0]
 800ba98:	429a      	cmp	r2, r3
 800ba9a:	d001      	beq.n	800baa0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800ba9c:	2301      	movs	r3, #1
 800ba9e:	e032      	b.n	800bb06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	f003 0304 	and.w	r3, r3, #4
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d008      	beq.n	800babe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800baac:	4b19      	ldr	r3, [pc, #100]	; (800bb14 <HAL_RCC_ClockConfig+0x1bc>)
 800baae:	689b      	ldr	r3, [r3, #8]
 800bab0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	68db      	ldr	r3, [r3, #12]
 800bab8:	4916      	ldr	r1, [pc, #88]	; (800bb14 <HAL_RCC_ClockConfig+0x1bc>)
 800baba:	4313      	orrs	r3, r2
 800babc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	f003 0308 	and.w	r3, r3, #8
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d009      	beq.n	800bade <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800baca:	4b12      	ldr	r3, [pc, #72]	; (800bb14 <HAL_RCC_ClockConfig+0x1bc>)
 800bacc:	689b      	ldr	r3, [r3, #8]
 800bace:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	691b      	ldr	r3, [r3, #16]
 800bad6:	00db      	lsls	r3, r3, #3
 800bad8:	490e      	ldr	r1, [pc, #56]	; (800bb14 <HAL_RCC_ClockConfig+0x1bc>)
 800bada:	4313      	orrs	r3, r2
 800badc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800bade:	f000 f821 	bl	800bb24 <HAL_RCC_GetSysClockFreq>
 800bae2:	4601      	mov	r1, r0
 800bae4:	4b0b      	ldr	r3, [pc, #44]	; (800bb14 <HAL_RCC_ClockConfig+0x1bc>)
 800bae6:	689b      	ldr	r3, [r3, #8]
 800bae8:	091b      	lsrs	r3, r3, #4
 800baea:	f003 030f 	and.w	r3, r3, #15
 800baee:	4a0a      	ldr	r2, [pc, #40]	; (800bb18 <HAL_RCC_ClockConfig+0x1c0>)
 800baf0:	5cd3      	ldrb	r3, [r2, r3]
 800baf2:	fa21 f303 	lsr.w	r3, r1, r3
 800baf6:	4a09      	ldr	r2, [pc, #36]	; (800bb1c <HAL_RCC_ClockConfig+0x1c4>)
 800baf8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800bafa:	4b09      	ldr	r3, [pc, #36]	; (800bb20 <HAL_RCC_ClockConfig+0x1c8>)
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	4618      	mov	r0, r3
 800bb00:	f7fd f958 	bl	8008db4 <HAL_InitTick>

  return HAL_OK;
 800bb04:	2300      	movs	r3, #0
}
 800bb06:	4618      	mov	r0, r3
 800bb08:	3710      	adds	r7, #16
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	bd80      	pop	{r7, pc}
 800bb0e:	bf00      	nop
 800bb10:	40023c00 	.word	0x40023c00
 800bb14:	40023800 	.word	0x40023800
 800bb18:	0801d7c0 	.word	0x0801d7c0
 800bb1c:	200011c4 	.word	0x200011c4
 800bb20:	20001334 	.word	0x20001334

0800bb24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bb24:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb26:	b085      	sub	sp, #20
 800bb28:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	607b      	str	r3, [r7, #4]
 800bb2e:	2300      	movs	r3, #0
 800bb30:	60fb      	str	r3, [r7, #12]
 800bb32:	2300      	movs	r3, #0
 800bb34:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800bb36:	2300      	movs	r3, #0
 800bb38:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800bb3a:	4b63      	ldr	r3, [pc, #396]	; (800bcc8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800bb3c:	689b      	ldr	r3, [r3, #8]
 800bb3e:	f003 030c 	and.w	r3, r3, #12
 800bb42:	2b04      	cmp	r3, #4
 800bb44:	d007      	beq.n	800bb56 <HAL_RCC_GetSysClockFreq+0x32>
 800bb46:	2b08      	cmp	r3, #8
 800bb48:	d008      	beq.n	800bb5c <HAL_RCC_GetSysClockFreq+0x38>
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	f040 80b4 	bne.w	800bcb8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800bb50:	4b5e      	ldr	r3, [pc, #376]	; (800bccc <HAL_RCC_GetSysClockFreq+0x1a8>)
 800bb52:	60bb      	str	r3, [r7, #8]
       break;
 800bb54:	e0b3      	b.n	800bcbe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800bb56:	4b5e      	ldr	r3, [pc, #376]	; (800bcd0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800bb58:	60bb      	str	r3, [r7, #8]
      break;
 800bb5a:	e0b0      	b.n	800bcbe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800bb5c:	4b5a      	ldr	r3, [pc, #360]	; (800bcc8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800bb5e:	685b      	ldr	r3, [r3, #4]
 800bb60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bb64:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800bb66:	4b58      	ldr	r3, [pc, #352]	; (800bcc8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800bb68:	685b      	ldr	r3, [r3, #4]
 800bb6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d04a      	beq.n	800bc08 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bb72:	4b55      	ldr	r3, [pc, #340]	; (800bcc8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800bb74:	685b      	ldr	r3, [r3, #4]
 800bb76:	099b      	lsrs	r3, r3, #6
 800bb78:	f04f 0400 	mov.w	r4, #0
 800bb7c:	f240 11ff 	movw	r1, #511	; 0x1ff
 800bb80:	f04f 0200 	mov.w	r2, #0
 800bb84:	ea03 0501 	and.w	r5, r3, r1
 800bb88:	ea04 0602 	and.w	r6, r4, r2
 800bb8c:	4629      	mov	r1, r5
 800bb8e:	4632      	mov	r2, r6
 800bb90:	f04f 0300 	mov.w	r3, #0
 800bb94:	f04f 0400 	mov.w	r4, #0
 800bb98:	0154      	lsls	r4, r2, #5
 800bb9a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800bb9e:	014b      	lsls	r3, r1, #5
 800bba0:	4619      	mov	r1, r3
 800bba2:	4622      	mov	r2, r4
 800bba4:	1b49      	subs	r1, r1, r5
 800bba6:	eb62 0206 	sbc.w	r2, r2, r6
 800bbaa:	f04f 0300 	mov.w	r3, #0
 800bbae:	f04f 0400 	mov.w	r4, #0
 800bbb2:	0194      	lsls	r4, r2, #6
 800bbb4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800bbb8:	018b      	lsls	r3, r1, #6
 800bbba:	1a5b      	subs	r3, r3, r1
 800bbbc:	eb64 0402 	sbc.w	r4, r4, r2
 800bbc0:	f04f 0100 	mov.w	r1, #0
 800bbc4:	f04f 0200 	mov.w	r2, #0
 800bbc8:	00e2      	lsls	r2, r4, #3
 800bbca:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800bbce:	00d9      	lsls	r1, r3, #3
 800bbd0:	460b      	mov	r3, r1
 800bbd2:	4614      	mov	r4, r2
 800bbd4:	195b      	adds	r3, r3, r5
 800bbd6:	eb44 0406 	adc.w	r4, r4, r6
 800bbda:	f04f 0100 	mov.w	r1, #0
 800bbde:	f04f 0200 	mov.w	r2, #0
 800bbe2:	0262      	lsls	r2, r4, #9
 800bbe4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800bbe8:	0259      	lsls	r1, r3, #9
 800bbea:	460b      	mov	r3, r1
 800bbec:	4614      	mov	r4, r2
 800bbee:	4618      	mov	r0, r3
 800bbf0:	4621      	mov	r1, r4
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	f04f 0400 	mov.w	r4, #0
 800bbf8:	461a      	mov	r2, r3
 800bbfa:	4623      	mov	r3, r4
 800bbfc:	f7f5 f82c 	bl	8000c58 <__aeabi_uldivmod>
 800bc00:	4603      	mov	r3, r0
 800bc02:	460c      	mov	r4, r1
 800bc04:	60fb      	str	r3, [r7, #12]
 800bc06:	e049      	b.n	800bc9c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bc08:	4b2f      	ldr	r3, [pc, #188]	; (800bcc8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800bc0a:	685b      	ldr	r3, [r3, #4]
 800bc0c:	099b      	lsrs	r3, r3, #6
 800bc0e:	f04f 0400 	mov.w	r4, #0
 800bc12:	f240 11ff 	movw	r1, #511	; 0x1ff
 800bc16:	f04f 0200 	mov.w	r2, #0
 800bc1a:	ea03 0501 	and.w	r5, r3, r1
 800bc1e:	ea04 0602 	and.w	r6, r4, r2
 800bc22:	4629      	mov	r1, r5
 800bc24:	4632      	mov	r2, r6
 800bc26:	f04f 0300 	mov.w	r3, #0
 800bc2a:	f04f 0400 	mov.w	r4, #0
 800bc2e:	0154      	lsls	r4, r2, #5
 800bc30:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800bc34:	014b      	lsls	r3, r1, #5
 800bc36:	4619      	mov	r1, r3
 800bc38:	4622      	mov	r2, r4
 800bc3a:	1b49      	subs	r1, r1, r5
 800bc3c:	eb62 0206 	sbc.w	r2, r2, r6
 800bc40:	f04f 0300 	mov.w	r3, #0
 800bc44:	f04f 0400 	mov.w	r4, #0
 800bc48:	0194      	lsls	r4, r2, #6
 800bc4a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800bc4e:	018b      	lsls	r3, r1, #6
 800bc50:	1a5b      	subs	r3, r3, r1
 800bc52:	eb64 0402 	sbc.w	r4, r4, r2
 800bc56:	f04f 0100 	mov.w	r1, #0
 800bc5a:	f04f 0200 	mov.w	r2, #0
 800bc5e:	00e2      	lsls	r2, r4, #3
 800bc60:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800bc64:	00d9      	lsls	r1, r3, #3
 800bc66:	460b      	mov	r3, r1
 800bc68:	4614      	mov	r4, r2
 800bc6a:	195b      	adds	r3, r3, r5
 800bc6c:	eb44 0406 	adc.w	r4, r4, r6
 800bc70:	f04f 0100 	mov.w	r1, #0
 800bc74:	f04f 0200 	mov.w	r2, #0
 800bc78:	02a2      	lsls	r2, r4, #10
 800bc7a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800bc7e:	0299      	lsls	r1, r3, #10
 800bc80:	460b      	mov	r3, r1
 800bc82:	4614      	mov	r4, r2
 800bc84:	4618      	mov	r0, r3
 800bc86:	4621      	mov	r1, r4
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	f04f 0400 	mov.w	r4, #0
 800bc8e:	461a      	mov	r2, r3
 800bc90:	4623      	mov	r3, r4
 800bc92:	f7f4 ffe1 	bl	8000c58 <__aeabi_uldivmod>
 800bc96:	4603      	mov	r3, r0
 800bc98:	460c      	mov	r4, r1
 800bc9a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800bc9c:	4b0a      	ldr	r3, [pc, #40]	; (800bcc8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800bc9e:	685b      	ldr	r3, [r3, #4]
 800bca0:	0c1b      	lsrs	r3, r3, #16
 800bca2:	f003 0303 	and.w	r3, r3, #3
 800bca6:	3301      	adds	r3, #1
 800bca8:	005b      	lsls	r3, r3, #1
 800bcaa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800bcac:	68fa      	ldr	r2, [r7, #12]
 800bcae:	683b      	ldr	r3, [r7, #0]
 800bcb0:	fbb2 f3f3 	udiv	r3, r2, r3
 800bcb4:	60bb      	str	r3, [r7, #8]
      break;
 800bcb6:	e002      	b.n	800bcbe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800bcb8:	4b04      	ldr	r3, [pc, #16]	; (800bccc <HAL_RCC_GetSysClockFreq+0x1a8>)
 800bcba:	60bb      	str	r3, [r7, #8]
      break;
 800bcbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 800bcbe:	68bb      	ldr	r3, [r7, #8]
}
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	3714      	adds	r7, #20
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bcc8:	40023800 	.word	0x40023800
 800bccc:	00f42400 	.word	0x00f42400
 800bcd0:	007a1200 	.word	0x007a1200

0800bcd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bcd4:	b480      	push	{r7}
 800bcd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800bcd8:	4b03      	ldr	r3, [pc, #12]	; (800bce8 <HAL_RCC_GetHCLKFreq+0x14>)
 800bcda:	681b      	ldr	r3, [r3, #0]
}
 800bcdc:	4618      	mov	r0, r3
 800bcde:	46bd      	mov	sp, r7
 800bce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce4:	4770      	bx	lr
 800bce6:	bf00      	nop
 800bce8:	200011c4 	.word	0x200011c4

0800bcec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800bcf0:	f7ff fff0 	bl	800bcd4 <HAL_RCC_GetHCLKFreq>
 800bcf4:	4601      	mov	r1, r0
 800bcf6:	4b05      	ldr	r3, [pc, #20]	; (800bd0c <HAL_RCC_GetPCLK1Freq+0x20>)
 800bcf8:	689b      	ldr	r3, [r3, #8]
 800bcfa:	0a9b      	lsrs	r3, r3, #10
 800bcfc:	f003 0307 	and.w	r3, r3, #7
 800bd00:	4a03      	ldr	r2, [pc, #12]	; (800bd10 <HAL_RCC_GetPCLK1Freq+0x24>)
 800bd02:	5cd3      	ldrb	r3, [r2, r3]
 800bd04:	fa21 f303 	lsr.w	r3, r1, r3
}
 800bd08:	4618      	mov	r0, r3
 800bd0a:	bd80      	pop	{r7, pc}
 800bd0c:	40023800 	.word	0x40023800
 800bd10:	0801d7d0 	.word	0x0801d7d0

0800bd14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800bd14:	b580      	push	{r7, lr}
 800bd16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800bd18:	f7ff ffdc 	bl	800bcd4 <HAL_RCC_GetHCLKFreq>
 800bd1c:	4601      	mov	r1, r0
 800bd1e:	4b05      	ldr	r3, [pc, #20]	; (800bd34 <HAL_RCC_GetPCLK2Freq+0x20>)
 800bd20:	689b      	ldr	r3, [r3, #8]
 800bd22:	0b5b      	lsrs	r3, r3, #13
 800bd24:	f003 0307 	and.w	r3, r3, #7
 800bd28:	4a03      	ldr	r2, [pc, #12]	; (800bd38 <HAL_RCC_GetPCLK2Freq+0x24>)
 800bd2a:	5cd3      	ldrb	r3, [r2, r3]
 800bd2c:	fa21 f303 	lsr.w	r3, r1, r3
}
 800bd30:	4618      	mov	r0, r3
 800bd32:	bd80      	pop	{r7, pc}
 800bd34:	40023800 	.word	0x40023800
 800bd38:	0801d7d0 	.word	0x0801d7d0

0800bd3c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b086      	sub	sp, #24
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800bd44:	2300      	movs	r3, #0
 800bd46:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800bd48:	2300      	movs	r3, #0
 800bd4a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	f003 0301 	and.w	r3, r3, #1
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d105      	bne.n	800bd64 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d035      	beq.n	800bdd0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800bd64:	4b67      	ldr	r3, [pc, #412]	; (800bf04 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800bd66:	2200      	movs	r2, #0
 800bd68:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800bd6a:	f7fd f867 	bl	8008e3c <HAL_GetTick>
 800bd6e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800bd70:	e008      	b.n	800bd84 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800bd72:	f7fd f863 	bl	8008e3c <HAL_GetTick>
 800bd76:	4602      	mov	r2, r0
 800bd78:	697b      	ldr	r3, [r7, #20]
 800bd7a:	1ad3      	subs	r3, r2, r3
 800bd7c:	2b02      	cmp	r3, #2
 800bd7e:	d901      	bls.n	800bd84 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bd80:	2303      	movs	r3, #3
 800bd82:	e0ba      	b.n	800befa <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800bd84:	4b60      	ldr	r3, [pc, #384]	; (800bf08 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d1f0      	bne.n	800bd72 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	685b      	ldr	r3, [r3, #4]
 800bd94:	019a      	lsls	r2, r3, #6
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	689b      	ldr	r3, [r3, #8]
 800bd9a:	071b      	lsls	r3, r3, #28
 800bd9c:	495a      	ldr	r1, [pc, #360]	; (800bf08 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800bd9e:	4313      	orrs	r3, r2
 800bda0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800bda4:	4b57      	ldr	r3, [pc, #348]	; (800bf04 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800bda6:	2201      	movs	r2, #1
 800bda8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800bdaa:	f7fd f847 	bl	8008e3c <HAL_GetTick>
 800bdae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800bdb0:	e008      	b.n	800bdc4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800bdb2:	f7fd f843 	bl	8008e3c <HAL_GetTick>
 800bdb6:	4602      	mov	r2, r0
 800bdb8:	697b      	ldr	r3, [r7, #20]
 800bdba:	1ad3      	subs	r3, r2, r3
 800bdbc:	2b02      	cmp	r3, #2
 800bdbe:	d901      	bls.n	800bdc4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bdc0:	2303      	movs	r3, #3
 800bdc2:	e09a      	b.n	800befa <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800bdc4:	4b50      	ldr	r3, [pc, #320]	; (800bf08 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d0f0      	beq.n	800bdb2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	f003 0302 	and.w	r3, r3, #2
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	f000 8083 	beq.w	800bee4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800bdde:	2300      	movs	r3, #0
 800bde0:	60fb      	str	r3, [r7, #12]
 800bde2:	4b49      	ldr	r3, [pc, #292]	; (800bf08 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800bde4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bde6:	4a48      	ldr	r2, [pc, #288]	; (800bf08 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800bde8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bdec:	6413      	str	r3, [r2, #64]	; 0x40
 800bdee:	4b46      	ldr	r3, [pc, #280]	; (800bf08 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800bdf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bdf6:	60fb      	str	r3, [r7, #12]
 800bdf8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800bdfa:	4b44      	ldr	r3, [pc, #272]	; (800bf0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	4a43      	ldr	r2, [pc, #268]	; (800bf0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800be00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800be04:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800be06:	f7fd f819 	bl	8008e3c <HAL_GetTick>
 800be0a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800be0c:	e008      	b.n	800be20 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800be0e:	f7fd f815 	bl	8008e3c <HAL_GetTick>
 800be12:	4602      	mov	r2, r0
 800be14:	697b      	ldr	r3, [r7, #20]
 800be16:	1ad3      	subs	r3, r2, r3
 800be18:	2b02      	cmp	r3, #2
 800be1a:	d901      	bls.n	800be20 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800be1c:	2303      	movs	r3, #3
 800be1e:	e06c      	b.n	800befa <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800be20:	4b3a      	ldr	r3, [pc, #232]	; (800bf0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d0f0      	beq.n	800be0e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800be2c:	4b36      	ldr	r3, [pc, #216]	; (800bf08 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800be2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800be34:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800be36:	693b      	ldr	r3, [r7, #16]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d02f      	beq.n	800be9c <HAL_RCCEx_PeriphCLKConfig+0x160>
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	68db      	ldr	r3, [r3, #12]
 800be40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800be44:	693a      	ldr	r2, [r7, #16]
 800be46:	429a      	cmp	r2, r3
 800be48:	d028      	beq.n	800be9c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800be4a:	4b2f      	ldr	r3, [pc, #188]	; (800bf08 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800be4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800be52:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800be54:	4b2e      	ldr	r3, [pc, #184]	; (800bf10 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800be56:	2201      	movs	r2, #1
 800be58:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800be5a:	4b2d      	ldr	r3, [pc, #180]	; (800bf10 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800be5c:	2200      	movs	r2, #0
 800be5e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800be60:	4a29      	ldr	r2, [pc, #164]	; (800bf08 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800be62:	693b      	ldr	r3, [r7, #16]
 800be64:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800be66:	4b28      	ldr	r3, [pc, #160]	; (800bf08 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800be68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be6a:	f003 0301 	and.w	r3, r3, #1
 800be6e:	2b01      	cmp	r3, #1
 800be70:	d114      	bne.n	800be9c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800be72:	f7fc ffe3 	bl	8008e3c <HAL_GetTick>
 800be76:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800be78:	e00a      	b.n	800be90 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800be7a:	f7fc ffdf 	bl	8008e3c <HAL_GetTick>
 800be7e:	4602      	mov	r2, r0
 800be80:	697b      	ldr	r3, [r7, #20]
 800be82:	1ad3      	subs	r3, r2, r3
 800be84:	f241 3288 	movw	r2, #5000	; 0x1388
 800be88:	4293      	cmp	r3, r2
 800be8a:	d901      	bls.n	800be90 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800be8c:	2303      	movs	r3, #3
 800be8e:	e034      	b.n	800befa <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800be90:	4b1d      	ldr	r3, [pc, #116]	; (800bf08 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800be92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be94:	f003 0302 	and.w	r3, r3, #2
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d0ee      	beq.n	800be7a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	68db      	ldr	r3, [r3, #12]
 800bea0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bea4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bea8:	d10d      	bne.n	800bec6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800beaa:	4b17      	ldr	r3, [pc, #92]	; (800bf08 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800beac:	689b      	ldr	r3, [r3, #8]
 800beae:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	68db      	ldr	r3, [r3, #12]
 800beb6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800beba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bebe:	4912      	ldr	r1, [pc, #72]	; (800bf08 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800bec0:	4313      	orrs	r3, r2
 800bec2:	608b      	str	r3, [r1, #8]
 800bec4:	e005      	b.n	800bed2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800bec6:	4b10      	ldr	r3, [pc, #64]	; (800bf08 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800bec8:	689b      	ldr	r3, [r3, #8]
 800beca:	4a0f      	ldr	r2, [pc, #60]	; (800bf08 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800becc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800bed0:	6093      	str	r3, [r2, #8]
 800bed2:	4b0d      	ldr	r3, [pc, #52]	; (800bf08 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800bed4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	68db      	ldr	r3, [r3, #12]
 800beda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bede:	490a      	ldr	r1, [pc, #40]	; (800bf08 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800bee0:	4313      	orrs	r3, r2
 800bee2:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	f003 0308 	and.w	r3, r3, #8
 800beec:	2b00      	cmp	r3, #0
 800beee:	d003      	beq.n	800bef8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	7c1a      	ldrb	r2, [r3, #16]
 800bef4:	4b07      	ldr	r3, [pc, #28]	; (800bf14 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800bef6:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800bef8:	2300      	movs	r3, #0
}
 800befa:	4618      	mov	r0, r3
 800befc:	3718      	adds	r7, #24
 800befe:	46bd      	mov	sp, r7
 800bf00:	bd80      	pop	{r7, pc}
 800bf02:	bf00      	nop
 800bf04:	42470068 	.word	0x42470068
 800bf08:	40023800 	.word	0x40023800
 800bf0c:	40007000 	.word	0x40007000
 800bf10:	42470e40 	.word	0x42470e40
 800bf14:	424711e0 	.word	0x424711e0

0800bf18 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b082      	sub	sp, #8
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d101      	bne.n	800bf2a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800bf26:	2301      	movs	r3, #1
 800bf28:	e083      	b.n	800c032 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	7f5b      	ldrb	r3, [r3, #29]
 800bf2e:	b2db      	uxtb	r3, r3
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d105      	bne.n	800bf40 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	2200      	movs	r2, #0
 800bf38:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800bf3a:	6878      	ldr	r0, [r7, #4]
 800bf3c:	f7f7 f99e 	bl	800327c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	2202      	movs	r2, #2
 800bf44:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	22ca      	movs	r2, #202	; 0xca
 800bf4c:	625a      	str	r2, [r3, #36]	; 0x24
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	2253      	movs	r2, #83	; 0x53
 800bf54:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800bf56:	6878      	ldr	r0, [r7, #4]
 800bf58:	f000 faa8 	bl	800c4ac <RTC_EnterInitMode>
 800bf5c:	4603      	mov	r3, r0
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d008      	beq.n	800bf74 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	22ff      	movs	r2, #255	; 0xff
 800bf68:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	2204      	movs	r2, #4
 800bf6e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800bf70:	2301      	movs	r3, #1
 800bf72:	e05e      	b.n	800c032 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	689b      	ldr	r3, [r3, #8]
 800bf7a:	687a      	ldr	r2, [r7, #4]
 800bf7c:	6812      	ldr	r2, [r2, #0]
 800bf7e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bf82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bf86:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	6899      	ldr	r1, [r3, #8]
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	685a      	ldr	r2, [r3, #4]
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	691b      	ldr	r3, [r3, #16]
 800bf96:	431a      	orrs	r2, r3
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	695b      	ldr	r3, [r3, #20]
 800bf9c:	431a      	orrs	r2, r3
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	430a      	orrs	r2, r1
 800bfa4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	687a      	ldr	r2, [r7, #4]
 800bfac:	68d2      	ldr	r2, [r2, #12]
 800bfae:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	6919      	ldr	r1, [r3, #16]
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	689b      	ldr	r3, [r3, #8]
 800bfba:	041a      	lsls	r2, r3, #16
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	430a      	orrs	r2, r1
 800bfc2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	68da      	ldr	r2, [r3, #12]
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bfd2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	689b      	ldr	r3, [r3, #8]
 800bfda:	f003 0320 	and.w	r3, r3, #32
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d10e      	bne.n	800c000 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800bfe2:	6878      	ldr	r0, [r7, #4]
 800bfe4:	f000 fa3a 	bl	800c45c <HAL_RTC_WaitForSynchro>
 800bfe8:	4603      	mov	r3, r0
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d008      	beq.n	800c000 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	22ff      	movs	r2, #255	; 0xff
 800bff4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	2204      	movs	r2, #4
 800bffa:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800bffc:	2301      	movs	r3, #1
 800bffe:	e018      	b.n	800c032 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c00e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	699a      	ldr	r2, [r3, #24]
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	430a      	orrs	r2, r1
 800c020:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	22ff      	movs	r2, #255	; 0xff
 800c028:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	2201      	movs	r2, #1
 800c02e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800c030:	2300      	movs	r3, #0
  }
}
 800c032:	4618      	mov	r0, r3
 800c034:	3708      	adds	r7, #8
 800c036:	46bd      	mov	sp, r7
 800c038:	bd80      	pop	{r7, pc}

0800c03a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c03a:	b590      	push	{r4, r7, lr}
 800c03c:	b087      	sub	sp, #28
 800c03e:	af00      	add	r7, sp, #0
 800c040:	60f8      	str	r0, [r7, #12]
 800c042:	60b9      	str	r1, [r7, #8]
 800c044:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800c046:	2300      	movs	r3, #0
 800c048:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	7f1b      	ldrb	r3, [r3, #28]
 800c04e:	2b01      	cmp	r3, #1
 800c050:	d101      	bne.n	800c056 <HAL_RTC_SetTime+0x1c>
 800c052:	2302      	movs	r3, #2
 800c054:	e0aa      	b.n	800c1ac <HAL_RTC_SetTime+0x172>
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	2201      	movs	r2, #1
 800c05a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	2202      	movs	r2, #2
 800c060:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d126      	bne.n	800c0b6 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	689b      	ldr	r3, [r3, #8]
 800c06e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c072:	2b00      	cmp	r3, #0
 800c074:	d102      	bne.n	800c07c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800c076:	68bb      	ldr	r3, [r7, #8]
 800c078:	2200      	movs	r2, #0
 800c07a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800c07c:	68bb      	ldr	r3, [r7, #8]
 800c07e:	781b      	ldrb	r3, [r3, #0]
 800c080:	4618      	mov	r0, r3
 800c082:	f000 fa3f 	bl	800c504 <RTC_ByteToBcd2>
 800c086:	4603      	mov	r3, r0
 800c088:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800c08a:	68bb      	ldr	r3, [r7, #8]
 800c08c:	785b      	ldrb	r3, [r3, #1]
 800c08e:	4618      	mov	r0, r3
 800c090:	f000 fa38 	bl	800c504 <RTC_ByteToBcd2>
 800c094:	4603      	mov	r3, r0
 800c096:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800c098:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800c09a:	68bb      	ldr	r3, [r7, #8]
 800c09c:	789b      	ldrb	r3, [r3, #2]
 800c09e:	4618      	mov	r0, r3
 800c0a0:	f000 fa30 	bl	800c504 <RTC_ByteToBcd2>
 800c0a4:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800c0a6:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800c0aa:	68bb      	ldr	r3, [r7, #8]
 800c0ac:	78db      	ldrb	r3, [r3, #3]
 800c0ae:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800c0b0:	4313      	orrs	r3, r2
 800c0b2:	617b      	str	r3, [r7, #20]
 800c0b4:	e018      	b.n	800c0e8 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	689b      	ldr	r3, [r3, #8]
 800c0bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d102      	bne.n	800c0ca <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800c0c4:	68bb      	ldr	r3, [r7, #8]
 800c0c6:	2200      	movs	r2, #0
 800c0c8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800c0ca:	68bb      	ldr	r3, [r7, #8]
 800c0cc:	781b      	ldrb	r3, [r3, #0]
 800c0ce:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800c0d0:	68bb      	ldr	r3, [r7, #8]
 800c0d2:	785b      	ldrb	r3, [r3, #1]
 800c0d4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800c0d6:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800c0d8:	68ba      	ldr	r2, [r7, #8]
 800c0da:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800c0dc:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800c0de:	68bb      	ldr	r3, [r7, #8]
 800c0e0:	78db      	ldrb	r3, [r3, #3]
 800c0e2:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800c0e4:	4313      	orrs	r3, r2
 800c0e6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	22ca      	movs	r2, #202	; 0xca
 800c0ee:	625a      	str	r2, [r3, #36]	; 0x24
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	2253      	movs	r2, #83	; 0x53
 800c0f6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800c0f8:	68f8      	ldr	r0, [r7, #12]
 800c0fa:	f000 f9d7 	bl	800c4ac <RTC_EnterInitMode>
 800c0fe:	4603      	mov	r3, r0
 800c100:	2b00      	cmp	r3, #0
 800c102:	d00b      	beq.n	800c11c <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	22ff      	movs	r2, #255	; 0xff
 800c10a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	2204      	movs	r2, #4
 800c110:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	2200      	movs	r2, #0
 800c116:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800c118:	2301      	movs	r3, #1
 800c11a:	e047      	b.n	800c1ac <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	681a      	ldr	r2, [r3, #0]
 800c120:	697b      	ldr	r3, [r7, #20]
 800c122:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800c126:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800c12a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	689a      	ldr	r2, [r3, #8]
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c13a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	6899      	ldr	r1, [r3, #8]
 800c142:	68bb      	ldr	r3, [r7, #8]
 800c144:	68da      	ldr	r2, [r3, #12]
 800c146:	68bb      	ldr	r3, [r7, #8]
 800c148:	691b      	ldr	r3, [r3, #16]
 800c14a:	431a      	orrs	r2, r3
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	430a      	orrs	r2, r1
 800c152:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	68da      	ldr	r2, [r3, #12]
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c162:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	689b      	ldr	r3, [r3, #8]
 800c16a:	f003 0320 	and.w	r3, r3, #32
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d111      	bne.n	800c196 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c172:	68f8      	ldr	r0, [r7, #12]
 800c174:	f000 f972 	bl	800c45c <HAL_RTC_WaitForSynchro>
 800c178:	4603      	mov	r3, r0
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d00b      	beq.n	800c196 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	22ff      	movs	r2, #255	; 0xff
 800c184:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	2204      	movs	r2, #4
 800c18a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	2200      	movs	r2, #0
 800c190:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800c192:	2301      	movs	r3, #1
 800c194:	e00a      	b.n	800c1ac <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	22ff      	movs	r2, #255	; 0xff
 800c19c:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	2201      	movs	r2, #1
 800c1a2:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800c1aa:	2300      	movs	r3, #0
  }
}
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	371c      	adds	r7, #28
 800c1b0:	46bd      	mov	sp, r7
 800c1b2:	bd90      	pop	{r4, r7, pc}

0800c1b4 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b086      	sub	sp, #24
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	60f8      	str	r0, [r7, #12]
 800c1bc:	60b9      	str	r1, [r7, #8]
 800c1be:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c1ca:	68bb      	ldr	r3, [r7, #8]
 800c1cc:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	691b      	ldr	r3, [r3, #16]
 800c1d4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800c1d8:	68bb      	ldr	r3, [r7, #8]
 800c1da:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800c1e6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800c1ea:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800c1ec:	697b      	ldr	r3, [r7, #20]
 800c1ee:	0c1b      	lsrs	r3, r3, #16
 800c1f0:	b2db      	uxtb	r3, r3
 800c1f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c1f6:	b2da      	uxtb	r2, r3
 800c1f8:	68bb      	ldr	r3, [r7, #8]
 800c1fa:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800c1fc:	697b      	ldr	r3, [r7, #20]
 800c1fe:	0a1b      	lsrs	r3, r3, #8
 800c200:	b2db      	uxtb	r3, r3
 800c202:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c206:	b2da      	uxtb	r2, r3
 800c208:	68bb      	ldr	r3, [r7, #8]
 800c20a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800c20c:	697b      	ldr	r3, [r7, #20]
 800c20e:	b2db      	uxtb	r3, r3
 800c210:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c214:	b2da      	uxtb	r2, r3
 800c216:	68bb      	ldr	r3, [r7, #8]
 800c218:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800c21a:	697b      	ldr	r3, [r7, #20]
 800c21c:	0c1b      	lsrs	r3, r3, #16
 800c21e:	b2db      	uxtb	r3, r3
 800c220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c224:	b2da      	uxtb	r2, r3
 800c226:	68bb      	ldr	r3, [r7, #8]
 800c228:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d11a      	bne.n	800c266 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800c230:	68bb      	ldr	r3, [r7, #8]
 800c232:	781b      	ldrb	r3, [r3, #0]
 800c234:	4618      	mov	r0, r3
 800c236:	f000 f983 	bl	800c540 <RTC_Bcd2ToByte>
 800c23a:	4603      	mov	r3, r0
 800c23c:	461a      	mov	r2, r3
 800c23e:	68bb      	ldr	r3, [r7, #8]
 800c240:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800c242:	68bb      	ldr	r3, [r7, #8]
 800c244:	785b      	ldrb	r3, [r3, #1]
 800c246:	4618      	mov	r0, r3
 800c248:	f000 f97a 	bl	800c540 <RTC_Bcd2ToByte>
 800c24c:	4603      	mov	r3, r0
 800c24e:	461a      	mov	r2, r3
 800c250:	68bb      	ldr	r3, [r7, #8]
 800c252:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800c254:	68bb      	ldr	r3, [r7, #8]
 800c256:	789b      	ldrb	r3, [r3, #2]
 800c258:	4618      	mov	r0, r3
 800c25a:	f000 f971 	bl	800c540 <RTC_Bcd2ToByte>
 800c25e:	4603      	mov	r3, r0
 800c260:	461a      	mov	r2, r3
 800c262:	68bb      	ldr	r3, [r7, #8]
 800c264:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800c266:	2300      	movs	r3, #0
}
 800c268:	4618      	mov	r0, r3
 800c26a:	3718      	adds	r7, #24
 800c26c:	46bd      	mov	sp, r7
 800c26e:	bd80      	pop	{r7, pc}

0800c270 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c270:	b590      	push	{r4, r7, lr}
 800c272:	b087      	sub	sp, #28
 800c274:	af00      	add	r7, sp, #0
 800c276:	60f8      	str	r0, [r7, #12]
 800c278:	60b9      	str	r1, [r7, #8]
 800c27a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800c27c:	2300      	movs	r3, #0
 800c27e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	7f1b      	ldrb	r3, [r3, #28]
 800c284:	2b01      	cmp	r3, #1
 800c286:	d101      	bne.n	800c28c <HAL_RTC_SetDate+0x1c>
 800c288:	2302      	movs	r3, #2
 800c28a:	e094      	b.n	800c3b6 <HAL_RTC_SetDate+0x146>
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	2201      	movs	r2, #1
 800c290:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	2202      	movs	r2, #2
 800c296:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d10e      	bne.n	800c2bc <HAL_RTC_SetDate+0x4c>
 800c29e:	68bb      	ldr	r3, [r7, #8]
 800c2a0:	785b      	ldrb	r3, [r3, #1]
 800c2a2:	f003 0310 	and.w	r3, r3, #16
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d008      	beq.n	800c2bc <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800c2aa:	68bb      	ldr	r3, [r7, #8]
 800c2ac:	785b      	ldrb	r3, [r3, #1]
 800c2ae:	f023 0310 	bic.w	r3, r3, #16
 800c2b2:	b2db      	uxtb	r3, r3
 800c2b4:	330a      	adds	r3, #10
 800c2b6:	b2da      	uxtb	r2, r3
 800c2b8:	68bb      	ldr	r3, [r7, #8]
 800c2ba:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d11c      	bne.n	800c2fc <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800c2c2:	68bb      	ldr	r3, [r7, #8]
 800c2c4:	78db      	ldrb	r3, [r3, #3]
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	f000 f91c 	bl	800c504 <RTC_ByteToBcd2>
 800c2cc:	4603      	mov	r3, r0
 800c2ce:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800c2d0:	68bb      	ldr	r3, [r7, #8]
 800c2d2:	785b      	ldrb	r3, [r3, #1]
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	f000 f915 	bl	800c504 <RTC_ByteToBcd2>
 800c2da:	4603      	mov	r3, r0
 800c2dc:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800c2de:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800c2e0:	68bb      	ldr	r3, [r7, #8]
 800c2e2:	789b      	ldrb	r3, [r3, #2]
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	f000 f90d 	bl	800c504 <RTC_ByteToBcd2>
 800c2ea:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800c2ec:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800c2f0:	68bb      	ldr	r3, [r7, #8]
 800c2f2:	781b      	ldrb	r3, [r3, #0]
 800c2f4:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800c2f6:	4313      	orrs	r3, r2
 800c2f8:	617b      	str	r3, [r7, #20]
 800c2fa:	e00e      	b.n	800c31a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800c2fc:	68bb      	ldr	r3, [r7, #8]
 800c2fe:	78db      	ldrb	r3, [r3, #3]
 800c300:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800c302:	68bb      	ldr	r3, [r7, #8]
 800c304:	785b      	ldrb	r3, [r3, #1]
 800c306:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800c308:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800c30a:	68ba      	ldr	r2, [r7, #8]
 800c30c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800c30e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800c310:	68bb      	ldr	r3, [r7, #8]
 800c312:	781b      	ldrb	r3, [r3, #0]
 800c314:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800c316:	4313      	orrs	r3, r2
 800c318:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	22ca      	movs	r2, #202	; 0xca
 800c320:	625a      	str	r2, [r3, #36]	; 0x24
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	2253      	movs	r2, #83	; 0x53
 800c328:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800c32a:	68f8      	ldr	r0, [r7, #12]
 800c32c:	f000 f8be 	bl	800c4ac <RTC_EnterInitMode>
 800c330:	4603      	mov	r3, r0
 800c332:	2b00      	cmp	r3, #0
 800c334:	d00b      	beq.n	800c34e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	22ff      	movs	r2, #255	; 0xff
 800c33c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	2204      	movs	r2, #4
 800c342:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	2200      	movs	r2, #0
 800c348:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800c34a:	2301      	movs	r3, #1
 800c34c:	e033      	b.n	800c3b6 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	681a      	ldr	r2, [r3, #0]
 800c352:	697b      	ldr	r3, [r7, #20]
 800c354:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c358:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c35c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	68da      	ldr	r2, [r3, #12]
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c36c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	689b      	ldr	r3, [r3, #8]
 800c374:	f003 0320 	and.w	r3, r3, #32
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d111      	bne.n	800c3a0 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c37c:	68f8      	ldr	r0, [r7, #12]
 800c37e:	f000 f86d 	bl	800c45c <HAL_RTC_WaitForSynchro>
 800c382:	4603      	mov	r3, r0
 800c384:	2b00      	cmp	r3, #0
 800c386:	d00b      	beq.n	800c3a0 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	22ff      	movs	r2, #255	; 0xff
 800c38e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	2204      	movs	r2, #4
 800c394:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	2200      	movs	r2, #0
 800c39a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800c39c:	2301      	movs	r3, #1
 800c39e:	e00a      	b.n	800c3b6 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	22ff      	movs	r2, #255	; 0xff
 800c3a6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	2201      	movs	r2, #1
 800c3ac:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800c3b4:	2300      	movs	r3, #0
  }
}
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	371c      	adds	r7, #28
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	bd90      	pop	{r4, r7, pc}

0800c3be <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c3be:	b580      	push	{r7, lr}
 800c3c0:	b086      	sub	sp, #24
 800c3c2:	af00      	add	r7, sp, #0
 800c3c4:	60f8      	str	r0, [r7, #12]
 800c3c6:	60b9      	str	r1, [r7, #8]
 800c3c8:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	685b      	ldr	r3, [r3, #4]
 800c3d4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c3d8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c3dc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800c3de:	697b      	ldr	r3, [r7, #20]
 800c3e0:	0c1b      	lsrs	r3, r3, #16
 800c3e2:	b2da      	uxtb	r2, r3
 800c3e4:	68bb      	ldr	r3, [r7, #8]
 800c3e6:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800c3e8:	697b      	ldr	r3, [r7, #20]
 800c3ea:	0a1b      	lsrs	r3, r3, #8
 800c3ec:	b2db      	uxtb	r3, r3
 800c3ee:	f003 031f 	and.w	r3, r3, #31
 800c3f2:	b2da      	uxtb	r2, r3
 800c3f4:	68bb      	ldr	r3, [r7, #8]
 800c3f6:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800c3f8:	697b      	ldr	r3, [r7, #20]
 800c3fa:	b2db      	uxtb	r3, r3
 800c3fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c400:	b2da      	uxtb	r2, r3
 800c402:	68bb      	ldr	r3, [r7, #8]
 800c404:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800c406:	697b      	ldr	r3, [r7, #20]
 800c408:	0b5b      	lsrs	r3, r3, #13
 800c40a:	b2db      	uxtb	r3, r3
 800c40c:	f003 0307 	and.w	r3, r3, #7
 800c410:	b2da      	uxtb	r2, r3
 800c412:	68bb      	ldr	r3, [r7, #8]
 800c414:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d11a      	bne.n	800c452 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800c41c:	68bb      	ldr	r3, [r7, #8]
 800c41e:	78db      	ldrb	r3, [r3, #3]
 800c420:	4618      	mov	r0, r3
 800c422:	f000 f88d 	bl	800c540 <RTC_Bcd2ToByte>
 800c426:	4603      	mov	r3, r0
 800c428:	461a      	mov	r2, r3
 800c42a:	68bb      	ldr	r3, [r7, #8]
 800c42c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800c42e:	68bb      	ldr	r3, [r7, #8]
 800c430:	785b      	ldrb	r3, [r3, #1]
 800c432:	4618      	mov	r0, r3
 800c434:	f000 f884 	bl	800c540 <RTC_Bcd2ToByte>
 800c438:	4603      	mov	r3, r0
 800c43a:	461a      	mov	r2, r3
 800c43c:	68bb      	ldr	r3, [r7, #8]
 800c43e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800c440:	68bb      	ldr	r3, [r7, #8]
 800c442:	789b      	ldrb	r3, [r3, #2]
 800c444:	4618      	mov	r0, r3
 800c446:	f000 f87b 	bl	800c540 <RTC_Bcd2ToByte>
 800c44a:	4603      	mov	r3, r0
 800c44c:	461a      	mov	r2, r3
 800c44e:	68bb      	ldr	r3, [r7, #8]
 800c450:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800c452:	2300      	movs	r3, #0
}
 800c454:	4618      	mov	r0, r3
 800c456:	3718      	adds	r7, #24
 800c458:	46bd      	mov	sp, r7
 800c45a:	bd80      	pop	{r7, pc}

0800c45c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b084      	sub	sp, #16
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c464:	2300      	movs	r3, #0
 800c466:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	68da      	ldr	r2, [r3, #12]
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800c476:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c478:	f7fc fce0 	bl	8008e3c <HAL_GetTick>
 800c47c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800c47e:	e009      	b.n	800c494 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800c480:	f7fc fcdc 	bl	8008e3c <HAL_GetTick>
 800c484:	4602      	mov	r2, r0
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	1ad3      	subs	r3, r2, r3
 800c48a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c48e:	d901      	bls.n	800c494 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800c490:	2303      	movs	r3, #3
 800c492:	e007      	b.n	800c4a4 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	68db      	ldr	r3, [r3, #12]
 800c49a:	f003 0320 	and.w	r3, r3, #32
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d0ee      	beq.n	800c480 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800c4a2:	2300      	movs	r3, #0
}
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	3710      	adds	r7, #16
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	bd80      	pop	{r7, pc}

0800c4ac <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	b084      	sub	sp, #16
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	68db      	ldr	r3, [r3, #12]
 800c4be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d119      	bne.n	800c4fa <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	f04f 32ff 	mov.w	r2, #4294967295
 800c4ce:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c4d0:	f7fc fcb4 	bl	8008e3c <HAL_GetTick>
 800c4d4:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800c4d6:	e009      	b.n	800c4ec <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800c4d8:	f7fc fcb0 	bl	8008e3c <HAL_GetTick>
 800c4dc:	4602      	mov	r2, r0
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	1ad3      	subs	r3, r2, r3
 800c4e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c4e6:	d901      	bls.n	800c4ec <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800c4e8:	2303      	movs	r3, #3
 800c4ea:	e007      	b.n	800c4fc <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	68db      	ldr	r3, [r3, #12]
 800c4f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d0ee      	beq.n	800c4d8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800c4fa:	2300      	movs	r3, #0
}
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	3710      	adds	r7, #16
 800c500:	46bd      	mov	sp, r7
 800c502:	bd80      	pop	{r7, pc}

0800c504 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800c504:	b480      	push	{r7}
 800c506:	b085      	sub	sp, #20
 800c508:	af00      	add	r7, sp, #0
 800c50a:	4603      	mov	r3, r0
 800c50c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800c50e:	2300      	movs	r3, #0
 800c510:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800c512:	e005      	b.n	800c520 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	3301      	adds	r3, #1
 800c518:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800c51a:	79fb      	ldrb	r3, [r7, #7]
 800c51c:	3b0a      	subs	r3, #10
 800c51e:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 800c520:	79fb      	ldrb	r3, [r7, #7]
 800c522:	2b09      	cmp	r3, #9
 800c524:	d8f6      	bhi.n	800c514 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	b2db      	uxtb	r3, r3
 800c52a:	011b      	lsls	r3, r3, #4
 800c52c:	b2da      	uxtb	r2, r3
 800c52e:	79fb      	ldrb	r3, [r7, #7]
 800c530:	4313      	orrs	r3, r2
 800c532:	b2db      	uxtb	r3, r3
}
 800c534:	4618      	mov	r0, r3
 800c536:	3714      	adds	r7, #20
 800c538:	46bd      	mov	sp, r7
 800c53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53e:	4770      	bx	lr

0800c540 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800c540:	b480      	push	{r7}
 800c542:	b085      	sub	sp, #20
 800c544:	af00      	add	r7, sp, #0
 800c546:	4603      	mov	r3, r0
 800c548:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800c54a:	2300      	movs	r3, #0
 800c54c:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800c54e:	79fb      	ldrb	r3, [r7, #7]
 800c550:	091b      	lsrs	r3, r3, #4
 800c552:	b2db      	uxtb	r3, r3
 800c554:	461a      	mov	r2, r3
 800c556:	4613      	mov	r3, r2
 800c558:	009b      	lsls	r3, r3, #2
 800c55a:	4413      	add	r3, r2
 800c55c:	005b      	lsls	r3, r3, #1
 800c55e:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800c560:	79fb      	ldrb	r3, [r7, #7]
 800c562:	f003 030f 	and.w	r3, r3, #15
 800c566:	b2da      	uxtb	r2, r3
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	b2db      	uxtb	r3, r3
 800c56c:	4413      	add	r3, r2
 800c56e:	b2db      	uxtb	r3, r3
}
 800c570:	4618      	mov	r0, r3
 800c572:	3714      	adds	r7, #20
 800c574:	46bd      	mov	sp, r7
 800c576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c57a:	4770      	bx	lr

0800c57c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c57c:	b580      	push	{r7, lr}
 800c57e:	b082      	sub	sp, #8
 800c580:	af00      	add	r7, sp, #0
 800c582:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d101      	bne.n	800c58e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c58a:	2301      	movs	r3, #1
 800c58c:	e056      	b.n	800c63c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	2200      	movs	r2, #0
 800c592:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c59a:	b2db      	uxtb	r3, r3
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d106      	bne.n	800c5ae <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c5a8:	6878      	ldr	r0, [r7, #4]
 800c5aa:	f000 f84b 	bl	800c644 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	2202      	movs	r2, #2
 800c5b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	681a      	ldr	r2, [r3, #0]
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c5c4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	685a      	ldr	r2, [r3, #4]
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	689b      	ldr	r3, [r3, #8]
 800c5ce:	431a      	orrs	r2, r3
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	68db      	ldr	r3, [r3, #12]
 800c5d4:	431a      	orrs	r2, r3
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	691b      	ldr	r3, [r3, #16]
 800c5da:	431a      	orrs	r2, r3
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	695b      	ldr	r3, [r3, #20]
 800c5e0:	431a      	orrs	r2, r3
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	699b      	ldr	r3, [r3, #24]
 800c5e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c5ea:	431a      	orrs	r2, r3
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	69db      	ldr	r3, [r3, #28]
 800c5f0:	431a      	orrs	r2, r3
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	6a1b      	ldr	r3, [r3, #32]
 800c5f6:	ea42 0103 	orr.w	r1, r2, r3
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	430a      	orrs	r2, r1
 800c604:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	699b      	ldr	r3, [r3, #24]
 800c60a:	0c1b      	lsrs	r3, r3, #16
 800c60c:	f003 0104 	and.w	r1, r3, #4
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	430a      	orrs	r2, r1
 800c61a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	69da      	ldr	r2, [r3, #28]
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c62a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	2200      	movs	r2, #0
 800c630:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	2201      	movs	r2, #1
 800c636:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800c63a:	2300      	movs	r3, #0
}
 800c63c:	4618      	mov	r0, r3
 800c63e:	3708      	adds	r7, #8
 800c640:	46bd      	mov	sp, r7
 800c642:	bd80      	pop	{r7, pc}

0800c644 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800c644:	b480      	push	{r7}
 800c646:	b083      	sub	sp, #12
 800c648:	af00      	add	r7, sp, #0
 800c64a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 800c64c:	bf00      	nop
 800c64e:	370c      	adds	r7, #12
 800c650:	46bd      	mov	sp, r7
 800c652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c656:	4770      	bx	lr

0800c658 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b08c      	sub	sp, #48	; 0x30
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	60f8      	str	r0, [r7, #12]
 800c660:	60b9      	str	r1, [r7, #8]
 800c662:	607a      	str	r2, [r7, #4]
 800c664:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800c666:	2301      	movs	r3, #1
 800c668:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800c66a:	2300      	movs	r3, #0
 800c66c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c676:	2b01      	cmp	r3, #1
 800c678:	d101      	bne.n	800c67e <HAL_SPI_TransmitReceive+0x26>
 800c67a:	2302      	movs	r3, #2
 800c67c:	e18a      	b.n	800c994 <HAL_SPI_TransmitReceive+0x33c>
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	2201      	movs	r2, #1
 800c682:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c686:	f7fc fbd9 	bl	8008e3c <HAL_GetTick>
 800c68a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c692:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	685b      	ldr	r3, [r3, #4]
 800c69a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800c69c:	887b      	ldrh	r3, [r7, #2]
 800c69e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800c6a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c6a4:	2b01      	cmp	r3, #1
 800c6a6:	d00f      	beq.n	800c6c8 <HAL_SPI_TransmitReceive+0x70>
 800c6a8:	69fb      	ldr	r3, [r7, #28]
 800c6aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c6ae:	d107      	bne.n	800c6c0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	689b      	ldr	r3, [r3, #8]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d103      	bne.n	800c6c0 <HAL_SPI_TransmitReceive+0x68>
 800c6b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c6bc:	2b04      	cmp	r3, #4
 800c6be:	d003      	beq.n	800c6c8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800c6c0:	2302      	movs	r3, #2
 800c6c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800c6c6:	e15b      	b.n	800c980 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800c6c8:	68bb      	ldr	r3, [r7, #8]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d005      	beq.n	800c6da <HAL_SPI_TransmitReceive+0x82>
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d002      	beq.n	800c6da <HAL_SPI_TransmitReceive+0x82>
 800c6d4:	887b      	ldrh	r3, [r7, #2]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d103      	bne.n	800c6e2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800c6da:	2301      	movs	r3, #1
 800c6dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800c6e0:	e14e      	b.n	800c980 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c6e8:	b2db      	uxtb	r3, r3
 800c6ea:	2b04      	cmp	r3, #4
 800c6ec:	d003      	beq.n	800c6f6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	2205      	movs	r2, #5
 800c6f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	2200      	movs	r2, #0
 800c6fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	687a      	ldr	r2, [r7, #4]
 800c700:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	887a      	ldrh	r2, [r7, #2]
 800c706:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	887a      	ldrh	r2, [r7, #2]
 800c70c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	68ba      	ldr	r2, [r7, #8]
 800c712:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	887a      	ldrh	r2, [r7, #2]
 800c718:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	887a      	ldrh	r2, [r7, #2]
 800c71e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	2200      	movs	r2, #0
 800c724:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	2200      	movs	r2, #0
 800c72a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c736:	2b40      	cmp	r3, #64	; 0x40
 800c738:	d007      	beq.n	800c74a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	681a      	ldr	r2, [r3, #0]
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c748:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	68db      	ldr	r3, [r3, #12]
 800c74e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c752:	d178      	bne.n	800c846 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	685b      	ldr	r3, [r3, #4]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d002      	beq.n	800c762 <HAL_SPI_TransmitReceive+0x10a>
 800c75c:	8b7b      	ldrh	r3, [r7, #26]
 800c75e:	2b01      	cmp	r3, #1
 800c760:	d166      	bne.n	800c830 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c766:	881a      	ldrh	r2, [r3, #0]
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c772:	1c9a      	adds	r2, r3, #2
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c77c:	b29b      	uxth	r3, r3
 800c77e:	3b01      	subs	r3, #1
 800c780:	b29a      	uxth	r2, r3
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c786:	e053      	b.n	800c830 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	689b      	ldr	r3, [r3, #8]
 800c78e:	f003 0302 	and.w	r3, r3, #2
 800c792:	2b02      	cmp	r3, #2
 800c794:	d11b      	bne.n	800c7ce <HAL_SPI_TransmitReceive+0x176>
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c79a:	b29b      	uxth	r3, r3
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d016      	beq.n	800c7ce <HAL_SPI_TransmitReceive+0x176>
 800c7a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7a2:	2b01      	cmp	r3, #1
 800c7a4:	d113      	bne.n	800c7ce <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7aa:	881a      	ldrh	r2, [r3, #0]
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7b6:	1c9a      	adds	r2, r3, #2
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c7c0:	b29b      	uxth	r3, r3
 800c7c2:	3b01      	subs	r3, #1
 800c7c4:	b29a      	uxth	r2, r3
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	689b      	ldr	r3, [r3, #8]
 800c7d4:	f003 0301 	and.w	r3, r3, #1
 800c7d8:	2b01      	cmp	r3, #1
 800c7da:	d119      	bne.n	800c810 <HAL_SPI_TransmitReceive+0x1b8>
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c7e0:	b29b      	uxth	r3, r3
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d014      	beq.n	800c810 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	68da      	ldr	r2, [r3, #12]
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7f0:	b292      	uxth	r2, r2
 800c7f2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7f8:	1c9a      	adds	r2, r3, #2
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c802:	b29b      	uxth	r3, r3
 800c804:	3b01      	subs	r3, #1
 800c806:	b29a      	uxth	r2, r3
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c80c:	2301      	movs	r3, #1
 800c80e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800c810:	f7fc fb14 	bl	8008e3c <HAL_GetTick>
 800c814:	4602      	mov	r2, r0
 800c816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c818:	1ad3      	subs	r3, r2, r3
 800c81a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c81c:	429a      	cmp	r2, r3
 800c81e:	d807      	bhi.n	800c830 <HAL_SPI_TransmitReceive+0x1d8>
 800c820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c822:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c826:	d003      	beq.n	800c830 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800c828:	2303      	movs	r3, #3
 800c82a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800c82e:	e0a7      	b.n	800c980 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c834:	b29b      	uxth	r3, r3
 800c836:	2b00      	cmp	r3, #0
 800c838:	d1a6      	bne.n	800c788 <HAL_SPI_TransmitReceive+0x130>
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c83e:	b29b      	uxth	r3, r3
 800c840:	2b00      	cmp	r3, #0
 800c842:	d1a1      	bne.n	800c788 <HAL_SPI_TransmitReceive+0x130>
 800c844:	e07c      	b.n	800c940 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	685b      	ldr	r3, [r3, #4]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d002      	beq.n	800c854 <HAL_SPI_TransmitReceive+0x1fc>
 800c84e:	8b7b      	ldrh	r3, [r7, #26]
 800c850:	2b01      	cmp	r3, #1
 800c852:	d16b      	bne.n	800c92c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	330c      	adds	r3, #12
 800c85e:	7812      	ldrb	r2, [r2, #0]
 800c860:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c866:	1c5a      	adds	r2, r3, #1
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c870:	b29b      	uxth	r3, r3
 800c872:	3b01      	subs	r3, #1
 800c874:	b29a      	uxth	r2, r3
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c87a:	e057      	b.n	800c92c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	689b      	ldr	r3, [r3, #8]
 800c882:	f003 0302 	and.w	r3, r3, #2
 800c886:	2b02      	cmp	r3, #2
 800c888:	d11c      	bne.n	800c8c4 <HAL_SPI_TransmitReceive+0x26c>
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c88e:	b29b      	uxth	r3, r3
 800c890:	2b00      	cmp	r3, #0
 800c892:	d017      	beq.n	800c8c4 <HAL_SPI_TransmitReceive+0x26c>
 800c894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c896:	2b01      	cmp	r3, #1
 800c898:	d114      	bne.n	800c8c4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	330c      	adds	r3, #12
 800c8a4:	7812      	ldrb	r2, [r2, #0]
 800c8a6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8ac:	1c5a      	adds	r2, r3, #1
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c8b6:	b29b      	uxth	r3, r3
 800c8b8:	3b01      	subs	r3, #1
 800c8ba:	b29a      	uxth	r2, r3
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	689b      	ldr	r3, [r3, #8]
 800c8ca:	f003 0301 	and.w	r3, r3, #1
 800c8ce:	2b01      	cmp	r3, #1
 800c8d0:	d119      	bne.n	800c906 <HAL_SPI_TransmitReceive+0x2ae>
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c8d6:	b29b      	uxth	r3, r3
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d014      	beq.n	800c906 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	68da      	ldr	r2, [r3, #12]
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8e6:	b2d2      	uxtb	r2, r2
 800c8e8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8ee:	1c5a      	adds	r2, r3, #1
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c8f8:	b29b      	uxth	r3, r3
 800c8fa:	3b01      	subs	r3, #1
 800c8fc:	b29a      	uxth	r2, r3
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c902:	2301      	movs	r3, #1
 800c904:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800c906:	f7fc fa99 	bl	8008e3c <HAL_GetTick>
 800c90a:	4602      	mov	r2, r0
 800c90c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c90e:	1ad3      	subs	r3, r2, r3
 800c910:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c912:	429a      	cmp	r2, r3
 800c914:	d803      	bhi.n	800c91e <HAL_SPI_TransmitReceive+0x2c6>
 800c916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c91c:	d102      	bne.n	800c924 <HAL_SPI_TransmitReceive+0x2cc>
 800c91e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c920:	2b00      	cmp	r3, #0
 800c922:	d103      	bne.n	800c92c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800c924:	2303      	movs	r3, #3
 800c926:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800c92a:	e029      	b.n	800c980 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c930:	b29b      	uxth	r3, r3
 800c932:	2b00      	cmp	r3, #0
 800c934:	d1a2      	bne.n	800c87c <HAL_SPI_TransmitReceive+0x224>
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c93a:	b29b      	uxth	r3, r3
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d19d      	bne.n	800c87c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c942:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c944:	68f8      	ldr	r0, [r7, #12]
 800c946:	f000 f8a1 	bl	800ca8c <SPI_EndRxTxTransaction>
 800c94a:	4603      	mov	r3, r0
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d006      	beq.n	800c95e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800c950:	2301      	movs	r3, #1
 800c952:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	2220      	movs	r2, #32
 800c95a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800c95c:	e010      	b.n	800c980 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	689b      	ldr	r3, [r3, #8]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d10b      	bne.n	800c97e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c966:	2300      	movs	r3, #0
 800c968:	617b      	str	r3, [r7, #20]
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	68db      	ldr	r3, [r3, #12]
 800c970:	617b      	str	r3, [r7, #20]
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	689b      	ldr	r3, [r3, #8]
 800c978:	617b      	str	r3, [r7, #20]
 800c97a:	697b      	ldr	r3, [r7, #20]
 800c97c:	e000      	b.n	800c980 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800c97e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	2201      	movs	r2, #1
 800c984:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	2200      	movs	r2, #0
 800c98c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c990:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800c994:	4618      	mov	r0, r3
 800c996:	3730      	adds	r7, #48	; 0x30
 800c998:	46bd      	mov	sp, r7
 800c99a:	bd80      	pop	{r7, pc}

0800c99c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800c99c:	b480      	push	{r7}
 800c99e:	b083      	sub	sp, #12
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c9aa:	b2db      	uxtb	r3, r3
}
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	370c      	adds	r7, #12
 800c9b0:	46bd      	mov	sp, r7
 800c9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b6:	4770      	bx	lr

0800c9b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b084      	sub	sp, #16
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	60f8      	str	r0, [r7, #12]
 800c9c0:	60b9      	str	r1, [r7, #8]
 800c9c2:	603b      	str	r3, [r7, #0]
 800c9c4:	4613      	mov	r3, r2
 800c9c6:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c9c8:	e04c      	b.n	800ca64 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c9ca:	683b      	ldr	r3, [r7, #0]
 800c9cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9d0:	d048      	beq.n	800ca64 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800c9d2:	f7fc fa33 	bl	8008e3c <HAL_GetTick>
 800c9d6:	4602      	mov	r2, r0
 800c9d8:	69bb      	ldr	r3, [r7, #24]
 800c9da:	1ad3      	subs	r3, r2, r3
 800c9dc:	683a      	ldr	r2, [r7, #0]
 800c9de:	429a      	cmp	r2, r3
 800c9e0:	d902      	bls.n	800c9e8 <SPI_WaitFlagStateUntilTimeout+0x30>
 800c9e2:	683b      	ldr	r3, [r7, #0]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d13d      	bne.n	800ca64 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	685a      	ldr	r2, [r3, #4]
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c9f6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	685b      	ldr	r3, [r3, #4]
 800c9fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ca00:	d111      	bne.n	800ca26 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	689b      	ldr	r3, [r3, #8]
 800ca06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ca0a:	d004      	beq.n	800ca16 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	689b      	ldr	r3, [r3, #8]
 800ca10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ca14:	d107      	bne.n	800ca26 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	681a      	ldr	r2, [r3, #0]
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ca24:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ca2e:	d10f      	bne.n	800ca50 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	681a      	ldr	r2, [r3, #0]
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ca3e:	601a      	str	r2, [r3, #0]
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	681a      	ldr	r2, [r3, #0]
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ca4e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	2201      	movs	r2, #1
 800ca54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	2200      	movs	r2, #0
 800ca5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800ca60:	2303      	movs	r3, #3
 800ca62:	e00f      	b.n	800ca84 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	689a      	ldr	r2, [r3, #8]
 800ca6a:	68bb      	ldr	r3, [r7, #8]
 800ca6c:	4013      	ands	r3, r2
 800ca6e:	68ba      	ldr	r2, [r7, #8]
 800ca70:	429a      	cmp	r2, r3
 800ca72:	bf0c      	ite	eq
 800ca74:	2301      	moveq	r3, #1
 800ca76:	2300      	movne	r3, #0
 800ca78:	b2db      	uxtb	r3, r3
 800ca7a:	461a      	mov	r2, r3
 800ca7c:	79fb      	ldrb	r3, [r7, #7]
 800ca7e:	429a      	cmp	r2, r3
 800ca80:	d1a3      	bne.n	800c9ca <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800ca82:	2300      	movs	r3, #0
}
 800ca84:	4618      	mov	r0, r3
 800ca86:	3710      	adds	r7, #16
 800ca88:	46bd      	mov	sp, r7
 800ca8a:	bd80      	pop	{r7, pc}

0800ca8c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ca8c:	b580      	push	{r7, lr}
 800ca8e:	b088      	sub	sp, #32
 800ca90:	af02      	add	r7, sp, #8
 800ca92:	60f8      	str	r0, [r7, #12]
 800ca94:	60b9      	str	r1, [r7, #8]
 800ca96:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800ca98:	4b1b      	ldr	r3, [pc, #108]	; (800cb08 <SPI_EndRxTxTransaction+0x7c>)
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	4a1b      	ldr	r2, [pc, #108]	; (800cb0c <SPI_EndRxTxTransaction+0x80>)
 800ca9e:	fba2 2303 	umull	r2, r3, r2, r3
 800caa2:	0d5b      	lsrs	r3, r3, #21
 800caa4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800caa8:	fb02 f303 	mul.w	r3, r2, r3
 800caac:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	685b      	ldr	r3, [r3, #4]
 800cab2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cab6:	d112      	bne.n	800cade <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	9300      	str	r3, [sp, #0]
 800cabc:	68bb      	ldr	r3, [r7, #8]
 800cabe:	2200      	movs	r2, #0
 800cac0:	2180      	movs	r1, #128	; 0x80
 800cac2:	68f8      	ldr	r0, [r7, #12]
 800cac4:	f7ff ff78 	bl	800c9b8 <SPI_WaitFlagStateUntilTimeout>
 800cac8:	4603      	mov	r3, r0
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d016      	beq.n	800cafc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cad2:	f043 0220 	orr.w	r2, r3, #32
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800cada:	2303      	movs	r3, #3
 800cadc:	e00f      	b.n	800cafe <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800cade:	697b      	ldr	r3, [r7, #20]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d00a      	beq.n	800cafa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800cae4:	697b      	ldr	r3, [r7, #20]
 800cae6:	3b01      	subs	r3, #1
 800cae8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	689b      	ldr	r3, [r3, #8]
 800caf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800caf4:	2b80      	cmp	r3, #128	; 0x80
 800caf6:	d0f2      	beq.n	800cade <SPI_EndRxTxTransaction+0x52>
 800caf8:	e000      	b.n	800cafc <SPI_EndRxTxTransaction+0x70>
        break;
 800cafa:	bf00      	nop
  }

  return HAL_OK;
 800cafc:	2300      	movs	r3, #0
}
 800cafe:	4618      	mov	r0, r3
 800cb00:	3718      	adds	r7, #24
 800cb02:	46bd      	mov	sp, r7
 800cb04:	bd80      	pop	{r7, pc}
 800cb06:	bf00      	nop
 800cb08:	200011c4 	.word	0x200011c4
 800cb0c:	165e9f81 	.word	0x165e9f81

0800cb10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800cb10:	b580      	push	{r7, lr}
 800cb12:	b082      	sub	sp, #8
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d101      	bne.n	800cb22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800cb1e:	2301      	movs	r3, #1
 800cb20:	e01d      	b.n	800cb5e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cb28:	b2db      	uxtb	r3, r3
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d106      	bne.n	800cb3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	2200      	movs	r2, #0
 800cb32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800cb36:	6878      	ldr	r0, [r7, #4]
 800cb38:	f7f6 fbb6 	bl	80032a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	2202      	movs	r2, #2
 800cb40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681a      	ldr	r2, [r3, #0]
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	3304      	adds	r3, #4
 800cb4c:	4619      	mov	r1, r3
 800cb4e:	4610      	mov	r0, r2
 800cb50:	f000 f8c0 	bl	800ccd4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	2201      	movs	r2, #1
 800cb58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cb5c:	2300      	movs	r3, #0
}
 800cb5e:	4618      	mov	r0, r3
 800cb60:	3708      	adds	r7, #8
 800cb62:	46bd      	mov	sp, r7
 800cb64:	bd80      	pop	{r7, pc}

0800cb66 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800cb66:	b580      	push	{r7, lr}
 800cb68:	b084      	sub	sp, #16
 800cb6a:	af00      	add	r7, sp, #0
 800cb6c:	6078      	str	r0, [r7, #4]
 800cb6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cb76:	2b01      	cmp	r3, #1
 800cb78:	d101      	bne.n	800cb7e <HAL_TIM_ConfigClockSource+0x18>
 800cb7a:	2302      	movs	r3, #2
 800cb7c:	e0a6      	b.n	800cccc <HAL_TIM_ConfigClockSource+0x166>
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	2201      	movs	r2, #1
 800cb82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	2202      	movs	r2, #2
 800cb8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	689b      	ldr	r3, [r3, #8]
 800cb94:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800cb9c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cba4:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	68fa      	ldr	r2, [r7, #12]
 800cbac:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800cbae:	683b      	ldr	r3, [r7, #0]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	2b40      	cmp	r3, #64	; 0x40
 800cbb4:	d067      	beq.n	800cc86 <HAL_TIM_ConfigClockSource+0x120>
 800cbb6:	2b40      	cmp	r3, #64	; 0x40
 800cbb8:	d80b      	bhi.n	800cbd2 <HAL_TIM_ConfigClockSource+0x6c>
 800cbba:	2b10      	cmp	r3, #16
 800cbbc:	d073      	beq.n	800cca6 <HAL_TIM_ConfigClockSource+0x140>
 800cbbe:	2b10      	cmp	r3, #16
 800cbc0:	d802      	bhi.n	800cbc8 <HAL_TIM_ConfigClockSource+0x62>
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d06f      	beq.n	800cca6 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800cbc6:	e078      	b.n	800ccba <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800cbc8:	2b20      	cmp	r3, #32
 800cbca:	d06c      	beq.n	800cca6 <HAL_TIM_ConfigClockSource+0x140>
 800cbcc:	2b30      	cmp	r3, #48	; 0x30
 800cbce:	d06a      	beq.n	800cca6 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800cbd0:	e073      	b.n	800ccba <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800cbd2:	2b70      	cmp	r3, #112	; 0x70
 800cbd4:	d00d      	beq.n	800cbf2 <HAL_TIM_ConfigClockSource+0x8c>
 800cbd6:	2b70      	cmp	r3, #112	; 0x70
 800cbd8:	d804      	bhi.n	800cbe4 <HAL_TIM_ConfigClockSource+0x7e>
 800cbda:	2b50      	cmp	r3, #80	; 0x50
 800cbdc:	d033      	beq.n	800cc46 <HAL_TIM_ConfigClockSource+0xe0>
 800cbde:	2b60      	cmp	r3, #96	; 0x60
 800cbe0:	d041      	beq.n	800cc66 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800cbe2:	e06a      	b.n	800ccba <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800cbe4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cbe8:	d066      	beq.n	800ccb8 <HAL_TIM_ConfigClockSource+0x152>
 800cbea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cbee:	d017      	beq.n	800cc20 <HAL_TIM_ConfigClockSource+0xba>
      break;
 800cbf0:	e063      	b.n	800ccba <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	6818      	ldr	r0, [r3, #0]
 800cbf6:	683b      	ldr	r3, [r7, #0]
 800cbf8:	6899      	ldr	r1, [r3, #8]
 800cbfa:	683b      	ldr	r3, [r7, #0]
 800cbfc:	685a      	ldr	r2, [r3, #4]
 800cbfe:	683b      	ldr	r3, [r7, #0]
 800cc00:	68db      	ldr	r3, [r3, #12]
 800cc02:	f000 f961 	bl	800cec8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	689b      	ldr	r3, [r3, #8]
 800cc0c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800cc14:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	68fa      	ldr	r2, [r7, #12]
 800cc1c:	609a      	str	r2, [r3, #8]
      break;
 800cc1e:	e04c      	b.n	800ccba <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	6818      	ldr	r0, [r3, #0]
 800cc24:	683b      	ldr	r3, [r7, #0]
 800cc26:	6899      	ldr	r1, [r3, #8]
 800cc28:	683b      	ldr	r3, [r7, #0]
 800cc2a:	685a      	ldr	r2, [r3, #4]
 800cc2c:	683b      	ldr	r3, [r7, #0]
 800cc2e:	68db      	ldr	r3, [r3, #12]
 800cc30:	f000 f94a 	bl	800cec8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	689a      	ldr	r2, [r3, #8]
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cc42:	609a      	str	r2, [r3, #8]
      break;
 800cc44:	e039      	b.n	800ccba <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	6818      	ldr	r0, [r3, #0]
 800cc4a:	683b      	ldr	r3, [r7, #0]
 800cc4c:	6859      	ldr	r1, [r3, #4]
 800cc4e:	683b      	ldr	r3, [r7, #0]
 800cc50:	68db      	ldr	r3, [r3, #12]
 800cc52:	461a      	mov	r2, r3
 800cc54:	f000 f8be 	bl	800cdd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	2150      	movs	r1, #80	; 0x50
 800cc5e:	4618      	mov	r0, r3
 800cc60:	f000 f917 	bl	800ce92 <TIM_ITRx_SetConfig>
      break;
 800cc64:	e029      	b.n	800ccba <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	6818      	ldr	r0, [r3, #0]
 800cc6a:	683b      	ldr	r3, [r7, #0]
 800cc6c:	6859      	ldr	r1, [r3, #4]
 800cc6e:	683b      	ldr	r3, [r7, #0]
 800cc70:	68db      	ldr	r3, [r3, #12]
 800cc72:	461a      	mov	r2, r3
 800cc74:	f000 f8dd 	bl	800ce32 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	2160      	movs	r1, #96	; 0x60
 800cc7e:	4618      	mov	r0, r3
 800cc80:	f000 f907 	bl	800ce92 <TIM_ITRx_SetConfig>
      break;
 800cc84:	e019      	b.n	800ccba <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	6818      	ldr	r0, [r3, #0]
 800cc8a:	683b      	ldr	r3, [r7, #0]
 800cc8c:	6859      	ldr	r1, [r3, #4]
 800cc8e:	683b      	ldr	r3, [r7, #0]
 800cc90:	68db      	ldr	r3, [r3, #12]
 800cc92:	461a      	mov	r2, r3
 800cc94:	f000 f89e 	bl	800cdd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	2140      	movs	r1, #64	; 0x40
 800cc9e:	4618      	mov	r0, r3
 800cca0:	f000 f8f7 	bl	800ce92 <TIM_ITRx_SetConfig>
      break;
 800cca4:	e009      	b.n	800ccba <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	681a      	ldr	r2, [r3, #0]
 800ccaa:	683b      	ldr	r3, [r7, #0]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	4619      	mov	r1, r3
 800ccb0:	4610      	mov	r0, r2
 800ccb2:	f000 f8ee 	bl	800ce92 <TIM_ITRx_SetConfig>
      break;
 800ccb6:	e000      	b.n	800ccba <HAL_TIM_ConfigClockSource+0x154>
      break;
 800ccb8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	2201      	movs	r2, #1
 800ccbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	2200      	movs	r2, #0
 800ccc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ccca:	2300      	movs	r3, #0
}
 800cccc:	4618      	mov	r0, r3
 800ccce:	3710      	adds	r7, #16
 800ccd0:	46bd      	mov	sp, r7
 800ccd2:	bd80      	pop	{r7, pc}

0800ccd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ccd4:	b480      	push	{r7}
 800ccd6:	b085      	sub	sp, #20
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	6078      	str	r0, [r7, #4]
 800ccdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	4a34      	ldr	r2, [pc, #208]	; (800cdb8 <TIM_Base_SetConfig+0xe4>)
 800cce8:	4293      	cmp	r3, r2
 800ccea:	d00f      	beq.n	800cd0c <TIM_Base_SetConfig+0x38>
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ccf2:	d00b      	beq.n	800cd0c <TIM_Base_SetConfig+0x38>
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	4a31      	ldr	r2, [pc, #196]	; (800cdbc <TIM_Base_SetConfig+0xe8>)
 800ccf8:	4293      	cmp	r3, r2
 800ccfa:	d007      	beq.n	800cd0c <TIM_Base_SetConfig+0x38>
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	4a30      	ldr	r2, [pc, #192]	; (800cdc0 <TIM_Base_SetConfig+0xec>)
 800cd00:	4293      	cmp	r3, r2
 800cd02:	d003      	beq.n	800cd0c <TIM_Base_SetConfig+0x38>
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	4a2f      	ldr	r2, [pc, #188]	; (800cdc4 <TIM_Base_SetConfig+0xf0>)
 800cd08:	4293      	cmp	r3, r2
 800cd0a:	d108      	bne.n	800cd1e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cd12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cd14:	683b      	ldr	r3, [r7, #0]
 800cd16:	685b      	ldr	r3, [r3, #4]
 800cd18:	68fa      	ldr	r2, [r7, #12]
 800cd1a:	4313      	orrs	r3, r2
 800cd1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	4a25      	ldr	r2, [pc, #148]	; (800cdb8 <TIM_Base_SetConfig+0xe4>)
 800cd22:	4293      	cmp	r3, r2
 800cd24:	d01b      	beq.n	800cd5e <TIM_Base_SetConfig+0x8a>
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd2c:	d017      	beq.n	800cd5e <TIM_Base_SetConfig+0x8a>
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	4a22      	ldr	r2, [pc, #136]	; (800cdbc <TIM_Base_SetConfig+0xe8>)
 800cd32:	4293      	cmp	r3, r2
 800cd34:	d013      	beq.n	800cd5e <TIM_Base_SetConfig+0x8a>
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	4a21      	ldr	r2, [pc, #132]	; (800cdc0 <TIM_Base_SetConfig+0xec>)
 800cd3a:	4293      	cmp	r3, r2
 800cd3c:	d00f      	beq.n	800cd5e <TIM_Base_SetConfig+0x8a>
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	4a20      	ldr	r2, [pc, #128]	; (800cdc4 <TIM_Base_SetConfig+0xf0>)
 800cd42:	4293      	cmp	r3, r2
 800cd44:	d00b      	beq.n	800cd5e <TIM_Base_SetConfig+0x8a>
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	4a1f      	ldr	r2, [pc, #124]	; (800cdc8 <TIM_Base_SetConfig+0xf4>)
 800cd4a:	4293      	cmp	r3, r2
 800cd4c:	d007      	beq.n	800cd5e <TIM_Base_SetConfig+0x8a>
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	4a1e      	ldr	r2, [pc, #120]	; (800cdcc <TIM_Base_SetConfig+0xf8>)
 800cd52:	4293      	cmp	r3, r2
 800cd54:	d003      	beq.n	800cd5e <TIM_Base_SetConfig+0x8a>
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	4a1d      	ldr	r2, [pc, #116]	; (800cdd0 <TIM_Base_SetConfig+0xfc>)
 800cd5a:	4293      	cmp	r3, r2
 800cd5c:	d108      	bne.n	800cd70 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cd64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cd66:	683b      	ldr	r3, [r7, #0]
 800cd68:	68db      	ldr	r3, [r3, #12]
 800cd6a:	68fa      	ldr	r2, [r7, #12]
 800cd6c:	4313      	orrs	r3, r2
 800cd6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cd76:	683b      	ldr	r3, [r7, #0]
 800cd78:	695b      	ldr	r3, [r3, #20]
 800cd7a:	4313      	orrs	r3, r2
 800cd7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	68fa      	ldr	r2, [r7, #12]
 800cd82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cd84:	683b      	ldr	r3, [r7, #0]
 800cd86:	689a      	ldr	r2, [r3, #8]
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cd8c:	683b      	ldr	r3, [r7, #0]
 800cd8e:	681a      	ldr	r2, [r3, #0]
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	4a08      	ldr	r2, [pc, #32]	; (800cdb8 <TIM_Base_SetConfig+0xe4>)
 800cd98:	4293      	cmp	r3, r2
 800cd9a:	d103      	bne.n	800cda4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cd9c:	683b      	ldr	r3, [r7, #0]
 800cd9e:	691a      	ldr	r2, [r3, #16]
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	2201      	movs	r2, #1
 800cda8:	615a      	str	r2, [r3, #20]
}
 800cdaa:	bf00      	nop
 800cdac:	3714      	adds	r7, #20
 800cdae:	46bd      	mov	sp, r7
 800cdb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb4:	4770      	bx	lr
 800cdb6:	bf00      	nop
 800cdb8:	40010000 	.word	0x40010000
 800cdbc:	40000400 	.word	0x40000400
 800cdc0:	40000800 	.word	0x40000800
 800cdc4:	40000c00 	.word	0x40000c00
 800cdc8:	40014000 	.word	0x40014000
 800cdcc:	40014400 	.word	0x40014400
 800cdd0:	40014800 	.word	0x40014800

0800cdd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cdd4:	b480      	push	{r7}
 800cdd6:	b087      	sub	sp, #28
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	60f8      	str	r0, [r7, #12]
 800cddc:	60b9      	str	r1, [r7, #8]
 800cdde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	6a1b      	ldr	r3, [r3, #32]
 800cde4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	6a1b      	ldr	r3, [r3, #32]
 800cdea:	f023 0201 	bic.w	r2, r3, #1
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	699b      	ldr	r3, [r3, #24]
 800cdf6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cdf8:	693b      	ldr	r3, [r7, #16]
 800cdfa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cdfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	011b      	lsls	r3, r3, #4
 800ce04:	693a      	ldr	r2, [r7, #16]
 800ce06:	4313      	orrs	r3, r2
 800ce08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ce0a:	697b      	ldr	r3, [r7, #20]
 800ce0c:	f023 030a 	bic.w	r3, r3, #10
 800ce10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ce12:	697a      	ldr	r2, [r7, #20]
 800ce14:	68bb      	ldr	r3, [r7, #8]
 800ce16:	4313      	orrs	r3, r2
 800ce18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	693a      	ldr	r2, [r7, #16]
 800ce1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	697a      	ldr	r2, [r7, #20]
 800ce24:	621a      	str	r2, [r3, #32]
}
 800ce26:	bf00      	nop
 800ce28:	371c      	adds	r7, #28
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce30:	4770      	bx	lr

0800ce32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ce32:	b480      	push	{r7}
 800ce34:	b087      	sub	sp, #28
 800ce36:	af00      	add	r7, sp, #0
 800ce38:	60f8      	str	r0, [r7, #12]
 800ce3a:	60b9      	str	r1, [r7, #8]
 800ce3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	6a1b      	ldr	r3, [r3, #32]
 800ce42:	f023 0210 	bic.w	r2, r3, #16
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	699b      	ldr	r3, [r3, #24]
 800ce4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	6a1b      	ldr	r3, [r3, #32]
 800ce54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ce56:	697b      	ldr	r3, [r7, #20]
 800ce58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ce5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	031b      	lsls	r3, r3, #12
 800ce62:	697a      	ldr	r2, [r7, #20]
 800ce64:	4313      	orrs	r3, r2
 800ce66:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ce68:	693b      	ldr	r3, [r7, #16]
 800ce6a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ce6e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ce70:	68bb      	ldr	r3, [r7, #8]
 800ce72:	011b      	lsls	r3, r3, #4
 800ce74:	693a      	ldr	r2, [r7, #16]
 800ce76:	4313      	orrs	r3, r2
 800ce78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	697a      	ldr	r2, [r7, #20]
 800ce7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	693a      	ldr	r2, [r7, #16]
 800ce84:	621a      	str	r2, [r3, #32]
}
 800ce86:	bf00      	nop
 800ce88:	371c      	adds	r7, #28
 800ce8a:	46bd      	mov	sp, r7
 800ce8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce90:	4770      	bx	lr

0800ce92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ce92:	b480      	push	{r7}
 800ce94:	b085      	sub	sp, #20
 800ce96:	af00      	add	r7, sp, #0
 800ce98:	6078      	str	r0, [r7, #4]
 800ce9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	689b      	ldr	r3, [r3, #8]
 800cea0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cea8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ceaa:	683a      	ldr	r2, [r7, #0]
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	4313      	orrs	r3, r2
 800ceb0:	f043 0307 	orr.w	r3, r3, #7
 800ceb4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	68fa      	ldr	r2, [r7, #12]
 800ceba:	609a      	str	r2, [r3, #8]
}
 800cebc:	bf00      	nop
 800cebe:	3714      	adds	r7, #20
 800cec0:	46bd      	mov	sp, r7
 800cec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec6:	4770      	bx	lr

0800cec8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cec8:	b480      	push	{r7}
 800ceca:	b087      	sub	sp, #28
 800cecc:	af00      	add	r7, sp, #0
 800cece:	60f8      	str	r0, [r7, #12]
 800ced0:	60b9      	str	r1, [r7, #8]
 800ced2:	607a      	str	r2, [r7, #4]
 800ced4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	689b      	ldr	r3, [r3, #8]
 800ceda:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cedc:	697b      	ldr	r3, [r7, #20]
 800cede:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cee2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cee4:	683b      	ldr	r3, [r7, #0]
 800cee6:	021a      	lsls	r2, r3, #8
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	431a      	orrs	r2, r3
 800ceec:	68bb      	ldr	r3, [r7, #8]
 800ceee:	4313      	orrs	r3, r2
 800cef0:	697a      	ldr	r2, [r7, #20]
 800cef2:	4313      	orrs	r3, r2
 800cef4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	697a      	ldr	r2, [r7, #20]
 800cefa:	609a      	str	r2, [r3, #8]
}
 800cefc:	bf00      	nop
 800cefe:	371c      	adds	r7, #28
 800cf00:	46bd      	mov	sp, r7
 800cf02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf06:	4770      	bx	lr

0800cf08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cf08:	b480      	push	{r7}
 800cf0a:	b085      	sub	sp, #20
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
 800cf10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cf18:	2b01      	cmp	r3, #1
 800cf1a:	d101      	bne.n	800cf20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cf1c:	2302      	movs	r3, #2
 800cf1e:	e050      	b.n	800cfc2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	2201      	movs	r2, #1
 800cf24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	2202      	movs	r2, #2
 800cf2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	685b      	ldr	r3, [r3, #4]
 800cf36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	689b      	ldr	r3, [r3, #8]
 800cf3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cf46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cf48:	683b      	ldr	r3, [r7, #0]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	68fa      	ldr	r2, [r7, #12]
 800cf4e:	4313      	orrs	r3, r2
 800cf50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	68fa      	ldr	r2, [r7, #12]
 800cf58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	4a1c      	ldr	r2, [pc, #112]	; (800cfd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800cf60:	4293      	cmp	r3, r2
 800cf62:	d018      	beq.n	800cf96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf6c:	d013      	beq.n	800cf96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	4a18      	ldr	r2, [pc, #96]	; (800cfd4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800cf74:	4293      	cmp	r3, r2
 800cf76:	d00e      	beq.n	800cf96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	4a16      	ldr	r2, [pc, #88]	; (800cfd8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800cf7e:	4293      	cmp	r3, r2
 800cf80:	d009      	beq.n	800cf96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	4a15      	ldr	r2, [pc, #84]	; (800cfdc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800cf88:	4293      	cmp	r3, r2
 800cf8a:	d004      	beq.n	800cf96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	4a13      	ldr	r2, [pc, #76]	; (800cfe0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800cf92:	4293      	cmp	r3, r2
 800cf94:	d10c      	bne.n	800cfb0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cf96:	68bb      	ldr	r3, [r7, #8]
 800cf98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cf9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cf9e:	683b      	ldr	r3, [r7, #0]
 800cfa0:	685b      	ldr	r3, [r3, #4]
 800cfa2:	68ba      	ldr	r2, [r7, #8]
 800cfa4:	4313      	orrs	r3, r2
 800cfa6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	68ba      	ldr	r2, [r7, #8]
 800cfae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	2201      	movs	r2, #1
 800cfb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	2200      	movs	r2, #0
 800cfbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cfc0:	2300      	movs	r3, #0
}
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	3714      	adds	r7, #20
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfcc:	4770      	bx	lr
 800cfce:	bf00      	nop
 800cfd0:	40010000 	.word	0x40010000
 800cfd4:	40000400 	.word	0x40000400
 800cfd8:	40000800 	.word	0x40000800
 800cfdc:	40000c00 	.word	0x40000c00
 800cfe0:	40014000 	.word	0x40014000

0800cfe4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	b082      	sub	sp, #8
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d101      	bne.n	800cff6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cff2:	2301      	movs	r3, #1
 800cff4:	e03f      	b.n	800d076 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800cffc:	b2db      	uxtb	r3, r3
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d106      	bne.n	800d010 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	2200      	movs	r2, #0
 800d006:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d00a:	6878      	ldr	r0, [r7, #4]
 800d00c:	f000 f837 	bl	800d07e <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	2224      	movs	r2, #36	; 0x24
 800d014:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	68da      	ldr	r2, [r3, #12]
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d026:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800d028:	6878      	ldr	r0, [r7, #4]
 800d02a:	f000 f915 	bl	800d258 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	691a      	ldr	r2, [r3, #16]
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d03c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	695a      	ldr	r2, [r3, #20]
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d04c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	68da      	ldr	r2, [r3, #12]
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d05c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	2200      	movs	r2, #0
 800d062:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	2220      	movs	r2, #32
 800d068:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	2220      	movs	r2, #32
 800d070:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800d074:	2300      	movs	r3, #0
}
 800d076:	4618      	mov	r0, r3
 800d078:	3708      	adds	r7, #8
 800d07a:	46bd      	mov	sp, r7
 800d07c:	bd80      	pop	{r7, pc}

0800d07e <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800d07e:	b480      	push	{r7}
 800d080:	b083      	sub	sp, #12
 800d082:	af00      	add	r7, sp, #0
 800d084:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 800d086:	bf00      	nop
 800d088:	370c      	adds	r7, #12
 800d08a:	46bd      	mov	sp, r7
 800d08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d090:	4770      	bx	lr

0800d092 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d092:	b580      	push	{r7, lr}
 800d094:	b088      	sub	sp, #32
 800d096:	af02      	add	r7, sp, #8
 800d098:	60f8      	str	r0, [r7, #12]
 800d09a:	60b9      	str	r1, [r7, #8]
 800d09c:	603b      	str	r3, [r7, #0]
 800d09e:	4613      	mov	r3, r2
 800d0a0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800d0a2:	2300      	movs	r3, #0
 800d0a4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d0ac:	b2db      	uxtb	r3, r3
 800d0ae:	2b20      	cmp	r3, #32
 800d0b0:	f040 8083 	bne.w	800d1ba <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800d0b4:	68bb      	ldr	r3, [r7, #8]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d002      	beq.n	800d0c0 <HAL_UART_Transmit+0x2e>
 800d0ba:	88fb      	ldrh	r3, [r7, #6]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d101      	bne.n	800d0c4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800d0c0:	2301      	movs	r3, #1
 800d0c2:	e07b      	b.n	800d1bc <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d0ca:	2b01      	cmp	r3, #1
 800d0cc:	d101      	bne.n	800d0d2 <HAL_UART_Transmit+0x40>
 800d0ce:	2302      	movs	r3, #2
 800d0d0:	e074      	b.n	800d1bc <HAL_UART_Transmit+0x12a>
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	2201      	movs	r2, #1
 800d0d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	2200      	movs	r2, #0
 800d0de:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	2221      	movs	r2, #33	; 0x21
 800d0e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800d0e8:	f7fb fea8 	bl	8008e3c <HAL_GetTick>
 800d0ec:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	88fa      	ldrh	r2, [r7, #6]
 800d0f2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	88fa      	ldrh	r2, [r7, #6]
 800d0f8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	2200      	movs	r2, #0
 800d0fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800d102:	e042      	b.n	800d18a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d108:	b29b      	uxth	r3, r3
 800d10a:	3b01      	subs	r3, #1
 800d10c:	b29a      	uxth	r2, r3
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	689b      	ldr	r3, [r3, #8]
 800d116:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d11a:	d122      	bne.n	800d162 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d11c:	683b      	ldr	r3, [r7, #0]
 800d11e:	9300      	str	r3, [sp, #0]
 800d120:	697b      	ldr	r3, [r7, #20]
 800d122:	2200      	movs	r2, #0
 800d124:	2180      	movs	r1, #128	; 0x80
 800d126:	68f8      	ldr	r0, [r7, #12]
 800d128:	f000 f84c 	bl	800d1c4 <UART_WaitOnFlagUntilTimeout>
 800d12c:	4603      	mov	r3, r0
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d001      	beq.n	800d136 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800d132:	2303      	movs	r3, #3
 800d134:	e042      	b.n	800d1bc <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800d136:	68bb      	ldr	r3, [r7, #8]
 800d138:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800d13a:	693b      	ldr	r3, [r7, #16]
 800d13c:	881b      	ldrh	r3, [r3, #0]
 800d13e:	461a      	mov	r2, r3
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d148:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	691b      	ldr	r3, [r3, #16]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d103      	bne.n	800d15a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800d152:	68bb      	ldr	r3, [r7, #8]
 800d154:	3302      	adds	r3, #2
 800d156:	60bb      	str	r3, [r7, #8]
 800d158:	e017      	b.n	800d18a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800d15a:	68bb      	ldr	r3, [r7, #8]
 800d15c:	3301      	adds	r3, #1
 800d15e:	60bb      	str	r3, [r7, #8]
 800d160:	e013      	b.n	800d18a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d162:	683b      	ldr	r3, [r7, #0]
 800d164:	9300      	str	r3, [sp, #0]
 800d166:	697b      	ldr	r3, [r7, #20]
 800d168:	2200      	movs	r2, #0
 800d16a:	2180      	movs	r1, #128	; 0x80
 800d16c:	68f8      	ldr	r0, [r7, #12]
 800d16e:	f000 f829 	bl	800d1c4 <UART_WaitOnFlagUntilTimeout>
 800d172:	4603      	mov	r3, r0
 800d174:	2b00      	cmp	r3, #0
 800d176:	d001      	beq.n	800d17c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800d178:	2303      	movs	r3, #3
 800d17a:	e01f      	b.n	800d1bc <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800d17c:	68bb      	ldr	r3, [r7, #8]
 800d17e:	1c5a      	adds	r2, r3, #1
 800d180:	60ba      	str	r2, [r7, #8]
 800d182:	781a      	ldrb	r2, [r3, #0]
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d18e:	b29b      	uxth	r3, r3
 800d190:	2b00      	cmp	r3, #0
 800d192:	d1b7      	bne.n	800d104 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d194:	683b      	ldr	r3, [r7, #0]
 800d196:	9300      	str	r3, [sp, #0]
 800d198:	697b      	ldr	r3, [r7, #20]
 800d19a:	2200      	movs	r2, #0
 800d19c:	2140      	movs	r1, #64	; 0x40
 800d19e:	68f8      	ldr	r0, [r7, #12]
 800d1a0:	f000 f810 	bl	800d1c4 <UART_WaitOnFlagUntilTimeout>
 800d1a4:	4603      	mov	r3, r0
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d001      	beq.n	800d1ae <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800d1aa:	2303      	movs	r3, #3
 800d1ac:	e006      	b.n	800d1bc <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	2220      	movs	r2, #32
 800d1b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	e000      	b.n	800d1bc <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800d1ba:	2302      	movs	r3, #2
  }
}
 800d1bc:	4618      	mov	r0, r3
 800d1be:	3718      	adds	r7, #24
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	bd80      	pop	{r7, pc}

0800d1c4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800d1c4:	b580      	push	{r7, lr}
 800d1c6:	b084      	sub	sp, #16
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	60f8      	str	r0, [r7, #12]
 800d1cc:	60b9      	str	r1, [r7, #8]
 800d1ce:	603b      	str	r3, [r7, #0]
 800d1d0:	4613      	mov	r3, r2
 800d1d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d1d4:	e02c      	b.n	800d230 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d1d6:	69bb      	ldr	r3, [r7, #24]
 800d1d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1dc:	d028      	beq.n	800d230 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800d1de:	69bb      	ldr	r3, [r7, #24]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d007      	beq.n	800d1f4 <UART_WaitOnFlagUntilTimeout+0x30>
 800d1e4:	f7fb fe2a 	bl	8008e3c <HAL_GetTick>
 800d1e8:	4602      	mov	r2, r0
 800d1ea:	683b      	ldr	r3, [r7, #0]
 800d1ec:	1ad3      	subs	r3, r2, r3
 800d1ee:	69ba      	ldr	r2, [r7, #24]
 800d1f0:	429a      	cmp	r2, r3
 800d1f2:	d21d      	bcs.n	800d230 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	68da      	ldr	r2, [r3, #12]
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800d202:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	695a      	ldr	r2, [r3, #20]
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	f022 0201 	bic.w	r2, r2, #1
 800d212:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	2220      	movs	r2, #32
 800d218:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	2220      	movs	r2, #32
 800d220:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	2200      	movs	r2, #0
 800d228:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800d22c:	2303      	movs	r3, #3
 800d22e:	e00f      	b.n	800d250 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	681a      	ldr	r2, [r3, #0]
 800d236:	68bb      	ldr	r3, [r7, #8]
 800d238:	4013      	ands	r3, r2
 800d23a:	68ba      	ldr	r2, [r7, #8]
 800d23c:	429a      	cmp	r2, r3
 800d23e:	bf0c      	ite	eq
 800d240:	2301      	moveq	r3, #1
 800d242:	2300      	movne	r3, #0
 800d244:	b2db      	uxtb	r3, r3
 800d246:	461a      	mov	r2, r3
 800d248:	79fb      	ldrb	r3, [r7, #7]
 800d24a:	429a      	cmp	r2, r3
 800d24c:	d0c3      	beq.n	800d1d6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800d24e:	2300      	movs	r3, #0
}
 800d250:	4618      	mov	r0, r3
 800d252:	3710      	adds	r7, #16
 800d254:	46bd      	mov	sp, r7
 800d256:	bd80      	pop	{r7, pc}

0800d258 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d25c:	b085      	sub	sp, #20
 800d25e:	af00      	add	r7, sp, #0
 800d260:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	691b      	ldr	r3, [r3, #16]
 800d268:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	68da      	ldr	r2, [r3, #12]
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	430a      	orrs	r2, r1
 800d276:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	689a      	ldr	r2, [r3, #8]
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	691b      	ldr	r3, [r3, #16]
 800d280:	431a      	orrs	r2, r3
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	695b      	ldr	r3, [r3, #20]
 800d286:	431a      	orrs	r2, r3
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	69db      	ldr	r3, [r3, #28]
 800d28c:	4313      	orrs	r3, r2
 800d28e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	68db      	ldr	r3, [r3, #12]
 800d296:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800d29a:	f023 030c 	bic.w	r3, r3, #12
 800d29e:	687a      	ldr	r2, [r7, #4]
 800d2a0:	6812      	ldr	r2, [r2, #0]
 800d2a2:	68f9      	ldr	r1, [r7, #12]
 800d2a4:	430b      	orrs	r3, r1
 800d2a6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	695b      	ldr	r3, [r3, #20]
 800d2ae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	699a      	ldr	r2, [r3, #24]
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	430a      	orrs	r2, r1
 800d2bc:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	69db      	ldr	r3, [r3, #28]
 800d2c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d2c6:	f040 818b 	bne.w	800d5e0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	4ac1      	ldr	r2, [pc, #772]	; (800d5d4 <UART_SetConfig+0x37c>)
 800d2d0:	4293      	cmp	r3, r2
 800d2d2:	d005      	beq.n	800d2e0 <UART_SetConfig+0x88>
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	4abf      	ldr	r2, [pc, #764]	; (800d5d8 <UART_SetConfig+0x380>)
 800d2da:	4293      	cmp	r3, r2
 800d2dc:	f040 80bd 	bne.w	800d45a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800d2e0:	f7fe fd18 	bl	800bd14 <HAL_RCC_GetPCLK2Freq>
 800d2e4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d2e6:	68bb      	ldr	r3, [r7, #8]
 800d2e8:	461d      	mov	r5, r3
 800d2ea:	f04f 0600 	mov.w	r6, #0
 800d2ee:	46a8      	mov	r8, r5
 800d2f0:	46b1      	mov	r9, r6
 800d2f2:	eb18 0308 	adds.w	r3, r8, r8
 800d2f6:	eb49 0409 	adc.w	r4, r9, r9
 800d2fa:	4698      	mov	r8, r3
 800d2fc:	46a1      	mov	r9, r4
 800d2fe:	eb18 0805 	adds.w	r8, r8, r5
 800d302:	eb49 0906 	adc.w	r9, r9, r6
 800d306:	f04f 0100 	mov.w	r1, #0
 800d30a:	f04f 0200 	mov.w	r2, #0
 800d30e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800d312:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800d316:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800d31a:	4688      	mov	r8, r1
 800d31c:	4691      	mov	r9, r2
 800d31e:	eb18 0005 	adds.w	r0, r8, r5
 800d322:	eb49 0106 	adc.w	r1, r9, r6
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	685b      	ldr	r3, [r3, #4]
 800d32a:	461d      	mov	r5, r3
 800d32c:	f04f 0600 	mov.w	r6, #0
 800d330:	196b      	adds	r3, r5, r5
 800d332:	eb46 0406 	adc.w	r4, r6, r6
 800d336:	461a      	mov	r2, r3
 800d338:	4623      	mov	r3, r4
 800d33a:	f7f3 fc8d 	bl	8000c58 <__aeabi_uldivmod>
 800d33e:	4603      	mov	r3, r0
 800d340:	460c      	mov	r4, r1
 800d342:	461a      	mov	r2, r3
 800d344:	4ba5      	ldr	r3, [pc, #660]	; (800d5dc <UART_SetConfig+0x384>)
 800d346:	fba3 2302 	umull	r2, r3, r3, r2
 800d34a:	095b      	lsrs	r3, r3, #5
 800d34c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800d350:	68bb      	ldr	r3, [r7, #8]
 800d352:	461d      	mov	r5, r3
 800d354:	f04f 0600 	mov.w	r6, #0
 800d358:	46a9      	mov	r9, r5
 800d35a:	46b2      	mov	sl, r6
 800d35c:	eb19 0309 	adds.w	r3, r9, r9
 800d360:	eb4a 040a 	adc.w	r4, sl, sl
 800d364:	4699      	mov	r9, r3
 800d366:	46a2      	mov	sl, r4
 800d368:	eb19 0905 	adds.w	r9, r9, r5
 800d36c:	eb4a 0a06 	adc.w	sl, sl, r6
 800d370:	f04f 0100 	mov.w	r1, #0
 800d374:	f04f 0200 	mov.w	r2, #0
 800d378:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d37c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d380:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d384:	4689      	mov	r9, r1
 800d386:	4692      	mov	sl, r2
 800d388:	eb19 0005 	adds.w	r0, r9, r5
 800d38c:	eb4a 0106 	adc.w	r1, sl, r6
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	685b      	ldr	r3, [r3, #4]
 800d394:	461d      	mov	r5, r3
 800d396:	f04f 0600 	mov.w	r6, #0
 800d39a:	196b      	adds	r3, r5, r5
 800d39c:	eb46 0406 	adc.w	r4, r6, r6
 800d3a0:	461a      	mov	r2, r3
 800d3a2:	4623      	mov	r3, r4
 800d3a4:	f7f3 fc58 	bl	8000c58 <__aeabi_uldivmod>
 800d3a8:	4603      	mov	r3, r0
 800d3aa:	460c      	mov	r4, r1
 800d3ac:	461a      	mov	r2, r3
 800d3ae:	4b8b      	ldr	r3, [pc, #556]	; (800d5dc <UART_SetConfig+0x384>)
 800d3b0:	fba3 1302 	umull	r1, r3, r3, r2
 800d3b4:	095b      	lsrs	r3, r3, #5
 800d3b6:	2164      	movs	r1, #100	; 0x64
 800d3b8:	fb01 f303 	mul.w	r3, r1, r3
 800d3bc:	1ad3      	subs	r3, r2, r3
 800d3be:	00db      	lsls	r3, r3, #3
 800d3c0:	3332      	adds	r3, #50	; 0x32
 800d3c2:	4a86      	ldr	r2, [pc, #536]	; (800d5dc <UART_SetConfig+0x384>)
 800d3c4:	fba2 2303 	umull	r2, r3, r2, r3
 800d3c8:	095b      	lsrs	r3, r3, #5
 800d3ca:	005b      	lsls	r3, r3, #1
 800d3cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d3d0:	4498      	add	r8, r3
 800d3d2:	68bb      	ldr	r3, [r7, #8]
 800d3d4:	461d      	mov	r5, r3
 800d3d6:	f04f 0600 	mov.w	r6, #0
 800d3da:	46a9      	mov	r9, r5
 800d3dc:	46b2      	mov	sl, r6
 800d3de:	eb19 0309 	adds.w	r3, r9, r9
 800d3e2:	eb4a 040a 	adc.w	r4, sl, sl
 800d3e6:	4699      	mov	r9, r3
 800d3e8:	46a2      	mov	sl, r4
 800d3ea:	eb19 0905 	adds.w	r9, r9, r5
 800d3ee:	eb4a 0a06 	adc.w	sl, sl, r6
 800d3f2:	f04f 0100 	mov.w	r1, #0
 800d3f6:	f04f 0200 	mov.w	r2, #0
 800d3fa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d3fe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d402:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d406:	4689      	mov	r9, r1
 800d408:	4692      	mov	sl, r2
 800d40a:	eb19 0005 	adds.w	r0, r9, r5
 800d40e:	eb4a 0106 	adc.w	r1, sl, r6
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	685b      	ldr	r3, [r3, #4]
 800d416:	461d      	mov	r5, r3
 800d418:	f04f 0600 	mov.w	r6, #0
 800d41c:	196b      	adds	r3, r5, r5
 800d41e:	eb46 0406 	adc.w	r4, r6, r6
 800d422:	461a      	mov	r2, r3
 800d424:	4623      	mov	r3, r4
 800d426:	f7f3 fc17 	bl	8000c58 <__aeabi_uldivmod>
 800d42a:	4603      	mov	r3, r0
 800d42c:	460c      	mov	r4, r1
 800d42e:	461a      	mov	r2, r3
 800d430:	4b6a      	ldr	r3, [pc, #424]	; (800d5dc <UART_SetConfig+0x384>)
 800d432:	fba3 1302 	umull	r1, r3, r3, r2
 800d436:	095b      	lsrs	r3, r3, #5
 800d438:	2164      	movs	r1, #100	; 0x64
 800d43a:	fb01 f303 	mul.w	r3, r1, r3
 800d43e:	1ad3      	subs	r3, r2, r3
 800d440:	00db      	lsls	r3, r3, #3
 800d442:	3332      	adds	r3, #50	; 0x32
 800d444:	4a65      	ldr	r2, [pc, #404]	; (800d5dc <UART_SetConfig+0x384>)
 800d446:	fba2 2303 	umull	r2, r3, r2, r3
 800d44a:	095b      	lsrs	r3, r3, #5
 800d44c:	f003 0207 	and.w	r2, r3, #7
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	4442      	add	r2, r8
 800d456:	609a      	str	r2, [r3, #8]
 800d458:	e26f      	b.n	800d93a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800d45a:	f7fe fc47 	bl	800bcec <HAL_RCC_GetPCLK1Freq>
 800d45e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d460:	68bb      	ldr	r3, [r7, #8]
 800d462:	461d      	mov	r5, r3
 800d464:	f04f 0600 	mov.w	r6, #0
 800d468:	46a8      	mov	r8, r5
 800d46a:	46b1      	mov	r9, r6
 800d46c:	eb18 0308 	adds.w	r3, r8, r8
 800d470:	eb49 0409 	adc.w	r4, r9, r9
 800d474:	4698      	mov	r8, r3
 800d476:	46a1      	mov	r9, r4
 800d478:	eb18 0805 	adds.w	r8, r8, r5
 800d47c:	eb49 0906 	adc.w	r9, r9, r6
 800d480:	f04f 0100 	mov.w	r1, #0
 800d484:	f04f 0200 	mov.w	r2, #0
 800d488:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800d48c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800d490:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800d494:	4688      	mov	r8, r1
 800d496:	4691      	mov	r9, r2
 800d498:	eb18 0005 	adds.w	r0, r8, r5
 800d49c:	eb49 0106 	adc.w	r1, r9, r6
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	685b      	ldr	r3, [r3, #4]
 800d4a4:	461d      	mov	r5, r3
 800d4a6:	f04f 0600 	mov.w	r6, #0
 800d4aa:	196b      	adds	r3, r5, r5
 800d4ac:	eb46 0406 	adc.w	r4, r6, r6
 800d4b0:	461a      	mov	r2, r3
 800d4b2:	4623      	mov	r3, r4
 800d4b4:	f7f3 fbd0 	bl	8000c58 <__aeabi_uldivmod>
 800d4b8:	4603      	mov	r3, r0
 800d4ba:	460c      	mov	r4, r1
 800d4bc:	461a      	mov	r2, r3
 800d4be:	4b47      	ldr	r3, [pc, #284]	; (800d5dc <UART_SetConfig+0x384>)
 800d4c0:	fba3 2302 	umull	r2, r3, r3, r2
 800d4c4:	095b      	lsrs	r3, r3, #5
 800d4c6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800d4ca:	68bb      	ldr	r3, [r7, #8]
 800d4cc:	461d      	mov	r5, r3
 800d4ce:	f04f 0600 	mov.w	r6, #0
 800d4d2:	46a9      	mov	r9, r5
 800d4d4:	46b2      	mov	sl, r6
 800d4d6:	eb19 0309 	adds.w	r3, r9, r9
 800d4da:	eb4a 040a 	adc.w	r4, sl, sl
 800d4de:	4699      	mov	r9, r3
 800d4e0:	46a2      	mov	sl, r4
 800d4e2:	eb19 0905 	adds.w	r9, r9, r5
 800d4e6:	eb4a 0a06 	adc.w	sl, sl, r6
 800d4ea:	f04f 0100 	mov.w	r1, #0
 800d4ee:	f04f 0200 	mov.w	r2, #0
 800d4f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d4f6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d4fa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d4fe:	4689      	mov	r9, r1
 800d500:	4692      	mov	sl, r2
 800d502:	eb19 0005 	adds.w	r0, r9, r5
 800d506:	eb4a 0106 	adc.w	r1, sl, r6
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	685b      	ldr	r3, [r3, #4]
 800d50e:	461d      	mov	r5, r3
 800d510:	f04f 0600 	mov.w	r6, #0
 800d514:	196b      	adds	r3, r5, r5
 800d516:	eb46 0406 	adc.w	r4, r6, r6
 800d51a:	461a      	mov	r2, r3
 800d51c:	4623      	mov	r3, r4
 800d51e:	f7f3 fb9b 	bl	8000c58 <__aeabi_uldivmod>
 800d522:	4603      	mov	r3, r0
 800d524:	460c      	mov	r4, r1
 800d526:	461a      	mov	r2, r3
 800d528:	4b2c      	ldr	r3, [pc, #176]	; (800d5dc <UART_SetConfig+0x384>)
 800d52a:	fba3 1302 	umull	r1, r3, r3, r2
 800d52e:	095b      	lsrs	r3, r3, #5
 800d530:	2164      	movs	r1, #100	; 0x64
 800d532:	fb01 f303 	mul.w	r3, r1, r3
 800d536:	1ad3      	subs	r3, r2, r3
 800d538:	00db      	lsls	r3, r3, #3
 800d53a:	3332      	adds	r3, #50	; 0x32
 800d53c:	4a27      	ldr	r2, [pc, #156]	; (800d5dc <UART_SetConfig+0x384>)
 800d53e:	fba2 2303 	umull	r2, r3, r2, r3
 800d542:	095b      	lsrs	r3, r3, #5
 800d544:	005b      	lsls	r3, r3, #1
 800d546:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d54a:	4498      	add	r8, r3
 800d54c:	68bb      	ldr	r3, [r7, #8]
 800d54e:	461d      	mov	r5, r3
 800d550:	f04f 0600 	mov.w	r6, #0
 800d554:	46a9      	mov	r9, r5
 800d556:	46b2      	mov	sl, r6
 800d558:	eb19 0309 	adds.w	r3, r9, r9
 800d55c:	eb4a 040a 	adc.w	r4, sl, sl
 800d560:	4699      	mov	r9, r3
 800d562:	46a2      	mov	sl, r4
 800d564:	eb19 0905 	adds.w	r9, r9, r5
 800d568:	eb4a 0a06 	adc.w	sl, sl, r6
 800d56c:	f04f 0100 	mov.w	r1, #0
 800d570:	f04f 0200 	mov.w	r2, #0
 800d574:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d578:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d57c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d580:	4689      	mov	r9, r1
 800d582:	4692      	mov	sl, r2
 800d584:	eb19 0005 	adds.w	r0, r9, r5
 800d588:	eb4a 0106 	adc.w	r1, sl, r6
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	685b      	ldr	r3, [r3, #4]
 800d590:	461d      	mov	r5, r3
 800d592:	f04f 0600 	mov.w	r6, #0
 800d596:	196b      	adds	r3, r5, r5
 800d598:	eb46 0406 	adc.w	r4, r6, r6
 800d59c:	461a      	mov	r2, r3
 800d59e:	4623      	mov	r3, r4
 800d5a0:	f7f3 fb5a 	bl	8000c58 <__aeabi_uldivmod>
 800d5a4:	4603      	mov	r3, r0
 800d5a6:	460c      	mov	r4, r1
 800d5a8:	461a      	mov	r2, r3
 800d5aa:	4b0c      	ldr	r3, [pc, #48]	; (800d5dc <UART_SetConfig+0x384>)
 800d5ac:	fba3 1302 	umull	r1, r3, r3, r2
 800d5b0:	095b      	lsrs	r3, r3, #5
 800d5b2:	2164      	movs	r1, #100	; 0x64
 800d5b4:	fb01 f303 	mul.w	r3, r1, r3
 800d5b8:	1ad3      	subs	r3, r2, r3
 800d5ba:	00db      	lsls	r3, r3, #3
 800d5bc:	3332      	adds	r3, #50	; 0x32
 800d5be:	4a07      	ldr	r2, [pc, #28]	; (800d5dc <UART_SetConfig+0x384>)
 800d5c0:	fba2 2303 	umull	r2, r3, r2, r3
 800d5c4:	095b      	lsrs	r3, r3, #5
 800d5c6:	f003 0207 	and.w	r2, r3, #7
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	4442      	add	r2, r8
 800d5d0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800d5d2:	e1b2      	b.n	800d93a <UART_SetConfig+0x6e2>
 800d5d4:	40011000 	.word	0x40011000
 800d5d8:	40011400 	.word	0x40011400
 800d5dc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	4ad7      	ldr	r2, [pc, #860]	; (800d944 <UART_SetConfig+0x6ec>)
 800d5e6:	4293      	cmp	r3, r2
 800d5e8:	d005      	beq.n	800d5f6 <UART_SetConfig+0x39e>
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	4ad6      	ldr	r2, [pc, #856]	; (800d948 <UART_SetConfig+0x6f0>)
 800d5f0:	4293      	cmp	r3, r2
 800d5f2:	f040 80d1 	bne.w	800d798 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800d5f6:	f7fe fb8d 	bl	800bd14 <HAL_RCC_GetPCLK2Freq>
 800d5fa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d5fc:	68bb      	ldr	r3, [r7, #8]
 800d5fe:	469a      	mov	sl, r3
 800d600:	f04f 0b00 	mov.w	fp, #0
 800d604:	46d0      	mov	r8, sl
 800d606:	46d9      	mov	r9, fp
 800d608:	eb18 0308 	adds.w	r3, r8, r8
 800d60c:	eb49 0409 	adc.w	r4, r9, r9
 800d610:	4698      	mov	r8, r3
 800d612:	46a1      	mov	r9, r4
 800d614:	eb18 080a 	adds.w	r8, r8, sl
 800d618:	eb49 090b 	adc.w	r9, r9, fp
 800d61c:	f04f 0100 	mov.w	r1, #0
 800d620:	f04f 0200 	mov.w	r2, #0
 800d624:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800d628:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800d62c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800d630:	4688      	mov	r8, r1
 800d632:	4691      	mov	r9, r2
 800d634:	eb1a 0508 	adds.w	r5, sl, r8
 800d638:	eb4b 0609 	adc.w	r6, fp, r9
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	685b      	ldr	r3, [r3, #4]
 800d640:	4619      	mov	r1, r3
 800d642:	f04f 0200 	mov.w	r2, #0
 800d646:	f04f 0300 	mov.w	r3, #0
 800d64a:	f04f 0400 	mov.w	r4, #0
 800d64e:	0094      	lsls	r4, r2, #2
 800d650:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d654:	008b      	lsls	r3, r1, #2
 800d656:	461a      	mov	r2, r3
 800d658:	4623      	mov	r3, r4
 800d65a:	4628      	mov	r0, r5
 800d65c:	4631      	mov	r1, r6
 800d65e:	f7f3 fafb 	bl	8000c58 <__aeabi_uldivmod>
 800d662:	4603      	mov	r3, r0
 800d664:	460c      	mov	r4, r1
 800d666:	461a      	mov	r2, r3
 800d668:	4bb8      	ldr	r3, [pc, #736]	; (800d94c <UART_SetConfig+0x6f4>)
 800d66a:	fba3 2302 	umull	r2, r3, r3, r2
 800d66e:	095b      	lsrs	r3, r3, #5
 800d670:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800d674:	68bb      	ldr	r3, [r7, #8]
 800d676:	469b      	mov	fp, r3
 800d678:	f04f 0c00 	mov.w	ip, #0
 800d67c:	46d9      	mov	r9, fp
 800d67e:	46e2      	mov	sl, ip
 800d680:	eb19 0309 	adds.w	r3, r9, r9
 800d684:	eb4a 040a 	adc.w	r4, sl, sl
 800d688:	4699      	mov	r9, r3
 800d68a:	46a2      	mov	sl, r4
 800d68c:	eb19 090b 	adds.w	r9, r9, fp
 800d690:	eb4a 0a0c 	adc.w	sl, sl, ip
 800d694:	f04f 0100 	mov.w	r1, #0
 800d698:	f04f 0200 	mov.w	r2, #0
 800d69c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d6a0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d6a4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d6a8:	4689      	mov	r9, r1
 800d6aa:	4692      	mov	sl, r2
 800d6ac:	eb1b 0509 	adds.w	r5, fp, r9
 800d6b0:	eb4c 060a 	adc.w	r6, ip, sl
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	685b      	ldr	r3, [r3, #4]
 800d6b8:	4619      	mov	r1, r3
 800d6ba:	f04f 0200 	mov.w	r2, #0
 800d6be:	f04f 0300 	mov.w	r3, #0
 800d6c2:	f04f 0400 	mov.w	r4, #0
 800d6c6:	0094      	lsls	r4, r2, #2
 800d6c8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d6cc:	008b      	lsls	r3, r1, #2
 800d6ce:	461a      	mov	r2, r3
 800d6d0:	4623      	mov	r3, r4
 800d6d2:	4628      	mov	r0, r5
 800d6d4:	4631      	mov	r1, r6
 800d6d6:	f7f3 fabf 	bl	8000c58 <__aeabi_uldivmod>
 800d6da:	4603      	mov	r3, r0
 800d6dc:	460c      	mov	r4, r1
 800d6de:	461a      	mov	r2, r3
 800d6e0:	4b9a      	ldr	r3, [pc, #616]	; (800d94c <UART_SetConfig+0x6f4>)
 800d6e2:	fba3 1302 	umull	r1, r3, r3, r2
 800d6e6:	095b      	lsrs	r3, r3, #5
 800d6e8:	2164      	movs	r1, #100	; 0x64
 800d6ea:	fb01 f303 	mul.w	r3, r1, r3
 800d6ee:	1ad3      	subs	r3, r2, r3
 800d6f0:	011b      	lsls	r3, r3, #4
 800d6f2:	3332      	adds	r3, #50	; 0x32
 800d6f4:	4a95      	ldr	r2, [pc, #596]	; (800d94c <UART_SetConfig+0x6f4>)
 800d6f6:	fba2 2303 	umull	r2, r3, r2, r3
 800d6fa:	095b      	lsrs	r3, r3, #5
 800d6fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d700:	4498      	add	r8, r3
 800d702:	68bb      	ldr	r3, [r7, #8]
 800d704:	469b      	mov	fp, r3
 800d706:	f04f 0c00 	mov.w	ip, #0
 800d70a:	46d9      	mov	r9, fp
 800d70c:	46e2      	mov	sl, ip
 800d70e:	eb19 0309 	adds.w	r3, r9, r9
 800d712:	eb4a 040a 	adc.w	r4, sl, sl
 800d716:	4699      	mov	r9, r3
 800d718:	46a2      	mov	sl, r4
 800d71a:	eb19 090b 	adds.w	r9, r9, fp
 800d71e:	eb4a 0a0c 	adc.w	sl, sl, ip
 800d722:	f04f 0100 	mov.w	r1, #0
 800d726:	f04f 0200 	mov.w	r2, #0
 800d72a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d72e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d732:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d736:	4689      	mov	r9, r1
 800d738:	4692      	mov	sl, r2
 800d73a:	eb1b 0509 	adds.w	r5, fp, r9
 800d73e:	eb4c 060a 	adc.w	r6, ip, sl
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	685b      	ldr	r3, [r3, #4]
 800d746:	4619      	mov	r1, r3
 800d748:	f04f 0200 	mov.w	r2, #0
 800d74c:	f04f 0300 	mov.w	r3, #0
 800d750:	f04f 0400 	mov.w	r4, #0
 800d754:	0094      	lsls	r4, r2, #2
 800d756:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d75a:	008b      	lsls	r3, r1, #2
 800d75c:	461a      	mov	r2, r3
 800d75e:	4623      	mov	r3, r4
 800d760:	4628      	mov	r0, r5
 800d762:	4631      	mov	r1, r6
 800d764:	f7f3 fa78 	bl	8000c58 <__aeabi_uldivmod>
 800d768:	4603      	mov	r3, r0
 800d76a:	460c      	mov	r4, r1
 800d76c:	461a      	mov	r2, r3
 800d76e:	4b77      	ldr	r3, [pc, #476]	; (800d94c <UART_SetConfig+0x6f4>)
 800d770:	fba3 1302 	umull	r1, r3, r3, r2
 800d774:	095b      	lsrs	r3, r3, #5
 800d776:	2164      	movs	r1, #100	; 0x64
 800d778:	fb01 f303 	mul.w	r3, r1, r3
 800d77c:	1ad3      	subs	r3, r2, r3
 800d77e:	011b      	lsls	r3, r3, #4
 800d780:	3332      	adds	r3, #50	; 0x32
 800d782:	4a72      	ldr	r2, [pc, #456]	; (800d94c <UART_SetConfig+0x6f4>)
 800d784:	fba2 2303 	umull	r2, r3, r2, r3
 800d788:	095b      	lsrs	r3, r3, #5
 800d78a:	f003 020f 	and.w	r2, r3, #15
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	4442      	add	r2, r8
 800d794:	609a      	str	r2, [r3, #8]
 800d796:	e0d0      	b.n	800d93a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800d798:	f7fe faa8 	bl	800bcec <HAL_RCC_GetPCLK1Freq>
 800d79c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d79e:	68bb      	ldr	r3, [r7, #8]
 800d7a0:	469a      	mov	sl, r3
 800d7a2:	f04f 0b00 	mov.w	fp, #0
 800d7a6:	46d0      	mov	r8, sl
 800d7a8:	46d9      	mov	r9, fp
 800d7aa:	eb18 0308 	adds.w	r3, r8, r8
 800d7ae:	eb49 0409 	adc.w	r4, r9, r9
 800d7b2:	4698      	mov	r8, r3
 800d7b4:	46a1      	mov	r9, r4
 800d7b6:	eb18 080a 	adds.w	r8, r8, sl
 800d7ba:	eb49 090b 	adc.w	r9, r9, fp
 800d7be:	f04f 0100 	mov.w	r1, #0
 800d7c2:	f04f 0200 	mov.w	r2, #0
 800d7c6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800d7ca:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800d7ce:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800d7d2:	4688      	mov	r8, r1
 800d7d4:	4691      	mov	r9, r2
 800d7d6:	eb1a 0508 	adds.w	r5, sl, r8
 800d7da:	eb4b 0609 	adc.w	r6, fp, r9
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	685b      	ldr	r3, [r3, #4]
 800d7e2:	4619      	mov	r1, r3
 800d7e4:	f04f 0200 	mov.w	r2, #0
 800d7e8:	f04f 0300 	mov.w	r3, #0
 800d7ec:	f04f 0400 	mov.w	r4, #0
 800d7f0:	0094      	lsls	r4, r2, #2
 800d7f2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d7f6:	008b      	lsls	r3, r1, #2
 800d7f8:	461a      	mov	r2, r3
 800d7fa:	4623      	mov	r3, r4
 800d7fc:	4628      	mov	r0, r5
 800d7fe:	4631      	mov	r1, r6
 800d800:	f7f3 fa2a 	bl	8000c58 <__aeabi_uldivmod>
 800d804:	4603      	mov	r3, r0
 800d806:	460c      	mov	r4, r1
 800d808:	461a      	mov	r2, r3
 800d80a:	4b50      	ldr	r3, [pc, #320]	; (800d94c <UART_SetConfig+0x6f4>)
 800d80c:	fba3 2302 	umull	r2, r3, r3, r2
 800d810:	095b      	lsrs	r3, r3, #5
 800d812:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800d816:	68bb      	ldr	r3, [r7, #8]
 800d818:	469b      	mov	fp, r3
 800d81a:	f04f 0c00 	mov.w	ip, #0
 800d81e:	46d9      	mov	r9, fp
 800d820:	46e2      	mov	sl, ip
 800d822:	eb19 0309 	adds.w	r3, r9, r9
 800d826:	eb4a 040a 	adc.w	r4, sl, sl
 800d82a:	4699      	mov	r9, r3
 800d82c:	46a2      	mov	sl, r4
 800d82e:	eb19 090b 	adds.w	r9, r9, fp
 800d832:	eb4a 0a0c 	adc.w	sl, sl, ip
 800d836:	f04f 0100 	mov.w	r1, #0
 800d83a:	f04f 0200 	mov.w	r2, #0
 800d83e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d842:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d846:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d84a:	4689      	mov	r9, r1
 800d84c:	4692      	mov	sl, r2
 800d84e:	eb1b 0509 	adds.w	r5, fp, r9
 800d852:	eb4c 060a 	adc.w	r6, ip, sl
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	685b      	ldr	r3, [r3, #4]
 800d85a:	4619      	mov	r1, r3
 800d85c:	f04f 0200 	mov.w	r2, #0
 800d860:	f04f 0300 	mov.w	r3, #0
 800d864:	f04f 0400 	mov.w	r4, #0
 800d868:	0094      	lsls	r4, r2, #2
 800d86a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d86e:	008b      	lsls	r3, r1, #2
 800d870:	461a      	mov	r2, r3
 800d872:	4623      	mov	r3, r4
 800d874:	4628      	mov	r0, r5
 800d876:	4631      	mov	r1, r6
 800d878:	f7f3 f9ee 	bl	8000c58 <__aeabi_uldivmod>
 800d87c:	4603      	mov	r3, r0
 800d87e:	460c      	mov	r4, r1
 800d880:	461a      	mov	r2, r3
 800d882:	4b32      	ldr	r3, [pc, #200]	; (800d94c <UART_SetConfig+0x6f4>)
 800d884:	fba3 1302 	umull	r1, r3, r3, r2
 800d888:	095b      	lsrs	r3, r3, #5
 800d88a:	2164      	movs	r1, #100	; 0x64
 800d88c:	fb01 f303 	mul.w	r3, r1, r3
 800d890:	1ad3      	subs	r3, r2, r3
 800d892:	011b      	lsls	r3, r3, #4
 800d894:	3332      	adds	r3, #50	; 0x32
 800d896:	4a2d      	ldr	r2, [pc, #180]	; (800d94c <UART_SetConfig+0x6f4>)
 800d898:	fba2 2303 	umull	r2, r3, r2, r3
 800d89c:	095b      	lsrs	r3, r3, #5
 800d89e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d8a2:	4498      	add	r8, r3
 800d8a4:	68bb      	ldr	r3, [r7, #8]
 800d8a6:	469b      	mov	fp, r3
 800d8a8:	f04f 0c00 	mov.w	ip, #0
 800d8ac:	46d9      	mov	r9, fp
 800d8ae:	46e2      	mov	sl, ip
 800d8b0:	eb19 0309 	adds.w	r3, r9, r9
 800d8b4:	eb4a 040a 	adc.w	r4, sl, sl
 800d8b8:	4699      	mov	r9, r3
 800d8ba:	46a2      	mov	sl, r4
 800d8bc:	eb19 090b 	adds.w	r9, r9, fp
 800d8c0:	eb4a 0a0c 	adc.w	sl, sl, ip
 800d8c4:	f04f 0100 	mov.w	r1, #0
 800d8c8:	f04f 0200 	mov.w	r2, #0
 800d8cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d8d0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d8d4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d8d8:	4689      	mov	r9, r1
 800d8da:	4692      	mov	sl, r2
 800d8dc:	eb1b 0509 	adds.w	r5, fp, r9
 800d8e0:	eb4c 060a 	adc.w	r6, ip, sl
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	685b      	ldr	r3, [r3, #4]
 800d8e8:	4619      	mov	r1, r3
 800d8ea:	f04f 0200 	mov.w	r2, #0
 800d8ee:	f04f 0300 	mov.w	r3, #0
 800d8f2:	f04f 0400 	mov.w	r4, #0
 800d8f6:	0094      	lsls	r4, r2, #2
 800d8f8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d8fc:	008b      	lsls	r3, r1, #2
 800d8fe:	461a      	mov	r2, r3
 800d900:	4623      	mov	r3, r4
 800d902:	4628      	mov	r0, r5
 800d904:	4631      	mov	r1, r6
 800d906:	f7f3 f9a7 	bl	8000c58 <__aeabi_uldivmod>
 800d90a:	4603      	mov	r3, r0
 800d90c:	460c      	mov	r4, r1
 800d90e:	461a      	mov	r2, r3
 800d910:	4b0e      	ldr	r3, [pc, #56]	; (800d94c <UART_SetConfig+0x6f4>)
 800d912:	fba3 1302 	umull	r1, r3, r3, r2
 800d916:	095b      	lsrs	r3, r3, #5
 800d918:	2164      	movs	r1, #100	; 0x64
 800d91a:	fb01 f303 	mul.w	r3, r1, r3
 800d91e:	1ad3      	subs	r3, r2, r3
 800d920:	011b      	lsls	r3, r3, #4
 800d922:	3332      	adds	r3, #50	; 0x32
 800d924:	4a09      	ldr	r2, [pc, #36]	; (800d94c <UART_SetConfig+0x6f4>)
 800d926:	fba2 2303 	umull	r2, r3, r2, r3
 800d92a:	095b      	lsrs	r3, r3, #5
 800d92c:	f003 020f 	and.w	r2, r3, #15
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	4442      	add	r2, r8
 800d936:	609a      	str	r2, [r3, #8]
}
 800d938:	e7ff      	b.n	800d93a <UART_SetConfig+0x6e2>
 800d93a:	bf00      	nop
 800d93c:	3714      	adds	r7, #20
 800d93e:	46bd      	mov	sp, r7
 800d940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d944:	40011000 	.word	0x40011000
 800d948:	40011400 	.word	0x40011400
 800d94c:	51eb851f 	.word	0x51eb851f

0800d950 <MX_MEMS_Init>:
static void DWT_Start(void);
static uint32_t DWT_Stop(void);


void MX_MEMS_Init(void)
{
 800d950:	b580      	push	{r7, lr}
 800d952:	af00      	add	r7, sp, #0

  /* USER CODE END MEMS_Init_PreTreatment */

  /* Initialize the peripherals and the MEMS components */

  MX_DataLogFusion_Init();
 800d954:	f000 f808 	bl	800d968 <MX_DataLogFusion_Init>

  /* USER CODE BEGIN MEMS_Init_PostTreatment */

  /* USER CODE END MEMS_Init_PostTreatment */
}
 800d958:	bf00      	nop
 800d95a:	bd80      	pop	{r7, pc}

0800d95c <MX_MEMS_Process>:

/*
 * LM background task
 */
void MX_MEMS_Process(void)
{
 800d95c:	b580      	push	{r7, lr}
 800d95e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MEMS_Process_PreTreatment */

  /* USER CODE END MEMS_Process_PreTreatment */

  MX_DataLogFusion_Process();
 800d960:	f000 f872 	bl	800da48 <MX_DataLogFusion_Process>

  /* USER CODE BEGIN MEMS_Process_PostTreatment */

  /* USER CODE END MEMS_Process_PostTreatment */
}
 800d964:	bf00      	nop
 800d966:	bd80      	pop	{r7, pc}

0800d968 <MX_DataLogFusion_Init>:
/**
  * @brief  Initialize the DataLogFusion application
  * @retval None
  */
static void MX_DataLogFusion_Init(void)
{
 800d968:	b580      	push	{r7, lr}
 800d96a:	b086      	sub	sp, #24
 800d96c:	af00      	add	r7, sp, #0
  float ans_float;

  /* Initialize LED */
  BSP_LED_Init(LED2);
 800d96e:	2000      	movs	r0, #0
 800d970:	f7fb f82e 	bl	80089d0 <BSP_LED_Init>

  /* Initialize push button */
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 800d974:	2101      	movs	r1, #1
 800d976:	2000      	movs	r0, #0
 800d978:	f7fb f8a4 	bl	8008ac4 <BSP_PB_Init>

  /* Initialize Virtual COM Port */
  BSP_COM_Init(COM1);
 800d97c:	2000      	movs	r0, #0
 800d97e:	f7fb f945 	bl	8008c0c <BSP_COM_Init>

  /* Initialize Timer */
  BSP_IP_TIM_Init();
 800d982:	f7f5 faad 	bl	8002ee0 <MX_TIM3_Init>

  /* Configure Timer to run with desired algorithm frequency */
  TIM_Config(ALGO_FREQ);
 800d986:	2064      	movs	r0, #100	; 0x64
 800d988:	f000 fae2 	bl	800df50 <TIM_Config>

  /* Initialize (disabled) Sensors */
  Init_Sensors();
 800d98c:	f000 f884 	bl	800da98 <Init_Sensors>

  /* Sensor Fusion API initialization function */
  MotionFX_manager_init();
 800d990:	f000 fc68 	bl	800e264 <MotionFX_manager_init>

  /* OPTIONAL */
  /* Get library version */
  MotionFX_manager_get_version(lib_version, &lib_version_len);
 800d994:	4927      	ldr	r1, [pc, #156]	; (800da34 <MX_DataLogFusion_Init+0xcc>)
 800d996:	4828      	ldr	r0, [pc, #160]	; (800da38 <MX_DataLogFusion_Init+0xd0>)
 800d998:	f000 fce0 	bl	800e35c <MotionFX_manager_get_version>

  /* LED Blink */
  BSP_LED_On(LED2);
 800d99c:	2000      	movs	r0, #0
 800d99e:	f7fb f84f 	bl	8008a40 <BSP_LED_On>
  HAL_Delay(500);
 800d9a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800d9a6:	f7fb fa55 	bl	8008e54 <HAL_Delay>
  BSP_LED_Off(LED2);
 800d9aa:	2000      	movs	r0, #0
 800d9ac:	f7fb f85e 	bl	8008a6c <BSP_LED_Off>

  /* Enable magnetometer calibration */
  MotionFX_manager_MagCal_start(ALGO_PERIOD);
 800d9b0:	200a      	movs	r0, #10
 800d9b2:	f000 fcf2 	bl	800e39a <MotionFX_manager_MagCal_start>

  /* Test if calibration data are available */
  MFX_MagCal_output_t mag_cal_test;
  MotionFX_MagCal_getParams(&mag_cal_test);
 800d9b6:	1d3b      	adds	r3, r7, #4
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	f00c fda1 	bl	801a500 <MotionFX_MagCal_getParams>

  /* If calibration data are available load HI coeficients */
  if (mag_cal_test.cal_quality == MFX_MAGCALGOOD)
 800d9be:	7c3b      	ldrb	r3, [r7, #16]
 800d9c0:	2b03      	cmp	r3, #3
 800d9c2:	d132      	bne.n	800da2a <MX_DataLogFusion_Init+0xc2>
  {
    ans_float = (mag_cal_test.hi_bias[0] * FROM_UT50_TO_MGAUSS);
 800d9c4:	edd7 7a01 	vldr	s15, [r7, #4]
 800d9c8:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800da3c <MX_DataLogFusion_Init+0xd4>
 800d9cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d9d0:	edc7 7a05 	vstr	s15, [r7, #20]
    MagOffset.x = (int32_t)ans_float;
 800d9d4:	edd7 7a05 	vldr	s15, [r7, #20]
 800d9d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d9dc:	ee17 2a90 	vmov	r2, s15
 800d9e0:	4b17      	ldr	r3, [pc, #92]	; (800da40 <MX_DataLogFusion_Init+0xd8>)
 800d9e2:	601a      	str	r2, [r3, #0]
    ans_float = (mag_cal_test.hi_bias[1] * FROM_UT50_TO_MGAUSS);
 800d9e4:	edd7 7a02 	vldr	s15, [r7, #8]
 800d9e8:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800da3c <MX_DataLogFusion_Init+0xd4>
 800d9ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d9f0:	edc7 7a05 	vstr	s15, [r7, #20]
    MagOffset.y = (int32_t)ans_float;
 800d9f4:	edd7 7a05 	vldr	s15, [r7, #20]
 800d9f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d9fc:	ee17 2a90 	vmov	r2, s15
 800da00:	4b0f      	ldr	r3, [pc, #60]	; (800da40 <MX_DataLogFusion_Init+0xd8>)
 800da02:	605a      	str	r2, [r3, #4]
    ans_float = (mag_cal_test.hi_bias[2] * FROM_UT50_TO_MGAUSS);
 800da04:	edd7 7a03 	vldr	s15, [r7, #12]
 800da08:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800da3c <MX_DataLogFusion_Init+0xd4>
 800da0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800da10:	edc7 7a05 	vstr	s15, [r7, #20]
    MagOffset.z = (int32_t)ans_float;
 800da14:	edd7 7a05 	vldr	s15, [r7, #20]
 800da18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800da1c:	ee17 2a90 	vmov	r2, s15
 800da20:	4b07      	ldr	r3, [pc, #28]	; (800da40 <MX_DataLogFusion_Init+0xd8>)
 800da22:	609a      	str	r2, [r3, #8]

    MagCalStatus = 1;
 800da24:	4b07      	ldr	r3, [pc, #28]	; (800da44 <MX_DataLogFusion_Init+0xdc>)
 800da26:	2201      	movs	r2, #1
 800da28:	701a      	strb	r2, [r3, #0]
  }


}
 800da2a:	bf00      	nop
 800da2c:	3718      	adds	r7, #24
 800da2e:	46bd      	mov	sp, r7
 800da30:	bd80      	pop	{r7, pc}
 800da32:	bf00      	nop
 800da34:	20002a38 	.word	0x20002a38
 800da38:	20002a40 	.word	0x20002a40
 800da3c:	43fa0000 	.word	0x43fa0000
 800da40:	20002468 	.word	0x20002468
 800da44:	20002478 	.word	0x20002478

0800da48 <MX_DataLogFusion_Process>:
/**
  * @brief  Process of the DataLogFusion application
  * @retval None
  */
static void MX_DataLogFusion_Process(void)
{
 800da48:	b580      	push	{r7, lr}
 800da4a:	af00      	add	r7, sp, #0

   /* Reset magnetometer calibration value*/
   MagCalStatus = 0;
 800da4c:	4b10      	ldr	r3, [pc, #64]	; (800da90 <MX_DataLogFusion_Process+0x48>)
 800da4e:	2200      	movs	r2, #0
 800da50:	701a      	strb	r2, [r3, #0]
   MagOffset.x = 0;
 800da52:	4b10      	ldr	r3, [pc, #64]	; (800da94 <MX_DataLogFusion_Process+0x4c>)
 800da54:	2200      	movs	r2, #0
 800da56:	601a      	str	r2, [r3, #0]
   MagOffset.y = 0;
 800da58:	4b0e      	ldr	r3, [pc, #56]	; (800da94 <MX_DataLogFusion_Process+0x4c>)
 800da5a:	2200      	movs	r2, #0
 800da5c:	605a      	str	r2, [r3, #4]
   MagOffset.z = 0;
 800da5e:	4b0d      	ldr	r3, [pc, #52]	; (800da94 <MX_DataLogFusion_Process+0x4c>)
 800da60:	2200      	movs	r2, #0
 800da62:	609a      	str	r2, [r3, #8]

   /* Enable magnetometer calibration */
   MotionFX_manager_MagCal_start(ALGO_PERIOD);
 800da64:	200a      	movs	r0, #10
 800da66:	f000 fc98 	bl	800e39a <MotionFX_manager_MagCal_start>


   RTC_Handler();
 800da6a:	f000 f83d 	bl	800dae8 <RTC_Handler>
   Accelero_Sensor_Handler();
 800da6e:	f000 f959 	bl	800dd24 <Accelero_Sensor_Handler>
   Gyro_Sensor_Handler();
 800da72:	f000 f979 	bl	800dd68 <Gyro_Sensor_Handler>
   Magneto_Sensor_Handler();
 800da76:	f000 f999 	bl	800ddac <Magneto_Sensor_Handler>
   Humidity_Sensor_Handler();
 800da7a:	f000 fa5f 	bl	800df3c <Humidity_Sensor_Handler>
   Temperature_Sensor_Handler();
 800da7e:	f000 fa53 	bl	800df28 <Temperature_Sensor_Handler>
   Pressure_Sensor_Handler();
 800da82:	f000 fa47 	bl	800df14 <Pressure_Sensor_Handler>

   /* Sensor Fusion specific part */
   FX_Data_Handler();
 800da86:	f000 f86d 	bl	800db64 <FX_Data_Handler>

}
 800da8a:	bf00      	nop
 800da8c:	bd80      	pop	{r7, pc}
 800da8e:	bf00      	nop
 800da90:	20002478 	.word	0x20002478
 800da94:	20002468 	.word	0x20002468

0800da98 <Init_Sensors>:
 * @brief  Initialize all sensors
 * @param  None
 * @retval None
 */
static void Init_Sensors(void)
{
 800da98:	b580      	push	{r7, lr}
 800da9a:	af00      	add	r7, sp, #0
  BSP_SENSOR_ACC_Init();
 800da9c:	f000 face 	bl	800e03c <BSP_SENSOR_ACC_Init>
  BSP_SENSOR_GYR_Init();
 800daa0:	f000 fad4 	bl	800e04c <BSP_SENSOR_GYR_Init>
  BSP_SENSOR_MAG_Init();
 800daa4:	f000 fada 	bl	800e05c <BSP_SENSOR_MAG_Init>
  BSP_SENSOR_PRESS_Init();
 800daa8:	f000 fae0 	bl	800e06c <BSP_SENSOR_PRESS_Init>
  BSP_SENSOR_TEMP_Init();
 800daac:	f000 fae6 	bl	800e07c <BSP_SENSOR_TEMP_Init>
  BSP_SENSOR_HUM_Init();
 800dab0:	f000 faec 	bl	800e08c <BSP_SENSOR_HUM_Init>

  /* Set accelerometer:
   *   - ODR >= 100Hz
   *   - FS   = <-2g, 2g>
   */
  BSP_SENSOR_ACC_SetOutputDataRate(100.0f);
 800dab4:	480b      	ldr	r0, [pc, #44]	; (800dae4 <Init_Sensors+0x4c>)
 800dab6:	f000 fb6f 	bl	800e198 <BSP_SENSOR_ACC_SetOutputDataRate>
  BSP_SENSOR_ACC_SetFullScale(2);
 800daba:	2002      	movs	r0, #2
 800dabc:	f000 fb86 	bl	800e1cc <BSP_SENSOR_ACC_SetFullScale>

  /* Set magnetometer:
   *   - ODR >= 100Hz
   *   - FS   = 50Gauss (always) // TODO: Valid for all magnetometers?
   */
  BSP_SENSOR_MAG_SetOutputDataRate(100.0f);
 800dac0:	4808      	ldr	r0, [pc, #32]	; (800dae4 <Init_Sensors+0x4c>)
 800dac2:	f000 fb76 	bl	800e1b2 <BSP_SENSOR_MAG_SetOutputDataRate>


  BSP_SENSOR_ACC_Enable();
 800dac6:	f000 fae9 	bl	800e09c <BSP_SENSOR_ACC_Enable>
  BSP_SENSOR_GYR_Enable();
 800daca:	f000 faef 	bl	800e0ac <BSP_SENSOR_GYR_Enable>
  BSP_SENSOR_MAG_Enable();
 800dace:	f000 faf5 	bl	800e0bc <BSP_SENSOR_MAG_Enable>
  BSP_SENSOR_PRESS_Enable();
 800dad2:	f000 fafb 	bl	800e0cc <BSP_SENSOR_PRESS_Enable>
  BSP_SENSOR_TEMP_Enable();
 800dad6:	f000 fb01 	bl	800e0dc <BSP_SENSOR_TEMP_Enable>
  BSP_SENSOR_HUM_Enable();
 800dada:	f000 fb07 	bl	800e0ec <BSP_SENSOR_HUM_Enable>

}
 800dade:	bf00      	nop
 800dae0:	bd80      	pop	{r7, pc}
 800dae2:	bf00      	nop
 800dae4:	42c80000 	.word	0x42c80000

0800dae8 <RTC_Handler>:
/**
 * @brief  Handles the time+date getting/sending
 * @retval None
 */
static void RTC_Handler()
{
 800dae8:	b580      	push	{r7, lr}
 800daea:	b08c      	sub	sp, #48	; 0x30
 800daec:	af02      	add	r7, sp, #8
  uint8_t sub_sec = 0;
 800daee:	2300      	movs	r3, #0
 800daf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  RTC_DateTypeDef sdatestructureget;
  RTC_TimeTypeDef stimestructure;
  uint32_t ans_uint32;
  int32_t ans_int32;
  uint32_t RtcSynchPrediv = hrtc.Init.SynchPrediv;
 800daf4:	4b19      	ldr	r3, [pc, #100]	; (800db5c <RTC_Handler+0x74>)
 800daf6:	68db      	ldr	r3, [r3, #12]
 800daf8:	623b      	str	r3, [r7, #32]

  (void)HAL_RTC_GetTime(&hrtc, &stimestructure, FORMAT_BIN);
 800dafa:	463b      	mov	r3, r7
 800dafc:	2200      	movs	r2, #0
 800dafe:	4619      	mov	r1, r3
 800db00:	4816      	ldr	r0, [pc, #88]	; (800db5c <RTC_Handler+0x74>)
 800db02:	f7fe fb57 	bl	800c1b4 <HAL_RTC_GetTime>
  (void)HAL_RTC_GetDate(&hrtc, &sdatestructureget, FORMAT_BIN);
 800db06:	f107 0314 	add.w	r3, r7, #20
 800db0a:	2200      	movs	r2, #0
 800db0c:	4619      	mov	r1, r3
 800db0e:	4813      	ldr	r0, [pc, #76]	; (800db5c <RTC_Handler+0x74>)
 800db10:	f7fe fc55 	bl	800c3be <HAL_RTC_GetDate>

  /* To be MISRA C-2012 compliant the original calculation:
     sub_sec = ((((((int)RtcSynchPrediv) - ((int)stimestructure.SubSeconds)) * 100) / (RtcSynchPrediv + 1)) & 0xFF);
     has been split to separate expressions */
  ans_int32 = (RtcSynchPrediv - (int32_t)stimestructure.SubSeconds) * 100;
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	6a3a      	ldr	r2, [r7, #32]
 800db18:	1ad3      	subs	r3, r2, r3
 800db1a:	2264      	movs	r2, #100	; 0x64
 800db1c:	fb02 f303 	mul.w	r3, r2, r3
 800db20:	61fb      	str	r3, [r7, #28]
  ans_int32 /= RtcSynchPrediv + 1;
 800db22:	69fa      	ldr	r2, [r7, #28]
 800db24:	6a3b      	ldr	r3, [r7, #32]
 800db26:	3301      	adds	r3, #1
 800db28:	fbb2 f3f3 	udiv	r3, r2, r3
 800db2c:	61fb      	str	r3, [r7, #28]
  ans_uint32 = (uint32_t)ans_int32 & 0xFFU;
 800db2e:	69fb      	ldr	r3, [r7, #28]
 800db30:	b2db      	uxtb	r3, r3
 800db32:	61bb      	str	r3, [r7, #24]
  sub_sec = (uint8_t)ans_uint32;
 800db34:	69bb      	ldr	r3, [r7, #24]
 800db36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  printf("Hour: %hu, Minutes: %hu Seconds: %hu, SubSeconds: %hu\r\n",
			(uint8_t) stimestructure.Hours, (uint8_t) stimestructure.Minutes,
 800db3a:	783b      	ldrb	r3, [r7, #0]
  printf("Hour: %hu, Minutes: %hu Seconds: %hu, SubSeconds: %hu\r\n",
 800db3c:	4619      	mov	r1, r3
			(uint8_t) stimestructure.Hours, (uint8_t) stimestructure.Minutes,
 800db3e:	787b      	ldrb	r3, [r7, #1]
  printf("Hour: %hu, Minutes: %hu Seconds: %hu, SubSeconds: %hu\r\n",
 800db40:	461a      	mov	r2, r3
			(uint8_t) stimestructure.Seconds, sub_sec);
 800db42:	78bb      	ldrb	r3, [r7, #2]
  printf("Hour: %hu, Minutes: %hu Seconds: %hu, SubSeconds: %hu\r\n",
 800db44:	4618      	mov	r0, r3
 800db46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800db4a:	9300      	str	r3, [sp, #0]
 800db4c:	4603      	mov	r3, r0
 800db4e:	4804      	ldr	r0, [pc, #16]	; (800db60 <RTC_Handler+0x78>)
 800db50:	f00c fd6a 	bl	801a628 <iprintf>
}
 800db54:	bf00      	nop
 800db56:	3728      	adds	r7, #40	; 0x28
 800db58:	46bd      	mov	sp, r7
 800db5a:	bd80      	pop	{r7, pc}
 800db5c:	200028cc 	.word	0x200028cc
 800db60:	0801d55c 	.word	0x0801d55c

0800db64 <FX_Data_Handler>:
 * @brief  Sensor Fusion data handler
 * @param  Msg the Sensor Fusion data part of the stream
 * @retval None
 */
static void FX_Data_Handler()
{
 800db64:	b580      	push	{r7, lr}
 800db66:	b0aa      	sub	sp, #168	; 0xa8
 800db68:	af00      	add	r7, sp, #0
  uint32_t elapsed_time_us = 0U;
 800db6a:	2300      	movs	r3, #0
 800db6c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  MFX_input_t data_in;
  MFX_input_t *pdata_in = &data_in;
 800db70:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800db74:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  MFX_output_t data_out;
  MFX_output_t *pdata_out = &data_out;
 800db78:	463b      	mov	r3, r7
 800db7a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c


  /* Convert angular velocity from [mdps] to [dps] */
  data_in.gyro[0] = (float)GyrValue.x * FROM_MDPS_TO_DPS;
 800db7e:	4b60      	ldr	r3, [pc, #384]	; (800dd00 <FX_Data_Handler+0x19c>)
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	ee07 3a90 	vmov	s15, r3
 800db86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800db8a:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 800dd04 <FX_Data_Handler+0x1a0>
 800db8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800db92:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
  data_in.gyro[1] = (float)GyrValue.y * FROM_MDPS_TO_DPS;
 800db96:	4b5a      	ldr	r3, [pc, #360]	; (800dd00 <FX_Data_Handler+0x19c>)
 800db98:	685b      	ldr	r3, [r3, #4]
 800db9a:	ee07 3a90 	vmov	s15, r3
 800db9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dba2:	ed9f 7a58 	vldr	s14, [pc, #352]	; 800dd04 <FX_Data_Handler+0x1a0>
 800dba6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dbaa:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
  data_in.gyro[2] = (float)GyrValue.z * FROM_MDPS_TO_DPS;
 800dbae:	4b54      	ldr	r3, [pc, #336]	; (800dd00 <FX_Data_Handler+0x19c>)
 800dbb0:	689b      	ldr	r3, [r3, #8]
 800dbb2:	ee07 3a90 	vmov	s15, r3
 800dbb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dbba:	ed9f 7a52 	vldr	s14, [pc, #328]	; 800dd04 <FX_Data_Handler+0x1a0>
 800dbbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dbc2:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98

  /* Convert acceleration from [mg] to [g] */
  data_in.acc[0] = (float)AccValue.x * FROM_MG_TO_G;
 800dbc6:	4b50      	ldr	r3, [pc, #320]	; (800dd08 <FX_Data_Handler+0x1a4>)
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	ee07 3a90 	vmov	s15, r3
 800dbce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dbd2:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800dd04 <FX_Data_Handler+0x1a0>
 800dbd6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dbda:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
  data_in.acc[1] = (float)AccValue.y * FROM_MG_TO_G;
 800dbde:	4b4a      	ldr	r3, [pc, #296]	; (800dd08 <FX_Data_Handler+0x1a4>)
 800dbe0:	685b      	ldr	r3, [r3, #4]
 800dbe2:	ee07 3a90 	vmov	s15, r3
 800dbe6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dbea:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800dd04 <FX_Data_Handler+0x1a0>
 800dbee:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dbf2:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
  data_in.acc[2] = (float)AccValue.z * FROM_MG_TO_G;
 800dbf6:	4b44      	ldr	r3, [pc, #272]	; (800dd08 <FX_Data_Handler+0x1a4>)
 800dbf8:	689b      	ldr	r3, [r3, #8]
 800dbfa:	ee07 3a90 	vmov	s15, r3
 800dbfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dc02:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800dd04 <FX_Data_Handler+0x1a0>
 800dc06:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dc0a:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c

  /* Convert magnetic field intensity from [mGauss] to [uT / 50] */
  data_in.mag[0] = (float)MagValue.x * FROM_MGAUSS_TO_UT50;
 800dc0e:	4b3f      	ldr	r3, [pc, #252]	; (800dd0c <FX_Data_Handler+0x1a8>)
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	ee07 3a90 	vmov	s15, r3
 800dc16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dc1a:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 800dd10 <FX_Data_Handler+0x1ac>
 800dc1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dc22:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
  data_in.mag[1] = (float)MagValue.y * FROM_MGAUSS_TO_UT50;
 800dc26:	4b39      	ldr	r3, [pc, #228]	; (800dd0c <FX_Data_Handler+0x1a8>)
 800dc28:	685b      	ldr	r3, [r3, #4]
 800dc2a:	ee07 3a90 	vmov	s15, r3
 800dc2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dc32:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800dd10 <FX_Data_Handler+0x1ac>
 800dc36:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dc3a:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
  data_in.mag[2] = (float)MagValue.z * FROM_MGAUSS_TO_UT50;
 800dc3e:	4b33      	ldr	r3, [pc, #204]	; (800dd0c <FX_Data_Handler+0x1a8>)
 800dc40:	689b      	ldr	r3, [r3, #8]
 800dc42:	ee07 3a90 	vmov	s15, r3
 800dc46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dc4a:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800dd10 <FX_Data_Handler+0x1ac>
 800dc4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dc52:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80

  /* Run Sensor Fusion algorithm */
  BSP_LED_On(LED2);
 800dc56:	2000      	movs	r0, #0
 800dc58:	f7fa fef2 	bl	8008a40 <BSP_LED_On>
  DWT_Start();
 800dc5c:	f000 f9ac 	bl	800dfb8 <DWT_Start>
  MotionFX_manager_run(pdata_in, pdata_out, MOTION_FX_ENGINE_DELTATIME);
 800dc60:	4a2c      	ldr	r2, [pc, #176]	; (800dd14 <FX_Data_Handler+0x1b0>)
 800dc62:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800dc66:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800dc6a:	f000 fb51 	bl	800e310 <MotionFX_manager_run>
  elapsed_time_us = DWT_Stop();
 800dc6e:	f000 f9bd 	bl	800dfec <DWT_Stop>
 800dc72:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
  BSP_LED_Off(LED2);
 800dc76:	2000      	movs	r0, #0
 800dc78:	f7fa fef8 	bl	8008a6c <BSP_LED_Off>

  if (Enabled6X == 1U)
 800dc7c:	4b26      	ldr	r3, [pc, #152]	; (800dd18 <FX_Data_Handler+0x1b4>)
 800dc7e:	781b      	ldrb	r3, [r3, #0]
 800dc80:	2b01      	cmp	r3, #1
 800dc82:	d118      	bne.n	800dcb6 <FX_Data_Handler+0x152>
  {
	  q_axes.AXIS_Z = data_out.rotation_6X[0];
 800dc84:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800dc88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dc8c:	ee17 2a90 	vmov	r2, s15
 800dc90:	4b22      	ldr	r3, [pc, #136]	; (800dd1c <FX_Data_Handler+0x1b8>)
 800dc92:	609a      	str	r2, [r3, #8]
	  q_axes.AXIS_Y = data_out.rotation_6X[1];
 800dc94:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800dc98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dc9c:	ee17 2a90 	vmov	r2, s15
 800dca0:	4b1e      	ldr	r3, [pc, #120]	; (800dd1c <FX_Data_Handler+0x1b8>)
 800dca2:	605a      	str	r2, [r3, #4]
	  q_axes.AXIS_X = data_out.rotation_6X[2];
 800dca4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800dca8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dcac:	ee17 2a90 	vmov	r2, s15
 800dcb0:	4b1a      	ldr	r3, [pc, #104]	; (800dd1c <FX_Data_Handler+0x1b8>)
 800dcb2:	601a      	str	r2, [r3, #0]
 800dcb4:	e017      	b.n	800dce6 <FX_Data_Handler+0x182>
  }
  else
  {
	  q_axes.AXIS_Z = data_out.rotation_9X[0];
 800dcb6:	edd7 7a00 	vldr	s15, [r7]
 800dcba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dcbe:	ee17 2a90 	vmov	r2, s15
 800dcc2:	4b16      	ldr	r3, [pc, #88]	; (800dd1c <FX_Data_Handler+0x1b8>)
 800dcc4:	609a      	str	r2, [r3, #8]
	  q_axes.AXIS_Y = data_out.rotation_9X[1];
 800dcc6:	edd7 7a01 	vldr	s15, [r7, #4]
 800dcca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dcce:	ee17 2a90 	vmov	r2, s15
 800dcd2:	4b12      	ldr	r3, [pc, #72]	; (800dd1c <FX_Data_Handler+0x1b8>)
 800dcd4:	605a      	str	r2, [r3, #4]
	  q_axes.AXIS_X = data_out.rotation_9X[2];
 800dcd6:	edd7 7a02 	vldr	s15, [r7, #8]
 800dcda:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dcde:	ee17 2a90 	vmov	r2, s15
 800dce2:	4b0e      	ldr	r3, [pc, #56]	; (800dd1c <FX_Data_Handler+0x1b8>)
 800dce4:	601a      	str	r2, [r3, #0]
  }

	printf("qx: %ld, qy: %ld, qz: %ld\r\n", q_axes.AXIS_X, q_axes.AXIS_Y,
 800dce6:	4b0d      	ldr	r3, [pc, #52]	; (800dd1c <FX_Data_Handler+0x1b8>)
 800dce8:	6819      	ldr	r1, [r3, #0]
 800dcea:	4b0c      	ldr	r3, [pc, #48]	; (800dd1c <FX_Data_Handler+0x1b8>)
 800dcec:	685a      	ldr	r2, [r3, #4]
 800dcee:	4b0b      	ldr	r3, [pc, #44]	; (800dd1c <FX_Data_Handler+0x1b8>)
 800dcf0:	689b      	ldr	r3, [r3, #8]
 800dcf2:	480b      	ldr	r0, [pc, #44]	; (800dd20 <FX_Data_Handler+0x1bc>)
 800dcf4:	f00c fc98 	bl	801a628 <iprintf>
			q_axes.AXIS_Z);

  UNUSED(elapsed_time_us);

}
 800dcf8:	bf00      	nop
 800dcfa:	37a8      	adds	r7, #168	; 0xa8
 800dcfc:	46bd      	mov	sp, r7
 800dcfe:	bd80      	pop	{r7, pc}
 800dd00:	20002450 	.word	0x20002450
 800dd04:	3a83126f 	.word	0x3a83126f
 800dd08:	20002444 	.word	0x20002444
 800dd0c:	2000245c 	.word	0x2000245c
 800dd10:	3b03126f 	.word	0x3b03126f
 800dd14:	3c23d70a 	.word	0x3c23d70a
 800dd18:	20001339 	.word	0x20001339
 800dd1c:	200021e4 	.word	0x200021e4
 800dd20:	0801d594 	.word	0x0801d594

0800dd24 <Accelero_Sensor_Handler>:

/**
 * @brief  Handles the ACC axes data getting/sending
 * @retval None
 */
static void Accelero_Sensor_Handler() {
 800dd24:	b580      	push	{r7, lr}
 800dd26:	af00      	add	r7, sp, #0
	BSP_SENSOR_ACC_GetAxes(&AccValue);
 800dd28:	480c      	ldr	r0, [pc, #48]	; (800dd5c <Accelero_Sensor_Handler+0x38>)
 800dd2a:	f000 f9e7 	bl	800e0fc <BSP_SENSOR_ACC_GetAxes>

	x_axes.AXIS_X = AccValue.x;
 800dd2e:	4b0b      	ldr	r3, [pc, #44]	; (800dd5c <Accelero_Sensor_Handler+0x38>)
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	4a0b      	ldr	r2, [pc, #44]	; (800dd60 <Accelero_Sensor_Handler+0x3c>)
 800dd34:	6013      	str	r3, [r2, #0]
	x_axes.AXIS_Y = AccValue.y;
 800dd36:	4b09      	ldr	r3, [pc, #36]	; (800dd5c <Accelero_Sensor_Handler+0x38>)
 800dd38:	685b      	ldr	r3, [r3, #4]
 800dd3a:	4a09      	ldr	r2, [pc, #36]	; (800dd60 <Accelero_Sensor_Handler+0x3c>)
 800dd3c:	6053      	str	r3, [r2, #4]
	x_axes.AXIS_Z = AccValue.z;
 800dd3e:	4b07      	ldr	r3, [pc, #28]	; (800dd5c <Accelero_Sensor_Handler+0x38>)
 800dd40:	689b      	ldr	r3, [r3, #8]
 800dd42:	4a07      	ldr	r2, [pc, #28]	; (800dd60 <Accelero_Sensor_Handler+0x3c>)
 800dd44:	6093      	str	r3, [r2, #8]
	printf("ax: %ld, ay: %ld, az: %ld\r\n", x_axes.AXIS_X,
 800dd46:	4b06      	ldr	r3, [pc, #24]	; (800dd60 <Accelero_Sensor_Handler+0x3c>)
 800dd48:	6819      	ldr	r1, [r3, #0]
 800dd4a:	4b05      	ldr	r3, [pc, #20]	; (800dd60 <Accelero_Sensor_Handler+0x3c>)
 800dd4c:	685a      	ldr	r2, [r3, #4]
 800dd4e:	4b04      	ldr	r3, [pc, #16]	; (800dd60 <Accelero_Sensor_Handler+0x3c>)
 800dd50:	689b      	ldr	r3, [r3, #8]
 800dd52:	4804      	ldr	r0, [pc, #16]	; (800dd64 <Accelero_Sensor_Handler+0x40>)
 800dd54:	f00c fc68 	bl	801a628 <iprintf>
			x_axes.AXIS_Y, x_axes.AXIS_Z);

}
 800dd58:	bf00      	nop
 800dd5a:	bd80      	pop	{r7, pc}
 800dd5c:	20002444 	.word	0x20002444
 800dd60:	200021c0 	.word	0x200021c0
 800dd64:	0801d5b0 	.word	0x0801d5b0

0800dd68 <Gyro_Sensor_Handler>:

/**
 * @brief  Handles the GYR axes data getting/sending
 * @retval None
 */
static void Gyro_Sensor_Handler() {
 800dd68:	b580      	push	{r7, lr}
 800dd6a:	af00      	add	r7, sp, #0
	BSP_SENSOR_GYR_GetAxes(&GyrValue);
 800dd6c:	480c      	ldr	r0, [pc, #48]	; (800dda0 <Gyro_Sensor_Handler+0x38>)
 800dd6e:	f000 f9d2 	bl	800e116 <BSP_SENSOR_GYR_GetAxes>
	g_axes.AXIS_X = GyrValue.x;
 800dd72:	4b0b      	ldr	r3, [pc, #44]	; (800dda0 <Gyro_Sensor_Handler+0x38>)
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	4a0b      	ldr	r2, [pc, #44]	; (800dda4 <Gyro_Sensor_Handler+0x3c>)
 800dd78:	6013      	str	r3, [r2, #0]
	g_axes.AXIS_Y = GyrValue.y;
 800dd7a:	4b09      	ldr	r3, [pc, #36]	; (800dda0 <Gyro_Sensor_Handler+0x38>)
 800dd7c:	685b      	ldr	r3, [r3, #4]
 800dd7e:	4a09      	ldr	r2, [pc, #36]	; (800dda4 <Gyro_Sensor_Handler+0x3c>)
 800dd80:	6053      	str	r3, [r2, #4]
	g_axes.AXIS_Z = GyrValue.z;
 800dd82:	4b07      	ldr	r3, [pc, #28]	; (800dda0 <Gyro_Sensor_Handler+0x38>)
 800dd84:	689b      	ldr	r3, [r3, #8]
 800dd86:	4a07      	ldr	r2, [pc, #28]	; (800dda4 <Gyro_Sensor_Handler+0x3c>)
 800dd88:	6093      	str	r3, [r2, #8]
	printf("gx: %ld, gy: %ld, gz: %ld\r\n", g_axes.AXIS_X, g_axes.AXIS_Y,
 800dd8a:	4b06      	ldr	r3, [pc, #24]	; (800dda4 <Gyro_Sensor_Handler+0x3c>)
 800dd8c:	6819      	ldr	r1, [r3, #0]
 800dd8e:	4b05      	ldr	r3, [pc, #20]	; (800dda4 <Gyro_Sensor_Handler+0x3c>)
 800dd90:	685a      	ldr	r2, [r3, #4]
 800dd92:	4b04      	ldr	r3, [pc, #16]	; (800dda4 <Gyro_Sensor_Handler+0x3c>)
 800dd94:	689b      	ldr	r3, [r3, #8]
 800dd96:	4804      	ldr	r0, [pc, #16]	; (800dda8 <Gyro_Sensor_Handler+0x40>)
 800dd98:	f00c fc46 	bl	801a628 <iprintf>
			g_axes.AXIS_Z);
}
 800dd9c:	bf00      	nop
 800dd9e:	bd80      	pop	{r7, pc}
 800dda0:	20002450 	.word	0x20002450
 800dda4:	200021cc 	.word	0x200021cc
 800dda8:	0801d5cc 	.word	0x0801d5cc

0800ddac <Magneto_Sensor_Handler>:
/**
 * @brief  Handles the MAG axes data getting/sending
 * @retval None
 */
static void Magneto_Sensor_Handler()
{
 800ddac:	b580      	push	{r7, lr}
 800ddae:	b08a      	sub	sp, #40	; 0x28
 800ddb0:	af00      	add	r7, sp, #0
  float ans_float;
  MFX_MagCal_input_t mag_data_in;
  MFX_MagCal_output_t mag_data_out;

  BSP_SENSOR_MAG_GetAxes(&MagValue);
 800ddb2:	4850      	ldr	r0, [pc, #320]	; (800def4 <Magneto_Sensor_Handler+0x148>)
 800ddb4:	f000 f9bc 	bl	800e130 <BSP_SENSOR_MAG_GetAxes>

  if (MagCalStatus == 0U)
 800ddb8:	4b4f      	ldr	r3, [pc, #316]	; (800def8 <Magneto_Sensor_Handler+0x14c>)
 800ddba:	781b      	ldrb	r3, [r3, #0]
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d16b      	bne.n	800de98 <Magneto_Sensor_Handler+0xec>
  {
	  mag_data_in.mag[0] = (float)MagValue.x * FROM_MGAUSS_TO_UT50;
 800ddc0:	4b4c      	ldr	r3, [pc, #304]	; (800def4 <Magneto_Sensor_Handler+0x148>)
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	ee07 3a90 	vmov	s15, r3
 800ddc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ddcc:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800defc <Magneto_Sensor_Handler+0x150>
 800ddd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ddd4:	edc7 7a05 	vstr	s15, [r7, #20]
      mag_data_in.mag[1] = (float)MagValue.y * FROM_MGAUSS_TO_UT50;
 800ddd8:	4b46      	ldr	r3, [pc, #280]	; (800def4 <Magneto_Sensor_Handler+0x148>)
 800ddda:	685b      	ldr	r3, [r3, #4]
 800dddc:	ee07 3a90 	vmov	s15, r3
 800dde0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dde4:	ed9f 7a45 	vldr	s14, [pc, #276]	; 800defc <Magneto_Sensor_Handler+0x150>
 800dde8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ddec:	edc7 7a06 	vstr	s15, [r7, #24]
      mag_data_in.mag[2] = (float)MagValue.z * FROM_MGAUSS_TO_UT50;
 800ddf0:	4b40      	ldr	r3, [pc, #256]	; (800def4 <Magneto_Sensor_Handler+0x148>)
 800ddf2:	689b      	ldr	r3, [r3, #8]
 800ddf4:	ee07 3a90 	vmov	s15, r3
 800ddf8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ddfc:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 800defc <Magneto_Sensor_Handler+0x150>
 800de00:	ee67 7a87 	vmul.f32	s15, s15, s14
 800de04:	edc7 7a07 	vstr	s15, [r7, #28]

      mag_data_in.time_stamp = (int)MagTimeStamp;
 800de08:	4b3d      	ldr	r3, [pc, #244]	; (800df00 <Magneto_Sensor_Handler+0x154>)
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	623b      	str	r3, [r7, #32]
      MagTimeStamp += (uint32_t)ALGO_PERIOD;
 800de0e:	4b3c      	ldr	r3, [pc, #240]	; (800df00 <Magneto_Sensor_Handler+0x154>)
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	330a      	adds	r3, #10
 800de14:	4a3a      	ldr	r2, [pc, #232]	; (800df00 <Magneto_Sensor_Handler+0x154>)
 800de16:	6013      	str	r3, [r2, #0]

      MotionFX_manager_MagCal_run(&mag_data_in, &mag_data_out);
 800de18:	1d3a      	adds	r2, r7, #4
 800de1a:	f107 0314 	add.w	r3, r7, #20
 800de1e:	4611      	mov	r1, r2
 800de20:	4618      	mov	r0, r3
 800de22:	f000 faab 	bl	800e37c <MotionFX_manager_MagCal_run>

      if (mag_data_out.cal_quality == MFX_MAGCALGOOD)
 800de26:	7c3b      	ldrb	r3, [r7, #16]
 800de28:	2b03      	cmp	r3, #3
 800de2a:	d135      	bne.n	800de98 <Magneto_Sensor_Handler+0xec>
      {
        MagCalStatus = 1;
 800de2c:	4b32      	ldr	r3, [pc, #200]	; (800def8 <Magneto_Sensor_Handler+0x14c>)
 800de2e:	2201      	movs	r2, #1
 800de30:	701a      	strb	r2, [r3, #0]

        ans_float = (mag_data_out.hi_bias[0] * FROM_UT50_TO_MGAUSS);
 800de32:	edd7 7a01 	vldr	s15, [r7, #4]
 800de36:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800df04 <Magneto_Sensor_Handler+0x158>
 800de3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800de3e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        MagOffset.x = (int32_t)ans_float;
 800de42:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800de46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800de4a:	ee17 2a90 	vmov	r2, s15
 800de4e:	4b2e      	ldr	r3, [pc, #184]	; (800df08 <Magneto_Sensor_Handler+0x15c>)
 800de50:	601a      	str	r2, [r3, #0]
        ans_float = (mag_data_out.hi_bias[1] * FROM_UT50_TO_MGAUSS);
 800de52:	edd7 7a02 	vldr	s15, [r7, #8]
 800de56:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800df04 <Magneto_Sensor_Handler+0x158>
 800de5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800de5e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        MagOffset.y = (int32_t)ans_float;
 800de62:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800de66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800de6a:	ee17 2a90 	vmov	r2, s15
 800de6e:	4b26      	ldr	r3, [pc, #152]	; (800df08 <Magneto_Sensor_Handler+0x15c>)
 800de70:	605a      	str	r2, [r3, #4]
        ans_float = (mag_data_out.hi_bias[2] * FROM_UT50_TO_MGAUSS);
 800de72:	edd7 7a03 	vldr	s15, [r7, #12]
 800de76:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800df04 <Magneto_Sensor_Handler+0x158>
 800de7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800de7e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        MagOffset.z = (int32_t)ans_float;
 800de82:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800de86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800de8a:	ee17 2a90 	vmov	r2, s15
 800de8e:	4b1e      	ldr	r3, [pc, #120]	; (800df08 <Magneto_Sensor_Handler+0x15c>)
 800de90:	609a      	str	r2, [r3, #8]

        /* Disable magnetometer calibration */
        MotionFX_manager_MagCal_stop(ALGO_PERIOD);
 800de92:	200a      	movs	r0, #10
 800de94:	f000 fa8d 	bl	800e3b2 <MotionFX_manager_MagCal_stop>
      }
    }

    MagValue.x = (int32_t)(MagValue.x - MagOffset.x);
 800de98:	4b16      	ldr	r3, [pc, #88]	; (800def4 <Magneto_Sensor_Handler+0x148>)
 800de9a:	681a      	ldr	r2, [r3, #0]
 800de9c:	4b1a      	ldr	r3, [pc, #104]	; (800df08 <Magneto_Sensor_Handler+0x15c>)
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	1ad3      	subs	r3, r2, r3
 800dea2:	4a14      	ldr	r2, [pc, #80]	; (800def4 <Magneto_Sensor_Handler+0x148>)
 800dea4:	6013      	str	r3, [r2, #0]
    MagValue.y = (int32_t)(MagValue.y - MagOffset.y);
 800dea6:	4b13      	ldr	r3, [pc, #76]	; (800def4 <Magneto_Sensor_Handler+0x148>)
 800dea8:	685a      	ldr	r2, [r3, #4]
 800deaa:	4b17      	ldr	r3, [pc, #92]	; (800df08 <Magneto_Sensor_Handler+0x15c>)
 800deac:	685b      	ldr	r3, [r3, #4]
 800deae:	1ad3      	subs	r3, r2, r3
 800deb0:	4a10      	ldr	r2, [pc, #64]	; (800def4 <Magneto_Sensor_Handler+0x148>)
 800deb2:	6053      	str	r3, [r2, #4]
    MagValue.z = (int32_t)(MagValue.z - MagOffset.z);
 800deb4:	4b0f      	ldr	r3, [pc, #60]	; (800def4 <Magneto_Sensor_Handler+0x148>)
 800deb6:	689a      	ldr	r2, [r3, #8]
 800deb8:	4b13      	ldr	r3, [pc, #76]	; (800df08 <Magneto_Sensor_Handler+0x15c>)
 800deba:	689b      	ldr	r3, [r3, #8]
 800debc:	1ad3      	subs	r3, r2, r3
 800debe:	4a0d      	ldr	r2, [pc, #52]	; (800def4 <Magneto_Sensor_Handler+0x148>)
 800dec0:	6093      	str	r3, [r2, #8]

	m_axes.AXIS_X = MagValue.x;
 800dec2:	4b0c      	ldr	r3, [pc, #48]	; (800def4 <Magneto_Sensor_Handler+0x148>)
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	4a11      	ldr	r2, [pc, #68]	; (800df0c <Magneto_Sensor_Handler+0x160>)
 800dec8:	6013      	str	r3, [r2, #0]
	m_axes.AXIS_Y = MagValue.y;
 800deca:	4b0a      	ldr	r3, [pc, #40]	; (800def4 <Magneto_Sensor_Handler+0x148>)
 800decc:	685b      	ldr	r3, [r3, #4]
 800dece:	4a0f      	ldr	r2, [pc, #60]	; (800df0c <Magneto_Sensor_Handler+0x160>)
 800ded0:	6053      	str	r3, [r2, #4]
	m_axes.AXIS_Z = MagValue.z;
 800ded2:	4b08      	ldr	r3, [pc, #32]	; (800def4 <Magneto_Sensor_Handler+0x148>)
 800ded4:	689b      	ldr	r3, [r3, #8]
 800ded6:	4a0d      	ldr	r2, [pc, #52]	; (800df0c <Magneto_Sensor_Handler+0x160>)
 800ded8:	6093      	str	r3, [r2, #8]
	printf("mx: %ld, my: %ld, mz: %ld\r\n", m_axes.AXIS_X, m_axes.AXIS_Y,
 800deda:	4b0c      	ldr	r3, [pc, #48]	; (800df0c <Magneto_Sensor_Handler+0x160>)
 800dedc:	6819      	ldr	r1, [r3, #0]
 800dede:	4b0b      	ldr	r3, [pc, #44]	; (800df0c <Magneto_Sensor_Handler+0x160>)
 800dee0:	685a      	ldr	r2, [r3, #4]
 800dee2:	4b0a      	ldr	r3, [pc, #40]	; (800df0c <Magneto_Sensor_Handler+0x160>)
 800dee4:	689b      	ldr	r3, [r3, #8]
 800dee6:	480a      	ldr	r0, [pc, #40]	; (800df10 <Magneto_Sensor_Handler+0x164>)
 800dee8:	f00c fb9e 	bl	801a628 <iprintf>
			m_axes.AXIS_Z);

}
 800deec:	bf00      	nop
 800deee:	3728      	adds	r7, #40	; 0x28
 800def0:	46bd      	mov	sp, r7
 800def2:	bd80      	pop	{r7, pc}
 800def4:	2000245c 	.word	0x2000245c
 800def8:	20002478 	.word	0x20002478
 800defc:	3b03126f 	.word	0x3b03126f
 800df00:	20002474 	.word	0x20002474
 800df04:	43fa0000 	.word	0x43fa0000
 800df08:	20002468 	.word	0x20002468
 800df0c:	200021d8 	.word	0x200021d8
 800df10:	0801d5e8 	.word	0x0801d5e8

0800df14 <Pressure_Sensor_Handler>:
/**
 * @brief  Handles the PRESS sensor data getting/sending.
 * @retval None
 */
static void Pressure_Sensor_Handler()
{
 800df14:	b580      	push	{r7, lr}
 800df16:	af00      	add	r7, sp, #0
  BSP_SENSOR_PRESS_GetValue(&mems_pressure);
 800df18:	4802      	ldr	r0, [pc, #8]	; (800df24 <Pressure_Sensor_Handler+0x10>)
 800df1a:	f000 f916 	bl	800e14a <BSP_SENSOR_PRESS_GetValue>
}
 800df1e:	bf00      	nop
 800df20:	bd80      	pop	{r7, pc}
 800df22:	bf00      	nop
 800df24:	20002a3c 	.word	0x20002a3c

0800df28 <Temperature_Sensor_Handler>:
/**
 * @brief  Handles the TEMP axes data getting/sending
 * @retval None
 */
static void Temperature_Sensor_Handler()
{
 800df28:	b580      	push	{r7, lr}
 800df2a:	af00      	add	r7, sp, #0
  BSP_SENSOR_TEMP_GetValue(&mems_temperature);
 800df2c:	4802      	ldr	r0, [pc, #8]	; (800df38 <Temperature_Sensor_Handler+0x10>)
 800df2e:	f000 f919 	bl	800e164 <BSP_SENSOR_TEMP_GetValue>
}
 800df32:	bf00      	nop
 800df34:	bd80      	pop	{r7, pc}
 800df36:	bf00      	nop
 800df38:	20002a34 	.word	0x20002a34

0800df3c <Humidity_Sensor_Handler>:
/**
 * @brief  Handles the HUM axes data getting/sending
 * @retval None
 */
static void Humidity_Sensor_Handler()
{
 800df3c:	b580      	push	{r7, lr}
 800df3e:	af00      	add	r7, sp, #0
  BSP_SENSOR_HUM_GetValue(&mems_humidity);
 800df40:	4802      	ldr	r0, [pc, #8]	; (800df4c <Humidity_Sensor_Handler+0x10>)
 800df42:	f000 f91c 	bl	800e17e <BSP_SENSOR_HUM_GetValue>
}
 800df46:	bf00      	nop
 800df48:	bd80      	pop	{r7, pc}
 800df4a:	bf00      	nop
 800df4c:	20002a30 	.word	0x20002a30

0800df50 <TIM_Config>:
 * @brief  Timer configuration
 * @param  Freq the desired Timer frequency
 * @retval None
 */
static void TIM_Config(uint32_t Freq)
{
 800df50:	b580      	push	{r7, lr}
 800df52:	b086      	sub	sp, #24
 800df54:	af00      	add	r7, sp, #0
 800df56:	6078      	str	r0, [r7, #4]
  const uint32_t tim_counter_clock = 2000; /* TIM counter clock 2 kHz */
 800df58:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800df5c:	617b      	str	r3, [r7, #20]
  uint32_t prescaler_value = (uint32_t)((SystemCoreClock / tim_counter_clock) - 1);
 800df5e:	4b14      	ldr	r3, [pc, #80]	; (800dfb0 <TIM_Config+0x60>)
 800df60:	681a      	ldr	r2, [r3, #0]
 800df62:	697b      	ldr	r3, [r7, #20]
 800df64:	fbb2 f3f3 	udiv	r3, r2, r3
 800df68:	3b01      	subs	r3, #1
 800df6a:	613b      	str	r3, [r7, #16]
  uint32_t period = (tim_counter_clock / Freq) - 1;
 800df6c:	697a      	ldr	r2, [r7, #20]
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	fbb2 f3f3 	udiv	r3, r2, r3
 800df74:	3b01      	subs	r3, #1
 800df76:	60fb      	str	r3, [r7, #12]

  BSP_IP_TIM_Handle.Init.Prescaler         = prescaler_value;
 800df78:	4a0e      	ldr	r2, [pc, #56]	; (800dfb4 <TIM_Config+0x64>)
 800df7a:	693b      	ldr	r3, [r7, #16]
 800df7c:	6053      	str	r3, [r2, #4]
  BSP_IP_TIM_Handle.Init.CounterMode       = TIM_COUNTERMODE_UP;
 800df7e:	4b0d      	ldr	r3, [pc, #52]	; (800dfb4 <TIM_Config+0x64>)
 800df80:	2200      	movs	r2, #0
 800df82:	609a      	str	r2, [r3, #8]
  BSP_IP_TIM_Handle.Init.Period            = period;
 800df84:	4a0b      	ldr	r2, [pc, #44]	; (800dfb4 <TIM_Config+0x64>)
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	60d3      	str	r3, [r2, #12]
  BSP_IP_TIM_Handle.Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
 800df8a:	4b0a      	ldr	r3, [pc, #40]	; (800dfb4 <TIM_Config+0x64>)
 800df8c:	2200      	movs	r2, #0
 800df8e:	611a      	str	r2, [r3, #16]
  BSP_IP_TIM_Handle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800df90:	4b08      	ldr	r3, [pc, #32]	; (800dfb4 <TIM_Config+0x64>)
 800df92:	2200      	movs	r2, #0
 800df94:	619a      	str	r2, [r3, #24]

  if (HAL_TIM_Base_Init(&BSP_IP_TIM_Handle) != HAL_OK)
 800df96:	4807      	ldr	r0, [pc, #28]	; (800dfb4 <TIM_Config+0x64>)
 800df98:	f7fe fdba 	bl	800cb10 <HAL_TIM_Base_Init>
 800df9c:	4603      	mov	r3, r0
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d001      	beq.n	800dfa6 <TIM_Config+0x56>
  {
    Error_Handler();
 800dfa2:	f7f5 f899 	bl	80030d8 <Error_Handler>
  }
}
 800dfa6:	bf00      	nop
 800dfa8:	3718      	adds	r7, #24
 800dfaa:	46bd      	mov	sp, r7
 800dfac:	bd80      	pop	{r7, pc}
 800dfae:	bf00      	nop
 800dfb0:	200011c4 	.word	0x200011c4
 800dfb4:	200027e4 	.word	0x200027e4

0800dfb8 <DWT_Start>:
 * @brief  Start counting clock cycles
 * @param  None
 * @retval None
 */
static void DWT_Start(void)
{
 800dfb8:	b480      	push	{r7}
 800dfba:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800dfbc:	4b09      	ldr	r3, [pc, #36]	; (800dfe4 <DWT_Start+0x2c>)
 800dfbe:	68db      	ldr	r3, [r3, #12]
 800dfc0:	4a08      	ldr	r2, [pc, #32]	; (800dfe4 <DWT_Start+0x2c>)
 800dfc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800dfc6:	60d3      	str	r3, [r2, #12]
  DWT->CYCCNT = 0; /* Clear count of clock cycles */
 800dfc8:	4b07      	ldr	r3, [pc, #28]	; (800dfe8 <DWT_Start+0x30>)
 800dfca:	2200      	movs	r2, #0
 800dfcc:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= 1;  /* Enable counter */
 800dfce:	4b06      	ldr	r3, [pc, #24]	; (800dfe8 <DWT_Start+0x30>)
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	4a05      	ldr	r2, [pc, #20]	; (800dfe8 <DWT_Start+0x30>)
 800dfd4:	f043 0301 	orr.w	r3, r3, #1
 800dfd8:	6013      	str	r3, [r2, #0]
}
 800dfda:	bf00      	nop
 800dfdc:	46bd      	mov	sp, r7
 800dfde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe2:	4770      	bx	lr
 800dfe4:	e000edf0 	.word	0xe000edf0
 800dfe8:	e0001000 	.word	0xe0001000

0800dfec <DWT_Stop>:
 * @brief  Stop counting clock cycles and calculate elapsed time in [us]
 * @param  None
 * @retval Elapsed time in [us]
 */
static uint32_t DWT_Stop(void)
{
 800dfec:	b480      	push	{r7}
 800dfee:	b083      	sub	sp, #12
 800dff0:	af00      	add	r7, sp, #0
  volatile uint32_t cycles_count = 0U;
 800dff2:	2300      	movs	r3, #0
 800dff4:	603b      	str	r3, [r7, #0]
  uint32_t system_core_clock_mhz = 0U;
 800dff6:	2300      	movs	r3, #0
 800dff8:	607b      	str	r3, [r7, #4]

  DWT->CTRL = DWT->CTRL ^ 1;  /* Disable counter */
 800dffa:	4b0d      	ldr	r3, [pc, #52]	; (800e030 <DWT_Stop+0x44>)
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	4a0c      	ldr	r2, [pc, #48]	; (800e030 <DWT_Stop+0x44>)
 800e000:	f083 0301 	eor.w	r3, r3, #1
 800e004:	6013      	str	r3, [r2, #0]
  cycles_count = DWT->CYCCNT; /* Read count of clock cycles */
 800e006:	4b0a      	ldr	r3, [pc, #40]	; (800e030 <DWT_Stop+0x44>)
 800e008:	685b      	ldr	r3, [r3, #4]
 800e00a:	603b      	str	r3, [r7, #0]

  /* Calculate elapsed time in [us] */
  system_core_clock_mhz = SystemCoreClock / 1000000U;
 800e00c:	4b09      	ldr	r3, [pc, #36]	; (800e034 <DWT_Stop+0x48>)
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	4a09      	ldr	r2, [pc, #36]	; (800e038 <DWT_Stop+0x4c>)
 800e012:	fba2 2303 	umull	r2, r3, r2, r3
 800e016:	0c9b      	lsrs	r3, r3, #18
 800e018:	607b      	str	r3, [r7, #4]
  return cycles_count / system_core_clock_mhz;
 800e01a:	683a      	ldr	r2, [r7, #0]
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800e022:	4618      	mov	r0, r3
 800e024:	370c      	adds	r7, #12
 800e026:	46bd      	mov	sp, r7
 800e028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e02c:	4770      	bx	lr
 800e02e:	bf00      	nop
 800e030:	e0001000 	.word	0xe0001000
 800e034:	200011c4 	.word	0x200011c4
 800e038:	431bde83 	.word	0x431bde83

0800e03c <BSP_SENSOR_ACC_Init>:
  * @brief  Initializes accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Init(void)
{
 800e03c:	b580      	push	{r7, lr}
 800e03e:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM6DSL_0, MOTION_ACCELERO);
 800e040:	2102      	movs	r1, #2
 800e042:	2000      	movs	r0, #0
 800e044:	f7fa f8bc 	bl	80081c0 <IKS01A2_MOTION_SENSOR_Init>
}
 800e048:	bf00      	nop
 800e04a:	bd80      	pop	{r7, pc}

0800e04c <BSP_SENSOR_GYR_Init>:
  * @brief  Initializes gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Init(void)
{
 800e04c:	b580      	push	{r7, lr}
 800e04e:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM6DSL_0, MOTION_GYRO);
 800e050:	2101      	movs	r1, #1
 800e052:	2000      	movs	r0, #0
 800e054:	f7fa f8b4 	bl	80081c0 <IKS01A2_MOTION_SENSOR_Init>
}
 800e058:	bf00      	nop
 800e05a:	bd80      	pop	{r7, pc}

0800e05c <BSP_SENSOR_MAG_Init>:
  * @brief  Initializes magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Init(void)
{
 800e05c:	b580      	push	{r7, lr}
 800e05e:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM303AGR_MAG_0, MOTION_MAGNETO);
 800e060:	2104      	movs	r1, #4
 800e062:	2002      	movs	r0, #2
 800e064:	f7fa f8ac 	bl	80081c0 <IKS01A2_MOTION_SENSOR_Init>
}
 800e068:	bf00      	nop
 800e06a:	bd80      	pop	{r7, pc}

0800e06c <BSP_SENSOR_PRESS_Init>:
  * @brief  Initializes pressure sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_PRESS_Init(void)
{
 800e06c:	b580      	push	{r7, lr}
 800e06e:	af00      	add	r7, sp, #0
  (void)IKS01A2_ENV_SENSOR_Init(IKS01A2_LPS22HB_0, ENV_PRESSURE);
 800e070:	2102      	movs	r1, #2
 800e072:	2001      	movs	r0, #1
 800e074:	f7f9 fde8 	bl	8007c48 <IKS01A2_ENV_SENSOR_Init>
}
 800e078:	bf00      	nop
 800e07a:	bd80      	pop	{r7, pc}

0800e07c <BSP_SENSOR_TEMP_Init>:
  * @brief  Initializes temperature sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_TEMP_Init(void)
{
 800e07c:	b580      	push	{r7, lr}
 800e07e:	af00      	add	r7, sp, #0
  (void)IKS01A2_ENV_SENSOR_Init(IKS01A2_HTS221_0, ENV_TEMPERATURE);
 800e080:	2101      	movs	r1, #1
 800e082:	2000      	movs	r0, #0
 800e084:	f7f9 fde0 	bl	8007c48 <IKS01A2_ENV_SENSOR_Init>
}
 800e088:	bf00      	nop
 800e08a:	bd80      	pop	{r7, pc}

0800e08c <BSP_SENSOR_HUM_Init>:
  * @brief  Initializes humidity sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_HUM_Init(void)
{
 800e08c:	b580      	push	{r7, lr}
 800e08e:	af00      	add	r7, sp, #0
  (void)IKS01A2_ENV_SENSOR_Init(IKS01A2_HTS221_0, ENV_HUMIDITY);
 800e090:	2104      	movs	r1, #4
 800e092:	2000      	movs	r0, #0
 800e094:	f7f9 fdd8 	bl	8007c48 <IKS01A2_ENV_SENSOR_Init>
}
 800e098:	bf00      	nop
 800e09a:	bd80      	pop	{r7, pc}

0800e09c <BSP_SENSOR_ACC_Enable>:
  * @brief  Enables accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Enable(void)
{
 800e09c:	b580      	push	{r7, lr}
 800e09e:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM6DSL_0, MOTION_ACCELERO);
 800e0a0:	2102      	movs	r1, #2
 800e0a2:	2000      	movs	r0, #0
 800e0a4:	f7fa f982 	bl	80083ac <IKS01A2_MOTION_SENSOR_Enable>
}
 800e0a8:	bf00      	nop
 800e0aa:	bd80      	pop	{r7, pc}

0800e0ac <BSP_SENSOR_GYR_Enable>:
  * @brief  Enables gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Enable(void)
{
 800e0ac:	b580      	push	{r7, lr}
 800e0ae:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM6DSL_0, MOTION_GYRO);
 800e0b0:	2101      	movs	r1, #1
 800e0b2:	2000      	movs	r0, #0
 800e0b4:	f7fa f97a 	bl	80083ac <IKS01A2_MOTION_SENSOR_Enable>
}
 800e0b8:	bf00      	nop
 800e0ba:	bd80      	pop	{r7, pc}

0800e0bc <BSP_SENSOR_MAG_Enable>:
  * @brief  Enables magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Enable(void)
{
 800e0bc:	b580      	push	{r7, lr}
 800e0be:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM303AGR_MAG_0, MOTION_MAGNETO);
 800e0c0:	2104      	movs	r1, #4
 800e0c2:	2002      	movs	r0, #2
 800e0c4:	f7fa f972 	bl	80083ac <IKS01A2_MOTION_SENSOR_Enable>
}
 800e0c8:	bf00      	nop
 800e0ca:	bd80      	pop	{r7, pc}

0800e0cc <BSP_SENSOR_PRESS_Enable>:
  * @brief  Enables pressure sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_PRESS_Enable(void)
{
 800e0cc:	b580      	push	{r7, lr}
 800e0ce:	af00      	add	r7, sp, #0
  (void)IKS01A2_ENV_SENSOR_Enable(IKS01A2_LPS22HB_0, ENV_PRESSURE);
 800e0d0:	2102      	movs	r1, #2
 800e0d2:	2001      	movs	r0, #1
 800e0d4:	f7f9 fe78 	bl	8007dc8 <IKS01A2_ENV_SENSOR_Enable>
}
 800e0d8:	bf00      	nop
 800e0da:	bd80      	pop	{r7, pc}

0800e0dc <BSP_SENSOR_TEMP_Enable>:
  * @brief  Enables temperature sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_TEMP_Enable(void)
{
 800e0dc:	b580      	push	{r7, lr}
 800e0de:	af00      	add	r7, sp, #0
  (void)IKS01A2_ENV_SENSOR_Enable(IKS01A2_HTS221_0, ENV_TEMPERATURE);
 800e0e0:	2101      	movs	r1, #1
 800e0e2:	2000      	movs	r0, #0
 800e0e4:	f7f9 fe70 	bl	8007dc8 <IKS01A2_ENV_SENSOR_Enable>
}
 800e0e8:	bf00      	nop
 800e0ea:	bd80      	pop	{r7, pc}

0800e0ec <BSP_SENSOR_HUM_Enable>:
  * @brief  Enables humidity sensors
  * @param  None
  * @retval None
  */
void BSP_SENSOR_HUM_Enable(void)
{
 800e0ec:	b580      	push	{r7, lr}
 800e0ee:	af00      	add	r7, sp, #0
  (void)IKS01A2_ENV_SENSOR_Enable(IKS01A2_HTS221_0, ENV_HUMIDITY);
 800e0f0:	2104      	movs	r1, #4
 800e0f2:	2000      	movs	r0, #0
 800e0f4:	f7f9 fe68 	bl	8007dc8 <IKS01A2_ENV_SENSOR_Enable>
}
 800e0f8:	bf00      	nop
 800e0fa:	bd80      	pop	{r7, pc}

0800e0fc <BSP_SENSOR_ACC_GetAxes>:
  * @brief  Get accelerometer data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_ACC_GetAxes(IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b082      	sub	sp, #8
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM6DSL_0, MOTION_ACCELERO, Axes);
 800e104:	687a      	ldr	r2, [r7, #4]
 800e106:	2102      	movs	r1, #2
 800e108:	2000      	movs	r0, #0
 800e10a:	f7fa f991 	bl	8008430 <IKS01A2_MOTION_SENSOR_GetAxes>
}
 800e10e:	bf00      	nop
 800e110:	3708      	adds	r7, #8
 800e112:	46bd      	mov	sp, r7
 800e114:	bd80      	pop	{r7, pc}

0800e116 <BSP_SENSOR_GYR_GetAxes>:
  * @brief  Get gyroscope data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_GYR_GetAxes(IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 800e116:	b580      	push	{r7, lr}
 800e118:	b082      	sub	sp, #8
 800e11a:	af00      	add	r7, sp, #0
 800e11c:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM6DSL_0, MOTION_GYRO, Axes);
 800e11e:	687a      	ldr	r2, [r7, #4]
 800e120:	2101      	movs	r1, #1
 800e122:	2000      	movs	r0, #0
 800e124:	f7fa f984 	bl	8008430 <IKS01A2_MOTION_SENSOR_GetAxes>
}
 800e128:	bf00      	nop
 800e12a:	3708      	adds	r7, #8
 800e12c:	46bd      	mov	sp, r7
 800e12e:	bd80      	pop	{r7, pc}

0800e130 <BSP_SENSOR_MAG_GetAxes>:
  * @brief  Get magnetometer data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_MAG_GetAxes(IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 800e130:	b580      	push	{r7, lr}
 800e132:	b082      	sub	sp, #8
 800e134:	af00      	add	r7, sp, #0
 800e136:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM303AGR_MAG_0, MOTION_MAGNETO, Axes);
 800e138:	687a      	ldr	r2, [r7, #4]
 800e13a:	2104      	movs	r1, #4
 800e13c:	2002      	movs	r0, #2
 800e13e:	f7fa f977 	bl	8008430 <IKS01A2_MOTION_SENSOR_GetAxes>
}
 800e142:	bf00      	nop
 800e144:	3708      	adds	r7, #8
 800e146:	46bd      	mov	sp, r7
 800e148:	bd80      	pop	{r7, pc}

0800e14a <BSP_SENSOR_PRESS_GetValue>:
  * @brief  Get pressure sensor data
  * @param  Value pointer to pressure value
  * @retval None
  */
void BSP_SENSOR_PRESS_GetValue(float *Value)
{
 800e14a:	b580      	push	{r7, lr}
 800e14c:	b082      	sub	sp, #8
 800e14e:	af00      	add	r7, sp, #0
 800e150:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_ENV_SENSOR_GetValue(IKS01A2_LPS22HB_0, ENV_PRESSURE, Value);
 800e152:	687a      	ldr	r2, [r7, #4]
 800e154:	2102      	movs	r1, #2
 800e156:	2001      	movs	r0, #1
 800e158:	f7f9 fe78 	bl	8007e4c <IKS01A2_ENV_SENSOR_GetValue>
}
 800e15c:	bf00      	nop
 800e15e:	3708      	adds	r7, #8
 800e160:	46bd      	mov	sp, r7
 800e162:	bd80      	pop	{r7, pc}

0800e164 <BSP_SENSOR_TEMP_GetValue>:
  * @brief  Get temperature sensor data
  * @param  Value pointer to temperature value
  * @retval None
  */
void BSP_SENSOR_TEMP_GetValue(float *Value)
{
 800e164:	b580      	push	{r7, lr}
 800e166:	b082      	sub	sp, #8
 800e168:	af00      	add	r7, sp, #0
 800e16a:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_ENV_SENSOR_GetValue(IKS01A2_HTS221_0, ENV_TEMPERATURE, Value);
 800e16c:	687a      	ldr	r2, [r7, #4]
 800e16e:	2101      	movs	r1, #1
 800e170:	2000      	movs	r0, #0
 800e172:	f7f9 fe6b 	bl	8007e4c <IKS01A2_ENV_SENSOR_GetValue>
}
 800e176:	bf00      	nop
 800e178:	3708      	adds	r7, #8
 800e17a:	46bd      	mov	sp, r7
 800e17c:	bd80      	pop	{r7, pc}

0800e17e <BSP_SENSOR_HUM_GetValue>:
  * @brief  Get humidity sensor data
  * @param  Value pointer to humidity value
  * @retval None
  */
void BSP_SENSOR_HUM_GetValue(float *Value)
{
 800e17e:	b580      	push	{r7, lr}
 800e180:	b082      	sub	sp, #8
 800e182:	af00      	add	r7, sp, #0
 800e184:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_ENV_SENSOR_GetValue(IKS01A2_HTS221_0, ENV_HUMIDITY, Value);
 800e186:	687a      	ldr	r2, [r7, #4]
 800e188:	2104      	movs	r1, #4
 800e18a:	2000      	movs	r0, #0
 800e18c:	f7f9 fe5e 	bl	8007e4c <IKS01A2_ENV_SENSOR_GetValue>
}
 800e190:	bf00      	nop
 800e192:	3708      	adds	r7, #8
 800e194:	46bd      	mov	sp, r7
 800e196:	bd80      	pop	{r7, pc}

0800e198 <BSP_SENSOR_ACC_SetOutputDataRate>:
  * @brief  Set output data rate for accelerometer
  * @param  Odr Output Data Rate value to be set
  * @retval None
  */
void BSP_SENSOR_ACC_SetOutputDataRate(float Odr)
{
 800e198:	b580      	push	{r7, lr}
 800e19a:	b082      	sub	sp, #8
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_MOTION_SENSOR_SetOutputDataRate(IKS01A2_LSM6DSL_0, MOTION_ACCELERO, Odr);
 800e1a0:	687a      	ldr	r2, [r7, #4]
 800e1a2:	2102      	movs	r1, #2
 800e1a4:	2000      	movs	r0, #0
 800e1a6:	f7fa f987 	bl	80084b8 <IKS01A2_MOTION_SENSOR_SetOutputDataRate>
}
 800e1aa:	bf00      	nop
 800e1ac:	3708      	adds	r7, #8
 800e1ae:	46bd      	mov	sp, r7
 800e1b0:	bd80      	pop	{r7, pc}

0800e1b2 <BSP_SENSOR_MAG_SetOutputDataRate>:
  * @brief  Set output data rate for magnetometer
  * @param  Odr Output Data Rate value to be set
  * @retval None
  */
void BSP_SENSOR_MAG_SetOutputDataRate(float Odr)
{
 800e1b2:	b580      	push	{r7, lr}
 800e1b4:	b082      	sub	sp, #8
 800e1b6:	af00      	add	r7, sp, #0
 800e1b8:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_MOTION_SENSOR_SetOutputDataRate(IKS01A2_LSM303AGR_MAG_0, MOTION_MAGNETO, Odr);
 800e1ba:	687a      	ldr	r2, [r7, #4]
 800e1bc:	2104      	movs	r1, #4
 800e1be:	2002      	movs	r0, #2
 800e1c0:	f7fa f97a 	bl	80084b8 <IKS01A2_MOTION_SENSOR_SetOutputDataRate>
}
 800e1c4:	bf00      	nop
 800e1c6:	3708      	adds	r7, #8
 800e1c8:	46bd      	mov	sp, r7
 800e1ca:	bd80      	pop	{r7, pc}

0800e1cc <BSP_SENSOR_ACC_SetFullScale>:
  * @brief  Set full scale for acclerometer
  * @param  Fullscale Fullscale value to be set
  * @retval None
  */
void BSP_SENSOR_ACC_SetFullScale(int32_t Fullscale)
{
 800e1cc:	b580      	push	{r7, lr}
 800e1ce:	b082      	sub	sp, #8
 800e1d0:	af00      	add	r7, sp, #0
 800e1d2:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_MOTION_SENSOR_SetFullScale(IKS01A2_LSM6DSL_0, MOTION_ACCELERO, Fullscale);
 800e1d4:	687a      	ldr	r2, [r7, #4]
 800e1d6:	2102      	movs	r1, #2
 800e1d8:	2000      	movs	r0, #0
 800e1da:	f7fa f9b1 	bl	8008540 <IKS01A2_MOTION_SENSOR_SetFullScale>
}
 800e1de:	bf00      	nop
 800e1e0:	3708      	adds	r7, #8
 800e1e2:	46bd      	mov	sp, r7
 800e1e4:	bd80      	pop	{r7, pc}

0800e1e6 <BSP_SENSOR_ACC_GetOrientation>:
  * @brief  Get accelerometer sensor orientation
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_ACC_GetOrientation(char *Orientation)
{
 800e1e6:	b480      	push	{r7}
 800e1e8:	b083      	sub	sp, #12
 800e1ea:	af00      	add	r7, sp, #0
 800e1ec:	6078      	str	r0, [r7, #4]
  Orientation[0] = 'n';
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	226e      	movs	r2, #110	; 0x6e
 800e1f2:	701a      	strb	r2, [r3, #0]
  Orientation[1] = 'w';
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	3301      	adds	r3, #1
 800e1f8:	2277      	movs	r2, #119	; 0x77
 800e1fa:	701a      	strb	r2, [r3, #0]
  Orientation[2] = 'u';
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	3302      	adds	r3, #2
 800e200:	2275      	movs	r2, #117	; 0x75
 800e202:	701a      	strb	r2, [r3, #0]
}
 800e204:	bf00      	nop
 800e206:	370c      	adds	r7, #12
 800e208:	46bd      	mov	sp, r7
 800e20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e20e:	4770      	bx	lr

0800e210 <BSP_SENSOR_GYR_GetOrientation>:
  * @brief  Get gyroscope sensor orientation
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_GYR_GetOrientation(char *Orientation)
{
 800e210:	b480      	push	{r7}
 800e212:	b083      	sub	sp, #12
 800e214:	af00      	add	r7, sp, #0
 800e216:	6078      	str	r0, [r7, #4]
  Orientation[0] = 'n';
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	226e      	movs	r2, #110	; 0x6e
 800e21c:	701a      	strb	r2, [r3, #0]
  Orientation[1] = 'w';
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	3301      	adds	r3, #1
 800e222:	2277      	movs	r2, #119	; 0x77
 800e224:	701a      	strb	r2, [r3, #0]
  Orientation[2] = 'u';
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	3302      	adds	r3, #2
 800e22a:	2275      	movs	r2, #117	; 0x75
 800e22c:	701a      	strb	r2, [r3, #0]
}
 800e22e:	bf00      	nop
 800e230:	370c      	adds	r7, #12
 800e232:	46bd      	mov	sp, r7
 800e234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e238:	4770      	bx	lr

0800e23a <BSP_SENSOR_MAG_GetOrientation>:
  * @brief  Get magnetometer sensor orientation
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_MAG_GetOrientation(char *Orientation)
{
 800e23a:	b480      	push	{r7}
 800e23c:	b083      	sub	sp, #12
 800e23e:	af00      	add	r7, sp, #0
 800e240:	6078      	str	r0, [r7, #4]
  Orientation[0] = 'n';
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	226e      	movs	r2, #110	; 0x6e
 800e246:	701a      	strb	r2, [r3, #0]
  Orientation[1] = 'e';
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	3301      	adds	r3, #1
 800e24c:	2265      	movs	r2, #101	; 0x65
 800e24e:	701a      	strb	r2, [r3, #0]
  Orientation[2] = 'u';
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	3302      	adds	r3, #2
 800e254:	2275      	movs	r2, #117	; 0x75
 800e256:	701a      	strb	r2, [r3, #0]
}
 800e258:	bf00      	nop
 800e25a:	370c      	adds	r7, #12
 800e25c:	46bd      	mov	sp, r7
 800e25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e262:	4770      	bx	lr

0800e264 <MotionFX_manager_init>:
 * @brief  Initialize the MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_init(void)
{
 800e264:	b580      	push	{r7, lr}
 800e266:	af00      	add	r7, sp, #0
  MotionFX_initialize();
 800e268:	f00a fd5e 	bl	8018d28 <MotionFX_initialize>

  MotionFX_getKnobs(ipKnobs);
 800e26c:	4b24      	ldr	r3, [pc, #144]	; (800e300 <MotionFX_manager_init+0x9c>)
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	4618      	mov	r0, r3
 800e272:	f00b f81f 	bl	80192b4 <MotionFX_getKnobs>

  BSP_SENSOR_ACC_GetOrientation(ipKnobs->acc_orientation);
 800e276:	4b22      	ldr	r3, [pc, #136]	; (800e300 <MotionFX_manager_init+0x9c>)
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	3329      	adds	r3, #41	; 0x29
 800e27c:	4618      	mov	r0, r3
 800e27e:	f7ff ffb2 	bl	800e1e6 <BSP_SENSOR_ACC_GetOrientation>
  BSP_SENSOR_GYR_GetOrientation(ipKnobs->gyro_orientation);
 800e282:	4b1f      	ldr	r3, [pc, #124]	; (800e300 <MotionFX_manager_init+0x9c>)
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	332d      	adds	r3, #45	; 0x2d
 800e288:	4618      	mov	r0, r3
 800e28a:	f7ff ffc1 	bl	800e210 <BSP_SENSOR_GYR_GetOrientation>
  BSP_SENSOR_MAG_GetOrientation(ipKnobs->mag_orientation);
 800e28e:	4b1c      	ldr	r3, [pc, #112]	; (800e300 <MotionFX_manager_init+0x9c>)
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	3331      	adds	r3, #49	; 0x31
 800e294:	4618      	mov	r0, r3
 800e296:	f7ff ffd0 	bl	800e23a <BSP_SENSOR_MAG_GetOrientation>

  ipKnobs->gbias_acc_th_sc_6X = GBIAS_ACC_TH_SC_6X;
 800e29a:	4b19      	ldr	r3, [pc, #100]	; (800e300 <MotionFX_manager_init+0x9c>)
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	4a19      	ldr	r2, [pc, #100]	; (800e304 <MotionFX_manager_init+0xa0>)
 800e2a0:	615a      	str	r2, [r3, #20]
  ipKnobs->gbias_gyro_th_sc_6X = GBIAS_GYRO_TH_SC_6X;
 800e2a2:	4b17      	ldr	r3, [pc, #92]	; (800e300 <MotionFX_manager_init+0x9c>)
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	4a18      	ldr	r2, [pc, #96]	; (800e308 <MotionFX_manager_init+0xa4>)
 800e2a8:	619a      	str	r2, [r3, #24]
  ipKnobs->gbias_mag_th_sc_6X = GBIAS_MAG_TH_SC_6X;
 800e2aa:	4b15      	ldr	r3, [pc, #84]	; (800e300 <MotionFX_manager_init+0x9c>)
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	4a17      	ldr	r2, [pc, #92]	; (800e30c <MotionFX_manager_init+0xa8>)
 800e2b0:	611a      	str	r2, [r3, #16]

  ipKnobs->gbias_acc_th_sc_9X = GBIAS_ACC_TH_SC_9X;
 800e2b2:	4b13      	ldr	r3, [pc, #76]	; (800e300 <MotionFX_manager_init+0x9c>)
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	4a13      	ldr	r2, [pc, #76]	; (800e304 <MotionFX_manager_init+0xa0>)
 800e2b8:	621a      	str	r2, [r3, #32]
  ipKnobs->gbias_gyro_th_sc_9X = GBIAS_GYRO_TH_SC_9X;
 800e2ba:	4b11      	ldr	r3, [pc, #68]	; (800e300 <MotionFX_manager_init+0x9c>)
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	4a12      	ldr	r2, [pc, #72]	; (800e308 <MotionFX_manager_init+0xa4>)
 800e2c0:	625a      	str	r2, [r3, #36]	; 0x24
  ipKnobs->gbias_mag_th_sc_9X = GBIAS_MAG_TH_SC_9X;
 800e2c2:	4b0f      	ldr	r3, [pc, #60]	; (800e300 <MotionFX_manager_init+0x9c>)
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	4a11      	ldr	r2, [pc, #68]	; (800e30c <MotionFX_manager_init+0xa8>)
 800e2c8:	61da      	str	r2, [r3, #28]

  ipKnobs->output_type = MFX_ENGINE_OUTPUT_ENU;
 800e2ca:	4b0d      	ldr	r3, [pc, #52]	; (800e300 <MotionFX_manager_init+0x9c>)
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	2201      	movs	r2, #1
 800e2d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  ipKnobs->LMode = 1;
 800e2d4:	4b0a      	ldr	r3, [pc, #40]	; (800e300 <MotionFX_manager_init+0x9c>)
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	2201      	movs	r2, #1
 800e2da:	731a      	strb	r2, [r3, #12]
  ipKnobs->modx = DECIMATION;
 800e2dc:	4b08      	ldr	r3, [pc, #32]	; (800e300 <MotionFX_manager_init+0x9c>)
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	2201      	movs	r2, #1
 800e2e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  MotionFX_setKnobs(ipKnobs);
 800e2e6:	4b06      	ldr	r3, [pc, #24]	; (800e300 <MotionFX_manager_init+0x9c>)
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	4618      	mov	r0, r3
 800e2ec:	f00a ff7e 	bl	80191ec <MotionFX_setKnobs>

  MotionFX_enable_6X(MFX_ENGINE_ENABLE);
 800e2f0:	2001      	movs	r0, #1
 800e2f2:	f00b f835 	bl	8019360 <MotionFX_enable_6X>
  MotionFX_enable_9X(MFX_ENGINE_ENABLE);
 800e2f6:	2001      	movs	r0, #1
 800e2f8:	f00b f852 	bl	80193a0 <MotionFX_enable_9X>
}
 800e2fc:	bf00      	nop
 800e2fe:	bd80      	pop	{r7, pc}
 800e300:	2000133c 	.word	0x2000133c
 800e304:	3ac88a48 	.word	0x3ac88a48
 800e308:	3b83126f 	.word	0x3b83126f
 800e30c:	3b449ba6 	.word	0x3b449ba6

0800e310 <MotionFX_manager_run>:
 * @param  data_out Structure containing output data
 * @param  delta_time Delta time
 * @retval None
 */
void MotionFX_manager_run(MFX_input_t *data_in, MFX_output_t *data_out, float delta_time)
{
 800e310:	b580      	push	{r7, lr}
 800e312:	b084      	sub	sp, #16
 800e314:	af00      	add	r7, sp, #0
 800e316:	60f8      	str	r0, [r7, #12]
 800e318:	60b9      	str	r1, [r7, #8]
 800e31a:	607a      	str	r2, [r7, #4]
  if (discardedCount == sampleToDiscard)
 800e31c:	4b0d      	ldr	r3, [pc, #52]	; (800e354 <MotionFX_manager_run+0x44>)
 800e31e:	681a      	ldr	r2, [r3, #0]
 800e320:	4b0d      	ldr	r3, [pc, #52]	; (800e358 <MotionFX_manager_run+0x48>)
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	429a      	cmp	r2, r3
 800e326:	d10c      	bne.n	800e342 <MotionFX_manager_run+0x32>
  {
    MotionFX_propagate(data_out, data_in, &delta_time);
 800e328:	1d3b      	adds	r3, r7, #4
 800e32a:	461a      	mov	r2, r3
 800e32c:	68f9      	ldr	r1, [r7, #12]
 800e32e:	68b8      	ldr	r0, [r7, #8]
 800e330:	f00b fa1a 	bl	8019768 <MotionFX_propagate>
    MotionFX_update(data_out, data_in, &delta_time, NULL);
 800e334:	1d3a      	adds	r2, r7, #4
 800e336:	2300      	movs	r3, #0
 800e338:	68f9      	ldr	r1, [r7, #12]
 800e33a:	68b8      	ldr	r0, [r7, #8]
 800e33c:	f00b f852 	bl	80193e4 <MotionFX_update>
  }
  else
  {
    discardedCount++;
  }
}
 800e340:	e004      	b.n	800e34c <MotionFX_manager_run+0x3c>
    discardedCount++;
 800e342:	4b04      	ldr	r3, [pc, #16]	; (800e354 <MotionFX_manager_run+0x44>)
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	3301      	adds	r3, #1
 800e348:	4a02      	ldr	r2, [pc, #8]	; (800e354 <MotionFX_manager_run+0x44>)
 800e34a:	6013      	str	r3, [r2, #0]
}
 800e34c:	bf00      	nop
 800e34e:	3710      	adds	r7, #16
 800e350:	46bd      	mov	sp, r7
 800e352:	bd80      	pop	{r7, pc}
 800e354:	200024b8 	.word	0x200024b8
 800e358:	20001340 	.word	0x20001340

0800e35c <MotionFX_manager_get_version>:
 * @param  version  Library version string (must be array of 35 char)
 * @param  length  Library version string length
 * @retval None
 */
void MotionFX_manager_get_version(char *version, int *length)
{
 800e35c:	b580      	push	{r7, lr}
 800e35e:	b082      	sub	sp, #8
 800e360:	af00      	add	r7, sp, #0
 800e362:	6078      	str	r0, [r7, #4]
 800e364:	6039      	str	r1, [r7, #0]
  *length = (int)MotionFX_GetLibVersion(version);
 800e366:	6878      	ldr	r0, [r7, #4]
 800e368:	f00c f8fa 	bl	801a560 <MotionFX_GetLibVersion>
 800e36c:	4603      	mov	r3, r0
 800e36e:	461a      	mov	r2, r3
 800e370:	683b      	ldr	r3, [r7, #0]
 800e372:	601a      	str	r2, [r3, #0]
}
 800e374:	bf00      	nop
 800e376:	3708      	adds	r7, #8
 800e378:	46bd      	mov	sp, r7
 800e37a:	bd80      	pop	{r7, pc}

0800e37c <MotionFX_manager_MagCal_run>:
 * @brief  Run magnetometer calibration algorithm
 * @param  None
 * @retval None
 */
void MotionFX_manager_MagCal_run(MFX_MagCal_input_t *data_in, MFX_MagCal_output_t *data_out)
{
 800e37c:	b580      	push	{r7, lr}
 800e37e:	b082      	sub	sp, #8
 800e380:	af00      	add	r7, sp, #0
 800e382:	6078      	str	r0, [r7, #4]
 800e384:	6039      	str	r1, [r7, #0]
  MotionFX_MagCal_run(data_in);
 800e386:	6878      	ldr	r0, [r7, #4]
 800e388:	f00c f814 	bl	801a3b4 <MotionFX_MagCal_run>
  MotionFX_MagCal_getParams(data_out);
 800e38c:	6838      	ldr	r0, [r7, #0]
 800e38e:	f00c f8b7 	bl	801a500 <MotionFX_MagCal_getParams>
}
 800e392:	bf00      	nop
 800e394:	3708      	adds	r7, #8
 800e396:	46bd      	mov	sp, r7
 800e398:	bd80      	pop	{r7, pc}

0800e39a <MotionFX_manager_MagCal_start>:
 * @brief  Start magnetometer calibration
 * @param  None
 * @retval None
 */
void MotionFX_manager_MagCal_start(int sampletime)
{
 800e39a:	b580      	push	{r7, lr}
 800e39c:	b082      	sub	sp, #8
 800e39e:	af00      	add	r7, sp, #0
 800e3a0:	6078      	str	r0, [r7, #4]
  MotionFX_MagCal_init(sampletime, 1);
 800e3a2:	2101      	movs	r1, #1
 800e3a4:	6878      	ldr	r0, [r7, #4]
 800e3a6:	f00b ff55 	bl	801a254 <MotionFX_MagCal_init>
}
 800e3aa:	bf00      	nop
 800e3ac:	3708      	adds	r7, #8
 800e3ae:	46bd      	mov	sp, r7
 800e3b0:	bd80      	pop	{r7, pc}

0800e3b2 <MotionFX_manager_MagCal_stop>:
 * @brief  Stop magnetometer calibration
 * @param  None
 * @retval None
 */
void MotionFX_manager_MagCal_stop(int sampletime)
{
 800e3b2:	b580      	push	{r7, lr}
 800e3b4:	b082      	sub	sp, #8
 800e3b6:	af00      	add	r7, sp, #0
 800e3b8:	6078      	str	r0, [r7, #4]
  MotionFX_MagCal_init(sampletime, 0);
 800e3ba:	2100      	movs	r1, #0
 800e3bc:	6878      	ldr	r0, [r7, #4]
 800e3be:	f00b ff49 	bl	801a254 <MotionFX_MagCal_init>
}
 800e3c2:	bf00      	nop
 800e3c4:	3708      	adds	r7, #8
 800e3c6:	46bd      	mov	sp, r7
 800e3c8:	bd80      	pop	{r7, pc}

0800e3ca <MotionFX_LoadMagCalFromNVM>:
 * @param  dataSize length ot the data
 * @param  data pointer to the data
 * @retval (1) fail, (0) success
 */
char MotionFX_LoadMagCalFromNVM(unsigned short int dataSize, unsigned int *data)
{
 800e3ca:	b480      	push	{r7}
 800e3cc:	b083      	sub	sp, #12
 800e3ce:	af00      	add	r7, sp, #0
 800e3d0:	4603      	mov	r3, r0
 800e3d2:	6039      	str	r1, [r7, #0]
 800e3d4:	80fb      	strh	r3, [r7, #6]
  return (char)1;
 800e3d6:	2301      	movs	r3, #1
}
 800e3d8:	4618      	mov	r0, r3
 800e3da:	370c      	adds	r7, #12
 800e3dc:	46bd      	mov	sp, r7
 800e3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e2:	4770      	bx	lr

0800e3e4 <MotionFX_SaveMagCalInNVM>:
 * @param  dataSize length ot the data
 * @param  data pointer to the data
 * @retval (1) fail, (0) success
 */
char MotionFX_SaveMagCalInNVM(unsigned short int dataSize, unsigned int *data)
{
 800e3e4:	b480      	push	{r7}
 800e3e6:	b083      	sub	sp, #12
 800e3e8:	af00      	add	r7, sp, #0
 800e3ea:	4603      	mov	r3, r0
 800e3ec:	6039      	str	r1, [r7, #0]
 800e3ee:	80fb      	strh	r3, [r7, #6]
  return (char)1;
 800e3f0:	2301      	movs	r3, #1
}
 800e3f2:	4618      	mov	r0, r3
 800e3f4:	370c      	adds	r7, #12
 800e3f6:	46bd      	mov	sp, r7
 800e3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3fc:	4770      	bx	lr

0800e3fe <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 800e3fe:	b580      	push	{r7, lr}
 800e400:	b08c      	sub	sp, #48	; 0x30
 800e402:	af00      	add	r7, sp, #0
 800e404:	603b      	str	r3, [r7, #0]
 800e406:	4603      	mov	r3, r0
 800e408:	71fb      	strb	r3, [r7, #7]
 800e40a:	460b      	mov	r3, r1
 800e40c:	71bb      	strb	r3, [r7, #6]
 800e40e:	4613      	mov	r3, r2
 800e410:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 800e412:	79fb      	ldrb	r3, [r7, #7]
 800e414:	753b      	strb	r3, [r7, #20]
  cp.privacy_enabled = privacy_enabled;
 800e416:	79bb      	ldrb	r3, [r7, #6]
 800e418:	757b      	strb	r3, [r7, #21]
  cp.device_name_char_len = device_name_char_len;
 800e41a:	797b      	ldrb	r3, [r7, #5]
 800e41c:	75bb      	strb	r3, [r7, #22]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800e41e:	f107 030c 	add.w	r3, r7, #12
 800e422:	2207      	movs	r2, #7
 800e424:	2100      	movs	r1, #0
 800e426:	4618      	mov	r0, r3
 800e428:	f00c f8f5 	bl	801a616 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800e42c:	f107 0318 	add.w	r3, r7, #24
 800e430:	2218      	movs	r2, #24
 800e432:	2100      	movs	r1, #0
 800e434:	4618      	mov	r0, r3
 800e436:	f00c f8ee 	bl	801a616 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800e43a:	233f      	movs	r3, #63	; 0x3f
 800e43c:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_GAP_INIT;
 800e43e:	238a      	movs	r3, #138	; 0x8a
 800e440:	837b      	strh	r3, [r7, #26]
  rq.cparam = &cp;
 800e442:	f107 0314 	add.w	r3, r7, #20
 800e446:	623b      	str	r3, [r7, #32]
  rq.clen = sizeof(cp);
 800e448:	2303      	movs	r3, #3
 800e44a:	627b      	str	r3, [r7, #36]	; 0x24
  rq.rparam = &resp;
 800e44c:	f107 030c 	add.w	r3, r7, #12
 800e450:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.rlen = GAP_INIT_RP_SIZE;
 800e452:	2307      	movs	r3, #7
 800e454:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if (hci_send_req(&rq, FALSE) < 0)
 800e456:	f107 0318 	add.w	r3, r7, #24
 800e45a:	2100      	movs	r1, #0
 800e45c:	4618      	mov	r0, r3
 800e45e:	f000 fead 	bl	800f1bc <hci_send_req>
 800e462:	4603      	mov	r3, r0
 800e464:	2b00      	cmp	r3, #0
 800e466:	da01      	bge.n	800e46c <aci_gap_init_IDB05A1+0x6e>
    return BLE_STATUS_TIMEOUT;
 800e468:	23ff      	movs	r3, #255	; 0xff
 800e46a:	e014      	b.n	800e496 <aci_gap_init_IDB05A1+0x98>
  
  if (resp.status) {
 800e46c:	7b3b      	ldrb	r3, [r7, #12]
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d001      	beq.n	800e476 <aci_gap_init_IDB05A1+0x78>
    return resp.status;
 800e472:	7b3b      	ldrb	r3, [r7, #12]
 800e474:	e00f      	b.n	800e496 <aci_gap_init_IDB05A1+0x98>
  }
  
  *service_handle = btohs(resp.service_handle);
 800e476:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 800e47a:	b29a      	uxth	r2, r3
 800e47c:	683b      	ldr	r3, [r7, #0]
 800e47e:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 800e480:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 800e484:	b29a      	uxth	r2, r3
 800e486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e488:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 800e48a:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 800e48e:	b29a      	uxth	r2, r3
 800e490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e492:	801a      	strh	r2, [r3, #0]
  
  return 0;
 800e494:	2300      	movs	r3, #0
}
 800e496:	4618      	mov	r0, r3
 800e498:	3730      	adds	r7, #48	; 0x30
 800e49a:	46bd      	mov	sp, r7
 800e49c:	bd80      	pop	{r7, pc}

0800e49e <aci_gap_init_IDB04A1>:

tBleStatus aci_gap_init_IDB04A1(uint8_t role, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 800e49e:	b580      	push	{r7, lr}
 800e4a0:	b08e      	sub	sp, #56	; 0x38
 800e4a2:	af00      	add	r7, sp, #0
 800e4a4:	60b9      	str	r1, [r7, #8]
 800e4a6:	607a      	str	r2, [r7, #4]
 800e4a8:	603b      	str	r3, [r7, #0]
 800e4aa:	4603      	mov	r3, r0
 800e4ac:	73fb      	strb	r3, [r7, #15]
  struct hci_request rq;
  gap_init_cp_IDB04A1 cp;
  gap_init_rp resp;

  cp.role = role;
 800e4ae:	7bfb      	ldrb	r3, [r7, #15]
 800e4b0:	773b      	strb	r3, [r7, #28]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800e4b2:	f107 0314 	add.w	r3, r7, #20
 800e4b6:	2207      	movs	r2, #7
 800e4b8:	2100      	movs	r1, #0
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	f00c f8ab 	bl	801a616 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800e4c0:	f107 0320 	add.w	r3, r7, #32
 800e4c4:	2218      	movs	r2, #24
 800e4c6:	2100      	movs	r1, #0
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	f00c f8a4 	bl	801a616 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800e4ce:	233f      	movs	r3, #63	; 0x3f
 800e4d0:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_GAP_INIT;
 800e4d2:	238a      	movs	r3, #138	; 0x8a
 800e4d4:	847b      	strh	r3, [r7, #34]	; 0x22
  rq.cparam = &cp;
 800e4d6:	f107 031c 	add.w	r3, r7, #28
 800e4da:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.clen = sizeof(cp);
 800e4dc:	2301      	movs	r3, #1
 800e4de:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.rparam = &resp;
 800e4e0:	f107 0314 	add.w	r3, r7, #20
 800e4e4:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rlen = GAP_INIT_RP_SIZE;
 800e4e6:	2307      	movs	r3, #7
 800e4e8:	637b      	str	r3, [r7, #52]	; 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 800e4ea:	f107 0320 	add.w	r3, r7, #32
 800e4ee:	2100      	movs	r1, #0
 800e4f0:	4618      	mov	r0, r3
 800e4f2:	f000 fe63 	bl	800f1bc <hci_send_req>
 800e4f6:	4603      	mov	r3, r0
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	da01      	bge.n	800e500 <aci_gap_init_IDB04A1+0x62>
    return BLE_STATUS_TIMEOUT;
 800e4fc:	23ff      	movs	r3, #255	; 0xff
 800e4fe:	e014      	b.n	800e52a <aci_gap_init_IDB04A1+0x8c>
  
  if (resp.status) {
 800e500:	7d3b      	ldrb	r3, [r7, #20]
 800e502:	2b00      	cmp	r3, #0
 800e504:	d001      	beq.n	800e50a <aci_gap_init_IDB04A1+0x6c>
    return resp.status;
 800e506:	7d3b      	ldrb	r3, [r7, #20]
 800e508:	e00f      	b.n	800e52a <aci_gap_init_IDB04A1+0x8c>
  }
  
  *service_handle = btohs(resp.service_handle);
 800e50a:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 800e50e:	b29a      	uxth	r2, r3
 800e510:	68bb      	ldr	r3, [r7, #8]
 800e512:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 800e514:	f8b7 3017 	ldrh.w	r3, [r7, #23]
 800e518:	b29a      	uxth	r2, r3
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 800e51e:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 800e522:	b29a      	uxth	r2, r3
 800e524:	683b      	ldr	r3, [r7, #0]
 800e526:	801a      	strh	r2, [r3, #0]
  
  return 0;
 800e528:	2300      	movs	r3, #0
}
 800e52a:	4618      	mov	r0, r3
 800e52c:	3738      	adds	r7, #56	; 0x38
 800e52e:	46bd      	mov	sp, r7
 800e530:	bd80      	pop	{r7, pc}

0800e532 <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 800e532:	b590      	push	{r4, r7, lr}
 800e534:	b095      	sub	sp, #84	; 0x54
 800e536:	af00      	add	r7, sp, #0
 800e538:	4604      	mov	r4, r0
 800e53a:	4608      	mov	r0, r1
 800e53c:	4611      	mov	r1, r2
 800e53e:	461a      	mov	r2, r3
 800e540:	4623      	mov	r3, r4
 800e542:	71fb      	strb	r3, [r7, #7]
 800e544:	4603      	mov	r3, r0
 800e546:	80bb      	strh	r3, [r7, #4]
 800e548:	460b      	mov	r3, r1
 800e54a:	807b      	strh	r3, [r7, #2]
 800e54c:	4613      	mov	r3, r2
 800e54e:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
 800e550:	2300      	movs	r3, #0
 800e552:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 800e556:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 800e55a:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800e55e:	4413      	add	r3, r2
 800e560:	330e      	adds	r3, #14
 800e562:	2b28      	cmp	r3, #40	; 0x28
 800e564:	d901      	bls.n	800e56a <aci_gap_set_discoverable+0x38>
    return BLE_STATUS_INVALID_PARAMS;
 800e566:	2342      	movs	r3, #66	; 0x42
 800e568:	e0ce      	b.n	800e708 <aci_gap_set_discoverable+0x1d6>

  buffer[indx] = AdvType;
 800e56a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e56e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800e572:	4413      	add	r3, r2
 800e574:	79fa      	ldrb	r2, [r7, #7]
 800e576:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800e57a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e57e:	3301      	adds	r3, #1
 800e580:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  AdvIntervMin = htobs(AdvIntervMin);
 800e584:	88bb      	ldrh	r3, [r7, #4]
 800e586:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 800e588:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e58c:	f107 0208 	add.w	r2, r7, #8
 800e590:	4413      	add	r3, r2
 800e592:	88ba      	ldrh	r2, [r7, #4]
 800e594:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 800e596:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e59a:	3302      	adds	r3, #2
 800e59c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  AdvIntervMax = htobs(AdvIntervMax);
 800e5a0:	887b      	ldrh	r3, [r7, #2]
 800e5a2:	807b      	strh	r3, [r7, #2]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 800e5a4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e5a8:	f107 0208 	add.w	r2, r7, #8
 800e5ac:	4413      	add	r3, r2
 800e5ae:	887a      	ldrh	r2, [r7, #2]
 800e5b0:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 800e5b2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e5b6:	3302      	adds	r3, #2
 800e5b8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = OwnAddrType;
 800e5bc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e5c0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800e5c4:	4413      	add	r3, r2
 800e5c6:	79ba      	ldrb	r2, [r7, #6]
 800e5c8:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800e5cc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e5d0:	3301      	adds	r3, #1
 800e5d2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = AdvFilterPolicy;
 800e5d6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e5da:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800e5de:	4413      	add	r3, r2
 800e5e0:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 800e5e4:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800e5e8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e5ec:	3301      	adds	r3, #1
 800e5ee:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = LocalNameLen;
 800e5f2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e5f6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800e5fa:	4413      	add	r3, r2
 800e5fc:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 800e600:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800e604:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e608:	3301      	adds	r3, #1
 800e60a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 800e60e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e612:	f107 0208 	add.w	r2, r7, #8
 800e616:	4413      	add	r3, r2
 800e618:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 800e61c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e61e:	4618      	mov	r0, r3
 800e620:	f00b ffee 	bl	801a600 <memcpy>
  indx +=  LocalNameLen;
 800e624:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800e628:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800e62c:	4413      	add	r3, r2
 800e62e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  buffer[indx] = ServiceUUIDLen;
 800e632:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e636:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800e63a:	4413      	add	r3, r2
 800e63c:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 800e640:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800e644:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e648:	3301      	adds	r3, #1
 800e64a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 800e64e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e652:	f107 0208 	add.w	r2, r7, #8
 800e656:	4413      	add	r3, r2
 800e658:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 800e65c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800e65e:	4618      	mov	r0, r3
 800e660:	f00b ffce 	bl	801a600 <memcpy>
  indx +=  ServiceUUIDLen;  
 800e664:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800e668:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800e66c:	4413      	add	r3, r2
 800e66e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
 800e672:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800e676:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 800e67a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e67e:	f107 0208 	add.w	r2, r7, #8
 800e682:	4413      	add	r3, r2
 800e684:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 800e688:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 800e68a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e68e:	3302      	adds	r3, #2
 800e690:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
 800e694:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800e698:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 800e69c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e6a0:	f107 0208 	add.w	r2, r7, #8
 800e6a4:	4413      	add	r3, r2
 800e6a6:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 800e6aa:	801a      	strh	r2, [r3, #0]
  indx +=  2;    
 800e6ac:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e6b0:	3302      	adds	r3, #2
 800e6b2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800e6b6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800e6ba:	2218      	movs	r2, #24
 800e6bc:	2100      	movs	r1, #0
 800e6be:	4618      	mov	r0, r3
 800e6c0:	f00b ffa9 	bl	801a616 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800e6c4:	233f      	movs	r3, #63	; 0x3f
 800e6c6:	86bb      	strh	r3, [r7, #52]	; 0x34
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 800e6c8:	2383      	movs	r3, #131	; 0x83
 800e6ca:	86fb      	strh	r3, [r7, #54]	; 0x36
  rq.cparam = (void *)buffer;
 800e6cc:	f107 0308 	add.w	r3, r7, #8
 800e6d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.clen = indx;
 800e6d2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e6d6:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rparam = &status;
 800e6d8:	f107 0333 	add.w	r3, r7, #51	; 0x33
 800e6dc:	647b      	str	r3, [r7, #68]	; 0x44
  rq.rlen = 1;
 800e6de:	2301      	movs	r3, #1
 800e6e0:	64bb      	str	r3, [r7, #72]	; 0x48

  if (hci_send_req(&rq, FALSE) < 0)
 800e6e2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800e6e6:	2100      	movs	r1, #0
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	f000 fd67 	bl	800f1bc <hci_send_req>
 800e6ee:	4603      	mov	r3, r0
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	da01      	bge.n	800e6f8 <aci_gap_set_discoverable+0x1c6>
    return BLE_STATUS_TIMEOUT;
 800e6f4:	23ff      	movs	r3, #255	; 0xff
 800e6f6:	e007      	b.n	800e708 <aci_gap_set_discoverable+0x1d6>

  if (status) {
 800e6f8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d002      	beq.n	800e706 <aci_gap_set_discoverable+0x1d4>
    return status;
 800e700:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e704:	e000      	b.n	800e708 <aci_gap_set_discoverable+0x1d6>
  }

  return 0;
 800e706:	2300      	movs	r3, #0
}
 800e708:	4618      	mov	r0, r3
 800e70a:	3754      	adds	r7, #84	; 0x54
 800e70c:	46bd      	mov	sp, r7
 800e70e:	bd90      	pop	{r4, r7, pc}

0800e710 <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 800e710:	b590      	push	{r4, r7, lr}
 800e712:	b091      	sub	sp, #68	; 0x44
 800e714:	af00      	add	r7, sp, #0
 800e716:	603a      	str	r2, [r7, #0]
 800e718:	461a      	mov	r2, r3
 800e71a:	4603      	mov	r3, r0
 800e71c:	71fb      	strb	r3, [r7, #7]
 800e71e:	460b      	mov	r3, r1
 800e720:	71bb      	strb	r3, [r7, #6]
 800e722:	4613      	mov	r3, r2
 800e724:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 800e726:	79fb      	ldrb	r3, [r7, #7]
 800e728:	733b      	strb	r3, [r7, #12]
  cp.oob_enable = oob_enable;
 800e72a:	79bb      	ldrb	r3, [r7, #6]
 800e72c:	737b      	strb	r3, [r7, #13]
  BLUENRG_memcpy(cp.oob_data, oob_data, 16);
 800e72e:	683a      	ldr	r2, [r7, #0]
 800e730:	f107 030e 	add.w	r3, r7, #14
 800e734:	6814      	ldr	r4, [r2, #0]
 800e736:	6850      	ldr	r0, [r2, #4]
 800e738:	6891      	ldr	r1, [r2, #8]
 800e73a:	68d2      	ldr	r2, [r2, #12]
 800e73c:	601c      	str	r4, [r3, #0]
 800e73e:	6058      	str	r0, [r3, #4]
 800e740:	6099      	str	r1, [r3, #8]
 800e742:	60da      	str	r2, [r3, #12]
  cp.min_encryption_key_size = min_encryption_key_size;
 800e744:	797b      	ldrb	r3, [r7, #5]
 800e746:	77bb      	strb	r3, [r7, #30]
  cp.max_encryption_key_size = max_encryption_key_size;
 800e748:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800e74c:	77fb      	strb	r3, [r7, #31]
  cp.use_fixed_pin = use_fixed_pin;
 800e74e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800e752:	f887 3020 	strb.w	r3, [r7, #32]
  cp.fixed_pin = htobl(fixed_pin);
 800e756:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e758:	f8c7 3021 	str.w	r3, [r7, #33]	; 0x21
  cp.bonding_mode = bonding_mode;
 800e75c:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800e760:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800e764:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e768:	2218      	movs	r2, #24
 800e76a:	2100      	movs	r1, #0
 800e76c:	4618      	mov	r0, r3
 800e76e:	f00b ff52 	bl	801a616 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800e772:	233f      	movs	r3, #63	; 0x3f
 800e774:	853b      	strh	r3, [r7, #40]	; 0x28
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
 800e776:	2386      	movs	r3, #134	; 0x86
 800e778:	857b      	strh	r3, [r7, #42]	; 0x2a
  rq.cparam = &cp;
 800e77a:	f107 030c 	add.w	r3, r7, #12
 800e77e:	633b      	str	r3, [r7, #48]	; 0x30
  rq.clen = sizeof(cp);
 800e780:	231a      	movs	r3, #26
 800e782:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rparam = &status;
 800e784:	f107 030b 	add.w	r3, r7, #11
 800e788:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rlen = 1;
 800e78a:	2301      	movs	r3, #1
 800e78c:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (hci_send_req(&rq, FALSE) < 0)
 800e78e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e792:	2100      	movs	r1, #0
 800e794:	4618      	mov	r0, r3
 800e796:	f000 fd11 	bl	800f1bc <hci_send_req>
 800e79a:	4603      	mov	r3, r0
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	da01      	bge.n	800e7a4 <aci_gap_set_auth_requirement+0x94>
    return BLE_STATUS_TIMEOUT;
 800e7a0:	23ff      	movs	r3, #255	; 0xff
 800e7a2:	e005      	b.n	800e7b0 <aci_gap_set_auth_requirement+0xa0>

  if (status) {
 800e7a4:	7afb      	ldrb	r3, [r7, #11]
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d001      	beq.n	800e7ae <aci_gap_set_auth_requirement+0x9e>
    return status;
 800e7aa:	7afb      	ldrb	r3, [r7, #11]
 800e7ac:	e000      	b.n	800e7b0 <aci_gap_set_auth_requirement+0xa0>
  }
    
  return 0;
 800e7ae:	2300      	movs	r3, #0
}
 800e7b0:	4618      	mov	r0, r3
 800e7b2:	3744      	adds	r7, #68	; 0x44
 800e7b4:	46bd      	mov	sp, r7
 800e7b6:	bd90      	pop	{r4, r7, pc}

0800e7b8 <aci_gap_update_adv_data>:
  return status;

}

tBleStatus aci_gap_update_adv_data(uint8_t AdvLen, const uint8_t *AdvData)
{
 800e7b8:	b580      	push	{r7, lr}
 800e7ba:	b092      	sub	sp, #72	; 0x48
 800e7bc:	af00      	add	r7, sp, #0
 800e7be:	4603      	mov	r3, r0
 800e7c0:	6039      	str	r1, [r7, #0]
 800e7c2:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[32];
  uint8_t indx = 0;
 800e7c4:	2300      	movs	r3, #0
 800e7c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  if (AdvLen > (sizeof(buffer)-1))
 800e7ca:	79fb      	ldrb	r3, [r7, #7]
 800e7cc:	2b1f      	cmp	r3, #31
 800e7ce:	d901      	bls.n	800e7d4 <aci_gap_update_adv_data+0x1c>
    return BLE_STATUS_INVALID_PARAMS;
 800e7d0:	2342      	movs	r3, #66	; 0x42
 800e7d2:	e03f      	b.n	800e854 <aci_gap_update_adv_data+0x9c>

  buffer[indx] = AdvLen;
 800e7d4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800e7d8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800e7dc:	4413      	add	r3, r2
 800e7de:	79fa      	ldrb	r2, [r7, #7]
 800e7e0:	f803 2c40 	strb.w	r2, [r3, #-64]
  indx++;
 800e7e4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800e7e8:	3301      	adds	r3, #1
 800e7ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  BLUENRG_memcpy(buffer + indx, AdvData, AdvLen);
 800e7ee:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800e7f2:	f107 0208 	add.w	r2, r7, #8
 800e7f6:	4413      	add	r3, r2
 800e7f8:	79fa      	ldrb	r2, [r7, #7]
 800e7fa:	6839      	ldr	r1, [r7, #0]
 800e7fc:	4618      	mov	r0, r3
 800e7fe:	f00b feff 	bl	801a600 <memcpy>
  indx +=  AdvLen;
 800e802:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800e806:	79fb      	ldrb	r3, [r7, #7]
 800e808:	4413      	add	r3, r2
 800e80a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800e80e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e812:	2218      	movs	r2, #24
 800e814:	2100      	movs	r1, #0
 800e816:	4618      	mov	r0, r3
 800e818:	f00b fefd 	bl	801a616 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800e81c:	233f      	movs	r3, #63	; 0x3f
 800e81e:	85bb      	strh	r3, [r7, #44]	; 0x2c
  rq.ocf = OCF_GAP_UPDATE_ADV_DATA;
 800e820:	238e      	movs	r3, #142	; 0x8e
 800e822:	85fb      	strh	r3, [r7, #46]	; 0x2e
  rq.cparam = (void *)buffer;
 800e824:	f107 0308 	add.w	r3, r7, #8
 800e828:	637b      	str	r3, [r7, #52]	; 0x34
  rq.clen = indx;
 800e82a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800e82e:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rparam = &status;
 800e830:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800e834:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rlen = 1;
 800e836:	2301      	movs	r3, #1
 800e838:	643b      	str	r3, [r7, #64]	; 0x40
    
  if (hci_send_req(&rq, FALSE) < 0)
 800e83a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e83e:	2100      	movs	r1, #0
 800e840:	4618      	mov	r0, r3
 800e842:	f000 fcbb 	bl	800f1bc <hci_send_req>
 800e846:	4603      	mov	r3, r0
 800e848:	2b00      	cmp	r3, #0
 800e84a:	da01      	bge.n	800e850 <aci_gap_update_adv_data+0x98>
    return BLE_STATUS_TIMEOUT;
 800e84c:	23ff      	movs	r3, #255	; 0xff
 800e84e:	e001      	b.n	800e854 <aci_gap_update_adv_data+0x9c>
    
  return status;
 800e850:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800e854:	4618      	mov	r0, r3
 800e856:	3748      	adds	r7, #72	; 0x48
 800e858:	46bd      	mov	sp, r7
 800e85a:	bd80      	pop	{r7, pc}

0800e85c <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 800e85c:	b580      	push	{r7, lr}
 800e85e:	b088      	sub	sp, #32
 800e860:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800e862:	f107 0308 	add.w	r3, r7, #8
 800e866:	2218      	movs	r2, #24
 800e868:	2100      	movs	r1, #0
 800e86a:	4618      	mov	r0, r3
 800e86c:	f00b fed3 	bl	801a616 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800e870:	233f      	movs	r3, #63	; 0x3f
 800e872:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_GATT_INIT;
 800e874:	f240 1301 	movw	r3, #257	; 0x101
 800e878:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800e87a:	1dfb      	adds	r3, r7, #7
 800e87c:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800e87e:	2301      	movs	r3, #1
 800e880:	61fb      	str	r3, [r7, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 800e882:	f107 0308 	add.w	r3, r7, #8
 800e886:	2100      	movs	r1, #0
 800e888:	4618      	mov	r0, r3
 800e88a:	f000 fc97 	bl	800f1bc <hci_send_req>
 800e88e:	4603      	mov	r3, r0
 800e890:	2b00      	cmp	r3, #0
 800e892:	da01      	bge.n	800e898 <aci_gatt_init+0x3c>
    return BLE_STATUS_TIMEOUT;
 800e894:	23ff      	movs	r3, #255	; 0xff
 800e896:	e000      	b.n	800e89a <aci_gatt_init+0x3e>

  return status;
 800e898:	79fb      	ldrb	r3, [r7, #7]
}
 800e89a:	4618      	mov	r0, r3
 800e89c:	3720      	adds	r7, #32
 800e89e:	46bd      	mov	sp, r7
 800e8a0:	bd80      	pop	{r7, pc}

0800e8a2 <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 800e8a2:	b580      	push	{r7, lr}
 800e8a4:	b090      	sub	sp, #64	; 0x40
 800e8a6:	af00      	add	r7, sp, #0
 800e8a8:	6039      	str	r1, [r7, #0]
 800e8aa:	4611      	mov	r1, r2
 800e8ac:	461a      	mov	r2, r3
 800e8ae:	4603      	mov	r3, r0
 800e8b0:	71fb      	strb	r3, [r7, #7]
 800e8b2:	460b      	mov	r3, r1
 800e8b4:	71bb      	strb	r3, [r7, #6]
 800e8b6:	4613      	mov	r3, r2
 800e8b8:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
 800e8ba:	2300      	movs	r3, #0
 800e8bc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_uuid_type;
 800e8c0:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800e8c4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800e8c8:	4413      	add	r3, r2
 800e8ca:	79fa      	ldrb	r2, [r7, #7]
 800e8cc:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 800e8d0:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800e8d4:	3301      	adds	r3, #1
 800e8d6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  if(service_uuid_type == UUID_TYPE_16){
 800e8da:	79fb      	ldrb	r3, [r7, #7]
 800e8dc:	2b01      	cmp	r3, #1
 800e8de:	d103      	bne.n	800e8e8 <aci_gatt_add_serv+0x46>
    uuid_len = 2;
 800e8e0:	2302      	movs	r3, #2
 800e8e2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800e8e6:	e002      	b.n	800e8ee <aci_gatt_add_serv+0x4c>
  }
  else {
    uuid_len = 16;
 800e8e8:	2310      	movs	r3, #16
 800e8ea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 800e8ee:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800e8f2:	f107 020c 	add.w	r2, r7, #12
 800e8f6:	4413      	add	r3, r2
 800e8f8:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800e8fc:	6839      	ldr	r1, [r7, #0]
 800e8fe:	4618      	mov	r0, r3
 800e900:	f00b fe7e 	bl	801a600 <memcpy>
  indx +=  uuid_len;
 800e904:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 800e908:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e90c:	4413      	add	r3, r2
 800e90e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_type;
 800e912:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800e916:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800e91a:	4413      	add	r3, r2
 800e91c:	79ba      	ldrb	r2, [r7, #6]
 800e91e:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 800e922:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800e926:	3301      	adds	r3, #1
 800e928:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = max_attr_records;
 800e92c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800e930:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800e934:	4413      	add	r3, r2
 800e936:	797a      	ldrb	r2, [r7, #5]
 800e938:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 800e93c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800e940:	3301      	adds	r3, #1
 800e942:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800e946:	f107 0320 	add.w	r3, r7, #32
 800e94a:	2203      	movs	r2, #3
 800e94c:	2100      	movs	r1, #0
 800e94e:	4618      	mov	r0, r3
 800e950:	f00b fe61 	bl	801a616 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800e954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e958:	2218      	movs	r2, #24
 800e95a:	2100      	movs	r1, #0
 800e95c:	4618      	mov	r0, r3
 800e95e:	f00b fe5a 	bl	801a616 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800e962:	233f      	movs	r3, #63	; 0x3f
 800e964:	84bb      	strh	r3, [r7, #36]	; 0x24
  rq.ocf = OCF_GATT_ADD_SERV;
 800e966:	f44f 7381 	mov.w	r3, #258	; 0x102
 800e96a:	84fb      	strh	r3, [r7, #38]	; 0x26
  rq.cparam = (void *)buffer;
 800e96c:	f107 030c 	add.w	r3, r7, #12
 800e970:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.clen = indx;
 800e972:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800e976:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rparam = &resp;
 800e978:	f107 0320 	add.w	r3, r7, #32
 800e97c:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 800e97e:	2303      	movs	r3, #3
 800e980:	63bb      	str	r3, [r7, #56]	; 0x38

  if (hci_send_req(&rq, FALSE) < 0)
 800e982:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e986:	2100      	movs	r1, #0
 800e988:	4618      	mov	r0, r3
 800e98a:	f000 fc17 	bl	800f1bc <hci_send_req>
 800e98e:	4603      	mov	r3, r0
 800e990:	2b00      	cmp	r3, #0
 800e992:	da01      	bge.n	800e998 <aci_gatt_add_serv+0xf6>
    return BLE_STATUS_TIMEOUT;
 800e994:	23ff      	movs	r3, #255	; 0xff
 800e996:	e00c      	b.n	800e9b2 <aci_gatt_add_serv+0x110>

  if (resp.status) {
 800e998:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d002      	beq.n	800e9a6 <aci_gatt_add_serv+0x104>
    return resp.status;
 800e9a0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e9a4:	e005      	b.n	800e9b2 <aci_gatt_add_serv+0x110>
  }
    
  *serviceHandle = btohs(resp.handle);
 800e9a6:	f8b7 3021 	ldrh.w	r3, [r7, #33]	; 0x21
 800e9aa:	b29a      	uxth	r2, r3
 800e9ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e9ae:	801a      	strh	r2, [r3, #0]

  return 0;
 800e9b0:	2300      	movs	r3, #0
}
 800e9b2:	4618      	mov	r0, r3
 800e9b4:	3740      	adds	r7, #64	; 0x40
 800e9b6:	46bd      	mov	sp, r7
 800e9b8:	bd80      	pop	{r7, pc}

0800e9ba <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 800e9ba:	b580      	push	{r7, lr}
 800e9bc:	b092      	sub	sp, #72	; 0x48
 800e9be:	af00      	add	r7, sp, #0
 800e9c0:	603a      	str	r2, [r7, #0]
 800e9c2:	461a      	mov	r2, r3
 800e9c4:	4603      	mov	r3, r0
 800e9c6:	80fb      	strh	r3, [r7, #6]
 800e9c8:	460b      	mov	r3, r1
 800e9ca:	717b      	strb	r3, [r7, #5]
 800e9cc:	4613      	mov	r3, r2
 800e9ce:	713b      	strb	r3, [r7, #4]
  struct hci_request rq;
  gatt_add_serv_rp resp;
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
 800e9d0:	2300      	movs	r3, #0
 800e9d2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  serviceHandle = htobs(serviceHandle);
 800e9d6:	88fb      	ldrh	r3, [r7, #6]
 800e9d8:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 800e9da:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800e9de:	f107 020c 	add.w	r2, r7, #12
 800e9e2:	4413      	add	r3, r2
 800e9e4:	88fa      	ldrh	r2, [r7, #6]
 800e9e6:	801a      	strh	r2, [r3, #0]
  indx += 2;
 800e9e8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800e9ec:	3302      	adds	r3, #2
 800e9ee:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charUuidType;
 800e9f2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800e9f6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800e9fa:	4413      	add	r3, r2
 800e9fc:	797a      	ldrb	r2, [r7, #5]
 800e9fe:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800ea02:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800ea06:	3301      	adds	r3, #1
 800ea08:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  if(charUuidType == UUID_TYPE_16){
 800ea0c:	797b      	ldrb	r3, [r7, #5]
 800ea0e:	2b01      	cmp	r3, #1
 800ea10:	d103      	bne.n	800ea1a <aci_gatt_add_char+0x60>
    uuid_len = 2;
 800ea12:	2302      	movs	r3, #2
 800ea14:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800ea18:	e002      	b.n	800ea20 <aci_gatt_add_char+0x66>
  }
  else {
    uuid_len = 16;
 800ea1a:	2310      	movs	r3, #16
 800ea1c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 800ea20:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800ea24:	f107 020c 	add.w	r2, r7, #12
 800ea28:	4413      	add	r3, r2
 800ea2a:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800ea2e:	6839      	ldr	r1, [r7, #0]
 800ea30:	4618      	mov	r0, r3
 800ea32:	f00b fde5 	bl	801a600 <memcpy>
  indx +=  uuid_len;
 800ea36:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 800ea3a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800ea3e:	4413      	add	r3, r2
 800ea40:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charValueLen;
 800ea44:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800ea48:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800ea4c:	4413      	add	r3, r2
 800ea4e:	793a      	ldrb	r2, [r7, #4]
 800ea50:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800ea54:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800ea58:	3301      	adds	r3, #1
 800ea5a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charProperties;
 800ea5e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800ea62:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800ea66:	4413      	add	r3, r2
 800ea68:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800ea6c:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800ea70:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800ea74:	3301      	adds	r3, #1
 800ea76:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = secPermissions;
 800ea7a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800ea7e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800ea82:	4413      	add	r3, r2
 800ea84:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 800ea88:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800ea8c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800ea90:	3301      	adds	r3, #1
 800ea92:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = gattEvtMask;
 800ea96:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800ea9a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800ea9e:	4413      	add	r3, r2
 800eaa0:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800eaa4:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800eaa8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800eaac:	3301      	adds	r3, #1
 800eaae:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = encryKeySize;
 800eab2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800eab6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800eaba:	4413      	add	r3, r2
 800eabc:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 800eac0:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800eac4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800eac8:	3301      	adds	r3, #1
 800eaca:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = isVariable;
 800eace:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800ead2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800ead6:	4413      	add	r3, r2
 800ead8:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 800eadc:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800eae0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800eae4:	3301      	adds	r3, #1
 800eae6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800eaea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800eaee:	2203      	movs	r2, #3
 800eaf0:	2100      	movs	r1, #0
 800eaf2:	4618      	mov	r0, r3
 800eaf4:	f00b fd8f 	bl	801a616 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800eaf8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800eafc:	2218      	movs	r2, #24
 800eafe:	2100      	movs	r1, #0
 800eb00:	4618      	mov	r0, r3
 800eb02:	f00b fd88 	bl	801a616 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800eb06:	233f      	movs	r3, #63	; 0x3f
 800eb08:	85bb      	strh	r3, [r7, #44]	; 0x2c
  rq.ocf = OCF_GATT_ADD_CHAR;
 800eb0a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800eb0e:	85fb      	strh	r3, [r7, #46]	; 0x2e
  rq.cparam = (void *)buffer;
 800eb10:	f107 030c 	add.w	r3, r7, #12
 800eb14:	637b      	str	r3, [r7, #52]	; 0x34
  rq.clen = indx;
 800eb16:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800eb1a:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rparam = &resp;
 800eb1c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800eb20:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 800eb22:	2303      	movs	r3, #3
 800eb24:	643b      	str	r3, [r7, #64]	; 0x40

  if (hci_send_req(&rq, FALSE) < 0)
 800eb26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800eb2a:	2100      	movs	r1, #0
 800eb2c:	4618      	mov	r0, r3
 800eb2e:	f000 fb45 	bl	800f1bc <hci_send_req>
 800eb32:	4603      	mov	r3, r0
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	da01      	bge.n	800eb3c <aci_gatt_add_char+0x182>
    return BLE_STATUS_TIMEOUT;
 800eb38:	23ff      	movs	r3, #255	; 0xff
 800eb3a:	e00c      	b.n	800eb56 <aci_gatt_add_char+0x19c>

  if (resp.status) {
 800eb3c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d002      	beq.n	800eb4a <aci_gatt_add_char+0x190>
    return resp.status;
 800eb44:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800eb48:	e005      	b.n	800eb56 <aci_gatt_add_char+0x19c>
  }
    
  *charHandle = btohs(resp.handle);
 800eb4a:	f8b7 3029 	ldrh.w	r3, [r7, #41]	; 0x29
 800eb4e:	b29a      	uxth	r2, r3
 800eb50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eb52:	801a      	strh	r2, [r3, #0]

  return 0;
 800eb54:	2300      	movs	r3, #0
}
 800eb56:	4618      	mov	r0, r3
 800eb58:	3748      	adds	r7, #72	; 0x48
 800eb5a:	46bd      	mov	sp, r7
 800eb5c:	bd80      	pop	{r7, pc}

0800eb5e <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
                                      const void *charValue)
{
 800eb5e:	b590      	push	{r4, r7, lr}
 800eb60:	b0ab      	sub	sp, #172	; 0xac
 800eb62:	af00      	add	r7, sp, #0
 800eb64:	4604      	mov	r4, r0
 800eb66:	4608      	mov	r0, r1
 800eb68:	4611      	mov	r1, r2
 800eb6a:	461a      	mov	r2, r3
 800eb6c:	4623      	mov	r3, r4
 800eb6e:	80fb      	strh	r3, [r7, #6]
 800eb70:	4603      	mov	r3, r0
 800eb72:	80bb      	strh	r3, [r7, #4]
 800eb74:	460b      	mov	r3, r1
 800eb76:	70fb      	strb	r3, [r7, #3]
 800eb78:	4613      	mov	r3, r2
 800eb7a:	70bb      	strb	r3, [r7, #2]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 800eb7c:	2300      	movs	r3, #0
 800eb7e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 800eb82:	78bb      	ldrb	r3, [r7, #2]
 800eb84:	3306      	adds	r3, #6
 800eb86:	2b80      	cmp	r3, #128	; 0x80
 800eb88:	dd01      	ble.n	800eb8e <aci_gatt_update_char_value+0x30>
    return BLE_STATUS_INVALID_PARAMS;
 800eb8a:	2342      	movs	r3, #66	; 0x42
 800eb8c:	e076      	b.n	800ec7c <aci_gatt_update_char_value+0x11e>

  servHandle = htobs(servHandle);
 800eb8e:	88fb      	ldrh	r3, [r7, #6]
 800eb90:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 800eb92:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800eb96:	f107 0208 	add.w	r2, r7, #8
 800eb9a:	4413      	add	r3, r2
 800eb9c:	88fa      	ldrh	r2, [r7, #6]
 800eb9e:	801a      	strh	r2, [r3, #0]
  indx += 2;
 800eba0:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800eba4:	3302      	adds	r3, #2
 800eba6:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  charHandle = htobs(charHandle);
 800ebaa:	88bb      	ldrh	r3, [r7, #4]
 800ebac:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 800ebae:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800ebb2:	f107 0208 	add.w	r2, r7, #8
 800ebb6:	4413      	add	r3, r2
 800ebb8:	88ba      	ldrh	r2, [r7, #4]
 800ebba:	801a      	strh	r2, [r3, #0]
  indx += 2;
 800ebbc:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800ebc0:	3302      	adds	r3, #2
 800ebc2:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = charValOffset;
 800ebc6:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800ebca:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800ebce:	4413      	add	r3, r2
 800ebd0:	78fa      	ldrb	r2, [r7, #3]
 800ebd2:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 800ebd6:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800ebda:	3301      	adds	r3, #1
 800ebdc:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = charValueLen;
 800ebe0:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800ebe4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800ebe8:	4413      	add	r3, r2
 800ebea:	78ba      	ldrb	r2, [r7, #2]
 800ebec:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 800ebf0:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800ebf4:	3301      	adds	r3, #1
 800ebf6:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 800ebfa:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800ebfe:	f107 0208 	add.w	r2, r7, #8
 800ec02:	4413      	add	r3, r2
 800ec04:	78ba      	ldrb	r2, [r7, #2]
 800ec06:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	f00b fcf8 	bl	801a600 <memcpy>
  indx +=  charValueLen;
 800ec10:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 800ec14:	78bb      	ldrb	r3, [r7, #2]
 800ec16:	4413      	add	r3, r2
 800ec18:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800ec1c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800ec20:	2218      	movs	r2, #24
 800ec22:	2100      	movs	r1, #0
 800ec24:	4618      	mov	r0, r3
 800ec26:	f00b fcf6 	bl	801a616 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800ec2a:	233f      	movs	r3, #63	; 0x3f
 800ec2c:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 800ec30:	f44f 7383 	mov.w	r3, #262	; 0x106
 800ec34:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  rq.cparam = (void *)buffer;
 800ec38:	f107 0308 	add.w	r3, r7, #8
 800ec3c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  rq.clen = indx;
 800ec40:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800ec44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  rq.rparam = &status;
 800ec48:	f107 038b 	add.w	r3, r7, #139	; 0x8b
 800ec4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  rq.rlen = 1;
 800ec50:	2301      	movs	r3, #1
 800ec52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 800ec56:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800ec5a:	2100      	movs	r1, #0
 800ec5c:	4618      	mov	r0, r3
 800ec5e:	f000 faad 	bl	800f1bc <hci_send_req>
 800ec62:	4603      	mov	r3, r0
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	da01      	bge.n	800ec6c <aci_gatt_update_char_value+0x10e>
    return BLE_STATUS_TIMEOUT;
 800ec68:	23ff      	movs	r3, #255	; 0xff
 800ec6a:	e007      	b.n	800ec7c <aci_gatt_update_char_value+0x11e>

  if (status) {
 800ec6c:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d002      	beq.n	800ec7a <aci_gatt_update_char_value+0x11c>
    return status;
 800ec74:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800ec78:	e000      	b.n	800ec7c <aci_gatt_update_char_value+0x11e>
  }

  return 0;
 800ec7a:	2300      	movs	r3, #0
}
 800ec7c:	4618      	mov	r0, r3
 800ec7e:	37ac      	adds	r7, #172	; 0xac
 800ec80:	46bd      	mov	sp, r7
 800ec82:	bd90      	pop	{r4, r7, pc}

0800ec84 <aci_gatt_allow_read>:

  return 0;
}

tBleStatus aci_gatt_allow_read(uint16_t conn_handle)
{
 800ec84:	b580      	push	{r7, lr}
 800ec86:	b08a      	sub	sp, #40	; 0x28
 800ec88:	af00      	add	r7, sp, #0
 800ec8a:	4603      	mov	r3, r0
 800ec8c:	80fb      	strh	r3, [r7, #6]
    struct hci_request rq;
    gatt_allow_read_cp cp;
    uint8_t status;
    
    cp.conn_handle = htobs(conn_handle);
 800ec8e:	88fb      	ldrh	r3, [r7, #6]
 800ec90:	81bb      	strh	r3, [r7, #12]

    BLUENRG_memset(&rq, 0, sizeof(rq));
 800ec92:	f107 0310 	add.w	r3, r7, #16
 800ec96:	2218      	movs	r2, #24
 800ec98:	2100      	movs	r1, #0
 800ec9a:	4618      	mov	r0, r3
 800ec9c:	f00b fcbb 	bl	801a616 <memset>
    rq.ogf = OGF_VENDOR_CMD;
 800eca0:	233f      	movs	r3, #63	; 0x3f
 800eca2:	823b      	strh	r3, [r7, #16]
    rq.ocf = OCF_GATT_ALLOW_READ;
 800eca4:	f240 1327 	movw	r3, #295	; 0x127
 800eca8:	827b      	strh	r3, [r7, #18]
    rq.cparam = &cp;
 800ecaa:	f107 030c 	add.w	r3, r7, #12
 800ecae:	61bb      	str	r3, [r7, #24]
    rq.clen = GATT_ALLOW_READ_CP_SIZE;
 800ecb0:	2302      	movs	r3, #2
 800ecb2:	61fb      	str	r3, [r7, #28]
    rq.rparam = &status;
 800ecb4:	f107 030b 	add.w	r3, r7, #11
 800ecb8:	623b      	str	r3, [r7, #32]
    rq.rlen = 1;
 800ecba:	2301      	movs	r3, #1
 800ecbc:	627b      	str	r3, [r7, #36]	; 0x24

    if (hci_send_req(&rq, FALSE) < 0)
 800ecbe:	f107 0310 	add.w	r3, r7, #16
 800ecc2:	2100      	movs	r1, #0
 800ecc4:	4618      	mov	r0, r3
 800ecc6:	f000 fa79 	bl	800f1bc <hci_send_req>
 800ecca:	4603      	mov	r3, r0
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	da01      	bge.n	800ecd4 <aci_gatt_allow_read+0x50>
      return BLE_STATUS_TIMEOUT;
 800ecd0:	23ff      	movs	r3, #255	; 0xff
 800ecd2:	e000      	b.n	800ecd6 <aci_gatt_allow_read+0x52>

    return status;
 800ecd4:	7afb      	ldrb	r3, [r7, #11]
}
 800ecd6:	4618      	mov	r0, r3
 800ecd8:	3728      	adds	r7, #40	; 0x28
 800ecda:	46bd      	mov	sp, r7
 800ecdc:	bd80      	pop	{r7, pc}

0800ecde <aci_hal_read_config_data>:

  return status;
}

tBleStatus aci_hal_read_config_data(uint8_t offset, uint16_t data_len, uint8_t *data_len_out_p, uint8_t *data)
{
 800ecde:	b580      	push	{r7, lr}
 800ece0:	b0ac      	sub	sp, #176	; 0xb0
 800ece2:	af00      	add	r7, sp, #0
 800ece4:	60ba      	str	r2, [r7, #8]
 800ece6:	607b      	str	r3, [r7, #4]
 800ece8:	4603      	mov	r3, r0
 800ecea:	73fb      	strb	r3, [r7, #15]
 800ecec:	460b      	mov	r3, r1
 800ecee:	81bb      	strh	r3, [r7, #12]
  struct hci_request rq;
  hal_read_config_data_cp cp;
  hal_read_config_data_rp rp;
  
  cp.offset = offset;
 800ecf0:	7bfb      	ldrb	r3, [r7, #15]
 800ecf2:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800ecf6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800ecfa:	2218      	movs	r2, #24
 800ecfc:	2100      	movs	r1, #0
 800ecfe:	4618      	mov	r0, r3
 800ed00:	f00b fc89 	bl	801a616 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800ed04:	233f      	movs	r3, #63	; 0x3f
 800ed06:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
  rq.ocf = OCF_HAL_READ_CONFIG_DATA;
 800ed0a:	230d      	movs	r3, #13
 800ed0c:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  rq.cparam = &cp;
 800ed10:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800ed14:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  rq.clen = sizeof(cp);
 800ed18:	2301      	movs	r3, #1
 800ed1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  rq.rparam = &rp;
 800ed1e:	f107 0314 	add.w	r3, r7, #20
 800ed22:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  rq.rlen = sizeof(rp);
 800ed26:	2380      	movs	r3, #128	; 0x80
 800ed28:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  
  if (hci_send_req(&rq, FALSE) < 0)
 800ed2c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800ed30:	2100      	movs	r1, #0
 800ed32:	4618      	mov	r0, r3
 800ed34:	f000 fa42 	bl	800f1bc <hci_send_req>
 800ed38:	4603      	mov	r3, r0
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	da01      	bge.n	800ed42 <aci_hal_read_config_data+0x64>
    return BLE_STATUS_TIMEOUT;
 800ed3e:	23ff      	movs	r3, #255	; 0xff
 800ed40:	e01c      	b.n	800ed7c <aci_hal_read_config_data+0x9e>
  
  if(rp.status)
 800ed42:	7d3b      	ldrb	r3, [r7, #20]
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d001      	beq.n	800ed4c <aci_hal_read_config_data+0x6e>
    return rp.status;
 800ed48:	7d3b      	ldrb	r3, [r7, #20]
 800ed4a:	e017      	b.n	800ed7c <aci_hal_read_config_data+0x9e>
  
  *data_len_out_p = rq.rlen-1;
 800ed4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ed50:	b2db      	uxtb	r3, r3
 800ed52:	3b01      	subs	r3, #1
 800ed54:	b2da      	uxtb	r2, r3
 800ed56:	68bb      	ldr	r3, [r7, #8]
 800ed58:	701a      	strb	r2, [r3, #0]
  
  BLUENRG_memcpy(data, rp.data, MIN(data_len, *data_len_out_p));
 800ed5a:	68bb      	ldr	r3, [r7, #8]
 800ed5c:	781b      	ldrb	r3, [r3, #0]
 800ed5e:	b29b      	uxth	r3, r3
 800ed60:	89ba      	ldrh	r2, [r7, #12]
 800ed62:	4293      	cmp	r3, r2
 800ed64:	bf28      	it	cs
 800ed66:	4613      	movcs	r3, r2
 800ed68:	b29b      	uxth	r3, r3
 800ed6a:	461a      	mov	r2, r3
 800ed6c:	f107 0314 	add.w	r3, r7, #20
 800ed70:	3301      	adds	r3, #1
 800ed72:	4619      	mov	r1, r3
 800ed74:	6878      	ldr	r0, [r7, #4]
 800ed76:	f00b fc43 	bl	801a600 <memcpy>
  
  return 0;
 800ed7a:	2300      	movs	r3, #0
}
 800ed7c:	4618      	mov	r0, r3
 800ed7e:	37b0      	adds	r7, #176	; 0xb0
 800ed80:	46bd      	mov	sp, r7
 800ed82:	bd80      	pop	{r7, pc}

0800ed84 <aci_hal_set_tx_power_level>:

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 800ed84:	b580      	push	{r7, lr}
 800ed86:	b08a      	sub	sp, #40	; 0x28
 800ed88:	af00      	add	r7, sp, #0
 800ed8a:	4603      	mov	r3, r0
 800ed8c:	460a      	mov	r2, r1
 800ed8e:	71fb      	strb	r3, [r7, #7]
 800ed90:	4613      	mov	r3, r2
 800ed92:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  hal_set_tx_power_level_cp cp;    
  uint8_t status;
    
  cp.en_high_power = en_high_power;
 800ed94:	79fb      	ldrb	r3, [r7, #7]
 800ed96:	733b      	strb	r3, [r7, #12]
  cp.pa_level = pa_level;
 800ed98:	79bb      	ldrb	r3, [r7, #6]
 800ed9a:	737b      	strb	r3, [r7, #13]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800ed9c:	f107 0310 	add.w	r3, r7, #16
 800eda0:	2218      	movs	r2, #24
 800eda2:	2100      	movs	r1, #0
 800eda4:	4618      	mov	r0, r3
 800eda6:	f00b fc36 	bl	801a616 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800edaa:	233f      	movs	r3, #63	; 0x3f
 800edac:	823b      	strh	r3, [r7, #16]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
 800edae:	230f      	movs	r3, #15
 800edb0:	827b      	strh	r3, [r7, #18]
  rq.cparam = &cp;
 800edb2:	f107 030c 	add.w	r3, r7, #12
 800edb6:	61bb      	str	r3, [r7, #24]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 800edb8:	2302      	movs	r3, #2
 800edba:	61fb      	str	r3, [r7, #28]
  rq.rparam = &status;
 800edbc:	f107 030b 	add.w	r3, r7, #11
 800edc0:	623b      	str	r3, [r7, #32]
  rq.rlen = 1;
 800edc2:	2301      	movs	r3, #1
 800edc4:	627b      	str	r3, [r7, #36]	; 0x24

  if (hci_send_req(&rq, FALSE) < 0)
 800edc6:	f107 0310 	add.w	r3, r7, #16
 800edca:	2100      	movs	r1, #0
 800edcc:	4618      	mov	r0, r3
 800edce:	f000 f9f5 	bl	800f1bc <hci_send_req>
 800edd2:	4603      	mov	r3, r0
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	da01      	bge.n	800eddc <aci_hal_set_tx_power_level+0x58>
    return BLE_STATUS_TIMEOUT;
 800edd8:	23ff      	movs	r3, #255	; 0xff
 800edda:	e000      	b.n	800edde <aci_hal_set_tx_power_level+0x5a>

  return status;
 800eddc:	7afb      	ldrb	r3, [r7, #11]
}
 800edde:	4618      	mov	r0, r3
 800ede0:	3728      	adds	r7, #40	; 0x28
 800ede2:	46bd      	mov	sp, r7
 800ede4:	bd80      	pop	{r7, pc}

0800ede6 <getBlueNRGVersion>:
#include "hci.h"
#include "hci_le.h"
#include "string.h"

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 800ede6:	b590      	push	{r4, r7, lr}
 800ede8:	b089      	sub	sp, #36	; 0x24
 800edea:	af02      	add	r7, sp, #8
 800edec:	6078      	str	r0, [r7, #4]
 800edee:	6039      	str	r1, [r7, #0]
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 800edf0:	f107 0410 	add.w	r4, r7, #16
 800edf4:	f107 0215 	add.w	r2, r7, #21
 800edf8:	f107 0112 	add.w	r1, r7, #18
 800edfc:	f107 0016 	add.w	r0, r7, #22
 800ee00:	f107 030e 	add.w	r3, r7, #14
 800ee04:	9300      	str	r3, [sp, #0]
 800ee06:	4623      	mov	r3, r4
 800ee08:	f000 f853 	bl	800eeb2 <hci_le_read_local_version>
 800ee0c:	4603      	mov	r3, r0
 800ee0e:	75fb      	strb	r3, [r7, #23]
				     &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 800ee10:	7dfb      	ldrb	r3, [r7, #23]
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d126      	bne.n	800ee64 <getBlueNRGVersion+0x7e>
    *hwVersion = hci_revision >> 8;
 800ee16:	8a7b      	ldrh	r3, [r7, #18]
 800ee18:	0a1b      	lsrs	r3, r3, #8
 800ee1a:	b29b      	uxth	r3, r3
 800ee1c:	b2da      	uxtb	r2, r3
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	701a      	strb	r2, [r3, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
 800ee22:	8a7b      	ldrh	r3, [r7, #18]
 800ee24:	021b      	lsls	r3, r3, #8
 800ee26:	b29a      	uxth	r2, r3
 800ee28:	683b      	ldr	r3, [r7, #0]
 800ee2a:	801a      	strh	r2, [r3, #0]
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 800ee2c:	683b      	ldr	r3, [r7, #0]
 800ee2e:	881b      	ldrh	r3, [r3, #0]
 800ee30:	b21a      	sxth	r2, r3
 800ee32:	89fb      	ldrh	r3, [r7, #14]
 800ee34:	091b      	lsrs	r3, r3, #4
 800ee36:	b29b      	uxth	r3, r3
 800ee38:	011b      	lsls	r3, r3, #4
 800ee3a:	b21b      	sxth	r3, r3
 800ee3c:	b2db      	uxtb	r3, r3
 800ee3e:	b21b      	sxth	r3, r3
 800ee40:	4313      	orrs	r3, r2
 800ee42:	b21b      	sxth	r3, r3
 800ee44:	b29a      	uxth	r2, r3
 800ee46:	683b      	ldr	r3, [r7, #0]
 800ee48:	801a      	strh	r2, [r3, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 800ee4a:	683b      	ldr	r3, [r7, #0]
 800ee4c:	881b      	ldrh	r3, [r3, #0]
 800ee4e:	b21a      	sxth	r2, r3
 800ee50:	89fb      	ldrh	r3, [r7, #14]
 800ee52:	b21b      	sxth	r3, r3
 800ee54:	f003 030f 	and.w	r3, r3, #15
 800ee58:	b21b      	sxth	r3, r3
 800ee5a:	4313      	orrs	r3, r2
 800ee5c:	b21b      	sxth	r3, r3
 800ee5e:	b29a      	uxth	r2, r3
 800ee60:	683b      	ldr	r3, [r7, #0]
 800ee62:	801a      	strh	r2, [r3, #0]
  }
  return status;
 800ee64:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee66:	4618      	mov	r0, r3
 800ee68:	371c      	adds	r7, #28
 800ee6a:	46bd      	mov	sp, r7
 800ee6c:	bd90      	pop	{r4, r7, pc}

0800ee6e <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 800ee6e:	b580      	push	{r7, lr}
 800ee70:	b088      	sub	sp, #32
 800ee72:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800ee74:	f107 0308 	add.w	r3, r7, #8
 800ee78:	2218      	movs	r2, #24
 800ee7a:	2100      	movs	r1, #0
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	f00b fbca 	bl	801a616 <memset>
  rq.ogf = OGF_HOST_CTL;
 800ee82:	2303      	movs	r3, #3
 800ee84:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_RESET;
 800ee86:	2303      	movs	r3, #3
 800ee88:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800ee8a:	1dfb      	adds	r3, r7, #7
 800ee8c:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800ee8e:	2301      	movs	r3, #1
 800ee90:	61fb      	str	r3, [r7, #28]
  
  if (hci_send_req(&rq, FALSE) < 0)
 800ee92:	f107 0308 	add.w	r3, r7, #8
 800ee96:	2100      	movs	r1, #0
 800ee98:	4618      	mov	r0, r3
 800ee9a:	f000 f98f 	bl	800f1bc <hci_send_req>
 800ee9e:	4603      	mov	r3, r0
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	da01      	bge.n	800eea8 <hci_reset+0x3a>
    return BLE_STATUS_TIMEOUT;
 800eea4:	23ff      	movs	r3, #255	; 0xff
 800eea6:	e000      	b.n	800eeaa <hci_reset+0x3c>
  
  return status;  
 800eea8:	79fb      	ldrb	r3, [r7, #7]
}
 800eeaa:	4618      	mov	r0, r3
 800eeac:	3720      	adds	r7, #32
 800eeae:	46bd      	mov	sp, r7
 800eeb0:	bd80      	pop	{r7, pc}

0800eeb2 <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 800eeb2:	b580      	push	{r7, lr}
 800eeb4:	b08e      	sub	sp, #56	; 0x38
 800eeb6:	af00      	add	r7, sp, #0
 800eeb8:	60f8      	str	r0, [r7, #12]
 800eeba:	60b9      	str	r1, [r7, #8]
 800eebc:	607a      	str	r2, [r7, #4]
 800eebe:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  read_local_version_rp resp;
  
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800eec0:	f107 0314 	add.w	r3, r7, #20
 800eec4:	2209      	movs	r2, #9
 800eec6:	2100      	movs	r1, #0
 800eec8:	4618      	mov	r0, r3
 800eeca:	f00b fba4 	bl	801a616 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800eece:	f107 0320 	add.w	r3, r7, #32
 800eed2:	2218      	movs	r2, #24
 800eed4:	2100      	movs	r1, #0
 800eed6:	4618      	mov	r0, r3
 800eed8:	f00b fb9d 	bl	801a616 <memset>
  rq.ogf = OGF_INFO_PARAM;
 800eedc:	2304      	movs	r3, #4
 800eede:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_READ_LOCAL_VERSION;
 800eee0:	2301      	movs	r3, #1
 800eee2:	847b      	strh	r3, [r7, #34]	; 0x22
  rq.cparam = NULL;
 800eee4:	2300      	movs	r3, #0
 800eee6:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.clen = 0;
 800eee8:	2300      	movs	r3, #0
 800eeea:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.rparam = &resp;
 800eeec:	f107 0314 	add.w	r3, r7, #20
 800eef0:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 800eef2:	2309      	movs	r3, #9
 800eef4:	637b      	str	r3, [r7, #52]	; 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 800eef6:	f107 0320 	add.w	r3, r7, #32
 800eefa:	2100      	movs	r1, #0
 800eefc:	4618      	mov	r0, r3
 800eefe:	f000 f95d 	bl	800f1bc <hci_send_req>
 800ef02:	4603      	mov	r3, r0
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	da01      	bge.n	800ef0c <hci_le_read_local_version+0x5a>
    return BLE_STATUS_TIMEOUT;
 800ef08:	23ff      	movs	r3, #255	; 0xff
 800ef0a:	e018      	b.n	800ef3e <hci_le_read_local_version+0x8c>
  
  if (resp.status) {
 800ef0c:	7d3b      	ldrb	r3, [r7, #20]
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d001      	beq.n	800ef16 <hci_le_read_local_version+0x64>
    return resp.status;
 800ef12:	7d3b      	ldrb	r3, [r7, #20]
 800ef14:	e013      	b.n	800ef3e <hci_le_read_local_version+0x8c>
  }
  
  
  *hci_version = resp.hci_version;
 800ef16:	7d7a      	ldrb	r2, [r7, #21]
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	701a      	strb	r2, [r3, #0]
  *hci_revision =  btohs(resp.hci_revision);
 800ef1c:	8afa      	ldrh	r2, [r7, #22]
 800ef1e:	68bb      	ldr	r3, [r7, #8]
 800ef20:	801a      	strh	r2, [r3, #0]
  *lmp_pal_version = resp.lmp_pal_version;
 800ef22:	7e3a      	ldrb	r2, [r7, #24]
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	701a      	strb	r2, [r3, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 800ef28:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 800ef2c:	b29a      	uxth	r2, r3
 800ef2e:	683b      	ldr	r3, [r7, #0]
 800ef30:	801a      	strh	r2, [r3, #0]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 800ef32:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 800ef36:	b29a      	uxth	r2, r3
 800ef38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef3a:	801a      	strh	r2, [r3, #0]
  
  return 0;
 800ef3c:	2300      	movs	r3, #0
}
 800ef3e:	4618      	mov	r0, r3
 800ef40:	3738      	adds	r7, #56	; 0x38
 800ef42:	46bd      	mov	sp, r7
 800ef44:	bd80      	pop	{r7, pc}

0800ef46 <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 800ef46:	b580      	push	{r7, lr}
 800ef48:	b092      	sub	sp, #72	; 0x48
 800ef4a:	af00      	add	r7, sp, #0
 800ef4c:	4603      	mov	r3, r0
 800ef4e:	6039      	str	r1, [r7, #0]
 800ef50:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 800ef52:	f107 0310 	add.w	r3, r7, #16
 800ef56:	2220      	movs	r2, #32
 800ef58:	2100      	movs	r1, #0
 800ef5a:	4618      	mov	r0, r3
 800ef5c:	f00b fb5b 	bl	801a616 <memset>
  scan_resp_cp.length = length;
 800ef60:	79fb      	ldrb	r3, [r7, #7]
 800ef62:	743b      	strb	r3, [r7, #16]
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 800ef64:	79fb      	ldrb	r3, [r7, #7]
 800ef66:	2b1f      	cmp	r3, #31
 800ef68:	bf28      	it	cs
 800ef6a:	231f      	movcs	r3, #31
 800ef6c:	b2db      	uxtb	r3, r3
 800ef6e:	461a      	mov	r2, r3
 800ef70:	f107 0310 	add.w	r3, r7, #16
 800ef74:	3301      	adds	r3, #1
 800ef76:	6839      	ldr	r1, [r7, #0]
 800ef78:	4618      	mov	r0, r3
 800ef7a:	f00b fb41 	bl	801a600 <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800ef7e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ef82:	2218      	movs	r2, #24
 800ef84:	2100      	movs	r1, #0
 800ef86:	4618      	mov	r0, r3
 800ef88:	f00b fb45 	bl	801a616 <memset>
  rq.ogf = OGF_LE_CTL;
 800ef8c:	2308      	movs	r3, #8
 800ef8e:	863b      	strh	r3, [r7, #48]	; 0x30
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
 800ef90:	2309      	movs	r3, #9
 800ef92:	867b      	strh	r3, [r7, #50]	; 0x32
  rq.cparam = &scan_resp_cp;
 800ef94:	f107 0310 	add.w	r3, r7, #16
 800ef98:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 800ef9a:	2320      	movs	r3, #32
 800ef9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rparam = &status;
 800ef9e:	f107 030f 	add.w	r3, r7, #15
 800efa2:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rlen = 1;
 800efa4:	2301      	movs	r3, #1
 800efa6:	647b      	str	r3, [r7, #68]	; 0x44
  
  if (hci_send_req(&rq, FALSE) < 0)
 800efa8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800efac:	2100      	movs	r1, #0
 800efae:	4618      	mov	r0, r3
 800efb0:	f000 f904 	bl	800f1bc <hci_send_req>
 800efb4:	4603      	mov	r3, r0
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	da01      	bge.n	800efbe <hci_le_set_scan_resp_data+0x78>
    return BLE_STATUS_TIMEOUT;
 800efba:	23ff      	movs	r3, #255	; 0xff
 800efbc:	e000      	b.n	800efc0 <hci_le_set_scan_resp_data+0x7a>
  
  return status;
 800efbe:	7bfb      	ldrb	r3, [r7, #15]
}
 800efc0:	4618      	mov	r0, r3
 800efc2:	3748      	adds	r7, #72	; 0x48
 800efc4:	46bd      	mov	sp, r7
 800efc6:	bd80      	pop	{r7, pc}

0800efc8 <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 800efc8:	b480      	push	{r7}
 800efca:	b085      	sub	sp, #20
 800efcc:	af00      	add	r7, sp, #0
 800efce:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	3308      	adds	r3, #8
 800efd4:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	781b      	ldrb	r3, [r3, #0]
 800efda:	2b04      	cmp	r3, #4
 800efdc:	d001      	beq.n	800efe2 <verify_packet+0x1a>
    return 1; /* Incorrect type */
 800efde:	2301      	movs	r3, #1
 800efe0:	e00c      	b.n	800effc <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	3302      	adds	r3, #2
 800efe6:	781b      	ldrb	r3, [r3, #0]
 800efe8:	461a      	mov	r2, r3
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800eff0:	3b03      	subs	r3, #3
 800eff2:	429a      	cmp	r2, r3
 800eff4:	d001      	beq.n	800effa <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 800eff6:	2302      	movs	r3, #2
 800eff8:	e000      	b.n	800effc <verify_packet+0x34>
  
  return 0;      
 800effa:	2300      	movs	r3, #0
}
 800effc:	4618      	mov	r0, r3
 800effe:	3714      	adds	r7, #20
 800f000:	46bd      	mov	sp, r7
 800f002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f006:	4770      	bx	lr

0800f008 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 800f008:	b580      	push	{r7, lr}
 800f00a:	b0a6      	sub	sp, #152	; 0x98
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	607b      	str	r3, [r7, #4]
 800f010:	4603      	mov	r3, r0
 800f012:	81fb      	strh	r3, [r7, #14]
 800f014:	460b      	mov	r3, r1
 800f016:	81bb      	strh	r3, [r7, #12]
 800f018:	4613      	mov	r3, r2
 800f01a:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 800f01c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f020:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f024:	b21a      	sxth	r2, r3
 800f026:	89fb      	ldrh	r3, [r7, #14]
 800f028:	029b      	lsls	r3, r3, #10
 800f02a:	b21b      	sxth	r3, r3
 800f02c:	4313      	orrs	r3, r2
 800f02e:	b21b      	sxth	r3, r3
 800f030:	b29b      	uxth	r3, r3
 800f032:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 800f034:	7afb      	ldrb	r3, [r7, #11]
 800f036:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 800f038:	2301      	movs	r3, #1
 800f03a:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 800f03c:	f107 0318 	add.w	r3, r7, #24
 800f040:	3301      	adds	r3, #1
 800f042:	461a      	mov	r2, r3
 800f044:	f107 0314 	add.w	r3, r7, #20
 800f048:	8819      	ldrh	r1, [r3, #0]
 800f04a:	789b      	ldrb	r3, [r3, #2]
 800f04c:	8011      	strh	r1, [r2, #0]
 800f04e:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 800f050:	f107 0318 	add.w	r3, r7, #24
 800f054:	3304      	adds	r3, #4
 800f056:	7afa      	ldrb	r2, [r7, #11]
 800f058:	6879      	ldr	r1, [r7, #4]
 800f05a:	4618      	mov	r0, r3
 800f05c:	f00b fad0 	bl	801a600 <memcpy>
  
  if (hciContext.io.Send)
 800f060:	4b08      	ldr	r3, [pc, #32]	; (800f084 <send_cmd+0x7c>)
 800f062:	691b      	ldr	r3, [r3, #16]
 800f064:	2b00      	cmp	r3, #0
 800f066:	d009      	beq.n	800f07c <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 800f068:	4b06      	ldr	r3, [pc, #24]	; (800f084 <send_cmd+0x7c>)
 800f06a:	691b      	ldr	r3, [r3, #16]
 800f06c:	7afa      	ldrb	r2, [r7, #11]
 800f06e:	b292      	uxth	r2, r2
 800f070:	3204      	adds	r2, #4
 800f072:	b291      	uxth	r1, r2
 800f074:	f107 0218 	add.w	r2, r7, #24
 800f078:	4610      	mov	r0, r2
 800f07a:	4798      	blx	r3
  }
}
 800f07c:	bf00      	nop
 800f07e:	3798      	adds	r7, #152	; 0x98
 800f080:	46bd      	mov	sp, r7
 800f082:	bd80      	pop	{r7, pc}
 800f084:	20002778 	.word	0x20002778

0800f088 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 800f088:	b580      	push	{r7, lr}
 800f08a:	b084      	sub	sp, #16
 800f08c:	af00      	add	r7, sp, #0
 800f08e:	6078      	str	r0, [r7, #4]
 800f090:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 800f092:	e00a      	b.n	800f0aa <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 800f094:	f107 030c 	add.w	r3, r7, #12
 800f098:	4619      	mov	r1, r3
 800f09a:	6838      	ldr	r0, [r7, #0]
 800f09c:	f000 fada 	bl	800f654 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	4619      	mov	r1, r3
 800f0a4:	6878      	ldr	r0, [r7, #4]
 800f0a6:	f000 fa49 	bl	800f53c <list_insert_head>
  while (!list_is_empty(src_list))
 800f0aa:	6838      	ldr	r0, [r7, #0]
 800f0ac:	f000 fa26 	bl	800f4fc <list_is_empty>
 800f0b0:	4603      	mov	r3, r0
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d0ee      	beq.n	800f094 <move_list+0xc>
  }
}
 800f0b6:	bf00      	nop
 800f0b8:	3710      	adds	r7, #16
 800f0ba:	46bd      	mov	sp, r7
 800f0bc:	bd80      	pop	{r7, pc}
	...

0800f0c0 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 800f0c0:	b580      	push	{r7, lr}
 800f0c2:	b082      	sub	sp, #8
 800f0c4:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;
  
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800f0c6:	e009      	b.n	800f0dc <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 800f0c8:	1d3b      	adds	r3, r7, #4
 800f0ca:	4619      	mov	r1, r3
 800f0cc:	4808      	ldr	r0, [pc, #32]	; (800f0f0 <free_event_list+0x30>)
 800f0ce:	f000 fa9c 	bl	800f60a <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	4619      	mov	r1, r3
 800f0d6:	4807      	ldr	r0, [pc, #28]	; (800f0f4 <free_event_list+0x34>)
 800f0d8:	f000 fa54 	bl	800f584 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800f0dc:	4805      	ldr	r0, [pc, #20]	; (800f0f4 <free_event_list+0x34>)
 800f0de:	f000 fade 	bl	800f69e <list_get_size>
 800f0e2:	4603      	mov	r3, r0
 800f0e4:	2b01      	cmp	r3, #1
 800f0e6:	ddef      	ble.n	800f0c8 <free_event_list+0x8>
  }
}
 800f0e8:	bf00      	nop
 800f0ea:	3708      	adds	r7, #8
 800f0ec:	46bd      	mov	sp, r7
 800f0ee:	bd80      	pop	{r7, pc}
 800f0f0:	20002a6c 	.word	0x20002a6c
 800f0f4:	20002a64 	.word	0x20002a64

0800f0f8 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800f0f8:	b580      	push	{r7, lr}
 800f0fa:	b084      	sub	sp, #16
 800f0fc:	af00      	add	r7, sp, #0
 800f0fe:	6078      	str	r0, [r7, #4]
 800f100:	6039      	str	r1, [r7, #0]
  uint8_t index;
  
  if(UserEvtRx != NULL)
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	2b00      	cmp	r3, #0
 800f106:	d002      	beq.n	800f10e <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 800f108:	4a18      	ldr	r2, [pc, #96]	; (800f16c <hci_init+0x74>)
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 800f10e:	f7f3 fce3 	bl	8002ad8 <hci_tl_lowlevel_init>
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 800f112:	4817      	ldr	r0, [pc, #92]	; (800f170 <hci_init+0x78>)
 800f114:	f000 f9e2 	bl	800f4dc <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 800f118:	4816      	ldr	r0, [pc, #88]	; (800f174 <hci_init+0x7c>)
 800f11a:	f000 f9df 	bl	800f4dc <list_init_head>
  
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800f11e:	2300      	movs	r3, #0
 800f120:	73fb      	strb	r3, [r7, #15]
 800f122:	e00c      	b.n	800f13e <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 800f124:	7bfb      	ldrb	r3, [r7, #15]
 800f126:	228c      	movs	r2, #140	; 0x8c
 800f128:	fb02 f303 	mul.w	r3, r2, r3
 800f12c:	4a12      	ldr	r2, [pc, #72]	; (800f178 <hci_init+0x80>)
 800f12e:	4413      	add	r3, r2
 800f130:	4619      	mov	r1, r3
 800f132:	480f      	ldr	r0, [pc, #60]	; (800f170 <hci_init+0x78>)
 800f134:	f000 fa26 	bl	800f584 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800f138:	7bfb      	ldrb	r3, [r7, #15]
 800f13a:	3301      	adds	r3, #1
 800f13c:	73fb      	strb	r3, [r7, #15]
 800f13e:	7bfb      	ldrb	r3, [r7, #15]
 800f140:	2b04      	cmp	r3, #4
 800f142:	d9ef      	bls.n	800f124 <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 800f144:	4b09      	ldr	r3, [pc, #36]	; (800f16c <hci_init+0x74>)
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d003      	beq.n	800f154 <hci_init+0x5c>
 800f14c:	4b07      	ldr	r3, [pc, #28]	; (800f16c <hci_init+0x74>)
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	2000      	movs	r0, #0
 800f152:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 800f154:	4b05      	ldr	r3, [pc, #20]	; (800f16c <hci_init+0x74>)
 800f156:	689b      	ldr	r3, [r3, #8]
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d002      	beq.n	800f162 <hci_init+0x6a>
 800f15c:	4b03      	ldr	r3, [pc, #12]	; (800f16c <hci_init+0x74>)
 800f15e:	689b      	ldr	r3, [r3, #8]
 800f160:	4798      	blx	r3
}
 800f162:	bf00      	nop
 800f164:	3710      	adds	r7, #16
 800f166:	46bd      	mov	sp, r7
 800f168:	bd80      	pop	{r7, pc}
 800f16a:	bf00      	nop
 800f16c:	20002778 	.word	0x20002778
 800f170:	20002a64 	.word	0x20002a64
 800f174:	20002a6c 	.word	0x20002a6c
 800f178:	200024bc 	.word	0x200024bc

0800f17c <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 800f17c:	b480      	push	{r7}
 800f17e:	b083      	sub	sp, #12
 800f180:	af00      	add	r7, sp, #0
 800f182:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	4a0b      	ldr	r2, [pc, #44]	; (800f1b8 <hci_register_io_bus+0x3c>)
 800f18a:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	68db      	ldr	r3, [r3, #12]
 800f190:	4a09      	ldr	r2, [pc, #36]	; (800f1b8 <hci_register_io_bus+0x3c>)
 800f192:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	691b      	ldr	r3, [r3, #16]
 800f198:	4a07      	ldr	r2, [pc, #28]	; (800f1b8 <hci_register_io_bus+0x3c>)
 800f19a:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	699b      	ldr	r3, [r3, #24]
 800f1a0:	4a05      	ldr	r2, [pc, #20]	; (800f1b8 <hci_register_io_bus+0x3c>)
 800f1a2:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;    
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	689b      	ldr	r3, [r3, #8]
 800f1a8:	4a03      	ldr	r2, [pc, #12]	; (800f1b8 <hci_register_io_bus+0x3c>)
 800f1aa:	6093      	str	r3, [r2, #8]
}
 800f1ac:	bf00      	nop
 800f1ae:	370c      	adds	r7, #12
 800f1b0:	46bd      	mov	sp, r7
 800f1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b6:	4770      	bx	lr
 800f1b8:	20002778 	.word	0x20002778

0800f1bc <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 800f1bc:	b580      	push	{r7, lr}
 800f1be:	b08e      	sub	sp, #56	; 0x38
 800f1c0:	af00      	add	r7, sp, #0
 800f1c2:	6078      	str	r0, [r7, #4]
 800f1c4:	460b      	mov	r3, r1
 800f1c6:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	885b      	ldrh	r3, [r3, #2]
 800f1cc:	b21b      	sxth	r3, r3
 800f1ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f1d2:	b21a      	sxth	r2, r3
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	881b      	ldrh	r3, [r3, #0]
 800f1d8:	029b      	lsls	r3, r3, #10
 800f1da:	b21b      	sxth	r3, r3
 800f1dc:	4313      	orrs	r3, r2
 800f1de:	b21b      	sxth	r3, r3
 800f1e0:	86fb      	strh	r3, [r7, #54]	; 0x36
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 800f1e2:	2300      	movs	r3, #0
 800f1e4:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 800f1e6:	f107 0308 	add.w	r3, r7, #8
 800f1ea:	4618      	mov	r0, r3
 800f1ec:	f000 f976 	bl	800f4dc <list_init_head>

  free_event_list();
 800f1f0:	f7ff ff66 	bl	800f0c0 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	8818      	ldrh	r0, [r3, #0]
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	8859      	ldrh	r1, [r3, #2]
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	68db      	ldr	r3, [r3, #12]
 800f200:	b2da      	uxtb	r2, r3
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	689b      	ldr	r3, [r3, #8]
 800f206:	f7ff feff 	bl	800f008 <send_cmd>
  
  if (async)
 800f20a:	78fb      	ldrb	r3, [r7, #3]
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d001      	beq.n	800f214 <hci_send_req+0x58>
  {
    return 0;
 800f210:	2300      	movs	r3, #0
 800f212:	e0e2      	b.n	800f3da <hci_send_req+0x21e>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 800f214:	f7f9 fe12 	bl	8008e3c <HAL_GetTick>
 800f218:	6338      	str	r0, [r7, #48]	; 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800f21a:	f7f9 fe0f 	bl	8008e3c <HAL_GetTick>
 800f21e:	4602      	mov	r2, r0
 800f220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f222:	1ad3      	subs	r3, r2, r3
 800f224:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f228:	f200 80b3 	bhi.w	800f392 <hci_send_req+0x1d6>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 800f22c:	486d      	ldr	r0, [pc, #436]	; (800f3e4 <hci_send_req+0x228>)
 800f22e:	f000 f965 	bl	800f4fc <list_is_empty>
 800f232:	4603      	mov	r3, r0
 800f234:	2b00      	cmp	r3, #0
 800f236:	d000      	beq.n	800f23a <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800f238:	e7ef      	b.n	800f21a <hci_send_req+0x5e>
      {
        break;
 800f23a:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 800f23c:	f107 0310 	add.w	r3, r7, #16
 800f240:	4619      	mov	r1, r3
 800f242:	4868      	ldr	r0, [pc, #416]	; (800f3e4 <hci_send_req+0x228>)
 800f244:	f000 f9e1 	bl	800f60a <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 800f248:	693b      	ldr	r3, [r7, #16]
 800f24a:	3308      	adds	r3, #8
 800f24c:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 800f24e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f250:	781b      	ldrb	r3, [r3, #0]
 800f252:	2b04      	cmp	r3, #4
 800f254:	d17a      	bne.n	800f34c <hci_send_req+0x190>
    {
      event_pckt = (void *)(hci_hdr->data);
 800f256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f258:	3301      	adds	r3, #1
 800f25a:	62bb      	str	r3, [r7, #40]	; 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 800f25c:	693b      	ldr	r3, [r7, #16]
 800f25e:	3308      	adds	r3, #8
 800f260:	3303      	adds	r3, #3
 800f262:	627b      	str	r3, [r7, #36]	; 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 800f264:	693b      	ldr	r3, [r7, #16]
 800f266:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800f26a:	3b03      	subs	r3, #3
 800f26c:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 800f26e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f270:	781b      	ldrb	r3, [r3, #0]
 800f272:	2b0f      	cmp	r3, #15
 800f274:	d00a      	beq.n	800f28c <hci_send_req+0xd0>
 800f276:	2b0f      	cmp	r3, #15
 800f278:	dc02      	bgt.n	800f280 <hci_send_req+0xc4>
 800f27a:	2b0e      	cmp	r3, #14
 800f27c:	d028      	beq.n	800f2d0 <hci_send_req+0x114>
      
      case EVT_HARDWARE_ERROR:            
        goto failed;
      
      default:      
        break;
 800f27e:	e06a      	b.n	800f356 <hci_send_req+0x19a>
      switch (event_pckt->evt) 
 800f280:	2b10      	cmp	r3, #16
 800f282:	f000 8088 	beq.w	800f396 <hci_send_req+0x1da>
 800f286:	2b3e      	cmp	r3, #62	; 0x3e
 800f288:	d042      	beq.n	800f310 <hci_send_req+0x154>
        break;
 800f28a:	e064      	b.n	800f356 <hci_send_req+0x19a>
        cs = (void *) ptr;
 800f28c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f28e:	61bb      	str	r3, [r7, #24]
        if (cs->opcode != opcode)
 800f290:	69bb      	ldr	r3, [r7, #24]
 800f292:	885b      	ldrh	r3, [r3, #2]
 800f294:	b29b      	uxth	r3, r3
 800f296:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f298:	429a      	cmp	r2, r3
 800f29a:	d17e      	bne.n	800f39a <hci_send_req+0x1de>
        if (r->event != EVT_CMD_STATUS) {
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	685b      	ldr	r3, [r3, #4]
 800f2a0:	2b0f      	cmp	r3, #15
 800f2a2:	d004      	beq.n	800f2ae <hci_send_req+0xf2>
          if (cs->status) {
 800f2a4:	69bb      	ldr	r3, [r7, #24]
 800f2a6:	781b      	ldrb	r3, [r3, #0]
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d051      	beq.n	800f350 <hci_send_req+0x194>
            goto failed;
 800f2ac:	e078      	b.n	800f3a0 <hci_send_req+0x1e4>
        r->rlen = MIN(len, r->rlen);
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	695a      	ldr	r2, [r3, #20]
 800f2b2:	6a3b      	ldr	r3, [r7, #32]
 800f2b4:	429a      	cmp	r2, r3
 800f2b6:	bf28      	it	cs
 800f2b8:	461a      	movcs	r2, r3
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	6918      	ldr	r0, [r3, #16]
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	695b      	ldr	r3, [r3, #20]
 800f2c6:	461a      	mov	r2, r3
 800f2c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f2ca:	f00b f999 	bl	801a600 <memcpy>
        goto done;
 800f2ce:	e078      	b.n	800f3c2 <hci_send_req+0x206>
        cc = (void *) ptr;
 800f2d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2d2:	617b      	str	r3, [r7, #20]
        if (cc->opcode != opcode)
 800f2d4:	697b      	ldr	r3, [r7, #20]
 800f2d6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800f2da:	b29b      	uxth	r3, r3
 800f2dc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f2de:	429a      	cmp	r2, r3
 800f2e0:	d15d      	bne.n	800f39e <hci_send_req+0x1e2>
        ptr += EVT_CMD_COMPLETE_SIZE;
 800f2e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2e4:	3303      	adds	r3, #3
 800f2e6:	627b      	str	r3, [r7, #36]	; 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 800f2e8:	6a3b      	ldr	r3, [r7, #32]
 800f2ea:	3b03      	subs	r3, #3
 800f2ec:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	695a      	ldr	r2, [r3, #20]
 800f2f2:	6a3b      	ldr	r3, [r7, #32]
 800f2f4:	429a      	cmp	r2, r3
 800f2f6:	bf28      	it	cs
 800f2f8:	461a      	movcs	r2, r3
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	6918      	ldr	r0, [r3, #16]
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	695b      	ldr	r3, [r3, #20]
 800f306:	461a      	mov	r2, r3
 800f308:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f30a:	f00b f979 	bl	801a600 <memcpy>
        goto done;
 800f30e:	e058      	b.n	800f3c2 <hci_send_req+0x206>
        me = (void *) ptr;
 800f310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f312:	61fb      	str	r3, [r7, #28]
        if (me->subevent != r->event)
 800f314:	69fb      	ldr	r3, [r7, #28]
 800f316:	781b      	ldrb	r3, [r3, #0]
 800f318:	461a      	mov	r2, r3
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	685b      	ldr	r3, [r3, #4]
 800f31e:	429a      	cmp	r2, r3
 800f320:	d118      	bne.n	800f354 <hci_send_req+0x198>
        len -= 1;
 800f322:	6a3b      	ldr	r3, [r7, #32]
 800f324:	3b01      	subs	r3, #1
 800f326:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	695a      	ldr	r2, [r3, #20]
 800f32c:	6a3b      	ldr	r3, [r7, #32]
 800f32e:	429a      	cmp	r2, r3
 800f330:	bf28      	it	cs
 800f332:	461a      	movcs	r2, r3
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	6918      	ldr	r0, [r3, #16]
 800f33c:	69fb      	ldr	r3, [r7, #28]
 800f33e:	1c59      	adds	r1, r3, #1
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	695b      	ldr	r3, [r3, #20]
 800f344:	461a      	mov	r2, r3
 800f346:	f00b f95b 	bl	801a600 <memcpy>
        goto done;
 800f34a:	e03a      	b.n	800f3c2 <hci_send_req+0x206>
      }
    }
 800f34c:	bf00      	nop
 800f34e:	e002      	b.n	800f356 <hci_send_req+0x19a>
          break;
 800f350:	bf00      	nop
 800f352:	e000      	b.n	800f356 <hci_send_req+0x19a>
          break;
 800f354:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 800f356:	4824      	ldr	r0, [pc, #144]	; (800f3e8 <hci_send_req+0x22c>)
 800f358:	f000 f8d0 	bl	800f4fc <list_is_empty>
 800f35c:	4603      	mov	r3, r0
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d00d      	beq.n	800f37e <hci_send_req+0x1c2>
 800f362:	4820      	ldr	r0, [pc, #128]	; (800f3e4 <hci_send_req+0x228>)
 800f364:	f000 f8ca 	bl	800f4fc <list_is_empty>
 800f368:	4603      	mov	r3, r0
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d007      	beq.n	800f37e <hci_send_req+0x1c2>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800f36e:	693b      	ldr	r3, [r7, #16]
 800f370:	4619      	mov	r1, r3
 800f372:	481d      	ldr	r0, [pc, #116]	; (800f3e8 <hci_send_req+0x22c>)
 800f374:	f000 f906 	bl	800f584 <list_insert_tail>
      hciReadPacket=NULL;
 800f378:	2300      	movs	r3, #0
 800f37a:	613b      	str	r3, [r7, #16]
 800f37c:	e008      	b.n	800f390 <hci_send_req+0x1d4>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 800f37e:	693a      	ldr	r2, [r7, #16]
 800f380:	f107 0308 	add.w	r3, r7, #8
 800f384:	4611      	mov	r1, r2
 800f386:	4618      	mov	r0, r3
 800f388:	f000 f8fc 	bl	800f584 <list_insert_tail>
      hciReadPacket=NULL;
 800f38c:	2300      	movs	r3, #0
 800f38e:	613b      	str	r3, [r7, #16]
  {
 800f390:	e740      	b.n	800f214 <hci_send_req+0x58>
        goto failed;
 800f392:	bf00      	nop
 800f394:	e004      	b.n	800f3a0 <hci_send_req+0x1e4>
        goto failed;
 800f396:	bf00      	nop
 800f398:	e002      	b.n	800f3a0 <hci_send_req+0x1e4>
          goto failed;
 800f39a:	bf00      	nop
 800f39c:	e000      	b.n	800f3a0 <hci_send_req+0x1e4>
          goto failed;
 800f39e:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 800f3a0:	693b      	ldr	r3, [r7, #16]
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d004      	beq.n	800f3b0 <hci_send_req+0x1f4>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800f3a6:	693b      	ldr	r3, [r7, #16]
 800f3a8:	4619      	mov	r1, r3
 800f3aa:	480f      	ldr	r0, [pc, #60]	; (800f3e8 <hci_send_req+0x22c>)
 800f3ac:	f000 f8c6 	bl	800f53c <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);  
 800f3b0:	f107 0308 	add.w	r3, r7, #8
 800f3b4:	4619      	mov	r1, r3
 800f3b6:	480b      	ldr	r0, [pc, #44]	; (800f3e4 <hci_send_req+0x228>)
 800f3b8:	f7ff fe66 	bl	800f088 <move_list>
  return -1;
 800f3bc:	f04f 33ff 	mov.w	r3, #4294967295
 800f3c0:	e00b      	b.n	800f3da <hci_send_req+0x21e>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 800f3c2:	693b      	ldr	r3, [r7, #16]
 800f3c4:	4619      	mov	r1, r3
 800f3c6:	4808      	ldr	r0, [pc, #32]	; (800f3e8 <hci_send_req+0x22c>)
 800f3c8:	f000 f8b8 	bl	800f53c <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800f3cc:	f107 0308 	add.w	r3, r7, #8
 800f3d0:	4619      	mov	r1, r3
 800f3d2:	4804      	ldr	r0, [pc, #16]	; (800f3e4 <hci_send_req+0x228>)
 800f3d4:	f7ff fe58 	bl	800f088 <move_list>
  return 0;
 800f3d8:	2300      	movs	r3, #0
}
 800f3da:	4618      	mov	r0, r3
 800f3dc:	3738      	adds	r7, #56	; 0x38
 800f3de:	46bd      	mov	sp, r7
 800f3e0:	bd80      	pop	{r7, pc}
 800f3e2:	bf00      	nop
 800f3e4:	20002a6c 	.word	0x20002a6c
 800f3e8:	20002a64 	.word	0x20002a64

0800f3ec <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800f3ec:	b580      	push	{r7, lr}
 800f3ee:	b082      	sub	sp, #8
 800f3f0:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 800f3f2:	2300      	movs	r3, #0
 800f3f4:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800f3f6:	e013      	b.n	800f420 <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 800f3f8:	1d3b      	adds	r3, r7, #4
 800f3fa:	4619      	mov	r1, r3
 800f3fc:	480d      	ldr	r0, [pc, #52]	; (800f434 <hci_user_evt_proc+0x48>)
 800f3fe:	f000 f904 	bl	800f60a <list_remove_head>
    if (hciContext.UserEvtRx != NULL)
 800f402:	4b0d      	ldr	r3, [pc, #52]	; (800f438 <hci_user_evt_proc+0x4c>)
 800f404:	69db      	ldr	r3, [r3, #28]
 800f406:	2b00      	cmp	r3, #0
 800f408:	d005      	beq.n	800f416 <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 800f40a:	4b0b      	ldr	r3, [pc, #44]	; (800f438 <hci_user_evt_proc+0x4c>)
 800f40c:	69db      	ldr	r3, [r3, #28]
 800f40e:	687a      	ldr	r2, [r7, #4]
 800f410:	3208      	adds	r2, #8
 800f412:	4610      	mov	r0, r2
 800f414:	4798      	blx	r3
    }
    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	4619      	mov	r1, r3
 800f41a:	4808      	ldr	r0, [pc, #32]	; (800f43c <hci_user_evt_proc+0x50>)
 800f41c:	f000 f8b2 	bl	800f584 <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800f420:	4804      	ldr	r0, [pc, #16]	; (800f434 <hci_user_evt_proc+0x48>)
 800f422:	f000 f86b 	bl	800f4fc <list_is_empty>
 800f426:	4603      	mov	r3, r0
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d0e5      	beq.n	800f3f8 <hci_user_evt_proc+0xc>
  }
}
 800f42c:	bf00      	nop
 800f42e:	3708      	adds	r7, #8
 800f430:	46bd      	mov	sp, r7
 800f432:	bd80      	pop	{r7, pc}
 800f434:	20002a6c 	.word	0x20002a6c
 800f438:	20002778 	.word	0x20002778
 800f43c:	20002a64 	.word	0x20002a64

0800f440 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 800f440:	b580      	push	{r7, lr}
 800f442:	b086      	sub	sp, #24
 800f444:	af00      	add	r7, sp, #0
 800f446:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 800f448:	2300      	movs	r3, #0
 800f44a:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 800f44c:	2300      	movs	r3, #0
 800f44e:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 800f450:	481f      	ldr	r0, [pc, #124]	; (800f4d0 <hci_notify_asynch_evt+0x90>)
 800f452:	f000 f853 	bl	800f4fc <list_is_empty>
 800f456:	4603      	mov	r3, r0
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d132      	bne.n	800f4c2 <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 800f45c:	f107 030c 	add.w	r3, r7, #12
 800f460:	4619      	mov	r1, r3
 800f462:	481b      	ldr	r0, [pc, #108]	; (800f4d0 <hci_notify_asynch_evt+0x90>)
 800f464:	f000 f8d1 	bl	800f60a <list_remove_head>
    
    if (hciContext.io.Receive)
 800f468:	4b1a      	ldr	r3, [pc, #104]	; (800f4d4 <hci_notify_asynch_evt+0x94>)
 800f46a:	68db      	ldr	r3, [r3, #12]
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d02a      	beq.n	800f4c6 <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 800f470:	4b18      	ldr	r3, [pc, #96]	; (800f4d4 <hci_notify_asynch_evt+0x94>)
 800f472:	68db      	ldr	r3, [r3, #12]
 800f474:	68fa      	ldr	r2, [r7, #12]
 800f476:	3208      	adds	r2, #8
 800f478:	2180      	movs	r1, #128	; 0x80
 800f47a:	4610      	mov	r0, r2
 800f47c:	4798      	blx	r3
 800f47e:	4603      	mov	r3, r0
 800f480:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 800f482:	7cfb      	ldrb	r3, [r7, #19]
 800f484:	2b00      	cmp	r3, #0
 800f486:	d016      	beq.n	800f4b6 <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	7cfa      	ldrb	r2, [r7, #19]
 800f48c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
        if (verify_packet(hciReadPacket) == 0)
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	4618      	mov	r0, r3
 800f494:	f7ff fd98 	bl	800efc8 <verify_packet>
 800f498:	4603      	mov	r3, r0
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d105      	bne.n	800f4aa <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	4619      	mov	r1, r3
 800f4a2:	480d      	ldr	r0, [pc, #52]	; (800f4d8 <hci_notify_asynch_evt+0x98>)
 800f4a4:	f000 f86e 	bl	800f584 <list_insert_tail>
 800f4a8:	e00d      	b.n	800f4c6 <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	4619      	mov	r1, r3
 800f4ae:	4808      	ldr	r0, [pc, #32]	; (800f4d0 <hci_notify_asynch_evt+0x90>)
 800f4b0:	f000 f844 	bl	800f53c <list_insert_head>
 800f4b4:	e007      	b.n	800f4c6 <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	4619      	mov	r1, r3
 800f4ba:	4805      	ldr	r0, [pc, #20]	; (800f4d0 <hci_notify_asynch_evt+0x90>)
 800f4bc:	f000 f83e 	bl	800f53c <list_insert_head>
 800f4c0:	e001      	b.n	800f4c6 <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 800f4c2:	2301      	movs	r3, #1
 800f4c4:	617b      	str	r3, [r7, #20]
  }
  return ret;
 800f4c6:	697b      	ldr	r3, [r7, #20]

}
 800f4c8:	4618      	mov	r0, r3
 800f4ca:	3718      	adds	r7, #24
 800f4cc:	46bd      	mov	sp, r7
 800f4ce:	bd80      	pop	{r7, pc}
 800f4d0:	20002a64 	.word	0x20002a64
 800f4d4:	20002778 	.word	0x20002778
 800f4d8:	20002a6c 	.word	0x20002a6c

0800f4dc <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 800f4dc:	b480      	push	{r7}
 800f4de:	b083      	sub	sp, #12
 800f4e0:	af00      	add	r7, sp, #0
 800f4e2:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	687a      	ldr	r2, [r7, #4]
 800f4e8:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	687a      	ldr	r2, [r7, #4]
 800f4ee:	605a      	str	r2, [r3, #4]
}
 800f4f0:	bf00      	nop
 800f4f2:	370c      	adds	r7, #12
 800f4f4:	46bd      	mov	sp, r7
 800f4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4fa:	4770      	bx	lr

0800f4fc <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 800f4fc:	b480      	push	{r7}
 800f4fe:	b087      	sub	sp, #28
 800f500:	af00      	add	r7, sp, #0
 800f502:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f504:	f3ef 8310 	mrs	r3, PRIMASK
 800f508:	60fb      	str	r3, [r7, #12]
  return(result);
 800f50a:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800f50c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800f50e:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	687a      	ldr	r2, [r7, #4]
 800f516:	429a      	cmp	r2, r3
 800f518:	d102      	bne.n	800f520 <list_is_empty+0x24>
  {
    return_value = 1;
 800f51a:	2301      	movs	r3, #1
 800f51c:	75fb      	strb	r3, [r7, #23]
 800f51e:	e001      	b.n	800f524 <list_is_empty+0x28>
  }
  else
  {
    return_value = 0;
 800f520:	2300      	movs	r3, #0
 800f522:	75fb      	strb	r3, [r7, #23]
 800f524:	693b      	ldr	r3, [r7, #16]
 800f526:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f528:	68bb      	ldr	r3, [r7, #8]
 800f52a:	f383 8810 	msr	PRIMASK, r3
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 800f52e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f530:	4618      	mov	r0, r3
 800f532:	371c      	adds	r7, #28
 800f534:	46bd      	mov	sp, r7
 800f536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f53a:	4770      	bx	lr

0800f53c <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 800f53c:	b480      	push	{r7}
 800f53e:	b087      	sub	sp, #28
 800f540:	af00      	add	r7, sp, #0
 800f542:	6078      	str	r0, [r7, #4]
 800f544:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f546:	f3ef 8310 	mrs	r3, PRIMASK
 800f54a:	60fb      	str	r3, [r7, #12]
  return(result);
 800f54c:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800f54e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f550:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	681a      	ldr	r2, [r3, #0]
 800f556:	683b      	ldr	r3, [r7, #0]
 800f558:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800f55a:	683b      	ldr	r3, [r7, #0]
 800f55c:	687a      	ldr	r2, [r7, #4]
 800f55e:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	683a      	ldr	r2, [r7, #0]
 800f564:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800f566:	683b      	ldr	r3, [r7, #0]
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	683a      	ldr	r2, [r7, #0]
 800f56c:	605a      	str	r2, [r3, #4]
 800f56e:	697b      	ldr	r3, [r7, #20]
 800f570:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f572:	693b      	ldr	r3, [r7, #16]
 800f574:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800f578:	bf00      	nop
 800f57a:	371c      	adds	r7, #28
 800f57c:	46bd      	mov	sp, r7
 800f57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f582:	4770      	bx	lr

0800f584 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 800f584:	b480      	push	{r7}
 800f586:	b087      	sub	sp, #28
 800f588:	af00      	add	r7, sp, #0
 800f58a:	6078      	str	r0, [r7, #4]
 800f58c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f58e:	f3ef 8310 	mrs	r3, PRIMASK
 800f592:	60fb      	str	r3, [r7, #12]
  return(result);
 800f594:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800f596:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f598:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 800f59a:	683b      	ldr	r3, [r7, #0]
 800f59c:	687a      	ldr	r2, [r7, #4]
 800f59e:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	685a      	ldr	r2, [r3, #4]
 800f5a4:	683b      	ldr	r3, [r7, #0]
 800f5a6:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	683a      	ldr	r2, [r7, #0]
 800f5ac:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800f5ae:	683b      	ldr	r3, [r7, #0]
 800f5b0:	685b      	ldr	r3, [r3, #4]
 800f5b2:	683a      	ldr	r2, [r7, #0]
 800f5b4:	601a      	str	r2, [r3, #0]
 800f5b6:	697b      	ldr	r3, [r7, #20]
 800f5b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f5ba:	693b      	ldr	r3, [r7, #16]
 800f5bc:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800f5c0:	bf00      	nop
 800f5c2:	371c      	adds	r7, #28
 800f5c4:	46bd      	mov	sp, r7
 800f5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ca:	4770      	bx	lr

0800f5cc <list_remove_node>:

void list_remove_node (tListNode * node)
{
 800f5cc:	b480      	push	{r7}
 800f5ce:	b087      	sub	sp, #28
 800f5d0:	af00      	add	r7, sp, #0
 800f5d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f5d4:	f3ef 8310 	mrs	r3, PRIMASK
 800f5d8:	60fb      	str	r3, [r7, #12]
  return(result);
 800f5da:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800f5dc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f5de:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	685b      	ldr	r3, [r3, #4]
 800f5e4:	687a      	ldr	r2, [r7, #4]
 800f5e6:	6812      	ldr	r2, [r2, #0]
 800f5e8:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	687a      	ldr	r2, [r7, #4]
 800f5f0:	6852      	ldr	r2, [r2, #4]
 800f5f2:	605a      	str	r2, [r3, #4]
 800f5f4:	697b      	ldr	r3, [r7, #20]
 800f5f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f5f8:	693b      	ldr	r3, [r7, #16]
 800f5fa:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800f5fe:	bf00      	nop
 800f600:	371c      	adds	r7, #28
 800f602:	46bd      	mov	sp, r7
 800f604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f608:	4770      	bx	lr

0800f60a <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 800f60a:	b580      	push	{r7, lr}
 800f60c:	b086      	sub	sp, #24
 800f60e:	af00      	add	r7, sp, #0
 800f610:	6078      	str	r0, [r7, #4]
 800f612:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f614:	f3ef 8310 	mrs	r3, PRIMASK
 800f618:	60fb      	str	r3, [r7, #12]
  return(result);
 800f61a:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800f61c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f61e:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	681a      	ldr	r2, [r3, #0]
 800f624:	683b      	ldr	r3, [r7, #0]
 800f626:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	4618      	mov	r0, r3
 800f62e:	f7ff ffcd 	bl	800f5cc <list_remove_node>
  (*node)->next = NULL;
 800f632:	683b      	ldr	r3, [r7, #0]
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	2200      	movs	r2, #0
 800f638:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800f63a:	683b      	ldr	r3, [r7, #0]
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	2200      	movs	r2, #0
 800f640:	605a      	str	r2, [r3, #4]
 800f642:	697b      	ldr	r3, [r7, #20]
 800f644:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f646:	693b      	ldr	r3, [r7, #16]
 800f648:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800f64c:	bf00      	nop
 800f64e:	3718      	adds	r7, #24
 800f650:	46bd      	mov	sp, r7
 800f652:	bd80      	pop	{r7, pc}

0800f654 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 800f654:	b580      	push	{r7, lr}
 800f656:	b086      	sub	sp, #24
 800f658:	af00      	add	r7, sp, #0
 800f65a:	6078      	str	r0, [r7, #4]
 800f65c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f65e:	f3ef 8310 	mrs	r3, PRIMASK
 800f662:	60fb      	str	r3, [r7, #12]
  return(result);
 800f664:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800f666:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f668:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	685a      	ldr	r2, [r3, #4]
 800f66e:	683b      	ldr	r3, [r7, #0]
 800f670:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	685b      	ldr	r3, [r3, #4]
 800f676:	4618      	mov	r0, r3
 800f678:	f7ff ffa8 	bl	800f5cc <list_remove_node>
  (*node)->next = NULL;
 800f67c:	683b      	ldr	r3, [r7, #0]
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	2200      	movs	r2, #0
 800f682:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800f684:	683b      	ldr	r3, [r7, #0]
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	2200      	movs	r2, #0
 800f68a:	605a      	str	r2, [r3, #4]
 800f68c:	697b      	ldr	r3, [r7, #20]
 800f68e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f690:	693b      	ldr	r3, [r7, #16]
 800f692:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800f696:	bf00      	nop
 800f698:	3718      	adds	r7, #24
 800f69a:	46bd      	mov	sp, r7
 800f69c:	bd80      	pop	{r7, pc}

0800f69e <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 800f69e:	b480      	push	{r7}
 800f6a0:	b089      	sub	sp, #36	; 0x24
 800f6a2:	af00      	add	r7, sp, #0
 800f6a4:	6078      	str	r0, [r7, #4]
  int size = 0;
 800f6a6:	2300      	movs	r3, #0
 800f6a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f6aa:	f3ef 8310 	mrs	r3, PRIMASK
 800f6ae:	613b      	str	r3, [r7, #16]
  return(result);
 800f6b0:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800f6b2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f6b4:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800f6bc:	e005      	b.n	800f6ca <list_get_size+0x2c>
  {
    size++;
 800f6be:	69fb      	ldr	r3, [r7, #28]
 800f6c0:	3301      	adds	r3, #1
 800f6c2:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 800f6c4:	69bb      	ldr	r3, [r7, #24]
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800f6ca:	69ba      	ldr	r2, [r7, #24]
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	429a      	cmp	r2, r3
 800f6d0:	d1f5      	bne.n	800f6be <list_get_size+0x20>
 800f6d2:	697b      	ldr	r3, [r7, #20]
 800f6d4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	f383 8810 	msr	PRIMASK, r3
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 800f6dc:	69fb      	ldr	r3, [r7, #28]
}
 800f6de:	4618      	mov	r0, r3
 800f6e0:	3724      	adds	r7, #36	; 0x24
 800f6e2:	46bd      	mov	sp, r7
 800f6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e8:	4770      	bx	lr
	...

0800f6ec <m_mldivide>:
 800f6ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6f0:	ed2d 8b02 	vpush	{d8}
 800f6f4:	b099      	sub	sp, #100	; 0x64
 800f6f6:	4606      	mov	r6, r0
 800f6f8:	460d      	mov	r5, r1
 800f6fa:	4614      	mov	r4, r2
 800f6fc:	4607      	mov	r7, r0
 800f6fe:	f100 0820 	add.w	r8, r0, #32
 800f702:	f10d 0e3c 	add.w	lr, sp, #60	; 0x3c
 800f706:	6838      	ldr	r0, [r7, #0]
 800f708:	6879      	ldr	r1, [r7, #4]
 800f70a:	68ba      	ldr	r2, [r7, #8]
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	46f4      	mov	ip, lr
 800f710:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f714:	3710      	adds	r7, #16
 800f716:	4547      	cmp	r7, r8
 800f718:	46e6      	mov	lr, ip
 800f71a:	d1f4      	bne.n	800f706 <m_mldivide+0x1a>
 800f71c:	edd6 7a00 	vldr	s15, [r6]
 800f720:	ed96 7a01 	vldr	s14, [r6, #4]
 800f724:	6838      	ldr	r0, [r7, #0]
 800f726:	f8cc 0000 	str.w	r0, [ip]
 800f72a:	eef0 7ae7 	vabs.f32	s15, s15
 800f72e:	eeb0 7ac7 	vabs.f32	s14, s14
 800f732:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f73a:	f100 8173 	bmi.w	800fa24 <m_mldivide+0x338>
 800f73e:	2307      	movs	r3, #7
 800f740:	2004      	movs	r0, #4
 800f742:	f04f 0b00 	mov.w	fp, #0
 800f746:	9305      	str	r3, [sp, #20]
 800f748:	2301      	movs	r3, #1
 800f74a:	9004      	str	r0, [sp, #16]
 800f74c:	eeb0 7a67 	vmov.f32	s14, s15
 800f750:	46de      	mov	lr, fp
 800f752:	f04f 0806 	mov.w	r8, #6
 800f756:	2703      	movs	r7, #3
 800f758:	9301      	str	r3, [sp, #4]
 800f75a:	edd6 7a02 	vldr	s15, [r6, #8]
 800f75e:	eef0 7ae7 	vabs.f32	s15, s15
 800f762:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f76a:	f300 816a 	bgt.w	800fa42 <m_mldivide+0x356>
 800f76e:	2202      	movs	r2, #2
 800f770:	9202      	str	r2, [sp, #8]
 800f772:	9a01      	ldr	r2, [sp, #4]
 800f774:	2308      	movs	r3, #8
 800f776:	f04f 0c05 	mov.w	ip, #5
 800f77a:	4430      	add	r0, r6
 800f77c:	4476      	add	r6, lr
 800f77e:	edd0 6a00 	vldr	s13, [r0]
 800f782:	ed96 7a00 	vldr	s14, [r6]
 800f786:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f78a:	0090      	lsls	r0, r2, #2
 800f78c:	aa18      	add	r2, sp, #96	; 0x60
 800f78e:	eb02 0e00 	add.w	lr, r2, r0
 800f792:	9006      	str	r0, [sp, #24]
 800f794:	9a02      	ldr	r2, [sp, #8]
 800f796:	ea4f 008b 	mov.w	r0, fp, lsl #2
 800f79a:	ae18      	add	r6, sp, #96	; 0x60
 800f79c:	900b      	str	r0, [sp, #44]	; 0x2c
 800f79e:	1830      	adds	r0, r6, r0
 800f7a0:	9e04      	ldr	r6, [sp, #16]
 800f7a2:	ea4f 0a82 	mov.w	sl, r2, lsl #2
 800f7a6:	aa18      	add	r2, sp, #96	; 0x60
 800f7a8:	00b6      	lsls	r6, r6, #2
 800f7aa:	4452      	add	r2, sl
 800f7ac:	9208      	str	r2, [sp, #32]
 800f7ae:	00bf      	lsls	r7, r7, #2
 800f7b0:	4632      	mov	r2, r6
 800f7b2:	9607      	str	r6, [sp, #28]
 800f7b4:	ae18      	add	r6, sp, #96	; 0x60
 800f7b6:	970c      	str	r7, [sp, #48]	; 0x30
 800f7b8:	19f7      	adds	r7, r6, r7
 800f7ba:	9709      	str	r7, [sp, #36]	; 0x24
 800f7bc:	4637      	mov	r7, r6
 800f7be:	18b9      	adds	r1, r7, r2
 800f7c0:	9103      	str	r1, [sp, #12]
 800f7c2:	9908      	ldr	r1, [sp, #32]
 800f7c4:	ed4e 7a09 	vstr	s15, [lr, #-36]	; 0xffffffdc
 800f7c8:	ed51 6a09 	vldr	s13, [r1, #-36]	; 0xffffffdc
 800f7cc:	ed10 7a09 	vldr	s14, [r0, #-36]	; 0xffffffdc
 800f7d0:	9805      	ldr	r0, [sp, #20]
 800f7d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f7d6:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800f7da:	0080      	lsls	r0, r0, #2
 800f7dc:	ea4f 098c 	mov.w	r9, ip, lsl #2
 800f7e0:	eb07 0c09 	add.w	ip, r7, r9
 800f7e4:	4616      	mov	r6, r2
 800f7e6:	4607      	mov	r7, r0
 800f7e8:	920d      	str	r2, [sp, #52]	; 0x34
 800f7ea:	aa18      	add	r2, sp, #96	; 0x60
 800f7ec:	9008      	str	r0, [sp, #32]
 800f7ee:	1990      	adds	r0, r2, r6
 800f7f0:	19d6      	adds	r6, r2, r7
 800f7f2:	960a      	str	r6, [sp, #40]	; 0x28
 800f7f4:	9f03      	ldr	r7, [sp, #12]
 800f7f6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800f7f8:	ed41 7a09 	vstr	s15, [r1, #-36]	; 0xffffffdc
 800f7fc:	ed5e 6a09 	vldr	s13, [lr, #-36]	; 0xffffffdc
 800f800:	ed16 7a09 	vldr	s14, [r6, #-36]	; 0xffffffdc
 800f804:	ed57 7a09 	vldr	s15, [r7, #-36]	; 0xffffffdc
 800f808:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800f80c:	009b      	lsls	r3, r3, #2
 800f80e:	eb02 0803 	add.w	r8, r2, r3
 800f812:	460a      	mov	r2, r1
 800f814:	ed47 7a09 	vstr	s15, [r7, #-36]	; 0xffffffdc
 800f818:	ed52 6a09 	vldr	s13, [r2, #-36]	; 0xffffffdc
 800f81c:	ed16 7a09 	vldr	s14, [r6, #-36]	; 0xffffffdc
 800f820:	ed5c 7a09 	vldr	s15, [ip, #-36]	; 0xffffffdc
 800f824:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800f828:	4611      	mov	r1, r2
 800f82a:	ed4c 7a09 	vstr	s15, [ip, #-36]	; 0xffffffdc
 800f82e:	ed5e 6a09 	vldr	s13, [lr, #-36]	; 0xffffffdc
 800f832:	ed10 7a09 	vldr	s14, [r0, #-36]	; 0xffffffdc
 800f836:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800f838:	9f03      	ldr	r7, [sp, #12]
 800f83a:	ed56 7a09 	vldr	s15, [r6, #-36]	; 0xffffffdc
 800f83e:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800f842:	ed46 7a09 	vstr	s15, [r6, #-36]	; 0xffffffdc
 800f846:	ed51 6a09 	vldr	s13, [r1, #-36]	; 0xffffffdc
 800f84a:	ed10 7a09 	vldr	s14, [r0, #-36]	; 0xffffffdc
 800f84e:	ed58 7a09 	vldr	s15, [r8, #-36]	; 0xffffffdc
 800f852:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800f856:	ed48 7a09 	vstr	s15, [r8, #-36]	; 0xffffffdc
 800f85a:	ed5c 7a09 	vldr	s15, [ip, #-36]	; 0xffffffdc
 800f85e:	ed17 7a09 	vldr	s14, [r7, #-36]	; 0xffffffdc
 800f862:	eeb0 6ae7 	vabs.f32	s12, s15
 800f866:	eef0 6ac7 	vabs.f32	s13, s14
 800f86a:	eeb4 6ae6 	vcmpe.f32	s12, s13
 800f86e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f872:	dc14      	bgt.n	800f89e <m_mldivide+0x1b2>
 800f874:	9802      	ldr	r0, [sp, #8]
 800f876:	9901      	ldr	r1, [sp, #4]
 800f878:	9e04      	ldr	r6, [sp, #16]
 800f87a:	9001      	str	r0, [sp, #4]
 800f87c:	9805      	ldr	r0, [sp, #20]
 800f87e:	f8cd a018 	str.w	sl, [sp, #24]
 800f882:	eef0 6a47 	vmov.f32	s13, s14
 800f886:	e9cd 9307 	strd	r9, r3, [sp, #28]
 800f88a:	eeb0 7a67 	vmov.f32	s14, s15
 800f88e:	9102      	str	r1, [sp, #8]
 800f890:	eef0 7a66 	vmov.f32	s15, s13
 800f894:	ea4f 0986 	mov.w	r9, r6, lsl #2
 800f898:	0083      	lsls	r3, r0, #2
 800f89a:	ea4f 0a81 	mov.w	sl, r1, lsl #2
 800f89e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f8a2:	9a07      	ldr	r2, [sp, #28]
 800f8a4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800f8a6:	a818      	add	r0, sp, #96	; 0x60
 800f8a8:	4402      	add	r2, r0
 800f8aa:	4616      	mov	r6, r2
 800f8ac:	9a08      	ldr	r2, [sp, #32]
 800f8ae:	4402      	add	r2, r0
 800f8b0:	4610      	mov	r0, r2
 800f8b2:	aa18      	add	r2, sp, #96	; 0x60
 800f8b4:	1899      	adds	r1, r3, r2
 800f8b6:	eb05 0e07 	add.w	lr, r5, r7
 800f8ba:	ed9e 7a00 	vldr	s14, [lr]
 800f8be:	ed46 6a09 	vstr	s13, [r6, #-36]	; 0xffffffdc
 800f8c2:	ed11 6a09 	vldr	s12, [r1, #-36]	; 0xffffffdc
 800f8c6:	ed50 7a09 	vldr	s15, [r0, #-36]	; 0xffffffdc
 800f8ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f8cc:	ed84 7a00 	vstr	s14, [r4]
 800f8d0:	eee6 7ac6 	vfms.f32	s15, s13, s12
 800f8d4:	eb02 0e0a 	add.w	lr, r2, sl
 800f8d8:	4413      	add	r3, r2
 800f8da:	44aa      	add	sl, r5
 800f8dc:	ed40 7a09 	vstr	s15, [r0, #-36]	; 0xffffffdc
 800f8e0:	ed5e 1a09 	vldr	s3, [lr, #-36]	; 0xffffffdc
 800f8e4:	edda 6a00 	vldr	s13, [sl]
 800f8e8:	ed56 2a09 	vldr	s5, [r6, #-36]	; 0xffffffdc
 800f8ec:	ed11 3a09 	vldr	s6, [r1, #-36]	; 0xffffffdc
 800f8f0:	4698      	mov	r8, r3
 800f8f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f8f4:	ed58 3a09 	vldr	s7, [r8, #-36]	; 0xffffffdc
 800f8f8:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800f8fc:	eef1 8a61 	vneg.f32	s17, s3
 800f900:	eee8 6a87 	vfma.f32	s13, s17, s14
 800f904:	4413      	add	r3, r2
 800f906:	eb02 0c07 	add.w	ip, r2, r7
 800f90a:	eec1 4a27 	vdiv.f32	s9, s2, s15
 800f90e:	461f      	mov	r7, r3
 800f910:	9b06      	ldr	r3, [sp, #24]
 800f912:	4491      	add	r9, r2
 800f914:	eb02 0e03 	add.w	lr, r2, r3
 800f918:	18e8      	adds	r0, r5, r3
 800f91a:	9a02      	ldr	r2, [sp, #8]
 800f91c:	9b01      	ldr	r3, [sp, #4]
 800f91e:	eb05 0683 	add.w	r6, r5, r3, lsl #2
 800f922:	edc4 6a01 	vstr	s13, [r4, #4]
 800f926:	ed59 5a09 	vldr	s11, [r9, #-36]	; 0xffffffdc
 800f92a:	ed1e 2a09 	vldr	s4, [lr, #-36]	; 0xffffffdc
 800f92e:	ed90 6a00 	vldr	s12, [r0]
 800f932:	ed5c 0a09 	vldr	s1, [ip, #-36]	; 0xffffffdc
 800f936:	ed17 4a09 	vldr	s8, [r7, #-36]	; 0xffffffdc
 800f93a:	ee81 5a25 	vdiv.f32	s10, s2, s11
 800f93e:	eb05 0c8b 	add.w	ip, r5, fp, lsl #2
 800f942:	eb05 0782 	add.w	r7, r5, r2, lsl #2
 800f946:	eeb1 8a42 	vneg.f32	s16, s4
 800f94a:	eea8 6a07 	vfma.f32	s12, s16, s14
 800f94e:	eeb1 0a62 	vneg.f32	s0, s5
 800f952:	eea0 6a26 	vfma.f32	s12, s0, s13
 800f956:	eec1 5a20 	vdiv.f32	s11, s2, s1
 800f95a:	ee26 6a24 	vmul.f32	s12, s12, s9
 800f95e:	eef1 0a43 	vneg.f32	s1, s6
 800f962:	eee0 6a86 	vfma.f32	s13, s1, s12
 800f966:	eeb1 1a63 	vneg.f32	s2, s7
 800f96a:	eea1 7a06 	vfma.f32	s14, s2, s12
 800f96e:	ee66 6a85 	vmul.f32	s13, s13, s10
 800f972:	eef1 7a44 	vneg.f32	s15, s8
 800f976:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800f97a:	ed84 6a02 	vstr	s12, [r4, #8]
 800f97e:	ee27 7a25 	vmul.f32	s14, s14, s11
 800f982:	edc4 6a01 	vstr	s13, [r4, #4]
 800f986:	ed84 7a00 	vstr	s14, [r4]
 800f98a:	ed9c 7a03 	vldr	s14, [ip, #12]
 800f98e:	ed84 7a03 	vstr	s14, [r4, #12]
 800f992:	edd7 6a03 	vldr	s13, [r7, #12]
 800f996:	eee8 6a87 	vfma.f32	s13, s17, s14
 800f99a:	edc4 6a04 	vstr	s13, [r4, #16]
 800f99e:	ed96 6a03 	vldr	s12, [r6, #12]
 800f9a2:	eea8 6a07 	vfma.f32	s12, s16, s14
 800f9a6:	eea0 6a26 	vfma.f32	s12, s0, s13
 800f9aa:	ee26 6a24 	vmul.f32	s12, s12, s9
 800f9ae:	eee0 6a86 	vfma.f32	s13, s1, s12
 800f9b2:	eea1 7a06 	vfma.f32	s14, s2, s12
 800f9b6:	ee66 6a85 	vmul.f32	s13, s13, s10
 800f9ba:	ed84 6a05 	vstr	s12, [r4, #20]
 800f9be:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800f9c2:	edc4 6a04 	vstr	s13, [r4, #16]
 800f9c6:	ee27 7a25 	vmul.f32	s14, s14, s11
 800f9ca:	ed84 7a03 	vstr	s14, [r4, #12]
 800f9ce:	ed9c 7a06 	vldr	s14, [ip, #24]
 800f9d2:	ed84 7a06 	vstr	s14, [r4, #24]
 800f9d6:	edd7 7a06 	vldr	s15, [r7, #24]
 800f9da:	eeb1 6a47 	vneg.f32	s12, s14
 800f9de:	eee6 7a21 	vfma.f32	s15, s12, s3
 800f9e2:	edc4 7a07 	vstr	s15, [r4, #28]
 800f9e6:	edd6 6a06 	vldr	s13, [r6, #24]
 800f9ea:	eee6 6a02 	vfma.f32	s13, s12, s4
 800f9ee:	eee7 6ae2 	vfms.f32	s13, s15, s5
 800f9f2:	ee66 4aa4 	vmul.f32	s9, s13, s9
 800f9f6:	eef1 6a64 	vneg.f32	s13, s9
 800f9fa:	eee6 7a83 	vfma.f32	s15, s13, s6
 800f9fe:	eea6 7aa3 	vfma.f32	s14, s13, s7
 800fa02:	ee67 7a85 	vmul.f32	s15, s15, s10
 800fa06:	edc4 4a08 	vstr	s9, [r4, #32]
 800fa0a:	eea7 7ac4 	vfms.f32	s14, s15, s8
 800fa0e:	edc4 7a07 	vstr	s15, [r4, #28]
 800fa12:	ee27 7a25 	vmul.f32	s14, s14, s11
 800fa16:	ed84 7a06 	vstr	s14, [r4, #24]
 800fa1a:	b019      	add	sp, #100	; 0x64
 800fa1c:	ecbd 8b02 	vpop	{d8}
 800fa20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa24:	2300      	movs	r3, #0
 800fa26:	2704      	movs	r7, #4
 800fa28:	9301      	str	r3, [sp, #4]
 800fa2a:	4618      	mov	r0, r3
 800fa2c:	f04f 0c06 	mov.w	ip, #6
 800fa30:	2303      	movs	r3, #3
 800fa32:	46be      	mov	lr, r7
 800fa34:	f04f 0807 	mov.w	r8, #7
 800fa38:	e9cd 3c04 	strd	r3, ip, [sp, #16]
 800fa3c:	f04f 0b01 	mov.w	fp, #1
 800fa40:	e68b      	b.n	800f75a <m_mldivide+0x6e>
 800fa42:	2207      	movs	r2, #7
 800fa44:	2304      	movs	r3, #4
 800fa46:	f04f 0808 	mov.w	r8, #8
 800fa4a:	9205      	str	r2, [sp, #20]
 800fa4c:	2100      	movs	r1, #0
 800fa4e:	2201      	movs	r2, #1
 800fa50:	9304      	str	r3, [sp, #16]
 800fa52:	4618      	mov	r0, r3
 800fa54:	46c6      	mov	lr, r8
 800fa56:	2306      	movs	r3, #6
 800fa58:	f04f 0c03 	mov.w	ip, #3
 800fa5c:	2705      	movs	r7, #5
 800fa5e:	f04f 0b02 	mov.w	fp, #2
 800fa62:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800fa66:	e688      	b.n	800f77a <m_mldivide+0x8e>

0800fa68 <m_qmult_eml>:
 800fa68:	ed91 3a02 	vldr	s6, [r1, #8]
 800fa6c:	edd0 3a01 	vldr	s7, [r0, #4]
 800fa70:	ed91 5a03 	vldr	s10, [r1, #12]
 800fa74:	ed90 4a02 	vldr	s8, [r0, #8]
 800fa78:	ed91 2a00 	vldr	s4, [r1]
 800fa7c:	edd1 2a01 	vldr	s5, [r1, #4]
 800fa80:	edd0 4a00 	vldr	s9, [r0]
 800fa84:	edd0 5a03 	vldr	s11, [r0, #12]
 800fa88:	eeb1 1a43 	vneg.f32	s2, s6
 800fa8c:	ee23 6a83 	vmul.f32	s12, s7, s6
 800fa90:	ee24 7a01 	vmul.f32	s14, s8, s2
 800fa94:	ee64 6a02 	vmul.f32	s13, s8, s4
 800fa98:	ee64 7a05 	vmul.f32	s15, s8, s10
 800fa9c:	eef1 0a62 	vneg.f32	s1, s5
 800faa0:	eef1 1a42 	vneg.f32	s3, s4
 800faa4:	eea4 6a85 	vfma.f32	s12, s9, s10
 800faa8:	eea3 7aa0 	vfma.f32	s14, s7, s1
 800faac:	eee3 6a85 	vfma.f32	s13, s7, s10
 800fab0:	eee3 7aa1 	vfma.f32	s15, s7, s3
 800fab4:	eea4 6a20 	vfma.f32	s12, s8, s1
 800fab8:	eee4 6a81 	vfma.f32	s13, s9, s2
 800fabc:	eea4 7aa1 	vfma.f32	s14, s9, s3
 800fac0:	eee4 7aa2 	vfma.f32	s15, s9, s5
 800fac4:	eea5 6a82 	vfma.f32	s12, s11, s4
 800fac8:	eee5 6aa2 	vfma.f32	s13, s11, s5
 800facc:	eea5 7a85 	vfma.f32	s14, s11, s10
 800fad0:	eee5 7a83 	vfma.f32	s15, s11, s6
 800fad4:	ed82 6a00 	vstr	s12, [r2]
 800fad8:	edc2 6a01 	vstr	s13, [r2, #4]
 800fadc:	ed82 7a03 	vstr	s14, [r2, #12]
 800fae0:	edc2 7a02 	vstr	s15, [r2, #8]
 800fae4:	4770      	bx	lr
 800fae6:	bf00      	nop

0800fae8 <m_q2dcm_eml>:
 800fae8:	b510      	push	{r4, lr}
 800faea:	ed2d 8b06 	vpush	{d8-d10}
 800faee:	edd0 9a01 	vldr	s19, [r0, #4]
 800faf2:	ed90 9a03 	vldr	s18, [r0, #12]
 800faf6:	ed90 8a00 	vldr	s16, [r0]
 800fafa:	edd0 8a02 	vldr	s17, [r0, #8]
 800fafe:	ee29 aaa9 	vmul.f32	s20, s19, s19
 800fb02:	ee69 aa09 	vmul.f32	s21, s18, s18
 800fb06:	460c      	mov	r4, r1
 800fb08:	1d08      	adds	r0, r1, #4
 800fb0a:	2220      	movs	r2, #32
 800fb0c:	2100      	movs	r1, #0
 800fb0e:	f00a fd82 	bl	801a616 <memset>
 800fb12:	eef1 4a48 	vneg.f32	s9, s16
 800fb16:	eeb0 5a4a 	vmov.f32	s10, s20
 800fb1a:	eef0 5a4a 	vmov.f32	s11, s20
 800fb1e:	eeb0 6a6a 	vmov.f32	s12, s21
 800fb22:	eee4 5a88 	vfma.f32	s11, s9, s16
 800fb26:	ee98 5a08 	vfnms.f32	s10, s16, s16
 800fb2a:	eea8 6aa8 	vfma.f32	s12, s17, s17
 800fb2e:	eeb1 4a68 	vneg.f32	s8, s17
 800fb32:	ee29 7aa8 	vmul.f32	s14, s19, s17
 800fb36:	ee68 6a89 	vmul.f32	s13, s17, s18
 800fb3a:	ee69 7a89 	vmul.f32	s15, s19, s18
 800fb3e:	eea4 5a28 	vfma.f32	s10, s8, s17
 800fb42:	eee4 5a28 	vfma.f32	s11, s8, s17
 800fb46:	eea4 6a88 	vfma.f32	s12, s9, s16
 800fb4a:	eeb0 4a47 	vmov.f32	s8, s14
 800fb4e:	eea4 4a89 	vfma.f32	s8, s9, s18
 800fb52:	eef0 3a66 	vmov.f32	s7, s13
 800fb56:	eef0 4a67 	vmov.f32	s9, s15
 800fb5a:	eee8 3a29 	vfma.f32	s7, s16, s19
 800fb5e:	eed8 6a29 	vfnms.f32	s13, s16, s19
 800fb62:	eea8 7a09 	vfma.f32	s14, s16, s18
 800fb66:	eed8 4a28 	vfnms.f32	s9, s16, s17
 800fb6a:	eee8 7a28 	vfma.f32	s15, s16, s17
 800fb6e:	ee35 5a2a 	vadd.f32	s10, s10, s21
 800fb72:	ee75 5aaa 	vadd.f32	s11, s11, s21
 800fb76:	ee36 6a4a 	vsub.f32	s12, s12, s20
 800fb7a:	ecbd 8b06 	vpop	{d8-d10}
 800fb7e:	ee73 3aa3 	vadd.f32	s7, s7, s7
 800fb82:	ee76 6aa6 	vadd.f32	s13, s13, s13
 800fb86:	ee34 4a04 	vadd.f32	s8, s8, s8
 800fb8a:	ee37 7a07 	vadd.f32	s14, s14, s14
 800fb8e:	ee74 4aa4 	vadd.f32	s9, s9, s9
 800fb92:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800fb96:	ed84 5a00 	vstr	s10, [r4]
 800fb9a:	edc4 5a04 	vstr	s11, [r4, #16]
 800fb9e:	ed84 6a08 	vstr	s12, [r4, #32]
 800fba2:	edc4 3a03 	vstr	s7, [r4, #12]
 800fba6:	edc4 6a01 	vstr	s13, [r4, #4]
 800fbaa:	ed84 4a05 	vstr	s8, [r4, #20]
 800fbae:	ed84 7a07 	vstr	s14, [r4, #28]
 800fbb2:	edc4 4a06 	vstr	s9, [r4, #24]
 800fbb6:	edc4 7a02 	vstr	s15, [r4, #8]
 800fbba:	bd10      	pop	{r4, pc}

0800fbbc <MEMS_EmptyDataFrame>:
 800fbbc:	2300      	movs	r3, #0
 800fbbe:	8103      	strh	r3, [r0, #8]
 800fbc0:	60c3      	str	r3, [r0, #12]
 800fbc2:	4770      	bx	lr

0800fbc4 <MEMS_DataBuffInit>:
 800fbc4:	b510      	push	{r4, lr}
 800fbc6:	4604      	mov	r4, r0
 800fbc8:	f7ff fff8 	bl	800fbbc <MEMS_EmptyDataFrame>
 800fbcc:	2382      	movs	r3, #130	; 0x82
 800fbce:	8163      	strh	r3, [r4, #10]
 800fbd0:	4b01      	ldr	r3, [pc, #4]	; (800fbd8 <MEMS_DataBuffInit+0x14>)
 800fbd2:	6123      	str	r3, [r4, #16]
 800fbd4:	bd10      	pop	{r4, pc}
 800fbd6:	bf00      	nop
 800fbd8:	200013c8 	.word	0x200013c8

0800fbdc <MEMS_checkTimeToRun>:
 800fbdc:	7803      	ldrb	r3, [r0, #0]
 800fbde:	b363      	cbz	r3, 800fc3a <MEMS_checkTimeToRun+0x5e>
 800fbe0:	890b      	ldrh	r3, [r1, #8]
 800fbe2:	894a      	ldrh	r2, [r1, #10]
 800fbe4:	429a      	cmp	r2, r3
 800fbe6:	d027      	beq.n	800fc38 <MEMS_checkTimeToRun+0x5c>
 800fbe8:	b430      	push	{r4, r5}
 800fbea:	b373      	cbz	r3, 800fc4a <MEMS_checkTimeToRun+0x6e>
 800fbec:	68ca      	ldr	r2, [r1, #12]
 800fbee:	3201      	adds	r2, #1
 800fbf0:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800fbf4:	441a      	add	r2, r3
 800fbf6:	f1b2 3fff 	cmp.w	r2, #4294967295
 800fbfa:	bf08      	it	eq
 800fbfc:	2200      	moveq	r2, #0
 800fbfe:	f502 531c 	add.w	r3, r2, #9984	; 0x2700
 800fc02:	3310      	adds	r3, #16
 800fc04:	6844      	ldr	r4, [r0, #4]
 800fc06:	429c      	cmp	r4, r3
 800fc08:	bf88      	it	hi
 800fc0a:	6042      	strhi	r2, [r0, #4]
 800fc0c:	8905      	ldrh	r5, [r0, #8]
 800fc0e:	6844      	ldr	r4, [r0, #4]
 800fc10:	442c      	add	r4, r5
 800fc12:	4294      	cmp	r4, r2
 800fc14:	d815      	bhi.n	800fc42 <MEMS_checkTimeToRun+0x66>
 800fc16:	890b      	ldrh	r3, [r1, #8]
 800fc18:	b18b      	cbz	r3, 800fc3e <MEMS_checkTimeToRun+0x62>
 800fc1a:	3b01      	subs	r3, #1
 800fc1c:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 800fc20:	68c9      	ldr	r1, [r1, #12]
 800fc22:	fb04 1313 	mls	r3, r4, r3, r1
 800fc26:	1ad3      	subs	r3, r2, r3
 800fc28:	b21b      	sxth	r3, r3
 800fc2a:	42ab      	cmp	r3, r5
 800fc2c:	bfb4      	ite	lt
 800fc2e:	2300      	movlt	r3, #0
 800fc30:	2301      	movge	r3, #1
 800fc32:	4618      	mov	r0, r3
 800fc34:	bc30      	pop	{r4, r5}
 800fc36:	4770      	bx	lr
 800fc38:	2301      	movs	r3, #1
 800fc3a:	4618      	mov	r0, r3
 800fc3c:	4770      	bx	lr
 800fc3e:	2300      	movs	r3, #0
 800fc40:	e7f1      	b.n	800fc26 <MEMS_checkTimeToRun+0x4a>
 800fc42:	2300      	movs	r3, #0
 800fc44:	4618      	mov	r0, r3
 800fc46:	bc30      	pop	{r4, r5}
 800fc48:	4770      	bx	lr
 800fc4a:	2200      	movs	r2, #0
 800fc4c:	e7d7      	b.n	800fbfe <MEMS_checkTimeToRun+0x22>
 800fc4e:	bf00      	nop

0800fc50 <updateProcBuffer_Temp>:
 800fc50:	f8d1 c000 	ldr.w	ip, [r1]
 800fc54:	790b      	ldrb	r3, [r1, #4]
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d05a      	beq.n	800fd10 <updateProcBuffer_Temp+0xc0>
 800fc5a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc5e:	2400      	movs	r4, #0
 800fc60:	f04f 087a 	mov.w	r8, #122	; 0x7a
 800fc64:	f06f 4560 	mvn.w	r5, #3758096384	; 0xe0000000
 800fc68:	f04f 0e01 	mov.w	lr, #1
 800fc6c:	fb08 1604 	mla	r6, r8, r4, r1
 800fc70:	79b3      	ldrb	r3, [r6, #6]
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d045      	beq.n	800fd02 <updateProcBuffer_Temp+0xb2>
 800fc76:	8943      	ldrh	r3, [r0, #10]
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d042      	beq.n	800fd02 <updateProcBuffer_Temp+0xb2>
 800fc7c:	8902      	ldrh	r2, [r0, #8]
 800fc7e:	4293      	cmp	r3, r2
 800fc80:	bf28      	it	cs
 800fc82:	4613      	movcs	r3, r2
 800fc84:	8103      	strh	r3, [r0, #8]
 800fc86:	79b3      	ldrb	r3, [r6, #6]
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d03a      	beq.n	800fd02 <updateProcBuffer_Temp+0xb2>
 800fc8c:	2200      	movs	r2, #0
 800fc8e:	fb08 f704 	mul.w	r7, r8, r4
 800fc92:	8903      	ldrh	r3, [r0, #8]
 800fc94:	3301      	adds	r3, #1
 800fc96:	b29b      	uxth	r3, r3
 800fc98:	f8b0 900a 	ldrh.w	r9, [r0, #10]
 800fc9c:	454b      	cmp	r3, r9
 800fc9e:	bf28      	it	cs
 800fca0:	464b      	movcs	r3, r9
 800fca2:	8103      	strh	r3, [r0, #8]
 800fca4:	eb03 0905 	add.w	r9, r3, r5
 800fca8:	6903      	ldr	r3, [r0, #16]
 800fcaa:	f803 e039 	strb.w	lr, [r3, r9, lsl #3]
 800fcae:	eb07 09c2 	add.w	r9, r7, r2, lsl #3
 800fcb2:	4489      	add	r9, r1
 800fcb4:	f9b9 a00a 	ldrsh.w	sl, [r9, #10]
 800fcb8:	8903      	ldrh	r3, [r0, #8]
 800fcba:	eb03 0b05 	add.w	fp, r3, r5
 800fcbe:	6903      	ldr	r3, [r0, #16]
 800fcc0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800fcc4:	f8a3 a002 	strh.w	sl, [r3, #2]
 800fcc8:	f9b9 a00c 	ldrsh.w	sl, [r9, #12]
 800fccc:	8903      	ldrh	r3, [r0, #8]
 800fcce:	eb03 0b05 	add.w	fp, r3, r5
 800fcd2:	6903      	ldr	r3, [r0, #16]
 800fcd4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800fcd8:	f8a3 a004 	strh.w	sl, [r3, #4]
 800fcdc:	f9b9 a00e 	ldrsh.w	sl, [r9, #14]
 800fce0:	8903      	ldrh	r3, [r0, #8]
 800fce2:	eb03 0b05 	add.w	fp, r3, r5
 800fce6:	6903      	ldr	r3, [r0, #16]
 800fce8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800fcec:	f8a3 a006 	strh.w	sl, [r3, #6]
 800fcf0:	f8b9 3008 	ldrh.w	r3, [r9, #8]
 800fcf4:	4463      	add	r3, ip
 800fcf6:	60c3      	str	r3, [r0, #12]
 800fcf8:	3201      	adds	r2, #1
 800fcfa:	b2d2      	uxtb	r2, r2
 800fcfc:	79b3      	ldrb	r3, [r6, #6]
 800fcfe:	4293      	cmp	r3, r2
 800fd00:	d8c7      	bhi.n	800fc92 <updateProcBuffer_Temp+0x42>
 800fd02:	3401      	adds	r4, #1
 800fd04:	b2e4      	uxtb	r4, r4
 800fd06:	790b      	ldrb	r3, [r1, #4]
 800fd08:	42a3      	cmp	r3, r4
 800fd0a:	d8af      	bhi.n	800fc6c <updateProcBuffer_Temp+0x1c>
 800fd0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd10:	4770      	bx	lr
 800fd12:	bf00      	nop

0800fd14 <MEMS_getSensorData_I16>:
 800fd14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd18:	8903      	ldrh	r3, [r0, #8]
 800fd1a:	fa1f fe82 	uxth.w	lr, r2
 800fd1e:	4573      	cmp	r3, lr
 800fd20:	d95e      	bls.n	800fde0 <MEMS_getSensorData_I16+0xcc>
 800fd22:	f8a1 e004 	strh.w	lr, [r1, #4]
 800fd26:	f890 c008 	ldrb.w	ip, [r0, #8]
 800fd2a:	ebac 0c02 	sub.w	ip, ip, r2
 800fd2e:	fa5f fc8c 	uxtb.w	ip, ip
 800fd32:	8903      	ldrh	r3, [r0, #8]
 800fd34:	3b01      	subs	r3, #1
 800fd36:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 800fd3a:	68c5      	ldr	r5, [r0, #12]
 800fd3c:	fb04 5313 	mls	r3, r4, r3, r5
 800fd40:	600b      	str	r3, [r1, #0]
 800fd42:	888b      	ldrh	r3, [r1, #4]
 800fd44:	b1db      	cbz	r3, 800fd7e <MEMS_getSensorData_I16+0x6a>
 800fd46:	2600      	movs	r6, #0
 800fd48:	00f7      	lsls	r7, r6, #3
 800fd4a:	6903      	ldr	r3, [r0, #16]
 800fd4c:	f813 4036 	ldrb.w	r4, [r3, r6, lsl #3]
 800fd50:	688b      	ldr	r3, [r1, #8]
 800fd52:	f803 4036 	strb.w	r4, [r3, r6, lsl #3]
 800fd56:	2500      	movs	r5, #0
 800fd58:	6903      	ldr	r3, [r0, #16]
 800fd5a:	19dc      	adds	r4, r3, r7
 800fd5c:	ea4f 0845 	mov.w	r8, r5, lsl #1
 800fd60:	4444      	add	r4, r8
 800fd62:	f9b4 4002 	ldrsh.w	r4, [r4, #2]
 800fd66:	688b      	ldr	r3, [r1, #8]
 800fd68:	443b      	add	r3, r7
 800fd6a:	4443      	add	r3, r8
 800fd6c:	805c      	strh	r4, [r3, #2]
 800fd6e:	3501      	adds	r5, #1
 800fd70:	2d03      	cmp	r5, #3
 800fd72:	d1f1      	bne.n	800fd58 <MEMS_getSensorData_I16+0x44>
 800fd74:	3601      	adds	r6, #1
 800fd76:	b2f6      	uxtb	r6, r6
 800fd78:	888b      	ldrh	r3, [r1, #4]
 800fd7a:	42b3      	cmp	r3, r6
 800fd7c:	d8e4      	bhi.n	800fd48 <MEMS_getSensorData_I16+0x34>
 800fd7e:	8903      	ldrh	r3, [r0, #8]
 800fd80:	459e      	cmp	lr, r3
 800fd82:	d22a      	bcs.n	800fdda <MEMS_getSensorData_I16+0xc6>
 800fd84:	eba3 0e0e 	sub.w	lr, r3, lr
 800fd88:	f8a0 e008 	strh.w	lr, [r0, #8]
 800fd8c:	f1bc 0f00 	cmp.w	ip, #0
 800fd90:	d021      	beq.n	800fdd6 <MEMS_getSensorData_I16+0xc2>
 800fd92:	f10c 3cff 	add.w	ip, ip, #4294967295
 800fd96:	fa5f fc8c 	uxtb.w	ip, ip
 800fd9a:	f10c 0c01 	add.w	ip, ip, #1
 800fd9e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800fda2:	00d2      	lsls	r2, r2, #3
 800fda4:	2600      	movs	r6, #0
 800fda6:	46b6      	mov	lr, r6
 800fda8:	6903      	ldr	r3, [r0, #16]
 800fdaa:	1997      	adds	r7, r2, r6
 800fdac:	5dd9      	ldrb	r1, [r3, r7]
 800fdae:	5599      	strb	r1, [r3, r6]
 800fdb0:	2100      	movs	r1, #0
 800fdb2:	6903      	ldr	r3, [r0, #16]
 800fdb4:	19dc      	adds	r4, r3, r7
 800fdb6:	004d      	lsls	r5, r1, #1
 800fdb8:	442c      	add	r4, r5
 800fdba:	f9b4 4002 	ldrsh.w	r4, [r4, #2]
 800fdbe:	4433      	add	r3, r6
 800fdc0:	442b      	add	r3, r5
 800fdc2:	805c      	strh	r4, [r3, #2]
 800fdc4:	3101      	adds	r1, #1
 800fdc6:	2903      	cmp	r1, #3
 800fdc8:	d1f3      	bne.n	800fdb2 <MEMS_getSensorData_I16+0x9e>
 800fdca:	6903      	ldr	r3, [r0, #16]
 800fdcc:	f803 e007 	strb.w	lr, [r3, r7]
 800fdd0:	3608      	adds	r6, #8
 800fdd2:	4566      	cmp	r6, ip
 800fdd4:	d1e8      	bne.n	800fda8 <MEMS_getSensorData_I16+0x94>
 800fdd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fdda:	2300      	movs	r3, #0
 800fddc:	8103      	strh	r3, [r0, #8]
 800fdde:	e7d5      	b.n	800fd8c <MEMS_getSensorData_I16+0x78>
 800fde0:	808b      	strh	r3, [r1, #4]
 800fde2:	f04f 0c00 	mov.w	ip, #0
 800fde6:	e7a4      	b.n	800fd32 <MEMS_getSensorData_I16+0x1e>

0800fde8 <m_dcm2q_eml>:
 800fde8:	ed90 7a04 	vldr	s14, [r0, #16]
 800fdec:	edd0 7a00 	vldr	s15, [r0]
 800fdf0:	edd0 6a08 	vldr	s13, [r0, #32]
 800fdf4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fdf8:	b538      	push	{r3, r4, r5, lr}
 800fdfa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800fdfe:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800fe02:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fe06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe0a:	ed2d 8b02 	vpush	{d8}
 800fe0e:	4604      	mov	r4, r0
 800fe10:	460d      	mov	r5, r1
 800fe12:	f340 80bc 	ble.w	800ff8e <m_dcm2q_eml+0x1a6>
 800fe16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fe1a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fe1e:	ee17 0a90 	vmov	r0, s15
 800fe22:	f7f0 fb99 	bl	8000558 <__aeabi_f2d>
 800fe26:	f00b fd3d 	bl	801b8a4 <sqrt>
 800fe2a:	f7f0 fec5 	bl	8000bb8 <__aeabi_d2f>
 800fe2e:	ee07 0a10 	vmov	s14, r0
 800fe32:	edd4 7a05 	vldr	s15, [r4, #20]
 800fe36:	edd4 5a07 	vldr	s11, [r4, #28]
 800fe3a:	ed94 5a06 	vldr	s10, [r4, #24]
 800fe3e:	ed94 6a02 	vldr	s12, [r4, #8]
 800fe42:	edd4 6a03 	vldr	s13, [r4, #12]
 800fe46:	edd4 4a01 	vldr	s9, [r4, #4]
 800fe4a:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800fe4e:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800fe52:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 800fe56:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 800fe5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe5e:	bf54      	ite	pl
 800fe60:	eef0 5a48 	vmovpl.f32	s11, s16
 800fe64:	eef0 5a67 	vmovmi.f32	s11, s15
 800fe68:	ee27 7a25 	vmul.f32	s14, s14, s11
 800fe6c:	ee36 6a45 	vsub.f32	s12, s12, s10
 800fe70:	ed85 7a00 	vstr	s14, [r5]
 800fe74:	ed94 7a04 	vldr	s14, [r4, #16]
 800fe78:	ed94 5a00 	vldr	s10, [r4]
 800fe7c:	edd4 5a08 	vldr	s11, [r4, #32]
 800fe80:	ee37 7a45 	vsub.f32	s14, s14, s10
 800fe84:	ee76 6ae4 	vsub.f32	s13, s13, s9
 800fe88:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 800fe8c:	ee37 7a65 	vsub.f32	s14, s14, s11
 800fe90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe94:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800fe98:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 800fe9c:	bf54      	ite	pl
 800fe9e:	eef0 8a48 	vmovpl.f32	s17, s16
 800fea2:	eef0 8a67 	vmovmi.f32	s17, s15
 800fea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800feaa:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800feae:	bf48      	it	mi
 800feb0:	eeb0 8a67 	vmovmi.f32	s16, s15
 800feb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800feb8:	dd66      	ble.n	800ff88 <m_dcm2q_eml+0x1a0>
 800feba:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800febe:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fec2:	ee17 0a90 	vmov	r0, s15
 800fec6:	f7f0 fb47 	bl	8000558 <__aeabi_f2d>
 800feca:	f00b fceb 	bl	801b8a4 <sqrt>
 800fece:	f7f0 fe73 	bl	8000bb8 <__aeabi_d2f>
 800fed2:	ee07 0a90 	vmov	s15, r0
 800fed6:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800feda:	edc5 7a01 	vstr	s15, [r5, #4]
 800fede:	edd4 6a04 	vldr	s13, [r4, #16]
 800fee2:	ed94 7a00 	vldr	s14, [r4]
 800fee6:	edd4 7a08 	vldr	s15, [r4, #32]
 800feea:	ee37 7a26 	vadd.f32	s14, s14, s13
 800feee:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 800fef2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fef6:	eef4 7ae6 	vcmpe.f32	s15, s13
 800fefa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fefe:	dd40      	ble.n	800ff82 <m_dcm2q_eml+0x19a>
 800ff00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ff04:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ff08:	ee17 0a90 	vmov	r0, s15
 800ff0c:	f7f0 fb24 	bl	8000558 <__aeabi_f2d>
 800ff10:	f00b fcc8 	bl	801b8a4 <sqrt>
 800ff14:	f7f0 fe50 	bl	8000bb8 <__aeabi_d2f>
 800ff18:	ee07 0a90 	vmov	s15, r0
 800ff1c:	ee67 7a88 	vmul.f32	s15, s15, s16
 800ff20:	edc5 7a02 	vstr	s15, [r5, #8]
 800ff24:	ed94 7a04 	vldr	s14, [r4, #16]
 800ff28:	edd4 7a00 	vldr	s15, [r4]
 800ff2c:	edd4 6a08 	vldr	s13, [r4, #32]
 800ff30:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ff34:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800ff38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ff3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ff40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff44:	dd16      	ble.n	800ff74 <m_dcm2q_eml+0x18c>
 800ff46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ff4a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ff4e:	ee17 0a90 	vmov	r0, s15
 800ff52:	f7f0 fb01 	bl	8000558 <__aeabi_f2d>
 800ff56:	f00b fca5 	bl	801b8a4 <sqrt>
 800ff5a:	f7f0 fe2d 	bl	8000bb8 <__aeabi_d2f>
 800ff5e:	ecbd 8b02 	vpop	{d8}
 800ff62:	ee07 0a10 	vmov	s14, r0
 800ff66:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800ff6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ff6e:	edc5 7a03 	vstr	s15, [r5, #12]
 800ff72:	bd38      	pop	{r3, r4, r5, pc}
 800ff74:	ecbd 8b02 	vpop	{d8}
 800ff78:	eddf 7a06 	vldr	s15, [pc, #24]	; 800ff94 <m_dcm2q_eml+0x1ac>
 800ff7c:	edc5 7a03 	vstr	s15, [r5, #12]
 800ff80:	bd38      	pop	{r3, r4, r5, pc}
 800ff82:	eddf 7a04 	vldr	s15, [pc, #16]	; 800ff94 <m_dcm2q_eml+0x1ac>
 800ff86:	e7cb      	b.n	800ff20 <m_dcm2q_eml+0x138>
 800ff88:	eddf 7a02 	vldr	s15, [pc, #8]	; 800ff94 <m_dcm2q_eml+0x1ac>
 800ff8c:	e7a5      	b.n	800feda <m_dcm2q_eml+0xf2>
 800ff8e:	ed9f 7a01 	vldr	s14, [pc, #4]	; 800ff94 <m_dcm2q_eml+0x1ac>
 800ff92:	e74e      	b.n	800fe32 <m_dcm2q_eml+0x4a>
 800ff94:	00000000 	.word	0x00000000

0800ff98 <SpacePointGyroProp>:
 800ff98:	b570      	push	{r4, r5, r6, lr}
 800ff9a:	ed92 6a01 	vldr	s12, [r2, #4]
 800ff9e:	ed92 7a00 	vldr	s14, [r2]
 800ffa2:	edd2 6a02 	vldr	s13, [r2, #8]
 800ffa6:	edd1 7a02 	vldr	s15, [r1, #8]
 800ffaa:	ed2d 8b04 	vpush	{d8-d9}
 800ffae:	edd1 8a01 	vldr	s17, [r1, #4]
 800ffb2:	ed9f 8a3c 	vldr	s16, [pc, #240]	; 80100a4 <SpacePointGyroProp+0x10c>
 800ffb6:	ed91 9a00 	vldr	s18, [r1]
 800ffba:	9d08      	ldr	r5, [sp, #32]
 800ffbc:	ee20 8a08 	vmul.f32	s16, s0, s16
 800ffc0:	ee78 8ac6 	vsub.f32	s17, s17, s12
 800ffc4:	ee39 9a47 	vsub.f32	s18, s18, s14
 800ffc8:	ee68 8a88 	vmul.f32	s17, s17, s16
 800ffcc:	ee29 9a08 	vmul.f32	s18, s18, s16
 800ffd0:	ee28 7aa8 	vmul.f32	s14, s17, s17
 800ffd4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ffd8:	eea9 7a09 	vfma.f32	s14, s18, s18
 800ffdc:	4606      	mov	r6, r0
 800ffde:	461c      	mov	r4, r3
 800ffe0:	ee27 8a88 	vmul.f32	s16, s15, s16
 800ffe4:	eef0 7a47 	vmov.f32	s15, s14
 800ffe8:	eee8 7a08 	vfma.f32	s15, s16, s16
 800ffec:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 800fff0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800fff4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fff8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010000:	d445      	bmi.n	801008e <SpacePointGyroProp+0xf6>
 8010002:	2000      	movs	r0, #0
 8010004:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8010008:	ee29 9a00 	vmul.f32	s18, s18, s0
 801000c:	ee68 8a80 	vmul.f32	s17, s17, s0
 8010010:	ee28 8a00 	vmul.f32	s16, s16, s0
 8010014:	4622      	mov	r2, r4
 8010016:	60e8      	str	r0, [r5, #12]
 8010018:	4631      	mov	r1, r6
 801001a:	ed85 9a00 	vstr	s18, [r5]
 801001e:	edc5 8a01 	vstr	s17, [r5, #4]
 8010022:	ed85 8a02 	vstr	s16, [r5, #8]
 8010026:	4628      	mov	r0, r5
 8010028:	f7ff fd1e 	bl	800fa68 <m_qmult_eml>
 801002c:	edd4 8a02 	vldr	s17, [r4, #8]
 8010030:	ed94 9a01 	vldr	s18, [r4, #4]
 8010034:	ed94 8a03 	vldr	s16, [r4, #12]
 8010038:	edd4 9a00 	vldr	s19, [r4]
 801003c:	ee68 7aa8 	vmul.f32	s15, s17, s17
 8010040:	eee9 7a09 	vfma.f32	s15, s18, s18
 8010044:	eee8 7a08 	vfma.f32	s15, s16, s16
 8010048:	eee9 7aa9 	vfma.f32	s15, s19, s19
 801004c:	ee17 0a90 	vmov	r0, s15
 8010050:	f7f0 fa82 	bl	8000558 <__aeabi_f2d>
 8010054:	f00b fc26 	bl	801b8a4 <sqrt>
 8010058:	f7f0 fdae 	bl	8000bb8 <__aeabi_d2f>
 801005c:	ee07 0a90 	vmov	s15, r0
 8010060:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010064:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8010068:	ee69 9aa7 	vmul.f32	s19, s19, s15
 801006c:	ee29 9a27 	vmul.f32	s18, s18, s15
 8010070:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8010074:	ee28 8a27 	vmul.f32	s16, s16, s15
 8010078:	edc4 9a00 	vstr	s19, [r4]
 801007c:	ed84 9a01 	vstr	s18, [r4, #4]
 8010080:	edc4 8a02 	vstr	s17, [r4, #8]
 8010084:	ed84 8a03 	vstr	s16, [r4, #12]
 8010088:	ecbd 8b04 	vpop	{d8-d9}
 801008c:	bd70      	pop	{r4, r5, r6, pc}
 801008e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010092:	ee17 0a90 	vmov	r0, s15
 8010096:	f7f0 fa5f 	bl	8000558 <__aeabi_f2d>
 801009a:	f00b fc03 	bl	801b8a4 <sqrt>
 801009e:	f7f0 fd8b 	bl	8000bb8 <__aeabi_d2f>
 80100a2:	e7af      	b.n	8010004 <SpacePointGyroProp+0x6c>
 80100a4:	3c8efa35 	.word	0x3c8efa35

080100a8 <quatErr2EulerErr>:
 80100a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80100ac:	2300      	movs	r3, #0
 80100ae:	ed2d 8b04 	vpush	{d8-d9}
 80100b2:	6013      	str	r3, [r2, #0]
 80100b4:	6053      	str	r3, [r2, #4]
 80100b6:	6093      	str	r3, [r2, #8]
 80100b8:	ed9f 8a71 	vldr	s16, [pc, #452]	; 8010280 <quatErr2EulerErr+0x1d8>
 80100bc:	edd0 7a01 	vldr	s15, [r0, #4]
 80100c0:	ee67 7a88 	vmul.f32	s15, s15, s16
 80100c4:	4606      	mov	r6, r0
 80100c6:	ee17 0a90 	vmov	r0, s15
 80100ca:	460c      	mov	r4, r1
 80100cc:	4615      	mov	r5, r2
 80100ce:	f00b fad3 	bl	801b678 <cosf>
 80100d2:	edd6 8a02 	vldr	s17, [r6, #8]
 80100d6:	ee68 8a88 	vmul.f32	s17, s17, s16
 80100da:	ee09 0a10 	vmov	s18, r0
 80100de:	ee18 0a90 	vmov	r0, s17
 80100e2:	f00b fb29 	bl	801b738 <sinf>
 80100e6:	ee08 0a10 	vmov	s16, r0
 80100ea:	ee18 0a90 	vmov	r0, s17
 80100ee:	f00b fac3 	bl	801b678 <cosf>
 80100f2:	ee06 0a10 	vmov	s12, r0
 80100f6:	edd4 7a01 	vldr	s15, [r4, #4]
 80100fa:	edd4 6a02 	vldr	s13, [r4, #8]
 80100fe:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8010284 <quatErr2EulerErr+0x1dc>
 8010102:	ee66 8a06 	vmul.f32	s17, s12, s12
 8010106:	ee28 8a08 	vmul.f32	s16, s16, s16
 801010a:	ee68 7aa7 	vmul.f32	s15, s17, s15
 801010e:	eee8 7a26 	vfma.f32	s15, s16, s13
 8010112:	eef1 6ae7 	vsqrt.f32	s13, s15
 8010116:	ee66 7a87 	vmul.f32	s15, s13, s14
 801011a:	ee17 0a90 	vmov	r0, s15
 801011e:	f7f0 fa1b 	bl	8000558 <__aeabi_f2d>
 8010122:	2200      	movs	r2, #0
 8010124:	4b58      	ldr	r3, [pc, #352]	; (8010288 <quatErr2EulerErr+0x1e0>)
 8010126:	4680      	mov	r8, r0
 8010128:	4689      	mov	r9, r1
 801012a:	f7f0 fce9 	bl	8000b00 <__aeabi_dcmple>
 801012e:	b918      	cbnz	r0, 8010138 <quatErr2EulerErr+0x90>
 8010130:	f8df 9154 	ldr.w	r9, [pc, #340]	; 8010288 <quatErr2EulerErr+0x1e0>
 8010134:	f04f 0800 	mov.w	r8, #0
 8010138:	4649      	mov	r1, r9
 801013a:	4640      	mov	r0, r8
 801013c:	f7f0 fd3c 	bl	8000bb8 <__aeabi_d2f>
 8010140:	f7f0 fa0a 	bl	8000558 <__aeabi_f2d>
 8010144:	2200      	movs	r2, #0
 8010146:	4b51      	ldr	r3, [pc, #324]	; (801028c <quatErr2EulerErr+0x1e4>)
 8010148:	4680      	mov	r8, r0
 801014a:	4689      	mov	r9, r1
 801014c:	f7f0 fce2 	bl	8000b14 <__aeabi_dcmpge>
 8010150:	b918      	cbnz	r0, 801015a <quatErr2EulerErr+0xb2>
 8010152:	f8df 9138 	ldr.w	r9, [pc, #312]	; 801028c <quatErr2EulerErr+0x1e4>
 8010156:	f04f 0800 	mov.w	r8, #0
 801015a:	4649      	mov	r1, r9
 801015c:	4640      	mov	r0, r8
 801015e:	f7f0 fd2b 	bl	8000bb8 <__aeabi_d2f>
 8010162:	6068      	str	r0, [r5, #4]
 8010164:	edd4 7a02 	vldr	s15, [r4, #8]
 8010168:	ed94 6a01 	vldr	s12, [r4, #4]
 801016c:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8010290 <quatErr2EulerErr+0x1e8>
 8010170:	eddf 6a44 	vldr	s13, [pc, #272]	; 8010284 <quatErr2EulerErr+0x1dc>
 8010174:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8010178:	eea9 7a09 	vfma.f32	s14, s18, s18
 801017c:	eee8 7a06 	vfma.f32	s15, s16, s12
 8010180:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8010184:	eef1 7ac6 	vsqrt.f32	s15, s12
 8010188:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801018c:	ee17 0a90 	vmov	r0, s15
 8010190:	f7f0 f9e2 	bl	8000558 <__aeabi_f2d>
 8010194:	2200      	movs	r2, #0
 8010196:	4b3f      	ldr	r3, [pc, #252]	; (8010294 <quatErr2EulerErr+0x1ec>)
 8010198:	4680      	mov	r8, r0
 801019a:	4689      	mov	r9, r1
 801019c:	f7f0 fcb0 	bl	8000b00 <__aeabi_dcmple>
 80101a0:	b918      	cbnz	r0, 80101aa <quatErr2EulerErr+0x102>
 80101a2:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 8010294 <quatErr2EulerErr+0x1ec>
 80101a6:	f04f 0800 	mov.w	r8, #0
 80101aa:	4649      	mov	r1, r9
 80101ac:	4640      	mov	r0, r8
 80101ae:	f7f0 fd03 	bl	8000bb8 <__aeabi_d2f>
 80101b2:	f7f0 f9d1 	bl	8000558 <__aeabi_f2d>
 80101b6:	2200      	movs	r2, #0
 80101b8:	4b34      	ldr	r3, [pc, #208]	; (801028c <quatErr2EulerErr+0x1e4>)
 80101ba:	4680      	mov	r8, r0
 80101bc:	4689      	mov	r9, r1
 80101be:	f7f0 fca9 	bl	8000b14 <__aeabi_dcmpge>
 80101c2:	b918      	cbnz	r0, 80101cc <quatErr2EulerErr+0x124>
 80101c4:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 801028c <quatErr2EulerErr+0x1e4>
 80101c8:	f04f 0800 	mov.w	r8, #0
 80101cc:	4640      	mov	r0, r8
 80101ce:	4649      	mov	r1, r9
 80101d0:	f7f0 fcf2 	bl	8000bb8 <__aeabi_d2f>
 80101d4:	6028      	str	r0, [r5, #0]
 80101d6:	edd6 7a01 	vldr	s15, [r6, #4]
 80101da:	eddf 5a29 	vldr	s11, [pc, #164]	; 8010280 <quatErr2EulerErr+0x1d8>
 80101de:	edd4 6a02 	vldr	s13, [r4, #8]
 80101e2:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8010298 <quatErr2EulerErr+0x1f0>
 80101e6:	ed94 6a01 	vldr	s12, [r4, #4]
 80101ea:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80101ee:	ee28 8a26 	vmul.f32	s16, s16, s13
 80101f2:	eef0 6ae7 	vabs.f32	s13, s15
 80101f6:	eef4 6ac7 	vcmpe.f32	s13, s14
 80101fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101fe:	eea8 8a86 	vfma.f32	s16, s17, s12
 8010202:	d430      	bmi.n	8010266 <quatErr2EulerErr+0x1be>
 8010204:	ed9f 7a25 	vldr	s14, [pc, #148]	; 801029c <quatErr2EulerErr+0x1f4>
 8010208:	edd4 7a00 	vldr	s15, [r4]
 801020c:	eee8 7a07 	vfma.f32	s15, s16, s14
 8010210:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8010214:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8010284 <quatErr2EulerErr+0x1dc>
 8010218:	ee67 7a27 	vmul.f32	s15, s14, s15
 801021c:	ee17 0a90 	vmov	r0, s15
 8010220:	f7f0 f99a 	bl	8000558 <__aeabi_f2d>
 8010224:	2200      	movs	r2, #0
 8010226:	4b1b      	ldr	r3, [pc, #108]	; (8010294 <quatErr2EulerErr+0x1ec>)
 8010228:	4606      	mov	r6, r0
 801022a:	460f      	mov	r7, r1
 801022c:	f7f0 fc68 	bl	8000b00 <__aeabi_dcmple>
 8010230:	b908      	cbnz	r0, 8010236 <quatErr2EulerErr+0x18e>
 8010232:	4f18      	ldr	r7, [pc, #96]	; (8010294 <quatErr2EulerErr+0x1ec>)
 8010234:	2600      	movs	r6, #0
 8010236:	4639      	mov	r1, r7
 8010238:	4630      	mov	r0, r6
 801023a:	f7f0 fcbd 	bl	8000bb8 <__aeabi_d2f>
 801023e:	f7f0 f98b 	bl	8000558 <__aeabi_f2d>
 8010242:	2200      	movs	r2, #0
 8010244:	4b11      	ldr	r3, [pc, #68]	; (801028c <quatErr2EulerErr+0x1e4>)
 8010246:	4606      	mov	r6, r0
 8010248:	460f      	mov	r7, r1
 801024a:	f7f0 fc63 	bl	8000b14 <__aeabi_dcmpge>
 801024e:	b908      	cbnz	r0, 8010254 <quatErr2EulerErr+0x1ac>
 8010250:	4f0e      	ldr	r7, [pc, #56]	; (801028c <quatErr2EulerErr+0x1e4>)
 8010252:	2600      	movs	r6, #0
 8010254:	4630      	mov	r0, r6
 8010256:	4639      	mov	r1, r7
 8010258:	f7f0 fcae 	bl	8000bb8 <__aeabi_d2f>
 801025c:	ecbd 8b04 	vpop	{d8-d9}
 8010260:	60a8      	str	r0, [r5, #8]
 8010262:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010266:	ee17 0a90 	vmov	r0, s15
 801026a:	f00b fa9f 	bl	801b7ac <tanf>
 801026e:	ee07 0a10 	vmov	s14, r0
 8010272:	edd4 7a00 	vldr	s15, [r4]
 8010276:	ee27 7a07 	vmul.f32	s14, s14, s14
 801027a:	eee7 7a08 	vfma.f32	s15, s14, s16
 801027e:	e7c7      	b.n	8010210 <quatErr2EulerErr+0x168>
 8010280:	3c8efa35 	.word	0x3c8efa35
 8010284:	42e52ee1 	.word	0x42e52ee1
 8010288:	40568000 	.word	0x40568000
 801028c:	3ff00000 	.word	0x3ff00000
 8010290:	3a83126f 	.word	0x3a83126f
 8010294:	40668000 	.word	0x40668000
 8010298:	3fbc430e 	.word	0x3fbc430e
 801029c:	42c6ab07 	.word	0x42c6ab07

080102a0 <rt_InitInfAndNaN.isra.3>:
 80102a0:	4b05      	ldr	r3, [pc, #20]	; (80102b8 <rt_InitInfAndNaN.isra.3+0x18>)
 80102a2:	4a06      	ldr	r2, [pc, #24]	; (80102bc <rt_InitInfAndNaN.isra.3+0x1c>)
 80102a4:	f503 6182 	add.w	r1, r3, #1040	; 0x410
 80102a8:	f203 4314 	addw	r3, r3, #1044	; 0x414
 80102ac:	f04f 40ff 	mov.w	r0, #2139095040	; 0x7f800000
 80102b0:	6008      	str	r0, [r1, #0]
 80102b2:	601a      	str	r2, [r3, #0]
 80102b4:	4770      	bx	lr
 80102b6:	bf00      	nop
 80102b8:	200013c8 	.word	0x200013c8
 80102bc:	ff800000 	.word	0xff800000

080102c0 <MEMSloadFromNVM.isra.10>:
 80102c0:	f7fe b883 	b.w	800e3ca <MotionFX_LoadMagCalFromNVM>

080102c4 <MEMSLoadMagCalNVM>:
 80102c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80102c6:	b097      	sub	sp, #92	; 0x5c
 80102c8:	4604      	mov	r4, r0
 80102ca:	2301      	movs	r3, #1
 80102cc:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
 80102d0:	a916      	add	r1, sp, #88	; 0x58
 80102d2:	2300      	movs	r3, #0
 80102d4:	f801 3d54 	strb.w	r3, [r1, #-84]!
 80102d8:	2054      	movs	r0, #84	; 0x54
 80102da:	f7ff fff1 	bl	80102c0 <MEMSloadFromNVM.isra.10>
 80102de:	2801      	cmp	r0, #1
 80102e0:	d101      	bne.n	80102e6 <MEMSLoadMagCalNVM+0x22>
 80102e2:	b017      	add	sp, #92	; 0x5c
 80102e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80102e6:	2300      	movs	r3, #0
 80102e8:	f88d 3004 	strb.w	r3, [sp, #4]
 80102ec:	9d02      	ldr	r5, [sp, #8]
 80102ee:	2d00      	cmp	r5, #0
 80102f0:	d0f7      	beq.n	80102e2 <MEMSLoadMagCalNVM+0x1e>
 80102f2:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d0f3      	beq.n	80102e2 <MEMSLoadMagCalNVM+0x1e>
 80102fa:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d0ef      	beq.n	80102e2 <MEMSLoadMagCalNVM+0x1e>
 8010302:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 8010306:	429a      	cmp	r2, r3
 8010308:	d3eb      	bcc.n	80102e2 <MEMSLoadMagCalNVM+0x1e>
 801030a:	f10d 0c0c 	add.w	ip, sp, #12
 801030e:	f104 066c 	add.w	r6, r4, #108	; 0x6c
 8010312:	f10d 0e3c 	add.w	lr, sp, #60	; 0x3c
 8010316:	4667      	mov	r7, ip
 8010318:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801031a:	6030      	str	r0, [r6, #0]
 801031c:	6071      	str	r1, [r6, #4]
 801031e:	60b2      	str	r2, [r6, #8]
 8010320:	60f3      	str	r3, [r6, #12]
 8010322:	46bc      	mov	ip, r7
 8010324:	3610      	adds	r6, #16
 8010326:	4577      	cmp	r7, lr
 8010328:	d1f5      	bne.n	8010316 <MEMSLoadMagCalNVM+0x52>
 801032a:	6838      	ldr	r0, [r7, #0]
 801032c:	6030      	str	r0, [r6, #0]
 801032e:	61e5      	str	r5, [r4, #28]
 8010330:	ad10      	add	r5, sp, #64	; 0x40
 8010332:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010334:	6560      	str	r0, [r4, #84]	; 0x54
 8010336:	65a1      	str	r1, [r4, #88]	; 0x58
 8010338:	65e2      	str	r2, [r4, #92]	; 0x5c
 801033a:	6623      	str	r3, [r4, #96]	; 0x60
 801033c:	cd03      	ldmia	r5!, {r0, r1}
 801033e:	6660      	str	r0, [r4, #100]	; 0x64
 8010340:	66a1      	str	r1, [r4, #104]	; 0x68
 8010342:	e7ce      	b.n	80102e2 <MEMSLoadMagCalNVM+0x1e>

08010344 <MEMSsaveInNVM.isra.11>:
 8010344:	f7fe b84e 	b.w	800e3e4 <MotionFX_SaveMagCalInNVM>

08010348 <MEMSSaveMagCalNVM>:
 8010348:	b5f0      	push	{r4, r5, r6, r7, lr}
 801034a:	b097      	sub	sp, #92	; 0x5c
 801034c:	4606      	mov	r6, r0
 801034e:	2301      	movs	r3, #1
 8010350:	f88d 3004 	strb.w	r3, [sp, #4]
 8010354:	f100 0458 	add.w	r4, r0, #88	; 0x58
 8010358:	af03      	add	r7, sp, #12
 801035a:	f100 0c88 	add.w	ip, r0, #136	; 0x88
 801035e:	463d      	mov	r5, r7
 8010360:	6820      	ldr	r0, [r4, #0]
 8010362:	6861      	ldr	r1, [r4, #4]
 8010364:	68a2      	ldr	r2, [r4, #8]
 8010366:	68e3      	ldr	r3, [r4, #12]
 8010368:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801036a:	3410      	adds	r4, #16
 801036c:	462f      	mov	r7, r5
 801036e:	4564      	cmp	r4, ip
 8010370:	d1f5      	bne.n	801035e <MEMSSaveMagCalNVM+0x16>
 8010372:	6820      	ldr	r0, [r4, #0]
 8010374:	6028      	str	r0, [r5, #0]
 8010376:	68b3      	ldr	r3, [r6, #8]
 8010378:	9302      	str	r3, [sp, #8]
 801037a:	ac10      	add	r4, sp, #64	; 0x40
 801037c:	f856 0f40 	ldr.w	r0, [r6, #64]!
 8010380:	6871      	ldr	r1, [r6, #4]
 8010382:	68b2      	ldr	r2, [r6, #8]
 8010384:	68f3      	ldr	r3, [r6, #12]
 8010386:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010388:	6930      	ldr	r0, [r6, #16]
 801038a:	6971      	ldr	r1, [r6, #20]
 801038c:	c403      	stmia	r4!, {r0, r1}
 801038e:	a901      	add	r1, sp, #4
 8010390:	2054      	movs	r0, #84	; 0x54
 8010392:	f7ff ffd7 	bl	8010344 <MEMSsaveInNVM.isra.11>
 8010396:	b017      	add	sp, #92	; 0x5c
 8010398:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801039a:	bf00      	nop

0801039c <llEvaluate.constprop.23>:
 801039c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801039e:	b085      	sub	sp, #20
 80103a0:	4606      	mov	r6, r0
 80103a2:	f102 0e10 	add.w	lr, r2, #16
 80103a6:	4607      	mov	r7, r0
 80103a8:	4604      	mov	r4, r0
 80103aa:	466b      	mov	r3, sp
 80103ac:	f852 5b04 	ldr.w	r5, [r2], #4
 80103b0:	601d      	str	r5, [r3, #0]
 80103b2:	46ec      	mov	ip, sp
 80103b4:	463d      	mov	r5, r7
 80103b6:	42a5      	cmp	r5, r4
 80103b8:	edd3 7a00 	vldr	s15, [r3]
 80103bc:	d008      	beq.n	80103d0 <llEvaluate.constprop.23+0x34>
 80103be:	ecbc 7a01 	vldmia	ip!, {s14}
 80103c2:	ecf5 6a01 	vldmia	r5!, {s13}
 80103c6:	eee6 7ac7 	vfms.f32	s15, s13, s14
 80103ca:	edc3 7a00 	vstr	s15, [r3]
 80103ce:	e7f2      	b.n	80103b6 <llEvaluate.constprop.23+0x1a>
 80103d0:	edd5 6a00 	vldr	s13, [r5]
 80103d4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80103d8:	462c      	mov	r4, r5
 80103da:	4572      	cmp	r2, lr
 80103dc:	f107 0710 	add.w	r7, r7, #16
 80103e0:	f104 0414 	add.w	r4, r4, #20
 80103e4:	eca3 7a01 	vstmia	r3!, {s14}
 80103e8:	d1e0      	bne.n	80103ac <llEvaluate.constprop.23+0x10>
 80103ea:	f10d 0c10 	add.w	ip, sp, #16
 80103ee:	f101 0410 	add.w	r4, r1, #16
 80103f2:	2203      	movs	r2, #3
 80103f4:	f85c 5d04 	ldr.w	r5, [ip, #-4]!
 80103f8:	f844 5c04 	str.w	r5, [r4, #-4]
 80103fc:	1c53      	adds	r3, r2, #1
 80103fe:	b25b      	sxtb	r3, r3
 8010400:	ea4f 0e82 	mov.w	lr, r2, lsl #2
 8010404:	b21d      	sxth	r5, r3
 8010406:	eb00 1705 	add.w	r7, r0, r5, lsl #4
 801040a:	2b04      	cmp	r3, #4
 801040c:	4477      	add	r7, lr
 801040e:	eb01 0585 	add.w	r5, r1, r5, lsl #2
 8010412:	ed54 7a01 	vldr	s15, [r4, #-4]
 8010416:	d00a      	beq.n	801042e <llEvaluate.constprop.23+0x92>
 8010418:	edd7 6a00 	vldr	s13, [r7]
 801041c:	ed95 7a00 	vldr	s14, [r5]
 8010420:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8010424:	3301      	adds	r3, #1
 8010426:	b25b      	sxtb	r3, r3
 8010428:	ed44 7a01 	vstr	s15, [r4, #-4]
 801042c:	e7ea      	b.n	8010404 <llEvaluate.constprop.23+0x68>
 801042e:	edd6 6a0f 	vldr	s13, [r6, #60]	; 0x3c
 8010432:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8010436:	3a01      	subs	r2, #1
 8010438:	1c53      	adds	r3, r2, #1
 801043a:	f1a6 0614 	sub.w	r6, r6, #20
 801043e:	ed24 7a01 	vstmdb	r4!, {s14}
 8010442:	d1d7      	bne.n	80103f4 <llEvaluate.constprop.23+0x58>
 8010444:	b005      	add	sp, #20
 8010446:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010448 <iNemo_setOrientation.constprop.40>:
 8010448:	b4f0      	push	{r4, r5, r6, r7}
 801044a:	4973      	ldr	r1, [pc, #460]	; (8010618 <iNemo_setOrientation.constprop.40+0x1d0>)
 801044c:	4b73      	ldr	r3, [pc, #460]	; (801061c <iNemo_setOrientation.constprop.40+0x1d4>)
 801044e:	7808      	ldrb	r0, [r1, #0]
 8010450:	2200      	movs	r2, #0
 8010452:	f1a0 0742 	sub.w	r7, r0, #66	; 0x42
 8010456:	b084      	sub	sp, #16
 8010458:	2f17      	cmp	r7, #23
 801045a:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
 801045e:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
 8010462:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 8010466:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
 801046a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 801046e:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
 8010472:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
 8010476:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
 801047a:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
 801047e:	790a      	ldrb	r2, [r1, #4]
 8010480:	bf98      	it	ls
 8010482:	3020      	addls	r0, #32
 8010484:	f88d 0004 	strb.w	r0, [sp, #4]
 8010488:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 801048c:	2817      	cmp	r0, #23
 801048e:	bf98      	it	ls
 8010490:	3220      	addls	r2, #32
 8010492:	f88d 2008 	strb.w	r2, [sp, #8]
 8010496:	7a0a      	ldrb	r2, [r1, #8]
 8010498:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 801049c:	2817      	cmp	r0, #23
 801049e:	bf98      	it	ls
 80104a0:	3220      	addls	r2, #32
 80104a2:	f88d 200c 	strb.w	r2, [sp, #12]
 80104a6:	784a      	ldrb	r2, [r1, #1]
 80104a8:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 80104ac:	2817      	cmp	r0, #23
 80104ae:	bf98      	it	ls
 80104b0:	3220      	addls	r2, #32
 80104b2:	f88d 2005 	strb.w	r2, [sp, #5]
 80104b6:	794a      	ldrb	r2, [r1, #5]
 80104b8:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 80104bc:	2817      	cmp	r0, #23
 80104be:	bf98      	it	ls
 80104c0:	3220      	addls	r2, #32
 80104c2:	f88d 2009 	strb.w	r2, [sp, #9]
 80104c6:	7a4a      	ldrb	r2, [r1, #9]
 80104c8:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 80104cc:	2817      	cmp	r0, #23
 80104ce:	bf98      	it	ls
 80104d0:	3220      	addls	r2, #32
 80104d2:	f88d 200d 	strb.w	r2, [sp, #13]
 80104d6:	788a      	ldrb	r2, [r1, #2]
 80104d8:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 80104dc:	2817      	cmp	r0, #23
 80104de:	bf98      	it	ls
 80104e0:	3220      	addls	r2, #32
 80104e2:	f88d 2006 	strb.w	r2, [sp, #6]
 80104e6:	798a      	ldrb	r2, [r1, #6]
 80104e8:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 80104ec:	2817      	cmp	r0, #23
 80104ee:	bf98      	it	ls
 80104f0:	3220      	addls	r2, #32
 80104f2:	f88d 200a 	strb.w	r2, [sp, #10]
 80104f6:	7a8a      	ldrb	r2, [r1, #10]
 80104f8:	f1a2 0142 	sub.w	r1, r2, #66	; 0x42
 80104fc:	2917      	cmp	r1, #23
 80104fe:	bf98      	it	ls
 8010500:	3220      	addls	r2, #32
 8010502:	f88d 200e 	strb.w	r2, [sp, #14]
 8010506:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801050a:	3a64      	subs	r2, #100	; 0x64
 801050c:	2a13      	cmp	r2, #19
 801050e:	d80e      	bhi.n	801052e <iNemo_setOrientation.constprop.40+0xe6>
 8010510:	e8df f002 	tbb	[pc, r2]
 8010514:	0d0dba0a 	.word	0x0d0dba0a
 8010518:	0d0d0d0d 	.word	0x0d0d0d0d
 801051c:	0dbe0d0d 	.word	0x0dbe0d0d
 8010520:	c20d0d0d 	.word	0xc20d0d0d
 8010524:	ca0dc60d 	.word	0xca0dc60d
 8010528:	22ff      	movs	r2, #255	; 0xff
 801052a:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
 801052e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8010532:	3a64      	subs	r2, #100	; 0x64
 8010534:	2a13      	cmp	r2, #19
 8010536:	d80e      	bhi.n	8010556 <iNemo_setOrientation.constprop.40+0x10e>
 8010538:	e8df f002 	tbb	[pc, r2]
 801053c:	0d0dba0a 	.word	0x0d0dba0a
 8010540:	0d0d0d0d 	.word	0x0d0d0d0d
 8010544:	0dbe0d0d 	.word	0x0dbe0d0d
 8010548:	c20d0d0d 	.word	0xc20d0d0d
 801054c:	ca0dc60d 	.word	0xca0dc60d
 8010550:	22ff      	movs	r2, #255	; 0xff
 8010552:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
 8010556:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801055a:	3a64      	subs	r2, #100	; 0x64
 801055c:	2a13      	cmp	r2, #19
 801055e:	d80e      	bhi.n	801057e <iNemo_setOrientation.constprop.40+0x136>
 8010560:	e8df f002 	tbb	[pc, r2]
 8010564:	0d0dba0a 	.word	0x0d0dba0a
 8010568:	0d0d0d0d 	.word	0x0d0d0d0d
 801056c:	0dbe0d0d 	.word	0x0dbe0d0d
 8010570:	c20d0d0d 	.word	0xc20d0d0d
 8010574:	ca0dc60d 	.word	0xca0dc60d
 8010578:	22ff      	movs	r2, #255	; 0xff
 801057a:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
 801057e:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8010582:	3a64      	subs	r2, #100	; 0x64
 8010584:	2a13      	cmp	r2, #19
 8010586:	d80e      	bhi.n	80105a6 <iNemo_setOrientation.constprop.40+0x15e>
 8010588:	e8df f002 	tbb	[pc, r2]
 801058c:	0d0dba0a 	.word	0x0d0dba0a
 8010590:	0d0d0d0d 	.word	0x0d0d0d0d
 8010594:	0dbe0d0d 	.word	0x0dbe0d0d
 8010598:	c20d0d0d 	.word	0xc20d0d0d
 801059c:	ca0dc60d 	.word	0xca0dc60d
 80105a0:	22ff      	movs	r2, #255	; 0xff
 80105a2:	f883 2436 	strb.w	r2, [r3, #1078]	; 0x436
 80105a6:	f89d 2009 	ldrb.w	r2, [sp, #9]
 80105aa:	3a64      	subs	r2, #100	; 0x64
 80105ac:	2a13      	cmp	r2, #19
 80105ae:	d80e      	bhi.n	80105ce <iNemo_setOrientation.constprop.40+0x186>
 80105b0:	e8df f002 	tbb	[pc, r2]
 80105b4:	0d0dba0a 	.word	0x0d0dba0a
 80105b8:	0d0d0d0d 	.word	0x0d0d0d0d
 80105bc:	0dbe0d0d 	.word	0x0dbe0d0d
 80105c0:	c20d0d0d 	.word	0xc20d0d0d
 80105c4:	ca0dc60d 	.word	0xca0dc60d
 80105c8:	22ff      	movs	r2, #255	; 0xff
 80105ca:	f883 2437 	strb.w	r2, [r3, #1079]	; 0x437
 80105ce:	f89d 200a 	ldrb.w	r2, [sp, #10]
 80105d2:	3a64      	subs	r2, #100	; 0x64
 80105d4:	2a13      	cmp	r2, #19
 80105d6:	d80e      	bhi.n	80105f6 <iNemo_setOrientation.constprop.40+0x1ae>
 80105d8:	e8df f002 	tbb	[pc, r2]
 80105dc:	0d0dba0a 	.word	0x0d0dba0a
 80105e0:	0d0d0d0d 	.word	0x0d0d0d0d
 80105e4:	0dbe0d0d 	.word	0x0dbe0d0d
 80105e8:	c20d0d0d 	.word	0xc20d0d0d
 80105ec:	ca0dc60d 	.word	0xca0dc60d
 80105f0:	22ff      	movs	r2, #255	; 0xff
 80105f2:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
 80105f6:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80105fa:	3a64      	subs	r2, #100	; 0x64
 80105fc:	2a13      	cmp	r2, #19
 80105fe:	d812      	bhi.n	8010626 <iNemo_setOrientation.constprop.40+0x1de>
 8010600:	e8df f002 	tbb	[pc, r2]
 8010604:	1111ba0e 	.word	0x1111ba0e
 8010608:	11111111 	.word	0x11111111
 801060c:	11be1111 	.word	0x11be1111
 8010610:	c2111111 	.word	0xc2111111
 8010614:	ca11c611 	.word	0xca11c611
 8010618:	20000000 	.word	0x20000000
 801061c:	200013c8 	.word	0x200013c8
 8010620:	22ff      	movs	r2, #255	; 0xff
 8010622:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a
 8010626:	f89d 200d 	ldrb.w	r2, [sp, #13]
 801062a:	3a64      	subs	r2, #100	; 0x64
 801062c:	2a13      	cmp	r2, #19
 801062e:	d80e      	bhi.n	801064e <iNemo_setOrientation.constprop.40+0x206>
 8010630:	e8df f002 	tbb	[pc, r2]
 8010634:	0d0db60a 	.word	0x0d0db60a
 8010638:	0d0d0d0d 	.word	0x0d0d0d0d
 801063c:	0dba0d0d 	.word	0x0dba0d0d
 8010640:	be0d0d0d 	.word	0xbe0d0d0d
 8010644:	c60dc20d 	.word	0xc60dc20d
 8010648:	22ff      	movs	r2, #255	; 0xff
 801064a:	f883 242b 	strb.w	r2, [r3, #1067]	; 0x42b
 801064e:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8010652:	3a64      	subs	r2, #100	; 0x64
 8010654:	2a13      	cmp	r2, #19
 8010656:	d80e      	bhi.n	8010676 <iNemo_setOrientation.constprop.40+0x22e>
 8010658:	e8df f002 	tbb	[pc, r2]
 801065c:	0d0db60a 	.word	0x0d0db60a
 8010660:	0d0d0d0d 	.word	0x0d0d0d0d
 8010664:	0dbc0d0d 	.word	0x0dbc0d0d
 8010668:	c20d0d0d 	.word	0xc20d0d0d
 801066c:	100dc80d 	.word	0x100dc80d
 8010670:	22ff      	movs	r2, #255	; 0xff
 8010672:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
 8010676:	b004      	add	sp, #16
 8010678:	bcf0      	pop	{r4, r5, r6, r7}
 801067a:	4770      	bx	lr
 801067c:	22ff      	movs	r2, #255	; 0xff
 801067e:	f883 2426 	strb.w	r2, [r3, #1062]	; 0x426
 8010682:	b004      	add	sp, #16
 8010684:	bcf0      	pop	{r4, r5, r6, r7}
 8010686:	4770      	bx	lr
 8010688:	2201      	movs	r2, #1
 801068a:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
 801068e:	e74e      	b.n	801052e <iNemo_setOrientation.constprop.40+0xe6>
 8010690:	2201      	movs	r2, #1
 8010692:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
 8010696:	e74a      	b.n	801052e <iNemo_setOrientation.constprop.40+0xe6>
 8010698:	22ff      	movs	r2, #255	; 0xff
 801069a:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
 801069e:	e746      	b.n	801052e <iNemo_setOrientation.constprop.40+0xe6>
 80106a0:	2201      	movs	r2, #1
 80106a2:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
 80106a6:	e742      	b.n	801052e <iNemo_setOrientation.constprop.40+0xe6>
 80106a8:	22ff      	movs	r2, #255	; 0xff
 80106aa:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
 80106ae:	e73e      	b.n	801052e <iNemo_setOrientation.constprop.40+0xe6>
 80106b0:	2201      	movs	r2, #1
 80106b2:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
 80106b6:	e74e      	b.n	8010556 <iNemo_setOrientation.constprop.40+0x10e>
 80106b8:	2201      	movs	r2, #1
 80106ba:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 80106be:	e74a      	b.n	8010556 <iNemo_setOrientation.constprop.40+0x10e>
 80106c0:	22ff      	movs	r2, #255	; 0xff
 80106c2:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 80106c6:	e746      	b.n	8010556 <iNemo_setOrientation.constprop.40+0x10e>
 80106c8:	2201      	movs	r2, #1
 80106ca:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
 80106ce:	e742      	b.n	8010556 <iNemo_setOrientation.constprop.40+0x10e>
 80106d0:	22ff      	movs	r2, #255	; 0xff
 80106d2:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
 80106d6:	e73e      	b.n	8010556 <iNemo_setOrientation.constprop.40+0x10e>
 80106d8:	2201      	movs	r2, #1
 80106da:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
 80106de:	e74e      	b.n	801057e <iNemo_setOrientation.constprop.40+0x136>
 80106e0:	2201      	movs	r2, #1
 80106e2:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 80106e6:	e74a      	b.n	801057e <iNemo_setOrientation.constprop.40+0x136>
 80106e8:	22ff      	movs	r2, #255	; 0xff
 80106ea:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 80106ee:	e746      	b.n	801057e <iNemo_setOrientation.constprop.40+0x136>
 80106f0:	2201      	movs	r2, #1
 80106f2:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
 80106f6:	e742      	b.n	801057e <iNemo_setOrientation.constprop.40+0x136>
 80106f8:	22ff      	movs	r2, #255	; 0xff
 80106fa:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
 80106fe:	e73e      	b.n	801057e <iNemo_setOrientation.constprop.40+0x136>
 8010700:	2201      	movs	r2, #1
 8010702:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
 8010706:	e74e      	b.n	80105a6 <iNemo_setOrientation.constprop.40+0x15e>
 8010708:	2201      	movs	r2, #1
 801070a:	f883 2433 	strb.w	r2, [r3, #1075]	; 0x433
 801070e:	e74a      	b.n	80105a6 <iNemo_setOrientation.constprop.40+0x15e>
 8010710:	22ff      	movs	r2, #255	; 0xff
 8010712:	f883 2433 	strb.w	r2, [r3, #1075]	; 0x433
 8010716:	e746      	b.n	80105a6 <iNemo_setOrientation.constprop.40+0x15e>
 8010718:	2201      	movs	r2, #1
 801071a:	f883 2436 	strb.w	r2, [r3, #1078]	; 0x436
 801071e:	e742      	b.n	80105a6 <iNemo_setOrientation.constprop.40+0x15e>
 8010720:	22ff      	movs	r2, #255	; 0xff
 8010722:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
 8010726:	e73e      	b.n	80105a6 <iNemo_setOrientation.constprop.40+0x15e>
 8010728:	2201      	movs	r2, #1
 801072a:	f883 2431 	strb.w	r2, [r3, #1073]	; 0x431
 801072e:	e74e      	b.n	80105ce <iNemo_setOrientation.constprop.40+0x186>
 8010730:	2201      	movs	r2, #1
 8010732:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
 8010736:	e74a      	b.n	80105ce <iNemo_setOrientation.constprop.40+0x186>
 8010738:	22ff      	movs	r2, #255	; 0xff
 801073a:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
 801073e:	e746      	b.n	80105ce <iNemo_setOrientation.constprop.40+0x186>
 8010740:	2201      	movs	r2, #1
 8010742:	f883 2437 	strb.w	r2, [r3, #1079]	; 0x437
 8010746:	e742      	b.n	80105ce <iNemo_setOrientation.constprop.40+0x186>
 8010748:	22ff      	movs	r2, #255	; 0xff
 801074a:	f883 2431 	strb.w	r2, [r3, #1073]	; 0x431
 801074e:	e73e      	b.n	80105ce <iNemo_setOrientation.constprop.40+0x186>
 8010750:	2201      	movs	r2, #1
 8010752:	f883 2432 	strb.w	r2, [r3, #1074]	; 0x432
 8010756:	e74e      	b.n	80105f6 <iNemo_setOrientation.constprop.40+0x1ae>
 8010758:	2201      	movs	r2, #1
 801075a:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435
 801075e:	e74a      	b.n	80105f6 <iNemo_setOrientation.constprop.40+0x1ae>
 8010760:	22ff      	movs	r2, #255	; 0xff
 8010762:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435
 8010766:	e746      	b.n	80105f6 <iNemo_setOrientation.constprop.40+0x1ae>
 8010768:	2201      	movs	r2, #1
 801076a:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
 801076e:	e742      	b.n	80105f6 <iNemo_setOrientation.constprop.40+0x1ae>
 8010770:	22ff      	movs	r2, #255	; 0xff
 8010772:	f883 2432 	strb.w	r2, [r3, #1074]	; 0x432
 8010776:	e73e      	b.n	80105f6 <iNemo_setOrientation.constprop.40+0x1ae>
 8010778:	2201      	movs	r2, #1
 801077a:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
 801077e:	e752      	b.n	8010626 <iNemo_setOrientation.constprop.40+0x1de>
 8010780:	2201      	movs	r2, #1
 8010782:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
 8010786:	e74e      	b.n	8010626 <iNemo_setOrientation.constprop.40+0x1de>
 8010788:	22ff      	movs	r2, #255	; 0xff
 801078a:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
 801078e:	e74a      	b.n	8010626 <iNemo_setOrientation.constprop.40+0x1de>
 8010790:	2201      	movs	r2, #1
 8010792:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a
 8010796:	e746      	b.n	8010626 <iNemo_setOrientation.constprop.40+0x1de>
 8010798:	22ff      	movs	r2, #255	; 0xff
 801079a:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
 801079e:	e742      	b.n	8010626 <iNemo_setOrientation.constprop.40+0x1de>
 80107a0:	2201      	movs	r2, #1
 80107a2:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
 80107a6:	e752      	b.n	801064e <iNemo_setOrientation.constprop.40+0x206>
 80107a8:	2201      	movs	r2, #1
 80107aa:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
 80107ae:	e74e      	b.n	801064e <iNemo_setOrientation.constprop.40+0x206>
 80107b0:	22ff      	movs	r2, #255	; 0xff
 80107b2:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
 80107b6:	e74a      	b.n	801064e <iNemo_setOrientation.constprop.40+0x206>
 80107b8:	2201      	movs	r2, #1
 80107ba:	f883 242b 	strb.w	r2, [r3, #1067]	; 0x42b
 80107be:	e746      	b.n	801064e <iNemo_setOrientation.constprop.40+0x206>
 80107c0:	22ff      	movs	r2, #255	; 0xff
 80107c2:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
 80107c6:	e742      	b.n	801064e <iNemo_setOrientation.constprop.40+0x206>
 80107c8:	2201      	movs	r2, #1
 80107ca:	f883 2426 	strb.w	r2, [r3, #1062]	; 0x426
 80107ce:	b004      	add	sp, #16
 80107d0:	bcf0      	pop	{r4, r5, r6, r7}
 80107d2:	4770      	bx	lr
 80107d4:	2201      	movs	r2, #1
 80107d6:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
 80107da:	b004      	add	sp, #16
 80107dc:	bcf0      	pop	{r4, r5, r6, r7}
 80107de:	4770      	bx	lr
 80107e0:	22ff      	movs	r2, #255	; 0xff
 80107e2:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
 80107e6:	b004      	add	sp, #16
 80107e8:	bcf0      	pop	{r4, r5, r6, r7}
 80107ea:	4770      	bx	lr
 80107ec:	2201      	movs	r2, #1
 80107ee:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
 80107f2:	b004      	add	sp, #16
 80107f4:	bcf0      	pop	{r4, r5, r6, r7}
 80107f6:	4770      	bx	lr

080107f8 <iNemo_setOrientation_6X.constprop.41>:
 80107f8:	b4f0      	push	{r4, r5, r6, r7}
 80107fa:	4973      	ldr	r1, [pc, #460]	; (80109c8 <iNemo_setOrientation_6X.constprop.41+0x1d0>)
 80107fc:	4b73      	ldr	r3, [pc, #460]	; (80109cc <iNemo_setOrientation_6X.constprop.41+0x1d4>)
 80107fe:	7808      	ldrb	r0, [r1, #0]
 8010800:	2200      	movs	r2, #0
 8010802:	f1a0 0742 	sub.w	r7, r0, #66	; 0x42
 8010806:	b084      	sub	sp, #16
 8010808:	2f17      	cmp	r7, #23
 801080a:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
 801080e:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
 8010812:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
 8010816:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
 801081a:	f8c3 2454 	str.w	r2, [r3, #1108]	; 0x454
 801081e:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
 8010822:	f883 2450 	strb.w	r2, [r3, #1104]	; 0x450
 8010826:	f8c3 2458 	str.w	r2, [r3, #1112]	; 0x458
 801082a:	f883 245c 	strb.w	r2, [r3, #1116]	; 0x45c
 801082e:	790a      	ldrb	r2, [r1, #4]
 8010830:	bf98      	it	ls
 8010832:	3020      	addls	r0, #32
 8010834:	f88d 0004 	strb.w	r0, [sp, #4]
 8010838:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 801083c:	2817      	cmp	r0, #23
 801083e:	bf98      	it	ls
 8010840:	3220      	addls	r2, #32
 8010842:	f88d 2008 	strb.w	r2, [sp, #8]
 8010846:	7a0a      	ldrb	r2, [r1, #8]
 8010848:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 801084c:	2817      	cmp	r0, #23
 801084e:	bf98      	it	ls
 8010850:	3220      	addls	r2, #32
 8010852:	f88d 200c 	strb.w	r2, [sp, #12]
 8010856:	784a      	ldrb	r2, [r1, #1]
 8010858:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 801085c:	2817      	cmp	r0, #23
 801085e:	bf98      	it	ls
 8010860:	3220      	addls	r2, #32
 8010862:	f88d 2005 	strb.w	r2, [sp, #5]
 8010866:	794a      	ldrb	r2, [r1, #5]
 8010868:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 801086c:	2817      	cmp	r0, #23
 801086e:	bf98      	it	ls
 8010870:	3220      	addls	r2, #32
 8010872:	f88d 2009 	strb.w	r2, [sp, #9]
 8010876:	7a4a      	ldrb	r2, [r1, #9]
 8010878:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 801087c:	2817      	cmp	r0, #23
 801087e:	bf98      	it	ls
 8010880:	3220      	addls	r2, #32
 8010882:	f88d 200d 	strb.w	r2, [sp, #13]
 8010886:	788a      	ldrb	r2, [r1, #2]
 8010888:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 801088c:	2817      	cmp	r0, #23
 801088e:	bf98      	it	ls
 8010890:	3220      	addls	r2, #32
 8010892:	f88d 2006 	strb.w	r2, [sp, #6]
 8010896:	798a      	ldrb	r2, [r1, #6]
 8010898:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 801089c:	2817      	cmp	r0, #23
 801089e:	bf98      	it	ls
 80108a0:	3220      	addls	r2, #32
 80108a2:	f88d 200a 	strb.w	r2, [sp, #10]
 80108a6:	7a8a      	ldrb	r2, [r1, #10]
 80108a8:	f1a2 0142 	sub.w	r1, r2, #66	; 0x42
 80108ac:	2917      	cmp	r1, #23
 80108ae:	bf98      	it	ls
 80108b0:	3220      	addls	r2, #32
 80108b2:	f88d 200e 	strb.w	r2, [sp, #14]
 80108b6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80108ba:	3a64      	subs	r2, #100	; 0x64
 80108bc:	2a13      	cmp	r2, #19
 80108be:	d80e      	bhi.n	80108de <iNemo_setOrientation_6X.constprop.41+0xe6>
 80108c0:	e8df f002 	tbb	[pc, r2]
 80108c4:	0d0dba0a 	.word	0x0d0dba0a
 80108c8:	0d0d0d0d 	.word	0x0d0d0d0d
 80108cc:	0dbe0d0d 	.word	0x0dbe0d0d
 80108d0:	c20d0d0d 	.word	0xc20d0d0d
 80108d4:	ca0dc60d 	.word	0xca0dc60d
 80108d8:	22ff      	movs	r2, #255	; 0xff
 80108da:	f883 2442 	strb.w	r2, [r3, #1090]	; 0x442
 80108de:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80108e2:	3a64      	subs	r2, #100	; 0x64
 80108e4:	2a13      	cmp	r2, #19
 80108e6:	d80e      	bhi.n	8010906 <iNemo_setOrientation_6X.constprop.41+0x10e>
 80108e8:	e8df f002 	tbb	[pc, r2]
 80108ec:	0d0dba0a 	.word	0x0d0dba0a
 80108f0:	0d0d0d0d 	.word	0x0d0d0d0d
 80108f4:	0dbe0d0d 	.word	0x0dbe0d0d
 80108f8:	c20d0d0d 	.word	0xc20d0d0d
 80108fc:	ca0dc60d 	.word	0xca0dc60d
 8010900:	22ff      	movs	r2, #255	; 0xff
 8010902:	f883 2443 	strb.w	r2, [r3, #1091]	; 0x443
 8010906:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801090a:	3a64      	subs	r2, #100	; 0x64
 801090c:	2a13      	cmp	r2, #19
 801090e:	d80e      	bhi.n	801092e <iNemo_setOrientation_6X.constprop.41+0x136>
 8010910:	e8df f002 	tbb	[pc, r2]
 8010914:	0d0dba0a 	.word	0x0d0dba0a
 8010918:	0d0d0d0d 	.word	0x0d0d0d0d
 801091c:	0dbe0d0d 	.word	0x0dbe0d0d
 8010920:	c20d0d0d 	.word	0xc20d0d0d
 8010924:	ca0dc60d 	.word	0xca0dc60d
 8010928:	22ff      	movs	r2, #255	; 0xff
 801092a:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
 801092e:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8010932:	3a64      	subs	r2, #100	; 0x64
 8010934:	2a13      	cmp	r2, #19
 8010936:	d80e      	bhi.n	8010956 <iNemo_setOrientation_6X.constprop.41+0x15e>
 8010938:	e8df f002 	tbb	[pc, r2]
 801093c:	0d0dba0a 	.word	0x0d0dba0a
 8010940:	0d0d0d0d 	.word	0x0d0d0d0d
 8010944:	0dbe0d0d 	.word	0x0dbe0d0d
 8010948:	c20d0d0d 	.word	0xc20d0d0d
 801094c:	ca0dc60d 	.word	0xca0dc60d
 8010950:	22ff      	movs	r2, #255	; 0xff
 8010952:	f883 245a 	strb.w	r2, [r3, #1114]	; 0x45a
 8010956:	f89d 2009 	ldrb.w	r2, [sp, #9]
 801095a:	3a64      	subs	r2, #100	; 0x64
 801095c:	2a13      	cmp	r2, #19
 801095e:	d80e      	bhi.n	801097e <iNemo_setOrientation_6X.constprop.41+0x186>
 8010960:	e8df f002 	tbb	[pc, r2]
 8010964:	0d0dba0a 	.word	0x0d0dba0a
 8010968:	0d0d0d0d 	.word	0x0d0d0d0d
 801096c:	0dbe0d0d 	.word	0x0dbe0d0d
 8010970:	c20d0d0d 	.word	0xc20d0d0d
 8010974:	ca0dc60d 	.word	0xca0dc60d
 8010978:	22ff      	movs	r2, #255	; 0xff
 801097a:	f883 245b 	strb.w	r2, [r3, #1115]	; 0x45b
 801097e:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8010982:	3a64      	subs	r2, #100	; 0x64
 8010984:	2a13      	cmp	r2, #19
 8010986:	d80e      	bhi.n	80109a6 <iNemo_setOrientation_6X.constprop.41+0x1ae>
 8010988:	e8df f002 	tbb	[pc, r2]
 801098c:	0d0dba0a 	.word	0x0d0dba0a
 8010990:	0d0d0d0d 	.word	0x0d0d0d0d
 8010994:	0dbe0d0d 	.word	0x0dbe0d0d
 8010998:	c20d0d0d 	.word	0xc20d0d0d
 801099c:	ca0dc60d 	.word	0xca0dc60d
 80109a0:	22ff      	movs	r2, #255	; 0xff
 80109a2:	f883 245c 	strb.w	r2, [r3, #1116]	; 0x45c
 80109a6:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80109aa:	3a64      	subs	r2, #100	; 0x64
 80109ac:	2a13      	cmp	r2, #19
 80109ae:	d812      	bhi.n	80109d6 <iNemo_setOrientation_6X.constprop.41+0x1de>
 80109b0:	e8df f002 	tbb	[pc, r2]
 80109b4:	1111ba0e 	.word	0x1111ba0e
 80109b8:	11111111 	.word	0x11111111
 80109bc:	11be1111 	.word	0x11be1111
 80109c0:	c2111111 	.word	0xc2111111
 80109c4:	ca11c611 	.word	0xca11c611
 80109c8:	20000000 	.word	0x20000000
 80109cc:	200013c8 	.word	0x200013c8
 80109d0:	22ff      	movs	r2, #255	; 0xff
 80109d2:	f883 244e 	strb.w	r2, [r3, #1102]	; 0x44e
 80109d6:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80109da:	3a64      	subs	r2, #100	; 0x64
 80109dc:	2a13      	cmp	r2, #19
 80109de:	d80e      	bhi.n	80109fe <iNemo_setOrientation_6X.constprop.41+0x206>
 80109e0:	e8df f002 	tbb	[pc, r2]
 80109e4:	0d0db60a 	.word	0x0d0db60a
 80109e8:	0d0d0d0d 	.word	0x0d0d0d0d
 80109ec:	0dba0d0d 	.word	0x0dba0d0d
 80109f0:	be0d0d0d 	.word	0xbe0d0d0d
 80109f4:	c60dc20d 	.word	0xc60dc20d
 80109f8:	22ff      	movs	r2, #255	; 0xff
 80109fa:	f883 244f 	strb.w	r2, [r3, #1103]	; 0x44f
 80109fe:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8010a02:	3a64      	subs	r2, #100	; 0x64
 8010a04:	2a13      	cmp	r2, #19
 8010a06:	d80e      	bhi.n	8010a26 <iNemo_setOrientation_6X.constprop.41+0x22e>
 8010a08:	e8df f002 	tbb	[pc, r2]
 8010a0c:	0d0db60a 	.word	0x0d0db60a
 8010a10:	0d0d0d0d 	.word	0x0d0d0d0d
 8010a14:	0dbc0d0d 	.word	0x0dbc0d0d
 8010a18:	c20d0d0d 	.word	0xc20d0d0d
 8010a1c:	100dc80d 	.word	0x100dc80d
 8010a20:	22ff      	movs	r2, #255	; 0xff
 8010a22:	f883 2450 	strb.w	r2, [r3, #1104]	; 0x450
 8010a26:	b004      	add	sp, #16
 8010a28:	bcf0      	pop	{r4, r5, r6, r7}
 8010a2a:	4770      	bx	lr
 8010a2c:	22ff      	movs	r2, #255	; 0xff
 8010a2e:	f883 244a 	strb.w	r2, [r3, #1098]	; 0x44a
 8010a32:	b004      	add	sp, #16
 8010a34:	bcf0      	pop	{r4, r5, r6, r7}
 8010a36:	4770      	bx	lr
 8010a38:	2201      	movs	r2, #1
 8010a3a:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
 8010a3e:	e74e      	b.n	80108de <iNemo_setOrientation_6X.constprop.41+0xe6>
 8010a40:	2201      	movs	r2, #1
 8010a42:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
 8010a46:	e74a      	b.n	80108de <iNemo_setOrientation_6X.constprop.41+0xe6>
 8010a48:	22ff      	movs	r2, #255	; 0xff
 8010a4a:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
 8010a4e:	e746      	b.n	80108de <iNemo_setOrientation_6X.constprop.41+0xe6>
 8010a50:	2201      	movs	r2, #1
 8010a52:	f883 2442 	strb.w	r2, [r3, #1090]	; 0x442
 8010a56:	e742      	b.n	80108de <iNemo_setOrientation_6X.constprop.41+0xe6>
 8010a58:	22ff      	movs	r2, #255	; 0xff
 8010a5a:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
 8010a5e:	e73e      	b.n	80108de <iNemo_setOrientation_6X.constprop.41+0xe6>
 8010a60:	2201      	movs	r2, #1
 8010a62:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
 8010a66:	e74e      	b.n	8010906 <iNemo_setOrientation_6X.constprop.41+0x10e>
 8010a68:	2201      	movs	r2, #1
 8010a6a:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
 8010a6e:	e74a      	b.n	8010906 <iNemo_setOrientation_6X.constprop.41+0x10e>
 8010a70:	22ff      	movs	r2, #255	; 0xff
 8010a72:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
 8010a76:	e746      	b.n	8010906 <iNemo_setOrientation_6X.constprop.41+0x10e>
 8010a78:	2201      	movs	r2, #1
 8010a7a:	f883 2443 	strb.w	r2, [r3, #1091]	; 0x443
 8010a7e:	e742      	b.n	8010906 <iNemo_setOrientation_6X.constprop.41+0x10e>
 8010a80:	22ff      	movs	r2, #255	; 0xff
 8010a82:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
 8010a86:	e73e      	b.n	8010906 <iNemo_setOrientation_6X.constprop.41+0x10e>
 8010a88:	2201      	movs	r2, #1
 8010a8a:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
 8010a8e:	e74e      	b.n	801092e <iNemo_setOrientation_6X.constprop.41+0x136>
 8010a90:	2201      	movs	r2, #1
 8010a92:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
 8010a96:	e74a      	b.n	801092e <iNemo_setOrientation_6X.constprop.41+0x136>
 8010a98:	22ff      	movs	r2, #255	; 0xff
 8010a9a:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
 8010a9e:	e746      	b.n	801092e <iNemo_setOrientation_6X.constprop.41+0x136>
 8010aa0:	2201      	movs	r2, #1
 8010aa2:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
 8010aa6:	e742      	b.n	801092e <iNemo_setOrientation_6X.constprop.41+0x136>
 8010aa8:	22ff      	movs	r2, #255	; 0xff
 8010aaa:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
 8010aae:	e73e      	b.n	801092e <iNemo_setOrientation_6X.constprop.41+0x136>
 8010ab0:	2201      	movs	r2, #1
 8010ab2:	f883 2454 	strb.w	r2, [r3, #1108]	; 0x454
 8010ab6:	e74e      	b.n	8010956 <iNemo_setOrientation_6X.constprop.41+0x15e>
 8010ab8:	2201      	movs	r2, #1
 8010aba:	f883 2457 	strb.w	r2, [r3, #1111]	; 0x457
 8010abe:	e74a      	b.n	8010956 <iNemo_setOrientation_6X.constprop.41+0x15e>
 8010ac0:	22ff      	movs	r2, #255	; 0xff
 8010ac2:	f883 2457 	strb.w	r2, [r3, #1111]	; 0x457
 8010ac6:	e746      	b.n	8010956 <iNemo_setOrientation_6X.constprop.41+0x15e>
 8010ac8:	2201      	movs	r2, #1
 8010aca:	f883 245a 	strb.w	r2, [r3, #1114]	; 0x45a
 8010ace:	e742      	b.n	8010956 <iNemo_setOrientation_6X.constprop.41+0x15e>
 8010ad0:	22ff      	movs	r2, #255	; 0xff
 8010ad2:	f883 2454 	strb.w	r2, [r3, #1108]	; 0x454
 8010ad6:	e73e      	b.n	8010956 <iNemo_setOrientation_6X.constprop.41+0x15e>
 8010ad8:	2201      	movs	r2, #1
 8010ada:	f883 2455 	strb.w	r2, [r3, #1109]	; 0x455
 8010ade:	e74e      	b.n	801097e <iNemo_setOrientation_6X.constprop.41+0x186>
 8010ae0:	2201      	movs	r2, #1
 8010ae2:	f883 2458 	strb.w	r2, [r3, #1112]	; 0x458
 8010ae6:	e74a      	b.n	801097e <iNemo_setOrientation_6X.constprop.41+0x186>
 8010ae8:	22ff      	movs	r2, #255	; 0xff
 8010aea:	f883 2458 	strb.w	r2, [r3, #1112]	; 0x458
 8010aee:	e746      	b.n	801097e <iNemo_setOrientation_6X.constprop.41+0x186>
 8010af0:	2201      	movs	r2, #1
 8010af2:	f883 245b 	strb.w	r2, [r3, #1115]	; 0x45b
 8010af6:	e742      	b.n	801097e <iNemo_setOrientation_6X.constprop.41+0x186>
 8010af8:	22ff      	movs	r2, #255	; 0xff
 8010afa:	f883 2455 	strb.w	r2, [r3, #1109]	; 0x455
 8010afe:	e73e      	b.n	801097e <iNemo_setOrientation_6X.constprop.41+0x186>
 8010b00:	2201      	movs	r2, #1
 8010b02:	f883 2456 	strb.w	r2, [r3, #1110]	; 0x456
 8010b06:	e74e      	b.n	80109a6 <iNemo_setOrientation_6X.constprop.41+0x1ae>
 8010b08:	2201      	movs	r2, #1
 8010b0a:	f883 2459 	strb.w	r2, [r3, #1113]	; 0x459
 8010b0e:	e74a      	b.n	80109a6 <iNemo_setOrientation_6X.constprop.41+0x1ae>
 8010b10:	22ff      	movs	r2, #255	; 0xff
 8010b12:	f883 2459 	strb.w	r2, [r3, #1113]	; 0x459
 8010b16:	e746      	b.n	80109a6 <iNemo_setOrientation_6X.constprop.41+0x1ae>
 8010b18:	2201      	movs	r2, #1
 8010b1a:	f883 245c 	strb.w	r2, [r3, #1116]	; 0x45c
 8010b1e:	e742      	b.n	80109a6 <iNemo_setOrientation_6X.constprop.41+0x1ae>
 8010b20:	22ff      	movs	r2, #255	; 0xff
 8010b22:	f883 2456 	strb.w	r2, [r3, #1110]	; 0x456
 8010b26:	e73e      	b.n	80109a6 <iNemo_setOrientation_6X.constprop.41+0x1ae>
 8010b28:	2201      	movs	r2, #1
 8010b2a:	f883 2448 	strb.w	r2, [r3, #1096]	; 0x448
 8010b2e:	e752      	b.n	80109d6 <iNemo_setOrientation_6X.constprop.41+0x1de>
 8010b30:	2201      	movs	r2, #1
 8010b32:	f883 244b 	strb.w	r2, [r3, #1099]	; 0x44b
 8010b36:	e74e      	b.n	80109d6 <iNemo_setOrientation_6X.constprop.41+0x1de>
 8010b38:	22ff      	movs	r2, #255	; 0xff
 8010b3a:	f883 244b 	strb.w	r2, [r3, #1099]	; 0x44b
 8010b3e:	e74a      	b.n	80109d6 <iNemo_setOrientation_6X.constprop.41+0x1de>
 8010b40:	2201      	movs	r2, #1
 8010b42:	f883 244e 	strb.w	r2, [r3, #1102]	; 0x44e
 8010b46:	e746      	b.n	80109d6 <iNemo_setOrientation_6X.constprop.41+0x1de>
 8010b48:	22ff      	movs	r2, #255	; 0xff
 8010b4a:	f883 2448 	strb.w	r2, [r3, #1096]	; 0x448
 8010b4e:	e742      	b.n	80109d6 <iNemo_setOrientation_6X.constprop.41+0x1de>
 8010b50:	2201      	movs	r2, #1
 8010b52:	f883 2449 	strb.w	r2, [r3, #1097]	; 0x449
 8010b56:	e752      	b.n	80109fe <iNemo_setOrientation_6X.constprop.41+0x206>
 8010b58:	2201      	movs	r2, #1
 8010b5a:	f883 244c 	strb.w	r2, [r3, #1100]	; 0x44c
 8010b5e:	e74e      	b.n	80109fe <iNemo_setOrientation_6X.constprop.41+0x206>
 8010b60:	22ff      	movs	r2, #255	; 0xff
 8010b62:	f883 244c 	strb.w	r2, [r3, #1100]	; 0x44c
 8010b66:	e74a      	b.n	80109fe <iNemo_setOrientation_6X.constprop.41+0x206>
 8010b68:	2201      	movs	r2, #1
 8010b6a:	f883 244f 	strb.w	r2, [r3, #1103]	; 0x44f
 8010b6e:	e746      	b.n	80109fe <iNemo_setOrientation_6X.constprop.41+0x206>
 8010b70:	22ff      	movs	r2, #255	; 0xff
 8010b72:	f883 2449 	strb.w	r2, [r3, #1097]	; 0x449
 8010b76:	e742      	b.n	80109fe <iNemo_setOrientation_6X.constprop.41+0x206>
 8010b78:	2201      	movs	r2, #1
 8010b7a:	f883 244a 	strb.w	r2, [r3, #1098]	; 0x44a
 8010b7e:	b004      	add	sp, #16
 8010b80:	bcf0      	pop	{r4, r5, r6, r7}
 8010b82:	4770      	bx	lr
 8010b84:	2201      	movs	r2, #1
 8010b86:	f883 244d 	strb.w	r2, [r3, #1101]	; 0x44d
 8010b8a:	b004      	add	sp, #16
 8010b8c:	bcf0      	pop	{r4, r5, r6, r7}
 8010b8e:	4770      	bx	lr
 8010b90:	22ff      	movs	r2, #255	; 0xff
 8010b92:	f883 244d 	strb.w	r2, [r3, #1101]	; 0x44d
 8010b96:	b004      	add	sp, #16
 8010b98:	bcf0      	pop	{r4, r5, r6, r7}
 8010b9a:	4770      	bx	lr
 8010b9c:	2201      	movs	r2, #1
 8010b9e:	f883 2450 	strb.w	r2, [r3, #1104]	; 0x450
 8010ba2:	b004      	add	sp, #16
 8010ba4:	bcf0      	pop	{r4, r5, r6, r7}
 8010ba6:	4770      	bx	lr

08010ba8 <getMagStats.constprop.26>:
 8010ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bac:	2400      	movs	r4, #0
 8010bae:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 8010d88 <getMagStats.constprop.26+0x1e0>
 8010bb2:	601c      	str	r4, [r3, #0]
 8010bb4:	6014      	str	r4, [r2, #0]
 8010bb6:	f898 e500 	ldrb.w	lr, [r8, #1280]	; 0x500
 8010bba:	f898 c501 	ldrb.w	ip, [r8, #1281]	; 0x501
 8010bbe:	f998 4502 	ldrsb.w	r4, [r8, #1282]	; 0x502
 8010bc2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8010bc6:	45e6      	cmp	lr, ip
 8010bc8:	b083      	sub	sp, #12
 8010bca:	f104 0401 	add.w	r4, r4, #1
 8010bce:	ee87 4a80 	vdiv.f32	s8, s15, s0
 8010bd2:	f000 80c7 	beq.w	8010d64 <getMagStats.constprop.26+0x1bc>
 8010bd6:	eba4 040e 	sub.w	r4, r4, lr
 8010bda:	fb94 f9fc 	sdiv	r9, r4, ip
 8010bde:	fb0c 4419 	mls	r4, ip, r9, r4
 8010be2:	2c00      	cmp	r4, #0
 8010be4:	fa0f f984 	sxth.w	r9, r4
 8010be8:	bfbc      	itt	lt
 8010bea:	4464      	addlt	r4, ip
 8010bec:	fa0f f984 	sxthlt.w	r9, r4
 8010bf0:	eddf 3a62 	vldr	s7, [pc, #392]	; 8010d7c <getMagStats.constprop.26+0x1d4>
 8010bf4:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 8010bf8:	ee64 3a23 	vmul.f32	s7, s8, s7
 8010bfc:	ee24 4a27 	vmul.f32	s8, s8, s15
 8010c00:	f1be 0f00 	cmp.w	lr, #0
 8010c04:	f000 80b5 	beq.w	8010d72 <getMagStats.constprop.26+0x1ca>
 8010c08:	2700      	movs	r7, #0
 8010c0a:	f8b0 b000 	ldrh.w	fp, [r0]
 8010c0e:	f8b0 a002 	ldrh.w	sl, [r0, #2]
 8010c12:	8880      	ldrh	r0, [r0, #4]
 8010c14:	9001      	str	r0, [sp, #4]
 8010c16:	eddf 5a5a 	vldr	s11, [pc, #360]	; 8010d80 <getMagStats.constprop.26+0x1d8>
 8010c1a:	9700      	str	r7, [sp, #0]
 8010c1c:	e001      	b.n	8010c22 <getMagStats.constprop.26+0x7a>
 8010c1e:	edd2 5a00 	vldr	s11, [r2]
 8010c22:	9801      	ldr	r0, [sp, #4]
 8010c24:	edd1 4a00 	vldr	s9, [r1]
 8010c28:	ed91 6a04 	vldr	s12, [r1, #16]
 8010c2c:	edd1 6a08 	vldr	s13, [r1, #32]
 8010c30:	eb09 0507 	add.w	r5, r9, r7
 8010c34:	fb95 f4fc 	sdiv	r4, r5, ip
 8010c38:	fb0c 5414 	mls	r4, ip, r4, r5
 8010c3c:	b2e4      	uxtb	r4, r4
 8010c3e:	3404      	adds	r4, #4
 8010c40:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
 8010c44:	3701      	adds	r7, #1
 8010c46:	f8b4 6502 	ldrh.w	r6, [r4, #1282]	; 0x502
 8010c4a:	f8b4 5504 	ldrh.w	r5, [r4, #1284]	; 0x504
 8010c4e:	f8b4 4506 	ldrh.w	r4, [r4, #1286]	; 0x506
 8010c52:	eba6 060b 	sub.w	r6, r6, fp
 8010c56:	b236      	sxth	r6, r6
 8010c58:	ee07 6a90 	vmov	s15, r6
 8010c5c:	eba5 050a 	sub.w	r5, r5, sl
 8010c60:	b22d      	sxth	r5, r5
 8010c62:	1a24      	subs	r4, r4, r0
 8010c64:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8010c68:	ee07 5a90 	vmov	s15, r5
 8010c6c:	b224      	sxth	r4, r4
 8010c6e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8010c72:	ee07 4a90 	vmov	s15, r4
 8010c76:	ee25 5a24 	vmul.f32	s10, s10, s9
 8010c7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010c7e:	ee27 7a06 	vmul.f32	s14, s14, s12
 8010c82:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010c86:	eefd 6ac5 	vcvt.s32.f32	s13, s10
 8010c8a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8010c8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010c92:	ee16 0a90 	vmov	r0, s13
 8010c96:	ee17 4a10 	vmov	r4, s14
 8010c9a:	b205      	sxth	r5, r0
 8010c9c:	ee17 0a90 	vmov	r0, s15
 8010ca0:	fb14 f404 	smulbb	r4, r4, r4
 8010ca4:	fb05 4505 	mla	r5, r5, r5, r4
 8010ca8:	b204      	sxth	r4, r0
 8010caa:	fb04 5404 	mla	r4, r4, r4, r5
 8010cae:	ee07 4a90 	vmov	s15, r4
 8010cb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010cb6:	9800      	ldr	r0, [sp, #0]
 8010cb8:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8010cbc:	1c46      	adds	r6, r0, #1
 8010cbe:	b2fd      	uxtb	r5, r7
 8010cc0:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8010cc4:	ee17 0a10 	vmov	r0, s14
 8010cc8:	b200      	sxth	r0, r0
 8010cca:	ee07 0a90 	vmov	s15, r0
 8010cce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010cd2:	ee37 7ae3 	vsub.f32	s14, s15, s7
 8010cd6:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8010cda:	eeb0 7ac7 	vabs.f32	s14, s14
 8010cde:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8010ce2:	edc2 7a00 	vstr	s15, [r2]
 8010ce6:	ee17 0a10 	vmov	r0, s14
 8010cea:	b204      	sxth	r4, r0
 8010cec:	ee07 4a10 	vmov	s14, r4
 8010cf0:	fb04 f004 	mul.w	r0, r4, r4
 8010cf4:	ee07 0a90 	vmov	s15, r0
 8010cf8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010cfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010d00:	eeb4 4ac7 	vcmpe.f32	s8, s14
 8010d04:	ed93 7a00 	vldr	s14, [r3]
 8010d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d0c:	bf48      	it	mi
 8010d0e:	b2f0      	uxtbmi	r0, r6
 8010d10:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010d14:	bf48      	it	mi
 8010d16:	9000      	strmi	r0, [sp, #0]
 8010d18:	45ae      	cmp	lr, r5
 8010d1a:	edc3 7a00 	vstr	s15, [r3]
 8010d1e:	f63f af7e 	bhi.w	8010c1e <getMagStats.constprop.26+0x76>
 8010d22:	9800      	ldr	r0, [sp, #0]
 8010d24:	eddf 6a17 	vldr	s13, [pc, #92]	; 8010d84 <getMagStats.constprop.26+0x1dc>
 8010d28:	ee07 ea10 	vmov	s14, lr
 8010d2c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010d30:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8010d34:	eef1 7ac6 	vsqrt.f32	s15, s12
 8010d38:	ee60 7a27 	vmul.f32	s15, s0, s15
 8010d3c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d44:	bfb8      	it	lt
 8010d46:	eef0 7a66 	vmovlt.f32	s15, s13
 8010d4a:	edc3 7a00 	vstr	s15, [r3]
 8010d4e:	edd2 7a00 	vldr	s15, [r2]
 8010d52:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010d56:	eec0 7a07 	vdiv.f32	s15, s0, s14
 8010d5a:	edc2 7a00 	vstr	s15, [r2]
 8010d5e:	b003      	add	sp, #12
 8010d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d64:	fb94 f9fe 	sdiv	r9, r4, lr
 8010d68:	fb0e 4919 	mls	r9, lr, r9, r4
 8010d6c:	fa0f f989 	sxth.w	r9, r9
 8010d70:	e73e      	b.n	8010bf0 <getMagStats.constprop.26+0x48>
 8010d72:	edd3 7a00 	vldr	s15, [r3]
 8010d76:	4670      	mov	r0, lr
 8010d78:	e7d4      	b.n	8010d24 <getMagStats.constprop.26+0x17c>
 8010d7a:	bf00      	nop
 8010d7c:	423c0000 	.word	0x423c0000
 8010d80:	00000000 	.word	0x00000000
 8010d84:	3f59999a 	.word	0x3f59999a
 8010d88:	200013c8 	.word	0x200013c8

08010d8c <MEMS_updateMagBufferIndex.constprop.24>:
 8010d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d90:	4e98      	ldr	r6, [pc, #608]	; (8010ff4 <MEMS_updateMagBufferIndex.constprop.24+0x268>)
 8010d92:	ed2d 8b02 	vpush	{d8}
 8010d96:	f896 9500 	ldrb.w	r9, [r6, #1280]	; 0x500
 8010d9a:	f896 8501 	ldrb.w	r8, [r6, #1281]	; 0x501
 8010d9e:	f996 1502 	ldrsb.w	r1, [r6, #1282]	; 0x502
 8010da2:	2300      	movs	r3, #0
 8010da4:	45c1      	cmp	r9, r8
 8010da6:	b08f      	sub	sp, #60	; 0x3c
 8010da8:	f101 0101 	add.w	r1, r1, #1
 8010dac:	f8c6 3508 	str.w	r3, [r6, #1288]	; 0x508
 8010db0:	f8c6 350c 	str.w	r3, [r6, #1292]	; 0x50c
 8010db4:	f8c6 3510 	str.w	r3, [r6, #1296]	; 0x510
 8010db8:	f8c6 3514 	str.w	r3, [r6, #1300]	; 0x514
 8010dbc:	f8c6 351c 	str.w	r3, [r6, #1308]	; 0x51c
 8010dc0:	f8c6 3518 	str.w	r3, [r6, #1304]	; 0x518
 8010dc4:	f000 810b 	beq.w	8010fde <MEMS_updateMagBufferIndex.constprop.24+0x252>
 8010dc8:	eba1 0109 	sub.w	r1, r1, r9
 8010dcc:	fb91 f3f8 	sdiv	r3, r1, r8
 8010dd0:	fb08 1113 	mls	r1, r8, r3, r1
 8010dd4:	b20b      	sxth	r3, r1
 8010dd6:	2900      	cmp	r1, #0
 8010dd8:	9301      	str	r3, [sp, #4]
 8010dda:	f2c0 80fc 	blt.w	8010fd6 <MEMS_updateMagBufferIndex.constprop.24+0x24a>
 8010dde:	f1b9 0f00 	cmp.w	r9, #0
 8010de2:	d107      	bne.n	8010df4 <MEMS_updateMagBufferIndex.constprop.24+0x68>
 8010de4:	23ff      	movs	r3, #255	; 0xff
 8010de6:	f886 3502 	strb.w	r3, [r6, #1282]	; 0x502
 8010dea:	b00f      	add	sp, #60	; 0x3c
 8010dec:	ecbd 8b02 	vpop	{d8}
 8010df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010df4:	2500      	movs	r5, #0
 8010df6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8010dfa:	f8cd 9018 	str.w	r9, [sp, #24]
 8010dfe:	ee87 8a80 	vdiv.f32	s16, s15, s0
 8010e02:	9509      	str	r5, [sp, #36]	; 0x24
 8010e04:	46aa      	mov	sl, r5
 8010e06:	950d      	str	r5, [sp, #52]	; 0x34
 8010e08:	9507      	str	r5, [sp, #28]
 8010e0a:	950a      	str	r5, [sp, #40]	; 0x28
 8010e0c:	9502      	str	r5, [sp, #8]
 8010e0e:	950b      	str	r5, [sp, #44]	; 0x2c
 8010e10:	9503      	str	r5, [sp, #12]
 8010e12:	950c      	str	r5, [sp, #48]	; 0x30
 8010e14:	9504      	str	r5, [sp, #16]
 8010e16:	9508      	str	r5, [sp, #32]
 8010e18:	9505      	str	r5, [sp, #20]
 8010e1a:	2701      	movs	r7, #1
 8010e1c:	4681      	mov	r9, r0
 8010e1e:	e02b      	b.n	8010e78 <MEMS_updateMagBufferIndex.constprop.24+0xec>
 8010e20:	9b05      	ldr	r3, [sp, #20]
 8010e22:	3c20      	subs	r4, #32
 8010e24:	fa07 f404 	lsl.w	r4, r7, r4
 8010e28:	ea24 0403 	bic.w	r4, r4, r3
 8010e2c:	4063      	eors	r3, r4
 8010e2e:	9305      	str	r3, [sp, #20]
 8010e30:	f1bb 0f1f 	cmp.w	fp, #31
 8010e34:	f04f 0301 	mov.w	r3, #1
 8010e38:	9308      	str	r3, [sp, #32]
 8010e3a:	f240 8091 	bls.w	8010f60 <MEMS_updateMagBufferIndex.constprop.24+0x1d4>
 8010e3e:	9a03      	ldr	r2, [sp, #12]
 8010e40:	f1ab 0320 	sub.w	r3, fp, #32
 8010e44:	fa07 f303 	lsl.w	r3, r7, r3
 8010e48:	ea23 0302 	bic.w	r3, r3, r2
 8010e4c:	4053      	eors	r3, r2
 8010e4e:	9303      	str	r3, [sp, #12]
 8010e50:	291f      	cmp	r1, #31
 8010e52:	f04f 0301 	mov.w	r3, #1
 8010e56:	930b      	str	r3, [sp, #44]	; 0x2c
 8010e58:	f200 808f 	bhi.w	8010f7a <MEMS_updateMagBufferIndex.constprop.24+0x1ee>
 8010e5c:	2301      	movs	r3, #1
 8010e5e:	3501      	adds	r5, #1
 8010e60:	9a06      	ldr	r2, [sp, #24]
 8010e62:	9309      	str	r3, [sp, #36]	; 0x24
 8010e64:	fa07 f101 	lsl.w	r1, r7, r1
 8010e68:	b2eb      	uxtb	r3, r5
 8010e6a:	ea21 010a 	bic.w	r1, r1, sl
 8010e6e:	429a      	cmp	r2, r3
 8010e70:	ea8a 0a01 	eor.w	sl, sl, r1
 8010e74:	f240 8091 	bls.w	8010f9a <MEMS_updateMagBufferIndex.constprop.24+0x20e>
 8010e78:	9b01      	ldr	r3, [sp, #4]
 8010e7a:	1959      	adds	r1, r3, r5
 8010e7c:	fb91 f3f8 	sdiv	r3, r1, r8
 8010e80:	fb08 1313 	mls	r3, r8, r3, r1
 8010e84:	b2db      	uxtb	r3, r3
 8010e86:	f103 0b04 	add.w	fp, r3, #4
 8010e8a:	eb06 01cb 	add.w	r1, r6, fp, lsl #3
 8010e8e:	f9b1 0502 	ldrsh.w	r0, [r1, #1282]	; 0x502
 8010e92:	fb90 f1f9 	sdiv	r1, r0, r9
 8010e96:	fb09 0111 	mls	r1, r9, r1, r0
 8010e9a:	2900      	cmp	r1, #0
 8010e9c:	bfb8      	it	lt
 8010e9e:	4449      	addlt	r1, r9
 8010ea0:	b20b      	sxth	r3, r1
 8010ea2:	ee07 3a90 	vmov	s15, r3
 8010ea6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010eaa:	ee67 7a88 	vmul.f32	s15, s15, s16
 8010eae:	ee17 0a90 	vmov	r0, s15
 8010eb2:	f00a fc19 	bl	801b6e8 <roundf>
 8010eb6:	eb06 01cb 	add.w	r1, r6, fp, lsl #3
 8010eba:	ee07 0a90 	vmov	s15, r0
 8010ebe:	f9b1 0504 	ldrsh.w	r0, [r1, #1284]	; 0x504
 8010ec2:	fb90 f1f9 	sdiv	r1, r0, r9
 8010ec6:	fb09 0111 	mls	r1, r9, r1, r0
 8010eca:	2900      	cmp	r1, #0
 8010ecc:	bfb8      	it	lt
 8010ece:	4449      	addlt	r1, r9
 8010ed0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010ed4:	b20b      	sxth	r3, r1
 8010ed6:	edcd 7a00 	vstr	s15, [sp]
 8010eda:	ee07 3a90 	vmov	s15, r3
 8010ede:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010ee2:	f89d 4000 	ldrb.w	r4, [sp]
 8010ee6:	ee67 7a88 	vmul.f32	s15, s15, s16
 8010eea:	ee17 0a90 	vmov	r0, s15
 8010eee:	f00a fbfb 	bl	801b6e8 <roundf>
 8010ef2:	eb06 03cb 	add.w	r3, r6, fp, lsl #3
 8010ef6:	ee07 0a90 	vmov	s15, r0
 8010efa:	f9b3 3506 	ldrsh.w	r3, [r3, #1286]	; 0x506
 8010efe:	fb93 f1f9 	sdiv	r1, r3, r9
 8010f02:	fb09 3111 	mls	r1, r9, r1, r3
 8010f06:	2900      	cmp	r1, #0
 8010f08:	bfb8      	it	lt
 8010f0a:	4449      	addlt	r1, r9
 8010f0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010f10:	b20b      	sxth	r3, r1
 8010f12:	edcd 7a00 	vstr	s15, [sp]
 8010f16:	ee07 3a90 	vmov	s15, r3
 8010f1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010f1e:	f89d b000 	ldrb.w	fp, [sp]
 8010f22:	ee67 7a88 	vmul.f32	s15, s15, s16
 8010f26:	ee17 0a90 	vmov	r0, s15
 8010f2a:	f00a fbdd 	bl	801b6e8 <roundf>
 8010f2e:	ee07 0a90 	vmov	s15, r0
 8010f32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010f36:	2c1f      	cmp	r4, #31
 8010f38:	edcd 7a00 	vstr	s15, [sp]
 8010f3c:	f89d 1000 	ldrb.w	r1, [sp]
 8010f40:	f63f af6e 	bhi.w	8010e20 <MEMS_updateMagBufferIndex.constprop.24+0x94>
 8010f44:	9b04      	ldr	r3, [sp, #16]
 8010f46:	fa07 f404 	lsl.w	r4, r7, r4
 8010f4a:	ea24 0403 	bic.w	r4, r4, r3
 8010f4e:	4063      	eors	r3, r4
 8010f50:	9304      	str	r3, [sp, #16]
 8010f52:	f1bb 0f1f 	cmp.w	fp, #31
 8010f56:	f04f 0301 	mov.w	r3, #1
 8010f5a:	930c      	str	r3, [sp, #48]	; 0x30
 8010f5c:	f63f af6f 	bhi.w	8010e3e <MEMS_updateMagBufferIndex.constprop.24+0xb2>
 8010f60:	9a02      	ldr	r2, [sp, #8]
 8010f62:	fa07 f30b 	lsl.w	r3, r7, fp
 8010f66:	ea23 0302 	bic.w	r3, r3, r2
 8010f6a:	4053      	eors	r3, r2
 8010f6c:	9302      	str	r3, [sp, #8]
 8010f6e:	291f      	cmp	r1, #31
 8010f70:	f04f 0301 	mov.w	r3, #1
 8010f74:	930a      	str	r3, [sp, #40]	; 0x28
 8010f76:	f67f af71 	bls.w	8010e5c <MEMS_updateMagBufferIndex.constprop.24+0xd0>
 8010f7a:	9b07      	ldr	r3, [sp, #28]
 8010f7c:	9a06      	ldr	r2, [sp, #24]
 8010f7e:	3920      	subs	r1, #32
 8010f80:	fa07 f101 	lsl.w	r1, r7, r1
 8010f84:	ea21 0103 	bic.w	r1, r1, r3
 8010f88:	404b      	eors	r3, r1
 8010f8a:	9307      	str	r3, [sp, #28]
 8010f8c:	3501      	adds	r5, #1
 8010f8e:	2301      	movs	r3, #1
 8010f90:	930d      	str	r3, [sp, #52]	; 0x34
 8010f92:	b2eb      	uxtb	r3, r5
 8010f94:	429a      	cmp	r2, r3
 8010f96:	f63f af6f 	bhi.w	8010e78 <MEMS_updateMagBufferIndex.constprop.24+0xec>
 8010f9a:	9b08      	ldr	r3, [sp, #32]
 8010f9c:	4652      	mov	r2, sl
 8010f9e:	bb2b      	cbnz	r3, 8010fec <MEMS_updateMagBufferIndex.constprop.24+0x260>
 8010fa0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010fa2:	b113      	cbz	r3, 8010faa <MEMS_updateMagBufferIndex.constprop.24+0x21e>
 8010fa4:	9b04      	ldr	r3, [sp, #16]
 8010fa6:	f8c6 350c 	str.w	r3, [r6, #1292]	; 0x50c
 8010faa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010fac:	b113      	cbz	r3, 8010fb4 <MEMS_updateMagBufferIndex.constprop.24+0x228>
 8010fae:	9b03      	ldr	r3, [sp, #12]
 8010fb0:	f8c6 3510 	str.w	r3, [r6, #1296]	; 0x510
 8010fb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010fb6:	b113      	cbz	r3, 8010fbe <MEMS_updateMagBufferIndex.constprop.24+0x232>
 8010fb8:	9b02      	ldr	r3, [sp, #8]
 8010fba:	f8c6 3514 	str.w	r3, [r6, #1300]	; 0x514
 8010fbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010fc0:	b113      	cbz	r3, 8010fc8 <MEMS_updateMagBufferIndex.constprop.24+0x23c>
 8010fc2:	9b07      	ldr	r3, [sp, #28]
 8010fc4:	f8c6 351c 	str.w	r3, [r6, #1308]	; 0x51c
 8010fc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	f43f af0d 	beq.w	8010dea <MEMS_updateMagBufferIndex.constprop.24+0x5e>
 8010fd0:	f8c6 2518 	str.w	r2, [r6, #1304]	; 0x518
 8010fd4:	e709      	b.n	8010dea <MEMS_updateMagBufferIndex.constprop.24+0x5e>
 8010fd6:	4441      	add	r1, r8
 8010fd8:	b20b      	sxth	r3, r1
 8010fda:	9301      	str	r3, [sp, #4]
 8010fdc:	e6ff      	b.n	8010dde <MEMS_updateMagBufferIndex.constprop.24+0x52>
 8010fde:	fb91 f3f9 	sdiv	r3, r1, r9
 8010fe2:	fb09 1113 	mls	r1, r9, r3, r1
 8010fe6:	b20b      	sxth	r3, r1
 8010fe8:	9301      	str	r3, [sp, #4]
 8010fea:	e6f8      	b.n	8010dde <MEMS_updateMagBufferIndex.constprop.24+0x52>
 8010fec:	9b05      	ldr	r3, [sp, #20]
 8010fee:	f8c6 3508 	str.w	r3, [r6, #1288]	; 0x508
 8010ff2:	e7d5      	b.n	8010fa0 <MEMS_updateMagBufferIndex.constprop.24+0x214>
 8010ff4:	200013c8 	.word	0x200013c8

08010ff8 <iNemo_quat2heading>:
 8010ff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ffc:	4ddc      	ldr	r5, [pc, #880]	; (8011370 <iNemo_quat2heading+0x378>)
 8010ffe:	ed2d 8b0a 	vpush	{d8-d12}
 8011002:	ed92 ba01 	vldr	s22, [r2, #4]
 8011006:	edd2 aa00 	vldr	s21, [r2]
 801100a:	ed92 aa02 	vldr	s20, [r2, #8]
 801100e:	edd0 ba01 	vldr	s23, [r0, #4]
 8011012:	ed90 ca00 	vldr	s24, [r0]
 8011016:	edd0 ca02 	vldr	s25, [r0, #8]
 801101a:	ed90 9a03 	vldr	s18, [r0, #12]
 801101e:	f8d5 4820 	ldr.w	r4, [r5, #2080]	; 0x820
 8011022:	468a      	mov	sl, r1
 8011024:	eeb0 8acb 	vabs.f32	s16, s22
 8011028:	eef0 8aea 	vabs.f32	s17, s21
 801102c:	eef0 9aca 	vabs.f32	s19, s20
 8011030:	2b00      	cmp	r3, #0
 8011032:	d145      	bne.n	80110c0 <iNemo_quat2heading+0xc8>
 8011034:	ee18 0a10 	vmov	r0, s16
 8011038:	f7ef fa8e 	bl	8000558 <__aeabi_f2d>
 801103c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8011040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011044:	4606      	mov	r6, r0
 8011046:	460f      	mov	r7, r1
 8011048:	f140 80f6 	bpl.w	8011238 <iNemo_quat2heading+0x240>
 801104c:	eef4 8ae9 	vcmpe.f32	s17, s19
 8011050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011054:	f340 80f0 	ble.w	8011238 <iNemo_quat2heading+0x240>
 8011058:	ee18 0a90 	vmov	r0, s17
 801105c:	f7ef fa7c 	bl	8000558 <__aeabi_f2d>
 8011060:	a3bf      	add	r3, pc, #764	; (adr r3, 8011360 <iNemo_quat2heading+0x368>)
 8011062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011066:	4680      	mov	r8, r0
 8011068:	4689      	mov	r9, r1
 801106a:	4630      	mov	r0, r6
 801106c:	4639      	mov	r1, r7
 801106e:	f7ef facb 	bl	8000608 <__aeabi_dmul>
 8011072:	eef5 aac0 	vcmpe.f32	s21, #0.0
 8011076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801107a:	4602      	mov	r2, r0
 801107c:	460b      	mov	r3, r1
 801107e:	4640      	mov	r0, r8
 8011080:	4649      	mov	r1, r9
 8011082:	f340 820a 	ble.w	801149a <iNemo_quat2heading+0x4a2>
 8011086:	f7ef fd4f 	bl	8000b28 <__aeabi_dcmpgt>
 801108a:	b170      	cbz	r0, 80110aa <iNemo_quat2heading+0xb2>
 801108c:	ee19 0a90 	vmov	r0, s19
 8011090:	f7ef fa62 	bl	8000558 <__aeabi_f2d>
 8011094:	a3b2      	add	r3, pc, #712	; (adr r3, 8011360 <iNemo_quat2heading+0x368>)
 8011096:	e9d3 2300 	ldrd	r2, r3, [r3]
 801109a:	f7ef fab5 	bl	8000608 <__aeabi_dmul>
 801109e:	4642      	mov	r2, r8
 80110a0:	464b      	mov	r3, r9
 80110a2:	f7ef fd23 	bl	8000aec <__aeabi_dcmplt>
 80110a6:	2800      	cmp	r0, #0
 80110a8:	d148      	bne.n	801113c <iNemo_quat2heading+0x144>
 80110aa:	2c05      	cmp	r4, #5
 80110ac:	f200 8224 	bhi.w	80114f8 <iNemo_quat2heading+0x500>
 80110b0:	e8df f014 	tbh	[pc, r4, lsl #1]
 80110b4:	00980120 	.word	0x00980120
 80110b8:	017e0047 	.word	0x017e0047
 80110bc:	01200047 	.word	0x01200047
 80110c0:	ee18 0a90 	vmov	r0, s17
 80110c4:	f7ef fa48 	bl	8000558 <__aeabi_f2d>
 80110c8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80110cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110d0:	eef1 ca6c 	vneg.f32	s25, s25
 80110d4:	4606      	mov	r6, r0
 80110d6:	460f      	mov	r7, r1
 80110d8:	dd4f      	ble.n	801117a <iNemo_quat2heading+0x182>
 80110da:	eeb4 8ae9 	vcmpe.f32	s16, s19
 80110de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110e2:	dd4a      	ble.n	801117a <iNemo_quat2heading+0x182>
 80110e4:	ee18 0a10 	vmov	r0, s16
 80110e8:	f7ef fa36 	bl	8000558 <__aeabi_f2d>
 80110ec:	a39c      	add	r3, pc, #624	; (adr r3, 8011360 <iNemo_quat2heading+0x368>)
 80110ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110f2:	4680      	mov	r8, r0
 80110f4:	4689      	mov	r9, r1
 80110f6:	4630      	mov	r0, r6
 80110f8:	4639      	mov	r1, r7
 80110fa:	f7ef fa85 	bl	8000608 <__aeabi_dmul>
 80110fe:	eeb5 bac0 	vcmpe.f32	s22, #0.0
 8011102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011106:	4602      	mov	r2, r0
 8011108:	460b      	mov	r3, r1
 801110a:	4640      	mov	r0, r8
 801110c:	4649      	mov	r1, r9
 801110e:	f340 81dd 	ble.w	80114cc <iNemo_quat2heading+0x4d4>
 8011112:	f7ef fd09 	bl	8000b28 <__aeabi_dcmpgt>
 8011116:	2800      	cmp	r0, #0
 8011118:	f000 8119 	beq.w	801134e <iNemo_quat2heading+0x356>
 801111c:	ee19 0a90 	vmov	r0, s19
 8011120:	f7ef fa1a 	bl	8000558 <__aeabi_f2d>
 8011124:	a38e      	add	r3, pc, #568	; (adr r3, 8011360 <iNemo_quat2heading+0x368>)
 8011126:	e9d3 2300 	ldrd	r2, r3, [r3]
 801112a:	f7ef fa6d 	bl	8000608 <__aeabi_dmul>
 801112e:	4642      	mov	r2, r8
 8011130:	464b      	mov	r3, r9
 8011132:	f7ef fcdb 	bl	8000aec <__aeabi_dcmplt>
 8011136:	2800      	cmp	r0, #0
 8011138:	f000 8109 	beq.w	801134e <iNemo_quat2heading+0x356>
 801113c:	2304      	movs	r3, #4
 801113e:	f8c5 3820 	str.w	r3, [r5, #2080]	; 0x820
 8011142:	ed9a 0a00 	vldr	s0, [sl]
 8011146:	eddf 7a8b 	vldr	s15, [pc, #556]	; 8011374 <iNemo_quat2heading+0x37c>
 801114a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801114e:	eddf 7a8a 	vldr	s15, [pc, #552]	; 8011378 <iNemo_quat2heading+0x380>
 8011152:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8011156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801115a:	bfa8      	it	ge
 801115c:	ee30 0a67 	vsubge.f32	s0, s0, s15
 8011160:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8011164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011168:	d503      	bpl.n	8011172 <iNemo_quat2heading+0x17a>
 801116a:	eddf 7a83 	vldr	s15, [pc, #524]	; 8011378 <iNemo_quat2heading+0x380>
 801116e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011172:	ecbd 8b0a 	vpop	{d8-d12}
 8011176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801117a:	eef4 8ae9 	vcmpe.f32	s17, s19
 801117e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011182:	f340 80ba 	ble.w	80112fa <iNemo_quat2heading+0x302>
 8011186:	ee18 0a10 	vmov	r0, s16
 801118a:	f7ef f9e5 	bl	8000558 <__aeabi_f2d>
 801118e:	a374      	add	r3, pc, #464	; (adr r3, 8011360 <iNemo_quat2heading+0x368>)
 8011190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011194:	f7ef fa38 	bl	8000608 <__aeabi_dmul>
 8011198:	eef5 aac0 	vcmpe.f32	s21, #0.0
 801119c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111a0:	4632      	mov	r2, r6
 80111a2:	463b      	mov	r3, r7
 80111a4:	f340 8145 	ble.w	8011432 <iNemo_quat2heading+0x43a>
 80111a8:	f7ef fca0 	bl	8000aec <__aeabi_dcmplt>
 80111ac:	2800      	cmp	r0, #0
 80111ae:	f000 80ce 	beq.w	801134e <iNemo_quat2heading+0x356>
 80111b2:	ee19 0a90 	vmov	r0, s19
 80111b6:	f7ef f9cf 	bl	8000558 <__aeabi_f2d>
 80111ba:	a369      	add	r3, pc, #420	; (adr r3, 8011360 <iNemo_quat2heading+0x368>)
 80111bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111c0:	f7ef fa22 	bl	8000608 <__aeabi_dmul>
 80111c4:	4632      	mov	r2, r6
 80111c6:	463b      	mov	r3, r7
 80111c8:	f7ef fc90 	bl	8000aec <__aeabi_dcmplt>
 80111cc:	2800      	cmp	r0, #0
 80111ce:	f000 80be 	beq.w	801134e <iNemo_quat2heading+0x356>
 80111d2:	eef0 7a6b 	vmov.f32	s15, s23
 80111d6:	2301      	movs	r3, #1
 80111d8:	eef0 ba4c 	vmov.f32	s23, s24
 80111dc:	f8c5 3820 	str.w	r3, [r5, #2080]	; 0x820
 80111e0:	eeb0 ca67 	vmov.f32	s24, s15
 80111e4:	ee6b 7aeb 	vnmul.f32	s15, s23, s23
 80111e8:	eeec 7a0c 	vfma.f32	s15, s24, s24
 80111ec:	eeec 7aec 	vfms.f32	s15, s25, s25
 80111f0:	eee9 7a09 	vfma.f32	s15, s18, s18
 80111f4:	ee2c 9a89 	vmul.f32	s18, s25, s18
 80111f8:	ee17 0a90 	vmov	r0, s15
 80111fc:	eeab 9a8c 	vfma.f32	s18, s23, s24
 8011200:	f7ef f9aa 	bl	8000558 <__aeabi_f2d>
 8011204:	ee79 7a09 	vadd.f32	s15, s18, s18
 8011208:	4604      	mov	r4, r0
 801120a:	460d      	mov	r5, r1
 801120c:	ee17 0a90 	vmov	r0, s15
 8011210:	f7ef f9a2 	bl	8000558 <__aeabi_f2d>
 8011214:	4622      	mov	r2, r4
 8011216:	462b      	mov	r3, r5
 8011218:	f00a fb42 	bl	801b8a0 <atan2>
 801121c:	a352      	add	r3, pc, #328	; (adr r3, 8011368 <iNemo_quat2heading+0x370>)
 801121e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011222:	f7ef f9f1 	bl	8000608 <__aeabi_dmul>
 8011226:	2200      	movs	r2, #0
 8011228:	4b54      	ldr	r3, [pc, #336]	; (801137c <iNemo_quat2heading+0x384>)
 801122a:	f7ef f835 	bl	8000298 <__aeabi_dsub>
 801122e:	f7ef fcc3 	bl	8000bb8 <__aeabi_d2f>
 8011232:	ee00 0a10 	vmov	s0, r0
 8011236:	e78a      	b.n	801114e <iNemo_quat2heading+0x156>
 8011238:	eeb4 8ae9 	vcmpe.f32	s16, s19
 801123c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011240:	dd29      	ble.n	8011296 <iNemo_quat2heading+0x29e>
 8011242:	ee18 0a90 	vmov	r0, s17
 8011246:	f7ef f987 	bl	8000558 <__aeabi_f2d>
 801124a:	a345      	add	r3, pc, #276	; (adr r3, 8011360 <iNemo_quat2heading+0x368>)
 801124c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011250:	f7ef f9da 	bl	8000608 <__aeabi_dmul>
 8011254:	eeb5 bac0 	vcmpe.f32	s22, #0.0
 8011258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801125c:	4632      	mov	r2, r6
 801125e:	463b      	mov	r3, r7
 8011260:	f340 808e 	ble.w	8011380 <iNemo_quat2heading+0x388>
 8011264:	f7ef fc42 	bl	8000aec <__aeabi_dcmplt>
 8011268:	2800      	cmp	r0, #0
 801126a:	f43f af1e 	beq.w	80110aa <iNemo_quat2heading+0xb2>
 801126e:	ee19 0a90 	vmov	r0, s19
 8011272:	f7ef f971 	bl	8000558 <__aeabi_f2d>
 8011276:	a33a      	add	r3, pc, #232	; (adr r3, 8011360 <iNemo_quat2heading+0x368>)
 8011278:	e9d3 2300 	ldrd	r2, r3, [r3]
 801127c:	f7ef f9c4 	bl	8000608 <__aeabi_dmul>
 8011280:	4632      	mov	r2, r6
 8011282:	463b      	mov	r3, r7
 8011284:	f7ef fc32 	bl	8000aec <__aeabi_dcmplt>
 8011288:	2800      	cmp	r0, #0
 801128a:	f43f af0e 	beq.w	80110aa <iNemo_quat2heading+0xb2>
 801128e:	2301      	movs	r3, #1
 8011290:	f8c5 3820 	str.w	r3, [r5, #2080]	; 0x820
 8011294:	e7a6      	b.n	80111e4 <iNemo_quat2heading+0x1ec>
 8011296:	ee19 0a90 	vmov	r0, s19
 801129a:	f7ef f95d 	bl	8000558 <__aeabi_f2d>
 801129e:	a330      	add	r3, pc, #192	; (adr r3, 8011360 <iNemo_quat2heading+0x368>)
 80112a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112a4:	4680      	mov	r8, r0
 80112a6:	4689      	mov	r9, r1
 80112a8:	4630      	mov	r0, r6
 80112aa:	4639      	mov	r1, r7
 80112ac:	f7ef f9ac 	bl	8000608 <__aeabi_dmul>
 80112b0:	eeb5 aac0 	vcmpe.f32	s20, #0.0
 80112b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112b8:	4602      	mov	r2, r0
 80112ba:	460b      	mov	r3, r1
 80112bc:	4640      	mov	r0, r8
 80112be:	4649      	mov	r1, r9
 80112c0:	f340 80d5 	ble.w	801146e <iNemo_quat2heading+0x476>
 80112c4:	f7ef fc30 	bl	8000b28 <__aeabi_dcmpgt>
 80112c8:	2800      	cmp	r0, #0
 80112ca:	f43f aeee 	beq.w	80110aa <iNemo_quat2heading+0xb2>
 80112ce:	ee18 0a90 	vmov	r0, s17
 80112d2:	f7ef f941 	bl	8000558 <__aeabi_f2d>
 80112d6:	a322      	add	r3, pc, #136	; (adr r3, 8011360 <iNemo_quat2heading+0x368>)
 80112d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112dc:	f7ef f994 	bl	8000608 <__aeabi_dmul>
 80112e0:	4642      	mov	r2, r8
 80112e2:	464b      	mov	r3, r9
 80112e4:	f7ef fc02 	bl	8000aec <__aeabi_dcmplt>
 80112e8:	2800      	cmp	r0, #0
 80112ea:	f43f aede 	beq.w	80110aa <iNemo_quat2heading+0xb2>
 80112ee:	2300      	movs	r3, #0
 80112f0:	f8c5 3820 	str.w	r3, [r5, #2080]	; 0x820
 80112f4:	ed9a 0a00 	vldr	s0, [sl]
 80112f8:	e729      	b.n	801114e <iNemo_quat2heading+0x156>
 80112fa:	a319      	add	r3, pc, #100	; (adr r3, 8011360 <iNemo_quat2heading+0x368>)
 80112fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011300:	4630      	mov	r0, r6
 8011302:	4639      	mov	r1, r7
 8011304:	f7ef f980 	bl	8000608 <__aeabi_dmul>
 8011308:	4680      	mov	r8, r0
 801130a:	ee19 0a90 	vmov	r0, s19
 801130e:	4689      	mov	r9, r1
 8011310:	f7ef f922 	bl	8000558 <__aeabi_f2d>
 8011314:	eeb5 aac0 	vcmpe.f32	s20, #0.0
 8011318:	4606      	mov	r6, r0
 801131a:	460f      	mov	r7, r1
 801131c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011320:	4640      	mov	r0, r8
 8011322:	4649      	mov	r1, r9
 8011324:	4632      	mov	r2, r6
 8011326:	463b      	mov	r3, r7
 8011328:	d56c      	bpl.n	8011404 <iNemo_quat2heading+0x40c>
 801132a:	f7ef fbdf 	bl	8000aec <__aeabi_dcmplt>
 801132e:	b170      	cbz	r0, 801134e <iNemo_quat2heading+0x356>
 8011330:	ee18 0a10 	vmov	r0, s16
 8011334:	f7ef f910 	bl	8000558 <__aeabi_f2d>
 8011338:	a309      	add	r3, pc, #36	; (adr r3, 8011360 <iNemo_quat2heading+0x368>)
 801133a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801133e:	f7ef f963 	bl	8000608 <__aeabi_dmul>
 8011342:	4632      	mov	r2, r6
 8011344:	463b      	mov	r3, r7
 8011346:	f7ef fbd1 	bl	8000aec <__aeabi_dcmplt>
 801134a:	2800      	cmp	r0, #0
 801134c:	d1cf      	bne.n	80112ee <iNemo_quat2heading+0x2f6>
 801134e:	eef0 7a4c 	vmov.f32	s15, s24
 8011352:	eeb0 ca6b 	vmov.f32	s24, s23
 8011356:	eef0 ba67 	vmov.f32	s23, s15
 801135a:	e6a6      	b.n	80110aa <iNemo_quat2heading+0xb2>
 801135c:	f3af 8000 	nop.w
 8011360:	e0000000 	.word	0xe0000000
 8011364:	3ff6b851 	.word	0x3ff6b851
 8011368:	20000000 	.word	0x20000000
 801136c:	404ca5dc 	.word	0x404ca5dc
 8011370:	200013c8 	.word	0x200013c8
 8011374:	43340000 	.word	0x43340000
 8011378:	43b40000 	.word	0x43b40000
 801137c:	40568000 	.word	0x40568000
 8011380:	f7ef fbb4 	bl	8000aec <__aeabi_dcmplt>
 8011384:	2800      	cmp	r0, #0
 8011386:	f43f ae90 	beq.w	80110aa <iNemo_quat2heading+0xb2>
 801138a:	ee19 0a90 	vmov	r0, s19
 801138e:	f7ef f8e3 	bl	8000558 <__aeabi_f2d>
 8011392:	a35b      	add	r3, pc, #364	; (adr r3, 8011500 <iNemo_quat2heading+0x508>)
 8011394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011398:	f7ef f936 	bl	8000608 <__aeabi_dmul>
 801139c:	4632      	mov	r2, r6
 801139e:	463b      	mov	r3, r7
 80113a0:	f7ef fba4 	bl	8000aec <__aeabi_dcmplt>
 80113a4:	2800      	cmp	r0, #0
 80113a6:	f43f ae80 	beq.w	80110aa <iNemo_quat2heading+0xb2>
 80113aa:	2303      	movs	r3, #3
 80113ac:	f8c5 3820 	str.w	r3, [r5, #2080]	; 0x820
 80113b0:	ee6b 7aeb 	vnmul.f32	s15, s23, s23
 80113b4:	eeec 7a0c 	vfma.f32	s15, s24, s24
 80113b8:	eeec 7aec 	vfms.f32	s15, s25, s25
 80113bc:	eee9 7a09 	vfma.f32	s15, s18, s18
 80113c0:	ee2c 9a89 	vmul.f32	s18, s25, s18
 80113c4:	ee17 0a90 	vmov	r0, s15
 80113c8:	eeab 9a8c 	vfma.f32	s18, s23, s24
 80113cc:	f7ef f8c4 	bl	8000558 <__aeabi_f2d>
 80113d0:	ee79 7a09 	vadd.f32	s15, s18, s18
 80113d4:	4604      	mov	r4, r0
 80113d6:	460d      	mov	r5, r1
 80113d8:	ee17 0a90 	vmov	r0, s15
 80113dc:	f7ef f8bc 	bl	8000558 <__aeabi_f2d>
 80113e0:	4622      	mov	r2, r4
 80113e2:	462b      	mov	r3, r5
 80113e4:	f00a fa5c 	bl	801b8a0 <atan2>
 80113e8:	a349      	add	r3, pc, #292	; (adr r3, 8011510 <iNemo_quat2heading+0x518>)
 80113ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113ee:	f7ef f90b 	bl	8000608 <__aeabi_dmul>
 80113f2:	2200      	movs	r2, #0
 80113f4:	4b44      	ldr	r3, [pc, #272]	; (8011508 <iNemo_quat2heading+0x510>)
 80113f6:	f7ee ff51 	bl	800029c <__adddf3>
 80113fa:	f7ef fbdd 	bl	8000bb8 <__aeabi_d2f>
 80113fe:	ee00 0a10 	vmov	s0, r0
 8011402:	e6a4      	b.n	801114e <iNemo_quat2heading+0x156>
 8011404:	f7ef fb72 	bl	8000aec <__aeabi_dcmplt>
 8011408:	2800      	cmp	r0, #0
 801140a:	d0a0      	beq.n	801134e <iNemo_quat2heading+0x356>
 801140c:	ee18 0a10 	vmov	r0, s16
 8011410:	f7ef f8a2 	bl	8000558 <__aeabi_f2d>
 8011414:	a33a      	add	r3, pc, #232	; (adr r3, 8011500 <iNemo_quat2heading+0x508>)
 8011416:	e9d3 2300 	ldrd	r2, r3, [r3]
 801141a:	f7ef f8f5 	bl	8000608 <__aeabi_dmul>
 801141e:	4632      	mov	r2, r6
 8011420:	463b      	mov	r3, r7
 8011422:	f7ef fb63 	bl	8000aec <__aeabi_dcmplt>
 8011426:	2800      	cmp	r0, #0
 8011428:	d091      	beq.n	801134e <iNemo_quat2heading+0x356>
 801142a:	2302      	movs	r3, #2
 801142c:	f8c5 3820 	str.w	r3, [r5, #2080]	; 0x820
 8011430:	e687      	b.n	8011142 <iNemo_quat2heading+0x14a>
 8011432:	f7ef fb5b 	bl	8000aec <__aeabi_dcmplt>
 8011436:	2800      	cmp	r0, #0
 8011438:	d089      	beq.n	801134e <iNemo_quat2heading+0x356>
 801143a:	ee19 0a90 	vmov	r0, s19
 801143e:	f7ef f88b 	bl	8000558 <__aeabi_f2d>
 8011442:	a32f      	add	r3, pc, #188	; (adr r3, 8011500 <iNemo_quat2heading+0x508>)
 8011444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011448:	f7ef f8de 	bl	8000608 <__aeabi_dmul>
 801144c:	4632      	mov	r2, r6
 801144e:	463b      	mov	r3, r7
 8011450:	f7ef fb4c 	bl	8000aec <__aeabi_dcmplt>
 8011454:	2800      	cmp	r0, #0
 8011456:	f43f af7a 	beq.w	801134e <iNemo_quat2heading+0x356>
 801145a:	eef0 7a6b 	vmov.f32	s15, s23
 801145e:	2303      	movs	r3, #3
 8011460:	eef0 ba4c 	vmov.f32	s23, s24
 8011464:	f8c5 3820 	str.w	r3, [r5, #2080]	; 0x820
 8011468:	eeb0 ca67 	vmov.f32	s24, s15
 801146c:	e7a0      	b.n	80113b0 <iNemo_quat2heading+0x3b8>
 801146e:	f7ef fb5b 	bl	8000b28 <__aeabi_dcmpgt>
 8011472:	2800      	cmp	r0, #0
 8011474:	f43f ae19 	beq.w	80110aa <iNemo_quat2heading+0xb2>
 8011478:	ee18 0a90 	vmov	r0, s17
 801147c:	f7ef f86c 	bl	8000558 <__aeabi_f2d>
 8011480:	a31f      	add	r3, pc, #124	; (adr r3, 8011500 <iNemo_quat2heading+0x508>)
 8011482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011486:	f7ef f8bf 	bl	8000608 <__aeabi_dmul>
 801148a:	4642      	mov	r2, r8
 801148c:	464b      	mov	r3, r9
 801148e:	f7ef fb2d 	bl	8000aec <__aeabi_dcmplt>
 8011492:	2800      	cmp	r0, #0
 8011494:	f43f ae09 	beq.w	80110aa <iNemo_quat2heading+0xb2>
 8011498:	e7c7      	b.n	801142a <iNemo_quat2heading+0x432>
 801149a:	f7ef fb45 	bl	8000b28 <__aeabi_dcmpgt>
 801149e:	2800      	cmp	r0, #0
 80114a0:	f43f ae03 	beq.w	80110aa <iNemo_quat2heading+0xb2>
 80114a4:	ee19 0a90 	vmov	r0, s19
 80114a8:	f7ef f856 	bl	8000558 <__aeabi_f2d>
 80114ac:	a314      	add	r3, pc, #80	; (adr r3, 8011500 <iNemo_quat2heading+0x508>)
 80114ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114b2:	f7ef f8a9 	bl	8000608 <__aeabi_dmul>
 80114b6:	4642      	mov	r2, r8
 80114b8:	464b      	mov	r3, r9
 80114ba:	f7ef fb17 	bl	8000aec <__aeabi_dcmplt>
 80114be:	2800      	cmp	r0, #0
 80114c0:	f43f adf3 	beq.w	80110aa <iNemo_quat2heading+0xb2>
 80114c4:	2305      	movs	r3, #5
 80114c6:	f8c5 3820 	str.w	r3, [r5, #2080]	; 0x820
 80114ca:	e713      	b.n	80112f4 <iNemo_quat2heading+0x2fc>
 80114cc:	f7ef fb2c 	bl	8000b28 <__aeabi_dcmpgt>
 80114d0:	2800      	cmp	r0, #0
 80114d2:	f43f af3c 	beq.w	801134e <iNemo_quat2heading+0x356>
 80114d6:	ee19 0a90 	vmov	r0, s19
 80114da:	f7ef f83d 	bl	8000558 <__aeabi_f2d>
 80114de:	a308      	add	r3, pc, #32	; (adr r3, 8011500 <iNemo_quat2heading+0x508>)
 80114e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114e4:	f7ef f890 	bl	8000608 <__aeabi_dmul>
 80114e8:	4642      	mov	r2, r8
 80114ea:	464b      	mov	r3, r9
 80114ec:	f7ef fafe 	bl	8000aec <__aeabi_dcmplt>
 80114f0:	2800      	cmp	r0, #0
 80114f2:	f43f af2c 	beq.w	801134e <iNemo_quat2heading+0x356>
 80114f6:	e7e5      	b.n	80114c4 <iNemo_quat2heading+0x4cc>
 80114f8:	ed9f 0a04 	vldr	s0, [pc, #16]	; 801150c <iNemo_quat2heading+0x514>
 80114fc:	e639      	b.n	8011172 <iNemo_quat2heading+0x17a>
 80114fe:	bf00      	nop
 8011500:	e0000000 	.word	0xe0000000
 8011504:	3ff6b851 	.word	0x3ff6b851
 8011508:	40568000 	.word	0x40568000
 801150c:	00000000 	.word	0x00000000
 8011510:	20000000 	.word	0x20000000
 8011514:	404ca5dc 	.word	0x404ca5dc

08011518 <output_update>:
 8011518:	edd0 5a03 	vldr	s11, [r0, #12]
 801151c:	ed90 7a02 	vldr	s14, [r0, #8]
 8011520:	edd0 4a01 	vldr	s9, [r0, #4]
 8011524:	edd0 3a00 	vldr	s7, [r0]
 8011528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801152c:	ee65 7aa5 	vmul.f32	s15, s11, s11
 8011530:	eeb1 5a64 	vneg.f32	s10, s9
 8011534:	eee7 7a07 	vfma.f32	s15, s14, s14
 8011538:	4682      	mov	sl, r0
 801153a:	460f      	mov	r7, r1
 801153c:	ee24 6a87 	vmul.f32	s12, s9, s14
 8011540:	ee65 6ac5 	vnmul.f32	s13, s11, s10
 8011544:	ed2d 8b0a 	vpush	{d8-d12}
 8011548:	eeb1 4a63 	vneg.f32	s8, s7
 801154c:	eee3 6a87 	vfma.f32	s13, s7, s14
 8011550:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 8011554:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8011556:	ed8a 4a00 	vstr	s8, [sl]
 801155a:	eee4 7a23 	vfma.f32	s15, s8, s7
 801155e:	4614      	mov	r4, r2
 8011560:	461d      	mov	r5, r3
 8011562:	eea4 6a25 	vfma.f32	s12, s8, s11
 8011566:	eeb1 7a47 	vneg.f32	s14, s14
 801156a:	ed8a 7a02 	vstr	s14, [sl, #8]
 801156e:	ee36 6a06 	vadd.f32	s12, s12, s12
 8011572:	ee76 6aa6 	vadd.f32	s13, s13, s13
 8011576:	eee5 7a24 	vfma.f32	s15, s10, s9
 801157a:	ed8a 5a01 	vstr	s10, [sl, #4]
 801157e:	2800      	cmp	r0, #0
 8011580:	d141      	bne.n	8011606 <output_update+0xee>
 8011582:	edc3 6a00 	vstr	s13, [r3]
 8011586:	edc3 7a02 	vstr	s15, [r3, #8]
 801158a:	ed83 6a01 	vstr	s12, [r3, #4]
 801158e:	ed9a 7a02 	vldr	s14, [sl, #8]
 8011592:	edda 6a03 	vldr	s13, [sl, #12]
 8011596:	edda 5a00 	vldr	s11, [sl]
 801159a:	ed9a 6a01 	vldr	s12, [sl, #4]
 801159e:	4bf2      	ldr	r3, [pc, #968]	; (8011968 <output_update+0x450>)
 80115a0:	ee67 7a26 	vmul.f32	s15, s14, s13
 80115a4:	ee65 baa5 	vmul.f32	s23, s11, s11
 80115a8:	eee5 7a86 	vfma.f32	s15, s11, s12
 80115ac:	ee26 aa06 	vmul.f32	s20, s12, s12
 80115b0:	ee67 9a07 	vmul.f32	s19, s14, s14
 80115b4:	ee37 8aa7 	vadd.f32	s16, s15, s15
 80115b8:	ee3b 7aca 	vsub.f32	s14, s23, s20
 80115bc:	edd3 aa00 	vldr	s21, [r3]
 80115c0:	ee26 9aa6 	vmul.f32	s18, s13, s13
 80115c4:	ee37 7a69 	vsub.f32	s14, s14, s19
 80115c8:	eeb4 8a6a 	vcmp.f32	s16, s21
 80115cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115d0:	ee37 7a09 	vadd.f32	s14, s14, s18
 80115d4:	d032      	beq.n	801163c <output_update+0x124>
 80115d6:	edd3 7a01 	vldr	s15, [r3, #4]
 80115da:	eeb4 8a67 	vcmp.f32	s16, s15
 80115de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115e2:	d02b      	beq.n	801163c <output_update+0x124>
 80115e4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80115e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115ec:	f040 81a4 	bne.w	8011938 <output_update+0x420>
 80115f0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80115f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115f8:	f340 81ef 	ble.w	80119da <output_update+0x4c2>
 80115fc:	ed9f badb 	vldr	s22, [pc, #876]	; 801196c <output_update+0x454>
 8011600:	ed9f 7adb 	vldr	s14, [pc, #876]	; 8011970 <output_update+0x458>
 8011604:	e04c      	b.n	80116a0 <output_update+0x188>
 8011606:	2801      	cmp	r0, #1
 8011608:	f000 8099 	beq.w	801173e <output_update+0x226>
 801160c:	ecbd 8b0a 	vpop	{d8-d12}
 8011610:	ed9f 6ae2 	vldr	s12, [pc, #904]	; 801199c <output_update+0x484>
 8011614:	edd2 6a00 	vldr	s13, [r2]
 8011618:	ed92 7a01 	vldr	s14, [r2, #4]
 801161c:	edd2 7a02 	vldr	s15, [r2, #8]
 8011620:	ee66 6a86 	vmul.f32	s13, s13, s12
 8011624:	ee27 7a06 	vmul.f32	s14, s14, s12
 8011628:	ee67 7a86 	vmul.f32	s15, s15, s12
 801162c:	edc2 6a00 	vstr	s13, [r2]
 8011630:	ed82 7a01 	vstr	s14, [r2, #4]
 8011634:	edc2 7a02 	vstr	s15, [r2, #8]
 8011638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801163c:	eeb4 7a6a 	vcmp.f32	s14, s21
 8011640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011644:	f040 811f 	bne.w	8011886 <output_update+0x36e>
 8011648:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801164c:	eddf 5ac9 	vldr	s11, [pc, #804]	; 8011974 <output_update+0x45c>
 8011650:	ed9f 4ac9 	vldr	s8, [pc, #804]	; 8011978 <output_update+0x460>
 8011654:	ed9f 6ac9 	vldr	s12, [pc, #804]	; 801197c <output_update+0x464>
 8011658:	eddf 4ac9 	vldr	s9, [pc, #804]	; 8011980 <output_update+0x468>
 801165c:	ed9f bac9 	vldr	s22, [pc, #804]	; 8011984 <output_update+0x46c>
 8011660:	ed9f 5ac9 	vldr	s10, [pc, #804]	; 8011988 <output_update+0x470>
 8011664:	eddf 6ac9 	vldr	s13, [pc, #804]	; 801198c <output_update+0x474>
 8011668:	eddf 7ac9 	vldr	s15, [pc, #804]	; 8011990 <output_update+0x478>
 801166c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011670:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8011674:	bfd8      	it	le
 8011676:	eef0 5a44 	vmovle.f32	s11, s8
 801167a:	bfd8      	it	le
 801167c:	eeb0 6a64 	vmovle.f32	s12, s9
 8011680:	bfd8      	it	le
 8011682:	eeb0 ba45 	vmovle.f32	s22, s10
 8011686:	bfd4      	ite	le
 8011688:	eeb0 7a67 	vmovle.f32	s14, s15
 801168c:	eeb0 7a66 	vmovgt.f32	s14, s13
 8011690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011694:	bfc8      	it	gt
 8011696:	eeb0 ba65 	vmovgt.f32	s22, s11
 801169a:	bfc8      	it	gt
 801169c:	eeb0 7a46 	vmovgt.f32	s14, s12
 80116a0:	ed84 7a00 	vstr	s14, [r4]
 80116a4:	edda 7a01 	vldr	s15, [sl, #4]
 80116a8:	ed9a 7a03 	vldr	s14, [sl, #12]
 80116ac:	edda 6a02 	vldr	s13, [sl, #8]
 80116b0:	ed9a 6a00 	vldr	s12, [sl]
 80116b4:	ee27 7a67 	vnmul.f32	s14, s14, s15
 80116b8:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 80116bc:	eea6 7a26 	vfma.f32	s14, s12, s13
 80116c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80116c4:	ee17 0a90 	vmov	r0, s15
 80116c8:	f7ee ff46 	bl	8000558 <__aeabi_f2d>
 80116cc:	f00a f894 	bl	801b7f8 <asin>
 80116d0:	f7ef fa72 	bl	8000bb8 <__aeabi_d2f>
 80116d4:	6060      	str	r0, [r4, #4]
 80116d6:	edda 7a03 	vldr	s15, [sl, #12]
 80116da:	ed9a 8a00 	vldr	s16, [sl]
 80116de:	edda 6a01 	vldr	s13, [sl, #4]
 80116e2:	ed9a 7a02 	vldr	s14, [sl, #8]
 80116e6:	ee28 8a27 	vmul.f32	s16, s16, s15
 80116ea:	ee79 7a89 	vadd.f32	s15, s19, s18
 80116ee:	eea6 8a87 	vfma.f32	s16, s13, s14
 80116f2:	ee77 7aeb 	vsub.f32	s15, s15, s23
 80116f6:	ee38 8a08 	vadd.f32	s16, s16, s16
 80116fa:	ee08 0a90 	vmov	s17, r0
 80116fe:	eeb4 8a6a 	vcmp.f32	s16, s21
 8011702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011706:	ee77 7aca 	vsub.f32	s15, s15, s20
 801170a:	f000 80c6 	beq.w	801189a <output_update+0x382>
 801170e:	4ba1      	ldr	r3, [pc, #644]	; (8011994 <output_update+0x47c>)
 8011710:	ed93 7a00 	vldr	s14, [r3]
 8011714:	eeb4 8a47 	vcmp.f32	s16, s14
 8011718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801171c:	f000 80bd 	beq.w	801189a <output_update+0x382>
 8011720:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011728:	f040 8140 	bne.w	80119ac <output_update+0x494>
 801172c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8011730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011734:	f340 8157 	ble.w	80119e6 <output_update+0x4ce>
 8011738:	eddf 7a8c 	vldr	s15, [pc, #560]	; 801196c <output_update+0x454>
 801173c:	e0d6      	b.n	80118ec <output_update+0x3d4>
 801173e:	eef1 7a67 	vneg.f32	s15, s15
 8011742:	ed83 6a00 	vstr	s12, [r3]
 8011746:	edc3 6a01 	vstr	s13, [r3, #4]
 801174a:	edc3 7a02 	vstr	s15, [r3, #8]
 801174e:	ed9a aa00 	vldr	s20, [sl]
 8011752:	edda 8a02 	vldr	s17, [sl, #8]
 8011756:	edda aa01 	vldr	s21, [sl, #4]
 801175a:	ed9a 8a03 	vldr	s16, [sl, #12]
 801175e:	ee2a 9a0a 	vmul.f32	s18, s20, s20
 8011762:	ee68 7aa8 	vmul.f32	s15, s17, s17
 8011766:	ee39 9a09 	vadd.f32	s18, s18, s18
 801176a:	eeb0 ca00 	vmov.f32	s24, #0	; 0x40000000  2.0
 801176e:	eeb0 7a49 	vmov.f32	s14, s18
 8011772:	eea7 7a8c 	vfma.f32	s14, s15, s24
 8011776:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
 801177a:	ee7b 7ac7 	vsub.f32	s15, s23, s14
 801177e:	eef1 8a68 	vneg.f32	s17, s17
 8011782:	ee17 0a90 	vmov	r0, s15
 8011786:	f7ee fee7 	bl	8000558 <__aeabi_f2d>
 801178a:	ee6a 7a2a 	vmul.f32	s15, s20, s21
 801178e:	4680      	mov	r8, r0
 8011790:	eee8 7a88 	vfma.f32	s15, s17, s16
 8011794:	4689      	mov	r9, r1
 8011796:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801179a:	ee17 0a90 	vmov	r0, s15
 801179e:	f7ee fedb 	bl	8000558 <__aeabi_f2d>
 80117a2:	4642      	mov	r2, r8
 80117a4:	464b      	mov	r3, r9
 80117a6:	f00a f87b 	bl	801b8a0 <atan2>
 80117aa:	f7ef fa05 	bl	8000bb8 <__aeabi_d2f>
 80117ae:	ee6a 7aaa 	vmul.f32	s15, s21, s21
 80117b2:	ee0b 0a10 	vmov	s22, r0
 80117b6:	eea7 9a8c 	vfma.f32	s18, s15, s24
 80117ba:	eef1 9a4b 	vneg.f32	s19, s22
 80117be:	ee7b 7ac9 	vsub.f32	s15, s23, s18
 80117c2:	edc4 9a00 	vstr	s19, [r4]
 80117c6:	ee17 0a90 	vmov	r0, s15
 80117ca:	f7ee fec5 	bl	8000558 <__aeabi_f2d>
 80117ce:	ee6a 7a88 	vmul.f32	s15, s21, s16
 80117d2:	4680      	mov	r8, r0
 80117d4:	eeea 7a28 	vfma.f32	s15, s20, s17
 80117d8:	4689      	mov	r9, r1
 80117da:	ee28 8a4a 	vnmul.f32	s16, s16, s20
 80117de:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80117e2:	eea8 8aaa 	vfma.f32	s16, s17, s21
 80117e6:	ee17 0a90 	vmov	r0, s15
 80117ea:	f7ee feb5 	bl	8000558 <__aeabi_f2d>
 80117ee:	4642      	mov	r2, r8
 80117f0:	464b      	mov	r3, r9
 80117f2:	f00a f855 	bl	801b8a0 <atan2>
 80117f6:	f7ef f9df 	bl	8000bb8 <__aeabi_d2f>
 80117fa:	ee07 0a90 	vmov	s15, r0
 80117fe:	eeb1 9a67 	vneg.f32	s18, s15
 8011802:	ee78 7a08 	vadd.f32	s15, s16, s16
 8011806:	ed84 9a01 	vstr	s18, [r4, #4]
 801180a:	ee17 0a90 	vmov	r0, s15
 801180e:	f7ee fea3 	bl	8000558 <__aeabi_f2d>
 8011812:	f009 fff1 	bl	801b7f8 <asin>
 8011816:	f7ef f9cf 	bl	8000bb8 <__aeabi_d2f>
 801181a:	eeb5 bac0 	vcmpe.f32	s22, #0.0
 801181e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011822:	ee07 0a90 	vmov	s15, r0
 8011826:	60a0      	str	r0, [r4, #8]
 8011828:	dd03      	ble.n	8011832 <output_update+0x31a>
 801182a:	eddf 9a5b 	vldr	s19, [pc, #364]	; 8011998 <output_update+0x480>
 801182e:	ee79 9acb 	vsub.f32	s19, s19, s22
 8011832:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 801199c <output_update+0x484>
 8011836:	ee69 9a87 	vmul.f32	s19, s19, s14
 801183a:	ee29 9a07 	vmul.f32	s18, s18, s14
 801183e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011842:	edc4 9a00 	vstr	s19, [r4]
 8011846:	ed84 9a01 	vstr	s18, [r4, #4]
 801184a:	edc4 7a02 	vstr	s15, [r4, #8]
 801184e:	ed97 7a01 	vldr	s14, [r7, #4]
 8011852:	edd5 7a00 	vldr	s15, [r5]
 8011856:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801185a:	ecbd 8b0a 	vpop	{d8-d12}
 801185e:	edc6 7a00 	vstr	s15, [r6]
 8011862:	ed97 7a00 	vldr	s14, [r7]
 8011866:	edd5 7a01 	vldr	s15, [r5, #4]
 801186a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801186e:	edc6 7a01 	vstr	s15, [r6, #4]
 8011872:	edd5 7a02 	vldr	s15, [r5, #8]
 8011876:	ed97 7a02 	vldr	s14, [r7, #8]
 801187a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801187e:	edc6 7a02 	vstr	s15, [r6, #8]
 8011882:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011886:	4b43      	ldr	r3, [pc, #268]	; (8011994 <output_update+0x47c>)
 8011888:	edd3 7a00 	vldr	s15, [r3]
 801188c:	eeb4 7a67 	vcmp.f32	s14, s15
 8011890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011894:	f47f aea6 	bne.w	80115e4 <output_update+0xcc>
 8011898:	e6d6      	b.n	8011648 <output_update+0x130>
 801189a:	eef4 7a6a 	vcmp.f32	s15, s21
 801189e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118a2:	d008      	beq.n	80118b6 <output_update+0x39e>
 80118a4:	4b3b      	ldr	r3, [pc, #236]	; (8011994 <output_update+0x47c>)
 80118a6:	ed93 7a00 	vldr	s14, [r3]
 80118aa:	eef4 7a47 	vcmp.f32	s15, s14
 80118ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118b2:	f47f af35 	bne.w	8011720 <output_update+0x208>
 80118b6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80118ba:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8011974 <output_update+0x45c>
 80118be:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8011978 <output_update+0x460>
 80118c2:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8011984 <output_update+0x46c>
 80118c6:	ed9f 6a30 	vldr	s12, [pc, #192]	; 8011988 <output_update+0x470>
 80118ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118ce:	eef5 7a40 	vcmp.f32	s15, #0.0
 80118d2:	bfd8      	it	le
 80118d4:	eef0 6a65 	vmovle.f32	s13, s11
 80118d8:	bfd4      	ite	le
 80118da:	eef0 7a46 	vmovle.f32	s15, s12
 80118de:	eef0 7a47 	vmovgt.f32	s15, s14
 80118e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118e6:	bfc8      	it	gt
 80118e8:	eef0 7a66 	vmovgt.f32	s15, s13
 80118ec:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 801199c <output_update+0x484>
 80118f0:	ed84 ba00 	vstr	s22, [r4]
 80118f4:	ee68 8a87 	vmul.f32	s17, s17, s14
 80118f8:	edc4 7a02 	vstr	s15, [r4, #8]
 80118fc:	edc4 8a01 	vstr	s17, [r4, #4]
 8011900:	ed97 7a00 	vldr	s14, [r7]
 8011904:	edd5 7a00 	vldr	s15, [r5]
 8011908:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801190c:	ecbd 8b0a 	vpop	{d8-d12}
 8011910:	edc6 7a00 	vstr	s15, [r6]
 8011914:	ed97 7a01 	vldr	s14, [r7, #4]
 8011918:	edd5 7a01 	vldr	s15, [r5, #4]
 801191c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011920:	edc6 7a01 	vstr	s15, [r6, #4]
 8011924:	edd5 7a02 	vldr	s15, [r5, #8]
 8011928:	ed97 7a02 	vldr	s14, [r7, #8]
 801192c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011930:	edc6 7a02 	vstr	s15, [r6, #8]
 8011934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011938:	ee17 0a10 	vmov	r0, s14
 801193c:	f7ee fe0c 	bl	8000558 <__aeabi_f2d>
 8011940:	4680      	mov	r8, r0
 8011942:	4689      	mov	r9, r1
 8011944:	ee18 0a10 	vmov	r0, s16
 8011948:	f7ee fe06 	bl	8000558 <__aeabi_f2d>
 801194c:	4642      	mov	r2, r8
 801194e:	464b      	mov	r3, r9
 8011950:	f009 ffa6 	bl	801b8a0 <atan2>
 8011954:	f7ef f930 	bl	8000bb8 <__aeabi_d2f>
 8011958:	ed9f ba10 	vldr	s22, [pc, #64]	; 801199c <output_update+0x484>
 801195c:	ee07 0a10 	vmov	s14, r0
 8011960:	ee27 ba0b 	vmul.f32	s22, s14, s22
 8011964:	e69c      	b.n	80116a0 <output_update+0x188>
 8011966:	bf00      	nop
 8011968:	200017d8 	.word	0x200017d8
 801196c:	42b40000 	.word	0x42b40000
 8011970:	3fc90fdb 	.word	0x3fc90fdb
 8011974:	42340000 	.word	0x42340000
 8011978:	c2340000 	.word	0xc2340000
 801197c:	3f490fdb 	.word	0x3f490fdb
 8011980:	bf490fdb 	.word	0xbf490fdb
 8011984:	43070000 	.word	0x43070000
 8011988:	c3070000 	.word	0xc3070000
 801198c:	4016cbe4 	.word	0x4016cbe4
 8011990:	c016cbe4 	.word	0xc016cbe4
 8011994:	200017dc 	.word	0x200017dc
 8011998:	40c90e56 	.word	0x40c90e56
 801199c:	42652ee1 	.word	0x42652ee1
 80119a0:	00000000 	.word	0x00000000
 80119a4:	bfc90fdb 	.word	0xbfc90fdb
 80119a8:	c2b40000 	.word	0xc2b40000
 80119ac:	ee17 0a90 	vmov	r0, s15
 80119b0:	f7ee fdd2 	bl	8000558 <__aeabi_f2d>
 80119b4:	4680      	mov	r8, r0
 80119b6:	4689      	mov	r9, r1
 80119b8:	ee18 0a10 	vmov	r0, s16
 80119bc:	f7ee fdcc 	bl	8000558 <__aeabi_f2d>
 80119c0:	4642      	mov	r2, r8
 80119c2:	464b      	mov	r3, r9
 80119c4:	f009 ff6c 	bl	801b8a0 <atan2>
 80119c8:	f7ef f8f6 	bl	8000bb8 <__aeabi_d2f>
 80119cc:	ed5f 7a0d 	vldr	s15, [pc, #-52]	; 801199c <output_update+0x484>
 80119d0:	ee07 0a10 	vmov	s14, r0
 80119d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80119d8:	e788      	b.n	80118ec <output_update+0x3d4>
 80119da:	d408      	bmi.n	80119ee <output_update+0x4d6>
 80119dc:	ed1f ba10 	vldr	s22, [pc, #-64]	; 80119a0 <output_update+0x488>
 80119e0:	eeb0 7a4b 	vmov.f32	s14, s22
 80119e4:	e65c      	b.n	80116a0 <output_update+0x188>
 80119e6:	d407      	bmi.n	80119f8 <output_update+0x4e0>
 80119e8:	ed5f 7a13 	vldr	s15, [pc, #-76]	; 80119a0 <output_update+0x488>
 80119ec:	e77e      	b.n	80118ec <output_update+0x3d4>
 80119ee:	ed1f ba12 	vldr	s22, [pc, #-72]	; 80119a8 <output_update+0x490>
 80119f2:	ed1f 7a14 	vldr	s14, [pc, #-80]	; 80119a4 <output_update+0x48c>
 80119f6:	e653      	b.n	80116a0 <output_update+0x188>
 80119f8:	ed5f 7a15 	vldr	s15, [pc, #-84]	; 80119a8 <output_update+0x490>
 80119fc:	e776      	b.n	80118ec <output_update+0x3d4>
 80119fe:	bf00      	nop

08011a00 <MEMS_runMagCal.constprop.14>:
 8011a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a04:	ed2d 8b0c 	vpush	{d8-d13}
 8011a08:	f8df b408 	ldr.w	fp, [pc, #1032]	; 8011e14 <MEMS_runMagCal.constprop.14+0x414>
 8011a0c:	f2ad 5d6c 	subw	sp, sp, #1388	; 0x56c
 8011a10:	2382      	movs	r3, #130	; 0x82
 8011a12:	461a      	mov	r2, r3
 8011a14:	f50b 608c 	add.w	r0, fp, #1120	; 0x460
 8011a18:	ac56      	add	r4, sp, #344	; 0x158
 8011a1a:	a917      	add	r1, sp, #92	; 0x5c
 8011a1c:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
 8011a20:	9419      	str	r4, [sp, #100]	; 0x64
 8011a22:	f7fe f977 	bl	800fd14 <MEMS_getSensorData_I16>
 8011a26:	f8bd 0060 	ldrh.w	r0, [sp, #96]	; 0x60
 8011a2a:	f9bb 2462 	ldrsh.w	r2, [fp, #1122]	; 0x462
 8011a2e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011a30:	f100 39ff 	add.w	r9, r0, #4294967295
 8011a34:	fb02 3209 	mla	r2, r2, r9, r3
 8011a38:	9209      	str	r2, [sp, #36]	; 0x24
 8011a3a:	f8cb 24ac 	str.w	r2, [fp, #1196]	; 0x4ac
 8011a3e:	2800      	cmp	r0, #0
 8011a40:	f000 8275 	beq.w	8011f2e <MEMS_runMagCal.constprop.14+0x52e>
 8011a44:	f8db 347c 	ldr.w	r3, [fp, #1148]	; 0x47c
 8011a48:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8011a4c:	f502 32c3 	add.w	r2, r2, #99840	; 0x18600
 8011a50:	fb01 f103 	mul.w	r1, r1, r3
 8011a54:	32a0      	adds	r2, #160	; 0xa0
 8011a56:	428a      	cmp	r2, r1
 8011a58:	f080 826f 	bcs.w	8011f3a <MEMS_runMagCal.constprop.14+0x53a>
 8011a5c:	2200      	movs	r2, #0
 8011a5e:	f88b 2500 	strb.w	r2, [fp, #1280]	; 0x500
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	f040 8274 	bne.w	8011f50 <MEMS_runMagCal.constprop.14+0x550>
 8011a68:	f8cb 347c 	str.w	r3, [fp, #1148]	; 0x47c
 8011a6c:	2200      	movs	r2, #0
 8011a6e:	f8cb 3478 	str.w	r3, [fp, #1144]	; 0x478
 8011a72:	f8cb 2480 	str.w	r2, [fp, #1152]	; 0x480
 8011a76:	2300      	movs	r3, #0
 8011a78:	22ff      	movs	r2, #255	; 0xff
 8011a7a:	f8cb 3508 	str.w	r3, [fp, #1288]	; 0x508
 8011a7e:	f8cb 350c 	str.w	r3, [fp, #1292]	; 0x50c
 8011a82:	f8cb 3510 	str.w	r3, [fp, #1296]	; 0x510
 8011a86:	f8cb 3514 	str.w	r3, [fp, #1300]	; 0x514
 8011a8a:	f8cb 351c 	str.w	r3, [fp, #1308]	; 0x51c
 8011a8e:	f8cb 3518 	str.w	r3, [fp, #1304]	; 0x518
 8011a92:	f88b 2502 	strb.w	r2, [fp, #1282]	; 0x502
 8011a96:	4bdb      	ldr	r3, [pc, #876]	; (8011e04 <MEMS_runMagCal.constprop.14+0x404>)
 8011a98:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8011a9c:	4fda      	ldr	r7, [pc, #872]	; (8011e08 <MEMS_runMagCal.constprop.14+0x408>)
 8011a9e:	eddf 7adb 	vldr	s15, [pc, #876]	; 8011e0c <MEMS_runMagCal.constprop.14+0x40c>
 8011aa2:	edd3 2a01 	vldr	s5, [r3, #4]
 8011aa6:	edd3 5a1f 	vldr	s11, [r3, #124]	; 0x7c
 8011aaa:	ed93 5a1c 	vldr	s10, [r3, #112]	; 0x70
 8011aae:	edd3 4a23 	vldr	s9, [r3, #140]	; 0x8c
 8011ab2:	ed93 4a1d 	vldr	s8, [r3, #116]	; 0x74
 8011ab6:	edd3 3a27 	vldr	s7, [r3, #156]	; 0x9c
 8011aba:	ed93 3a1e 	vldr	s6, [r3, #120]	; 0x78
 8011abe:	9002      	str	r0, [sp, #8]
 8011ac0:	f04f 0c00 	mov.w	ip, #0
 8011ac4:	fa1f f989 	uxth.w	r9, r9
 8011ac8:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8011acc:	464d      	mov	r5, r9
 8011ace:	e9cd cc04 	strd	ip, ip, [sp, #16]
 8011ad2:	e9cd cc06 	strd	ip, ip, [sp, #24]
 8011ad6:	f06f 2480 	mvn.w	r4, #2147516416	; 0x80008000
 8011ada:	f04f 2280 	mov.w	r2, #2147516416	; 0x80008000
 8011ade:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011ae2:	468e      	mov	lr, r1
 8011ae4:	2d03      	cmp	r5, #3
 8011ae6:	9446      	str	r4, [sp, #280]	; 0x118
 8011ae8:	9236      	str	r2, [sp, #216]	; 0xd8
 8011aea:	f8ad 30dc 	strh.w	r3, [sp, #220]	; 0xdc
 8011aee:	f8cd a020 	str.w	sl, [sp, #32]
 8011af2:	4653      	mov	r3, sl
 8011af4:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8011af8:	eeb0 7a67 	vmov.f32	s14, s15
 8011afc:	f8ad 111c 	strh.w	r1, [sp, #284]	; 0x11c
 8011b00:	9101      	str	r1, [sp, #4]
 8011b02:	4688      	mov	r8, r1
 8011b04:	bf28      	it	cs
 8011b06:	2503      	movcs	r5, #3
 8011b08:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 8011b0c:	9700      	str	r7, [sp, #0]
 8011b0e:	f8cd c00c 	str.w	ip, [sp, #12]
 8011b12:	4662      	mov	r2, ip
 8011b14:	4666      	mov	r6, ip
 8011b16:	4664      	mov	r4, ip
 8011b18:	4638      	mov	r0, r7
 8011b1a:	46f1      	mov	r9, lr
 8011b1c:	46ba      	mov	sl, r7
 8011b1e:	7819      	ldrb	r1, [r3, #0]
 8011b20:	2900      	cmp	r1, #0
 8011b22:	d047      	beq.n	8011bb4 <MEMS_runMagCal.constprop.14+0x1b4>
 8011b24:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8011b28:	4297      	cmp	r7, r2
 8011b2a:	f106 0601 	add.w	r6, r6, #1
 8011b2e:	bfbc      	itt	lt
 8011b30:	4617      	movlt	r7, r2
 8011b32:	f04f 0c01 	movlt.w	ip, #1
 8011b36:	4596      	cmp	lr, r2
 8011b38:	b276      	sxtb	r6, r6
 8011b3a:	dd02      	ble.n	8011b42 <MEMS_runMagCal.constprop.14+0x142>
 8011b3c:	2101      	movs	r1, #1
 8011b3e:	4696      	mov	lr, r2
 8011b40:	9104      	str	r1, [sp, #16]
 8011b42:	ee07 2a90 	vmov	s15, r2
 8011b46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011b4a:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8011b4e:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8011b52:	4290      	cmp	r0, r2
 8011b54:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8011b58:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8011b5c:	da02      	bge.n	8011b64 <MEMS_runMagCal.constprop.14+0x164>
 8011b5e:	2101      	movs	r1, #1
 8011b60:	4610      	mov	r0, r2
 8011b62:	9105      	str	r1, [sp, #20]
 8011b64:	4591      	cmp	r9, r2
 8011b66:	dd02      	ble.n	8011b6e <MEMS_runMagCal.constprop.14+0x16e>
 8011b68:	2101      	movs	r1, #1
 8011b6a:	4691      	mov	r9, r2
 8011b6c:	9106      	str	r1, [sp, #24]
 8011b6e:	ee06 2a90 	vmov	s13, r2
 8011b72:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8011b76:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8011b7a:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8011b7e:	4552      	cmp	r2, sl
 8011b80:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8011b84:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8011b88:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011b8c:	dd02      	ble.n	8011b94 <MEMS_runMagCal.constprop.14+0x194>
 8011b8e:	2101      	movs	r1, #1
 8011b90:	4692      	mov	sl, r2
 8011b92:	9107      	str	r1, [sp, #28]
 8011b94:	4542      	cmp	r2, r8
 8011b96:	da02      	bge.n	8011b9e <MEMS_runMagCal.constprop.14+0x19e>
 8011b98:	2101      	movs	r1, #1
 8011b9a:	4690      	mov	r8, r2
 8011b9c:	9103      	str	r1, [sp, #12]
 8011b9e:	ee07 2a90 	vmov	s15, r2
 8011ba2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011ba6:	2201      	movs	r2, #1
 8011ba8:	ee77 7ac3 	vsub.f32	s15, s15, s6
 8011bac:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8011bb0:	eea7 7aa7 	vfma.f32	s14, s15, s15
 8011bb4:	3401      	adds	r4, #1
 8011bb6:	b2a4      	uxth	r4, r4
 8011bb8:	42ac      	cmp	r4, r5
 8011bba:	f103 0308 	add.w	r3, r3, #8
 8011bbe:	d9ae      	bls.n	8011b1e <MEMS_runMagCal.constprop.14+0x11e>
 8011bc0:	9000      	str	r0, [sp, #0]
 8011bc2:	9802      	ldr	r0, [sp, #8]
 8011bc4:	f8cd 9004 	str.w	r9, [sp, #4]
 8011bc8:	42a0      	cmp	r0, r4
 8011bca:	f8cd a008 	str.w	sl, [sp, #8]
 8011bce:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8011bd2:	f8dd a020 	ldr.w	sl, [sp, #32]
 8011bd6:	f240 81bf 	bls.w	8011f58 <MEMS_runMagCal.constprop.14+0x558>
 8011bda:	eba9 0904 	sub.w	r9, r9, r4
 8011bde:	fa14 f989 	uxtah	r9, r4, r9
 8011be2:	eb0a 04c4 	add.w	r4, sl, r4, lsl #3
 8011be6:	f1aa 0a16 	sub.w	sl, sl, #22
 8011bea:	eb0a 09c9 	add.w	r9, sl, r9, lsl #3
 8011bee:	3c1e      	subs	r4, #30
 8011bf0:	f04f 0a00 	mov.w	sl, #0
 8011bf4:	f8cd c020 	str.w	ip, [sp, #32]
 8011bf8:	7fa3      	ldrb	r3, [r4, #30]
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	f000 8092 	beq.w	8011d24 <MEMS_runMagCal.constprop.14+0x324>
 8011c00:	f9b4 1020 	ldrsh.w	r1, [r4, #32]
 8011c04:	3601      	adds	r6, #1
 8011c06:	42b9      	cmp	r1, r7
 8011c08:	b276      	sxtb	r6, r6
 8011c0a:	dd02      	ble.n	8011c12 <MEMS_runMagCal.constprop.14+0x212>
 8011c0c:	2301      	movs	r3, #1
 8011c0e:	460f      	mov	r7, r1
 8011c10:	9308      	str	r3, [sp, #32]
 8011c12:	4571      	cmp	r1, lr
 8011c14:	da02      	bge.n	8011c1c <MEMS_runMagCal.constprop.14+0x21c>
 8011c16:	2301      	movs	r3, #1
 8011c18:	468e      	mov	lr, r1
 8011c1a:	9304      	str	r3, [sp, #16]
 8011c1c:	ee07 1a90 	vmov	s15, r1
 8011c20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011c24:	f9b4 2022 	ldrsh.w	r2, [r4, #34]	; 0x22
 8011c28:	9b00      	ldr	r3, [sp, #0]
 8011c2a:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8011c2e:	429a      	cmp	r2, r3
 8011c30:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8011c34:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8011c38:	dd02      	ble.n	8011c40 <MEMS_runMagCal.constprop.14+0x240>
 8011c3a:	2301      	movs	r3, #1
 8011c3c:	9200      	str	r2, [sp, #0]
 8011c3e:	9305      	str	r3, [sp, #20]
 8011c40:	9b01      	ldr	r3, [sp, #4]
 8011c42:	429a      	cmp	r2, r3
 8011c44:	da02      	bge.n	8011c4c <MEMS_runMagCal.constprop.14+0x24c>
 8011c46:	2301      	movs	r3, #1
 8011c48:	9201      	str	r2, [sp, #4]
 8011c4a:	9306      	str	r3, [sp, #24]
 8011c4c:	ee06 2a90 	vmov	s13, r2
 8011c50:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8011c54:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	; 0x24
 8011c58:	9802      	ldr	r0, [sp, #8]
 8011c5a:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8011c5e:	4283      	cmp	r3, r0
 8011c60:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8011c64:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8011c68:	ee37 6a87 	vadd.f32	s12, s15, s14
 8011c6c:	dd02      	ble.n	8011c74 <MEMS_runMagCal.constprop.14+0x274>
 8011c6e:	2001      	movs	r0, #1
 8011c70:	9302      	str	r3, [sp, #8]
 8011c72:	9007      	str	r0, [sp, #28]
 8011c74:	4543      	cmp	r3, r8
 8011c76:	da02      	bge.n	8011c7e <MEMS_runMagCal.constprop.14+0x27e>
 8011c78:	2001      	movs	r0, #1
 8011c7a:	4698      	mov	r8, r3
 8011c7c:	9003      	str	r0, [sp, #12]
 8011c7e:	f9b4 c008 	ldrsh.w	ip, [r4, #8]
 8011c82:	f9b4 5000 	ldrsh.w	r5, [r4]
 8011c86:	f9b4 0018 	ldrsh.w	r0, [r4, #24]
 8011c8a:	1b49      	subs	r1, r1, r5
 8011c8c:	eba0 000c 	sub.w	r0, r0, ip
 8011c90:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8011c94:	ee07 0a90 	vmov	s15, r0
 8011c98:	f9b4 101a 	ldrsh.w	r1, [r4, #26]
 8011c9c:	f9b4 c00a 	ldrsh.w	ip, [r4, #10]
 8011ca0:	f9b4 5002 	ldrsh.w	r5, [r4, #2]
 8011ca4:	f9b4 001c 	ldrsh.w	r0, [r4, #28]
 8011ca8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8011cac:	1b52      	subs	r2, r2, r5
 8011cae:	eba1 010c 	sub.w	r1, r1, ip
 8011cb2:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8011cb6:	eeb0 7ac7 	vabs.f32	s14, s14
 8011cba:	ee07 1a90 	vmov	s15, r1
 8011cbe:	eefc 6ac7 	vcvt.u32.f32	s13, s14
 8011cc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011cc6:	eeb8 7a66 	vcvt.f32.u32	s14, s13
 8011cca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011cce:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8011cd2:	eef0 7ae7 	vabs.f32	s15, s15
 8011cd6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011cda:	1a80      	subs	r0, r0, r2
 8011cdc:	ee07 3a90 	vmov	s15, r3
 8011ce0:	1a59      	subs	r1, r3, r1
 8011ce2:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8011ce6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8011cea:	ee07 0a90 	vmov	s15, r0
 8011cee:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8011cf2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011cf6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8011cfa:	eef0 7ae7 	vabs.f32	s15, s15
 8011cfe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011d02:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8011d06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011d0a:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8011d0e:	eeb0 7a46 	vmov.f32	s14, s12
 8011d12:	ee17 3a90 	vmov	r3, s15
 8011d16:	eea6 7aa6 	vfma.f32	s14, s13, s13
 8011d1a:	459a      	cmp	sl, r3
 8011d1c:	f04f 0201 	mov.w	r2, #1
 8011d20:	bf38      	it	cc
 8011d22:	469a      	movcc	sl, r3
 8011d24:	3408      	adds	r4, #8
 8011d26:	45a1      	cmp	r9, r4
 8011d28:	f47f af66 	bne.w	8011bf8 <MEMS_runMagCal.constprop.14+0x1f8>
 8011d2c:	f8dd c020 	ldr.w	ip, [sp, #32]
 8011d30:	eddf 7a36 	vldr	s15, [pc, #216]	; 8011e0c <MEMS_runMagCal.constprop.14+0x40c>
 8011d34:	9b03      	ldr	r3, [sp, #12]
 8011d36:	2a00      	cmp	r2, #0
 8011d38:	bf08      	it	eq
 8011d3a:	eeb0 7a67 	vmoveq.f32	s14, s15
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	f040 810d 	bne.w	8011f5e <MEMS_runMagCal.constprop.14+0x55e>
 8011d44:	9b07      	ldr	r3, [sp, #28]
 8011d46:	b113      	cbz	r3, 8011d4e <MEMS_runMagCal.constprop.14+0x34e>
 8011d48:	9b02      	ldr	r3, [sp, #8]
 8011d4a:	f8ad 30dc 	strh.w	r3, [sp, #220]	; 0xdc
 8011d4e:	9b06      	ldr	r3, [sp, #24]
 8011d50:	b113      	cbz	r3, 8011d58 <MEMS_runMagCal.constprop.14+0x358>
 8011d52:	9b01      	ldr	r3, [sp, #4]
 8011d54:	f8ad 311a 	strh.w	r3, [sp, #282]	; 0x11a
 8011d58:	9b05      	ldr	r3, [sp, #20]
 8011d5a:	b113      	cbz	r3, 8011d62 <MEMS_runMagCal.constprop.14+0x362>
 8011d5c:	9b00      	ldr	r3, [sp, #0]
 8011d5e:	f8ad 30da 	strh.w	r3, [sp, #218]	; 0xda
 8011d62:	9b04      	ldr	r3, [sp, #16]
 8011d64:	b10b      	cbz	r3, 8011d6a <MEMS_runMagCal.constprop.14+0x36a>
 8011d66:	f8ad e118 	strh.w	lr, [sp, #280]	; 0x118
 8011d6a:	f1bc 0f00 	cmp.w	ip, #0
 8011d6e:	f041 81fb 	bne.w	8013168 <MEMS_runMagCal.constprop.14+0x1768>
 8011d72:	4f25      	ldr	r7, [pc, #148]	; (8011e08 <MEMS_runMagCal.constprop.14+0x408>)
 8011d74:	2e00      	cmp	r6, #0
 8011d76:	f000 80f5 	beq.w	8011f64 <MEMS_runMagCal.constprop.14+0x564>
 8011d7a:	f9bd 30d8 	ldrsh.w	r3, [sp, #216]	; 0xd8
 8011d7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011d82:	f280 81b1 	bge.w	80120e8 <MEMS_runMagCal.constprop.14+0x6e8>
 8011d86:	f9bd 0118 	ldrsh.w	r0, [sp, #280]	; 0x118
 8011d8a:	f510 4f80 	cmn.w	r0, #16384	; 0x4000
 8011d8e:	f2c0 81ab 	blt.w	80120e8 <MEMS_runMagCal.constprop.14+0x6e8>
 8011d92:	f9bd 30da 	ldrsh.w	r3, [sp, #218]	; 0xda
 8011d96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011d9a:	f280 81a5 	bge.w	80120e8 <MEMS_runMagCal.constprop.14+0x6e8>
 8011d9e:	f9bd 211a 	ldrsh.w	r2, [sp, #282]	; 0x11a
 8011da2:	f512 4f80 	cmn.w	r2, #16384	; 0x4000
 8011da6:	f2c0 819f 	blt.w	80120e8 <MEMS_runMagCal.constprop.14+0x6e8>
 8011daa:	f9bd 10dc 	ldrsh.w	r1, [sp, #220]	; 0xdc
 8011dae:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8011db2:	f280 8199 	bge.w	80120e8 <MEMS_runMagCal.constprop.14+0x6e8>
 8011db6:	f9bd 411c 	ldrsh.w	r4, [sp, #284]	; 0x11c
 8011dba:	f514 4f80 	cmn.w	r4, #16384	; 0x4000
 8011dbe:	f2c0 8193 	blt.w	80120e8 <MEMS_runMagCal.constprop.14+0x6e8>
 8011dc2:	ee07 6a90 	vmov	s15, r6
 8011dc6:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8011dca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011dce:	eec7 7a06 	vdiv.f32	s15, s14, s12
 8011dd2:	1a9a      	subs	r2, r3, r2
 8011dd4:	1b09      	subs	r1, r1, r4
 8011dd6:	428a      	cmp	r2, r1
 8011dd8:	4613      	mov	r3, r2
 8011dda:	eba7 0700 	sub.w	r7, r7, r0
 8011dde:	bfb8      	it	lt
 8011de0:	460b      	movlt	r3, r1
 8011de2:	42bb      	cmp	r3, r7
 8011de4:	bfb8      	it	lt
 8011de6:	463b      	movlt	r3, r7
 8011de8:	ee86 6aa2 	vdiv.f32	s12, s13, s5
 8011dec:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8011df0:	ee06 3a90 	vmov	s13, r3
 8011df4:	eddf 7a06 	vldr	s15, [pc, #24]	; 8011e10 <MEMS_runMagCal.constprop.14+0x410>
 8011df8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8011dfc:	ee66 7a27 	vmul.f32	s15, s12, s15
 8011e00:	e010      	b.n	8011e24 <MEMS_runMagCal.constprop.14+0x424>
 8011e02:	bf00      	nop
 8011e04:	20001828 	.word	0x20001828
 8011e08:	ffff8000 	.word	0xffff8000
 8011e0c:	00000000 	.word	0x00000000
 8011e10:	43020000 	.word	0x43020000
 8011e14:	200013c8 	.word	0x200013c8
 8011e18:	447a0000 	.word	0x447a0000
 8011e1c:	42c80000 	.word	0x42c80000
 8011e20:	477fff00 	.word	0x477fff00
 8011e24:	ee22 7a87 	vmul.f32	s14, s5, s14
 8011e28:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e30:	f100 815a 	bmi.w	80120e8 <MEMS_runMagCal.constprop.14+0x6e8>
 8011e34:	ee07 aa90 	vmov	s15, sl
 8011e38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011e3c:	ed5f 5a0a 	vldr	s11, [pc, #-40]	; 8011e18 <MEMS_runMagCal.constprop.14+0x418>
 8011e40:	ee67 2aa2 	vmul.f32	s5, s15, s5
 8011e44:	eef4 2ae5 	vcmpe.f32	s5, s11
 8011e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e4c:	f300 814c 	bgt.w	80120e8 <MEMS_runMagCal.constprop.14+0x6e8>
 8011e50:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 8011e54:	ee26 6a27 	vmul.f32	s12, s12, s15
 8011e58:	eeb4 6ae6 	vcmpe.f32	s12, s13
 8011e5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e60:	f300 84ff 	bgt.w	8012862 <MEMS_runMagCal.constprop.14+0xe62>
 8011e64:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 8011e68:	ee66 7a27 	vmul.f32	s15, s12, s15
 8011e6c:	eef4 6ae7 	vcmpe.f32	s13, s15
 8011e70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e74:	f340 84fb 	ble.w	801286e <MEMS_runMagCal.constprop.14+0xe6e>
 8011e78:	ee07 7a90 	vmov	s15, r7
 8011e7c:	ee36 6a06 	vadd.f32	s12, s12, s12
 8011e80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011e84:	eef4 7ac6 	vcmpe.f32	s15, s12
 8011e88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e8c:	f340 84ef 	ble.w	801286e <MEMS_runMagCal.constprop.14+0xe6e>
 8011e90:	ee07 2a90 	vmov	s15, r2
 8011e94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011e98:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8011e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ea0:	f140 84e5 	bpl.w	801286e <MEMS_runMagCal.constprop.14+0xe6e>
 8011ea4:	ee07 1a90 	vmov	s15, r1
 8011ea8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011eac:	f04f 0900 	mov.w	r9, #0
 8011eb0:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8011eb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011eb8:	bf4c      	ite	mi
 8011eba:	f04f 0a01 	movmi.w	sl, #1
 8011ebe:	46ca      	movpl	sl, r9
 8011ec0:	ed5f 6a2a 	vldr	s13, [pc, #-168]	; 8011e1c <MEMS_runMagCal.constprop.14+0x41c>
 8011ec4:	ed5f 7a2a 	vldr	s15, [pc, #-168]	; 8011e20 <MEMS_runMagCal.constprop.14+0x420>
 8011ec8:	f89b 54cc 	ldrb.w	r5, [fp, #1228]	; 0x4cc
 8011ecc:	ee27 7a26 	vmul.f32	s14, s14, s13
 8011ed0:	2300      	movs	r3, #0
 8011ed2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011eda:	bf88      	it	hi
 8011edc:	eeb0 7a67 	vmovhi.f32	s14, s15
 8011ee0:	2d01      	cmp	r5, #1
 8011ee2:	ed8d 7a0d 	vstr	s14, [sp, #52]	; 0x34
 8011ee6:	9300      	str	r3, [sp, #0]
 8011ee8:	d955      	bls.n	8011f96 <MEMS_runMagCal.constprop.14+0x596>
 8011eea:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8011eee:	edcd 7a01 	vstr	s15, [sp, #4]
 8011ef2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8011ef6:	3bc8      	subs	r3, #200	; 0xc8
 8011ef8:	b29b      	uxth	r3, r3
 8011efa:	f644 422c 	movw	r2, #19500	; 0x4c2c
 8011efe:	4293      	cmp	r3, r2
 8011f00:	d909      	bls.n	8011f16 <MEMS_runMagCal.constprop.14+0x516>
 8011f02:	2500      	movs	r5, #0
 8011f04:	23ff      	movs	r3, #255	; 0xff
 8011f06:	f88b 54cc 	strb.w	r5, [fp, #1228]	; 0x4cc
 8011f0a:	f88b 5500 	strb.w	r5, [fp, #1280]	; 0x500
 8011f0e:	f88b 54b4 	strb.w	r5, [fp, #1204]	; 0x4b4
 8011f12:	f88b 3502 	strb.w	r3, [fp, #1282]	; 0x502
 8011f16:	9b00      	ldr	r3, [sp, #0]
 8011f18:	2b02      	cmp	r3, #2
 8011f1a:	d13c      	bne.n	8011f96 <MEMS_runMagCal.constprop.14+0x596>
 8011f1c:	2200      	movs	r2, #0
 8011f1e:	23ff      	movs	r3, #255	; 0xff
 8011f20:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011f22:	f8cb 1480 	str.w	r1, [fp, #1152]	; 0x480
 8011f26:	f88b 2500 	strb.w	r2, [fp, #1280]	; 0x500
 8011f2a:	f88b 3502 	strb.w	r3, [fp, #1282]	; 0x502
 8011f2e:	f20d 5d6c 	addw	sp, sp, #1388	; 0x56c
 8011f32:	ecbd 8b0c 	vpop	{d8-d13}
 8011f36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f3a:	f8db 1504 	ldr.w	r1, [fp, #1284]	; 0x504
 8011f3e:	428a      	cmp	r2, r1
 8011f40:	f4ff ad8c 	bcc.w	8011a5c <MEMS_runMagCal.constprop.14+0x5c>
 8011f44:	f89b 3500 	ldrb.w	r3, [fp, #1280]	; 0x500
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	f47f ada4 	bne.w	8011a96 <MEMS_runMagCal.constprop.14+0x96>
 8011f4e:	e592      	b.n	8011a76 <MEMS_runMagCal.constprop.14+0x76>
 8011f50:	2301      	movs	r3, #1
 8011f52:	f8cb 347c 	str.w	r3, [fp, #1148]	; 0x47c
 8011f56:	e589      	b.n	8011a6c <MEMS_runMagCal.constprop.14+0x6c>
 8011f58:	f04f 0a00 	mov.w	sl, #0
 8011f5c:	e6e8      	b.n	8011d30 <MEMS_runMagCal.constprop.14+0x330>
 8011f5e:	f8ad 811c 	strh.w	r8, [sp, #284]	; 0x11c
 8011f62:	e6ef      	b.n	8011d44 <MEMS_runMagCal.constprop.14+0x344>
 8011f64:	ed5f 6a53 	vldr	s13, [pc, #-332]	; 8011e1c <MEMS_runMagCal.constprop.14+0x41c>
 8011f68:	ed5f 7a53 	vldr	s15, [pc, #-332]	; 8011e20 <MEMS_runMagCal.constprop.14+0x420>
 8011f6c:	f89b 54cc 	ldrb.w	r5, [fp, #1228]	; 0x4cc
 8011f70:	ee27 7a26 	vmul.f32	s14, s14, s13
 8011f74:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011f78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f7c:	bf88      	it	hi
 8011f7e:	eeb0 7a67 	vmovhi.f32	s14, s15
 8011f82:	2d01      	cmp	r5, #1
 8011f84:	ed8d 7a0d 	vstr	s14, [sp, #52]	; 0x34
 8011f88:	bf88      	it	hi
 8011f8a:	9600      	strhi	r6, [sp, #0]
 8011f8c:	f200 80c2 	bhi.w	8012114 <MEMS_runMagCal.constprop.14+0x714>
 8011f90:	46b1      	mov	r9, r6
 8011f92:	9600      	str	r6, [sp, #0]
 8011f94:	46b2      	mov	sl, r6
 8011f96:	f99b 3486 	ldrsb.w	r3, [fp, #1158]	; 0x486
 8011f9a:	f89b 7485 	ldrb.w	r7, [fp, #1157]	; 0x485
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	f2c0 80c2 	blt.w	8012128 <MEMS_runMagCal.constprop.14+0x728>
 8011fa4:	3301      	adds	r3, #1
 8011fa6:	fb93 f4f7 	sdiv	r4, r3, r7
 8011faa:	fb07 3314 	mls	r3, r7, r4, r3
 8011fae:	b25c      	sxtb	r4, r3
 8011fb0:	f88b 4486 	strb.w	r4, [fp, #1158]	; 0x486
 8011fb4:	f89b 6484 	ldrb.w	r6, [fp, #1156]	; 0x484
 8011fb8:	3601      	adds	r6, #1
 8011fba:	42be      	cmp	r6, r7
 8011fbc:	bfa8      	it	ge
 8011fbe:	463e      	movge	r6, r7
 8011fc0:	fa5f f886 	uxtb.w	r8, r6
 8011fc4:	ee17 0a10 	vmov	r0, s14
 8011fc8:	f88b 8484 	strb.w	r8, [fp, #1156]	; 0x484
 8011fcc:	f009 fb8c 	bl	801b6e8 <roundf>
 8011fd0:	ee07 0a90 	vmov	s15, r0
 8011fd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011fd8:	eb0b 0344 	add.w	r3, fp, r4, lsl #1
 8011fdc:	ee17 0a90 	vmov	r0, s15
 8011fe0:	f8a3 0488 	strh.w	r0, [r3, #1160]	; 0x488
 8011fe4:	9b00      	ldr	r3, [sp, #0]
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	d198      	bne.n	8011f1c <MEMS_runMagCal.constprop.14+0x51c>
 8011fea:	f8db 3480 	ldr.w	r3, [fp, #1152]	; 0x480
 8011fee:	b123      	cbz	r3, 8011ffa <MEMS_runMagCal.constprop.14+0x5fa>
 8011ff0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011ff2:	f503 6296 	add.w	r2, r3, #1200	; 0x4b0
 8011ff6:	4291      	cmp	r1, r2
 8011ff8:	d399      	bcc.n	8011f2e <MEMS_runMagCal.constprop.14+0x52e>
 8011ffa:	f1b9 0f00 	cmp.w	r9, #0
 8011ffe:	d196      	bne.n	8011f2e <MEMS_runMagCal.constprop.14+0x52e>
 8012000:	1eaa      	subs	r2, r5, #2
 8012002:	2a01      	cmp	r2, #1
 8012004:	f240 8363 	bls.w	80126ce <MEMS_runMagCal.constprop.14+0xcce>
 8012008:	4be3      	ldr	r3, [pc, #908]	; (8012398 <MEMS_runMagCal.constprop.14+0x998>)
 801200a:	eddf 7ae4 	vldr	s15, [pc, #912]	; 801239c <MEMS_runMagCal.constprop.14+0x99c>
 801200e:	ed93 8a01 	vldr	s16, [r3, #4]
 8012012:	f8bd 4060 	ldrh.w	r4, [sp, #96]	; 0x60
 8012016:	f8db 3504 	ldr.w	r3, [fp, #1284]	; 0x504
 801201a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801201c:	f9bb 0462 	ldrsh.w	r0, [fp, #1122]	; 0x462
 8012020:	f89b 5500 	ldrb.w	r5, [fp, #1280]	; 0x500
 8012024:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012028:	eec7 8a08 	vdiv.f32	s17, s14, s16
 801202c:	f503 511c 	add.w	r1, r3, #9984	; 0x2700
 8012030:	3c01      	subs	r4, #1
 8012032:	fb00 2404 	mla	r4, r0, r4, r2
 8012036:	3110      	adds	r1, #16
 8012038:	42a1      	cmp	r1, r4
 801203a:	eeb0 9a08 	vmov.f32	s18, #8	; 0x40400000  3.0
 801203e:	ee28 9a89 	vmul.f32	s18, s17, s18
 8012042:	ee69 7a27 	vmul.f32	s15, s18, s15
 8012046:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801204a:	ee17 2a90 	vmov	r2, s15
 801204e:	fa1f f982 	uxth.w	r9, r2
 8012052:	d27f      	bcs.n	8012154 <MEMS_runMagCal.constprop.14+0x754>
 8012054:	f242 3228 	movw	r2, #9000	; 0x2328
 8012058:	4294      	cmp	r4, r2
 801205a:	f89b 0501 	ldrb.w	r0, [fp, #1281]	; 0x501
 801205e:	f99b 2502 	ldrsb.w	r2, [fp, #1282]	; 0x502
 8012062:	bf1a      	itte	ne
 8012064:	f5a4 540c 	subne.w	r4, r4, #8960	; 0x2300
 8012068:	3c28      	subne	r4, #40	; 0x28
 801206a:	2400      	moveq	r4, #0
 801206c:	42a8      	cmp	r0, r5
 801206e:	f102 0201 	add.w	r2, r2, #1
 8012072:	f000 869f 	beq.w	8012db4 <MEMS_runMagCal.constprop.14+0x13b4>
 8012076:	1b52      	subs	r2, r2, r5
 8012078:	fb92 f1f0 	sdiv	r1, r2, r0
 801207c:	fb00 2211 	mls	r2, r0, r1, r2
 8012080:	2a00      	cmp	r2, #0
 8012082:	b216      	sxth	r6, r2
 8012084:	bfbc      	itt	lt
 8012086:	1812      	addlt	r2, r2, r0
 8012088:	b216      	sxthlt	r6, r2
 801208a:	b22f      	sxth	r7, r5
 801208c:	2f00      	cmp	r7, #0
 801208e:	d05e      	beq.n	801214e <MEMS_runMagCal.constprop.14+0x74e>
 8012090:	2200      	movs	r2, #0
 8012092:	1b1b      	subs	r3, r3, r4
 8012094:	b299      	uxth	r1, r3
 8012096:	9201      	str	r2, [sp, #4]
 8012098:	4696      	mov	lr, r2
 801209a:	46ac      	mov	ip, r5
 801209c:	9402      	str	r4, [sp, #8]
 801209e:	e003      	b.n	80120a8 <MEMS_runMagCal.constprop.14+0x6a8>
 80120a0:	3201      	adds	r2, #1
 80120a2:	b213      	sxth	r3, r2
 80120a4:	429f      	cmp	r7, r3
 80120a6:	dd43      	ble.n	8012130 <MEMS_runMagCal.constprop.14+0x730>
 80120a8:	eb06 0802 	add.w	r8, r6, r2
 80120ac:	fb98 f3f0 	sdiv	r3, r8, r0
 80120b0:	fb00 8313 	mls	r3, r0, r3, r8
 80120b4:	b2db      	uxtb	r3, r3
 80120b6:	3304      	adds	r3, #4
 80120b8:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 80120bc:	f8b3 8500 	ldrh.w	r8, [r3, #1280]	; 0x500
 80120c0:	4488      	add	r8, r1
 80120c2:	fa0f f888 	sxth.w	r8, r8
 80120c6:	f1b8 0f00 	cmp.w	r8, #0
 80120ca:	f8a3 8500 	strh.w	r8, [r3, #1280]	; 0x500
 80120ce:	dae7      	bge.n	80120a0 <MEMS_runMagCal.constprop.14+0x6a0>
 80120d0:	f10c 33ff 	add.w	r3, ip, #4294967295
 80120d4:	f1bc 0f00 	cmp.w	ip, #0
 80120d8:	f000 82f6 	beq.w	80126c8 <MEMS_runMagCal.constprop.14+0xcc8>
 80120dc:	2401      	movs	r4, #1
 80120de:	9401      	str	r4, [sp, #4]
 80120e0:	fa5f fc83 	uxtb.w	ip, r3
 80120e4:	46a6      	mov	lr, r4
 80120e6:	e7db      	b.n	80120a0 <MEMS_runMagCal.constprop.14+0x6a0>
 80120e8:	eddf 6aad 	vldr	s13, [pc, #692]	; 80123a0 <MEMS_runMagCal.constprop.14+0x9a0>
 80120ec:	eddf 7aad 	vldr	s15, [pc, #692]	; 80123a4 <MEMS_runMagCal.constprop.14+0x9a4>
 80120f0:	f89b 54cc 	ldrb.w	r5, [fp, #1228]	; 0x4cc
 80120f4:	ee27 7a26 	vmul.f32	s14, s14, s13
 80120f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80120fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012100:	bf88      	it	hi
 8012102:	eeb0 7a67 	vmovhi.f32	s14, s15
 8012106:	2d01      	cmp	r5, #1
 8012108:	ed8d 7a0d 	vstr	s14, [sp, #52]	; 0x34
 801210c:	f67f af06 	bls.w	8011f1c <MEMS_runMagCal.constprop.14+0x51c>
 8012110:	2302      	movs	r3, #2
 8012112:	9300      	str	r3, [sp, #0]
 8012114:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8012118:	f04f 0a00 	mov.w	sl, #0
 801211c:	edcd 7a01 	vstr	s15, [sp, #4]
 8012120:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8012124:	46d1      	mov	r9, sl
 8012126:	e6e6      	b.n	8011ef6 <MEMS_runMagCal.constprop.14+0x4f6>
 8012128:	2400      	movs	r4, #0
 801212a:	f88b 4486 	strb.w	r4, [fp, #1158]	; 0x486
 801212e:	e741      	b.n	8011fb4 <MEMS_runMagCal.constprop.14+0x5b4>
 8012130:	e9dd 3401 	ldrd	r3, r4, [sp, #4]
 8012134:	2b00      	cmp	r3, #0
 8012136:	f040 8735 	bne.w	8012fa4 <MEMS_runMagCal.constprop.14+0x15a4>
 801213a:	f1be 0f00 	cmp.w	lr, #0
 801213e:	d006      	beq.n	801214e <MEMS_runMagCal.constprop.14+0x74e>
 8012140:	eeb0 0a49 	vmov.f32	s0, s18
 8012144:	4648      	mov	r0, r9
 8012146:	f7fe fe21 	bl	8010d8c <MEMS_updateMagBufferIndex.constprop.24>
 801214a:	f89b 5500 	ldrb.w	r5, [fp, #1280]	; 0x500
 801214e:	f8cb 4504 	str.w	r4, [fp, #1284]	; 0x504
 8012152:	4623      	mov	r3, r4
 8012154:	2d00      	cmp	r5, #0
 8012156:	f000 82fa 	beq.w	801274e <MEMS_runMagCal.constprop.14+0xd4e>
 801215a:	f99b 2502 	ldrsb.w	r2, [fp, #1282]	; 0x502
 801215e:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8012160:	eb0b 02c2 	add.w	r2, fp, r2, lsl #3
 8012164:	f9b2 2520 	ldrsh.w	r2, [r2, #1312]	; 0x520
 8012168:	f502 529c 	add.w	r2, r2, #4992	; 0x1380
 801216c:	3208      	adds	r2, #8
 801216e:	4413      	add	r3, r2
 8012170:	4299      	cmp	r1, r3
 8012172:	f200 81e7 	bhi.w	8012544 <MEMS_runMagCal.constprop.14+0xb44>
 8012176:	f1ba 0f00 	cmp.w	sl, #0
 801217a:	d104      	bne.n	8012186 <MEMS_runMagCal.constprop.14+0x786>
 801217c:	f89b 3500 	ldrb.w	r3, [fp, #1280]	; 0x500
 8012180:	2b0a      	cmp	r3, #10
 8012182:	f240 82e8 	bls.w	8012756 <MEMS_runMagCal.constprop.14+0xd56>
 8012186:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 801218a:	9301      	str	r3, [sp, #4]
 801218c:	2b00      	cmp	r3, #0
 801218e:	f000 82e2 	beq.w	8012756 <MEMS_runMagCal.constprop.14+0xd56>
 8012192:	eddf 6a85 	vldr	s13, [pc, #532]	; 80123a8 <MEMS_runMagCal.constprop.14+0x9a8>
 8012196:	ed9f 7a85 	vldr	s14, [pc, #532]	; 80123ac <MEMS_runMagCal.constprop.14+0x9ac>
 801219a:	f8cd a018 	str.w	sl, [sp, #24]
 801219e:	ee29 aa09 	vmul.f32	s20, s18, s18
 80121a2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80121a6:	eef7 9a08 	vmov.f32	s19, #120	; 0x3fc00000  1.5
 80121aa:	2300      	movs	r3, #0
 80121ac:	ee28 8a26 	vmul.f32	s16, s16, s13
 80121b0:	ee2a aa07 	vmul.f32	s20, s20, s14
 80121b4:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80121b8:	ee69 9a29 	vmul.f32	s19, s18, s19
 80121bc:	9304      	str	r3, [sp, #16]
 80121be:	461a      	mov	r2, r3
 80121c0:	461c      	mov	r4, r3
 80121c2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80121c4:	f813 1034 	ldrb.w	r1, [r3, r4, lsl #3]
 80121c8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80121cc:	b2a4      	uxth	r4, r4
 80121ce:	2900      	cmp	r1, #0
 80121d0:	f000 8123 	beq.w	801241a <MEMS_runMagCal.constprop.14+0xa1a>
 80121d4:	f9b3 5002 	ldrsh.w	r5, [r3, #2]
 80121d8:	f9b3 6004 	ldrsh.w	r6, [r3, #4]
 80121dc:	f9b3 7006 	ldrsh.w	r7, [r3, #6]
 80121e0:	ee07 5a90 	vmov	s15, r5
 80121e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80121e8:	eef0 7ae7 	vabs.f32	s15, s15
 80121ec:	eef4 7ae8 	vcmpe.f32	s15, s17
 80121f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121f4:	d516      	bpl.n	8012224 <MEMS_runMagCal.constprop.14+0x824>
 80121f6:	ee07 6a90 	vmov	s15, r6
 80121fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80121fe:	eef0 7ae7 	vabs.f32	s15, s15
 8012202:	eef4 8ae7 	vcmpe.f32	s17, s15
 8012206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801220a:	dd0b      	ble.n	8012224 <MEMS_runMagCal.constprop.14+0x824>
 801220c:	ee07 7a90 	vmov	s15, r7
 8012210:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012214:	eef0 7ae7 	vabs.f32	s15, s15
 8012218:	eef4 8ae7 	vcmpe.f32	s17, s15
 801221c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012220:	f300 80fb 	bgt.w	801241a <MEMS_runMagCal.constprop.14+0xa1a>
 8012224:	f89b 8500 	ldrb.w	r8, [fp, #1280]	; 0x500
 8012228:	f1b8 0f00 	cmp.w	r8, #0
 801222c:	f000 819a 	beq.w	8012564 <MEMS_runMagCal.constprop.14+0xb64>
 8012230:	f9bb 281a 	ldrsh.w	r2, [fp, #2074]	; 0x81a
 8012234:	f9bb 1818 	ldrsh.w	r1, [fp, #2072]	; 0x818
 8012238:	f9bb 381c 	ldrsh.w	r3, [fp, #2076]	; 0x81c
 801223c:	1b92      	subs	r2, r2, r6
 801223e:	fb02 f002 	mul.w	r0, r2, r2
 8012242:	1b4a      	subs	r2, r1, r5
 8012244:	fb02 0202 	mla	r2, r2, r2, r0
 8012248:	1bdb      	subs	r3, r3, r7
 801224a:	fb03 2303 	mla	r3, r3, r3, r2
 801224e:	ee07 3a90 	vmov	s15, r3
 8012252:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012256:	eeb4 aae7 	vcmpe.f32	s20, s15
 801225a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801225e:	f300 80dc 	bgt.w	801241a <MEMS_runMagCal.constprop.14+0xa1a>
 8012262:	fb95 f3f9 	sdiv	r3, r5, r9
 8012266:	fb09 5313 	mls	r3, r9, r3, r5
 801226a:	2b00      	cmp	r3, #0
 801226c:	bfb8      	it	lt
 801226e:	444b      	addlt	r3, r9
 8012270:	b21b      	sxth	r3, r3
 8012272:	ee07 3a90 	vmov	s15, r3
 8012276:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801227a:	ee67 7a88 	vmul.f32	s15, s15, s16
 801227e:	ee17 0a90 	vmov	r0, s15
 8012282:	f009 fa31 	bl	801b6e8 <roundf>
 8012286:	fb96 f3f9 	sdiv	r3, r6, r9
 801228a:	ee07 0a90 	vmov	s15, r0
 801228e:	fb09 6313 	mls	r3, r9, r3, r6
 8012292:	2b00      	cmp	r3, #0
 8012294:	bfb8      	it	lt
 8012296:	444b      	addlt	r3, r9
 8012298:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801229c:	b21b      	sxth	r3, r3
 801229e:	edcd 7a02 	vstr	s15, [sp, #8]
 80122a2:	ee07 3a90 	vmov	s15, r3
 80122a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80122aa:	f89d a008 	ldrb.w	sl, [sp, #8]
 80122ae:	ee67 7a88 	vmul.f32	s15, s15, s16
 80122b2:	ee17 0a90 	vmov	r0, s15
 80122b6:	f009 fa17 	bl	801b6e8 <roundf>
 80122ba:	fb97 f3f9 	sdiv	r3, r7, r9
 80122be:	ee07 0a90 	vmov	s15, r0
 80122c2:	fb09 7313 	mls	r3, r9, r3, r7
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	bfb8      	it	lt
 80122ca:	444b      	addlt	r3, r9
 80122cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80122d0:	b21b      	sxth	r3, r3
 80122d2:	edcd 7a02 	vstr	s15, [sp, #8]
 80122d6:	ee07 3a90 	vmov	s15, r3
 80122da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80122de:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80122e2:	9202      	str	r2, [sp, #8]
 80122e4:	ee67 7a88 	vmul.f32	s15, s15, s16
 80122e8:	ee17 0a90 	vmov	r0, s15
 80122ec:	f009 f9fc 	bl	801b6e8 <roundf>
 80122f0:	ee07 0a90 	vmov	s15, r0
 80122f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80122f8:	f1ba 0f1f 	cmp.w	sl, #31
 80122fc:	edcd 7a03 	vstr	s15, [sp, #12]
 8012300:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8012304:	f8db 2508 	ldr.w	r2, [fp, #1288]	; 0x508
 8012308:	f8db 350c 	ldr.w	r3, [fp, #1292]	; 0x50c
 801230c:	9103      	str	r1, [sp, #12]
 801230e:	f240 81cb 	bls.w	80126a8 <MEMS_runMagCal.constprop.14+0xca8>
 8012312:	f1aa 0320 	sub.w	r3, sl, #32
 8012316:	2101      	movs	r1, #1
 8012318:	fa01 f303 	lsl.w	r3, r1, r3
 801231c:	4013      	ands	r3, r2
 801231e:	9802      	ldr	r0, [sp, #8]
 8012320:	f8db 1510 	ldr.w	r1, [fp, #1296]	; 0x510
 8012324:	f8db 2514 	ldr.w	r2, [fp, #1300]	; 0x514
 8012328:	281f      	cmp	r0, #31
 801232a:	f240 81c6 	bls.w	80126ba <MEMS_runMagCal.constprop.14+0xcba>
 801232e:	f1a0 0220 	sub.w	r2, r0, #32
 8012332:	2001      	movs	r0, #1
 8012334:	fa00 f202 	lsl.w	r2, r0, r2
 8012338:	ea02 0e01 	and.w	lr, r2, r1
 801233c:	9a03      	ldr	r2, [sp, #12]
 801233e:	f8db 151c 	ldr.w	r1, [fp, #1308]	; 0x51c
 8012342:	f8db 0518 	ldr.w	r0, [fp, #1304]	; 0x518
 8012346:	2a1f      	cmp	r2, #31
 8012348:	f240 81b3 	bls.w	80126b2 <MEMS_runMagCal.constprop.14+0xcb2>
 801234c:	f1a2 0020 	sub.w	r0, r2, #32
 8012350:	2201      	movs	r2, #1
 8012352:	fa02 f000 	lsl.w	r0, r2, r0
 8012356:	4001      	ands	r1, r0
 8012358:	2900      	cmp	r1, #0
 801235a:	f040 8199 	bne.w	8012690 <MEMS_runMagCal.constprop.14+0xc90>
 801235e:	f99b 1502 	ldrsb.w	r1, [fp, #1282]	; 0x502
 8012362:	f89b c501 	ldrb.w	ip, [fp, #1281]	; 0x501
 8012366:	1c4a      	adds	r2, r1, #1
 8012368:	9205      	str	r2, [sp, #20]
 801236a:	2b00      	cmp	r3, #0
 801236c:	f000 820b 	beq.w	8012786 <MEMS_runMagCal.constprop.14+0xd86>
 8012370:	45e0      	cmp	r8, ip
 8012372:	9b05      	ldr	r3, [sp, #20]
 8012374:	f000 84f9 	beq.w	8012d6a <MEMS_runMagCal.constprop.14+0x136a>
 8012378:	eba3 0208 	sub.w	r2, r3, r8
 801237c:	fb92 f3fc 	sdiv	r3, r2, ip
 8012380:	fb0c 2313 	mls	r3, ip, r3, r2
 8012384:	2b00      	cmp	r3, #0
 8012386:	fa0f fe83 	sxth.w	lr, r3
 801238a:	bfbc      	itt	lt
 801238c:	4463      	addlt	r3, ip
 801238e:	fa0f fe83 	sxthlt.w	lr, r3
 8012392:	2200      	movs	r2, #0
 8012394:	e011      	b.n	80123ba <MEMS_runMagCal.constprop.14+0x9ba>
 8012396:	bf00      	nop
 8012398:	20001828 	.word	0x20001828
 801239c:	427c0000 	.word	0x427c0000
 80123a0:	42c80000 	.word	0x42c80000
 80123a4:	477fff00 	.word	0x477fff00
 80123a8:	3eaaaaab 	.word	0x3eaaaaab
 80123ac:	3f666666 	.word	0x3f666666
 80123b0:	3a83126f 	.word	0x3a83126f
 80123b4:	4598      	cmp	r8, r3
 80123b6:	f240 81ea 	bls.w	801278e <MEMS_runMagCal.constprop.14+0xd8e>
 80123ba:	eb0e 0102 	add.w	r1, lr, r2
 80123be:	fb91 f3fc 	sdiv	r3, r1, ip
 80123c2:	fb0c 1313 	mls	r3, ip, r3, r1
 80123c6:	b2db      	uxtb	r3, r3
 80123c8:	3304      	adds	r3, #4
 80123ca:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 80123ce:	3201      	adds	r2, #1
 80123d0:	f9b3 0502 	ldrsh.w	r0, [r3, #1282]	; 0x502
 80123d4:	f9b3 1504 	ldrsh.w	r1, [r3, #1284]	; 0x504
 80123d8:	f9b3 3506 	ldrsh.w	r3, [r3, #1286]	; 0x506
 80123dc:	1a28      	subs	r0, r5, r0
 80123de:	1a71      	subs	r1, r6, r1
 80123e0:	ee06 0a10 	vmov	s12, r0
 80123e4:	ee07 1a10 	vmov	s14, r1
 80123e8:	1afb      	subs	r3, r7, r3
 80123ea:	ee07 3a90 	vmov	s15, r3
 80123ee:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80123f2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80123f6:	eeb0 6ac6 	vabs.f32	s12, s12
 80123fa:	eeb0 7ac7 	vabs.f32	s14, s14
 80123fe:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8012402:	ee36 7a07 	vadd.f32	s14, s12, s14
 8012406:	eef0 7ae6 	vabs.f32	s15, s13
 801240a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801240e:	b2d3      	uxtb	r3, r2
 8012410:	eef4 9ae7 	vcmpe.f32	s19, s15
 8012414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012418:	ddcc      	ble.n	80123b4 <MEMS_runMagCal.constprop.14+0x9b4>
 801241a:	3401      	adds	r4, #1
 801241c:	9b01      	ldr	r3, [sp, #4]
 801241e:	b224      	sxth	r4, r4
 8012420:	429c      	cmp	r4, r3
 8012422:	4622      	mov	r2, r4
 8012424:	f6ff aecd 	blt.w	80121c2 <MEMS_runMagCal.constprop.14+0x7c2>
 8012428:	f8dd a018 	ldr.w	sl, [sp, #24]
 801242c:	9a04      	ldr	r2, [sp, #16]
 801242e:	f89b 3474 	ldrb.w	r3, [fp, #1140]	; 0x474
 8012432:	431a      	orrs	r2, r3
 8012434:	f88b 2474 	strb.w	r2, [fp, #1140]	; 0x474
 8012438:	2a00      	cmp	r2, #0
 801243a:	f43f ad78 	beq.w	8011f2e <MEMS_runMagCal.constprop.14+0x52e>
 801243e:	f89b 3500 	ldrb.w	r3, [fp, #1280]	; 0x500
 8012442:	9301      	str	r3, [sp, #4]
 8012444:	2b19      	cmp	r3, #25
 8012446:	f67f ad72 	bls.w	8011f2e <MEMS_runMagCal.constprop.14+0x52e>
 801244a:	f8db 347c 	ldr.w	r3, [fp, #1148]	; 0x47c
 801244e:	9302      	str	r3, [sp, #8]
 8012450:	2b00      	cmp	r3, #0
 8012452:	f000 8482 	beq.w	8012d5a <MEMS_runMagCal.constprop.14+0x135a>
 8012456:	f8db 3478 	ldr.w	r3, [fp, #1144]	; 0x478
 801245a:	2b00      	cmp	r3, #0
 801245c:	f000 847d 	beq.w	8012d5a <MEMS_runMagCal.constprop.14+0x135a>
 8012460:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 8012464:	ed5f 6a2e 	vldr	s13, [pc, #-184]	; 80123b0 <MEMS_runMagCal.constprop.14+0x9b0>
 8012468:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801246c:	ee07 3a90 	vmov	s15, r3
 8012470:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012474:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8012478:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 801247c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8012480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012484:	f200 8469 	bhi.w	8012d5a <MEMS_runMagCal.constprop.14+0x135a>
 8012488:	f1ba 0f00 	cmp.w	sl, #0
 801248c:	f43f ad4f 	beq.w	8011f2e <MEMS_runMagCal.constprop.14+0x52e>
 8012490:	eddd 7a02 	vldr	s15, [sp, #8]
 8012494:	ed5f 6a3a 	vldr	s13, [pc, #-232]	; 80123b0 <MEMS_runMagCal.constprop.14+0x9b0>
 8012498:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801249c:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80124a0:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80124a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80124a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124ac:	bf4c      	ite	mi
 80124ae:	2301      	movmi	r3, #1
 80124b0:	2300      	movpl	r3, #0
 80124b2:	9303      	str	r3, [sp, #12]
 80124b4:	49e2      	ldr	r1, [pc, #904]	; (8012840 <MEMS_runMagCal.constprop.14+0xe40>)
 80124b6:	f8db 9508 	ldr.w	r9, [fp, #1288]	; 0x508
 80124ba:	edd1 8a01 	vldr	s17, [r1, #4]
 80124be:	f8db 850c 	ldr.w	r8, [fp, #1292]	; 0x50c
 80124c2:	f8db e514 	ldr.w	lr, [fp, #1300]	; 0x514
 80124c6:	f8db c518 	ldr.w	ip, [fp, #1304]	; 0x518
 80124ca:	f8db 7510 	ldr.w	r7, [fp, #1296]	; 0x510
 80124ce:	f8db 651c 	ldr.w	r6, [fp, #1308]	; 0x51c
 80124d2:	2200      	movs	r2, #0
 80124d4:	9229      	str	r2, [sp, #164]	; 0xa4
 80124d6:	4614      	mov	r4, r2
 80124d8:	4610      	mov	r0, r2
 80124da:	4611      	mov	r1, r2
 80124dc:	e9cd 222a 	strd	r2, r2, [sp, #168]	; 0xa8
 80124e0:	e9cd 222c 	strd	r2, r2, [sp, #176]	; 0xb0
 80124e4:	2501      	movs	r5, #1
 80124e6:	e019      	b.n	801251c <MEMS_runMagCal.constprop.14+0xb1c>
 80124e8:	f1a1 0320 	sub.w	r3, r1, #32
 80124ec:	fa05 f303 	lsl.w	r3, r5, r3
 80124f0:	ea19 0f03 	tst.w	r9, r3
 80124f4:	ea07 0a03 	and.w	sl, r7, r3
 80124f8:	d030      	beq.n	801255c <MEMS_runMagCal.constprop.14+0xb5c>
 80124fa:	3001      	adds	r0, #1
 80124fc:	b2c0      	uxtb	r0, r0
 80124fe:	f1ba 0f00 	cmp.w	sl, #0
 8012502:	d001      	beq.n	8012508 <MEMS_runMagCal.constprop.14+0xb08>
 8012504:	3401      	adds	r4, #1
 8012506:	b2e4      	uxtb	r4, r4
 8012508:	4033      	ands	r3, r6
 801250a:	3101      	adds	r1, #1
 801250c:	2b00      	cmp	r3, #0
 801250e:	bf0c      	ite	eq
 8012510:	4613      	moveq	r3, r2
 8012512:	1c53      	addne	r3, r2, #1
 8012514:	2940      	cmp	r1, #64	; 0x40
 8012516:	b2da      	uxtb	r2, r3
 8012518:	f000 81ae 	beq.w	8012878 <MEMS_runMagCal.constprop.14+0xe78>
 801251c:	291f      	cmp	r1, #31
 801251e:	d8e3      	bhi.n	80124e8 <MEMS_runMagCal.constprop.14+0xae8>
 8012520:	fa05 f301 	lsl.w	r3, r5, r1
 8012524:	ea08 0a03 	and.w	sl, r8, r3
 8012528:	f1ba 0f00 	cmp.w	sl, #0
 801252c:	bf18      	it	ne
 801252e:	3001      	addne	r0, #1
 8012530:	ea1e 0f03 	tst.w	lr, r3
 8012534:	bf18      	it	ne
 8012536:	3401      	addne	r4, #1
 8012538:	b2c0      	uxtb	r0, r0
 801253a:	bf18      	it	ne
 801253c:	b2e4      	uxtbne	r4, r4
 801253e:	ea0c 0303 	and.w	r3, ip, r3
 8012542:	e7e2      	b.n	801250a <MEMS_runMagCal.constprop.14+0xb0a>
 8012544:	2200      	movs	r2, #0
 8012546:	23ff      	movs	r3, #255	; 0xff
 8012548:	eeb0 0a49 	vmov.f32	s0, s18
 801254c:	4648      	mov	r0, r9
 801254e:	f88b 2500 	strb.w	r2, [fp, #1280]	; 0x500
 8012552:	f88b 3502 	strb.w	r3, [fp, #1282]	; 0x502
 8012556:	f7fe fc19 	bl	8010d8c <MEMS_updateMagBufferIndex.constprop.24>
 801255a:	e60c      	b.n	8012176 <MEMS_runMagCal.constprop.14+0x776>
 801255c:	f1ba 0f00 	cmp.w	sl, #0
 8012560:	d1d0      	bne.n	8012504 <MEMS_runMagCal.constprop.14+0xb04>
 8012562:	e7d1      	b.n	8012508 <MEMS_runMagCal.constprop.14+0xb08>
 8012564:	f9bb 0462 	ldrsh.w	r0, [fp, #1122]	; 0x462
 8012568:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801256a:	fb95 f1f9 	sdiv	r1, r5, r9
 801256e:	fb02 3200 	mla	r2, r2, r0, r3
 8012572:	fb09 5311 	mls	r3, r9, r1, r5
 8012576:	2b00      	cmp	r3, #0
 8012578:	bfb8      	it	lt
 801257a:	444b      	addlt	r3, r9
 801257c:	b21b      	sxth	r3, r3
 801257e:	ee07 3a90 	vmov	s15, r3
 8012582:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012586:	f04f 0c01 	mov.w	ip, #1
 801258a:	ee67 7a88 	vmul.f32	s15, s15, s16
 801258e:	f88b c500 	strb.w	ip, [fp, #1280]	; 0x500
 8012592:	ee17 0a90 	vmov	r0, s15
 8012596:	f8cb 2504 	str.w	r2, [fp, #1284]	; 0x504
 801259a:	f8ab 5522 	strh.w	r5, [fp, #1314]	; 0x522
 801259e:	f8ab 5818 	strh.w	r5, [fp, #2072]	; 0x818
 80125a2:	f8ab 6524 	strh.w	r6, [fp, #1316]	; 0x524
 80125a6:	f8ab 681a 	strh.w	r6, [fp, #2074]	; 0x81a
 80125aa:	f8ab 7526 	strh.w	r7, [fp, #1318]	; 0x526
 80125ae:	f8ab 781c 	strh.w	r7, [fp, #2076]	; 0x81c
 80125b2:	f88b 8502 	strb.w	r8, [fp, #1282]	; 0x502
 80125b6:	f8ab 8520 	strh.w	r8, [fp, #1312]	; 0x520
 80125ba:	f009 f895 	bl	801b6e8 <roundf>
 80125be:	fb96 f3f9 	sdiv	r3, r6, r9
 80125c2:	ee07 0a90 	vmov	s15, r0
 80125c6:	fb09 6613 	mls	r6, r9, r3, r6
 80125ca:	2e00      	cmp	r6, #0
 80125cc:	bfb8      	it	lt
 80125ce:	444e      	addlt	r6, r9
 80125d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80125d4:	b233      	sxth	r3, r6
 80125d6:	edcd 7a02 	vstr	s15, [sp, #8]
 80125da:	ee07 3a90 	vmov	s15, r3
 80125de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80125e2:	f89d 5008 	ldrb.w	r5, [sp, #8]
 80125e6:	ee67 7a88 	vmul.f32	s15, s15, s16
 80125ea:	ee17 0a90 	vmov	r0, s15
 80125ee:	f009 f87b 	bl	801b6e8 <roundf>
 80125f2:	fb97 f3f9 	sdiv	r3, r7, r9
 80125f6:	ee07 0a90 	vmov	s15, r0
 80125fa:	fb09 7713 	mls	r7, r9, r3, r7
 80125fe:	2f00      	cmp	r7, #0
 8012600:	bfb8      	it	lt
 8012602:	444f      	addlt	r7, r9
 8012604:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012608:	b23b      	sxth	r3, r7
 801260a:	edcd 7a02 	vstr	s15, [sp, #8]
 801260e:	ee07 3a90 	vmov	s15, r3
 8012612:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012616:	f89d 6008 	ldrb.w	r6, [sp, #8]
 801261a:	ee67 7a88 	vmul.f32	s15, s15, s16
 801261e:	ee17 0a90 	vmov	r0, s15
 8012622:	f009 f861 	bl	801b6e8 <roundf>
 8012626:	ee07 0a90 	vmov	s15, r0
 801262a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801262e:	2d1f      	cmp	r5, #31
 8012630:	edcd 7a02 	vstr	s15, [sp, #8]
 8012634:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8012638:	f240 809b 	bls.w	8012772 <MEMS_runMagCal.constprop.14+0xd72>
 801263c:	f8db 1508 	ldr.w	r1, [fp, #1288]	; 0x508
 8012640:	f1a5 0220 	sub.w	r2, r5, #32
 8012644:	2001      	movs	r0, #1
 8012646:	fa00 f202 	lsl.w	r2, r0, r2
 801264a:	ea22 0201 	bic.w	r2, r2, r1
 801264e:	404a      	eors	r2, r1
 8012650:	f8cb 2508 	str.w	r2, [fp, #1288]	; 0x508
 8012654:	2e1f      	cmp	r6, #31
 8012656:	f240 8082 	bls.w	801275e <MEMS_runMagCal.constprop.14+0xd5e>
 801265a:	f8db 1510 	ldr.w	r1, [fp, #1296]	; 0x510
 801265e:	f1a6 0220 	sub.w	r2, r6, #32
 8012662:	2001      	movs	r0, #1
 8012664:	fa00 f202 	lsl.w	r2, r0, r2
 8012668:	ea22 0201 	bic.w	r2, r2, r1
 801266c:	404a      	eors	r2, r1
 801266e:	f8cb 2510 	str.w	r2, [fp, #1296]	; 0x510
 8012672:	2b1f      	cmp	r3, #31
 8012674:	f200 80e8 	bhi.w	8012848 <MEMS_runMagCal.constprop.14+0xe48>
 8012678:	f8db 2518 	ldr.w	r2, [fp, #1304]	; 0x518
 801267c:	2101      	movs	r1, #1
 801267e:	fa01 f303 	lsl.w	r3, r1, r3
 8012682:	ea23 0302 	bic.w	r3, r3, r2
 8012686:	4053      	eors	r3, r2
 8012688:	f8cb 3518 	str.w	r3, [fp, #1304]	; 0x518
 801268c:	9104      	str	r1, [sp, #16]
 801268e:	e6c4      	b.n	801241a <MEMS_runMagCal.constprop.14+0xa1a>
 8012690:	b11b      	cbz	r3, 801269a <MEMS_runMagCal.constprop.14+0xc9a>
 8012692:	f1be 0f00 	cmp.w	lr, #0
 8012696:	f47f aec0 	bne.w	801241a <MEMS_runMagCal.constprop.14+0xa1a>
 801269a:	f99b 3502 	ldrsb.w	r3, [fp, #1282]	; 0x502
 801269e:	f89b c501 	ldrb.w	ip, [fp, #1281]	; 0x501
 80126a2:	3301      	adds	r3, #1
 80126a4:	9305      	str	r3, [sp, #20]
 80126a6:	e663      	b.n	8012370 <MEMS_runMagCal.constprop.14+0x970>
 80126a8:	2201      	movs	r2, #1
 80126aa:	fa02 f20a 	lsl.w	r2, r2, sl
 80126ae:	4013      	ands	r3, r2
 80126b0:	e635      	b.n	801231e <MEMS_runMagCal.constprop.14+0x91e>
 80126b2:	2101      	movs	r1, #1
 80126b4:	4091      	lsls	r1, r2
 80126b6:	4001      	ands	r1, r0
 80126b8:	e64e      	b.n	8012358 <MEMS_runMagCal.constprop.14+0x958>
 80126ba:	4601      	mov	r1, r0
 80126bc:	2001      	movs	r0, #1
 80126be:	fa00 f101 	lsl.w	r1, r0, r1
 80126c2:	ea02 0e01 	and.w	lr, r2, r1
 80126c6:	e639      	b.n	801233c <MEMS_runMagCal.constprop.14+0x93c>
 80126c8:	f04f 0e01 	mov.w	lr, #1
 80126cc:	e4e8      	b.n	80120a0 <MEMS_runMagCal.constprop.14+0x6a0>
 80126ce:	45b8      	cmp	r8, r7
 80126d0:	f000 8377 	beq.w	8012dc2 <MEMS_runMagCal.constprop.14+0x13c2>
 80126d4:	f8db 247c 	ldr.w	r2, [fp, #1148]	; 0x47c
 80126d8:	2d03      	cmp	r5, #3
 80126da:	f47f ac95 	bne.w	8012008 <MEMS_runMagCal.constprop.14+0x608>
 80126de:	ee07 3a90 	vmov	s15, r3
 80126e2:	f8db 3478 	ldr.w	r3, [fp, #1144]	; 0x478
 80126e6:	eddf 6a57 	vldr	s13, [pc, #348]	; 8012844 <MEMS_runMagCal.constprop.14+0xe44>
 80126ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80126ee:	ee07 3a10 	vmov	s14, r3
 80126f2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80126f6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80126fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80126fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012702:	f77f ac81 	ble.w	8012008 <MEMS_runMagCal.constprop.14+0x608>
 8012706:	2a00      	cmp	r2, #0
 8012708:	f43f ac7e 	beq.w	8012008 <MEMS_runMagCal.constprop.14+0x608>
 801270c:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 8012710:	320a      	adds	r2, #10
 8012712:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8012716:	ee07 2a90 	vmov	s15, r2
 801271a:	ee27 7a26 	vmul.f32	s14, s14, s13
 801271e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012722:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801272a:	f77f ac6d 	ble.w	8012008 <MEMS_runMagCal.constprop.14+0x608>
 801272e:	f89b 3475 	ldrb.w	r3, [fp, #1141]	; 0x475
 8012732:	2b00      	cmp	r3, #0
 8012734:	f47f ac68 	bne.w	8012008 <MEMS_runMagCal.constprop.14+0x608>
 8012738:	f89b 34b4 	ldrb.w	r3, [fp, #1204]	; 0x4b4
 801273c:	2b00      	cmp	r3, #0
 801273e:	f43f abf6 	beq.w	8011f2e <MEMS_runMagCal.constprop.14+0x52e>
 8012742:	f89b 34bc 	ldrb.w	r3, [fp, #1212]	; 0x4bc
 8012746:	2bff      	cmp	r3, #255	; 0xff
 8012748:	f47f abf1 	bne.w	8011f2e <MEMS_runMagCal.constprop.14+0x52e>
 801274c:	e45c      	b.n	8012008 <MEMS_runMagCal.constprop.14+0x608>
 801274e:	f1ba 0f00 	cmp.w	sl, #0
 8012752:	f47f ad18 	bne.w	8012186 <MEMS_runMagCal.constprop.14+0x786>
 8012756:	2300      	movs	r3, #0
 8012758:	9304      	str	r3, [sp, #16]
 801275a:	461a      	mov	r2, r3
 801275c:	e667      	b.n	801242e <MEMS_runMagCal.constprop.14+0xa2e>
 801275e:	f8db 1514 	ldr.w	r1, [fp, #1300]	; 0x514
 8012762:	2201      	movs	r2, #1
 8012764:	40b2      	lsls	r2, r6
 8012766:	ea22 0201 	bic.w	r2, r2, r1
 801276a:	404a      	eors	r2, r1
 801276c:	f8cb 2514 	str.w	r2, [fp, #1300]	; 0x514
 8012770:	e77f      	b.n	8012672 <MEMS_runMagCal.constprop.14+0xc72>
 8012772:	f8db 150c 	ldr.w	r1, [fp, #1292]	; 0x50c
 8012776:	2201      	movs	r2, #1
 8012778:	40aa      	lsls	r2, r5
 801277a:	ea22 0201 	bic.w	r2, r2, r1
 801277e:	404a      	eors	r2, r1
 8012780:	f8cb 250c 	str.w	r2, [fp, #1292]	; 0x50c
 8012784:	e766      	b.n	8012654 <MEMS_runMagCal.constprop.14+0xc54>
 8012786:	f1be 0f00 	cmp.w	lr, #0
 801278a:	f47f adf1 	bne.w	8012370 <MEMS_runMagCal.constprop.14+0x970>
 801278e:	9b05      	ldr	r3, [sp, #20]
 8012790:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8012792:	fb93 f1fc 	sdiv	r1, r3, ip
 8012796:	f108 0801 	add.w	r8, r8, #1
 801279a:	fb0c 3111 	mls	r1, ip, r1, r3
 801279e:	f8db 3504 	ldr.w	r3, [fp, #1284]	; 0x504
 80127a2:	f8bb 0462 	ldrh.w	r0, [fp, #1122]	; 0x462
 80127a6:	f8ab 5818 	strh.w	r5, [fp, #2072]	; 0x818
 80127aa:	45e0      	cmp	r8, ip
 80127ac:	b249      	sxtb	r1, r1
 80127ae:	bfa8      	it	ge
 80127b0:	46e0      	movge	r8, ip
 80127b2:	1ad3      	subs	r3, r2, r3
 80127b4:	1d0a      	adds	r2, r1, #4
 80127b6:	eb0b 02c2 	add.w	r2, fp, r2, lsl #3
 80127ba:	fa5f f888 	uxtb.w	r8, r8
 80127be:	fb10 3304 	smlabb	r3, r0, r4, r3
 80127c2:	45e0      	cmp	r8, ip
 80127c4:	f8ab 681a 	strh.w	r6, [fp, #2074]	; 0x81a
 80127c8:	f88b 8500 	strb.w	r8, [fp, #1280]	; 0x500
 80127cc:	f8ab 781c 	strh.w	r7, [fp, #2076]	; 0x81c
 80127d0:	f88b 1502 	strb.w	r1, [fp, #1282]	; 0x502
 80127d4:	f8a2 5502 	strh.w	r5, [r2, #1282]	; 0x502
 80127d8:	f8a2 6504 	strh.w	r6, [r2, #1284]	; 0x504
 80127dc:	f8a2 7506 	strh.w	r7, [r2, #1286]	; 0x506
 80127e0:	f8a2 3500 	strh.w	r3, [r2, #1280]	; 0x500
 80127e4:	f000 836c 	beq.w	8012ec0 <MEMS_runMagCal.constprop.14+0x14c0>
 80127e8:	f1ba 0f1f 	cmp.w	sl, #31
 80127ec:	f240 82d0 	bls.w	8012d90 <MEMS_runMagCal.constprop.14+0x1390>
 80127f0:	f8db 2508 	ldr.w	r2, [fp, #1288]	; 0x508
 80127f4:	f1aa 0320 	sub.w	r3, sl, #32
 80127f8:	2101      	movs	r1, #1
 80127fa:	fa01 f303 	lsl.w	r3, r1, r3
 80127fe:	ea23 0302 	bic.w	r3, r3, r2
 8012802:	4053      	eors	r3, r2
 8012804:	f8cb 3508 	str.w	r3, [fp, #1288]	; 0x508
 8012808:	9b02      	ldr	r3, [sp, #8]
 801280a:	2b1f      	cmp	r3, #31
 801280c:	f240 82b5 	bls.w	8012d7a <MEMS_runMagCal.constprop.14+0x137a>
 8012810:	f8db 2510 	ldr.w	r2, [fp, #1296]	; 0x510
 8012814:	3b20      	subs	r3, #32
 8012816:	2101      	movs	r1, #1
 8012818:	fa01 f303 	lsl.w	r3, r1, r3
 801281c:	ea23 0302 	bic.w	r3, r3, r2
 8012820:	4053      	eors	r3, r2
 8012822:	f8cb 3510 	str.w	r3, [fp, #1296]	; 0x510
 8012826:	9b03      	ldr	r3, [sp, #12]
 8012828:	2b1f      	cmp	r3, #31
 801282a:	f200 82bc 	bhi.w	8012da6 <MEMS_runMagCal.constprop.14+0x13a6>
 801282e:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 8012832:	9301      	str	r3, [sp, #4]
 8012834:	f8db 2518 	ldr.w	r2, [fp, #1304]	; 0x518
 8012838:	9b03      	ldr	r3, [sp, #12]
 801283a:	2101      	movs	r1, #1
 801283c:	e71f      	b.n	801267e <MEMS_runMagCal.constprop.14+0xc7e>
 801283e:	bf00      	nop
 8012840:	20001828 	.word	0x20001828
 8012844:	3a83126f 	.word	0x3a83126f
 8012848:	f8db 251c 	ldr.w	r2, [fp, #1308]	; 0x51c
 801284c:	3b20      	subs	r3, #32
 801284e:	2101      	movs	r1, #1
 8012850:	fa01 f303 	lsl.w	r3, r1, r3
 8012854:	ea23 0302 	bic.w	r3, r3, r2
 8012858:	4053      	eors	r3, r2
 801285a:	f8cb 351c 	str.w	r3, [fp, #1308]	; 0x51c
 801285e:	9104      	str	r1, [sp, #16]
 8012860:	e5db      	b.n	801241a <MEMS_runMagCal.constprop.14+0xa1a>
 8012862:	f04f 0a00 	mov.w	sl, #0
 8012866:	f04f 0901 	mov.w	r9, #1
 801286a:	f7ff bb29 	b.w	8011ec0 <MEMS_runMagCal.constprop.14+0x4c0>
 801286e:	f04f 0a00 	mov.w	sl, #0
 8012872:	46d1      	mov	r9, sl
 8012874:	f7ff bb24 	b.w	8011ec0 <MEMS_runMagCal.constprop.14+0x4c0>
 8012878:	2805      	cmp	r0, #5
 801287a:	f240 8269 	bls.w	8012d50 <MEMS_runMagCal.constprop.14+0x1350>
 801287e:	2c05      	cmp	r4, #5
 8012880:	f240 8266 	bls.w	8012d50 <MEMS_runMagCal.constprop.14+0x1350>
 8012884:	2a05      	cmp	r2, #5
 8012886:	f240 8263 	bls.w	8012d50 <MEMS_runMagCal.constprop.14+0x1350>
 801288a:	f89b 6501 	ldrb.w	r6, [fp, #1281]	; 0x501
 801288e:	9a01      	ldr	r2, [sp, #4]
 8012890:	f99b a502 	ldrsb.w	sl, [fp, #1282]	; 0x502
 8012894:	42b2      	cmp	r2, r6
 8012896:	f10a 0301 	add.w	r3, sl, #1
 801289a:	f000 8367 	beq.w	8012f6c <MEMS_runMagCal.constprop.14+0x156c>
 801289e:	1a9a      	subs	r2, r3, r2
 80128a0:	fb92 f3f6 	sdiv	r3, r2, r6
 80128a4:	fb06 2313 	mls	r3, r6, r3, r2
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	b219      	sxth	r1, r3
 80128ac:	bfbc      	itt	lt
 80128ae:	199b      	addlt	r3, r3, r6
 80128b0:	b219      	sxthlt	r1, r3
 80128b2:	f101 0315 	add.w	r3, r1, #21
 80128b6:	00db      	lsls	r3, r3, #3
 80128b8:	eb0b 0203 	add.w	r2, fp, r3
 80128bc:	489b      	ldr	r0, [pc, #620]	; (8012b2c <MEMS_runMagCal.constprop.14+0x112c>)
 80128be:	f9b2 547e 	ldrsh.w	r5, [r2, #1150]	; 0x47e
 80128c2:	f9b2 c47a 	ldrsh.w	ip, [r2, #1146]	; 0x47a
 80128c6:	f9b2 747c 	ldrsh.w	r7, [r2, #1148]	; 0x47c
 80128ca:	f8ad 5048 	strh.w	r5, [sp, #72]	; 0x48
 80128ce:	2200      	movs	r2, #0
 80128d0:	4403      	add	r3, r0
 80128d2:	e9cd 2206 	strd	r2, r2, [sp, #24]
 80128d6:	f8d3 301a 	ldr.w	r3, [r3, #26]
 80128da:	9311      	str	r3, [sp, #68]	; 0x44
 80128dc:	9313      	str	r3, [sp, #76]	; 0x4c
 80128de:	46e0      	mov	r8, ip
 80128e0:	f8ad 5050 	strh.w	r5, [sp, #80]	; 0x50
 80128e4:	46a9      	mov	r9, r5
 80128e6:	46be      	mov	lr, r7
 80128e8:	920a      	str	r2, [sp, #40]	; 0x28
 80128ea:	9208      	str	r2, [sp, #32]
 80128ec:	920b      	str	r2, [sp, #44]	; 0x2c
 80128ee:	9205      	str	r2, [sp, #20]
 80128f0:	9104      	str	r1, [sp, #16]
 80128f2:	9b04      	ldr	r3, [sp, #16]
 80128f4:	1898      	adds	r0, r3, r2
 80128f6:	fb90 f3f6 	sdiv	r3, r0, r6
 80128fa:	fb06 0313 	mls	r3, r6, r3, r0
 80128fe:	b2db      	uxtb	r3, r3
 8012900:	3315      	adds	r3, #21
 8012902:	eb0b 00c3 	add.w	r0, fp, r3, lsl #3
 8012906:	f9b0 447a 	ldrsh.w	r4, [r0, #1146]	; 0x47a
 801290a:	4564      	cmp	r4, ip
 801290c:	dd02      	ble.n	8012914 <MEMS_runMagCal.constprop.14+0xf14>
 801290e:	2001      	movs	r0, #1
 8012910:	46a4      	mov	ip, r4
 8012912:	900b      	str	r0, [sp, #44]	; 0x2c
 8012914:	eb0b 00c3 	add.w	r0, fp, r3, lsl #3
 8012918:	f9b0 047c 	ldrsh.w	r0, [r0, #1148]	; 0x47c
 801291c:	42b8      	cmp	r0, r7
 801291e:	dd02      	ble.n	8012926 <MEMS_runMagCal.constprop.14+0xf26>
 8012920:	2101      	movs	r1, #1
 8012922:	4607      	mov	r7, r0
 8012924:	910a      	str	r1, [sp, #40]	; 0x28
 8012926:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 801292a:	f9b3 347e 	ldrsh.w	r3, [r3, #1150]	; 0x47e
 801292e:	42ab      	cmp	r3, r5
 8012930:	dd02      	ble.n	8012938 <MEMS_runMagCal.constprop.14+0xf38>
 8012932:	2101      	movs	r1, #1
 8012934:	461d      	mov	r5, r3
 8012936:	9108      	str	r1, [sp, #32]
 8012938:	4544      	cmp	r4, r8
 801293a:	da02      	bge.n	8012942 <MEMS_runMagCal.constprop.14+0xf42>
 801293c:	2101      	movs	r1, #1
 801293e:	46a0      	mov	r8, r4
 8012940:	9107      	str	r1, [sp, #28]
 8012942:	4570      	cmp	r0, lr
 8012944:	da02      	bge.n	801294c <MEMS_runMagCal.constprop.14+0xf4c>
 8012946:	2101      	movs	r1, #1
 8012948:	4686      	mov	lr, r0
 801294a:	9106      	str	r1, [sp, #24]
 801294c:	454b      	cmp	r3, r9
 801294e:	da02      	bge.n	8012956 <MEMS_runMagCal.constprop.14+0xf56>
 8012950:	4699      	mov	r9, r3
 8012952:	2301      	movs	r3, #1
 8012954:	9305      	str	r3, [sp, #20]
 8012956:	3201      	adds	r2, #1
 8012958:	9801      	ldr	r0, [sp, #4]
 801295a:	b2d3      	uxtb	r3, r2
 801295c:	4298      	cmp	r0, r3
 801295e:	d8c8      	bhi.n	80128f2 <MEMS_runMagCal.constprop.14+0xef2>
 8012960:	9b06      	ldr	r3, [sp, #24]
 8012962:	9904      	ldr	r1, [sp, #16]
 8012964:	2b00      	cmp	r3, #0
 8012966:	f040 8324 	bne.w	8012fb2 <MEMS_runMagCal.constprop.14+0x15b2>
 801296a:	9b07      	ldr	r3, [sp, #28]
 801296c:	b10b      	cbz	r3, 8012972 <MEMS_runMagCal.constprop.14+0xf72>
 801296e:	f8ad 804c 	strh.w	r8, [sp, #76]	; 0x4c
 8012972:	9b05      	ldr	r3, [sp, #20]
 8012974:	b10b      	cbz	r3, 801297a <MEMS_runMagCal.constprop.14+0xf7a>
 8012976:	f8ad 9050 	strh.w	r9, [sp, #80]	; 0x50
 801297a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801297c:	b10b      	cbz	r3, 8012982 <MEMS_runMagCal.constprop.14+0xf82>
 801297e:	f8ad c044 	strh.w	ip, [sp, #68]	; 0x44
 8012982:	9b08      	ldr	r3, [sp, #32]
 8012984:	b10b      	cbz	r3, 801298a <MEMS_runMagCal.constprop.14+0xf8a>
 8012986:	f8ad 5048 	strh.w	r5, [sp, #72]	; 0x48
 801298a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801298c:	b10b      	cbz	r3, 8012992 <MEMS_runMagCal.constprop.14+0xf92>
 801298e:	f8ad 7046 	strh.w	r7, [sp, #70]	; 0x46
 8012992:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012996:	ee87 9aa8 	vdiv.f32	s18, s15, s17
 801299a:	f8bd 5046 	ldrh.w	r5, [sp, #70]	; 0x46
 801299e:	f8bd 004e 	ldrh.w	r0, [sp, #78]	; 0x4e
 80129a2:	f8bd 7044 	ldrh.w	r7, [sp, #68]	; 0x44
 80129a6:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
 80129aa:	f8bd 4048 	ldrh.w	r4, [sp, #72]	; 0x48
 80129ae:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 80129b2:	1a28      	subs	r0, r5, r0
 80129b4:	f89b 54b4 	ldrb.w	r5, [fp, #1204]	; 0x4b4
 80129b8:	1aba      	subs	r2, r7, r2
 80129ba:	1ae3      	subs	r3, r4, r3
 80129bc:	b212      	sxth	r2, r2
 80129be:	ed9f 5a5c 	vldr	s10, [pc, #368]	; 8012b30 <MEMS_runMagCal.constprop.14+0x1130>
 80129c2:	b200      	sxth	r0, r0
 80129c4:	ee29 5a05 	vmul.f32	s10, s18, s10
 80129c8:	b21b      	sxth	r3, r3
 80129ca:	2d00      	cmp	r5, #0
 80129cc:	f040 82b5 	bne.w	8012f3a <MEMS_runMagCal.constprop.14+0x153a>
 80129d0:	f89b 44cc 	ldrb.w	r4, [fp, #1228]	; 0x4cc
 80129d4:	fab4 f484 	clz	r4, r4
 80129d8:	0964      	lsrs	r4, r4, #5
 80129da:	9404      	str	r4, [sp, #16]
 80129dc:	ee07 2a10 	vmov	s14, r2
 80129e0:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 80129e4:	ee65 7a27 	vmul.f32	s15, s10, s15
 80129e8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80129ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80129f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129f4:	f300 8285 	bgt.w	8012f02 <MEMS_runMagCal.constprop.14+0x1502>
 80129f8:	ee06 0a90 	vmov	s13, r0
 80129fc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8012a00:	eef4 7ae6 	vcmpe.f32	s15, s13
 8012a04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a08:	f100 827b 	bmi.w	8012f02 <MEMS_runMagCal.constprop.14+0x1502>
 8012a0c:	ee06 3a10 	vmov	s12, r3
 8012a10:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8012a14:	eef4 7ac6 	vcmpe.f32	s15, s12
 8012a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a1c:	f100 8271 	bmi.w	8012f02 <MEMS_runMagCal.constprop.14+0x1502>
 8012a20:	4293      	cmp	r3, r2
 8012a22:	461c      	mov	r4, r3
 8012a24:	bfa8      	it	ge
 8012a26:	4614      	movge	r4, r2
 8012a28:	b224      	sxth	r4, r4
 8012a2a:	4284      	cmp	r4, r0
 8012a2c:	bfa8      	it	ge
 8012a2e:	4604      	movge	r4, r0
 8012a30:	4290      	cmp	r0, r2
 8012a32:	4605      	mov	r5, r0
 8012a34:	bfb8      	it	lt
 8012a36:	4615      	movlt	r5, r2
 8012a38:	429c      	cmp	r4, r3
 8012a3a:	bfa8      	it	ge
 8012a3c:	461c      	movge	r4, r3
 8012a3e:	429d      	cmp	r5, r3
 8012a40:	bfb8      	it	lt
 8012a42:	461d      	movlt	r5, r3
 8012a44:	fa0f fa85 	sxth.w	sl, r5
 8012a48:	b224      	sxth	r4, r4
 8012a4a:	4592      	cmp	sl, r2
 8012a4c:	f8ad 404e 	strh.w	r4, [sp, #78]	; 0x4e
 8012a50:	f340 8276 	ble.w	8012f40 <MEMS_runMagCal.constprop.14+0x1540>
 8012a54:	4294      	cmp	r4, r2
 8012a56:	f280 8273 	bge.w	8012f40 <MEMS_runMagCal.constprop.14+0x1540>
 8012a5a:	2501      	movs	r5, #1
 8012a5c:	4582      	cmp	sl, r0
 8012a5e:	f300 8299 	bgt.w	8012f94 <MEMS_runMagCal.constprop.14+0x1594>
 8012a62:	4553      	cmp	r3, sl
 8012a64:	f280 8291 	bge.w	8012f8a <MEMS_runMagCal.constprop.14+0x158a>
 8012a68:	42a3      	cmp	r3, r4
 8012a6a:	f340 828e 	ble.w	8012f8a <MEMS_runMagCal.constprop.14+0x158a>
 8012a6e:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
 8012a72:	9b04      	ldr	r3, [sp, #16]
 8012a74:	2b00      	cmp	r3, #0
 8012a76:	f000 8142 	beq.w	8012cfe <MEMS_runMagCal.constprop.14+0x12fe>
 8012a7a:	eeb4 5ac7 	vcmpe.f32	s10, s14
 8012a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a82:	dc0c      	bgt.n	8012a9e <MEMS_runMagCal.constprop.14+0x109e>
 8012a84:	eeb4 5ae6 	vcmpe.f32	s10, s13
 8012a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a8c:	dc07      	bgt.n	8012a9e <MEMS_runMagCal.constprop.14+0x109e>
 8012a8e:	eeb4 5ac6 	vcmpe.f32	s10, s12
 8012a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a96:	bfcc      	ite	gt
 8012a98:	2301      	movgt	r3, #1
 8012a9a:	2300      	movle	r3, #0
 8012a9c:	9304      	str	r3, [sp, #16]
 8012a9e:	eddf 7a25 	vldr	s15, [pc, #148]	; 8012b34 <MEMS_runMagCal.constprop.14+0x1134>
 8012aa2:	ee05 aa90 	vmov	s11, sl
 8012aa6:	ee65 7a27 	vmul.f32	s15, s10, s15
 8012aaa:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8012aae:	eef4 5ae7 	vcmpe.f32	s11, s15
 8012ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ab6:	db1e      	blt.n	8012af6 <MEMS_runMagCal.constprop.14+0x10f6>
 8012ab8:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 8012abc:	ee05 3a90 	vmov	s11, r3
 8012ac0:	eef7 7a02 	vmov.f32	s15, #114	; 0x3f900000  1.125
 8012ac4:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8012ac8:	ee65 7a27 	vmul.f32	s15, s10, s15
 8012acc:	eef4 5ae7 	vcmpe.f32	s11, s15
 8012ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ad4:	db0f      	blt.n	8012af6 <MEMS_runMagCal.constprop.14+0x10f6>
 8012ad6:	ebba 0f44 	cmp.w	sl, r4, lsl #1
 8012ada:	da0c      	bge.n	8012af6 <MEMS_runMagCal.constprop.14+0x10f6>
 8012adc:	ee07 4a90 	vmov	s15, r4
 8012ae0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012ae4:	eef7 5a04 	vmov.f32	s11, #116	; 0x3fa00000  1.250
 8012ae8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8012aec:	eeb4 5ae7 	vcmpe.f32	s10, s15
 8012af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012af4:	d422      	bmi.n	8012b3c <MEMS_runMagCal.constprop.14+0x113c>
 8012af6:	eef7 7a02 	vmov.f32	s15, #114	; 0x3f900000  1.125
 8012afa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012afe:	eeb4 5ac7 	vcmpe.f32	s10, s14
 8012b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b06:	f300 8123 	bgt.w	8012d50 <MEMS_runMagCal.constprop.14+0x1350>
 8012b0a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8012b0e:	eeb4 5ae6 	vcmpe.f32	s10, s13
 8012b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b16:	f300 811b 	bgt.w	8012d50 <MEMS_runMagCal.constprop.14+0x1350>
 8012b1a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8012b1e:	eeb4 5ae7 	vcmpe.f32	s10, s15
 8012b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b26:	f300 8113 	bgt.w	8012d50 <MEMS_runMagCal.constprop.14+0x1350>
 8012b2a:	e007      	b.n	8012b3c <MEMS_runMagCal.constprop.14+0x113c>
 8012b2c:	20001828 	.word	0x20001828
 8012b30:	42340000 	.word	0x42340000
 8012b34:	3faccccd 	.word	0x3faccccd
 8012b38:	00000000 	.word	0x00000000
 8012b3c:	fa4f f981 	sxtb.w	r9, r1
 8012b40:	2700      	movs	r7, #0
 8012b42:	f109 0301 	add.w	r3, r9, #1
 8012b46:	9302      	str	r3, [sp, #8]
 8012b48:	46b8      	mov	r8, r7
 8012b4a:	463b      	mov	r3, r7
 8012b4c:	f04f 0e01 	mov.w	lr, #1
 8012b50:	9a02      	ldr	r2, [sp, #8]
 8012b52:	eb09 0103 	add.w	r1, r9, r3
 8012b56:	441a      	add	r2, r3
 8012b58:	fb91 f3f6 	sdiv	r3, r1, r6
 8012b5c:	fb06 1313 	mls	r3, r6, r3, r1
 8012b60:	b25c      	sxtb	r4, r3
 8012b62:	2c00      	cmp	r4, #0
 8012b64:	bfb8      	it	lt
 8012b66:	199b      	addlt	r3, r3, r6
 8012b68:	fb92 f1f6 	sdiv	r1, r2, r6
 8012b6c:	fb06 2111 	mls	r1, r6, r1, r2
 8012b70:	bfb8      	it	lt
 8012b72:	b25c      	sxtblt	r4, r3
 8012b74:	b249      	sxtb	r1, r1
 8012b76:	3104      	adds	r1, #4
 8012b78:	3404      	adds	r4, #4
 8012b7a:	eb0b 02c4 	add.w	r2, fp, r4, lsl #3
 8012b7e:	eb0b 03c1 	add.w	r3, fp, r1, lsl #3
 8012b82:	f9b2 0502 	ldrsh.w	r0, [r2, #1282]	; 0x502
 8012b86:	f9b3 3502 	ldrsh.w	r3, [r3, #1282]	; 0x502
 8012b8a:	1a1a      	subs	r2, r3, r0
 8012b8c:	2a00      	cmp	r2, #0
 8012b8e:	b29b      	uxth	r3, r3
 8012b90:	b280      	uxth	r0, r0
 8012b92:	bfb4      	ite	lt
 8012b94:	1ac3      	sublt	r3, r0, r3
 8012b96:	1a1b      	subge	r3, r3, r0
 8012b98:	eb0b 02c4 	add.w	r2, fp, r4, lsl #3
 8012b9c:	b218      	sxth	r0, r3
 8012b9e:	eb0b 03c1 	add.w	r3, fp, r1, lsl #3
 8012ba2:	f9b2 2504 	ldrsh.w	r2, [r2, #1284]	; 0x504
 8012ba6:	f9b3 3504 	ldrsh.w	r3, [r3, #1284]	; 0x504
 8012baa:	1a9d      	subs	r5, r3, r2
 8012bac:	2d00      	cmp	r5, #0
 8012bae:	b29b      	uxth	r3, r3
 8012bb0:	b292      	uxth	r2, r2
 8012bb2:	bfb4      	ite	lt
 8012bb4:	1ad3      	sublt	r3, r2, r3
 8012bb6:	1a9b      	subge	r3, r3, r2
 8012bb8:	eb0b 05c1 	add.w	r5, fp, r1, lsl #3
 8012bbc:	eb0b 02c4 	add.w	r2, fp, r4, lsl #3
 8012bc0:	eb0b 01c1 	add.w	r1, fp, r1, lsl #3
 8012bc4:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 8012bc8:	f9b5 5506 	ldrsh.w	r5, [r5, #1286]	; 0x506
 8012bcc:	f9b2 2506 	ldrsh.w	r2, [r2, #1286]	; 0x506
 8012bd0:	f8b1 1500 	ldrh.w	r1, [r1, #1280]	; 0x500
 8012bd4:	f8b4 4500 	ldrh.w	r4, [r4, #1280]	; 0x500
 8012bd8:	eba5 0c02 	sub.w	ip, r5, r2
 8012bdc:	1b09      	subs	r1, r1, r4
 8012bde:	b292      	uxth	r2, r2
 8012be0:	f1bc 0f00 	cmp.w	ip, #0
 8012be4:	b2ad      	uxth	r5, r5
 8012be6:	b209      	sxth	r1, r1
 8012be8:	bfb4      	ite	lt
 8012bea:	1b52      	sublt	r2, r2, r5
 8012bec:	1aaa      	subge	r2, r5, r2
 8012bee:	2900      	cmp	r1, #0
 8012bf0:	b21b      	sxth	r3, r3
 8012bf2:	b212      	sxth	r2, r2
 8012bf4:	dd1e      	ble.n	8012c34 <MEMS_runMagCal.constprop.14+0x1234>
 8012bf6:	4403      	add	r3, r0
 8012bf8:	441a      	add	r2, r3
 8012bfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012bfe:	fb03 f202 	mul.w	r2, r3, r2
 8012c02:	ee07 2a90 	vmov	s15, r2
 8012c06:	ee07 1a10 	vmov	s14, r1
 8012c0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012c0e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012c12:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8012c16:	f108 0801 	add.w	r8, r8, #1
 8012c1a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8012c1e:	fa5f f888 	uxtb.w	r8, r8
 8012c22:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8012c26:	ee17 3a90 	vmov	r3, s15
 8012c2a:	b21b      	sxth	r3, r3
 8012c2c:	2b96      	cmp	r3, #150	; 0x96
 8012c2e:	bfc4      	itt	gt
 8012c30:	3701      	addgt	r7, #1
 8012c32:	b2ff      	uxtbgt	r7, r7
 8012c34:	4673      	mov	r3, lr
 8012c36:	9901      	ldr	r1, [sp, #4]
 8012c38:	f10e 0e01 	add.w	lr, lr, #1
 8012c3c:	fa5f f28e 	uxtb.w	r2, lr
 8012c40:	4291      	cmp	r1, r2
 8012c42:	d885      	bhi.n	8012b50 <MEMS_runMagCal.constprop.14+0x1150>
 8012c44:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8012c48:	4547      	cmp	r7, r8
 8012c4a:	f340 8081 	ble.w	8012d50 <MEMS_runMagCal.constprop.14+0x1350>
 8012c4e:	9b03      	ldr	r3, [sp, #12]
 8012c50:	b92b      	cbnz	r3, 8012c5e <MEMS_runMagCal.constprop.14+0x125e>
 8012c52:	f89b 34cc 	ldrb.w	r3, [fp, #1228]	; 0x4cc
 8012c56:	3b02      	subs	r3, #2
 8012c58:	2b01      	cmp	r3, #1
 8012c5a:	f240 81ad 	bls.w	8012fb8 <MEMS_runMagCal.constprop.14+0x15b8>
 8012c5e:	2220      	movs	r2, #32
 8012c60:	2100      	movs	r1, #0
 8012c62:	a82e      	add	r0, sp, #184	; 0xb8
 8012c64:	f007 fcd7 	bl	801a616 <memset>
 8012c68:	f89b 8500 	ldrb.w	r8, [fp, #1280]	; 0x500
 8012c6c:	f89b 2501 	ldrb.w	r2, [fp, #1281]	; 0x501
 8012c70:	f99b 3502 	ldrsb.w	r3, [fp, #1282]	; 0x502
 8012c74:	2100      	movs	r1, #0
 8012c76:	4590      	cmp	r8, r2
 8012c78:	e9cd 111a 	strd	r1, r1, [sp, #104]	; 0x68
 8012c7c:	911c      	str	r1, [sp, #112]	; 0x70
 8012c7e:	f103 0301 	add.w	r3, r3, #1
 8012c82:	f000 824f 	beq.w	8013124 <MEMS_runMagCal.constprop.14+0x1724>
 8012c86:	eba3 0308 	sub.w	r3, r3, r8
 8012c8a:	fb93 f1f2 	sdiv	r1, r3, r2
 8012c8e:	fb02 3311 	mls	r3, r2, r1, r3
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	b219      	sxth	r1, r3
 8012c96:	bfbc      	itt	lt
 8012c98:	189b      	addlt	r3, r3, r2
 8012c9a:	b219      	sxthlt	r1, r3
 8012c9c:	ed5f 7a5a 	vldr	s15, [pc, #-360]	; 8012b38 <MEMS_runMagCal.constprop.14+0x1138>
 8012ca0:	2000      	movs	r0, #0
 8012ca2:	eeb0 7a67 	vmov.f32	s14, s15
 8012ca6:	eef0 6a67 	vmov.f32	s13, s15
 8012caa:	4604      	mov	r4, r0
 8012cac:	b2c3      	uxtb	r3, r0
 8012cae:	4598      	cmp	r8, r3
 8012cb0:	eb01 0500 	add.w	r5, r1, r0
 8012cb4:	f240 81d4 	bls.w	8013060 <MEMS_runMagCal.constprop.14+0x1660>
 8012cb8:	fb95 f3f2 	sdiv	r3, r5, r2
 8012cbc:	fb02 5313 	mls	r3, r2, r3, r5
 8012cc0:	b2db      	uxtb	r3, r3
 8012cc2:	3304      	adds	r3, #4
 8012cc4:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8012cc8:	3001      	adds	r0, #1
 8012cca:	f9b3 4502 	ldrsh.w	r4, [r3, #1282]	; 0x502
 8012cce:	ee05 4a10 	vmov	s10, r4
 8012cd2:	f9b3 4504 	ldrsh.w	r4, [r3, #1284]	; 0x504
 8012cd6:	f9b3 3506 	ldrsh.w	r3, [r3, #1286]	; 0x506
 8012cda:	ee05 4a90 	vmov	s11, r4
 8012cde:	ee06 3a10 	vmov	s12, r3
 8012ce2:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8012ce6:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8012cea:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8012cee:	ee76 6a85 	vadd.f32	s13, s13, s10
 8012cf2:	ee37 7a25 	vadd.f32	s14, s14, s11
 8012cf6:	ee77 7a86 	vadd.f32	s15, s15, s12
 8012cfa:	2401      	movs	r4, #1
 8012cfc:	e7d6      	b.n	8012cac <MEMS_runMagCal.constprop.14+0x12ac>
 8012cfe:	4bcb      	ldr	r3, [pc, #812]	; (801302c <MEMS_runMagCal.constprop.14+0x162c>)
 8012d00:	ed9f 4ad0 	vldr	s8, [pc, #832]	; 8013044 <MEMS_runMagCal.constprop.14+0x1644>
 8012d04:	edd3 4a23 	vldr	s9, [r3, #140]	; 0x8c
 8012d08:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8012d0c:	edd3 5a27 	vldr	s11, [r3, #156]	; 0x9c
 8012d10:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8012d14:	eef7 4a02 	vmov.f32	s9, #114	; 0x3f900000  1.125
 8012d18:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8012d1c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8012d20:	ee67 7a84 	vmul.f32	s15, s15, s8
 8012d24:	eef4 7ae4 	vcmpe.f32	s15, s9
 8012d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d2c:	bf88      	it	hi
 8012d2e:	eef0 7a64 	vmovhi.f32	s15, s9
 8012d32:	eef4 7ae5 	vcmpe.f32	s15, s11
 8012d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d3a:	bfb8      	it	lt
 8012d3c:	eef0 7a65 	vmovlt.f32	s15, s11
 8012d40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012d44:	eeb4 5ac7 	vcmpe.f32	s10, s14
 8012d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d4c:	f77f aedd 	ble.w	8012b0a <MEMS_runMagCal.constprop.14+0x110a>
 8012d50:	2300      	movs	r3, #0
 8012d52:	f88b 3474 	strb.w	r3, [fp, #1140]	; 0x474
 8012d56:	f7ff b8ea 	b.w	8011f2e <MEMS_runMagCal.constprop.14+0x52e>
 8012d5a:	f1ba 0f00 	cmp.w	sl, #0
 8012d5e:	f040 80b5 	bne.w	8012ecc <MEMS_runMagCal.constprop.14+0x14cc>
 8012d62:	2300      	movs	r3, #0
 8012d64:	9303      	str	r3, [sp, #12]
 8012d66:	f7ff bba5 	b.w	80124b4 <MEMS_runMagCal.constprop.14+0xab4>
 8012d6a:	fb93 fef8 	sdiv	lr, r3, r8
 8012d6e:	fb08 3e1e 	mls	lr, r8, lr, r3
 8012d72:	fa0f fe8e 	sxth.w	lr, lr
 8012d76:	f7ff bb0c 	b.w	8012392 <MEMS_runMagCal.constprop.14+0x992>
 8012d7a:	f8db 2514 	ldr.w	r2, [fp, #1300]	; 0x514
 8012d7e:	2101      	movs	r1, #1
 8012d80:	fa01 f303 	lsl.w	r3, r1, r3
 8012d84:	ea23 0302 	bic.w	r3, r3, r2
 8012d88:	4053      	eors	r3, r2
 8012d8a:	f8cb 3514 	str.w	r3, [fp, #1300]	; 0x514
 8012d8e:	e54a      	b.n	8012826 <MEMS_runMagCal.constprop.14+0xe26>
 8012d90:	f8db 250c 	ldr.w	r2, [fp, #1292]	; 0x50c
 8012d94:	2301      	movs	r3, #1
 8012d96:	fa03 f30a 	lsl.w	r3, r3, sl
 8012d9a:	ea23 0302 	bic.w	r3, r3, r2
 8012d9e:	4053      	eors	r3, r2
 8012da0:	f8cb 350c 	str.w	r3, [fp, #1292]	; 0x50c
 8012da4:	e530      	b.n	8012808 <MEMS_runMagCal.constprop.14+0xe08>
 8012da6:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
 8012daa:	f8db 251c 	ldr.w	r2, [fp, #1308]	; 0x51c
 8012dae:	9101      	str	r1, [sp, #4]
 8012db0:	3b20      	subs	r3, #32
 8012db2:	e54c      	b.n	801284e <MEMS_runMagCal.constprop.14+0xe4e>
 8012db4:	fb92 f6f5 	sdiv	r6, r2, r5
 8012db8:	fb05 2216 	mls	r2, r5, r6, r2
 8012dbc:	b216      	sxth	r6, r2
 8012dbe:	f7ff b964 	b.w	801208a <MEMS_runMagCal.constprop.14+0x68a>
 8012dc2:	eddf 6aa2 	vldr	s13, [pc, #648]	; 801304c <MEMS_runMagCal.constprop.14+0x164c>
 8012dc6:	3401      	adds	r4, #1
 8012dc8:	f10d 0938 	add.w	r9, sp, #56	; 0x38
 8012dcc:	fb94 fef7 	sdiv	lr, r4, r7
 8012dd0:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 8012dd4:	fb07 441e 	mls	r4, r7, lr, r4
 8012dd8:	edc9 6a00 	vstr	s13, [r9]
 8012ddc:	2f00      	cmp	r7, #0
 8012dde:	f000 80cb 	beq.w	8012f78 <MEMS_runMagCal.constprop.14+0x1578>
 8012de2:	fa1f fe84 	uxth.w	lr, r4
 8012de6:	1e79      	subs	r1, r7, #1
 8012de8:	2000      	movs	r0, #0
 8012dea:	1c72      	adds	r2, r6, #1
 8012dec:	fa12 f881 	uxtah	r8, r2, r1
 8012df0:	9301      	str	r3, [sp, #4]
 8012df2:	eeb0 6a66 	vmov.f32	s12, s13
 8012df6:	ebae 0e06 	sub.w	lr, lr, r6
 8012dfa:	4604      	mov	r4, r0
 8012dfc:	4631      	mov	r1, r6
 8012dfe:	f241 2c5c 	movw	ip, #4700	; 0x125c
 8012e02:	4603      	mov	r3, r0
 8012e04:	428e      	cmp	r6, r1
 8012e06:	eb0e 0201 	add.w	r2, lr, r1
 8012e0a:	dc21      	bgt.n	8012e50 <MEMS_runMagCal.constprop.14+0x1450>
 8012e0c:	fb92 f0f7 	sdiv	r0, r2, r7
 8012e10:	fb07 2210 	mls	r2, r7, r0, r2
 8012e14:	eb0b 0242 	add.w	r2, fp, r2, lsl #1
 8012e18:	2301      	movs	r3, #1
 8012e1a:	f8b2 0488 	ldrh.w	r0, [r2, #1160]	; 0x488
 8012e1e:	f5a0 5292 	sub.w	r2, r0, #4672	; 0x1240
 8012e22:	4560      	cmp	r0, ip
 8012e24:	f1a2 021c 	sub.w	r2, r2, #28
 8012e28:	bf98      	it	ls
 8012e2a:	ebac 0200 	subls.w	r2, ip, r0
 8012e2e:	b292      	uxth	r2, r2
 8012e30:	fb02 f202 	mul.w	r2, r2, r2
 8012e34:	ee07 2a90 	vmov	s15, r2
 8012e38:	ee07 0a10 	vmov	s14, r0
 8012e3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012e40:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012e44:	441c      	add	r4, r3
 8012e46:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8012e4a:	ee36 6a07 	vadd.f32	s12, s12, s14
 8012e4e:	b2a4      	uxth	r4, r4
 8012e50:	3101      	adds	r1, #1
 8012e52:	4588      	cmp	r8, r1
 8012e54:	d1d6      	bne.n	8012e04 <MEMS_runMagCal.constprop.14+0x1404>
 8012e56:	461a      	mov	r2, r3
 8012e58:	9b01      	ldr	r3, [sp, #4]
 8012e5a:	2a00      	cmp	r2, #0
 8012e5c:	f040 815d 	bne.w	801311a <MEMS_runMagCal.constprop.14+0x171a>
 8012e60:	ed99 7a00 	vldr	s14, [r9]
 8012e64:	b1ac      	cbz	r4, 8012e92 <MEMS_runMagCal.constprop.14+0x1492>
 8012e66:	ee07 4a90 	vmov	s15, r4
 8012e6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012e6e:	ed9d 5a0d 	vldr	s10, [sp, #52]	; 0x34
 8012e72:	ed9f 6a6f 	vldr	s12, [pc, #444]	; 8013030 <MEMS_runMagCal.constprop.14+0x1630>
 8012e76:	eec7 5a27 	vdiv.f32	s11, s14, s15
 8012e7a:	eec5 6a27 	vdiv.f32	s13, s10, s15
 8012e7e:	eeb1 7ae5 	vsqrt.f32	s14, s11
 8012e82:	ee66 7a86 	vmul.f32	s15, s13, s12
 8012e86:	ee27 7a06 	vmul.f32	s14, s14, s12
 8012e8a:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 8012e8e:	ed89 7a00 	vstr	s14, [r9]
 8012e92:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 8012e96:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e9e:	dd1b      	ble.n	8012ed8 <MEMS_runMagCal.constprop.14+0x14d8>
 8012ea0:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 8012ea4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012ea8:	2302      	movs	r3, #2
 8012eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012eae:	f88b 34cc 	strb.w	r3, [fp, #1228]	; 0x4cc
 8012eb2:	f77f a8a9 	ble.w	8012008 <MEMS_runMagCal.constprop.14+0x608>
 8012eb6:	2301      	movs	r3, #1
 8012eb8:	f88b 3475 	strb.w	r3, [fp, #1141]	; 0x475
 8012ebc:	f7ff b8a4 	b.w	8012008 <MEMS_runMagCal.constprop.14+0x608>
 8012ec0:	eeb0 0a49 	vmov.f32	s0, s18
 8012ec4:	4648      	mov	r0, r9
 8012ec6:	f7fd ff61 	bl	8010d8c <MEMS_updateMagBufferIndex.constprop.24>
 8012eca:	e48d      	b.n	80127e8 <MEMS_runMagCal.constprop.14+0xde8>
 8012ecc:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 8012ed0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8012ed4:	f7ff badc 	b.w	8012490 <MEMS_runMagCal.constprop.14+0xa90>
 8012ed8:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8012edc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012ee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ee4:	f8db 247c 	ldr.w	r2, [fp, #1148]	; 0x47c
 8012ee8:	d42d      	bmi.n	8012f46 <MEMS_runMagCal.constprop.14+0x1546>
 8012eea:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 8012eee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ef6:	bfc4      	itt	gt
 8012ef8:	2101      	movgt	r1, #1
 8012efa:	f88b 1475 	strbgt.w	r1, [fp, #1141]	; 0x475
 8012efe:	f7ff bbeb 	b.w	80126d8 <MEMS_runMagCal.constprop.14+0xcd8>
 8012f02:	eb0b 03ca 	add.w	r3, fp, sl, lsl #3
 8012f06:	f8db 2504 	ldr.w	r2, [fp, #1284]	; 0x504
 8012f0a:	f9b3 3520 	ldrsh.w	r3, [r3, #1312]	; 0x520
 8012f0e:	f8db 1480 	ldr.w	r1, [fp, #1152]	; 0x480
 8012f12:	4413      	add	r3, r2
 8012f14:	4299      	cmp	r1, r3
 8012f16:	f4bf af1b 	bcs.w	8012d50 <MEMS_runMagCal.constprop.14+0x1350>
 8012f1a:	9902      	ldr	r1, [sp, #8]
 8012f1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012f20:	fb03 f301 	mul.w	r3, r3, r1
 8012f24:	3364      	adds	r3, #100	; 0x64
 8012f26:	4293      	cmp	r3, r2
 8012f28:	bf38      	it	cc
 8012f2a:	4613      	movcc	r3, r2
 8012f2c:	2200      	movs	r2, #0
 8012f2e:	f8cb 3480 	str.w	r3, [fp, #1152]	; 0x480
 8012f32:	f88b 2474 	strb.w	r2, [fp, #1140]	; 0x474
 8012f36:	f7fe bffa 	b.w	8011f2e <MEMS_runMagCal.constprop.14+0x52e>
 8012f3a:	2400      	movs	r4, #0
 8012f3c:	9404      	str	r4, [sp, #16]
 8012f3e:	e54d      	b.n	80129dc <MEMS_runMagCal.constprop.14+0xfdc>
 8012f40:	4622      	mov	r2, r4
 8012f42:	2500      	movs	r5, #0
 8012f44:	e58a      	b.n	8012a5c <MEMS_runMagCal.constprop.14+0x105c>
 8012f46:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 8012f4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012f4e:	2003      	movs	r0, #3
 8012f50:	2100      	movs	r1, #0
 8012f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f56:	f88b 04cc 	strb.w	r0, [fp, #1228]	; 0x4cc
 8012f5a:	f88b 1475 	strb.w	r1, [fp, #1141]	; 0x475
 8012f5e:	f77f abbe 	ble.w	80126de <MEMS_runMagCal.constprop.14+0xcde>
 8012f62:	2101      	movs	r1, #1
 8012f64:	f88b 1475 	strb.w	r1, [fp, #1141]	; 0x475
 8012f68:	f7ff bbb9 	b.w	80126de <MEMS_runMagCal.constprop.14+0xcde>
 8012f6c:	fb93 f1f2 	sdiv	r1, r3, r2
 8012f70:	fb02 3311 	mls	r3, r2, r1, r3
 8012f74:	b219      	sxth	r1, r3
 8012f76:	e49c      	b.n	80128b2 <MEMS_runMagCal.constprop.14+0xeb2>
 8012f78:	2203      	movs	r2, #3
 8012f7a:	f88b 24cc 	strb.w	r2, [fp, #1228]	; 0x4cc
 8012f7e:	f88b 8475 	strb.w	r8, [fp, #1141]	; 0x475
 8012f82:	f8db 247c 	ldr.w	r2, [fp, #1148]	; 0x47c
 8012f86:	f7ff bbaa 	b.w	80126de <MEMS_runMagCal.constprop.14+0xcde>
 8012f8a:	4613      	mov	r3, r2
 8012f8c:	2d00      	cmp	r5, #0
 8012f8e:	f43f ad70 	beq.w	8012a72 <MEMS_runMagCal.constprop.14+0x1072>
 8012f92:	e56c      	b.n	8012a6e <MEMS_runMagCal.constprop.14+0x106e>
 8012f94:	4284      	cmp	r4, r0
 8012f96:	f6bf ad64 	bge.w	8012a62 <MEMS_runMagCal.constprop.14+0x1062>
 8012f9a:	4553      	cmp	r3, sl
 8012f9c:	da07      	bge.n	8012fae <MEMS_runMagCal.constprop.14+0x15ae>
 8012f9e:	4602      	mov	r2, r0
 8012fa0:	2501      	movs	r5, #1
 8012fa2:	e561      	b.n	8012a68 <MEMS_runMagCal.constprop.14+0x1068>
 8012fa4:	f88b c500 	strb.w	ip, [fp, #1280]	; 0x500
 8012fa8:	4665      	mov	r5, ip
 8012faa:	f7ff b8c6 	b.w	801213a <MEMS_runMagCal.constprop.14+0x73a>
 8012fae:	4603      	mov	r3, r0
 8012fb0:	e55d      	b.n	8012a6e <MEMS_runMagCal.constprop.14+0x106e>
 8012fb2:	f8ad e04e 	strh.w	lr, [sp, #78]	; 0x4e
 8012fb6:	e4d8      	b.n	801296a <MEMS_runMagCal.constprop.14+0xf6a>
 8012fb8:	4e1e      	ldr	r6, [pc, #120]	; (8013034 <MEMS_runMagCal.constprop.14+0x1634>)
 8012fba:	9c03      	ldr	r4, [sp, #12]
 8012fbc:	ad15      	add	r5, sp, #84	; 0x54
 8012fbe:	f856 0b04 	ldr.w	r0, [r6], #4
 8012fc2:	f008 fb91 	bl	801b6e8 <roundf>
 8012fc6:	ee07 0a90 	vmov	s15, r0
 8012fca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012fce:	ee17 0a90 	vmov	r0, s15
 8012fd2:	f825 0014 	strh.w	r0, [r5, r4, lsl #1]
 8012fd6:	3401      	adds	r4, #1
 8012fd8:	2c03      	cmp	r4, #3
 8012fda:	d1f0      	bne.n	8012fbe <MEMS_runMagCal.constprop.14+0x15be>
 8012fdc:	ab0f      	add	r3, sp, #60	; 0x3c
 8012fde:	aa10      	add	r2, sp, #64	; 0x40
 8012fe0:	eeb0 0a68 	vmov.f32	s0, s17
 8012fe4:	4914      	ldr	r1, [pc, #80]	; (8013038 <MEMS_runMagCal.constprop.14+0x1638>)
 8012fe6:	4628      	mov	r0, r5
 8012fe8:	f7fd fdde 	bl	8010ba8 <getMagStats.constprop.26>
 8012fec:	ed9d 7a0f 	vldr	s14, [sp, #60]	; 0x3c
 8012ff0:	eddf 7a12 	vldr	s15, [pc, #72]	; 801303c <MEMS_runMagCal.constprop.14+0x163c>
 8012ff4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ffc:	d511      	bpl.n	8013022 <MEMS_runMagCal.constprop.14+0x1622>
 8012ffe:	b980      	cbnz	r0, 8013022 <MEMS_runMagCal.constprop.14+0x1622>
 8013000:	f89b 34b4 	ldrb.w	r3, [fp, #1204]	; 0x4b4
 8013004:	2b00      	cmp	r3, #0
 8013006:	f000 8093 	beq.w	8013130 <MEMS_runMagCal.constprop.14+0x1730>
 801300a:	f89b 34bd 	ldrb.w	r3, [fp, #1213]	; 0x4bd
 801300e:	ee07 3a90 	vmov	s15, r3
 8013012:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013016:	eeb4 9ae7 	vcmpe.f32	s18, s15
 801301a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801301e:	f300 8087 	bgt.w	8013130 <MEMS_runMagCal.constprop.14+0x1730>
 8013022:	2300      	movs	r3, #0
 8013024:	602b      	str	r3, [r5, #0]
 8013026:	80ab      	strh	r3, [r5, #4]
 8013028:	e619      	b.n	8012c5e <MEMS_runMagCal.constprop.14+0x125e>
 801302a:	bf00      	nop
 801302c:	20001828 	.word	0x20001828
 8013030:	3c23d70a 	.word	0x3c23d70a
 8013034:	20001898 	.word	0x20001898
 8013038:	200018a4 	.word	0x200018a4
 801303c:	3ff4cccd 	.word	0x3ff4cccd
 8013040:	358637bd 	.word	0x358637bd
 8013044:	3eaaaaab 	.word	0x3eaaaaab
 8013048:	3e2aaaab 	.word	0x3e2aaaab
 801304c:	00000000 	.word	0x00000000
 8013050:	40060a92 	.word	0x40060a92
 8013054:	42960000 	.word	0x42960000
 8013058:	3a83126f 	.word	0x3a83126f
 801305c:	430d0000 	.word	0x430d0000
 8013060:	b12c      	cbz	r4, 801306e <MEMS_runMagCal.constprop.14+0x166e>
 8013062:	edcd 6a1a 	vstr	s13, [sp, #104]	; 0x68
 8013066:	ed8d 7a1b 	vstr	s14, [sp, #108]	; 0x6c
 801306a:	edcd 7a1c 	vstr	s15, [sp, #112]	; 0x70
 801306e:	ee07 8a90 	vmov	s15, r8
 8013072:	eeb8 bae7 	vcvt.f32.s32	s22, s15
 8013076:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801307a:	eec7 9a8b 	vdiv.f32	s19, s15, s22
 801307e:	2000      	movs	r0, #0
 8013080:	4604      	mov	r4, r0
 8013082:	eddd aa1a 	vldr	s21, [sp, #104]	; 0x68
 8013086:	ed9d aa1b 	vldr	s20, [sp, #108]	; 0x6c
 801308a:	ed9d 7a1c 	vldr	s14, [sp, #112]	; 0x70
 801308e:	ed5f 7a11 	vldr	s15, [pc, #-68]	; 801304c <MEMS_runMagCal.constprop.14+0x164c>
 8013092:	ee69 aaaa 	vmul.f32	s21, s19, s21
 8013096:	ee29 aa8a 	vmul.f32	s20, s19, s20
 801309a:	ee69 9a87 	vmul.f32	s19, s19, s14
 801309e:	eef0 5a67 	vmov.f32	s11, s15
 80130a2:	eeb0 5a67 	vmov.f32	s10, s15
 80130a6:	eef0 4a67 	vmov.f32	s9, s15
 80130aa:	eeb0 4a67 	vmov.f32	s8, s15
 80130ae:	eef0 3a67 	vmov.f32	s7, s15
 80130b2:	b2c3      	uxtb	r3, r0
 80130b4:	4598      	cmp	r8, r3
 80130b6:	eb01 0500 	add.w	r5, r1, r0
 80130ba:	d959      	bls.n	8013170 <MEMS_runMagCal.constprop.14+0x1770>
 80130bc:	fb95 f3f2 	sdiv	r3, r5, r2
 80130c0:	fb02 5313 	mls	r3, r2, r3, r5
 80130c4:	b2db      	uxtb	r3, r3
 80130c6:	3304      	adds	r3, #4
 80130c8:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 80130cc:	3001      	adds	r0, #1
 80130ce:	f9b3 4502 	ldrsh.w	r4, [r3, #1282]	; 0x502
 80130d2:	ee06 4a10 	vmov	s12, r4
 80130d6:	f9b3 4504 	ldrsh.w	r4, [r3, #1284]	; 0x504
 80130da:	f9b3 3506 	ldrsh.w	r3, [r3, #1286]	; 0x506
 80130de:	ee06 4a90 	vmov	s13, r4
 80130e2:	ee07 3a10 	vmov	s14, r3
 80130e6:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80130ea:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80130ee:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80130f2:	ee36 6a6a 	vsub.f32	s12, s12, s21
 80130f6:	ee76 6aca 	vsub.f32	s13, s13, s20
 80130fa:	ee37 7a69 	vsub.f32	s14, s14, s19
 80130fe:	eea6 4a06 	vfma.f32	s8, s12, s12
 8013102:	2401      	movs	r4, #1
 8013104:	eee6 4a26 	vfma.f32	s9, s12, s13
 8013108:	eee6 3aa6 	vfma.f32	s7, s13, s13
 801310c:	eea6 5a07 	vfma.f32	s10, s12, s14
 8013110:	eee6 5a87 	vfma.f32	s11, s13, s14
 8013114:	eee7 7a07 	vfma.f32	s15, s14, s14
 8013118:	e7cb      	b.n	80130b2 <MEMS_runMagCal.constprop.14+0x16b2>
 801311a:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801311e:	edc9 6a00 	vstr	s13, [r9]
 8013122:	e69d      	b.n	8012e60 <MEMS_runMagCal.constprop.14+0x1460>
 8013124:	fb93 f1f8 	sdiv	r1, r3, r8
 8013128:	fb08 3311 	mls	r3, r8, r1, r3
 801312c:	b219      	sxth	r1, r3
 801312e:	e5b5      	b.n	8012c9c <MEMS_runMagCal.constprop.14+0x129c>
 8013130:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 8013134:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8013138:	ed5f 7a39 	vldr	s15, [pc, #-228]	; 8013058 <MEMS_runMagCal.constprop.14+0x1658>
 801313c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013140:	2303      	movs	r3, #3
 8013142:	ee17 0a90 	vmov	r0, s15
 8013146:	f88b 34cc 	strb.w	r3, [fp, #1228]	; 0x4cc
 801314a:	f008 facd 	bl	801b6e8 <roundf>
 801314e:	ee07 0a90 	vmov	s15, r0
 8013152:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013156:	2300      	movs	r3, #0
 8013158:	ee17 0a90 	vmov	r0, s15
 801315c:	f88b 3474 	strb.w	r3, [fp, #1140]	; 0x474
 8013160:	f8cb 0478 	str.w	r0, [fp, #1144]	; 0x478
 8013164:	f7fe bee3 	b.w	8011f2e <MEMS_runMagCal.constprop.14+0x52e>
 8013168:	f8ad 70d8 	strh.w	r7, [sp, #216]	; 0xd8
 801316c:	f7fe be02 	b.w	8011d74 <MEMS_runMagCal.constprop.14+0x374>
 8013170:	b15c      	cbz	r4, 801318a <MEMS_runMagCal.constprop.14+0x178a>
 8013172:	edcd 3a31 	vstr	s7, [sp, #196]	; 0xc4
 8013176:	ed8d 4a2e 	vstr	s8, [sp, #184]	; 0xb8
 801317a:	edcd 4a2f 	vstr	s9, [sp, #188]	; 0xbc
 801317e:	ed8d 5a30 	vstr	s10, [sp, #192]	; 0xc0
 8013182:	edcd 5a32 	vstr	s11, [sp, #200]	; 0xc8
 8013186:	edcd 7a33 	vstr	s15, [sp, #204]	; 0xcc
 801318a:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801318e:	eddd 5a2f 	vldr	s11, [sp, #188]	; 0xbc
 8013192:	ed9d 6a32 	vldr	s12, [sp, #200]	; 0xc8
 8013196:	ed1f 5a56 	vldr	s10, [pc, #-344]	; 8013040 <MEMS_runMagCal.constprop.14+0x1640>
 801319a:	eddd ba2e 	vldr	s23, [sp, #184]	; 0xb8
 801319e:	eddd 7a31 	vldr	s15, [sp, #196]	; 0xc4
 80131a2:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 80131a6:	ee66 6aa6 	vmul.f32	s13, s13, s13
 80131aa:	eee5 6aa5 	vfma.f32	s13, s11, s11
 80131ae:	eee6 6a06 	vfma.f32	s13, s12, s12
 80131b2:	eef4 6ac5 	vcmpe.f32	s13, s10
 80131b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131ba:	f100 80be 	bmi.w	801333a <MEMS_runMagCal.constprop.14+0x193a>
 80131be:	ee3b daa7 	vadd.f32	s26, s23, s15
 80131c2:	ed1f 6a60 	vldr	s12, [pc, #-384]	; 8013044 <MEMS_runMagCal.constprop.14+0x1644>
 80131c6:	ed5f 5a60 	vldr	s11, [pc, #-384]	; 8013048 <MEMS_runMagCal.constprop.14+0x1648>
 80131ca:	ee3d da07 	vadd.f32	s26, s26, s14
 80131ce:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 80131d2:	ee2d da06 	vmul.f32	s26, s26, s12
 80131d6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80131da:	ee77 7acd 	vsub.f32	s15, s15, s26
 80131de:	ee7b bacd 	vsub.f32	s23, s23, s26
 80131e2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80131e6:	ee37 7a4d 	vsub.f32	s14, s14, s26
 80131ea:	eeeb 7aab 	vfma.f32	s15, s23, s23
 80131ee:	f04f 0900 	mov.w	r9, #0
 80131f2:	4649      	mov	r1, r9
 80131f4:	f04f 0e02 	mov.w	lr, #2
 80131f8:	eee6 7a85 	vfma.f32	s15, s13, s10
 80131fc:	eee7 7a07 	vfma.f32	s15, s14, s14
 8013200:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8013204:	eeb1 cae7 	vsqrt.f32	s24, s15
 8013208:	ee86 7a0c 	vdiv.f32	s14, s12, s24
 801320c:	1c4c      	adds	r4, r1, #1
 801320e:	fb01 f304 	mul.w	r3, r1, r4
 8013212:	fb93 f3fe 	sdiv	r3, r3, lr
 8013216:	eba9 0303 	sub.w	r3, r9, r3
 801321a:	b2c8      	uxtb	r0, r1
 801321c:	aa46      	add	r2, sp, #280	; 0x118
 801321e:	b2dd      	uxtb	r5, r3
 8013220:	230c      	movs	r3, #12
 8013222:	fb03 2101 	mla	r1, r3, r1, r2
 8013226:	4606      	mov	r6, r0
 8013228:	2200      	movs	r2, #0
 801322a:	9001      	str	r0, [sp, #4]
 801322c:	fa5f fc82 	uxtb.w	ip, r2
 8013230:	9801      	ldr	r0, [sp, #4]
 8013232:	eb05 030c 	add.w	r3, r5, ip
 8013236:	4560      	cmp	r0, ip
 8013238:	b2db      	uxtb	r3, r3
 801323a:	f102 0701 	add.w	r7, r2, #1
 801323e:	a82e      	add	r0, sp, #184	; 0xb8
 8013240:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8013244:	fb02 fc07 	mul.w	ip, r2, r7
 8013248:	f200 80db 	bhi.w	8013402 <MEMS_runMagCal.constprop.14+0x1a02>
 801324c:	edd0 7a00 	vldr	s15, [r0]
 8013250:	f000 80cf 	beq.w	80133f2 <MEMS_runMagCal.constprop.14+0x19f2>
 8013254:	aa2e      	add	r2, sp, #184	; 0xb8
 8013256:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801325a:	edd3 7a00 	vldr	s15, [r3]
 801325e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013262:	edc1 7a00 	vstr	s15, [r1]
 8013266:	3603      	adds	r6, #3
 8013268:	2f03      	cmp	r7, #3
 801326a:	b2f6      	uxtb	r6, r6
 801326c:	f101 0104 	add.w	r1, r1, #4
 8013270:	463a      	mov	r2, r7
 8013272:	d1db      	bne.n	801322c <MEMS_runMagCal.constprop.14+0x182c>
 8013274:	f109 0903 	add.w	r9, r9, #3
 8013278:	2c03      	cmp	r4, #3
 801327a:	fa5f f989 	uxtb.w	r9, r9
 801327e:	4621      	mov	r1, r4
 8013280:	d1c4      	bne.n	801320c <MEMS_runMagCal.constprop.14+0x180c>
 8013282:	eddd 4a4e 	vldr	s9, [sp, #312]	; 0x138
 8013286:	ed9d 6a49 	vldr	s12, [sp, #292]	; 0x124
 801328a:	ed9d 4a4b 	vldr	s8, [sp, #300]	; 0x12c
 801328e:	eddd 5a4d 	vldr	s11, [sp, #308]	; 0x134
 8013292:	ed9d 7a4c 	vldr	s14, [sp, #304]	; 0x130
 8013296:	ed9d 5a4a 	vldr	s10, [sp, #296]	; 0x128
 801329a:	eddd 3a47 	vldr	s7, [sp, #284]	; 0x11c
 801329e:	ee66 7a64 	vnmul.f32	s15, s12, s9
 80132a2:	ee65 6ac4 	vnmul.f32	s13, s11, s8
 80132a6:	eee4 7a07 	vfma.f32	s15, s8, s14
 80132aa:	eee5 6a24 	vfma.f32	s13, s10, s9
 80132ae:	ee27 7a45 	vnmul.f32	s14, s14, s10
 80132b2:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80132b6:	eddd 4a46 	vldr	s9, [sp, #280]	; 0x118
 80132ba:	ed9d 5a48 	vldr	s10, [sp, #288]	; 0x120
 80132be:	eea5 7a86 	vfma.f32	s14, s11, s12
 80132c2:	eee4 7aa6 	vfma.f32	s15, s9, s13
 80132c6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80132ca:	eee5 7a07 	vfma.f32	s15, s10, s14
 80132ce:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80132d2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80132d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80132da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132de:	f240 8172 	bls.w	80135c6 <MEMS_runMagCal.constprop.14+0x1bc6>
 80132e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80132e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80132ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132ee:	f2c0 815f 	blt.w	80135b0 <MEMS_runMagCal.constprop.14+0x1bb0>
 80132f2:	ed5f caaa 	vldr	s25, [pc, #-680]	; 801304c <MEMS_runMagCal.constprop.14+0x164c>
 80132f6:	ee1c 0a90 	vmov	r0, s25
 80132fa:	f008 f9bd 	bl	801b678 <cosf>
 80132fe:	ed5f 7aac 	vldr	s15, [pc, #-688]	; 8013050 <MEMS_runMagCal.constprop.14+0x1650>
 8013302:	ee7c 7aa7 	vadd.f32	s15, s25, s15
 8013306:	ee07 0a10 	vmov	s14, r0
 801330a:	ee3c ca0c 	vadd.f32	s24, s24, s24
 801330e:	ee17 0a90 	vmov	r0, s15
 8013312:	eef0 ba4d 	vmov.f32	s23, s26
 8013316:	eee7 ba0c 	vfma.f32	s23, s14, s24
 801331a:	f008 f9ad 	bl	801b678 <cosf>
 801331e:	ee06 0a90 	vmov	s13, r0
 8013322:	eeb0 7a4d 	vmov.f32	s14, s26
 8013326:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 801332a:	eea6 7a8c 	vfma.f32	s14, s13, s24
 801332e:	eef0 6a6b 	vmov.f32	s13, s23
 8013332:	eedd 6a27 	vfnms.f32	s13, s26, s15
 8013336:	ee76 7ac7 	vsub.f32	s15, s13, s14
 801333a:	ee77 6a27 	vadd.f32	s13, s14, s15
 801333e:	eef0 7ae7 	vabs.f32	s15, s15
 8013342:	ee76 6aab 	vadd.f32	s13, s13, s23
 8013346:	eef0 baeb 	vabs.f32	s23, s23
 801334a:	eec6 5a8b 	vdiv.f32	s11, s13, s22
 801334e:	eef4 7aeb 	vcmpe.f32	s15, s23
 8013352:	eeb1 6ae5 	vsqrt.f32	s12, s11
 8013356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801335a:	eeb0 7ac7 	vabs.f32	s14, s14
 801335e:	bf8c      	ite	hi
 8013360:	eef0 6a6b 	vmovhi.f32	s13, s23
 8013364:	eef0 6a67 	vmovls.f32	s13, s15
 8013368:	eef4 6ac7 	vcmpe.f32	s13, s14
 801336c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013370:	eef4 7aeb 	vcmpe.f32	s15, s23
 8013374:	bf88      	it	hi
 8013376:	eef0 6a47 	vmovhi.f32	s13, s14
 801337a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801337e:	bfb8      	it	lt
 8013380:	eef0 7a6b 	vmovlt.f32	s15, s23
 8013384:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013388:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
 801338c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013390:	ee66 5aa5 	vmul.f32	s11, s13, s11
 8013394:	bfa8      	it	ge
 8013396:	eef0 7a47 	vmovge.f32	s15, s14
 801339a:	eef4 7ae5 	vcmpe.f32	s15, s11
 801339e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133a2:	ee28 7a86 	vmul.f32	s14, s17, s12
 80133a6:	dc19      	bgt.n	80133dc <MEMS_runMagCal.constprop.14+0x19dc>
 80133a8:	eeb3 6a04 	vmov.f32	s12, #52	; 0x41a00000  20.0
 80133ac:	ee66 6a86 	vmul.f32	s13, s13, s12
 80133b0:	eef4 7ae6 	vcmpe.f32	s15, s13
 80133b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133b8:	dd02      	ble.n	80133c0 <MEMS_runMagCal.constprop.14+0x19c0>
 80133ba:	f1b8 0f22 	cmp.w	r8, #34	; 0x22
 80133be:	d90d      	bls.n	80133dc <MEMS_runMagCal.constprop.14+0x19dc>
 80133c0:	ed5f 7adc 	vldr	s15, [pc, #-880]	; 8013054 <MEMS_runMagCal.constprop.14+0x1654>
 80133c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80133c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133cc:	dc06      	bgt.n	80133dc <MEMS_runMagCal.constprop.14+0x19dc>
 80133ce:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 80133d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80133d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133da:	d517      	bpl.n	801340c <MEMS_runMagCal.constprop.14+0x1a0c>
 80133dc:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 80133e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80133e4:	ed5f 7ae4 	vldr	s15, [pc, #-912]	; 8013058 <MEMS_runMagCal.constprop.14+0x1658>
 80133e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80133ec:	ee17 0a90 	vmov	r0, s15
 80133f0:	e6ab      	b.n	801314a <MEMS_runMagCal.constprop.14+0x174a>
 80133f2:	ee77 7acd 	vsub.f32	s15, s15, s26
 80133f6:	1c57      	adds	r7, r2, #1
 80133f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80133fc:	edc1 7a00 	vstr	s15, [r1]
 8013400:	e731      	b.n	8013266 <MEMS_runMagCal.constprop.14+0x1866>
 8013402:	fb9c f3fe 	sdiv	r3, ip, lr
 8013406:	1af3      	subs	r3, r6, r3
 8013408:	b2db      	uxtb	r3, r3
 801340a:	e723      	b.n	8013254 <MEMS_runMagCal.constprop.14+0x1854>
 801340c:	ed1f 7aed 	vldr	s14, [pc, #-948]	; 801305c <MEMS_runMagCal.constprop.14+0x165c>
 8013410:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8013414:	2300      	movs	r3, #0
 8013416:	e9cd 3332 	strd	r3, r3, [sp, #200]	; 0xc8
 801341a:	9335      	str	r3, [sp, #212]	; 0xd4
 801341c:	ee07 aa10 	vmov	s14, sl
 8013420:	eeb8 8ac7 	vcvt.f32.s32	s16, s14
 8013424:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8013428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801342c:	d409      	bmi.n	8013442 <MEMS_runMagCal.constprop.14+0x1a42>
 801342e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013432:	ee17 3a90 	vmov	r3, s15
 8013436:	fa0f fa83 	sxth.w	sl, r3
 801343a:	ee07 aa90 	vmov	s15, sl
 801343e:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8013442:	ed9f 7ace 	vldr	s14, [pc, #824]	; 801377c <MEMS_runMagCal.constprop.14+0x1d7c>
 8013446:	eec7 7a28 	vdiv.f32	s15, s14, s17
 801344a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801344e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013452:	dc09      	bgt.n	8013468 <MEMS_runMagCal.constprop.14+0x1a68>
 8013454:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013458:	ee17 3a90 	vmov	r3, s15
 801345c:	fa0f fa83 	sxth.w	sl, r3
 8013460:	ee07 aa90 	vmov	s15, sl
 8013464:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8013468:	eddf 7ac5 	vldr	s15, [pc, #788]	; 8013780 <MEMS_runMagCal.constprop.14+0x1d80>
 801346c:	ed9f 7ac5 	vldr	s14, [pc, #788]	; 8013784 <MEMS_runMagCal.constprop.14+0x1d84>
 8013470:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8013474:	ee28 8a27 	vmul.f32	s16, s16, s15
 8013478:	eeb4 8ac7 	vcmpe.f32	s16, s14
 801347c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013480:	f340 850a 	ble.w	8013e98 <MEMS_runMagCal.constprop.14+0x2498>
 8013484:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8013488:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801348c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013490:	f140 8502 	bpl.w	8013e98 <MEMS_runMagCal.constprop.14+0x2498>
 8013494:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8013498:	ee48 7a27 	vmla.f32	s15, s16, s15
 801349c:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 801377c <MEMS_runMagCal.constprop.14+0x1d7c>
 80134a0:	ed9f bab9 	vldr	s22, [pc, #740]	; 8013788 <MEMS_runMagCal.constprop.14+0x1d88>
 80134a4:	ed9f 8ab9 	vldr	s16, [pc, #740]	; 801378c <MEMS_runMagCal.constprop.14+0x1d8c>
 80134a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80134ac:	ee68 aaaa 	vmul.f32	s21, s17, s21
 80134b0:	ee28 aa8a 	vmul.f32	s20, s17, s20
 80134b4:	ee68 9aa9 	vmul.f32	s19, s17, s19
 80134b8:	edcd aa2e 	vstr	s21, [sp, #184]	; 0xb8
 80134bc:	ed8d aa2f 	vstr	s20, [sp, #188]	; 0xbc
 80134c0:	edcd 9a30 	vstr	s19, [sp, #192]	; 0xc0
 80134c4:	edcd 7a31 	vstr	s15, [sp, #196]	; 0xc4
 80134c8:	edcd 7a34 	vstr	s15, [sp, #208]	; 0xd0
 80134cc:	2400      	movs	r4, #0
 80134ce:	4621      	mov	r1, r4
 80134d0:	2240      	movs	r2, #64	; 0x40
 80134d2:	a836      	add	r0, sp, #216	; 0xd8
 80134d4:	e9cd 4421 	strd	r4, r4, [sp, #132]	; 0x84
 80134d8:	e9cd 4423 	strd	r4, r4, [sp, #140]	; 0x8c
 80134dc:	e9cd 441d 	strd	r4, r4, [sp, #116]	; 0x74
 80134e0:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
 80134e4:	f007 f897 	bl	801a616 <memset>
 80134e8:	4621      	mov	r1, r4
 80134ea:	2240      	movs	r2, #64	; 0x40
 80134ec:	a846      	add	r0, sp, #280	; 0x118
 80134ee:	f007 f892 	bl	801a616 <memset>
 80134f2:	eddd 4a31 	vldr	s9, [sp, #196]	; 0xc4
 80134f6:	eddf 7aa6 	vldr	s15, [pc, #664]	; 8013790 <MEMS_runMagCal.constprop.14+0x1d90>
 80134fa:	eef4 4ae7 	vcmpe.f32	s9, s15
 80134fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013502:	f100 80a6 	bmi.w	8013652 <MEMS_runMagCal.constprop.14+0x1c52>
 8013506:	f89b 4500 	ldrb.w	r4, [fp, #1280]	; 0x500
 801350a:	f89b 0501 	ldrb.w	r0, [fp, #1281]	; 0x501
 801350e:	f99b 3502 	ldrsb.w	r3, [fp, #1282]	; 0x502
 8013512:	4284      	cmp	r4, r0
 8013514:	f103 0301 	add.w	r3, r3, #1
 8013518:	f000 84b7 	beq.w	8013e8a <MEMS_runMagCal.constprop.14+0x248a>
 801351c:	1b1b      	subs	r3, r3, r4
 801351e:	fb93 f2f0 	sdiv	r2, r3, r0
 8013522:	fb00 3312 	mls	r3, r0, r2, r3
 8013526:	2b00      	cmp	r3, #0
 8013528:	b219      	sxth	r1, r3
 801352a:	bfbc      	itt	lt
 801352c:	181b      	addlt	r3, r3, r0
 801352e:	b219      	sxthlt	r1, r3
 8013530:	f8df 928c 	ldr.w	r9, [pc, #652]	; 80137c0 <MEMS_runMagCal.constprop.14+0x1dc0>
 8013534:	2500      	movs	r5, #0
 8013536:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 801353a:	af29      	add	r7, sp, #164	; 0xa4
 801353c:	2614      	movs	r6, #20
 801353e:	b2eb      	uxtb	r3, r5
 8013540:	429c      	cmp	r4, r3
 8013542:	d976      	bls.n	8013632 <MEMS_runMagCal.constprop.14+0x1c32>
 8013544:	194a      	adds	r2, r1, r5
 8013546:	fb92 f3f0 	sdiv	r3, r2, r0
 801354a:	fb00 2313 	mls	r3, r0, r3, r2
 801354e:	b2db      	uxtb	r3, r3
 8013550:	3304      	adds	r3, #4
 8013552:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8013556:	eddd 6a2f 	vldr	s13, [sp, #188]	; 0xbc
 801355a:	f9b3 2504 	ldrsh.w	r2, [r3, #1284]	; 0x504
 801355e:	ed9d 6a2e 	vldr	s12, [sp, #184]	; 0xb8
 8013562:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8013566:	ee05 2a10 	vmov	s10, r2
 801356a:	f9b3 2502 	ldrsh.w	r2, [r3, #1282]	; 0x502
 801356e:	f9b3 3506 	ldrsh.w	r3, [r3, #1286]	; 0x506
 8013572:	ee07 2a10 	vmov	s14, r2
 8013576:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 801357a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801357e:	eed8 6a85 	vfnms.f32	s13, s17, s10
 8013582:	ee98 6a87 	vfnms.f32	s12, s17, s14
 8013586:	ee05 3a90 	vmov	s11, r3
 801358a:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801358e:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8013592:	eea6 7a06 	vfma.f32	s14, s12, s12
 8013596:	eed8 7aa5 	vfnms.f32	s15, s17, s11
 801359a:	eea7 7aa7 	vfma.f32	s14, s15, s15
 801359e:	eeb4 7acb 	vcmpe.f32	s14, s22
 80135a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135a6:	eef1 5ac7 	vsqrt.f32	s11, s14
 80135aa:	d50f      	bpl.n	80135cc <MEMS_runMagCal.constprop.14+0x1bcc>
 80135ac:	3501      	adds	r5, #1
 80135ae:	e7c6      	b.n	801353e <MEMS_runMagCal.constprop.14+0x1b3e>
 80135b0:	ee17 0a90 	vmov	r0, s15
 80135b4:	f008 f9ca 	bl	801b94c <acosf>
 80135b8:	eddf ca76 	vldr	s25, [pc, #472]	; 8013794 <MEMS_runMagCal.constprop.14+0x1d94>
 80135bc:	ee07 0a90 	vmov	s15, r0
 80135c0:	ee67 caac 	vmul.f32	s25, s15, s25
 80135c4:	e697      	b.n	80132f6 <MEMS_runMagCal.constprop.14+0x18f6>
 80135c6:	eddf ca74 	vldr	s25, [pc, #464]	; 8013798 <MEMS_runMagCal.constprop.14+0x1d98>
 80135ca:	e694      	b.n	80132f6 <MEMS_runMagCal.constprop.14+0x18f6>
 80135cc:	ee84 7a25 	vdiv.f32	s14, s8, s11
 80135d0:	f10d 0c84 	add.w	ip, sp, #132	; 0x84
 80135d4:	aa25      	add	r2, sp, #148	; 0x94
 80135d6:	2300      	movs	r3, #0
 80135d8:	f8cd 90a0 	str.w	r9, [sp, #160]	; 0xa0
 80135dc:	ee74 5ae5 	vsub.f32	s11, s9, s11
 80135e0:	ee27 6a46 	vnmul.f32	s12, s14, s12
 80135e4:	ee67 6a66 	vnmul.f32	s13, s14, s13
 80135e8:	ee67 7a67 	vnmul.f32	s15, s14, s15
 80135ec:	ed8d 6a25 	vstr	s12, [sp, #148]	; 0x94
 80135f0:	edcd 6a26 	vstr	s13, [sp, #152]	; 0x98
 80135f4:	edcd 7a27 	vstr	s15, [sp, #156]	; 0x9c
 80135f8:	eddc 7a00 	vldr	s15, [ip]
 80135fc:	ed92 7a00 	vldr	s14, [r2]
 8013600:	eee5 7a87 	vfma.f32	s15, s11, s14
 8013604:	f10d 0ed8 	add.w	lr, sp, #216	; 0xd8
 8013608:	fb06 e803 	mla	r8, r6, r3, lr
 801360c:	4696      	mov	lr, r2
 801360e:	ecec 7a01 	vstmia	ip!, {s15}
 8013612:	edd8 7a00 	vldr	s15, [r8]
 8013616:	ecfe 6a01 	vldmia	lr!, {s13}
 801361a:	eee7 7a26 	vfma.f32	s15, s14, s13
 801361e:	4577      	cmp	r7, lr
 8013620:	ece8 7a01 	vstmia	r8!, {s15}
 8013624:	d1f5      	bne.n	8013612 <MEMS_runMagCal.constprop.14+0x1c12>
 8013626:	3301      	adds	r3, #1
 8013628:	2b04      	cmp	r3, #4
 801362a:	f102 0204 	add.w	r2, r2, #4
 801362e:	d1e3      	bne.n	80135f8 <MEMS_runMagCal.constprop.14+0x1bf8>
 8013630:	e7bc      	b.n	80135ac <MEMS_runMagCal.constprop.14+0x1bac>
 8013632:	aa37      	add	r2, sp, #220	; 0xdc
 8013634:	2103      	movs	r1, #3
 8013636:	2300      	movs	r3, #0
 8013638:	f102 000c 	add.w	r0, r2, #12
 801363c:	428b      	cmp	r3, r1
 801363e:	eb02 0483 	add.w	r4, r2, r3, lsl #2
 8013642:	f000 842d 	beq.w	8013ea0 <MEMS_runMagCal.constprop.14+0x24a0>
 8013646:	6825      	ldr	r5, [r4, #0]
 8013648:	eb00 1403 	add.w	r4, r0, r3, lsl #4
 801364c:	3301      	adds	r3, #1
 801364e:	6025      	str	r5, [r4, #0]
 8013650:	e7f4      	b.n	801363c <MEMS_runMagCal.constprop.14+0x1c3c>
 8013652:	eddf 9a52 	vldr	s19, [pc, #328]	; 801379c <MEMS_runMagCal.constprop.14+0x1d9c>
 8013656:	eddf 7a52 	vldr	s15, [pc, #328]	; 80137a0 <MEMS_runMagCal.constprop.14+0x1da0>
 801365a:	eeb0 7a69 	vmov.f32	s14, s19
 801365e:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 8013662:	eddd 6a31 	vldr	s13, [sp, #196]	; 0xc4
 8013666:	eddf 5a45 	vldr	s11, [pc, #276]	; 801377c <MEMS_runMagCal.constprop.14+0x1d7c>
 801366a:	eef4 7ac6 	vcmpe.f32	s15, s12
 801366e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013672:	ee85 8aa6 	vdiv.f32	s16, s11, s13
 8013676:	dc0e      	bgt.n	8013696 <MEMS_runMagCal.constprop.14+0x1c96>
 8013678:	eddf 7a4a 	vldr	s15, [pc, #296]	; 80137a4 <MEMS_runMagCal.constprop.14+0x1da4>
 801367c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013684:	dc07      	bgt.n	8013696 <MEMS_runMagCal.constprop.14+0x1c96>
 8013686:	eddf 7a42 	vldr	s15, [pc, #264]	; 8013790 <MEMS_runMagCal.constprop.14+0x1d90>
 801368a:	eef4 6ae7 	vcmpe.f32	s13, s15
 801368e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013692:	f200 809f 	bhi.w	80137d4 <MEMS_runMagCal.constprop.14+0x1dd4>
 8013696:	4b44      	ldr	r3, [pc, #272]	; (80137a8 <MEMS_runMagCal.constprop.14+0x1da8>)
 8013698:	ed9f 8a41 	vldr	s16, [pc, #260]	; 80137a0 <MEMS_runMagCal.constprop.14+0x1da0>
 801369c:	9325      	str	r3, [sp, #148]	; 0x94
 801369e:	9334      	str	r3, [sp, #208]	; 0xd0
 80136a0:	ed9f 5a36 	vldr	s10, [pc, #216]	; 801377c <MEMS_runMagCal.constprop.14+0x1d7c>
 80136a4:	eddd 5a31 	vldr	s11, [sp, #196]	; 0xc4
 80136a8:	ed9d 7a34 	vldr	s14, [sp, #208]	; 0xd0
 80136ac:	ed9d 6a2e 	vldr	s12, [sp, #184]	; 0xb8
 80136b0:	eddd aa2f 	vldr	s21, [sp, #188]	; 0xbc
 80136b4:	ed9d aa30 	vldr	s20, [sp, #192]	; 0xc0
 80136b8:	eddd 6a25 	vldr	s13, [sp, #148]	; 0x94
 80136bc:	eec5 7a25 	vdiv.f32	s15, s10, s11
 80136c0:	2300      	movs	r3, #0
 80136c2:	9347      	str	r3, [sp, #284]	; 0x11c
 80136c4:	9348      	str	r3, [sp, #288]	; 0x120
 80136c6:	9349      	str	r3, [sp, #292]	; 0x124
 80136c8:	934b      	str	r3, [sp, #300]	; 0x12c
 80136ca:	934c      	str	r3, [sp, #304]	; 0x130
 80136cc:	934d      	str	r3, [sp, #308]	; 0x134
 80136ce:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80136d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136d6:	ee29 6a06 	vmul.f32	s12, s18, s12
 80136da:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 80136de:	edcd 7a4a 	vstr	s15, [sp, #296]	; 0x128
 80136e2:	edcd 7a4e 	vstr	s15, [sp, #312]	; 0x138
 80136e6:	ee69 aa2a 	vmul.f32	s21, s18, s21
 80136ea:	ee29 aa0a 	vmul.f32	s20, s18, s20
 80136ee:	d441      	bmi.n	8013774 <MEMS_runMagCal.constprop.14+0x1d74>
 80136f0:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80136f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136f8:	d43c      	bmi.n	8013774 <MEMS_runMagCal.constprop.14+0x1d74>
 80136fa:	eec6 5a87 	vdiv.f32	s11, s13, s14
 80136fe:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
 8013702:	ee79 9ae5 	vsub.f32	s19, s19, s11
 8013706:	eddf 6a29 	vldr	s13, [pc, #164]	; 80137ac <MEMS_runMagCal.constprop.14+0x1dac>
 801370a:	eddf 5a29 	vldr	s11, [pc, #164]	; 80137b0 <MEMS_runMagCal.constprop.14+0x1db0>
 801370e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013712:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8013716:	ee37 7ac7 	vsub.f32	s14, s15, s14
 801371a:	eef4 7ae5 	vcmpe.f32	s15, s11
 801371e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013722:	eef0 6ae6 	vabs.f32	s13, s13
 8013726:	eeb0 7ac7 	vabs.f32	s14, s14
 801372a:	dd06      	ble.n	801373a <MEMS_runMagCal.constprop.14+0x1d3a>
 801372c:	eddf 7a21 	vldr	s15, [pc, #132]	; 80137b4 <MEMS_runMagCal.constprop.14+0x1db4>
 8013730:	eef4 6ae7 	vcmpe.f32	s13, s15
 8013734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013738:	d47d      	bmi.n	8013836 <MEMS_runMagCal.constprop.14+0x1e36>
 801373a:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80137b8 <MEMS_runMagCal.constprop.14+0x1db8>
 801373e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013746:	db76      	blt.n	8013836 <MEMS_runMagCal.constprop.14+0x1e36>
 8013748:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80137bc <MEMS_runMagCal.constprop.14+0x1dbc>
 801374c:	f89b 3500 	ldrb.w	r3, [fp, #1280]	; 0x500
 8013750:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8013754:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8013758:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801375c:	ee87 0a28 	vdiv.f32	s0, s14, s17
 8013760:	ee17 2a90 	vmov	r2, s15
 8013764:	b290      	uxth	r0, r2
 8013766:	b113      	cbz	r3, 801376e <MEMS_runMagCal.constprop.14+0x1d6e>
 8013768:	3b01      	subs	r3, #1
 801376a:	f88b 3500 	strb.w	r3, [fp, #1280]	; 0x500
 801376e:	f7fd fb0d 	bl	8010d8c <MEMS_updateMagBufferIndex.constprop.24>
 8013772:	e633      	b.n	80133dc <MEMS_runMagCal.constprop.14+0x19dc>
 8013774:	eddf 9a09 	vldr	s19, [pc, #36]	; 801379c <MEMS_runMagCal.constprop.14+0x1d9c>
 8013778:	e7c5      	b.n	8013706 <MEMS_runMagCal.constprop.14+0x1d06>
 801377a:	bf00      	nop
 801377c:	423c0000 	.word	0x423c0000
 8013780:	3c2e4c41 	.word	0x3c2e4c41
 8013784:	3e4ccccd 	.word	0x3e4ccccd
 8013788:	2b8cbccc 	.word	0x2b8cbccc
 801378c:	358637bd 	.word	0x358637bd
 8013790:	3dcccccd 	.word	0x3dcccccd
 8013794:	3eaaaaab 	.word	0x3eaaaaab
 8013798:	3f860a92 	.word	0x3f860a92
 801379c:	00000000 	.word	0x00000000
 80137a0:	41f00001 	.word	0x41f00001
 80137a4:	400ccccd 	.word	0x400ccccd
 80137a8:	423c0000 	.word	0x423c0000
 80137ac:	3f8ccccd 	.word	0x3f8ccccd
 80137b0:	3ee66666 	.word	0x3ee66666
 80137b4:	3f266666 	.word	0x3f266666
 80137b8:	3eb33333 	.word	0x3eb33333
 80137bc:	433d0000 	.word	0x433d0000
 80137c0:	bf800000 	.word	0xbf800000
 80137c4:	3f19999a 	.word	0x3f19999a
 80137c8:	3a83126f 	.word	0x3a83126f
 80137cc:	3c23d70a 	.word	0x3c23d70a
 80137d0:	447a0000 	.word	0x447a0000
 80137d4:	2224      	movs	r2, #36	; 0x24
 80137d6:	2100      	movs	r1, #0
 80137d8:	a846      	add	r0, sp, #280	; 0x118
 80137da:	f006 ff1c 	bl	801a616 <memset>
 80137de:	ad2e      	add	r5, sp, #184	; 0xb8
 80137e0:	2400      	movs	r4, #0
 80137e2:	ecf5 7a01 	vldmia	r5!, {s15}
 80137e6:	ee69 7a27 	vmul.f32	s15, s18, s15
 80137ea:	ee17 0a90 	vmov	r0, s15
 80137ee:	f007 ff7b 	bl	801b6e8 <roundf>
 80137f2:	ee07 0a90 	vmov	s15, r0
 80137f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80137fa:	aa36      	add	r2, sp, #216	; 0xd8
 80137fc:	ee17 0a90 	vmov	r0, s15
 8013800:	ab46      	add	r3, sp, #280	; 0x118
 8013802:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8013806:	f822 0014 	strh.w	r0, [r2, r4, lsl #1]
 801380a:	3401      	adds	r4, #1
 801380c:	2c03      	cmp	r4, #3
 801380e:	ed83 8a00 	vstr	s16, [r3]
 8013812:	d1e6      	bne.n	80137e2 <MEMS_runMagCal.constprop.14+0x1de2>
 8013814:	ab25      	add	r3, sp, #148	; 0x94
 8013816:	aa34      	add	r2, sp, #208	; 0xd0
 8013818:	eeb0 0a68 	vmov.f32	s0, s17
 801381c:	a946      	add	r1, sp, #280	; 0x118
 801381e:	a836      	add	r0, sp, #216	; 0xd8
 8013820:	f7fd f9c2 	bl	8010ba8 <getMagStats.constprop.26>
 8013824:	ed9d 8a25 	vldr	s16, [sp, #148]	; 0x94
 8013828:	ee78 7a08 	vadd.f32	s15, s16, s16
 801382c:	ee28 8a29 	vmul.f32	s16, s16, s19
 8013830:	edcd 7a25 	vstr	s15, [sp, #148]	; 0x94
 8013834:	e734      	b.n	80136a0 <MEMS_runMagCal.constprop.14+0x1ca0>
 8013836:	ed5f 7a1d 	vldr	s15, [pc, #-116]	; 80137c4 <MEMS_runMagCal.constprop.14+0x1dc4>
 801383a:	eef4 9ae7 	vcmpe.f32	s19, s15
 801383e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013842:	d481      	bmi.n	8013748 <MEMS_runMagCal.constprop.14+0x1d48>
 8013844:	ee16 0a10 	vmov	r0, s12
 8013848:	f007 ff4e 	bl	801b6e8 <roundf>
 801384c:	ee07 0a90 	vmov	s15, r0
 8013850:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013854:	ad15      	add	r5, sp, #84	; 0x54
 8013856:	ee17 3a90 	vmov	r3, s15
 801385a:	ee1a 0a90 	vmov	r0, s21
 801385e:	802b      	strh	r3, [r5, #0]
 8013860:	f007 ff42 	bl	801b6e8 <roundf>
 8013864:	ee07 0a90 	vmov	s15, r0
 8013868:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801386c:	ee1a 0a10 	vmov	r0, s20
 8013870:	ee17 3a90 	vmov	r3, s15
 8013874:	806b      	strh	r3, [r5, #2]
 8013876:	f007 ff37 	bl	801b6e8 <roundf>
 801387a:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 801387e:	ee06 0a90 	vmov	s13, r0
 8013882:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8013886:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 801388a:	ed5f 7a31 	vldr	s15, [pc, #-196]	; 80137c8 <MEMS_runMagCal.constprop.14+0x1dc8>
 801388e:	ee16 3a90 	vmov	r3, s13
 8013892:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013896:	80ab      	strh	r3, [r5, #4]
 8013898:	ee17 0a90 	vmov	r0, s15
 801389c:	f007 ff24 	bl	801b6e8 <roundf>
 80138a0:	ee07 0a90 	vmov	s15, r0
 80138a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80138a8:	ab0f      	add	r3, sp, #60	; 0x3c
 80138aa:	ee17 4a90 	vmov	r4, s15
 80138ae:	eeb0 0a68 	vmov.f32	s0, s17
 80138b2:	4628      	mov	r0, r5
 80138b4:	aa10      	add	r2, sp, #64	; 0x40
 80138b6:	a946      	add	r1, sp, #280	; 0x118
 80138b8:	f8cb 4478 	str.w	r4, [fp, #1144]	; 0x478
 80138bc:	f7fd f974 	bl	8010ba8 <getMagStats.constprop.26>
 80138c0:	f89b 4500 	ldrb.w	r4, [fp, #1280]	; 0x500
 80138c4:	ed5f 6a3f 	vldr	s13, [pc, #-252]	; 80137cc <MEMS_runMagCal.constprop.14+0x1dcc>
 80138c8:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 80138cc:	005b      	lsls	r3, r3, #1
 80138ce:	ee07 3a90 	vmov	s15, r3
 80138d2:	ee07 0a10 	vmov	s14, r0
 80138d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80138da:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80138de:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80138e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80138e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138ea:	f300 82cb 	bgt.w	8013e84 <MEMS_runMagCal.constprop.14+0x2484>
 80138ee:	ed9d 7a0f 	vldr	s14, [sp, #60]	; 0x3c
 80138f2:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80138f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80138fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138fe:	f340 82be 	ble.w	8013e7e <MEMS_runMagCal.constprop.14+0x247e>
 8013902:	f89b 84b4 	ldrb.w	r8, [fp, #1204]	; 0x4b4
 8013906:	fab8 f888 	clz	r8, r8
 801390a:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801390e:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 8013912:	f8db 7478 	ldr.w	r7, [fp, #1144]	; 0x478
 8013916:	9729      	str	r7, [sp, #164]	; 0xa4
 8013918:	ee69 7a27 	vmul.f32	s15, s18, s15
 801391c:	eec7 7aa9 	vdiv.f32	s15, s15, s19
 8013920:	ee17 0a90 	vmov	r0, s15
 8013924:	f007 fee0 	bl	801b6e8 <roundf>
 8013928:	ee07 0a90 	vmov	s15, r0
 801392c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013930:	ee17 3a90 	vmov	r3, s15
 8013934:	ee69 7a08 	vmul.f32	s15, s18, s16
 8013938:	f88d 30a8 	strb.w	r3, [sp, #168]	; 0xa8
 801393c:	ee17 0a90 	vmov	r0, s15
 8013940:	f007 fed2 	bl	801b6e8 <roundf>
 8013944:	ee07 0a90 	vmov	s15, r0
 8013948:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801394c:	ed1f 7a60 	vldr	s14, [pc, #-384]	; 80137d0 <MEMS_runMagCal.constprop.14+0x1dd0>
 8013950:	ee17 0a90 	vmov	r0, s15
 8013954:	f10d 02ae 	add.w	r2, sp, #174	; 0xae
 8013958:	f88d 00a9 	strb.w	r0, [sp, #169]	; 0xa9
 801395c:	2300      	movs	r3, #0
 801395e:	a946      	add	r1, sp, #280	; 0x118
 8013960:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 8013964:	edd1 7a00 	vldr	s15, [r1]
 8013968:	f835 1013 	ldrh.w	r1, [r5, r3, lsl #1]
 801396c:	f822 1c04 	strh.w	r1, [r2, #-4]
 8013970:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013974:	3301      	adds	r3, #1
 8013976:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801397a:	2b03      	cmp	r3, #3
 801397c:	ee17 1a90 	vmov	r1, s15
 8013980:	f822 1f02 	strh.w	r1, [r2, #2]!
 8013984:	d1eb      	bne.n	801395e <MEMS_runMagCal.constprop.14+0x1f5e>
 8013986:	9b04      	ldr	r3, [sp, #16]
 8013988:	b113      	cbz	r3, 8013990 <MEMS_runMagCal.constprop.14+0x1f90>
 801398a:	23ff      	movs	r3, #255	; 0xff
 801398c:	f88d 30a8 	strb.w	r3, [sp, #168]	; 0xa8
 8013990:	2600      	movs	r6, #0
 8013992:	f88b 6474 	strb.w	r6, [fp, #1140]	; 0x474
 8013996:	f1b8 0f00 	cmp.w	r8, #0
 801399a:	f43e aac8 	beq.w	8011f2e <MEMS_runMagCal.constprop.14+0x52e>
 801399e:	f89b 34b4 	ldrb.w	r3, [fp, #1204]	; 0x4b4
 80139a2:	f88b 6475 	strb.w	r6, [fp, #1141]	; 0x475
 80139a6:	2b00      	cmp	r3, #0
 80139a8:	f040 80f0 	bne.w	8013b8c <MEMS_runMagCal.constprop.14+0x218c>
 80139ac:	4d72      	ldr	r5, [pc, #456]	; (8013b78 <MEMS_runMagCal.constprop.14+0x2178>)
 80139ae:	f10d 0938 	add.w	r9, sp, #56	; 0x38
 80139b2:	f10d 06aa 	add.w	r6, sp, #170	; 0xaa
 80139b6:	f10d 08a4 	add.w	r8, sp, #164	; 0xa4
 80139ba:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 80139be:	f8df e1c4 	ldr.w	lr, [pc, #452]	; 8013b84 <MEMS_runMagCal.constprop.14+0x2184>
 80139c2:	f8cb 747c 	str.w	r7, [fp, #1148]	; 0x47c
 80139c6:	ed1e 0a15 	vldr	s0, [lr, #-84]	; 0xffffffac
 80139ca:	f8bd a0b0 	ldrh.w	sl, [sp, #176]	; 0xb0
 80139ce:	f8bd c0b2 	ldrh.w	ip, [sp, #178]	; 0xb2
 80139d2:	eddf 7a6d 	vldr	s15, [pc, #436]	; 8013b88 <MEMS_runMagCal.constprop.14+0x2188>
 80139d6:	f8d8 8000 	ldr.w	r8, [r8]
 80139da:	f1ae 0758 	sub.w	r7, lr, #88	; 0x58
 80139de:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80139e2:	f9bd 30aa 	ldrsh.w	r3, [sp, #170]	; 0xaa
 80139e6:	f8bd 20b4 	ldrh.w	r2, [sp, #180]	; 0xb4
 80139ea:	f8ce 8000 	str.w	r8, [lr]
 80139ee:	ee03 3a90 	vmov	s7, r3
 80139f2:	f9bd 30ac 	ldrsh.w	r3, [sp, #172]	; 0xac
 80139f6:	f89b 0485 	ldrb.w	r0, [fp, #1157]	; 0x485
 80139fa:	ee04 3a10 	vmov	s8, r3
 80139fe:	f9bd 30ae 	ldrsh.w	r3, [sp, #174]	; 0xae
 8013a02:	ee04 3a90 	vmov	s9, r3
 8013a06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8013a0a:	fb03 f10a 	mul.w	r1, r3, sl
 8013a0e:	ee05 1a10 	vmov	s10, r1
 8013a12:	fb03 f10c 	mul.w	r1, r3, ip
 8013a16:	fb03 f302 	mul.w	r3, r3, r2
 8013a1a:	ee05 1a90 	vmov	s11, r1
 8013a1e:	ee06 3a10 	vmov	s12, r3
 8013a22:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8013a26:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8013a2a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8013a2e:	ee25 5a27 	vmul.f32	s10, s10, s15
 8013a32:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8013a36:	ee26 6a27 	vmul.f32	s12, s12, s15
 8013a3a:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 8013a3e:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 8013a42:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8013a46:	2301      	movs	r3, #1
 8013a48:	2100      	movs	r1, #0
 8013a4a:	22ff      	movs	r2, #255	; 0xff
 8013a4c:	ed87 5a1f 	vstr	s10, [r7, #124]	; 0x7c
 8013a50:	edc7 5a23 	vstr	s11, [r7, #140]	; 0x8c
 8013a54:	ed87 6a27 	vstr	s12, [r7, #156]	; 0x9c
 8013a58:	edc7 3a1c 	vstr	s7, [r7, #112]	; 0x70
 8013a5c:	ed87 4a1d 	vstr	s8, [r7, #116]	; 0x74
 8013a60:	edc7 4a1e 	vstr	s9, [r7, #120]	; 0x78
 8013a64:	f88b 34b4 	strb.w	r3, [fp, #1204]	; 0x4b4
 8013a68:	f88b 34cd 	strb.w	r3, [fp, #1229]	; 0x4cd
 8013a6c:	f88b 1484 	strb.w	r1, [fp, #1156]	; 0x484
 8013a70:	f88b 2486 	strb.w	r2, [fp, #1158]	; 0x486
 8013a74:	2c00      	cmp	r4, #0
 8013a76:	d04e      	beq.n	8013b16 <MEMS_runMagCal.constprop.14+0x2116>
 8013a78:	ed9f 3a40 	vldr	s6, [pc, #256]	; 8013b7c <MEMS_runMagCal.constprop.14+0x217c>
 8013a7c:	f89b 7501 	ldrb.w	r7, [fp, #1281]	; 0x501
 8013a80:	ee20 3a03 	vmul.f32	s6, s0, s6
 8013a84:	f04f 32ff 	mov.w	r2, #4294967295
 8013a88:	468c      	mov	ip, r1
 8013a8a:	fb9c f3f7 	sdiv	r3, ip, r7
 8013a8e:	fb07 c313 	mls	r3, r7, r3, ip
 8013a92:	b2db      	uxtb	r3, r3
 8013a94:	3315      	adds	r3, #21
 8013a96:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8013a9a:	f102 0c01 	add.w	ip, r2, #1
 8013a9e:	f9b3 247c 	ldrsh.w	r2, [r3, #1148]	; 0x47c
 8013aa2:	ee07 2a90 	vmov	s15, r2
 8013aa6:	f9b3 247a 	ldrsh.w	r2, [r3, #1146]	; 0x47a
 8013aaa:	f9b3 347e 	ldrsh.w	r3, [r3, #1150]	; 0x47e
 8013aae:	ee06 2a90 	vmov	s13, r2
 8013ab2:	fb9c f2f0 	sdiv	r2, ip, r0
 8013ab6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013aba:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8013abe:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8013ac2:	ee07 3a10 	vmov	s14, r3
 8013ac6:	ee76 6ae3 	vsub.f32	s13, s13, s7
 8013aca:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8013ace:	ee66 6a85 	vmul.f32	s13, s13, s10
 8013ad2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8013ad6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013ada:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8013ade:	fb00 c212 	mls	r2, r0, r2, ip
 8013ae2:	b252      	sxtb	r2, r2
 8013ae4:	ee37 7a64 	vsub.f32	s14, s14, s9
 8013ae8:	3101      	adds	r1, #1
 8013aea:	ee27 7a06 	vmul.f32	s14, s14, s12
 8013aee:	b209      	sxth	r1, r1
 8013af0:	eee7 7a07 	vfma.f32	s15, s14, s14
 8013af4:	eb0b 0342 	add.w	r3, fp, r2, lsl #1
 8013af8:	42a1      	cmp	r1, r4
 8013afa:	468c      	mov	ip, r1
 8013afc:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8013b00:	ee67 7a03 	vmul.f32	s15, s14, s6
 8013b04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013b08:	ee17 ea90 	vmov	lr, s15
 8013b0c:	f8a3 e488 	strh.w	lr, [r3, #1160]	; 0x488
 8013b10:	dbbb      	blt.n	8013a8a <MEMS_runMagCal.constprop.14+0x208a>
 8013b12:	f88b 2486 	strb.w	r2, [fp, #1158]	; 0x486
 8013b16:	4284      	cmp	r4, r0
 8013b18:	bf28      	it	cs
 8013b1a:	4604      	movcs	r4, r0
 8013b1c:	4629      	mov	r1, r5
 8013b1e:	4630      	mov	r0, r6
 8013b20:	464b      	mov	r3, r9
 8013b22:	aa0d      	add	r2, sp, #52	; 0x34
 8013b24:	f88b 4484 	strb.w	r4, [fp, #1156]	; 0x484
 8013b28:	f7fd f83e 	bl	8010ba8 <getMagStats.constprop.26>
 8013b2c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8013b80 <MEMS_runMagCal.constprop.14+0x2180>
 8013b30:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 8013b34:	edd9 6a00 	vldr	s13, [r9]
 8013b38:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013b3c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8013b40:	eef0 7ae7 	vabs.f32	s15, s15
 8013b44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013b48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b4c:	f140 8175 	bpl.w	8013e3a <MEMS_runMagCal.constprop.14+0x243a>
 8013b50:	eef4 6ac7 	vcmpe.f32	s13, s14
 8013b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b58:	f140 816f 	bpl.w	8013e3a <MEMS_runMagCal.constprop.14+0x243a>
 8013b5c:	2303      	movs	r3, #3
 8013b5e:	f89d 20a8 	ldrb.w	r2, [sp, #168]	; 0xa8
 8013b62:	f88b 34cc 	strb.w	r3, [fp, #1228]	; 0x4cc
 8013b66:	2ac8      	cmp	r2, #200	; 0xc8
 8013b68:	f67e a9e1 	bls.w	8011f2e <MEMS_runMagCal.constprop.14+0x52e>
 8013b6c:	2302      	movs	r3, #2
 8013b6e:	f88b 34cc 	strb.w	r3, [fp, #1228]	; 0x4cc
 8013b72:	f7fe b9dc 	b.w	8011f2e <MEMS_runMagCal.constprop.14+0x52e>
 8013b76:	bf00      	nop
 8013b78:	200018a4 	.word	0x200018a4
 8013b7c:	42c80000 	.word	0x42c80000
 8013b80:	423c0000 	.word	0x423c0000
 8013b84:	20001880 	.word	0x20001880
 8013b88:	358637bd 	.word	0x358637bd
 8013b8c:	f8bd 00b4 	ldrh.w	r0, [sp, #180]	; 0xb4
 8013b90:	f8bd 10b0 	ldrh.w	r1, [sp, #176]	; 0xb0
 8013b94:	f8bd 20b2 	ldrh.w	r2, [sp, #178]	; 0xb2
 8013b98:	ed1f 6a05 	vldr	s12, [pc, #-20]	; 8013b88 <MEMS_runMagCal.constprop.14+0x2188>
 8013b9c:	4dd2      	ldr	r5, [pc, #840]	; (8013ee8 <MEMS_runMagCal.constprop.14+0x24e8>)
 8013b9e:	9647      	str	r6, [sp, #284]	; 0x11c
 8013ba0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8013ba4:	fb03 f101 	mul.w	r1, r3, r1
 8013ba8:	fb03 f202 	mul.w	r2, r3, r2
 8013bac:	fb03 f300 	mul.w	r3, r3, r0
 8013bb0:	ee06 1a90 	vmov	s13, r1
 8013bb4:	ee07 2a10 	vmov	s14, r2
 8013bb8:	ee07 3a90 	vmov	s15, r3
 8013bbc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8013bc0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013bc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013bc8:	ee66 6a86 	vmul.f32	s13, s13, s12
 8013bcc:	ee27 7a06 	vmul.f32	s14, s14, s12
 8013bd0:	ee67 7a86 	vmul.f32	s15, s15, s12
 8013bd4:	ed15 0a1e 	vldr	s0, [r5, #-120]	; 0xffffff88
 8013bd8:	9648      	str	r6, [sp, #288]	; 0x120
 8013bda:	4629      	mov	r1, r5
 8013bdc:	ab36      	add	r3, sp, #216	; 0xd8
 8013bde:	aa0d      	add	r2, sp, #52	; 0x34
 8013be0:	9649      	str	r6, [sp, #292]	; 0x124
 8013be2:	964b      	str	r6, [sp, #300]	; 0x12c
 8013be4:	964c      	str	r6, [sp, #304]	; 0x130
 8013be6:	964d      	str	r6, [sp, #308]	; 0x134
 8013be8:	f10d 0938 	add.w	r9, sp, #56	; 0x38
 8013bec:	f1a5 001e 	sub.w	r0, r5, #30
 8013bf0:	f10d 06aa 	add.w	r6, sp, #170	; 0xaa
 8013bf4:	edcd 6a46 	vstr	s13, [sp, #280]	; 0x118
 8013bf8:	ed8d 7a4a 	vstr	s14, [sp, #296]	; 0x128
 8013bfc:	edcd 7a4e 	vstr	s15, [sp, #312]	; 0x138
 8013c00:	f7fc ffd2 	bl	8010ba8 <getMagStats.constprop.26>
 8013c04:	a946      	add	r1, sp, #280	; 0x118
 8013c06:	464b      	mov	r3, r9
 8013c08:	4630      	mov	r0, r6
 8013c0a:	aa0d      	add	r2, sp, #52	; 0x34
 8013c0c:	ed15 0a1e 	vldr	s0, [r5, #-120]	; 0xffffff88
 8013c10:	f7fc ffca 	bl	8010ba8 <getMagStats.constprop.26>
 8013c14:	eddf 6ab5 	vldr	s13, [pc, #724]	; 8013eec <MEMS_runMagCal.constprop.14+0x24ec>
 8013c18:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 8013c1c:	ed99 7a00 	vldr	s14, [r9]
 8013c20:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013c24:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8013c28:	eef0 7ae7 	vabs.f32	s15, s15
 8013c2c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8013c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c34:	f140 8110 	bpl.w	8013e58 <MEMS_runMagCal.constprop.14+0x2458>
 8013c38:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8013c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c40:	f140 810a 	bpl.w	8013e58 <MEMS_runMagCal.constprop.14+0x2458>
 8013c44:	2303      	movs	r3, #3
 8013c46:	eddd 6a36 	vldr	s13, [sp, #216]	; 0xd8
 8013c4a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8013c4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013c52:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c5a:	f57e a968 	bpl.w	8011f2e <MEMS_runMagCal.constprop.14+0x52e>
 8013c5e:	f89b 24cc 	ldrb.w	r2, [fp, #1228]	; 0x4cc
 8013c62:	429a      	cmp	r2, r3
 8013c64:	f63e a963 	bhi.w	8011f2e <MEMS_runMagCal.constprop.14+0x52e>
 8013c68:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8013c6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013c70:	eef4 6ae7 	vcmpe.f32	s13, s15
 8013c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c78:	d40e      	bmi.n	8013c98 <MEMS_runMagCal.constprop.14+0x2298>
 8013c7a:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 8013c7e:	eef4 6ae7 	vcmpe.f32	s13, s15
 8013c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c86:	f140 80d4 	bpl.w	8013e32 <MEMS_runMagCal.constprop.14+0x2432>
 8013c8a:	f89b 24bc 	ldrb.w	r2, [fp, #1212]	; 0x4bc
 8013c8e:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 8013c92:	429a      	cmp	r2, r3
 8013c94:	f080 80cd 	bcs.w	8013e32 <MEMS_runMagCal.constprop.14+0x2432>
 8013c98:	4b95      	ldr	r3, [pc, #596]	; (8013ef0 <MEMS_runMagCal.constprop.14+0x24f0>)
 8013c9a:	f9bb 14c0 	ldrsh.w	r1, [fp, #1216]	; 0x4c0
 8013c9e:	f9bd 70ac 	ldrsh.w	r7, [sp, #172]	; 0xac
 8013ca2:	f9bb 04be 	ldrsh.w	r0, [fp, #1214]	; 0x4be
 8013ca6:	f9bd e0aa 	ldrsh.w	lr, [sp, #170]	; 0xaa
 8013caa:	edd3 5a01 	vldr	s11, [r3, #4]
 8013cae:	f9bb 24c2 	ldrsh.w	r2, [fp, #1218]	; 0x4c2
 8013cb2:	f9bd 40ae 	ldrsh.w	r4, [sp, #174]	; 0xae
 8013cb6:	1bcb      	subs	r3, r1, r7
 8013cb8:	eba0 0c0e 	sub.w	ip, r0, lr
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	bfb8      	it	lt
 8013cc0:	425b      	neglt	r3, r3
 8013cc2:	f1bc 0f00 	cmp.w	ip, #0
 8013cc6:	bfb8      	it	lt
 8013cc8:	f1cc 0c00 	rsblt	ip, ip, #0
 8013ccc:	4563      	cmp	r3, ip
 8013cce:	bfb8      	it	lt
 8013cd0:	4663      	movlt	r3, ip
 8013cd2:	eba2 0c04 	sub.w	ip, r2, r4
 8013cd6:	f1bc 0f00 	cmp.w	ip, #0
 8013cda:	b21b      	sxth	r3, r3
 8013cdc:	bfb8      	it	lt
 8013cde:	f1cc 0c00 	rsblt	ip, ip, #0
 8013ce2:	4563      	cmp	r3, ip
 8013ce4:	bfb8      	it	lt
 8013ce6:	4663      	movlt	r3, ip
 8013ce8:	b21b      	sxth	r3, r3
 8013cea:	ee07 3a90 	vmov	s15, r3
 8013cee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013cf2:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 8013cf6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8013cfa:	eef4 7ac6 	vcmpe.f32	s15, s12
 8013cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d02:	f140 8096 	bpl.w	8013e32 <MEMS_runMagCal.constprop.14+0x2432>
 8013d06:	ee37 7a26 	vadd.f32	s14, s14, s13
 8013d0a:	f8bb 34c4 	ldrh.w	r3, [fp, #1220]	; 0x4c4
 8013d0e:	eec6 3a87 	vdiv.f32	s7, s13, s14
 8013d12:	ee04 3a90 	vmov	s9, r3
 8013d16:	f8bb 34c6 	ldrh.w	r3, [fp, #1222]	; 0x4c6
 8013d1a:	ee05 3a10 	vmov	s10, r3
 8013d1e:	f8bb 34c8 	ldrh.w	r3, [fp, #1224]	; 0x4c8
 8013d22:	ee07 0a90 	vmov	s15, r0
 8013d26:	ee05 3a90 	vmov	s11, r3
 8013d2a:	f89b 34bc 	ldrb.w	r3, [fp, #1212]	; 0x4bc
 8013d2e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8013d32:	ee36 4a63 	vsub.f32	s8, s12, s7
 8013d36:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8013d3a:	ee06 3a10 	vmov	s12, r3
 8013d3e:	ee03 ea10 	vmov	s6, lr
 8013d42:	f8bd 30b0 	ldrh.w	r3, [sp, #176]	; 0xb0
 8013d46:	ee07 1a90 	vmov	s15, r1
 8013d4a:	ee00 3a90 	vmov	s1, r3
 8013d4e:	ee66 6a84 	vmul.f32	s13, s13, s8
 8013d52:	eeb8 2ac3 	vcvt.f32.s32	s4, s6
 8013d56:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8013d5a:	f8bd 30b2 	ldrh.w	r3, [sp, #178]	; 0xb2
 8013d5e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013d62:	ee64 4a84 	vmul.f32	s9, s9, s8
 8013d66:	ee03 7a10 	vmov	s6, r7
 8013d6a:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8013d6e:	eee3 6a82 	vfma.f32	s13, s7, s4
 8013d72:	ee07 2a90 	vmov	s15, r2
 8013d76:	ee01 3a10 	vmov	s2, r3
 8013d7a:	ee27 7a04 	vmul.f32	s14, s14, s8
 8013d7e:	f8bd 30b4 	ldrh.w	r3, [sp, #180]	; 0xb4
 8013d82:	eef8 2ac3 	vcvt.f32.s32	s5, s6
 8013d86:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8013d8a:	eee3 4aa0 	vfma.f32	s9, s7, s1
 8013d8e:	ee01 3a90 	vmov	s3, r3
 8013d92:	ee25 5a04 	vmul.f32	s10, s10, s8
 8013d96:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 8013d9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013d9e:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8013da2:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8013da6:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8013daa:	ee03 4a10 	vmov	s6, r4
 8013dae:	eea3 7aa2 	vfma.f32	s14, s7, s5
 8013db2:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8013db6:	ee67 7a84 	vmul.f32	s15, s15, s8
 8013dba:	ee65 5a84 	vmul.f32	s11, s11, s8
 8013dbe:	ee26 6a04 	vmul.f32	s12, s12, s8
 8013dc2:	ee16 2a90 	vmov	r2, s13
 8013dc6:	ee04 3a10 	vmov	s8, r3
 8013dca:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8013dce:	eea3 5a81 	vfma.f32	s10, s7, s2
 8013dd2:	f8ad 20aa 	strh.w	r2, [sp, #170]	; 0xaa
 8013dd6:	eefc 4ae4 	vcvt.u32.f32	s9, s9
 8013dda:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8013dde:	ee14 2a90 	vmov	r2, s9
 8013de2:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 8013de6:	eee3 7a83 	vfma.f32	s15, s7, s6
 8013dea:	f8ad 20b0 	strh.w	r2, [sp, #176]	; 0xb0
 8013dee:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8013df2:	eee3 5aa1 	vfma.f32	s11, s7, s3
 8013df6:	ee17 2a10 	vmov	r2, s14
 8013dfa:	eea3 6a84 	vfma.f32	s12, s7, s8
 8013dfe:	f8ad 20ac 	strh.w	r2, [sp, #172]	; 0xac
 8013e02:	eebc 5ac5 	vcvt.u32.f32	s10, s10
 8013e06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013e0a:	ee15 2a10 	vmov	r2, s10
 8013e0e:	eefc 5ae5 	vcvt.u32.f32	s11, s11
 8013e12:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 8013e16:	f8ad 20b2 	strh.w	r2, [sp, #178]	; 0xb2
 8013e1a:	ee17 2a90 	vmov	r2, s15
 8013e1e:	ee16 3a10 	vmov	r3, s12
 8013e22:	f8ad 20ae 	strh.w	r2, [sp, #174]	; 0xae
 8013e26:	ee15 2a90 	vmov	r2, s11
 8013e2a:	f88d 30a8 	strb.w	r3, [sp, #168]	; 0xa8
 8013e2e:	f8ad 20b4 	strh.w	r2, [sp, #180]	; 0xb4
 8013e32:	9f29      	ldr	r7, [sp, #164]	; 0xa4
 8013e34:	f89b 4500 	ldrb.w	r4, [fp, #1280]	; 0x500
 8013e38:	e5bd      	b.n	80139b6 <MEMS_runMagCal.constprop.14+0x1fb6>
 8013e3a:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8013e3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e46:	d516      	bpl.n	8013e76 <MEMS_runMagCal.constprop.14+0x2476>
 8013e48:	eef4 6ac7 	vcmpe.f32	s13, s14
 8013e4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e50:	bf4c      	ite	mi
 8013e52:	2302      	movmi	r3, #2
 8013e54:	2301      	movpl	r3, #1
 8013e56:	e682      	b.n	8013b5e <MEMS_runMagCal.constprop.14+0x215e>
 8013e58:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8013e5c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8013e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e64:	d509      	bpl.n	8013e7a <MEMS_runMagCal.constprop.14+0x247a>
 8013e66:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8013e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e6e:	bf4c      	ite	mi
 8013e70:	2302      	movmi	r3, #2
 8013e72:	2301      	movpl	r3, #1
 8013e74:	e6e7      	b.n	8013c46 <MEMS_runMagCal.constprop.14+0x2246>
 8013e76:	2301      	movs	r3, #1
 8013e78:	e671      	b.n	8013b5e <MEMS_runMagCal.constprop.14+0x215e>
 8013e7a:	2301      	movs	r3, #1
 8013e7c:	e6e3      	b.n	8013c46 <MEMS_runMagCal.constprop.14+0x2246>
 8013e7e:	f04f 0801 	mov.w	r8, #1
 8013e82:	e544      	b.n	801390e <MEMS_runMagCal.constprop.14+0x1f0e>
 8013e84:	f04f 0800 	mov.w	r8, #0
 8013e88:	e541      	b.n	801390e <MEMS_runMagCal.constprop.14+0x1f0e>
 8013e8a:	fb93 f1f4 	sdiv	r1, r3, r4
 8013e8e:	fb04 3311 	mls	r3, r4, r1, r3
 8013e92:	b219      	sxth	r1, r3
 8013e94:	f7ff bb4c 	b.w	8013530 <MEMS_runMagCal.constprop.14+0x1b30>
 8013e98:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013e9c:	f7ff bafe 	b.w	801349c <MEMS_runMagCal.constprop.14+0x1a9c>
 8013ea0:	3214      	adds	r2, #20
 8013ea2:	1e59      	subs	r1, r3, #1
 8013ea4:	2b00      	cmp	r3, #0
 8013ea6:	f47f abc6 	bne.w	8013636 <MEMS_runMagCal.constprop.14+0x1c36>
 8013eaa:	2240      	movs	r2, #64	; 0x40
 8013eac:	2100      	movs	r1, #0
 8013eae:	a846      	add	r0, sp, #280	; 0x118
 8013eb0:	f006 fbb1 	bl	801a616 <memset>
 8013eb4:	a946      	add	r1, sp, #280	; 0x118
 8013eb6:	2200      	movs	r2, #0
 8013eb8:	f04f 0e14 	mov.w	lr, #20
 8013ebc:	ac36      	add	r4, sp, #216	; 0xd8
 8013ebe:	b256      	sxtb	r6, r2
 8013ec0:	2000      	movs	r0, #0
 8013ec2:	eb01 0986 	add.w	r9, r1, r6, lsl #2
 8013ec6:	4603      	mov	r3, r0
 8013ec8:	eb04 1802 	add.w	r8, r4, r2, lsl #4
 8013ecc:	fb0e 4c02 	mla	ip, lr, r2, r4
 8013ed0:	ac46      	add	r4, sp, #280	; 0x118
 8013ed2:	eb04 1503 	add.w	r5, r4, r3, lsl #4
 8013ed6:	b2c4      	uxtb	r4, r0
 8013ed8:	462f      	mov	r7, r5
 8013eda:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8013ede:	468a      	mov	sl, r1
 8013ee0:	eddf 7a05 	vldr	s15, [pc, #20]	; 8013ef8 <MEMS_runMagCal.constprop.14+0x24f8>
 8013ee4:	e014      	b.n	8013f10 <MEMS_runMagCal.constprop.14+0x2510>
 8013ee6:	bf00      	nop
 8013ee8:	200018a4 	.word	0x200018a4
 8013eec:	423c0000 	.word	0x423c0000
 8013ef0:	20001828 	.word	0x20001828
 8013ef4:	3dcccccd 	.word	0x3dcccccd
 8013ef8:	00000000 	.word	0x00000000
 8013efc:	3e99999a 	.word	0x3e99999a
 8013f00:	3f666666 	.word	0x3f666666
 8013f04:	ecfa 6a01 	vldmia	sl!, {s13}
 8013f08:	ecb7 7a01 	vldmia	r7!, {s14}
 8013f0c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8013f10:	45a2      	cmp	sl, r4
 8013f12:	d1f7      	bne.n	8013f04 <MEMS_runMagCal.constprop.14+0x2504>
 8013f14:	429e      	cmp	r6, r3
 8013f16:	f000 80b5 	beq.w	8014084 <MEMS_runMagCal.constprop.14+0x2684>
 8013f1a:	009b      	lsls	r3, r3, #2
 8013f1c:	441d      	add	r5, r3
 8013f1e:	edd5 6a00 	vldr	s13, [r5]
 8013f22:	eeb0 7ae6 	vabs.f32	s14, s13
 8013f26:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8013f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f2e:	f53f ab90 	bmi.w	8013652 <MEMS_runMagCal.constprop.14+0x1c52>
 8013f32:	eb08 0403 	add.w	r4, r8, r3
 8013f36:	ed94 7a00 	vldr	s14, [r4]
 8013f3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013f3e:	440b      	add	r3, r1
 8013f40:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8013f44:	ed83 7a00 	vstr	s14, [r3]
 8013f48:	3001      	adds	r0, #1
 8013f4a:	b243      	sxtb	r3, r0
 8013f4c:	42b3      	cmp	r3, r6
 8013f4e:	ddbf      	ble.n	8013ed0 <MEMS_runMagCal.constprop.14+0x24d0>
 8013f50:	3201      	adds	r2, #1
 8013f52:	2a04      	cmp	r2, #4
 8013f54:	f101 0110 	add.w	r1, r1, #16
 8013f58:	d1b0      	bne.n	8013ebc <MEMS_runMagCal.constprop.14+0x24bc>
 8013f5a:	aa21      	add	r2, sp, #132	; 0x84
 8013f5c:	a91d      	add	r1, sp, #116	; 0x74
 8013f5e:	a846      	add	r0, sp, #280	; 0x118
 8013f60:	f7fc fa1c 	bl	801039c <llEvaluate.constprop.23>
 8013f64:	ed5f 9a1d 	vldr	s19, [pc, #-116]	; 8013ef4 <MEMS_runMagCal.constprop.14+0x24f4>
 8013f68:	ad21      	add	r5, sp, #132	; 0x84
 8013f6a:	ae25      	add	r6, sp, #148	; 0x94
 8013f6c:	f10d 0890 	add.w	r8, sp, #144	; 0x90
 8013f70:	2400      	movs	r4, #0
 8013f72:	f04f 577e 	mov.w	r7, #1065353216	; 0x3f800000
 8013f76:	e9cd 4421 	strd	r4, r4, [sp, #132]	; 0x84
 8013f7a:	e9cd 4423 	strd	r4, r4, [sp, #140]	; 0x8c
 8013f7e:	aa21      	add	r2, sp, #132	; 0x84
 8013f80:	a925      	add	r1, sp, #148	; 0x94
 8013f82:	a846      	add	r0, sp, #280	; 0x118
 8013f84:	f845 7b04 	str.w	r7, [r5], #4
 8013f88:	f7fc fa08 	bl	801039c <llEvaluate.constprop.23>
 8013f8c:	ecb6 7a01 	vldmia	r6!, {s14}
 8013f90:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8013f94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f98:	f340 8083 	ble.w	80140a2 <MEMS_runMagCal.constprop.14+0x26a2>
 8013f9c:	eef1 7ac7 	vsqrt.f32	s15, s14
 8013fa0:	eef4 9ae7 	vcmpe.f32	s19, s15
 8013fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fa8:	bfb8      	it	lt
 8013faa:	eef0 9a67 	vmovlt.f32	s19, s15
 8013fae:	45a8      	cmp	r8, r5
 8013fb0:	d1e1      	bne.n	8013f76 <MEMS_runMagCal.constprop.14+0x2576>
 8013fb2:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8013fb6:	eddd 6a20 	vldr	s13, [sp, #128]	; 0x80
 8013fba:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8013fbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013fc2:	eef4 6ae7 	vcmpe.f32	s13, s15
 8013fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fca:	d501      	bpl.n	8013fd0 <MEMS_runMagCal.constprop.14+0x25d0>
 8013fcc:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8013fd0:	ed9d 4a1d 	vldr	s8, [sp, #116]	; 0x74
 8013fd4:	ed9d 5a1e 	vldr	s10, [sp, #120]	; 0x78
 8013fd8:	ed1f 2a39 	vldr	s4, [pc, #-228]	; 8013ef8 <MEMS_runMagCal.constprop.14+0x24f8>
 8013fdc:	ed9d 6a1f 	vldr	s12, [sp, #124]	; 0x7c
 8013fe0:	eddd 5a30 	vldr	s11, [sp, #192]	; 0xc0
 8013fe4:	eddd 3a2e 	vldr	s7, [sp, #184]	; 0xb8
 8013fe8:	eddd 4a2f 	vldr	s9, [sp, #188]	; 0xbc
 8013fec:	eddd 6a20 	vldr	s13, [sp, #128]	; 0x80
 8013ff0:	ed9d 3a31 	vldr	s6, [sp, #196]	; 0xc4
 8013ff4:	ed5f 2a3f 	vldr	s5, [pc, #-252]	; 8013efc <MEMS_runMagCal.constprop.14+0x24fc>
 8013ff8:	eeb0 7ac4 	vabs.f32	s14, s8
 8013ffc:	eef0 7ac5 	vabs.f32	s15, s10
 8014000:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014008:	bfa8      	it	ge
 801400a:	eef0 7a47 	vmovge.f32	s15, s14
 801400e:	eef4 7ac2 	vcmpe.f32	s15, s4
 8014012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014016:	eeb0 7ac6 	vabs.f32	s14, s12
 801401a:	bfb8      	it	lt
 801401c:	eef0 7a42 	vmovlt.f32	s15, s4
 8014020:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014028:	bfa8      	it	ge
 801402a:	eef0 7a47 	vmovge.f32	s15, s14
 801402e:	ee35 6a86 	vadd.f32	s12, s11, s12
 8014032:	ee33 4a84 	vadd.f32	s8, s7, s8
 8014036:	ee34 5a85 	vadd.f32	s10, s9, s10
 801403a:	ee73 5a26 	vadd.f32	s11, s6, s13
 801403e:	eef4 7ae2 	vcmpe.f32	s15, s5
 8014042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014046:	ed8d 4a2e 	vstr	s8, [sp, #184]	; 0xb8
 801404a:	ed8d 5a2f 	vstr	s10, [sp, #188]	; 0xbc
 801404e:	ed8d 6a30 	vstr	s12, [sp, #192]	; 0xc0
 8014052:	edcd 5a31 	vstr	s11, [sp, #196]	; 0xc4
 8014056:	eeb0 7ae6 	vabs.f32	s14, s13
 801405a:	d50a      	bpl.n	8014072 <MEMS_runMagCal.constprop.14+0x2672>
 801405c:	ed5f 6a58 	vldr	s13, [pc, #-352]	; 8013f00 <MEMS_runMagCal.constprop.14+0x2500>
 8014060:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8014064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014068:	d503      	bpl.n	8014072 <MEMS_runMagCal.constprop.14+0x2672>
 801406a:	9b00      	ldr	r3, [sp, #0]
 801406c:	2b01      	cmp	r3, #1
 801406e:	f63f aaf6 	bhi.w	801365e <MEMS_runMagCal.constprop.14+0x1c5e>
 8014072:	9b00      	ldr	r3, [sp, #0]
 8014074:	3301      	adds	r3, #1
 8014076:	b2db      	uxtb	r3, r3
 8014078:	2b05      	cmp	r3, #5
 801407a:	9300      	str	r3, [sp, #0]
 801407c:	f47f aa26 	bne.w	80134cc <MEMS_runMagCal.constprop.14+0x1acc>
 8014080:	f7ff baed 	b.w	801365e <MEMS_runMagCal.constprop.14+0x1c5e>
 8014084:	ed9c 7a00 	vldr	s14, [ip]
 8014088:	eef4 7ac7 	vcmpe.f32	s15, s14
 801408c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014090:	f57f aadf 	bpl.w	8013652 <MEMS_runMagCal.constprop.14+0x1c52>
 8014094:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014098:	eeb1 7ae7 	vsqrt.f32	s14, s15
 801409c:	ed89 7a00 	vstr	s14, [r9]
 80140a0:	e752      	b.n	8013f48 <MEMS_runMagCal.constprop.14+0x2548>
 80140a2:	eef2 9a04 	vmov.f32	s19, #36	; 0x41200000  10.0
 80140a6:	e782      	b.n	8013fae <MEMS_runMagCal.constprop.14+0x25ae>

080140a8 <m_kalman_3gyro.isra.6.constprop.36>:
 80140a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140ac:	ed2d 8b10 	vpush	{d8-d15}
 80140b0:	4ccb      	ldr	r4, [pc, #812]	; (80143e0 <m_kalman_3gyro.isra.6.constprop.36+0x338>)
 80140b2:	f2ad 6d34 	subw	sp, sp, #1588	; 0x634
 80140b6:	468e      	mov	lr, r1
 80140b8:	4690      	mov	r8, r2
 80140ba:	9001      	str	r0, [sp, #4]
 80140bc:	9127      	str	r1, [sp, #156]	; 0x9c
 80140be:	920b      	str	r2, [sp, #44]	; 0x2c
 80140c0:	9308      	str	r3, [sp, #32]
 80140c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80140c4:	aeb6      	add	r6, sp, #728	; 0x2d8
 80140c6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80140c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80140ca:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80140cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80140ce:	f89d 56a0 	ldrb.w	r5, [sp, #1696]	; 0x6a0
 80140d2:	9528      	str	r5, [sp, #160]	; 0xa0
 80140d4:	f89d 56a4 	ldrb.w	r5, [sp, #1700]	; 0x6a4
 80140d8:	f8dd a6e0 	ldr.w	sl, [sp, #1760]	; 0x6e0
 80140dc:	950c      	str	r5, [sp, #48]	; 0x30
 80140de:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80140e0:	4625      	mov	r5, r4
 80140e2:	afc3      	add	r7, sp, #780	; 0x30c
 80140e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80140e8:	6033      	str	r3, [r6, #0]
 80140ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80140ec:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80140ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80140f0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80140f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80140f4:	f104 0c38 	add.w	ip, r4, #56	; 0x38
 80140f8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80140fa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80140fe:	aed0      	add	r6, sp, #832	; 0x340
 8014100:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8014102:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014106:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8014108:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801410c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801410e:	682a      	ldr	r2, [r5, #0]
 8014110:	f8dc 3000 	ldr.w	r3, [ip]
 8014114:	603a      	str	r2, [r7, #0]
 8014116:	f104 076c 	add.w	r7, r4, #108	; 0x6c
 801411a:	6033      	str	r3, [r6, #0]
 801411c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801411e:	addd      	add	r5, sp, #884	; 0x374
 8014120:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014122:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8014124:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014126:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8014128:	f104 06a0 	add.w	r6, r4, #160	; 0xa0
 801412c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801412e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8014130:	683f      	ldr	r7, [r7, #0]
 8014132:	602f      	str	r7, [r5, #0]
 8014134:	ad98      	add	r5, sp, #608	; 0x260
 8014136:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014138:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801413a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801413c:	e896 0003 	ldmia.w	r6, {r0, r1}
 8014140:	f104 06c8 	add.w	r6, r4, #200	; 0xc8
 8014144:	e885 0003 	stmia.w	r5, {r0, r1}
 8014148:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801414a:	ada2      	add	r5, sp, #648	; 0x288
 801414c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801414e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8014150:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014152:	e896 0003 	ldmia.w	r6, {r0, r1}
 8014156:	f104 06f0 	add.w	r6, r4, #240	; 0xf0
 801415a:	e885 0003 	stmia.w	r5, {r0, r1}
 801415e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8014160:	adac      	add	r5, sp, #688	; 0x2b0
 8014162:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014164:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8014166:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014168:	e896 0003 	ldmia.w	r6, {r0, r1}
 801416c:	f504 768c 	add.w	r6, r4, #280	; 0x118
 8014170:	e885 0003 	stmia.w	r5, {r0, r1}
 8014174:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8014176:	ad5d      	add	r5, sp, #372	; 0x174
 8014178:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801417a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 801417e:	f8dd 66d4 	ldr.w	r6, [sp, #1748]	; 0x6d4
 8014182:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8014186:	f504 749a 	add.w	r4, r4, #308	; 0x134
 801418a:	2500      	movs	r5, #0
 801418c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801418e:	7035      	strb	r5, [r6, #0]
 8014190:	f8dd 66d8 	ldr.w	r6, [sp, #1752]	; 0x6d8
 8014194:	edcd 1a02 	vstr	s3, [sp, #8]
 8014198:	7035      	strb	r5, [r6, #0]
 801419a:	f8dd 66dc 	ldr.w	r6, [sp, #1756]	; 0x6dc
 801419e:	7035      	strb	r5, [r6, #0]
 80141a0:	edde da01 	vldr	s27, [lr, #4]
 80141a4:	edde 8a00 	vldr	s17, [lr]
 80141a8:	ed9e 8a02 	vldr	s16, [lr, #8]
 80141ac:	ee6d 7aad 	vmul.f32	s15, s27, s27
 80141b0:	ad64      	add	r5, sp, #400	; 0x190
 80141b2:	eee8 7aa8 	vfma.f32	s15, s17, s17
 80141b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80141b8:	eee8 7a08 	vfma.f32	s15, s16, s16
 80141bc:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80141c0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80141c4:	ee17 0a90 	vmov	r0, s15
 80141c8:	eeb0 ea40 	vmov.f32	s28, s0
 80141cc:	eef0 ea60 	vmov.f32	s29, s1
 80141d0:	eeb0 fa41 	vmov.f32	s30, s2
 80141d4:	eef0 fa42 	vmov.f32	s31, s4
 80141d8:	f7ec f9be 	bl	8000558 <__aeabi_f2d>
 80141dc:	f007 fb62 	bl	801b8a4 <sqrt>
 80141e0:	f7ec fcea 	bl	8000bb8 <__aeabi_d2f>
 80141e4:	edd8 aa01 	vldr	s21, [r8, #4]
 80141e8:	ed98 ba00 	vldr	s22, [r8]
 80141ec:	ed98 aa02 	vldr	s20, [r8, #8]
 80141f0:	4b7c      	ldr	r3, [pc, #496]	; (80143e4 <m_kalman_3gyro.isra.6.constprop.36+0x33c>)
 80141f2:	ee6a 7aaa 	vmul.f32	s15, s21, s21
 80141f6:	ee09 0a90 	vmov	s19, r0
 80141fa:	eeeb 7a0b 	vfma.f32	s15, s22, s22
 80141fe:	6018      	str	r0, [r3, #0]
 8014200:	f50a 7317 	add.w	r3, sl, #604	; 0x25c
 8014204:	930a      	str	r3, [sp, #40]	; 0x28
 8014206:	eeea 7a0a 	vfma.f32	s15, s20, s20
 801420a:	eef7 ca00 	vmov.f32	s25, #112	; 0x3f800000  1.0
 801420e:	ee17 0a90 	vmov	r0, s15
 8014212:	f7ec f9a1 	bl	8000558 <__aeabi_f2d>
 8014216:	f007 fb45 	bl	801b8a4 <sqrt>
 801421a:	f7ec fccd 	bl	8000bb8 <__aeabi_d2f>
 801421e:	ee09 0a10 	vmov	s18, r0
 8014222:	ee8c caa9 	vdiv.f32	s24, s25, s19
 8014226:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 801422a:	ab5a      	add	r3, sp, #360	; 0x168
 801422c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8014230:	f50a 638c 	add.w	r3, sl, #1120	; 0x460
 8014234:	9319      	str	r3, [sp, #100]	; 0x64
 8014236:	f50d 63d7 	add.w	r3, sp, #1720	; 0x6b8
 801423a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801423e:	eecc 7a89 	vdiv.f32	s15, s25, s18
 8014242:	ee6c ba2d 	vmul.f32	s23, s24, s27
 8014246:	ee67 aaaa 	vmul.f32	s21, s15, s21
 801424a:	ee68 9a8c 	vmul.f32	s19, s17, s24
 801424e:	ee27 ba8b 	vmul.f32	s22, s15, s22
 8014252:	ee2c ca08 	vmul.f32	s24, s24, s16
 8014256:	ee2a aa27 	vmul.f32	s20, s20, s15
 801425a:	ee2a daab 	vmul.f32	s26, s21, s23
 801425e:	edcd 8a57 	vstr	s17, [sp, #348]	; 0x15c
 8014262:	ed8d 8a59 	vstr	s16, [sp, #356]	; 0x164
 8014266:	edcd da58 	vstr	s27, [sp, #352]	; 0x160
 801426a:	edcd 9a3e 	vstr	s19, [sp, #248]	; 0xf8
 801426e:	edcd ba3f 	vstr	s23, [sp, #252]	; 0xfc
 8014272:	ed8d ba41 	vstr	s22, [sp, #260]	; 0x104
 8014276:	edcd aa42 	vstr	s21, [sp, #264]	; 0x108
 801427a:	ed8d ca40 	vstr	s24, [sp, #256]	; 0x100
 801427e:	ed8d aa43 	vstr	s20, [sp, #268]	; 0x10c
 8014282:	f7ec fc99 	bl	8000bb8 <__aeabi_d2f>
 8014286:	eeab da29 	vfma.f32	s26, s22, s19
 801428a:	f89a 48cd 	ldrb.w	r4, [sl, #2253]	; 0x8cd
 801428e:	ee08 0a90 	vmov	s17, r0
 8014292:	ed9f 8a55 	vldr	s16, [pc, #340]	; 80143e8 <m_kalman_3gyro.isra.6.constprop.36+0x340>
 8014296:	eeac da0a 	vfma.f32	s26, s24, s20
 801429a:	ee28 8a88 	vmul.f32	s16, s17, s16
 801429e:	2c00      	cmp	r4, #0
 80142a0:	f000 85be 	beq.w	8014e20 <m_kalman_3gyro.isra.6.constprop.36+0xd78>
 80142a4:	ab47      	add	r3, sp, #284	; 0x11c
 80142a6:	9309      	str	r3, [sp, #36]	; 0x24
 80142a8:	f50a 7375 	add.w	r3, sl, #980	; 0x3d4
 80142ac:	9312      	str	r3, [sp, #72]	; 0x48
 80142ae:	f20a 4304 	addw	r3, sl, #1028	; 0x404
 80142b2:	9313      	str	r3, [sp, #76]	; 0x4c
 80142b4:	f50a 6382 	add.w	r3, sl, #1040	; 0x410
 80142b8:	9314      	str	r3, [sp, #80]	; 0x50
 80142ba:	f20a 4314 	addw	r3, sl, #1044	; 0x414
 80142be:	9315      	str	r3, [sp, #84]	; 0x54
 80142c0:	f50a 6383 	add.w	r3, sl, #1048	; 0x418
 80142c4:	9316      	str	r3, [sp, #88]	; 0x58
 80142c6:	f20a 431c 	addw	r3, sl, #1052	; 0x41c
 80142ca:	931b      	str	r3, [sp, #108]	; 0x6c
 80142cc:	f20a 4324 	addw	r3, sl, #1060	; 0x424
 80142d0:	931c      	str	r3, [sp, #112]	; 0x70
 80142d2:	f50a 6385 	add.w	r3, sl, #1064	; 0x428
 80142d6:	931d      	str	r3, [sp, #116]	; 0x74
 80142d8:	f20a 432c 	addw	r3, sl, #1068	; 0x42c
 80142dc:	931e      	str	r3, [sp, #120]	; 0x78
 80142de:	f50a 6386 	add.w	r3, sl, #1072	; 0x430
 80142e2:	9317      	str	r3, [sp, #92]	; 0x5c
 80142e4:	f20a 4334 	addw	r3, sl, #1076	; 0x434
 80142e8:	9310      	str	r3, [sp, #64]	; 0x40
 80142ea:	f50a 6387 	add.w	r3, sl, #1080	; 0x438
 80142ee:	931f      	str	r3, [sp, #124]	; 0x7c
 80142f0:	f20a 433c 	addw	r3, sl, #1084	; 0x43c
 80142f4:	9311      	str	r3, [sp, #68]	; 0x44
 80142f6:	f50a 6388 	add.w	r3, sl, #1088	; 0x440
 80142fa:	930d      	str	r3, [sp, #52]	; 0x34
 80142fc:	f20a 4344 	addw	r3, sl, #1092	; 0x444
 8014300:	930e      	str	r3, [sp, #56]	; 0x38
 8014302:	f50a 6389 	add.w	r3, sl, #1096	; 0x448
 8014306:	9318      	str	r3, [sp, #96]	; 0x60
 8014308:	f20a 434c 	addw	r3, sl, #1100	; 0x44c
 801430c:	930f      	str	r3, [sp, #60]	; 0x3c
 801430e:	f60a 0398 	addw	r3, sl, #2200	; 0x898
 8014312:	f50a 6881 	add.w	r8, sl, #1032	; 0x408
 8014316:	f20a 490c 	addw	r9, sl, #1036	; 0x40c
 801431a:	9335      	str	r3, [sp, #212]	; 0xd4
 801431c:	f20a 4384 	addw	r3, sl, #1156	; 0x484
 8014320:	eddf 4a32 	vldr	s9, [pc, #200]	; 80143ec <m_kalman_3gyro.isra.6.constprop.36+0x344>
 8014324:	edd3 6a00 	vldr	s13, [r3]
 8014328:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801432a:	ed9f 5a31 	vldr	s10, [pc, #196]	; 80143f0 <m_kalman_3gyro.isra.6.constprop.36+0x348>
 801432e:	edd3 7a00 	vldr	s15, [r3]
 8014332:	eddf 5a30 	vldr	s11, [pc, #192]	; 80143f4 <m_kalman_3gyro.isra.6.constprop.36+0x34c>
 8014336:	ed9f 6a30 	vldr	s12, [pc, #192]	; 80143f8 <m_kalman_3gyro.isra.6.constprop.36+0x350>
 801433a:	9b01      	ldr	r3, [sp, #4]
 801433c:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8014340:	f20a 45cc 	addw	r5, sl, #1228	; 0x4cc
 8014344:	eee7 6a85 	vfma.f32	s13, s15, s10
 8014348:	f50a 649e 	add.w	r4, sl, #1264	; 0x4f0
 801434c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801434e:	ed95 7a00 	vldr	s14, [r5]
 8014352:	edd4 7a00 	vldr	s15, [r4]
 8014356:	eee7 6a25 	vfma.f32	s13, s14, s11
 801435a:	f50d 64d7 	add.w	r4, sp, #1720	; 0x6b8
 801435e:	f50a 6691 	add.w	r6, sl, #1160	; 0x488
 8014362:	ed94 3b00 	vldr	d3, [r4]
 8014366:	eee7 6a86 	vfma.f32	s13, s15, s12
 801436a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801436c:	ed8a 3b0e 	vstr	d3, [sl, #56]	; 0x38
 8014370:	ed84 8a00 	vstr	s16, [r4]
 8014374:	edca 6af8 	vstr	s13, [sl, #992]	; 0x3e0
 8014378:	edd6 7a00 	vldr	s15, [r6]
 801437c:	f20a 4764 	addw	r7, sl, #1124	; 0x464
 8014380:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8014384:	edd7 3a00 	vldr	s7, [r7]
 8014388:	973a      	str	r7, [sp, #232]	; 0xe8
 801438a:	eee3 7a85 	vfma.f32	s15, s7, s10
 801438e:	f50a 659a 	add.w	r5, sl, #1232	; 0x4d0
 8014392:	f20a 4cf4 	addw	ip, sl, #1268	; 0x4f4
 8014396:	ed95 4a00 	vldr	s8, [r5]
 801439a:	ed9c 7a00 	vldr	s14, [ip]
 801439e:	eee4 7a25 	vfma.f32	s15, s8, s11
 80143a2:	f20a 458c 	addw	r5, sl, #1164	; 0x48c
 80143a6:	f50a 678d 	add.w	r7, sl, #1128	; 0x468
 80143aa:	f20a 44d4 	addw	r4, sl, #1236	; 0x4d4
 80143ae:	eee7 7a06 	vfma.f32	s15, s14, s12
 80143b2:	9401      	str	r4, [sp, #4]
 80143b4:	f20a 446c 	addw	r4, sl, #1132	; 0x46c
 80143b8:	942b      	str	r4, [sp, #172]	; 0xac
 80143ba:	edca 7af9 	vstr	s15, [sl, #996]	; 0x3e4
 80143be:	ed95 7a00 	vldr	s14, [r5]
 80143c2:	edd7 3a00 	vldr	s7, [r7]
 80143c6:	973b      	str	r7, [sp, #236]	; 0xec
 80143c8:	ee27 7a24 	vmul.f32	s14, s14, s9
 80143cc:	f50a 648e 	add.w	r4, sl, #1136	; 0x470
 80143d0:	eea3 7a85 	vfma.f32	s14, s7, s10
 80143d4:	942c      	str	r4, [sp, #176]	; 0xb0
 80143d6:	9c01      	ldr	r4, [sp, #4]
 80143d8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80143da:	ed94 4a00 	vldr	s8, [r4]
 80143de:	e00d      	b.n	80143fc <m_kalman_3gyro.isra.6.constprop.36+0x354>
 80143e0:	0801d604 	.word	0x0801d604
 80143e4:	20001bec 	.word	0x20001bec
 80143e8:	3ca3d70a 	.word	0x3ca3d70a
 80143ec:	bdcccccd 	.word	0xbdcccccd
 80143f0:	be4ccccd 	.word	0xbe4ccccd
 80143f4:	3dcccccd 	.word	0x3dcccccd
 80143f8:	3e4ccccd 	.word	0x3e4ccccd
 80143fc:	eea4 7a25 	vfma.f32	s14, s8, s11
 8014400:	f50a 669f 	add.w	r6, sl, #1272	; 0x4f8
 8014404:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8014408:	ed96 4a00 	vldr	s8, [r6]
 801440c:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 801440e:	eea4 7a06 	vfma.f32	s14, s8, s12
 8014412:	f50a 6c92 	add.w	ip, sl, #1168	; 0x490
 8014416:	f50a 6e9b 	add.w	lr, sl, #1240	; 0x4d8
 801441a:	f20a 4b94 	addw	fp, sl, #1172	; 0x494
 801441e:	ed8a 7afa 	vstr	s14, [sl, #1000]	; 0x3e8
 8014422:	ed9c 4a00 	vldr	s8, [ip]
 8014426:	edd5 3a00 	vldr	s7, [r5]
 801442a:	ee24 4a24 	vmul.f32	s8, s8, s9
 801442e:	f50a 658f 	add.w	r5, sl, #1144	; 0x478
 8014432:	eea3 4a85 	vfma.f32	s8, s7, s10
 8014436:	9520      	str	r5, [sp, #128]	; 0x80
 8014438:	f20a 45fc 	addw	r5, sl, #1276	; 0x4fc
 801443c:	edde 3a00 	vldr	s7, [lr]
 8014440:	eea3 4aa5 	vfma.f32	s8, s7, s11
 8014444:	f20a 44dc 	addw	r4, sl, #1244	; 0x4dc
 8014448:	f50a 62a0 	add.w	r2, sl, #1280	; 0x500
 801444c:	edd5 3a00 	vldr	s7, [r5]
 8014450:	9d2c      	ldr	r5, [sp, #176]	; 0xb0
 8014452:	eea3 4a86 	vfma.f32	s8, s7, s12
 8014456:	f50a 6393 	add.w	r3, sl, #1176	; 0x498
 801445a:	f20a 4674 	addw	r6, sl, #1140	; 0x474
 801445e:	f20a 4ce4 	addw	ip, sl, #1252	; 0x4e4
 8014462:	ed8a 4afb 	vstr	s8, [sl, #1004]	; 0x3ec
 8014466:	ed9b 4a00 	vldr	s8, [fp]
 801446a:	edd5 3a00 	vldr	s7, [r5]
 801446e:	f8cd c0bc 	str.w	ip, [sp, #188]	; 0xbc
 8014472:	ee24 4a24 	vmul.f32	s8, s8, s9
 8014476:	f50a 6ca1 	add.w	ip, sl, #1288	; 0x508
 801447a:	eea3 4a85 	vfma.f32	s8, s7, s10
 801447e:	f8cd c0c8 	str.w	ip, [sp, #200]	; 0xc8
 8014482:	f50a 6c94 	add.w	ip, sl, #1184	; 0x4a0
 8014486:	edd4 3a00 	vldr	s7, [r4]
 801448a:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
 801448e:	eea3 4aa5 	vfma.f32	s8, s7, s11
 8014492:	f20a 4c7c 	addw	ip, sl, #1148	; 0x47c
 8014496:	f50a 619c 	add.w	r1, sl, #1248	; 0x4e0
 801449a:	edd2 3a00 	vldr	s7, [r2]
 801449e:	f8cd c084 	str.w	ip, [sp, #132]	; 0x84
 80144a2:	eea3 4a86 	vfma.f32	s8, s7, s12
 80144a6:	f50a 6c9d 	add.w	ip, sl, #1256	; 0x4e8
 80144aa:	f8cd c0c0 	str.w	ip, [sp, #192]	; 0xc0
 80144ae:	ee67 3aa7 	vmul.f32	s7, s15, s15
 80144b2:	ed8a 4afc 	vstr	s8, [sl, #1008]	; 0x3f0
 80144b6:	edd3 7a00 	vldr	s15, [r3]
 80144ba:	ed96 4a00 	vldr	s8, [r6]
 80144be:	963c      	str	r6, [sp, #240]	; 0xf0
 80144c0:	ee67 7aa4 	vmul.f32	s15, s15, s9
 80144c4:	eee6 3aa6 	vfma.f32	s7, s13, s13
 80144c8:	f20a 5c0c 	addw	ip, sl, #1292	; 0x50c
 80144cc:	f8cd c0cc 	str.w	ip, [sp, #204]	; 0xcc
 80144d0:	eee4 7a05 	vfma.f32	s15, s8, s10
 80144d4:	f20a 4ca4 	addw	ip, sl, #1188	; 0x4a4
 80144d8:	f8cd c0b8 	str.w	ip, [sp, #184]	; 0xb8
 80144dc:	eef0 6a63 	vmov.f32	s13, s7
 80144e0:	edd1 3a00 	vldr	s7, [r1]
 80144e4:	f50a 6c90 	add.w	ip, sl, #1152	; 0x480
 80144e8:	eee3 7aa5 	vfma.f32	s15, s7, s11
 80144ec:	f20a 479c 	addw	r7, sl, #1180	; 0x49c
 80144f0:	f20a 5004 	addw	r0, sl, #1284	; 0x504
 80144f4:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
 80144f8:	f50a 64a2 	add.w	r4, sl, #1296	; 0x510
 80144fc:	f20a 4cec 	addw	ip, sl, #1260	; 0x4ec
 8014500:	f50a 760e 	add.w	r6, sl, #568	; 0x238
 8014504:	f8cd c0c4 	str.w	ip, [sp, #196]	; 0xc4
 8014508:	973d      	str	r7, [sp, #244]	; 0xf4
 801450a:	9434      	str	r4, [sp, #208]	; 0xd0
 801450c:	962a      	str	r6, [sp, #168]	; 0xa8
 801450e:	ed90 4a00 	vldr	s8, [r0]
 8014512:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8014514:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8014516:	eee4 7a06 	vfma.f32	s15, s8, s12
 801451a:	f50a 6480 	add.w	r4, sl, #1024	; 0x400
 801451e:	f50a 7105 	add.w	r1, sl, #532	; 0x214
 8014522:	eee7 6a07 	vfma.f32	s13, s14, s14
 8014526:	9129      	str	r1, [sp, #164]	; 0xa4
 8014528:	edca 7afd 	vstr	s15, [sl, #1012]	; 0x3f4
 801452c:	edd7 7a00 	vldr	s15, [r7]
 8014530:	ed95 4a00 	vldr	s8, [r5]
 8014534:	9d2f      	ldr	r5, [sp, #188]	; 0xbc
 8014536:	ee67 7aa4 	vmul.f32	s15, s15, s9
 801453a:	ee16 0a90 	vmov	r0, s13
 801453e:	eee4 7a05 	vfma.f32	s15, s8, s10
 8014542:	edd5 6a00 	vldr	s13, [r5]
 8014546:	9d32      	ldr	r5, [sp, #200]	; 0xc8
 8014548:	eee6 7aa5 	vfma.f32	s15, s13, s11
 801454c:	ed95 7a00 	vldr	s14, [r5]
 8014550:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 8014552:	eee7 7a06 	vfma.f32	s15, s14, s12
 8014556:	edca 7afe 	vstr	s15, [sl, #1016]	; 0x3f8
 801455a:	edd5 7a00 	vldr	s15, [r5]
 801455e:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8014560:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8014564:	ed95 4a00 	vldr	s8, [r5]
 8014568:	9d30      	ldr	r5, [sp, #192]	; 0xc0
 801456a:	eee4 7a05 	vfma.f32	s15, s8, s10
 801456e:	edd5 6a00 	vldr	s13, [r5]
 8014572:	9d33      	ldr	r5, [sp, #204]	; 0xcc
 8014574:	eee6 7aa5 	vfma.f32	s15, s13, s11
 8014578:	ed95 7a00 	vldr	s14, [r5]
 801457c:	9d2e      	ldr	r5, [sp, #184]	; 0xb8
 801457e:	eee7 7a06 	vfma.f32	s15, s14, s12
 8014582:	edca 7aff 	vstr	s15, [sl, #1020]	; 0x3fc
 8014586:	ed95 8a00 	vldr	s16, [r5]
 801458a:	9d22      	ldr	r5, [sp, #136]	; 0x88
 801458c:	ed9c 7a00 	vldr	s14, [ip]
 8014590:	edd5 6a00 	vldr	s13, [r5]
 8014594:	edd3 7a00 	vldr	s15, [r3]
 8014598:	ee28 8a24 	vmul.f32	s16, s16, s9
 801459c:	eea6 8a85 	vfma.f32	s16, s13, s10
 80145a0:	eea7 8a25 	vfma.f32	s16, s14, s11
 80145a4:	eea7 8a86 	vfma.f32	s16, s15, s12
 80145a8:	ed84 8a00 	vstr	s16, [r4]
 80145ac:	f7eb ffd4 	bl	8000558 <__aeabi_f2d>
 80145b0:	f007 f978 	bl	801b8a4 <sqrt>
 80145b4:	f7ec fb00 	bl	8000bb8 <__aeabi_d2f>
 80145b8:	edda 7afc 	vldr	s15, [sl, #1008]	; 0x3f0
 80145bc:	edda 6afb 	vldr	s13, [sl, #1004]	; 0x3ec
 80145c0:	ed9a 7afd 	vldr	s14, [sl, #1012]	; 0x3f4
 80145c4:	49a1      	ldr	r1, [pc, #644]	; (801484c <m_kalman_3gyro.isra.6.constprop.36+0x7a4>)
 80145c6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80145ca:	ee0d 0a90 	vmov	s27, r0
 80145ce:	eee6 7aa6 	vfma.f32	s15, s13, s13
 80145d2:	6008      	str	r0, [r1, #0]
 80145d4:	eee7 7a07 	vfma.f32	s15, s14, s14
 80145d8:	ee17 0a90 	vmov	r0, s15
 80145dc:	f7eb ffbc 	bl	8000558 <__aeabi_f2d>
 80145e0:	f007 f960 	bl	801b8a4 <sqrt>
 80145e4:	f7ec fae8 	bl	8000bb8 <__aeabi_d2f>
 80145e8:	edda 7aff 	vldr	s15, [sl, #1020]	; 0x3fc
 80145ec:	ed9a 7afe 	vldr	s14, [sl, #1016]	; 0x3f8
 80145f0:	4b96      	ldr	r3, [pc, #600]	; (801484c <m_kalman_3gyro.isra.6.constprop.36+0x7a4>)
 80145f2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80145f6:	f843 0f04 	str.w	r0, [r3, #4]!
 80145fa:	eee7 7a07 	vfma.f32	s15, s14, s14
 80145fe:	9339      	str	r3, [sp, #228]	; 0xe4
 8014600:	ee0c 0a90 	vmov	s25, r0
 8014604:	eee8 7a08 	vfma.f32	s15, s16, s16
 8014608:	ee17 0a90 	vmov	r0, s15
 801460c:	f7eb ffa4 	bl	8000558 <__aeabi_f2d>
 8014610:	f007 f948 	bl	801b8a4 <sqrt>
 8014614:	f7ec fad0 	bl	8000bb8 <__aeabi_d2f>
 8014618:	ee6b 7a4c 	vnmul.f32	s15, s22, s24
 801461c:	ee2a 7a6b 	vnmul.f32	s14, s20, s23
 8014620:	eee9 7a8a 	vfma.f32	s15, s19, s20
 8014624:	4b89      	ldr	r3, [pc, #548]	; (801484c <m_kalman_3gyro.isra.6.constprop.36+0x7a4>)
 8014626:	eeac 7a2a 	vfma.f32	s14, s24, s21
 801462a:	f843 0f08 	str.w	r0, [r3, #8]!
 801462e:	ee6a 9ae9 	vnmul.f32	s19, s21, s19
 8014632:	eeb0 ca47 	vmov.f32	s24, s14
 8014636:	ee27 7aa7 	vmul.f32	s14, s15, s15
 801463a:	eeeb 9a8b 	vfma.f32	s19, s23, s22
 801463e:	931a      	str	r3, [sp, #104]	; 0x68
 8014640:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014642:	edcd 7a01 	vstr	s15, [sp, #4]
 8014646:	eeac 7a0c 	vfma.f32	s14, s24, s24
 801464a:	ee08 0a10 	vmov	s16, r0
 801464e:	eea9 7aa9 	vfma.f32	s14, s19, s19
 8014652:	edc3 da00 	vstr	s27, [r3]
 8014656:	ee17 0a10 	vmov	r0, s14
 801465a:	edc8 ca00 	vstr	s25, [r8]
 801465e:	ed89 8a00 	vstr	s16, [r9]
 8014662:	ed8a ba90 	vstr	s22, [sl, #576]	; 0x240
 8014666:	edca aa93 	vstr	s21, [sl, #588]	; 0x24c
 801466a:	ed8a aa96 	vstr	s20, [sl, #600]	; 0x258
 801466e:	f7eb ff73 	bl	8000558 <__aeabi_f2d>
 8014672:	f007 f917 	bl	801b8a4 <sqrt>
 8014676:	f7ec fa9f 	bl	8000bb8 <__aeabi_d2f>
 801467a:	ee07 0a90 	vmov	s15, r0
 801467e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014682:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014686:	ab7d      	add	r3, sp, #500	; 0x1f4
 8014688:	461a      	mov	r2, r3
 801468a:	4631      	mov	r1, r6
 801468c:	9829      	ldr	r0, [sp, #164]	; 0xa4
 801468e:	eddd 7a01 	vldr	s15, [sp, #4]
 8014692:	ee69 9a87 	vmul.f32	s19, s19, s14
 8014696:	ee67 ba87 	vmul.f32	s23, s15, s14
 801469a:	ee2c ca07 	vmul.f32	s24, s24, s14
 801469e:	ee6a 6ae9 	vnmul.f32	s13, s21, s19
 80146a2:	ee2a 7a4c 	vnmul.f32	s14, s20, s24
 80146a6:	ee6b 7a6b 	vnmul.f32	s15, s22, s23
 80146aa:	eeeb 6a8a 	vfma.f32	s13, s23, s20
 80146ae:	eea9 7a8b 	vfma.f32	s14, s19, s22
 80146b2:	eeec 7a2a 	vfma.f32	s15, s24, s21
 80146b6:	edca 6a8e 	vstr	s13, [sl, #568]	; 0x238
 80146ba:	ed8a 7a91 	vstr	s14, [sl, #580]	; 0x244
 80146be:	edca 7a94 	vstr	s15, [sl, #592]	; 0x250
 80146c2:	ed8a ca8f 	vstr	s24, [sl, #572]	; 0x23c
 80146c6:	edca ba92 	vstr	s23, [sl, #584]	; 0x248
 80146ca:	edca 9a95 	vstr	s19, [sl, #596]	; 0x254
 80146ce:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 80146d2:	ed8d 7a24 	vstr	s14, [sp, #144]	; 0x90
 80146d6:	edcd 7a25 	vstr	s15, [sp, #148]	; 0x94
 80146da:	f7fb f807 	bl	800f6ec <m_mldivide>
 80146de:	a87d      	add	r0, sp, #500	; 0x1f4
 80146e0:	a94b      	add	r1, sp, #300	; 0x12c
 80146e2:	f7fb fb81 	bl	800fde8 <m_dcm2q_eml>
 80146e6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80146e8:	f5aa 70ae 	sub.w	r0, sl, #348	; 0x15c
 80146ec:	4653      	mov	r3, sl
 80146ee:	f8d3 23ac 	ldr.w	r2, [r3, #940]	; 0x3ac
 80146f2:	f8d3 13b0 	ldr.w	r1, [r3, #944]	; 0x3b0
 80146f6:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
 80146fa:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 80146fe:	f8c3 13bc 	str.w	r1, [r3, #956]	; 0x3bc
 8014702:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
 8014706:	3b0c      	subs	r3, #12
 8014708:	4298      	cmp	r0, r3
 801470a:	d1f0      	bne.n	80146ee <m_kalman_3gyro.isra.6.constprop.36+0x646>
 801470c:	ed9d 7a02 	vldr	s14, [sp, #8]
 8014710:	eddd 6a4b 	vldr	s13, [sp, #300]	; 0x12c
 8014714:	eddf 5a4e 	vldr	s11, [pc, #312]	; 8014850 <m_kalman_3gyro.isra.6.constprop.36+0x7a8>
 8014718:	9738      	str	r7, [sp, #224]	; 0xe0
 801471a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801471e:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8014722:	ac44      	add	r4, sp, #272	; 0x110
 8014724:	f507 71ae 	add.w	r1, r7, #348	; 0x15c
 8014728:	f107 050c 	add.w	r5, r7, #12
 801472c:	4638      	mov	r0, r7
 801472e:	ed9d 7a4c 	vldr	s14, [sp, #304]	; 0x130
 8014732:	eddd 7a4d 	vldr	s15, [sp, #308]	; 0x134
 8014736:	ee76 6aa6 	vadd.f32	s13, s13, s13
 801473a:	ee37 7a07 	vadd.f32	s14, s14, s14
 801473e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8014742:	ee66 6a86 	vmul.f32	s13, s13, s12
 8014746:	ee27 7a06 	vmul.f32	s14, s14, s12
 801474a:	ee67 7a86 	vmul.f32	s15, s15, s12
 801474e:	ed9f 6a41 	vldr	s12, [pc, #260]	; 8014854 <m_kalman_3gyro.isra.6.constprop.36+0x7ac>
 8014752:	edca 6a97 	vstr	s13, [sl, #604]	; 0x25c
 8014756:	ed8a 7a98 	vstr	s14, [sl, #608]	; 0x260
 801475a:	edca 7a99 	vstr	s15, [sl, #612]	; 0x264
 801475e:	edd0 6a00 	vldr	s13, [r0]
 8014762:	4603      	mov	r3, r0
 8014764:	eef0 7a66 	vmov.f32	s15, s13
 8014768:	330c      	adds	r3, #12
 801476a:	ed93 7a00 	vldr	s14, [r3]
 801476e:	428b      	cmp	r3, r1
 8014770:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014774:	d1f8      	bne.n	8014768 <m_kalman_3gyro.isra.6.constprop.36+0x6c0>
 8014776:	ee27 7aa5 	vmul.f32	s14, s15, s11
 801477a:	4602      	mov	r2, r0
 801477c:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8014780:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8014784:	320c      	adds	r2, #12
 8014786:	edd2 7a00 	vldr	s15, [r2]
 801478a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801478e:	4293      	cmp	r3, r2
 8014790:	eee7 6aa7 	vfma.f32	s13, s15, s15
 8014794:	d1f6      	bne.n	8014784 <m_kalman_3gyro.isra.6.constprop.36+0x6dc>
 8014796:	ee66 6a86 	vmul.f32	s13, s13, s12
 801479a:	3004      	adds	r0, #4
 801479c:	42a8      	cmp	r0, r5
 801479e:	ece4 6a01 	vstmia	r4!, {s13}
 80147a2:	f101 0104 	add.w	r1, r1, #4
 80147a6:	d1da      	bne.n	801475e <m_kalman_3gyro.isra.6.constprop.36+0x6b6>
 80147a8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80147aa:	970a      	str	r7, [sp, #40]	; 0x28
 80147ac:	f7eb fed4 	bl	8000558 <__aeabi_f2d>
 80147b0:	f007 f878 	bl	801b8a4 <sqrt>
 80147b4:	f7ec fa00 	bl	8000bb8 <__aeabi_d2f>
 80147b8:	ee06 0a90 	vmov	s13, r0
 80147bc:	9845      	ldr	r0, [sp, #276]	; 0x114
 80147be:	edcd 6a44 	vstr	s13, [sp, #272]	; 0x110
 80147c2:	edcd 6a02 	vstr	s13, [sp, #8]
 80147c6:	f7eb fec7 	bl	8000558 <__aeabi_f2d>
 80147ca:	f007 f86b 	bl	801b8a4 <sqrt>
 80147ce:	f7ec f9f3 	bl	8000bb8 <__aeabi_d2f>
 80147d2:	ee07 0a90 	vmov	s15, r0
 80147d6:	9846      	ldr	r0, [sp, #280]	; 0x118
 80147d8:	edcd 7a45 	vstr	s15, [sp, #276]	; 0x114
 80147dc:	edcd 7a01 	vstr	s15, [sp, #4]
 80147e0:	f7eb feba 	bl	8000558 <__aeabi_f2d>
 80147e4:	f007 f85e 	bl	801b8a4 <sqrt>
 80147e8:	f7ec f9e6 	bl	8000bb8 <__aeabi_d2f>
 80147ec:	eddd 7a01 	vldr	s15, [sp, #4]
 80147f0:	eddd 6a02 	vldr	s13, [sp, #8]
 80147f4:	9046      	str	r0, [sp, #280]	; 0x118
 80147f6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80147fa:	ee07 0a10 	vmov	s14, r0
 80147fe:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8014802:	f50a 7372 	add.w	r3, sl, #968	; 0x3c8
 8014806:	9326      	str	r3, [sp, #152]	; 0x98
 8014808:	f20d 48ec 	addw	r8, sp, #1260	; 0x4ec
 801480c:	eee7 7a07 	vfma.f32	s15, s14, s14
 8014810:	f50d 7b6a 	add.w	fp, sp, #936	; 0x3a8
 8014814:	ee17 0a90 	vmov	r0, s15
 8014818:	f7eb fe9e 	bl	8000558 <__aeabi_f2d>
 801481c:	f007 f842 	bl	801b8a4 <sqrt>
 8014820:	f7ec f9ca 	bl	8000bb8 <__aeabi_d2f>
 8014824:	4b0c      	ldr	r3, [pc, #48]	; (8014858 <m_kalman_3gyro.isra.6.constprop.36+0x7b0>)
 8014826:	f8ca 03c4 	str.w	r0, [sl, #964]	; 0x3c4
 801482a:	ecf3 7a01 	vldmia	r3!, {s15}
 801482e:	f8cd a6e0 	str.w	sl, [sp, #1760]	; 0x6e0
 8014832:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 8014836:	edd3 7a00 	vldr	s15, [r3]
 801483a:	edcd 7a37 	vstr	s15, [sp, #220]	; 0xdc
 801483e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014840:	4640      	mov	r0, r8
 8014842:	f20d 31a7 	addw	r1, sp, #935	; 0x3a7
 8014846:	2301      	movs	r3, #1
 8014848:	e00c      	b.n	8014864 <m_kalman_3gyro.isra.6.constprop.36+0x7bc>
 801484a:	bf00      	nop
 801484c:	20001bf0 	.word	0x20001bf0
 8014850:	3d088889 	.word	0x3d088889
 8014854:	3d0d3dcb 	.word	0x3d0d3dcb
 8014858:	200017d8 	.word	0x200017d8
 801485c:	3f333333 	.word	0x3f333333
 8014860:	3f4ccccd 	.word	0x3f4ccccd
 8014864:	f801 3f01 	strb.w	r3, [r1, #1]!
 8014868:	3301      	adds	r3, #1
 801486a:	f852 4b0c 	ldr.w	r4, [r2], #12
 801486e:	f840 4b04 	str.w	r4, [r0], #4
 8014872:	2b1f      	cmp	r3, #31
 8014874:	d1f6      	bne.n	8014864 <m_kalman_3gyro.isra.6.constprop.36+0x7bc>
 8014876:	221e      	movs	r2, #30
 8014878:	2101      	movs	r1, #1
 801487a:	a88f      	add	r0, sp, #572	; 0x23c
 801487c:	f005 fecb 	bl	801a616 <memset>
 8014880:	ed98 7a00 	vldr	s14, [r8]
 8014884:	edd8 7a01 	vldr	s15, [r8, #4]
 8014888:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801488c:	ed98 7a02 	vldr	s14, [r8, #8]
 8014890:	edd8 7a03 	vldr	s15, [r8, #12]
 8014894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014898:	bf88      	it	hi
 801489a:	f44f 7381 	movhi.w	r3, #258	; 0x102
 801489e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80148a2:	ed98 7a04 	vldr	s14, [r8, #16]
 80148a6:	edd8 7a05 	vldr	s15, [r8, #20]
 80148aa:	bf88      	it	hi
 80148ac:	f8ab 3000 	strhhi.w	r3, [fp]
 80148b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148b4:	bf88      	it	hi
 80148b6:	f44f 7341 	movhi.w	r3, #772	; 0x304
 80148ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80148be:	ed98 7a06 	vldr	s14, [r8, #24]
 80148c2:	edd8 7a07 	vldr	s15, [r8, #28]
 80148c6:	bf88      	it	hi
 80148c8:	f8ab 3002 	strhhi.w	r3, [fp, #2]
 80148cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148d0:	bf88      	it	hi
 80148d2:	f240 5306 	movwhi	r3, #1286	; 0x506
 80148d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80148da:	ed98 7a08 	vldr	s14, [r8, #32]
 80148de:	edd8 7a09 	vldr	s15, [r8, #36]	; 0x24
 80148e2:	bf88      	it	hi
 80148e4:	f8ab 3004 	strhhi.w	r3, [fp, #4]
 80148e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148ec:	bf88      	it	hi
 80148ee:	f44f 63e1 	movhi.w	r3, #1800	; 0x708
 80148f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80148f6:	ed98 7a0a 	vldr	s14, [r8, #40]	; 0x28
 80148fa:	edd8 7a0b 	vldr	s15, [r8, #44]	; 0x2c
 80148fe:	bf88      	it	hi
 8014900:	f8ab 3006 	strhhi.w	r3, [fp, #6]
 8014904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014908:	bf88      	it	hi
 801490a:	f640 130a 	movwhi	r3, #2314	; 0x90a
 801490e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014912:	ed98 7a0c 	vldr	s14, [r8, #48]	; 0x30
 8014916:	edd8 7a0d 	vldr	s15, [r8, #52]	; 0x34
 801491a:	bf88      	it	hi
 801491c:	f8ab 3008 	strhhi.w	r3, [fp, #8]
 8014920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014924:	bf88      	it	hi
 8014926:	f640 330c 	movwhi	r3, #2828	; 0xb0c
 801492a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801492e:	ed98 7a0e 	vldr	s14, [r8, #56]	; 0x38
 8014932:	edd8 7a0f 	vldr	s15, [r8, #60]	; 0x3c
 8014936:	bf88      	it	hi
 8014938:	f8ab 300a 	strhhi.w	r3, [fp, #10]
 801493c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014940:	bf88      	it	hi
 8014942:	f640 530e 	movwhi	r3, #3342	; 0xd0e
 8014946:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801494a:	ed98 7a10 	vldr	s14, [r8, #64]	; 0x40
 801494e:	edd8 7a11 	vldr	s15, [r8, #68]	; 0x44
 8014952:	bf88      	it	hi
 8014954:	f8ab 300c 	strhhi.w	r3, [fp, #12]
 8014958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801495c:	bf88      	it	hi
 801495e:	f44f 6371 	movhi.w	r3, #3856	; 0xf10
 8014962:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014966:	ed98 7a12 	vldr	s14, [r8, #72]	; 0x48
 801496a:	edd8 7a13 	vldr	s15, [r8, #76]	; 0x4c
 801496e:	bf88      	it	hi
 8014970:	f8ab 300e 	strhhi.w	r3, [fp, #14]
 8014974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014978:	bf88      	it	hi
 801497a:	f241 1312 	movwhi	r3, #4370	; 0x1112
 801497e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014982:	ed98 7a14 	vldr	s14, [r8, #80]	; 0x50
 8014986:	edd8 7a15 	vldr	s15, [r8, #84]	; 0x54
 801498a:	bf88      	it	hi
 801498c:	f8ab 3010 	strhhi.w	r3, [fp, #16]
 8014990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014994:	bf88      	it	hi
 8014996:	f241 3314 	movwhi	r3, #4884	; 0x1314
 801499a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801499e:	bf88      	it	hi
 80149a0:	f8ab 3012 	strhhi.w	r3, [fp, #18]
 80149a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149a8:	bf84      	itt	hi
 80149aa:	f241 5316 	movwhi	r3, #5398	; 0x1516
 80149ae:	f8ab 3014 	strhhi.w	r3, [fp, #20]
 80149b2:	ed98 7a16 	vldr	s14, [r8, #88]	; 0x58
 80149b6:	edd8 7a17 	vldr	s15, [r8, #92]	; 0x5c
 80149ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80149be:	ed98 7a18 	vldr	s14, [r8, #96]	; 0x60
 80149c2:	edd8 7a19 	vldr	s15, [r8, #100]	; 0x64
 80149c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149ca:	bf88      	it	hi
 80149cc:	f241 7318 	movwhi	r3, #5912	; 0x1718
 80149d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80149d4:	ed98 7a1a 	vldr	s14, [r8, #104]	; 0x68
 80149d8:	edd8 7a1b 	vldr	s15, [r8, #108]	; 0x6c
 80149dc:	bf88      	it	hi
 80149de:	f8ab 3016 	strhhi.w	r3, [fp, #22]
 80149e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149e6:	bf88      	it	hi
 80149e8:	f641 131a 	movwhi	r3, #6426	; 0x191a
 80149ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80149f0:	ed98 7a1c 	vldr	s14, [r8, #112]	; 0x70
 80149f4:	edd8 7a1d 	vldr	s15, [r8, #116]	; 0x74
 80149f8:	bf88      	it	hi
 80149fa:	f8ab 3018 	strhhi.w	r3, [fp, #24]
 80149fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a02:	bf88      	it	hi
 8014a04:	f641 331c 	movwhi	r3, #6940	; 0x1b1c
 8014a08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014a0c:	bf88      	it	hi
 8014a0e:	f8ab 301a 	strhhi.w	r3, [fp, #26]
 8014a12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a16:	bf84      	itt	hi
 8014a18:	f641 531e 	movwhi	r3, #7454	; 0x1d1e
 8014a1c:	f8ab 301c 	strhhi.w	r3, [fp, #28]
 8014a20:	2304      	movs	r3, #4
 8014a22:	9306      	str	r3, [sp, #24]
 8014a24:	2302      	movs	r3, #2
 8014a26:	9302      	str	r3, [sp, #8]
 8014a28:	9b02      	ldr	r3, [sp, #8]
 8014a2a:	f103 0901 	add.w	r9, r3, #1
 8014a2e:	f1b9 0f1f 	cmp.w	r9, #31
 8014a32:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8014a36:	9304      	str	r3, [sp, #16]
 8014a38:	d055      	beq.n	8014ae6 <m_kalman_3gyro.isra.6.constprop.36+0xa3e>
 8014a3a:	2301      	movs	r3, #1
 8014a3c:	9301      	str	r3, [sp, #4]
 8014a3e:	9b01      	ldr	r3, [sp, #4]
 8014a40:	9a04      	ldr	r2, [sp, #16]
 8014a42:	18d7      	adds	r7, r2, r3
 8014a44:	2f1f      	cmp	r7, #31
 8014a46:	bfa8      	it	ge
 8014a48:	271f      	movge	r7, #31
 8014a4a:	eba7 0a03 	sub.w	sl, r7, r3
 8014a4e:	f1ba 0f00 	cmp.w	sl, #0
 8014a52:	dd40      	ble.n	8014ad6 <m_kalman_3gyro.isra.6.constprop.36+0xa2e>
 8014a54:	461d      	mov	r5, r3
 8014a56:	464e      	mov	r6, r9
 8014a58:	2401      	movs	r4, #1
 8014a5a:	e008      	b.n	8014a6e <m_kalman_3gyro.isra.6.constprop.36+0x9c6>
 8014a5c:	3601      	adds	r6, #1
 8014a5e:	ab8f      	add	r3, sp, #572	; 0x23c
 8014a60:	42be      	cmp	r6, r7
 8014a62:	541a      	strb	r2, [r3, r0]
 8014a64:	f000 81a6 	beq.w	8014db4 <m_kalman_3gyro.isra.6.constprop.36+0xd0c>
 8014a68:	3401      	adds	r4, #1
 8014a6a:	45a2      	cmp	sl, r4
 8014a6c:	db2c      	blt.n	8014ac8 <m_kalman_3gyro.isra.6.constprop.36+0xa20>
 8014a6e:	f105 3cff 	add.w	ip, r5, #4294967295
 8014a72:	1e71      	subs	r1, r6, #1
 8014a74:	f91b 300c 	ldrsb.w	r3, [fp, ip]
 8014a78:	f91b 2001 	ldrsb.w	r2, [fp, r1]
 8014a7c:	eb08 0e83 	add.w	lr, r8, r3, lsl #2
 8014a80:	eb08 0082 	add.w	r0, r8, r2, lsl #2
 8014a84:	ed50 7a01 	vldr	s15, [r0, #-4]
 8014a88:	ed1e 7a01 	vldr	s14, [lr, #-4]
 8014a8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a94:	f104 30ff 	add.w	r0, r4, #4294967295
 8014a98:	d8e0      	bhi.n	8014a5c <m_kalman_3gyro.isra.6.constprop.36+0x9b4>
 8014a9a:	3501      	adds	r5, #1
 8014a9c:	aa8f      	add	r2, sp, #572	; 0x23c
 8014a9e:	45a9      	cmp	r9, r5
 8014aa0:	5413      	strb	r3, [r2, r0]
 8014aa2:	d1e1      	bne.n	8014a68 <m_kalman_3gyro.isra.6.constprop.36+0x9c0>
 8014aa4:	ab8f      	add	r3, sp, #572	; 0x23c
 8014aa6:	42be      	cmp	r6, r7
 8014aa8:	eba7 0206 	sub.w	r2, r7, r6
 8014aac:	eb03 0004 	add.w	r0, r3, r4
 8014ab0:	4459      	add	r1, fp
 8014ab2:	f280 818e 	bge.w	8014dd2 <m_kalman_3gyro.isra.6.constprop.36+0xd2a>
 8014ab6:	443c      	add	r4, r7
 8014ab8:	1ba4      	subs	r4, r4, r6
 8014aba:	3401      	adds	r4, #1
 8014abc:	f005 fda0 	bl	801a600 <memcpy>
 8014ac0:	45a2      	cmp	sl, r4
 8014ac2:	464d      	mov	r5, r9
 8014ac4:	463e      	mov	r6, r7
 8014ac6:	dad2      	bge.n	8014a6e <m_kalman_3gyro.isra.6.constprop.36+0x9c6>
 8014ac8:	9b01      	ldr	r3, [sp, #4]
 8014aca:	1e58      	subs	r0, r3, #1
 8014acc:	4458      	add	r0, fp
 8014ace:	4652      	mov	r2, sl
 8014ad0:	a98f      	add	r1, sp, #572	; 0x23c
 8014ad2:	f005 fd95 	bl	801a600 <memcpy>
 8014ad6:	9b02      	ldr	r3, [sp, #8]
 8014ad8:	9701      	str	r7, [sp, #4]
 8014ada:	eb03 0907 	add.w	r9, r3, r7
 8014ade:	f1b9 0f1e 	cmp.w	r9, #30
 8014ae2:	ddac      	ble.n	8014a3e <m_kalman_3gyro.isra.6.constprop.36+0x996>
 8014ae4:	9b04      	ldr	r3, [sp, #16]
 8014ae6:	9302      	str	r3, [sp, #8]
 8014ae8:	9b06      	ldr	r3, [sp, #24]
 8014aea:	3b01      	subs	r3, #1
 8014aec:	9306      	str	r3, [sp, #24]
 8014aee:	d19b      	bne.n	8014a28 <m_kalman_3gyro.isra.6.constprop.36+0x980>
 8014af0:	f99b 200e 	ldrsb.w	r2, [fp, #14]
 8014af4:	f99b 300f 	ldrsb.w	r3, [fp, #15]
 8014af8:	eb08 0282 	add.w	r2, r8, r2, lsl #2
 8014afc:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8014b00:	ed52 7a01 	vldr	s15, [r2, #-4]
 8014b04:	ed13 7a01 	vldr	s14, [r3, #-4]
 8014b08:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b10:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8014b14:	bf4c      	ite	mi
 8014b16:	2201      	movmi	r2, #1
 8014b18:	2200      	movpl	r2, #0
 8014b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b1e:	bf4c      	ite	mi
 8014b20:	2301      	movmi	r3, #1
 8014b22:	2300      	movpl	r3, #0
 8014b24:	429a      	cmp	r2, r3
 8014b26:	f000 8156 	beq.w	8014dd6 <m_kalman_3gyro.isra.6.constprop.36+0xd2e>
 8014b2a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014b2e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8014b32:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014b36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014b38:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8014b3a:	3204      	adds	r2, #4
 8014b3c:	920a      	str	r2, [sp, #40]	; 0x28
 8014b3e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014b40:	ece3 7a01 	vstmia	r3!, {s15}
 8014b44:	4293      	cmp	r3, r2
 8014b46:	9326      	str	r3, [sp, #152]	; 0x98
 8014b48:	f47f ae79 	bne.w	801483e <m_kalman_3gyro.isra.6.constprop.36+0x796>
 8014b4c:	f8dd a6e0 	ldr.w	sl, [sp, #1760]	; 0x6e0
 8014b50:	edda 7af3 	vldr	s15, [sl, #972]	; 0x3cc
 8014b54:	edda 6af2 	vldr	s13, [sl, #968]	; 0x3c8
 8014b58:	ed9a 7af4 	vldr	s14, [sl, #976]	; 0x3d0
 8014b5c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8014b60:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8014b64:	eee7 7a07 	vfma.f32	s15, s14, s14
 8014b68:	ee17 0a90 	vmov	r0, s15
 8014b6c:	f7eb fcf4 	bl	8000558 <__aeabi_f2d>
 8014b70:	f006 fe98 	bl	801b8a4 <sqrt>
 8014b74:	f7ec f820 	bl	8000bb8 <__aeabi_d2f>
 8014b78:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8014b7c:	ee2e 6a07 	vmul.f32	s12, s28, s14
 8014b80:	ee6e 6a87 	vmul.f32	s13, s29, s14
 8014b84:	eecd 7a86 	vdiv.f32	s15, s27, s12
 8014b88:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8014b8a:	9002      	str	r0, [sp, #8]
 8014b8c:	ee8c 6aa6 	vdiv.f32	s12, s25, s13
 8014b90:	ee2f 7a07 	vmul.f32	s14, s30, s14
 8014b94:	edc3 7a00 	vstr	s15, [r3]
 8014b98:	eec8 6a07 	vdiv.f32	s13, s16, s14
 8014b9c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014b9e:	ed1f 7ad1 	vldr	s14, [pc, #-836]	; 801485c <m_kalman_3gyro.isra.6.constprop.36+0x7b4>
 8014ba2:	ed83 6a00 	vstr	s12, [r3]
 8014ba6:	ee77 7a86 	vadd.f32	s15, s15, s12
 8014baa:	ee28 8a07 	vmul.f32	s16, s16, s14
 8014bae:	ee05 0a90 	vmov	s11, r0
 8014bb2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8014bb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014bba:	eeac 8a87 	vfma.f32	s16, s25, s14
 8014bbe:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8014bc0:	ee25 7a87 	vmul.f32	s14, s11, s14
 8014bc4:	edc3 6a00 	vstr	s13, [r3]
 8014bc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014bcc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014bce:	ed1f 6adc 	vldr	s12, [pc, #-880]	; 8014860 <m_kalman_3gyro.isra.6.constprop.36+0x7b8>
 8014bd2:	ed83 7a00 	vstr	s14, [r3]
 8014bd6:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 8014bda:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014bdc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014be0:	ee28 8a06 	vmul.f32	s16, s16, s12
 8014be4:	edc3 7a00 	vstr	s15, [r3]
 8014be8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8014bea:	ed83 8a00 	vstr	s16, [r3]
 8014bee:	f89a 38ce 	ldrb.w	r3, [sl, #2254]	; 0x8ce
 8014bf2:	2b00      	cmp	r3, #0
 8014bf4:	f000 829e 	beq.w	8015134 <m_kalman_3gyro.isra.6.constprop.36+0x108c>
 8014bf8:	f60a 03c8 	addw	r3, sl, #2248	; 0x8c8
 8014bfc:	9304      	str	r3, [sp, #16]
 8014bfe:	f50a 630c 	add.w	r3, sl, #2240	; 0x8c0
 8014c02:	f60a 09c4 	addw	r9, sl, #2244	; 0x8c4
 8014c06:	9301      	str	r3, [sp, #4]
 8014c08:	f60a 07bc 	addw	r7, sl, #2236	; 0x8bc
 8014c0c:	f60a 06b8 	addw	r6, sl, #2232	; 0x8b8
 8014c10:	461c      	mov	r4, r3
 8014c12:	ed99 7a00 	vldr	s14, [r9]
 8014c16:	9b04      	ldr	r3, [sp, #16]
 8014c18:	ed8d 7a12 	vstr	s14, [sp, #72]	; 0x48
 8014c1c:	ed83 7a00 	vstr	s14, [r3]
 8014c20:	e9da 010a 	ldrd	r0, r1, [sl, #40]	; 0x28
 8014c24:	f7eb ffc8 	bl	8000bb8 <__aeabi_d2f>
 8014c28:	ed94 6a00 	vldr	s12, [r4]
 8014c2c:	9004      	str	r0, [sp, #16]
 8014c2e:	ed89 6a00 	vstr	s12, [r9]
 8014c32:	e9da 0108 	ldrd	r0, r1, [sl, #32]
 8014c36:	ed8d 6a0a 	vstr	s12, [sp, #40]	; 0x28
 8014c3a:	f7eb ffbd 	bl	8000bb8 <__aeabi_d2f>
 8014c3e:	edd7 7a00 	vldr	s15, [r7]
 8014c42:	9001      	str	r0, [sp, #4]
 8014c44:	edc4 7a00 	vstr	s15, [r4]
 8014c48:	e9da 0106 	ldrd	r0, r1, [sl, #24]
 8014c4c:	edcd 7a06 	vstr	s15, [sp, #24]
 8014c50:	f7eb ffb2 	bl	8000bb8 <__aeabi_d2f>
 8014c54:	eddd 7a06 	vldr	s15, [sp, #24]
 8014c58:	ed9d 6a0a 	vldr	s12, [sp, #40]	; 0x28
 8014c5c:	edd6 6a00 	vldr	s13, [r6]
 8014c60:	ee07 0a10 	vmov	s14, r0
 8014c64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014c68:	ed9d 7a01 	vldr	s14, [sp, #4]
 8014c6c:	edc7 6a00 	vstr	s13, [r7]
 8014c70:	eee7 7a06 	vfma.f32	s15, s14, s12
 8014c74:	e9da 0104 	ldrd	r0, r1, [sl, #16]
 8014c78:	edcd 6a06 	vstr	s13, [sp, #24]
 8014c7c:	edcd 7a01 	vstr	s15, [sp, #4]
 8014c80:	f7eb ff9a 	bl	8000bb8 <__aeabi_d2f>
 8014c84:	eddd 7a01 	vldr	s15, [sp, #4]
 8014c88:	eddd 6a06 	vldr	s13, [sp, #24]
 8014c8c:	ee07 0a10 	vmov	s14, r0
 8014c90:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014c94:	e9da 0102 	ldrd	r0, r1, [sl, #8]
 8014c98:	ed9d 7a12 	vldr	s14, [sp, #72]	; 0x48
 8014c9c:	eddd 6a04 	vldr	s13, [sp, #16]
 8014ca0:	ed86 8a00 	vstr	s16, [r6]
 8014ca4:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014ca8:	edcd 7a01 	vstr	s15, [sp, #4]
 8014cac:	f7eb ff84 	bl	8000bb8 <__aeabi_d2f>
 8014cb0:	eddd 7a01 	vldr	s15, [sp, #4]
 8014cb4:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8014cb6:	ee07 0a10 	vmov	s14, r0
 8014cba:	eee8 7a07 	vfma.f32	s15, s16, s14
 8014cbe:	2200      	movs	r2, #0
 8014cc0:	2300      	movs	r3, #0
 8014cc2:	edc1 7a00 	vstr	s15, [r1]
 8014cc6:	f50d 61d7 	add.w	r1, sp, #1720	; 0x6b8
 8014cca:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014cce:	eeb0 8a67 	vmov.f32	s16, s15
 8014cd2:	f7eb ff15 	bl	8000b00 <__aeabi_dcmple>
 8014cd6:	2800      	cmp	r0, #0
 8014cd8:	f040 834a 	bne.w	8015370 <m_kalman_3gyro.isra.6.constprop.36+0x12c8>
 8014cdc:	f50d 61d7 	add.w	r1, sp, #1720	; 0x6b8
 8014ce0:	2200      	movs	r2, #0
 8014ce2:	4b4e      	ldr	r3, [pc, #312]	; (8014e1c <m_kalman_3gyro.isra.6.constprop.36+0xd74>)
 8014ce4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014ce8:	f7eb fef6 	bl	8000ad8 <__aeabi_dcmpeq>
 8014cec:	2800      	cmp	r0, #0
 8014cee:	f000 8284 	beq.w	80151fa <m_kalman_3gyro.isra.6.constprop.36+0x1152>
 8014cf2:	eddd 7ab6 	vldr	s15, [sp, #728]	; 0x2d8
 8014cf6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8014cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014cfe:	f302 83c0 	bgt.w	8017482 <m_kalman_3gyro.isra.6.constprop.36+0x33da>
 8014d02:	eddd 7ac3 	vldr	s15, [sp, #780]	; 0x30c
 8014d06:	ed9d 7ad0 	vldr	s14, [sp, #832]	; 0x340
 8014d0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014d0c:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8014d10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d14:	edc3 7a00 	vstr	s15, [r3]
 8014d18:	f142 83bf 	bpl.w	801749a <m_kalman_3gyro.isra.6.constprop.36+0x33f2>
 8014d1c:	ed9d 7adc 	vldr	s14, [sp, #880]	; 0x370
 8014d20:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8014d24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d28:	f340 831a 	ble.w	8015360 <m_kalman_3gyro.isra.6.constprop.36+0x12b8>
 8014d2c:	200d      	movs	r0, #13
 8014d2e:	2402      	movs	r4, #2
 8014d30:	2101      	movs	r1, #1
 8014d32:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
 8014d36:	180b      	adds	r3, r1, r0
 8014d38:	085b      	lsrs	r3, r3, #1
 8014d3a:	199a      	adds	r2, r3, r6
 8014d3c:	f50d 65c6 	add.w	r5, sp, #1584	; 0x630
 8014d40:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 8014d44:	f5a5 753c 	sub.w	r5, r5, #752	; 0x2f0
 8014d48:	e00e      	b.n	8014d68 <m_kalman_3gyro.isra.6.constprop.36+0xcc0>
 8014d4a:	18ca      	adds	r2, r1, r3
 8014d4c:	4618      	mov	r0, r3
 8014d4e:	429c      	cmp	r4, r3
 8014d50:	ea4f 0352 	mov.w	r3, r2, lsr #1
 8014d54:	eb03 0206 	add.w	r2, r3, r6
 8014d58:	f50d 65c6 	add.w	r5, sp, #1584	; 0x630
 8014d5c:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 8014d60:	f5a5 753c 	sub.w	r5, r5, #752	; 0x2f0
 8014d64:	f083 810b 	bcs.w	8017f7e <m_kalman_3gyro.isra.6.constprop.36+0x3ed6>
 8014d68:	ed95 7a00 	vldr	s14, [r5]
 8014d6c:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8014d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d74:	dbe9      	blt.n	8014d4a <m_kalman_3gyro.isra.6.constprop.36+0xca2>
 8014d76:	1c5c      	adds	r4, r3, #1
 8014d78:	42a0      	cmp	r0, r4
 8014d7a:	4619      	mov	r1, r3
 8014d7c:	d8db      	bhi.n	8014d36 <m_kalman_3gyro.isra.6.constprop.36+0xc8e>
 8014d7e:	0092      	lsls	r2, r2, #2
 8014d80:	009b      	lsls	r3, r3, #2
 8014d82:	a9d0      	add	r1, sp, #832	; 0x340
 8014d84:	1888      	adds	r0, r1, r2
 8014d86:	4419      	add	r1, r3
 8014d88:	edd0 6a00 	vldr	s13, [r0]
 8014d8c:	ed91 7a00 	vldr	s14, [r1]
 8014d90:	ee78 5a66 	vsub.f32	s11, s16, s13
 8014d94:	ee37 7a66 	vsub.f32	s14, s14, s13
 8014d98:	a9dd      	add	r1, sp, #884	; 0x374
 8014d9a:	ee85 6a87 	vdiv.f32	s12, s11, s14
 8014d9e:	440a      	add	r2, r1
 8014da0:	440b      	add	r3, r1
 8014da2:	ed92 7a00 	vldr	s14, [r2]
 8014da6:	edd3 6a00 	vldr	s13, [r3]
 8014daa:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8014dae:	eea6 7a26 	vfma.f32	s14, s12, s13
 8014db2:	e2d7      	b.n	8015364 <m_kalman_3gyro.isra.6.constprop.36+0x12bc>
 8014db4:	45a9      	cmp	r9, r5
 8014db6:	eba9 0205 	sub.w	r2, r9, r5
 8014dba:	eb03 0004 	add.w	r0, r3, r4
 8014dbe:	eb0b 010c 	add.w	r1, fp, ip
 8014dc2:	f77f ae51 	ble.w	8014a68 <m_kalman_3gyro.isra.6.constprop.36+0x9c0>
 8014dc6:	444c      	add	r4, r9
 8014dc8:	1b64      	subs	r4, r4, r5
 8014dca:	f005 fc19 	bl	801a600 <memcpy>
 8014dce:	464d      	mov	r5, r9
 8014dd0:	e64a      	b.n	8014a68 <m_kalman_3gyro.isra.6.constprop.36+0x9c0>
 8014dd2:	464d      	mov	r5, r9
 8014dd4:	e648      	b.n	8014a68 <m_kalman_3gyro.isra.6.constprop.36+0x9c0>
 8014dd6:	eddd 6a36 	vldr	s13, [sp, #216]	; 0xd8
 8014dda:	eef4 7a66 	vcmp.f32	s15, s13
 8014dde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014de2:	f43f aea2 	beq.w	8014b2a <m_kalman_3gyro.isra.6.constprop.36+0xa82>
 8014de6:	ed9d 6a37 	vldr	s12, [sp, #220]	; 0xdc
 8014dea:	eef4 7a46 	vcmp.f32	s15, s12
 8014dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014df2:	f43f ae9a 	beq.w	8014b2a <m_kalman_3gyro.isra.6.constprop.36+0xa82>
 8014df6:	eeb4 7a66 	vcmp.f32	s14, s13
 8014dfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014dfe:	f43f ae94 	beq.w	8014b2a <m_kalman_3gyro.isra.6.constprop.36+0xa82>
 8014e02:	eeb4 7a46 	vcmp.f32	s14, s12
 8014e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e0a:	f43f ae8e 	beq.w	8014b2a <m_kalman_3gyro.isra.6.constprop.36+0xa82>
 8014e0e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014e12:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8014e16:	eee7 7a26 	vfma.f32	s15, s14, s13
 8014e1a:	e68c      	b.n	8014b36 <m_kalman_3gyro.isra.6.constprop.36+0xa8e>
 8014e1c:	3ff00000 	.word	0x3ff00000
 8014e20:	f50d 60d7 	add.w	r0, sp, #1720	; 0x6b8
 8014e24:	ed90 7b00 	vldr	d7, [r0]
 8014e28:	ae47      	add	r6, sp, #284	; 0x11c
 8014e2a:	2101      	movs	r1, #1
 8014e2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014e30:	2500      	movs	r5, #0
 8014e32:	ed8a 7b0e 	vstr	d7, [sl, #56]	; 0x38
 8014e36:	f8ca 4044 	str.w	r4, [sl, #68]	; 0x44
 8014e3a:	f88a 18cd 	strb.w	r1, [sl, #2253]	; 0x8cd
 8014e3e:	f8aa 2030 	strh.w	r2, [sl, #48]	; 0x30
 8014e42:	4621      	mov	r1, r4
 8014e44:	e9ca 4412 	strd	r4, r4, [sl, #72]	; 0x48
 8014e48:	e9ca 4415 	strd	r4, r4, [sl, #84]	; 0x54
 8014e4c:	f8ca 405c 	str.w	r4, [sl, #92]	; 0x5c
 8014e50:	2230      	movs	r2, #48	; 0x30
 8014e52:	edca ca18 	vstr	s25, [sl, #96]	; 0x60
 8014e56:	edca ca14 	vstr	s25, [sl, #80]	; 0x50
 8014e5a:	edca ca10 	vstr	s25, [sl, #64]	; 0x40
 8014e5e:	f10a 0064 	add.w	r0, sl, #100	; 0x64
 8014e62:	6035      	str	r5, [r6, #0]
 8014e64:	6075      	str	r5, [r6, #4]
 8014e66:	60b5      	str	r5, [r6, #8]
 8014e68:	60f5      	str	r5, [r6, #12]
 8014e6a:	9609      	str	r6, [sp, #36]	; 0x24
 8014e6c:	f005 fbd3 	bl	801a616 <memset>
 8014e70:	4bae      	ldr	r3, [pc, #696]	; (801512c <m_kalman_3gyro.isra.6.constprop.36+0x1084>)
 8014e72:	f8ca 5094 	str.w	r5, [sl, #148]	; 0x94
 8014e76:	4621      	mov	r1, r4
 8014e78:	f8ca 5098 	str.w	r5, [sl, #152]	; 0x98
 8014e7c:	f8ca 509c 	str.w	r5, [sl, #156]	; 0x9c
 8014e80:	f8ca 30ac 	str.w	r3, [sl, #172]	; 0xac
 8014e84:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8014e88:	edca ca2c 	vstr	s25, [sl, #176]	; 0xb0
 8014e8c:	edca ca2d 	vstr	s25, [sl, #180]	; 0xb4
 8014e90:	f10a 00b8 	add.w	r0, sl, #184	; 0xb8
 8014e94:	f005 fbbf 	bl	801a616 <memset>
 8014e98:	2400      	movs	r4, #0
 8014e9a:	4ba5      	ldr	r3, [pc, #660]	; (8015130 <m_kalman_3gyro.isra.6.constprop.36+0x1088>)
 8014e9c:	f8ca 30b8 	str.w	r3, [sl, #184]	; 0xb8
 8014ea0:	f04f 5b7e 	mov.w	fp, #1065353216	; 0x3f800000
 8014ea4:	f04f 3001 	mov.w	r0, #16843009	; 0x1010101
 8014ea8:	4621      	mov	r1, r4
 8014eaa:	f8ca 30e0 	str.w	r3, [sl, #224]	; 0xe0
 8014eae:	f8ca 3108 	str.w	r3, [sl, #264]	; 0x108
 8014eb2:	f8ca 3130 	str.w	r3, [sl, #304]	; 0x130
 8014eb6:	f8ca 3158 	str.w	r3, [sl, #344]	; 0x158
 8014eba:	f8ca 3180 	str.w	r3, [sl, #384]	; 0x180
 8014ebe:	f8ca 31a8 	str.w	r3, [sl, #424]	; 0x1a8
 8014ec2:	f8ca 31d0 	str.w	r3, [sl, #464]	; 0x1d0
 8014ec6:	f8ca 31f8 	str.w	r3, [sl, #504]	; 0x1f8
 8014eca:	f8ca 01fc 	str.w	r0, [sl, #508]	; 0x1fc
 8014ece:	f8ca 0200 	str.w	r0, [sl, #512]	; 0x200
 8014ed2:	f8ca 0204 	str.w	r0, [sl, #516]	; 0x204
 8014ed6:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8014eda:	f8ca 4218 	str.w	r4, [sl, #536]	; 0x218
 8014ede:	f8ca 421c 	str.w	r4, [sl, #540]	; 0x21c
 8014ee2:	f8ca 4220 	str.w	r4, [sl, #544]	; 0x220
 8014ee6:	f8ca 4228 	str.w	r4, [sl, #552]	; 0x228
 8014eea:	f8ca 422c 	str.w	r4, [sl, #556]	; 0x22c
 8014eee:	f8ca 4230 	str.w	r4, [sl, #560]	; 0x230
 8014ef2:	f8ca 423c 	str.w	r4, [sl, #572]	; 0x23c
 8014ef6:	f8ca b234 	str.w	fp, [sl, #564]	; 0x234
 8014efa:	f8ca b224 	str.w	fp, [sl, #548]	; 0x224
 8014efe:	f8ca b214 	str.w	fp, [sl, #532]	; 0x214
 8014f02:	f8ca 4240 	str.w	r4, [sl, #576]	; 0x240
 8014f06:	f8ca 4244 	str.w	r4, [sl, #580]	; 0x244
 8014f0a:	f8ca 424c 	str.w	r4, [sl, #588]	; 0x24c
 8014f0e:	f8ca 4250 	str.w	r4, [sl, #592]	; 0x250
 8014f12:	f8ca 4254 	str.w	r4, [sl, #596]	; 0x254
 8014f16:	f8ca b258 	str.w	fp, [sl, #600]	; 0x258
 8014f1a:	f8ca b248 	str.w	fp, [sl, #584]	; 0x248
 8014f1e:	f8ca b238 	str.w	fp, [sl, #568]	; 0x238
 8014f22:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014f24:	f005 fb77 	bl	801a616 <memset>
 8014f28:	f20a 4e24 	addw	lr, sl, #1060	; 0x424
 8014f2c:	f8cd e070 	str.w	lr, [sp, #112]	; 0x70
 8014f30:	f50a 6e85 	add.w	lr, sl, #1064	; 0x428
 8014f34:	f8cd e074 	str.w	lr, [sp, #116]	; 0x74
 8014f38:	f20a 4e2c 	addw	lr, sl, #1068	; 0x42c
 8014f3c:	f8cd e078 	str.w	lr, [sp, #120]	; 0x78
 8014f40:	f50a 6e86 	add.w	lr, sl, #1072	; 0x430
 8014f44:	f8cd e05c 	str.w	lr, [sp, #92]	; 0x5c
 8014f48:	f20a 4e34 	addw	lr, sl, #1076	; 0x434
 8014f4c:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
 8014f50:	f50a 6e87 	add.w	lr, sl, #1080	; 0x438
 8014f54:	f8cd e07c 	str.w	lr, [sp, #124]	; 0x7c
 8014f58:	f20a 4e3c 	addw	lr, sl, #1084	; 0x43c
 8014f5c:	f50a 7375 	add.w	r3, sl, #980	; 0x3d4
 8014f60:	f8cd e044 	str.w	lr, [sp, #68]	; 0x44
 8014f64:	f50a 6e88 	add.w	lr, sl, #1088	; 0x440
 8014f68:	9312      	str	r3, [sp, #72]	; 0x48
 8014f6a:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 8014f6e:	f20a 4e44 	addw	lr, sl, #1092	; 0x444
 8014f72:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8014f74:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 8014f78:	f20a 4004 	addw	r0, sl, #1028	; 0x404
 8014f7c:	f50a 6582 	add.w	r5, sl, #1040	; 0x410
 8014f80:	f50a 6e89 	add.w	lr, sl, #1096	; 0x448
 8014f84:	2600      	movs	r6, #0
 8014f86:	9013      	str	r0, [sp, #76]	; 0x4c
 8014f88:	9514      	str	r5, [sp, #80]	; 0x50
 8014f8a:	f20a 4014 	addw	r0, sl, #1044	; 0x414
 8014f8e:	f50a 6583 	add.w	r5, sl, #1048	; 0x418
 8014f92:	f20a 4c1c 	addw	ip, sl, #1052	; 0x41c
 8014f96:	f8cd e060 	str.w	lr, [sp, #96]	; 0x60
 8014f9a:	f20a 4e4c 	addw	lr, sl, #1100	; 0x44c
 8014f9e:	f8ca 43d4 	str.w	r4, [sl, #980]	; 0x3d4
 8014fa2:	f8ca 63c4 	str.w	r6, [sl, #964]	; 0x3c4
 8014fa6:	f8ca 63c8 	str.w	r6, [sl, #968]	; 0x3c8
 8014faa:	f8ca 63cc 	str.w	r6, [sl, #972]	; 0x3cc
 8014fae:	f8ca 63d0 	str.w	r6, [sl, #976]	; 0x3d0
 8014fb2:	9015      	str	r0, [sp, #84]	; 0x54
 8014fb4:	607c      	str	r4, [r7, #4]
 8014fb6:	60bc      	str	r4, [r7, #8]
 8014fb8:	9516      	str	r5, [sp, #88]	; 0x58
 8014fba:	f8cd c06c 	str.w	ip, [sp, #108]	; 0x6c
 8014fbe:	f8cd e03c 	str.w	lr, [sp, #60]	; 0x3c
 8014fc2:	f8ca 43e0 	str.w	r4, [sl, #992]	; 0x3e0
 8014fc6:	f8ca 43e4 	str.w	r4, [sl, #996]	; 0x3e4
 8014fca:	f8ca 43e8 	str.w	r4, [sl, #1000]	; 0x3e8
 8014fce:	f8ca 43ec 	str.w	r4, [sl, #1004]	; 0x3ec
 8014fd2:	f8ca 43f0 	str.w	r4, [sl, #1008]	; 0x3f0
 8014fd6:	f8ca 43f4 	str.w	r4, [sl, #1012]	; 0x3f4
 8014fda:	f8ca 43f8 	str.w	r4, [sl, #1016]	; 0x3f8
 8014fde:	f8ca 43fc 	str.w	r4, [sl, #1020]	; 0x3fc
 8014fe2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014fe4:	f8ca 4400 	str.w	r4, [sl, #1024]	; 0x400
 8014fe8:	f50a 6881 	add.w	r8, sl, #1032	; 0x408
 8014fec:	601e      	str	r6, [r3, #0]
 8014fee:	f20a 490c 	addw	r9, sl, #1036	; 0x40c
 8014ff2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014ff4:	f8c8 6000 	str.w	r6, [r8]
 8014ff8:	f8c9 6000 	str.w	r6, [r9]
 8014ffc:	601e      	str	r6, [r3, #0]
 8014ffe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015000:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 8015002:	601e      	str	r6, [r3, #0]
 8015004:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015006:	601e      	str	r6, [r3, #0]
 8015008:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801500a:	f50a 6084 	add.w	r0, sl, #1056	; 0x420
 801500e:	601e      	str	r6, [r3, #0]
 8015010:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8015012:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
 8015016:	f8c0 c000 	str.w	ip, [r0]
 801501a:	601e      	str	r6, [r3, #0]
 801501c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801501e:	603e      	str	r6, [r7, #0]
 8015020:	601e      	str	r6, [r3, #0]
 8015022:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015024:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8015026:	601e      	str	r6, [r3, #0]
 8015028:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801502a:	603e      	str	r6, [r7, #0]
 801502c:	601e      	str	r6, [r3, #0]
 801502e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015030:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8015032:	f8c3 b000 	str.w	fp, [r3]
 8015036:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015038:	ed87 8a00 	vstr	s16, [r7]
 801503c:	601e      	str	r6, [r3, #0]
 801503e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8015040:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8015042:	f8c3 b000 	str.w	fp, [r3]
 8015046:	2532      	movs	r5, #50	; 0x32
 8015048:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801504a:	603e      	str	r6, [r7, #0]
 801504c:	f8ca 4450 	str.w	r4, [sl, #1104]	; 0x450
 8015050:	f8ca 4454 	str.w	r4, [sl, #1108]	; 0x454
 8015054:	f8ca 445c 	str.w	r4, [sl, #1116]	; 0x45c
 8015058:	f8ca 5458 	str.w	r5, [sl, #1112]	; 0x458
 801505c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015060:	ab74      	add	r3, sp, #464	; 0x1d0
 8015062:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8015066:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015068:	f8d3 b000 	ldr.w	fp, [r3]
 801506c:	f8d3 e004 	ldr.w	lr, [r3, #4]
 8015070:	f8d3 c008 	ldr.w	ip, [r3, #8]
 8015074:	ca07      	ldmia	r2, {r0, r1, r2}
 8015076:	ac77      	add	r4, sp, #476	; 0x1dc
 8015078:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801507c:	9a08      	ldr	r2, [sp, #32]
 801507e:	ca07      	ldmia	r2, {r0, r1, r2}
 8015080:	ac7a      	add	r4, sp, #488	; 0x1e8
 8015082:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8015086:	68de      	ldr	r6, [r3, #12]
 8015088:	9f19      	ldr	r7, [sp, #100]	; 0x64
 801508a:	691d      	ldr	r5, [r3, #16]
 801508c:	695c      	ldr	r4, [r3, #20]
 801508e:	6998      	ldr	r0, [r3, #24]
 8015090:	69d9      	ldr	r1, [r3, #28]
 8015092:	6a1a      	ldr	r2, [r3, #32]
 8015094:	f8cd 9010 	str.w	r9, [sp, #16]
 8015098:	463b      	mov	r3, r7
 801509a:	46c1      	mov	r9, r8
 801509c:	f507 6787 	add.w	r7, r7, #1080	; 0x438
 80150a0:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 80150a4:	9735      	str	r7, [sp, #212]	; 0xd4
 80150a6:	f8c3 b000 	str.w	fp, [r3]
 80150aa:	f8c3 e004 	str.w	lr, [r3, #4]
 80150ae:	f8c3 c008 	str.w	ip, [r3, #8]
 80150b2:	60de      	str	r6, [r3, #12]
 80150b4:	611d      	str	r5, [r3, #16]
 80150b6:	615c      	str	r4, [r3, #20]
 80150b8:	6198      	str	r0, [r3, #24]
 80150ba:	61d9      	str	r1, [r3, #28]
 80150bc:	621a      	str	r2, [r3, #32]
 80150be:	3324      	adds	r3, #36	; 0x24
 80150c0:	42bb      	cmp	r3, r7
 80150c2:	d1f0      	bne.n	80150a6 <m_kalman_3gyro.isra.6.constprop.36+0xffe>
 80150c4:	f8dd 36c0 	ldr.w	r3, [sp, #1728]	; 0x6c0
 80150c8:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80150cc:	681a      	ldr	r2, [r3, #0]
 80150ce:	ed9d ca40 	vldr	s24, [sp, #256]	; 0x100
 80150d2:	eddd ba3f 	vldr	s23, [sp, #252]	; 0xfc
 80150d6:	eddd 9a3e 	vldr	s19, [sp, #248]	; 0xf8
 80150da:	ed9d ba41 	vldr	s22, [sp, #260]	; 0x104
 80150de:	eddd aa42 	vldr	s21, [sp, #264]	; 0x108
 80150e2:	ed9d aa43 	vldr	s20, [sp, #268]	; 0x10c
 80150e6:	f60a 0398 	addw	r3, sl, #2200	; 0x898
 80150ea:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80150ee:	601a      	str	r2, [r3, #0]
 80150f0:	f8dd 36c0 	ldr.w	r3, [sp, #1728]	; 0x6c0
 80150f4:	685a      	ldr	r2, [r3, #4]
 80150f6:	f60a 039c 	addw	r3, sl, #2204	; 0x89c
 80150fa:	46c8      	mov	r8, r9
 80150fc:	601a      	str	r2, [r3, #0]
 80150fe:	f8dd 36c0 	ldr.w	r3, [sp, #1728]	; 0x6c0
 8015102:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8015106:	6898      	ldr	r0, [r3, #8]
 8015108:	f50a 620a 	add.w	r2, sl, #2208	; 0x8a0
 801510c:	2300      	movs	r3, #0
 801510e:	6010      	str	r0, [r2, #0]
 8015110:	f88a 38a4 	strb.w	r3, [sl, #2212]	; 0x8a4
 8015114:	f8ca 38a6 	str.w	r3, [sl, #2214]	; 0x8a6
 8015118:	f88a 38ad 	strb.w	r3, [sl, #2221]	; 0x8ad
 801511c:	f88a 38ae 	strb.w	r3, [sl, #2222]	; 0x8ae
 8015120:	f8ca 38b0 	str.w	r3, [sl, #2224]	; 0x8b0
 8015124:	f8aa 18aa 	strh.w	r1, [sl, #2218]	; 0x8aa
 8015128:	f7ff b8f8 	b.w	801431c <m_kalman_3gyro.isra.6.constprop.36+0x274>
 801512c:	3f666666 	.word	0x3f666666
 8015130:	40a00000 	.word	0x40a00000
 8015134:	ed9a 7b02 	vldr	d7, [sl, #8]
 8015138:	f50a 620c 	add.w	r2, sl, #2240	; 0x8c0
 801513c:	4614      	mov	r4, r2
 801513e:	2301      	movs	r3, #1
 8015140:	f60a 06b8 	addw	r6, sl, #2232	; 0x8b8
 8015144:	f60a 07bc 	addw	r7, sl, #2236	; 0x8bc
 8015148:	e9da 0104 	ldrd	r0, r1, [sl, #16]
 801514c:	f88a 38ce 	strb.w	r3, [sl, #2254]	; 0x8ce
 8015150:	9201      	str	r2, [sp, #4]
 8015152:	ed86 8a00 	vstr	s16, [r6]
 8015156:	e9da 2306 	ldrd	r2, r3, [sl, #24]
 801515a:	ed87 8a00 	vstr	s16, [r7]
 801515e:	ed84 8a00 	vstr	s16, [r4]
 8015162:	ed8d 7b06 	vstr	d7, [sp, #24]
 8015166:	f60a 09c4 	addw	r9, sl, #2244	; 0x8c4
 801516a:	f7eb f897 	bl	800029c <__adddf3>
 801516e:	f60a 03c8 	addw	r3, sl, #2248	; 0x8c8
 8015172:	461c      	mov	r4, r3
 8015174:	9304      	str	r3, [sp, #16]
 8015176:	ed89 8a00 	vstr	s16, [r9]
 801517a:	e9da 2308 	ldrd	r2, r3, [sl, #32]
 801517e:	f7eb f88d 	bl	800029c <__adddf3>
 8015182:	e9da 230a 	ldrd	r2, r3, [sl, #40]	; 0x28
 8015186:	ed84 8a00 	vstr	s16, [r4]
 801518a:	f7eb f887 	bl	800029c <__adddf3>
 801518e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015192:	f7eb f883 	bl	800029c <__adddf3>
 8015196:	4602      	mov	r2, r0
 8015198:	460b      	mov	r3, r1
 801519a:	2000      	movs	r0, #0
 801519c:	4973      	ldr	r1, [pc, #460]	; (801536c <m_kalman_3gyro.isra.6.constprop.36+0x12c4>)
 801519e:	f7eb fb5d 	bl	800085c <__aeabi_ddiv>
 80151a2:	4604      	mov	r4, r0
 80151a4:	460d      	mov	r5, r1
 80151a6:	4602      	mov	r2, r0
 80151a8:	460b      	mov	r3, r1
 80151aa:	e9da 0102 	ldrd	r0, r1, [sl, #8]
 80151ae:	f7eb fa2b 	bl	8000608 <__aeabi_dmul>
 80151b2:	4622      	mov	r2, r4
 80151b4:	462b      	mov	r3, r5
 80151b6:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80151ba:	e9da 0104 	ldrd	r0, r1, [sl, #16]
 80151be:	f7eb fa23 	bl	8000608 <__aeabi_dmul>
 80151c2:	4622      	mov	r2, r4
 80151c4:	462b      	mov	r3, r5
 80151c6:	e9ca 0104 	strd	r0, r1, [sl, #16]
 80151ca:	e9da 0106 	ldrd	r0, r1, [sl, #24]
 80151ce:	f7eb fa1b 	bl	8000608 <__aeabi_dmul>
 80151d2:	4622      	mov	r2, r4
 80151d4:	462b      	mov	r3, r5
 80151d6:	e9ca 0106 	strd	r0, r1, [sl, #24]
 80151da:	e9da 0108 	ldrd	r0, r1, [sl, #32]
 80151de:	f7eb fa13 	bl	8000608 <__aeabi_dmul>
 80151e2:	4622      	mov	r2, r4
 80151e4:	e9ca 0108 	strd	r0, r1, [sl, #32]
 80151e8:	462b      	mov	r3, r5
 80151ea:	e9da 010a 	ldrd	r0, r1, [sl, #40]	; 0x28
 80151ee:	f7eb fa0b 	bl	8000608 <__aeabi_dmul>
 80151f2:	9c01      	ldr	r4, [sp, #4]
 80151f4:	e9ca 010a 	strd	r0, r1, [sl, #40]	; 0x28
 80151f8:	e50b      	b.n	8014c12 <m_kalman_3gyro.isra.6.constprop.36+0xb6a>
 80151fa:	eddd 5ad1 	vldr	s11, [sp, #836]	; 0x344
 80151fe:	ed9d 6ab8 	vldr	s12, [sp, #736]	; 0x2e0
 8015202:	eddd 7ad2 	vldr	s15, [sp, #840]	; 0x348
 8015206:	eddd 4ab9 	vldr	s9, [sp, #740]	; 0x2e4
 801520a:	ed9d 5ad3 	vldr	s10, [sp, #844]	; 0x34c
 801520e:	eddd 6ab6 	vldr	s13, [sp, #728]	; 0x2d8
 8015212:	ed9d 7ad0 	vldr	s14, [sp, #832]	; 0x340
 8015216:	ed9d 4ab7 	vldr	s8, [sp, #732]	; 0x2dc
 801521a:	ee65 5aa8 	vmul.f32	s11, s11, s17
 801521e:	ee26 6a28 	vmul.f32	s12, s12, s17
 8015222:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8015226:	edcd 5ad1 	vstr	s11, [sp, #836]	; 0x344
 801522a:	ed8d 6ab8 	vstr	s12, [sp, #736]	; 0x2e0
 801522e:	eddd 5aba 	vldr	s11, [sp, #744]	; 0x2e8
 8015232:	ed9d 6ad4 	vldr	s12, [sp, #848]	; 0x350
 8015236:	edcd 7ad2 	vstr	s15, [sp, #840]	; 0x348
 801523a:	eddd 7abb 	vldr	s15, [sp, #748]	; 0x2ec
 801523e:	ee64 4aa8 	vmul.f32	s9, s9, s17
 8015242:	ee25 5a28 	vmul.f32	s10, s10, s17
 8015246:	ee65 5aa8 	vmul.f32	s11, s11, s17
 801524a:	ee26 6a28 	vmul.f32	s12, s12, s17
 801524e:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8015252:	edcd 4ab9 	vstr	s9, [sp, #740]	; 0x2e4
 8015256:	ed8d 5ad3 	vstr	s10, [sp, #844]	; 0x34c
 801525a:	eddd 4ad5 	vldr	s9, [sp, #852]	; 0x354
 801525e:	ed9d 5abc 	vldr	s10, [sp, #752]	; 0x2f0
 8015262:	edcd 5aba 	vstr	s11, [sp, #744]	; 0x2e8
 8015266:	ed8d 6ad4 	vstr	s12, [sp, #848]	; 0x350
 801526a:	eddd 5ad6 	vldr	s11, [sp, #856]	; 0x358
 801526e:	ed9d 6abd 	vldr	s12, [sp, #756]	; 0x2f4
 8015272:	edcd 7abb 	vstr	s15, [sp, #748]	; 0x2ec
 8015276:	eddd 7ad7 	vldr	s15, [sp, #860]	; 0x35c
 801527a:	ee68 6aa6 	vmul.f32	s13, s17, s13
 801527e:	ee24 4a28 	vmul.f32	s8, s8, s17
 8015282:	ee64 4aa8 	vmul.f32	s9, s9, s17
 8015286:	ee25 5a28 	vmul.f32	s10, s10, s17
 801528a:	ee65 5aa8 	vmul.f32	s11, s11, s17
 801528e:	ee26 6a28 	vmul.f32	s12, s12, s17
 8015292:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8015296:	ee28 7a87 	vmul.f32	s14, s17, s14
 801529a:	edcd 4ad5 	vstr	s9, [sp, #852]	; 0x354
 801529e:	ed8d 5abc 	vstr	s10, [sp, #752]	; 0x2f0
 80152a2:	edcd 5ad6 	vstr	s11, [sp, #856]	; 0x358
 80152a6:	ed8d 6abd 	vstr	s12, [sp, #756]	; 0x2f4
 80152aa:	edcd 7ad7 	vstr	s15, [sp, #860]	; 0x35c
 80152ae:	edcd 6ab6 	vstr	s13, [sp, #728]	; 0x2d8
 80152b2:	ed8d 7ad0 	vstr	s14, [sp, #832]	; 0x340
 80152b6:	ed8d 4ab7 	vstr	s8, [sp, #732]	; 0x2dc
 80152ba:	ed9d 4abe 	vldr	s8, [sp, #760]	; 0x2f8
 80152be:	eddd 5ad8 	vldr	s11, [sp, #864]	; 0x360
 80152c2:	ed9d 6abf 	vldr	s12, [sp, #764]	; 0x2fc
 80152c6:	eddd 7ad9 	vldr	s15, [sp, #868]	; 0x364
 80152ca:	eddd 4ac0 	vldr	s9, [sp, #768]	; 0x300
 80152ce:	ed9d 5ada 	vldr	s10, [sp, #872]	; 0x368
 80152d2:	ee65 5aa8 	vmul.f32	s11, s11, s17
 80152d6:	ee26 6a28 	vmul.f32	s12, s12, s17
 80152da:	ee67 7aa8 	vmul.f32	s15, s15, s17
 80152de:	ee64 4aa8 	vmul.f32	s9, s9, s17
 80152e2:	edcd 5ad8 	vstr	s11, [sp, #864]	; 0x360
 80152e6:	ed8d 6abf 	vstr	s12, [sp, #764]	; 0x2fc
 80152ea:	eddd 5ac1 	vldr	s11, [sp, #772]	; 0x304
 80152ee:	ed9d 6adb 	vldr	s12, [sp, #876]	; 0x36c
 80152f2:	edcd 7ad9 	vstr	s15, [sp, #868]	; 0x364
 80152f6:	edcd 4ac0 	vstr	s9, [sp, #768]	; 0x300
 80152fa:	eddd 7ac2 	vldr	s15, [sp, #776]	; 0x308
 80152fe:	eddd 4adc 	vldr	s9, [sp, #880]	; 0x370
 8015302:	ee24 4a28 	vmul.f32	s8, s8, s17
 8015306:	ee25 5a28 	vmul.f32	s10, s10, s17
 801530a:	ee65 5aa8 	vmul.f32	s11, s11, s17
 801530e:	ee26 6a28 	vmul.f32	s12, s12, s17
 8015312:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8015316:	eeb4 8ae6 	vcmpe.f32	s16, s13
 801531a:	ee68 8aa4 	vmul.f32	s17, s17, s9
 801531e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015322:	ed8d 4abe 	vstr	s8, [sp, #760]	; 0x2f8
 8015326:	ed8d 5ada 	vstr	s10, [sp, #872]	; 0x368
 801532a:	edcd 5ac1 	vstr	s11, [sp, #772]	; 0x304
 801532e:	ed8d 6adb 	vstr	s12, [sp, #876]	; 0x36c
 8015332:	edcd 7ac2 	vstr	s15, [sp, #776]	; 0x308
 8015336:	edcd 8adc 	vstr	s17, [sp, #880]	; 0x370
 801533a:	f302 8098 	bgt.w	801746e <m_kalman_3gyro.isra.6.constprop.36+0x33c6>
 801533e:	eddd 7ac3 	vldr	s15, [sp, #780]	; 0x30c
 8015342:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015344:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8015348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801534c:	edc3 7a00 	vstr	s15, [r3]
 8015350:	f342 80a3 	ble.w	801749a <m_kalman_3gyro.isra.6.constprop.36+0x33f2>
 8015354:	eef4 8ac8 	vcmpe.f32	s17, s16
 8015358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801535c:	f302 8471 	bgt.w	8017c42 <m_kalman_3gyro.isra.6.constprop.36+0x3b9a>
 8015360:	ed9d 7ae9 	vldr	s14, [sp, #932]	; 0x3a4
 8015364:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015366:	ed83 7a00 	vstr	s14, [r3]
 801536a:	e009      	b.n	8015380 <m_kalman_3gyro.isra.6.constprop.36+0x12d8>
 801536c:	3ff00000 	.word	0x3ff00000
 8015370:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015372:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015376:	edc3 7a00 	vstr	s15, [r3]
 801537a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801537c:	edc3 7a00 	vstr	s15, [r3]
 8015380:	4bd1      	ldr	r3, [pc, #836]	; (80156c8 <m_kalman_3gyro.isra.6.constprop.36+0x1620>)
 8015382:	ed9a 7a2d 	vldr	s14, [sl, #180]	; 0xb4
 8015386:	edd3 8a00 	vldr	s17, [r3]
 801538a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801538c:	f8df 934c 	ldr.w	r9, [pc, #844]	; 80156dc <m_kalman_3gyro.isra.6.constprop.36+0x1634>
 8015390:	edc3 7a00 	vstr	s15, [r3]
 8015394:	ee78 7ac7 	vsub.f32	s15, s17, s14
 8015398:	eef0 7ae7 	vabs.f32	s15, s15
 801539c:	ee17 0a90 	vmov	r0, s15
 80153a0:	f7eb f8da 	bl	8000558 <__aeabi_f2d>
 80153a4:	f006 f8e8 	bl	801b578 <floor>
 80153a8:	f7eb fbde 	bl	8000b68 <__aeabi_d2iz>
 80153ac:	f8dd 36d4 	ldr.w	r3, [sp, #1748]	; 0x6d4
 80153b0:	7018      	strb	r0, [r3, #0]
 80153b2:	ed9a 7a2d 	vldr	s14, [sl, #180]	; 0xb4
 80153b6:	edda 7a2b 	vldr	s15, [sl, #172]	; 0xac
 80153ba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80153bc:	ee38 7ac7 	vsub.f32	s14, s17, s14
 80153c0:	ee7d 7a67 	vsub.f32	s15, s26, s15
 80153c4:	eeb0 7ac7 	vabs.f32	s14, s14
 80153c8:	eef0 7ae7 	vabs.f32	s15, s15
 80153cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80153d0:	ed89 7a00 	vstr	s14, [r9]
 80153d4:	edc3 7a00 	vstr	s15, [r3]
 80153d8:	ee17 0a90 	vmov	r0, s15
 80153dc:	edcd 7a01 	vstr	s15, [sp, #4]
 80153e0:	f7eb f8ba 	bl	8000558 <__aeabi_f2d>
 80153e4:	a3b6      	add	r3, pc, #728	; (adr r3, 80156c0 <m_kalman_3gyro.isra.6.constprop.36+0x1618>)
 80153e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153ea:	f7eb fb9d 	bl	8000b28 <__aeabi_dcmpgt>
 80153ee:	2800      	cmp	r0, #0
 80153f0:	f001 82ae 	beq.w	8016950 <m_kalman_3gyro.isra.6.constprop.36+0x28a8>
 80153f4:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 80156cc <m_kalman_3gyro.isra.6.constprop.36+0x1624>
 80153f8:	eddd 7a01 	vldr	s15, [sp, #4]
 80153fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015400:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8015404:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015408:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 801540c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015414:	f301 86af 	bgt.w	8017176 <m_kalman_3gyro.isra.6.constprop.36+0x30ce>
 8015418:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801541c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015420:	ee17 0a90 	vmov	r0, s15
 8015424:	f7eb f898 	bl	8000558 <__aeabi_f2d>
 8015428:	4604      	mov	r4, r0
 801542a:	460d      	mov	r5, r1
 801542c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015430:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8015434:	eef0 7ae7 	vabs.f32	s15, s15
 8015438:	ee17 0a90 	vmov	r0, s15
 801543c:	f7eb f88c 	bl	8000558 <__aeabi_f2d>
 8015440:	2200      	movs	r2, #0
 8015442:	4ba3      	ldr	r3, [pc, #652]	; (80156d0 <m_kalman_3gyro.isra.6.constprop.36+0x1628>)
 8015444:	f7ea ff28 	bl	8000298 <__aeabi_dsub>
 8015448:	4622      	mov	r2, r4
 801544a:	462b      	mov	r3, r5
 801544c:	4606      	mov	r6, r0
 801544e:	460f      	mov	r7, r1
 8015450:	f7eb fb60 	bl	8000b14 <__aeabi_dcmpge>
 8015454:	b908      	cbnz	r0, 801545a <m_kalman_3gyro.isra.6.constprop.36+0x13b2>
 8015456:	4626      	mov	r6, r4
 8015458:	462f      	mov	r7, r5
 801545a:	4630      	mov	r0, r6
 801545c:	4639      	mov	r1, r7
 801545e:	f7eb fbab 	bl	8000bb8 <__aeabi_d2f>
 8015462:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015464:	6018      	str	r0, [r3, #0]
 8015466:	f89a 3031 	ldrb.w	r3, [sl, #49]	; 0x31
 801546a:	f10a 0040 	add.w	r0, sl, #64	; 0x40
 801546e:	9001      	str	r0, [sp, #4]
 8015470:	b17b      	cbz	r3, 8015492 <m_kalman_3gyro.isra.6.constprop.36+0x13ea>
 8015472:	f89a 3030 	ldrb.w	r3, [sl, #48]	; 0x30
 8015476:	b963      	cbnz	r3, 8015492 <m_kalman_3gyro.isra.6.constprop.36+0x13ea>
 8015478:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801547a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801547e:	ee6f 7aa7 	vmul.f32	s15, s31, s15
 8015482:	ed93 7a00 	vldr	s14, [r3]
 8015486:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801548a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801548e:	f101 879b 	bmi.w	80173c8 <m_kalman_3gyro.isra.6.constprop.36+0x3320>
 8015492:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015494:	edd3 7a00 	vldr	s15, [r3]
 8015498:	eef5 7a40 	vcmp.f32	s15, #0.0
 801549c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80154a0:	f04f 0400 	mov.w	r4, #0
 80154a4:	d10f      	bne.n	80154c6 <m_kalman_3gyro.isra.6.constprop.36+0x141e>
 80154a6:	edd3 7a01 	vldr	s15, [r3, #4]
 80154aa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80154ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80154b2:	4619      	mov	r1, r3
 80154b4:	d107      	bne.n	80154c6 <m_kalman_3gyro.isra.6.constprop.36+0x141e>
 80154b6:	edd3 7a02 	vldr	s15, [r3, #8]
 80154ba:	eef5 7a40 	vcmp.f32	s15, #0.0
 80154be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80154c2:	f001 872a 	beq.w	801731a <m_kalman_3gyro.isra.6.constprop.36+0x3272>
 80154c6:	f50d 61d6 	add.w	r1, sp, #1712	; 0x6b0
 80154ca:	2200      	movs	r2, #0
 80154cc:	2300      	movs	r3, #0
 80154ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80154d2:	f7eb fb01 	bl	8000ad8 <__aeabi_dcmpeq>
 80154d6:	2800      	cmp	r0, #0
 80154d8:	d144      	bne.n	8015564 <m_kalman_3gyro.isra.6.constprop.36+0x14bc>
 80154da:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80154dc:	ee7f faaf 	vadd.f32	s31, s31, s31
 80154e0:	edd3 7a00 	vldr	s15, [r3]
 80154e4:	eef4 7aef 	vcmpe.f32	s15, s31
 80154e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80154ec:	d53a      	bpl.n	8015564 <m_kalman_3gyro.isra.6.constprop.36+0x14bc>
 80154ee:	eddd 7a23 	vldr	s15, [sp, #140]	; 0x8c
 80154f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80154f4:	edca 7a10 	vstr	s15, [sl, #64]	; 0x40
 80154f8:	eddd 7a24 	vldr	s15, [sp, #144]	; 0x90
 80154fc:	ed8a ba12 	vstr	s22, [sl, #72]	; 0x48
 8015500:	edca 7a13 	vstr	s15, [sl, #76]	; 0x4c
 8015504:	eddd 7a25 	vldr	s15, [sp, #148]	; 0x94
 8015508:	edca aa15 	vstr	s21, [sl, #84]	; 0x54
 801550c:	ed8a aa18 	vstr	s20, [sl, #96]	; 0x60
 8015510:	ed8a ca11 	vstr	s24, [sl, #68]	; 0x44
 8015514:	edca ba14 	vstr	s23, [sl, #80]	; 0x50
 8015518:	edca 9a17 	vstr	s19, [sl, #92]	; 0x5c
 801551c:	edca 7a16 	vstr	s15, [sl, #88]	; 0x58
 8015520:	9801      	ldr	r0, [sp, #4]
 8015522:	f7fa fc61 	bl	800fde8 <m_dcm2q_eml>
 8015526:	f8dd 16dc 	ldr.w	r1, [sp, #1756]	; 0x6dc
 801552a:	2300      	movs	r3, #0
 801552c:	2201      	movs	r2, #1
 801552e:	700a      	strb	r2, [r1, #0]
 8015530:	ed8a da2b 	vstr	s26, [sl, #172]	; 0xac
 8015534:	edca 8a2d 	vstr	s17, [sl, #180]	; 0xb4
 8015538:	f8ca 30b8 	str.w	r3, [sl, #184]	; 0xb8
 801553c:	f8ca 30bc 	str.w	r3, [sl, #188]	; 0xbc
 8015540:	f8ca 30c0 	str.w	r3, [sl, #192]	; 0xc0
 8015544:	f8ca 30dc 	str.w	r3, [sl, #220]	; 0xdc
 8015548:	f8ca 30e0 	str.w	r3, [sl, #224]	; 0xe0
 801554c:	f8ca 30e4 	str.w	r3, [sl, #228]	; 0xe4
 8015550:	f8ca 3100 	str.w	r3, [sl, #256]	; 0x100
 8015554:	f8ca 3104 	str.w	r3, [sl, #260]	; 0x104
 8015558:	f8ca 3108 	str.w	r3, [sl, #264]	; 0x108
 801555c:	f8ca 31a8 	str.w	r3, [sl, #424]	; 0x1a8
 8015560:	f8ca 31f8 	str.w	r3, [sl, #504]	; 0x1f8
 8015564:	2300      	movs	r3, #0
 8015566:	f8ca 3094 	str.w	r3, [sl, #148]	; 0x94
 801556a:	f8ca 3098 	str.w	r3, [sl, #152]	; 0x98
 801556e:	f8ca 309c 	str.w	r3, [sl, #156]	; 0x9c
 8015572:	9901      	ldr	r1, [sp, #4]
 8015574:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015576:	f7fa fab7 	bl	800fae8 <m_q2dcm_eml>
 801557a:	edda 9a2b 	vldr	s19, [sl, #172]	; 0xac
 801557e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015582:	eee9 7ae9 	vfms.f32	s15, s19, s19
 8015586:	ee17 0a90 	vmov	r0, s15
 801558a:	f7ea ffe5 	bl	8000558 <__aeabi_f2d>
 801558e:	f006 f989 	bl	801b8a4 <sqrt>
 8015592:	f7eb fb11 	bl	8000bb8 <__aeabi_d2f>
 8015596:	ed9a 3a12 	vldr	s6, [sl, #72]	; 0x48
 801559a:	edda 7a10 	vldr	s15, [sl, #64]	; 0x40
 801559e:	edda 5a15 	vldr	s11, [sl, #84]	; 0x54
 80155a2:	edda 2a18 	vldr	s5, [sl, #96]	; 0x60
 80155a6:	edda 4a13 	vldr	s9, [sl, #76]	; 0x4c
 80155aa:	ed9a 5a16 	vldr	s10, [sl, #88]	; 0x58
 80155ae:	eddd 3a57 	vldr	s7, [sp, #348]	; 0x15c
 80155b2:	ed9d 4a58 	vldr	s8, [sp, #352]	; 0x160
 80155b6:	ed8a da22 	vstr	s26, [sl, #136]	; 0x88
 80155ba:	ee06 0a10 	vmov	s12, r0
 80155be:	ee29 7a83 	vmul.f32	s14, s19, s6
 80155c2:	ee69 6aa5 	vmul.f32	s13, s19, s11
 80155c6:	eea6 7a27 	vfma.f32	s14, s12, s15
 80155ca:	ee69 7aa2 	vmul.f32	s15, s19, s5
 80155ce:	eee6 6a24 	vfma.f32	s13, s12, s9
 80155d2:	eee6 7a05 	vfma.f32	s15, s12, s10
 80155d6:	ee73 3ac7 	vsub.f32	s7, s7, s14
 80155da:	ed9d 5a5b 	vldr	s10, [sp, #364]	; 0x16c
 80155de:	eddd 4a59 	vldr	s9, [sp, #356]	; 0x164
 80155e2:	ed8a 7a82 	vstr	s14, [sl, #520]	; 0x208
 80155e6:	ee35 5a65 	vsub.f32	s10, s10, s11
 80155ea:	ed9d 6a5a 	vldr	s12, [sp, #360]	; 0x168
 80155ee:	eddd 5a5c 	vldr	s11, [sp, #368]	; 0x170
 80155f2:	edca 3a19 	vstr	s7, [sl, #100]	; 0x64
 80155f6:	ed9a 7a2c 	vldr	s14, [sl, #176]	; 0xb0
 80155fa:	eddf 3a36 	vldr	s7, [pc, #216]	; 80156d4 <m_kalman_3gyro.isra.6.constprop.36+0x162c>
 80155fe:	ed8a 9a23 	vstr	s18, [sl, #140]	; 0x8c
 8015602:	ee34 4a66 	vsub.f32	s8, s8, s13
 8015606:	ee74 4ae7 	vsub.f32	s9, s9, s15
 801560a:	ee75 5ae2 	vsub.f32	s11, s11, s5
 801560e:	ee36 6a43 	vsub.f32	s12, s12, s6
 8015612:	eeb4 7ae3 	vcmpe.f32	s14, s7
 8015616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801561a:	edca 8a24 	vstr	s17, [sl, #144]	; 0x90
 801561e:	edca 6a83 	vstr	s13, [sl, #524]	; 0x20c
 8015622:	ed8a 4a1a 	vstr	s8, [sl, #104]	; 0x68
 8015626:	edca 7a84 	vstr	s15, [sl, #528]	; 0x210
 801562a:	edca 4a1b 	vstr	s9, [sl, #108]	; 0x6c
 801562e:	ed8a 5a1d 	vstr	s10, [sl, #116]	; 0x74
 8015632:	edca 5a1e 	vstr	s11, [sl, #120]	; 0x78
 8015636:	ed8a 6a1c 	vstr	s12, [sl, #112]	; 0x70
 801563a:	f141 8147 	bpl.w	80168cc <m_kalman_3gyro.isra.6.constprop.36+0x2824>
 801563e:	eddf 7a26 	vldr	s15, [pc, #152]	; 80156d8 <m_kalman_3gyro.isra.6.constprop.36+0x1630>
 8015642:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801564a:	f341 813f 	ble.w	80168cc <m_kalman_3gyro.isra.6.constprop.36+0x2824>
 801564e:	ee79 7a47 	vsub.f32	s15, s18, s14
 8015652:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015654:	eef0 7ae7 	vabs.f32	s15, s15
 8015658:	edc3 7a00 	vstr	s15, [r3]
 801565c:	ee7c 7aa7 	vadd.f32	s15, s25, s15
 8015660:	ed9d 7a98 	vldr	s14, [sp, #608]	; 0x260
 8015664:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015666:	eef4 7ac7 	vcmpe.f32	s15, s14
 801566a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801566e:	edc3 7a00 	vstr	s15, [r3]
 8015672:	f341 8167 	ble.w	8016944 <m_kalman_3gyro.isra.6.constprop.36+0x289c>
 8015676:	ed9d 7aa1 	vldr	s14, [sp, #644]	; 0x284
 801567a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801567e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015682:	f102 813d 	bmi.w	8017900 <m_kalman_3gyro.isra.6.constprop.36+0x3858>
 8015686:	eddd 8aab 	vldr	s17, [sp, #684]	; 0x2ac
 801568a:	ed9d 9ab5 	vldr	s18, [sp, #724]	; 0x2d4
 801568e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015690:	ed9d 7a5d 	vldr	s14, [sp, #372]	; 0x174
 8015694:	edd3 7a00 	vldr	s15, [r3]
 8015698:	eef4 7ac7 	vcmpe.f32	s15, s14
 801569c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80156a0:	f341 856d 	ble.w	801717e <m_kalman_3gyro.isra.6.constprop.36+0x30d6>
 80156a4:	ed9d 7a63 	vldr	s14, [sp, #396]	; 0x18c
 80156a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80156ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80156b0:	f142 8150 	bpl.w	8017954 <m_kalman_3gyro.isra.6.constprop.36+0x38ac>
 80156b4:	2007      	movs	r0, #7
 80156b6:	2402      	movs	r4, #2
 80156b8:	2101      	movs	r1, #1
 80156ba:	f06f 4540 	mvn.w	r5, #3221225472	; 0xc0000000
 80156be:	e021      	b.n	8015704 <m_kalman_3gyro.isra.6.constprop.36+0x165c>
 80156c0:	9999999a 	.word	0x9999999a
 80156c4:	3fb99999 	.word	0x3fb99999
 80156c8:	20001bec 	.word	0x20001bec
 80156cc:	3dcccccd 	.word	0x3dcccccd
 80156d0:	3fe00000 	.word	0x3fe00000
 80156d4:	3f99999a 	.word	0x3f99999a
 80156d8:	3f4ccccd 	.word	0x3f4ccccd
 80156dc:	20001bfc 	.word	0x20001bfc
 80156e0:	00000000 	.word	0x00000000
 80156e4:	3d088889 	.word	0x3d088889
 80156e8:	42480000 	.word	0x42480000
 80156ec:	3c23d70a 	.word	0x3c23d70a
 80156f0:	ed93 7a00 	vldr	s14, [r3]
 80156f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80156f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80156fc:	bfb8      	it	lt
 80156fe:	4610      	movlt	r0, r2
 8015700:	f282 80fa 	bge.w	80178f8 <m_kalman_3gyro.isra.6.constprop.36+0x3850>
 8015704:	1842      	adds	r2, r0, r1
 8015706:	0852      	lsrs	r2, r2, #1
 8015708:	1953      	adds	r3, r2, r5
 801570a:	f50d 66c6 	add.w	r6, sp, #1584	; 0x630
 801570e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8015712:	42a0      	cmp	r0, r4
 8015714:	f2a3 43bc 	subw	r3, r3, #1212	; 0x4bc
 8015718:	d8ea      	bhi.n	80156f0 <m_kalman_3gyro.isra.6.constprop.36+0x1648>
 801571a:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 801571e:	3b01      	subs	r3, #1
 8015720:	009b      	lsls	r3, r3, #2
 8015722:	0089      	lsls	r1, r1, #2
 8015724:	aa5d      	add	r2, sp, #372	; 0x174
 8015726:	18d0      	adds	r0, r2, r3
 8015728:	440a      	add	r2, r1
 801572a:	edd0 6a00 	vldr	s13, [r0]
 801572e:	ed92 7a00 	vldr	s14, [r2]
 8015732:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8015736:	ee37 7a66 	vsub.f32	s14, s14, s13
 801573a:	aa64      	add	r2, sp, #400	; 0x190
 801573c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8015740:	4413      	add	r3, r2
 8015742:	4411      	add	r1, r2
 8015744:	edd3 9a00 	vldr	s19, [r3]
 8015748:	edd1 7a00 	vldr	s15, [r1]
 801574c:	ee77 7ae9 	vsub.f32	s15, s15, s19
 8015750:	eee6 9aa7 	vfma.f32	s19, s13, s15
 8015754:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8015756:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8015758:	ed5f 7a1f 	vldr	s15, [pc, #-124]	; 80156e0 <m_kalman_3gyro.isra.6.constprop.36+0x1638>
 801575c:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 801575e:	edca 7af5 	vstr	s15, [sl, #980]	; 0x3d4
 8015762:	462e      	mov	r6, r5
 8015764:	eef0 6a67 	vmov.f32	s13, s15
 8015768:	eeb0 6a67 	vmov.f32	s12, s15
 801576c:	eef0 5a67 	vmov.f32	s11, s15
 8015770:	edca 7af6 	vstr	s15, [sl, #984]	; 0x3d8
 8015774:	edca 7af7 	vstr	s15, [sl, #988]	; 0x3dc
 8015778:	ed95 7a06 	vldr	s14, [r5, #24]
 801577c:	edd3 7a00 	vldr	s15, [r3]
 8015780:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015784:	3524      	adds	r5, #36	; 0x24
 8015786:	ee75 5aa7 	vadd.f32	s11, s11, s15
 801578a:	330c      	adds	r3, #12
 801578c:	edca 5af5 	vstr	s11, [sl, #980]	; 0x3d4
 8015790:	ed15 7a02 	vldr	s14, [r5, #-8]
 8015794:	ed53 7a02 	vldr	s15, [r3, #-8]
 8015798:	ee77 7a67 	vsub.f32	s15, s14, s15
 801579c:	ee36 6a27 	vadd.f32	s12, s12, s15
 80157a0:	ed8a 6af6 	vstr	s12, [sl, #984]	; 0x3d8
 80157a4:	ed15 7a01 	vldr	s14, [r5, #-4]
 80157a8:	ed53 7a01 	vldr	s15, [r3, #-4]
 80157ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80157b0:	42aa      	cmp	r2, r5
 80157b2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80157b6:	edca 6af7 	vstr	s13, [sl, #988]	; 0x3dc
 80157ba:	d1dd      	bne.n	8015778 <m_kalman_3gyro.isra.6.constprop.36+0x16d0>
 80157bc:	ed5f 7a37 	vldr	s15, [pc, #-220]	; 80156e4 <m_kalman_3gyro.isra.6.constprop.36+0x163c>
 80157c0:	9811      	ldr	r0, [sp, #68]	; 0x44
 80157c2:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80157c6:	ee26 6a27 	vmul.f32	s12, s12, s15
 80157ca:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80157ce:	edca 5af5 	vstr	s11, [sl, #980]	; 0x3d4
 80157d2:	ed8a 6af6 	vstr	s12, [sl, #984]	; 0x3d8
 80157d6:	edca 6af7 	vstr	s13, [sl, #988]	; 0x3dc
 80157da:	f50a 6305 	add.w	r3, sl, #2128	; 0x850
 80157de:	681a      	ldr	r2, [r3, #0]
 80157e0:	6859      	ldr	r1, [r3, #4]
 80157e2:	625a      	str	r2, [r3, #36]	; 0x24
 80157e4:	689a      	ldr	r2, [r3, #8]
 80157e6:	6299      	str	r1, [r3, #40]	; 0x28
 80157e8:	62da      	str	r2, [r3, #44]	; 0x2c
 80157ea:	68d9      	ldr	r1, [r3, #12]
 80157ec:	691a      	ldr	r2, [r3, #16]
 80157ee:	6319      	str	r1, [r3, #48]	; 0x30
 80157f0:	635a      	str	r2, [r3, #52]	; 0x34
 80157f2:	6959      	ldr	r1, [r3, #20]
 80157f4:	699a      	ldr	r2, [r3, #24]
 80157f6:	6399      	str	r1, [r3, #56]	; 0x38
 80157f8:	63da      	str	r2, [r3, #60]	; 0x3c
 80157fa:	69d9      	ldr	r1, [r3, #28]
 80157fc:	6a1a      	ldr	r2, [r3, #32]
 80157fe:	6419      	str	r1, [r3, #64]	; 0x40
 8015800:	645a      	str	r2, [r3, #68]	; 0x44
 8015802:	3b24      	subs	r3, #36	; 0x24
 8015804:	4298      	cmp	r0, r3
 8015806:	d1ea      	bne.n	80157de <m_kalman_3gyro.isra.6.constprop.36+0x1736>
 8015808:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801580a:	9919      	ldr	r1, [sp, #100]	; 0x64
 801580c:	6813      	ldr	r3, [r2, #0]
 801580e:	600b      	str	r3, [r1, #0]
 8015810:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015812:	982b      	ldr	r0, [sp, #172]	; 0xac
 8015814:	680b      	ldr	r3, [r1, #0]
 8015816:	6003      	str	r3, [r0, #0]
 8015818:	9808      	ldr	r0, [sp, #32]
 801581a:	9c20      	ldr	r4, [sp, #128]	; 0x80
 801581c:	6803      	ldr	r3, [r0, #0]
 801581e:	6023      	str	r3, [r4, #0]
 8015820:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8015822:	6853      	ldr	r3, [r2, #4]
 8015824:	6023      	str	r3, [r4, #0]
 8015826:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8015828:	684b      	ldr	r3, [r1, #4]
 801582a:	6023      	str	r3, [r4, #0]
 801582c:	9c21      	ldr	r4, [sp, #132]	; 0x84
 801582e:	6843      	ldr	r3, [r0, #4]
 8015830:	6023      	str	r3, [r4, #0]
 8015832:	6893      	ldr	r3, [r2, #8]
 8015834:	9a3b      	ldr	r2, [sp, #236]	; 0xec
 8015836:	6013      	str	r3, [r2, #0]
 8015838:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 801583a:	688b      	ldr	r3, [r1, #8]
 801583c:	6013      	str	r3, [r2, #0]
 801583e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8015840:	6883      	ldr	r3, [r0, #8]
 8015842:	6013      	str	r3, [r2, #0]
 8015844:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015846:	2b02      	cmp	r3, #2
 8015848:	f001 808c 	beq.w	8016964 <m_kalman_3gyro.isra.6.constprop.36+0x28bc>
 801584c:	eeb4 eaed 	vcmpe.f32	s28, s27
 8015850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015854:	f301 815e 	bgt.w	8016b14 <m_kalman_3gyro.isra.6.constprop.36+0x2a6c>
 8015858:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801585a:	2b00      	cmp	r3, #0
 801585c:	f041 8634 	bne.w	80174c8 <m_kalman_3gyro.isra.6.constprop.36+0x3420>
 8015860:	f8da 20a4 	ldr.w	r2, [sl, #164]	; 0xa4
 8015864:	f8da 30a8 	ldr.w	r3, [sl, #168]	; 0xa8
 8015868:	f8ca 2080 	str.w	r2, [sl, #128]	; 0x80
 801586c:	f89a 2030 	ldrb.w	r2, [sl, #48]	; 0x30
 8015870:	f8da 10a0 	ldr.w	r1, [sl, #160]	; 0xa0
 8015874:	f8ca 3084 	str.w	r3, [sl, #132]	; 0x84
 8015878:	2300      	movs	r3, #0
 801587a:	f8ca 107c 	str.w	r1, [sl, #124]	; 0x7c
 801587e:	f8aa 3202 	strh.w	r3, [sl, #514]	; 0x202
 8015882:	f88a 3204 	strb.w	r3, [sl, #516]	; 0x204
 8015886:	f8ca 345c 	str.w	r3, [sl, #1116]	; 0x45c
 801588a:	2a00      	cmp	r2, #0
 801588c:	f001 8050 	beq.w	8016930 <m_kalman_3gyro.isra.6.constprop.36+0x2888>
 8015890:	f88a 3030 	strb.w	r3, [sl, #48]	; 0x30
 8015894:	ac86      	add	r4, sp, #536	; 0x218
 8015896:	ed5f 7a6c 	vldr	s15, [pc, #-432]	; 80156e8 <m_kalman_3gyro.isra.6.constprop.36+0x1640>
 801589a:	eeb4 9ae7 	vcmpe.f32	s18, s15
 801589e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80158a2:	f2c1 801e 	blt.w	80168e2 <m_kalman_3gyro.isra.6.constprop.36+0x283a>
 80158a6:	2300      	movs	r3, #0
 80158a8:	f8aa 3202 	strh.w	r3, [sl, #514]	; 0x202
 80158ac:	f88a 3204 	strb.w	r3, [sl, #516]	; 0x204
 80158b0:	f8ca 3458 	str.w	r3, [sl, #1112]	; 0x458
 80158b4:	f8dd 3698 	ldr.w	r3, [sp, #1688]	; 0x698
 80158b8:	990e      	ldr	r1, [sp, #56]	; 0x38
 80158ba:	ed93 5a08 	vldr	s10, [r3, #32]
 80158be:	edd3 3a06 	vldr	s7, [r3, #24]
 80158c2:	ed93 4a07 	vldr	s8, [r3, #28]
 80158c6:	edd3 4a00 	vldr	s9, [r3]
 80158ca:	edd3 5a01 	vldr	s11, [r3, #4]
 80158ce:	ed93 2a02 	vldr	s4, [r3, #8]
 80158d2:	edd3 6a03 	vldr	s13, [r3, #12]
 80158d6:	ed93 7a04 	vldr	s14, [r3, #16]
 80158da:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80158de:	edd3 2a05 	vldr	s5, [r3, #20]
 80158e2:	f8dd 2698 	ldr.w	r2, [sp, #1688]	; 0x698
 80158e6:	ed1f 3a7f 	vldr	s6, [pc, #-508]	; 80156ec <m_kalman_3gyro.isra.6.constprop.36+0x1644>
 80158ea:	ee24 4a09 	vmul.f32	s8, s8, s18
 80158ee:	ee63 3a89 	vmul.f32	s7, s7, s18
 80158f2:	ee25 9a09 	vmul.f32	s18, s10, s18
 80158f6:	ed83 4a07 	vstr	s8, [r3, #28]
 80158fa:	edc3 3a06 	vstr	s7, [r3, #24]
 80158fe:	ed83 9a08 	vstr	s18, [r3, #32]
 8015902:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015904:	ed91 6a00 	vldr	s12, [r1]
 8015908:	ed93 4a00 	vldr	s8, [r3]
 801590c:	ee24 4a06 	vmul.f32	s8, s8, s12
 8015910:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8015914:	ee64 4a84 	vmul.f32	s9, s9, s8
 8015918:	ee38 5a85 	vadd.f32	s10, s17, s10
 801591c:	edc2 4a00 	vstr	s9, [r2]
 8015920:	edd3 4a00 	vldr	s9, [r3]
 8015924:	ed91 6a00 	vldr	s12, [r1]
 8015928:	ee64 4a86 	vmul.f32	s9, s9, s12
 801592c:	460a      	mov	r2, r1
 801592e:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8015932:	f8dd 1698 	ldr.w	r1, [sp, #1688]	; 0x698
 8015936:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 801593a:	edc1 5a01 	vstr	s11, [r1, #4]
 801593e:	edd3 5a00 	vldr	s11, [r3]
 8015942:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015944:	eec6 4a05 	vdiv.f32	s9, s12, s10
 8015948:	ed92 6a00 	vldr	s12, [r2]
 801594c:	ee26 6a25 	vmul.f32	s12, s12, s11
 8015950:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8015954:	ee22 6a06 	vmul.f32	s12, s4, s12
 8015958:	ee67 7aa8 	vmul.f32	s15, s15, s17
 801595c:	ed81 6a02 	vstr	s12, [r1, #8]
 8015960:	ed93 6a00 	vldr	s12, [r3]
 8015964:	ee66 6a86 	vmul.f32	s13, s13, s12
 8015968:	eef4 4ac3 	vcmpe.f32	s9, s6
 801596c:	edc1 6a03 	vstr	s13, [r1, #12]
 8015970:	edd3 6a00 	vldr	s13, [r3]
 8015974:	ee27 7a26 	vmul.f32	s14, s14, s13
 8015978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801597c:	ed81 7a04 	vstr	s14, [r1, #16]
 8015980:	ed93 7a00 	vldr	s14, [r3]
 8015984:	edc1 7a09 	vstr	s15, [r1, #36]	; 0x24
 8015988:	ee62 7a87 	vmul.f32	s15, s5, s14
 801598c:	f8dd 369c 	ldr.w	r3, [sp, #1692]	; 0x69c
 8015990:	edc1 7a05 	vstr	s15, [r1, #20]
 8015994:	edd3 7a06 	vldr	s15, [r3, #24]
 8015998:	bfb8      	it	lt
 801599a:	eef0 4a43 	vmovlt.f32	s9, s6
 801599e:	ee67 7aa4 	vmul.f32	s15, s15, s9
 80159a2:	edc3 7a06 	vstr	s15, [r3, #24]
 80159a6:	edd1 7a0a 	vldr	s15, [r1, #40]	; 0x28
 80159aa:	f8dd 369c 	ldr.w	r3, [sp, #1692]	; 0x69c
 80159ae:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80159b2:	ee67 7aa8 	vmul.f32	s15, s15, s17
 80159b6:	edc1 7a0a 	vstr	s15, [r1, #40]	; 0x28
 80159ba:	edd3 7a07 	vldr	s15, [r3, #28]
 80159be:	ee67 7aa4 	vmul.f32	s15, s15, s9
 80159c2:	edc3 7a07 	vstr	s15, [r3, #28]
 80159c6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80159c8:	edd1 7a0b 	vldr	s15, [r1, #44]	; 0x2c
 80159cc:	ed93 7a00 	vldr	s14, [r3]
 80159d0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80159d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80159d6:	edc1 7a0b 	vstr	s15, [r1, #44]	; 0x2c
 80159da:	b3cb      	cbz	r3, 8015a50 <m_kalman_3gyro.isra.6.constprop.36+0x19a8>
 80159dc:	edd1 7a03 	vldr	s15, [r1, #12]
 80159e0:	f8dd 369c 	ldr.w	r3, [sp, #1692]	; 0x69c
 80159e4:	ee67 7aa8 	vmul.f32	s15, s15, s17
 80159e8:	edc1 7a03 	vstr	s15, [r1, #12]
 80159ec:	edd3 7a00 	vldr	s15, [r3]
 80159f0:	ee67 7aa4 	vmul.f32	s15, s15, s9
 80159f4:	edc3 7a00 	vstr	s15, [r3]
 80159f8:	edd1 7a04 	vldr	s15, [r1, #16]
 80159fc:	f8dd 369c 	ldr.w	r3, [sp, #1692]	; 0x69c
 8015a00:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8015a04:	edc1 7a04 	vstr	s15, [r1, #16]
 8015a08:	edd3 7a01 	vldr	s15, [r3, #4]
 8015a0c:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8015a10:	edc3 7a01 	vstr	s15, [r3, #4]
 8015a14:	edd1 7a05 	vldr	s15, [r1, #20]
 8015a18:	f8dd 369c 	ldr.w	r3, [sp, #1692]	; 0x69c
 8015a1c:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8015a20:	edc1 7a05 	vstr	s15, [r1, #20]
 8015a24:	edd3 7a02 	vldr	s15, [r3, #8]
 8015a28:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8015a2c:	edc3 7a02 	vstr	s15, [r3, #8]
 8015a30:	edd1 7a0a 	vldr	s15, [r1, #40]	; 0x28
 8015a34:	f8dd 369c 	ldr.w	r3, [sp, #1692]	; 0x69c
 8015a38:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8015a3c:	ee67 8aa8 	vmul.f32	s17, s15, s17
 8015a40:	edc1 8a0a 	vstr	s17, [r1, #40]	; 0x28
 8015a44:	edd3 7a07 	vldr	s15, [r3, #28]
 8015a48:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8015a4c:	edc3 7a07 	vstr	s15, [r3, #28]
 8015a50:	f8dd 369c 	ldr.w	r3, [sp, #1692]	; 0x69c
 8015a54:	ed9a 3a2e 	vldr	s6, [sl, #184]	; 0xb8
 8015a58:	edd3 2a00 	vldr	s5, [r3]
 8015a5c:	f8dd 269c 	ldr.w	r2, [sp, #1692]	; 0x69c
 8015a60:	edda 3a38 	vldr	s7, [sl, #224]	; 0xe0
 8015a64:	ed9a 4a42 	vldr	s8, [sl, #264]	; 0x108
 8015a68:	edda 4a4c 	vldr	s9, [sl, #304]	; 0x130
 8015a6c:	ed9a 5a56 	vldr	s10, [sl, #344]	; 0x158
 8015a70:	edda 5a60 	vldr	s11, [sl, #384]	; 0x180
 8015a74:	ed9a 6a6a 	vldr	s12, [sl, #424]	; 0x1a8
 8015a78:	edda 6a74 	vldr	s13, [sl, #464]	; 0x1d0
 8015a7c:	ed9d 2a59 	vldr	s4, [sp, #356]	; 0x164
 8015a80:	eddd 7a58 	vldr	s15, [sp, #352]	; 0x160
 8015a84:	ed9a 7a7e 	vldr	s14, [sl, #504]	; 0x1f8
 8015a88:	edc4 7a06 	vstr	s15, [r4, #24]
 8015a8c:	eea2 3aa2 	vfma.f32	s6, s5, s5
 8015a90:	2300      	movs	r3, #0
 8015a92:	6023      	str	r3, [r4, #0]
 8015a94:	eef1 2a42 	vneg.f32	s5, s4
 8015a98:	ed8a 3a2e 	vstr	s6, [sl, #184]	; 0xb8
 8015a9c:	ed92 3a01 	vldr	s6, [r2, #4]
 8015aa0:	edc4 2a03 	vstr	s5, [r4, #12]
 8015aa4:	eee3 3a03 	vfma.f32	s7, s6, s6
 8015aa8:	eef1 7a67 	vneg.f32	s15, s15
 8015aac:	edca 3a38 	vstr	s7, [sl, #224]	; 0xe0
 8015ab0:	edd2 3a02 	vldr	s7, [r2, #8]
 8015ab4:	eea3 4aa3 	vfma.f32	s8, s7, s7
 8015ab8:	ed8a 4a42 	vstr	s8, [sl, #264]	; 0x108
 8015abc:	ed92 4a03 	vldr	s8, [r2, #12]
 8015ac0:	eee4 4a04 	vfma.f32	s9, s8, s8
 8015ac4:	edca 4a4c 	vstr	s9, [sl, #304]	; 0x130
 8015ac8:	edd2 4a04 	vldr	s9, [r2, #16]
 8015acc:	eea4 5aa4 	vfma.f32	s10, s9, s9
 8015ad0:	ed8a 5a56 	vstr	s10, [sl, #344]	; 0x158
 8015ad4:	ed92 5a05 	vldr	s10, [r2, #20]
 8015ad8:	eee5 5a05 	vfma.f32	s11, s10, s10
 8015adc:	edca 5a60 	vstr	s11, [sl, #384]	; 0x180
 8015ae0:	edd2 5a06 	vldr	s11, [r2, #24]
 8015ae4:	eea5 6aa5 	vfma.f32	s12, s11, s11
 8015ae8:	ed8a 6a6a 	vstr	s12, [sl, #424]	; 0x1a8
 8015aec:	ed92 6a07 	vldr	s12, [r2, #28]
 8015af0:	eee6 6a06 	vfma.f32	s13, s12, s12
 8015af4:	edca 6a74 	vstr	s13, [sl, #464]	; 0x1d0
 8015af8:	edd2 6a08 	vldr	s13, [r2, #32]
 8015afc:	f8dd 26a8 	ldr.w	r2, [sp, #1704]	; 0x6a8
 8015b00:	eddd 5a57 	vldr	s11, [sp, #348]	; 0x15c
 8015b04:	ed9d 6a5c 	vldr	s12, [sp, #368]	; 0x170
 8015b08:	edc4 7a02 	vstr	s15, [r4, #8]
 8015b0c:	eea6 7aa6 	vfma.f32	s14, s13, s13
 8015b10:	6123      	str	r3, [r4, #16]
 8015b12:	6223      	str	r3, [r4, #32]
 8015b14:	eddd 6a5b 	vldr	s13, [sp, #364]	; 0x16c
 8015b18:	ed8a 7a7e 	vstr	s14, [sl, #504]	; 0x1f8
 8015b1c:	7812      	ldrb	r2, [r2, #0]
 8015b1e:	f88a 21fc 	strb.w	r2, [sl, #508]	; 0x1fc
 8015b22:	f8dd 26a8 	ldr.w	r2, [sp, #1704]	; 0x6a8
 8015b26:	ed9d 7a5a 	vldr	s14, [sp, #360]	; 0x168
 8015b2a:	7812      	ldrb	r2, [r2, #0]
 8015b2c:	f88a 21fd 	strb.w	r2, [sl, #509]	; 0x1fd
 8015b30:	f8dd 26a8 	ldr.w	r2, [sp, #1704]	; 0x6a8
 8015b34:	938f      	str	r3, [sp, #572]	; 0x23c
 8015b36:	7812      	ldrb	r2, [r2, #0]
 8015b38:	f88a 21fe 	strb.w	r2, [sl, #510]	; 0x1fe
 8015b3c:	f8dd 26a8 	ldr.w	r2, [sp, #1704]	; 0x6a8
 8015b40:	9393      	str	r3, [sp, #588]	; 0x24c
 8015b42:	7852      	ldrb	r2, [r2, #1]
 8015b44:	f88a 21ff 	strb.w	r2, [sl, #511]	; 0x1ff
 8015b48:	f8dd 26a8 	ldr.w	r2, [sp, #1704]	; 0x6a8
 8015b4c:	9397      	str	r3, [sp, #604]	; 0x25c
 8015b4e:	7852      	ldrb	r2, [r2, #1]
 8015b50:	f88a 2200 	strb.w	r2, [sl, #512]	; 0x200
 8015b54:	f8dd 26a8 	ldr.w	r2, [sp, #1704]	; 0x6a8
 8015b58:	ed84 2a01 	vstr	s4, [r4, #4]
 8015b5c:	7852      	ldrb	r2, [r2, #1]
 8015b5e:	f88a 2201 	strb.w	r2, [sl, #513]	; 0x201
 8015b62:	eeb1 4a65 	vneg.f32	s8, s11
 8015b66:	edc4 5a05 	vstr	s11, [r4, #20]
 8015b6a:	ed84 4a07 	vstr	s8, [r4, #28]
 8015b6e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8015b70:	ed8d 6a90 	vstr	s12, [sp, #576]	; 0x240
 8015b74:	eef1 4a46 	vneg.f32	s9, s12
 8015b78:	eeb1 5a66 	vneg.f32	s10, s13
 8015b7c:	eef1 7a47 	vneg.f32	s15, s14
 8015b80:	edcd 4a92 	vstr	s9, [sp, #584]	; 0x248
 8015b84:	edcd 6a95 	vstr	s13, [sp, #596]	; 0x254
 8015b88:	ed8d 5a91 	vstr	s10, [sp, #580]	; 0x244
 8015b8c:	ed8d 7a94 	vstr	s14, [sp, #592]	; 0x250
 8015b90:	edcd 7a96 	vstr	s15, [sp, #600]	; 0x258
 8015b94:	b1ab      	cbz	r3, 8015bc2 <m_kalman_3gyro.isra.6.constprop.36+0x1b1a>
 8015b96:	f8dd 36a8 	ldr.w	r3, [sp, #1704]	; 0x6a8
 8015b9a:	785b      	ldrb	r3, [r3, #1]
 8015b9c:	b18b      	cbz	r3, 8015bc2 <m_kalman_3gyro.isra.6.constprop.36+0x1b1a>
 8015b9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015ba0:	ed93 7a00 	vldr	s14, [r3]
 8015ba4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015ba8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015bb0:	bfd4      	ite	le
 8015bb2:	2301      	movle	r3, #1
 8015bb4:	2300      	movgt	r3, #0
 8015bb6:	f88a 31ff 	strb.w	r3, [sl, #511]	; 0x1ff
 8015bba:	f88a 3200 	strb.w	r3, [sl, #512]	; 0x200
 8015bbe:	f88a 3201 	strb.w	r3, [sl, #513]	; 0x201
 8015bc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015bc4:	edd3 7a00 	vldr	s15, [r3]
 8015bc8:	eef4 7ac8 	vcmpe.f32	s15, s16
 8015bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015bd0:	f2c0 86b1 	blt.w	8016936 <m_kalman_3gyro.isra.6.constprop.36+0x288e>
 8015bd4:	f50d 63d7 	add.w	r3, sp, #1720	; 0x6b8
 8015bd8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015bdc:	2200      	movs	r2, #0
 8015bde:	2300      	movs	r3, #0
 8015be0:	f7ea ffa2 	bl	8000b28 <__aeabi_dcmpgt>
 8015be4:	2800      	cmp	r0, #0
 8015be6:	f000 86a6 	beq.w	8016936 <m_kalman_3gyro.isra.6.constprop.36+0x288e>
 8015bea:	2300      	movs	r3, #0
 8015bec:	f8aa 31fc 	strh.w	r3, [sl, #508]	; 0x1fc
 8015bf0:	f88a 31fe 	strb.w	r3, [sl, #510]	; 0x1fe
 8015bf4:	f88a 3205 	strb.w	r3, [sl, #517]	; 0x205
 8015bf8:	f88a 3207 	strb.w	r3, [sl, #519]	; 0x207
 8015bfc:	edda 7a24 	vldr	s15, [sl, #144]	; 0x90
 8015c00:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8015c04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015c08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c0c:	dc06      	bgt.n	8015c1c <m_kalman_3gyro.isra.6.constprop.36+0x1b74>
 8015c0e:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8015d74 <m_kalman_3gyro.isra.6.constprop.36+0x1ccc>
 8015c12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c1a:	d508      	bpl.n	8015c2e <m_kalman_3gyro.isra.6.constprop.36+0x1b86>
 8015c1c:	2300      	movs	r3, #0
 8015c1e:	f8aa 31fc 	strh.w	r3, [sl, #508]	; 0x1fc
 8015c22:	f88a 31fe 	strb.w	r3, [sl, #510]	; 0x1fe
 8015c26:	f88a 3205 	strb.w	r3, [sl, #517]	; 0x205
 8015c2a:	f88a 3207 	strb.w	r3, [sl, #519]	; 0x207
 8015c2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015c32:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015c36:	eef0 7ae7 	vabs.f32	s15, s15
 8015c3a:	ee17 0a90 	vmov	r0, s15
 8015c3e:	f7ea fc8b 	bl	8000558 <__aeabi_f2d>
 8015c42:	f8dd 3698 	ldr.w	r3, [sp, #1688]	; 0x698
 8015c46:	4606      	mov	r6, r0
 8015c48:	6818      	ldr	r0, [r3, #0]
 8015c4a:	460f      	mov	r7, r1
 8015c4c:	f7ea fc84 	bl	8000558 <__aeabi_f2d>
 8015c50:	4602      	mov	r2, r0
 8015c52:	460b      	mov	r3, r1
 8015c54:	4630      	mov	r0, r6
 8015c56:	4639      	mov	r1, r7
 8015c58:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8015c5c:	f7ea ff5a 	bl	8000b14 <__aeabi_dcmpge>
 8015c60:	b908      	cbnz	r0, 8015c66 <m_kalman_3gyro.isra.6.constprop.36+0x1bbe>
 8015c62:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8015c66:	4630      	mov	r0, r6
 8015c68:	4639      	mov	r1, r7
 8015c6a:	f7ea ffa5 	bl	8000bb8 <__aeabi_d2f>
 8015c6e:	f8dd 3698 	ldr.w	r3, [sp, #1688]	; 0x698
 8015c72:	6018      	str	r0, [r3, #0]
 8015c74:	6058      	str	r0, [r3, #4]
 8015c76:	6098      	str	r0, [r3, #8]
 8015c78:	edda 7a23 	vldr	s15, [sl, #140]	; 0x8c
 8015c7c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8015c80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c88:	f300 8613 	bgt.w	80168b2 <m_kalman_3gyro.isra.6.constprop.36+0x280a>
 8015c8c:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8015d78 <m_kalman_3gyro.isra.6.constprop.36+0x1cd0>
 8015c90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015c94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c98:	f100 860b 	bmi.w	80168b2 <m_kalman_3gyro.isra.6.constprop.36+0x280a>
 8015c9c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8015ca0:	ee37 8ac8 	vsub.f32	s16, s15, s16
 8015ca4:	eef0 7ac8 	vabs.f32	s15, s16
 8015ca8:	ee17 0a90 	vmov	r0, s15
 8015cac:	f7ea fc54 	bl	8000558 <__aeabi_f2d>
 8015cb0:	f8dd 3698 	ldr.w	r3, [sp, #1688]	; 0x698
 8015cb4:	4606      	mov	r6, r0
 8015cb6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8015cb8:	460f      	mov	r7, r1
 8015cba:	f7ea fc4d 	bl	8000558 <__aeabi_f2d>
 8015cbe:	4602      	mov	r2, r0
 8015cc0:	460b      	mov	r3, r1
 8015cc2:	4630      	mov	r0, r6
 8015cc4:	4639      	mov	r1, r7
 8015cc6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8015cca:	f7ea ff23 	bl	8000b14 <__aeabi_dcmpge>
 8015cce:	2800      	cmp	r0, #0
 8015cd0:	f001 831f 	beq.w	8017312 <m_kalman_3gyro.isra.6.constprop.36+0x326a>
 8015cd4:	4630      	mov	r0, r6
 8015cd6:	4639      	mov	r1, r7
 8015cd8:	f7ea ff6e 	bl	8000bb8 <__aeabi_d2f>
 8015cdc:	f8dd 3698 	ldr.w	r3, [sp, #1688]	; 0x698
 8015ce0:	ed93 7a03 	vldr	s14, [r3, #12]
 8015ce4:	6298      	str	r0, [r3, #40]	; 0x28
 8015ce6:	ee68 7a08 	vmul.f32	s15, s16, s16
 8015cea:	ee67 6a07 	vmul.f32	s13, s14, s14
 8015cee:	eef4 7ae6 	vcmpe.f32	s15, s13
 8015cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015cf6:	f301 82f2 	bgt.w	80172de <m_kalman_3gyro.isra.6.constprop.36+0x3236>
 8015cfa:	ed99 7a00 	vldr	s14, [r9]
 8015cfe:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8015d02:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015d06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d0a:	f341 8211 	ble.w	8017130 <m_kalman_3gyro.isra.6.constprop.36+0x3088>
 8015d0e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015d12:	2300      	movs	r3, #0
 8015d14:	f8dd 2698 	ldr.w	r2, [sp, #1688]	; 0x698
 8015d18:	f8aa 31fc 	strh.w	r3, [sl, #508]	; 0x1fc
 8015d1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015d20:	f88a 31fe 	strb.w	r3, [sl, #510]	; 0x1fe
 8015d24:	edd2 6a0b 	vldr	s13, [r2, #44]	; 0x2c
 8015d28:	ed92 6a09 	vldr	s12, [r2, #36]	; 0x24
 8015d2c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8015d30:	ee26 6a27 	vmul.f32	s12, s12, s15
 8015d34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015d38:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8015d3c:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8015d40:	ed82 6a09 	vstr	s12, [r2, #36]	; 0x24
 8015d44:	edc2 7a0b 	vstr	s15, [r2, #44]	; 0x2c
 8015d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d4c:	bfc4      	itt	gt
 8015d4e:	f88a 3205 	strbgt.w	r3, [sl, #517]	; 0x205
 8015d52:	f88a 3207 	strbgt.w	r3, [sl, #519]	; 0x207
 8015d56:	f89a 38ae 	ldrb.w	r3, [sl, #2222]	; 0x8ae
 8015d5a:	2b0e      	cmp	r3, #14
 8015d5c:	d802      	bhi.n	8015d64 <m_kalman_3gyro.isra.6.constprop.36+0x1cbc>
 8015d5e:	3305      	adds	r3, #5
 8015d60:	f88a 38ae 	strb.w	r3, [sl, #2222]	; 0x8ae
 8015d64:	4623      	mov	r3, r4
 8015d66:	af8f      	add	r7, sp, #572	; 0x23c
 8015d68:	f04f 0900 	mov.w	r9, #0
 8015d6c:	ed9f 8a03 	vldr	s16, [pc, #12]	; 8015d7c <m_kalman_3gyro.isra.6.constprop.36+0x1cd4>
 8015d70:	e027      	b.n	8015dc2 <m_kalman_3gyro.isra.6.constprop.36+0x1d1a>
 8015d72:	bf00      	nop
 8015d74:	3e4ccccd 	.word	0x3e4ccccd
 8015d78:	3ecccccd 	.word	0x3ecccccd
 8015d7c:	00000000 	.word	0x00000000
 8015d80:	ed57 6a03 	vldr	s13, [r7, #-12]
 8015d84:	ed97 7a00 	vldr	s14, [r7]
 8015d88:	edd7 7a03 	vldr	s15, [r7, #12]
 8015d8c:	eb0a 0009 	add.w	r0, sl, r9
 8015d90:	ee76 6aa6 	vadd.f32	s13, s13, s13
 8015d94:	ee37 7a07 	vadd.f32	s14, s14, s14
 8015d98:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8015d9c:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8015da0:	edcd 6a7d 	vstr	s13, [sp, #500]	; 0x1f4
 8015da4:	ed8d 7a7e 	vstr	s14, [sp, #504]	; 0x1f8
 8015da8:	edcd 7a7f 	vstr	s15, [sp, #508]	; 0x1fc
 8015dac:	bb7a      	cbnz	r2, 8015e0e <m_kalman_3gyro.isra.6.constprop.36+0x1d66>
 8015dae:	f109 0901 	add.w	r9, r9, #1
 8015db2:	f1b9 0f0c 	cmp.w	r9, #12
 8015db6:	f103 0304 	add.w	r3, r3, #4
 8015dba:	f107 0704 	add.w	r7, r7, #4
 8015dbe:	f000 84c3 	beq.w	8016748 <m_kalman_3gyro.isra.6.constprop.36+0x26a0>
 8015dc2:	f1b9 0f02 	cmp.w	r9, #2
 8015dc6:	ed8d 8a7d 	vstr	s16, [sp, #500]	; 0x1f4
 8015dca:	ed8d 8a7e 	vstr	s16, [sp, #504]	; 0x1f8
 8015dce:	ed8d 8a7f 	vstr	s16, [sp, #508]	; 0x1fc
 8015dd2:	ed8d 8a80 	vstr	s16, [sp, #512]	; 0x200
 8015dd6:	ed8d 8a81 	vstr	s16, [sp, #516]	; 0x204
 8015dda:	ed8d 8a82 	vstr	s16, [sp, #520]	; 0x208
 8015dde:	ed8d 8a83 	vstr	s16, [sp, #524]	; 0x20c
 8015de2:	ed8d 8a84 	vstr	s16, [sp, #528]	; 0x210
 8015de6:	ed8d 8a85 	vstr	s16, [sp, #532]	; 0x214
 8015dea:	f340 8413 	ble.w	8016614 <m_kalman_3gyro.isra.6.constprop.36+0x256c>
 8015dee:	f1b9 0f05 	cmp.w	r9, #5
 8015df2:	ddc5      	ble.n	8015d80 <m_kalman_3gyro.isra.6.constprop.36+0x1cd8>
 8015df4:	aa7d      	add	r2, sp, #500	; 0x1f4
 8015df6:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 8015dfa:	eb0a 0009 	add.w	r0, sl, r9
 8015dfe:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8015e02:	f842 1c0c 	str.w	r1, [r2, #-12]
 8015e06:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8015e0a:	2a00      	cmp	r2, #0
 8015e0c:	d0cf      	beq.n	8015dae <m_kalman_3gyro.isra.6.constprop.36+0x1d06>
 8015e0e:	ad74      	add	r5, sp, #464	; 0x1d0
 8015e10:	f10a 02b8 	add.w	r2, sl, #184	; 0xb8
 8015e14:	ed9d da7d 	vldr	s26, [sp, #500]	; 0x1f4
 8015e18:	eddd da7e 	vldr	s27, [sp, #504]	; 0x1f8
 8015e1c:	ed9d ea7f 	vldr	s28, [sp, #508]	; 0x1fc
 8015e20:	eddd ea80 	vldr	s29, [sp, #512]	; 0x200
 8015e24:	ed9d fa81 	vldr	s30, [sp, #516]	; 0x204
 8015e28:	eddd fa82 	vldr	s31, [sp, #520]	; 0x208
 8015e2c:	eddd 6a83 	vldr	s13, [sp, #524]	; 0x20c
 8015e30:	ed9d 6a84 	vldr	s12, [sp, #528]	; 0x210
 8015e34:	eddd 5a85 	vldr	s11, [sp, #532]	; 0x214
 8015e38:	9204      	str	r2, [sp, #16]
 8015e3a:	ed85 8a00 	vstr	s16, [r5]
 8015e3e:	4616      	mov	r6, r2
 8015e40:	ed85 8a01 	vstr	s16, [r5, #4]
 8015e44:	ed85 8a02 	vstr	s16, [r5, #8]
 8015e48:	ed85 8a03 	vstr	s16, [r5, #12]
 8015e4c:	ed85 8a04 	vstr	s16, [r5, #16]
 8015e50:	ed85 8a05 	vstr	s16, [r5, #20]
 8015e54:	ed85 8a06 	vstr	s16, [r5, #24]
 8015e58:	ed85 8a07 	vstr	s16, [r5, #28]
 8015e5c:	ed85 8a08 	vstr	s16, [r5, #32]
 8015e60:	4629      	mov	r1, r5
 8015e62:	f10a 04dc 	add.w	r4, sl, #220	; 0xdc
 8015e66:	ecb2 7a01 	vldmia	r2!, {s14}
 8015e6a:	ecf1 7a01 	vldmia	r1!, {s15}
 8015e6e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8015e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e76:	d006      	beq.n	8015e86 <m_kalman_3gyro.isra.6.constprop.36+0x1dde>
 8015e78:	eeb5 da40 	vcmp.f32	s26, #0.0
 8015e7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e80:	bf18      	it	ne
 8015e82:	eeed 7a07 	vfmane.f32	s15, s26, s14
 8015e86:	ed92 7a08 	vldr	s14, [r2, #32]
 8015e8a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8015e8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e92:	d006      	beq.n	8015ea2 <m_kalman_3gyro.isra.6.constprop.36+0x1dfa>
 8015e94:	eef5 da40 	vcmp.f32	s27, #0.0
 8015e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e9c:	bf18      	it	ne
 8015e9e:	eeed 7a87 	vfmane.f32	s15, s27, s14
 8015ea2:	ed92 7a11 	vldr	s14, [r2, #68]	; 0x44
 8015ea6:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8015eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015eae:	d006      	beq.n	8015ebe <m_kalman_3gyro.isra.6.constprop.36+0x1e16>
 8015eb0:	eeb5 ea40 	vcmp.f32	s28, #0.0
 8015eb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015eb8:	bf18      	it	ne
 8015eba:	eeee 7a07 	vfmane.f32	s15, s28, s14
 8015ebe:	ed92 7a1a 	vldr	s14, [r2, #104]	; 0x68
 8015ec2:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8015ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015eca:	d006      	beq.n	8015eda <m_kalman_3gyro.isra.6.constprop.36+0x1e32>
 8015ecc:	eef5 ea40 	vcmp.f32	s29, #0.0
 8015ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ed4:	bf18      	it	ne
 8015ed6:	eeee 7a87 	vfmane.f32	s15, s29, s14
 8015eda:	ed92 7a23 	vldr	s14, [r2, #140]	; 0x8c
 8015ede:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8015ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ee6:	d006      	beq.n	8015ef6 <m_kalman_3gyro.isra.6.constprop.36+0x1e4e>
 8015ee8:	eeb5 fa40 	vcmp.f32	s30, #0.0
 8015eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ef0:	bf18      	it	ne
 8015ef2:	eeef 7a07 	vfmane.f32	s15, s30, s14
 8015ef6:	ed92 7a2c 	vldr	s14, [r2, #176]	; 0xb0
 8015efa:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8015efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f02:	d006      	beq.n	8015f12 <m_kalman_3gyro.isra.6.constprop.36+0x1e6a>
 8015f04:	eef5 fa40 	vcmp.f32	s31, #0.0
 8015f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f0c:	bf18      	it	ne
 8015f0e:	eeef 7a87 	vfmane.f32	s15, s31, s14
 8015f12:	ed92 7a35 	vldr	s14, [r2, #212]	; 0xd4
 8015f16:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8015f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f1e:	d006      	beq.n	8015f2e <m_kalman_3gyro.isra.6.constprop.36+0x1e86>
 8015f20:	eef5 6a40 	vcmp.f32	s13, #0.0
 8015f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f28:	bf18      	it	ne
 8015f2a:	eee6 7a87 	vfmane.f32	s15, s13, s14
 8015f2e:	ed92 7a3e 	vldr	s14, [r2, #248]	; 0xf8
 8015f32:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8015f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f3a:	d006      	beq.n	8015f4a <m_kalman_3gyro.isra.6.constprop.36+0x1ea2>
 8015f3c:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8015f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f44:	bf18      	it	ne
 8015f46:	eee6 7a07 	vfmane.f32	s15, s12, s14
 8015f4a:	ed92 7a47 	vldr	s14, [r2, #284]	; 0x11c
 8015f4e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8015f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f56:	d006      	beq.n	8015f66 <m_kalman_3gyro.isra.6.constprop.36+0x1ebe>
 8015f58:	eef5 5a40 	vcmp.f32	s11, #0.0
 8015f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f60:	bf18      	it	ne
 8015f62:	eee5 7a87 	vfmane.f32	s15, s11, s14
 8015f66:	4294      	cmp	r4, r2
 8015f68:	ed41 7a01 	vstr	s15, [r1, #-4]
 8015f6c:	f47f af7b 	bne.w	8015e66 <m_kalman_3gyro.isra.6.constprop.36+0x1dbe>
 8015f70:	eeb5 da40 	vcmp.f32	s26, #0.0
 8015f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f78:	ed95 ca00 	vldr	s24, [r5]
 8015f7c:	f000 83af 	beq.w	80166de <m_kalman_3gyro.isra.6.constprop.36+0x2636>
 8015f80:	eeb5 ca40 	vcmp.f32	s24, #0.0
 8015f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f88:	f000 83a9 	beq.w	80166de <m_kalman_3gyro.isra.6.constprop.36+0x2636>
 8015f8c:	ee6c 7a0d 	vmul.f32	s15, s24, s26
 8015f90:	eef5 da40 	vcmp.f32	s27, #0.0
 8015f94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f98:	ed95 9a01 	vldr	s18, [r5, #4]
 8015f9c:	d006      	beq.n	8015fac <m_kalman_3gyro.isra.6.constprop.36+0x1f04>
 8015f9e:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8015fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015fa6:	bf18      	it	ne
 8015fa8:	eee9 7a2d 	vfmane.f32	s15, s18, s27
 8015fac:	eeb5 ea40 	vcmp.f32	s28, #0.0
 8015fb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015fb4:	edd5 ba02 	vldr	s23, [r5, #8]
 8015fb8:	d006      	beq.n	8015fc8 <m_kalman_3gyro.isra.6.constprop.36+0x1f20>
 8015fba:	eef5 ba40 	vcmp.f32	s23, #0.0
 8015fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015fc2:	bf18      	it	ne
 8015fc4:	eeee 7a2b 	vfmane.f32	s15, s28, s23
 8015fc8:	eef5 ea40 	vcmp.f32	s29, #0.0
 8015fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015fd0:	edd5 ca03 	vldr	s25, [r5, #12]
 8015fd4:	d006      	beq.n	8015fe4 <m_kalman_3gyro.isra.6.constprop.36+0x1f3c>
 8015fd6:	eef5 ca40 	vcmp.f32	s25, #0.0
 8015fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015fde:	bf18      	it	ne
 8015fe0:	eeee 7aac 	vfmane.f32	s15, s29, s25
 8015fe4:	eeb5 fa40 	vcmp.f32	s30, #0.0
 8015fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015fec:	ed95 ba04 	vldr	s22, [r5, #16]
 8015ff0:	d006      	beq.n	8016000 <m_kalman_3gyro.isra.6.constprop.36+0x1f58>
 8015ff2:	eeb5 ba40 	vcmp.f32	s22, #0.0
 8015ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ffa:	bf18      	it	ne
 8015ffc:	eeef 7a0b 	vfmane.f32	s15, s30, s22
 8016000:	eef5 fa40 	vcmp.f32	s31, #0.0
 8016004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016008:	ed95 aa05 	vldr	s20, [r5, #20]
 801600c:	d006      	beq.n	801601c <m_kalman_3gyro.isra.6.constprop.36+0x1f74>
 801600e:	eeb5 aa40 	vcmp.f32	s20, #0.0
 8016012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016016:	bf18      	it	ne
 8016018:	eeef 7a8a 	vfmane.f32	s15, s31, s20
 801601c:	eef5 6a40 	vcmp.f32	s13, #0.0
 8016020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016024:	edd5 aa06 	vldr	s21, [r5, #24]
 8016028:	d006      	beq.n	8016038 <m_kalman_3gyro.isra.6.constprop.36+0x1f90>
 801602a:	eef5 aa40 	vcmp.f32	s21, #0.0
 801602e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016032:	bf18      	it	ne
 8016034:	eeea 7aa6 	vfmane.f32	s15, s21, s13
 8016038:	eeb5 6a40 	vcmp.f32	s12, #0.0
 801603c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016040:	edd5 9a07 	vldr	s19, [r5, #28]
 8016044:	d006      	beq.n	8016054 <m_kalman_3gyro.isra.6.constprop.36+0x1fac>
 8016046:	eef5 9a40 	vcmp.f32	s19, #0.0
 801604a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801604e:	bf18      	it	ne
 8016050:	eee9 7a86 	vfmane.f32	s15, s19, s12
 8016054:	eef5 5a40 	vcmp.f32	s11, #0.0
 8016058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801605c:	edd5 8a08 	vldr	s17, [r5, #32]
 8016060:	d006      	beq.n	8016070 <m_kalman_3gyro.isra.6.constprop.36+0x1fc8>
 8016062:	eef5 8a40 	vcmp.f32	s17, #0.0
 8016066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801606a:	bf18      	it	ne
 801606c:	eee8 7aa5 	vfmane.f32	s15, s17, s11
 8016070:	f8dd 2698 	ldr.w	r2, [sp, #1688]	; 0x698
 8016074:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 8016078:	ed92 7a00 	vldr	s14, [r2]
 801607c:	eee7 7a07 	vfma.f32	s15, s14, s14
 8016080:	eb09 0249 	add.w	r2, r9, r9, lsl #1
 8016084:	1882      	adds	r2, r0, r2
 8016086:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 801608a:	ee85 7a27 	vdiv.f32	s14, s10, s15
 801608e:	f1b9 0f05 	cmp.w	r9, #5
 8016092:	9202      	str	r2, [sp, #8]
 8016094:	ee27 ca0c 	vmul.f32	s24, s14, s24
 8016098:	ee29 9a07 	vmul.f32	s18, s18, s14
 801609c:	ee67 ba2b 	vmul.f32	s23, s14, s23
 80160a0:	ee67 ca2c 	vmul.f32	s25, s14, s25
 80160a4:	ee27 ba0b 	vmul.f32	s22, s14, s22
 80160a8:	ee27 aa0a 	vmul.f32	s20, s14, s20
 80160ac:	ee67 aa2a 	vmul.f32	s21, s14, s21
 80160b0:	ee69 9a87 	vmul.f32	s19, s19, s14
 80160b4:	ee68 8a87 	vmul.f32	s17, s17, s14
 80160b8:	ed8d ca6b 	vstr	s24, [sp, #428]	; 0x1ac
 80160bc:	ed8d 9a6c 	vstr	s18, [sp, #432]	; 0x1b0
 80160c0:	edcd ba6d 	vstr	s23, [sp, #436]	; 0x1b4
 80160c4:	edcd ca6e 	vstr	s25, [sp, #440]	; 0x1b8
 80160c8:	ed8d ba6f 	vstr	s22, [sp, #444]	; 0x1bc
 80160cc:	ed8d aa70 	vstr	s20, [sp, #448]	; 0x1c0
 80160d0:	edcd aa71 	vstr	s21, [sp, #452]	; 0x1c4
 80160d4:	edcd 9a72 	vstr	s19, [sp, #456]	; 0x1c8
 80160d8:	edcd 8a73 	vstr	s17, [sp, #460]	; 0x1cc
 80160dc:	f340 8087 	ble.w	80161ee <m_kalman_3gyro.isra.6.constprop.36+0x2146>
 80160e0:	eeb5 da40 	vcmp.f32	s26, #0.0
 80160e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80160e8:	ed92 7a19 	vldr	s14, [r2, #100]	; 0x64
 80160ec:	f000 83cd 	beq.w	801688a <m_kalman_3gyro.isra.6.constprop.36+0x27e2>
 80160f0:	edda 7a25 	vldr	s15, [sl, #148]	; 0x94
 80160f4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80160f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80160fc:	f000 83c5 	beq.w	801688a <m_kalman_3gyro.isra.6.constprop.36+0x27e2>
 8016100:	ee67 7a8d 	vmul.f32	s15, s15, s26
 8016104:	eef5 da40 	vcmp.f32	s27, #0.0
 8016108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801610c:	d008      	beq.n	8016120 <m_kalman_3gyro.isra.6.constprop.36+0x2078>
 801610e:	ed9a 5a26 	vldr	s10, [sl, #152]	; 0x98
 8016112:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8016116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801611a:	bf18      	it	ne
 801611c:	eee5 7a2d 	vfmane.f32	s15, s10, s27
 8016120:	eeb5 ea40 	vcmp.f32	s28, #0.0
 8016124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016128:	d008      	beq.n	801613c <m_kalman_3gyro.isra.6.constprop.36+0x2094>
 801612a:	ed9a 5a27 	vldr	s10, [sl, #156]	; 0x9c
 801612e:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8016132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016136:	bf18      	it	ne
 8016138:	eee5 7a0e 	vfmane.f32	s15, s10, s28
 801613c:	eef5 ea40 	vcmp.f32	s29, #0.0
 8016140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016144:	d008      	beq.n	8016158 <m_kalman_3gyro.isra.6.constprop.36+0x20b0>
 8016146:	ed9a 5a28 	vldr	s10, [sl, #160]	; 0xa0
 801614a:	eeb5 5a40 	vcmp.f32	s10, #0.0
 801614e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016152:	bf18      	it	ne
 8016154:	eee5 7a2e 	vfmane.f32	s15, s10, s29
 8016158:	eeb5 fa40 	vcmp.f32	s30, #0.0
 801615c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016160:	d008      	beq.n	8016174 <m_kalman_3gyro.isra.6.constprop.36+0x20cc>
 8016162:	ed9a 5a29 	vldr	s10, [sl, #164]	; 0xa4
 8016166:	eeb5 5a40 	vcmp.f32	s10, #0.0
 801616a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801616e:	bf18      	it	ne
 8016170:	eee5 7a0f 	vfmane.f32	s15, s10, s30
 8016174:	eef5 fa40 	vcmp.f32	s31, #0.0
 8016178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801617c:	d008      	beq.n	8016190 <m_kalman_3gyro.isra.6.constprop.36+0x20e8>
 801617e:	ed9a 5a2a 	vldr	s10, [sl, #168]	; 0xa8
 8016182:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8016186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801618a:	bf18      	it	ne
 801618c:	eee5 7a2f 	vfmane.f32	s15, s10, s31
 8016190:	eef5 6a40 	vcmp.f32	s13, #0.0
 8016194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016198:	d008      	beq.n	80161ac <m_kalman_3gyro.isra.6.constprop.36+0x2104>
 801619a:	ed9a 5a2b 	vldr	s10, [sl, #172]	; 0xac
 801619e:	eeb5 5a40 	vcmp.f32	s10, #0.0
 80161a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80161a6:	bf18      	it	ne
 80161a8:	eee5 7a26 	vfmane.f32	s15, s10, s13
 80161ac:	eeb5 6a40 	vcmp.f32	s12, #0.0
 80161b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80161b4:	d008      	beq.n	80161c8 <m_kalman_3gyro.isra.6.constprop.36+0x2120>
 80161b6:	ed9a 5a2c 	vldr	s10, [sl, #176]	; 0xb0
 80161ba:	eeb5 5a40 	vcmp.f32	s10, #0.0
 80161be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80161c2:	bf18      	it	ne
 80161c4:	eee5 7a06 	vfmane.f32	s15, s10, s12
 80161c8:	eef5 5a40 	vcmp.f32	s11, #0.0
 80161cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80161d0:	d008      	beq.n	80161e4 <m_kalman_3gyro.isra.6.constprop.36+0x213c>
 80161d2:	ed9a 5a2d 	vldr	s10, [sl, #180]	; 0xb4
 80161d6:	eeb5 5a40 	vcmp.f32	s10, #0.0
 80161da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80161de:	bf18      	it	ne
 80161e0:	eee5 7a25 	vfmane.f32	s15, s10, s11
 80161e4:	9a02      	ldr	r2, [sp, #8]
 80161e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80161ea:	edc2 7a19 	vstr	s15, [r2, #100]	; 0x64
 80161ee:	f44f 72a2 	mov.w	r2, #324	; 0x144
 80161f2:	2100      	movs	r1, #0
 80161f4:	4658      	mov	r0, fp
 80161f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80161f8:	edcd 5a0a 	vstr	s11, [sp, #40]	; 0x28
 80161fc:	ed8d 6a08 	vstr	s12, [sp, #32]
 8016200:	edcd 6a06 	vstr	s13, [sp, #24]
 8016204:	f004 fa07 	bl	801a616 <memset>
 8016208:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801620a:	eddd 5a0a 	vldr	s11, [sp, #40]	; 0x28
 801620e:	ed9d 6a08 	vldr	s12, [sp, #32]
 8016212:	eddd 6a06 	vldr	s13, [sp, #24]
 8016216:	465c      	mov	r4, fp
 8016218:	a96b      	add	r1, sp, #428	; 0x1ac
 801621a:	465a      	mov	r2, fp
 801621c:	ecf1 7a01 	vldmia	r1!, {s15}
 8016220:	eef5 7a40 	vcmp.f32	s15, #0.0
 8016224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016228:	d062      	beq.n	80162f0 <m_kalman_3gyro.isra.6.constprop.36+0x2248>
 801622a:	eeb5 da40 	vcmp.f32	s26, #0.0
 801622e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016232:	d005      	beq.n	8016240 <m_kalman_3gyro.isra.6.constprop.36+0x2198>
 8016234:	ed92 7a00 	vldr	s14, [r2]
 8016238:	eea7 7a8d 	vfma.f32	s14, s15, s26
 801623c:	ed82 7a00 	vstr	s14, [r2]
 8016240:	eef5 da40 	vcmp.f32	s27, #0.0
 8016244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016248:	d005      	beq.n	8016256 <m_kalman_3gyro.isra.6.constprop.36+0x21ae>
 801624a:	ed92 7a09 	vldr	s14, [r2, #36]	; 0x24
 801624e:	eea7 7aad 	vfma.f32	s14, s15, s27
 8016252:	ed82 7a09 	vstr	s14, [r2, #36]	; 0x24
 8016256:	eeb5 ea40 	vcmp.f32	s28, #0.0
 801625a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801625e:	d005      	beq.n	801626c <m_kalman_3gyro.isra.6.constprop.36+0x21c4>
 8016260:	ed92 7a12 	vldr	s14, [r2, #72]	; 0x48
 8016264:	eea7 7a8e 	vfma.f32	s14, s15, s28
 8016268:	ed82 7a12 	vstr	s14, [r2, #72]	; 0x48
 801626c:	eef5 ea40 	vcmp.f32	s29, #0.0
 8016270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016274:	d005      	beq.n	8016282 <m_kalman_3gyro.isra.6.constprop.36+0x21da>
 8016276:	ed92 7a1b 	vldr	s14, [r2, #108]	; 0x6c
 801627a:	eea7 7aae 	vfma.f32	s14, s15, s29
 801627e:	ed82 7a1b 	vstr	s14, [r2, #108]	; 0x6c
 8016282:	eeb5 fa40 	vcmp.f32	s30, #0.0
 8016286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801628a:	d005      	beq.n	8016298 <m_kalman_3gyro.isra.6.constprop.36+0x21f0>
 801628c:	ed92 7a24 	vldr	s14, [r2, #144]	; 0x90
 8016290:	eea7 7a8f 	vfma.f32	s14, s15, s30
 8016294:	ed82 7a24 	vstr	s14, [r2, #144]	; 0x90
 8016298:	eef5 fa40 	vcmp.f32	s31, #0.0
 801629c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162a0:	d005      	beq.n	80162ae <m_kalman_3gyro.isra.6.constprop.36+0x2206>
 80162a2:	ed92 7a2d 	vldr	s14, [r2, #180]	; 0xb4
 80162a6:	eea7 7aaf 	vfma.f32	s14, s15, s31
 80162aa:	ed82 7a2d 	vstr	s14, [r2, #180]	; 0xb4
 80162ae:	eef5 6a40 	vcmp.f32	s13, #0.0
 80162b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162b6:	d005      	beq.n	80162c4 <m_kalman_3gyro.isra.6.constprop.36+0x221c>
 80162b8:	ed92 7a36 	vldr	s14, [r2, #216]	; 0xd8
 80162bc:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80162c0:	ed82 7a36 	vstr	s14, [r2, #216]	; 0xd8
 80162c4:	eeb5 6a40 	vcmp.f32	s12, #0.0
 80162c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162cc:	d005      	beq.n	80162da <m_kalman_3gyro.isra.6.constprop.36+0x2232>
 80162ce:	ed92 7a3f 	vldr	s14, [r2, #252]	; 0xfc
 80162d2:	eea7 7a86 	vfma.f32	s14, s15, s12
 80162d6:	ed82 7a3f 	vstr	s14, [r2, #252]	; 0xfc
 80162da:	eef5 5a40 	vcmp.f32	s11, #0.0
 80162de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162e2:	d005      	beq.n	80162f0 <m_kalman_3gyro.isra.6.constprop.36+0x2248>
 80162e4:	ed92 7a48 	vldr	s14, [r2, #288]	; 0x120
 80162e8:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80162ec:	ed82 7a48 	vstr	s14, [r2, #288]	; 0x120
 80162f0:	42a9      	cmp	r1, r5
 80162f2:	f102 0204 	add.w	r2, r2, #4
 80162f6:	d191      	bne.n	801621c <m_kalman_3gyro.isra.6.constprop.36+0x2174>
 80162f8:	f8df c664 	ldr.w	ip, [pc, #1636]	; 8016960 <m_kalman_3gyro.isra.6.constprop.36+0x28b8>
 80162fc:	4658      	mov	r0, fp
 80162fe:	2100      	movs	r1, #0
 8016300:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016304:	fbac e201 	umull	lr, r2, ip, r1
 8016308:	edd0 7a00 	vldr	s15, [r0]
 801630c:	08d2      	lsrs	r2, r2, #3
 801630e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8016312:	ebb1 0f42 	cmp.w	r1, r2, lsl #1
 8016316:	ee36 7ae7 	vsub.f32	s14, s13, s15
 801631a:	f101 0101 	add.w	r1, r1, #1
 801631e:	bf16      	itet	ne
 8016320:	eef1 7a67 	vnegne.f32	s15, s15
 8016324:	ed80 7a00 	vstreq	s14, [r0]
 8016328:	edc0 7a00 	vstrne	s15, [r0]
 801632c:	2951      	cmp	r1, #81	; 0x51
 801632e:	f100 0004 	add.w	r0, r0, #4
 8016332:	d1e7      	bne.n	8016304 <m_kalman_3gyro.isra.6.constprop.36+0x225c>
 8016334:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8016338:	9904      	ldr	r1, [sp, #16]
 801633a:	9306      	str	r3, [sp, #24]
 801633c:	4640      	mov	r0, r8
 801633e:	f004 f95f 	bl	801a600 <memcpy>
 8016342:	9804      	ldr	r0, [sp, #16]
 8016344:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8016348:	2100      	movs	r1, #0
 801634a:	f004 f964 	bl	801a616 <memset>
 801634e:	9b06      	ldr	r3, [sp, #24]
 8016350:	f10b 0c24 	add.w	ip, fp, #36	; 0x24
 8016354:	f50d 60c6 	add.w	r0, sp, #1584	; 0x630
 8016358:	ecf4 3a01 	vldmia	r4!, {s7}
 801635c:	ed94 4a08 	vldr	s8, [r4, #32]
 8016360:	edd4 4a11 	vldr	s9, [r4, #68]	; 0x44
 8016364:	ed94 5a1a 	vldr	s10, [r4, #104]	; 0x68
 8016368:	edd4 5a23 	vldr	s11, [r4, #140]	; 0x8c
 801636c:	ed94 6a2c 	vldr	s12, [r4, #176]	; 0xb0
 8016370:	edd4 6a35 	vldr	s13, [r4, #212]	; 0xd4
 8016374:	ed94 7a3e 	vldr	s14, [r4, #248]	; 0xf8
 8016378:	edd4 7a47 	vldr	s15, [r4, #284]	; 0x11c
 801637c:	4642      	mov	r2, r8
 801637e:	4631      	mov	r1, r6
 8016380:	eef5 3a40 	vcmp.f32	s7, #0.0
 8016384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016388:	d00c      	beq.n	80163a4 <m_kalman_3gyro.isra.6.constprop.36+0x22fc>
 801638a:	ed92 3a00 	vldr	s6, [r2]
 801638e:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8016392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016396:	d005      	beq.n	80163a4 <m_kalman_3gyro.isra.6.constprop.36+0x22fc>
 8016398:	edd1 2a00 	vldr	s5, [r1]
 801639c:	eee3 2a83 	vfma.f32	s5, s7, s6
 80163a0:	edc1 2a00 	vstr	s5, [r1]
 80163a4:	eeb5 4a40 	vcmp.f32	s8, #0.0
 80163a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80163ac:	d00c      	beq.n	80163c8 <m_kalman_3gyro.isra.6.constprop.36+0x2320>
 80163ae:	ed92 3a01 	vldr	s6, [r2, #4]
 80163b2:	eeb5 3a40 	vcmp.f32	s6, #0.0
 80163b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80163ba:	d005      	beq.n	80163c8 <m_kalman_3gyro.isra.6.constprop.36+0x2320>
 80163bc:	edd1 2a00 	vldr	s5, [r1]
 80163c0:	eee4 2a03 	vfma.f32	s5, s8, s6
 80163c4:	edc1 2a00 	vstr	s5, [r1]
 80163c8:	eef5 4a40 	vcmp.f32	s9, #0.0
 80163cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80163d0:	d00c      	beq.n	80163ec <m_kalman_3gyro.isra.6.constprop.36+0x2344>
 80163d2:	ed92 3a02 	vldr	s6, [r2, #8]
 80163d6:	eeb5 3a40 	vcmp.f32	s6, #0.0
 80163da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80163de:	d005      	beq.n	80163ec <m_kalman_3gyro.isra.6.constprop.36+0x2344>
 80163e0:	edd1 2a00 	vldr	s5, [r1]
 80163e4:	eee4 2a83 	vfma.f32	s5, s9, s6
 80163e8:	edc1 2a00 	vstr	s5, [r1]
 80163ec:	eeb5 5a40 	vcmp.f32	s10, #0.0
 80163f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80163f4:	d00c      	beq.n	8016410 <m_kalman_3gyro.isra.6.constprop.36+0x2368>
 80163f6:	ed92 3a03 	vldr	s6, [r2, #12]
 80163fa:	eeb5 3a40 	vcmp.f32	s6, #0.0
 80163fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016402:	d005      	beq.n	8016410 <m_kalman_3gyro.isra.6.constprop.36+0x2368>
 8016404:	edd1 2a00 	vldr	s5, [r1]
 8016408:	eee5 2a03 	vfma.f32	s5, s10, s6
 801640c:	edc1 2a00 	vstr	s5, [r1]
 8016410:	eef5 5a40 	vcmp.f32	s11, #0.0
 8016414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016418:	d00c      	beq.n	8016434 <m_kalman_3gyro.isra.6.constprop.36+0x238c>
 801641a:	ed92 3a04 	vldr	s6, [r2, #16]
 801641e:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8016422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016426:	d005      	beq.n	8016434 <m_kalman_3gyro.isra.6.constprop.36+0x238c>
 8016428:	edd1 2a00 	vldr	s5, [r1]
 801642c:	eee5 2a83 	vfma.f32	s5, s11, s6
 8016430:	edc1 2a00 	vstr	s5, [r1]
 8016434:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8016438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801643c:	d00c      	beq.n	8016458 <m_kalman_3gyro.isra.6.constprop.36+0x23b0>
 801643e:	ed92 3a05 	vldr	s6, [r2, #20]
 8016442:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8016446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801644a:	d005      	beq.n	8016458 <m_kalman_3gyro.isra.6.constprop.36+0x23b0>
 801644c:	edd1 2a00 	vldr	s5, [r1]
 8016450:	eee6 2a03 	vfma.f32	s5, s12, s6
 8016454:	edc1 2a00 	vstr	s5, [r1]
 8016458:	eef5 6a40 	vcmp.f32	s13, #0.0
 801645c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016460:	d00c      	beq.n	801647c <m_kalman_3gyro.isra.6.constprop.36+0x23d4>
 8016462:	ed92 3a06 	vldr	s6, [r2, #24]
 8016466:	eeb5 3a40 	vcmp.f32	s6, #0.0
 801646a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801646e:	d005      	beq.n	801647c <m_kalman_3gyro.isra.6.constprop.36+0x23d4>
 8016470:	edd1 2a00 	vldr	s5, [r1]
 8016474:	eee6 2a83 	vfma.f32	s5, s13, s6
 8016478:	edc1 2a00 	vstr	s5, [r1]
 801647c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8016480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016484:	d00c      	beq.n	80164a0 <m_kalman_3gyro.isra.6.constprop.36+0x23f8>
 8016486:	ed92 3a07 	vldr	s6, [r2, #28]
 801648a:	eeb5 3a40 	vcmp.f32	s6, #0.0
 801648e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016492:	d005      	beq.n	80164a0 <m_kalman_3gyro.isra.6.constprop.36+0x23f8>
 8016494:	edd1 2a00 	vldr	s5, [r1]
 8016498:	eee7 2a03 	vfma.f32	s5, s14, s6
 801649c:	edc1 2a00 	vstr	s5, [r1]
 80164a0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80164a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80164a8:	d00c      	beq.n	80164c4 <m_kalman_3gyro.isra.6.constprop.36+0x241c>
 80164aa:	ed92 3a08 	vldr	s6, [r2, #32]
 80164ae:	eeb5 3a40 	vcmp.f32	s6, #0.0
 80164b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80164b6:	d005      	beq.n	80164c4 <m_kalman_3gyro.isra.6.constprop.36+0x241c>
 80164b8:	edd1 2a00 	vldr	s5, [r1]
 80164bc:	eee7 2a83 	vfma.f32	s5, s15, s6
 80164c0:	edc1 2a00 	vstr	s5, [r1]
 80164c4:	3224      	adds	r2, #36	; 0x24
 80164c6:	4282      	cmp	r2, r0
 80164c8:	f101 0124 	add.w	r1, r1, #36	; 0x24
 80164cc:	f47f af58 	bne.w	8016380 <m_kalman_3gyro.isra.6.constprop.36+0x22d8>
 80164d0:	45a4      	cmp	ip, r4
 80164d2:	f106 0604 	add.w	r6, r6, #4
 80164d6:	f47f af3f 	bne.w	8016358 <m_kalman_3gyro.isra.6.constprop.36+0x22b0>
 80164da:	9a02      	ldr	r2, [sp, #8]
 80164dc:	ed85 8a00 	vstr	s16, [r5]
 80164e0:	eeb5 ca40 	vcmp.f32	s24, #0.0
 80164e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80164e8:	ed85 8a01 	vstr	s16, [r5, #4]
 80164ec:	edd2 7a19 	vldr	s15, [r2, #100]	; 0x64
 80164f0:	f000 8098 	beq.w	8016624 <m_kalman_3gyro.isra.6.constprop.36+0x257c>
 80164f4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80164f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80164fc:	f000 8092 	beq.w	8016624 <m_kalman_3gyro.isra.6.constprop.36+0x257c>
 8016500:	ee27 ca8c 	vmul.f32	s24, s15, s24
 8016504:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8016508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801650c:	ed85 ca00 	vstr	s24, [r5]
 8016510:	f040 85a1 	bne.w	8017056 <m_kalman_3gyro.isra.6.constprop.36+0x2fae>
 8016514:	eef5 ba40 	vcmp.f32	s23, #0.0
 8016518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801651c:	eeb0 9a48 	vmov.f32	s18, s16
 8016520:	f000 8090 	beq.w	8016644 <m_kalman_3gyro.isra.6.constprop.36+0x259c>
 8016524:	ee67 baab 	vmul.f32	s23, s15, s23
 8016528:	eef5 ca40 	vcmp.f32	s25, #0.0
 801652c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016530:	edc5 ba02 	vstr	s23, [r5, #8]
 8016534:	f000 8095 	beq.w	8016662 <m_kalman_3gyro.isra.6.constprop.36+0x25ba>
 8016538:	ee67 caac 	vmul.f32	s25, s15, s25
 801653c:	eeb5 ba40 	vcmp.f32	s22, #0.0
 8016540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016544:	edc5 ca03 	vstr	s25, [r5, #12]
 8016548:	f000 80eb 	beq.w	8016722 <m_kalman_3gyro.isra.6.constprop.36+0x267a>
 801654c:	ee27 ba8b 	vmul.f32	s22, s15, s22
 8016550:	eeb5 aa40 	vcmp.f32	s20, #0.0
 8016554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016558:	ed85 ba04 	vstr	s22, [r5, #16]
 801655c:	f000 8094 	beq.w	8016688 <m_kalman_3gyro.isra.6.constprop.36+0x25e0>
 8016560:	ee27 aa8a 	vmul.f32	s20, s15, s20
 8016564:	eef5 aa40 	vcmp.f32	s21, #0.0
 8016568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801656c:	ed85 aa05 	vstr	s20, [r5, #20]
 8016570:	f000 80ba 	beq.w	80166e8 <m_kalman_3gyro.isra.6.constprop.36+0x2640>
 8016574:	ee67 aaaa 	vmul.f32	s21, s15, s21
 8016578:	eef5 9a40 	vcmp.f32	s19, #0.0
 801657c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016580:	edc5 aa06 	vstr	s21, [r5, #24]
 8016584:	f000 8098 	beq.w	80166b8 <m_kalman_3gyro.isra.6.constprop.36+0x2610>
 8016588:	ee67 9aa9 	vmul.f32	s19, s15, s19
 801658c:	eef5 8a40 	vcmp.f32	s17, #0.0
 8016590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016594:	edc5 9a07 	vstr	s19, [r5, #28]
 8016598:	f040 809e 	bne.w	80166d8 <m_kalman_3gyro.isra.6.constprop.36+0x2630>
 801659c:	eef0 7a48 	vmov.f32	s15, s16
 80165a0:	ed9a 4a25 	vldr	s8, [sl, #148]	; 0x94
 80165a4:	edda 6a26 	vldr	s13, [sl, #152]	; 0x98
 80165a8:	edda 4a27 	vldr	s9, [sl, #156]	; 0x9c
 80165ac:	edda 3a28 	vldr	s7, [sl, #160]	; 0xa0
 80165b0:	ed9a 5a29 	vldr	s10, [sl, #164]	; 0xa4
 80165b4:	ed9a 6a2a 	vldr	s12, [sl, #168]	; 0xa8
 80165b8:	edda 5a2b 	vldr	s11, [sl, #172]	; 0xac
 80165bc:	ed9a 3a2c 	vldr	s6, [sl, #176]	; 0xb0
 80165c0:	ed9a 7a2d 	vldr	s14, [sl, #180]	; 0xb4
 80165c4:	edc5 7a08 	vstr	s15, [r5, #32]
 80165c8:	ee34 ca0c 	vadd.f32	s24, s8, s24
 80165cc:	ee36 9a89 	vadd.f32	s18, s13, s18
 80165d0:	ee74 baab 	vadd.f32	s23, s9, s23
 80165d4:	ee73 caac 	vadd.f32	s25, s7, s25
 80165d8:	ee35 ba0b 	vadd.f32	s22, s10, s22
 80165dc:	ee36 aa0a 	vadd.f32	s20, s12, s20
 80165e0:	ee75 aaaa 	vadd.f32	s21, s11, s21
 80165e4:	ee73 9a29 	vadd.f32	s19, s6, s19
 80165e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80165ec:	ed8a ca25 	vstr	s24, [sl, #148]	; 0x94
 80165f0:	ed8a 9a26 	vstr	s18, [sl, #152]	; 0x98
 80165f4:	edca ba27 	vstr	s23, [sl, #156]	; 0x9c
 80165f8:	edca ca28 	vstr	s25, [sl, #160]	; 0xa0
 80165fc:	ed8a ba29 	vstr	s22, [sl, #164]	; 0xa4
 8016600:	ed8a aa2a 	vstr	s20, [sl, #168]	; 0xa8
 8016604:	edca aa2b 	vstr	s21, [sl, #172]	; 0xac
 8016608:	edca 9a2c 	vstr	s19, [sl, #176]	; 0xb0
 801660c:	edca 7a2d 	vstr	s15, [sl, #180]	; 0xb4
 8016610:	f7ff bbcd 	b.w	8015dae <m_kalman_3gyro.isra.6.constprop.36+0x1d06>
 8016614:	edd3 6a00 	vldr	s13, [r3]
 8016618:	ed93 7a03 	vldr	s14, [r3, #12]
 801661c:	edd3 7a06 	vldr	s15, [r3, #24]
 8016620:	f7ff bbb4 	b.w	8015d8c <m_kalman_3gyro.isra.6.constprop.36+0x1ce4>
 8016624:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8016628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801662c:	f000 8130 	beq.w	8016890 <m_kalman_3gyro.isra.6.constprop.36+0x27e8>
 8016630:	eef5 7a40 	vcmp.f32	s15, #0.0
 8016634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016638:	f040 850b 	bne.w	8017052 <m_kalman_3gyro.isra.6.constprop.36+0x2faa>
 801663c:	eeb0 9a48 	vmov.f32	s18, s16
 8016640:	eeb0 ca48 	vmov.f32	s24, s16
 8016644:	eef5 ca40 	vcmp.f32	s25, #0.0
 8016648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801664c:	ed85 8a02 	vstr	s16, [r5, #8]
 8016650:	d077      	beq.n	8016742 <m_kalman_3gyro.isra.6.constprop.36+0x269a>
 8016652:	eef5 7a40 	vcmp.f32	s15, #0.0
 8016656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801665a:	eef0 ba48 	vmov.f32	s23, s16
 801665e:	f47f af6b 	bne.w	8016538 <m_kalman_3gyro.isra.6.constprop.36+0x2490>
 8016662:	eeb5 ba40 	vcmp.f32	s22, #0.0
 8016666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801666a:	ed85 8a03 	vstr	s16, [r5, #12]
 801666e:	d056      	beq.n	801671e <m_kalman_3gyro.isra.6.constprop.36+0x2676>
 8016670:	eef5 7a40 	vcmp.f32	s15, #0.0
 8016674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016678:	f041 813a 	bne.w	80178f0 <m_kalman_3gyro.isra.6.constprop.36+0x3848>
 801667c:	ed85 8a04 	vstr	s16, [r5, #16]
 8016680:	eeb0 ba48 	vmov.f32	s22, s16
 8016684:	eef0 ca48 	vmov.f32	s25, s16
 8016688:	eef5 aa40 	vcmp.f32	s21, #0.0
 801668c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016690:	ed85 8a05 	vstr	s16, [r5, #20]
 8016694:	d026      	beq.n	80166e4 <m_kalman_3gyro.isra.6.constprop.36+0x263c>
 8016696:	eef5 7a40 	vcmp.f32	s15, #0.0
 801669a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801669e:	f041 8123 	bne.w	80178e8 <m_kalman_3gyro.isra.6.constprop.36+0x3840>
 80166a2:	eef5 9a40 	vcmp.f32	s19, #0.0
 80166a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166aa:	ed85 8a06 	vstr	s16, [r5, #24]
 80166ae:	d12b      	bne.n	8016708 <m_kalman_3gyro.isra.6.constprop.36+0x2660>
 80166b0:	eef0 aa48 	vmov.f32	s21, s16
 80166b4:	eeb0 aa48 	vmov.f32	s20, s16
 80166b8:	eef5 8a40 	vcmp.f32	s17, #0.0
 80166bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166c0:	ed85 8a07 	vstr	s16, [r5, #28]
 80166c4:	f000 84bf 	beq.w	8017046 <m_kalman_3gyro.isra.6.constprop.36+0x2f9e>
 80166c8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80166cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166d0:	eef0 9a48 	vmov.f32	s19, s16
 80166d4:	f43f af62 	beq.w	801659c <m_kalman_3gyro.isra.6.constprop.36+0x24f4>
 80166d8:	ee67 7aa8 	vmul.f32	s15, s15, s17
 80166dc:	e760      	b.n	80165a0 <m_kalman_3gyro.isra.6.constprop.36+0x24f8>
 80166de:	eddf 7a9e 	vldr	s15, [pc, #632]	; 8016958 <m_kalman_3gyro.isra.6.constprop.36+0x28b0>
 80166e2:	e455      	b.n	8015f90 <m_kalman_3gyro.isra.6.constprop.36+0x1ee8>
 80166e4:	eeb0 aa48 	vmov.f32	s20, s16
 80166e8:	eef5 9a40 	vcmp.f32	s19, #0.0
 80166ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166f0:	ed85 8a06 	vstr	s16, [r5, #24]
 80166f4:	f000 849d 	beq.w	8017032 <m_kalman_3gyro.isra.6.constprop.36+0x2f8a>
 80166f8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80166fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016700:	d004      	beq.n	801670c <m_kalman_3gyro.isra.6.constprop.36+0x2664>
 8016702:	eef0 aa48 	vmov.f32	s21, s16
 8016706:	e73f      	b.n	8016588 <m_kalman_3gyro.isra.6.constprop.36+0x24e0>
 8016708:	eeb0 aa48 	vmov.f32	s20, s16
 801670c:	ed85 8a07 	vstr	s16, [r5, #28]
 8016710:	eef0 9a48 	vmov.f32	s19, s16
 8016714:	eef0 aa48 	vmov.f32	s21, s16
 8016718:	eef0 7a48 	vmov.f32	s15, s16
 801671c:	e740      	b.n	80165a0 <m_kalman_3gyro.isra.6.constprop.36+0x24f8>
 801671e:	eef0 ca48 	vmov.f32	s25, s16
 8016722:	eeb5 aa40 	vcmp.f32	s20, #0.0
 8016726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801672a:	ed85 8a04 	vstr	s16, [r5, #16]
 801672e:	f000 849e 	beq.w	801706e <m_kalman_3gyro.isra.6.constprop.36+0x2fc6>
 8016732:	eef5 7a40 	vcmp.f32	s15, #0.0
 8016736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801673a:	eeb0 ba48 	vmov.f32	s22, s16
 801673e:	d0a3      	beq.n	8016688 <m_kalman_3gyro.isra.6.constprop.36+0x25e0>
 8016740:	e70e      	b.n	8016560 <m_kalman_3gyro.isra.6.constprop.36+0x24b8>
 8016742:	eef0 ba48 	vmov.f32	s23, s16
 8016746:	e78c      	b.n	8016662 <m_kalman_3gyro.isra.6.constprop.36+0x25ba>
 8016748:	edda 8a26 	vldr	s17, [sl, #152]	; 0x98
 801674c:	ed9a 9a25 	vldr	s18, [sl, #148]	; 0x94
 8016750:	ed9a 8a27 	vldr	s16, [sl, #156]	; 0x9c
 8016754:	ee28 aaa8 	vmul.f32	s20, s17, s17
 8016758:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801675c:	eea9 aa09 	vfma.f32	s20, s18, s18
 8016760:	eea8 aa08 	vfma.f32	s20, s16, s16
 8016764:	eeb4 aae7 	vcmpe.f32	s20, s15
 8016768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801676c:	f100 84f3 	bmi.w	8017156 <m_kalman_3gyro.isra.6.constprop.36+0x30ae>
 8016770:	eddf 9a79 	vldr	s19, [pc, #484]	; 8016958 <m_kalman_3gyro.isra.6.constprop.36+0x28b0>
 8016774:	f8ba 3030 	ldrh.w	r3, [sl, #48]	; 0x30
 8016778:	2b00      	cmp	r3, #0
 801677a:	f000 847c 	beq.w	8017076 <m_kalman_3gyro.isra.6.constprop.36+0x2fce>
 801677e:	f8dd 06c8 	ldr.w	r0, [sp, #1736]	; 0x6c8
 8016782:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016784:	2300      	movs	r3, #0
 8016786:	6003      	str	r3, [r0, #0]
 8016788:	f8dd 06c8 	ldr.w	r0, [sp, #1736]	; 0x6c8
 801678c:	600b      	str	r3, [r1, #0]
 801678e:	6043      	str	r3, [r0, #4]
 8016790:	f8dd 06c8 	ldr.w	r0, [sp, #1736]	; 0x6c8
 8016794:	604b      	str	r3, [r1, #4]
 8016796:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801679a:	608b      	str	r3, [r1, #8]
 801679c:	6083      	str	r3, [r0, #8]
 801679e:	60ca      	str	r2, [r1, #12]
 80167a0:	60c2      	str	r2, [r0, #12]
 80167a2:	460f      	mov	r7, r1
 80167a4:	4638      	mov	r0, r7
 80167a6:	9901      	ldr	r1, [sp, #4]
 80167a8:	f7f9 f99e 	bl	800fae8 <m_q2dcm_eml>
 80167ac:	ed97 9a01 	vldr	s18, [r7, #4]
 80167b0:	edd7 9a00 	vldr	s19, [r7]
 80167b4:	edd7 8a02 	vldr	s17, [r7, #8]
 80167b8:	ed97 8a03 	vldr	s16, [r7, #12]
 80167bc:	ee69 7a09 	vmul.f32	s15, s18, s18
 80167c0:	f50a 7616 	add.w	r6, sl, #600	; 0x258
 80167c4:	eee9 7aa9 	vfma.f32	s15, s19, s19
 80167c8:	eee8 7aa8 	vfma.f32	s15, s17, s17
 80167cc:	eee8 7a08 	vfma.f32	s15, s16, s16
 80167d0:	ee17 0a90 	vmov	r0, s15
 80167d4:	f7e9 fec0 	bl	8000558 <__aeabi_f2d>
 80167d8:	f005 f864 	bl	801b8a4 <sqrt>
 80167dc:	f7ea f9ec 	bl	8000bb8 <__aeabi_d2f>
 80167e0:	ee07 0a90 	vmov	s15, r0
 80167e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80167e8:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80167ec:	e9dd 5429 	ldrd	r5, r4, [sp, #164]	; 0xa4
 80167f0:	ee69 9aa7 	vmul.f32	s19, s19, s15
 80167f4:	ee29 9a27 	vmul.f32	s18, s18, s15
 80167f8:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80167fc:	ee28 8a27 	vmul.f32	s16, s16, s15
 8016800:	edc7 9a00 	vstr	s19, [r7]
 8016804:	ed87 9a01 	vstr	s18, [r7, #4]
 8016808:	edc7 8a02 	vstr	s17, [r7, #8]
 801680c:	ed87 8a03 	vstr	s16, [r7, #12]
 8016810:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8016814:	f8dd 76c4 	ldr.w	r7, [sp, #1732]	; 0x6c4
 8016818:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 801681c:	6821      	ldr	r1, [r4, #0]
 801681e:	6862      	ldr	r2, [r4, #4]
 8016820:	68a3      	ldr	r3, [r4, #8]
 8016822:	68e0      	ldr	r0, [r4, #12]
 8016824:	60e8      	str	r0, [r5, #12]
 8016826:	3410      	adds	r4, #16
 8016828:	42b4      	cmp	r4, r6
 801682a:	6029      	str	r1, [r5, #0]
 801682c:	606a      	str	r2, [r5, #4]
 801682e:	60ab      	str	r3, [r5, #8]
 8016830:	f105 0510 	add.w	r5, r5, #16
 8016834:	d1f2      	bne.n	801681c <m_kalman_3gyro.isra.6.constprop.36+0x2774>
 8016836:	6823      	ldr	r3, [r4, #0]
 8016838:	602b      	str	r3, [r5, #0]
 801683a:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 801683e:	f8da 3094 	ldr.w	r3, [sl, #148]	; 0x94
 8016842:	6013      	str	r3, [r2, #0]
 8016844:	f8da 3098 	ldr.w	r3, [sl, #152]	; 0x98
 8016848:	6053      	str	r3, [r2, #4]
 801684a:	f8da 309c 	ldr.w	r3, [sl, #156]	; 0x9c
 801684e:	6093      	str	r3, [r2, #8]
 8016850:	f8da 30a0 	ldr.w	r3, [sl, #160]	; 0xa0
 8016854:	60d3      	str	r3, [r2, #12]
 8016856:	f8da 30a4 	ldr.w	r3, [sl, #164]	; 0xa4
 801685a:	6113      	str	r3, [r2, #16]
 801685c:	f8da 30a8 	ldr.w	r3, [sl, #168]	; 0xa8
 8016860:	6153      	str	r3, [r2, #20]
 8016862:	f8da 30ac 	ldr.w	r3, [sl, #172]	; 0xac
 8016866:	6193      	str	r3, [r2, #24]
 8016868:	f8da 30b0 	ldr.w	r3, [sl, #176]	; 0xb0
 801686c:	61d3      	str	r3, [r2, #28]
 801686e:	f8da 30b4 	ldr.w	r3, [sl, #180]	; 0xb4
 8016872:	6213      	str	r3, [r2, #32]
 8016874:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016876:	f8dd 26cc 	ldr.w	r2, [sp, #1740]	; 0x6cc
 801687a:	681b      	ldr	r3, [r3, #0]
 801687c:	6013      	str	r3, [r2, #0]
 801687e:	f20d 6d34 	addw	sp, sp, #1588	; 0x634
 8016882:	ecbd 8b10 	vpop	{d8-d15}
 8016886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801688a:	eddf 7a33 	vldr	s15, [pc, #204]	; 8016958 <m_kalman_3gyro.isra.6.constprop.36+0x28b0>
 801688e:	e439      	b.n	8016104 <m_kalman_3gyro.isra.6.constprop.36+0x205c>
 8016890:	eef5 ba40 	vcmp.f32	s23, #0.0
 8016894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016898:	f43f aed0 	beq.w	801663c <m_kalman_3gyro.isra.6.constprop.36+0x2594>
 801689c:	eef5 7a40 	vcmp.f32	s15, #0.0
 80168a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168a4:	eeb0 9a48 	vmov.f32	s18, s16
 80168a8:	eeb0 ca48 	vmov.f32	s24, s16
 80168ac:	f43f aeca 	beq.w	8016644 <m_kalman_3gyro.isra.6.constprop.36+0x259c>
 80168b0:	e638      	b.n	8016524 <m_kalman_3gyro.isra.6.constprop.36+0x247c>
 80168b2:	2300      	movs	r3, #0
 80168b4:	f88a 31ff 	strb.w	r3, [sl, #511]	; 0x1ff
 80168b8:	f88a 3200 	strb.w	r3, [sl, #512]	; 0x200
 80168bc:	f88a 3201 	strb.w	r3, [sl, #513]	; 0x201
 80168c0:	f88a 3205 	strb.w	r3, [sl, #517]	; 0x205
 80168c4:	f88a 3206 	strb.w	r3, [sl, #518]	; 0x206
 80168c8:	f7ff ba17 	b.w	8015cfa <m_kalman_3gyro.isra.6.constprop.36+0x1c52>
 80168cc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80168d0:	ee79 7a67 	vsub.f32	s15, s18, s15
 80168d4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80168d6:	eef0 7ae7 	vabs.f32	s15, s15
 80168da:	edc3 7a00 	vstr	s15, [r3]
 80168de:	f7fe bebd 	b.w	801565c <m_kalman_3gyro.isra.6.constprop.36+0x15b4>
 80168e2:	f8da 2458 	ldr.w	r2, [sl, #1112]	; 0x458
 80168e6:	2a31      	cmp	r2, #49	; 0x31
 80168e8:	f73e afe4 	bgt.w	80158b4 <m_kalman_3gyro.isra.6.constprop.36+0x180c>
 80168ec:	2300      	movs	r3, #0
 80168ee:	2a00      	cmp	r2, #0
 80168f0:	f8aa 3202 	strh.w	r3, [sl, #514]	; 0x202
 80168f4:	f88a 3204 	strb.w	r3, [sl, #516]	; 0x204
 80168f8:	f102 0301 	add.w	r3, r2, #1
 80168fc:	dd03      	ble.n	8016906 <m_kalman_3gyro.isra.6.constprop.36+0x285e>
 80168fe:	2b00      	cmp	r3, #0
 8016900:	bfd8      	it	le
 8016902:	f06f 4300 	mvnle.w	r3, #2147483648	; 0x80000000
 8016906:	f8ca 3458 	str.w	r3, [sl, #1112]	; 0x458
 801690a:	f7fe bfd3 	b.w	80158b4 <m_kalman_3gyro.isra.6.constprop.36+0x180c>
 801690e:	f8da 20a4 	ldr.w	r2, [sl, #164]	; 0xa4
 8016912:	f8da 30a8 	ldr.w	r3, [sl, #168]	; 0xa8
 8016916:	f8ca 2080 	str.w	r2, [sl, #128]	; 0x80
 801691a:	f8ca 3084 	str.w	r3, [sl, #132]	; 0x84
 801691e:	f8da 20a0 	ldr.w	r2, [sl, #160]	; 0xa0
 8016922:	f8ca 207c 	str.w	r2, [sl, #124]	; 0x7c
 8016926:	2300      	movs	r3, #0
 8016928:	f8ca 3450 	str.w	r3, [sl, #1104]	; 0x450
 801692c:	f8ca 345c 	str.w	r3, [sl, #1116]	; 0x45c
 8016930:	ac86      	add	r4, sp, #536	; 0x218
 8016932:	f7fe bfb0 	b.w	8015896 <m_kalman_3gyro.isra.6.constprop.36+0x17ee>
 8016936:	2301      	movs	r3, #1
 8016938:	f88a 3205 	strb.w	r3, [sl, #517]	; 0x205
 801693c:	f88a 3207 	strb.w	r3, [sl, #519]	; 0x207
 8016940:	f7ff b95c 	b.w	8015bfc <m_kalman_3gyro.isra.6.constprop.36+0x1b54>
 8016944:	eddd 8aa2 	vldr	s17, [sp, #648]	; 0x288
 8016948:	ed9d 9aac 	vldr	s18, [sp, #688]	; 0x2b0
 801694c:	f7fe be9f 	b.w	801568e <m_kalman_3gyro.isra.6.constprop.36+0x15e6>
 8016950:	2400      	movs	r4, #0
 8016952:	4d02      	ldr	r5, [pc, #8]	; (801695c <m_kalman_3gyro.isra.6.constprop.36+0x28b4>)
 8016954:	f7fe bd6a 	b.w	801542c <m_kalman_3gyro.isra.6.constprop.36+0x1384>
 8016958:	00000000 	.word	0x00000000
 801695c:	3ff00000 	.word	0x3ff00000
 8016960:	cccccccd 	.word	0xcccccccd
 8016964:	f60a 0378 	addw	r3, sl, #2168	; 0x878
 8016968:	ed93 7a00 	vldr	s14, [r3]
 801696c:	f60a 0374 	addw	r3, sl, #2164	; 0x874
 8016970:	ee67 7a07 	vmul.f32	s15, s14, s14
 8016974:	ed93 aa00 	vldr	s20, [r3]
 8016978:	ed8d 7a06 	vstr	s14, [sp, #24]
 801697c:	eeea 7a0a 	vfma.f32	s15, s20, s20
 8016980:	f60a 037c 	addw	r3, sl, #2172	; 0x87c
 8016984:	ac86      	add	r4, sp, #536	; 0x218
 8016986:	edd3 aa00 	vldr	s21, [r3]
 801698a:	eeea 7aaa 	vfma.f32	s15, s21, s21
 801698e:	eef7 fa00 	vmov.f32	s31, #112	; 0x3f800000  1.0
 8016992:	ee17 0a90 	vmov	r0, s15
 8016996:	f7e9 fddf 	bl	8000558 <__aeabi_f2d>
 801699a:	f004 ff83 	bl	801b8a4 <sqrt>
 801699e:	f60a 0384 	addw	r3, sl, #2180	; 0x884
 80169a2:	ed93 ba00 	vldr	s22, [r3]
 80169a6:	f50a 6308 	add.w	r3, sl, #2176	; 0x880
 80169aa:	ed93 da00 	vldr	s26, [r3]
 80169ae:	ee6b 7a0b 	vmul.f32	s15, s22, s22
 80169b2:	f60a 0388 	addw	r3, sl, #2184	; 0x888
 80169b6:	eeed 7a0d 	vfma.f32	s15, s26, s26
 80169ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80169be:	edd3 ba00 	vldr	s23, [r3]
 80169c2:	eeeb 7aab 	vfma.f32	s15, s23, s23
 80169c6:	ee17 0a90 	vmov	r0, s15
 80169ca:	f7e9 fdc5 	bl	8000558 <__aeabi_f2d>
 80169ce:	f004 ff69 	bl	801b8a4 <sqrt>
 80169d2:	f7ea f8f1 	bl	8000bb8 <__aeabi_d2f>
 80169d6:	4bd2      	ldr	r3, [pc, #840]	; (8016d20 <m_kalman_3gyro.isra.6.constprop.36+0x2c78>)
 80169d8:	ee07 0a90 	vmov	s15, r0
 80169dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80169e0:	edc3 7a00 	vstr	s15, [r3]
 80169e4:	ee8f caa7 	vdiv.f32	s24, s31, s15
 80169e8:	f7ea f8e6 	bl	8000bb8 <__aeabi_d2f>
 80169ec:	ee07 0a90 	vmov	s15, r0
 80169f0:	eecf 7aa7 	vdiv.f32	s15, s31, s15
 80169f4:	ee2c da0d 	vmul.f32	s26, s24, s26
 80169f8:	ee27 6aaa 	vmul.f32	s12, s15, s21
 80169fc:	ed9d 7a06 	vldr	s14, [sp, #24]
 8016a00:	ee6c ba2b 	vmul.f32	s23, s24, s23
 8016a04:	ee27 aa8a 	vmul.f32	s20, s15, s20
 8016a08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016a0c:	ee2d 7a46 	vnmul.f32	s14, s26, s12
 8016a10:	ee2c ca0b 	vmul.f32	s24, s24, s22
 8016a14:	eeab 7a8a 	vfma.f32	s14, s23, s20
 8016a18:	ee67 6aeb 	vnmul.f32	s13, s15, s23
 8016a1c:	eef0 aa47 	vmov.f32	s21, s14
 8016a20:	eee6 6a0c 	vfma.f32	s13, s12, s24
 8016a24:	ee27 7a07 	vmul.f32	s14, s14, s14
 8016a28:	ee2a aa4c 	vnmul.f32	s20, s20, s24
 8016a2c:	eeb0 ba66 	vmov.f32	s22, s13
 8016a30:	eea7 aa8d 	vfma.f32	s20, s15, s26
 8016a34:	eef0 7a47 	vmov.f32	s15, s14
 8016a38:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8016a3c:	eeea 7a0a 	vfma.f32	s15, s20, s20
 8016a40:	ee17 0a90 	vmov	r0, s15
 8016a44:	f7e9 fd88 	bl	8000558 <__aeabi_f2d>
 8016a48:	f004 ff2c 	bl	801b8a4 <sqrt>
 8016a4c:	f7ea f8b4 	bl	8000bb8 <__aeabi_d2f>
 8016a50:	ee07 0a90 	vmov	s15, r0
 8016a54:	eecf 7aa7 	vdiv.f32	s15, s31, s15
 8016a58:	aa7d      	add	r2, sp, #500	; 0x1f4
 8016a5a:	4620      	mov	r0, r4
 8016a5c:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8016a5e:	ed84 da02 	vstr	s26, [r4, #8]
 8016a62:	ee6b 6a27 	vmul.f32	s13, s22, s15
 8016a66:	ee2a 7aa7 	vmul.f32	s14, s21, s15
 8016a6a:	ee6a 7a27 	vmul.f32	s15, s20, s15
 8016a6e:	ee6d 5a47 	vnmul.f32	s11, s26, s14
 8016a72:	ee2c 5a67 	vnmul.f32	s10, s24, s15
 8016a76:	ee26 6aeb 	vnmul.f32	s12, s13, s23
 8016a7a:	eeab 5a87 	vfma.f32	s10, s23, s14
 8016a7e:	eee6 5a8c 	vfma.f32	s11, s13, s24
 8016a82:	eea7 6a8d 	vfma.f32	s12, s15, s26
 8016a86:	edc4 6a01 	vstr	s13, [r4, #4]
 8016a8a:	ed84 7a04 	vstr	s14, [r4, #16]
 8016a8e:	edc4 7a07 	vstr	s15, [r4, #28]
 8016a92:	ed84 5a00 	vstr	s10, [r4]
 8016a96:	edc4 5a06 	vstr	s11, [r4, #24]
 8016a9a:	ed84 6a03 	vstr	s12, [r4, #12]
 8016a9e:	ed84 ca05 	vstr	s24, [r4, #20]
 8016aa2:	edc4 ba08 	vstr	s23, [r4, #32]
 8016aa6:	f7f8 fe21 	bl	800f6ec <m_mldivide>
 8016aaa:	a94b      	add	r1, sp, #300	; 0x12c
 8016aac:	a87d      	add	r0, sp, #500	; 0x1f4
 8016aae:	f7f9 f99b 	bl	800fde8 <m_dcm2q_eml>
 8016ab2:	eddf 7a9c 	vldr	s15, [pc, #624]	; 8016d24 <m_kalman_3gyro.isra.6.constprop.36+0x2c7c>
 8016ab6:	984b      	ldr	r0, [sp, #300]	; 0x12c
 8016ab8:	994c      	ldr	r1, [sp, #304]	; 0x130
 8016aba:	9a4d      	ldr	r2, [sp, #308]	; 0x134
 8016abc:	9b4e      	ldr	r3, [sp, #312]	; 0x138
 8016abe:	904f      	str	r0, [sp, #316]	; 0x13c
 8016ac0:	eeb0 7a67 	vmov.f32	s14, s15
 8016ac4:	eef0 6a67 	vmov.f32	s13, s15
 8016ac8:	9150      	str	r1, [sp, #320]	; 0x140
 8016aca:	9251      	str	r2, [sp, #324]	; 0x144
 8016acc:	9352      	str	r3, [sp, #328]	; 0x148
 8016ace:	ed96 5a06 	vldr	s10, [r6, #24]
 8016ad2:	edd6 5a07 	vldr	s11, [r6, #28]
 8016ad6:	ed96 6a08 	vldr	s12, [r6, #32]
 8016ada:	3624      	adds	r6, #36	; 0x24
 8016adc:	42b5      	cmp	r5, r6
 8016ade:	ee76 6a85 	vadd.f32	s13, s13, s10
 8016ae2:	ee37 7a25 	vadd.f32	s14, s14, s11
 8016ae6:	ee77 7a86 	vadd.f32	s15, s15, s12
 8016aea:	d1f0      	bne.n	8016ace <m_kalman_3gyro.isra.6.constprop.36+0x2a26>
 8016aec:	ed9f 6a8e 	vldr	s12, [pc, #568]	; 8016d28 <m_kalman_3gyro.isra.6.constprop.36+0x2c80>
 8016af0:	eeb4 eaed 	vcmpe.f32	s28, s27
 8016af4:	ee66 6a86 	vmul.f32	s13, s13, s12
 8016af8:	ee27 7a06 	vmul.f32	s14, s14, s12
 8016afc:	ee67 7a86 	vmul.f32	s15, s15, s12
 8016b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b04:	edcd 6a3e 	vstr	s13, [sp, #248]	; 0xf8
 8016b08:	ed8d 7a3f 	vstr	s14, [sp, #252]	; 0xfc
 8016b0c:	edcd 7a40 	vstr	s15, [sp, #256]	; 0x100
 8016b10:	f340 8339 	ble.w	8017186 <m_kalman_3gyro.isra.6.constprop.36+0x30de>
 8016b14:	eef4 eaec 	vcmpe.f32	s29, s25
 8016b18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b1c:	f77e ae9c 	ble.w	8015858 <m_kalman_3gyro.isra.6.constprop.36+0x17b0>
 8016b20:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8016b22:	edd3 7a00 	vldr	s15, [r3]
 8016b26:	eeb4 fae7 	vcmpe.f32	s30, s15
 8016b2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b2e:	f77e ae93 	ble.w	8015858 <m_kalman_3gyro.isra.6.constprop.36+0x17b0>
 8016b32:	9b08      	ldr	r3, [sp, #32]
 8016b34:	eddf 7a7d 	vldr	s15, [pc, #500]	; 8016d2c <m_kalman_3gyro.isra.6.constprop.36+0x2c84>
 8016b38:	ed93 7a00 	vldr	s14, [r3]
 8016b3c:	eeb0 7ac7 	vabs.f32	s14, s14
 8016b40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b48:	f57e ae86 	bpl.w	8015858 <m_kalman_3gyro.isra.6.constprop.36+0x17b0>
 8016b4c:	ed93 7a01 	vldr	s14, [r3, #4]
 8016b50:	eeb0 7ac7 	vabs.f32	s14, s14
 8016b54:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b5c:	f57e ae7c 	bpl.w	8015858 <m_kalman_3gyro.isra.6.constprop.36+0x17b0>
 8016b60:	ed93 7a02 	vldr	s14, [r3, #8]
 8016b64:	eeb0 7ac7 	vabs.f32	s14, s14
 8016b68:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b70:	f57e ae72 	bpl.w	8015858 <m_kalman_3gyro.isra.6.constprop.36+0x17b0>
 8016b74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016b76:	eddf 7a6e 	vldr	s15, [pc, #440]	; 8016d30 <m_kalman_3gyro.isra.6.constprop.36+0x2c88>
 8016b7a:	ed93 7a00 	vldr	s14, [r3]
 8016b7e:	eeb0 7ac7 	vabs.f32	s14, s14
 8016b82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b8a:	f57e ae65 	bpl.w	8015858 <m_kalman_3gyro.isra.6.constprop.36+0x17b0>
 8016b8e:	ed93 7a01 	vldr	s14, [r3, #4]
 8016b92:	eeb0 7ac7 	vabs.f32	s14, s14
 8016b96:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b9e:	f57e ae5b 	bpl.w	8015858 <m_kalman_3gyro.isra.6.constprop.36+0x17b0>
 8016ba2:	ed93 7a02 	vldr	s14, [r3, #8]
 8016ba6:	eeb0 7ac7 	vabs.f32	s14, s14
 8016baa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016bb2:	f57e ae51 	bpl.w	8015858 <m_kalman_3gyro.isra.6.constprop.36+0x17b0>
 8016bb6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8016bb8:	f8da 2450 	ldr.w	r2, [sl, #1104]	; 0x450
 8016bbc:	ed93 5a00 	vldr	s10, [r3]
 8016bc0:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 8016bc2:	edd3 5a00 	vldr	s11, [r3]
 8016bc6:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8016bc8:	edd3 6a00 	vldr	s13, [r3]
 8016bcc:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8016bce:	2a09      	cmp	r2, #9
 8016bd0:	eef4 5ac5 	vcmpe.f32	s11, s10
 8016bd4:	f50a 6198 	add.w	r1, sl, #1216	; 0x4c0
 8016bd8:	ed93 7a00 	vldr	s14, [r3]
 8016bdc:	ed91 6a00 	vldr	s12, [r1]
 8016be0:	bfcc      	ite	gt
 8016be2:	230a      	movgt	r3, #10
 8016be4:	2305      	movle	r3, #5
 8016be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016bea:	bfb4      	ite	lt
 8016bec:	eef0 7a45 	vmovlt.f32	s15, s10
 8016bf0:	eef0 7a65 	vmovge.f32	s15, s11
 8016bf4:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8016bf8:	bf88      	it	hi
 8016bfa:	eef0 5a45 	vmovhi.f32	s11, s10
 8016bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c02:	eeb4 6ae5 	vcmpe.f32	s12, s11
 8016c06:	bfa8      	it	ge
 8016c08:	eef0 7a46 	vmovge.f32	s15, s12
 8016c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c10:	bf88      	it	hi
 8016c12:	eeb0 6a65 	vmovhi.f32	s12, s11
 8016c16:	eef4 6ae7 	vcmpe.f32	s13, s15
 8016c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c1e:	eef4 6ac6 	vcmpe.f32	s13, s12
 8016c22:	bfa8      	it	ge
 8016c24:	eef0 7a66 	vmovge.f32	s15, s13
 8016c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c2c:	bf88      	it	hi
 8016c2e:	eef0 6a46 	vmovhi.f32	s13, s12
 8016c32:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c3a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8016c3e:	bfa8      	it	ge
 8016c40:	eef0 7a47 	vmovge.f32	s15, s14
 8016c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c48:	bf88      	it	hi
 8016c4a:	eeb0 7a66 	vmovhi.f32	s14, s13
 8016c4e:	2b05      	cmp	r3, #5
 8016c50:	d05b      	beq.n	8016d0a <m_kalman_3gyro.isra.6.constprop.36+0x2c62>
 8016c52:	f20a 512c 	addw	r1, sl, #1324	; 0x52c
 8016c56:	edd1 6a00 	vldr	s13, [r1]
 8016c5a:	f50a 61aa 	add.w	r1, sl, #1360	; 0x550
 8016c5e:	eef4 6ae7 	vcmpe.f32	s13, s15
 8016c62:	ed91 6a00 	vldr	s12, [r1]
 8016c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c6a:	eef4 6ac7 	vcmpe.f32	s13, s14
 8016c6e:	bfa8      	it	ge
 8016c70:	eef0 7a66 	vmovge.f32	s15, s13
 8016c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c78:	bf98      	it	ls
 8016c7a:	eeb0 7a66 	vmovls.f32	s14, s13
 8016c7e:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8016c82:	f20a 5174 	addw	r1, sl, #1396	; 0x574
 8016c86:	edd1 6a00 	vldr	s13, [r1]
 8016c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c8e:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8016c92:	bfa8      	it	ge
 8016c94:	eef0 7a46 	vmovge.f32	s15, s12
 8016c98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c9c:	bf88      	it	hi
 8016c9e:	eeb0 6a47 	vmovhi.f32	s12, s14
 8016ca2:	eef4 6ae7 	vcmpe.f32	s13, s15
 8016ca6:	f50a 61b3 	add.w	r1, sl, #1432	; 0x598
 8016caa:	ed91 7a00 	vldr	s14, [r1]
 8016cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016cb2:	eef4 6ac6 	vcmpe.f32	s13, s12
 8016cb6:	bfa8      	it	ge
 8016cb8:	eef0 7a66 	vmovge.f32	s15, s13
 8016cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016cc0:	bf88      	it	hi
 8016cc2:	eef0 6a46 	vmovhi.f32	s13, s12
 8016cc6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016cce:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8016cd2:	bfa8      	it	ge
 8016cd4:	eef0 7a47 	vmovge.f32	s15, s14
 8016cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016cdc:	bf88      	it	hi
 8016cde:	eeb0 7a66 	vmovhi.f32	s14, s13
 8016ce2:	2b0a      	cmp	r3, #10
 8016ce4:	d111      	bne.n	8016d0a <m_kalman_3gyro.isra.6.constprop.36+0x2c62>
 8016ce6:	f20a 51bc 	addw	r1, sl, #1468	; 0x5bc
 8016cea:	edd1 6a00 	vldr	s13, [r1]
 8016cee:	eef4 7ae6 	vcmpe.f32	s15, s13
 8016cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016cf6:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8016cfa:	bfb8      	it	lt
 8016cfc:	eef0 7a66 	vmovlt.f32	s15, s13
 8016d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d04:	bf88      	it	hi
 8016d06:	eeb0 7a66 	vmovhi.f32	s14, s13
 8016d0a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016d0e:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8016d34 <m_kalman_3gyro.isra.6.constprop.36+0x2c8c>
 8016d12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d1a:	f73e ad9d 	bgt.w	8015858 <m_kalman_3gyro.isra.6.constprop.36+0x17b0>
 8016d1e:	e00b      	b.n	8016d38 <m_kalman_3gyro.isra.6.constprop.36+0x2c90>
 8016d20:	20001bec 	.word	0x20001bec
 8016d24:	00000000 	.word	0x00000000
 8016d28:	3d088889 	.word	0x3d088889
 8016d2c:	3e4ccccd 	.word	0x3e4ccccd
 8016d30:	3f99999a 	.word	0x3f99999a
 8016d34:	3be56042 	.word	0x3be56042
 8016d38:	9921      	ldr	r1, [sp, #132]	; 0x84
 8016d3a:	ed91 5a00 	vldr	s10, [r1]
 8016d3e:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8016d40:	edd1 5a00 	vldr	s11, [r1]
 8016d44:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8016d46:	edd1 6a00 	vldr	s13, [r1]
 8016d4a:	9933      	ldr	r1, [sp, #204]	; 0xcc
 8016d4c:	eef4 5ac5 	vcmpe.f32	s11, s10
 8016d50:	ed91 7a00 	vldr	s14, [r1]
 8016d54:	f20a 41c4 	addw	r1, sl, #1220	; 0x4c4
 8016d58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d5c:	ed91 6a00 	vldr	s12, [r1]
 8016d60:	bfb4      	ite	lt
 8016d62:	eef0 7a45 	vmovlt.f32	s15, s10
 8016d66:	eef0 7a65 	vmovge.f32	s15, s11
 8016d6a:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8016d6e:	bf88      	it	hi
 8016d70:	eef0 5a45 	vmovhi.f32	s11, s10
 8016d74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d78:	eeb4 6ae5 	vcmpe.f32	s12, s11
 8016d7c:	bfa8      	it	ge
 8016d7e:	eef0 7a46 	vmovge.f32	s15, s12
 8016d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d86:	bf88      	it	hi
 8016d88:	eeb0 6a65 	vmovhi.f32	s12, s11
 8016d8c:	eef4 6ae7 	vcmpe.f32	s13, s15
 8016d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d94:	eef4 6ac6 	vcmpe.f32	s13, s12
 8016d98:	bfa8      	it	ge
 8016d9a:	eef0 7a66 	vmovge.f32	s15, s13
 8016d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016da2:	bf88      	it	hi
 8016da4:	eef0 6a46 	vmovhi.f32	s13, s12
 8016da8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016dac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016db0:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8016db4:	bfa8      	it	ge
 8016db6:	eef0 7a47 	vmovge.f32	s15, s14
 8016dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016dbe:	bf88      	it	hi
 8016dc0:	eeb0 7a66 	vmovhi.f32	s14, s13
 8016dc4:	2b05      	cmp	r3, #5
 8016dc6:	d05b      	beq.n	8016e80 <m_kalman_3gyro.isra.6.constprop.36+0x2dd8>
 8016dc8:	f50a 61a6 	add.w	r1, sl, #1328	; 0x530
 8016dcc:	edd1 6a00 	vldr	s13, [r1]
 8016dd0:	f20a 5154 	addw	r1, sl, #1364	; 0x554
 8016dd4:	eef4 6ae7 	vcmpe.f32	s13, s15
 8016dd8:	ed91 6a00 	vldr	s12, [r1]
 8016ddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016de0:	eef4 6ac7 	vcmpe.f32	s13, s14
 8016de4:	bfa8      	it	ge
 8016de6:	eef0 7a66 	vmovge.f32	s15, s13
 8016dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016dee:	bf98      	it	ls
 8016df0:	eeb0 7a66 	vmovls.f32	s14, s13
 8016df4:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8016df8:	f50a 61af 	add.w	r1, sl, #1400	; 0x578
 8016dfc:	edd1 6a00 	vldr	s13, [r1]
 8016e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e04:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8016e08:	bfa8      	it	ge
 8016e0a:	eef0 7a46 	vmovge.f32	s15, s12
 8016e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e12:	bf88      	it	hi
 8016e14:	eeb0 6a47 	vmovhi.f32	s12, s14
 8016e18:	eef4 6ae7 	vcmpe.f32	s13, s15
 8016e1c:	f20a 519c 	addw	r1, sl, #1436	; 0x59c
 8016e20:	ed91 7a00 	vldr	s14, [r1]
 8016e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e28:	eef4 6ac6 	vcmpe.f32	s13, s12
 8016e2c:	bfa8      	it	ge
 8016e2e:	eef0 7a66 	vmovge.f32	s15, s13
 8016e32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e36:	bf88      	it	hi
 8016e38:	eef0 6a46 	vmovhi.f32	s13, s12
 8016e3c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e44:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8016e48:	bfa8      	it	ge
 8016e4a:	eef0 7a47 	vmovge.f32	s15, s14
 8016e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e52:	bf88      	it	hi
 8016e54:	eeb0 7a66 	vmovhi.f32	s14, s13
 8016e58:	2b0a      	cmp	r3, #10
 8016e5a:	d111      	bne.n	8016e80 <m_kalman_3gyro.isra.6.constprop.36+0x2dd8>
 8016e5c:	f50a 61b8 	add.w	r1, sl, #1472	; 0x5c0
 8016e60:	edd1 6a00 	vldr	s13, [r1]
 8016e64:	eef4 7ae6 	vcmpe.f32	s15, s13
 8016e68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e6c:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8016e70:	bfb8      	it	lt
 8016e72:	eef0 7a66 	vmovlt.f32	s15, s13
 8016e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e7a:	bf88      	it	hi
 8016e7c:	eeb0 7a66 	vmovhi.f32	s14, s13
 8016e80:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016e84:	ed1f 7a55 	vldr	s14, [pc, #-340]	; 8016d34 <m_kalman_3gyro.isra.6.constprop.36+0x2c8c>
 8016e88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016e8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e90:	f73e ace2 	bgt.w	8015858 <m_kalman_3gyro.isra.6.constprop.36+0x17b0>
 8016e94:	9922      	ldr	r1, [sp, #136]	; 0x88
 8016e96:	edd1 6a00 	vldr	s13, [r1]
 8016e9a:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8016e9c:	ed91 5a00 	vldr	s10, [r1]
 8016ea0:	9931      	ldr	r1, [sp, #196]	; 0xc4
 8016ea2:	edd1 5a00 	vldr	s11, [r1]
 8016ea6:	9934      	ldr	r1, [sp, #208]	; 0xd0
 8016ea8:	eef4 6ac5 	vcmpe.f32	s13, s10
 8016eac:	ed91 6a00 	vldr	s12, [r1]
 8016eb0:	f50a 6199 	add.w	r1, sl, #1224	; 0x4c8
 8016eb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016eb8:	ed91 7a00 	vldr	s14, [r1]
 8016ebc:	bfb4      	ite	lt
 8016ebe:	eef0 7a45 	vmovlt.f32	s15, s10
 8016ec2:	eef0 7a66 	vmovge.f32	s15, s13
 8016ec6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016eca:	bf88      	it	hi
 8016ecc:	eef0 6a45 	vmovhi.f32	s13, s10
 8016ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ed4:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8016ed8:	bfa8      	it	ge
 8016eda:	eef0 7a47 	vmovge.f32	s15, s14
 8016ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ee2:	bf88      	it	hi
 8016ee4:	eeb0 7a66 	vmovhi.f32	s14, s13
 8016ee8:	eef4 7ae5 	vcmpe.f32	s15, s11
 8016eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ef0:	eeb4 7ae5 	vcmpe.f32	s14, s11
 8016ef4:	bfb8      	it	lt
 8016ef6:	eef0 7a65 	vmovlt.f32	s15, s11
 8016efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016efe:	bf88      	it	hi
 8016f00:	eeb0 7a65 	vmovhi.f32	s14, s11
 8016f04:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8016f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f0c:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8016f10:	bfa8      	it	ge
 8016f12:	eef0 7a46 	vmovge.f32	s15, s12
 8016f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f1a:	bf88      	it	hi
 8016f1c:	eeb0 7a46 	vmovhi.f32	s14, s12
 8016f20:	2b05      	cmp	r3, #5
 8016f22:	d05b      	beq.n	8016fdc <m_kalman_3gyro.isra.6.constprop.36+0x2f34>
 8016f24:	f20a 5134 	addw	r1, sl, #1332	; 0x534
 8016f28:	ed91 6a00 	vldr	s12, [r1]
 8016f2c:	f50a 61ab 	add.w	r1, sl, #1368	; 0x558
 8016f30:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8016f34:	edd1 6a00 	vldr	s13, [r1]
 8016f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f3c:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8016f40:	bfa8      	it	ge
 8016f42:	eef0 7a46 	vmovge.f32	s15, s12
 8016f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f4a:	bf88      	it	hi
 8016f4c:	eeb0 6a47 	vmovhi.f32	s12, s14
 8016f50:	eef4 6ae7 	vcmpe.f32	s13, s15
 8016f54:	f20a 517c 	addw	r1, sl, #1404	; 0x57c
 8016f58:	ed91 7a00 	vldr	s14, [r1]
 8016f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f60:	eef4 6ac6 	vcmpe.f32	s13, s12
 8016f64:	bfa8      	it	ge
 8016f66:	eef0 7a66 	vmovge.f32	s15, s13
 8016f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f6e:	bf88      	it	hi
 8016f70:	eef0 6a46 	vmovhi.f32	s13, s12
 8016f74:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016f78:	f50a 61b4 	add.w	r1, sl, #1440	; 0x5a0
 8016f7c:	ed91 6a00 	vldr	s12, [r1]
 8016f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f84:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8016f88:	bfa8      	it	ge
 8016f8a:	eef0 7a47 	vmovge.f32	s15, s14
 8016f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f92:	bf88      	it	hi
 8016f94:	eeb0 7a66 	vmovhi.f32	s14, s13
 8016f98:	eef4 7ac6 	vcmpe.f32	s15, s12
 8016f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016fa0:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8016fa4:	bfb8      	it	lt
 8016fa6:	eef0 7a46 	vmovlt.f32	s15, s12
 8016faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016fae:	bf88      	it	hi
 8016fb0:	eeb0 7a46 	vmovhi.f32	s14, s12
 8016fb4:	2b0a      	cmp	r3, #10
 8016fb6:	d111      	bne.n	8016fdc <m_kalman_3gyro.isra.6.constprop.36+0x2f34>
 8016fb8:	f20a 53c4 	addw	r3, sl, #1476	; 0x5c4
 8016fbc:	edd3 6a00 	vldr	s13, [r3]
 8016fc0:	eef4 7ae6 	vcmpe.f32	s15, s13
 8016fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016fc8:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8016fcc:	bfb8      	it	lt
 8016fce:	eef0 7a66 	vmovlt.f32	s15, s13
 8016fd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016fd6:	bf88      	it	hi
 8016fd8:	eeb0 7a66 	vmovhi.f32	s14, s13
 8016fdc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016fe0:	ed1f 7aac 	vldr	s14, [pc, #-688]	; 8016d34 <m_kalman_3gyro.isra.6.constprop.36+0x2c8c>
 8016fe4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016fec:	f73e ac34 	bgt.w	8015858 <m_kalman_3gyro.isra.6.constprop.36+0x17b0>
 8016ff0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016ff2:	2b00      	cmp	r3, #0
 8016ff4:	f43e ac34 	beq.w	8015860 <m_kalman_3gyro.isra.6.constprop.36+0x17b8>
 8016ff8:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8016ffc:	2b01      	cmp	r3, #1
 8016ffe:	f040 8268 	bne.w	80174d2 <m_kalman_3gyro.isra.6.constprop.36+0x342a>
 8017002:	2a0a      	cmp	r2, #10
 8017004:	f000 85dc 	beq.w	8017bc0 <m_kalman_3gyro.isra.6.constprop.36+0x3b18>
 8017008:	2300      	movs	r3, #0
 801700a:	2a00      	cmp	r2, #0
 801700c:	f8aa 3202 	strh.w	r3, [sl, #514]	; 0x202
 8017010:	f88a 3204 	strb.w	r3, [sl, #516]	; 0x204
 8017014:	f102 0301 	add.w	r3, r2, #1
 8017018:	dd03      	ble.n	8017022 <m_kalman_3gyro.isra.6.constprop.36+0x2f7a>
 801701a:	2b00      	cmp	r3, #0
 801701c:	bfd8      	it	le
 801701e:	f06f 4300 	mvnle.w	r3, #2147483648	; 0x80000000
 8017022:	2200      	movs	r2, #0
 8017024:	f8ca 3450 	str.w	r3, [sl, #1104]	; 0x450
 8017028:	f8ca 245c 	str.w	r2, [sl, #1116]	; 0x45c
 801702c:	ac86      	add	r4, sp, #536	; 0x218
 801702e:	f7fe bc32 	b.w	8015896 <m_kalman_3gyro.isra.6.constprop.36+0x17ee>
 8017032:	eef5 8a40 	vcmp.f32	s17, #0.0
 8017036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801703a:	eef0 aa48 	vmov.f32	s21, s16
 801703e:	ed85 8a07 	vstr	s16, [r5, #28]
 8017042:	f47f ab41 	bne.w	80166c8 <m_kalman_3gyro.isra.6.constprop.36+0x2620>
 8017046:	eef0 9a48 	vmov.f32	s19, s16
 801704a:	eef0 7a48 	vmov.f32	s15, s16
 801704e:	f7ff baa7 	b.w	80165a0 <m_kalman_3gyro.isra.6.constprop.36+0x24f8>
 8017052:	eeb0 ca48 	vmov.f32	s24, s16
 8017056:	ee27 9a89 	vmul.f32	s18, s15, s18
 801705a:	eef5 ba40 	vcmp.f32	s23, #0.0
 801705e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017062:	ed85 9a01 	vstr	s18, [r5, #4]
 8017066:	f47f aa5d 	bne.w	8016524 <m_kalman_3gyro.isra.6.constprop.36+0x247c>
 801706a:	f7ff baeb 	b.w	8016644 <m_kalman_3gyro.isra.6.constprop.36+0x259c>
 801706e:	eeb0 ba48 	vmov.f32	s22, s16
 8017072:	f7ff bb09 	b.w	8016688 <m_kalman_3gyro.isra.6.constprop.36+0x25e0>
 8017076:	eea9 aaa9 	vfma.f32	s20, s19, s19
 801707a:	eeb1 9a49 	vneg.f32	s18, s18
 801707e:	ee1a 0a10 	vmov	r0, s20
 8017082:	f7e9 fa69 	bl	8000558 <__aeabi_f2d>
 8017086:	f004 fc0d 	bl	801b8a4 <sqrt>
 801708a:	f7e9 fd95 	bl	8000bb8 <__aeabi_d2f>
 801708e:	ee07 0a90 	vmov	s15, r0
 8017092:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017096:	eec7 7a27 	vdiv.f32	s15, s14, s15
 801709a:	f8dd 36a8 	ldr.w	r3, [sp, #1704]	; 0x6a8
 801709e:	789c      	ldrb	r4, [r3, #2]
 80170a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80170a2:	6818      	ldr	r0, [r3, #0]
 80170a4:	685a      	ldr	r2, [r3, #4]
 80170a6:	6899      	ldr	r1, [r3, #8]
 80170a8:	904b      	str	r0, [sp, #300]	; 0x12c
 80170aa:	461d      	mov	r5, r3
 80170ac:	a853      	add	r0, sp, #332	; 0x14c
 80170ae:	68db      	ldr	r3, [r3, #12]
 80170b0:	924c      	str	r2, [sp, #304]	; 0x130
 80170b2:	eeb1 0a48 	vneg.f32	s0, s16
 80170b6:	eef1 8a68 	vneg.f32	s17, s17
 80170ba:	ee29 ba27 	vmul.f32	s22, s18, s15
 80170be:	ee68 aaa7 	vmul.f32	s21, s17, s15
 80170c2:	ee20 aa27 	vmul.f32	s20, s0, s15
 80170c6:	ee29 8aa7 	vmul.f32	s16, s19, s15
 80170ca:	2c00      	cmp	r4, #0
 80170cc:	d051      	beq.n	8017172 <m_kalman_3gyro.isra.6.constprop.36+0x30ca>
 80170ce:	462a      	mov	r2, r5
 80170d0:	914d      	str	r1, [sp, #308]	; 0x134
 80170d2:	a94b      	add	r1, sp, #300	; 0x12c
 80170d4:	934e      	str	r3, [sp, #312]	; 0x138
 80170d6:	ed8d 9a53 	vstr	s18, [sp, #332]	; 0x14c
 80170da:	edcd 8a54 	vstr	s17, [sp, #336]	; 0x150
 80170de:	ed8d 0a55 	vstr	s0, [sp, #340]	; 0x154
 80170e2:	edcd 9a56 	vstr	s19, [sp, #344]	; 0x158
 80170e6:	ac4f      	add	r4, sp, #316	; 0x13c
 80170e8:	f7f8 fcbe 	bl	800fa68 <m_qmult_eml>
 80170ec:	ed8d ba4f 	vstr	s22, [sp, #316]	; 0x13c
 80170f0:	edcd aa50 	vstr	s21, [sp, #320]	; 0x140
 80170f4:	ed8d aa51 	vstr	s20, [sp, #324]	; 0x144
 80170f8:	ed8d 8a52 	vstr	s16, [sp, #328]	; 0x148
 80170fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80170fe:	f8dd 46c8 	ldr.w	r4, [sp, #1736]	; 0x6c8
 8017102:	ed8d 9a53 	vstr	s18, [sp, #332]	; 0x14c
 8017106:	edcd 8a54 	vstr	s17, [sp, #336]	; 0x150
 801710a:	ed8d 0a55 	vstr	s0, [sp, #340]	; 0x154
 801710e:	edcd 9a56 	vstr	s19, [sp, #344]	; 0x158
 8017112:	ed8d 9a4b 	vstr	s18, [sp, #300]	; 0x12c
 8017116:	edcd 8a4c 	vstr	s17, [sp, #304]	; 0x130
 801711a:	ed8d 0a4d 	vstr	s0, [sp, #308]	; 0x134
 801711e:	edcd 9a4e 	vstr	s19, [sp, #312]	; 0x138
 8017122:	6020      	str	r0, [r4, #0]
 8017124:	6061      	str	r1, [r4, #4]
 8017126:	60a2      	str	r2, [r4, #8]
 8017128:	60e3      	str	r3, [r4, #12]
 801712a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801712c:	f7ff bb3a 	b.w	80167a4 <m_kalman_3gyro.isra.6.constprop.36+0x26fc>
 8017130:	f89a 28ae 	ldrb.w	r2, [sl, #2222]	; 0x8ae
 8017134:	2a00      	cmp	r2, #0
 8017136:	f000 8357 	beq.w	80177e8 <m_kalman_3gyro.isra.6.constprop.36+0x3740>
 801713a:	2300      	movs	r3, #0
 801713c:	3a01      	subs	r2, #1
 801713e:	f88a 28ae 	strb.w	r2, [sl, #2222]	; 0x8ae
 8017142:	f8aa 31fc 	strh.w	r3, [sl, #508]	; 0x1fc
 8017146:	f88a 31fe 	strb.w	r3, [sl, #510]	; 0x1fe
 801714a:	f88a 3205 	strb.w	r3, [sl, #517]	; 0x205
 801714e:	f88a 3207 	strb.w	r3, [sl, #519]	; 0x207
 8017152:	f7fe be07 	b.w	8015d64 <m_kalman_3gyro.isra.6.constprop.36+0x1cbc>
 8017156:	ee77 7aca 	vsub.f32	s15, s15, s20
 801715a:	ee17 0a90 	vmov	r0, s15
 801715e:	f7e9 f9fb 	bl	8000558 <__aeabi_f2d>
 8017162:	f004 fb9f 	bl	801b8a4 <sqrt>
 8017166:	f7e9 fd27 	bl	8000bb8 <__aeabi_d2f>
 801716a:	ee09 0a90 	vmov	s19, r0
 801716e:	f7ff bb01 	b.w	8016774 <m_kalman_3gyro.isra.6.constprop.36+0x26cc>
 8017172:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017174:	e7ac      	b.n	80170d0 <m_kalman_3gyro.isra.6.constprop.36+0x3028>
 8017176:	2400      	movs	r4, #0
 8017178:	4dcd      	ldr	r5, [pc, #820]	; (80174b0 <m_kalman_3gyro.isra.6.constprop.36+0x3408>)
 801717a:	f7fe b957 	b.w	801542c <m_kalman_3gyro.isra.6.constprop.36+0x1384>
 801717e:	eddd 9a64 	vldr	s19, [sp, #400]	; 0x190
 8017182:	f7fe bae7 	b.w	8015754 <m_kalman_3gyro.isra.6.constprop.36+0x16ac>
 8017186:	2301      	movs	r3, #1
 8017188:	f88a 3204 	strb.w	r3, [sl, #516]	; 0x204
 801718c:	f240 1201 	movw	r2, #257	; 0x101
 8017190:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017192:	f8aa 2202 	strh.w	r2, [sl, #514]	; 0x202
 8017196:	edd3 7a00 	vldr	s15, [r3]
 801719a:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 801719e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80171a2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80171a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80171aa:	f200 844a 	bhi.w	8017a42 <m_kalman_3gyro.isra.6.constprop.36+0x399a>
 80171ae:	f8dd 2698 	ldr.w	r2, [sp, #1688]	; 0x698
 80171b2:	f89a 38a4 	ldrb.w	r3, [sl, #2212]	; 0x8a4
 80171b6:	edd2 6a06 	vldr	s13, [r2, #24]
 80171ba:	ed92 7a07 	vldr	s14, [r2, #28]
 80171be:	edd2 7a08 	vldr	s15, [r2, #32]
 80171c2:	2b00      	cmp	r3, #0
 80171c4:	f000 86e1 	beq.w	8017f8a <m_kalman_3gyro.isra.6.constprop.36+0x3ee2>
 80171c8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80171cc:	ee66 6a86 	vmul.f32	s13, s13, s12
 80171d0:	ee27 7a06 	vmul.f32	s14, s14, s12
 80171d4:	ee67 7a86 	vmul.f32	s15, s15, s12
 80171d8:	edc2 6a06 	vstr	s13, [r2, #24]
 80171dc:	ed82 7a07 	vstr	s14, [r2, #28]
 80171e0:	edc2 7a08 	vstr	s15, [r2, #32]
 80171e4:	f8ba 38a6 	ldrh.w	r3, [sl, #2214]	; 0x8a6
 80171e8:	3301      	adds	r3, #1
 80171ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80171ee:	f000 859e 	beq.w	8017d2e <m_kalman_3gyro.isra.6.constprop.36+0x3c86>
 80171f2:	2b31      	cmp	r3, #49	; 0x31
 80171f4:	f8aa 38a6 	strh.w	r3, [sl, #2214]	; 0x8a6
 80171f8:	d918      	bls.n	801722c <m_kalman_3gyro.isra.6.constprop.36+0x3184>
 80171fa:	f89a 38a4 	ldrb.w	r3, [sl, #2212]	; 0x8a4
 80171fe:	b9ab      	cbnz	r3, 801722c <m_kalman_3gyro.isra.6.constprop.36+0x3184>
 8017200:	f8dd 3698 	ldr.w	r3, [sp, #1688]	; 0x698
 8017204:	ed9f 6aab 	vldr	s12, [pc, #684]	; 80174b4 <m_kalman_3gyro.isra.6.constprop.36+0x340c>
 8017208:	edd3 6a06 	vldr	s13, [r3, #24]
 801720c:	ed93 7a07 	vldr	s14, [r3, #28]
 8017210:	edd3 7a08 	vldr	s15, [r3, #32]
 8017214:	ee66 6a86 	vmul.f32	s13, s13, s12
 8017218:	ee27 7a06 	vmul.f32	s14, s14, s12
 801721c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8017220:	edc3 6a06 	vstr	s13, [r3, #24]
 8017224:	ed83 7a07 	vstr	s14, [r3, #28]
 8017228:	edc3 7a08 	vstr	s15, [r3, #32]
 801722c:	f8da 38a4 	ldr.w	r3, [sl, #2212]	; 0x8a4
 8017230:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8017234:	f5b3 0f8c 	cmp.w	r3, #4587520	; 0x460000
 8017238:	f000 857f 	beq.w	8017d3a <m_kalman_3gyro.isra.6.constprop.36+0x3c92>
 801723c:	f5b3 0fc8 	cmp.w	r3, #6553600	; 0x640000
 8017240:	f040 8418 	bne.w	8017a74 <m_kalman_3gyro.isra.6.constprop.36+0x39cc>
 8017244:	2301      	movs	r3, #1
 8017246:	f88a 38a4 	strb.w	r3, [sl, #2212]	; 0x8a4
 801724a:	f60a 0398 	addw	r3, sl, #2200	; 0x898
 801724e:	f8da 00a0 	ldr.w	r0, [sl, #160]	; 0xa0
 8017252:	f8da 10a4 	ldr.w	r1, [sl, #164]	; 0xa4
 8017256:	f8da 20a8 	ldr.w	r2, [sl, #168]	; 0xa8
 801725a:	6018      	str	r0, [r3, #0]
 801725c:	f60a 039c 	addw	r3, sl, #2204	; 0x89c
 8017260:	6019      	str	r1, [r3, #0]
 8017262:	f50a 630a 	add.w	r3, sl, #2208	; 0x8a0
 8017266:	601a      	str	r2, [r3, #0]
 8017268:	eddd 7a50 	vldr	s15, [sp, #320]	; 0x140
 801726c:	eddd 6a4f 	vldr	s13, [sp, #316]	; 0x13c
 8017270:	ed9d 7a51 	vldr	s14, [sp, #324]	; 0x144
 8017274:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8017278:	ee76 6aa6 	vadd.f32	s13, s13, s13
 801727c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8017280:	ee37 7a07 	vadd.f32	s14, s14, s14
 8017284:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8017288:	eee7 7a07 	vfma.f32	s15, s14, s14
 801728c:	ee17 0a90 	vmov	r0, s15
 8017290:	f7e9 f962 	bl	8000558 <__aeabi_f2d>
 8017294:	f004 fb06 	bl	801b8a4 <sqrt>
 8017298:	f7e9 fc8e 	bl	8000bb8 <__aeabi_d2f>
 801729c:	f7e9 f95c 	bl	8000558 <__aeabi_f2d>
 80172a0:	a381      	add	r3, pc, #516	; (adr r3, 80174a8 <m_kalman_3gyro.isra.6.constprop.36+0x3400>)
 80172a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172a6:	f7e9 fc21 	bl	8000aec <__aeabi_dcmplt>
 80172aa:	2800      	cmp	r0, #0
 80172ac:	f000 854e 	beq.w	8017d4c <m_kalman_3gyro.isra.6.constprop.36+0x3ca4>
 80172b0:	f50d 61d6 	add.w	r1, sp, #1712	; 0x6b0
 80172b4:	2200      	movs	r2, #0
 80172b6:	2300      	movs	r3, #0
 80172b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80172bc:	f7e9 fc0c 	bl	8000ad8 <__aeabi_dcmpeq>
 80172c0:	2800      	cmp	r0, #0
 80172c2:	f040 843d 	bne.w	8017b40 <m_kalman_3gyro.isra.6.constprop.36+0x3a98>
 80172c6:	f8aa 0202 	strh.w	r0, [sl, #514]	; 0x202
 80172ca:	f88a 0204 	strb.w	r0, [sl, #516]	; 0x204
 80172ce:	2301      	movs	r3, #1
 80172d0:	2200      	movs	r2, #0
 80172d2:	f8ca 3450 	str.w	r3, [sl, #1104]	; 0x450
 80172d6:	f8ca 245c 	str.w	r2, [sl, #1116]	; 0x45c
 80172da:	f7fe badc 	b.w	8015896 <m_kalman_3gyro.isra.6.constprop.36+0x17ee>
 80172de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80172e2:	eef4 7ae6 	vcmpe.f32	s15, s13
 80172e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80172ea:	f77e ad06 	ble.w	8015cfa <m_kalman_3gyro.isra.6.constprop.36+0x1c52>
 80172ee:	ed93 6a04 	vldr	s12, [r3, #16]
 80172f2:	edd3 6a05 	vldr	s13, [r3, #20]
 80172f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80172fa:	ee26 6a27 	vmul.f32	s12, s12, s15
 80172fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8017302:	ed83 7a03 	vstr	s14, [r3, #12]
 8017306:	ed83 6a04 	vstr	s12, [r3, #16]
 801730a:	edc3 7a05 	vstr	s15, [r3, #20]
 801730e:	f7fe bcf4 	b.w	8015cfa <m_kalman_3gyro.isra.6.constprop.36+0x1c52>
 8017312:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8017316:	f7fe bcdd 	b.w	8015cd4 <m_kalman_3gyro.isra.6.constprop.36+0x1c2c>
 801731a:	edd3 7a03 	vldr	s15, [r3, #12]
 801731e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8017322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017326:	f47e a8ce 	bne.w	80154c6 <m_kalman_3gyro.isra.6.constprop.36+0x141e>
 801732a:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
 801732e:	9801      	ldr	r0, [sp, #4]
 8017330:	f8ca 4044 	str.w	r4, [sl, #68]	; 0x44
 8017334:	f8ca 4048 	str.w	r4, [sl, #72]	; 0x48
 8017338:	f8ca 404c 	str.w	r4, [sl, #76]	; 0x4c
 801733c:	f8ca 4054 	str.w	r4, [sl, #84]	; 0x54
 8017340:	f8ca 4058 	str.w	r4, [sl, #88]	; 0x58
 8017344:	f8ca 405c 	str.w	r4, [sl, #92]	; 0x5c
 8017348:	f8ca 5040 	str.w	r5, [sl, #64]	; 0x40
 801734c:	f8ca 5050 	str.w	r5, [sl, #80]	; 0x50
 8017350:	f8ca 5060 	str.w	r5, [sl, #96]	; 0x60
 8017354:	f7f8 fd48 	bl	800fde8 <m_dcm2q_eml>
 8017358:	f8dd 36c0 	ldr.w	r3, [sp, #1728]	; 0x6c0
 801735c:	f8ca 4094 	str.w	r4, [sl, #148]	; 0x94
 8017360:	f8ca 4098 	str.w	r4, [sl, #152]	; 0x98
 8017364:	f8ca 409c 	str.w	r4, [sl, #156]	; 0x9c
 8017368:	681a      	ldr	r2, [r3, #0]
 801736a:	f8ca 20a0 	str.w	r2, [sl, #160]	; 0xa0
 801736e:	f8dd 26c0 	ldr.w	r2, [sp, #1728]	; 0x6c0
 8017372:	4b51      	ldr	r3, [pc, #324]	; (80174b8 <m_kalman_3gyro.isra.6.constprop.36+0x3410>)
 8017374:	6852      	ldr	r2, [r2, #4]
 8017376:	f8ca 20a4 	str.w	r2, [sl, #164]	; 0xa4
 801737a:	f8dd 26c0 	ldr.w	r2, [sp, #1728]	; 0x6c0
 801737e:	6892      	ldr	r2, [r2, #8]
 8017380:	f8ca 20a8 	str.w	r2, [sl, #168]	; 0xa8
 8017384:	f8ca 30ac 	str.w	r3, [sl, #172]	; 0xac
 8017388:	f8ca 50b0 	str.w	r5, [sl, #176]	; 0xb0
 801738c:	f8ca 50b4 	str.w	r5, [sl, #180]	; 0xb4
 8017390:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8017394:	2100      	movs	r1, #0
 8017396:	f10a 00b8 	add.w	r0, sl, #184	; 0xb8
 801739a:	f003 f93c 	bl	801a616 <memset>
 801739e:	4b47      	ldr	r3, [pc, #284]	; (80174bc <m_kalman_3gyro.isra.6.constprop.36+0x3414>)
 80173a0:	f8ca 30b8 	str.w	r3, [sl, #184]	; 0xb8
 80173a4:	f8ca 30e0 	str.w	r3, [sl, #224]	; 0xe0
 80173a8:	f8ca 3108 	str.w	r3, [sl, #264]	; 0x108
 80173ac:	f8ca 3130 	str.w	r3, [sl, #304]	; 0x130
 80173b0:	f8ca 3158 	str.w	r3, [sl, #344]	; 0x158
 80173b4:	f8ca 3180 	str.w	r3, [sl, #384]	; 0x180
 80173b8:	f8ca 31a8 	str.w	r3, [sl, #424]	; 0x1a8
 80173bc:	f8ca 31d0 	str.w	r3, [sl, #464]	; 0x1d0
 80173c0:	f8ca 31f8 	str.w	r3, [sl, #504]	; 0x1f8
 80173c4:	f7fe b87f 	b.w	80154c6 <m_kalman_3gyro.isra.6.constprop.36+0x141e>
 80173c8:	eddd 7a23 	vldr	s15, [sp, #140]	; 0x8c
 80173cc:	ed8a ba12 	vstr	s22, [sl, #72]	; 0x48
 80173d0:	edca 7a10 	vstr	s15, [sl, #64]	; 0x40
 80173d4:	eddd 7a24 	vldr	s15, [sp, #144]	; 0x90
 80173d8:	edca aa15 	vstr	s21, [sl, #84]	; 0x54
 80173dc:	edca 7a13 	vstr	s15, [sl, #76]	; 0x4c
 80173e0:	eddd 7a25 	vldr	s15, [sp, #148]	; 0x94
 80173e4:	ed8a aa18 	vstr	s20, [sl, #96]	; 0x60
 80173e8:	edca 7a16 	vstr	s15, [sl, #88]	; 0x58
 80173ec:	ed8a ca11 	vstr	s24, [sl, #68]	; 0x44
 80173f0:	edca ba14 	vstr	s23, [sl, #80]	; 0x50
 80173f4:	edca 9a17 	vstr	s19, [sl, #92]	; 0x5c
 80173f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80173fa:	f7f8 fcf5 	bl	800fde8 <m_dcm2q_eml>
 80173fe:	eddf 7a30 	vldr	s15, [pc, #192]	; 80174c0 <m_kalman_3gyro.isra.6.constprop.36+0x3418>
 8017402:	ed8a da2b 	vstr	s26, [sl, #172]	; 0xac
 8017406:	eeb4 9ae7 	vcmpe.f32	s18, s15
 801740a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801740e:	d507      	bpl.n	8017420 <m_kalman_3gyro.isra.6.constprop.36+0x3378>
 8017410:	eddf 7a2c 	vldr	s15, [pc, #176]	; 80174c4 <m_kalman_3gyro.isra.6.constprop.36+0x341c>
 8017414:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8017418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801741c:	f300 85ab 	bgt.w	8017f76 <m_kalman_3gyro.isra.6.constprop.36+0x3ece>
 8017420:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8017424:	f8ca 30b0 	str.w	r3, [sl, #176]	; 0xb0
 8017428:	f44f 72a2 	mov.w	r2, #324	; 0x144
 801742c:	2100      	movs	r1, #0
 801742e:	f10a 00b8 	add.w	r0, sl, #184	; 0xb8
 8017432:	f003 f8f0 	bl	801a616 <memset>
 8017436:	4b21      	ldr	r3, [pc, #132]	; (80174bc <m_kalman_3gyro.isra.6.constprop.36+0x3414>)
 8017438:	f8ca 30b8 	str.w	r3, [sl, #184]	; 0xb8
 801743c:	f8ca 30e0 	str.w	r3, [sl, #224]	; 0xe0
 8017440:	f8ca 3108 	str.w	r3, [sl, #264]	; 0x108
 8017444:	f8ca 3130 	str.w	r3, [sl, #304]	; 0x130
 8017448:	f8ca 3158 	str.w	r3, [sl, #344]	; 0x158
 801744c:	f8ca 3180 	str.w	r3, [sl, #384]	; 0x180
 8017450:	f8ca 31a8 	str.w	r3, [sl, #424]	; 0x1a8
 8017454:	f8ca 31d0 	str.w	r3, [sl, #464]	; 0x1d0
 8017458:	f8ca 31f8 	str.w	r3, [sl, #504]	; 0x1f8
 801745c:	f8dd 36dc 	ldr.w	r3, [sp, #1756]	; 0x6dc
 8017460:	2100      	movs	r1, #0
 8017462:	2201      	movs	r2, #1
 8017464:	f88a 1031 	strb.w	r1, [sl, #49]	; 0x31
 8017468:	701a      	strb	r2, [r3, #0]
 801746a:	f7fe b812 	b.w	8015492 <m_kalman_3gyro.isra.6.constprop.36+0x13ea>
 801746e:	eef4 7ac8 	vcmpe.f32	s15, s16
 8017472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017476:	f300 840f 	bgt.w	8017c98 <m_kalman_3gyro.isra.6.constprop.36+0x3bf0>
 801747a:	eddd 7acf 	vldr	s15, [sp, #828]	; 0x33c
 801747e:	f7fd bf60 	b.w	8015342 <m_kalman_3gyro.isra.6.constprop.36+0x129a>
 8017482:	eddd 7ac2 	vldr	s15, [sp, #776]	; 0x308
 8017486:	eef4 7ac8 	vcmpe.f32	s15, s16
 801748a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801748e:	f300 84d7 	bgt.w	8017e40 <m_kalman_3gyro.isra.6.constprop.36+0x3d98>
 8017492:	eddd 7acf 	vldr	s15, [sp, #828]	; 0x33c
 8017496:	f7fd bc36 	b.w	8014d06 <m_kalman_3gyro.isra.6.constprop.36+0xc5e>
 801749a:	ed9d 7add 	vldr	s14, [sp, #884]	; 0x374
 801749e:	f7fd bf61 	b.w	8015364 <m_kalman_3gyro.isra.6.constprop.36+0x12bc>
 80174a2:	bf00      	nop
 80174a4:	f3af 8000 	nop.w
 80174a8:	47ae147b 	.word	0x47ae147b
 80174ac:	3f747ae1 	.word	0x3f747ae1
 80174b0:	40140000 	.word	0x40140000
 80174b4:	3f19999a 	.word	0x3f19999a
 80174b8:	3f666666 	.word	0x3f666666
 80174bc:	40a00000 	.word	0x40a00000
 80174c0:	3f99999a 	.word	0x3f99999a
 80174c4:	3f4ccccd 	.word	0x3f4ccccd
 80174c8:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 80174cc:	2b01      	cmp	r3, #1
 80174ce:	f43f aa1e 	beq.w	801690e <m_kalman_3gyro.isra.6.constprop.36+0x2866>
 80174d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80174d4:	2b02      	cmp	r3, #2
 80174d6:	f000 8348 	beq.w	8017b6a <m_kalman_3gyro.isra.6.constprop.36+0x3ac2>
 80174da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80174dc:	2b04      	cmp	r3, #4
 80174de:	f47f aa16 	bne.w	801690e <m_kalman_3gyro.isra.6.constprop.36+0x2866>
 80174e2:	49cf      	ldr	r1, [pc, #828]	; (8017820 <m_kalman_3gyro.isra.6.constprop.36+0x3778>)
 80174e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80174e6:	f891 0838 	ldrb.w	r0, [r1, #2104]	; 0x838
 80174ea:	edd3 3a00 	vldr	s7, [r3]
 80174ee:	edd3 0a01 	vldr	s1, [r3, #4]
 80174f2:	ed93 4a02 	vldr	s8, [r3, #8]
 80174f6:	9b08      	ldr	r3, [sp, #32]
 80174f8:	2804      	cmp	r0, #4
 80174fa:	edd3 4a00 	vldr	s9, [r3]
 80174fe:	ed93 5a01 	vldr	s10, [r3, #4]
 8017502:	edd3 5a02 	vldr	s11, [r3, #8]
 8017506:	f240 847d 	bls.w	8017e04 <m_kalman_3gyro.isra.6.constprop.36+0x3d5c>
 801750a:	f601 023c 	addw	r2, r1, #2108	; 0x83c
 801750e:	edd2 2a07 	vldr	s5, [r2, #28]
 8017512:	ed9f aac4 	vldr	s20, [pc, #784]	; 8017824 <m_kalman_3gyro.isra.6.constprop.36+0x377c>
 8017516:	ed92 3a04 	vldr	s6, [r2, #16]
 801751a:	ed9f 1ac3 	vldr	s2, [pc, #780]	; 8017828 <m_kalman_3gyro.isra.6.constprop.36+0x3780>
 801751e:	ed92 7a06 	vldr	s14, [r2, #24]
 8017522:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8017524:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8017526:	6193      	str	r3, [r2, #24]
 8017528:	ee62 7a8a 	vmul.f32	s15, s5, s20
 801752c:	f601 0378 	addw	r3, r1, #2168	; 0x878
 8017530:	eee3 7a01 	vfma.f32	s15, s6, s2
 8017534:	61d0      	str	r0, [r2, #28]
 8017536:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8017538:	ed92 6a08 	vldr	s12, [r2, #32]
 801753c:	ed92 2a03 	vldr	s4, [r2, #12]
 8017540:	edd3 aa03 	vldr	s21, [r3, #12]
 8017544:	edd2 ba05 	vldr	s23, [r2, #20]
 8017548:	ed93 ba04 	vldr	s22, [r3, #16]
 801754c:	ed93 0a05 	vldr	s0, [r3, #20]
 8017550:	ed82 7a03 	vstr	s14, [r2, #12]
 8017554:	edc2 2a04 	vstr	s5, [r2, #16]
 8017558:	eef0 1a67 	vmov.f32	s3, s15
 801755c:	edd3 2a07 	vldr	s5, [r3, #28]
 8017560:	edd3 7a08 	vldr	s15, [r3, #32]
 8017564:	6210      	str	r0, [r2, #32]
 8017566:	ee67 6a0a 	vmul.f32	s13, s14, s20
 801756a:	ed93 7a06 	vldr	s14, [r3, #24]
 801756e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8017570:	ed82 2a00 	vstr	s4, [r2]
 8017574:	ed82 3a01 	vstr	s6, [r2, #4]
 8017578:	ed82 6a05 	vstr	s12, [r2, #20]
 801757c:	ed83 7a03 	vstr	s14, [r3, #12]
 8017580:	edc3 aa00 	vstr	s21, [r3]
 8017584:	edc3 2a04 	vstr	s5, [r3, #16]
 8017588:	edc3 7a05 	vstr	s15, [r3, #20]
 801758c:	edc2 ba02 	vstr	s23, [r2, #8]
 8017590:	6198      	str	r0, [r3, #24]
 8017592:	ed83 ba01 	vstr	s22, [r3, #4]
 8017596:	ed83 0a02 	vstr	s0, [r3, #8]
 801759a:	eee2 6a01 	vfma.f32	s13, s4, s2
 801759e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80175a0:	61d8      	str	r0, [r3, #28]
 80175a2:	ed9f 2aa2 	vldr	s4, [pc, #648]	; 801782c <m_kalman_3gyro.isra.6.constprop.36+0x3784>
 80175a6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80175a8:	6218      	str	r0, [r3, #32]
 80175aa:	ee62 9a8a 	vmul.f32	s19, s5, s20
 80175ae:	edd2 2a0d 	vldr	s5, [r2, #52]	; 0x34
 80175b2:	edc2 0a0d 	vstr	s1, [r2, #52]	; 0x34
 80175b6:	ee26 3a0a 	vmul.f32	s6, s12, s20
 80175ba:	ee27 6a0a 	vmul.f32	s12, s14, s20
 80175be:	ee27 aa8a 	vmul.f32	s20, s15, s20
 80175c2:	eef0 7a61 	vmov.f32	s15, s3
 80175c6:	eee2 7a82 	vfma.f32	s15, s5, s4
 80175ca:	f601 04b4 	addw	r4, r1, #2228	; 0x8b4
 80175ce:	f501 610c 	add.w	r1, r1, #2240	; 0x8c0
 80175d2:	edc2 2a0a 	vstr	s5, [r2, #40]	; 0x28
 80175d6:	edd2 2a0c 	vldr	s5, [r2, #48]	; 0x30
 80175da:	eddf 1a95 	vldr	s3, [pc, #596]	; 8017830 <m_kalman_3gyro.isra.6.constprop.36+0x3788>
 80175de:	edc2 2a09 	vstr	s5, [r2, #36]	; 0x24
 80175e2:	eeb0 7a43 	vmov.f32	s14, s6
 80175e6:	eee2 6a82 	vfma.f32	s13, s5, s4
 80175ea:	eeab 7a81 	vfma.f32	s14, s23, s2
 80175ee:	eee0 7aa1 	vfma.f32	s15, s1, s3
 80175f2:	eea0 aa01 	vfma.f32	s20, s0, s2
 80175f6:	eeaa 6a81 	vfma.f32	s12, s21, s2
 80175fa:	eeeb 9a01 	vfma.f32	s19, s22, s2
 80175fe:	ed92 1a0e 	vldr	s2, [r2, #56]	; 0x38
 8017602:	edd3 0a0c 	vldr	s1, [r3, #48]	; 0x30
 8017606:	ed93 3a0d 	vldr	s6, [r3, #52]	; 0x34
 801760a:	edc4 7a01 	vstr	s15, [r4, #4]
 801760e:	eee3 6aa1 	vfma.f32	s13, s7, s3
 8017612:	eea1 7a02 	vfma.f32	s14, s2, s4
 8017616:	eef0 aa46 	vmov.f32	s21, s12
 801761a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801761e:	ed93 6a0e 	vldr	s12, [r3, #56]	; 0x38
 8017622:	edc4 6a00 	vstr	s13, [r4]
 8017626:	eea4 7a21 	vfma.f32	s14, s8, s3
 801762a:	eee0 aa82 	vfma.f32	s21, s1, s4
 801762e:	eee3 9a02 	vfma.f32	s19, s6, s4
 8017632:	eea6 aa02 	vfma.f32	s20, s12, s4
 8017636:	eee6 7aa6 	vfma.f32	s15, s13, s13
 801763a:	eee4 aaa1 	vfma.f32	s21, s9, s3
 801763e:	eee5 9a21 	vfma.f32	s19, s10, s3
 8017642:	eea5 aaa1 	vfma.f32	s20, s11, s3
 8017646:	eee7 7a07 	vfma.f32	s15, s14, s14
 801764a:	ed84 7a02 	vstr	s14, [r4, #8]
 801764e:	edc2 3a0c 	vstr	s7, [r2, #48]	; 0x30
 8017652:	ed82 1a0b 	vstr	s2, [r2, #44]	; 0x2c
 8017656:	ed82 4a0e 	vstr	s8, [r2, #56]	; 0x38
 801765a:	edc3 0a09 	vstr	s1, [r3, #36]	; 0x24
 801765e:	edc3 4a0c 	vstr	s9, [r3, #48]	; 0x30
 8017662:	ed83 3a0a 	vstr	s6, [r3, #40]	; 0x28
 8017666:	ed83 5a0d 	vstr	s10, [r3, #52]	; 0x34
 801766a:	ed83 6a0b 	vstr	s12, [r3, #44]	; 0x2c
 801766e:	edc3 5a0e 	vstr	s11, [r3, #56]	; 0x38
 8017672:	ee17 0a90 	vmov	r0, s15
 8017676:	edc1 9a01 	vstr	s19, [r1, #4]
 801767a:	edc1 aa00 	vstr	s21, [r1]
 801767e:	ee69 9aa9 	vmul.f32	s19, s19, s19
 8017682:	ed81 aa02 	vstr	s20, [r1, #8]
 8017686:	f7e8 ff67 	bl	8000558 <__aeabi_f2d>
 801768a:	f004 f90b 	bl	801b8a4 <sqrt>
 801768e:	eef0 7a69 	vmov.f32	s15, s19
 8017692:	eeea 7aaa 	vfma.f32	s15, s21, s21
 8017696:	4604      	mov	r4, r0
 8017698:	460d      	mov	r5, r1
 801769a:	eeea 7a0a 	vfma.f32	s15, s20, s20
 801769e:	ee17 0a90 	vmov	r0, s15
 80176a2:	f7e8 ff59 	bl	8000558 <__aeabi_f2d>
 80176a6:	f004 f8fd 	bl	801b8a4 <sqrt>
 80176aa:	f7e9 fa85 	bl	8000bb8 <__aeabi_d2f>
 80176ae:	4629      	mov	r1, r5
 80176b0:	ee09 0a90 	vmov	s19, r0
 80176b4:	4620      	mov	r0, r4
 80176b6:	f7e9 fa7f 	bl	8000bb8 <__aeabi_d2f>
 80176ba:	ee07 0a90 	vmov	s15, r0
 80176be:	eef4 eae7 	vcmpe.f32	s29, s15
 80176c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80176c6:	f77f a933 	ble.w	8016930 <m_kalman_3gyro.isra.6.constprop.36+0x2888>
 80176ca:	eeb4 fae9 	vcmpe.f32	s30, s19
 80176ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80176d2:	f77f a92d 	ble.w	8016930 <m_kalman_3gyro.isra.6.constprop.36+0x2888>
 80176d6:	9b08      	ldr	r3, [sp, #32]
 80176d8:	ed93 7a00 	vldr	s14, [r3]
 80176dc:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
 80176e0:	eeb0 7ac7 	vabs.f32	s14, s14
 80176e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80176e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80176ec:	f57f a920 	bpl.w	8016930 <m_kalman_3gyro.isra.6.constprop.36+0x2888>
 80176f0:	9b08      	ldr	r3, [sp, #32]
 80176f2:	ed93 7a01 	vldr	s14, [r3, #4]
 80176f6:	eeb0 7ac7 	vabs.f32	s14, s14
 80176fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80176fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017702:	f57f a915 	bpl.w	8016930 <m_kalman_3gyro.isra.6.constprop.36+0x2888>
 8017706:	9b08      	ldr	r3, [sp, #32]
 8017708:	ed93 7a02 	vldr	s14, [r3, #8]
 801770c:	eeb0 7ac7 	vabs.f32	s14, s14
 8017710:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017718:	f57f a90a 	bpl.w	8016930 <m_kalman_3gyro.isra.6.constprop.36+0x2888>
 801771c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801771e:	edd3 7a00 	vldr	s15, [r3]
 8017722:	eef0 7ae7 	vabs.f32	s15, s15
 8017726:	ee17 0a90 	vmov	r0, s15
 801772a:	f7e8 ff15 	bl	8000558 <__aeabi_f2d>
 801772e:	a338      	add	r3, pc, #224	; (adr r3, 8017810 <m_kalman_3gyro.isra.6.constprop.36+0x3768>)
 8017730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017734:	f7e9 f9da 	bl	8000aec <__aeabi_dcmplt>
 8017738:	2800      	cmp	r0, #0
 801773a:	f43f a8f9 	beq.w	8016930 <m_kalman_3gyro.isra.6.constprop.36+0x2888>
 801773e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017740:	edd3 7a01 	vldr	s15, [r3, #4]
 8017744:	eef0 7ae7 	vabs.f32	s15, s15
 8017748:	ee17 0a90 	vmov	r0, s15
 801774c:	f7e8 ff04 	bl	8000558 <__aeabi_f2d>
 8017750:	a32f      	add	r3, pc, #188	; (adr r3, 8017810 <m_kalman_3gyro.isra.6.constprop.36+0x3768>)
 8017752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017756:	f7e9 f9c9 	bl	8000aec <__aeabi_dcmplt>
 801775a:	2800      	cmp	r0, #0
 801775c:	f43f a8e8 	beq.w	8016930 <m_kalman_3gyro.isra.6.constprop.36+0x2888>
 8017760:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017762:	edd3 7a02 	vldr	s15, [r3, #8]
 8017766:	eef0 7ae7 	vabs.f32	s15, s15
 801776a:	ee17 0a90 	vmov	r0, s15
 801776e:	f7e8 fef3 	bl	8000558 <__aeabi_f2d>
 8017772:	a327      	add	r3, pc, #156	; (adr r3, 8017810 <m_kalman_3gyro.isra.6.constprop.36+0x3768>)
 8017774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017778:	f7e9 f9b8 	bl	8000aec <__aeabi_dcmplt>
 801777c:	2800      	cmp	r0, #0
 801777e:	f43f a8d7 	beq.w	8016930 <m_kalman_3gyro.isra.6.constprop.36+0x2888>
 8017782:	f8da 2450 	ldr.w	r2, [sl, #1104]	; 0x450
 8017786:	2a0a      	cmp	r2, #10
 8017788:	f47f ac3e 	bne.w	8017008 <m_kalman_3gyro.isra.6.constprop.36+0x2f60>
 801778c:	2301      	movs	r3, #1
 801778e:	9908      	ldr	r1, [sp, #32]
 8017790:	f88a 3204 	strb.w	r3, [sl, #516]	; 0x204
 8017794:	f240 1201 	movw	r2, #257	; 0x101
 8017798:	f8aa 2202 	strh.w	r2, [sl, #514]	; 0x202
 801779c:	680a      	ldr	r2, [r1, #0]
 801779e:	f8ca 207c 	str.w	r2, [sl, #124]	; 0x7c
 80177a2:	684a      	ldr	r2, [r1, #4]
 80177a4:	f8ca 2080 	str.w	r2, [sl, #128]	; 0x80
 80177a8:	688a      	ldr	r2, [r1, #8]
 80177aa:	f8ca 2084 	str.w	r2, [sl, #132]	; 0x84
 80177ae:	f8dd 26d8 	ldr.w	r2, [sp, #1752]	; 0x6d8
 80177b2:	7013      	strb	r3, [r2, #0]
 80177b4:	f8da 345c 	ldr.w	r3, [sl, #1116]	; 0x45c
 80177b8:	f89a 2030 	ldrb.w	r2, [sl, #48]	; 0x30
 80177bc:	3301      	adds	r3, #1
 80177be:	f8ca 345c 	str.w	r3, [sl, #1116]	; 0x45c
 80177c2:	2a00      	cmp	r2, #0
 80177c4:	f000 8226 	beq.w	8017c14 <m_kalman_3gyro.isra.6.constprop.36+0x3b6c>
 80177c8:	f8da 1080 	ldr.w	r1, [sl, #128]	; 0x80
 80177cc:	f8da 2084 	ldr.w	r2, [sl, #132]	; 0x84
 80177d0:	f8ca 10a4 	str.w	r1, [sl, #164]	; 0xa4
 80177d4:	f8ca 20a8 	str.w	r2, [sl, #168]	; 0xa8
 80177d8:	f8da 107c 	ldr.w	r1, [sl, #124]	; 0x7c
 80177dc:	f8ca 10a0 	str.w	r1, [sl, #160]	; 0xa0
 80177e0:	2200      	movs	r2, #0
 80177e2:	f88a 2030 	strb.w	r2, [sl, #48]	; 0x30
 80177e6:	e215      	b.n	8017c14 <m_kalman_3gyro.isra.6.constprop.36+0x3b6c>
 80177e8:	f8da 68b0 	ldr.w	r6, [sl, #2224]	; 0x8b0
 80177ec:	b316      	cbz	r6, 8017834 <m_kalman_3gyro.isra.6.constprop.36+0x378c>
 80177ee:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80177f0:	6818      	ldr	r0, [r3, #0]
 80177f2:	f7e8 feb1 	bl	8000558 <__aeabi_f2d>
 80177f6:	a308      	add	r3, pc, #32	; (adr r3, 8017818 <m_kalman_3gyro.isra.6.constprop.36+0x3770>)
 80177f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80177fc:	f7e9 f994 	bl	8000b28 <__aeabi_dcmpgt>
 8017800:	b1c0      	cbz	r0, 8017834 <m_kalman_3gyro.isra.6.constprop.36+0x378c>
 8017802:	3e01      	subs	r6, #1
 8017804:	f8ca 68b0 	str.w	r6, [sl, #2224]	; 0x8b0
 8017808:	f7fe baac 	b.w	8015d64 <m_kalman_3gyro.isra.6.constprop.36+0x1cbc>
 801780c:	f3af 8000 	nop.w
 8017810:	66666666 	.word	0x66666666
 8017814:	3ff66666 	.word	0x3ff66666
 8017818:	33333333 	.word	0x33333333
 801781c:	3fd33333 	.word	0x3fd33333
 8017820:	200013c8 	.word	0x200013c8
 8017824:	bdcccccd 	.word	0xbdcccccd
 8017828:	be4ccccd 	.word	0xbe4ccccd
 801782c:	3dcccccd 	.word	0x3dcccccd
 8017830:	3e4ccccd 	.word	0x3e4ccccd
 8017834:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 8017836:	6818      	ldr	r0, [r3, #0]
 8017838:	f7e8 fe8e 	bl	8000558 <__aeabi_f2d>
 801783c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017840:	ee1e 0a90 	vmov	r0, s29
 8017844:	f7e8 fe88 	bl	8000558 <__aeabi_f2d>
 8017848:	2200      	movs	r2, #0
 801784a:	4bda      	ldr	r3, [pc, #872]	; (8017bb4 <m_kalman_3gyro.isra.6.constprop.36+0x3b0c>)
 801784c:	f7e8 fedc 	bl	8000608 <__aeabi_dmul>
 8017850:	4602      	mov	r2, r0
 8017852:	460b      	mov	r3, r1
 8017854:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017858:	f7e9 f948 	bl	8000aec <__aeabi_dcmplt>
 801785c:	2800      	cmp	r0, #0
 801785e:	f43e aa81 	beq.w	8015d64 <m_kalman_3gyro.isra.6.constprop.36+0x1cbc>
 8017862:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8017864:	6818      	ldr	r0, [r3, #0]
 8017866:	f7e8 fe77 	bl	8000558 <__aeabi_f2d>
 801786a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801786e:	ee1f 0a10 	vmov	r0, s30
 8017872:	f7e8 fe71 	bl	8000558 <__aeabi_f2d>
 8017876:	2200      	movs	r2, #0
 8017878:	4bce      	ldr	r3, [pc, #824]	; (8017bb4 <m_kalman_3gyro.isra.6.constprop.36+0x3b0c>)
 801787a:	f7e8 fec5 	bl	8000608 <__aeabi_dmul>
 801787e:	4602      	mov	r2, r0
 8017880:	460b      	mov	r3, r1
 8017882:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017886:	f7e9 f931 	bl	8000aec <__aeabi_dcmplt>
 801788a:	2800      	cmp	r0, #0
 801788c:	f43e aa6a 	beq.w	8015d64 <m_kalman_3gyro.isra.6.constprop.36+0x1cbc>
 8017890:	4bc9      	ldr	r3, [pc, #804]	; (8017bb8 <m_kalman_3gyro.isra.6.constprop.36+0x3b10>)
 8017892:	f89a 58ad 	ldrb.w	r5, [sl, #2221]	; 0x8ad
 8017896:	6818      	ldr	r0, [r3, #0]
 8017898:	f7e8 fe5e 	bl	8000558 <__aeabi_f2d>
 801789c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80178a0:	ee1e 0a10 	vmov	r0, s28
 80178a4:	f7e8 fe58 	bl	8000558 <__aeabi_f2d>
 80178a8:	4602      	mov	r2, r0
 80178aa:	460b      	mov	r3, r1
 80178ac:	f7e8 fcf6 	bl	800029c <__adddf3>
 80178b0:	4602      	mov	r2, r0
 80178b2:	460b      	mov	r3, r1
 80178b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80178b8:	f7e9 f936 	bl	8000b28 <__aeabi_dcmpgt>
 80178bc:	2800      	cmp	r0, #0
 80178be:	f000 8376 	beq.w	8017fae <m_kalman_3gyro.isra.6.constprop.36+0x3f06>
 80178c2:	2300      	movs	r3, #0
 80178c4:	2d0e      	cmp	r5, #14
 80178c6:	f8aa 31fc 	strh.w	r3, [sl, #508]	; 0x1fc
 80178ca:	f88a 31fe 	strb.w	r3, [sl, #510]	; 0x1fe
 80178ce:	f88a 3205 	strb.w	r3, [sl, #517]	; 0x205
 80178d2:	f88a 3207 	strb.w	r3, [sl, #519]	; 0x207
 80178d6:	bf95      	itete	ls
 80178d8:	3503      	addls	r5, #3
 80178da:	2364      	movhi	r3, #100	; 0x64
 80178dc:	f88a 58ad 	strbls.w	r5, [sl, #2221]	; 0x8ad
 80178e0:	f8ca 38b0 	strhi.w	r3, [sl, #2224]	; 0x8b0
 80178e4:	f7fe ba3e 	b.w	8015d64 <m_kalman_3gyro.isra.6.constprop.36+0x1cbc>
 80178e8:	eeb0 aa48 	vmov.f32	s20, s16
 80178ec:	f7fe be42 	b.w	8016574 <m_kalman_3gyro.isra.6.constprop.36+0x24cc>
 80178f0:	eef0 ca48 	vmov.f32	s25, s16
 80178f4:	f7fe be2a 	b.w	801654c <m_kalman_3gyro.isra.6.constprop.36+0x24a4>
 80178f8:	1c54      	adds	r4, r2, #1
 80178fa:	4611      	mov	r1, r2
 80178fc:	f7fd bf02 	b.w	8015704 <m_kalman_3gyro.isra.6.constprop.36+0x165c>
 8017900:	240a      	movs	r4, #10
 8017902:	2002      	movs	r0, #2
 8017904:	2101      	movs	r1, #1
 8017906:	f06f 4540 	mvn.w	r5, #3221225472	; 0xc0000000
 801790a:	190a      	adds	r2, r1, r4
 801790c:	0852      	lsrs	r2, r2, #1
 801790e:	1953      	adds	r3, r2, r5
 8017910:	f50d 66c6 	add.w	r6, sp, #1584	; 0x630
 8017914:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8017918:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 801791c:	ed93 7a00 	vldr	s14, [r3]
 8017920:	eef4 7ac7 	vcmpe.f32	s15, s14
 8017924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017928:	f280 8189 	bge.w	8017c3e <m_kalman_3gyro.isra.6.constprop.36+0x3b96>
 801792c:	188b      	adds	r3, r1, r2
 801792e:	085b      	lsrs	r3, r3, #1
 8017930:	195c      	adds	r4, r3, r5
 8017932:	f50d 66c6 	add.w	r6, sp, #1584	; 0x630
 8017936:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 801793a:	4290      	cmp	r0, r2
 801793c:	f5a4 7474 	sub.w	r4, r4, #976	; 0x3d0
 8017940:	d212      	bcs.n	8017968 <m_kalman_3gyro.isra.6.constprop.36+0x38c0>
 8017942:	ed94 7a00 	vldr	s14, [r4]
 8017946:	eef4 7ac7 	vcmpe.f32	s15, s14
 801794a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801794e:	da05      	bge.n	801795c <m_kalman_3gyro.isra.6.constprop.36+0x38b4>
 8017950:	461a      	mov	r2, r3
 8017952:	e7eb      	b.n	801792c <m_kalman_3gyro.isra.6.constprop.36+0x3884>
 8017954:	eddd 9a6a 	vldr	s19, [sp, #424]	; 0x1a8
 8017958:	f7fd befc 	b.w	8015754 <m_kalman_3gyro.isra.6.constprop.36+0x16ac>
 801795c:	4614      	mov	r4, r2
 801795e:	1c58      	adds	r0, r3, #1
 8017960:	4284      	cmp	r4, r0
 8017962:	4619      	mov	r1, r3
 8017964:	d8d1      	bhi.n	801790a <m_kalman_3gyro.isra.6.constprop.36+0x3862>
 8017966:	e000      	b.n	801796a <m_kalman_3gyro.isra.6.constprop.36+0x38c2>
 8017968:	460b      	mov	r3, r1
 801796a:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
 801796e:	185a      	adds	r2, r3, r1
 8017970:	0092      	lsls	r2, r2, #2
 8017972:	009b      	lsls	r3, r3, #2
 8017974:	a898      	add	r0, sp, #608	; 0x260
 8017976:	1884      	adds	r4, r0, r2
 8017978:	4418      	add	r0, r3
 801797a:	edd4 6a00 	vldr	s13, [r4]
 801797e:	ed90 7a00 	vldr	s14, [r0]
 8017982:	ee37 6ae6 	vsub.f32	s12, s15, s13
 8017986:	ee37 7a66 	vsub.f32	s14, s14, s13
 801798a:	a8a2      	add	r0, sp, #648	; 0x288
 801798c:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8017990:	4402      	add	r2, r0
 8017992:	4403      	add	r3, r0
 8017994:	250a      	movs	r5, #10
 8017996:	2402      	movs	r4, #2
 8017998:	2001      	movs	r0, #1
 801799a:	edd2 8a00 	vldr	s17, [r2]
 801799e:	ed93 7a00 	vldr	s14, [r3]
 80179a2:	ee37 7a68 	vsub.f32	s14, s14, s17
 80179a6:	eee6 8a87 	vfma.f32	s17, s13, s14
 80179aa:	182a      	adds	r2, r5, r0
 80179ac:	0852      	lsrs	r2, r2, #1
 80179ae:	1853      	adds	r3, r2, r1
 80179b0:	f50d 66c6 	add.w	r6, sp, #1584	; 0x630
 80179b4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80179b8:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 80179bc:	ed93 7a00 	vldr	s14, [r3]
 80179c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80179c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80179c8:	f280 81d9 	bge.w	8017d7e <m_kalman_3gyro.isra.6.constprop.36+0x3cd6>
 80179cc:	1813      	adds	r3, r2, r0
 80179ce:	085b      	lsrs	r3, r3, #1
 80179d0:	185d      	adds	r5, r3, r1
 80179d2:	f50d 66c6 	add.w	r6, sp, #1584	; 0x630
 80179d6:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 80179da:	42a2      	cmp	r2, r4
 80179dc:	f5a5 7574 	sub.w	r5, r5, #976	; 0x3d0
 80179e0:	d908      	bls.n	80179f4 <m_kalman_3gyro.isra.6.constprop.36+0x394c>
 80179e2:	ed95 7a00 	vldr	s14, [r5]
 80179e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80179ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80179ee:	da22      	bge.n	8017a36 <m_kalman_3gyro.isra.6.constprop.36+0x398e>
 80179f0:	461a      	mov	r2, r3
 80179f2:	e7eb      	b.n	80179cc <m_kalman_3gyro.isra.6.constprop.36+0x3924>
 80179f4:	4603      	mov	r3, r0
 80179f6:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 80179fa:	3a01      	subs	r2, #1
 80179fc:	0091      	lsls	r1, r2, #2
 80179fe:	009b      	lsls	r3, r3, #2
 8017a00:	aa98      	add	r2, sp, #608	; 0x260
 8017a02:	1850      	adds	r0, r2, r1
 8017a04:	441a      	add	r2, r3
 8017a06:	edd0 6a00 	vldr	s13, [r0]
 8017a0a:	ed92 7a00 	vldr	s14, [r2]
 8017a0e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8017a12:	ee37 7a66 	vsub.f32	s14, s14, s13
 8017a16:	aaac      	add	r2, sp, #688	; 0x2b0
 8017a18:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8017a1c:	440a      	add	r2, r1
 8017a1e:	a9ac      	add	r1, sp, #688	; 0x2b0
 8017a20:	440b      	add	r3, r1
 8017a22:	ed92 9a00 	vldr	s18, [r2]
 8017a26:	edd3 7a00 	vldr	s15, [r3]
 8017a2a:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8017a2e:	eea6 9aa7 	vfma.f32	s18, s13, s15
 8017a32:	f7fd be2c 	b.w	801568e <m_kalman_3gyro.isra.6.constprop.36+0x15e6>
 8017a36:	4615      	mov	r5, r2
 8017a38:	1c5c      	adds	r4, r3, #1
 8017a3a:	42ac      	cmp	r4, r5
 8017a3c:	4618      	mov	r0, r3
 8017a3e:	d3b4      	bcc.n	80179aa <m_kalman_3gyro.isra.6.constprop.36+0x3902>
 8017a40:	e7d9      	b.n	80179f6 <m_kalman_3gyro.isra.6.constprop.36+0x394e>
 8017a42:	f8dd 3698 	ldr.w	r3, [sp, #1688]	; 0x698
 8017a46:	edd3 6a06 	vldr	s13, [r3, #24]
 8017a4a:	ed93 7a07 	vldr	s14, [r3, #28]
 8017a4e:	edd3 7a08 	vldr	s15, [r3, #32]
 8017a52:	f8dd 2698 	ldr.w	r2, [sp, #1688]	; 0x698
 8017a56:	ee69 6aa6 	vmul.f32	s13, s19, s13
 8017a5a:	ee29 7a87 	vmul.f32	s14, s19, s14
 8017a5e:	ee69 7aa7 	vmul.f32	s15, s19, s15
 8017a62:	2300      	movs	r3, #0
 8017a64:	edc2 6a06 	vstr	s13, [r2, #24]
 8017a68:	ed82 7a07 	vstr	s14, [r2, #28]
 8017a6c:	edc2 7a08 	vstr	s15, [r2, #32]
 8017a70:	f8aa 38a6 	strh.w	r3, [sl, #2214]	; 0x8a6
 8017a74:	f89a 38a4 	ldrb.w	r3, [sl, #2212]	; 0x8a4
 8017a78:	2b00      	cmp	r3, #0
 8017a7a:	f47f abf5 	bne.w	8017268 <m_kalman_3gyro.isra.6.constprop.36+0x31c0>
 8017a7e:	f89a 2030 	ldrb.w	r2, [sl, #48]	; 0x30
 8017a82:	b32a      	cbz	r2, 8017ad0 <m_kalman_3gyro.isra.6.constprop.36+0x3a28>
 8017a84:	ed9d 7a02 	vldr	s14, [sp, #8]
 8017a88:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8017a8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a94:	d51c      	bpl.n	8017ad0 <m_kalman_3gyro.isra.6.constprop.36+0x3a28>
 8017a96:	ed9a 7af1 	vldr	s14, [sl, #964]	; 0x3c4
 8017a9a:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 8017a9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017aa6:	d513      	bpl.n	8017ad0 <m_kalman_3gyro.isra.6.constprop.36+0x3a28>
 8017aa8:	f8da 13d8 	ldr.w	r1, [sl, #984]	; 0x3d8
 8017aac:	f8ca 1080 	str.w	r1, [sl, #128]	; 0x80
 8017ab0:	f8da 13d4 	ldr.w	r1, [sl, #980]	; 0x3d4
 8017ab4:	f8da 23dc 	ldr.w	r2, [sl, #988]	; 0x3dc
 8017ab8:	f8ca 107c 	str.w	r1, [sl, #124]	; 0x7c
 8017abc:	f8dd 16d8 	ldr.w	r1, [sp, #1752]	; 0x6d8
 8017ac0:	f8ca 2084 	str.w	r2, [sl, #132]	; 0x84
 8017ac4:	2201      	movs	r2, #1
 8017ac6:	700a      	strb	r2, [r1, #0]
 8017ac8:	f88a 3030 	strb.w	r3, [sl, #48]	; 0x30
 8017acc:	f7fd bee3 	b.w	8015896 <m_kalman_3gyro.isra.6.constprop.36+0x17ee>
 8017ad0:	f8da 2454 	ldr.w	r2, [sl, #1108]	; 0x454
 8017ad4:	2a1e      	cmp	r2, #30
 8017ad6:	d00e      	beq.n	8017af6 <m_kalman_3gyro.isra.6.constprop.36+0x3a4e>
 8017ad8:	2a00      	cmp	r2, #0
 8017ada:	f102 0301 	add.w	r3, r2, #1
 8017ade:	dd03      	ble.n	8017ae8 <m_kalman_3gyro.isra.6.constprop.36+0x3a40>
 8017ae0:	2b00      	cmp	r3, #0
 8017ae2:	bfd8      	it	le
 8017ae4:	f06f 4300 	mvnle.w	r3, #2147483648	; 0x80000000
 8017ae8:	2200      	movs	r2, #0
 8017aea:	f8ca 3454 	str.w	r3, [sl, #1108]	; 0x454
 8017aee:	f8ca 245c 	str.w	r2, [sl, #1116]	; 0x45c
 8017af2:	f7fd bed0 	b.w	8015896 <m_kalman_3gyro.isra.6.constprop.36+0x17ee>
 8017af6:	f8ba 38a6 	ldrh.w	r3, [sl, #2214]	; 0x8a6
 8017afa:	2b27      	cmp	r3, #39	; 0x27
 8017afc:	f200 8130 	bhi.w	8017d60 <m_kalman_3gyro.isra.6.constprop.36+0x3cb8>
 8017b00:	f8da 23d8 	ldr.w	r2, [sl, #984]	; 0x3d8
 8017b04:	f8ca 2080 	str.w	r2, [sl, #128]	; 0x80
 8017b08:	f8da 23d4 	ldr.w	r2, [sl, #980]	; 0x3d4
 8017b0c:	f8da 33dc 	ldr.w	r3, [sl, #988]	; 0x3dc
 8017b10:	f8ca 207c 	str.w	r2, [sl, #124]	; 0x7c
 8017b14:	f8dd 26d8 	ldr.w	r2, [sp, #1752]	; 0x6d8
 8017b18:	f8ca 3084 	str.w	r3, [sl, #132]	; 0x84
 8017b1c:	2301      	movs	r3, #1
 8017b1e:	7013      	strb	r3, [r2, #0]
 8017b20:	f8ba 38a8 	ldrh.w	r3, [sl, #2216]	; 0x8a8
 8017b24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017b28:	3301      	adds	r3, #1
 8017b2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017b2e:	bf08      	it	eq
 8017b30:	4613      	moveq	r3, r2
 8017b32:	2201      	movs	r2, #1
 8017b34:	f8aa 38a8 	strh.w	r3, [sl, #2216]	; 0x8a8
 8017b38:	f8ca 245c 	str.w	r2, [sl, #1116]	; 0x45c
 8017b3c:	f7fd beab 	b.w	8015896 <m_kalman_3gyro.isra.6.constprop.36+0x17ee>
 8017b40:	f8da 2450 	ldr.w	r2, [sl, #1104]	; 0x450
 8017b44:	2a32      	cmp	r2, #50	; 0x32
 8017b46:	f000 81a5 	beq.w	8017e94 <m_kalman_3gyro.isra.6.constprop.36+0x3dec>
 8017b4a:	2300      	movs	r3, #0
 8017b4c:	2a00      	cmp	r2, #0
 8017b4e:	f8aa 3202 	strh.w	r3, [sl, #514]	; 0x202
 8017b52:	f88a 3204 	strb.w	r3, [sl, #516]	; 0x204
 8017b56:	f102 0301 	add.w	r3, r2, #1
 8017b5a:	f77f abb9 	ble.w	80172d0 <m_kalman_3gyro.isra.6.constprop.36+0x3228>
 8017b5e:	2b00      	cmp	r3, #0
 8017b60:	bfd8      	it	le
 8017b62:	f06f 4300 	mvnle.w	r3, #2147483648	; 0x80000000
 8017b66:	f7ff bbb3 	b.w	80172d0 <m_kalman_3gyro.isra.6.constprop.36+0x3228>
 8017b6a:	2301      	movs	r3, #1
 8017b6c:	f88a 3204 	strb.w	r3, [sl, #516]	; 0x204
 8017b70:	f240 1201 	movw	r2, #257	; 0x101
 8017b74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017b76:	f8aa 2202 	strh.w	r2, [sl, #514]	; 0x202
 8017b7a:	edd3 7a00 	vldr	s15, [r3]
 8017b7e:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8017b82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017b86:	eef4 7ac8 	vcmpe.f32	s15, s16
 8017b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b8e:	f280 8136 	bge.w	8017dfe <m_kalman_3gyro.isra.6.constprop.36+0x3d56>
 8017b92:	f8dd 3698 	ldr.w	r3, [sp, #1688]	; 0x698
 8017b96:	eeb4 eaed 	vcmpe.f32	s28, s27
 8017b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b9e:	edd3 6a06 	vldr	s13, [r3, #24]
 8017ba2:	ed93 7a07 	vldr	s14, [r3, #28]
 8017ba6:	edd3 7a08 	vldr	s15, [r3, #32]
 8017baa:	f300 80ea 	bgt.w	8017d82 <m_kalman_3gyro.isra.6.constprop.36+0x3cda>
 8017bae:	ac86      	add	r4, sp, #536	; 0x218
 8017bb0:	e74f      	b.n	8017a52 <m_kalman_3gyro.isra.6.constprop.36+0x39aa>
 8017bb2:	bf00      	nop
 8017bb4:	3ff80000 	.word	0x3ff80000
 8017bb8:	20001bf0 	.word	0x20001bf0
 8017bbc:	3e4ccccd 	.word	0x3e4ccccd
 8017bc0:	9908      	ldr	r1, [sp, #32]
 8017bc2:	f88a 3204 	strb.w	r3, [sl, #516]	; 0x204
 8017bc6:	f240 1201 	movw	r2, #257	; 0x101
 8017bca:	f8aa 2202 	strh.w	r2, [sl, #514]	; 0x202
 8017bce:	680a      	ldr	r2, [r1, #0]
 8017bd0:	f8ca 207c 	str.w	r2, [sl, #124]	; 0x7c
 8017bd4:	684a      	ldr	r2, [r1, #4]
 8017bd6:	f8ca 2080 	str.w	r2, [sl, #128]	; 0x80
 8017bda:	688a      	ldr	r2, [r1, #8]
 8017bdc:	f8ca 2084 	str.w	r2, [sl, #132]	; 0x84
 8017be0:	f8dd 26d8 	ldr.w	r2, [sp, #1752]	; 0x6d8
 8017be4:	7013      	strb	r3, [r2, #0]
 8017be6:	f8da 345c 	ldr.w	r3, [sl, #1116]	; 0x45c
 8017bea:	f89a 2030 	ldrb.w	r2, [sl, #48]	; 0x30
 8017bee:	3301      	adds	r3, #1
 8017bf0:	f8ca 345c 	str.w	r3, [sl, #1116]	; 0x45c
 8017bf4:	b172      	cbz	r2, 8017c14 <m_kalman_3gyro.isra.6.constprop.36+0x3b6c>
 8017bf6:	f8da 107c 	ldr.w	r1, [sl, #124]	; 0x7c
 8017bfa:	f8da 2080 	ldr.w	r2, [sl, #128]	; 0x80
 8017bfe:	f8ca 10a0 	str.w	r1, [sl, #160]	; 0xa0
 8017c02:	f8ca 20a4 	str.w	r2, [sl, #164]	; 0xa4
 8017c06:	f8da 1084 	ldr.w	r1, [sl, #132]	; 0x84
 8017c0a:	f8ca 10a8 	str.w	r1, [sl, #168]	; 0xa8
 8017c0e:	2200      	movs	r2, #0
 8017c10:	f88a 2030 	strb.w	r2, [sl, #48]	; 0x30
 8017c14:	2b1e      	cmp	r3, #30
 8017c16:	f47e ae8b 	bne.w	8016930 <m_kalman_3gyro.isra.6.constprop.36+0x2888>
 8017c1a:	f60a 0398 	addw	r3, sl, #2200	; 0x898
 8017c1e:	f8da 00a0 	ldr.w	r0, [sl, #160]	; 0xa0
 8017c22:	f8da 10a4 	ldr.w	r1, [sl, #164]	; 0xa4
 8017c26:	f8da 20a8 	ldr.w	r2, [sl, #168]	; 0xa8
 8017c2a:	6018      	str	r0, [r3, #0]
 8017c2c:	f60a 039c 	addw	r3, sl, #2204	; 0x89c
 8017c30:	ac86      	add	r4, sp, #536	; 0x218
 8017c32:	6019      	str	r1, [r3, #0]
 8017c34:	f50a 630a 	add.w	r3, sl, #2208	; 0x8a0
 8017c38:	601a      	str	r2, [r3, #0]
 8017c3a:	f7fd be2c 	b.w	8015896 <m_kalman_3gyro.isra.6.constprop.36+0x17ee>
 8017c3e:	4613      	mov	r3, r2
 8017c40:	e68d      	b.n	801795e <m_kalman_3gyro.isra.6.constprop.36+0x38b6>
 8017c42:	200d      	movs	r0, #13
 8017c44:	2402      	movs	r4, #2
 8017c46:	2101      	movs	r1, #1
 8017c48:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
 8017c4c:	1843      	adds	r3, r0, r1
 8017c4e:	085b      	lsrs	r3, r3, #1
 8017c50:	199a      	adds	r2, r3, r6
 8017c52:	f50d 65c6 	add.w	r5, sp, #1584	; 0x630
 8017c56:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 8017c5a:	f5a5 753c 	sub.w	r5, r5, #752	; 0x2f0
 8017c5e:	e00e      	b.n	8017c7e <m_kalman_3gyro.isra.6.constprop.36+0x3bd6>
 8017c60:	18ca      	adds	r2, r1, r3
 8017c62:	4618      	mov	r0, r3
 8017c64:	429c      	cmp	r4, r3
 8017c66:	ea4f 0352 	mov.w	r3, r2, lsr #1
 8017c6a:	eb03 0206 	add.w	r2, r3, r6
 8017c6e:	f50d 65c6 	add.w	r5, sp, #1584	; 0x630
 8017c72:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 8017c76:	f5a5 753c 	sub.w	r5, r5, #752	; 0x2f0
 8017c7a:	f080 8180 	bcs.w	8017f7e <m_kalman_3gyro.isra.6.constprop.36+0x3ed6>
 8017c7e:	ed95 7a00 	vldr	s14, [r5]
 8017c82:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8017c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c8a:	dbe9      	blt.n	8017c60 <m_kalman_3gyro.isra.6.constprop.36+0x3bb8>
 8017c8c:	1c5c      	adds	r4, r3, #1
 8017c8e:	42a0      	cmp	r0, r4
 8017c90:	4619      	mov	r1, r3
 8017c92:	d8db      	bhi.n	8017c4c <m_kalman_3gyro.isra.6.constprop.36+0x3ba4>
 8017c94:	f7fd b873 	b.w	8014d7e <m_kalman_3gyro.isra.6.constprop.36+0xcd6>
 8017c98:	200d      	movs	r0, #13
 8017c9a:	2402      	movs	r4, #2
 8017c9c:	2101      	movs	r1, #1
 8017c9e:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
 8017ca2:	180b      	adds	r3, r1, r0
 8017ca4:	085b      	lsrs	r3, r3, #1
 8017ca6:	199a      	adds	r2, r3, r6
 8017ca8:	f50d 65c6 	add.w	r5, sp, #1584	; 0x630
 8017cac:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 8017cb0:	f5a5 7556 	sub.w	r5, r5, #856	; 0x358
 8017cb4:	edd5 7a00 	vldr	s15, [r5]
 8017cb8:	eef4 7ac8 	vcmpe.f32	s15, s16
 8017cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017cc0:	d915      	bls.n	8017cee <m_kalman_3gyro.isra.6.constprop.36+0x3c46>
 8017cc2:	18ca      	adds	r2, r1, r3
 8017cc4:	4618      	mov	r0, r3
 8017cc6:	429c      	cmp	r4, r3
 8017cc8:	ea4f 0352 	mov.w	r3, r2, lsr #1
 8017ccc:	eb03 0206 	add.w	r2, r3, r6
 8017cd0:	f50d 65c6 	add.w	r5, sp, #1584	; 0x630
 8017cd4:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 8017cd8:	f5a5 7556 	sub.w	r5, r5, #856	; 0x358
 8017cdc:	f080 8177 	bcs.w	8017fce <m_kalman_3gyro.isra.6.constprop.36+0x3f26>
 8017ce0:	edd5 7a00 	vldr	s15, [r5]
 8017ce4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8017ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017cec:	dbe9      	blt.n	8017cc2 <m_kalman_3gyro.isra.6.constprop.36+0x3c1a>
 8017cee:	1c5c      	adds	r4, r3, #1
 8017cf0:	42a0      	cmp	r0, r4
 8017cf2:	4619      	mov	r1, r3
 8017cf4:	d8d5      	bhi.n	8017ca2 <m_kalman_3gyro.isra.6.constprop.36+0x3bfa>
 8017cf6:	0092      	lsls	r2, r2, #2
 8017cf8:	009b      	lsls	r3, r3, #2
 8017cfa:	a9b6      	add	r1, sp, #728	; 0x2d8
 8017cfc:	1888      	adds	r0, r1, r2
 8017cfe:	4419      	add	r1, r3
 8017d00:	edd0 6a00 	vldr	s13, [r0]
 8017d04:	edd1 7a00 	vldr	s15, [r1]
 8017d08:	ee78 5a66 	vsub.f32	s11, s16, s13
 8017d0c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8017d10:	a9c3      	add	r1, sp, #780	; 0x30c
 8017d12:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8017d16:	440a      	add	r2, r1
 8017d18:	440b      	add	r3, r1
 8017d1a:	edd2 7a00 	vldr	s15, [r2]
 8017d1e:	edd3 6a00 	vldr	s13, [r3]
 8017d22:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8017d26:	eee6 7a26 	vfma.f32	s15, s12, s13
 8017d2a:	f7fd bb0a 	b.w	8015342 <m_kalman_3gyro.isra.6.constprop.36+0x129a>
 8017d2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017d32:	f8aa 38a6 	strh.w	r3, [sl, #2214]	; 0x8a6
 8017d36:	f7ff ba60 	b.w	80171fa <m_kalman_3gyro.isra.6.constprop.36+0x3152>
 8017d3a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8017d3e:	f8ca 3130 	str.w	r3, [sl, #304]	; 0x130
 8017d42:	f8ca 3158 	str.w	r3, [sl, #344]	; 0x158
 8017d46:	f8ca 3180 	str.w	r3, [sl, #384]	; 0x180
 8017d4a:	e693      	b.n	8017a74 <m_kalman_3gyro.isra.6.constprop.36+0x39cc>
 8017d4c:	f8ca 0450 	str.w	r0, [sl, #1104]	; 0x450
 8017d50:	f8aa 0202 	strh.w	r0, [sl, #514]	; 0x202
 8017d54:	f88a 0204 	strb.w	r0, [sl, #516]	; 0x204
 8017d58:	f8ca 045c 	str.w	r0, [sl, #1116]	; 0x45c
 8017d5c:	f7fd bd9b 	b.w	8015896 <m_kalman_3gyro.isra.6.constprop.36+0x17ee>
 8017d60:	9a08      	ldr	r2, [sp, #32]
 8017d62:	6813      	ldr	r3, [r2, #0]
 8017d64:	f8ca 307c 	str.w	r3, [sl, #124]	; 0x7c
 8017d68:	6853      	ldr	r3, [r2, #4]
 8017d6a:	f8ca 3080 	str.w	r3, [sl, #128]	; 0x80
 8017d6e:	6892      	ldr	r2, [r2, #8]
 8017d70:	f8ca 2084 	str.w	r2, [sl, #132]	; 0x84
 8017d74:	f8dd 26d8 	ldr.w	r2, [sp, #1752]	; 0x6d8
 8017d78:	2301      	movs	r3, #1
 8017d7a:	7013      	strb	r3, [r2, #0]
 8017d7c:	e6d0      	b.n	8017b20 <m_kalman_3gyro.isra.6.constprop.36+0x3a78>
 8017d7e:	4613      	mov	r3, r2
 8017d80:	e65a      	b.n	8017a38 <m_kalman_3gyro.isra.6.constprop.36+0x3990>
 8017d82:	eef4 eaec 	vcmpe.f32	s29, s25
 8017d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d8a:	f77f af10 	ble.w	8017bae <m_kalman_3gyro.isra.6.constprop.36+0x3b06>
 8017d8e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8017d90:	ed93 5a00 	vldr	s10, [r3]
 8017d94:	eeb4 fac5 	vcmpe.f32	s30, s10
 8017d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d9c:	f77f af07 	ble.w	8017bae <m_kalman_3gyro.isra.6.constprop.36+0x3b06>
 8017da0:	ed9d 6a02 	vldr	s12, [sp, #8]
 8017da4:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8017da8:	eeb4 6ae5 	vcmpe.f32	s12, s11
 8017dac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017db0:	f57f aefd 	bpl.w	8017bae <m_kalman_3gyro.isra.6.constprop.36+0x3b06>
 8017db4:	ee8d 6a8e 	vdiv.f32	s12, s27, s28
 8017db8:	ee8c 4aae 	vdiv.f32	s8, s25, s29
 8017dbc:	eec5 4a0f 	vdiv.f32	s9, s10, s30
 8017dc0:	ee36 6a04 	vadd.f32	s12, s12, s8
 8017dc4:	eeb7 5a08 	vmov.f32	s10, #120	; 0x3fc00000  1.5
 8017dc8:	ee36 6a24 	vadd.f32	s12, s12, s9
 8017dcc:	eeb4 6ac5 	vcmpe.f32	s12, s10
 8017dd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017dd4:	f57f aeeb 	bpl.w	8017bae <m_kalman_3gyro.isra.6.constprop.36+0x3b06>
 8017dd8:	f8dd 2698 	ldr.w	r2, [sp, #1688]	; 0x698
 8017ddc:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8017de0:	ee27 7a25 	vmul.f32	s14, s14, s11
 8017de4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8017de8:	2300      	movs	r3, #0
 8017dea:	edc2 6a06 	vstr	s13, [r2, #24]
 8017dee:	ed82 7a07 	vstr	s14, [r2, #28]
 8017df2:	edc2 7a08 	vstr	s15, [r2, #32]
 8017df6:	ac86      	add	r4, sp, #536	; 0x218
 8017df8:	f8aa 38a6 	strh.w	r3, [sl, #2214]	; 0x8a6
 8017dfc:	e63a      	b.n	8017a74 <m_kalman_3gyro.isra.6.constprop.36+0x39cc>
 8017dfe:	ac86      	add	r4, sp, #536	; 0x218
 8017e00:	f7ff b9d5 	b.w	80171ae <m_kalman_3gyro.isra.6.constprop.36+0x3106>
 8017e04:	230c      	movs	r3, #12
 8017e06:	fb03 f400 	mul.w	r4, r3, r0
 8017e0a:	f601 0378 	addw	r3, r1, #2168	; 0x878
 8017e0e:	4423      	add	r3, r4
 8017e10:	edc3 4a00 	vstr	s9, [r3]
 8017e14:	f601 023c 	addw	r2, r1, #2108	; 0x83c
 8017e18:	ed83 5a01 	vstr	s10, [r3, #4]
 8017e1c:	edc3 5a02 	vstr	s11, [r3, #8]
 8017e20:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 8017e24:	4422      	add	r2, r4
 8017e26:	3001      	adds	r0, #1
 8017e28:	2400      	movs	r4, #0
 8017e2a:	f881 0838 	strb.w	r0, [r1, #2104]	; 0x838
 8017e2e:	edc2 3a00 	vstr	s7, [r2]
 8017e32:	edc2 0a01 	vstr	s1, [r2, #4]
 8017e36:	ed82 4a02 	vstr	s8, [r2, #8]
 8017e3a:	701c      	strb	r4, [r3, #0]
 8017e3c:	f7fe bd1f 	b.w	801687e <m_kalman_3gyro.isra.6.constprop.36+0x27d6>
 8017e40:	240d      	movs	r4, #13
 8017e42:	2002      	movs	r0, #2
 8017e44:	2101      	movs	r1, #1
 8017e46:	f06f 4540 	mvn.w	r5, #3221225472	; 0xc0000000
 8017e4a:	1862      	adds	r2, r4, r1
 8017e4c:	0852      	lsrs	r2, r2, #1
 8017e4e:	1953      	adds	r3, r2, r5
 8017e50:	f50d 66c6 	add.w	r6, sp, #1584	; 0x630
 8017e54:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8017e58:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 8017e5c:	edd3 7a00 	vldr	s15, [r3]
 8017e60:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8017e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e68:	f280 80af 	bge.w	8017fca <m_kalman_3gyro.isra.6.constprop.36+0x3f22>
 8017e6c:	188b      	adds	r3, r1, r2
 8017e6e:	085b      	lsrs	r3, r3, #1
 8017e70:	195c      	adds	r4, r3, r5
 8017e72:	f50d 66c6 	add.w	r6, sp, #1584	; 0x630
 8017e76:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8017e7a:	4290      	cmp	r0, r2
 8017e7c:	f5a4 7456 	sub.w	r4, r4, #856	; 0x358
 8017e80:	d259      	bcs.n	8017f36 <m_kalman_3gyro.isra.6.constprop.36+0x3e8e>
 8017e82:	edd4 7a00 	vldr	s15, [r4]
 8017e86:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8017e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e8e:	da4c      	bge.n	8017f2a <m_kalman_3gyro.isra.6.constprop.36+0x3e82>
 8017e90:	461a      	mov	r2, r3
 8017e92:	e7eb      	b.n	8017e6c <m_kalman_3gyro.isra.6.constprop.36+0x3dc4>
 8017e94:	f8dd 3698 	ldr.w	r3, [sp, #1688]	; 0x698
 8017e98:	ed1f 7ab8 	vldr	s14, [pc, #-736]	; 8017bbc <m_kalman_3gyro.isra.6.constprop.36+0x3b14>
 8017e9c:	edd3 7a06 	vldr	s15, [r3, #24]
 8017ea0:	f8dd 1698 	ldr.w	r1, [sp, #1688]	; 0x698
 8017ea4:	f8da 245c 	ldr.w	r2, [sl, #1116]	; 0x45c
 8017ea8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017eac:	2301      	movs	r3, #1
 8017eae:	edc1 7a06 	vstr	s15, [r1, #24]
 8017eb2:	f88a 3202 	strb.w	r3, [sl, #514]	; 0x202
 8017eb6:	edd1 7a07 	vldr	s15, [r1, #28]
 8017eba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017ebe:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8017ec2:	edc1 7a07 	vstr	s15, [r1, #28]
 8017ec6:	f88a 3203 	strb.w	r3, [sl, #515]	; 0x203
 8017eca:	edd1 7a08 	vldr	s15, [r1, #32]
 8017ece:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017ed2:	edc1 7a08 	vstr	s15, [r1, #32]
 8017ed6:	f88a 3204 	strb.w	r3, [sl, #516]	; 0x204
 8017eda:	d014      	beq.n	8017f06 <m_kalman_3gyro.isra.6.constprop.36+0x3e5e>
 8017edc:	2a00      	cmp	r2, #0
 8017ede:	f102 0301 	add.w	r3, r2, #1
 8017ee2:	dd03      	ble.n	8017eec <m_kalman_3gyro.isra.6.constprop.36+0x3e44>
 8017ee4:	2b00      	cmp	r3, #0
 8017ee6:	bfd8      	it	le
 8017ee8:	f06f 4300 	mvnle.w	r3, #2147483648	; 0x80000000
 8017eec:	993e      	ldr	r1, [sp, #248]	; 0xf8
 8017eee:	f8ca 345c 	str.w	r3, [sl, #1116]	; 0x45c
 8017ef2:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8017ef4:	9b40      	ldr	r3, [sp, #256]	; 0x100
 8017ef6:	f8ca 10a0 	str.w	r1, [sl, #160]	; 0xa0
 8017efa:	f8ca 20a4 	str.w	r2, [sl, #164]	; 0xa4
 8017efe:	f8ca 30a8 	str.w	r3, [sl, #168]	; 0xa8
 8017f02:	f7fd bcc8 	b.w	8015896 <m_kalman_3gyro.isra.6.constprop.36+0x17ee>
 8017f06:	f60a 0398 	addw	r3, sl, #2200	; 0x898
 8017f0a:	f8da 00a0 	ldr.w	r0, [sl, #160]	; 0xa0
 8017f0e:	f8da 10a4 	ldr.w	r1, [sl, #164]	; 0xa4
 8017f12:	f8da 20a8 	ldr.w	r2, [sl, #168]	; 0xa8
 8017f16:	6018      	str	r0, [r3, #0]
 8017f18:	f60a 039c 	addw	r3, sl, #2204	; 0x89c
 8017f1c:	6019      	str	r1, [r3, #0]
 8017f1e:	f50a 630a 	add.w	r3, sl, #2208	; 0x8a0
 8017f22:	601a      	str	r2, [r3, #0]
 8017f24:	f240 33e9 	movw	r3, #1001	; 0x3e9
 8017f28:	e7e0      	b.n	8017eec <m_kalman_3gyro.isra.6.constprop.36+0x3e44>
 8017f2a:	4614      	mov	r4, r2
 8017f2c:	1c58      	adds	r0, r3, #1
 8017f2e:	42a0      	cmp	r0, r4
 8017f30:	4619      	mov	r1, r3
 8017f32:	d38a      	bcc.n	8017e4a <m_kalman_3gyro.isra.6.constprop.36+0x3da2>
 8017f34:	e000      	b.n	8017f38 <m_kalman_3gyro.isra.6.constprop.36+0x3e90>
 8017f36:	460b      	mov	r3, r1
 8017f38:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 8017f3c:	3a01      	subs	r2, #1
 8017f3e:	0092      	lsls	r2, r2, #2
 8017f40:	009b      	lsls	r3, r3, #2
 8017f42:	a9b6      	add	r1, sp, #728	; 0x2d8
 8017f44:	1888      	adds	r0, r1, r2
 8017f46:	4419      	add	r1, r3
 8017f48:	ed90 7a00 	vldr	s14, [r0]
 8017f4c:	edd1 7a00 	vldr	s15, [r1]
 8017f50:	ee38 6a47 	vsub.f32	s12, s16, s14
 8017f54:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017f58:	a9c3      	add	r1, sp, #780	; 0x30c
 8017f5a:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8017f5e:	440a      	add	r2, r1
 8017f60:	440b      	add	r3, r1
 8017f62:	edd2 7a00 	vldr	s15, [r2]
 8017f66:	ed93 7a00 	vldr	s14, [r3]
 8017f6a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8017f6e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8017f72:	f7fc bec8 	b.w	8014d06 <m_kalman_3gyro.isra.6.constprop.36+0xc5e>
 8017f76:	ed8a 9a2c 	vstr	s18, [sl, #176]	; 0xb0
 8017f7a:	f7ff ba55 	b.w	8017428 <m_kalman_3gyro.isra.6.constprop.36+0x3380>
 8017f7e:	f101 4280 	add.w	r2, r1, #1073741824	; 0x40000000
 8017f82:	460b      	mov	r3, r1
 8017f84:	3a01      	subs	r2, #1
 8017f86:	f7fc befa 	b.w	8014d7e <m_kalman_3gyro.isra.6.constprop.36+0xcd6>
 8017f8a:	ed9f 6a25 	vldr	s12, [pc, #148]	; 8018020 <m_kalman_3gyro.isra.6.constprop.36+0x3f78>
 8017f8e:	f8dd 3698 	ldr.w	r3, [sp, #1688]	; 0x698
 8017f92:	ee66 6a86 	vmul.f32	s13, s13, s12
 8017f96:	ee27 7a06 	vmul.f32	s14, s14, s12
 8017f9a:	ee67 7a86 	vmul.f32	s15, s15, s12
 8017f9e:	edc3 6a06 	vstr	s13, [r3, #24]
 8017fa2:	ed83 7a07 	vstr	s14, [r3, #28]
 8017fa6:	edc3 7a08 	vstr	s15, [r3, #32]
 8017faa:	f7ff b91b 	b.w	80171e4 <m_kalman_3gyro.isra.6.constprop.36+0x313c>
 8017fae:	b19d      	cbz	r5, 8017fd8 <m_kalman_3gyro.isra.6.constprop.36+0x3f30>
 8017fb0:	3d01      	subs	r5, #1
 8017fb2:	f88a 58ad 	strb.w	r5, [sl, #2221]	; 0x8ad
 8017fb6:	f8aa 01fc 	strh.w	r0, [sl, #508]	; 0x1fc
 8017fba:	f88a 01fe 	strb.w	r0, [sl, #510]	; 0x1fe
 8017fbe:	f88a 0205 	strb.w	r0, [sl, #517]	; 0x205
 8017fc2:	f88a 0207 	strb.w	r0, [sl, #519]	; 0x207
 8017fc6:	f7fd becd 	b.w	8015d64 <m_kalman_3gyro.isra.6.constprop.36+0x1cbc>
 8017fca:	4613      	mov	r3, r2
 8017fcc:	e7ae      	b.n	8017f2c <m_kalman_3gyro.isra.6.constprop.36+0x3e84>
 8017fce:	f101 4280 	add.w	r2, r1, #1073741824	; 0x40000000
 8017fd2:	460b      	mov	r3, r1
 8017fd4:	3a01      	subs	r2, #1
 8017fd6:	e68e      	b.n	8017cf6 <m_kalman_3gyro.isra.6.constprop.36+0x3c4e>
 8017fd8:	b14e      	cbz	r6, 8017fee <m_kalman_3gyro.isra.6.constprop.36+0x3f46>
 8017fda:	f8aa 51fc 	strh.w	r5, [sl, #508]	; 0x1fc
 8017fde:	f88a 51fe 	strb.w	r5, [sl, #510]	; 0x1fe
 8017fe2:	f88a 5205 	strb.w	r5, [sl, #517]	; 0x205
 8017fe6:	f88a 5207 	strb.w	r5, [sl, #519]	; 0x207
 8017fea:	f7fd bebb 	b.w	8015d64 <m_kalman_3gyro.isra.6.constprop.36+0x1cbc>
 8017fee:	f8dd 3698 	ldr.w	r3, [sp, #1688]	; 0x698
 8017ff2:	edd3 6a00 	vldr	s13, [r3]
 8017ff6:	ed93 7a01 	vldr	s14, [r3, #4]
 8017ffa:	edd3 7a02 	vldr	s15, [r3, #8]
 8017ffe:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 8018002:	ee66 6a86 	vmul.f32	s13, s13, s12
 8018006:	ee27 7a06 	vmul.f32	s14, s14, s12
 801800a:	ee67 7a86 	vmul.f32	s15, s15, s12
 801800e:	edc3 6a00 	vstr	s13, [r3]
 8018012:	ed83 7a01 	vstr	s14, [r3, #4]
 8018016:	edc3 7a02 	vstr	s15, [r3, #8]
 801801a:	f7fd bea3 	b.w	8015d64 <m_kalman_3gyro.isra.6.constprop.36+0x1cbc>
 801801e:	bf00      	nop
 8018020:	3eaaaaab 	.word	0x3eaaaaab

08018024 <SpacePointAlgorithm.isra.7>:
 8018024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018028:	ed2d 8b10 	vpush	{d8-d15}
 801802c:	b0bb      	sub	sp, #236	; 0xec
 801802e:	f8df e3c8 	ldr.w	lr, [pc, #968]	; 80183f8 <SpacePointAlgorithm.isra.7+0x3d4>
 8018032:	f89d 5160 	ldrb.w	r5, [sp, #352]	; 0x160
 8018036:	9514      	str	r5, [sp, #80]	; 0x50
 8018038:	f89d 5168 	ldrb.w	r5, [sp, #360]	; 0x168
 801803c:	9515      	str	r5, [sp, #84]	; 0x54
 801803e:	f89d 516c 	ldrb.w	r5, [sp, #364]	; 0x16c
 8018042:	9516      	str	r5, [sp, #88]	; 0x58
 8018044:	f89d 5170 	ldrb.w	r5, [sp, #368]	; 0x170
 8018048:	9517      	str	r5, [sp, #92]	; 0x5c
 801804a:	4682      	mov	sl, r0
 801804c:	4688      	mov	r8, r1
 801804e:	4693      	mov	fp, r2
 8018050:	461d      	mov	r5, r3
 8018052:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018056:	f10d 0c7c 	add.w	ip, sp, #124	; 0x7c
 801805a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801805e:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8018062:	9e69      	ldr	r6, [sp, #420]	; 0x1a4
 8018064:	edcd 0a18 	vstr	s1, [sp, #96]	; 0x60
 8018068:	e88c 0003 	stmia.w	ip, {r0, r1}
 801806c:	e9dd 0156 	ldrd	r0, r1, [sp, #344]	; 0x158
 8018070:	eef0 ba40 	vmov.f32	s23, s0
 8018074:	ed8d 1a19 	vstr	s2, [sp, #100]	; 0x64
 8018078:	eeb0 ea61 	vmov.f32	s28, s3
 801807c:	eeb0 ba42 	vmov.f32	s22, s4
 8018080:	eef0 9a62 	vmov.f32	s19, s5
 8018084:	eeb0 aa43 	vmov.f32	s20, s6
 8018088:	eef0 aa63 	vmov.f32	s21, s7
 801808c:	f7e8 fd94 	bl	8000bb8 <__aeabi_d2f>
 8018090:	f896 38cc 	ldrb.w	r3, [r6, #2252]	; 0x8cc
 8018094:	9c54      	ldr	r4, [sp, #336]	; 0x150
 8018096:	f89d 9164 	ldrb.w	r9, [sp, #356]	; 0x164
 801809a:	9f64      	ldr	r7, [sp, #400]	; 0x190
 801809c:	ee0c 0a10 	vmov	s24, r0
 80180a0:	b923      	cbnz	r3, 80180ac <SpacePointAlgorithm.isra.7+0x88>
 80180a2:	2200      	movs	r2, #0
 80180a4:	2301      	movs	r3, #1
 80180a6:	6032      	str	r2, [r6, #0]
 80180a8:	f886 38cc 	strb.w	r3, [r6, #2252]	; 0x8cc
 80180ac:	eddf 7ac6 	vldr	s15, [pc, #792]	; 80183c8 <SpacePointAlgorithm.isra.7+0x3a4>
 80180b0:	eec7 7aab 	vdiv.f32	s15, s15, s23
 80180b4:	ee17 0a90 	vmov	r0, s15
 80180b8:	f7e8 fa4e 	bl	8000558 <__aeabi_f2d>
 80180bc:	f003 fbf2 	bl	801b8a4 <sqrt>
 80180c0:	f7e8 fd7a 	bl	8000bb8 <__aeabi_d2f>
 80180c4:	ed9f 5ac1 	vldr	s10, [pc, #772]	; 80183cc <SpacePointAlgorithm.isra.7+0x3a8>
 80180c8:	ed95 6a01 	vldr	s12, [r5, #4]
 80180cc:	edd5 7a00 	vldr	s15, [r5]
 80180d0:	edd5 6a02 	vldr	s13, [r5, #8]
 80180d4:	ed9f 4abe 	vldr	s8, [pc, #760]	; 80183d0 <SpacePointAlgorithm.isra.7+0x3ac>
 80180d8:	ed9d 1a20 	vldr	s2, [sp, #128]	; 0x80
 80180dc:	eddd 0a21 	vldr	s1, [sp, #132]	; 0x84
 80180e0:	eddd 5a22 	vldr	s11, [sp, #136]	; 0x88
 80180e4:	eddd 4a23 	vldr	s9, [sp, #140]	; 0x8c
 80180e8:	ee26 6a05 	vmul.f32	s12, s12, s10
 80180ec:	ee07 0a10 	vmov	s14, r0
 80180f0:	ee67 7a85 	vmul.f32	s15, s15, s10
 80180f4:	ee66 6a85 	vmul.f32	s13, s13, s10
 80180f8:	ed85 6a01 	vstr	s12, [r5, #4]
 80180fc:	ed9d 6a24 	vldr	s12, [sp, #144]	; 0x90
 8018100:	edc5 7a00 	vstr	s15, [r5]
 8018104:	edc5 6a02 	vstr	s13, [r5, #8]
 8018108:	ee84 8a07 	vdiv.f32	s16, s8, s14
 801810c:	ee27 fa01 	vmul.f32	s30, s14, s2
 8018110:	ee67 ea20 	vmul.f32	s29, s14, s1
 8018114:	ee67 8a25 	vmul.f32	s17, s14, s11
 8018118:	ee67 fa24 	vmul.f32	s31, s14, s9
 801811c:	ee27 da06 	vmul.f32	s26, s14, s12
 8018120:	f1b9 0f04 	cmp.w	r9, #4
 8018124:	d806      	bhi.n	8018134 <SpacePointAlgorithm.isra.7+0x110>
 8018126:	e8df f019 	tbh	[pc, r9, lsl #1]
 801812a:	0136      	.short	0x0136
 801812c:	012b0143 	.word	0x012b0143
 8018130:	010d0005 	.word	0x010d0005
 8018134:	eddf 7aa7 	vldr	s15, [pc, #668]	; 80183d4 <SpacePointAlgorithm.isra.7+0x3b0>
 8018138:	eddf caa7 	vldr	s25, [pc, #668]	; 80183d8 <SpacePointAlgorithm.isra.7+0x3b4>
 801813c:	ee69 9aa7 	vmul.f32	s19, s19, s15
 8018140:	ee2a aa27 	vmul.f32	s20, s20, s15
 8018144:	ee6a aaa7 	vmul.f32	s21, s21, s15
 8018148:	ee69 9a8c 	vmul.f32	s19, s19, s24
 801814c:	ee2a aa0c 	vmul.f32	s20, s20, s24
 8018150:	ee6a aa8c 	vmul.f32	s21, s21, s24
 8018154:	eef6 da00 	vmov.f32	s27, #96	; 0x3f000000  0.5
 8018158:	2200      	movs	r2, #0
 801815a:	2300      	movs	r3, #0
 801815c:	e9dd 015e 	ldrd	r0, r1, [sp, #376]	; 0x178
 8018160:	ed96 9a00 	vldr	s18, [r6]
 8018164:	f7e8 fcb8 	bl	8000ad8 <__aeabi_dcmpeq>
 8018168:	b168      	cbz	r0, 8018186 <SpacePointAlgorithm.isra.7+0x162>
 801816a:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 801816e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018172:	f340 80ec 	ble.w	801834e <SpacePointAlgorithm.isra.7+0x32a>
 8018176:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 801817a:	eeb4 9ae7 	vcmpe.f32	s18, s15
 801817e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018182:	f140 80e4 	bpl.w	801834e <SpacePointAlgorithm.isra.7+0x32a>
 8018186:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801818a:	ee79 7a27 	vadd.f32	s15, s18, s15
 801818e:	ed9f 9a93 	vldr	s18, [pc, #588]	; 80183dc <SpacePointAlgorithm.isra.7+0x3b8>
 8018192:	ed9f 7a93 	vldr	s14, [pc, #588]	; 80183e0 <SpacePointAlgorithm.isra.7+0x3bc>
 8018196:	edc6 7a00 	vstr	s15, [r6]
 801819a:	ee67 7a89 	vmul.f32	s15, s15, s18
 801819e:	ee6b 4a2f 	vmul.f32	s9, s22, s31
 80181a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80181a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80181aa:	bfb8      	it	lt
 80181ac:	eef0 7a47 	vmovlt.f32	s15, s14
 80181b0:	ee88 5a27 	vdiv.f32	s10, s16, s15
 80181b4:	ed9f 6a8b 	vldr	s12, [pc, #556]	; 80183e4 <SpacePointAlgorithm.isra.7+0x3c0>
 80181b8:	ee6d 5aa8 	vmul.f32	s11, s27, s17
 80181bc:	ee27 1a8f 	vmul.f32	s2, s15, s30
 80181c0:	ee67 0aae 	vmul.f32	s1, s15, s29
 80181c4:	ee64 4aa7 	vmul.f32	s9, s9, s15
 80181c8:	ee2d 6a06 	vmul.f32	s12, s26, s12
 80181cc:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 80181d0:	edd8 7a01 	vldr	s15, [r8, #4]
 80181d4:	ed94 3a09 	vldr	s6, [r4, #36]	; 0x24
 80181d8:	ed94 4a05 	vldr	s8, [r4, #20]
 80181dc:	edd4 6a03 	vldr	s13, [r4, #12]
 80181e0:	edd8 3a00 	vldr	s7, [r8]
 80181e4:	edd4 2a02 	vldr	s5, [r4, #8]
 80181e8:	edcd 4a37 	vstr	s9, [sp, #220]	; 0xdc
 80181ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80181f0:	ed94 7a04 	vldr	s14, [r4, #16]
 80181f4:	edd4 4a07 	vldr	s9, [r4, #28]
 80181f8:	ed8d 6a38 	vstr	s12, [sp, #224]	; 0xe0
 80181fc:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8018200:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8018204:	ed94 3a00 	vldr	s6, [r4]
 8018208:	edcd 5a34 	vstr	s11, [sp, #208]	; 0xd0
 801820c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8018210:	ee67 7a84 	vmul.f32	s15, s15, s8
 8018214:	ed94 4a01 	vldr	s8, [r4, #4]
 8018218:	edcd 5a35 	vstr	s11, [sp, #212]	; 0xd4
 801821c:	eee3 6a23 	vfma.f32	s13, s6, s7
 8018220:	462b      	mov	r3, r5
 8018222:	ad1a      	add	r5, sp, #104	; 0x68
 8018224:	ed94 3a0b 	vldr	s6, [r4, #44]	; 0x2c
 8018228:	edcd 5a36 	vstr	s11, [sp, #216]	; 0xd8
 801822c:	eea3 7a84 	vfma.f32	s14, s7, s8
 8018230:	4650      	mov	r0, sl
 8018232:	a92e      	add	r1, sp, #184	; 0xb8
 8018234:	ed98 4a02 	vldr	s8, [r8, #8]
 8018238:	edd4 5a08 	vldr	s11, [r4, #32]
 801823c:	ed8d 5a25 	vstr	s10, [sp, #148]	; 0x94
 8018240:	ee34 6a43 	vsub.f32	s12, s8, s6
 8018244:	eee2 7aa3 	vfma.f32	s15, s5, s7
 8018248:	f10d 0a94 	add.w	sl, sp, #148	; 0x94
 801824c:	f8df e1ac 	ldr.w	lr, [pc, #428]	; 80183fc <SpacePointAlgorithm.isra.7+0x3d8>
 8018250:	ed94 4a06 	vldr	s8, [r4, #24]
 8018254:	ed8d 5a26 	vstr	s10, [sp, #152]	; 0x98
 8018258:	eea4 7a86 	vfma.f32	s14, s9, s12
 801825c:	465a      	mov	r2, fp
 801825e:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8018400 <SpacePointAlgorithm.isra.7+0x3dc>
 8018262:	ed8d 1a2e 	vstr	s2, [sp, #184]	; 0xb8
 8018266:	eee5 7a86 	vfma.f32	s15, s11, s12
 801826a:	f8df 8198 	ldr.w	r8, [pc, #408]	; 8018404 <SpacePointAlgorithm.isra.7+0x3e0>
 801826e:	eee6 6a04 	vfma.f32	s13, s12, s8
 8018272:	ed8d 7a1d 	vstr	s14, [sp, #116]	; 0x74
 8018276:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 801827a:	ee2b ba07 	vmul.f32	s22, s22, s14
 801827e:	edcd 6a1c 	vstr	s13, [sp, #112]	; 0x70
 8018282:	ed8d 1a2f 	vstr	s2, [sp, #188]	; 0xbc
 8018286:	ed8d 1a30 	vstr	s2, [sp, #192]	; 0xc0
 801828a:	edcd 0a31 	vstr	s1, [sp, #196]	; 0xc4
 801828e:	edcd 0a32 	vstr	s1, [sp, #200]	; 0xc8
 8018292:	edcd 0a33 	vstr	s1, [sp, #204]	; 0xcc
 8018296:	edcd 7a1e 	vstr	s15, [sp, #120]	; 0x78
 801829a:	ed8d ba39 	vstr	s22, [sp, #228]	; 0xe4
 801829e:	ed8d 5a27 	vstr	s10, [sp, #156]	; 0x9c
 80182a2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80182a4:	9402      	str	r4, [sp, #8]
 80182a6:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80182a8:	f88d 4068 	strb.w	r4, [sp, #104]	; 0x68
 80182ac:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80182ae:	f88d 4069 	strb.w	r4, [sp, #105]	; 0x69
 80182b2:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80182b4:	f88d 406a 	strb.w	r4, [sp, #106]	; 0x6a
 80182b8:	9c68      	ldr	r4, [sp, #416]	; 0x1a0
 80182ba:	9411      	str	r4, [sp, #68]	; 0x44
 80182bc:	ed9d 7b60 	vldr	d7, [sp, #384]	; 0x180
 80182c0:	9c67      	ldr	r4, [sp, #412]	; 0x19c
 80182c2:	9410      	str	r4, [sp, #64]	; 0x40
 80182c4:	9c66      	ldr	r4, [sp, #408]	; 0x198
 80182c6:	9504      	str	r5, [sp, #16]
 80182c8:	ed8d 7b08 	vstr	d7, [sp, #32]
 80182cc:	e9cd 740e 	strd	r7, r4, [sp, #56]	; 0x38
 80182d0:	ed9d 7b5e 	vldr	d7, [sp, #376]	; 0x178
 80182d4:	9c63      	ldr	r4, [sp, #396]	; 0x18c
 80182d6:	940c      	str	r4, [sp, #48]	; 0x30
 80182d8:	9c62      	ldr	r4, [sp, #392]	; 0x188
 80182da:	940b      	str	r4, [sp, #44]	; 0x2c
 80182dc:	ad1b      	add	r5, sp, #108	; 0x6c
 80182de:	9c55      	ldr	r4, [sp, #340]	; 0x154
 80182e0:	f8cd 900c 	str.w	r9, [sp, #12]
 80182e4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80182e8:	eeb0 2a4c 	vmov.f32	s4, s24
 80182ec:	eef0 1a6b 	vmov.f32	s3, s23
 80182f0:	eeb0 1a6a 	vmov.f32	s2, s21
 80182f4:	eef0 0a4a 	vmov.f32	s1, s20
 80182f8:	eeb0 0a69 	vmov.f32	s0, s19
 80182fc:	e9cd 1a00 	strd	r1, sl, [sp]
 8018300:	edcd ca28 	vstr	s25, [sp, #160]	; 0xa0
 8018304:	a91c      	add	r1, sp, #112	; 0x70
 8018306:	edcd ca29 	vstr	s25, [sp, #164]	; 0xa4
 801830a:	edcd ca2a 	vstr	s25, [sp, #168]	; 0xa8
 801830e:	9612      	str	r6, [sp, #72]	; 0x48
 8018310:	940a      	str	r4, [sp, #40]	; 0x28
 8018312:	950d      	str	r5, [sp, #52]	; 0x34
 8018314:	f8cd e0ac 	str.w	lr, [sp, #172]	; 0xac
 8018318:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
 801831c:	f8cd 80b0 	str.w	r8, [sp, #176]	; 0xb0
 8018320:	f7fb fec2 	bl	80140a8 <m_kalman_3gyro.isra.6.constprop.36>
 8018324:	4651      	mov	r1, sl
 8018326:	9862      	ldr	r0, [sp, #392]	; 0x188
 8018328:	f7f7 fbde 	bl	800fae8 <m_q2dcm_eml>
 801832c:	9a65      	ldr	r2, [sp, #404]	; 0x194
 801832e:	68fb      	ldr	r3, [r7, #12]
 8018330:	6013      	str	r3, [r2, #0]
 8018332:	693b      	ldr	r3, [r7, #16]
 8018334:	6053      	str	r3, [r2, #4]
 8018336:	697b      	ldr	r3, [r7, #20]
 8018338:	6093      	str	r3, [r2, #8]
 801833a:	b03b      	add	sp, #236	; 0xec
 801833c:	ecbd 8b10 	vpop	{d8-d15}
 8018340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018344:	eddf ca28 	vldr	s25, [pc, #160]	; 80183e8 <SpacePointAlgorithm.isra.7+0x3c4>
 8018348:	eef7 da00 	vmov.f32	s27, #112	; 0x3f800000  1.0
 801834c:	e704      	b.n	8018158 <SpacePointAlgorithm.isra.7+0x134>
 801834e:	eddf 7a27 	vldr	s15, [pc, #156]	; 80183ec <SpacePointAlgorithm.isra.7+0x3c8>
 8018352:	ed9f 6a24 	vldr	s12, [pc, #144]	; 80183e4 <SpacePointAlgorithm.isra.7+0x3c0>
 8018356:	ee3e ea27 	vadd.f32	s28, s28, s15
 801835a:	eddd 7a19 	vldr	s15, [sp, #100]	; 0x64
 801835e:	ee27 1a8f 	vmul.f32	s2, s15, s30
 8018362:	eddd 7a18 	vldr	s15, [sp, #96]	; 0x60
 8018366:	2300      	movs	r3, #0
 8018368:	6033      	str	r3, [r6, #0]
 801836a:	ee67 0aae 	vmul.f32	s1, s15, s29
 801836e:	ee6d 5aa8 	vmul.f32	s11, s27, s17
 8018372:	ee6b 4a2f 	vmul.f32	s9, s22, s31
 8018376:	ee88 5a0e 	vdiv.f32	s10, s16, s28
 801837a:	ee2d 6a06 	vmul.f32	s12, s26, s12
 801837e:	e725      	b.n	80181cc <SpacePointAlgorithm.isra.7+0x1a8>
 8018380:	ee69 9a8c 	vmul.f32	s19, s19, s24
 8018384:	ee2a aa0c 	vmul.f32	s20, s20, s24
 8018388:	ee6a aa8c 	vmul.f32	s21, s21, s24
 801838c:	eddf ca18 	vldr	s25, [pc, #96]	; 80183f0 <SpacePointAlgorithm.isra.7+0x3cc>
 8018390:	eef1 da04 	vmov.f32	s27, #20	; 0x40a00000  5.0
 8018394:	e6e0      	b.n	8018158 <SpacePointAlgorithm.isra.7+0x134>
 8018396:	eddf 7a17 	vldr	s15, [pc, #92]	; 80183f4 <SpacePointAlgorithm.isra.7+0x3d0>
 801839a:	eddf ca0f 	vldr	s25, [pc, #60]	; 80183d8 <SpacePointAlgorithm.isra.7+0x3b4>
 801839e:	ee69 9aa7 	vmul.f32	s19, s19, s15
 80183a2:	ee2a aa27 	vmul.f32	s20, s20, s15
 80183a6:	ee6a aaa7 	vmul.f32	s21, s21, s15
 80183aa:	eef7 da00 	vmov.f32	s27, #112	; 0x3f800000  1.0
 80183ae:	e6d3      	b.n	8018158 <SpacePointAlgorithm.isra.7+0x134>
 80183b0:	ee69 9a8c 	vmul.f32	s19, s19, s24
 80183b4:	ee2a aa0c 	vmul.f32	s20, s20, s24
 80183b8:	ee6a aa8c 	vmul.f32	s21, s21, s24
 80183bc:	eddf ca0a 	vldr	s25, [pc, #40]	; 80183e8 <SpacePointAlgorithm.isra.7+0x3c4>
 80183c0:	eef7 da00 	vmov.f32	s27, #112	; 0x3f800000  1.0
 80183c4:	e6c8      	b.n	8018158 <SpacePointAlgorithm.isra.7+0x134>
 80183c6:	bf00      	nop
 80183c8:	3c03126f 	.word	0x3c03126f
 80183cc:	3c8efa35 	.word	0x3c8efa35
 80183d0:	3b656042 	.word	0x3b656042
 80183d4:	42c80000 	.word	0x42c80000
 80183d8:	3a83126f 	.word	0x3a83126f
 80183dc:	3d4ccccd 	.word	0x3d4ccccd
 80183e0:	3e4ccccd 	.word	0x3e4ccccd
 80183e4:	3f333333 	.word	0x3f333333
 80183e8:	3ac49ba6 	.word	0x3ac49ba6
 80183ec:	358637bd 	.word	0x358637bd
 80183f0:	3727c5ac 	.word	0x3727c5ac
 80183f4:	3dcccccd 	.word	0x3dcccccd
 80183f8:	0801d784 	.word	0x0801d784
 80183fc:	3b449ba6 	.word	0x3b449ba6
 8018400:	3a9d4952 	.word	0x3a9d4952
 8018404:	3c23d70a 	.word	0x3c23d70a

08018408 <iNemo_update_6X.constprop.34>:
 8018408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801840c:	4ce6      	ldr	r4, [pc, #920]	; (80187a8 <iNemo_update_6X.constprop.34+0x3a0>)
 801840e:	4fe7      	ldr	r7, [pc, #924]	; (80187ac <iNemo_update_6X.constprop.34+0x3a4>)
 8018410:	f994 343d 	ldrsb.w	r3, [r4, #1085]	; 0x43d
 8018414:	ee07 3a90 	vmov	s15, r3
 8018418:	f994 3440 	ldrsb.w	r3, [r4, #1088]	; 0x440
 801841c:	ee06 3a90 	vmov	s13, r3
 8018420:	f994 3458 	ldrsb.w	r3, [r4, #1112]	; 0x458
 8018424:	ee07 3a10 	vmov	s14, r3
 8018428:	f994 3455 	ldrsb.w	r3, [r4, #1109]	; 0x455
 801842c:	ed2d 8b08 	vpush	{d8-d11}
 8018430:	ee09 3a90 	vmov	s19, r3
 8018434:	f994 343c 	ldrsb.w	r3, [r4, #1084]	; 0x43c
 8018438:	7b3a      	ldrb	r2, [r7, #12]
 801843a:	ee01 3a90 	vmov	s3, r3
 801843e:	f994 343f 	ldrsb.w	r3, [r4, #1087]	; 0x43f
 8018442:	ee02 3a10 	vmov	s4, r3
 8018446:	f994 3457 	ldrsb.w	r3, [r4, #1111]	; 0x457
 801844a:	ee02 3a90 	vmov	s5, r3
 801844e:	f994 3454 	ldrsb.w	r3, [r4, #1108]	; 0x454
 8018452:	ee03 3a90 	vmov	s7, r3
 8018456:	f994 3443 	ldrsb.w	r3, [r4, #1091]	; 0x443
 801845a:	ee08 3a10 	vmov	s16, r3
 801845e:	f994 345b 	ldrsb.w	r3, [r4, #1115]	; 0x45b
 8018462:	ee08 3a90 	vmov	s17, r3
 8018466:	f994 343e 	ldrsb.w	r3, [r4, #1086]	; 0x43e
 801846a:	f604 05cc 	addw	r5, r4, #2252	; 0x8cc
 801846e:	edd5 4a07 	vldr	s9, [r5, #28]
 8018472:	ed95 3a06 	vldr	s6, [r5, #24]
 8018476:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 801847a:	ed95 4a09 	vldr	s8, [r5, #36]	; 0x24
 801847e:	ed95 5a08 	vldr	s10, [r5, #32]
 8018482:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 8018486:	ee00 3a90 	vmov	s1, r3
 801848a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801848e:	f994 3441 	ldrsb.w	r3, [r4, #1089]	; 0x441
 8018492:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8018496:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801849a:	ee01 3a10 	vmov	s2, r3
 801849e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80184a2:	f994 3442 	ldrsb.w	r3, [r4, #1090]	; 0x442
 80184a6:	ee66 6aa4 	vmul.f32	s13, s13, s9
 80184aa:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 80184ae:	eee1 7a83 	vfma.f32	s15, s3, s6
 80184b2:	b0e5      	sub	sp, #404	; 0x194
 80184b4:	f10d 0958 	add.w	r9, sp, #88	; 0x58
 80184b8:	ee01 3a90 	vmov	s3, r3
 80184bc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80184c0:	f994 3459 	ldrsb.w	r3, [r4, #1113]	; 0x459
 80184c4:	ee27 7a06 	vmul.f32	s14, s14, s12
 80184c8:	eef8 2ae2 	vcvt.f32.s32	s5, s5
 80184cc:	eee3 6a02 	vfma.f32	s13, s6, s4
 80184d0:	4680      	mov	r8, r0
 80184d2:	ee02 3a10 	vmov	s4, r3
 80184d6:	eef8 9ae9 	vcvt.f32.s32	s19, s19
 80184da:	f994 3456 	ldrsb.w	r3, [r4, #1110]	; 0x456
 80184de:	ee69 9a86 	vmul.f32	s19, s19, s12
 80184e2:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 80184e6:	eea4 7a22 	vfma.f32	s14, s8, s5
 80184ea:	ee02 3a90 	vmov	s5, r3
 80184ee:	f994 345a 	ldrsb.w	r3, [r4, #1114]	; 0x45a
 80184f2:	eee3 9a84 	vfma.f32	s19, s7, s8
 80184f6:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 80184fa:	ee03 3a90 	vmov	s7, r3
 80184fe:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 8018502:	f994 3444 	ldrsb.w	r3, [r4, #1092]	; 0x444
 8018506:	ee28 8a24 	vmul.f32	s16, s16, s9
 801850a:	ee68 8a86 	vmul.f32	s17, s17, s12
 801850e:	ee04 3a90 	vmov	s9, r3
 8018512:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8018516:	f994 345c 	ldrsb.w	r3, [r4, #1116]	; 0x45c
 801851a:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 801851e:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8018522:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 8018526:	eef8 2ae2 	vcvt.f32.s32	s5, s5
 801852a:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 801852e:	ee06 3a10 	vmov	s12, r3
 8018532:	eee0 7a85 	vfma.f32	s15, s1, s10
 8018536:	2300      	movs	r3, #0
 8018538:	e9c9 3300 	strd	r3, r3, [r9]
 801853c:	eee5 6a01 	vfma.f32	s13, s10, s2
 8018540:	f8c9 3008 	str.w	r3, [r9, #8]
 8018544:	eea3 8a21 	vfma.f32	s16, s6, s3
 8018548:	eea5 7a82 	vfma.f32	s14, s11, s4
 801854c:	eee2 9aa5 	vfma.f32	s19, s5, s11
 8018550:	eee4 8a23 	vfma.f32	s17, s8, s7
 8018554:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8018558:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 801855c:	eef0 ba40 	vmov.f32	s23, s0
 8018560:	eea5 8a24 	vfma.f32	s16, s10, s9
 8018564:	eeb1 ba66 	vneg.f32	s22, s13
 8018568:	eef1 aa67 	vneg.f32	s21, s15
 801856c:	eeb1 aa47 	vneg.f32	s20, s14
 8018570:	eef1 9a69 	vneg.f32	s19, s19
 8018574:	eee5 8a86 	vfma.f32	s17, s11, s12
 8018578:	2a00      	cmp	r2, #0
 801857a:	f000 8125 	beq.w	80187c8 <iNemo_update_6X.constprop.34+0x3c0>
 801857e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8018582:	f8df a23c 	ldr.w	sl, [pc, #572]	; 80187c0 <iNemo_update_6X.constprop.34+0x3b8>
 8018586:	f8df b23c 	ldr.w	fp, [pc, #572]	; 80187c4 <iNemo_update_6X.constprop.34+0x3bc>
 801858a:	eee6 7aa6 	vfma.f32	s15, s13, s13
 801858e:	eee8 7a08 	vfma.f32	s15, s16, s16
 8018592:	ee17 0a90 	vmov	r0, s15
 8018596:	f7e7 ffdf 	bl	8000558 <__aeabi_f2d>
 801859a:	f003 f983 	bl	801b8a4 <sqrt>
 801859e:	f7e8 fb0b 	bl	8000bb8 <__aeabi_d2f>
 80185a2:	ee07 0a90 	vmov	s15, r0
 80185a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80185aa:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80185ae:	ee2b ba27 	vmul.f32	s22, s22, s15
 80185b2:	ee6a aaa7 	vmul.f32	s21, s21, s15
 80185b6:	ee28 8a27 	vmul.f32	s16, s16, s15
 80185ba:	f894 29fd 	ldrb.w	r2, [r4, #2557]	; 0x9fd
 80185be:	f894 39fc 	ldrb.w	r3, [r4, #2556]	; 0x9fc
 80185c2:	6fa9      	ldr	r1, [r5, #120]	; 0x78
 80185c4:	f8c5 1088 	str.w	r1, [r5, #136]	; 0x88
 80185c8:	ee09 2a10 	vmov	s18, r2
 80185cc:	4978      	ldr	r1, [pc, #480]	; (80187b0 <iNemo_update_6X.constprop.34+0x3a8>)
 80185ce:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 80185d0:	f8d5 6080 	ldr.w	r6, [r5, #128]	; 0x80
 80185d4:	f8c5 208c 	str.w	r2, [r5, #140]	; 0x8c
 80185d8:	f043 0302 	orr.w	r3, r3, #2
 80185dc:	22f8      	movs	r2, #248	; 0xf8
 80185de:	f8d5 c084 	ldr.w	ip, [r5, #132]	; 0x84
 80185e2:	f8c5 6090 	str.w	r6, [r5, #144]	; 0x90
 80185e6:	f083 0301 	eor.w	r3, r3, #1
 80185ea:	188e      	adds	r6, r1, r2
 80185ec:	a826      	add	r0, sp, #152	; 0x98
 80185ee:	f884 39fc 	strb.w	r3, [r4, #2556]	; 0x9fc
 80185f2:	f8c5 c094 	str.w	ip, [r5, #148]	; 0x94
 80185f6:	f002 f803 	bl	801a600 <memcpy>
 80185fa:	f506 7c9b 	add.w	ip, r6, #310	; 0x136
 80185fe:	6a30      	ldr	r0, [r6, #32]
 8018600:	f8cd c050 	str.w	ip, [sp, #80]	; 0x50
 8018604:	2300      	movs	r3, #0
 8018606:	f506 7e9a 	add.w	lr, r6, #308	; 0x134
 801860a:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
 801860e:	f206 1235 	addw	r2, r6, #309	; 0x135
 8018612:	f8cd e048 	str.w	lr, [sp, #72]	; 0x48
 8018616:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 801861a:	9213      	str	r2, [sp, #76]	; 0x4c
 801861c:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
 8018620:	aa1d      	add	r2, sp, #116	; 0x74
 8018622:	632b      	str	r3, [r5, #48]	; 0x30
 8018624:	636b      	str	r3, [r5, #52]	; 0x34
 8018626:	63ab      	str	r3, [r5, #56]	; 0x38
 8018628:	4962      	ldr	r1, [pc, #392]	; (80187b4 <iNemo_update_6X.constprop.34+0x3ac>)
 801862a:	f8cd a0ac 	str.w	sl, [sp, #172]	; 0xac
 801862e:	f10d 0a64 	add.w	sl, sp, #100	; 0x64
 8018632:	932a      	str	r3, [sp, #168]	; 0xa8
 8018634:	9210      	str	r2, [sp, #64]	; 0x40
 8018636:	ed8d ba2c 	vstr	s22, [sp, #176]	; 0xb0
 801863a:	edcd aa2d 	vstr	s21, [sp, #180]	; 0xb4
 801863e:	ed8d 8a2e 	vstr	s16, [sp, #184]	; 0xb8
 8018642:	ed8d aa2f 	vstr	s20, [sp, #188]	; 0xbc
 8018646:	edcd 9a30 	vstr	s19, [sp, #192]	; 0xc0
 801864a:	edcd 8a31 	vstr	s17, [sp, #196]	; 0xc4
 801864e:	f8cd b0a4 	str.w	fp, [sp, #164]	; 0xa4
 8018652:	9115      	str	r1, [sp, #84]	; 0x54
 8018654:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8018658:	f7e7 ff7e 	bl	8000558 <__aeabi_f2d>
 801865c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8018660:	f894 09de 	ldrb.w	r0, [r4, #2526]	; 0x9de
 8018664:	ed96 ba0b 	vldr	s22, [r6, #44]	; 0x2c
 8018668:	edd6 aa0a 	vldr	s21, [r6, #40]	; 0x28
 801866c:	ed96 aa03 	vldr	s20, [r6, #12]
 8018670:	edd6 9a02 	vldr	s19, [r6, #8]
 8018674:	edd6 8a01 	vldr	s17, [r6, #4]
 8018678:	ed96 8a00 	vldr	s16, [r6]
 801867c:	f7e7 ff4a 	bl	8000514 <__aeabi_ui2d>
 8018680:	eeb8 9a49 	vcvt.f32.u32	s18, s18
 8018684:	f894 39dc 	ldrb.w	r3, [r4, #2524]	; 0x9dc
 8018688:	f894 c9da 	ldrb.w	ip, [r4, #2522]	; 0x9da
 801868c:	f894 29d9 	ldrb.w	r2, [r4, #2521]	; 0x9d9
 8018690:	f894 e9db 	ldrb.w	lr, [r4, #2523]	; 0x9db
 8018694:	ee29 9a2b 	vmul.f32	s18, s18, s23
 8018698:	edd6 ba0c 	vldr	s23, [r6, #48]	; 0x30
 801869c:	9308      	str	r3, [sp, #32]
 801869e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80186a2:	f894 39d8 	ldrb.w	r3, [r4, #2520]	; 0x9d8
 80186a6:	6930      	ldr	r0, [r6, #16]
 80186a8:	e9cd 3204 	strd	r3, r2, [sp, #16]
 80186ac:	e9cd ce06 	strd	ip, lr, [sp, #24]
 80186b0:	f7e7 ff52 	bl	8000558 <__aeabi_f2d>
 80186b4:	ae35      	add	r6, sp, #212	; 0xd4
 80186b6:	f50d 7c82 	add.w	ip, sp, #260	; 0x104
 80186ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80186be:	eeb0 0a49 	vmov.f32	s0, s18
 80186c2:	eef0 3a6b 	vmov.f32	s7, s23
 80186c6:	eeb0 3a4b 	vmov.f32	s6, s22
 80186ca:	eef0 2a6a 	vmov.f32	s5, s21
 80186ce:	eeb0 2a4a 	vmov.f32	s4, s20
 80186d2:	eef0 1a69 	vmov.f32	s3, s19
 80186d6:	eeb0 1a68 	vmov.f32	s2, s17
 80186da:	eef0 0a48 	vmov.f32	s1, s16
 80186de:	ab32      	add	r3, sp, #200	; 0xc8
 80186e0:	aa2c      	add	r2, sp, #176	; 0xb0
 80186e2:	a929      	add	r1, sp, #164	; 0xa4
 80186e4:	a848      	add	r0, sp, #288	; 0x120
 80186e6:	e9cd 6c00 	strd	r6, ip, [sp]
 80186ea:	f7ff fc9b 	bl	8018024 <SpacePointAlgorithm.isra.7>
 80186ee:	f1b8 0f00 	cmp.w	r8, #0
 80186f2:	d00f      	beq.n	8018714 <iNemo_update_6X.constprop.34+0x30c>
 80186f4:	f8da 2000 	ldr.w	r2, [sl]
 80186f8:	f8da 3004 	ldr.w	r3, [sl, #4]
 80186fc:	f8c8 2000 	str.w	r2, [r8]
 8018700:	f8c8 3004 	str.w	r3, [r8, #4]
 8018704:	f8da 2008 	ldr.w	r2, [sl, #8]
 8018708:	f8da 300c 	ldr.w	r3, [sl, #12]
 801870c:	f8c8 2008 	str.w	r2, [r8, #8]
 8018710:	f8c8 300c 	str.w	r3, [r8, #12]
 8018714:	4b28      	ldr	r3, [pc, #160]	; (80187b8 <iNemo_update_6X.constprop.34+0x3b0>)
 8018716:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 801871a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 801871e:	f894 2afa 	ldrb.w	r2, [r4, #2810]	; 0xafa
 8018722:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8018726:	f8c3 10fc 	str.w	r1, [r3, #252]	; 0xfc
 801872a:	2a01      	cmp	r2, #1
 801872c:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8018730:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
 8018734:	d119      	bne.n	801876a <iNemo_update_6X.constprop.34+0x362>
 8018736:	f8da 2004 	ldr.w	r2, [sl, #4]
 801873a:	f8da 6000 	ldr.w	r6, [sl]
 801873e:	f8da 0008 	ldr.w	r0, [sl, #8]
 8018742:	f8da 100c 	ldr.w	r1, [sl, #12]
 8018746:	67ea      	str	r2, [r5, #124]	; 0x7c
 8018748:	f8c5 208c 	str.w	r2, [r5, #140]	; 0x8c
 801874c:	2200      	movs	r2, #0
 801874e:	67ae      	str	r6, [r5, #120]	; 0x78
 8018750:	f8c5 6088 	str.w	r6, [r5, #136]	; 0x88
 8018754:	f8c5 0080 	str.w	r0, [r5, #128]	; 0x80
 8018758:	f8c5 0090 	str.w	r0, [r5, #144]	; 0x90
 801875c:	f8c5 1084 	str.w	r1, [r5, #132]	; 0x84
 8018760:	f8c5 1094 	str.w	r1, [r5, #148]	; 0x94
 8018764:	f884 29e8 	strb.w	r2, [r4, #2536]	; 0x9e8
 8018768:	733a      	strb	r2, [r7, #12]
 801876a:	eddf 7a14 	vldr	s15, [pc, #80]	; 80187bc <iNemo_update_6X.constprop.34+0x3b4>
 801876e:	ed99 6a00 	vldr	s12, [r9]
 8018772:	edd9 6a01 	vldr	s13, [r9, #4]
 8018776:	ed99 7a02 	vldr	s14, [r9, #8]
 801877a:	f894 2af9 	ldrb.w	r2, [r4, #2809]	; 0xaf9
 801877e:	ee26 5a27 	vmul.f32	s10, s12, s15
 8018782:	ee66 5aa7 	vmul.f32	s11, s13, s15
 8018786:	ee67 7a27 	vmul.f32	s15, s14, s15
 801878a:	ed85 5a1b 	vstr	s10, [r5, #108]	; 0x6c
 801878e:	edc5 5a1c 	vstr	s11, [r5, #112]	; 0x70
 8018792:	edc5 7a1d 	vstr	s15, [r5, #116]	; 0x74
 8018796:	b1e2      	cbz	r2, 80187d2 <iNemo_update_6X.constprop.34+0x3ca>
 8018798:	f894 2b08 	ldrb.w	r2, [r4, #2824]	; 0xb08
 801879c:	2a09      	cmp	r2, #9
 801879e:	d825      	bhi.n	80187ec <iNemo_update_6X.constprop.34+0x3e4>
 80187a0:	3201      	adds	r2, #1
 80187a2:	f884 2b08 	strb.w	r2, [r4, #2824]	; 0xb08
 80187a6:	e016      	b.n	80187d6 <iNemo_update_6X.constprop.34+0x3ce>
 80187a8:	200013c8 	.word	0x200013c8
 80187ac:	20000000 	.word	0x20000000
 80187b0:	20001c94 	.word	0x20001c94
 80187b4:	20000010 	.word	0x20000010
 80187b8:	20001dc8 	.word	0x20001dc8
 80187bc:	42652ee1 	.word	0x42652ee1
 80187c0:	bf3504f3 	.word	0xbf3504f3
 80187c4:	3f3504f3 	.word	0x3f3504f3
 80187c8:	f8df a030 	ldr.w	sl, [pc, #48]	; 80187fc <iNemo_update_6X.constprop.34+0x3f4>
 80187cc:	f8df b030 	ldr.w	fp, [pc, #48]	; 8018800 <iNemo_update_6X.constprop.34+0x3f8>
 80187d0:	e6f3      	b.n	80185ba <iNemo_update_6X.constprop.34+0x1b2>
 80187d2:	f884 2b08 	strb.w	r2, [r4, #2824]	; 0xb08
 80187d6:	f894 39fc 	ldrb.w	r3, [r4, #2556]	; 0x9fc
 80187da:	f083 0302 	eor.w	r3, r3, #2
 80187de:	f884 39fc 	strb.w	r3, [r4, #2556]	; 0x9fc
 80187e2:	b065      	add	sp, #404	; 0x194
 80187e4:	ecbd 8b08 	vpop	{d8-d11}
 80187e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80187ec:	ed83 6a22 	vstr	s12, [r3, #136]	; 0x88
 80187f0:	edc3 6a23 	vstr	s13, [r3, #140]	; 0x8c
 80187f4:	ed83 7a24 	vstr	s14, [r3, #144]	; 0x90
 80187f8:	e7ed      	b.n	80187d6 <iNemo_update_6X.constprop.34+0x3ce>
 80187fa:	bf00      	nop
 80187fc:	bf333333 	.word	0xbf333333
 8018800:	3f333333 	.word	0x3f333333

08018804 <iNemo_update.constprop.35>:
 8018804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018808:	4cf0      	ldr	r4, [pc, #960]	; (8018bcc <iNemo_update.constprop.35+0x3c8>)
 801880a:	f994 3418 	ldrsb.w	r3, [r4, #1048]	; 0x418
 801880e:	f994 2437 	ldrsb.w	r2, [r4, #1079]	; 0x437
 8018812:	f994 a41a 	ldrsb.w	sl, [r4, #1050]	; 0x41a
 8018816:	f994 7420 	ldrsb.w	r7, [r4, #1056]	; 0x420
 801881a:	f994 9436 	ldrsb.w	r9, [r4, #1078]	; 0x436
 801881e:	f994 6438 	ldrsb.w	r6, [r4, #1080]	; 0x438
 8018822:	f994 1426 	ldrsb.w	r1, [r4, #1062]	; 0x426
 8018826:	f994 e424 	ldrsb.w	lr, [r4, #1060]	; 0x424
 801882a:	f994 c427 	ldrsb.w	ip, [r4, #1063]	; 0x427
 801882e:	ed2d 8b0c 	vpush	{d8-d13}
 8018832:	ee0c 3a10 	vmov	s24, r3
 8018836:	f994 3419 	ldrsb.w	r3, [r4, #1049]	; 0x419
 801883a:	ee07 3a90 	vmov	s15, r3
 801883e:	f994 341b 	ldrsb.w	r3, [r4, #1051]	; 0x41b
 8018842:	ee0b 3a90 	vmov	s23, r3
 8018846:	f994 341c 	ldrsb.w	r3, [r4, #1052]	; 0x41c
 801884a:	ee06 3a10 	vmov	s12, r3
 801884e:	f994 341d 	ldrsb.w	r3, [r4, #1053]	; 0x41d
 8018852:	ee00 3a90 	vmov	s1, r3
 8018856:	f994 341f 	ldrsb.w	r3, [r4, #1055]	; 0x41f
 801885a:	ee0c 3a90 	vmov	s25, r3
 801885e:	f994 341e 	ldrsb.w	r3, [r4, #1054]	; 0x41e
 8018862:	b0e7      	sub	sp, #412	; 0x19c
 8018864:	ee01 3a90 	vmov	s3, r3
 8018868:	f994 3425 	ldrsb.w	r3, [r4, #1061]	; 0x425
 801886c:	f10d 0860 	add.w	r8, sp, #96	; 0x60
 8018870:	ee08 3a10 	vmov	s16, r3
 8018874:	2300      	movs	r3, #0
 8018876:	e9c8 3300 	strd	r3, r3, [r8]
 801887a:	f8c8 3008 	str.w	r3, [r8, #8]
 801887e:	f994 3428 	ldrsb.w	r3, [r4, #1064]	; 0x428
 8018882:	ee08 3a90 	vmov	s17, r3
 8018886:	f994 3429 	ldrsb.w	r3, [r4, #1065]	; 0x429
 801888a:	f604 350c 	addw	r5, r4, #2828	; 0xb0c
 801888e:	edd5 2a09 	vldr	s5, [r5, #36]	; 0x24
 8018892:	ed95 3a03 	vldr	s6, [r5, #12]
 8018896:	ed95 1a06 	vldr	s2, [r5, #24]
 801889a:	ed95 aa07 	vldr	s20, [r5, #28]
 801889e:	edd5 3a08 	vldr	s7, [r5, #32]
 80188a2:	edd5 9a0a 	vldr	s19, [r5, #40]	; 0x28
 80188a6:	ed95 4a0b 	vldr	s8, [r5, #44]	; 0x2c
 80188aa:	ed95 9a04 	vldr	s18, [r5, #16]
 80188ae:	edd5 4a05 	vldr	s9, [r5, #20]
 80188b2:	ee06 3a90 	vmov	s13, r3
 80188b6:	f994 342b 	ldrsb.w	r3, [r4, #1067]	; 0x42b
 80188ba:	ee05 3a10 	vmov	s10, r3
 80188be:	f994 342a 	ldrsb.w	r3, [r4, #1066]	; 0x42a
 80188c2:	ee0a 3a90 	vmov	s21, r3
 80188c6:	f994 342c 	ldrsb.w	r3, [r4, #1068]	; 0x42c
 80188ca:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 80188ce:	ee02 3a10 	vmov	s4, r3
 80188d2:	f994 3434 	ldrsb.w	r3, [r4, #1076]	; 0x434
 80188d6:	eef8 aaea 	vcvt.f32.s32	s21, s21
 80188da:	ee05 3a90 	vmov	s11, r3
 80188de:	ee25 5a09 	vmul.f32	s10, s10, s18
 80188e2:	f994 3431 	ldrsb.w	r3, [r4, #1073]	; 0x431
 80188e6:	eea3 5a2a 	vfma.f32	s10, s6, s21
 80188ea:	4683      	mov	fp, r0
 80188ec:	f994 0430 	ldrsb.w	r0, [r4, #1072]	; 0x430
 80188f0:	ee07 3a10 	vmov	s14, r3
 80188f4:	ee0a 0a90 	vmov	s21, r0
 80188f8:	f994 3433 	ldrsb.w	r3, [r4, #1075]	; 0x433
 80188fc:	48b4      	ldr	r0, [pc, #720]	; (8018bd0 <iNemo_update.constprop.35+0x3cc>)
 80188fe:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 8018902:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018906:	eea4 5a82 	vfma.f32	s10, s9, s4
 801890a:	f890 08e0 	ldrb.w	r0, [r0, #2272]	; 0x8e0
 801890e:	9017      	str	r0, [sp, #92]	; 0x5c
 8018910:	ee0b 3a10 	vmov	s22, r3
 8018914:	ee27 7a29 	vmul.f32	s14, s14, s19
 8018918:	eef8 aaea 	vcvt.f32.s32	s21, s21
 801891c:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8018920:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8018924:	eeaa 7aa2 	vfma.f32	s14, s21, s5
 8018928:	f994 3432 	ldrsb.w	r3, [r4, #1074]	; 0x432
 801892c:	ee0a 2a90 	vmov	s21, r2
 8018930:	ee26 6a0a 	vmul.f32	s12, s12, s20
 8018934:	eef8 baeb 	vcvt.f32.s32	s23, s23
 8018938:	ee65 5aa9 	vmul.f32	s11, s11, s19
 801893c:	eeb8 bacb 	vcvt.f32.s32	s22, s22
 8018940:	eea1 6a2b 	vfma.f32	s12, s2, s23
 8018944:	f994 2435 	ldrsb.w	r2, [r4, #1077]	; 0x435
 8018948:	eee2 5a8b 	vfma.f32	s11, s5, s22
 801894c:	eef8 baec 	vcvt.f32.s32	s23, s25
 8018950:	eeb8 baea 	vcvt.f32.s32	s22, s21
 8018954:	eef0 ca45 	vmov.f32	s25, s10
 8018958:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801895c:	ee05 9a10 	vmov	s10, r9
 8018960:	ee67 7a8a 	vmul.f32	s15, s15, s20
 8018964:	ee6b 9a29 	vmul.f32	s19, s22, s19
 8018968:	ee2b aa8a 	vmul.f32	s20, s23, s20
 801896c:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8018970:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8018974:	eea1 aa21 	vfma.f32	s20, s2, s3
 8018978:	eee2 9a85 	vfma.f32	s19, s5, s10
 801897c:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 8018980:	ee01 2a90 	vmov	s3, r2
 8018984:	ee05 ca10 	vmov	s10, ip
 8018988:	eeb8 cacc 	vcvt.f32.s32	s24, s24
 801898c:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8018990:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8018994:	ee68 8a89 	vmul.f32	s17, s17, s18
 8018998:	eeec 7a01 	vfma.f32	s15, s24, s2
 801899c:	eee3 8a05 	vfma.f32	s17, s6, s10
 80189a0:	eee4 5a21 	vfma.f32	s11, s8, s3
 80189a4:	ee05 7a10 	vmov	s10, r7
 80189a8:	ee0a aa90 	vmov	s21, sl
 80189ac:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 80189b0:	ee01 3a90 	vmov	s3, r3
 80189b4:	ee02 ea10 	vmov	s4, lr
 80189b8:	eef8 aaea 	vcvt.f32.s32	s21, s21
 80189bc:	eef8 2ac5 	vcvt.f32.s32	s5, s10
 80189c0:	ee28 8a09 	vmul.f32	s16, s16, s18
 80189c4:	ee05 6a10 	vmov	s10, r6
 80189c8:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 80189cc:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 80189d0:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 80189d4:	eeea 7aa3 	vfma.f32	s15, s21, s7
 80189d8:	eea2 8a03 	vfma.f32	s16, s4, s6
 80189dc:	eea3 6aa0 	vfma.f32	s12, s7, s1
 80189e0:	eeb8 3ac5 	vcvt.f32.s32	s6, s10
 80189e4:	eea1 7a84 	vfma.f32	s14, s3, s8
 80189e8:	ee05 1a10 	vmov	s10, r1
 80189ec:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80189f0:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 80189f4:	eef0 da40 	vmov.f32	s27, s0
 80189f8:	eea3 aaa2 	vfma.f32	s20, s7, s5
 80189fc:	eeb1 ba65 	vneg.f32	s22, s11
 8018a00:	eef1 aa47 	vneg.f32	s21, s14
 8018a04:	eee4 9a03 	vfma.f32	s19, s8, s6
 8018a08:	eea5 8a24 	vfma.f32	s16, s10, s9
 8018a0c:	eee4 8aa6 	vfma.f32	s17, s9, s13
 8018a10:	eeb1 ca46 	vneg.f32	s24, s12
 8018a14:	eef1 ba67 	vneg.f32	s23, s15
 8018a18:	eeb1 da6c 	vneg.f32	s26, s25
 8018a1c:	b388      	cbz	r0, 8018a82 <iNemo_update.constprop.35+0x27e>
 8018a1e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8018a22:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8018a26:	eee6 7a06 	vfma.f32	s15, s12, s12
 8018a2a:	eeea 7a0a 	vfma.f32	s15, s20, s20
 8018a2e:	ee17 0a90 	vmov	r0, s15
 8018a32:	f7e7 fd91 	bl	8000558 <__aeabi_f2d>
 8018a36:	f002 ff35 	bl	801b8a4 <sqrt>
 8018a3a:	f7e8 f8bd 	bl	8000bb8 <__aeabi_d2f>
 8018a3e:	ee07 0a90 	vmov	s15, r0
 8018a42:	eec9 7a27 	vdiv.f32	s15, s18, s15
 8018a46:	ee28 7a08 	vmul.f32	s14, s16, s16
 8018a4a:	ee2c ca27 	vmul.f32	s24, s24, s15
 8018a4e:	eea8 7aa8 	vfma.f32	s14, s17, s17
 8018a52:	ee6b baa7 	vmul.f32	s23, s23, s15
 8018a56:	eeac 7aac 	vfma.f32	s14, s25, s25
 8018a5a:	ee2a aa27 	vmul.f32	s20, s20, s15
 8018a5e:	ee17 0a10 	vmov	r0, s14
 8018a62:	f7e7 fd79 	bl	8000558 <__aeabi_f2d>
 8018a66:	f002 ff1d 	bl	801b8a4 <sqrt>
 8018a6a:	f7e8 f8a5 	bl	8000bb8 <__aeabi_d2f>
 8018a6e:	ee07 0a90 	vmov	s15, r0
 8018a72:	eec9 7a27 	vdiv.f32	s15, s18, s15
 8018a76:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8018a7a:	ee28 8a27 	vmul.f32	s16, s16, s15
 8018a7e:	ee2d da27 	vmul.f32	s26, s26, s15
 8018a82:	f894 3c3c 	ldrb.w	r3, [r4, #3132]	; 0xc3c
 8018a86:	f894 2c3d 	ldrb.w	r2, [r4, #3133]	; 0xc3d
 8018a8a:	4e52      	ldr	r6, [pc, #328]	; (8018bd4 <iNemo_update.constprop.35+0x3d0>)
 8018a8c:	4f52      	ldr	r7, [pc, #328]	; (8018bd8 <iNemo_update.constprop.35+0x3d4>)
 8018a8e:	f8d5 c084 	ldr.w	ip, [r5, #132]	; 0x84
 8018a92:	f8d5 907c 	ldr.w	r9, [r5, #124]	; 0x7c
 8018a96:	f8d5 e080 	ldr.w	lr, [r5, #128]	; 0x80
 8018a9a:	f8c5 c094 	str.w	ip, [r5, #148]	; 0x94
 8018a9e:	ee09 2a10 	vmov	s18, r2
 8018aa2:	f043 0302 	orr.w	r3, r3, #2
 8018aa6:	6faa      	ldr	r2, [r5, #120]	; 0x78
 8018aa8:	f8c5 2088 	str.w	r2, [r5, #136]	; 0x88
 8018aac:	f083 0301 	eor.w	r3, r3, #1
 8018ab0:	22f8      	movs	r2, #248	; 0xf8
 8018ab2:	f5a6 719a 	sub.w	r1, r6, #308	; 0x134
 8018ab6:	a828      	add	r0, sp, #160	; 0xa0
 8018ab8:	f884 3c3c 	strb.w	r3, [r4, #3132]	; 0xc3c
 8018abc:	f8c5 908c 	str.w	r9, [r5, #140]	; 0x8c
 8018ac0:	f8c5 e090 	str.w	lr, [r5, #144]	; 0x90
 8018ac4:	f001 fd9c 	bl	801a600 <memcpy>
 8018ac8:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8018acc:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8018ad0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8018ad4:	eddf 7a41 	vldr	s15, [pc, #260]	; 8018bdc <iNemo_update.constprop.35+0x3d8>
 8018ad8:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
 8018adc:	9715      	str	r7, [sp, #84]	; 0x54
 8018ade:	f106 0efa 	add.w	lr, r6, #250	; 0xfa
 8018ae2:	64f0      	str	r0, [r6, #76]	; 0x4c
 8018ae4:	6531      	str	r1, [r6, #80]	; 0x50
 8018ae6:	6572      	str	r2, [r6, #84]	; 0x54
 8018ae8:	f106 03f9 	add.w	r3, r6, #249	; 0xf9
 8018aec:	aa1f      	add	r2, sp, #124	; 0x7c
 8018aee:	f106 00f8 	add.w	r0, r6, #248	; 0xf8
 8018af2:	f1a6 016c 	sub.w	r1, r6, #108	; 0x6c
 8018af6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
 8018afa:	edcd ba2f 	vstr	s23, [sp, #188]	; 0xbc
 8018afe:	ed8d aa30 	vstr	s20, [sp, #192]	; 0xc0
 8018b02:	ed56 ba03 	vldr	s23, [r6, #-12]
 8018b06:	ed16 aa0c 	vldr	s20, [r6, #-48]	; 0xffffffd0
 8018b0a:	edcd 8a2b 	vstr	s17, [sp, #172]	; 0xac
 8018b0e:	ed8d 8a2c 	vstr	s16, [sp, #176]	; 0xb0
 8018b12:	ed56 8a0e 	vldr	s17, [r6, #-56]	; 0xffffffc8
 8018b16:	ed16 8a0f 	vldr	s16, [r6, #-60]	; 0xffffffc4
 8018b1a:	ed8d ba31 	vstr	s22, [sp, #196]	; 0xc4
 8018b1e:	edcd aa32 	vstr	s21, [sp, #200]	; 0xc8
 8018b22:	ed16 ba04 	vldr	s22, [r6, #-16]
 8018b26:	ed56 aa05 	vldr	s21, [r6, #-20]	; 0xffffffec
 8018b2a:	edcd 9a33 	vstr	s19, [sp, #204]	; 0xcc
 8018b2e:	ed8d ca2e 	vstr	s24, [sp, #184]	; 0xb8
 8018b32:	ed56 9a0d 	vldr	s19, [r6, #-52]	; 0xffffffcc
 8018b36:	ed8d da2d 	vstr	s26, [sp, #180]	; 0xb4
 8018b3a:	f8cd e050 	str.w	lr, [sp, #80]	; 0x50
 8018b3e:	e9cd 0312 	strd	r0, r3, [sp, #72]	; 0x48
 8018b42:	910f      	str	r1, [sp, #60]	; 0x3c
 8018b44:	edc5 7a0c 	vstr	s15, [r5, #48]	; 0x30
 8018b48:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8018b4c:	edc5 7a0e 	vstr	s15, [r5, #56]	; 0x38
 8018b50:	9210      	str	r2, [sp, #64]	; 0x40
 8018b52:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8018b56:	f856 0c1c 	ldr.w	r0, [r6, #-28]
 8018b5a:	f7e7 fcfd 	bl	8000558 <__aeabi_f2d>
 8018b5e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8018b62:	f894 0c1e 	ldrb.w	r0, [r4, #3102]	; 0xc1e
 8018b66:	f7e7 fcd5 	bl	8000514 <__aeabi_ui2d>
 8018b6a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8018b6e:	f894 3c1c 	ldrb.w	r3, [r4, #3100]	; 0xc1c
 8018b72:	f894 cc1b 	ldrb.w	ip, [r4, #3099]	; 0xc1b
 8018b76:	f894 2c1a 	ldrb.w	r2, [r4, #3098]	; 0xc1a
 8018b7a:	9308      	str	r3, [sp, #32]
 8018b7c:	f894 1c19 	ldrb.w	r1, [r4, #3097]	; 0xc19
 8018b80:	f894 3c18 	ldrb.w	r3, [r4, #3096]	; 0xc18
 8018b84:	f856 0c2c 	ldr.w	r0, [r6, #-44]
 8018b88:	eeb8 9a49 	vcvt.f32.u32	s18, s18
 8018b8c:	e9cd 2c06 	strd	r2, ip, [sp, #24]
 8018b90:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8018b94:	f7e7 fce0 	bl	8000558 <__aeabi_f2d>
 8018b98:	ee29 9a2d 	vmul.f32	s18, s18, s27
 8018b9c:	f50d 7e86 	add.w	lr, sp, #268	; 0x10c
 8018ba0:	f10d 0cdc 	add.w	ip, sp, #220	; 0xdc
 8018ba4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018ba8:	eef0 3a6b 	vmov.f32	s7, s23
 8018bac:	eeb0 3a4b 	vmov.f32	s6, s22
 8018bb0:	eef0 2a6a 	vmov.f32	s5, s21
 8018bb4:	eeb0 2a4a 	vmov.f32	s4, s20
 8018bb8:	eef0 1a69 	vmov.f32	s3, s19
 8018bbc:	eeb0 1a68 	vmov.f32	s2, s17
 8018bc0:	eef0 0a48 	vmov.f32	s1, s16
 8018bc4:	eeb0 0a49 	vmov.f32	s0, s18
 8018bc8:	ab34      	add	r3, sp, #208	; 0xd0
 8018bca:	e009      	b.n	8018be0 <iNemo_update.constprop.35+0x3dc>
 8018bcc:	200013c8 	.word	0x200013c8
 8018bd0:	20000000 	.word	0x20000000
 8018bd4:	20002008 	.word	0x20002008
 8018bd8:	200008e8 	.word	0x200008e8
 8018bdc:	00000000 	.word	0x00000000
 8018be0:	aa2e      	add	r2, sp, #184	; 0xb8
 8018be2:	a92b      	add	r1, sp, #172	; 0xac
 8018be4:	a84a      	add	r0, sp, #296	; 0x128
 8018be6:	e9cd ce00 	strd	ip, lr, [sp]
 8018bea:	f7ff fa1b 	bl	8018024 <SpacePointAlgorithm.isra.7>
 8018bee:	f1bb 0f00 	cmp.w	fp, #0
 8018bf2:	d00f      	beq.n	8018c14 <iNemo_update.constprop.35+0x410>
 8018bf4:	f8d9 2000 	ldr.w	r2, [r9]
 8018bf8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8018bfc:	f8cb 2000 	str.w	r2, [fp]
 8018c00:	f8cb 3004 	str.w	r3, [fp, #4]
 8018c04:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8018c08:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8018c0c:	f8cb 2008 	str.w	r2, [fp, #8]
 8018c10:	f8cb 300c 	str.w	r3, [fp, #12]
 8018c14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8018c18:	f8c6 3100 	str.w	r3, [r6, #256]	; 0x100
 8018c1c:	f894 3d3a 	ldrb.w	r3, [r4, #3386]	; 0xd3a
 8018c20:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8018c24:	f8c6 20fc 	str.w	r2, [r6, #252]	; 0xfc
 8018c28:	2b01      	cmp	r3, #1
 8018c2a:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8018c2e:	f8c6 2104 	str.w	r2, [r6, #260]	; 0x104
 8018c32:	d055      	beq.n	8018ce0 <iNemo_update.constprop.35+0x4dc>
 8018c34:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018c36:	f103 3aff 	add.w	sl, r3, #4294967295
 8018c3a:	fa5f fa8a 	uxtb.w	sl, sl
 8018c3e:	f1ba 0f08 	cmp.w	sl, #8
 8018c42:	bf9c      	itt	ls
 8018c44:	4b35      	ldrls	r3, [pc, #212]	; (8018d1c <iNemo_update.constprop.35+0x518>)
 8018c46:	f883 a8e0 	strbls.w	sl, [r3, #2272]	; 0x8e0
 8018c4a:	eddf 7a35 	vldr	s15, [pc, #212]	; 8018d20 <iNemo_update.constprop.35+0x51c>
 8018c4e:	ed98 6a00 	vldr	s12, [r8]
 8018c52:	edd8 6a01 	vldr	s13, [r8, #4]
 8018c56:	ed98 7a02 	vldr	s14, [r8, #8]
 8018c5a:	f894 3d39 	ldrb.w	r3, [r4, #3385]	; 0xd39
 8018c5e:	ee26 5a27 	vmul.f32	s10, s12, s15
 8018c62:	ee66 5aa7 	vmul.f32	s11, s13, s15
 8018c66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018c6a:	ed85 5a1b 	vstr	s10, [r5, #108]	; 0x6c
 8018c6e:	edc5 5a1c 	vstr	s11, [r5, #112]	; 0x70
 8018c72:	edc5 7a1d 	vstr	s15, [r5, #116]	; 0x74
 8018c76:	b13b      	cbz	r3, 8018c88 <iNemo_update.constprop.35+0x484>
 8018c78:	f894 3d48 	ldrb.w	r3, [r4, #3400]	; 0xd48
 8018c7c:	2b09      	cmp	r3, #9
 8018c7e:	d828      	bhi.n	8018cd2 <iNemo_update.constprop.35+0x4ce>
 8018c80:	3301      	adds	r3, #1
 8018c82:	f884 3d48 	strb.w	r3, [r4, #3400]	; 0xd48
 8018c86:	e001      	b.n	8018c8c <iNemo_update.constprop.35+0x488>
 8018c88:	f884 3d48 	strb.w	r3, [r4, #3400]	; 0xd48
 8018c8c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8018c90:	f894 3c3c 	ldrb.w	r3, [r4, #3132]	; 0xc3c
 8018c94:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8018c98:	f8c6 20ac 	str.w	r2, [r6, #172]	; 0xac
 8018c9c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8018ca0:	f8c6 10b0 	str.w	r1, [r6, #176]	; 0xb0
 8018ca4:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8018ca8:	f8c6 20b4 	str.w	r2, [r6, #180]	; 0xb4
 8018cac:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8018cb0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8018cb4:	f8c6 00c4 	str.w	r0, [r6, #196]	; 0xc4
 8018cb8:	f083 0302 	eor.w	r3, r3, #2
 8018cbc:	f884 3c3c 	strb.w	r3, [r4, #3132]	; 0xc3c
 8018cc0:	f8c6 10c8 	str.w	r1, [r6, #200]	; 0xc8
 8018cc4:	f8c6 20cc 	str.w	r2, [r6, #204]	; 0xcc
 8018cc8:	b067      	add	sp, #412	; 0x19c
 8018cca:	ecbd 8b0c 	vpop	{d8-d13}
 8018cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018cd2:	ed86 6a22 	vstr	s12, [r6, #136]	; 0x88
 8018cd6:	edc6 6a23 	vstr	s13, [r6, #140]	; 0x8c
 8018cda:	ed86 7a24 	vstr	s14, [r6, #144]	; 0x90
 8018cde:	e7d5      	b.n	8018c8c <iNemo_update.constprop.35+0x488>
 8018ce0:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8018ce4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8018ce8:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
 8018cec:	f8c5 2094 	str.w	r2, [r5, #148]	; 0x94
 8018cf0:	4a0a      	ldr	r2, [pc, #40]	; (8018d1c <iNemo_update.constprop.35+0x518>)
 8018cf2:	f8d9 0000 	ldr.w	r0, [r9]
 8018cf6:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8018cfa:	67eb      	str	r3, [r5, #124]	; 0x7c
 8018cfc:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
 8018d00:	2300      	movs	r3, #0
 8018d02:	67a8      	str	r0, [r5, #120]	; 0x78
 8018d04:	f8c5 0088 	str.w	r0, [r5, #136]	; 0x88
 8018d08:	f8c5 1080 	str.w	r1, [r5, #128]	; 0x80
 8018d0c:	f8c5 1090 	str.w	r1, [r5, #144]	; 0x90
 8018d10:	f884 3c28 	strb.w	r3, [r4, #3112]	; 0xc28
 8018d14:	f882 38e0 	strb.w	r3, [r2, #2272]	; 0x8e0
 8018d18:	e797      	b.n	8018c4a <iNemo_update.constprop.35+0x446>
 8018d1a:	bf00      	nop
 8018d1c:	20000000 	.word	0x20000000
 8018d20:	42652ee1 	.word	0x42652ee1
 8018d24:	00000000 	.word	0x00000000

08018d28 <MotionFX_initialize>:
 8018d28:	4a11      	ldr	r2, [pc, #68]	; (8018d70 <MotionFX_initialize+0x48>)
 8018d2a:	4912      	ldr	r1, [pc, #72]	; (8018d74 <MotionFX_initialize+0x4c>)
 8018d2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d30:	6813      	ldr	r3, [r2, #0]
 8018d32:	f023 0301 	bic.w	r3, r3, #1
 8018d36:	6013      	str	r3, [r2, #0]
 8018d38:	680b      	ldr	r3, [r1, #0]
 8018d3a:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8018d3e:	4013      	ands	r3, r2
 8018d40:	f24c 2040 	movw	r0, #49728	; 0xc240
 8018d44:	4283      	cmp	r3, r0
 8018d46:	d01f      	beq.n	8018d88 <MotionFX_initialize+0x60>
 8018d48:	680b      	ldr	r3, [r1, #0]
 8018d4a:	f24c 2170 	movw	r1, #49776	; 0xc270
 8018d4e:	4013      	ands	r3, r2
 8018d50:	428b      	cmp	r3, r1
 8018d52:	d019      	beq.n	8018d88 <MotionFX_initialize+0x60>
 8018d54:	4b08      	ldr	r3, [pc, #32]	; (8018d78 <MotionFX_initialize+0x50>)
 8018d56:	2201      	movs	r2, #1
 8018d58:	601a      	str	r2, [r3, #0]
 8018d5a:	681a      	ldr	r2, [r3, #0]
 8018d5c:	2a00      	cmp	r2, #0
 8018d5e:	d1fc      	bne.n	8018d5a <MotionFX_initialize+0x32>
 8018d60:	4b06      	ldr	r3, [pc, #24]	; (8018d7c <MotionFX_initialize+0x54>)
 8018d62:	4a07      	ldr	r2, [pc, #28]	; (8018d80 <MotionFX_initialize+0x58>)
 8018d64:	601a      	str	r2, [r3, #0]
 8018d66:	681a      	ldr	r2, [r3, #0]
 8018d68:	4b06      	ldr	r3, [pc, #24]	; (8018d84 <MotionFX_initialize+0x5c>)
 8018d6a:	429a      	cmp	r2, r3
 8018d6c:	d02b      	beq.n	8018dc6 <MotionFX_initialize+0x9e>
 8018d6e:	e7fe      	b.n	8018d6e <MotionFX_initialize+0x46>
 8018d70:	e0002000 	.word	0xe0002000
 8018d74:	e000ed00 	.word	0xe000ed00
 8018d78:	40023008 	.word	0x40023008
 8018d7c:	40023000 	.word	0x40023000
 8018d80:	f407a5c2 	.word	0xf407a5c2
 8018d84:	b5e8b5cd 	.word	0xb5e8b5cd
 8018d88:	4beb      	ldr	r3, [pc, #940]	; (8019138 <MotionFX_initialize+0x410>)
 8018d8a:	681b      	ldr	r3, [r3, #0]
 8018d8c:	2b00      	cmp	r3, #0
 8018d8e:	d1e1      	bne.n	8018d54 <MotionFX_initialize+0x2c>
 8018d90:	4aea      	ldr	r2, [pc, #936]	; (801913c <MotionFX_initialize+0x414>)
 8018d92:	6813      	ldr	r3, [r2, #0]
 8018d94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8018d98:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8018d9c:	d006      	beq.n	8018dac <MotionFX_initialize+0x84>
 8018d9e:	6813      	ldr	r3, [r2, #0]
 8018da0:	f240 4283 	movw	r2, #1155	; 0x483
 8018da4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8018da8:	4293      	cmp	r3, r2
 8018daa:	d1d3      	bne.n	8018d54 <MotionFX_initialize+0x2c>
 8018dac:	4be4      	ldr	r3, [pc, #912]	; (8019140 <MotionFX_initialize+0x418>)
 8018dae:	2201      	movs	r2, #1
 8018db0:	601a      	str	r2, [r3, #0]
 8018db2:	681a      	ldr	r2, [r3, #0]
 8018db4:	2a00      	cmp	r2, #0
 8018db6:	d1fc      	bne.n	8018db2 <MotionFX_initialize+0x8a>
 8018db8:	4be2      	ldr	r3, [pc, #904]	; (8019144 <MotionFX_initialize+0x41c>)
 8018dba:	4ae3      	ldr	r2, [pc, #908]	; (8019148 <MotionFX_initialize+0x420>)
 8018dbc:	601a      	str	r2, [r3, #0]
 8018dbe:	681a      	ldr	r2, [r3, #0]
 8018dc0:	4be2      	ldr	r3, [pc, #904]	; (801914c <MotionFX_initialize+0x424>)
 8018dc2:	429a      	cmp	r2, r3
 8018dc4:	d1d3      	bne.n	8018d6e <MotionFX_initialize+0x46>
 8018dc6:	4ce2      	ldr	r4, [pc, #904]	; (8019150 <MotionFX_initialize+0x428>)
 8018dc8:	eddf 7ae2 	vldr	s15, [pc, #904]	; 8019154 <MotionFX_initialize+0x42c>
 8018dcc:	4ee2      	ldr	r6, [pc, #904]	; (8019158 <MotionFX_initialize+0x430>)
 8018dce:	eddf 6ae3 	vldr	s13, [pc, #908]	; 801915c <MotionFX_initialize+0x434>
 8018dd2:	2500      	movs	r5, #0
 8018dd4:	f04f 0901 	mov.w	r9, #1
 8018dd8:	ed9f 5bcd 	vldr	d5, [pc, #820]	; 8019110 <MotionFX_initialize+0x3e8>
 8018ddc:	ed9f 1bce 	vldr	d1, [pc, #824]	; 8019118 <MotionFX_initialize+0x3f0>
 8018de0:	ed9f 2bcf 	vldr	d2, [pc, #828]	; 8019120 <MotionFX_initialize+0x3f8>
 8018de4:	ed9f 3bd0 	vldr	d3, [pc, #832]	; 8019128 <MotionFX_initialize+0x400>
 8018de8:	f20f 3b44 	addw	fp, pc, #836	; 0x344
 8018dec:	e9db ab00 	ldrd	sl, fp, [fp]
 8018df0:	f241 17b6 	movw	r7, #4534	; 0x11b6
 8018df4:	f884 9d49 	strb.w	r9, [r4, #3401]	; 0xd49
 8018df8:	f8c4 5d4c 	str.w	r5, [r4, #3404]	; 0xd4c
 8018dfc:	f8c4 5d50 	str.w	r5, [r4, #3408]	; 0xd50
 8018e00:	f7f7 fa4e 	bl	80102a0 <rt_InitInfAndNaN.isra.3>
 8018e04:	f241 10b4 	movw	r0, #4532	; 0x11b4
 8018e08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8018e0c:	f606 08e8 	addw	r8, r6, #2280	; 0x8e8
 8018e10:	5235      	strh	r5, [r6, r0]
 8018e12:	55f5      	strb	r5, [r6, r7]
 8018e14:	200a      	movs	r0, #10
 8018e16:	ed88 5b02 	vstr	d5, [r8, #8]
 8018e1a:	ed88 1b04 	vstr	d1, [r8, #16]
 8018e1e:	ed88 2b06 	vstr	d2, [r8, #24]
 8018e22:	e9c8 ab08 	strd	sl, fp, [r8, #32]
 8018e26:	ed88 3b0a 	vstr	d3, [r8, #40]	; 0x28
 8018e2a:	ed88 7a82 	vstr	s14, [r8, #520]	; 0x208
 8018e2e:	f886 08e0 	strb.w	r0, [r6, #2272]	; 0x8e0
 8018e32:	edc8 7a83 	vstr	s15, [r8, #524]	; 0x20c
 8018e36:	edc8 7a84 	vstr	s15, [r8, #528]	; 0x210
 8018e3a:	f8c4 5418 	str.w	r5, [r4, #1048]	; 0x418
 8018e3e:	f8c4 5424 	str.w	r5, [r4, #1060]	; 0x424
 8018e42:	f8c4 5430 	str.w	r5, [r4, #1072]	; 0x430
 8018e46:	f8c4 541c 	str.w	r5, [r4, #1052]	; 0x41c
 8018e4a:	f884 5420 	strb.w	r5, [r4, #1056]	; 0x420
 8018e4e:	f8c4 5428 	str.w	r5, [r4, #1064]	; 0x428
 8018e52:	f884 542c 	strb.w	r5, [r4, #1068]	; 0x42c
 8018e56:	f8c4 5434 	str.w	r5, [r4, #1076]	; 0x434
 8018e5a:	f884 5438 	strb.w	r5, [r4, #1080]	; 0x438
 8018e5e:	f7f7 fa1f 	bl	80102a0 <rt_InitInfAndNaN.isra.3>
 8018e62:	f604 330c 	addw	r3, r4, #2828	; 0xb0c
 8018e66:	ed86 5b06 	vstr	d5, [r6, #24]
 8018e6a:	eddf 4abd 	vldr	s9, [pc, #756]	; 8019160 <MotionFX_initialize+0x438>
 8018e6e:	ed9f 5abd 	vldr	s10, [pc, #756]	; 8019164 <MotionFX_initialize+0x43c>
 8018e72:	eddf 5abd 	vldr	s11, [pc, #756]	; 8019168 <MotionFX_initialize+0x440>
 8018e76:	f8df c30c 	ldr.w	ip, [pc, #780]	; 8019184 <MotionFX_initialize+0x45c>
 8018e7a:	48bc      	ldr	r0, [pc, #752]	; (801916c <MotionFX_initialize+0x444>)
 8018e7c:	49bc      	ldr	r1, [pc, #752]	; (8019170 <MotionFX_initialize+0x448>)
 8018e7e:	4abd      	ldr	r2, [pc, #756]	; (8019174 <MotionFX_initialize+0x44c>)
 8018e80:	ed86 7a86 	vstr	s14, [r6, #536]	; 0x218
 8018e84:	f604 0ecc 	addw	lr, r4, #2252	; 0x8cc
 8018e88:	f604 4704 	addw	r7, r4, #3076	; 0xc04
 8018e8c:	ed86 1b08 	vstr	d1, [r6, #32]
 8018e90:	ed86 2b0a 	vstr	d2, [r6, #40]	; 0x28
 8018e94:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 8018e98:	e9c6 ab0c 	strd	sl, fp, [r6, #48]	; 0x30
 8018e9c:	ed86 3b0e 	vstr	d3, [r6, #56]	; 0x38
 8018ea0:	f04f 0a02 	mov.w	sl, #2
 8018ea4:	ed83 7a21 	vstr	s14, [r3, #132]	; 0x84
 8018ea8:	ed83 7a25 	vstr	s14, [r3, #148]	; 0x94
 8018eac:	ed83 7a29 	vstr	s14, [r3, #164]	; 0xa4
 8018eb0:	edc6 7a87 	vstr	s15, [r6, #540]	; 0x21c
 8018eb4:	edc6 7a88 	vstr	s15, [r6, #544]	; 0x220
 8018eb8:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
 8018ebc:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
 8018ec0:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
 8018ec4:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
 8018ec8:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
 8018ecc:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
 8018ed0:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
 8018ed4:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
 8018ed8:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
 8018edc:	f8a6 58dc 	strh.w	r5, [r6, #2268]	; 0x8dc
 8018ee0:	f886 58de 	strb.w	r5, [r6, #2270]	; 0x8de
 8018ee4:	f886 900c 	strb.w	r9, [r6, #12]
 8018ee8:	f04f 3b01 	mov.w	fp, #16843009	; 0x1010101
 8018eec:	f8c4 543c 	str.w	r5, [r4, #1084]	; 0x43c
 8018ef0:	f8c4 5448 	str.w	r5, [r4, #1096]	; 0x448
 8018ef4:	f8c4 5454 	str.w	r5, [r4, #1108]	; 0x454
 8018ef8:	f8c4 5440 	str.w	r5, [r4, #1088]	; 0x440
 8018efc:	f884 5444 	strb.w	r5, [r4, #1092]	; 0x444
 8018f00:	f8c4 544c 	str.w	r5, [r4, #1100]	; 0x44c
 8018f04:	f884 5450 	strb.w	r5, [r4, #1104]	; 0x450
 8018f08:	f8c4 5458 	str.w	r5, [r4, #1112]	; 0x458
 8018f0c:	f884 545c 	strb.w	r5, [r4, #1116]	; 0x45c
 8018f10:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
 8018f14:	ed83 7a2d 	vstr	s14, [r3, #180]	; 0xb4
 8018f18:	ed83 7a31 	vstr	s14, [r3, #196]	; 0xc4
 8018f1c:	ed83 7a35 	vstr	s14, [r3, #212]	; 0xd4
 8018f20:	ed83 7a39 	vstr	s14, [r3, #228]	; 0xe4
 8018f24:	ed83 7a3d 	vstr	s14, [r3, #244]	; 0xf4
 8018f28:	ed83 7a0f 	vstr	s14, [r3, #60]	; 0x3c
 8018f2c:	ed83 7a13 	vstr	s14, [r3, #76]	; 0x4c
 8018f30:	ed83 7a17 	vstr	s14, [r3, #92]	; 0x5c
 8018f34:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
 8018f38:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
 8018f3c:	edc3 7a2e 	vstr	s15, [r3, #184]	; 0xb8
 8018f40:	edc3 7a2f 	vstr	s15, [r3, #188]	; 0xbc
 8018f44:	edc3 7a30 	vstr	s15, [r3, #192]	; 0xc0
 8018f48:	edc3 7a32 	vstr	s15, [r3, #200]	; 0xc8
 8018f4c:	edc3 7a33 	vstr	s15, [r3, #204]	; 0xcc
 8018f50:	edc3 7a34 	vstr	s15, [r3, #208]	; 0xd0
 8018f54:	edc3 7a36 	vstr	s15, [r3, #216]	; 0xd8
 8018f58:	edc3 7a37 	vstr	s15, [r3, #220]	; 0xdc
 8018f5c:	edc3 7a38 	vstr	s15, [r3, #224]	; 0xe0
 8018f60:	edc3 7a3a 	vstr	s15, [r3, #232]	; 0xe8
 8018f64:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
 8018f68:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
 8018f6c:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
 8018f70:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
 8018f74:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
 8018f78:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
 8018f7c:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
 8018f80:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
 8018f84:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
 8018f88:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
 8018f8c:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
 8018f90:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
 8018f94:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
 8018f98:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
 8018f9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8018fa0:	f8c4 cc2c 	str.w	ip, [r4, #3116]	; 0xc2c
 8018fa4:	f8c4 0c30 	str.w	r0, [r4, #3120]	; 0xc30
 8018fa8:	f8c4 1c34 	str.w	r1, [r4, #3124]	; 0xc34
 8018fac:	f8c4 2c38 	str.w	r2, [r4, #3128]	; 0xc38
 8018fb0:	edc8 7a28 	vstr	s15, [r8, #160]	; 0xa0
 8018fb4:	edc8 7a29 	vstr	s15, [r8, #164]	; 0xa4
 8018fb8:	edc8 7a2a 	vstr	s15, [r8, #168]	; 0xa8
 8018fbc:	ed87 7a08 	vstr	s14, [r7, #32]
 8018fc0:	f604 18c4 	addw	r8, r4, #2500	; 0x9c4
 8018fc4:	edc7 4a00 	vstr	s9, [r7]
 8018fc8:	ed87 5a01 	vstr	s10, [r7, #4]
 8018fcc:	edc7 5a02 	vstr	s11, [r7, #8]
 8018fd0:	edc7 6a03 	vstr	s13, [r7, #12]
 8018fd4:	ed87 6a04 	vstr	s12, [r7, #16]
 8018fd8:	ed8e 7a21 	vstr	s14, [lr, #132]	; 0x84
 8018fdc:	ed8e 7a25 	vstr	s14, [lr, #148]	; 0x94
 8018fe0:	ed8e 7a29 	vstr	s14, [lr, #164]	; 0xa4
 8018fe4:	edce 7a1e 	vstr	s15, [lr, #120]	; 0x78
 8018fe8:	edce 7a1f 	vstr	s15, [lr, #124]	; 0x7c
 8018fec:	edce 7a20 	vstr	s15, [lr, #128]	; 0x80
 8018ff0:	edce 7a22 	vstr	s15, [lr, #136]	; 0x88
 8018ff4:	edce 7a23 	vstr	s15, [lr, #140]	; 0x8c
 8018ff8:	edce 7a24 	vstr	s15, [lr, #144]	; 0x90
 8018ffc:	edce 7a26 	vstr	s15, [lr, #152]	; 0x98
 8019000:	edce 7a27 	vstr	s15, [lr, #156]	; 0x9c
 8019004:	edce 7a28 	vstr	s15, [lr, #160]	; 0xa0
 8019008:	f8a4 3c3c 	strh.w	r3, [r4, #3132]	; 0xc3c
 801900c:	f8c4 9c1c 	str.w	r9, [r4, #3100]	; 0xc1c
 8019010:	f884 9c28 	strb.w	r9, [r4, #3112]	; 0xc28
 8019014:	f884 5c3e 	strb.w	r5, [r4, #3134]	; 0xc3e
 8019018:	f8c4 bc18 	str.w	fp, [r4, #3096]	; 0xc18
 801901c:	f884 ac20 	strb.w	sl, [r4, #3104]	; 0xc20
 8019020:	edce 7a2a 	vstr	s15, [lr, #168]	; 0xa8
 8019024:	ed8e 7a2d 	vstr	s14, [lr, #180]	; 0xb4
 8019028:	ed8e 7a31 	vstr	s14, [lr, #196]	; 0xc4
 801902c:	ed8e 7a35 	vstr	s14, [lr, #212]	; 0xd4
 8019030:	ed8e 7a39 	vstr	s14, [lr, #228]	; 0xe4
 8019034:	ed8e 7a3d 	vstr	s14, [lr, #244]	; 0xf4
 8019038:	ed8e 7a0f 	vstr	s14, [lr, #60]	; 0x3c
 801903c:	ed8e 7a13 	vstr	s14, [lr, #76]	; 0x4c
 8019040:	ed8e 7a17 	vstr	s14, [lr, #92]	; 0x5c
 8019044:	edce 7a2b 	vstr	s15, [lr, #172]	; 0xac
 8019048:	edce 7a2c 	vstr	s15, [lr, #176]	; 0xb0
 801904c:	edce 7a2e 	vstr	s15, [lr, #184]	; 0xb8
 8019050:	edce 7a2f 	vstr	s15, [lr, #188]	; 0xbc
 8019054:	edce 7a30 	vstr	s15, [lr, #192]	; 0xc0
 8019058:	edce 7a32 	vstr	s15, [lr, #200]	; 0xc8
 801905c:	edce 7a33 	vstr	s15, [lr, #204]	; 0xcc
 8019060:	edce 7a34 	vstr	s15, [lr, #208]	; 0xd0
 8019064:	edce 7a36 	vstr	s15, [lr, #216]	; 0xd8
 8019068:	edce 7a37 	vstr	s15, [lr, #220]	; 0xdc
 801906c:	edce 7a38 	vstr	s15, [lr, #224]	; 0xe0
 8019070:	edce 7a3a 	vstr	s15, [lr, #232]	; 0xe8
 8019074:	edce 7a3b 	vstr	s15, [lr, #236]	; 0xec
 8019078:	edce 7a3c 	vstr	s15, [lr, #240]	; 0xf0
 801907c:	edce 7a10 	vstr	s15, [lr, #64]	; 0x40
 8019080:	edce 7a11 	vstr	s15, [lr, #68]	; 0x44
 8019084:	edce 7a12 	vstr	s15, [lr, #72]	; 0x48
 8019088:	edce 7a14 	vstr	s15, [lr, #80]	; 0x50
 801908c:	edce 7a15 	vstr	s15, [lr, #84]	; 0x54
 8019090:	edce 7a16 	vstr	s15, [lr, #88]	; 0x58
 8019094:	edce 7a18 	vstr	s15, [lr, #96]	; 0x60
 8019098:	edce 7a19 	vstr	s15, [lr, #100]	; 0x64
 801909c:	edce 7a1a 	vstr	s15, [lr, #104]	; 0x68
 80190a0:	edce 7a1b 	vstr	s15, [lr, #108]	; 0x6c
 80190a4:	edce 7a1c 	vstr	s15, [lr, #112]	; 0x70
 80190a8:	f8a4 39fc 	strh.w	r3, [r4, #2556]	; 0x9fc
 80190ac:	4b32      	ldr	r3, [pc, #200]	; (8019178 <MotionFX_initialize+0x450>)
 80190ae:	f8c4 c9ec 	str.w	ip, [r4, #2540]	; 0x9ec
 80190b2:	f8c4 09f0 	str.w	r0, [r4, #2544]	; 0x9f0
 80190b6:	f8c4 19f4 	str.w	r1, [r4, #2548]	; 0x9f4
 80190ba:	f8c4 29f8 	str.w	r2, [r4, #2552]	; 0x9f8
 80190be:	f8c4 39d8 	str.w	r3, [r4, #2520]	; 0x9d8
 80190c2:	edc6 7a2c 	vstr	s15, [r6, #176]	; 0xb0
 80190c6:	edc6 7a2d 	vstr	s15, [r6, #180]	; 0xb4
 80190ca:	edc6 7a2e 	vstr	s15, [r6, #184]	; 0xb8
 80190ce:	edc8 4a00 	vstr	s9, [r8]
 80190d2:	ed88 5a01 	vstr	s10, [r8, #4]
 80190d6:	edc8 5a02 	vstr	s11, [r8, #8]
 80190da:	edc8 6a03 	vstr	s13, [r8, #12]
 80190de:	ed88 6a04 	vstr	s12, [r8, #16]
 80190e2:	ed88 7a08 	vstr	s14, [r8, #32]
 80190e6:	edce 7a1d 	vstr	s15, [lr, #116]	; 0x74
 80190ea:	f8c4 99dc 	str.w	r9, [r4, #2524]	; 0x9dc
 80190ee:	f884 99e8 	strb.w	r9, [r4, #2536]	; 0x9e8
 80190f2:	f884 a9e0 	strb.w	sl, [r4, #2528]	; 0x9e0
 80190f6:	f884 59fe 	strb.w	r5, [r4, #2558]	; 0x9fe
 80190fa:	f7f7 f9a5 	bl	8010448 <iNemo_setOrientation.constprop.40>
 80190fe:	f7f7 fb7b 	bl	80107f8 <iNemo_setOrientation_6X.constprop.41>
 8019102:	f04f 567f 	mov.w	r6, #1069547520	; 0x3fc00000
 8019106:	f8df c080 	ldr.w	ip, [pc, #128]	; 8019188 <MotionFX_initialize+0x460>
 801910a:	481c      	ldr	r0, [pc, #112]	; (801917c <MotionFX_initialize+0x454>)
 801910c:	491c      	ldr	r1, [pc, #112]	; (8019180 <MotionFX_initialize+0x458>)
 801910e:	e03d      	b.n	801918c <MotionFX_initialize+0x464>
 8019110:	60000000 	.word	0x60000000
 8019114:	3fc76cab 	.word	0x3fc76cab
 8019118:	20000000 	.word	0x20000000
 801911c:	3fc55a40 	.word	0x3fc55a40
 8019120:	00000000 	.word	0x00000000
 8019124:	3fbfdfb7 	.word	0x3fbfdfb7
 8019128:	60000000 	.word	0x60000000
 801912c:	3f9f1fed 	.word	0x3f9f1fed
 8019130:	c0000000 	.word	0xc0000000
 8019134:	3fb2875e 	.word	0x3fb2875e
 8019138:	e0042000 	.word	0xe0042000
 801913c:	5c001000 	.word	0x5c001000
 8019140:	58024c08 	.word	0x58024c08
 8019144:	58024c00 	.word	0x58024c00
 8019148:	f407a5c2 	.word	0xf407a5c2
 801914c:	b5e8b5cd 	.word	0xb5e8b5cd
 8019150:	200013c8 	.word	0x200013c8
 8019154:	00000000 	.word	0x00000000
 8019158:	20000000 	.word	0x20000000
 801915c:	3f2ac083 	.word	0x3f2ac083
 8019160:	3f639581 	.word	0x3f639581
 8019164:	402ab021 	.word	0x402ab021
 8019168:	3f13f7cf 	.word	0x3f13f7cf
 801916c:	3a09a027 	.word	0x3a09a027
 8019170:	39b24207 	.word	0x39b24207
 8019174:	3dcccccd 	.word	0x3dcccccd
 8019178:	01000101 	.word	0x01000101
 801917c:	3a51b717 	.word	0x3a51b717
 8019180:	3a378034 	.word	0x3a378034
 8019184:	39712c28 	.word	0x39712c28
 8019188:	3f666666 	.word	0x3f666666
 801918c:	4a14      	ldr	r2, [pc, #80]	; (80191e0 <MotionFX_initialize+0x4b8>)
 801918e:	4b15      	ldr	r3, [pc, #84]	; (80191e4 <MotionFX_initialize+0x4bc>)
 8019190:	f8df e054 	ldr.w	lr, [pc, #84]	; 80191e8 <MotionFX_initialize+0x4c0>
 8019194:	edc8 6a03 	vstr	s13, [r8, #12]
 8019198:	edc7 6a03 	vstr	s13, [r7, #12]
 801919c:	f884 a9fd 	strb.w	sl, [r4, #2557]	; 0x9fd
 80191a0:	f884 59fe 	strb.w	r5, [r4, #2558]	; 0x9fe
 80191a4:	f884 ac3d 	strb.w	sl, [r4, #3133]	; 0xc3d
 80191a8:	f884 5c3e 	strb.w	r5, [r4, #3134]	; 0xc3e
 80191ac:	f8c4 bc19 	str.w	fp, [r4, #3097]	; 0xc19
 80191b0:	f8c4 e9d9 	str.w	lr, [r4, #2521]	; 0x9d9
 80191b4:	f8c8 c000 	str.w	ip, [r8]
 80191b8:	f8c7 c000 	str.w	ip, [r7]
 80191bc:	f8c8 6004 	str.w	r6, [r8, #4]
 80191c0:	607e      	str	r6, [r7, #4]
 80191c2:	f8c8 0028 	str.w	r0, [r8, #40]	; 0x28
 80191c6:	62b8      	str	r0, [r7, #40]	; 0x28
 80191c8:	f8c8 102c 	str.w	r1, [r8, #44]	; 0x2c
 80191cc:	62f9      	str	r1, [r7, #44]	; 0x2c
 80191ce:	f8c8 2030 	str.w	r2, [r8, #48]	; 0x30
 80191d2:	633a      	str	r2, [r7, #48]	; 0x30
 80191d4:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
 80191d8:	637b      	str	r3, [r7, #52]	; 0x34
 80191da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80191de:	bf00      	nop
 80191e0:	3b378034 	.word	0x3b378034
 80191e4:	3dcccccd 	.word	0x3dcccccd
 80191e8:	01010001 	.word	0x01010001

080191ec <MotionFX_setKnobs>:
 80191ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80191ee:	4b2f      	ldr	r3, [pc, #188]	; (80192ac <MotionFX_setKnobs+0xc0>)
 80191f0:	f893 2d49 	ldrb.w	r2, [r3, #3401]	; 0xd49
 80191f4:	b902      	cbnz	r2, 80191f8 <MotionFX_setKnobs+0xc>
 80191f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80191f8:	2800      	cmp	r0, #0
 80191fa:	d0fc      	beq.n	80191f6 <MotionFX_setKnobs+0xa>
 80191fc:	f603 12c4 	addw	r2, r3, #2500	; 0x9c4
 8019200:	6884      	ldr	r4, [r0, #8]
 8019202:	6806      	ldr	r6, [r0, #0]
 8019204:	6845      	ldr	r5, [r0, #4]
 8019206:	60d4      	str	r4, [r2, #12]
 8019208:	7b01      	ldrb	r1, [r0, #12]
 801920a:	f883 19d9 	strb.w	r1, [r3, #2521]	; 0x9d9
 801920e:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8019212:	f8d0 c014 	ldr.w	ip, [r0, #20]
 8019216:	6987      	ldr	r7, [r0, #24]
 8019218:	6317      	str	r7, [r2, #48]	; 0x30
 801921a:	f8c2 e028 	str.w	lr, [r2, #40]	; 0x28
 801921e:	f8c2 c02c 	str.w	ip, [r2, #44]	; 0x2c
 8019222:	f890 7028 	ldrb.w	r7, [r0, #40]	; 0x28
 8019226:	f883 79fd 	strb.w	r7, [r3, #2557]	; 0x9fd
 801922a:	f890 c035 	ldrb.w	ip, [r0, #53]	; 0x35
 801922e:	f883 c9fe 	strb.w	ip, [r3, #2558]	; 0x9fe
 8019232:	f883 1c19 	strb.w	r1, [r3, #3097]	; 0xc19
 8019236:	f603 4104 	addw	r1, r3, #3076	; 0xc04
 801923a:	6016      	str	r6, [r2, #0]
 801923c:	6055      	str	r5, [r2, #4]
 801923e:	6a02      	ldr	r2, [r0, #32]
 8019240:	f8d0 e01c 	ldr.w	lr, [r0, #28]
 8019244:	62ca      	str	r2, [r1, #44]	; 0x2c
 8019246:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8019248:	f883 cc3e 	strb.w	ip, [r3, #3134]	; 0xc3e
 801924c:	f883 7c3d 	strb.w	r7, [r3, #3133]	; 0xc3d
 8019250:	6b87      	ldr	r7, [r0, #56]	; 0x38
 8019252:	f8c1 e028 	str.w	lr, [r1, #40]	; 0x28
 8019256:	630a      	str	r2, [r1, #48]	; 0x30
 8019258:	4a15      	ldr	r2, [pc, #84]	; (80192b0 <MotionFX_setKnobs+0xc4>)
 801925a:	600e      	str	r6, [r1, #0]
 801925c:	604d      	str	r5, [r1, #4]
 801925e:	60cc      	str	r4, [r1, #12]
 8019260:	f8c3 7d54 	str.w	r7, [r3, #3412]	; 0xd54
 8019264:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8019268:	7013      	strb	r3, [r2, #0]
 801926a:	f890 e02d 	ldrb.w	lr, [r0, #45]	; 0x2d
 801926e:	f890 702a 	ldrb.w	r7, [r0, #42]	; 0x2a
 8019272:	f890 602e 	ldrb.w	r6, [r0, #46]	; 0x2e
 8019276:	f890 5032 	ldrb.w	r5, [r0, #50]	; 0x32
 801927a:	f890 402b 	ldrb.w	r4, [r0, #43]	; 0x2b
 801927e:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
 8019282:	f890 c031 	ldrb.w	ip, [r0, #49]	; 0x31
 8019286:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
 801928a:	f882 e004 	strb.w	lr, [r2, #4]
 801928e:	7057      	strb	r7, [r2, #1]
 8019290:	7156      	strb	r6, [r2, #5]
 8019292:	7255      	strb	r5, [r2, #9]
 8019294:	7094      	strb	r4, [r2, #2]
 8019296:	7293      	strb	r3, [r2, #10]
 8019298:	f882 c008 	strb.w	ip, [r2, #8]
 801929c:	7191      	strb	r1, [r2, #6]
 801929e:	f7f7 f8d3 	bl	8010448 <iNemo_setOrientation.constprop.40>
 80192a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80192a6:	f7f7 baa7 	b.w	80107f8 <iNemo_setOrientation_6X.constprop.41>
 80192aa:	bf00      	nop
 80192ac:	200013c8 	.word	0x200013c8
 80192b0:	20000000 	.word	0x20000000

080192b4 <MotionFX_getKnobs>:
 80192b4:	4b28      	ldr	r3, [pc, #160]	; (8019358 <MotionFX_getKnobs+0xa4>)
 80192b6:	f893 2d49 	ldrb.w	r2, [r3, #3401]	; 0xd49
 80192ba:	b902      	cbnz	r2, 80192be <MotionFX_getKnobs+0xa>
 80192bc:	4770      	bx	lr
 80192be:	2800      	cmp	r0, #0
 80192c0:	d0fc      	beq.n	80192bc <MotionFX_getKnobs+0x8>
 80192c2:	b470      	push	{r4, r5, r6}
 80192c4:	f603 4204 	addw	r2, r3, #3076	; 0xc04
 80192c8:	68d1      	ldr	r1, [r2, #12]
 80192ca:	6854      	ldr	r4, [r2, #4]
 80192cc:	6815      	ldr	r5, [r2, #0]
 80192ce:	6005      	str	r5, [r0, #0]
 80192d0:	6044      	str	r4, [r0, #4]
 80192d2:	6081      	str	r1, [r0, #8]
 80192d4:	f893 1c19 	ldrb.w	r1, [r3, #3097]	; 0xc19
 80192d8:	7301      	strb	r1, [r0, #12]
 80192da:	f603 11c4 	addw	r1, r3, #2500	; 0x9c4
 80192de:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 80192e0:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 80192e2:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 80192e4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80192e6:	6104      	str	r4, [r0, #16]
 80192e8:	6a94      	ldr	r4, [r2, #40]	; 0x28
 80192ea:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80192ec:	6242      	str	r2, [r0, #36]	; 0x24
 80192ee:	6185      	str	r5, [r0, #24]
 80192f0:	61c4      	str	r4, [r0, #28]
 80192f2:	6146      	str	r6, [r0, #20]
 80192f4:	6201      	str	r1, [r0, #32]
 80192f6:	4a19      	ldr	r2, [pc, #100]	; (801935c <MotionFX_getKnobs+0xa8>)
 80192f8:	f893 1c3d 	ldrb.w	r1, [r3, #3133]	; 0xc3d
 80192fc:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
 8019300:	f893 6c3e 	ldrb.w	r6, [r3, #3134]	; 0xc3e
 8019304:	f8d3 5d54 	ldr.w	r5, [r3, #3412]	; 0xd54
 8019308:	7814      	ldrb	r4, [r2, #0]
 801930a:	7911      	ldrb	r1, [r2, #4]
 801930c:	7a13      	ldrb	r3, [r2, #8]
 801930e:	f880 6035 	strb.w	r6, [r0, #53]	; 0x35
 8019312:	6385      	str	r5, [r0, #56]	; 0x38
 8019314:	f880 4029 	strb.w	r4, [r0, #41]	; 0x29
 8019318:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d
 801931c:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
 8019320:	7854      	ldrb	r4, [r2, #1]
 8019322:	7951      	ldrb	r1, [r2, #5]
 8019324:	7a55      	ldrb	r5, [r2, #9]
 8019326:	f880 402a 	strb.w	r4, [r0, #42]	; 0x2a
 801932a:	2300      	movs	r3, #0
 801932c:	7894      	ldrb	r4, [r2, #2]
 801932e:	f880 102e 	strb.w	r1, [r0, #46]	; 0x2e
 8019332:	7991      	ldrb	r1, [r2, #6]
 8019334:	7a92      	ldrb	r2, [r2, #10]
 8019336:	f880 5032 	strb.w	r5, [r0, #50]	; 0x32
 801933a:	f880 402b 	strb.w	r4, [r0, #43]	; 0x2b
 801933e:	f880 102f 	strb.w	r1, [r0, #47]	; 0x2f
 8019342:	f880 2033 	strb.w	r2, [r0, #51]	; 0x33
 8019346:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 801934a:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
 801934e:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
 8019352:	bc70      	pop	{r4, r5, r6}
 8019354:	4770      	bx	lr
 8019356:	bf00      	nop
 8019358:	200013c8 	.word	0x200013c8
 801935c:	20000000 	.word	0x20000000

08019360 <MotionFX_enable_6X>:
 8019360:	4b0c      	ldr	r3, [pc, #48]	; (8019394 <MotionFX_enable_6X+0x34>)
 8019362:	f893 2d49 	ldrb.w	r2, [r3, #3401]	; 0xd49
 8019366:	b112      	cbz	r2, 801936e <MotionFX_enable_6X+0xe>
 8019368:	f8c3 0d4c 	str.w	r0, [r3, #3404]	; 0xd4c
 801936c:	b900      	cbnz	r0, 8019370 <MotionFX_enable_6X+0x10>
 801936e:	4770      	bx	lr
 8019370:	b430      	push	{r4, r5}
 8019372:	4a09      	ldr	r2, [pc, #36]	; (8019398 <MotionFX_enable_6X+0x38>)
 8019374:	4809      	ldr	r0, [pc, #36]	; (801939c <MotionFX_enable_6X+0x3c>)
 8019376:	f503 6482 	add.w	r4, r3, #1040	; 0x410
 801937a:	2100      	movs	r1, #0
 801937c:	f203 4314 	addw	r3, r3, #1044	; 0x414
 8019380:	f04f 45ff 	mov.w	r5, #2139095040	; 0x7f800000
 8019384:	f8a2 18dc 	strh.w	r1, [r2, #2268]	; 0x8dc
 8019388:	f882 18de 	strb.w	r1, [r2, #2270]	; 0x8de
 801938c:	6025      	str	r5, [r4, #0]
 801938e:	6018      	str	r0, [r3, #0]
 8019390:	bc30      	pop	{r4, r5}
 8019392:	4770      	bx	lr
 8019394:	200013c8 	.word	0x200013c8
 8019398:	20000000 	.word	0x20000000
 801939c:	ff800000 	.word	0xff800000

080193a0 <MotionFX_enable_9X>:
 80193a0:	4b0d      	ldr	r3, [pc, #52]	; (80193d8 <MotionFX_enable_9X+0x38>)
 80193a2:	f893 2d49 	ldrb.w	r2, [r3, #3401]	; 0xd49
 80193a6:	b112      	cbz	r2, 80193ae <MotionFX_enable_9X+0xe>
 80193a8:	f8c3 0d50 	str.w	r0, [r3, #3408]	; 0xd50
 80193ac:	b900      	cbnz	r0, 80193b0 <MotionFX_enable_9X+0x10>
 80193ae:	4770      	bx	lr
 80193b0:	b430      	push	{r4, r5}
 80193b2:	4a0a      	ldr	r2, [pc, #40]	; (80193dc <MotionFX_enable_9X+0x3c>)
 80193b4:	480a      	ldr	r0, [pc, #40]	; (80193e0 <MotionFX_enable_9X+0x40>)
 80193b6:	f241 15b4 	movw	r5, #4532	; 0x11b4
 80193ba:	2100      	movs	r1, #0
 80193bc:	5351      	strh	r1, [r2, r5]
 80193be:	f241 15b6 	movw	r5, #4534	; 0x11b6
 80193c2:	f04f 44ff 	mov.w	r4, #2139095040	; 0x7f800000
 80193c6:	5551      	strb	r1, [r2, r5]
 80193c8:	f503 6282 	add.w	r2, r3, #1040	; 0x410
 80193cc:	f203 4314 	addw	r3, r3, #1044	; 0x414
 80193d0:	6014      	str	r4, [r2, #0]
 80193d2:	6018      	str	r0, [r3, #0]
 80193d4:	bc30      	pop	{r4, r5}
 80193d6:	4770      	bx	lr
 80193d8:	200013c8 	.word	0x200013c8
 80193dc:	20000000 	.word	0x20000000
 80193e0:	ff800000 	.word	0xff800000

080193e4 <MotionFX_update>:
 80193e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80193e8:	4ec1      	ldr	r6, [pc, #772]	; (80196f0 <MotionFX_update+0x30c>)
 80193ea:	ed2d 8b02 	vpush	{d8}
 80193ee:	f896 5d49 	ldrb.w	r5, [r6, #3401]	; 0xd49
 80193f2:	b08b      	sub	sp, #44	; 0x2c
 80193f4:	b925      	cbnz	r5, 8019400 <MotionFX_update+0x1c>
 80193f6:	b00b      	add	sp, #44	; 0x2c
 80193f8:	ecbd 8b02 	vpop	{d8}
 80193fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019400:	4604      	mov	r4, r0
 8019402:	ed92 8a00 	vldr	s16, [r2]
 8019406:	2b00      	cmp	r3, #0
 8019408:	f000 80d7 	beq.w	80195ba <MotionFX_update+0x1d6>
 801940c:	4ab9      	ldr	r2, [pc, #740]	; (80196f4 <MotionFX_update+0x310>)
 801940e:	68cf      	ldr	r7, [r1, #12]
 8019410:	f8d1 e000 	ldr.w	lr, [r1]
 8019414:	690d      	ldr	r5, [r1, #16]
 8019416:	f8d1 c018 	ldr.w	ip, [r1, #24]
 801941a:	6197      	str	r7, [r2, #24]
 801941c:	f5a2 7010 	sub.w	r0, r2, #576	; 0x240
 8019420:	f8c2 e00c 	str.w	lr, [r2, #12]
 8019424:	6187      	str	r7, [r0, #24]
 8019426:	684f      	ldr	r7, [r1, #4]
 8019428:	f8c0 e00c 	str.w	lr, [r0, #12]
 801942c:	f8d1 e01c 	ldr.w	lr, [r1, #28]
 8019430:	f8c2 c024 	str.w	ip, [r2, #36]	; 0x24
 8019434:	f8c0 c024 	str.w	ip, [r0, #36]	; 0x24
 8019438:	f8d1 c014 	ldr.w	ip, [r1, #20]
 801943c:	6117      	str	r7, [r2, #16]
 801943e:	6107      	str	r7, [r0, #16]
 8019440:	f8d6 7d54 	ldr.w	r7, [r6, #3412]	; 0xd54
 8019444:	61d5      	str	r5, [r2, #28]
 8019446:	61c5      	str	r5, [r0, #28]
 8019448:	688d      	ldr	r5, [r1, #8]
 801944a:	6a09      	ldr	r1, [r1, #32]
 801944c:	6155      	str	r5, [r2, #20]
 801944e:	f8c2 e028 	str.w	lr, [r2, #40]	; 0x28
 8019452:	f8c2 c020 	str.w	ip, [r2, #32]
 8019456:	62d1      	str	r1, [r2, #44]	; 0x2c
 8019458:	f8c0 e028 	str.w	lr, [r0, #40]	; 0x28
 801945c:	f8c0 c020 	str.w	ip, [r0, #32]
 8019460:	6145      	str	r5, [r0, #20]
 8019462:	62c1      	str	r1, [r0, #44]	; 0x2c
 8019464:	f8d6 2d4c 	ldr.w	r2, [r6, #3404]	; 0xd4c
 8019468:	b187      	cbz	r7, 801948c <MotionFX_update+0xa8>
 801946a:	f896 1c3c 	ldrb.w	r1, [r6, #3132]	; 0xc3c
 801946e:	07cd      	lsls	r5, r1, #31
 8019470:	d403      	bmi.n	801947a <MotionFX_update+0x96>
 8019472:	f896 19fc 	ldrb.w	r1, [r6, #2556]	; 0x9fc
 8019476:	07c8      	lsls	r0, r1, #31
 8019478:	d523      	bpl.n	80194c2 <MotionFX_update+0xde>
 801947a:	489f      	ldr	r0, [pc, #636]	; (80196f8 <MotionFX_update+0x314>)
 801947c:	f8d0 10c0 	ldr.w	r1, [r0, #192]	; 0xc0
 8019480:	2900      	cmp	r1, #0
 8019482:	f340 809c 	ble.w	80195be <MotionFX_update+0x1da>
 8019486:	3901      	subs	r1, #1
 8019488:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
 801948c:	2a00      	cmp	r2, #0
 801948e:	f000 808e 	beq.w	80195ae <MotionFX_update+0x1ca>
 8019492:	f896 29fc 	ldrb.w	r2, [r6, #2556]	; 0x9fc
 8019496:	07d1      	lsls	r1, r2, #31
 8019498:	f140 8089 	bpl.w	80195ae <MotionFX_update+0x1ca>
 801949c:	4618      	mov	r0, r3
 801949e:	eeb0 0a48 	vmov.f32	s0, s16
 80194a2:	9301      	str	r3, [sp, #4]
 80194a4:	f7fe ffb0 	bl	8018408 <iNemo_update_6X.constprop.34>
 80194a8:	f8d6 1d50 	ldr.w	r1, [r6, #3408]	; 0xd50
 80194ac:	9b01      	ldr	r3, [sp, #4]
 80194ae:	b141      	cbz	r1, 80194c2 <MotionFX_update+0xde>
 80194b0:	f896 2c3c 	ldrb.w	r2, [r6, #3132]	; 0xc3c
 80194b4:	07d2      	lsls	r2, r2, #31
 80194b6:	d504      	bpl.n	80194c2 <MotionFX_update+0xde>
 80194b8:	4618      	mov	r0, r3
 80194ba:	eeb0 0a48 	vmov.f32	s0, s16
 80194be:	f7ff f9a1 	bl	8018804 <iNemo_update.constprop.35>
 80194c2:	4d8e      	ldr	r5, [pc, #568]	; (80196fc <MotionFX_update+0x318>)
 80194c4:	69ea      	ldr	r2, [r5, #28]
 80194c6:	69af      	ldr	r7, [r5, #24]
 80194c8:	f8d5 025c 	ldr.w	r0, [r5, #604]	; 0x25c
 80194cc:	f8d5 1258 	ldr.w	r1, [r5, #600]	; 0x258
 80194d0:	60e1      	str	r1, [r4, #12]
 80194d2:	64a7      	str	r7, [r4, #72]	; 0x48
 80194d4:	f8d5 1260 	ldr.w	r1, [r5, #608]	; 0x260
 80194d8:	6a2f      	ldr	r7, [r5, #32]
 80194da:	64e2      	str	r2, [r4, #76]	; 0x4c
 80194dc:	6120      	str	r0, [r4, #16]
 80194de:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80194e0:	f8d5 0264 	ldr.w	r0, [r5, #612]	; 0x264
 80194e4:	6527      	str	r7, [r4, #80]	; 0x50
 80194e6:	6161      	str	r1, [r4, #20]
 80194e8:	68ef      	ldr	r7, [r5, #12]
 80194ea:	f8d5 124c 	ldr.w	r1, [r5, #588]	; 0x24c
 80194ee:	61a0      	str	r0, [r4, #24]
 80194f0:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
 80194f4:	6562      	str	r2, [r4, #84]	; 0x54
 80194f6:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
 80194fa:	63e7      	str	r7, [r4, #60]	; 0x3c
 80194fc:	f8d5 72d4 	ldr.w	r7, [r5, #724]	; 0x2d4
 8019500:	65a0      	str	r0, [r4, #88]	; 0x58
 8019502:	f8d5 02e0 	ldr.w	r0, [r5, #736]	; 0x2e0
 8019506:	6021      	str	r1, [r4, #0]
 8019508:	6662      	str	r2, [r4, #100]	; 0x64
 801950a:	6929      	ldr	r1, [r5, #16]
 801950c:	f8d5 2098 	ldr.w	r2, [r5, #152]	; 0x98
 8019510:	65e2      	str	r2, [r4, #92]	; 0x5c
 8019512:	61e7      	str	r7, [r4, #28]
 8019514:	6421      	str	r1, [r4, #64]	; 0x40
 8019516:	62a0      	str	r0, [r4, #40]	; 0x28
 8019518:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
 801951c:	f8d5 2250 	ldr.w	r2, [r5, #592]	; 0x250
 8019520:	f8d5 72d8 	ldr.w	r7, [r5, #728]	; 0x2d8
 8019524:	f8d5 12e4 	ldr.w	r1, [r5, #740]	; 0x2e4
 8019528:	66a0      	str	r0, [r4, #104]	; 0x68
 801952a:	f8d5 0254 	ldr.w	r0, [r5, #596]	; 0x254
 801952e:	6062      	str	r2, [r4, #4]
 8019530:	696a      	ldr	r2, [r5, #20]
 8019532:	f8d5 32e8 	ldr.w	r3, [r5, #744]	; 0x2e8
 8019536:	6227      	str	r7, [r4, #32]
 8019538:	f8d5 709c 	ldr.w	r7, [r5, #156]	; 0x9c
 801953c:	62e1      	str	r1, [r4, #44]	; 0x2c
 801953e:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
 8019542:	6462      	str	r2, [r4, #68]	; 0x44
 8019544:	f8d5 22dc 	ldr.w	r2, [r5, #732]	; 0x2dc
 8019548:	6262      	str	r2, [r4, #36]	; 0x24
 801954a:	60a0      	str	r0, [r4, #8]
 801954c:	66e1      	str	r1, [r4, #108]	; 0x6c
 801954e:	6323      	str	r3, [r4, #48]	; 0x30
 8019550:	f505 714f 	add.w	r1, r5, #828	; 0x33c
 8019554:	f505 7013 	add.w	r0, r5, #588	; 0x24c
 8019558:	aa03      	add	r2, sp, #12
 801955a:	6627      	str	r7, [r4, #96]	; 0x60
 801955c:	f7f6 fda4 	bl	80100a8 <quatErr2EulerErr>
 8019560:	9b03      	ldr	r3, [sp, #12]
 8019562:	63a3      	str	r3, [r4, #56]	; 0x38
 8019564:	aa03      	add	r2, sp, #12
 8019566:	f105 01fc 	add.w	r1, r5, #252	; 0xfc
 801956a:	f105 000c 	add.w	r0, r5, #12
 801956e:	f7f6 fd9b 	bl	80100a8 <quatErr2EulerErr>
 8019572:	9a03      	ldr	r2, [sp, #12]
 8019574:	f896 39fe 	ldrb.w	r3, [r6, #2558]	; 0x9fe
 8019578:	6762      	str	r2, [r4, #116]	; 0x74
 801957a:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 801957e:	f104 0258 	add.w	r2, r4, #88	; 0x58
 8019582:	f104 0048 	add.w	r0, r4, #72	; 0x48
 8019586:	f7f7 fd37 	bl	8010ff8 <iNemo_quat2heading>
 801958a:	f896 3c3e 	ldrb.w	r3, [r6, #3134]	; 0xc3e
 801958e:	ed84 0a1c 	vstr	s0, [r4, #112]	; 0x70
 8019592:	f104 021c 	add.w	r2, r4, #28
 8019596:	4621      	mov	r1, r4
 8019598:	f104 000c 	add.w	r0, r4, #12
 801959c:	f7f7 fd2c 	bl	8010ff8 <iNemo_quat2heading>
 80195a0:	ed84 0a0d 	vstr	s0, [r4, #52]	; 0x34
 80195a4:	b00b      	add	sp, #44	; 0x2c
 80195a6:	ecbd 8b02 	vpop	{d8}
 80195aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80195ae:	f8d6 1d50 	ldr.w	r1, [r6, #3408]	; 0xd50
 80195b2:	2900      	cmp	r1, #0
 80195b4:	f47f af7c 	bne.w	80194b0 <MotionFX_update+0xcc>
 80195b8:	e783      	b.n	80194c2 <MotionFX_update+0xde>
 80195ba:	ab06      	add	r3, sp, #24
 80195bc:	e726      	b.n	801940c <MotionFX_update+0x28>
 80195be:	f8d6 cd58 	ldr.w	ip, [r6, #3416]	; 0xd58
 80195c2:	f8d6 1d50 	ldr.w	r1, [r6, #3408]	; 0xd50
 80195c6:	f10c 0e01 	add.w	lr, ip, #1
 80195ca:	b369      	cbz	r1, 8019628 <MotionFX_update+0x244>
 80195cc:	ee07 ea90 	vmov	s15, lr
 80195d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80195d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80195d8:	ee87 6a27 	vdiv.f32	s12, s14, s15
 80195dc:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8019708 <MotionFX_update+0x324>
 80195e0:	4847      	ldr	r0, [pc, #284]	; (8019700 <MotionFX_update+0x31c>)
 80195e2:	46c8      	mov	r8, r9
 80195e4:	ecb8 7a01 	vldmia	r8!, {s14}
 80195e8:	edd0 4a01 	vldr	s9, [r0, #4]
 80195ec:	ed90 5a02 	vldr	s10, [r0, #8]
 80195f0:	ed90 4a00 	vldr	s8, [r0]
 80195f4:	edd8 6a00 	vldr	s13, [r8]
 80195f8:	edd9 7a02 	vldr	s15, [r9, #8]
 80195fc:	ee05 ca90 	vmov	s11, ip
 8019600:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8019604:	eea5 7a84 	vfma.f32	s14, s11, s8
 8019608:	eee5 6aa4 	vfma.f32	s13, s11, s9
 801960c:	eee5 7a85 	vfma.f32	s15, s11, s10
 8019610:	ee66 6a86 	vmul.f32	s13, s13, s12
 8019614:	ee27 7a06 	vmul.f32	s14, s14, s12
 8019618:	ee67 7a86 	vmul.f32	s15, s15, s12
 801961c:	edc0 6a01 	vstr	s13, [r0, #4]
 8019620:	ed80 7a00 	vstr	s14, [r0]
 8019624:	edc0 7a02 	vstr	s15, [r0, #8]
 8019628:	2a00      	cmp	r2, #0
 801962a:	d071      	beq.n	8019710 <MotionFX_update+0x32c>
 801962c:	ee07 ea90 	vmov	s15, lr
 8019630:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019634:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019638:	eec7 5a27 	vdiv.f32	s11, s14, s15
 801963c:	4830      	ldr	r0, [pc, #192]	; (8019700 <MotionFX_update+0x31c>)
 801963e:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 801970c <MotionFX_update+0x328>
 8019642:	f8c6 ed58 	str.w	lr, [r6, #3416]	; 0xd58
 8019646:	4607      	mov	r7, r0
 8019648:	46c8      	mov	r8, r9
 801964a:	4605      	mov	r5, r0
 801964c:	3708      	adds	r7, #8
 801964e:	3504      	adds	r5, #4
 8019650:	f5be 7ffa 	cmp.w	lr, #500	; 0x1f4
 8019654:	ee07 ca90 	vmov	s15, ip
 8019658:	ecf8 6a01 	vldmia	r8!, {s13}
 801965c:	ed97 5a00 	vldr	s10, [r7]
 8019660:	ed99 7a02 	vldr	s14, [r9, #8]
 8019664:	edd5 4a00 	vldr	s9, [r5]
 8019668:	ed90 4a00 	vldr	s8, [r0]
 801966c:	ed98 6a00 	vldr	s12, [r8]
 8019670:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019674:	eea7 7a85 	vfma.f32	s14, s15, s10
 8019678:	eee7 6a84 	vfma.f32	s13, s15, s8
 801967c:	eea7 6aa4 	vfma.f32	s12, s15, s9
 8019680:	eef0 7a47 	vmov.f32	s15, s14
 8019684:	ee26 6a25 	vmul.f32	s12, s12, s11
 8019688:	ee26 7aa5 	vmul.f32	s14, s13, s11
 801968c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8019690:	ed85 6a00 	vstr	s12, [r5]
 8019694:	ed80 7a00 	vstr	s14, [r0]
 8019698:	edc7 7a00 	vstr	s15, [r7]
 801969c:	f47f aef9 	bne.w	8019492 <MotionFX_update+0xae>
 80196a0:	2900      	cmp	r1, #0
 80196a2:	d046      	beq.n	8019732 <MotionFX_update+0x34e>
 80196a4:	eef0 6a46 	vmov.f32	s13, s12
 80196a8:	eeb0 7a67 	vmov.f32	s14, s15
 80196ac:	edd0 7a00 	vldr	s15, [r0]
 80196b0:	4914      	ldr	r1, [pc, #80]	; (8019704 <MotionFX_update+0x320>)
 80196b2:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80196b6:	ee66 6a86 	vmul.f32	s13, s13, s12
 80196ba:	ee27 7a06 	vmul.f32	s14, s14, s12
 80196be:	ee67 7a86 	vmul.f32	s15, s15, s12
 80196c2:	edc1 6a0b 	vstr	s13, [r1, #44]	; 0x2c
 80196c6:	ed81 7a0c 	vstr	s14, [r1, #48]	; 0x30
 80196ca:	edc1 7a0a 	vstr	s15, [r1, #40]	; 0x28
 80196ce:	bb82      	cbnz	r2, 8019732 <MotionFX_update+0x34e>
 80196d0:	2100      	movs	r1, #0
 80196d2:	f8d6 2d4c 	ldr.w	r2, [r6, #3404]	; 0xd4c
 80196d6:	6001      	str	r1, [r0, #0]
 80196d8:	2000      	movs	r0, #0
 80196da:	6029      	str	r1, [r5, #0]
 80196dc:	6039      	str	r1, [r7, #0]
 80196de:	f8c6 0d58 	str.w	r0, [r6, #3416]	; 0xd58
 80196e2:	f8c6 0d54 	str.w	r0, [r6, #3412]	; 0xd54
 80196e6:	2a00      	cmp	r2, #0
 80196e8:	f47f aed3 	bne.w	8019492 <MotionFX_update+0xae>
 80196ec:	e75f      	b.n	80195ae <MotionFX_update+0x1ca>
 80196ee:	bf00      	nop
 80196f0:	200013c8 	.word	0x200013c8
 80196f4:	20001ed4 	.word	0x20001ed4
 80196f8:	200010f8 	.word	0x200010f8
 80196fc:	20001dc8 	.word	0x20001dc8
 8019700:	20002124 	.word	0x20002124
 8019704:	20001fcc 	.word	0x20001fcc
 8019708:	20000cec 	.word	0x20000cec
 801970c:	20000414 	.word	0x20000414
 8019710:	f5be 7ffa 	cmp.w	lr, #500	; 0x1f4
 8019714:	f8c6 ed58 	str.w	lr, [r6, #3416]	; 0xd58
 8019718:	f47f aec9 	bne.w	80194ae <MotionFX_update+0xca>
 801971c:	4810      	ldr	r0, [pc, #64]	; (8019760 <MotionFX_update+0x37c>)
 801971e:	1d05      	adds	r5, r0, #4
 8019720:	f100 0708 	add.w	r7, r0, #8
 8019724:	2900      	cmp	r1, #0
 8019726:	d0d3      	beq.n	80196d0 <MotionFX_update+0x2ec>
 8019728:	edd5 6a00 	vldr	s13, [r5]
 801972c:	ed97 7a00 	vldr	s14, [r7]
 8019730:	e7bc      	b.n	80196ac <MotionFX_update+0x2c8>
 8019732:	edd5 6a00 	vldr	s13, [r5]
 8019736:	ed97 7a00 	vldr	s14, [r7]
 801973a:	edd0 7a00 	vldr	s15, [r0]
 801973e:	4a09      	ldr	r2, [pc, #36]	; (8019764 <MotionFX_update+0x380>)
 8019740:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8019744:	ee66 6a86 	vmul.f32	s13, s13, s12
 8019748:	ee27 7a06 	vmul.f32	s14, s14, s12
 801974c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8019750:	edc2 6a0b 	vstr	s13, [r2, #44]	; 0x2c
 8019754:	ed82 7a0c 	vstr	s14, [r2, #48]	; 0x30
 8019758:	edc2 7a0a 	vstr	s15, [r2, #40]	; 0x28
 801975c:	e7b8      	b.n	80196d0 <MotionFX_update+0x2ec>
 801975e:	bf00      	nop
 8019760:	20002124 	.word	0x20002124
 8019764:	20001d8c 	.word	0x20001d8c

08019768 <MotionFX_propagate>:
 8019768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801976c:	ed2d 8b0a 	vpush	{d8-d12}
 8019770:	4d48      	ldr	r5, [pc, #288]	; (8019894 <MotionFX_propagate+0x12c>)
 8019772:	f895 3d49 	ldrb.w	r3, [r5, #3401]	; 0xd49
 8019776:	b095      	sub	sp, #84	; 0x54
 8019778:	b923      	cbnz	r3, 8019784 <MotionFX_propagate+0x1c>
 801977a:	b015      	add	sp, #84	; 0x54
 801977c:	ecbd 8b0a 	vpop	{d8-d12}
 8019780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019784:	edd1 4a03 	vldr	s9, [r1, #12]
 8019788:	680f      	ldr	r7, [r1, #0]
 801978a:	edd1 7a04 	vldr	s15, [r1, #16]
 801978e:	edd1 5a05 	vldr	s11, [r1, #20]
 8019792:	688b      	ldr	r3, [r1, #8]
 8019794:	ed91 5a06 	vldr	s10, [r1, #24]
 8019798:	ed91 4a07 	vldr	s8, [r1, #28]
 801979c:	ed91 6a08 	vldr	s12, [r1, #32]
 80197a0:	ed92 9a00 	vldr	s18, [r2]
 80197a4:	f605 360c 	addw	r6, r5, #2828	; 0xb0c
 80197a8:	f605 08cc 	addw	r8, r5, #2252	; 0x8cc
 80197ac:	4604      	mov	r4, r0
 80197ae:	6848      	ldr	r0, [r1, #4]
 80197b0:	f8d5 1d50 	ldr.w	r1, [r5, #3408]	; 0xd50
 80197b4:	edc6 4a06 	vstr	s9, [r6, #24]
 80197b8:	60f7      	str	r7, [r6, #12]
 80197ba:	f8c8 700c 	str.w	r7, [r8, #12]
 80197be:	ed86 5a09 	vstr	s10, [r6, #36]	; 0x24
 80197c2:	edc8 4a06 	vstr	s9, [r8, #24]
 80197c6:	ed88 5a09 	vstr	s10, [r8, #36]	; 0x24
 80197ca:	edc6 7a07 	vstr	s15, [r6, #28]
 80197ce:	6130      	str	r0, [r6, #16]
 80197d0:	f8c8 0010 	str.w	r0, [r8, #16]
 80197d4:	ed86 4a0a 	vstr	s8, [r6, #40]	; 0x28
 80197d8:	edc8 7a07 	vstr	s15, [r8, #28]
 80197dc:	ed88 4a0a 	vstr	s8, [r8, #40]	; 0x28
 80197e0:	edc6 5a08 	vstr	s11, [r6, #32]
 80197e4:	6173      	str	r3, [r6, #20]
 80197e6:	f8c8 3014 	str.w	r3, [r8, #20]
 80197ea:	ed86 6a0b 	vstr	s12, [r6, #44]	; 0x2c
 80197ee:	edc8 5a08 	vstr	s11, [r8, #32]
 80197f2:	ed88 6a0b 	vstr	s12, [r8, #44]	; 0x2c
 80197f6:	2900      	cmp	r1, #0
 80197f8:	f040 81fa 	bne.w	8019bf0 <MotionFX_propagate+0x488>
 80197fc:	f505 6744 	add.w	r7, r5, #3136	; 0xc40
 8019800:	f8d5 3d4c 	ldr.w	r3, [r5, #3404]	; 0xd4c
 8019804:	2b00      	cmp	r3, #0
 8019806:	d149      	bne.n	801989c <MotionFX_propagate+0x134>
 8019808:	4e23      	ldr	r6, [pc, #140]	; (8019898 <MotionFX_propagate+0x130>)
 801980a:	69b3      	ldr	r3, [r6, #24]
 801980c:	69f2      	ldr	r2, [r6, #28]
 801980e:	69b9      	ldr	r1, [r7, #24]
 8019810:	64a3      	str	r3, [r4, #72]	; 0x48
 8019812:	69fb      	ldr	r3, [r7, #28]
 8019814:	64e2      	str	r2, [r4, #76]	; 0x4c
 8019816:	60e1      	str	r1, [r4, #12]
 8019818:	6a3a      	ldr	r2, [r7, #32]
 801981a:	6a31      	ldr	r1, [r6, #32]
 801981c:	6123      	str	r3, [r4, #16]
 801981e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8019820:	6521      	str	r1, [r4, #80]	; 0x50
 8019822:	6563      	str	r3, [r4, #84]	; 0x54
 8019824:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019826:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 801982a:	6162      	str	r2, [r4, #20]
 801982c:	68f2      	ldr	r2, [r6, #12]
 801982e:	61a1      	str	r1, [r4, #24]
 8019830:	f8d6 10a0 	ldr.w	r1, [r6, #160]	; 0xa0
 8019834:	63e2      	str	r2, [r4, #60]	; 0x3c
 8019836:	65a3      	str	r3, [r4, #88]	; 0x58
 8019838:	68fa      	ldr	r2, [r7, #12]
 801983a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801983e:	6661      	str	r1, [r4, #100]	; 0x64
 8019840:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8019844:	6022      	str	r2, [r4, #0]
 8019846:	61e3      	str	r3, [r4, #28]
 8019848:	6932      	ldr	r2, [r6, #16]
 801984a:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 801984e:	65e3      	str	r3, [r4, #92]	; 0x5c
 8019850:	62a1      	str	r1, [r4, #40]	; 0x28
 8019852:	6422      	str	r2, [r4, #64]	; 0x40
 8019854:	f8d6 20a4 	ldr.w	r2, [r6, #164]	; 0xa4
 8019858:	693b      	ldr	r3, [r7, #16]
 801985a:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 801985e:	66a2      	str	r2, [r4, #104]	; 0x68
 8019860:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8019864:	6063      	str	r3, [r4, #4]
 8019866:	6973      	ldr	r3, [r6, #20]
 8019868:	f8d6 509c 	ldr.w	r5, [r6, #156]	; 0x9c
 801986c:	f8d6 00a8 	ldr.w	r0, [r6, #168]	; 0xa8
 8019870:	6221      	str	r1, [r4, #32]
 8019872:	62e2      	str	r2, [r4, #44]	; 0x2c
 8019874:	6979      	ldr	r1, [r7, #20]
 8019876:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801987a:	6463      	str	r3, [r4, #68]	; 0x44
 801987c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8019880:	6323      	str	r3, [r4, #48]	; 0x30
 8019882:	6625      	str	r5, [r4, #96]	; 0x60
 8019884:	66e0      	str	r0, [r4, #108]	; 0x6c
 8019886:	60a1      	str	r1, [r4, #8]
 8019888:	6262      	str	r2, [r4, #36]	; 0x24
 801988a:	b015      	add	sp, #84	; 0x54
 801988c:	ecbd 8b0a 	vpop	{d8-d12}
 8019890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019894:	200013c8 	.word	0x200013c8
 8019898:	20001dc8 	.word	0x20001dc8
 801989c:	f995 3443 	ldrsb.w	r3, [r5, #1091]	; 0x443
 80198a0:	ed98 0a07 	vldr	s0, [r8, #28]
 80198a4:	f995 245b 	ldrsb.w	r2, [r5, #1115]	; 0x45b
 80198a8:	ed98 3a06 	vldr	s6, [r8, #24]
 80198ac:	ed98 6a08 	vldr	s12, [r8, #32]
 80198b0:	edd8 6a0a 	vldr	s13, [r8, #40]	; 0x28
 80198b4:	ed98 2a09 	vldr	s4, [r8, #36]	; 0x24
 80198b8:	f895 99fd 	ldrb.w	r9, [r5, #2557]	; 0x9fd
 80198bc:	ee0a 3a10 	vmov	s20, r3
 80198c0:	f995 3442 	ldrsb.w	r3, [r5, #1090]	; 0x442
 80198c4:	ee05 3a10 	vmov	s10, r3
 80198c8:	f995 3444 	ldrsb.w	r3, [r5, #1092]	; 0x444
 80198cc:	ee05 3a90 	vmov	s11, r3
 80198d0:	f995 343d 	ldrsb.w	r3, [r5, #1085]	; 0x43d
 80198d4:	eeb8 aaca 	vcvt.f32.s32	s20, s20
 80198d8:	ee07 3a90 	vmov	s15, r3
 80198dc:	f995 3440 	ldrsb.w	r3, [r5, #1088]	; 0x440
 80198e0:	ee09 2a90 	vmov	s19, r2
 80198e4:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 80198e8:	f995 243c 	ldrsb.w	r2, [r5, #1084]	; 0x43c
 80198ec:	ee2a aa00 	vmul.f32	s20, s20, s0
 80198f0:	ee07 3a10 	vmov	s14, r3
 80198f4:	f995 3455 	ldrsb.w	r3, [r5, #1109]	; 0x455
 80198f8:	eea3 aa05 	vfma.f32	s20, s6, s10
 80198fc:	ee0b 2a10 	vmov	s22, r2
 8019900:	f995 243f 	ldrsb.w	r2, [r5, #1087]	; 0x43f
 8019904:	ee08 3a10 	vmov	s16, r3
 8019908:	f995 3458 	ldrsb.w	r3, [r5, #1112]	; 0x458
 801990c:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8019910:	ee00 2a90 	vmov	s1, r2
 8019914:	f995 2454 	ldrsb.w	r2, [r5, #1108]	; 0x454
 8019918:	ee08 3a90 	vmov	s17, r3
 801991c:	2300      	movs	r3, #0
 801991e:	9308      	str	r3, [sp, #32]
 8019920:	ee01 2a10 	vmov	s2, r2
 8019924:	9309      	str	r3, [sp, #36]	; 0x24
 8019926:	f995 2457 	ldrsb.w	r2, [r5, #1111]	; 0x457
 801992a:	930a      	str	r3, [sp, #40]	; 0x28
 801992c:	eea6 aa25 	vfma.f32	s20, s12, s11
 8019930:	930c      	str	r3, [sp, #48]	; 0x30
 8019932:	930d      	str	r3, [sp, #52]	; 0x34
 8019934:	930e      	str	r3, [sp, #56]	; 0x38
 8019936:	f995 3456 	ldrsb.w	r3, [r5, #1110]	; 0x456
 801993a:	edd8 5a0b 	vldr	s11, [r8, #44]	; 0x2c
 801993e:	ed8d aa04 	vstr	s20, [sp, #16]
 8019942:	ee01 2a90 	vmov	s3, r2
 8019946:	ee04 3a90 	vmov	s9, r3
 801994a:	f995 243e 	ldrsb.w	r2, [r5, #1086]	; 0x43e
 801994e:	f995 3459 	ldrsb.w	r3, [r5, #1113]	; 0x459
 8019952:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8019956:	ee03 2a90 	vmov	s7, r2
 801995a:	ee05 3a10 	vmov	s10, r3
 801995e:	f995 2441 	ldrsb.w	r2, [r5, #1089]	; 0x441
 8019962:	edcd aa0b 	vstr	s21, [sp, #44]	; 0x2c
 8019966:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 801996a:	f995 345a 	ldrsb.w	r3, [r5, #1114]	; 0x45a
 801996e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019972:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019976:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 801997a:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 801997e:	ee02 3a90 	vmov	s5, r3
 8019982:	eef8 9ae9 	vcvt.f32.s32	s19, s19
 8019986:	eeb8 bacb 	vcvt.f32.s32	s22, s22
 801998a:	ee28 8a26 	vmul.f32	s16, s16, s13
 801998e:	ee68 8aa6 	vmul.f32	s17, s17, s13
 8019992:	ee67 7a80 	vmul.f32	s15, s15, s0
 8019996:	ee27 7a00 	vmul.f32	s14, s14, s0
 801999a:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801999e:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 80199a2:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 80199a6:	ee69 9aa6 	vmul.f32	s19, s19, s13
 80199aa:	f995 345c 	ldrsb.w	r3, [r5, #1116]	; 0x45c
 80199ae:	eef8 2ae2 	vcvt.f32.s32	s5, s5
 80199b2:	eeeb 7a03 	vfma.f32	s15, s22, s6
 80199b6:	ee04 2a10 	vmov	s8, r2
 80199ba:	eea3 7a20 	vfma.f32	s14, s6, s1
 80199be:	eea1 8a02 	vfma.f32	s16, s2, s4
 80199c2:	eee2 8a21 	vfma.f32	s17, s4, s3
 80199c6:	ee06 3a90 	vmov	s13, r3
 80199ca:	eee2 9a22 	vfma.f32	s19, s4, s5
 80199ce:	4b84      	ldr	r3, [pc, #528]	; (8019be0 <MotionFX_propagate+0x478>)
 80199d0:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 80199d4:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 80199d8:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 80199dc:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 80199e0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80199e4:	eee3 7a86 	vfma.f32	s15, s7, s12
 80199e8:	7b1b      	ldrb	r3, [r3, #12]
 80199ea:	eea6 7a04 	vfma.f32	s14, s12, s8
 80199ee:	eea4 8aa5 	vfma.f32	s16, s9, s11
 80199f2:	eee5 8a85 	vfma.f32	s17, s11, s10
 80199f6:	eee5 9aa6 	vfma.f32	s19, s11, s13
 80199fa:	eef1 ba47 	vneg.f32	s23, s14
 80199fe:	eeb1 8a48 	vneg.f32	s16, s16
 8019a02:	eef1 8a68 	vneg.f32	s17, s17
 8019a06:	eeb1 ba67 	vneg.f32	s22, s15
 8019a0a:	edcd ba02 	vstr	s23, [sp, #8]
 8019a0e:	ed8d 8a06 	vstr	s16, [sp, #24]
 8019a12:	edcd 8a05 	vstr	s17, [sp, #20]
 8019a16:	edcd 9a07 	vstr	s19, [sp, #28]
 8019a1a:	ed8d ba03 	vstr	s22, [sp, #12]
 8019a1e:	b1fb      	cbz	r3, 8019a60 <MotionFX_propagate+0x2f8>
 8019a20:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8019a24:	eee7 7a07 	vfma.f32	s15, s14, s14
 8019a28:	eeea 7a0a 	vfma.f32	s15, s20, s20
 8019a2c:	ee17 0a90 	vmov	r0, s15
 8019a30:	f7e6 fd92 	bl	8000558 <__aeabi_f2d>
 8019a34:	f001 ff36 	bl	801b8a4 <sqrt>
 8019a38:	f7e7 f8be 	bl	8000bb8 <__aeabi_d2f>
 8019a3c:	ee0c 0a10 	vmov	s24, r0
 8019a40:	f7e6 fd8a 	bl	8000558 <__aeabi_f2d>
 8019a44:	a364      	add	r3, pc, #400	; (adr r3, 8019bd8 <MotionFX_propagate+0x470>)
 8019a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a4a:	f7e7 f84f 	bl	8000aec <__aeabi_dcmplt>
 8019a4e:	2800      	cmp	r0, #0
 8019a50:	f000 8269 	beq.w	8019f26 <MotionFX_propagate+0x7be>
 8019a54:	edcd ba02 	vstr	s23, [sp, #8]
 8019a58:	ed8d ba03 	vstr	s22, [sp, #12]
 8019a5c:	ed8d aa04 	vstr	s20, [sp, #16]
 8019a60:	f1b9 0f00 	cmp.w	r9, #0
 8019a64:	f000 8257 	beq.w	8019f16 <MotionFX_propagate+0x7ae>
 8019a68:	ee07 9a90 	vmov	s15, r9
 8019a6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8019a70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019a74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8019a78:	464a      	mov	r2, r9
 8019a7a:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8019a7e:	ee28 8a27 	vmul.f32	s16, s16, s15
 8019a82:	ee69 9aa7 	vmul.f32	s19, s19, s15
 8019a86:	f895 39e0 	ldrb.w	r3, [r5, #2528]	; 0x9e0
 8019a8a:	edd8 6a0c 	vldr	s13, [r8, #48]	; 0x30
 8019a8e:	ed98 7a0d 	vldr	s14, [r8, #52]	; 0x34
 8019a92:	edd8 7a0e 	vldr	s15, [r8, #56]	; 0x38
 8019a96:	f895 09dc 	ldrb.w	r0, [r5, #2524]	; 0x9dc
 8019a9a:	3301      	adds	r3, #1
 8019a9c:	b2db      	uxtb	r3, r3
 8019a9e:	ee76 8aa8 	vadd.f32	s17, s13, s17
 8019aa2:	ee37 8a08 	vadd.f32	s16, s14, s16
 8019aa6:	ee77 9aa9 	vadd.f32	s19, s15, s19
 8019aaa:	fbb3 f1f2 	udiv	r1, r3, r2
 8019aae:	fb02 3311 	mls	r3, r2, r1, r3
 8019ab2:	f885 39e0 	strb.w	r3, [r5, #2528]	; 0x9e0
 8019ab6:	edc8 8a0c 	vstr	s17, [r8, #48]	; 0x30
 8019aba:	ed88 8a0d 	vstr	s16, [r8, #52]	; 0x34
 8019abe:	edc8 9a0e 	vstr	s19, [r8, #56]	; 0x38
 8019ac2:	2800      	cmp	r0, #0
 8019ac4:	f040 8238 	bne.w	8019f38 <MotionFX_propagate+0x7d0>
 8019ac8:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
 8019acc:	4a45      	ldr	r2, [pc, #276]	; (8019be4 <MotionFX_propagate+0x47c>)
 8019ace:	f102 064c 	add.w	r6, r2, #76	; 0x4c
 8019ad2:	4611      	mov	r1, r2
 8019ad4:	f1a2 0010 	sub.w	r0, r2, #16
 8019ad8:	f7f5 ffc6 	bl	800fa68 <m_qmult_eml>
 8019adc:	f1a6 027c 	sub.w	r2, r6, #124	; 0x7c
 8019ae0:	4611      	mov	r1, r2
 8019ae2:	4650      	mov	r0, sl
 8019ae4:	f7f5 ffc0 	bl	800fa68 <m_qmult_eml>
 8019ae8:	f106 0218 	add.w	r2, r6, #24
 8019aec:	f1a6 019c 	sub.w	r1, r6, #156	; 0x9c
 8019af0:	f1a6 004c 	sub.w	r0, r6, #76	; 0x4c
 8019af4:	f7f5 ffb8 	bl	800fa68 <m_qmult_eml>
 8019af8:	f106 0218 	add.w	r2, r6, #24
 8019afc:	4611      	mov	r1, r2
 8019afe:	f1a6 007c 	sub.w	r0, r6, #124	; 0x7c
 8019b02:	f7f5 ffb1 	bl	800fa68 <m_qmult_eml>
 8019b06:	edd6 8a07 	vldr	s17, [r6, #28]
 8019b0a:	ed96 9a06 	vldr	s18, [r6, #24]
 8019b0e:	ed96 8a08 	vldr	s16, [r6, #32]
 8019b12:	edd6 9a09 	vldr	s19, [r6, #36]	; 0x24
 8019b16:	ee28 7aa8 	vmul.f32	s14, s17, s17
 8019b1a:	eea9 7a09 	vfma.f32	s14, s18, s18
 8019b1e:	eea8 7a08 	vfma.f32	s14, s16, s16
 8019b22:	eea9 7aa9 	vfma.f32	s14, s19, s19
 8019b26:	ee17 0a10 	vmov	r0, s14
 8019b2a:	f7e6 fd15 	bl	8000558 <__aeabi_f2d>
 8019b2e:	f001 feb9 	bl	801b8a4 <sqrt>
 8019b32:	f7e7 f841 	bl	8000bb8 <__aeabi_d2f>
 8019b36:	ee07 0a90 	vmov	s15, r0
 8019b3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019b3e:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8019b42:	f895 39e8 	ldrb.w	r3, [r5, #2536]	; 0x9e8
 8019b46:	2b01      	cmp	r3, #1
 8019b48:	ee27 9a89 	vmul.f32	s18, s15, s18
 8019b4c:	ee67 8aa8 	vmul.f32	s17, s15, s17
 8019b50:	ee27 8a88 	vmul.f32	s16, s15, s16
 8019b54:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8019b58:	ed86 9a06 	vstr	s18, [r6, #24]
 8019b5c:	edc6 8a07 	vstr	s17, [r6, #28]
 8019b60:	ed86 8a08 	vstr	s16, [r6, #32]
 8019b64:	edc6 7a09 	vstr	s15, [r6, #36]	; 0x24
 8019b68:	f000 82af 	beq.w	801a0ca <MotionFX_propagate+0x962>
 8019b6c:	f8df b07c 	ldr.w	fp, [pc, #124]	; 8019bec <MotionFX_propagate+0x484>
 8019b70:	f895 19fe 	ldrb.w	r1, [r5, #2558]	; 0x9fe
 8019b74:	9101      	str	r1, [sp, #4]
 8019b76:	f1ab 030c 	sub.w	r3, fp, #12
 8019b7a:	f1ab 0294 	sub.w	r2, fp, #148	; 0x94
 8019b7e:	f8cd b000 	str.w	fp, [sp]
 8019b82:	f1ab 0088 	sub.w	r0, fp, #136	; 0x88
 8019b86:	a902      	add	r1, sp, #8
 8019b88:	f7f7 fcc6 	bl	8011518 <output_update>
 8019b8c:	f895 29fc 	ldrb.w	r2, [r5, #2556]	; 0x9fc
 8019b90:	2300      	movs	r3, #0
 8019b92:	f885 39de 	strb.w	r3, [r5, #2526]	; 0x9de
 8019b96:	0793      	lsls	r3, r2, #30
 8019b98:	d409      	bmi.n	8019bae <MotionFX_propagate+0x446>
 8019b9a:	f895 19e0 	ldrb.w	r1, [r5, #2528]	; 0x9e0
 8019b9e:	fbb1 f3f9 	udiv	r3, r1, r9
 8019ba2:	fb09 1913 	mls	r9, r9, r3, r1
 8019ba6:	f019 0fff 	tst.w	r9, #255	; 0xff
 8019baa:	f000 81ed 	beq.w	8019f88 <MotionFX_propagate+0x820>
 8019bae:	4a0e      	ldr	r2, [pc, #56]	; (8019be8 <MotionFX_propagate+0x480>)
 8019bb0:	4650      	mov	r0, sl
 8019bb2:	4611      	mov	r1, r2
 8019bb4:	f7f5 ff58 	bl	800fa68 <m_qmult_eml>
 8019bb8:	f895 39fe 	ldrb.w	r3, [r5, #2558]	; 0x9fe
 8019bbc:	69b2      	ldr	r2, [r6, #24]
 8019bbe:	2b01      	cmp	r3, #1
 8019bc0:	f47f ae23 	bne.w	801980a <MotionFX_propagate+0xa2>
 8019bc4:	edd6 7a08 	vldr	s15, [r6, #32]
 8019bc8:	69f3      	ldr	r3, [r6, #28]
 8019bca:	61b3      	str	r3, [r6, #24]
 8019bcc:	eef1 7a67 	vneg.f32	s15, s15
 8019bd0:	61f2      	str	r2, [r6, #28]
 8019bd2:	edc6 7a08 	vstr	s15, [r6, #32]
 8019bd6:	e618      	b.n	801980a <MotionFX_propagate+0xa2>
 8019bd8:	a0b5ed8d 	.word	0xa0b5ed8d
 8019bdc:	3eb0c6f7 	.word	0x3eb0c6f7
 8019be0:	20000000 	.word	0x20000000
 8019be4:	20001d7c 	.word	0x20001d7c
 8019be8:	20001d3c 	.word	0x20001d3c
 8019bec:	20001e68 	.word	0x20001e68
 8019bf0:	f995 3419 	ldrsb.w	r3, [r5, #1049]	; 0x419
 8019bf4:	f995 2420 	ldrsb.w	r2, [r5, #1056]	; 0x420
 8019bf8:	f895 9c3d 	ldrb.w	r9, [r5, #3133]	; 0xc3d
 8019bfc:	ee06 3a90 	vmov	s13, r3
 8019c00:	f995 341c 	ldrsb.w	r3, [r5, #1052]	; 0x41c
 8019c04:	ee07 3a10 	vmov	s14, r3
 8019c08:	f995 3434 	ldrsb.w	r3, [r5, #1076]	; 0x434
 8019c0c:	ee08 3a90 	vmov	s17, r3
 8019c10:	f995 3431 	ldrsb.w	r3, [r5, #1073]	; 0x431
 8019c14:	ee08 3a10 	vmov	s16, r3
 8019c18:	f995 3418 	ldrsb.w	r3, [r5, #1048]	; 0x418
 8019c1c:	ee03 3a90 	vmov	s7, r3
 8019c20:	f995 341f 	ldrsb.w	r3, [r5, #1055]	; 0x41f
 8019c24:	ee09 3a90 	vmov	s19, r3
 8019c28:	f995 3437 	ldrsb.w	r3, [r5, #1079]	; 0x437
 8019c2c:	ee0a 3a10 	vmov	s20, r3
 8019c30:	f995 341b 	ldrsb.w	r3, [r5, #1051]	; 0x41b
 8019c34:	ee00 3a90 	vmov	s1, r3
 8019c38:	f995 3433 	ldrsb.w	r3, [r5, #1075]	; 0x433
 8019c3c:	ee01 3a10 	vmov	s2, r3
 8019c40:	f995 3430 	ldrsb.w	r3, [r5, #1072]	; 0x430
 8019c44:	ee01 3a90 	vmov	s3, r3
 8019c48:	f995 341a 	ldrsb.w	r3, [r5, #1050]	; 0x41a
 8019c4c:	ee03 3a10 	vmov	s6, r3
 8019c50:	f995 341e 	ldrsb.w	r3, [r5, #1054]	; 0x41e
 8019c54:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8019c58:	ee02 3a10 	vmov	s4, r3
 8019c5c:	f995 3436 	ldrsb.w	r3, [r5, #1078]	; 0x436
 8019c60:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8019c64:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019c68:	eef8 9ae9 	vcvt.f32.s32	s19, s19
 8019c6c:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 8019c70:	ee02 3a90 	vmov	s5, r3
 8019c74:	f995 341d 	ldrsb.w	r3, [r5, #1053]	; 0x41d
 8019c78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019c7c:	ee69 9aa7 	vmul.f32	s19, s19, s15
 8019c80:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 8019c84:	eef0 7a66 	vmov.f32	s15, s13
 8019c88:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8019c8c:	eeb8 aaca 	vcvt.f32.s32	s20, s20
 8019c90:	eee3 7aa4 	vfma.f32	s15, s7, s9
 8019c94:	ee03 3a90 	vmov	s7, r3
 8019c98:	f995 3435 	ldrsb.w	r3, [r5, #1077]	; 0x435
 8019c9c:	ee68 8a84 	vmul.f32	s17, s17, s8
 8019ca0:	ee28 8a04 	vmul.f32	s16, s16, s8
 8019ca4:	ee2a aa04 	vmul.f32	s20, s20, s8
 8019ca8:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8019cac:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8019cb0:	eef8 2ae2 	vcvt.f32.s32	s5, s5
 8019cb4:	ee04 3a10 	vmov	s8, r3
 8019cb8:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8019cbc:	f995 3432 	ldrsb.w	r3, [r5, #1074]	; 0x432
 8019cc0:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 8019cc4:	eee1 8a05 	vfma.f32	s17, s2, s10
 8019cc8:	eea1 8a85 	vfma.f32	s16, s3, s10
 8019ccc:	eea2 aa85 	vfma.f32	s20, s5, s10
 8019cd0:	ee05 2a10 	vmov	s10, r2
 8019cd4:	f995 2438 	ldrsb.w	r2, [r5, #1080]	; 0x438
 8019cd8:	eea0 7aa4 	vfma.f32	s14, s1, s9
 8019cdc:	eee2 9a24 	vfma.f32	s19, s4, s9
 8019ce0:	ee04 3a90 	vmov	s9, r3
 8019ce4:	ee06 2a90 	vmov	s13, r2
 8019ce8:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8019cec:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 8019cf0:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 8019cf4:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8019cf8:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8019cfc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8019d00:	eee5 7a83 	vfma.f32	s15, s11, s6
 8019d04:	4a9a      	ldr	r2, [pc, #616]	; (8019f70 <MotionFX_propagate+0x808>)
 8019d06:	eea5 7aa3 	vfma.f32	s14, s11, s7
 8019d0a:	2300      	movs	r3, #0
 8019d0c:	9308      	str	r3, [sp, #32]
 8019d0e:	eee6 8a04 	vfma.f32	s17, s12, s8
 8019d12:	9309      	str	r3, [sp, #36]	; 0x24
 8019d14:	930a      	str	r3, [sp, #40]	; 0x28
 8019d16:	eea6 8a24 	vfma.f32	s16, s12, s9
 8019d1a:	930c      	str	r3, [sp, #48]	; 0x30
 8019d1c:	930d      	str	r3, [sp, #52]	; 0x34
 8019d1e:	eee5 9a85 	vfma.f32	s19, s11, s10
 8019d22:	930e      	str	r3, [sp, #56]	; 0x38
 8019d24:	eea6 aa26 	vfma.f32	s20, s12, s13
 8019d28:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
 8019d2c:	eef1 aa67 	vneg.f32	s21, s15
 8019d30:	eeb1 ba47 	vneg.f32	s22, s14
 8019d34:	eef1 8a68 	vneg.f32	s17, s17
 8019d38:	eeb1 8a48 	vneg.f32	s16, s16
 8019d3c:	edcd 9a04 	vstr	s19, [sp, #16]
 8019d40:	edcd aa03 	vstr	s21, [sp, #12]
 8019d44:	ed8d ba02 	vstr	s22, [sp, #8]
 8019d48:	edcd 8a05 	vstr	s17, [sp, #20]
 8019d4c:	ed8d aa07 	vstr	s20, [sp, #28]
 8019d50:	edcd ba0b 	vstr	s23, [sp, #44]	; 0x2c
 8019d54:	edcd ba0f 	vstr	s23, [sp, #60]	; 0x3c
 8019d58:	ed8d 8a06 	vstr	s16, [sp, #24]
 8019d5c:	f892 38e0 	ldrb.w	r3, [r2, #2272]	; 0x8e0
 8019d60:	b1eb      	cbz	r3, 8019d9e <MotionFX_propagate+0x636>
 8019d62:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8019d66:	eee7 7a07 	vfma.f32	s15, s14, s14
 8019d6a:	eee9 7aa9 	vfma.f32	s15, s19, s19
 8019d6e:	ee17 0a90 	vmov	r0, s15
 8019d72:	f7e6 fbf1 	bl	8000558 <__aeabi_f2d>
 8019d76:	f001 fd95 	bl	801b8a4 <sqrt>
 8019d7a:	f7e6 ff1d 	bl	8000bb8 <__aeabi_d2f>
 8019d7e:	ee07 0a90 	vmov	s15, r0
 8019d82:	eecb 7aa7 	vdiv.f32	s15, s23, s15
 8019d86:	ee2b ba27 	vmul.f32	s22, s22, s15
 8019d8a:	ee6a aaa7 	vmul.f32	s21, s21, s15
 8019d8e:	ee69 9aa7 	vmul.f32	s19, s19, s15
 8019d92:	ed8d ba02 	vstr	s22, [sp, #8]
 8019d96:	edcd aa03 	vstr	s21, [sp, #12]
 8019d9a:	edcd 9a04 	vstr	s19, [sp, #16]
 8019d9e:	f1b9 0f00 	cmp.w	r9, #0
 8019da2:	f000 80bc 	beq.w	8019f1e <MotionFX_propagate+0x7b6>
 8019da6:	ee07 9a90 	vmov	s15, r9
 8019daa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8019dae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019db2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8019db6:	464a      	mov	r2, r9
 8019db8:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8019dbc:	ee28 8a27 	vmul.f32	s16, s16, s15
 8019dc0:	ee2a aa27 	vmul.f32	s20, s20, s15
 8019dc4:	f895 3c20 	ldrb.w	r3, [r5, #3104]	; 0xc20
 8019dc8:	edd6 6a0c 	vldr	s13, [r6, #48]	; 0x30
 8019dcc:	ed96 7a0d 	vldr	s14, [r6, #52]	; 0x34
 8019dd0:	edd6 7a0e 	vldr	s15, [r6, #56]	; 0x38
 8019dd4:	f895 0c1c 	ldrb.w	r0, [r5, #3100]	; 0xc1c
 8019dd8:	3301      	adds	r3, #1
 8019dda:	b2db      	uxtb	r3, r3
 8019ddc:	ee76 8aa8 	vadd.f32	s17, s13, s17
 8019de0:	ee37 8a08 	vadd.f32	s16, s14, s16
 8019de4:	ee37 aa8a 	vadd.f32	s20, s15, s20
 8019de8:	fbb3 f1f2 	udiv	r1, r3, r2
 8019dec:	fb02 3311 	mls	r3, r2, r1, r3
 8019df0:	f885 3c20 	strb.w	r3, [r5, #3104]	; 0xc20
 8019df4:	edc6 8a0c 	vstr	s17, [r6, #48]	; 0x30
 8019df8:	ed86 8a0d 	vstr	s16, [r6, #52]	; 0x34
 8019dfc:	ed86 aa0e 	vstr	s20, [r6, #56]	; 0x38
 8019e00:	2800      	cmp	r0, #0
 8019e02:	f040 80a7 	bne.w	8019f54 <MotionFX_propagate+0x7ec>
 8019e06:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
 8019e0a:	4a5a      	ldr	r2, [pc, #360]	; (8019f74 <MotionFX_propagate+0x80c>)
 8019e0c:	f102 074c 	add.w	r7, r2, #76	; 0x4c
 8019e10:	4611      	mov	r1, r2
 8019e12:	f1a2 0010 	sub.w	r0, r2, #16
 8019e16:	f7f5 fe27 	bl	800fa68 <m_qmult_eml>
 8019e1a:	f1a7 027c 	sub.w	r2, r7, #124	; 0x7c
 8019e1e:	4611      	mov	r1, r2
 8019e20:	4650      	mov	r0, sl
 8019e22:	f7f5 fe21 	bl	800fa68 <m_qmult_eml>
 8019e26:	f107 0218 	add.w	r2, r7, #24
 8019e2a:	f1a7 019c 	sub.w	r1, r7, #156	; 0x9c
 8019e2e:	f1a7 004c 	sub.w	r0, r7, #76	; 0x4c
 8019e32:	f7f5 fe19 	bl	800fa68 <m_qmult_eml>
 8019e36:	f107 0218 	add.w	r2, r7, #24
 8019e3a:	4611      	mov	r1, r2
 8019e3c:	f1a7 007c 	sub.w	r0, r7, #124	; 0x7c
 8019e40:	f7f5 fe12 	bl	800fa68 <m_qmult_eml>
 8019e44:	edd7 8a07 	vldr	s17, [r7, #28]
 8019e48:	edd7 9a06 	vldr	s19, [r7, #24]
 8019e4c:	ed97 8a08 	vldr	s16, [r7, #32]
 8019e50:	ed97 aa09 	vldr	s20, [r7, #36]	; 0x24
 8019e54:	ee28 7aa8 	vmul.f32	s14, s17, s17
 8019e58:	eea9 7aa9 	vfma.f32	s14, s19, s19
 8019e5c:	eea8 7a08 	vfma.f32	s14, s16, s16
 8019e60:	eeaa 7a0a 	vfma.f32	s14, s20, s20
 8019e64:	ee17 0a10 	vmov	r0, s14
 8019e68:	f7e6 fb76 	bl	8000558 <__aeabi_f2d>
 8019e6c:	f001 fd1a 	bl	801b8a4 <sqrt>
 8019e70:	f7e6 fea2 	bl	8000bb8 <__aeabi_d2f>
 8019e74:	ee07 0a90 	vmov	s15, r0
 8019e78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019e7c:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8019e80:	f895 3c28 	ldrb.w	r3, [r5, #3112]	; 0xc28
 8019e84:	2b01      	cmp	r3, #1
 8019e86:	ee67 9aa9 	vmul.f32	s19, s15, s19
 8019e8a:	ee67 8aa8 	vmul.f32	s17, s15, s17
 8019e8e:	ee27 8a88 	vmul.f32	s16, s15, s16
 8019e92:	ee67 7a8a 	vmul.f32	s15, s15, s20
 8019e96:	edc7 9a06 	vstr	s19, [r7, #24]
 8019e9a:	edc7 8a07 	vstr	s17, [r7, #28]
 8019e9e:	ed87 8a08 	vstr	s16, [r7, #32]
 8019ea2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 8019ea6:	f000 81b7 	beq.w	801a218 <MotionFX_propagate+0xab0>
 8019eaa:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 8019f84 <MotionFX_propagate+0x81c>
 8019eae:	f895 1c3e 	ldrb.w	r1, [r5, #3134]	; 0xc3e
 8019eb2:	9101      	str	r1, [sp, #4]
 8019eb4:	f1ab 030c 	sub.w	r3, fp, #12
 8019eb8:	f1ab 0294 	sub.w	r2, fp, #148	; 0x94
 8019ebc:	a902      	add	r1, sp, #8
 8019ebe:	f8cd b000 	str.w	fp, [sp]
 8019ec2:	f1ab 0088 	sub.w	r0, fp, #136	; 0x88
 8019ec6:	f7f7 fb27 	bl	8011518 <output_update>
 8019eca:	f895 2c3c 	ldrb.w	r2, [r5, #3132]	; 0xc3c
 8019ece:	2300      	movs	r3, #0
 8019ed0:	0791      	lsls	r1, r2, #30
 8019ed2:	f885 3c1e 	strb.w	r3, [r5, #3102]	; 0xc1e
 8019ed6:	d409      	bmi.n	8019eec <MotionFX_propagate+0x784>
 8019ed8:	f895 1c20 	ldrb.w	r1, [r5, #3104]	; 0xc20
 8019edc:	fbb1 f3f9 	udiv	r3, r1, r9
 8019ee0:	fb09 1913 	mls	r9, r9, r3, r1
 8019ee4:	f019 0fff 	tst.w	r9, #255	; 0xff
 8019ee8:	f000 80f6 	beq.w	801a0d8 <MotionFX_propagate+0x970>
 8019eec:	4a22      	ldr	r2, [pc, #136]	; (8019f78 <MotionFX_propagate+0x810>)
 8019eee:	4650      	mov	r0, sl
 8019ef0:	4611      	mov	r1, r2
 8019ef2:	f7f5 fdb9 	bl	800fa68 <m_qmult_eml>
 8019ef6:	f895 3c3e 	ldrb.w	r3, [r5, #3134]	; 0xc3e
 8019efa:	2b01      	cmp	r3, #1
 8019efc:	f47f ac80 	bne.w	8019800 <MotionFX_propagate+0x98>
 8019f00:	edd7 7a08 	vldr	s15, [r7, #32]
 8019f04:	69ba      	ldr	r2, [r7, #24]
 8019f06:	69fb      	ldr	r3, [r7, #28]
 8019f08:	61bb      	str	r3, [r7, #24]
 8019f0a:	eef1 7a67 	vneg.f32	s15, s15
 8019f0e:	61fa      	str	r2, [r7, #28]
 8019f10:	edc7 7a08 	vstr	s15, [r7, #32]
 8019f14:	e474      	b.n	8019800 <MotionFX_propagate+0x98>
 8019f16:	2201      	movs	r2, #1
 8019f18:	f885 29fd 	strb.w	r2, [r5, #2557]	; 0x9fd
 8019f1c:	e5b3      	b.n	8019a86 <MotionFX_propagate+0x31e>
 8019f1e:	2201      	movs	r2, #1
 8019f20:	f885 2c3d 	strb.w	r2, [r5, #3133]	; 0xc3d
 8019f24:	e74e      	b.n	8019dc4 <MotionFX_propagate+0x65c>
 8019f26:	eeca 7a8c 	vdiv.f32	s15, s21, s24
 8019f2a:	ee6b baa7 	vmul.f32	s23, s23, s15
 8019f2e:	ee2b ba27 	vmul.f32	s22, s22, s15
 8019f32:	ee2a aa27 	vmul.f32	s20, s20, s15
 8019f36:	e58d      	b.n	8019a54 <MotionFX_propagate+0x2ec>
 8019f38:	4b10      	ldr	r3, [pc, #64]	; (8019f7c <MotionFX_propagate+0x814>)
 8019f3a:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
 8019f3e:	eeb0 0a49 	vmov.f32	s0, s18
 8019f42:	f1a3 020c 	sub.w	r2, r3, #12
 8019f46:	4618      	mov	r0, r3
 8019f48:	f8cd a000 	str.w	sl, [sp]
 8019f4c:	a905      	add	r1, sp, #20
 8019f4e:	f7f6 f823 	bl	800ff98 <SpacePointGyroProp>
 8019f52:	e5bb      	b.n	8019acc <MotionFX_propagate+0x364>
 8019f54:	4b0a      	ldr	r3, [pc, #40]	; (8019f80 <MotionFX_propagate+0x818>)
 8019f56:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
 8019f5a:	f1a3 020c 	sub.w	r2, r3, #12
 8019f5e:	4618      	mov	r0, r3
 8019f60:	f8cd a000 	str.w	sl, [sp]
 8019f64:	eeb0 0a49 	vmov.f32	s0, s18
 8019f68:	a905      	add	r1, sp, #20
 8019f6a:	f7f6 f815 	bl	800ff98 <SpacePointGyroProp>
 8019f6e:	e74c      	b.n	8019e0a <MotionFX_propagate+0x6a2>
 8019f70:	20000000 	.word	0x20000000
 8019f74:	20001fbc 	.word	0x20001fbc
 8019f78:	20001f7c 	.word	0x20001f7c
 8019f7c:	20001d0c 	.word	0x20001d0c
 8019f80:	20001f4c 	.word	0x20001f4c
 8019f84:	200020a8 	.word	0x200020a8
 8019f88:	f8d8 3088 	ldr.w	r3, [r8, #136]	; 0x88
 8019f8c:	f8d8 008c 	ldr.w	r0, [r8, #140]	; 0x8c
 8019f90:	f8d8 1090 	ldr.w	r1, [r8, #144]	; 0x90
 8019f94:	f8c8 3098 	str.w	r3, [r8, #152]	; 0x98
 8019f98:	f042 0201 	orr.w	r2, r2, #1
 8019f9c:	f8d8 3094 	ldr.w	r3, [r8, #148]	; 0x94
 8019fa0:	f8c8 009c 	str.w	r0, [r8, #156]	; 0x9c
 8019fa4:	f885 29fc 	strb.w	r2, [r5, #2556]	; 0x9fc
 8019fa8:	4650      	mov	r0, sl
 8019faa:	aa10      	add	r2, sp, #64	; 0x40
 8019fac:	f8c8 10a0 	str.w	r1, [r8, #160]	; 0xa0
 8019fb0:	f5ab 7196 	sub.w	r1, fp, #300	; 0x12c
 8019fb4:	f8c8 30a4 	str.w	r3, [r8, #164]	; 0xa4
 8019fb8:	f7f5 fd56 	bl	800fa68 <m_qmult_eml>
 8019fbc:	aa08      	add	r2, sp, #32
 8019fbe:	f5ab 71a6 	sub.w	r1, fp, #332	; 0x14c
 8019fc2:	f5ab 7086 	sub.w	r0, fp, #268	; 0x10c
 8019fc6:	f7f5 fd4f 	bl	800fa68 <m_qmult_eml>
 8019fca:	aa08      	add	r2, sp, #32
 8019fcc:	4611      	mov	r1, r2
 8019fce:	a810      	add	r0, sp, #64	; 0x40
 8019fd0:	f7f5 fd4a 	bl	800fa68 <m_qmult_eml>
 8019fd4:	ed9d 9a09 	vldr	s18, [sp, #36]	; 0x24
 8019fd8:	eddd 9a08 	vldr	s19, [sp, #32]
 8019fdc:	eddd 8a0a 	vldr	s17, [sp, #40]	; 0x28
 8019fe0:	ed9d 8a0b 	vldr	s16, [sp, #44]	; 0x2c
 8019fe4:	ee69 7a09 	vmul.f32	s15, s18, s18
 8019fe8:	eee9 7aa9 	vfma.f32	s15, s19, s19
 8019fec:	eee8 7aa8 	vfma.f32	s15, s17, s17
 8019ff0:	eee8 7a08 	vfma.f32	s15, s16, s16
 8019ff4:	ee17 0a90 	vmov	r0, s15
 8019ff8:	f7e6 faae 	bl	8000558 <__aeabi_f2d>
 8019ffc:	f001 fc52 	bl	801b8a4 <sqrt>
 801a000:	f7e6 fdda 	bl	8000bb8 <__aeabi_d2f>
 801a004:	f895 39fd 	ldrb.w	r3, [r5, #2557]	; 0x9fd
 801a008:	ed98 6a33 	vldr	s12, [r8, #204]	; 0xcc
 801a00c:	edd8 6a32 	vldr	s13, [r8, #200]	; 0xc8
 801a010:	edd8 4a34 	vldr	s9, [r8, #208]	; 0xd0
 801a014:	f8d8 10ac 	ldr.w	r1, [r8, #172]	; 0xac
 801a018:	f8d8 20b0 	ldr.w	r2, [r8, #176]	; 0xb0
 801a01c:	f8c8 10bc 	str.w	r1, [r8, #188]	; 0xbc
 801a020:	ee07 3a10 	vmov	s14, r3
 801a024:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801a028:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 801a02c:	eec5 7a07 	vdiv.f32	s15, s10, s14
 801a030:	f8d8 30a8 	ldr.w	r3, [r8, #168]	; 0xa8
 801a034:	f8c8 30b8 	str.w	r3, [r8, #184]	; 0xb8
 801a038:	f8d8 30b4 	ldr.w	r3, [r8, #180]	; 0xb4
 801a03c:	f8c8 20c0 	str.w	r2, [r8, #192]	; 0xc0
 801a040:	f8c8 30c4 	str.w	r3, [r8, #196]	; 0xc4
 801a044:	ee07 0a10 	vmov	s14, r0
 801a048:	eec5 5a07 	vdiv.f32	s11, s10, s14
 801a04c:	ee27 6a86 	vmul.f32	s12, s15, s12
 801a050:	ee67 6aa6 	vmul.f32	s13, s15, s13
 801a054:	ee26 7a06 	vmul.f32	s14, s12, s12
 801a058:	ee67 7aa4 	vmul.f32	s15, s15, s9
 801a05c:	eea6 7aa6 	vfma.f32	s14, s13, s13
 801a060:	ee69 9aa5 	vmul.f32	s19, s19, s11
 801a064:	eea7 7aa7 	vfma.f32	s14, s15, s15
 801a068:	ee29 9a25 	vmul.f32	s18, s18, s11
 801a06c:	ee68 8aa5 	vmul.f32	s17, s17, s11
 801a070:	ee28 8a25 	vmul.f32	s16, s16, s11
 801a074:	eeb4 7ac5 	vcmpe.f32	s14, s10
 801a078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a07c:	edc8 9a1e 	vstr	s19, [r8, #120]	; 0x78
 801a080:	ed88 9a1f 	vstr	s18, [r8, #124]	; 0x7c
 801a084:	edc8 8a20 	vstr	s17, [r8, #128]	; 0x80
 801a088:	ed88 8a21 	vstr	s16, [r8, #132]	; 0x84
 801a08c:	ed88 6a37 	vstr	s12, [r8, #220]	; 0xdc
 801a090:	edc8 6a36 	vstr	s13, [r8, #216]	; 0xd8
 801a094:	edc8 7a38 	vstr	s15, [r8, #224]	; 0xe0
 801a098:	f100 80c5 	bmi.w	801a226 <MotionFX_propagate+0xabe>
 801a09c:	2000      	movs	r0, #0
 801a09e:	2300      	movs	r3, #0
 801a0a0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801a0a4:	f8c8 00e4 	str.w	r0, [r8, #228]	; 0xe4
 801a0a8:	f8c8 30a8 	str.w	r3, [r8, #168]	; 0xa8
 801a0ac:	f8c8 30ac 	str.w	r3, [r8, #172]	; 0xac
 801a0b0:	f8c8 30b0 	str.w	r3, [r8, #176]	; 0xb0
 801a0b4:	f8c8 30e8 	str.w	r3, [r8, #232]	; 0xe8
 801a0b8:	f8c8 30ec 	str.w	r3, [r8, #236]	; 0xec
 801a0bc:	f8c8 30f0 	str.w	r3, [r8, #240]	; 0xf0
 801a0c0:	f8c8 20b4 	str.w	r2, [r8, #180]	; 0xb4
 801a0c4:	f8c8 20f4 	str.w	r2, [r8, #244]	; 0xf4
 801a0c8:	e576      	b.n	8019bb8 <MotionFX_propagate+0x450>
 801a0ca:	2300      	movs	r3, #0
 801a0cc:	ed86 7a09 	vstr	s14, [r6, #36]	; 0x24
 801a0d0:	61b3      	str	r3, [r6, #24]
 801a0d2:	61f3      	str	r3, [r6, #28]
 801a0d4:	6233      	str	r3, [r6, #32]
 801a0d6:	e549      	b.n	8019b6c <MotionFX_propagate+0x404>
 801a0d8:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
 801a0dc:	f8d6 008c 	ldr.w	r0, [r6, #140]	; 0x8c
 801a0e0:	f8d6 1090 	ldr.w	r1, [r6, #144]	; 0x90
 801a0e4:	f8c6 3098 	str.w	r3, [r6, #152]	; 0x98
 801a0e8:	f042 0201 	orr.w	r2, r2, #1
 801a0ec:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 801a0f0:	f8c6 009c 	str.w	r0, [r6, #156]	; 0x9c
 801a0f4:	f885 2c3c 	strb.w	r2, [r5, #3132]	; 0xc3c
 801a0f8:	4650      	mov	r0, sl
 801a0fa:	aa10      	add	r2, sp, #64	; 0x40
 801a0fc:	f8c6 10a0 	str.w	r1, [r6, #160]	; 0xa0
 801a100:	f5ab 7196 	sub.w	r1, fp, #300	; 0x12c
 801a104:	f8c6 30a4 	str.w	r3, [r6, #164]	; 0xa4
 801a108:	f7f5 fcae 	bl	800fa68 <m_qmult_eml>
 801a10c:	aa08      	add	r2, sp, #32
 801a10e:	f5ab 71a6 	sub.w	r1, fp, #332	; 0x14c
 801a112:	f5ab 7086 	sub.w	r0, fp, #268	; 0x10c
 801a116:	f7f5 fca7 	bl	800fa68 <m_qmult_eml>
 801a11a:	aa08      	add	r2, sp, #32
 801a11c:	4611      	mov	r1, r2
 801a11e:	a810      	add	r0, sp, #64	; 0x40
 801a120:	f7f5 fca2 	bl	800fa68 <m_qmult_eml>
 801a124:	eddd 8a09 	vldr	s17, [sp, #36]	; 0x24
 801a128:	eddd 9a08 	vldr	s19, [sp, #32]
 801a12c:	ed9d 8a0a 	vldr	s16, [sp, #40]	; 0x28
 801a130:	ed9d aa0b 	vldr	s20, [sp, #44]	; 0x2c
 801a134:	ee68 7aa8 	vmul.f32	s15, s17, s17
 801a138:	eee9 7aa9 	vfma.f32	s15, s19, s19
 801a13c:	eee8 7a08 	vfma.f32	s15, s16, s16
 801a140:	eeea 7a0a 	vfma.f32	s15, s20, s20
 801a144:	ee17 0a90 	vmov	r0, s15
 801a148:	f7e6 fa06 	bl	8000558 <__aeabi_f2d>
 801a14c:	f001 fbaa 	bl	801b8a4 <sqrt>
 801a150:	f7e6 fd32 	bl	8000bb8 <__aeabi_d2f>
 801a154:	f895 3c3d 	ldrb.w	r3, [r5, #3133]	; 0xc3d
 801a158:	edd6 5a33 	vldr	s11, [r6, #204]	; 0xcc
 801a15c:	ed96 6a32 	vldr	s12, [r6, #200]	; 0xc8
 801a160:	edd6 4a34 	vldr	s9, [r6, #208]	; 0xd0
 801a164:	f8d6 10ac 	ldr.w	r1, [r6, #172]	; 0xac
 801a168:	f8d6 20b0 	ldr.w	r2, [r6, #176]	; 0xb0
 801a16c:	f8c6 10bc 	str.w	r1, [r6, #188]	; 0xbc
 801a170:	ee07 3a10 	vmov	s14, r3
 801a174:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801a178:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 801a17c:	eec5 7a07 	vdiv.f32	s15, s10, s14
 801a180:	f8d6 30a8 	ldr.w	r3, [r6, #168]	; 0xa8
 801a184:	f8c6 30b8 	str.w	r3, [r6, #184]	; 0xb8
 801a188:	f8d6 30b4 	ldr.w	r3, [r6, #180]	; 0xb4
 801a18c:	f8c6 20c0 	str.w	r2, [r6, #192]	; 0xc0
 801a190:	f8c6 30c4 	str.w	r3, [r6, #196]	; 0xc4
 801a194:	ee07 0a10 	vmov	s14, r0
 801a198:	ee85 7a07 	vdiv.f32	s14, s10, s14
 801a19c:	ee67 5aa5 	vmul.f32	s11, s15, s11
 801a1a0:	ee27 6a86 	vmul.f32	s12, s15, s12
 801a1a4:	ee65 6aa5 	vmul.f32	s13, s11, s11
 801a1a8:	ee67 7aa4 	vmul.f32	s15, s15, s9
 801a1ac:	eee6 6a06 	vfma.f32	s13, s12, s12
 801a1b0:	ee67 9a29 	vmul.f32	s19, s14, s19
 801a1b4:	eee7 6aa7 	vfma.f32	s13, s15, s15
 801a1b8:	ee67 8a28 	vmul.f32	s17, s14, s17
 801a1bc:	ee27 8a08 	vmul.f32	s16, s14, s16
 801a1c0:	eef4 6ac5 	vcmpe.f32	s13, s10
 801a1c4:	ee27 7a0a 	vmul.f32	s14, s14, s20
 801a1c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a1cc:	edc6 9a1e 	vstr	s19, [r6, #120]	; 0x78
 801a1d0:	edc6 8a1f 	vstr	s17, [r6, #124]	; 0x7c
 801a1d4:	ed86 8a20 	vstr	s16, [r6, #128]	; 0x80
 801a1d8:	ed86 7a21 	vstr	s14, [r6, #132]	; 0x84
 801a1dc:	edc6 5a37 	vstr	s11, [r6, #220]	; 0xdc
 801a1e0:	ed86 6a36 	vstr	s12, [r6, #216]	; 0xd8
 801a1e4:	edc6 7a38 	vstr	s15, [r6, #224]	; 0xe0
 801a1e8:	d428      	bmi.n	801a23c <MotionFX_propagate+0xad4>
 801a1ea:	2000      	movs	r0, #0
 801a1ec:	2300      	movs	r3, #0
 801a1ee:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801a1f2:	f8c6 00e4 	str.w	r0, [r6, #228]	; 0xe4
 801a1f6:	f8c6 30a8 	str.w	r3, [r6, #168]	; 0xa8
 801a1fa:	f8c6 30ac 	str.w	r3, [r6, #172]	; 0xac
 801a1fe:	f8c6 30b0 	str.w	r3, [r6, #176]	; 0xb0
 801a202:	f8c6 30e8 	str.w	r3, [r6, #232]	; 0xe8
 801a206:	f8c6 30ec 	str.w	r3, [r6, #236]	; 0xec
 801a20a:	f8c6 30f0 	str.w	r3, [r6, #240]	; 0xf0
 801a20e:	f8c6 20b4 	str.w	r2, [r6, #180]	; 0xb4
 801a212:	f8c6 20f4 	str.w	r2, [r6, #244]	; 0xf4
 801a216:	e66e      	b.n	8019ef6 <MotionFX_propagate+0x78e>
 801a218:	2300      	movs	r3, #0
 801a21a:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 801a21e:	61bb      	str	r3, [r7, #24]
 801a220:	61fb      	str	r3, [r7, #28]
 801a222:	623b      	str	r3, [r7, #32]
 801a224:	e641      	b.n	8019eaa <MotionFX_propagate+0x742>
 801a226:	ee75 7a47 	vsub.f32	s15, s10, s14
 801a22a:	ee17 0a90 	vmov	r0, s15
 801a22e:	f7e6 f993 	bl	8000558 <__aeabi_f2d>
 801a232:	f001 fb37 	bl	801b8a4 <sqrt>
 801a236:	f7e6 fcbf 	bl	8000bb8 <__aeabi_d2f>
 801a23a:	e730      	b.n	801a09e <MotionFX_propagate+0x936>
 801a23c:	ee75 7a66 	vsub.f32	s15, s10, s13
 801a240:	ee17 0a90 	vmov	r0, s15
 801a244:	f7e6 f988 	bl	8000558 <__aeabi_f2d>
 801a248:	f001 fb2c 	bl	801b8a4 <sqrt>
 801a24c:	f7e6 fcb4 	bl	8000bb8 <__aeabi_d2f>
 801a250:	e7cc      	b.n	801a1ec <MotionFX_propagate+0xa84>
 801a252:	bf00      	nop

0801a254 <MotionFX_MagCal_init>:
 801a254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a258:	4c50      	ldr	r4, [pc, #320]	; (801a39c <MotionFX_MagCal_init+0x148>)
 801a25a:	f894 3d49 	ldrb.w	r3, [r4, #3401]	; 0xd49
 801a25e:	b90b      	cbnz	r3, 801a264 <MotionFX_MagCal_init+0x10>
 801a260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a264:	1e43      	subs	r3, r0, #1
 801a266:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801a26a:	d2f9      	bcs.n	801a260 <MotionFX_MagCal_init+0xc>
 801a26c:	460e      	mov	r6, r1
 801a26e:	4605      	mov	r5, r0
 801a270:	b207      	sxth	r7, r0
 801a272:	2900      	cmp	r1, #0
 801a274:	f000 8089 	beq.w	801a38a <MotionFX_MagCal_init+0x136>
 801a278:	f504 688c 	add.w	r8, r4, #1120	; 0x460
 801a27c:	2600      	movs	r6, #0
 801a27e:	4640      	mov	r0, r8
 801a280:	f7f5 fca0 	bl	800fbc4 <MEMS_DataBuffInit>
 801a284:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801a288:	4631      	mov	r1, r6
 801a28a:	f44f 7248 	mov.w	r2, #800	; 0x320
 801a28e:	f504 60a0 	add.w	r0, r4, #1280	; 0x500
 801a292:	f8a4 34b0 	strh.w	r3, [r4, #1200]	; 0x4b0
 801a296:	f884 64a8 	strb.w	r6, [r4, #1192]	; 0x4a8
 801a29a:	f8c4 64ac 	str.w	r6, [r4, #1196]	; 0x4ac
 801a29e:	f884 6474 	strb.w	r6, [r4, #1140]	; 0x474
 801a2a2:	f884 6475 	strb.w	r6, [r4, #1141]	; 0x475
 801a2a6:	f000 f9b6 	bl	801a616 <memset>
 801a2aa:	225f      	movs	r2, #95	; 0x5f
 801a2ac:	f44f 7080 	mov.w	r0, #256	; 0x100
 801a2b0:	23ff      	movs	r3, #255	; 0xff
 801a2b2:	4631      	mov	r1, r6
 801a2b4:	f884 2501 	strb.w	r2, [r4, #1281]	; 0x501
 801a2b8:	f44f 6c70 	mov.w	ip, #3840	; 0xf00
 801a2bc:	222e      	movs	r2, #46	; 0x2e
 801a2be:	f8a4 04b4 	strh.w	r0, [r4, #1204]	; 0x4b4
 801a2c2:	f204 40ce 	addw	r0, r4, #1230	; 0x4ce
 801a2c6:	f884 3502 	strb.w	r3, [r4, #1282]	; 0x502
 801a2ca:	f884 3486 	strb.w	r3, [r4, #1158]	; 0x486
 801a2ce:	f8c4 6478 	str.w	r6, [r4, #1144]	; 0x478
 801a2d2:	f8c4 647c 	str.w	r6, [r4, #1148]	; 0x47c
 801a2d6:	f8c4 6480 	str.w	r6, [r4, #1152]	; 0x480
 801a2da:	f8a4 c484 	strh.w	ip, [r4, #1156]	; 0x484
 801a2de:	f000 f99a 	bl	801a616 <memset>
 801a2e2:	f1a5 030a 	sub.w	r3, r5, #10
 801a2e6:	b29b      	uxth	r3, r3
 801a2e8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801a2ec:	2101      	movs	r1, #1
 801a2ee:	2b32      	cmp	r3, #50	; 0x32
 801a2f0:	f884 64cc 	strb.w	r6, [r4, #1228]	; 0x4cc
 801a2f4:	f8c8 207c 	str.w	r2, [r8, #124]	; 0x7c
 801a2f8:	f8c8 208c 	str.w	r2, [r8, #140]	; 0x8c
 801a2fc:	f8c8 209c 	str.w	r2, [r8, #156]	; 0x9c
 801a300:	f884 14cd 	strb.w	r1, [r4, #1229]	; 0x4cd
 801a304:	d801      	bhi.n	801a30a <MotionFX_MagCal_init+0xb6>
 801a306:	f884 14a8 	strb.w	r1, [r4, #1192]	; 0x4a8
 801a30a:	2100      	movs	r1, #0
 801a30c:	4824      	ldr	r0, [pc, #144]	; (801a3a0 <MotionFX_MagCal_init+0x14c>)
 801a30e:	f7f5 ffd9 	bl	80102c4 <MEMSLoadMagCalNVM>
 801a312:	f9b4 3462 	ldrsh.w	r3, [r4, #1122]	; 0x462
 801a316:	4a23      	ldr	r2, [pc, #140]	; (801a3a4 <MotionFX_MagCal_init+0x150>)
 801a318:	1b5b      	subs	r3, r3, r5
 801a31a:	ee07 3a90 	vmov	s15, r3
 801a31e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a322:	23c8      	movs	r3, #200	; 0xc8
 801a324:	eef0 7ae7 	vabs.f32	s15, s15
 801a328:	fb93 f3f5 	sdiv	r3, r3, r5
 801a32c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a330:	b2db      	uxtb	r3, r3
 801a332:	2b0f      	cmp	r3, #15
 801a334:	eef4 7ac7 	vcmpe.f32	s15, s14
 801a338:	bf28      	it	cs
 801a33a:	230f      	movcs	r3, #15
 801a33c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a340:	f884 3d6e 	strb.w	r3, [r4, #3438]	; 0xd6e
 801a344:	f8c2 50c4 	str.w	r5, [r2, #196]	; 0xc4
 801a348:	dc0e      	bgt.n	801a368 <MotionFX_MagCal_init+0x114>
 801a34a:	edd8 7a01 	vldr	s15, [r8, #4]
 801a34e:	eddf 6a16 	vldr	s13, [pc, #88]	; 801a3a8 <MotionFX_MagCal_init+0x154>
 801a352:	ed9f 7a16 	vldr	s14, [pc, #88]	; 801a3ac <MotionFX_MagCal_init+0x158>
 801a356:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801a35a:	eef0 7ae7 	vabs.f32	s15, s15
 801a35e:	eef4 7ac7 	vcmpe.f32	s15, s14
 801a362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a366:	dd0b      	ble.n	801a380 <MotionFX_MagCal_init+0x12c>
 801a368:	480d      	ldr	r0, [pc, #52]	; (801a3a0 <MotionFX_MagCal_init+0x14c>)
 801a36a:	f7f5 fc27 	bl	800fbbc <MEMS_EmptyDataFrame>
 801a36e:	4a10      	ldr	r2, [pc, #64]	; (801a3b0 <MotionFX_MagCal_init+0x15c>)
 801a370:	f8a4 7462 	strh.w	r7, [r4, #1122]	; 0x462
 801a374:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 801a378:	f8c8 2004 	str.w	r2, [r8, #4]
 801a37c:	f8a4 3460 	strh.w	r3, [r4, #1120]	; 0x460
 801a380:	2300      	movs	r3, #0
 801a382:	f884 3de8 	strb.w	r3, [r4, #3560]	; 0xde8
 801a386:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a38a:	f204 4074 	addw	r0, r4, #1140	; 0x474
 801a38e:	f7f5 ffdb 	bl	8010348 <MEMSSaveMagCalNVM>
 801a392:	f504 688c 	add.w	r8, r4, #1120	; 0x460
 801a396:	f884 64a8 	strb.w	r6, [r4, #1192]	; 0x4a8
 801a39a:	e7ba      	b.n	801a312 <MotionFX_MagCal_init+0xbe>
 801a39c:	200013c8 	.word	0x200013c8
 801a3a0:	20001828 	.word	0x20001828
 801a3a4:	200010f8 	.word	0x200010f8
 801a3a8:	3dcccccd 	.word	0x3dcccccd
 801a3ac:	3c23d70a 	.word	0x3c23d70a
 801a3b0:	3dcccccd 	.word	0x3dcccccd

0801a3b4 <MotionFX_MagCal_run>:
 801a3b4:	4b4c      	ldr	r3, [pc, #304]	; (801a4e8 <MotionFX_MagCal_run+0x134>)
 801a3b6:	f893 2d49 	ldrb.w	r2, [r3, #3401]	; 0xd49
 801a3ba:	2a00      	cmp	r2, #0
 801a3bc:	d07f      	beq.n	801a4be <MotionFX_MagCal_run+0x10a>
 801a3be:	ed90 7a00 	vldr	s14, [r0]
 801a3c2:	eddf 7a4a 	vldr	s15, [pc, #296]	; 801a4ec <MotionFX_MagCal_run+0x138>
 801a3c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a3c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 801a3cc:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801a3d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a3d4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801a3d8:	bfac      	ite	ge
 801a3da:	ee77 7a87 	vaddge.f32	s15, s15, s14
 801a3de:	ee77 7ac7 	vsublt.f32	s15, s15, s14
 801a3e2:	b085      	sub	sp, #20
 801a3e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a3e8:	ed90 7a01 	vldr	s14, [r0, #4]
 801a3ec:	edcd 7a01 	vstr	s15, [sp, #4]
 801a3f0:	eddf 7a3e 	vldr	s15, [pc, #248]	; 801a4ec <MotionFX_MagCal_run+0x138>
 801a3f4:	f893 2de8 	ldrb.w	r2, [r3, #3560]	; 0xde8
 801a3f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 801a3fc:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801a400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a404:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801a408:	bfac      	ite	ge
 801a40a:	ee77 7a87 	vaddge.f32	s15, s15, s14
 801a40e:	ee77 7ac7 	vsublt.f32	s15, s15, s14
 801a412:	ed90 7a02 	vldr	s14, [r0, #8]
 801a416:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a41a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801a41e:	edcd 7a02 	vstr	s15, [sp, #8]
 801a422:	eddf 7a32 	vldr	s15, [pc, #200]	; 801a4ec <MotionFX_MagCal_run+0x138>
 801a426:	ee67 7a27 	vmul.f32	s15, s14, s15
 801a42a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a42e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801a432:	bfac      	ite	ge
 801a434:	ee77 7a87 	vaddge.f32	s15, s15, s14
 801a438:	ee77 7ac7 	vsublt.f32	s15, s15, s14
 801a43c:	e9dd 4601 	ldrd	r4, r6, [sp, #4]
 801a440:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a444:	edcd 7a03 	vstr	s15, [sp, #12]
 801a448:	ee17 5a90 	vmov	r5, s15
 801a44c:	b37a      	cbz	r2, 801a4ae <MotionFX_MagCal_run+0xfa>
 801a44e:	4828      	ldr	r0, [pc, #160]	; (801a4f0 <MotionFX_MagCal_run+0x13c>)
 801a450:	00d1      	lsls	r1, r2, #3
 801a452:	f8d0 00c4 	ldr.w	r0, [r0, #196]	; 0xc4
 801a456:	185f      	adds	r7, r3, r1
 801a458:	fb10 f002 	smulbb	r0, r0, r2
 801a45c:	f8a7 0d70 	strh.w	r0, [r7, #3440]	; 0xd70
 801a460:	f647 70fe 	movw	r0, #32766	; 0x7ffe
 801a464:	4f23      	ldr	r7, [pc, #140]	; (801a4f4 <MotionFX_MagCal_run+0x140>)
 801a466:	4284      	cmp	r4, r0
 801a468:	bfa8      	it	ge
 801a46a:	4604      	movge	r4, r0
 801a46c:	4285      	cmp	r5, r0
 801a46e:	bfa8      	it	ge
 801a470:	4605      	movge	r5, r0
 801a472:	42bc      	cmp	r4, r7
 801a474:	bfb8      	it	lt
 801a476:	463c      	movlt	r4, r7
 801a478:	42be      	cmp	r6, r7
 801a47a:	db03      	blt.n	801a484 <MotionFX_MagCal_run+0xd0>
 801a47c:	42b0      	cmp	r0, r6
 801a47e:	bfa8      	it	ge
 801a480:	4630      	movge	r0, r6
 801a482:	b200      	sxth	r0, r0
 801a484:	4f1b      	ldr	r7, [pc, #108]	; (801a4f4 <MotionFX_MagCal_run+0x140>)
 801a486:	f893 6d6e 	ldrb.w	r6, [r3, #3438]	; 0xd6e
 801a48a:	3201      	adds	r2, #1
 801a48c:	4419      	add	r1, r3
 801a48e:	b2d2      	uxtb	r2, r2
 801a490:	42bd      	cmp	r5, r7
 801a492:	bfb8      	it	lt
 801a494:	463d      	movlt	r5, r7
 801a496:	4296      	cmp	r6, r2
 801a498:	f883 2de8 	strb.w	r2, [r3, #3560]	; 0xde8
 801a49c:	f8a1 4d72 	strh.w	r4, [r1, #3442]	; 0xd72
 801a4a0:	f8a1 0d74 	strh.w	r0, [r1, #3444]	; 0xd74
 801a4a4:	f8a1 5d76 	strh.w	r5, [r1, #3446]	; 0xd76
 801a4a8:	d00a      	beq.n	801a4c0 <MotionFX_MagCal_run+0x10c>
 801a4aa:	b005      	add	sp, #20
 801a4ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a4ae:	68c1      	ldr	r1, [r0, #12]
 801a4b0:	f8c3 1d68 	str.w	r1, [r3, #3432]	; 0xd68
 801a4b4:	2101      	movs	r1, #1
 801a4b6:	f883 1d6c 	strb.w	r1, [r3, #3436]	; 0xd6c
 801a4ba:	4611      	mov	r1, r2
 801a4bc:	e7d0      	b.n	801a460 <MotionFX_MagCal_run+0xac>
 801a4be:	4770      	bx	lr
 801a4c0:	490d      	ldr	r1, [pc, #52]	; (801a4f8 <MotionFX_MagCal_run+0x144>)
 801a4c2:	2200      	movs	r2, #0
 801a4c4:	f6a1 1008 	subw	r0, r1, #2312	; 0x908
 801a4c8:	f883 2de8 	strb.w	r2, [r3, #3560]	; 0xde8
 801a4cc:	f7f5 fbc0 	bl	800fc50 <updateProcBuffer_Temp>
 801a4d0:	490a      	ldr	r1, [pc, #40]	; (801a4fc <MotionFX_MagCal_run+0x148>)
 801a4d2:	f101 0048 	add.w	r0, r1, #72	; 0x48
 801a4d6:	f7f5 fb81 	bl	800fbdc <MEMS_checkTimeToRun>
 801a4da:	2801      	cmp	r0, #1
 801a4dc:	d1e5      	bne.n	801a4aa <MotionFX_MagCal_run+0xf6>
 801a4de:	b005      	add	sp, #20
 801a4e0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801a4e4:	f7f7 ba8c 	b.w	8011a00 <MEMS_runMagCal.constprop.14>
 801a4e8:	200013c8 	.word	0x200013c8
 801a4ec:	43fa0000 	.word	0x43fa0000
 801a4f0:	200010f8 	.word	0x200010f8
 801a4f4:	ffff8002 	.word	0xffff8002
 801a4f8:	20002130 	.word	0x20002130
 801a4fc:	20001828 	.word	0x20001828

0801a500 <MotionFX_MagCal_getParams>:
 801a500:	4b15      	ldr	r3, [pc, #84]	; (801a558 <MotionFX_MagCal_getParams+0x58>)
 801a502:	f893 2d49 	ldrb.w	r2, [r3, #3401]	; 0xd49
 801a506:	b902      	cbnz	r2, 801a50a <MotionFX_MagCal_getParams+0xa>
 801a508:	4770      	bx	lr
 801a50a:	f503 628c 	add.w	r2, r3, #1120	; 0x460
 801a50e:	edd2 6a1c 	vldr	s13, [r2, #112]	; 0x70
 801a512:	ed92 7a1d 	vldr	s14, [r2, #116]	; 0x74
 801a516:	edd2 7a1e 	vldr	s15, [r2, #120]	; 0x78
 801a51a:	ed9f 6a10 	vldr	s12, [pc, #64]	; 801a55c <MotionFX_MagCal_getParams+0x5c>
 801a51e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 801a522:	7303      	strb	r3, [r0, #12]
 801a524:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 801a528:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801a52c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a530:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801a534:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a538:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a53c:	ee66 6a86 	vmul.f32	s13, s13, s12
 801a540:	ee27 7a06 	vmul.f32	s14, s14, s12
 801a544:	ee67 7a86 	vmul.f32	s15, s15, s12
 801a548:	edc0 6a00 	vstr	s13, [r0]
 801a54c:	ed80 7a01 	vstr	s14, [r0, #4]
 801a550:	edc0 7a02 	vstr	s15, [r0, #8]
 801a554:	4770      	bx	lr
 801a556:	bf00      	nop
 801a558:	200013c8 	.word	0x200013c8
 801a55c:	3b03126f 	.word	0x3b03126f

0801a560 <MotionFX_GetLibVersion>:
 801a560:	4b10      	ldr	r3, [pc, #64]	; (801a5a4 <MotionFX_GetLibVersion+0x44>)
 801a562:	f893 3d49 	ldrb.w	r3, [r3, #3401]	; 0xd49
 801a566:	b90b      	cbnz	r3, 801a56c <MotionFX_GetLibVersion+0xc>
 801a568:	4618      	mov	r0, r3
 801a56a:	4770      	bx	lr
 801a56c:	b470      	push	{r4, r5, r6}
 801a56e:	4e0e      	ldr	r6, [pc, #56]	; (801a5a8 <MotionFX_GetLibVersion+0x48>)
 801a570:	4605      	mov	r5, r0
 801a572:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801a574:	b08b      	sub	sp, #44	; 0x2c
 801a576:	ac01      	add	r4, sp, #4
 801a578:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a57a:	6833      	ldr	r3, [r6, #0]
 801a57c:	f824 3b02 	strh.w	r3, [r4], #2
 801a580:	0c1b      	lsrs	r3, r3, #16
 801a582:	7023      	strb	r3, [r4, #0]
 801a584:	ac01      	add	r4, sp, #4
 801a586:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a588:	8826      	ldrh	r6, [r4, #0]
 801a58a:	60eb      	str	r3, [r5, #12]
 801a58c:	78a4      	ldrb	r4, [r4, #2]
 801a58e:	6028      	str	r0, [r5, #0]
 801a590:	2312      	movs	r3, #18
 801a592:	4618      	mov	r0, r3
 801a594:	6069      	str	r1, [r5, #4]
 801a596:	60aa      	str	r2, [r5, #8]
 801a598:	822e      	strh	r6, [r5, #16]
 801a59a:	74ac      	strb	r4, [r5, #18]
 801a59c:	b00b      	add	sp, #44	; 0x2c
 801a59e:	bc70      	pop	{r4, r5, r6}
 801a5a0:	4770      	bx	lr
 801a5a2:	bf00      	nop
 801a5a4:	200013c8 	.word	0x200013c8
 801a5a8:	0801d79c 	.word	0x0801d79c

0801a5ac <__errno>:
 801a5ac:	4b01      	ldr	r3, [pc, #4]	; (801a5b4 <__errno+0x8>)
 801a5ae:	6818      	ldr	r0, [r3, #0]
 801a5b0:	4770      	bx	lr
 801a5b2:	bf00      	nop
 801a5b4:	20001344 	.word	0x20001344

0801a5b8 <__libc_init_array>:
 801a5b8:	b570      	push	{r4, r5, r6, lr}
 801a5ba:	4e0d      	ldr	r6, [pc, #52]	; (801a5f0 <__libc_init_array+0x38>)
 801a5bc:	4c0d      	ldr	r4, [pc, #52]	; (801a5f4 <__libc_init_array+0x3c>)
 801a5be:	1ba4      	subs	r4, r4, r6
 801a5c0:	10a4      	asrs	r4, r4, #2
 801a5c2:	2500      	movs	r5, #0
 801a5c4:	42a5      	cmp	r5, r4
 801a5c6:	d109      	bne.n	801a5dc <__libc_init_array+0x24>
 801a5c8:	4e0b      	ldr	r6, [pc, #44]	; (801a5f8 <__libc_init_array+0x40>)
 801a5ca:	4c0c      	ldr	r4, [pc, #48]	; (801a5fc <__libc_init_array+0x44>)
 801a5cc:	f002 fe36 	bl	801d23c <_init>
 801a5d0:	1ba4      	subs	r4, r4, r6
 801a5d2:	10a4      	asrs	r4, r4, #2
 801a5d4:	2500      	movs	r5, #0
 801a5d6:	42a5      	cmp	r5, r4
 801a5d8:	d105      	bne.n	801a5e6 <__libc_init_array+0x2e>
 801a5da:	bd70      	pop	{r4, r5, r6, pc}
 801a5dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801a5e0:	4798      	blx	r3
 801a5e2:	3501      	adds	r5, #1
 801a5e4:	e7ee      	b.n	801a5c4 <__libc_init_array+0xc>
 801a5e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801a5ea:	4798      	blx	r3
 801a5ec:	3501      	adds	r5, #1
 801a5ee:	e7f2      	b.n	801a5d6 <__libc_init_array+0x1e>
 801a5f0:	0801dcb0 	.word	0x0801dcb0
 801a5f4:	0801dcb0 	.word	0x0801dcb0
 801a5f8:	0801dcb0 	.word	0x0801dcb0
 801a5fc:	0801dcb4 	.word	0x0801dcb4

0801a600 <memcpy>:
 801a600:	b510      	push	{r4, lr}
 801a602:	1e43      	subs	r3, r0, #1
 801a604:	440a      	add	r2, r1
 801a606:	4291      	cmp	r1, r2
 801a608:	d100      	bne.n	801a60c <memcpy+0xc>
 801a60a:	bd10      	pop	{r4, pc}
 801a60c:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a610:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a614:	e7f7      	b.n	801a606 <memcpy+0x6>

0801a616 <memset>:
 801a616:	4402      	add	r2, r0
 801a618:	4603      	mov	r3, r0
 801a61a:	4293      	cmp	r3, r2
 801a61c:	d100      	bne.n	801a620 <memset+0xa>
 801a61e:	4770      	bx	lr
 801a620:	f803 1b01 	strb.w	r1, [r3], #1
 801a624:	e7f9      	b.n	801a61a <memset+0x4>
	...

0801a628 <iprintf>:
 801a628:	b40f      	push	{r0, r1, r2, r3}
 801a62a:	4b0a      	ldr	r3, [pc, #40]	; (801a654 <iprintf+0x2c>)
 801a62c:	b513      	push	{r0, r1, r4, lr}
 801a62e:	681c      	ldr	r4, [r3, #0]
 801a630:	b124      	cbz	r4, 801a63c <iprintf+0x14>
 801a632:	69a3      	ldr	r3, [r4, #24]
 801a634:	b913      	cbnz	r3, 801a63c <iprintf+0x14>
 801a636:	4620      	mov	r0, r4
 801a638:	f000 fa7a 	bl	801ab30 <__sinit>
 801a63c:	ab05      	add	r3, sp, #20
 801a63e:	9a04      	ldr	r2, [sp, #16]
 801a640:	68a1      	ldr	r1, [r4, #8]
 801a642:	9301      	str	r3, [sp, #4]
 801a644:	4620      	mov	r0, r4
 801a646:	f000 fc3b 	bl	801aec0 <_vfiprintf_r>
 801a64a:	b002      	add	sp, #8
 801a64c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a650:	b004      	add	sp, #16
 801a652:	4770      	bx	lr
 801a654:	20001344 	.word	0x20001344

0801a658 <_puts_r>:
 801a658:	b570      	push	{r4, r5, r6, lr}
 801a65a:	460e      	mov	r6, r1
 801a65c:	4605      	mov	r5, r0
 801a65e:	b118      	cbz	r0, 801a668 <_puts_r+0x10>
 801a660:	6983      	ldr	r3, [r0, #24]
 801a662:	b90b      	cbnz	r3, 801a668 <_puts_r+0x10>
 801a664:	f000 fa64 	bl	801ab30 <__sinit>
 801a668:	69ab      	ldr	r3, [r5, #24]
 801a66a:	68ac      	ldr	r4, [r5, #8]
 801a66c:	b913      	cbnz	r3, 801a674 <_puts_r+0x1c>
 801a66e:	4628      	mov	r0, r5
 801a670:	f000 fa5e 	bl	801ab30 <__sinit>
 801a674:	4b23      	ldr	r3, [pc, #140]	; (801a704 <_puts_r+0xac>)
 801a676:	429c      	cmp	r4, r3
 801a678:	d117      	bne.n	801a6aa <_puts_r+0x52>
 801a67a:	686c      	ldr	r4, [r5, #4]
 801a67c:	89a3      	ldrh	r3, [r4, #12]
 801a67e:	071b      	lsls	r3, r3, #28
 801a680:	d51d      	bpl.n	801a6be <_puts_r+0x66>
 801a682:	6923      	ldr	r3, [r4, #16]
 801a684:	b1db      	cbz	r3, 801a6be <_puts_r+0x66>
 801a686:	3e01      	subs	r6, #1
 801a688:	68a3      	ldr	r3, [r4, #8]
 801a68a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801a68e:	3b01      	subs	r3, #1
 801a690:	60a3      	str	r3, [r4, #8]
 801a692:	b9e9      	cbnz	r1, 801a6d0 <_puts_r+0x78>
 801a694:	2b00      	cmp	r3, #0
 801a696:	da2e      	bge.n	801a6f6 <_puts_r+0x9e>
 801a698:	4622      	mov	r2, r4
 801a69a:	210a      	movs	r1, #10
 801a69c:	4628      	mov	r0, r5
 801a69e:	f000 f897 	bl	801a7d0 <__swbuf_r>
 801a6a2:	3001      	adds	r0, #1
 801a6a4:	d011      	beq.n	801a6ca <_puts_r+0x72>
 801a6a6:	200a      	movs	r0, #10
 801a6a8:	e011      	b.n	801a6ce <_puts_r+0x76>
 801a6aa:	4b17      	ldr	r3, [pc, #92]	; (801a708 <_puts_r+0xb0>)
 801a6ac:	429c      	cmp	r4, r3
 801a6ae:	d101      	bne.n	801a6b4 <_puts_r+0x5c>
 801a6b0:	68ac      	ldr	r4, [r5, #8]
 801a6b2:	e7e3      	b.n	801a67c <_puts_r+0x24>
 801a6b4:	4b15      	ldr	r3, [pc, #84]	; (801a70c <_puts_r+0xb4>)
 801a6b6:	429c      	cmp	r4, r3
 801a6b8:	bf08      	it	eq
 801a6ba:	68ec      	ldreq	r4, [r5, #12]
 801a6bc:	e7de      	b.n	801a67c <_puts_r+0x24>
 801a6be:	4621      	mov	r1, r4
 801a6c0:	4628      	mov	r0, r5
 801a6c2:	f000 f8d7 	bl	801a874 <__swsetup_r>
 801a6c6:	2800      	cmp	r0, #0
 801a6c8:	d0dd      	beq.n	801a686 <_puts_r+0x2e>
 801a6ca:	f04f 30ff 	mov.w	r0, #4294967295
 801a6ce:	bd70      	pop	{r4, r5, r6, pc}
 801a6d0:	2b00      	cmp	r3, #0
 801a6d2:	da04      	bge.n	801a6de <_puts_r+0x86>
 801a6d4:	69a2      	ldr	r2, [r4, #24]
 801a6d6:	429a      	cmp	r2, r3
 801a6d8:	dc06      	bgt.n	801a6e8 <_puts_r+0x90>
 801a6da:	290a      	cmp	r1, #10
 801a6dc:	d004      	beq.n	801a6e8 <_puts_r+0x90>
 801a6de:	6823      	ldr	r3, [r4, #0]
 801a6e0:	1c5a      	adds	r2, r3, #1
 801a6e2:	6022      	str	r2, [r4, #0]
 801a6e4:	7019      	strb	r1, [r3, #0]
 801a6e6:	e7cf      	b.n	801a688 <_puts_r+0x30>
 801a6e8:	4622      	mov	r2, r4
 801a6ea:	4628      	mov	r0, r5
 801a6ec:	f000 f870 	bl	801a7d0 <__swbuf_r>
 801a6f0:	3001      	adds	r0, #1
 801a6f2:	d1c9      	bne.n	801a688 <_puts_r+0x30>
 801a6f4:	e7e9      	b.n	801a6ca <_puts_r+0x72>
 801a6f6:	6823      	ldr	r3, [r4, #0]
 801a6f8:	200a      	movs	r0, #10
 801a6fa:	1c5a      	adds	r2, r3, #1
 801a6fc:	6022      	str	r2, [r4, #0]
 801a6fe:	7018      	strb	r0, [r3, #0]
 801a700:	e7e5      	b.n	801a6ce <_puts_r+0x76>
 801a702:	bf00      	nop
 801a704:	0801d810 	.word	0x0801d810
 801a708:	0801d830 	.word	0x0801d830
 801a70c:	0801d7f0 	.word	0x0801d7f0

0801a710 <puts>:
 801a710:	4b02      	ldr	r3, [pc, #8]	; (801a71c <puts+0xc>)
 801a712:	4601      	mov	r1, r0
 801a714:	6818      	ldr	r0, [r3, #0]
 801a716:	f7ff bf9f 	b.w	801a658 <_puts_r>
 801a71a:	bf00      	nop
 801a71c:	20001344 	.word	0x20001344

0801a720 <srand>:
 801a720:	b538      	push	{r3, r4, r5, lr}
 801a722:	4b0d      	ldr	r3, [pc, #52]	; (801a758 <srand+0x38>)
 801a724:	681c      	ldr	r4, [r3, #0]
 801a726:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801a728:	4605      	mov	r5, r0
 801a72a:	b97b      	cbnz	r3, 801a74c <srand+0x2c>
 801a72c:	2018      	movs	r0, #24
 801a72e:	f000 faed 	bl	801ad0c <malloc>
 801a732:	4a0a      	ldr	r2, [pc, #40]	; (801a75c <srand+0x3c>)
 801a734:	4b0a      	ldr	r3, [pc, #40]	; (801a760 <srand+0x40>)
 801a736:	63a0      	str	r0, [r4, #56]	; 0x38
 801a738:	e9c0 2300 	strd	r2, r3, [r0]
 801a73c:	4b09      	ldr	r3, [pc, #36]	; (801a764 <srand+0x44>)
 801a73e:	6083      	str	r3, [r0, #8]
 801a740:	230b      	movs	r3, #11
 801a742:	8183      	strh	r3, [r0, #12]
 801a744:	2201      	movs	r2, #1
 801a746:	2300      	movs	r3, #0
 801a748:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801a74c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801a74e:	2200      	movs	r2, #0
 801a750:	611d      	str	r5, [r3, #16]
 801a752:	615a      	str	r2, [r3, #20]
 801a754:	bd38      	pop	{r3, r4, r5, pc}
 801a756:	bf00      	nop
 801a758:	20001344 	.word	0x20001344
 801a75c:	abcd330e 	.word	0xabcd330e
 801a760:	e66d1234 	.word	0xe66d1234
 801a764:	0005deec 	.word	0x0005deec

0801a768 <rand>:
 801a768:	b538      	push	{r3, r4, r5, lr}
 801a76a:	4b13      	ldr	r3, [pc, #76]	; (801a7b8 <rand+0x50>)
 801a76c:	681c      	ldr	r4, [r3, #0]
 801a76e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801a770:	b97b      	cbnz	r3, 801a792 <rand+0x2a>
 801a772:	2018      	movs	r0, #24
 801a774:	f000 faca 	bl	801ad0c <malloc>
 801a778:	4a10      	ldr	r2, [pc, #64]	; (801a7bc <rand+0x54>)
 801a77a:	4b11      	ldr	r3, [pc, #68]	; (801a7c0 <rand+0x58>)
 801a77c:	63a0      	str	r0, [r4, #56]	; 0x38
 801a77e:	e9c0 2300 	strd	r2, r3, [r0]
 801a782:	4b10      	ldr	r3, [pc, #64]	; (801a7c4 <rand+0x5c>)
 801a784:	6083      	str	r3, [r0, #8]
 801a786:	230b      	movs	r3, #11
 801a788:	8183      	strh	r3, [r0, #12]
 801a78a:	2201      	movs	r2, #1
 801a78c:	2300      	movs	r3, #0
 801a78e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801a792:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801a794:	480c      	ldr	r0, [pc, #48]	; (801a7c8 <rand+0x60>)
 801a796:	690a      	ldr	r2, [r1, #16]
 801a798:	694b      	ldr	r3, [r1, #20]
 801a79a:	4c0c      	ldr	r4, [pc, #48]	; (801a7cc <rand+0x64>)
 801a79c:	4350      	muls	r0, r2
 801a79e:	fb04 0003 	mla	r0, r4, r3, r0
 801a7a2:	fba2 2304 	umull	r2, r3, r2, r4
 801a7a6:	4403      	add	r3, r0
 801a7a8:	1c54      	adds	r4, r2, #1
 801a7aa:	f143 0500 	adc.w	r5, r3, #0
 801a7ae:	e9c1 4504 	strd	r4, r5, [r1, #16]
 801a7b2:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 801a7b6:	bd38      	pop	{r3, r4, r5, pc}
 801a7b8:	20001344 	.word	0x20001344
 801a7bc:	abcd330e 	.word	0xabcd330e
 801a7c0:	e66d1234 	.word	0xe66d1234
 801a7c4:	0005deec 	.word	0x0005deec
 801a7c8:	5851f42d 	.word	0x5851f42d
 801a7cc:	4c957f2d 	.word	0x4c957f2d

0801a7d0 <__swbuf_r>:
 801a7d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a7d2:	460e      	mov	r6, r1
 801a7d4:	4614      	mov	r4, r2
 801a7d6:	4605      	mov	r5, r0
 801a7d8:	b118      	cbz	r0, 801a7e2 <__swbuf_r+0x12>
 801a7da:	6983      	ldr	r3, [r0, #24]
 801a7dc:	b90b      	cbnz	r3, 801a7e2 <__swbuf_r+0x12>
 801a7de:	f000 f9a7 	bl	801ab30 <__sinit>
 801a7e2:	4b21      	ldr	r3, [pc, #132]	; (801a868 <__swbuf_r+0x98>)
 801a7e4:	429c      	cmp	r4, r3
 801a7e6:	d12a      	bne.n	801a83e <__swbuf_r+0x6e>
 801a7e8:	686c      	ldr	r4, [r5, #4]
 801a7ea:	69a3      	ldr	r3, [r4, #24]
 801a7ec:	60a3      	str	r3, [r4, #8]
 801a7ee:	89a3      	ldrh	r3, [r4, #12]
 801a7f0:	071a      	lsls	r2, r3, #28
 801a7f2:	d52e      	bpl.n	801a852 <__swbuf_r+0x82>
 801a7f4:	6923      	ldr	r3, [r4, #16]
 801a7f6:	b363      	cbz	r3, 801a852 <__swbuf_r+0x82>
 801a7f8:	6923      	ldr	r3, [r4, #16]
 801a7fa:	6820      	ldr	r0, [r4, #0]
 801a7fc:	1ac0      	subs	r0, r0, r3
 801a7fe:	6963      	ldr	r3, [r4, #20]
 801a800:	b2f6      	uxtb	r6, r6
 801a802:	4283      	cmp	r3, r0
 801a804:	4637      	mov	r7, r6
 801a806:	dc04      	bgt.n	801a812 <__swbuf_r+0x42>
 801a808:	4621      	mov	r1, r4
 801a80a:	4628      	mov	r0, r5
 801a80c:	f000 f926 	bl	801aa5c <_fflush_r>
 801a810:	bb28      	cbnz	r0, 801a85e <__swbuf_r+0x8e>
 801a812:	68a3      	ldr	r3, [r4, #8]
 801a814:	3b01      	subs	r3, #1
 801a816:	60a3      	str	r3, [r4, #8]
 801a818:	6823      	ldr	r3, [r4, #0]
 801a81a:	1c5a      	adds	r2, r3, #1
 801a81c:	6022      	str	r2, [r4, #0]
 801a81e:	701e      	strb	r6, [r3, #0]
 801a820:	6963      	ldr	r3, [r4, #20]
 801a822:	3001      	adds	r0, #1
 801a824:	4283      	cmp	r3, r0
 801a826:	d004      	beq.n	801a832 <__swbuf_r+0x62>
 801a828:	89a3      	ldrh	r3, [r4, #12]
 801a82a:	07db      	lsls	r3, r3, #31
 801a82c:	d519      	bpl.n	801a862 <__swbuf_r+0x92>
 801a82e:	2e0a      	cmp	r6, #10
 801a830:	d117      	bne.n	801a862 <__swbuf_r+0x92>
 801a832:	4621      	mov	r1, r4
 801a834:	4628      	mov	r0, r5
 801a836:	f000 f911 	bl	801aa5c <_fflush_r>
 801a83a:	b190      	cbz	r0, 801a862 <__swbuf_r+0x92>
 801a83c:	e00f      	b.n	801a85e <__swbuf_r+0x8e>
 801a83e:	4b0b      	ldr	r3, [pc, #44]	; (801a86c <__swbuf_r+0x9c>)
 801a840:	429c      	cmp	r4, r3
 801a842:	d101      	bne.n	801a848 <__swbuf_r+0x78>
 801a844:	68ac      	ldr	r4, [r5, #8]
 801a846:	e7d0      	b.n	801a7ea <__swbuf_r+0x1a>
 801a848:	4b09      	ldr	r3, [pc, #36]	; (801a870 <__swbuf_r+0xa0>)
 801a84a:	429c      	cmp	r4, r3
 801a84c:	bf08      	it	eq
 801a84e:	68ec      	ldreq	r4, [r5, #12]
 801a850:	e7cb      	b.n	801a7ea <__swbuf_r+0x1a>
 801a852:	4621      	mov	r1, r4
 801a854:	4628      	mov	r0, r5
 801a856:	f000 f80d 	bl	801a874 <__swsetup_r>
 801a85a:	2800      	cmp	r0, #0
 801a85c:	d0cc      	beq.n	801a7f8 <__swbuf_r+0x28>
 801a85e:	f04f 37ff 	mov.w	r7, #4294967295
 801a862:	4638      	mov	r0, r7
 801a864:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a866:	bf00      	nop
 801a868:	0801d810 	.word	0x0801d810
 801a86c:	0801d830 	.word	0x0801d830
 801a870:	0801d7f0 	.word	0x0801d7f0

0801a874 <__swsetup_r>:
 801a874:	4b32      	ldr	r3, [pc, #200]	; (801a940 <__swsetup_r+0xcc>)
 801a876:	b570      	push	{r4, r5, r6, lr}
 801a878:	681d      	ldr	r5, [r3, #0]
 801a87a:	4606      	mov	r6, r0
 801a87c:	460c      	mov	r4, r1
 801a87e:	b125      	cbz	r5, 801a88a <__swsetup_r+0x16>
 801a880:	69ab      	ldr	r3, [r5, #24]
 801a882:	b913      	cbnz	r3, 801a88a <__swsetup_r+0x16>
 801a884:	4628      	mov	r0, r5
 801a886:	f000 f953 	bl	801ab30 <__sinit>
 801a88a:	4b2e      	ldr	r3, [pc, #184]	; (801a944 <__swsetup_r+0xd0>)
 801a88c:	429c      	cmp	r4, r3
 801a88e:	d10f      	bne.n	801a8b0 <__swsetup_r+0x3c>
 801a890:	686c      	ldr	r4, [r5, #4]
 801a892:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a896:	b29a      	uxth	r2, r3
 801a898:	0715      	lsls	r5, r2, #28
 801a89a:	d42c      	bmi.n	801a8f6 <__swsetup_r+0x82>
 801a89c:	06d0      	lsls	r0, r2, #27
 801a89e:	d411      	bmi.n	801a8c4 <__swsetup_r+0x50>
 801a8a0:	2209      	movs	r2, #9
 801a8a2:	6032      	str	r2, [r6, #0]
 801a8a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a8a8:	81a3      	strh	r3, [r4, #12]
 801a8aa:	f04f 30ff 	mov.w	r0, #4294967295
 801a8ae:	e03e      	b.n	801a92e <__swsetup_r+0xba>
 801a8b0:	4b25      	ldr	r3, [pc, #148]	; (801a948 <__swsetup_r+0xd4>)
 801a8b2:	429c      	cmp	r4, r3
 801a8b4:	d101      	bne.n	801a8ba <__swsetup_r+0x46>
 801a8b6:	68ac      	ldr	r4, [r5, #8]
 801a8b8:	e7eb      	b.n	801a892 <__swsetup_r+0x1e>
 801a8ba:	4b24      	ldr	r3, [pc, #144]	; (801a94c <__swsetup_r+0xd8>)
 801a8bc:	429c      	cmp	r4, r3
 801a8be:	bf08      	it	eq
 801a8c0:	68ec      	ldreq	r4, [r5, #12]
 801a8c2:	e7e6      	b.n	801a892 <__swsetup_r+0x1e>
 801a8c4:	0751      	lsls	r1, r2, #29
 801a8c6:	d512      	bpl.n	801a8ee <__swsetup_r+0x7a>
 801a8c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a8ca:	b141      	cbz	r1, 801a8de <__swsetup_r+0x6a>
 801a8cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a8d0:	4299      	cmp	r1, r3
 801a8d2:	d002      	beq.n	801a8da <__swsetup_r+0x66>
 801a8d4:	4630      	mov	r0, r6
 801a8d6:	f000 fa21 	bl	801ad1c <_free_r>
 801a8da:	2300      	movs	r3, #0
 801a8dc:	6363      	str	r3, [r4, #52]	; 0x34
 801a8de:	89a3      	ldrh	r3, [r4, #12]
 801a8e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a8e4:	81a3      	strh	r3, [r4, #12]
 801a8e6:	2300      	movs	r3, #0
 801a8e8:	6063      	str	r3, [r4, #4]
 801a8ea:	6923      	ldr	r3, [r4, #16]
 801a8ec:	6023      	str	r3, [r4, #0]
 801a8ee:	89a3      	ldrh	r3, [r4, #12]
 801a8f0:	f043 0308 	orr.w	r3, r3, #8
 801a8f4:	81a3      	strh	r3, [r4, #12]
 801a8f6:	6923      	ldr	r3, [r4, #16]
 801a8f8:	b94b      	cbnz	r3, 801a90e <__swsetup_r+0x9a>
 801a8fa:	89a3      	ldrh	r3, [r4, #12]
 801a8fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a900:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a904:	d003      	beq.n	801a90e <__swsetup_r+0x9a>
 801a906:	4621      	mov	r1, r4
 801a908:	4630      	mov	r0, r6
 801a90a:	f000 f9bf 	bl	801ac8c <__smakebuf_r>
 801a90e:	89a2      	ldrh	r2, [r4, #12]
 801a910:	f012 0301 	ands.w	r3, r2, #1
 801a914:	d00c      	beq.n	801a930 <__swsetup_r+0xbc>
 801a916:	2300      	movs	r3, #0
 801a918:	60a3      	str	r3, [r4, #8]
 801a91a:	6963      	ldr	r3, [r4, #20]
 801a91c:	425b      	negs	r3, r3
 801a91e:	61a3      	str	r3, [r4, #24]
 801a920:	6923      	ldr	r3, [r4, #16]
 801a922:	b953      	cbnz	r3, 801a93a <__swsetup_r+0xc6>
 801a924:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a928:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801a92c:	d1ba      	bne.n	801a8a4 <__swsetup_r+0x30>
 801a92e:	bd70      	pop	{r4, r5, r6, pc}
 801a930:	0792      	lsls	r2, r2, #30
 801a932:	bf58      	it	pl
 801a934:	6963      	ldrpl	r3, [r4, #20]
 801a936:	60a3      	str	r3, [r4, #8]
 801a938:	e7f2      	b.n	801a920 <__swsetup_r+0xac>
 801a93a:	2000      	movs	r0, #0
 801a93c:	e7f7      	b.n	801a92e <__swsetup_r+0xba>
 801a93e:	bf00      	nop
 801a940:	20001344 	.word	0x20001344
 801a944:	0801d810 	.word	0x0801d810
 801a948:	0801d830 	.word	0x0801d830
 801a94c:	0801d7f0 	.word	0x0801d7f0

0801a950 <__sflush_r>:
 801a950:	898a      	ldrh	r2, [r1, #12]
 801a952:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a956:	4605      	mov	r5, r0
 801a958:	0710      	lsls	r0, r2, #28
 801a95a:	460c      	mov	r4, r1
 801a95c:	d458      	bmi.n	801aa10 <__sflush_r+0xc0>
 801a95e:	684b      	ldr	r3, [r1, #4]
 801a960:	2b00      	cmp	r3, #0
 801a962:	dc05      	bgt.n	801a970 <__sflush_r+0x20>
 801a964:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a966:	2b00      	cmp	r3, #0
 801a968:	dc02      	bgt.n	801a970 <__sflush_r+0x20>
 801a96a:	2000      	movs	r0, #0
 801a96c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a970:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a972:	2e00      	cmp	r6, #0
 801a974:	d0f9      	beq.n	801a96a <__sflush_r+0x1a>
 801a976:	2300      	movs	r3, #0
 801a978:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a97c:	682f      	ldr	r7, [r5, #0]
 801a97e:	6a21      	ldr	r1, [r4, #32]
 801a980:	602b      	str	r3, [r5, #0]
 801a982:	d032      	beq.n	801a9ea <__sflush_r+0x9a>
 801a984:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a986:	89a3      	ldrh	r3, [r4, #12]
 801a988:	075a      	lsls	r2, r3, #29
 801a98a:	d505      	bpl.n	801a998 <__sflush_r+0x48>
 801a98c:	6863      	ldr	r3, [r4, #4]
 801a98e:	1ac0      	subs	r0, r0, r3
 801a990:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a992:	b10b      	cbz	r3, 801a998 <__sflush_r+0x48>
 801a994:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a996:	1ac0      	subs	r0, r0, r3
 801a998:	2300      	movs	r3, #0
 801a99a:	4602      	mov	r2, r0
 801a99c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a99e:	6a21      	ldr	r1, [r4, #32]
 801a9a0:	4628      	mov	r0, r5
 801a9a2:	47b0      	blx	r6
 801a9a4:	1c43      	adds	r3, r0, #1
 801a9a6:	89a3      	ldrh	r3, [r4, #12]
 801a9a8:	d106      	bne.n	801a9b8 <__sflush_r+0x68>
 801a9aa:	6829      	ldr	r1, [r5, #0]
 801a9ac:	291d      	cmp	r1, #29
 801a9ae:	d848      	bhi.n	801aa42 <__sflush_r+0xf2>
 801a9b0:	4a29      	ldr	r2, [pc, #164]	; (801aa58 <__sflush_r+0x108>)
 801a9b2:	40ca      	lsrs	r2, r1
 801a9b4:	07d6      	lsls	r6, r2, #31
 801a9b6:	d544      	bpl.n	801aa42 <__sflush_r+0xf2>
 801a9b8:	2200      	movs	r2, #0
 801a9ba:	6062      	str	r2, [r4, #4]
 801a9bc:	04d9      	lsls	r1, r3, #19
 801a9be:	6922      	ldr	r2, [r4, #16]
 801a9c0:	6022      	str	r2, [r4, #0]
 801a9c2:	d504      	bpl.n	801a9ce <__sflush_r+0x7e>
 801a9c4:	1c42      	adds	r2, r0, #1
 801a9c6:	d101      	bne.n	801a9cc <__sflush_r+0x7c>
 801a9c8:	682b      	ldr	r3, [r5, #0]
 801a9ca:	b903      	cbnz	r3, 801a9ce <__sflush_r+0x7e>
 801a9cc:	6560      	str	r0, [r4, #84]	; 0x54
 801a9ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a9d0:	602f      	str	r7, [r5, #0]
 801a9d2:	2900      	cmp	r1, #0
 801a9d4:	d0c9      	beq.n	801a96a <__sflush_r+0x1a>
 801a9d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a9da:	4299      	cmp	r1, r3
 801a9dc:	d002      	beq.n	801a9e4 <__sflush_r+0x94>
 801a9de:	4628      	mov	r0, r5
 801a9e0:	f000 f99c 	bl	801ad1c <_free_r>
 801a9e4:	2000      	movs	r0, #0
 801a9e6:	6360      	str	r0, [r4, #52]	; 0x34
 801a9e8:	e7c0      	b.n	801a96c <__sflush_r+0x1c>
 801a9ea:	2301      	movs	r3, #1
 801a9ec:	4628      	mov	r0, r5
 801a9ee:	47b0      	blx	r6
 801a9f0:	1c41      	adds	r1, r0, #1
 801a9f2:	d1c8      	bne.n	801a986 <__sflush_r+0x36>
 801a9f4:	682b      	ldr	r3, [r5, #0]
 801a9f6:	2b00      	cmp	r3, #0
 801a9f8:	d0c5      	beq.n	801a986 <__sflush_r+0x36>
 801a9fa:	2b1d      	cmp	r3, #29
 801a9fc:	d001      	beq.n	801aa02 <__sflush_r+0xb2>
 801a9fe:	2b16      	cmp	r3, #22
 801aa00:	d101      	bne.n	801aa06 <__sflush_r+0xb6>
 801aa02:	602f      	str	r7, [r5, #0]
 801aa04:	e7b1      	b.n	801a96a <__sflush_r+0x1a>
 801aa06:	89a3      	ldrh	r3, [r4, #12]
 801aa08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801aa0c:	81a3      	strh	r3, [r4, #12]
 801aa0e:	e7ad      	b.n	801a96c <__sflush_r+0x1c>
 801aa10:	690f      	ldr	r7, [r1, #16]
 801aa12:	2f00      	cmp	r7, #0
 801aa14:	d0a9      	beq.n	801a96a <__sflush_r+0x1a>
 801aa16:	0793      	lsls	r3, r2, #30
 801aa18:	680e      	ldr	r6, [r1, #0]
 801aa1a:	bf08      	it	eq
 801aa1c:	694b      	ldreq	r3, [r1, #20]
 801aa1e:	600f      	str	r7, [r1, #0]
 801aa20:	bf18      	it	ne
 801aa22:	2300      	movne	r3, #0
 801aa24:	eba6 0807 	sub.w	r8, r6, r7
 801aa28:	608b      	str	r3, [r1, #8]
 801aa2a:	f1b8 0f00 	cmp.w	r8, #0
 801aa2e:	dd9c      	ble.n	801a96a <__sflush_r+0x1a>
 801aa30:	4643      	mov	r3, r8
 801aa32:	463a      	mov	r2, r7
 801aa34:	6a21      	ldr	r1, [r4, #32]
 801aa36:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801aa38:	4628      	mov	r0, r5
 801aa3a:	47b0      	blx	r6
 801aa3c:	2800      	cmp	r0, #0
 801aa3e:	dc06      	bgt.n	801aa4e <__sflush_r+0xfe>
 801aa40:	89a3      	ldrh	r3, [r4, #12]
 801aa42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801aa46:	81a3      	strh	r3, [r4, #12]
 801aa48:	f04f 30ff 	mov.w	r0, #4294967295
 801aa4c:	e78e      	b.n	801a96c <__sflush_r+0x1c>
 801aa4e:	4407      	add	r7, r0
 801aa50:	eba8 0800 	sub.w	r8, r8, r0
 801aa54:	e7e9      	b.n	801aa2a <__sflush_r+0xda>
 801aa56:	bf00      	nop
 801aa58:	20400001 	.word	0x20400001

0801aa5c <_fflush_r>:
 801aa5c:	b538      	push	{r3, r4, r5, lr}
 801aa5e:	690b      	ldr	r3, [r1, #16]
 801aa60:	4605      	mov	r5, r0
 801aa62:	460c      	mov	r4, r1
 801aa64:	b1db      	cbz	r3, 801aa9e <_fflush_r+0x42>
 801aa66:	b118      	cbz	r0, 801aa70 <_fflush_r+0x14>
 801aa68:	6983      	ldr	r3, [r0, #24]
 801aa6a:	b90b      	cbnz	r3, 801aa70 <_fflush_r+0x14>
 801aa6c:	f000 f860 	bl	801ab30 <__sinit>
 801aa70:	4b0c      	ldr	r3, [pc, #48]	; (801aaa4 <_fflush_r+0x48>)
 801aa72:	429c      	cmp	r4, r3
 801aa74:	d109      	bne.n	801aa8a <_fflush_r+0x2e>
 801aa76:	686c      	ldr	r4, [r5, #4]
 801aa78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801aa7c:	b17b      	cbz	r3, 801aa9e <_fflush_r+0x42>
 801aa7e:	4621      	mov	r1, r4
 801aa80:	4628      	mov	r0, r5
 801aa82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801aa86:	f7ff bf63 	b.w	801a950 <__sflush_r>
 801aa8a:	4b07      	ldr	r3, [pc, #28]	; (801aaa8 <_fflush_r+0x4c>)
 801aa8c:	429c      	cmp	r4, r3
 801aa8e:	d101      	bne.n	801aa94 <_fflush_r+0x38>
 801aa90:	68ac      	ldr	r4, [r5, #8]
 801aa92:	e7f1      	b.n	801aa78 <_fflush_r+0x1c>
 801aa94:	4b05      	ldr	r3, [pc, #20]	; (801aaac <_fflush_r+0x50>)
 801aa96:	429c      	cmp	r4, r3
 801aa98:	bf08      	it	eq
 801aa9a:	68ec      	ldreq	r4, [r5, #12]
 801aa9c:	e7ec      	b.n	801aa78 <_fflush_r+0x1c>
 801aa9e:	2000      	movs	r0, #0
 801aaa0:	bd38      	pop	{r3, r4, r5, pc}
 801aaa2:	bf00      	nop
 801aaa4:	0801d810 	.word	0x0801d810
 801aaa8:	0801d830 	.word	0x0801d830
 801aaac:	0801d7f0 	.word	0x0801d7f0

0801aab0 <std>:
 801aab0:	2300      	movs	r3, #0
 801aab2:	b510      	push	{r4, lr}
 801aab4:	4604      	mov	r4, r0
 801aab6:	e9c0 3300 	strd	r3, r3, [r0]
 801aaba:	6083      	str	r3, [r0, #8]
 801aabc:	8181      	strh	r1, [r0, #12]
 801aabe:	6643      	str	r3, [r0, #100]	; 0x64
 801aac0:	81c2      	strh	r2, [r0, #14]
 801aac2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801aac6:	6183      	str	r3, [r0, #24]
 801aac8:	4619      	mov	r1, r3
 801aaca:	2208      	movs	r2, #8
 801aacc:	305c      	adds	r0, #92	; 0x5c
 801aace:	f7ff fda2 	bl	801a616 <memset>
 801aad2:	4b05      	ldr	r3, [pc, #20]	; (801aae8 <std+0x38>)
 801aad4:	6263      	str	r3, [r4, #36]	; 0x24
 801aad6:	4b05      	ldr	r3, [pc, #20]	; (801aaec <std+0x3c>)
 801aad8:	62a3      	str	r3, [r4, #40]	; 0x28
 801aada:	4b05      	ldr	r3, [pc, #20]	; (801aaf0 <std+0x40>)
 801aadc:	62e3      	str	r3, [r4, #44]	; 0x2c
 801aade:	4b05      	ldr	r3, [pc, #20]	; (801aaf4 <std+0x44>)
 801aae0:	6224      	str	r4, [r4, #32]
 801aae2:	6323      	str	r3, [r4, #48]	; 0x30
 801aae4:	bd10      	pop	{r4, pc}
 801aae6:	bf00      	nop
 801aae8:	0801b41d 	.word	0x0801b41d
 801aaec:	0801b43f 	.word	0x0801b43f
 801aaf0:	0801b477 	.word	0x0801b477
 801aaf4:	0801b49b 	.word	0x0801b49b

0801aaf8 <_cleanup_r>:
 801aaf8:	4901      	ldr	r1, [pc, #4]	; (801ab00 <_cleanup_r+0x8>)
 801aafa:	f000 b885 	b.w	801ac08 <_fwalk_reent>
 801aafe:	bf00      	nop
 801ab00:	0801aa5d 	.word	0x0801aa5d

0801ab04 <__sfmoreglue>:
 801ab04:	b570      	push	{r4, r5, r6, lr}
 801ab06:	1e4a      	subs	r2, r1, #1
 801ab08:	2568      	movs	r5, #104	; 0x68
 801ab0a:	4355      	muls	r5, r2
 801ab0c:	460e      	mov	r6, r1
 801ab0e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801ab12:	f000 f951 	bl	801adb8 <_malloc_r>
 801ab16:	4604      	mov	r4, r0
 801ab18:	b140      	cbz	r0, 801ab2c <__sfmoreglue+0x28>
 801ab1a:	2100      	movs	r1, #0
 801ab1c:	e9c0 1600 	strd	r1, r6, [r0]
 801ab20:	300c      	adds	r0, #12
 801ab22:	60a0      	str	r0, [r4, #8]
 801ab24:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801ab28:	f7ff fd75 	bl	801a616 <memset>
 801ab2c:	4620      	mov	r0, r4
 801ab2e:	bd70      	pop	{r4, r5, r6, pc}

0801ab30 <__sinit>:
 801ab30:	6983      	ldr	r3, [r0, #24]
 801ab32:	b510      	push	{r4, lr}
 801ab34:	4604      	mov	r4, r0
 801ab36:	bb33      	cbnz	r3, 801ab86 <__sinit+0x56>
 801ab38:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801ab3c:	6503      	str	r3, [r0, #80]	; 0x50
 801ab3e:	4b12      	ldr	r3, [pc, #72]	; (801ab88 <__sinit+0x58>)
 801ab40:	4a12      	ldr	r2, [pc, #72]	; (801ab8c <__sinit+0x5c>)
 801ab42:	681b      	ldr	r3, [r3, #0]
 801ab44:	6282      	str	r2, [r0, #40]	; 0x28
 801ab46:	4298      	cmp	r0, r3
 801ab48:	bf04      	itt	eq
 801ab4a:	2301      	moveq	r3, #1
 801ab4c:	6183      	streq	r3, [r0, #24]
 801ab4e:	f000 f81f 	bl	801ab90 <__sfp>
 801ab52:	6060      	str	r0, [r4, #4]
 801ab54:	4620      	mov	r0, r4
 801ab56:	f000 f81b 	bl	801ab90 <__sfp>
 801ab5a:	60a0      	str	r0, [r4, #8]
 801ab5c:	4620      	mov	r0, r4
 801ab5e:	f000 f817 	bl	801ab90 <__sfp>
 801ab62:	2200      	movs	r2, #0
 801ab64:	60e0      	str	r0, [r4, #12]
 801ab66:	2104      	movs	r1, #4
 801ab68:	6860      	ldr	r0, [r4, #4]
 801ab6a:	f7ff ffa1 	bl	801aab0 <std>
 801ab6e:	2201      	movs	r2, #1
 801ab70:	2109      	movs	r1, #9
 801ab72:	68a0      	ldr	r0, [r4, #8]
 801ab74:	f7ff ff9c 	bl	801aab0 <std>
 801ab78:	2202      	movs	r2, #2
 801ab7a:	2112      	movs	r1, #18
 801ab7c:	68e0      	ldr	r0, [r4, #12]
 801ab7e:	f7ff ff97 	bl	801aab0 <std>
 801ab82:	2301      	movs	r3, #1
 801ab84:	61a3      	str	r3, [r4, #24]
 801ab86:	bd10      	pop	{r4, pc}
 801ab88:	0801d7ec 	.word	0x0801d7ec
 801ab8c:	0801aaf9 	.word	0x0801aaf9

0801ab90 <__sfp>:
 801ab90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ab92:	4b1b      	ldr	r3, [pc, #108]	; (801ac00 <__sfp+0x70>)
 801ab94:	681e      	ldr	r6, [r3, #0]
 801ab96:	69b3      	ldr	r3, [r6, #24]
 801ab98:	4607      	mov	r7, r0
 801ab9a:	b913      	cbnz	r3, 801aba2 <__sfp+0x12>
 801ab9c:	4630      	mov	r0, r6
 801ab9e:	f7ff ffc7 	bl	801ab30 <__sinit>
 801aba2:	3648      	adds	r6, #72	; 0x48
 801aba4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801aba8:	3b01      	subs	r3, #1
 801abaa:	d503      	bpl.n	801abb4 <__sfp+0x24>
 801abac:	6833      	ldr	r3, [r6, #0]
 801abae:	b133      	cbz	r3, 801abbe <__sfp+0x2e>
 801abb0:	6836      	ldr	r6, [r6, #0]
 801abb2:	e7f7      	b.n	801aba4 <__sfp+0x14>
 801abb4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801abb8:	b16d      	cbz	r5, 801abd6 <__sfp+0x46>
 801abba:	3468      	adds	r4, #104	; 0x68
 801abbc:	e7f4      	b.n	801aba8 <__sfp+0x18>
 801abbe:	2104      	movs	r1, #4
 801abc0:	4638      	mov	r0, r7
 801abc2:	f7ff ff9f 	bl	801ab04 <__sfmoreglue>
 801abc6:	6030      	str	r0, [r6, #0]
 801abc8:	2800      	cmp	r0, #0
 801abca:	d1f1      	bne.n	801abb0 <__sfp+0x20>
 801abcc:	230c      	movs	r3, #12
 801abce:	603b      	str	r3, [r7, #0]
 801abd0:	4604      	mov	r4, r0
 801abd2:	4620      	mov	r0, r4
 801abd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801abd6:	4b0b      	ldr	r3, [pc, #44]	; (801ac04 <__sfp+0x74>)
 801abd8:	6665      	str	r5, [r4, #100]	; 0x64
 801abda:	e9c4 5500 	strd	r5, r5, [r4]
 801abde:	60a5      	str	r5, [r4, #8]
 801abe0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801abe4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 801abe8:	2208      	movs	r2, #8
 801abea:	4629      	mov	r1, r5
 801abec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801abf0:	f7ff fd11 	bl	801a616 <memset>
 801abf4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801abf8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801abfc:	e7e9      	b.n	801abd2 <__sfp+0x42>
 801abfe:	bf00      	nop
 801ac00:	0801d7ec 	.word	0x0801d7ec
 801ac04:	ffff0001 	.word	0xffff0001

0801ac08 <_fwalk_reent>:
 801ac08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ac0c:	4680      	mov	r8, r0
 801ac0e:	4689      	mov	r9, r1
 801ac10:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801ac14:	2600      	movs	r6, #0
 801ac16:	b914      	cbnz	r4, 801ac1e <_fwalk_reent+0x16>
 801ac18:	4630      	mov	r0, r6
 801ac1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ac1e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801ac22:	3f01      	subs	r7, #1
 801ac24:	d501      	bpl.n	801ac2a <_fwalk_reent+0x22>
 801ac26:	6824      	ldr	r4, [r4, #0]
 801ac28:	e7f5      	b.n	801ac16 <_fwalk_reent+0xe>
 801ac2a:	89ab      	ldrh	r3, [r5, #12]
 801ac2c:	2b01      	cmp	r3, #1
 801ac2e:	d907      	bls.n	801ac40 <_fwalk_reent+0x38>
 801ac30:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801ac34:	3301      	adds	r3, #1
 801ac36:	d003      	beq.n	801ac40 <_fwalk_reent+0x38>
 801ac38:	4629      	mov	r1, r5
 801ac3a:	4640      	mov	r0, r8
 801ac3c:	47c8      	blx	r9
 801ac3e:	4306      	orrs	r6, r0
 801ac40:	3568      	adds	r5, #104	; 0x68
 801ac42:	e7ee      	b.n	801ac22 <_fwalk_reent+0x1a>

0801ac44 <__swhatbuf_r>:
 801ac44:	b570      	push	{r4, r5, r6, lr}
 801ac46:	460e      	mov	r6, r1
 801ac48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ac4c:	2900      	cmp	r1, #0
 801ac4e:	b096      	sub	sp, #88	; 0x58
 801ac50:	4614      	mov	r4, r2
 801ac52:	461d      	mov	r5, r3
 801ac54:	da07      	bge.n	801ac66 <__swhatbuf_r+0x22>
 801ac56:	2300      	movs	r3, #0
 801ac58:	602b      	str	r3, [r5, #0]
 801ac5a:	89b3      	ldrh	r3, [r6, #12]
 801ac5c:	061a      	lsls	r2, r3, #24
 801ac5e:	d410      	bmi.n	801ac82 <__swhatbuf_r+0x3e>
 801ac60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ac64:	e00e      	b.n	801ac84 <__swhatbuf_r+0x40>
 801ac66:	466a      	mov	r2, sp
 801ac68:	f000 fc3e 	bl	801b4e8 <_fstat_r>
 801ac6c:	2800      	cmp	r0, #0
 801ac6e:	dbf2      	blt.n	801ac56 <__swhatbuf_r+0x12>
 801ac70:	9a01      	ldr	r2, [sp, #4]
 801ac72:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801ac76:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801ac7a:	425a      	negs	r2, r3
 801ac7c:	415a      	adcs	r2, r3
 801ac7e:	602a      	str	r2, [r5, #0]
 801ac80:	e7ee      	b.n	801ac60 <__swhatbuf_r+0x1c>
 801ac82:	2340      	movs	r3, #64	; 0x40
 801ac84:	2000      	movs	r0, #0
 801ac86:	6023      	str	r3, [r4, #0]
 801ac88:	b016      	add	sp, #88	; 0x58
 801ac8a:	bd70      	pop	{r4, r5, r6, pc}

0801ac8c <__smakebuf_r>:
 801ac8c:	898b      	ldrh	r3, [r1, #12]
 801ac8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801ac90:	079d      	lsls	r5, r3, #30
 801ac92:	4606      	mov	r6, r0
 801ac94:	460c      	mov	r4, r1
 801ac96:	d507      	bpl.n	801aca8 <__smakebuf_r+0x1c>
 801ac98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801ac9c:	6023      	str	r3, [r4, #0]
 801ac9e:	6123      	str	r3, [r4, #16]
 801aca0:	2301      	movs	r3, #1
 801aca2:	6163      	str	r3, [r4, #20]
 801aca4:	b002      	add	sp, #8
 801aca6:	bd70      	pop	{r4, r5, r6, pc}
 801aca8:	ab01      	add	r3, sp, #4
 801acaa:	466a      	mov	r2, sp
 801acac:	f7ff ffca 	bl	801ac44 <__swhatbuf_r>
 801acb0:	9900      	ldr	r1, [sp, #0]
 801acb2:	4605      	mov	r5, r0
 801acb4:	4630      	mov	r0, r6
 801acb6:	f000 f87f 	bl	801adb8 <_malloc_r>
 801acba:	b948      	cbnz	r0, 801acd0 <__smakebuf_r+0x44>
 801acbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801acc0:	059a      	lsls	r2, r3, #22
 801acc2:	d4ef      	bmi.n	801aca4 <__smakebuf_r+0x18>
 801acc4:	f023 0303 	bic.w	r3, r3, #3
 801acc8:	f043 0302 	orr.w	r3, r3, #2
 801accc:	81a3      	strh	r3, [r4, #12]
 801acce:	e7e3      	b.n	801ac98 <__smakebuf_r+0xc>
 801acd0:	4b0d      	ldr	r3, [pc, #52]	; (801ad08 <__smakebuf_r+0x7c>)
 801acd2:	62b3      	str	r3, [r6, #40]	; 0x28
 801acd4:	89a3      	ldrh	r3, [r4, #12]
 801acd6:	6020      	str	r0, [r4, #0]
 801acd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801acdc:	81a3      	strh	r3, [r4, #12]
 801acde:	9b00      	ldr	r3, [sp, #0]
 801ace0:	6163      	str	r3, [r4, #20]
 801ace2:	9b01      	ldr	r3, [sp, #4]
 801ace4:	6120      	str	r0, [r4, #16]
 801ace6:	b15b      	cbz	r3, 801ad00 <__smakebuf_r+0x74>
 801ace8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801acec:	4630      	mov	r0, r6
 801acee:	f000 fc0d 	bl	801b50c <_isatty_r>
 801acf2:	b128      	cbz	r0, 801ad00 <__smakebuf_r+0x74>
 801acf4:	89a3      	ldrh	r3, [r4, #12]
 801acf6:	f023 0303 	bic.w	r3, r3, #3
 801acfa:	f043 0301 	orr.w	r3, r3, #1
 801acfe:	81a3      	strh	r3, [r4, #12]
 801ad00:	89a3      	ldrh	r3, [r4, #12]
 801ad02:	431d      	orrs	r5, r3
 801ad04:	81a5      	strh	r5, [r4, #12]
 801ad06:	e7cd      	b.n	801aca4 <__smakebuf_r+0x18>
 801ad08:	0801aaf9 	.word	0x0801aaf9

0801ad0c <malloc>:
 801ad0c:	4b02      	ldr	r3, [pc, #8]	; (801ad18 <malloc+0xc>)
 801ad0e:	4601      	mov	r1, r0
 801ad10:	6818      	ldr	r0, [r3, #0]
 801ad12:	f000 b851 	b.w	801adb8 <_malloc_r>
 801ad16:	bf00      	nop
 801ad18:	20001344 	.word	0x20001344

0801ad1c <_free_r>:
 801ad1c:	b538      	push	{r3, r4, r5, lr}
 801ad1e:	4605      	mov	r5, r0
 801ad20:	2900      	cmp	r1, #0
 801ad22:	d045      	beq.n	801adb0 <_free_r+0x94>
 801ad24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ad28:	1f0c      	subs	r4, r1, #4
 801ad2a:	2b00      	cmp	r3, #0
 801ad2c:	bfb8      	it	lt
 801ad2e:	18e4      	addlt	r4, r4, r3
 801ad30:	f000 fc0e 	bl	801b550 <__malloc_lock>
 801ad34:	4a1f      	ldr	r2, [pc, #124]	; (801adb4 <_free_r+0x98>)
 801ad36:	6813      	ldr	r3, [r2, #0]
 801ad38:	4610      	mov	r0, r2
 801ad3a:	b933      	cbnz	r3, 801ad4a <_free_r+0x2e>
 801ad3c:	6063      	str	r3, [r4, #4]
 801ad3e:	6014      	str	r4, [r2, #0]
 801ad40:	4628      	mov	r0, r5
 801ad42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ad46:	f000 bc04 	b.w	801b552 <__malloc_unlock>
 801ad4a:	42a3      	cmp	r3, r4
 801ad4c:	d90c      	bls.n	801ad68 <_free_r+0x4c>
 801ad4e:	6821      	ldr	r1, [r4, #0]
 801ad50:	1862      	adds	r2, r4, r1
 801ad52:	4293      	cmp	r3, r2
 801ad54:	bf04      	itt	eq
 801ad56:	681a      	ldreq	r2, [r3, #0]
 801ad58:	685b      	ldreq	r3, [r3, #4]
 801ad5a:	6063      	str	r3, [r4, #4]
 801ad5c:	bf04      	itt	eq
 801ad5e:	1852      	addeq	r2, r2, r1
 801ad60:	6022      	streq	r2, [r4, #0]
 801ad62:	6004      	str	r4, [r0, #0]
 801ad64:	e7ec      	b.n	801ad40 <_free_r+0x24>
 801ad66:	4613      	mov	r3, r2
 801ad68:	685a      	ldr	r2, [r3, #4]
 801ad6a:	b10a      	cbz	r2, 801ad70 <_free_r+0x54>
 801ad6c:	42a2      	cmp	r2, r4
 801ad6e:	d9fa      	bls.n	801ad66 <_free_r+0x4a>
 801ad70:	6819      	ldr	r1, [r3, #0]
 801ad72:	1858      	adds	r0, r3, r1
 801ad74:	42a0      	cmp	r0, r4
 801ad76:	d10b      	bne.n	801ad90 <_free_r+0x74>
 801ad78:	6820      	ldr	r0, [r4, #0]
 801ad7a:	4401      	add	r1, r0
 801ad7c:	1858      	adds	r0, r3, r1
 801ad7e:	4282      	cmp	r2, r0
 801ad80:	6019      	str	r1, [r3, #0]
 801ad82:	d1dd      	bne.n	801ad40 <_free_r+0x24>
 801ad84:	6810      	ldr	r0, [r2, #0]
 801ad86:	6852      	ldr	r2, [r2, #4]
 801ad88:	605a      	str	r2, [r3, #4]
 801ad8a:	4401      	add	r1, r0
 801ad8c:	6019      	str	r1, [r3, #0]
 801ad8e:	e7d7      	b.n	801ad40 <_free_r+0x24>
 801ad90:	d902      	bls.n	801ad98 <_free_r+0x7c>
 801ad92:	230c      	movs	r3, #12
 801ad94:	602b      	str	r3, [r5, #0]
 801ad96:	e7d3      	b.n	801ad40 <_free_r+0x24>
 801ad98:	6820      	ldr	r0, [r4, #0]
 801ad9a:	1821      	adds	r1, r4, r0
 801ad9c:	428a      	cmp	r2, r1
 801ad9e:	bf04      	itt	eq
 801ada0:	6811      	ldreq	r1, [r2, #0]
 801ada2:	6852      	ldreq	r2, [r2, #4]
 801ada4:	6062      	str	r2, [r4, #4]
 801ada6:	bf04      	itt	eq
 801ada8:	1809      	addeq	r1, r1, r0
 801adaa:	6021      	streq	r1, [r4, #0]
 801adac:	605c      	str	r4, [r3, #4]
 801adae:	e7c7      	b.n	801ad40 <_free_r+0x24>
 801adb0:	bd38      	pop	{r3, r4, r5, pc}
 801adb2:	bf00      	nop
 801adb4:	20002798 	.word	0x20002798

0801adb8 <_malloc_r>:
 801adb8:	b570      	push	{r4, r5, r6, lr}
 801adba:	1ccd      	adds	r5, r1, #3
 801adbc:	f025 0503 	bic.w	r5, r5, #3
 801adc0:	3508      	adds	r5, #8
 801adc2:	2d0c      	cmp	r5, #12
 801adc4:	bf38      	it	cc
 801adc6:	250c      	movcc	r5, #12
 801adc8:	2d00      	cmp	r5, #0
 801adca:	4606      	mov	r6, r0
 801adcc:	db01      	blt.n	801add2 <_malloc_r+0x1a>
 801adce:	42a9      	cmp	r1, r5
 801add0:	d903      	bls.n	801adda <_malloc_r+0x22>
 801add2:	230c      	movs	r3, #12
 801add4:	6033      	str	r3, [r6, #0]
 801add6:	2000      	movs	r0, #0
 801add8:	bd70      	pop	{r4, r5, r6, pc}
 801adda:	f000 fbb9 	bl	801b550 <__malloc_lock>
 801adde:	4a21      	ldr	r2, [pc, #132]	; (801ae64 <_malloc_r+0xac>)
 801ade0:	6814      	ldr	r4, [r2, #0]
 801ade2:	4621      	mov	r1, r4
 801ade4:	b991      	cbnz	r1, 801ae0c <_malloc_r+0x54>
 801ade6:	4c20      	ldr	r4, [pc, #128]	; (801ae68 <_malloc_r+0xb0>)
 801ade8:	6823      	ldr	r3, [r4, #0]
 801adea:	b91b      	cbnz	r3, 801adf4 <_malloc_r+0x3c>
 801adec:	4630      	mov	r0, r6
 801adee:	f000 fb05 	bl	801b3fc <_sbrk_r>
 801adf2:	6020      	str	r0, [r4, #0]
 801adf4:	4629      	mov	r1, r5
 801adf6:	4630      	mov	r0, r6
 801adf8:	f000 fb00 	bl	801b3fc <_sbrk_r>
 801adfc:	1c43      	adds	r3, r0, #1
 801adfe:	d124      	bne.n	801ae4a <_malloc_r+0x92>
 801ae00:	230c      	movs	r3, #12
 801ae02:	6033      	str	r3, [r6, #0]
 801ae04:	4630      	mov	r0, r6
 801ae06:	f000 fba4 	bl	801b552 <__malloc_unlock>
 801ae0a:	e7e4      	b.n	801add6 <_malloc_r+0x1e>
 801ae0c:	680b      	ldr	r3, [r1, #0]
 801ae0e:	1b5b      	subs	r3, r3, r5
 801ae10:	d418      	bmi.n	801ae44 <_malloc_r+0x8c>
 801ae12:	2b0b      	cmp	r3, #11
 801ae14:	d90f      	bls.n	801ae36 <_malloc_r+0x7e>
 801ae16:	600b      	str	r3, [r1, #0]
 801ae18:	50cd      	str	r5, [r1, r3]
 801ae1a:	18cc      	adds	r4, r1, r3
 801ae1c:	4630      	mov	r0, r6
 801ae1e:	f000 fb98 	bl	801b552 <__malloc_unlock>
 801ae22:	f104 000b 	add.w	r0, r4, #11
 801ae26:	1d23      	adds	r3, r4, #4
 801ae28:	f020 0007 	bic.w	r0, r0, #7
 801ae2c:	1ac3      	subs	r3, r0, r3
 801ae2e:	d0d3      	beq.n	801add8 <_malloc_r+0x20>
 801ae30:	425a      	negs	r2, r3
 801ae32:	50e2      	str	r2, [r4, r3]
 801ae34:	e7d0      	b.n	801add8 <_malloc_r+0x20>
 801ae36:	428c      	cmp	r4, r1
 801ae38:	684b      	ldr	r3, [r1, #4]
 801ae3a:	bf16      	itet	ne
 801ae3c:	6063      	strne	r3, [r4, #4]
 801ae3e:	6013      	streq	r3, [r2, #0]
 801ae40:	460c      	movne	r4, r1
 801ae42:	e7eb      	b.n	801ae1c <_malloc_r+0x64>
 801ae44:	460c      	mov	r4, r1
 801ae46:	6849      	ldr	r1, [r1, #4]
 801ae48:	e7cc      	b.n	801ade4 <_malloc_r+0x2c>
 801ae4a:	1cc4      	adds	r4, r0, #3
 801ae4c:	f024 0403 	bic.w	r4, r4, #3
 801ae50:	42a0      	cmp	r0, r4
 801ae52:	d005      	beq.n	801ae60 <_malloc_r+0xa8>
 801ae54:	1a21      	subs	r1, r4, r0
 801ae56:	4630      	mov	r0, r6
 801ae58:	f000 fad0 	bl	801b3fc <_sbrk_r>
 801ae5c:	3001      	adds	r0, #1
 801ae5e:	d0cf      	beq.n	801ae00 <_malloc_r+0x48>
 801ae60:	6025      	str	r5, [r4, #0]
 801ae62:	e7db      	b.n	801ae1c <_malloc_r+0x64>
 801ae64:	20002798 	.word	0x20002798
 801ae68:	2000279c 	.word	0x2000279c

0801ae6c <__sfputc_r>:
 801ae6c:	6893      	ldr	r3, [r2, #8]
 801ae6e:	3b01      	subs	r3, #1
 801ae70:	2b00      	cmp	r3, #0
 801ae72:	b410      	push	{r4}
 801ae74:	6093      	str	r3, [r2, #8]
 801ae76:	da08      	bge.n	801ae8a <__sfputc_r+0x1e>
 801ae78:	6994      	ldr	r4, [r2, #24]
 801ae7a:	42a3      	cmp	r3, r4
 801ae7c:	db01      	blt.n	801ae82 <__sfputc_r+0x16>
 801ae7e:	290a      	cmp	r1, #10
 801ae80:	d103      	bne.n	801ae8a <__sfputc_r+0x1e>
 801ae82:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ae86:	f7ff bca3 	b.w	801a7d0 <__swbuf_r>
 801ae8a:	6813      	ldr	r3, [r2, #0]
 801ae8c:	1c58      	adds	r0, r3, #1
 801ae8e:	6010      	str	r0, [r2, #0]
 801ae90:	7019      	strb	r1, [r3, #0]
 801ae92:	4608      	mov	r0, r1
 801ae94:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ae98:	4770      	bx	lr

0801ae9a <__sfputs_r>:
 801ae9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ae9c:	4606      	mov	r6, r0
 801ae9e:	460f      	mov	r7, r1
 801aea0:	4614      	mov	r4, r2
 801aea2:	18d5      	adds	r5, r2, r3
 801aea4:	42ac      	cmp	r4, r5
 801aea6:	d101      	bne.n	801aeac <__sfputs_r+0x12>
 801aea8:	2000      	movs	r0, #0
 801aeaa:	e007      	b.n	801aebc <__sfputs_r+0x22>
 801aeac:	463a      	mov	r2, r7
 801aeae:	f814 1b01 	ldrb.w	r1, [r4], #1
 801aeb2:	4630      	mov	r0, r6
 801aeb4:	f7ff ffda 	bl	801ae6c <__sfputc_r>
 801aeb8:	1c43      	adds	r3, r0, #1
 801aeba:	d1f3      	bne.n	801aea4 <__sfputs_r+0xa>
 801aebc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801aec0 <_vfiprintf_r>:
 801aec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aec4:	460c      	mov	r4, r1
 801aec6:	b09d      	sub	sp, #116	; 0x74
 801aec8:	4617      	mov	r7, r2
 801aeca:	461d      	mov	r5, r3
 801aecc:	4606      	mov	r6, r0
 801aece:	b118      	cbz	r0, 801aed8 <_vfiprintf_r+0x18>
 801aed0:	6983      	ldr	r3, [r0, #24]
 801aed2:	b90b      	cbnz	r3, 801aed8 <_vfiprintf_r+0x18>
 801aed4:	f7ff fe2c 	bl	801ab30 <__sinit>
 801aed8:	4b7c      	ldr	r3, [pc, #496]	; (801b0cc <_vfiprintf_r+0x20c>)
 801aeda:	429c      	cmp	r4, r3
 801aedc:	d158      	bne.n	801af90 <_vfiprintf_r+0xd0>
 801aede:	6874      	ldr	r4, [r6, #4]
 801aee0:	89a3      	ldrh	r3, [r4, #12]
 801aee2:	0718      	lsls	r0, r3, #28
 801aee4:	d55e      	bpl.n	801afa4 <_vfiprintf_r+0xe4>
 801aee6:	6923      	ldr	r3, [r4, #16]
 801aee8:	2b00      	cmp	r3, #0
 801aeea:	d05b      	beq.n	801afa4 <_vfiprintf_r+0xe4>
 801aeec:	2300      	movs	r3, #0
 801aeee:	9309      	str	r3, [sp, #36]	; 0x24
 801aef0:	2320      	movs	r3, #32
 801aef2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801aef6:	2330      	movs	r3, #48	; 0x30
 801aef8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801aefc:	9503      	str	r5, [sp, #12]
 801aefe:	f04f 0b01 	mov.w	fp, #1
 801af02:	46b8      	mov	r8, r7
 801af04:	4645      	mov	r5, r8
 801af06:	f815 3b01 	ldrb.w	r3, [r5], #1
 801af0a:	b10b      	cbz	r3, 801af10 <_vfiprintf_r+0x50>
 801af0c:	2b25      	cmp	r3, #37	; 0x25
 801af0e:	d154      	bne.n	801afba <_vfiprintf_r+0xfa>
 801af10:	ebb8 0a07 	subs.w	sl, r8, r7
 801af14:	d00b      	beq.n	801af2e <_vfiprintf_r+0x6e>
 801af16:	4653      	mov	r3, sl
 801af18:	463a      	mov	r2, r7
 801af1a:	4621      	mov	r1, r4
 801af1c:	4630      	mov	r0, r6
 801af1e:	f7ff ffbc 	bl	801ae9a <__sfputs_r>
 801af22:	3001      	adds	r0, #1
 801af24:	f000 80c2 	beq.w	801b0ac <_vfiprintf_r+0x1ec>
 801af28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801af2a:	4453      	add	r3, sl
 801af2c:	9309      	str	r3, [sp, #36]	; 0x24
 801af2e:	f898 3000 	ldrb.w	r3, [r8]
 801af32:	2b00      	cmp	r3, #0
 801af34:	f000 80ba 	beq.w	801b0ac <_vfiprintf_r+0x1ec>
 801af38:	2300      	movs	r3, #0
 801af3a:	f04f 32ff 	mov.w	r2, #4294967295
 801af3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801af42:	9304      	str	r3, [sp, #16]
 801af44:	9307      	str	r3, [sp, #28]
 801af46:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801af4a:	931a      	str	r3, [sp, #104]	; 0x68
 801af4c:	46a8      	mov	r8, r5
 801af4e:	2205      	movs	r2, #5
 801af50:	f818 1b01 	ldrb.w	r1, [r8], #1
 801af54:	485e      	ldr	r0, [pc, #376]	; (801b0d0 <_vfiprintf_r+0x210>)
 801af56:	f7e5 f94b 	bl	80001f0 <memchr>
 801af5a:	9b04      	ldr	r3, [sp, #16]
 801af5c:	bb78      	cbnz	r0, 801afbe <_vfiprintf_r+0xfe>
 801af5e:	06d9      	lsls	r1, r3, #27
 801af60:	bf44      	itt	mi
 801af62:	2220      	movmi	r2, #32
 801af64:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801af68:	071a      	lsls	r2, r3, #28
 801af6a:	bf44      	itt	mi
 801af6c:	222b      	movmi	r2, #43	; 0x2b
 801af6e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801af72:	782a      	ldrb	r2, [r5, #0]
 801af74:	2a2a      	cmp	r2, #42	; 0x2a
 801af76:	d02a      	beq.n	801afce <_vfiprintf_r+0x10e>
 801af78:	9a07      	ldr	r2, [sp, #28]
 801af7a:	46a8      	mov	r8, r5
 801af7c:	2000      	movs	r0, #0
 801af7e:	250a      	movs	r5, #10
 801af80:	4641      	mov	r1, r8
 801af82:	f811 3b01 	ldrb.w	r3, [r1], #1
 801af86:	3b30      	subs	r3, #48	; 0x30
 801af88:	2b09      	cmp	r3, #9
 801af8a:	d969      	bls.n	801b060 <_vfiprintf_r+0x1a0>
 801af8c:	b360      	cbz	r0, 801afe8 <_vfiprintf_r+0x128>
 801af8e:	e024      	b.n	801afda <_vfiprintf_r+0x11a>
 801af90:	4b50      	ldr	r3, [pc, #320]	; (801b0d4 <_vfiprintf_r+0x214>)
 801af92:	429c      	cmp	r4, r3
 801af94:	d101      	bne.n	801af9a <_vfiprintf_r+0xda>
 801af96:	68b4      	ldr	r4, [r6, #8]
 801af98:	e7a2      	b.n	801aee0 <_vfiprintf_r+0x20>
 801af9a:	4b4f      	ldr	r3, [pc, #316]	; (801b0d8 <_vfiprintf_r+0x218>)
 801af9c:	429c      	cmp	r4, r3
 801af9e:	bf08      	it	eq
 801afa0:	68f4      	ldreq	r4, [r6, #12]
 801afa2:	e79d      	b.n	801aee0 <_vfiprintf_r+0x20>
 801afa4:	4621      	mov	r1, r4
 801afa6:	4630      	mov	r0, r6
 801afa8:	f7ff fc64 	bl	801a874 <__swsetup_r>
 801afac:	2800      	cmp	r0, #0
 801afae:	d09d      	beq.n	801aeec <_vfiprintf_r+0x2c>
 801afb0:	f04f 30ff 	mov.w	r0, #4294967295
 801afb4:	b01d      	add	sp, #116	; 0x74
 801afb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801afba:	46a8      	mov	r8, r5
 801afbc:	e7a2      	b.n	801af04 <_vfiprintf_r+0x44>
 801afbe:	4a44      	ldr	r2, [pc, #272]	; (801b0d0 <_vfiprintf_r+0x210>)
 801afc0:	1a80      	subs	r0, r0, r2
 801afc2:	fa0b f000 	lsl.w	r0, fp, r0
 801afc6:	4318      	orrs	r0, r3
 801afc8:	9004      	str	r0, [sp, #16]
 801afca:	4645      	mov	r5, r8
 801afcc:	e7be      	b.n	801af4c <_vfiprintf_r+0x8c>
 801afce:	9a03      	ldr	r2, [sp, #12]
 801afd0:	1d11      	adds	r1, r2, #4
 801afd2:	6812      	ldr	r2, [r2, #0]
 801afd4:	9103      	str	r1, [sp, #12]
 801afd6:	2a00      	cmp	r2, #0
 801afd8:	db01      	blt.n	801afde <_vfiprintf_r+0x11e>
 801afda:	9207      	str	r2, [sp, #28]
 801afdc:	e004      	b.n	801afe8 <_vfiprintf_r+0x128>
 801afde:	4252      	negs	r2, r2
 801afe0:	f043 0302 	orr.w	r3, r3, #2
 801afe4:	9207      	str	r2, [sp, #28]
 801afe6:	9304      	str	r3, [sp, #16]
 801afe8:	f898 3000 	ldrb.w	r3, [r8]
 801afec:	2b2e      	cmp	r3, #46	; 0x2e
 801afee:	d10e      	bne.n	801b00e <_vfiprintf_r+0x14e>
 801aff0:	f898 3001 	ldrb.w	r3, [r8, #1]
 801aff4:	2b2a      	cmp	r3, #42	; 0x2a
 801aff6:	d138      	bne.n	801b06a <_vfiprintf_r+0x1aa>
 801aff8:	9b03      	ldr	r3, [sp, #12]
 801affa:	1d1a      	adds	r2, r3, #4
 801affc:	681b      	ldr	r3, [r3, #0]
 801affe:	9203      	str	r2, [sp, #12]
 801b000:	2b00      	cmp	r3, #0
 801b002:	bfb8      	it	lt
 801b004:	f04f 33ff 	movlt.w	r3, #4294967295
 801b008:	f108 0802 	add.w	r8, r8, #2
 801b00c:	9305      	str	r3, [sp, #20]
 801b00e:	4d33      	ldr	r5, [pc, #204]	; (801b0dc <_vfiprintf_r+0x21c>)
 801b010:	f898 1000 	ldrb.w	r1, [r8]
 801b014:	2203      	movs	r2, #3
 801b016:	4628      	mov	r0, r5
 801b018:	f7e5 f8ea 	bl	80001f0 <memchr>
 801b01c:	b140      	cbz	r0, 801b030 <_vfiprintf_r+0x170>
 801b01e:	2340      	movs	r3, #64	; 0x40
 801b020:	1b40      	subs	r0, r0, r5
 801b022:	fa03 f000 	lsl.w	r0, r3, r0
 801b026:	9b04      	ldr	r3, [sp, #16]
 801b028:	4303      	orrs	r3, r0
 801b02a:	f108 0801 	add.w	r8, r8, #1
 801b02e:	9304      	str	r3, [sp, #16]
 801b030:	f898 1000 	ldrb.w	r1, [r8]
 801b034:	482a      	ldr	r0, [pc, #168]	; (801b0e0 <_vfiprintf_r+0x220>)
 801b036:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b03a:	2206      	movs	r2, #6
 801b03c:	f108 0701 	add.w	r7, r8, #1
 801b040:	f7e5 f8d6 	bl	80001f0 <memchr>
 801b044:	2800      	cmp	r0, #0
 801b046:	d037      	beq.n	801b0b8 <_vfiprintf_r+0x1f8>
 801b048:	4b26      	ldr	r3, [pc, #152]	; (801b0e4 <_vfiprintf_r+0x224>)
 801b04a:	bb1b      	cbnz	r3, 801b094 <_vfiprintf_r+0x1d4>
 801b04c:	9b03      	ldr	r3, [sp, #12]
 801b04e:	3307      	adds	r3, #7
 801b050:	f023 0307 	bic.w	r3, r3, #7
 801b054:	3308      	adds	r3, #8
 801b056:	9303      	str	r3, [sp, #12]
 801b058:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b05a:	444b      	add	r3, r9
 801b05c:	9309      	str	r3, [sp, #36]	; 0x24
 801b05e:	e750      	b.n	801af02 <_vfiprintf_r+0x42>
 801b060:	fb05 3202 	mla	r2, r5, r2, r3
 801b064:	2001      	movs	r0, #1
 801b066:	4688      	mov	r8, r1
 801b068:	e78a      	b.n	801af80 <_vfiprintf_r+0xc0>
 801b06a:	2300      	movs	r3, #0
 801b06c:	f108 0801 	add.w	r8, r8, #1
 801b070:	9305      	str	r3, [sp, #20]
 801b072:	4619      	mov	r1, r3
 801b074:	250a      	movs	r5, #10
 801b076:	4640      	mov	r0, r8
 801b078:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b07c:	3a30      	subs	r2, #48	; 0x30
 801b07e:	2a09      	cmp	r2, #9
 801b080:	d903      	bls.n	801b08a <_vfiprintf_r+0x1ca>
 801b082:	2b00      	cmp	r3, #0
 801b084:	d0c3      	beq.n	801b00e <_vfiprintf_r+0x14e>
 801b086:	9105      	str	r1, [sp, #20]
 801b088:	e7c1      	b.n	801b00e <_vfiprintf_r+0x14e>
 801b08a:	fb05 2101 	mla	r1, r5, r1, r2
 801b08e:	2301      	movs	r3, #1
 801b090:	4680      	mov	r8, r0
 801b092:	e7f0      	b.n	801b076 <_vfiprintf_r+0x1b6>
 801b094:	ab03      	add	r3, sp, #12
 801b096:	9300      	str	r3, [sp, #0]
 801b098:	4622      	mov	r2, r4
 801b09a:	4b13      	ldr	r3, [pc, #76]	; (801b0e8 <_vfiprintf_r+0x228>)
 801b09c:	a904      	add	r1, sp, #16
 801b09e:	4630      	mov	r0, r6
 801b0a0:	f3af 8000 	nop.w
 801b0a4:	f1b0 3fff 	cmp.w	r0, #4294967295
 801b0a8:	4681      	mov	r9, r0
 801b0aa:	d1d5      	bne.n	801b058 <_vfiprintf_r+0x198>
 801b0ac:	89a3      	ldrh	r3, [r4, #12]
 801b0ae:	065b      	lsls	r3, r3, #25
 801b0b0:	f53f af7e 	bmi.w	801afb0 <_vfiprintf_r+0xf0>
 801b0b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b0b6:	e77d      	b.n	801afb4 <_vfiprintf_r+0xf4>
 801b0b8:	ab03      	add	r3, sp, #12
 801b0ba:	9300      	str	r3, [sp, #0]
 801b0bc:	4622      	mov	r2, r4
 801b0be:	4b0a      	ldr	r3, [pc, #40]	; (801b0e8 <_vfiprintf_r+0x228>)
 801b0c0:	a904      	add	r1, sp, #16
 801b0c2:	4630      	mov	r0, r6
 801b0c4:	f000 f888 	bl	801b1d8 <_printf_i>
 801b0c8:	e7ec      	b.n	801b0a4 <_vfiprintf_r+0x1e4>
 801b0ca:	bf00      	nop
 801b0cc:	0801d810 	.word	0x0801d810
 801b0d0:	0801d850 	.word	0x0801d850
 801b0d4:	0801d830 	.word	0x0801d830
 801b0d8:	0801d7f0 	.word	0x0801d7f0
 801b0dc:	0801d856 	.word	0x0801d856
 801b0e0:	0801d85a 	.word	0x0801d85a
 801b0e4:	00000000 	.word	0x00000000
 801b0e8:	0801ae9b 	.word	0x0801ae9b

0801b0ec <_printf_common>:
 801b0ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b0f0:	4691      	mov	r9, r2
 801b0f2:	461f      	mov	r7, r3
 801b0f4:	688a      	ldr	r2, [r1, #8]
 801b0f6:	690b      	ldr	r3, [r1, #16]
 801b0f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801b0fc:	4293      	cmp	r3, r2
 801b0fe:	bfb8      	it	lt
 801b100:	4613      	movlt	r3, r2
 801b102:	f8c9 3000 	str.w	r3, [r9]
 801b106:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801b10a:	4606      	mov	r6, r0
 801b10c:	460c      	mov	r4, r1
 801b10e:	b112      	cbz	r2, 801b116 <_printf_common+0x2a>
 801b110:	3301      	adds	r3, #1
 801b112:	f8c9 3000 	str.w	r3, [r9]
 801b116:	6823      	ldr	r3, [r4, #0]
 801b118:	0699      	lsls	r1, r3, #26
 801b11a:	bf42      	ittt	mi
 801b11c:	f8d9 3000 	ldrmi.w	r3, [r9]
 801b120:	3302      	addmi	r3, #2
 801b122:	f8c9 3000 	strmi.w	r3, [r9]
 801b126:	6825      	ldr	r5, [r4, #0]
 801b128:	f015 0506 	ands.w	r5, r5, #6
 801b12c:	d107      	bne.n	801b13e <_printf_common+0x52>
 801b12e:	f104 0a19 	add.w	sl, r4, #25
 801b132:	68e3      	ldr	r3, [r4, #12]
 801b134:	f8d9 2000 	ldr.w	r2, [r9]
 801b138:	1a9b      	subs	r3, r3, r2
 801b13a:	42ab      	cmp	r3, r5
 801b13c:	dc28      	bgt.n	801b190 <_printf_common+0xa4>
 801b13e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801b142:	6822      	ldr	r2, [r4, #0]
 801b144:	3300      	adds	r3, #0
 801b146:	bf18      	it	ne
 801b148:	2301      	movne	r3, #1
 801b14a:	0692      	lsls	r2, r2, #26
 801b14c:	d42d      	bmi.n	801b1aa <_printf_common+0xbe>
 801b14e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b152:	4639      	mov	r1, r7
 801b154:	4630      	mov	r0, r6
 801b156:	47c0      	blx	r8
 801b158:	3001      	adds	r0, #1
 801b15a:	d020      	beq.n	801b19e <_printf_common+0xb2>
 801b15c:	6823      	ldr	r3, [r4, #0]
 801b15e:	68e5      	ldr	r5, [r4, #12]
 801b160:	f8d9 2000 	ldr.w	r2, [r9]
 801b164:	f003 0306 	and.w	r3, r3, #6
 801b168:	2b04      	cmp	r3, #4
 801b16a:	bf08      	it	eq
 801b16c:	1aad      	subeq	r5, r5, r2
 801b16e:	68a3      	ldr	r3, [r4, #8]
 801b170:	6922      	ldr	r2, [r4, #16]
 801b172:	bf0c      	ite	eq
 801b174:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b178:	2500      	movne	r5, #0
 801b17a:	4293      	cmp	r3, r2
 801b17c:	bfc4      	itt	gt
 801b17e:	1a9b      	subgt	r3, r3, r2
 801b180:	18ed      	addgt	r5, r5, r3
 801b182:	f04f 0900 	mov.w	r9, #0
 801b186:	341a      	adds	r4, #26
 801b188:	454d      	cmp	r5, r9
 801b18a:	d11a      	bne.n	801b1c2 <_printf_common+0xd6>
 801b18c:	2000      	movs	r0, #0
 801b18e:	e008      	b.n	801b1a2 <_printf_common+0xb6>
 801b190:	2301      	movs	r3, #1
 801b192:	4652      	mov	r2, sl
 801b194:	4639      	mov	r1, r7
 801b196:	4630      	mov	r0, r6
 801b198:	47c0      	blx	r8
 801b19a:	3001      	adds	r0, #1
 801b19c:	d103      	bne.n	801b1a6 <_printf_common+0xba>
 801b19e:	f04f 30ff 	mov.w	r0, #4294967295
 801b1a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b1a6:	3501      	adds	r5, #1
 801b1a8:	e7c3      	b.n	801b132 <_printf_common+0x46>
 801b1aa:	18e1      	adds	r1, r4, r3
 801b1ac:	1c5a      	adds	r2, r3, #1
 801b1ae:	2030      	movs	r0, #48	; 0x30
 801b1b0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801b1b4:	4422      	add	r2, r4
 801b1b6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801b1ba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801b1be:	3302      	adds	r3, #2
 801b1c0:	e7c5      	b.n	801b14e <_printf_common+0x62>
 801b1c2:	2301      	movs	r3, #1
 801b1c4:	4622      	mov	r2, r4
 801b1c6:	4639      	mov	r1, r7
 801b1c8:	4630      	mov	r0, r6
 801b1ca:	47c0      	blx	r8
 801b1cc:	3001      	adds	r0, #1
 801b1ce:	d0e6      	beq.n	801b19e <_printf_common+0xb2>
 801b1d0:	f109 0901 	add.w	r9, r9, #1
 801b1d4:	e7d8      	b.n	801b188 <_printf_common+0x9c>
	...

0801b1d8 <_printf_i>:
 801b1d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b1dc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801b1e0:	460c      	mov	r4, r1
 801b1e2:	7e09      	ldrb	r1, [r1, #24]
 801b1e4:	b085      	sub	sp, #20
 801b1e6:	296e      	cmp	r1, #110	; 0x6e
 801b1e8:	4617      	mov	r7, r2
 801b1ea:	4606      	mov	r6, r0
 801b1ec:	4698      	mov	r8, r3
 801b1ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b1f0:	f000 80b3 	beq.w	801b35a <_printf_i+0x182>
 801b1f4:	d822      	bhi.n	801b23c <_printf_i+0x64>
 801b1f6:	2963      	cmp	r1, #99	; 0x63
 801b1f8:	d036      	beq.n	801b268 <_printf_i+0x90>
 801b1fa:	d80a      	bhi.n	801b212 <_printf_i+0x3a>
 801b1fc:	2900      	cmp	r1, #0
 801b1fe:	f000 80b9 	beq.w	801b374 <_printf_i+0x19c>
 801b202:	2958      	cmp	r1, #88	; 0x58
 801b204:	f000 8083 	beq.w	801b30e <_printf_i+0x136>
 801b208:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b20c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801b210:	e032      	b.n	801b278 <_printf_i+0xa0>
 801b212:	2964      	cmp	r1, #100	; 0x64
 801b214:	d001      	beq.n	801b21a <_printf_i+0x42>
 801b216:	2969      	cmp	r1, #105	; 0x69
 801b218:	d1f6      	bne.n	801b208 <_printf_i+0x30>
 801b21a:	6820      	ldr	r0, [r4, #0]
 801b21c:	6813      	ldr	r3, [r2, #0]
 801b21e:	0605      	lsls	r5, r0, #24
 801b220:	f103 0104 	add.w	r1, r3, #4
 801b224:	d52a      	bpl.n	801b27c <_printf_i+0xa4>
 801b226:	681b      	ldr	r3, [r3, #0]
 801b228:	6011      	str	r1, [r2, #0]
 801b22a:	2b00      	cmp	r3, #0
 801b22c:	da03      	bge.n	801b236 <_printf_i+0x5e>
 801b22e:	222d      	movs	r2, #45	; 0x2d
 801b230:	425b      	negs	r3, r3
 801b232:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801b236:	486f      	ldr	r0, [pc, #444]	; (801b3f4 <_printf_i+0x21c>)
 801b238:	220a      	movs	r2, #10
 801b23a:	e039      	b.n	801b2b0 <_printf_i+0xd8>
 801b23c:	2973      	cmp	r1, #115	; 0x73
 801b23e:	f000 809d 	beq.w	801b37c <_printf_i+0x1a4>
 801b242:	d808      	bhi.n	801b256 <_printf_i+0x7e>
 801b244:	296f      	cmp	r1, #111	; 0x6f
 801b246:	d020      	beq.n	801b28a <_printf_i+0xb2>
 801b248:	2970      	cmp	r1, #112	; 0x70
 801b24a:	d1dd      	bne.n	801b208 <_printf_i+0x30>
 801b24c:	6823      	ldr	r3, [r4, #0]
 801b24e:	f043 0320 	orr.w	r3, r3, #32
 801b252:	6023      	str	r3, [r4, #0]
 801b254:	e003      	b.n	801b25e <_printf_i+0x86>
 801b256:	2975      	cmp	r1, #117	; 0x75
 801b258:	d017      	beq.n	801b28a <_printf_i+0xb2>
 801b25a:	2978      	cmp	r1, #120	; 0x78
 801b25c:	d1d4      	bne.n	801b208 <_printf_i+0x30>
 801b25e:	2378      	movs	r3, #120	; 0x78
 801b260:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801b264:	4864      	ldr	r0, [pc, #400]	; (801b3f8 <_printf_i+0x220>)
 801b266:	e055      	b.n	801b314 <_printf_i+0x13c>
 801b268:	6813      	ldr	r3, [r2, #0]
 801b26a:	1d19      	adds	r1, r3, #4
 801b26c:	681b      	ldr	r3, [r3, #0]
 801b26e:	6011      	str	r1, [r2, #0]
 801b270:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b274:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b278:	2301      	movs	r3, #1
 801b27a:	e08c      	b.n	801b396 <_printf_i+0x1be>
 801b27c:	681b      	ldr	r3, [r3, #0]
 801b27e:	6011      	str	r1, [r2, #0]
 801b280:	f010 0f40 	tst.w	r0, #64	; 0x40
 801b284:	bf18      	it	ne
 801b286:	b21b      	sxthne	r3, r3
 801b288:	e7cf      	b.n	801b22a <_printf_i+0x52>
 801b28a:	6813      	ldr	r3, [r2, #0]
 801b28c:	6825      	ldr	r5, [r4, #0]
 801b28e:	1d18      	adds	r0, r3, #4
 801b290:	6010      	str	r0, [r2, #0]
 801b292:	0628      	lsls	r0, r5, #24
 801b294:	d501      	bpl.n	801b29a <_printf_i+0xc2>
 801b296:	681b      	ldr	r3, [r3, #0]
 801b298:	e002      	b.n	801b2a0 <_printf_i+0xc8>
 801b29a:	0668      	lsls	r0, r5, #25
 801b29c:	d5fb      	bpl.n	801b296 <_printf_i+0xbe>
 801b29e:	881b      	ldrh	r3, [r3, #0]
 801b2a0:	4854      	ldr	r0, [pc, #336]	; (801b3f4 <_printf_i+0x21c>)
 801b2a2:	296f      	cmp	r1, #111	; 0x6f
 801b2a4:	bf14      	ite	ne
 801b2a6:	220a      	movne	r2, #10
 801b2a8:	2208      	moveq	r2, #8
 801b2aa:	2100      	movs	r1, #0
 801b2ac:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801b2b0:	6865      	ldr	r5, [r4, #4]
 801b2b2:	60a5      	str	r5, [r4, #8]
 801b2b4:	2d00      	cmp	r5, #0
 801b2b6:	f2c0 8095 	blt.w	801b3e4 <_printf_i+0x20c>
 801b2ba:	6821      	ldr	r1, [r4, #0]
 801b2bc:	f021 0104 	bic.w	r1, r1, #4
 801b2c0:	6021      	str	r1, [r4, #0]
 801b2c2:	2b00      	cmp	r3, #0
 801b2c4:	d13d      	bne.n	801b342 <_printf_i+0x16a>
 801b2c6:	2d00      	cmp	r5, #0
 801b2c8:	f040 808e 	bne.w	801b3e8 <_printf_i+0x210>
 801b2cc:	4665      	mov	r5, ip
 801b2ce:	2a08      	cmp	r2, #8
 801b2d0:	d10b      	bne.n	801b2ea <_printf_i+0x112>
 801b2d2:	6823      	ldr	r3, [r4, #0]
 801b2d4:	07db      	lsls	r3, r3, #31
 801b2d6:	d508      	bpl.n	801b2ea <_printf_i+0x112>
 801b2d8:	6923      	ldr	r3, [r4, #16]
 801b2da:	6862      	ldr	r2, [r4, #4]
 801b2dc:	429a      	cmp	r2, r3
 801b2de:	bfde      	ittt	le
 801b2e0:	2330      	movle	r3, #48	; 0x30
 801b2e2:	f805 3c01 	strble.w	r3, [r5, #-1]
 801b2e6:	f105 35ff 	addle.w	r5, r5, #4294967295
 801b2ea:	ebac 0305 	sub.w	r3, ip, r5
 801b2ee:	6123      	str	r3, [r4, #16]
 801b2f0:	f8cd 8000 	str.w	r8, [sp]
 801b2f4:	463b      	mov	r3, r7
 801b2f6:	aa03      	add	r2, sp, #12
 801b2f8:	4621      	mov	r1, r4
 801b2fa:	4630      	mov	r0, r6
 801b2fc:	f7ff fef6 	bl	801b0ec <_printf_common>
 801b300:	3001      	adds	r0, #1
 801b302:	d14d      	bne.n	801b3a0 <_printf_i+0x1c8>
 801b304:	f04f 30ff 	mov.w	r0, #4294967295
 801b308:	b005      	add	sp, #20
 801b30a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b30e:	4839      	ldr	r0, [pc, #228]	; (801b3f4 <_printf_i+0x21c>)
 801b310:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801b314:	6813      	ldr	r3, [r2, #0]
 801b316:	6821      	ldr	r1, [r4, #0]
 801b318:	1d1d      	adds	r5, r3, #4
 801b31a:	681b      	ldr	r3, [r3, #0]
 801b31c:	6015      	str	r5, [r2, #0]
 801b31e:	060a      	lsls	r2, r1, #24
 801b320:	d50b      	bpl.n	801b33a <_printf_i+0x162>
 801b322:	07ca      	lsls	r2, r1, #31
 801b324:	bf44      	itt	mi
 801b326:	f041 0120 	orrmi.w	r1, r1, #32
 801b32a:	6021      	strmi	r1, [r4, #0]
 801b32c:	b91b      	cbnz	r3, 801b336 <_printf_i+0x15e>
 801b32e:	6822      	ldr	r2, [r4, #0]
 801b330:	f022 0220 	bic.w	r2, r2, #32
 801b334:	6022      	str	r2, [r4, #0]
 801b336:	2210      	movs	r2, #16
 801b338:	e7b7      	b.n	801b2aa <_printf_i+0xd2>
 801b33a:	064d      	lsls	r5, r1, #25
 801b33c:	bf48      	it	mi
 801b33e:	b29b      	uxthmi	r3, r3
 801b340:	e7ef      	b.n	801b322 <_printf_i+0x14a>
 801b342:	4665      	mov	r5, ip
 801b344:	fbb3 f1f2 	udiv	r1, r3, r2
 801b348:	fb02 3311 	mls	r3, r2, r1, r3
 801b34c:	5cc3      	ldrb	r3, [r0, r3]
 801b34e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801b352:	460b      	mov	r3, r1
 801b354:	2900      	cmp	r1, #0
 801b356:	d1f5      	bne.n	801b344 <_printf_i+0x16c>
 801b358:	e7b9      	b.n	801b2ce <_printf_i+0xf6>
 801b35a:	6813      	ldr	r3, [r2, #0]
 801b35c:	6825      	ldr	r5, [r4, #0]
 801b35e:	6961      	ldr	r1, [r4, #20]
 801b360:	1d18      	adds	r0, r3, #4
 801b362:	6010      	str	r0, [r2, #0]
 801b364:	0628      	lsls	r0, r5, #24
 801b366:	681b      	ldr	r3, [r3, #0]
 801b368:	d501      	bpl.n	801b36e <_printf_i+0x196>
 801b36a:	6019      	str	r1, [r3, #0]
 801b36c:	e002      	b.n	801b374 <_printf_i+0x19c>
 801b36e:	066a      	lsls	r2, r5, #25
 801b370:	d5fb      	bpl.n	801b36a <_printf_i+0x192>
 801b372:	8019      	strh	r1, [r3, #0]
 801b374:	2300      	movs	r3, #0
 801b376:	6123      	str	r3, [r4, #16]
 801b378:	4665      	mov	r5, ip
 801b37a:	e7b9      	b.n	801b2f0 <_printf_i+0x118>
 801b37c:	6813      	ldr	r3, [r2, #0]
 801b37e:	1d19      	adds	r1, r3, #4
 801b380:	6011      	str	r1, [r2, #0]
 801b382:	681d      	ldr	r5, [r3, #0]
 801b384:	6862      	ldr	r2, [r4, #4]
 801b386:	2100      	movs	r1, #0
 801b388:	4628      	mov	r0, r5
 801b38a:	f7e4 ff31 	bl	80001f0 <memchr>
 801b38e:	b108      	cbz	r0, 801b394 <_printf_i+0x1bc>
 801b390:	1b40      	subs	r0, r0, r5
 801b392:	6060      	str	r0, [r4, #4]
 801b394:	6863      	ldr	r3, [r4, #4]
 801b396:	6123      	str	r3, [r4, #16]
 801b398:	2300      	movs	r3, #0
 801b39a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b39e:	e7a7      	b.n	801b2f0 <_printf_i+0x118>
 801b3a0:	6923      	ldr	r3, [r4, #16]
 801b3a2:	462a      	mov	r2, r5
 801b3a4:	4639      	mov	r1, r7
 801b3a6:	4630      	mov	r0, r6
 801b3a8:	47c0      	blx	r8
 801b3aa:	3001      	adds	r0, #1
 801b3ac:	d0aa      	beq.n	801b304 <_printf_i+0x12c>
 801b3ae:	6823      	ldr	r3, [r4, #0]
 801b3b0:	079b      	lsls	r3, r3, #30
 801b3b2:	d413      	bmi.n	801b3dc <_printf_i+0x204>
 801b3b4:	68e0      	ldr	r0, [r4, #12]
 801b3b6:	9b03      	ldr	r3, [sp, #12]
 801b3b8:	4298      	cmp	r0, r3
 801b3ba:	bfb8      	it	lt
 801b3bc:	4618      	movlt	r0, r3
 801b3be:	e7a3      	b.n	801b308 <_printf_i+0x130>
 801b3c0:	2301      	movs	r3, #1
 801b3c2:	464a      	mov	r2, r9
 801b3c4:	4639      	mov	r1, r7
 801b3c6:	4630      	mov	r0, r6
 801b3c8:	47c0      	blx	r8
 801b3ca:	3001      	adds	r0, #1
 801b3cc:	d09a      	beq.n	801b304 <_printf_i+0x12c>
 801b3ce:	3501      	adds	r5, #1
 801b3d0:	68e3      	ldr	r3, [r4, #12]
 801b3d2:	9a03      	ldr	r2, [sp, #12]
 801b3d4:	1a9b      	subs	r3, r3, r2
 801b3d6:	42ab      	cmp	r3, r5
 801b3d8:	dcf2      	bgt.n	801b3c0 <_printf_i+0x1e8>
 801b3da:	e7eb      	b.n	801b3b4 <_printf_i+0x1dc>
 801b3dc:	2500      	movs	r5, #0
 801b3de:	f104 0919 	add.w	r9, r4, #25
 801b3e2:	e7f5      	b.n	801b3d0 <_printf_i+0x1f8>
 801b3e4:	2b00      	cmp	r3, #0
 801b3e6:	d1ac      	bne.n	801b342 <_printf_i+0x16a>
 801b3e8:	7803      	ldrb	r3, [r0, #0]
 801b3ea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b3ee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b3f2:	e76c      	b.n	801b2ce <_printf_i+0xf6>
 801b3f4:	0801d861 	.word	0x0801d861
 801b3f8:	0801d872 	.word	0x0801d872

0801b3fc <_sbrk_r>:
 801b3fc:	b538      	push	{r3, r4, r5, lr}
 801b3fe:	4c06      	ldr	r4, [pc, #24]	; (801b418 <_sbrk_r+0x1c>)
 801b400:	2300      	movs	r3, #0
 801b402:	4605      	mov	r5, r0
 801b404:	4608      	mov	r0, r1
 801b406:	6023      	str	r3, [r4, #0]
 801b408:	f7e8 fa78 	bl	80038fc <_sbrk>
 801b40c:	1c43      	adds	r3, r0, #1
 801b40e:	d102      	bne.n	801b416 <_sbrk_r+0x1a>
 801b410:	6823      	ldr	r3, [r4, #0]
 801b412:	b103      	cbz	r3, 801b416 <_sbrk_r+0x1a>
 801b414:	602b      	str	r3, [r5, #0]
 801b416:	bd38      	pop	{r3, r4, r5, pc}
 801b418:	20002a74 	.word	0x20002a74

0801b41c <__sread>:
 801b41c:	b510      	push	{r4, lr}
 801b41e:	460c      	mov	r4, r1
 801b420:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b424:	f000 f896 	bl	801b554 <_read_r>
 801b428:	2800      	cmp	r0, #0
 801b42a:	bfab      	itete	ge
 801b42c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801b42e:	89a3      	ldrhlt	r3, [r4, #12]
 801b430:	181b      	addge	r3, r3, r0
 801b432:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801b436:	bfac      	ite	ge
 801b438:	6563      	strge	r3, [r4, #84]	; 0x54
 801b43a:	81a3      	strhlt	r3, [r4, #12]
 801b43c:	bd10      	pop	{r4, pc}

0801b43e <__swrite>:
 801b43e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b442:	461f      	mov	r7, r3
 801b444:	898b      	ldrh	r3, [r1, #12]
 801b446:	05db      	lsls	r3, r3, #23
 801b448:	4605      	mov	r5, r0
 801b44a:	460c      	mov	r4, r1
 801b44c:	4616      	mov	r6, r2
 801b44e:	d505      	bpl.n	801b45c <__swrite+0x1e>
 801b450:	2302      	movs	r3, #2
 801b452:	2200      	movs	r2, #0
 801b454:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b458:	f000 f868 	bl	801b52c <_lseek_r>
 801b45c:	89a3      	ldrh	r3, [r4, #12]
 801b45e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b462:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b466:	81a3      	strh	r3, [r4, #12]
 801b468:	4632      	mov	r2, r6
 801b46a:	463b      	mov	r3, r7
 801b46c:	4628      	mov	r0, r5
 801b46e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b472:	f000 b817 	b.w	801b4a4 <_write_r>

0801b476 <__sseek>:
 801b476:	b510      	push	{r4, lr}
 801b478:	460c      	mov	r4, r1
 801b47a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b47e:	f000 f855 	bl	801b52c <_lseek_r>
 801b482:	1c43      	adds	r3, r0, #1
 801b484:	89a3      	ldrh	r3, [r4, #12]
 801b486:	bf15      	itete	ne
 801b488:	6560      	strne	r0, [r4, #84]	; 0x54
 801b48a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801b48e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801b492:	81a3      	strheq	r3, [r4, #12]
 801b494:	bf18      	it	ne
 801b496:	81a3      	strhne	r3, [r4, #12]
 801b498:	bd10      	pop	{r4, pc}

0801b49a <__sclose>:
 801b49a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b49e:	f000 b813 	b.w	801b4c8 <_close_r>
	...

0801b4a4 <_write_r>:
 801b4a4:	b538      	push	{r3, r4, r5, lr}
 801b4a6:	4c07      	ldr	r4, [pc, #28]	; (801b4c4 <_write_r+0x20>)
 801b4a8:	4605      	mov	r5, r0
 801b4aa:	4608      	mov	r0, r1
 801b4ac:	4611      	mov	r1, r2
 801b4ae:	2200      	movs	r2, #0
 801b4b0:	6022      	str	r2, [r4, #0]
 801b4b2:	461a      	mov	r2, r3
 801b4b4:	f7e8 f9d1 	bl	800385a <_write>
 801b4b8:	1c43      	adds	r3, r0, #1
 801b4ba:	d102      	bne.n	801b4c2 <_write_r+0x1e>
 801b4bc:	6823      	ldr	r3, [r4, #0]
 801b4be:	b103      	cbz	r3, 801b4c2 <_write_r+0x1e>
 801b4c0:	602b      	str	r3, [r5, #0]
 801b4c2:	bd38      	pop	{r3, r4, r5, pc}
 801b4c4:	20002a74 	.word	0x20002a74

0801b4c8 <_close_r>:
 801b4c8:	b538      	push	{r3, r4, r5, lr}
 801b4ca:	4c06      	ldr	r4, [pc, #24]	; (801b4e4 <_close_r+0x1c>)
 801b4cc:	2300      	movs	r3, #0
 801b4ce:	4605      	mov	r5, r0
 801b4d0:	4608      	mov	r0, r1
 801b4d2:	6023      	str	r3, [r4, #0]
 801b4d4:	f7e8 f9dd 	bl	8003892 <_close>
 801b4d8:	1c43      	adds	r3, r0, #1
 801b4da:	d102      	bne.n	801b4e2 <_close_r+0x1a>
 801b4dc:	6823      	ldr	r3, [r4, #0]
 801b4de:	b103      	cbz	r3, 801b4e2 <_close_r+0x1a>
 801b4e0:	602b      	str	r3, [r5, #0]
 801b4e2:	bd38      	pop	{r3, r4, r5, pc}
 801b4e4:	20002a74 	.word	0x20002a74

0801b4e8 <_fstat_r>:
 801b4e8:	b538      	push	{r3, r4, r5, lr}
 801b4ea:	4c07      	ldr	r4, [pc, #28]	; (801b508 <_fstat_r+0x20>)
 801b4ec:	2300      	movs	r3, #0
 801b4ee:	4605      	mov	r5, r0
 801b4f0:	4608      	mov	r0, r1
 801b4f2:	4611      	mov	r1, r2
 801b4f4:	6023      	str	r3, [r4, #0]
 801b4f6:	f7e8 f9d8 	bl	80038aa <_fstat>
 801b4fa:	1c43      	adds	r3, r0, #1
 801b4fc:	d102      	bne.n	801b504 <_fstat_r+0x1c>
 801b4fe:	6823      	ldr	r3, [r4, #0]
 801b500:	b103      	cbz	r3, 801b504 <_fstat_r+0x1c>
 801b502:	602b      	str	r3, [r5, #0]
 801b504:	bd38      	pop	{r3, r4, r5, pc}
 801b506:	bf00      	nop
 801b508:	20002a74 	.word	0x20002a74

0801b50c <_isatty_r>:
 801b50c:	b538      	push	{r3, r4, r5, lr}
 801b50e:	4c06      	ldr	r4, [pc, #24]	; (801b528 <_isatty_r+0x1c>)
 801b510:	2300      	movs	r3, #0
 801b512:	4605      	mov	r5, r0
 801b514:	4608      	mov	r0, r1
 801b516:	6023      	str	r3, [r4, #0]
 801b518:	f7e8 f9d7 	bl	80038ca <_isatty>
 801b51c:	1c43      	adds	r3, r0, #1
 801b51e:	d102      	bne.n	801b526 <_isatty_r+0x1a>
 801b520:	6823      	ldr	r3, [r4, #0]
 801b522:	b103      	cbz	r3, 801b526 <_isatty_r+0x1a>
 801b524:	602b      	str	r3, [r5, #0]
 801b526:	bd38      	pop	{r3, r4, r5, pc}
 801b528:	20002a74 	.word	0x20002a74

0801b52c <_lseek_r>:
 801b52c:	b538      	push	{r3, r4, r5, lr}
 801b52e:	4c07      	ldr	r4, [pc, #28]	; (801b54c <_lseek_r+0x20>)
 801b530:	4605      	mov	r5, r0
 801b532:	4608      	mov	r0, r1
 801b534:	4611      	mov	r1, r2
 801b536:	2200      	movs	r2, #0
 801b538:	6022      	str	r2, [r4, #0]
 801b53a:	461a      	mov	r2, r3
 801b53c:	f7e8 f9d0 	bl	80038e0 <_lseek>
 801b540:	1c43      	adds	r3, r0, #1
 801b542:	d102      	bne.n	801b54a <_lseek_r+0x1e>
 801b544:	6823      	ldr	r3, [r4, #0]
 801b546:	b103      	cbz	r3, 801b54a <_lseek_r+0x1e>
 801b548:	602b      	str	r3, [r5, #0]
 801b54a:	bd38      	pop	{r3, r4, r5, pc}
 801b54c:	20002a74 	.word	0x20002a74

0801b550 <__malloc_lock>:
 801b550:	4770      	bx	lr

0801b552 <__malloc_unlock>:
 801b552:	4770      	bx	lr

0801b554 <_read_r>:
 801b554:	b538      	push	{r3, r4, r5, lr}
 801b556:	4c07      	ldr	r4, [pc, #28]	; (801b574 <_read_r+0x20>)
 801b558:	4605      	mov	r5, r0
 801b55a:	4608      	mov	r0, r1
 801b55c:	4611      	mov	r1, r2
 801b55e:	2200      	movs	r2, #0
 801b560:	6022      	str	r2, [r4, #0]
 801b562:	461a      	mov	r2, r3
 801b564:	f7e8 f95c 	bl	8003820 <_read>
 801b568:	1c43      	adds	r3, r0, #1
 801b56a:	d102      	bne.n	801b572 <_read_r+0x1e>
 801b56c:	6823      	ldr	r3, [r4, #0]
 801b56e:	b103      	cbz	r3, 801b572 <_read_r+0x1e>
 801b570:	602b      	str	r3, [r5, #0]
 801b572:	bd38      	pop	{r3, r4, r5, pc}
 801b574:	20002a74 	.word	0x20002a74

0801b578 <floor>:
 801b578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b57c:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801b580:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801b584:	2e13      	cmp	r6, #19
 801b586:	4602      	mov	r2, r0
 801b588:	460b      	mov	r3, r1
 801b58a:	460c      	mov	r4, r1
 801b58c:	4605      	mov	r5, r0
 801b58e:	4680      	mov	r8, r0
 801b590:	dc35      	bgt.n	801b5fe <floor+0x86>
 801b592:	2e00      	cmp	r6, #0
 801b594:	da16      	bge.n	801b5c4 <floor+0x4c>
 801b596:	a334      	add	r3, pc, #208	; (adr r3, 801b668 <floor+0xf0>)
 801b598:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b59c:	f7e4 fe7e 	bl	800029c <__adddf3>
 801b5a0:	2200      	movs	r2, #0
 801b5a2:	2300      	movs	r3, #0
 801b5a4:	f7e5 fac0 	bl	8000b28 <__aeabi_dcmpgt>
 801b5a8:	b148      	cbz	r0, 801b5be <floor+0x46>
 801b5aa:	2c00      	cmp	r4, #0
 801b5ac:	da59      	bge.n	801b662 <floor+0xea>
 801b5ae:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801b5b2:	4a2f      	ldr	r2, [pc, #188]	; (801b670 <floor+0xf8>)
 801b5b4:	432b      	orrs	r3, r5
 801b5b6:	2500      	movs	r5, #0
 801b5b8:	42ab      	cmp	r3, r5
 801b5ba:	bf18      	it	ne
 801b5bc:	4614      	movne	r4, r2
 801b5be:	4623      	mov	r3, r4
 801b5c0:	462a      	mov	r2, r5
 801b5c2:	e025      	b.n	801b610 <floor+0x98>
 801b5c4:	4f2b      	ldr	r7, [pc, #172]	; (801b674 <floor+0xfc>)
 801b5c6:	4137      	asrs	r7, r6
 801b5c8:	ea01 0c07 	and.w	ip, r1, r7
 801b5cc:	ea5c 0c00 	orrs.w	ip, ip, r0
 801b5d0:	d01e      	beq.n	801b610 <floor+0x98>
 801b5d2:	a325      	add	r3, pc, #148	; (adr r3, 801b668 <floor+0xf0>)
 801b5d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b5d8:	f7e4 fe60 	bl	800029c <__adddf3>
 801b5dc:	2200      	movs	r2, #0
 801b5de:	2300      	movs	r3, #0
 801b5e0:	f7e5 faa2 	bl	8000b28 <__aeabi_dcmpgt>
 801b5e4:	2800      	cmp	r0, #0
 801b5e6:	d0ea      	beq.n	801b5be <floor+0x46>
 801b5e8:	2c00      	cmp	r4, #0
 801b5ea:	bfbe      	ittt	lt
 801b5ec:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801b5f0:	fa43 f606 	asrlt.w	r6, r3, r6
 801b5f4:	19a4      	addlt	r4, r4, r6
 801b5f6:	ea24 0407 	bic.w	r4, r4, r7
 801b5fa:	2500      	movs	r5, #0
 801b5fc:	e7df      	b.n	801b5be <floor+0x46>
 801b5fe:	2e33      	cmp	r6, #51	; 0x33
 801b600:	dd0a      	ble.n	801b618 <floor+0xa0>
 801b602:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801b606:	d103      	bne.n	801b610 <floor+0x98>
 801b608:	f7e4 fe48 	bl	800029c <__adddf3>
 801b60c:	4602      	mov	r2, r0
 801b60e:	460b      	mov	r3, r1
 801b610:	4610      	mov	r0, r2
 801b612:	4619      	mov	r1, r3
 801b614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b618:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801b61c:	f04f 3cff 	mov.w	ip, #4294967295
 801b620:	fa2c f707 	lsr.w	r7, ip, r7
 801b624:	4207      	tst	r7, r0
 801b626:	d0f3      	beq.n	801b610 <floor+0x98>
 801b628:	a30f      	add	r3, pc, #60	; (adr r3, 801b668 <floor+0xf0>)
 801b62a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b62e:	f7e4 fe35 	bl	800029c <__adddf3>
 801b632:	2200      	movs	r2, #0
 801b634:	2300      	movs	r3, #0
 801b636:	f7e5 fa77 	bl	8000b28 <__aeabi_dcmpgt>
 801b63a:	2800      	cmp	r0, #0
 801b63c:	d0bf      	beq.n	801b5be <floor+0x46>
 801b63e:	2c00      	cmp	r4, #0
 801b640:	da02      	bge.n	801b648 <floor+0xd0>
 801b642:	2e14      	cmp	r6, #20
 801b644:	d103      	bne.n	801b64e <floor+0xd6>
 801b646:	3401      	adds	r4, #1
 801b648:	ea25 0507 	bic.w	r5, r5, r7
 801b64c:	e7b7      	b.n	801b5be <floor+0x46>
 801b64e:	2301      	movs	r3, #1
 801b650:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801b654:	fa03 f606 	lsl.w	r6, r3, r6
 801b658:	4435      	add	r5, r6
 801b65a:	4545      	cmp	r5, r8
 801b65c:	bf38      	it	cc
 801b65e:	18e4      	addcc	r4, r4, r3
 801b660:	e7f2      	b.n	801b648 <floor+0xd0>
 801b662:	2500      	movs	r5, #0
 801b664:	462c      	mov	r4, r5
 801b666:	e7aa      	b.n	801b5be <floor+0x46>
 801b668:	8800759c 	.word	0x8800759c
 801b66c:	7e37e43c 	.word	0x7e37e43c
 801b670:	bff00000 	.word	0xbff00000
 801b674:	000fffff 	.word	0x000fffff

0801b678 <cosf>:
 801b678:	b507      	push	{r0, r1, r2, lr}
 801b67a:	4a1a      	ldr	r2, [pc, #104]	; (801b6e4 <cosf+0x6c>)
 801b67c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 801b680:	4293      	cmp	r3, r2
 801b682:	ee07 0a90 	vmov	s15, r0
 801b686:	dc03      	bgt.n	801b690 <cosf+0x18>
 801b688:	2100      	movs	r1, #0
 801b68a:	f000 ff79 	bl	801c580 <__kernel_cosf>
 801b68e:	e006      	b.n	801b69e <cosf+0x26>
 801b690:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801b694:	db06      	blt.n	801b6a4 <cosf+0x2c>
 801b696:	ee77 7ae7 	vsub.f32	s15, s15, s15
 801b69a:	ee17 0a90 	vmov	r0, s15
 801b69e:	b003      	add	sp, #12
 801b6a0:	f85d fb04 	ldr.w	pc, [sp], #4
 801b6a4:	4669      	mov	r1, sp
 801b6a6:	f000 fe39 	bl	801c31c <__ieee754_rem_pio2f>
 801b6aa:	f000 0203 	and.w	r2, r0, #3
 801b6ae:	2a01      	cmp	r2, #1
 801b6b0:	d005      	beq.n	801b6be <cosf+0x46>
 801b6b2:	2a02      	cmp	r2, #2
 801b6b4:	d00a      	beq.n	801b6cc <cosf+0x54>
 801b6b6:	b972      	cbnz	r2, 801b6d6 <cosf+0x5e>
 801b6b8:	9901      	ldr	r1, [sp, #4]
 801b6ba:	9800      	ldr	r0, [sp, #0]
 801b6bc:	e7e5      	b.n	801b68a <cosf+0x12>
 801b6be:	9901      	ldr	r1, [sp, #4]
 801b6c0:	9800      	ldr	r0, [sp, #0]
 801b6c2:	f001 fa3f 	bl	801cb44 <__kernel_sinf>
 801b6c6:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 801b6ca:	e7e8      	b.n	801b69e <cosf+0x26>
 801b6cc:	9901      	ldr	r1, [sp, #4]
 801b6ce:	9800      	ldr	r0, [sp, #0]
 801b6d0:	f000 ff56 	bl	801c580 <__kernel_cosf>
 801b6d4:	e7f7      	b.n	801b6c6 <cosf+0x4e>
 801b6d6:	2201      	movs	r2, #1
 801b6d8:	9901      	ldr	r1, [sp, #4]
 801b6da:	9800      	ldr	r0, [sp, #0]
 801b6dc:	f001 fa32 	bl	801cb44 <__kernel_sinf>
 801b6e0:	e7dd      	b.n	801b69e <cosf+0x26>
 801b6e2:	bf00      	nop
 801b6e4:	3f490fd8 	.word	0x3f490fd8

0801b6e8 <roundf>:
 801b6e8:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 801b6ec:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 801b6f0:	2a16      	cmp	r2, #22
 801b6f2:	ee07 0a90 	vmov	s15, r0
 801b6f6:	dc15      	bgt.n	801b724 <roundf+0x3c>
 801b6f8:	2a00      	cmp	r2, #0
 801b6fa:	da08      	bge.n	801b70e <roundf+0x26>
 801b6fc:	3201      	adds	r2, #1
 801b6fe:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 801b702:	d101      	bne.n	801b708 <roundf+0x20>
 801b704:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 801b708:	ee07 3a90 	vmov	s15, r3
 801b70c:	e00e      	b.n	801b72c <roundf+0x44>
 801b70e:	4909      	ldr	r1, [pc, #36]	; (801b734 <roundf+0x4c>)
 801b710:	4111      	asrs	r1, r2
 801b712:	4208      	tst	r0, r1
 801b714:	d00a      	beq.n	801b72c <roundf+0x44>
 801b716:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801b71a:	4113      	asrs	r3, r2
 801b71c:	4403      	add	r3, r0
 801b71e:	ea23 0301 	bic.w	r3, r3, r1
 801b722:	e7f1      	b.n	801b708 <roundf+0x20>
 801b724:	2a80      	cmp	r2, #128	; 0x80
 801b726:	d101      	bne.n	801b72c <roundf+0x44>
 801b728:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801b72c:	ee17 0a90 	vmov	r0, s15
 801b730:	4770      	bx	lr
 801b732:	bf00      	nop
 801b734:	007fffff 	.word	0x007fffff

0801b738 <sinf>:
 801b738:	b507      	push	{r0, r1, r2, lr}
 801b73a:	4a1b      	ldr	r2, [pc, #108]	; (801b7a8 <sinf+0x70>)
 801b73c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 801b740:	4293      	cmp	r3, r2
 801b742:	ee07 0a90 	vmov	s15, r0
 801b746:	dc04      	bgt.n	801b752 <sinf+0x1a>
 801b748:	2200      	movs	r2, #0
 801b74a:	2100      	movs	r1, #0
 801b74c:	f001 f9fa 	bl	801cb44 <__kernel_sinf>
 801b750:	e006      	b.n	801b760 <sinf+0x28>
 801b752:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801b756:	db06      	blt.n	801b766 <sinf+0x2e>
 801b758:	ee77 7ae7 	vsub.f32	s15, s15, s15
 801b75c:	ee17 0a90 	vmov	r0, s15
 801b760:	b003      	add	sp, #12
 801b762:	f85d fb04 	ldr.w	pc, [sp], #4
 801b766:	4669      	mov	r1, sp
 801b768:	f000 fdd8 	bl	801c31c <__ieee754_rem_pio2f>
 801b76c:	f000 0003 	and.w	r0, r0, #3
 801b770:	2801      	cmp	r0, #1
 801b772:	d006      	beq.n	801b782 <sinf+0x4a>
 801b774:	2802      	cmp	r0, #2
 801b776:	d009      	beq.n	801b78c <sinf+0x54>
 801b778:	b980      	cbnz	r0, 801b79c <sinf+0x64>
 801b77a:	2201      	movs	r2, #1
 801b77c:	9901      	ldr	r1, [sp, #4]
 801b77e:	9800      	ldr	r0, [sp, #0]
 801b780:	e7e4      	b.n	801b74c <sinf+0x14>
 801b782:	9901      	ldr	r1, [sp, #4]
 801b784:	9800      	ldr	r0, [sp, #0]
 801b786:	f000 fefb 	bl	801c580 <__kernel_cosf>
 801b78a:	e7e9      	b.n	801b760 <sinf+0x28>
 801b78c:	2201      	movs	r2, #1
 801b78e:	9901      	ldr	r1, [sp, #4]
 801b790:	9800      	ldr	r0, [sp, #0]
 801b792:	f001 f9d7 	bl	801cb44 <__kernel_sinf>
 801b796:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 801b79a:	e7e1      	b.n	801b760 <sinf+0x28>
 801b79c:	9901      	ldr	r1, [sp, #4]
 801b79e:	9800      	ldr	r0, [sp, #0]
 801b7a0:	f000 feee 	bl	801c580 <__kernel_cosf>
 801b7a4:	e7f7      	b.n	801b796 <sinf+0x5e>
 801b7a6:	bf00      	nop
 801b7a8:	3f490fd8 	.word	0x3f490fd8

0801b7ac <tanf>:
 801b7ac:	b507      	push	{r0, r1, r2, lr}
 801b7ae:	4a11      	ldr	r2, [pc, #68]	; (801b7f4 <tanf+0x48>)
 801b7b0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 801b7b4:	4293      	cmp	r3, r2
 801b7b6:	ee07 0a90 	vmov	s15, r0
 801b7ba:	dc06      	bgt.n	801b7ca <tanf+0x1e>
 801b7bc:	2201      	movs	r2, #1
 801b7be:	2100      	movs	r1, #0
 801b7c0:	f001 fa0c 	bl	801cbdc <__kernel_tanf>
 801b7c4:	ee07 0a90 	vmov	s15, r0
 801b7c8:	e004      	b.n	801b7d4 <tanf+0x28>
 801b7ca:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801b7ce:	db06      	blt.n	801b7de <tanf+0x32>
 801b7d0:	ee77 7ae7 	vsub.f32	s15, s15, s15
 801b7d4:	ee17 0a90 	vmov	r0, s15
 801b7d8:	b003      	add	sp, #12
 801b7da:	f85d fb04 	ldr.w	pc, [sp], #4
 801b7de:	4669      	mov	r1, sp
 801b7e0:	f000 fd9c 	bl	801c31c <__ieee754_rem_pio2f>
 801b7e4:	0042      	lsls	r2, r0, #1
 801b7e6:	f002 0202 	and.w	r2, r2, #2
 801b7ea:	f1c2 0201 	rsb	r2, r2, #1
 801b7ee:	9901      	ldr	r1, [sp, #4]
 801b7f0:	9800      	ldr	r0, [sp, #0]
 801b7f2:	e7e5      	b.n	801b7c0 <tanf+0x14>
 801b7f4:	3f490fda 	.word	0x3f490fda

0801b7f8 <asin>:
 801b7f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b7fc:	f8df 809c 	ldr.w	r8, [pc, #156]	; 801b89c <asin+0xa4>
 801b800:	b08b      	sub	sp, #44	; 0x2c
 801b802:	4604      	mov	r4, r0
 801b804:	460d      	mov	r5, r1
 801b806:	f000 f8fb 	bl	801ba00 <__ieee754_asin>
 801b80a:	f998 3000 	ldrsb.w	r3, [r8]
 801b80e:	3301      	adds	r3, #1
 801b810:	4606      	mov	r6, r0
 801b812:	460f      	mov	r7, r1
 801b814:	d036      	beq.n	801b884 <asin+0x8c>
 801b816:	4622      	mov	r2, r4
 801b818:	462b      	mov	r3, r5
 801b81a:	4620      	mov	r0, r4
 801b81c:	4629      	mov	r1, r5
 801b81e:	f7e5 f98d 	bl	8000b3c <__aeabi_dcmpun>
 801b822:	4681      	mov	r9, r0
 801b824:	2800      	cmp	r0, #0
 801b826:	d12d      	bne.n	801b884 <asin+0x8c>
 801b828:	4620      	mov	r0, r4
 801b82a:	4629      	mov	r1, r5
 801b82c:	f001 fc4c 	bl	801d0c8 <fabs>
 801b830:	2200      	movs	r2, #0
 801b832:	4b17      	ldr	r3, [pc, #92]	; (801b890 <asin+0x98>)
 801b834:	f7e5 f978 	bl	8000b28 <__aeabi_dcmpgt>
 801b838:	b320      	cbz	r0, 801b884 <asin+0x8c>
 801b83a:	2301      	movs	r3, #1
 801b83c:	9300      	str	r3, [sp, #0]
 801b83e:	4815      	ldr	r0, [pc, #84]	; (801b894 <asin+0x9c>)
 801b840:	4b15      	ldr	r3, [pc, #84]	; (801b898 <asin+0xa0>)
 801b842:	9301      	str	r3, [sp, #4]
 801b844:	f8cd 9020 	str.w	r9, [sp, #32]
 801b848:	e9cd 4504 	strd	r4, r5, [sp, #16]
 801b84c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 801b850:	f001 fc40 	bl	801d0d4 <nan>
 801b854:	f998 3000 	ldrsb.w	r3, [r8]
 801b858:	2b02      	cmp	r3, #2
 801b85a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801b85e:	d104      	bne.n	801b86a <asin+0x72>
 801b860:	f7fe fea4 	bl	801a5ac <__errno>
 801b864:	2321      	movs	r3, #33	; 0x21
 801b866:	6003      	str	r3, [r0, #0]
 801b868:	e004      	b.n	801b874 <asin+0x7c>
 801b86a:	4668      	mov	r0, sp
 801b86c:	f001 fc30 	bl	801d0d0 <matherr>
 801b870:	2800      	cmp	r0, #0
 801b872:	d0f5      	beq.n	801b860 <asin+0x68>
 801b874:	9b08      	ldr	r3, [sp, #32]
 801b876:	b11b      	cbz	r3, 801b880 <asin+0x88>
 801b878:	f7fe fe98 	bl	801a5ac <__errno>
 801b87c:	9b08      	ldr	r3, [sp, #32]
 801b87e:	6003      	str	r3, [r0, #0]
 801b880:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 801b884:	4630      	mov	r0, r6
 801b886:	4639      	mov	r1, r7
 801b888:	b00b      	add	sp, #44	; 0x2c
 801b88a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b88e:	bf00      	nop
 801b890:	3ff00000 	.word	0x3ff00000
 801b894:	0801d855 	.word	0x0801d855
 801b898:	0801d883 	.word	0x0801d883
 801b89c:	200013a8 	.word	0x200013a8

0801b8a0 <atan2>:
 801b8a0:	f000 baaa 	b.w	801bdf8 <__ieee754_atan2>

0801b8a4 <sqrt>:
 801b8a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b8a8:	b08b      	sub	sp, #44	; 0x2c
 801b8aa:	4604      	mov	r4, r0
 801b8ac:	460d      	mov	r5, r1
 801b8ae:	f000 fb89 	bl	801bfc4 <__ieee754_sqrt>
 801b8b2:	4b24      	ldr	r3, [pc, #144]	; (801b944 <sqrt+0xa0>)
 801b8b4:	f993 a000 	ldrsb.w	sl, [r3]
 801b8b8:	f1ba 3fff 	cmp.w	sl, #4294967295
 801b8bc:	4680      	mov	r8, r0
 801b8be:	4689      	mov	r9, r1
 801b8c0:	d02b      	beq.n	801b91a <sqrt+0x76>
 801b8c2:	4622      	mov	r2, r4
 801b8c4:	462b      	mov	r3, r5
 801b8c6:	4620      	mov	r0, r4
 801b8c8:	4629      	mov	r1, r5
 801b8ca:	f7e5 f937 	bl	8000b3c <__aeabi_dcmpun>
 801b8ce:	4683      	mov	fp, r0
 801b8d0:	bb18      	cbnz	r0, 801b91a <sqrt+0x76>
 801b8d2:	2600      	movs	r6, #0
 801b8d4:	2700      	movs	r7, #0
 801b8d6:	4632      	mov	r2, r6
 801b8d8:	463b      	mov	r3, r7
 801b8da:	4620      	mov	r0, r4
 801b8dc:	4629      	mov	r1, r5
 801b8de:	f7e5 f905 	bl	8000aec <__aeabi_dcmplt>
 801b8e2:	b1d0      	cbz	r0, 801b91a <sqrt+0x76>
 801b8e4:	2301      	movs	r3, #1
 801b8e6:	9300      	str	r3, [sp, #0]
 801b8e8:	4b17      	ldr	r3, [pc, #92]	; (801b948 <sqrt+0xa4>)
 801b8ea:	9301      	str	r3, [sp, #4]
 801b8ec:	f8cd b020 	str.w	fp, [sp, #32]
 801b8f0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 801b8f4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 801b8f8:	f1ba 0f00 	cmp.w	sl, #0
 801b8fc:	d112      	bne.n	801b924 <sqrt+0x80>
 801b8fe:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801b902:	4668      	mov	r0, sp
 801b904:	f001 fbe4 	bl	801d0d0 <matherr>
 801b908:	b1b8      	cbz	r0, 801b93a <sqrt+0x96>
 801b90a:	9b08      	ldr	r3, [sp, #32]
 801b90c:	b11b      	cbz	r3, 801b916 <sqrt+0x72>
 801b90e:	f7fe fe4d 	bl	801a5ac <__errno>
 801b912:	9b08      	ldr	r3, [sp, #32]
 801b914:	6003      	str	r3, [r0, #0]
 801b916:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 801b91a:	4640      	mov	r0, r8
 801b91c:	4649      	mov	r1, r9
 801b91e:	b00b      	add	sp, #44	; 0x2c
 801b920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b924:	4632      	mov	r2, r6
 801b926:	463b      	mov	r3, r7
 801b928:	4630      	mov	r0, r6
 801b92a:	4639      	mov	r1, r7
 801b92c:	f7e4 ff96 	bl	800085c <__aeabi_ddiv>
 801b930:	f1ba 0f02 	cmp.w	sl, #2
 801b934:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801b938:	d1e3      	bne.n	801b902 <sqrt+0x5e>
 801b93a:	f7fe fe37 	bl	801a5ac <__errno>
 801b93e:	2321      	movs	r3, #33	; 0x21
 801b940:	6003      	str	r3, [r0, #0]
 801b942:	e7e2      	b.n	801b90a <sqrt+0x66>
 801b944:	200013a8 	.word	0x200013a8
 801b948:	0801d888 	.word	0x0801d888

0801b94c <acosf>:
 801b94c:	b530      	push	{r4, r5, lr}
 801b94e:	ed2d 8b02 	vpush	{d8}
 801b952:	4d27      	ldr	r5, [pc, #156]	; (801b9f0 <acosf+0xa4>)
 801b954:	b08b      	sub	sp, #44	; 0x2c
 801b956:	ee08 0a10 	vmov	s16, r0
 801b95a:	f000 fbdf 	bl	801c11c <__ieee754_acosf>
 801b95e:	f995 3000 	ldrsb.w	r3, [r5]
 801b962:	3301      	adds	r3, #1
 801b964:	4604      	mov	r4, r0
 801b966:	d03d      	beq.n	801b9e4 <acosf+0x98>
 801b968:	eeb4 8a48 	vcmp.f32	s16, s16
 801b96c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b970:	d638      	bvs.n	801b9e4 <acosf+0x98>
 801b972:	ee18 0a10 	vmov	r0, s16
 801b976:	f001 fbb3 	bl	801d0e0 <fabsf>
 801b97a:	ee07 0a10 	vmov	s14, r0
 801b97e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801b982:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b98a:	dd2b      	ble.n	801b9e4 <acosf+0x98>
 801b98c:	2301      	movs	r3, #1
 801b98e:	9300      	str	r3, [sp, #0]
 801b990:	4b18      	ldr	r3, [pc, #96]	; (801b9f4 <acosf+0xa8>)
 801b992:	9301      	str	r3, [sp, #4]
 801b994:	ee18 0a10 	vmov	r0, s16
 801b998:	2300      	movs	r3, #0
 801b99a:	9308      	str	r3, [sp, #32]
 801b99c:	f7e4 fddc 	bl	8000558 <__aeabi_f2d>
 801b9a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b9a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b9a8:	4813      	ldr	r0, [pc, #76]	; (801b9f8 <acosf+0xac>)
 801b9aa:	f001 fb93 	bl	801d0d4 <nan>
 801b9ae:	f995 3000 	ldrsb.w	r3, [r5]
 801b9b2:	2b02      	cmp	r3, #2
 801b9b4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801b9b8:	d104      	bne.n	801b9c4 <acosf+0x78>
 801b9ba:	f7fe fdf7 	bl	801a5ac <__errno>
 801b9be:	2321      	movs	r3, #33	; 0x21
 801b9c0:	6003      	str	r3, [r0, #0]
 801b9c2:	e004      	b.n	801b9ce <acosf+0x82>
 801b9c4:	4668      	mov	r0, sp
 801b9c6:	f001 fb83 	bl	801d0d0 <matherr>
 801b9ca:	2800      	cmp	r0, #0
 801b9cc:	d0f5      	beq.n	801b9ba <acosf+0x6e>
 801b9ce:	9b08      	ldr	r3, [sp, #32]
 801b9d0:	b11b      	cbz	r3, 801b9da <acosf+0x8e>
 801b9d2:	f7fe fdeb 	bl	801a5ac <__errno>
 801b9d6:	9b08      	ldr	r3, [sp, #32]
 801b9d8:	6003      	str	r3, [r0, #0]
 801b9da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801b9de:	f7e5 f8eb 	bl	8000bb8 <__aeabi_d2f>
 801b9e2:	4604      	mov	r4, r0
 801b9e4:	4620      	mov	r0, r4
 801b9e6:	b00b      	add	sp, #44	; 0x2c
 801b9e8:	ecbd 8b02 	vpop	{d8}
 801b9ec:	bd30      	pop	{r4, r5, pc}
 801b9ee:	bf00      	nop
 801b9f0:	200013a8 	.word	0x200013a8
 801b9f4:	0801d88d 	.word	0x0801d88d
 801b9f8:	0801d855 	.word	0x0801d855
 801b9fc:	00000000 	.word	0x00000000

0801ba00 <__ieee754_asin>:
 801ba00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba04:	4bc4      	ldr	r3, [pc, #784]	; (801bd18 <__ieee754_asin+0x318>)
 801ba06:	b087      	sub	sp, #28
 801ba08:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 801ba0c:	429f      	cmp	r7, r3
 801ba0e:	4604      	mov	r4, r0
 801ba10:	460d      	mov	r5, r1
 801ba12:	9101      	str	r1, [sp, #4]
 801ba14:	dd2a      	ble.n	801ba6c <__ieee754_asin+0x6c>
 801ba16:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 801ba1a:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 801ba1e:	4603      	mov	r3, r0
 801ba20:	433b      	orrs	r3, r7
 801ba22:	d114      	bne.n	801ba4e <__ieee754_asin+0x4e>
 801ba24:	a3a2      	add	r3, pc, #648	; (adr r3, 801bcb0 <__ieee754_asin+0x2b0>)
 801ba26:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba2a:	f7e4 fded 	bl	8000608 <__aeabi_dmul>
 801ba2e:	a3a2      	add	r3, pc, #648	; (adr r3, 801bcb8 <__ieee754_asin+0x2b8>)
 801ba30:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba34:	4606      	mov	r6, r0
 801ba36:	460f      	mov	r7, r1
 801ba38:	4620      	mov	r0, r4
 801ba3a:	4629      	mov	r1, r5
 801ba3c:	f7e4 fde4 	bl	8000608 <__aeabi_dmul>
 801ba40:	4602      	mov	r2, r0
 801ba42:	460b      	mov	r3, r1
 801ba44:	4630      	mov	r0, r6
 801ba46:	4639      	mov	r1, r7
 801ba48:	f7e4 fc28 	bl	800029c <__adddf3>
 801ba4c:	e007      	b.n	801ba5e <__ieee754_asin+0x5e>
 801ba4e:	4602      	mov	r2, r0
 801ba50:	460b      	mov	r3, r1
 801ba52:	f7e4 fc21 	bl	8000298 <__aeabi_dsub>
 801ba56:	4602      	mov	r2, r0
 801ba58:	460b      	mov	r3, r1
 801ba5a:	f7e4 feff 	bl	800085c <__aeabi_ddiv>
 801ba5e:	4604      	mov	r4, r0
 801ba60:	460d      	mov	r5, r1
 801ba62:	4620      	mov	r0, r4
 801ba64:	4629      	mov	r1, r5
 801ba66:	b007      	add	sp, #28
 801ba68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ba6c:	4bab      	ldr	r3, [pc, #684]	; (801bd1c <__ieee754_asin+0x31c>)
 801ba6e:	429f      	cmp	r7, r3
 801ba70:	dc0e      	bgt.n	801ba90 <__ieee754_asin+0x90>
 801ba72:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 801ba76:	f280 80ab 	bge.w	801bbd0 <__ieee754_asin+0x1d0>
 801ba7a:	a391      	add	r3, pc, #580	; (adr r3, 801bcc0 <__ieee754_asin+0x2c0>)
 801ba7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba80:	f7e4 fc0c 	bl	800029c <__adddf3>
 801ba84:	2200      	movs	r2, #0
 801ba86:	4ba6      	ldr	r3, [pc, #664]	; (801bd20 <__ieee754_asin+0x320>)
 801ba88:	f7e5 f84e 	bl	8000b28 <__aeabi_dcmpgt>
 801ba8c:	2800      	cmp	r0, #0
 801ba8e:	d1e8      	bne.n	801ba62 <__ieee754_asin+0x62>
 801ba90:	4620      	mov	r0, r4
 801ba92:	4629      	mov	r1, r5
 801ba94:	f001 fb18 	bl	801d0c8 <fabs>
 801ba98:	4602      	mov	r2, r0
 801ba9a:	460b      	mov	r3, r1
 801ba9c:	2000      	movs	r0, #0
 801ba9e:	49a0      	ldr	r1, [pc, #640]	; (801bd20 <__ieee754_asin+0x320>)
 801baa0:	f7e4 fbfa 	bl	8000298 <__aeabi_dsub>
 801baa4:	2200      	movs	r2, #0
 801baa6:	4b9f      	ldr	r3, [pc, #636]	; (801bd24 <__ieee754_asin+0x324>)
 801baa8:	f7e4 fdae 	bl	8000608 <__aeabi_dmul>
 801baac:	a386      	add	r3, pc, #536	; (adr r3, 801bcc8 <__ieee754_asin+0x2c8>)
 801baae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bab2:	4604      	mov	r4, r0
 801bab4:	460d      	mov	r5, r1
 801bab6:	f7e4 fda7 	bl	8000608 <__aeabi_dmul>
 801baba:	a385      	add	r3, pc, #532	; (adr r3, 801bcd0 <__ieee754_asin+0x2d0>)
 801babc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bac0:	f7e4 fbec 	bl	800029c <__adddf3>
 801bac4:	4622      	mov	r2, r4
 801bac6:	462b      	mov	r3, r5
 801bac8:	f7e4 fd9e 	bl	8000608 <__aeabi_dmul>
 801bacc:	a382      	add	r3, pc, #520	; (adr r3, 801bcd8 <__ieee754_asin+0x2d8>)
 801bace:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bad2:	f7e4 fbe1 	bl	8000298 <__aeabi_dsub>
 801bad6:	4622      	mov	r2, r4
 801bad8:	462b      	mov	r3, r5
 801bada:	f7e4 fd95 	bl	8000608 <__aeabi_dmul>
 801bade:	a380      	add	r3, pc, #512	; (adr r3, 801bce0 <__ieee754_asin+0x2e0>)
 801bae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bae4:	f7e4 fbda 	bl	800029c <__adddf3>
 801bae8:	4622      	mov	r2, r4
 801baea:	462b      	mov	r3, r5
 801baec:	f7e4 fd8c 	bl	8000608 <__aeabi_dmul>
 801baf0:	a37d      	add	r3, pc, #500	; (adr r3, 801bce8 <__ieee754_asin+0x2e8>)
 801baf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801baf6:	f7e4 fbcf 	bl	8000298 <__aeabi_dsub>
 801bafa:	4622      	mov	r2, r4
 801bafc:	462b      	mov	r3, r5
 801bafe:	f7e4 fd83 	bl	8000608 <__aeabi_dmul>
 801bb02:	a37b      	add	r3, pc, #492	; (adr r3, 801bcf0 <__ieee754_asin+0x2f0>)
 801bb04:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb08:	f7e4 fbc8 	bl	800029c <__adddf3>
 801bb0c:	4622      	mov	r2, r4
 801bb0e:	462b      	mov	r3, r5
 801bb10:	f7e4 fd7a 	bl	8000608 <__aeabi_dmul>
 801bb14:	a378      	add	r3, pc, #480	; (adr r3, 801bcf8 <__ieee754_asin+0x2f8>)
 801bb16:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb1a:	4680      	mov	r8, r0
 801bb1c:	4689      	mov	r9, r1
 801bb1e:	4620      	mov	r0, r4
 801bb20:	4629      	mov	r1, r5
 801bb22:	f7e4 fd71 	bl	8000608 <__aeabi_dmul>
 801bb26:	a376      	add	r3, pc, #472	; (adr r3, 801bd00 <__ieee754_asin+0x300>)
 801bb28:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb2c:	f7e4 fbb4 	bl	8000298 <__aeabi_dsub>
 801bb30:	4622      	mov	r2, r4
 801bb32:	462b      	mov	r3, r5
 801bb34:	f7e4 fd68 	bl	8000608 <__aeabi_dmul>
 801bb38:	a373      	add	r3, pc, #460	; (adr r3, 801bd08 <__ieee754_asin+0x308>)
 801bb3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb3e:	f7e4 fbad 	bl	800029c <__adddf3>
 801bb42:	4622      	mov	r2, r4
 801bb44:	462b      	mov	r3, r5
 801bb46:	f7e4 fd5f 	bl	8000608 <__aeabi_dmul>
 801bb4a:	a371      	add	r3, pc, #452	; (adr r3, 801bd10 <__ieee754_asin+0x310>)
 801bb4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb50:	f7e4 fba2 	bl	8000298 <__aeabi_dsub>
 801bb54:	4622      	mov	r2, r4
 801bb56:	462b      	mov	r3, r5
 801bb58:	f7e4 fd56 	bl	8000608 <__aeabi_dmul>
 801bb5c:	4b70      	ldr	r3, [pc, #448]	; (801bd20 <__ieee754_asin+0x320>)
 801bb5e:	2200      	movs	r2, #0
 801bb60:	f7e4 fb9c 	bl	800029c <__adddf3>
 801bb64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bb68:	4620      	mov	r0, r4
 801bb6a:	4629      	mov	r1, r5
 801bb6c:	f000 fa2a 	bl	801bfc4 <__ieee754_sqrt>
 801bb70:	4b6d      	ldr	r3, [pc, #436]	; (801bd28 <__ieee754_asin+0x328>)
 801bb72:	429f      	cmp	r7, r3
 801bb74:	4682      	mov	sl, r0
 801bb76:	468b      	mov	fp, r1
 801bb78:	f340 80d8 	ble.w	801bd2c <__ieee754_asin+0x32c>
 801bb7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801bb80:	4640      	mov	r0, r8
 801bb82:	4649      	mov	r1, r9
 801bb84:	f7e4 fe6a 	bl	800085c <__aeabi_ddiv>
 801bb88:	4652      	mov	r2, sl
 801bb8a:	465b      	mov	r3, fp
 801bb8c:	f7e4 fd3c 	bl	8000608 <__aeabi_dmul>
 801bb90:	4652      	mov	r2, sl
 801bb92:	465b      	mov	r3, fp
 801bb94:	f7e4 fb82 	bl	800029c <__adddf3>
 801bb98:	4602      	mov	r2, r0
 801bb9a:	460b      	mov	r3, r1
 801bb9c:	f7e4 fb7e 	bl	800029c <__adddf3>
 801bba0:	a345      	add	r3, pc, #276	; (adr r3, 801bcb8 <__ieee754_asin+0x2b8>)
 801bba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bba6:	f7e4 fb77 	bl	8000298 <__aeabi_dsub>
 801bbaa:	4602      	mov	r2, r0
 801bbac:	460b      	mov	r3, r1
 801bbae:	a140      	add	r1, pc, #256	; (adr r1, 801bcb0 <__ieee754_asin+0x2b0>)
 801bbb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bbb4:	f7e4 fb70 	bl	8000298 <__aeabi_dsub>
 801bbb8:	9b01      	ldr	r3, [sp, #4]
 801bbba:	2b00      	cmp	r3, #0
 801bbbc:	bfdc      	itt	le
 801bbbe:	4602      	movle	r2, r0
 801bbc0:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 801bbc4:	4604      	mov	r4, r0
 801bbc6:	460d      	mov	r5, r1
 801bbc8:	bfdc      	itt	le
 801bbca:	4614      	movle	r4, r2
 801bbcc:	461d      	movle	r5, r3
 801bbce:	e748      	b.n	801ba62 <__ieee754_asin+0x62>
 801bbd0:	4602      	mov	r2, r0
 801bbd2:	460b      	mov	r3, r1
 801bbd4:	f7e4 fd18 	bl	8000608 <__aeabi_dmul>
 801bbd8:	a33b      	add	r3, pc, #236	; (adr r3, 801bcc8 <__ieee754_asin+0x2c8>)
 801bbda:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bbde:	4606      	mov	r6, r0
 801bbe0:	460f      	mov	r7, r1
 801bbe2:	f7e4 fd11 	bl	8000608 <__aeabi_dmul>
 801bbe6:	a33a      	add	r3, pc, #232	; (adr r3, 801bcd0 <__ieee754_asin+0x2d0>)
 801bbe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bbec:	f7e4 fb56 	bl	800029c <__adddf3>
 801bbf0:	4632      	mov	r2, r6
 801bbf2:	463b      	mov	r3, r7
 801bbf4:	f7e4 fd08 	bl	8000608 <__aeabi_dmul>
 801bbf8:	a337      	add	r3, pc, #220	; (adr r3, 801bcd8 <__ieee754_asin+0x2d8>)
 801bbfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bbfe:	f7e4 fb4b 	bl	8000298 <__aeabi_dsub>
 801bc02:	4632      	mov	r2, r6
 801bc04:	463b      	mov	r3, r7
 801bc06:	f7e4 fcff 	bl	8000608 <__aeabi_dmul>
 801bc0a:	a335      	add	r3, pc, #212	; (adr r3, 801bce0 <__ieee754_asin+0x2e0>)
 801bc0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc10:	f7e4 fb44 	bl	800029c <__adddf3>
 801bc14:	4632      	mov	r2, r6
 801bc16:	463b      	mov	r3, r7
 801bc18:	f7e4 fcf6 	bl	8000608 <__aeabi_dmul>
 801bc1c:	a332      	add	r3, pc, #200	; (adr r3, 801bce8 <__ieee754_asin+0x2e8>)
 801bc1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc22:	f7e4 fb39 	bl	8000298 <__aeabi_dsub>
 801bc26:	4632      	mov	r2, r6
 801bc28:	463b      	mov	r3, r7
 801bc2a:	f7e4 fced 	bl	8000608 <__aeabi_dmul>
 801bc2e:	a330      	add	r3, pc, #192	; (adr r3, 801bcf0 <__ieee754_asin+0x2f0>)
 801bc30:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc34:	f7e4 fb32 	bl	800029c <__adddf3>
 801bc38:	4632      	mov	r2, r6
 801bc3a:	463b      	mov	r3, r7
 801bc3c:	f7e4 fce4 	bl	8000608 <__aeabi_dmul>
 801bc40:	a32d      	add	r3, pc, #180	; (adr r3, 801bcf8 <__ieee754_asin+0x2f8>)
 801bc42:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc46:	4680      	mov	r8, r0
 801bc48:	4689      	mov	r9, r1
 801bc4a:	4630      	mov	r0, r6
 801bc4c:	4639      	mov	r1, r7
 801bc4e:	f7e4 fcdb 	bl	8000608 <__aeabi_dmul>
 801bc52:	a32b      	add	r3, pc, #172	; (adr r3, 801bd00 <__ieee754_asin+0x300>)
 801bc54:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc58:	f7e4 fb1e 	bl	8000298 <__aeabi_dsub>
 801bc5c:	4632      	mov	r2, r6
 801bc5e:	463b      	mov	r3, r7
 801bc60:	f7e4 fcd2 	bl	8000608 <__aeabi_dmul>
 801bc64:	a328      	add	r3, pc, #160	; (adr r3, 801bd08 <__ieee754_asin+0x308>)
 801bc66:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc6a:	f7e4 fb17 	bl	800029c <__adddf3>
 801bc6e:	4632      	mov	r2, r6
 801bc70:	463b      	mov	r3, r7
 801bc72:	f7e4 fcc9 	bl	8000608 <__aeabi_dmul>
 801bc76:	a326      	add	r3, pc, #152	; (adr r3, 801bd10 <__ieee754_asin+0x310>)
 801bc78:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc7c:	f7e4 fb0c 	bl	8000298 <__aeabi_dsub>
 801bc80:	4632      	mov	r2, r6
 801bc82:	463b      	mov	r3, r7
 801bc84:	f7e4 fcc0 	bl	8000608 <__aeabi_dmul>
 801bc88:	2200      	movs	r2, #0
 801bc8a:	4b25      	ldr	r3, [pc, #148]	; (801bd20 <__ieee754_asin+0x320>)
 801bc8c:	f7e4 fb06 	bl	800029c <__adddf3>
 801bc90:	4602      	mov	r2, r0
 801bc92:	460b      	mov	r3, r1
 801bc94:	4640      	mov	r0, r8
 801bc96:	4649      	mov	r1, r9
 801bc98:	f7e4 fde0 	bl	800085c <__aeabi_ddiv>
 801bc9c:	4622      	mov	r2, r4
 801bc9e:	462b      	mov	r3, r5
 801bca0:	f7e4 fcb2 	bl	8000608 <__aeabi_dmul>
 801bca4:	4602      	mov	r2, r0
 801bca6:	460b      	mov	r3, r1
 801bca8:	4620      	mov	r0, r4
 801bcaa:	4629      	mov	r1, r5
 801bcac:	e6cc      	b.n	801ba48 <__ieee754_asin+0x48>
 801bcae:	bf00      	nop
 801bcb0:	54442d18 	.word	0x54442d18
 801bcb4:	3ff921fb 	.word	0x3ff921fb
 801bcb8:	33145c07 	.word	0x33145c07
 801bcbc:	3c91a626 	.word	0x3c91a626
 801bcc0:	8800759c 	.word	0x8800759c
 801bcc4:	7e37e43c 	.word	0x7e37e43c
 801bcc8:	0dfdf709 	.word	0x0dfdf709
 801bccc:	3f023de1 	.word	0x3f023de1
 801bcd0:	7501b288 	.word	0x7501b288
 801bcd4:	3f49efe0 	.word	0x3f49efe0
 801bcd8:	b5688f3b 	.word	0xb5688f3b
 801bcdc:	3fa48228 	.word	0x3fa48228
 801bce0:	0e884455 	.word	0x0e884455
 801bce4:	3fc9c155 	.word	0x3fc9c155
 801bce8:	03eb6f7d 	.word	0x03eb6f7d
 801bcec:	3fd4d612 	.word	0x3fd4d612
 801bcf0:	55555555 	.word	0x55555555
 801bcf4:	3fc55555 	.word	0x3fc55555
 801bcf8:	b12e9282 	.word	0xb12e9282
 801bcfc:	3fb3b8c5 	.word	0x3fb3b8c5
 801bd00:	1b8d0159 	.word	0x1b8d0159
 801bd04:	3fe6066c 	.word	0x3fe6066c
 801bd08:	9c598ac8 	.word	0x9c598ac8
 801bd0c:	40002ae5 	.word	0x40002ae5
 801bd10:	1c8a2d4b 	.word	0x1c8a2d4b
 801bd14:	40033a27 	.word	0x40033a27
 801bd18:	3fefffff 	.word	0x3fefffff
 801bd1c:	3fdfffff 	.word	0x3fdfffff
 801bd20:	3ff00000 	.word	0x3ff00000
 801bd24:	3fe00000 	.word	0x3fe00000
 801bd28:	3fef3332 	.word	0x3fef3332
 801bd2c:	4602      	mov	r2, r0
 801bd2e:	460b      	mov	r3, r1
 801bd30:	460f      	mov	r7, r1
 801bd32:	f7e4 fab3 	bl	800029c <__adddf3>
 801bd36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801bd3a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801bd3e:	4640      	mov	r0, r8
 801bd40:	4649      	mov	r1, r9
 801bd42:	f7e4 fd8b 	bl	800085c <__aeabi_ddiv>
 801bd46:	4602      	mov	r2, r0
 801bd48:	460b      	mov	r3, r1
 801bd4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801bd4e:	f7e4 fc5b 	bl	8000608 <__aeabi_dmul>
 801bd52:	2600      	movs	r6, #0
 801bd54:	4680      	mov	r8, r0
 801bd56:	4689      	mov	r9, r1
 801bd58:	4632      	mov	r2, r6
 801bd5a:	465b      	mov	r3, fp
 801bd5c:	4630      	mov	r0, r6
 801bd5e:	4659      	mov	r1, fp
 801bd60:	f7e4 fc52 	bl	8000608 <__aeabi_dmul>
 801bd64:	4602      	mov	r2, r0
 801bd66:	460b      	mov	r3, r1
 801bd68:	4620      	mov	r0, r4
 801bd6a:	4629      	mov	r1, r5
 801bd6c:	f7e4 fa94 	bl	8000298 <__aeabi_dsub>
 801bd70:	4632      	mov	r2, r6
 801bd72:	4604      	mov	r4, r0
 801bd74:	460d      	mov	r5, r1
 801bd76:	465b      	mov	r3, fp
 801bd78:	4650      	mov	r0, sl
 801bd7a:	4659      	mov	r1, fp
 801bd7c:	f7e4 fa8e 	bl	800029c <__adddf3>
 801bd80:	4602      	mov	r2, r0
 801bd82:	460b      	mov	r3, r1
 801bd84:	4620      	mov	r0, r4
 801bd86:	4629      	mov	r1, r5
 801bd88:	f7e4 fd68 	bl	800085c <__aeabi_ddiv>
 801bd8c:	4602      	mov	r2, r0
 801bd8e:	460b      	mov	r3, r1
 801bd90:	f7e4 fa84 	bl	800029c <__adddf3>
 801bd94:	4602      	mov	r2, r0
 801bd96:	460b      	mov	r3, r1
 801bd98:	a113      	add	r1, pc, #76	; (adr r1, 801bde8 <__ieee754_asin+0x3e8>)
 801bd9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bd9e:	f7e4 fa7b 	bl	8000298 <__aeabi_dsub>
 801bda2:	4602      	mov	r2, r0
 801bda4:	460b      	mov	r3, r1
 801bda6:	4640      	mov	r0, r8
 801bda8:	4649      	mov	r1, r9
 801bdaa:	f7e4 fa75 	bl	8000298 <__aeabi_dsub>
 801bdae:	4632      	mov	r2, r6
 801bdb0:	4604      	mov	r4, r0
 801bdb2:	460d      	mov	r5, r1
 801bdb4:	465b      	mov	r3, fp
 801bdb6:	4630      	mov	r0, r6
 801bdb8:	4639      	mov	r1, r7
 801bdba:	f7e4 fa6f 	bl	800029c <__adddf3>
 801bdbe:	4602      	mov	r2, r0
 801bdc0:	460b      	mov	r3, r1
 801bdc2:	a10b      	add	r1, pc, #44	; (adr r1, 801bdf0 <__ieee754_asin+0x3f0>)
 801bdc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bdc8:	f7e4 fa66 	bl	8000298 <__aeabi_dsub>
 801bdcc:	4602      	mov	r2, r0
 801bdce:	460b      	mov	r3, r1
 801bdd0:	4620      	mov	r0, r4
 801bdd2:	4629      	mov	r1, r5
 801bdd4:	f7e4 fa60 	bl	8000298 <__aeabi_dsub>
 801bdd8:	4602      	mov	r2, r0
 801bdda:	460b      	mov	r3, r1
 801bddc:	a104      	add	r1, pc, #16	; (adr r1, 801bdf0 <__ieee754_asin+0x3f0>)
 801bdde:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bde2:	e6e7      	b.n	801bbb4 <__ieee754_asin+0x1b4>
 801bde4:	f3af 8000 	nop.w
 801bde8:	33145c07 	.word	0x33145c07
 801bdec:	3c91a626 	.word	0x3c91a626
 801bdf0:	54442d18 	.word	0x54442d18
 801bdf4:	3fe921fb 	.word	0x3fe921fb

0801bdf8 <__ieee754_atan2>:
 801bdf8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bdfc:	4690      	mov	r8, r2
 801bdfe:	4699      	mov	r9, r3
 801be00:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801be04:	461f      	mov	r7, r3
 801be06:	f1c8 0300 	rsb	r3, r8, #0
 801be0a:	ea43 0308 	orr.w	r3, r3, r8
 801be0e:	f8df e1b0 	ldr.w	lr, [pc, #432]	; 801bfc0 <__ieee754_atan2+0x1c8>
 801be12:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801be16:	4573      	cmp	r3, lr
 801be18:	4604      	mov	r4, r0
 801be1a:	460d      	mov	r5, r1
 801be1c:	d808      	bhi.n	801be30 <__ieee754_atan2+0x38>
 801be1e:	4246      	negs	r6, r0
 801be20:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801be24:	4306      	orrs	r6, r0
 801be26:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 801be2a:	4576      	cmp	r6, lr
 801be2c:	468c      	mov	ip, r1
 801be2e:	d908      	bls.n	801be42 <__ieee754_atan2+0x4a>
 801be30:	4642      	mov	r2, r8
 801be32:	464b      	mov	r3, r9
 801be34:	4620      	mov	r0, r4
 801be36:	4629      	mov	r1, r5
 801be38:	f7e4 fa30 	bl	800029c <__adddf3>
 801be3c:	4604      	mov	r4, r0
 801be3e:	460d      	mov	r5, r1
 801be40:	e031      	b.n	801bea6 <__ieee754_atan2+0xae>
 801be42:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 801be46:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 801be4a:	ea56 0608 	orrs.w	r6, r6, r8
 801be4e:	d103      	bne.n	801be58 <__ieee754_atan2+0x60>
 801be50:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be54:	f000 bfa8 	b.w	801cda8 <atan>
 801be58:	17be      	asrs	r6, r7, #30
 801be5a:	f006 0602 	and.w	r6, r6, #2
 801be5e:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 801be62:	ea53 0100 	orrs.w	r1, r3, r0
 801be66:	d107      	bne.n	801be78 <__ieee754_atan2+0x80>
 801be68:	2e02      	cmp	r6, #2
 801be6a:	d07a      	beq.n	801bf62 <__ieee754_atan2+0x16a>
 801be6c:	2e03      	cmp	r6, #3
 801be6e:	d11a      	bne.n	801bea6 <__ieee754_atan2+0xae>
 801be70:	a541      	add	r5, pc, #260	; (adr r5, 801bf78 <__ieee754_atan2+0x180>)
 801be72:	e9d5 4500 	ldrd	r4, r5, [r5]
 801be76:	e016      	b.n	801bea6 <__ieee754_atan2+0xae>
 801be78:	ea52 0108 	orrs.w	r1, r2, r8
 801be7c:	d106      	bne.n	801be8c <__ieee754_atan2+0x94>
 801be7e:	f1bc 0f00 	cmp.w	ip, #0
 801be82:	da72      	bge.n	801bf6a <__ieee754_atan2+0x172>
 801be84:	a53e      	add	r5, pc, #248	; (adr r5, 801bf80 <__ieee754_atan2+0x188>)
 801be86:	e9d5 4500 	ldrd	r4, r5, [r5]
 801be8a:	e00c      	b.n	801bea6 <__ieee754_atan2+0xae>
 801be8c:	4572      	cmp	r2, lr
 801be8e:	d123      	bne.n	801bed8 <__ieee754_atan2+0xe0>
 801be90:	4293      	cmp	r3, r2
 801be92:	d114      	bne.n	801bebe <__ieee754_atan2+0xc6>
 801be94:	2e02      	cmp	r6, #2
 801be96:	d00a      	beq.n	801beae <__ieee754_atan2+0xb6>
 801be98:	2e03      	cmp	r6, #3
 801be9a:	d00c      	beq.n	801beb6 <__ieee754_atan2+0xbe>
 801be9c:	2e01      	cmp	r6, #1
 801be9e:	d15c      	bne.n	801bf5a <__ieee754_atan2+0x162>
 801bea0:	a539      	add	r5, pc, #228	; (adr r5, 801bf88 <__ieee754_atan2+0x190>)
 801bea2:	e9d5 4500 	ldrd	r4, r5, [r5]
 801bea6:	4620      	mov	r0, r4
 801bea8:	4629      	mov	r1, r5
 801beaa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801beae:	a538      	add	r5, pc, #224	; (adr r5, 801bf90 <__ieee754_atan2+0x198>)
 801beb0:	e9d5 4500 	ldrd	r4, r5, [r5]
 801beb4:	e7f7      	b.n	801bea6 <__ieee754_atan2+0xae>
 801beb6:	a538      	add	r5, pc, #224	; (adr r5, 801bf98 <__ieee754_atan2+0x1a0>)
 801beb8:	e9d5 4500 	ldrd	r4, r5, [r5]
 801bebc:	e7f3      	b.n	801bea6 <__ieee754_atan2+0xae>
 801bebe:	2e02      	cmp	r6, #2
 801bec0:	d04f      	beq.n	801bf62 <__ieee754_atan2+0x16a>
 801bec2:	2e03      	cmp	r6, #3
 801bec4:	d0d4      	beq.n	801be70 <__ieee754_atan2+0x78>
 801bec6:	2e01      	cmp	r6, #1
 801bec8:	f04f 0400 	mov.w	r4, #0
 801becc:	d102      	bne.n	801bed4 <__ieee754_atan2+0xdc>
 801bece:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 801bed2:	e7e8      	b.n	801bea6 <__ieee754_atan2+0xae>
 801bed4:	2500      	movs	r5, #0
 801bed6:	e7e6      	b.n	801bea6 <__ieee754_atan2+0xae>
 801bed8:	4573      	cmp	r3, lr
 801beda:	d0d0      	beq.n	801be7e <__ieee754_atan2+0x86>
 801bedc:	1a9b      	subs	r3, r3, r2
 801bede:	151b      	asrs	r3, r3, #20
 801bee0:	2b3c      	cmp	r3, #60	; 0x3c
 801bee2:	dc20      	bgt.n	801bf26 <__ieee754_atan2+0x12e>
 801bee4:	2f00      	cmp	r7, #0
 801bee6:	da01      	bge.n	801beec <__ieee754_atan2+0xf4>
 801bee8:	333c      	adds	r3, #60	; 0x3c
 801beea:	db20      	blt.n	801bf2e <__ieee754_atan2+0x136>
 801beec:	4642      	mov	r2, r8
 801beee:	464b      	mov	r3, r9
 801bef0:	4620      	mov	r0, r4
 801bef2:	4629      	mov	r1, r5
 801bef4:	f7e4 fcb2 	bl	800085c <__aeabi_ddiv>
 801bef8:	f001 f8e6 	bl	801d0c8 <fabs>
 801befc:	f000 ff54 	bl	801cda8 <atan>
 801bf00:	4604      	mov	r4, r0
 801bf02:	460d      	mov	r5, r1
 801bf04:	2e01      	cmp	r6, #1
 801bf06:	d015      	beq.n	801bf34 <__ieee754_atan2+0x13c>
 801bf08:	2e02      	cmp	r6, #2
 801bf0a:	d017      	beq.n	801bf3c <__ieee754_atan2+0x144>
 801bf0c:	2e00      	cmp	r6, #0
 801bf0e:	d0ca      	beq.n	801bea6 <__ieee754_atan2+0xae>
 801bf10:	a323      	add	r3, pc, #140	; (adr r3, 801bfa0 <__ieee754_atan2+0x1a8>)
 801bf12:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf16:	4620      	mov	r0, r4
 801bf18:	4629      	mov	r1, r5
 801bf1a:	f7e4 f9bd 	bl	8000298 <__aeabi_dsub>
 801bf1e:	a322      	add	r3, pc, #136	; (adr r3, 801bfa8 <__ieee754_atan2+0x1b0>)
 801bf20:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf24:	e016      	b.n	801bf54 <__ieee754_atan2+0x15c>
 801bf26:	a522      	add	r5, pc, #136	; (adr r5, 801bfb0 <__ieee754_atan2+0x1b8>)
 801bf28:	e9d5 4500 	ldrd	r4, r5, [r5]
 801bf2c:	e7ea      	b.n	801bf04 <__ieee754_atan2+0x10c>
 801bf2e:	2400      	movs	r4, #0
 801bf30:	2500      	movs	r5, #0
 801bf32:	e7e7      	b.n	801bf04 <__ieee754_atan2+0x10c>
 801bf34:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 801bf38:	461d      	mov	r5, r3
 801bf3a:	e7b4      	b.n	801bea6 <__ieee754_atan2+0xae>
 801bf3c:	a318      	add	r3, pc, #96	; (adr r3, 801bfa0 <__ieee754_atan2+0x1a8>)
 801bf3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf42:	4620      	mov	r0, r4
 801bf44:	4629      	mov	r1, r5
 801bf46:	f7e4 f9a7 	bl	8000298 <__aeabi_dsub>
 801bf4a:	4602      	mov	r2, r0
 801bf4c:	460b      	mov	r3, r1
 801bf4e:	a116      	add	r1, pc, #88	; (adr r1, 801bfa8 <__ieee754_atan2+0x1b0>)
 801bf50:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bf54:	f7e4 f9a0 	bl	8000298 <__aeabi_dsub>
 801bf58:	e770      	b.n	801be3c <__ieee754_atan2+0x44>
 801bf5a:	a517      	add	r5, pc, #92	; (adr r5, 801bfb8 <__ieee754_atan2+0x1c0>)
 801bf5c:	e9d5 4500 	ldrd	r4, r5, [r5]
 801bf60:	e7a1      	b.n	801bea6 <__ieee754_atan2+0xae>
 801bf62:	a511      	add	r5, pc, #68	; (adr r5, 801bfa8 <__ieee754_atan2+0x1b0>)
 801bf64:	e9d5 4500 	ldrd	r4, r5, [r5]
 801bf68:	e79d      	b.n	801bea6 <__ieee754_atan2+0xae>
 801bf6a:	a511      	add	r5, pc, #68	; (adr r5, 801bfb0 <__ieee754_atan2+0x1b8>)
 801bf6c:	e9d5 4500 	ldrd	r4, r5, [r5]
 801bf70:	e799      	b.n	801bea6 <__ieee754_atan2+0xae>
 801bf72:	bf00      	nop
 801bf74:	f3af 8000 	nop.w
 801bf78:	54442d18 	.word	0x54442d18
 801bf7c:	c00921fb 	.word	0xc00921fb
 801bf80:	54442d18 	.word	0x54442d18
 801bf84:	bff921fb 	.word	0xbff921fb
 801bf88:	54442d18 	.word	0x54442d18
 801bf8c:	bfe921fb 	.word	0xbfe921fb
 801bf90:	7f3321d2 	.word	0x7f3321d2
 801bf94:	4002d97c 	.word	0x4002d97c
 801bf98:	7f3321d2 	.word	0x7f3321d2
 801bf9c:	c002d97c 	.word	0xc002d97c
 801bfa0:	33145c07 	.word	0x33145c07
 801bfa4:	3ca1a626 	.word	0x3ca1a626
 801bfa8:	54442d18 	.word	0x54442d18
 801bfac:	400921fb 	.word	0x400921fb
 801bfb0:	54442d18 	.word	0x54442d18
 801bfb4:	3ff921fb 	.word	0x3ff921fb
 801bfb8:	54442d18 	.word	0x54442d18
 801bfbc:	3fe921fb 	.word	0x3fe921fb
 801bfc0:	7ff00000 	.word	0x7ff00000

0801bfc4 <__ieee754_sqrt>:
 801bfc4:	4b54      	ldr	r3, [pc, #336]	; (801c118 <__ieee754_sqrt+0x154>)
 801bfc6:	438b      	bics	r3, r1
 801bfc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bfcc:	460a      	mov	r2, r1
 801bfce:	4606      	mov	r6, r0
 801bfd0:	460f      	mov	r7, r1
 801bfd2:	460c      	mov	r4, r1
 801bfd4:	d10f      	bne.n	801bff6 <__ieee754_sqrt+0x32>
 801bfd6:	4602      	mov	r2, r0
 801bfd8:	460b      	mov	r3, r1
 801bfda:	f7e4 fb15 	bl	8000608 <__aeabi_dmul>
 801bfde:	4602      	mov	r2, r0
 801bfe0:	460b      	mov	r3, r1
 801bfe2:	4630      	mov	r0, r6
 801bfe4:	4639      	mov	r1, r7
 801bfe6:	f7e4 f959 	bl	800029c <__adddf3>
 801bfea:	4606      	mov	r6, r0
 801bfec:	460f      	mov	r7, r1
 801bfee:	4630      	mov	r0, r6
 801bff0:	4639      	mov	r1, r7
 801bff2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bff6:	2900      	cmp	r1, #0
 801bff8:	4605      	mov	r5, r0
 801bffa:	4603      	mov	r3, r0
 801bffc:	dc0e      	bgt.n	801c01c <__ieee754_sqrt+0x58>
 801bffe:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 801c002:	ea5c 0505 	orrs.w	r5, ip, r5
 801c006:	d0f2      	beq.n	801bfee <__ieee754_sqrt+0x2a>
 801c008:	b141      	cbz	r1, 801c01c <__ieee754_sqrt+0x58>
 801c00a:	4602      	mov	r2, r0
 801c00c:	460b      	mov	r3, r1
 801c00e:	f7e4 f943 	bl	8000298 <__aeabi_dsub>
 801c012:	4602      	mov	r2, r0
 801c014:	460b      	mov	r3, r1
 801c016:	f7e4 fc21 	bl	800085c <__aeabi_ddiv>
 801c01a:	e7e6      	b.n	801bfea <__ieee754_sqrt+0x26>
 801c01c:	1512      	asrs	r2, r2, #20
 801c01e:	d073      	beq.n	801c108 <__ieee754_sqrt+0x144>
 801c020:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801c024:	07d5      	lsls	r5, r2, #31
 801c026:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801c02a:	bf48      	it	mi
 801c02c:	0fd9      	lsrmi	r1, r3, #31
 801c02e:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 801c032:	bf44      	itt	mi
 801c034:	005b      	lslmi	r3, r3, #1
 801c036:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 801c03a:	2500      	movs	r5, #0
 801c03c:	1051      	asrs	r1, r2, #1
 801c03e:	0fda      	lsrs	r2, r3, #31
 801c040:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801c044:	005b      	lsls	r3, r3, #1
 801c046:	2216      	movs	r2, #22
 801c048:	4628      	mov	r0, r5
 801c04a:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 801c04e:	1987      	adds	r7, r0, r6
 801c050:	42a7      	cmp	r7, r4
 801c052:	bfde      	ittt	le
 801c054:	19b8      	addle	r0, r7, r6
 801c056:	1be4      	suble	r4, r4, r7
 801c058:	19ad      	addle	r5, r5, r6
 801c05a:	0fdf      	lsrs	r7, r3, #31
 801c05c:	3a01      	subs	r2, #1
 801c05e:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 801c062:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801c066:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801c06a:	d1f0      	bne.n	801c04e <__ieee754_sqrt+0x8a>
 801c06c:	f04f 0c20 	mov.w	ip, #32
 801c070:	4696      	mov	lr, r2
 801c072:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801c076:	4284      	cmp	r4, r0
 801c078:	eb06 070e 	add.w	r7, r6, lr
 801c07c:	dc02      	bgt.n	801c084 <__ieee754_sqrt+0xc0>
 801c07e:	d112      	bne.n	801c0a6 <__ieee754_sqrt+0xe2>
 801c080:	429f      	cmp	r7, r3
 801c082:	d810      	bhi.n	801c0a6 <__ieee754_sqrt+0xe2>
 801c084:	2f00      	cmp	r7, #0
 801c086:	eb07 0e06 	add.w	lr, r7, r6
 801c08a:	da42      	bge.n	801c112 <__ieee754_sqrt+0x14e>
 801c08c:	f1be 0f00 	cmp.w	lr, #0
 801c090:	db3f      	blt.n	801c112 <__ieee754_sqrt+0x14e>
 801c092:	f100 0801 	add.w	r8, r0, #1
 801c096:	1a24      	subs	r4, r4, r0
 801c098:	429f      	cmp	r7, r3
 801c09a:	bf88      	it	hi
 801c09c:	f104 34ff 	addhi.w	r4, r4, #4294967295
 801c0a0:	1bdb      	subs	r3, r3, r7
 801c0a2:	4432      	add	r2, r6
 801c0a4:	4640      	mov	r0, r8
 801c0a6:	0064      	lsls	r4, r4, #1
 801c0a8:	f1bc 0c01 	subs.w	ip, ip, #1
 801c0ac:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 801c0b0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801c0b4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801c0b8:	d1dd      	bne.n	801c076 <__ieee754_sqrt+0xb2>
 801c0ba:	4323      	orrs	r3, r4
 801c0bc:	d006      	beq.n	801c0cc <__ieee754_sqrt+0x108>
 801c0be:	1c54      	adds	r4, r2, #1
 801c0c0:	bf13      	iteet	ne
 801c0c2:	3201      	addne	r2, #1
 801c0c4:	3501      	addeq	r5, #1
 801c0c6:	4662      	moveq	r2, ip
 801c0c8:	f022 0201 	bicne.w	r2, r2, #1
 801c0cc:	106b      	asrs	r3, r5, #1
 801c0ce:	0852      	lsrs	r2, r2, #1
 801c0d0:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801c0d4:	07e8      	lsls	r0, r5, #31
 801c0d6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801c0da:	bf48      	it	mi
 801c0dc:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 801c0e0:	eb03 5701 	add.w	r7, r3, r1, lsl #20
 801c0e4:	4616      	mov	r6, r2
 801c0e6:	e782      	b.n	801bfee <__ieee754_sqrt+0x2a>
 801c0e8:	0adc      	lsrs	r4, r3, #11
 801c0ea:	3915      	subs	r1, #21
 801c0ec:	055b      	lsls	r3, r3, #21
 801c0ee:	2c00      	cmp	r4, #0
 801c0f0:	d0fa      	beq.n	801c0e8 <__ieee754_sqrt+0x124>
 801c0f2:	02e6      	lsls	r6, r4, #11
 801c0f4:	d50a      	bpl.n	801c10c <__ieee754_sqrt+0x148>
 801c0f6:	f1c2 0020 	rsb	r0, r2, #32
 801c0fa:	fa23 f000 	lsr.w	r0, r3, r0
 801c0fe:	1e55      	subs	r5, r2, #1
 801c100:	4093      	lsls	r3, r2
 801c102:	4304      	orrs	r4, r0
 801c104:	1b4a      	subs	r2, r1, r5
 801c106:	e78b      	b.n	801c020 <__ieee754_sqrt+0x5c>
 801c108:	4611      	mov	r1, r2
 801c10a:	e7f0      	b.n	801c0ee <__ieee754_sqrt+0x12a>
 801c10c:	0064      	lsls	r4, r4, #1
 801c10e:	3201      	adds	r2, #1
 801c110:	e7ef      	b.n	801c0f2 <__ieee754_sqrt+0x12e>
 801c112:	4680      	mov	r8, r0
 801c114:	e7bf      	b.n	801c096 <__ieee754_sqrt+0xd2>
 801c116:	bf00      	nop
 801c118:	7ff00000 	.word	0x7ff00000

0801c11c <__ieee754_acosf>:
 801c11c:	b508      	push	{r3, lr}
 801c11e:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 801c122:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 801c126:	ed2d 8b0c 	vpush	{d8-d13}
 801c12a:	ee08 0a10 	vmov	s16, r0
 801c12e:	d10c      	bne.n	801c14a <__ieee754_acosf+0x2e>
 801c130:	eddf 7a69 	vldr	s15, [pc, #420]	; 801c2d8 <__ieee754_acosf+0x1bc>
 801c134:	ed9f 8a69 	vldr	s16, [pc, #420]	; 801c2dc <__ieee754_acosf+0x1c0>
 801c138:	2800      	cmp	r0, #0
 801c13a:	bfd8      	it	le
 801c13c:	eef0 7a48 	vmovle.f32	s15, s16
 801c140:	ecbd 8b0c 	vpop	{d8-d13}
 801c144:	ee17 0a90 	vmov	r0, s15
 801c148:	bd08      	pop	{r3, pc}
 801c14a:	dd04      	ble.n	801c156 <__ieee754_acosf+0x3a>
 801c14c:	ee38 8a48 	vsub.f32	s16, s16, s16
 801c150:	eec8 7a08 	vdiv.f32	s15, s16, s16
 801c154:	e7f4      	b.n	801c140 <__ieee754_acosf+0x24>
 801c156:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 801c15a:	da3e      	bge.n	801c1da <__ieee754_acosf+0xbe>
 801c15c:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 801c160:	f340 80b7 	ble.w	801c2d2 <__ieee754_acosf+0x1b6>
 801c164:	ee68 7a08 	vmul.f32	s15, s16, s16
 801c168:	eddf 6a5d 	vldr	s13, [pc, #372]	; 801c2e0 <__ieee754_acosf+0x1c4>
 801c16c:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 801c2e4 <__ieee754_acosf+0x1c8>
 801c170:	ed9f 6a5d 	vldr	s12, [pc, #372]	; 801c2e8 <__ieee754_acosf+0x1cc>
 801c174:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801c178:	eddf 6a5c 	vldr	s13, [pc, #368]	; 801c2ec <__ieee754_acosf+0x1d0>
 801c17c:	eee7 6a27 	vfma.f32	s13, s14, s15
 801c180:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 801c2f0 <__ieee754_acosf+0x1d4>
 801c184:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801c188:	eddf 6a5a 	vldr	s13, [pc, #360]	; 801c2f4 <__ieee754_acosf+0x1d8>
 801c18c:	eee7 6a27 	vfma.f32	s13, s14, s15
 801c190:	ed9f 7a59 	vldr	s14, [pc, #356]	; 801c2f8 <__ieee754_acosf+0x1dc>
 801c194:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801c198:	eddf 6a58 	vldr	s13, [pc, #352]	; 801c2fc <__ieee754_acosf+0x1e0>
 801c19c:	eea7 6aa6 	vfma.f32	s12, s15, s13
 801c1a0:	eddf 6a57 	vldr	s13, [pc, #348]	; 801c300 <__ieee754_acosf+0x1e4>
 801c1a4:	eee6 6a27 	vfma.f32	s13, s12, s15
 801c1a8:	ed9f 6a56 	vldr	s12, [pc, #344]	; 801c304 <__ieee754_acosf+0x1e8>
 801c1ac:	eea6 6aa7 	vfma.f32	s12, s13, s15
 801c1b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c1b4:	eee6 6a27 	vfma.f32	s13, s12, s15
 801c1b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 801c1bc:	eef0 7a66 	vmov.f32	s15, s13
 801c1c0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801c1c4:	eddf 7a50 	vldr	s15, [pc, #320]	; 801c308 <__ieee754_acosf+0x1ec>
 801c1c8:	eee8 7a66 	vfms.f32	s15, s16, s13
 801c1cc:	ee38 8a67 	vsub.f32	s16, s16, s15
 801c1d0:	eddf 7a4e 	vldr	s15, [pc, #312]	; 801c30c <__ieee754_acosf+0x1f0>
 801c1d4:	ee77 7ac8 	vsub.f32	s15, s15, s16
 801c1d8:	e7b2      	b.n	801c140 <__ieee754_acosf+0x24>
 801c1da:	2800      	cmp	r0, #0
 801c1dc:	eddf da40 	vldr	s27, [pc, #256]	; 801c2e0 <__ieee754_acosf+0x1c4>
 801c1e0:	eddf ca40 	vldr	s25, [pc, #256]	; 801c2e4 <__ieee754_acosf+0x1c8>
 801c1e4:	ed9f ca41 	vldr	s24, [pc, #260]	; 801c2ec <__ieee754_acosf+0x1d0>
 801c1e8:	eddf ba41 	vldr	s23, [pc, #260]	; 801c2f0 <__ieee754_acosf+0x1d4>
 801c1ec:	ed9f ba41 	vldr	s22, [pc, #260]	; 801c2f4 <__ieee754_acosf+0x1d8>
 801c1f0:	eddf 8a41 	vldr	s17, [pc, #260]	; 801c2f8 <__ieee754_acosf+0x1dc>
 801c1f4:	ed9f da41 	vldr	s26, [pc, #260]	; 801c2fc <__ieee754_acosf+0x1e0>
 801c1f8:	eddf aa3b 	vldr	s21, [pc, #236]	; 801c2e8 <__ieee754_acosf+0x1cc>
 801c1fc:	ed9f aa40 	vldr	s20, [pc, #256]	; 801c300 <__ieee754_acosf+0x1e4>
 801c200:	eddf 9a40 	vldr	s19, [pc, #256]	; 801c304 <__ieee754_acosf+0x1e8>
 801c204:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 801c208:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801c20c:	da2c      	bge.n	801c268 <__ieee754_acosf+0x14c>
 801c20e:	ee38 8a09 	vadd.f32	s16, s16, s18
 801c212:	ee28 8a27 	vmul.f32	s16, s16, s15
 801c216:	eee8 ca2d 	vfma.f32	s25, s16, s27
 801c21a:	eee8 aa0d 	vfma.f32	s21, s16, s26
 801c21e:	eeac ca88 	vfma.f32	s24, s25, s16
 801c222:	eeaa aa88 	vfma.f32	s20, s21, s16
 801c226:	eeec ba08 	vfma.f32	s23, s24, s16
 801c22a:	eeea 9a08 	vfma.f32	s19, s20, s16
 801c22e:	eeab ba88 	vfma.f32	s22, s23, s16
 801c232:	eea9 9a88 	vfma.f32	s18, s19, s16
 801c236:	eeeb 8a08 	vfma.f32	s17, s22, s16
 801c23a:	ee18 0a10 	vmov	r0, s16
 801c23e:	ee68 8a88 	vmul.f32	s17, s17, s16
 801c242:	f000 f995 	bl	801c570 <__ieee754_sqrtf>
 801c246:	eec8 7a89 	vdiv.f32	s15, s17, s18
 801c24a:	ee06 0a90 	vmov	s13, r0
 801c24e:	ed9f 7a30 	vldr	s14, [pc, #192]	; 801c310 <__ieee754_acosf+0x1f4>
 801c252:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801c256:	eddf 7a2f 	vldr	s15, [pc, #188]	; 801c314 <__ieee754_acosf+0x1f8>
 801c25a:	ee37 7a26 	vadd.f32	s14, s14, s13
 801c25e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801c262:	eee7 7a66 	vfms.f32	s15, s14, s13
 801c266:	e76b      	b.n	801c140 <__ieee754_acosf+0x24>
 801c268:	ee39 8a48 	vsub.f32	s16, s18, s16
 801c26c:	ee28 8a27 	vmul.f32	s16, s16, s15
 801c270:	ee18 0a10 	vmov	r0, s16
 801c274:	f000 f97c 	bl	801c570 <__ieee754_sqrtf>
 801c278:	eee8 ca2d 	vfma.f32	s25, s16, s27
 801c27c:	f420 637f 	bic.w	r3, r0, #4080	; 0xff0
 801c280:	f023 030f 	bic.w	r3, r3, #15
 801c284:	eee8 aa0d 	vfma.f32	s21, s16, s26
 801c288:	eeac ca88 	vfma.f32	s24, s25, s16
 801c28c:	eeaa aa88 	vfma.f32	s20, s21, s16
 801c290:	eeec ba08 	vfma.f32	s23, s24, s16
 801c294:	eeea 9a08 	vfma.f32	s19, s20, s16
 801c298:	eeab ba88 	vfma.f32	s22, s23, s16
 801c29c:	ee07 3a10 	vmov	s14, r3
 801c2a0:	eeeb 8a08 	vfma.f32	s17, s22, s16
 801c2a4:	eef0 5a48 	vmov.f32	s11, s16
 801c2a8:	ee06 0a90 	vmov	s13, r0
 801c2ac:	eee7 5a47 	vfms.f32	s11, s14, s14
 801c2b0:	eea9 9a88 	vfma.f32	s18, s19, s16
 801c2b4:	ee36 6a87 	vadd.f32	s12, s13, s14
 801c2b8:	ee68 8a88 	vmul.f32	s17, s17, s16
 801c2bc:	eec5 7a86 	vdiv.f32	s15, s11, s12
 801c2c0:	ee88 6a89 	vdiv.f32	s12, s17, s18
 801c2c4:	eee6 7a86 	vfma.f32	s15, s13, s12
 801c2c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 801c2cc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801c2d0:	e736      	b.n	801c140 <__ieee754_acosf+0x24>
 801c2d2:	eddf 7a11 	vldr	s15, [pc, #68]	; 801c318 <__ieee754_acosf+0x1fc>
 801c2d6:	e733      	b.n	801c140 <__ieee754_acosf+0x24>
 801c2d8:	00000000 	.word	0x00000000
 801c2dc:	40490fdb 	.word	0x40490fdb
 801c2e0:	3811ef08 	.word	0x3811ef08
 801c2e4:	3a4f7f04 	.word	0x3a4f7f04
 801c2e8:	bf303361 	.word	0xbf303361
 801c2ec:	bd241146 	.word	0xbd241146
 801c2f0:	3e4e0aa8 	.word	0x3e4e0aa8
 801c2f4:	bea6b090 	.word	0xbea6b090
 801c2f8:	3e2aaaab 	.word	0x3e2aaaab
 801c2fc:	3d9dc62e 	.word	0x3d9dc62e
 801c300:	4001572d 	.word	0x4001572d
 801c304:	c019d139 	.word	0xc019d139
 801c308:	33a22168 	.word	0x33a22168
 801c30c:	3fc90fda 	.word	0x3fc90fda
 801c310:	b3a22168 	.word	0xb3a22168
 801c314:	40490fda 	.word	0x40490fda
 801c318:	3fc90fdb 	.word	0x3fc90fdb

0801c31c <__ieee754_rem_pio2f>:
 801c31c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c31e:	4b86      	ldr	r3, [pc, #536]	; (801c538 <__ieee754_rem_pio2f+0x21c>)
 801c320:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 801c324:	429c      	cmp	r4, r3
 801c326:	b087      	sub	sp, #28
 801c328:	ee07 0a90 	vmov	s15, r0
 801c32c:	460d      	mov	r5, r1
 801c32e:	4606      	mov	r6, r0
 801c330:	dc04      	bgt.n	801c33c <__ieee754_rem_pio2f+0x20>
 801c332:	2300      	movs	r3, #0
 801c334:	6028      	str	r0, [r5, #0]
 801c336:	604b      	str	r3, [r1, #4]
 801c338:	2000      	movs	r0, #0
 801c33a:	e020      	b.n	801c37e <__ieee754_rem_pio2f+0x62>
 801c33c:	4b7f      	ldr	r3, [pc, #508]	; (801c53c <__ieee754_rem_pio2f+0x220>)
 801c33e:	429c      	cmp	r4, r3
 801c340:	dc38      	bgt.n	801c3b4 <__ieee754_rem_pio2f+0x98>
 801c342:	2800      	cmp	r0, #0
 801c344:	f024 040f 	bic.w	r4, r4, #15
 801c348:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 801c540 <__ieee754_rem_pio2f+0x224>
 801c34c:	4b7d      	ldr	r3, [pc, #500]	; (801c544 <__ieee754_rem_pio2f+0x228>)
 801c34e:	dd18      	ble.n	801c382 <__ieee754_rem_pio2f+0x66>
 801c350:	429c      	cmp	r4, r3
 801c352:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801c356:	bf09      	itett	eq
 801c358:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 801c548 <__ieee754_rem_pio2f+0x22c>
 801c35c:	ed9f 7a7b 	vldrne	s14, [pc, #492]	; 801c54c <__ieee754_rem_pio2f+0x230>
 801c360:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 801c364:	ed9f 7a7a 	vldreq	s14, [pc, #488]	; 801c550 <__ieee754_rem_pio2f+0x234>
 801c368:	ee77 6ac7 	vsub.f32	s13, s15, s14
 801c36c:	2001      	movs	r0, #1
 801c36e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801c372:	edc1 6a00 	vstr	s13, [r1]
 801c376:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801c37a:	edc1 7a01 	vstr	s15, [r1, #4]
 801c37e:	b007      	add	sp, #28
 801c380:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c382:	429c      	cmp	r4, r3
 801c384:	ee77 7a87 	vadd.f32	s15, s15, s14
 801c388:	bf09      	itett	eq
 801c38a:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 801c548 <__ieee754_rem_pio2f+0x22c>
 801c38e:	ed9f 7a6f 	vldrne	s14, [pc, #444]	; 801c54c <__ieee754_rem_pio2f+0x230>
 801c392:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 801c396:	ed9f 7a6e 	vldreq	s14, [pc, #440]	; 801c550 <__ieee754_rem_pio2f+0x234>
 801c39a:	ee77 6a87 	vadd.f32	s13, s15, s14
 801c39e:	f04f 30ff 	mov.w	r0, #4294967295
 801c3a2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801c3a6:	edc1 6a00 	vstr	s13, [r1]
 801c3aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 801c3ae:	edc1 7a01 	vstr	s15, [r1, #4]
 801c3b2:	e7e4      	b.n	801c37e <__ieee754_rem_pio2f+0x62>
 801c3b4:	4b67      	ldr	r3, [pc, #412]	; (801c554 <__ieee754_rem_pio2f+0x238>)
 801c3b6:	429c      	cmp	r4, r3
 801c3b8:	dc73      	bgt.n	801c4a2 <__ieee754_rem_pio2f+0x186>
 801c3ba:	f000 fe91 	bl	801d0e0 <fabsf>
 801c3be:	eddf 6a66 	vldr	s13, [pc, #408]	; 801c558 <__ieee754_rem_pio2f+0x23c>
 801c3c2:	ee07 0a90 	vmov	s15, r0
 801c3c6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801c3ca:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801c3ce:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801c3d2:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 801c3d6:	ee17 0a10 	vmov	r0, s14
 801c3da:	ed9f 7a59 	vldr	s14, [pc, #356]	; 801c540 <__ieee754_rem_pio2f+0x224>
 801c3de:	eef1 6a65 	vneg.f32	s13, s11
 801c3e2:	eee6 7a87 	vfma.f32	s15, s13, s14
 801c3e6:	281f      	cmp	r0, #31
 801c3e8:	ed9f 7a58 	vldr	s14, [pc, #352]	; 801c54c <__ieee754_rem_pio2f+0x230>
 801c3ec:	ee25 7a87 	vmul.f32	s14, s11, s14
 801c3f0:	ee37 6ac7 	vsub.f32	s12, s15, s14
 801c3f4:	ee16 3a10 	vmov	r3, s12
 801c3f8:	dc1c      	bgt.n	801c434 <__ieee754_rem_pio2f+0x118>
 801c3fa:	1e47      	subs	r7, r0, #1
 801c3fc:	4957      	ldr	r1, [pc, #348]	; (801c55c <__ieee754_rem_pio2f+0x240>)
 801c3fe:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 801c402:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 801c406:	428a      	cmp	r2, r1
 801c408:	d014      	beq.n	801c434 <__ieee754_rem_pio2f+0x118>
 801c40a:	602b      	str	r3, [r5, #0]
 801c40c:	edd5 6a00 	vldr	s13, [r5]
 801c410:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801c414:	2e00      	cmp	r6, #0
 801c416:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801c41a:	edc5 7a01 	vstr	s15, [r5, #4]
 801c41e:	daae      	bge.n	801c37e <__ieee754_rem_pio2f+0x62>
 801c420:	eef1 6a66 	vneg.f32	s13, s13
 801c424:	edc5 6a00 	vstr	s13, [r5]
 801c428:	eef1 7a67 	vneg.f32	s15, s15
 801c42c:	edc5 7a01 	vstr	s15, [r5, #4]
 801c430:	4240      	negs	r0, r0
 801c432:	e7a4      	b.n	801c37e <__ieee754_rem_pio2f+0x62>
 801c434:	15e4      	asrs	r4, r4, #23
 801c436:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801c43a:	1aa2      	subs	r2, r4, r2
 801c43c:	2a08      	cmp	r2, #8
 801c43e:	dde4      	ble.n	801c40a <__ieee754_rem_pio2f+0xee>
 801c440:	ed9f 7a41 	vldr	s14, [pc, #260]	; 801c548 <__ieee754_rem_pio2f+0x22c>
 801c444:	eeb0 6a67 	vmov.f32	s12, s15
 801c448:	eea6 6a87 	vfma.f32	s12, s13, s14
 801c44c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801c450:	eee6 7a87 	vfma.f32	s15, s13, s14
 801c454:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 801c550 <__ieee754_rem_pio2f+0x234>
 801c458:	eed5 7a87 	vfnms.f32	s15, s11, s14
 801c45c:	eeb0 7a67 	vmov.f32	s14, s15
 801c460:	ee76 7a67 	vsub.f32	s15, s12, s15
 801c464:	ee17 3a90 	vmov	r3, s15
 801c468:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801c46c:	1aa4      	subs	r4, r4, r2
 801c46e:	2c19      	cmp	r4, #25
 801c470:	dc04      	bgt.n	801c47c <__ieee754_rem_pio2f+0x160>
 801c472:	edc5 7a00 	vstr	s15, [r5]
 801c476:	eef0 7a46 	vmov.f32	s15, s12
 801c47a:	e7c7      	b.n	801c40c <__ieee754_rem_pio2f+0xf0>
 801c47c:	ed9f 5a38 	vldr	s10, [pc, #224]	; 801c560 <__ieee754_rem_pio2f+0x244>
 801c480:	eef0 7a46 	vmov.f32	s15, s12
 801c484:	eee6 7a85 	vfma.f32	s15, s13, s10
 801c488:	ee36 7a67 	vsub.f32	s14, s12, s15
 801c48c:	eea6 7a85 	vfma.f32	s14, s13, s10
 801c490:	eddf 6a34 	vldr	s13, [pc, #208]	; 801c564 <__ieee754_rem_pio2f+0x248>
 801c494:	ee95 7aa6 	vfnms.f32	s14, s11, s13
 801c498:	ee77 6ac7 	vsub.f32	s13, s15, s14
 801c49c:	edc5 6a00 	vstr	s13, [r5]
 801c4a0:	e7b4      	b.n	801c40c <__ieee754_rem_pio2f+0xf0>
 801c4a2:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801c4a6:	db06      	blt.n	801c4b6 <__ieee754_rem_pio2f+0x19a>
 801c4a8:	ee77 7ae7 	vsub.f32	s15, s15, s15
 801c4ac:	edc1 7a01 	vstr	s15, [r1, #4]
 801c4b0:	edc1 7a00 	vstr	s15, [r1]
 801c4b4:	e740      	b.n	801c338 <__ieee754_rem_pio2f+0x1c>
 801c4b6:	15e2      	asrs	r2, r4, #23
 801c4b8:	3a86      	subs	r2, #134	; 0x86
 801c4ba:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 801c4be:	ee07 3a90 	vmov	s15, r3
 801c4c2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801c4c6:	eddf 6a28 	vldr	s13, [pc, #160]	; 801c568 <__ieee754_rem_pio2f+0x24c>
 801c4ca:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c4ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801c4d2:	ed8d 7a03 	vstr	s14, [sp, #12]
 801c4d6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801c4da:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801c4de:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c4e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801c4e6:	ed8d 7a04 	vstr	s14, [sp, #16]
 801c4ea:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801c4ee:	eef5 7a40 	vcmp.f32	s15, #0.0
 801c4f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c4f6:	edcd 7a05 	vstr	s15, [sp, #20]
 801c4fa:	d11a      	bne.n	801c532 <__ieee754_rem_pio2f+0x216>
 801c4fc:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801c500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c504:	bf0c      	ite	eq
 801c506:	2301      	moveq	r3, #1
 801c508:	2302      	movne	r3, #2
 801c50a:	4918      	ldr	r1, [pc, #96]	; (801c56c <__ieee754_rem_pio2f+0x250>)
 801c50c:	9101      	str	r1, [sp, #4]
 801c50e:	2102      	movs	r1, #2
 801c510:	9100      	str	r1, [sp, #0]
 801c512:	a803      	add	r0, sp, #12
 801c514:	4629      	mov	r1, r5
 801c516:	f000 f897 	bl	801c648 <__kernel_rem_pio2f>
 801c51a:	2e00      	cmp	r6, #0
 801c51c:	f6bf af2f 	bge.w	801c37e <__ieee754_rem_pio2f+0x62>
 801c520:	edd5 7a00 	vldr	s15, [r5]
 801c524:	eef1 7a67 	vneg.f32	s15, s15
 801c528:	edc5 7a00 	vstr	s15, [r5]
 801c52c:	edd5 7a01 	vldr	s15, [r5, #4]
 801c530:	e77a      	b.n	801c428 <__ieee754_rem_pio2f+0x10c>
 801c532:	2303      	movs	r3, #3
 801c534:	e7e9      	b.n	801c50a <__ieee754_rem_pio2f+0x1ee>
 801c536:	bf00      	nop
 801c538:	3f490fd8 	.word	0x3f490fd8
 801c53c:	4016cbe3 	.word	0x4016cbe3
 801c540:	3fc90f80 	.word	0x3fc90f80
 801c544:	3fc90fd0 	.word	0x3fc90fd0
 801c548:	37354400 	.word	0x37354400
 801c54c:	37354443 	.word	0x37354443
 801c550:	2e85a308 	.word	0x2e85a308
 801c554:	43490f80 	.word	0x43490f80
 801c558:	3f22f984 	.word	0x3f22f984
 801c55c:	0801d894 	.word	0x0801d894
 801c560:	2e85a300 	.word	0x2e85a300
 801c564:	248d3132 	.word	0x248d3132
 801c568:	43800000 	.word	0x43800000
 801c56c:	0801d914 	.word	0x0801d914

0801c570 <__ieee754_sqrtf>:
 801c570:	ee07 0a90 	vmov	s15, r0
 801c574:	eef1 7ae7 	vsqrt.f32	s15, s15
 801c578:	ee17 0a90 	vmov	r0, s15
 801c57c:	4770      	bx	lr
	...

0801c580 <__kernel_cosf>:
 801c580:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 801c584:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801c588:	ee05 0a10 	vmov	s10, r0
 801c58c:	ee07 1a10 	vmov	s14, r1
 801c590:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801c594:	da05      	bge.n	801c5a2 <__kernel_cosf+0x22>
 801c596:	eefd 7ac5 	vcvt.s32.f32	s15, s10
 801c59a:	ee17 2a90 	vmov	r2, s15
 801c59e:	2a00      	cmp	r2, #0
 801c5a0:	d03f      	beq.n	801c622 <__kernel_cosf+0xa2>
 801c5a2:	ee65 5a05 	vmul.f32	s11, s10, s10
 801c5a6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801c5aa:	ee65 7aa6 	vmul.f32	s15, s11, s13
 801c5ae:	ee27 7a45 	vnmul.f32	s14, s14, s10
 801c5b2:	eddf 6a1d 	vldr	s13, [pc, #116]	; 801c628 <__kernel_cosf+0xa8>
 801c5b6:	ed9f 5a1d 	vldr	s10, [pc, #116]	; 801c62c <__kernel_cosf+0xac>
 801c5ba:	4a1d      	ldr	r2, [pc, #116]	; (801c630 <__kernel_cosf+0xb0>)
 801c5bc:	eee5 6a85 	vfma.f32	s13, s11, s10
 801c5c0:	4293      	cmp	r3, r2
 801c5c2:	ed9f 5a1c 	vldr	s10, [pc, #112]	; 801c634 <__kernel_cosf+0xb4>
 801c5c6:	eea6 5aa5 	vfma.f32	s10, s13, s11
 801c5ca:	eddf 6a1b 	vldr	s13, [pc, #108]	; 801c638 <__kernel_cosf+0xb8>
 801c5ce:	eee5 6a25 	vfma.f32	s13, s10, s11
 801c5d2:	ed9f 5a1a 	vldr	s10, [pc, #104]	; 801c63c <__kernel_cosf+0xbc>
 801c5d6:	eea6 5aa5 	vfma.f32	s10, s13, s11
 801c5da:	eddf 6a19 	vldr	s13, [pc, #100]	; 801c640 <__kernel_cosf+0xc0>
 801c5de:	eee5 6a25 	vfma.f32	s13, s10, s11
 801c5e2:	ee66 6aa5 	vmul.f32	s13, s13, s11
 801c5e6:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801c5ea:	eef0 5a47 	vmov.f32	s11, s14
 801c5ee:	dc06      	bgt.n	801c5fe <__kernel_cosf+0x7e>
 801c5f0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 801c5f4:	ee76 7a47 	vsub.f32	s15, s12, s14
 801c5f8:	ee17 0a90 	vmov	r0, s15
 801c5fc:	4770      	bx	lr
 801c5fe:	4a11      	ldr	r2, [pc, #68]	; (801c644 <__kernel_cosf+0xc4>)
 801c600:	4293      	cmp	r3, r2
 801c602:	bfda      	itte	le
 801c604:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 801c608:	ee06 3a90 	vmovle	s13, r3
 801c60c:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 801c610:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801c614:	ee36 7a66 	vsub.f32	s14, s12, s13
 801c618:	ee77 7ae5 	vsub.f32	s15, s15, s11
 801c61c:	ee77 7a67 	vsub.f32	s15, s14, s15
 801c620:	e7ea      	b.n	801c5f8 <__kernel_cosf+0x78>
 801c622:	eef0 7a46 	vmov.f32	s15, s12
 801c626:	e7e7      	b.n	801c5f8 <__kernel_cosf+0x78>
 801c628:	310f74f6 	.word	0x310f74f6
 801c62c:	ad47d74e 	.word	0xad47d74e
 801c630:	3e999999 	.word	0x3e999999
 801c634:	b493f27c 	.word	0xb493f27c
 801c638:	37d00d01 	.word	0x37d00d01
 801c63c:	bab60b61 	.word	0xbab60b61
 801c640:	3d2aaaab 	.word	0x3d2aaaab
 801c644:	3f480000 	.word	0x3f480000

0801c648 <__kernel_rem_pio2f>:
 801c648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c64c:	ed2d 8b04 	vpush	{d8-d9}
 801c650:	b0d7      	sub	sp, #348	; 0x15c
 801c652:	4688      	mov	r8, r1
 801c654:	9301      	str	r3, [sp, #4]
 801c656:	9964      	ldr	r1, [sp, #400]	; 0x190
 801c658:	4bd2      	ldr	r3, [pc, #840]	; (801c9a4 <__kernel_rem_pio2f+0x35c>)
 801c65a:	9002      	str	r0, [sp, #8]
 801c65c:	f853 b021 	ldr.w	fp, [r3, r1, lsl #2]
 801c660:	9b01      	ldr	r3, [sp, #4]
 801c662:	9c65      	ldr	r4, [sp, #404]	; 0x194
 801c664:	ed9f 7ad3 	vldr	s14, [pc, #844]	; 801c9b4 <__kernel_rem_pio2f+0x36c>
 801c668:	3b01      	subs	r3, #1
 801c66a:	1ed1      	subs	r1, r2, #3
 801c66c:	2008      	movs	r0, #8
 801c66e:	fb91 f1f0 	sdiv	r1, r1, r0
 801c672:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 801c676:	1c4d      	adds	r5, r1, #1
 801c678:	1ace      	subs	r6, r1, r3
 801c67a:	a81a      	add	r0, sp, #104	; 0x68
 801c67c:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 801c680:	eb0b 0703 	add.w	r7, fp, r3
 801c684:	eb04 0c86 	add.w	ip, r4, r6, lsl #2
 801c688:	4686      	mov	lr, r0
 801c68a:	2200      	movs	r2, #0
 801c68c:	42ba      	cmp	r2, r7
 801c68e:	dd0f      	ble.n	801c6b0 <__kernel_rem_pio2f+0x68>
 801c690:	af42      	add	r7, sp, #264	; 0x108
 801c692:	2000      	movs	r0, #0
 801c694:	4558      	cmp	r0, fp
 801c696:	dc27      	bgt.n	801c6e8 <__kernel_rem_pio2f+0xa0>
 801c698:	e9dd 2601 	ldrd	r2, r6, [sp, #4]
 801c69c:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 801c6a0:	4402      	add	r2, r0
 801c6a2:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
 801c6a6:	eddf 7ac3 	vldr	s15, [pc, #780]	; 801c9b4 <__kernel_rem_pio2f+0x36c>
 801c6aa:	f04f 0c00 	mov.w	ip, #0
 801c6ae:	e015      	b.n	801c6dc <__kernel_rem_pio2f+0x94>
 801c6b0:	42d6      	cmn	r6, r2
 801c6b2:	bf5d      	ittte	pl
 801c6b4:	f85c 0022 	ldrpl.w	r0, [ip, r2, lsl #2]
 801c6b8:	ee07 0a90 	vmovpl	s15, r0
 801c6bc:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801c6c0:	eef0 7a47 	vmovmi.f32	s15, s14
 801c6c4:	ecee 7a01 	vstmia	lr!, {s15}
 801c6c8:	3201      	adds	r2, #1
 801c6ca:	e7df      	b.n	801c68c <__kernel_rem_pio2f+0x44>
 801c6cc:	ecf6 6a01 	vldmia	r6!, {s13}
 801c6d0:	ed32 7a01 	vldmdb	r2!, {s14}
 801c6d4:	eee6 7a87 	vfma.f32	s15, s13, s14
 801c6d8:	f10c 0c01 	add.w	ip, ip, #1
 801c6dc:	459c      	cmp	ip, r3
 801c6de:	ddf5      	ble.n	801c6cc <__kernel_rem_pio2f+0x84>
 801c6e0:	ece7 7a01 	vstmia	r7!, {s15}
 801c6e4:	3001      	adds	r0, #1
 801c6e6:	e7d5      	b.n	801c694 <__kernel_rem_pio2f+0x4c>
 801c6e8:	aa06      	add	r2, sp, #24
 801c6ea:	eb02 028b 	add.w	r2, r2, fp, lsl #2
 801c6ee:	9204      	str	r2, [sp, #16]
 801c6f0:	eddf 8aad 	vldr	s17, [pc, #692]	; 801c9a8 <__kernel_rem_pio2f+0x360>
 801c6f4:	ed9f 9aad 	vldr	s18, [pc, #692]	; 801c9ac <__kernel_rem_pio2f+0x364>
 801c6f8:	eb04 0281 	add.w	r2, r4, r1, lsl #2
 801c6fc:	9203      	str	r2, [sp, #12]
 801c6fe:	465f      	mov	r7, fp
 801c700:	aa56      	add	r2, sp, #344	; 0x158
 801c702:	f107 4980 	add.w	r9, r7, #1073741824	; 0x40000000
 801c706:	eb02 0287 	add.w	r2, r2, r7, lsl #2
 801c70a:	f109 39ff 	add.w	r9, r9, #4294967295
 801c70e:	ed52 7a14 	vldr	s15, [r2, #-80]	; 0xffffffb0
 801c712:	ea4f 0989 	mov.w	r9, r9, lsl #2
 801c716:	aa56      	add	r2, sp, #344	; 0x158
 801c718:	eb02 0109 	add.w	r1, r2, r9
 801c71c:	394c      	subs	r1, #76	; 0x4c
 801c71e:	2200      	movs	r2, #0
 801c720:	1ab8      	subs	r0, r7, r2
 801c722:	2800      	cmp	r0, #0
 801c724:	dc54      	bgt.n	801c7d0 <__kernel_rem_pio2f+0x188>
 801c726:	4629      	mov	r1, r5
 801c728:	ee17 0a90 	vmov	r0, s15
 801c72c:	9305      	str	r3, [sp, #20]
 801c72e:	f000 fd1f 	bl	801d170 <scalbnf>
 801c732:	ee08 0a10 	vmov	s16, r0
 801c736:	eef4 7a00 	vmov.f32	s15, #64	; 0x3e000000  0.125
 801c73a:	ee68 7a27 	vmul.f32	s15, s16, s15
 801c73e:	ee17 0a90 	vmov	r0, s15
 801c742:	f000 fcd1 	bl	801d0e8 <floorf>
 801c746:	ee07 0a10 	vmov	s14, r0
 801c74a:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 801c74e:	eea7 8a67 	vfms.f32	s16, s14, s15
 801c752:	2d00      	cmp	r5, #0
 801c754:	9b05      	ldr	r3, [sp, #20]
 801c756:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801c75a:	ee17 aa90 	vmov	sl, s15
 801c75e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c762:	ee38 8a67 	vsub.f32	s16, s16, s15
 801c766:	dd48      	ble.n	801c7fa <__kernel_rem_pio2f+0x1b2>
 801c768:	1e79      	subs	r1, r7, #1
 801c76a:	aa06      	add	r2, sp, #24
 801c76c:	f1c5 0008 	rsb	r0, r5, #8
 801c770:	f852 6021 	ldr.w	r6, [r2, r1, lsl #2]
 801c774:	fa46 f200 	asr.w	r2, r6, r0
 801c778:	4492      	add	sl, r2
 801c77a:	4082      	lsls	r2, r0
 801c77c:	1ab6      	subs	r6, r6, r2
 801c77e:	aa06      	add	r2, sp, #24
 801c780:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
 801c784:	f1c5 0207 	rsb	r2, r5, #7
 801c788:	4116      	asrs	r6, r2
 801c78a:	2e00      	cmp	r6, #0
 801c78c:	dd44      	ble.n	801c818 <__kernel_rem_pio2f+0x1d0>
 801c78e:	2100      	movs	r1, #0
 801c790:	f10a 0a01 	add.w	sl, sl, #1
 801c794:	4608      	mov	r0, r1
 801c796:	428f      	cmp	r7, r1
 801c798:	dc70      	bgt.n	801c87c <__kernel_rem_pio2f+0x234>
 801c79a:	2d00      	cmp	r5, #0
 801c79c:	dd05      	ble.n	801c7aa <__kernel_rem_pio2f+0x162>
 801c79e:	2d01      	cmp	r5, #1
 801c7a0:	f000 8081 	beq.w	801c8a6 <__kernel_rem_pio2f+0x25e>
 801c7a4:	2d02      	cmp	r5, #2
 801c7a6:	f000 8088 	beq.w	801c8ba <__kernel_rem_pio2f+0x272>
 801c7aa:	2e02      	cmp	r6, #2
 801c7ac:	d134      	bne.n	801c818 <__kernel_rem_pio2f+0x1d0>
 801c7ae:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801c7b2:	ee37 8ac8 	vsub.f32	s16, s15, s16
 801c7b6:	b378      	cbz	r0, 801c818 <__kernel_rem_pio2f+0x1d0>
 801c7b8:	ee17 0a90 	vmov	r0, s15
 801c7bc:	4629      	mov	r1, r5
 801c7be:	9305      	str	r3, [sp, #20]
 801c7c0:	f000 fcd6 	bl	801d170 <scalbnf>
 801c7c4:	ee07 0a90 	vmov	s15, r0
 801c7c8:	9b05      	ldr	r3, [sp, #20]
 801c7ca:	ee38 8a67 	vsub.f32	s16, s16, s15
 801c7ce:	e023      	b.n	801c818 <__kernel_rem_pio2f+0x1d0>
 801c7d0:	ee27 7aa8 	vmul.f32	s14, s15, s17
 801c7d4:	ac06      	add	r4, sp, #24
 801c7d6:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801c7da:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c7de:	eee7 7a49 	vfms.f32	s15, s14, s18
 801c7e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c7e6:	ee17 0a90 	vmov	r0, s15
 801c7ea:	ed71 7a01 	vldmdb	r1!, {s15}
 801c7ee:	f844 0022 	str.w	r0, [r4, r2, lsl #2]
 801c7f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 801c7f6:	3201      	adds	r2, #1
 801c7f8:	e792      	b.n	801c720 <__kernel_rem_pio2f+0xd8>
 801c7fa:	d105      	bne.n	801c808 <__kernel_rem_pio2f+0x1c0>
 801c7fc:	1e7a      	subs	r2, r7, #1
 801c7fe:	a906      	add	r1, sp, #24
 801c800:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801c804:	1236      	asrs	r6, r6, #8
 801c806:	e7c0      	b.n	801c78a <__kernel_rem_pio2f+0x142>
 801c808:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801c80c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801c810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c814:	da30      	bge.n	801c878 <__kernel_rem_pio2f+0x230>
 801c816:	2600      	movs	r6, #0
 801c818:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801c81c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c820:	f040 8098 	bne.w	801c954 <__kernel_rem_pio2f+0x30c>
 801c824:	1e7c      	subs	r4, r7, #1
 801c826:	4622      	mov	r2, r4
 801c828:	2000      	movs	r0, #0
 801c82a:	455a      	cmp	r2, fp
 801c82c:	da4c      	bge.n	801c8c8 <__kernel_rem_pio2f+0x280>
 801c82e:	2800      	cmp	r0, #0
 801c830:	f000 8083 	beq.w	801c93a <__kernel_rem_pio2f+0x2f2>
 801c834:	ab06      	add	r3, sp, #24
 801c836:	3d08      	subs	r5, #8
 801c838:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801c83c:	2b00      	cmp	r3, #0
 801c83e:	f000 8087 	beq.w	801c950 <__kernel_rem_pio2f+0x308>
 801c842:	4629      	mov	r1, r5
 801c844:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 801c848:	f000 fc92 	bl	801d170 <scalbnf>
 801c84c:	00a3      	lsls	r3, r4, #2
 801c84e:	aa42      	add	r2, sp, #264	; 0x108
 801c850:	441a      	add	r2, r3
 801c852:	eddf 6a55 	vldr	s13, [pc, #340]	; 801c9a8 <__kernel_rem_pio2f+0x360>
 801c856:	ee07 0a10 	vmov	s14, r0
 801c85a:	4621      	mov	r1, r4
 801c85c:	1d10      	adds	r0, r2, #4
 801c85e:	2900      	cmp	r1, #0
 801c860:	f280 80b3 	bge.w	801c9ca <__kernel_rem_pio2f+0x382>
 801c864:	2000      	movs	r0, #0
 801c866:	1a21      	subs	r1, r4, r0
 801c868:	2900      	cmp	r1, #0
 801c86a:	f2c0 80d3 	blt.w	801ca14 <__kernel_rem_pio2f+0x3cc>
 801c86e:	4d50      	ldr	r5, [pc, #320]	; (801c9b0 <__kernel_rem_pio2f+0x368>)
 801c870:	eddf 7a50 	vldr	s15, [pc, #320]	; 801c9b4 <__kernel_rem_pio2f+0x36c>
 801c874:	2100      	movs	r1, #0
 801c876:	e0c1      	b.n	801c9fc <__kernel_rem_pio2f+0x3b4>
 801c878:	2602      	movs	r6, #2
 801c87a:	e788      	b.n	801c78e <__kernel_rem_pio2f+0x146>
 801c87c:	aa06      	add	r2, sp, #24
 801c87e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 801c882:	b948      	cbnz	r0, 801c898 <__kernel_rem_pio2f+0x250>
 801c884:	b12a      	cbz	r2, 801c892 <__kernel_rem_pio2f+0x24a>
 801c886:	a806      	add	r0, sp, #24
 801c888:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801c88c:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
 801c890:	2201      	movs	r2, #1
 801c892:	3101      	adds	r1, #1
 801c894:	4610      	mov	r0, r2
 801c896:	e77e      	b.n	801c796 <__kernel_rem_pio2f+0x14e>
 801c898:	ac06      	add	r4, sp, #24
 801c89a:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 801c89e:	f844 2021 	str.w	r2, [r4, r1, lsl #2]
 801c8a2:	4602      	mov	r2, r0
 801c8a4:	e7f5      	b.n	801c892 <__kernel_rem_pio2f+0x24a>
 801c8a6:	1e79      	subs	r1, r7, #1
 801c8a8:	aa06      	add	r2, sp, #24
 801c8aa:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 801c8ae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801c8b2:	ac06      	add	r4, sp, #24
 801c8b4:	f844 2021 	str.w	r2, [r4, r1, lsl #2]
 801c8b8:	e777      	b.n	801c7aa <__kernel_rem_pio2f+0x162>
 801c8ba:	1e79      	subs	r1, r7, #1
 801c8bc:	aa06      	add	r2, sp, #24
 801c8be:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 801c8c2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 801c8c6:	e7f4      	b.n	801c8b2 <__kernel_rem_pio2f+0x26a>
 801c8c8:	a906      	add	r1, sp, #24
 801c8ca:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801c8ce:	3a01      	subs	r2, #1
 801c8d0:	4308      	orrs	r0, r1
 801c8d2:	e7aa      	b.n	801c82a <__kernel_rem_pio2f+0x1e2>
 801c8d4:	3601      	adds	r6, #1
 801c8d6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801c8da:	2900      	cmp	r1, #0
 801c8dc:	d0fa      	beq.n	801c8d4 <__kernel_rem_pio2f+0x28c>
 801c8de:	9a01      	ldr	r2, [sp, #4]
 801c8e0:	19d0      	adds	r0, r2, r7
 801c8e2:	0080      	lsls	r0, r0, #2
 801c8e4:	aa1a      	add	r2, sp, #104	; 0x68
 801c8e6:	1884      	adds	r4, r0, r2
 801c8e8:	1c79      	adds	r1, r7, #1
 801c8ea:	f109 0904 	add.w	r9, r9, #4
 801c8ee:	2200      	movs	r2, #0
 801c8f0:	4437      	add	r7, r6
 801c8f2:	f104 0a04 	add.w	sl, r4, #4
 801c8f6:	428f      	cmp	r7, r1
 801c8f8:	f6ff af02 	blt.w	801c700 <__kernel_rem_pio2f+0xb8>
 801c8fc:	ac1a      	add	r4, sp, #104	; 0x68
 801c8fe:	1816      	adds	r6, r2, r0
 801c900:	4426      	add	r6, r4
 801c902:	9c03      	ldr	r4, [sp, #12]
 801c904:	f8dd c008 	ldr.w	ip, [sp, #8]
 801c908:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 801c90c:	9405      	str	r4, [sp, #20]
 801c90e:	ee07 4a90 	vmov	s15, r4
 801c912:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c916:	eb0a 0e02 	add.w	lr, sl, r2
 801c91a:	edc6 7a00 	vstr	s15, [r6]
 801c91e:	eddf 7a25 	vldr	s15, [pc, #148]	; 801c9b4 <__kernel_rem_pio2f+0x36c>
 801c922:	2600      	movs	r6, #0
 801c924:	429e      	cmp	r6, r3
 801c926:	dd0b      	ble.n	801c940 <__kernel_rem_pio2f+0x2f8>
 801c928:	eb02 0609 	add.w	r6, r2, r9
 801c92c:	ac42      	add	r4, sp, #264	; 0x108
 801c92e:	4426      	add	r6, r4
 801c930:	edc6 7a01 	vstr	s15, [r6, #4]
 801c934:	3101      	adds	r1, #1
 801c936:	3204      	adds	r2, #4
 801c938:	e7dd      	b.n	801c8f6 <__kernel_rem_pio2f+0x2ae>
 801c93a:	9a04      	ldr	r2, [sp, #16]
 801c93c:	2601      	movs	r6, #1
 801c93e:	e7ca      	b.n	801c8d6 <__kernel_rem_pio2f+0x28e>
 801c940:	ecfc 6a01 	vldmia	ip!, {s13}
 801c944:	ed3e 7a01 	vldmdb	lr!, {s14}
 801c948:	3601      	adds	r6, #1
 801c94a:	eee6 7a87 	vfma.f32	s15, s13, s14
 801c94e:	e7e9      	b.n	801c924 <__kernel_rem_pio2f+0x2dc>
 801c950:	3c01      	subs	r4, #1
 801c952:	e76f      	b.n	801c834 <__kernel_rem_pio2f+0x1ec>
 801c954:	4269      	negs	r1, r5
 801c956:	ee18 0a10 	vmov	r0, s16
 801c95a:	f000 fc09 	bl	801d170 <scalbnf>
 801c95e:	eddf 6a13 	vldr	s13, [pc, #76]	; 801c9ac <__kernel_rem_pio2f+0x364>
 801c962:	ee07 0a10 	vmov	s14, r0
 801c966:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801c96a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c96e:	db23      	blt.n	801c9b8 <__kernel_rem_pio2f+0x370>
 801c970:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801c9a8 <__kernel_rem_pio2f+0x360>
 801c974:	ee67 7a27 	vmul.f32	s15, s14, s15
 801c978:	aa06      	add	r2, sp, #24
 801c97a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c97e:	1c7c      	adds	r4, r7, #1
 801c980:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c984:	3508      	adds	r5, #8
 801c986:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801c98a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c98e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801c992:	ee17 3a10 	vmov	r3, s14
 801c996:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 801c99a:	ee17 3a90 	vmov	r3, s15
 801c99e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801c9a2:	e74e      	b.n	801c842 <__kernel_rem_pio2f+0x1fa>
 801c9a4:	0801dc58 	.word	0x0801dc58
 801c9a8:	3b800000 	.word	0x3b800000
 801c9ac:	43800000 	.word	0x43800000
 801c9b0:	0801dc2c 	.word	0x0801dc2c
 801c9b4:	00000000 	.word	0x00000000
 801c9b8:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801c9bc:	aa06      	add	r2, sp, #24
 801c9be:	ee17 3a10 	vmov	r3, s14
 801c9c2:	463c      	mov	r4, r7
 801c9c4:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 801c9c8:	e73b      	b.n	801c842 <__kernel_rem_pio2f+0x1fa>
 801c9ca:	ad06      	add	r5, sp, #24
 801c9cc:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 801c9d0:	9501      	str	r5, [sp, #4]
 801c9d2:	ee07 5a90 	vmov	s15, r5
 801c9d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c9da:	3901      	subs	r1, #1
 801c9dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 801c9e0:	ee27 7a26 	vmul.f32	s14, s14, s13
 801c9e4:	ed60 7a01 	vstmdb	r0!, {s15}
 801c9e8:	e739      	b.n	801c85e <__kernel_rem_pio2f+0x216>
 801c9ea:	eb02 0781 	add.w	r7, r2, r1, lsl #2
 801c9ee:	ecf5 6a01 	vldmia	r5!, {s13}
 801c9f2:	ed97 7a00 	vldr	s14, [r7]
 801c9f6:	eee6 7a87 	vfma.f32	s15, s13, s14
 801c9fa:	3101      	adds	r1, #1
 801c9fc:	4559      	cmp	r1, fp
 801c9fe:	dc01      	bgt.n	801ca04 <__kernel_rem_pio2f+0x3bc>
 801ca00:	4288      	cmp	r0, r1
 801ca02:	daf2      	bge.n	801c9ea <__kernel_rem_pio2f+0x3a2>
 801ca04:	a956      	add	r1, sp, #344	; 0x158
 801ca06:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 801ca0a:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 801ca0e:	3001      	adds	r0, #1
 801ca10:	3a04      	subs	r2, #4
 801ca12:	e728      	b.n	801c866 <__kernel_rem_pio2f+0x21e>
 801ca14:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801ca16:	2a03      	cmp	r2, #3
 801ca18:	d846      	bhi.n	801caa8 <__kernel_rem_pio2f+0x460>
 801ca1a:	e8df f002 	tbb	[pc, r2]
 801ca1e:	1e39      	.short	0x1e39
 801ca20:	021e      	.short	0x021e
 801ca22:	aa56      	add	r2, sp, #344	; 0x158
 801ca24:	4413      	add	r3, r2
 801ca26:	3b9c      	subs	r3, #156	; 0x9c
 801ca28:	461a      	mov	r2, r3
 801ca2a:	4621      	mov	r1, r4
 801ca2c:	2900      	cmp	r1, #0
 801ca2e:	dc57      	bgt.n	801cae0 <__kernel_rem_pio2f+0x498>
 801ca30:	461a      	mov	r2, r3
 801ca32:	4621      	mov	r1, r4
 801ca34:	2901      	cmp	r1, #1
 801ca36:	dc63      	bgt.n	801cb00 <__kernel_rem_pio2f+0x4b8>
 801ca38:	ed5f 7a22 	vldr	s15, [pc, #-136]	; 801c9b4 <__kernel_rem_pio2f+0x36c>
 801ca3c:	2c01      	cmp	r4, #1
 801ca3e:	dc6f      	bgt.n	801cb20 <__kernel_rem_pio2f+0x4d8>
 801ca40:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 801ca44:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 801ca48:	2e00      	cmp	r6, #0
 801ca4a:	d16f      	bne.n	801cb2c <__kernel_rem_pio2f+0x4e4>
 801ca4c:	edc8 6a00 	vstr	s13, [r8]
 801ca50:	ed88 7a01 	vstr	s14, [r8, #4]
 801ca54:	edc8 7a02 	vstr	s15, [r8, #8]
 801ca58:	e026      	b.n	801caa8 <__kernel_rem_pio2f+0x460>
 801ca5a:	aa56      	add	r2, sp, #344	; 0x158
 801ca5c:	4413      	add	r3, r2
 801ca5e:	ed1f 7a2b 	vldr	s14, [pc, #-172]	; 801c9b4 <__kernel_rem_pio2f+0x36c>
 801ca62:	3b9c      	subs	r3, #156	; 0x9c
 801ca64:	4622      	mov	r2, r4
 801ca66:	2a00      	cmp	r2, #0
 801ca68:	da2b      	bge.n	801cac2 <__kernel_rem_pio2f+0x47a>
 801ca6a:	b386      	cbz	r6, 801cace <__kernel_rem_pio2f+0x486>
 801ca6c:	eef1 7a47 	vneg.f32	s15, s14
 801ca70:	edc8 7a00 	vstr	s15, [r8]
 801ca74:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 801ca78:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ca7c:	aa2f      	add	r2, sp, #188	; 0xbc
 801ca7e:	2301      	movs	r3, #1
 801ca80:	429c      	cmp	r4, r3
 801ca82:	da27      	bge.n	801cad4 <__kernel_rem_pio2f+0x48c>
 801ca84:	b10e      	cbz	r6, 801ca8a <__kernel_rem_pio2f+0x442>
 801ca86:	eef1 7a67 	vneg.f32	s15, s15
 801ca8a:	edc8 7a01 	vstr	s15, [r8, #4]
 801ca8e:	e00b      	b.n	801caa8 <__kernel_rem_pio2f+0x460>
 801ca90:	aa56      	add	r2, sp, #344	; 0x158
 801ca92:	4413      	add	r3, r2
 801ca94:	ed5f 7a39 	vldr	s15, [pc, #-228]	; 801c9b4 <__kernel_rem_pio2f+0x36c>
 801ca98:	3b9c      	subs	r3, #156	; 0x9c
 801ca9a:	2c00      	cmp	r4, #0
 801ca9c:	da0b      	bge.n	801cab6 <__kernel_rem_pio2f+0x46e>
 801ca9e:	b10e      	cbz	r6, 801caa4 <__kernel_rem_pio2f+0x45c>
 801caa0:	eef1 7a67 	vneg.f32	s15, s15
 801caa4:	edc8 7a00 	vstr	s15, [r8]
 801caa8:	f00a 0007 	and.w	r0, sl, #7
 801caac:	b057      	add	sp, #348	; 0x15c
 801caae:	ecbd 8b04 	vpop	{d8-d9}
 801cab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cab6:	ed33 7a01 	vldmdb	r3!, {s14}
 801caba:	3c01      	subs	r4, #1
 801cabc:	ee77 7a87 	vadd.f32	s15, s15, s14
 801cac0:	e7eb      	b.n	801ca9a <__kernel_rem_pio2f+0x452>
 801cac2:	ed73 7a01 	vldmdb	r3!, {s15}
 801cac6:	3a01      	subs	r2, #1
 801cac8:	ee37 7a27 	vadd.f32	s14, s14, s15
 801cacc:	e7cb      	b.n	801ca66 <__kernel_rem_pio2f+0x41e>
 801cace:	eef0 7a47 	vmov.f32	s15, s14
 801cad2:	e7cd      	b.n	801ca70 <__kernel_rem_pio2f+0x428>
 801cad4:	ecb2 7a01 	vldmia	r2!, {s14}
 801cad8:	3301      	adds	r3, #1
 801cada:	ee77 7a87 	vadd.f32	s15, s15, s14
 801cade:	e7cf      	b.n	801ca80 <__kernel_rem_pio2f+0x438>
 801cae0:	ed52 7a02 	vldr	s15, [r2, #-8]
 801cae4:	ed72 6a01 	vldmdb	r2!, {s13}
 801cae8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801caec:	3901      	subs	r1, #1
 801caee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801caf2:	ed02 7a01 	vstr	s14, [r2, #-4]
 801caf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801cafa:	edc2 7a00 	vstr	s15, [r2]
 801cafe:	e795      	b.n	801ca2c <__kernel_rem_pio2f+0x3e4>
 801cb00:	ed52 7a02 	vldr	s15, [r2, #-8]
 801cb04:	ed72 6a01 	vldmdb	r2!, {s13}
 801cb08:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801cb0c:	3901      	subs	r1, #1
 801cb0e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801cb12:	ed02 7a01 	vstr	s14, [r2, #-4]
 801cb16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801cb1a:	edc2 7a00 	vstr	s15, [r2]
 801cb1e:	e789      	b.n	801ca34 <__kernel_rem_pio2f+0x3ec>
 801cb20:	ed33 7a01 	vldmdb	r3!, {s14}
 801cb24:	3c01      	subs	r4, #1
 801cb26:	ee77 7a87 	vadd.f32	s15, s15, s14
 801cb2a:	e787      	b.n	801ca3c <__kernel_rem_pio2f+0x3f4>
 801cb2c:	eef1 6a66 	vneg.f32	s13, s13
 801cb30:	eeb1 7a47 	vneg.f32	s14, s14
 801cb34:	edc8 6a00 	vstr	s13, [r8]
 801cb38:	ed88 7a01 	vstr	s14, [r8, #4]
 801cb3c:	eef1 7a67 	vneg.f32	s15, s15
 801cb40:	e788      	b.n	801ca54 <__kernel_rem_pio2f+0x40c>
 801cb42:	bf00      	nop

0801cb44 <__kernel_sinf>:
 801cb44:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 801cb48:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801cb4c:	ee07 0a90 	vmov	s15, r0
 801cb50:	ee06 1a10 	vmov	s12, r1
 801cb54:	da04      	bge.n	801cb60 <__kernel_sinf+0x1c>
 801cb56:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801cb5a:	ee17 3a10 	vmov	r3, s14
 801cb5e:	b1e3      	cbz	r3, 801cb9a <__kernel_sinf+0x56>
 801cb60:	ee67 6aa7 	vmul.f32	s13, s15, s15
 801cb64:	ed9f 7a16 	vldr	s14, [pc, #88]	; 801cbc0 <__kernel_sinf+0x7c>
 801cb68:	ed9f 5a16 	vldr	s10, [pc, #88]	; 801cbc4 <__kernel_sinf+0x80>
 801cb6c:	eea6 5a87 	vfma.f32	s10, s13, s14
 801cb70:	ed9f 7a15 	vldr	s14, [pc, #84]	; 801cbc8 <__kernel_sinf+0x84>
 801cb74:	eea5 7a26 	vfma.f32	s14, s10, s13
 801cb78:	ed9f 5a14 	vldr	s10, [pc, #80]	; 801cbcc <__kernel_sinf+0x88>
 801cb7c:	eea7 5a26 	vfma.f32	s10, s14, s13
 801cb80:	ed9f 7a13 	vldr	s14, [pc, #76]	; 801cbd0 <__kernel_sinf+0x8c>
 801cb84:	ee67 5aa6 	vmul.f32	s11, s15, s13
 801cb88:	eea5 7a26 	vfma.f32	s14, s10, s13
 801cb8c:	b942      	cbnz	r2, 801cba0 <__kernel_sinf+0x5c>
 801cb8e:	ed9f 6a11 	vldr	s12, [pc, #68]	; 801cbd4 <__kernel_sinf+0x90>
 801cb92:	eea6 6a87 	vfma.f32	s12, s13, s14
 801cb96:	eee6 7a25 	vfma.f32	s15, s12, s11
 801cb9a:	ee17 0a90 	vmov	r0, s15
 801cb9e:	4770      	bx	lr
 801cba0:	ee27 7a65 	vnmul.f32	s14, s14, s11
 801cba4:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 801cba8:	eea6 7a05 	vfma.f32	s14, s12, s10
 801cbac:	ee97 6a26 	vfnms.f32	s12, s14, s13
 801cbb0:	ed9f 7a09 	vldr	s14, [pc, #36]	; 801cbd8 <__kernel_sinf+0x94>
 801cbb4:	eea5 6a87 	vfma.f32	s12, s11, s14
 801cbb8:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801cbbc:	e7ed      	b.n	801cb9a <__kernel_sinf+0x56>
 801cbbe:	bf00      	nop
 801cbc0:	2f2ec9d3 	.word	0x2f2ec9d3
 801cbc4:	b2d72f34 	.word	0xb2d72f34
 801cbc8:	3638ef1b 	.word	0x3638ef1b
 801cbcc:	b9500d01 	.word	0xb9500d01
 801cbd0:	3c088889 	.word	0x3c088889
 801cbd4:	be2aaaab 	.word	0xbe2aaaab
 801cbd8:	3e2aaaab 	.word	0x3e2aaaab

0801cbdc <__kernel_tanf>:
 801cbdc:	ee07 1a10 	vmov	s14, r1
 801cbe0:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
 801cbe4:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 801cbe8:	b510      	push	{r4, lr}
 801cbea:	ee07 0a90 	vmov	s15, r0
 801cbee:	4603      	mov	r3, r0
 801cbf0:	da17      	bge.n	801cc22 <__kernel_tanf+0x46>
 801cbf2:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 801cbf6:	ee16 4a90 	vmov	r4, s13
 801cbfa:	bb44      	cbnz	r4, 801cc4e <__kernel_tanf+0x72>
 801cbfc:	1c53      	adds	r3, r2, #1
 801cbfe:	430b      	orrs	r3, r1
 801cc00:	d10a      	bne.n	801cc18 <__kernel_tanf+0x3c>
 801cc02:	f000 fa6d 	bl	801d0e0 <fabsf>
 801cc06:	ee07 0a90 	vmov	s15, r0
 801cc0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801cc0e:	eec7 7a27 	vdiv.f32	s15, s14, s15
 801cc12:	ee17 0a90 	vmov	r0, s15
 801cc16:	bd10      	pop	{r4, pc}
 801cc18:	2a01      	cmp	r2, #1
 801cc1a:	d0fa      	beq.n	801cc12 <__kernel_tanf+0x36>
 801cc1c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801cc20:	e7f5      	b.n	801cc0e <__kernel_tanf+0x32>
 801cc22:	484f      	ldr	r0, [pc, #316]	; (801cd60 <__kernel_tanf+0x184>)
 801cc24:	4281      	cmp	r1, r0
 801cc26:	dd12      	ble.n	801cc4e <__kernel_tanf+0x72>
 801cc28:	2b00      	cmp	r3, #0
 801cc2a:	eddf 6a4e 	vldr	s13, [pc, #312]	; 801cd64 <__kernel_tanf+0x188>
 801cc2e:	bfb8      	it	lt
 801cc30:	eef1 7a67 	vneglt.f32	s15, s15
 801cc34:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801cc38:	eddf 6a4b 	vldr	s13, [pc, #300]	; 801cd68 <__kernel_tanf+0x18c>
 801cc3c:	bfb8      	it	lt
 801cc3e:	eeb1 7a47 	vneglt.f32	s14, s14
 801cc42:	ee36 7ac7 	vsub.f32	s14, s13, s14
 801cc46:	ee77 7a27 	vadd.f32	s15, s14, s15
 801cc4a:	ed9f 7a48 	vldr	s14, [pc, #288]	; 801cd6c <__kernel_tanf+0x190>
 801cc4e:	eddf 5a48 	vldr	s11, [pc, #288]	; 801cd70 <__kernel_tanf+0x194>
 801cc52:	ed9f 5a48 	vldr	s10, [pc, #288]	; 801cd74 <__kernel_tanf+0x198>
 801cc56:	eddf 4a48 	vldr	s9, [pc, #288]	; 801cd78 <__kernel_tanf+0x19c>
 801cc5a:	4841      	ldr	r0, [pc, #260]	; (801cd60 <__kernel_tanf+0x184>)
 801cc5c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 801cc60:	4281      	cmp	r1, r0
 801cc62:	ee66 6a06 	vmul.f32	s13, s12, s12
 801cc66:	ee27 4a86 	vmul.f32	s8, s15, s12
 801cc6a:	eea6 5aa5 	vfma.f32	s10, s13, s11
 801cc6e:	eddf 5a43 	vldr	s11, [pc, #268]	; 801cd7c <__kernel_tanf+0x1a0>
 801cc72:	eee5 5a26 	vfma.f32	s11, s10, s13
 801cc76:	ed9f 5a42 	vldr	s10, [pc, #264]	; 801cd80 <__kernel_tanf+0x1a4>
 801cc7a:	eea5 5aa6 	vfma.f32	s10, s11, s13
 801cc7e:	eddf 5a41 	vldr	s11, [pc, #260]	; 801cd84 <__kernel_tanf+0x1a8>
 801cc82:	eee5 5a26 	vfma.f32	s11, s10, s13
 801cc86:	ed9f 5a40 	vldr	s10, [pc, #256]	; 801cd88 <__kernel_tanf+0x1ac>
 801cc8a:	eea5 5aa6 	vfma.f32	s10, s11, s13
 801cc8e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 801cd8c <__kernel_tanf+0x1b0>
 801cc92:	eee6 5aa4 	vfma.f32	s11, s13, s9
 801cc96:	eddf 4a3e 	vldr	s9, [pc, #248]	; 801cd90 <__kernel_tanf+0x1b4>
 801cc9a:	eee5 4aa6 	vfma.f32	s9, s11, s13
 801cc9e:	eddf 5a3d 	vldr	s11, [pc, #244]	; 801cd94 <__kernel_tanf+0x1b8>
 801cca2:	eee4 5aa6 	vfma.f32	s11, s9, s13
 801cca6:	eddf 4a3c 	vldr	s9, [pc, #240]	; 801cd98 <__kernel_tanf+0x1bc>
 801ccaa:	eee5 4aa6 	vfma.f32	s9, s11, s13
 801ccae:	eddf 5a3b 	vldr	s11, [pc, #236]	; 801cd9c <__kernel_tanf+0x1c0>
 801ccb2:	eee4 5aa6 	vfma.f32	s11, s9, s13
 801ccb6:	eef0 6a65 	vmov.f32	s13, s11
 801ccba:	eee5 6a06 	vfma.f32	s13, s10, s12
 801ccbe:	eef0 5a47 	vmov.f32	s11, s14
 801ccc2:	eee6 5a84 	vfma.f32	s11, s13, s8
 801ccc6:	eddf 6a36 	vldr	s13, [pc, #216]	; 801cda0 <__kernel_tanf+0x1c4>
 801ccca:	eea5 7a86 	vfma.f32	s14, s11, s12
 801ccce:	eea4 7a26 	vfma.f32	s14, s8, s13
 801ccd2:	ee37 6a87 	vadd.f32	s12, s15, s14
 801ccd6:	dd1d      	ble.n	801cd14 <__kernel_tanf+0x138>
 801ccd8:	ee06 2a90 	vmov	s13, r2
 801ccdc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801cce0:	ee26 5a06 	vmul.f32	s10, s12, s12
 801cce4:	ee36 6a26 	vadd.f32	s12, s12, s13
 801cce8:	179b      	asrs	r3, r3, #30
 801ccea:	eec5 5a06 	vdiv.f32	s11, s10, s12
 801ccee:	f003 0302 	and.w	r3, r3, #2
 801ccf2:	f1c3 0301 	rsb	r3, r3, #1
 801ccf6:	ee35 7ac7 	vsub.f32	s14, s11, s14
 801ccfa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ccfe:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 801cd02:	eee7 6ac7 	vfms.f32	s13, s15, s14
 801cd06:	ee07 3a90 	vmov	s15, r3
 801cd0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801cd0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801cd12:	e77e      	b.n	801cc12 <__kernel_tanf+0x36>
 801cd14:	2a01      	cmp	r2, #1
 801cd16:	d01f      	beq.n	801cd58 <__kernel_tanf+0x17c>
 801cd18:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 801cd1c:	ee86 5a86 	vdiv.f32	s10, s13, s12
 801cd20:	4b20      	ldr	r3, [pc, #128]	; (801cda4 <__kernel_tanf+0x1c8>)
 801cd22:	ee16 2a10 	vmov	r2, s12
 801cd26:	401a      	ands	r2, r3
 801cd28:	ee05 2a90 	vmov	s11, r2
 801cd2c:	ee15 2a10 	vmov	r2, s10
 801cd30:	4013      	ands	r3, r2
 801cd32:	ee06 3a90 	vmov	s13, r3
 801cd36:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801cd3a:	eea5 6aa6 	vfma.f32	s12, s11, s13
 801cd3e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 801cd42:	ee37 7a67 	vsub.f32	s14, s14, s15
 801cd46:	eef0 7a46 	vmov.f32	s15, s12
 801cd4a:	eee6 7a87 	vfma.f32	s15, s13, s14
 801cd4e:	eee7 6a85 	vfma.f32	s13, s15, s10
 801cd52:	eef0 7a66 	vmov.f32	s15, s13
 801cd56:	e75c      	b.n	801cc12 <__kernel_tanf+0x36>
 801cd58:	eef0 7a46 	vmov.f32	s15, s12
 801cd5c:	e759      	b.n	801cc12 <__kernel_tanf+0x36>
 801cd5e:	bf00      	nop
 801cd60:	3f2ca13f 	.word	0x3f2ca13f
 801cd64:	3f490fda 	.word	0x3f490fda
 801cd68:	33222168 	.word	0x33222168
 801cd6c:	00000000 	.word	0x00000000
 801cd70:	37d95384 	.word	0x37d95384
 801cd74:	3895c07a 	.word	0x3895c07a
 801cd78:	b79bae5f 	.word	0xb79bae5f
 801cd7c:	398137b9 	.word	0x398137b9
 801cd80:	3abede48 	.word	0x3abede48
 801cd84:	3c11371f 	.word	0x3c11371f
 801cd88:	3d5d0dd1 	.word	0x3d5d0dd1
 801cd8c:	38a3f445 	.word	0x38a3f445
 801cd90:	3a1a26c8 	.word	0x3a1a26c8
 801cd94:	3b6b6916 	.word	0x3b6b6916
 801cd98:	3cb327a4 	.word	0x3cb327a4
 801cd9c:	3e088889 	.word	0x3e088889
 801cda0:	3eaaaaab 	.word	0x3eaaaaab
 801cda4:	fffff000 	.word	0xfffff000

0801cda8 <atan>:
 801cda8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cdac:	4bbc      	ldr	r3, [pc, #752]	; (801d0a0 <atan+0x2f8>)
 801cdae:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801cdb2:	429e      	cmp	r6, r3
 801cdb4:	4604      	mov	r4, r0
 801cdb6:	460d      	mov	r5, r1
 801cdb8:	468b      	mov	fp, r1
 801cdba:	dd18      	ble.n	801cdee <atan+0x46>
 801cdbc:	4bb9      	ldr	r3, [pc, #740]	; (801d0a4 <atan+0x2fc>)
 801cdbe:	429e      	cmp	r6, r3
 801cdc0:	dc01      	bgt.n	801cdc6 <atan+0x1e>
 801cdc2:	d109      	bne.n	801cdd8 <atan+0x30>
 801cdc4:	b140      	cbz	r0, 801cdd8 <atan+0x30>
 801cdc6:	4622      	mov	r2, r4
 801cdc8:	462b      	mov	r3, r5
 801cdca:	4620      	mov	r0, r4
 801cdcc:	4629      	mov	r1, r5
 801cdce:	f7e3 fa65 	bl	800029c <__adddf3>
 801cdd2:	4604      	mov	r4, r0
 801cdd4:	460d      	mov	r5, r1
 801cdd6:	e006      	b.n	801cde6 <atan+0x3e>
 801cdd8:	f1bb 0f00 	cmp.w	fp, #0
 801cddc:	f340 8123 	ble.w	801d026 <atan+0x27e>
 801cde0:	a593      	add	r5, pc, #588	; (adr r5, 801d030 <atan+0x288>)
 801cde2:	e9d5 4500 	ldrd	r4, r5, [r5]
 801cde6:	4620      	mov	r0, r4
 801cde8:	4629      	mov	r1, r5
 801cdea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cdee:	4bae      	ldr	r3, [pc, #696]	; (801d0a8 <atan+0x300>)
 801cdf0:	429e      	cmp	r6, r3
 801cdf2:	dc11      	bgt.n	801ce18 <atan+0x70>
 801cdf4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 801cdf8:	429e      	cmp	r6, r3
 801cdfa:	dc0a      	bgt.n	801ce12 <atan+0x6a>
 801cdfc:	a38e      	add	r3, pc, #568	; (adr r3, 801d038 <atan+0x290>)
 801cdfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce02:	f7e3 fa4b 	bl	800029c <__adddf3>
 801ce06:	2200      	movs	r2, #0
 801ce08:	4ba8      	ldr	r3, [pc, #672]	; (801d0ac <atan+0x304>)
 801ce0a:	f7e3 fe8d 	bl	8000b28 <__aeabi_dcmpgt>
 801ce0e:	2800      	cmp	r0, #0
 801ce10:	d1e9      	bne.n	801cde6 <atan+0x3e>
 801ce12:	f04f 3aff 	mov.w	sl, #4294967295
 801ce16:	e027      	b.n	801ce68 <atan+0xc0>
 801ce18:	f000 f956 	bl	801d0c8 <fabs>
 801ce1c:	4ba4      	ldr	r3, [pc, #656]	; (801d0b0 <atan+0x308>)
 801ce1e:	429e      	cmp	r6, r3
 801ce20:	4604      	mov	r4, r0
 801ce22:	460d      	mov	r5, r1
 801ce24:	f300 80b8 	bgt.w	801cf98 <atan+0x1f0>
 801ce28:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801ce2c:	429e      	cmp	r6, r3
 801ce2e:	f300 809c 	bgt.w	801cf6a <atan+0x1c2>
 801ce32:	4602      	mov	r2, r0
 801ce34:	460b      	mov	r3, r1
 801ce36:	f7e3 fa31 	bl	800029c <__adddf3>
 801ce3a:	2200      	movs	r2, #0
 801ce3c:	4b9b      	ldr	r3, [pc, #620]	; (801d0ac <atan+0x304>)
 801ce3e:	f7e3 fa2b 	bl	8000298 <__aeabi_dsub>
 801ce42:	2200      	movs	r2, #0
 801ce44:	4606      	mov	r6, r0
 801ce46:	460f      	mov	r7, r1
 801ce48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801ce4c:	4620      	mov	r0, r4
 801ce4e:	4629      	mov	r1, r5
 801ce50:	f7e3 fa24 	bl	800029c <__adddf3>
 801ce54:	4602      	mov	r2, r0
 801ce56:	460b      	mov	r3, r1
 801ce58:	4630      	mov	r0, r6
 801ce5a:	4639      	mov	r1, r7
 801ce5c:	f7e3 fcfe 	bl	800085c <__aeabi_ddiv>
 801ce60:	f04f 0a00 	mov.w	sl, #0
 801ce64:	4604      	mov	r4, r0
 801ce66:	460d      	mov	r5, r1
 801ce68:	4622      	mov	r2, r4
 801ce6a:	462b      	mov	r3, r5
 801ce6c:	4620      	mov	r0, r4
 801ce6e:	4629      	mov	r1, r5
 801ce70:	f7e3 fbca 	bl	8000608 <__aeabi_dmul>
 801ce74:	4602      	mov	r2, r0
 801ce76:	460b      	mov	r3, r1
 801ce78:	4680      	mov	r8, r0
 801ce7a:	4689      	mov	r9, r1
 801ce7c:	f7e3 fbc4 	bl	8000608 <__aeabi_dmul>
 801ce80:	a36f      	add	r3, pc, #444	; (adr r3, 801d040 <atan+0x298>)
 801ce82:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce86:	4606      	mov	r6, r0
 801ce88:	460f      	mov	r7, r1
 801ce8a:	f7e3 fbbd 	bl	8000608 <__aeabi_dmul>
 801ce8e:	a36e      	add	r3, pc, #440	; (adr r3, 801d048 <atan+0x2a0>)
 801ce90:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce94:	f7e3 fa02 	bl	800029c <__adddf3>
 801ce98:	4632      	mov	r2, r6
 801ce9a:	463b      	mov	r3, r7
 801ce9c:	f7e3 fbb4 	bl	8000608 <__aeabi_dmul>
 801cea0:	a36b      	add	r3, pc, #428	; (adr r3, 801d050 <atan+0x2a8>)
 801cea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cea6:	f7e3 f9f9 	bl	800029c <__adddf3>
 801ceaa:	4632      	mov	r2, r6
 801ceac:	463b      	mov	r3, r7
 801ceae:	f7e3 fbab 	bl	8000608 <__aeabi_dmul>
 801ceb2:	a369      	add	r3, pc, #420	; (adr r3, 801d058 <atan+0x2b0>)
 801ceb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ceb8:	f7e3 f9f0 	bl	800029c <__adddf3>
 801cebc:	4632      	mov	r2, r6
 801cebe:	463b      	mov	r3, r7
 801cec0:	f7e3 fba2 	bl	8000608 <__aeabi_dmul>
 801cec4:	a366      	add	r3, pc, #408	; (adr r3, 801d060 <atan+0x2b8>)
 801cec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ceca:	f7e3 f9e7 	bl	800029c <__adddf3>
 801cece:	4632      	mov	r2, r6
 801ced0:	463b      	mov	r3, r7
 801ced2:	f7e3 fb99 	bl	8000608 <__aeabi_dmul>
 801ced6:	a364      	add	r3, pc, #400	; (adr r3, 801d068 <atan+0x2c0>)
 801ced8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cedc:	f7e3 f9de 	bl	800029c <__adddf3>
 801cee0:	4642      	mov	r2, r8
 801cee2:	464b      	mov	r3, r9
 801cee4:	f7e3 fb90 	bl	8000608 <__aeabi_dmul>
 801cee8:	a361      	add	r3, pc, #388	; (adr r3, 801d070 <atan+0x2c8>)
 801ceea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ceee:	4680      	mov	r8, r0
 801cef0:	4689      	mov	r9, r1
 801cef2:	4630      	mov	r0, r6
 801cef4:	4639      	mov	r1, r7
 801cef6:	f7e3 fb87 	bl	8000608 <__aeabi_dmul>
 801cefa:	a35f      	add	r3, pc, #380	; (adr r3, 801d078 <atan+0x2d0>)
 801cefc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf00:	f7e3 f9ca 	bl	8000298 <__aeabi_dsub>
 801cf04:	4632      	mov	r2, r6
 801cf06:	463b      	mov	r3, r7
 801cf08:	f7e3 fb7e 	bl	8000608 <__aeabi_dmul>
 801cf0c:	a35c      	add	r3, pc, #368	; (adr r3, 801d080 <atan+0x2d8>)
 801cf0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf12:	f7e3 f9c1 	bl	8000298 <__aeabi_dsub>
 801cf16:	4632      	mov	r2, r6
 801cf18:	463b      	mov	r3, r7
 801cf1a:	f7e3 fb75 	bl	8000608 <__aeabi_dmul>
 801cf1e:	a35a      	add	r3, pc, #360	; (adr r3, 801d088 <atan+0x2e0>)
 801cf20:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf24:	f7e3 f9b8 	bl	8000298 <__aeabi_dsub>
 801cf28:	4632      	mov	r2, r6
 801cf2a:	463b      	mov	r3, r7
 801cf2c:	f7e3 fb6c 	bl	8000608 <__aeabi_dmul>
 801cf30:	a357      	add	r3, pc, #348	; (adr r3, 801d090 <atan+0x2e8>)
 801cf32:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf36:	f7e3 f9af 	bl	8000298 <__aeabi_dsub>
 801cf3a:	4632      	mov	r2, r6
 801cf3c:	463b      	mov	r3, r7
 801cf3e:	f7e3 fb63 	bl	8000608 <__aeabi_dmul>
 801cf42:	4602      	mov	r2, r0
 801cf44:	460b      	mov	r3, r1
 801cf46:	4640      	mov	r0, r8
 801cf48:	4649      	mov	r1, r9
 801cf4a:	f7e3 f9a7 	bl	800029c <__adddf3>
 801cf4e:	4622      	mov	r2, r4
 801cf50:	462b      	mov	r3, r5
 801cf52:	f7e3 fb59 	bl	8000608 <__aeabi_dmul>
 801cf56:	f1ba 3fff 	cmp.w	sl, #4294967295
 801cf5a:	4602      	mov	r2, r0
 801cf5c:	460b      	mov	r3, r1
 801cf5e:	d144      	bne.n	801cfea <atan+0x242>
 801cf60:	4620      	mov	r0, r4
 801cf62:	4629      	mov	r1, r5
 801cf64:	f7e3 f998 	bl	8000298 <__aeabi_dsub>
 801cf68:	e733      	b.n	801cdd2 <atan+0x2a>
 801cf6a:	2200      	movs	r2, #0
 801cf6c:	4b4f      	ldr	r3, [pc, #316]	; (801d0ac <atan+0x304>)
 801cf6e:	f7e3 f993 	bl	8000298 <__aeabi_dsub>
 801cf72:	2200      	movs	r2, #0
 801cf74:	4606      	mov	r6, r0
 801cf76:	460f      	mov	r7, r1
 801cf78:	4b4c      	ldr	r3, [pc, #304]	; (801d0ac <atan+0x304>)
 801cf7a:	4620      	mov	r0, r4
 801cf7c:	4629      	mov	r1, r5
 801cf7e:	f7e3 f98d 	bl	800029c <__adddf3>
 801cf82:	4602      	mov	r2, r0
 801cf84:	460b      	mov	r3, r1
 801cf86:	4630      	mov	r0, r6
 801cf88:	4639      	mov	r1, r7
 801cf8a:	f7e3 fc67 	bl	800085c <__aeabi_ddiv>
 801cf8e:	f04f 0a01 	mov.w	sl, #1
 801cf92:	4604      	mov	r4, r0
 801cf94:	460d      	mov	r5, r1
 801cf96:	e767      	b.n	801ce68 <atan+0xc0>
 801cf98:	4b46      	ldr	r3, [pc, #280]	; (801d0b4 <atan+0x30c>)
 801cf9a:	429e      	cmp	r6, r3
 801cf9c:	dc1a      	bgt.n	801cfd4 <atan+0x22c>
 801cf9e:	2200      	movs	r2, #0
 801cfa0:	4b45      	ldr	r3, [pc, #276]	; (801d0b8 <atan+0x310>)
 801cfa2:	f7e3 f979 	bl	8000298 <__aeabi_dsub>
 801cfa6:	2200      	movs	r2, #0
 801cfa8:	4606      	mov	r6, r0
 801cfaa:	460f      	mov	r7, r1
 801cfac:	4b42      	ldr	r3, [pc, #264]	; (801d0b8 <atan+0x310>)
 801cfae:	4620      	mov	r0, r4
 801cfb0:	4629      	mov	r1, r5
 801cfb2:	f7e3 fb29 	bl	8000608 <__aeabi_dmul>
 801cfb6:	2200      	movs	r2, #0
 801cfb8:	4b3c      	ldr	r3, [pc, #240]	; (801d0ac <atan+0x304>)
 801cfba:	f7e3 f96f 	bl	800029c <__adddf3>
 801cfbe:	4602      	mov	r2, r0
 801cfc0:	460b      	mov	r3, r1
 801cfc2:	4630      	mov	r0, r6
 801cfc4:	4639      	mov	r1, r7
 801cfc6:	f7e3 fc49 	bl	800085c <__aeabi_ddiv>
 801cfca:	f04f 0a02 	mov.w	sl, #2
 801cfce:	4604      	mov	r4, r0
 801cfd0:	460d      	mov	r5, r1
 801cfd2:	e749      	b.n	801ce68 <atan+0xc0>
 801cfd4:	4602      	mov	r2, r0
 801cfd6:	460b      	mov	r3, r1
 801cfd8:	2000      	movs	r0, #0
 801cfda:	4938      	ldr	r1, [pc, #224]	; (801d0bc <atan+0x314>)
 801cfdc:	f7e3 fc3e 	bl	800085c <__aeabi_ddiv>
 801cfe0:	f04f 0a03 	mov.w	sl, #3
 801cfe4:	4604      	mov	r4, r0
 801cfe6:	460d      	mov	r5, r1
 801cfe8:	e73e      	b.n	801ce68 <atan+0xc0>
 801cfea:	4b35      	ldr	r3, [pc, #212]	; (801d0c0 <atan+0x318>)
 801cfec:	4e35      	ldr	r6, [pc, #212]	; (801d0c4 <atan+0x31c>)
 801cfee:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 801cff2:	4456      	add	r6, sl
 801cff4:	449a      	add	sl, r3
 801cff6:	e9da 2300 	ldrd	r2, r3, [sl]
 801cffa:	f7e3 f94d 	bl	8000298 <__aeabi_dsub>
 801cffe:	4622      	mov	r2, r4
 801d000:	462b      	mov	r3, r5
 801d002:	f7e3 f949 	bl	8000298 <__aeabi_dsub>
 801d006:	4602      	mov	r2, r0
 801d008:	460b      	mov	r3, r1
 801d00a:	e9d6 0100 	ldrd	r0, r1, [r6]
 801d00e:	f7e3 f943 	bl	8000298 <__aeabi_dsub>
 801d012:	f1bb 0f00 	cmp.w	fp, #0
 801d016:	4604      	mov	r4, r0
 801d018:	460d      	mov	r5, r1
 801d01a:	f6bf aee4 	bge.w	801cde6 <atan+0x3e>
 801d01e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801d022:	461d      	mov	r5, r3
 801d024:	e6df      	b.n	801cde6 <atan+0x3e>
 801d026:	a51c      	add	r5, pc, #112	; (adr r5, 801d098 <atan+0x2f0>)
 801d028:	e9d5 4500 	ldrd	r4, r5, [r5]
 801d02c:	e6db      	b.n	801cde6 <atan+0x3e>
 801d02e:	bf00      	nop
 801d030:	54442d18 	.word	0x54442d18
 801d034:	3ff921fb 	.word	0x3ff921fb
 801d038:	8800759c 	.word	0x8800759c
 801d03c:	7e37e43c 	.word	0x7e37e43c
 801d040:	e322da11 	.word	0xe322da11
 801d044:	3f90ad3a 	.word	0x3f90ad3a
 801d048:	24760deb 	.word	0x24760deb
 801d04c:	3fa97b4b 	.word	0x3fa97b4b
 801d050:	a0d03d51 	.word	0xa0d03d51
 801d054:	3fb10d66 	.word	0x3fb10d66
 801d058:	c54c206e 	.word	0xc54c206e
 801d05c:	3fb745cd 	.word	0x3fb745cd
 801d060:	920083ff 	.word	0x920083ff
 801d064:	3fc24924 	.word	0x3fc24924
 801d068:	5555550d 	.word	0x5555550d
 801d06c:	3fd55555 	.word	0x3fd55555
 801d070:	2c6a6c2f 	.word	0x2c6a6c2f
 801d074:	bfa2b444 	.word	0xbfa2b444
 801d078:	52defd9a 	.word	0x52defd9a
 801d07c:	3fadde2d 	.word	0x3fadde2d
 801d080:	af749a6d 	.word	0xaf749a6d
 801d084:	3fb3b0f2 	.word	0x3fb3b0f2
 801d088:	fe231671 	.word	0xfe231671
 801d08c:	3fbc71c6 	.word	0x3fbc71c6
 801d090:	9998ebc4 	.word	0x9998ebc4
 801d094:	3fc99999 	.word	0x3fc99999
 801d098:	54442d18 	.word	0x54442d18
 801d09c:	bff921fb 	.word	0xbff921fb
 801d0a0:	440fffff 	.word	0x440fffff
 801d0a4:	7ff00000 	.word	0x7ff00000
 801d0a8:	3fdbffff 	.word	0x3fdbffff
 801d0ac:	3ff00000 	.word	0x3ff00000
 801d0b0:	3ff2ffff 	.word	0x3ff2ffff
 801d0b4:	40037fff 	.word	0x40037fff
 801d0b8:	3ff80000 	.word	0x3ff80000
 801d0bc:	bff00000 	.word	0xbff00000
 801d0c0:	0801dc88 	.word	0x0801dc88
 801d0c4:	0801dc68 	.word	0x0801dc68

0801d0c8 <fabs>:
 801d0c8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801d0cc:	4619      	mov	r1, r3
 801d0ce:	4770      	bx	lr

0801d0d0 <matherr>:
 801d0d0:	2000      	movs	r0, #0
 801d0d2:	4770      	bx	lr

0801d0d4 <nan>:
 801d0d4:	2000      	movs	r0, #0
 801d0d6:	4901      	ldr	r1, [pc, #4]	; (801d0dc <nan+0x8>)
 801d0d8:	4770      	bx	lr
 801d0da:	bf00      	nop
 801d0dc:	7ff80000 	.word	0x7ff80000

0801d0e0 <fabsf>:
 801d0e0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801d0e4:	4770      	bx	lr
	...

0801d0e8 <floorf>:
 801d0e8:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
 801d0ec:	0dca      	lsrs	r2, r1, #23
 801d0ee:	3a7f      	subs	r2, #127	; 0x7f
 801d0f0:	2a16      	cmp	r2, #22
 801d0f2:	ee07 0a90 	vmov	s15, r0
 801d0f6:	4603      	mov	r3, r0
 801d0f8:	dc2a      	bgt.n	801d150 <floorf+0x68>
 801d0fa:	2a00      	cmp	r2, #0
 801d0fc:	da11      	bge.n	801d122 <floorf+0x3a>
 801d0fe:	ed9f 7a19 	vldr	s14, [pc, #100]	; 801d164 <floorf+0x7c>
 801d102:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d106:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801d10a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d10e:	dd05      	ble.n	801d11c <floorf+0x34>
 801d110:	2800      	cmp	r0, #0
 801d112:	da25      	bge.n	801d160 <floorf+0x78>
 801d114:	4a14      	ldr	r2, [pc, #80]	; (801d168 <floorf+0x80>)
 801d116:	2900      	cmp	r1, #0
 801d118:	bf18      	it	ne
 801d11a:	4613      	movne	r3, r2
 801d11c:	ee07 3a90 	vmov	s15, r3
 801d120:	e01b      	b.n	801d15a <floorf+0x72>
 801d122:	4912      	ldr	r1, [pc, #72]	; (801d16c <floorf+0x84>)
 801d124:	4111      	asrs	r1, r2
 801d126:	4208      	tst	r0, r1
 801d128:	d017      	beq.n	801d15a <floorf+0x72>
 801d12a:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 801d164 <floorf+0x7c>
 801d12e:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d132:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801d136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d13a:	ddef      	ble.n	801d11c <floorf+0x34>
 801d13c:	2800      	cmp	r0, #0
 801d13e:	bfbe      	ittt	lt
 801d140:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 801d144:	fa40 f202 	asrlt.w	r2, r0, r2
 801d148:	189b      	addlt	r3, r3, r2
 801d14a:	ea23 0301 	bic.w	r3, r3, r1
 801d14e:	e7e5      	b.n	801d11c <floorf+0x34>
 801d150:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801d154:	d301      	bcc.n	801d15a <floorf+0x72>
 801d156:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801d15a:	ee17 0a90 	vmov	r0, s15
 801d15e:	4770      	bx	lr
 801d160:	2300      	movs	r3, #0
 801d162:	e7db      	b.n	801d11c <floorf+0x34>
 801d164:	7149f2ca 	.word	0x7149f2ca
 801d168:	bf800000 	.word	0xbf800000
 801d16c:	007fffff 	.word	0x007fffff

0801d170 <scalbnf>:
 801d170:	b508      	push	{r3, lr}
 801d172:	f030 4300 	bics.w	r3, r0, #2147483648	; 0x80000000
 801d176:	ed2d 8b02 	vpush	{d8}
 801d17a:	ee07 0a90 	vmov	s15, r0
 801d17e:	4602      	mov	r2, r0
 801d180:	d004      	beq.n	801d18c <scalbnf+0x1c>
 801d182:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801d186:	d306      	bcc.n	801d196 <scalbnf+0x26>
 801d188:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801d18c:	ecbd 8b02 	vpop	{d8}
 801d190:	ee17 0a90 	vmov	r0, s15
 801d194:	bd08      	pop	{r3, pc}
 801d196:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801d19a:	d220      	bcs.n	801d1de <scalbnf+0x6e>
 801d19c:	4b1f      	ldr	r3, [pc, #124]	; (801d21c <scalbnf+0xac>)
 801d19e:	ed9f 7a20 	vldr	s14, [pc, #128]	; 801d220 <scalbnf+0xb0>
 801d1a2:	4299      	cmp	r1, r3
 801d1a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 801d1a8:	db14      	blt.n	801d1d4 <scalbnf+0x64>
 801d1aa:	ee17 2a90 	vmov	r2, s15
 801d1ae:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 801d1b2:	3b19      	subs	r3, #25
 801d1b4:	440b      	add	r3, r1
 801d1b6:	2bfe      	cmp	r3, #254	; 0xfe
 801d1b8:	dd13      	ble.n	801d1e2 <scalbnf+0x72>
 801d1ba:	ed9f 8a1a 	vldr	s16, [pc, #104]	; 801d224 <scalbnf+0xb4>
 801d1be:	ee17 1a90 	vmov	r1, s15
 801d1c2:	ee18 0a10 	vmov	r0, s16
 801d1c6:	f000 f833 	bl	801d230 <copysignf>
 801d1ca:	ee07 0a90 	vmov	s15, r0
 801d1ce:	ee67 7a88 	vmul.f32	s15, s15, s16
 801d1d2:	e7db      	b.n	801d18c <scalbnf+0x1c>
 801d1d4:	ed9f 7a14 	vldr	s14, [pc, #80]	; 801d228 <scalbnf+0xb8>
 801d1d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 801d1dc:	e7d6      	b.n	801d18c <scalbnf+0x1c>
 801d1de:	0ddb      	lsrs	r3, r3, #23
 801d1e0:	e7e8      	b.n	801d1b4 <scalbnf+0x44>
 801d1e2:	2b00      	cmp	r3, #0
 801d1e4:	dd06      	ble.n	801d1f4 <scalbnf+0x84>
 801d1e6:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 801d1ea:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 801d1ee:	ee07 3a90 	vmov	s15, r3
 801d1f2:	e7cb      	b.n	801d18c <scalbnf+0x1c>
 801d1f4:	f113 0f16 	cmn.w	r3, #22
 801d1f8:	da06      	bge.n	801d208 <scalbnf+0x98>
 801d1fa:	f24c 3350 	movw	r3, #50000	; 0xc350
 801d1fe:	4299      	cmp	r1, r3
 801d200:	dcdb      	bgt.n	801d1ba <scalbnf+0x4a>
 801d202:	ed9f 8a09 	vldr	s16, [pc, #36]	; 801d228 <scalbnf+0xb8>
 801d206:	e7da      	b.n	801d1be <scalbnf+0x4e>
 801d208:	3319      	adds	r3, #25
 801d20a:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 801d20e:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 801d212:	ed9f 7a06 	vldr	s14, [pc, #24]	; 801d22c <scalbnf+0xbc>
 801d216:	ee07 3a90 	vmov	s15, r3
 801d21a:	e7dd      	b.n	801d1d8 <scalbnf+0x68>
 801d21c:	ffff3cb0 	.word	0xffff3cb0
 801d220:	4c000000 	.word	0x4c000000
 801d224:	7149f2ca 	.word	0x7149f2ca
 801d228:	0da24260 	.word	0x0da24260
 801d22c:	33000000 	.word	0x33000000

0801d230 <copysignf>:
 801d230:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 801d234:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801d238:	4308      	orrs	r0, r1
 801d23a:	4770      	bx	lr

0801d23c <_init>:
 801d23c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d23e:	bf00      	nop
 801d240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d242:	bc08      	pop	{r3}
 801d244:	469e      	mov	lr, r3
 801d246:	4770      	bx	lr

0801d248 <_fini>:
 801d248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d24a:	bf00      	nop
 801d24c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d24e:	bc08      	pop	{r3}
 801d250:	469e      	mov	lr, r3
 801d252:	4770      	bx	lr
