
IMSI2020_ProjectFX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ca74  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a70  0801cc18  0801cc18  0002cc18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d688  0801d688  000313b4  2**0
                  CONTENTS
  4 .ARM          00000008  0801d688  0801d688  0002d688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d690  0801d690  000313b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d690  0801d690  0002d690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d694  0801d694  0002d694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000013b4  20000000  0801d698  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c2b8  200013b4  0801ea4c  000313b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000d66c  0801ea4c  0003d66c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000313b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00057e8c  00000000  00000000  000313e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007081  00000000  00000000  0008926e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000037d8  00000000  00000000  000902f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00003528  00000000  00000000  00093ac8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022cc9  00000000  00000000  00096ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00027205  00000000  00000000  000b9cb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b525c  00000000  00000000  000e0ebe  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000fa  00000000  00000000  0019611a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000fcb0  00000000  00000000  00196214  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200013b4 	.word	0x200013b4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801cbfc 	.word	0x0801cbfc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200013b8 	.word	0x200013b8
 80001dc:	0801cbfc 	.word	0x0801cbfc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b972 	b.w	8000f54 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	4688      	mov	r8, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14b      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4615      	mov	r5, r2
 8000c9a:	d967      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0720 	rsb	r7, r2, #32
 8000ca6:	fa01 f302 	lsl.w	r3, r1, r2
 8000caa:	fa20 f707 	lsr.w	r7, r0, r7
 8000cae:	4095      	lsls	r5, r2
 8000cb0:	ea47 0803 	orr.w	r8, r7, r3
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cc0:	fa1f fc85 	uxth.w	ip, r5
 8000cc4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cc8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ccc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18eb      	adds	r3, r5, r3
 8000cd6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cda:	f080 811b 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8118 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000ce4:	3f02      	subs	r7, #2
 8000ce6:	442b      	add	r3, r5
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cf0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cfc:	45a4      	cmp	ip, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	192c      	adds	r4, r5, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d06:	f080 8107 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000d0a:	45a4      	cmp	ip, r4
 8000d0c:	f240 8104 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000d10:	3802      	subs	r0, #2
 8000d12:	442c      	add	r4, r5
 8000d14:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d18:	eba4 040c 	sub.w	r4, r4, ip
 8000d1c:	2700      	movs	r7, #0
 8000d1e:	b11e      	cbz	r6, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c6 4300 	strd	r4, r3, [r6]
 8000d28:	4639      	mov	r1, r7
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0xbe>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80eb 	beq.w	8000f0e <__udivmoddi4+0x286>
 8000d38:	2700      	movs	r7, #0
 8000d3a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d3e:	4638      	mov	r0, r7
 8000d40:	4639      	mov	r1, r7
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f783 	clz	r7, r3
 8000d4a:	2f00      	cmp	r7, #0
 8000d4c:	d147      	bne.n	8000dde <__udivmoddi4+0x156>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0xd0>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80fa 	bhi.w	8000f4c <__udivmoddi4+0x2c4>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	4698      	mov	r8, r3
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	d0e0      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000d66:	e9c6 4800 	strd	r4, r8, [r6]
 8000d6a:	e7dd      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000d6c:	b902      	cbnz	r2, 8000d70 <__udivmoddi4+0xe8>
 8000d6e:	deff      	udf	#255	; 0xff
 8000d70:	fab2 f282 	clz	r2, r2
 8000d74:	2a00      	cmp	r2, #0
 8000d76:	f040 808f 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d7a:	1b49      	subs	r1, r1, r5
 8000d7c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d80:	fa1f f885 	uxth.w	r8, r5
 8000d84:	2701      	movs	r7, #1
 8000d86:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d8a:	0c23      	lsrs	r3, r4, #16
 8000d8c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb08 f10c 	mul.w	r1, r8, ip
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9c:	18eb      	adds	r3, r5, r3
 8000d9e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4299      	cmp	r1, r3
 8000da6:	f200 80cd 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000daa:	4684      	mov	ip, r0
 8000dac:	1a59      	subs	r1, r3, r1
 8000dae:	b2a3      	uxth	r3, r4
 8000db0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000db8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dbc:	fb08 f800 	mul.w	r8, r8, r0
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x14c>
 8000dc4:	192c      	adds	r4, r5, r4
 8000dc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x14a>
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	f200 80b6 	bhi.w	8000f3e <__udivmoddi4+0x2b6>
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	eba4 0408 	sub.w	r4, r4, r8
 8000dd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ddc:	e79f      	b.n	8000d1e <__udivmoddi4+0x96>
 8000dde:	f1c7 0c20 	rsb	ip, r7, #32
 8000de2:	40bb      	lsls	r3, r7
 8000de4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000de8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dec:	fa01 f407 	lsl.w	r4, r1, r7
 8000df0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000df4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000df8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dfc:	4325      	orrs	r5, r4
 8000dfe:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e02:	0c2c      	lsrs	r4, r5, #16
 8000e04:	fb08 3319 	mls	r3, r8, r9, r3
 8000e08:	fa1f fa8e 	uxth.w	sl, lr
 8000e0c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e10:	fb09 f40a 	mul.w	r4, r9, sl
 8000e14:	429c      	cmp	r4, r3
 8000e16:	fa02 f207 	lsl.w	r2, r2, r7
 8000e1a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1e 0303 	adds.w	r3, lr, r3
 8000e24:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e28:	f080 8087 	bcs.w	8000f3a <__udivmoddi4+0x2b2>
 8000e2c:	429c      	cmp	r4, r3
 8000e2e:	f240 8084 	bls.w	8000f3a <__udivmoddi4+0x2b2>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4473      	add	r3, lr
 8000e38:	1b1b      	subs	r3, r3, r4
 8000e3a:	b2ad      	uxth	r5, r5
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3310 	mls	r3, r8, r0, r3
 8000e44:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e48:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e4c:	45a2      	cmp	sl, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1e 0404 	adds.w	r4, lr, r4
 8000e54:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e58:	d26b      	bcs.n	8000f32 <__udivmoddi4+0x2aa>
 8000e5a:	45a2      	cmp	sl, r4
 8000e5c:	d969      	bls.n	8000f32 <__udivmoddi4+0x2aa>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4474      	add	r4, lr
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6a:	eba4 040a 	sub.w	r4, r4, sl
 8000e6e:	454c      	cmp	r4, r9
 8000e70:	46c2      	mov	sl, r8
 8000e72:	464b      	mov	r3, r9
 8000e74:	d354      	bcc.n	8000f20 <__udivmoddi4+0x298>
 8000e76:	d051      	beq.n	8000f1c <__udivmoddi4+0x294>
 8000e78:	2e00      	cmp	r6, #0
 8000e7a:	d069      	beq.n	8000f50 <__udivmoddi4+0x2c8>
 8000e7c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e80:	eb64 0403 	sbc.w	r4, r4, r3
 8000e84:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e88:	40fd      	lsrs	r5, r7
 8000e8a:	40fc      	lsrs	r4, r7
 8000e8c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e90:	e9c6 5400 	strd	r5, r4, [r6]
 8000e94:	2700      	movs	r7, #0
 8000e96:	e747      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f703 	lsr.w	r7, r0, r3
 8000ea0:	4095      	lsls	r5, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eaa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eae:	4338      	orrs	r0, r7
 8000eb0:	0c01      	lsrs	r1, r0, #16
 8000eb2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000eb6:	fa1f f885 	uxth.w	r8, r5
 8000eba:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ebe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec2:	fb07 f308 	mul.w	r3, r7, r8
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ecc:	d907      	bls.n	8000ede <__udivmoddi4+0x256>
 8000ece:	1869      	adds	r1, r5, r1
 8000ed0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ed4:	d22f      	bcs.n	8000f36 <__udivmoddi4+0x2ae>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	d92d      	bls.n	8000f36 <__udivmoddi4+0x2ae>
 8000eda:	3f02      	subs	r7, #2
 8000edc:	4429      	add	r1, r5
 8000ede:	1acb      	subs	r3, r1, r3
 8000ee0:	b281      	uxth	r1, r0
 8000ee2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eee:	fb00 f308 	mul.w	r3, r0, r8
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x27e>
 8000ef6:	1869      	adds	r1, r5, r1
 8000ef8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000efc:	d217      	bcs.n	8000f2e <__udivmoddi4+0x2a6>
 8000efe:	428b      	cmp	r3, r1
 8000f00:	d915      	bls.n	8000f2e <__udivmoddi4+0x2a6>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4429      	add	r1, r5
 8000f06:	1ac9      	subs	r1, r1, r3
 8000f08:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f0c:	e73b      	b.n	8000d86 <__udivmoddi4+0xfe>
 8000f0e:	4637      	mov	r7, r6
 8000f10:	4630      	mov	r0, r6
 8000f12:	e709      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f14:	4607      	mov	r7, r0
 8000f16:	e6e7      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f18:	4618      	mov	r0, r3
 8000f1a:	e6fb      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f1c:	4541      	cmp	r1, r8
 8000f1e:	d2ab      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f20:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f24:	eb69 020e 	sbc.w	r2, r9, lr
 8000f28:	3801      	subs	r0, #1
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	e7a4      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f2e:	4660      	mov	r0, ip
 8000f30:	e7e9      	b.n	8000f06 <__udivmoddi4+0x27e>
 8000f32:	4618      	mov	r0, r3
 8000f34:	e795      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f36:	4667      	mov	r7, ip
 8000f38:	e7d1      	b.n	8000ede <__udivmoddi4+0x256>
 8000f3a:	4681      	mov	r9, r0
 8000f3c:	e77c      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f3e:	3802      	subs	r0, #2
 8000f40:	442c      	add	r4, r5
 8000f42:	e747      	b.n	8000dd4 <__udivmoddi4+0x14c>
 8000f44:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f48:	442b      	add	r3, r5
 8000f4a:	e72f      	b.n	8000dac <__udivmoddi4+0x124>
 8000f4c:	4638      	mov	r0, r7
 8000f4e:	e708      	b.n	8000d62 <__udivmoddi4+0xda>
 8000f50:	4637      	mov	r7, r6
 8000f52:	e6e9      	b.n	8000d28 <__udivmoddi4+0xa0>

08000f54 <__aeabi_idiv0>:
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <MX_BlueNRG_MS_Init>:




void MX_BlueNRG_MS_Init(void)
{
 8000f58:	b5b0      	push	{r4, r5, r7, lr}
 8000f5a:	b08a      	sub	sp, #40	; 0x28
 8000f5c:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN BlueNRG_MS_Init_PreTreatment */
  
  /* USER CODE END BlueNRG_MS_Init_PreTreatment */

  /* Initialize the peripherals and the BLE Stack */
  const char *name = "BlueNRG";    
 8000f5e:	4b66      	ldr	r3, [pc, #408]	; (80010f8 <MX_BlueNRG_MS_Init+0x1a0>)
 8000f60:	613b      	str	r3, [r7, #16]
  uint8_t  bdaddr_len_out;
  uint8_t  hwVersion;
  uint16_t fwVersion;
  int ret;  
  
  User_Init();
 8000f62:	f000 f8f3 	bl	800114c <User_Init>
  
  /* Get the User Button initial state */
  user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 8000f66:	2000      	movs	r0, #0
 8000f68:	f007 f92e 	bl	80081c8 <BSP_PB_GetState>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	b2da      	uxtb	r2, r3
 8000f70:	4b62      	ldr	r3, [pc, #392]	; (80010fc <MX_BlueNRG_MS_Init+0x1a4>)
 8000f72:	701a      	strb	r2, [r3, #0]
    
  hci_init(user_notify, NULL);
 8000f74:	2100      	movs	r1, #0
 8000f76:	4862      	ldr	r0, [pc, #392]	; (8001100 <MX_BlueNRG_MS_Init+0x1a8>)
 8000f78:	f00d fdc0 	bl	800eafc <hci_init>
  
  /* get the BlueNRG HW and FW versions */
  getBlueNRGVersion(&hwVersion, &fwVersion);
 8000f7c:	1dba      	adds	r2, r7, #6
 8000f7e:	f107 0308 	add.w	r3, r7, #8
 8000f82:	4611      	mov	r1, r2
 8000f84:	4618      	mov	r0, r3
 8000f86:	f00d fc30 	bl	800e7ea <getBlueNRGVersion>
   * Reset BlueNRG again otherwise we won't
   * be able to change its MAC address.
   * aci_hal_write_config_data() must be the first
   * command after reset otherwise it will fail.
   */
  hci_reset(); 
 8000f8a:	f00d fc72 	bl	800e872 <hci_reset>
  HAL_Delay(100);
 8000f8e:	2064      	movs	r0, #100	; 0x64
 8000f90:	f007 fa62 	bl	8008458 <HAL_Delay>
 
  PRINTF("HWver %d\nFWver %d\n", hwVersion, fwVersion);
 8000f94:	7a3b      	ldrb	r3, [r7, #8]
 8000f96:	4619      	mov	r1, r3
 8000f98:	88fb      	ldrh	r3, [r7, #6]
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	4859      	ldr	r0, [pc, #356]	; (8001104 <MX_BlueNRG_MS_Init+0x1ac>)
 8000f9e:	f019 f847 	bl	801a030 <iprintf>
  if (hwVersion > 0x30) { /* X-NUCLEO-IDB05A1 expansion board is used */
 8000fa2:	7a3b      	ldrb	r3, [r7, #8]
 8000fa4:	2b30      	cmp	r3, #48	; 0x30
 8000fa6:	d902      	bls.n	8000fae <MX_BlueNRG_MS_Init+0x56>
    bnrg_expansion_board = IDB05A1;    
 8000fa8:	4b57      	ldr	r3, [pc, #348]	; (8001108 <MX_BlueNRG_MS_Init+0x1b0>)
 8000faa:	2201      	movs	r2, #1
 8000fac:	701a      	strb	r2, [r3, #0]
  }
  
  ret = aci_hal_read_config_data(CONFIG_DATA_RANDOM_ADDRESS, BDADDR_SIZE, &bdaddr_len_out, bdaddr);
 8000fae:	f107 0209 	add.w	r2, r7, #9
 8000fb2:	4b56      	ldr	r3, [pc, #344]	; (800110c <MX_BlueNRG_MS_Init+0x1b4>)
 8000fb4:	2106      	movs	r1, #6
 8000fb6:	2080      	movs	r0, #128	; 0x80
 8000fb8:	f00d fb93 	bl	800e6e2 <aci_hal_read_config_data>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	617b      	str	r3, [r7, #20]
  
  if (ret) {
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d002      	beq.n	8000fcc <MX_BlueNRG_MS_Init+0x74>
    PRINTF("Read Static Random address failed.\n");
 8000fc6:	4852      	ldr	r0, [pc, #328]	; (8001110 <MX_BlueNRG_MS_Init+0x1b8>)
 8000fc8:	f019 f8a6 	bl	801a118 <puts>
  }

  if ((bdaddr[5] & 0xC0) != 0xC0) {
 8000fcc:	4b4f      	ldr	r3, [pc, #316]	; (800110c <MX_BlueNRG_MS_Init+0x1b4>)
 8000fce:	795b      	ldrb	r3, [r3, #5]
 8000fd0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8000fd4:	2bc0      	cmp	r3, #192	; 0xc0
 8000fd6:	d003      	beq.n	8000fe0 <MX_BlueNRG_MS_Init+0x88>
    PRINTF("Static Random address not well formed.\n");
 8000fd8:	484e      	ldr	r0, [pc, #312]	; (8001114 <MX_BlueNRG_MS_Init+0x1bc>)
 8000fda:	f019 f89d 	bl	801a118 <puts>
    while(1);
 8000fde:	e7fe      	b.n	8000fde <MX_BlueNRG_MS_Init+0x86>
  }
  
  /* GATT Init */
  ret = aci_gatt_init();    
 8000fe0:	f00d f93e 	bl	800e260 <aci_gatt_init>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	617b      	str	r3, [r7, #20]
  if(ret){
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d002      	beq.n	8000ff4 <MX_BlueNRG_MS_Init+0x9c>
    PRINTF("GATT_Init failed.\n");
 8000fee:	484a      	ldr	r0, [pc, #296]	; (8001118 <MX_BlueNRG_MS_Init+0x1c0>)
 8000ff0:	f019 f892 	bl	801a118 <puts>
  }

  /* GAP Init */
  if (bnrg_expansion_board == IDB05A1) {
 8000ff4:	4b44      	ldr	r3, [pc, #272]	; (8001108 <MX_BlueNRG_MS_Init+0x1b0>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d110      	bne.n	800101e <MX_BlueNRG_MS_Init+0xc6>
    ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8000ffc:	f107 020e 	add.w	r2, r7, #14
 8001000:	f107 030a 	add.w	r3, r7, #10
 8001004:	9301      	str	r3, [sp, #4]
 8001006:	f107 030c 	add.w	r3, r7, #12
 800100a:	9300      	str	r3, [sp, #0]
 800100c:	4613      	mov	r3, r2
 800100e:	2207      	movs	r2, #7
 8001010:	2100      	movs	r1, #0
 8001012:	2001      	movs	r0, #1
 8001014:	f00c fef5 	bl	800de02 <aci_gap_init_IDB05A1>
 8001018:	4603      	mov	r3, r0
 800101a:	617b      	str	r3, [r7, #20]
 800101c:	e00a      	b.n	8001034 <MX_BlueNRG_MS_Init+0xdc>
  }
  else {
    ret = aci_gap_init_IDB04A1(GAP_PERIPHERAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 800101e:	f107 030a 	add.w	r3, r7, #10
 8001022:	f107 020c 	add.w	r2, r7, #12
 8001026:	f107 010e 	add.w	r1, r7, #14
 800102a:	2001      	movs	r0, #1
 800102c:	f00c ff39 	bl	800dea2 <aci_gap_init_IDB04A1>
 8001030:	4603      	mov	r3, r0
 8001032:	617b      	str	r3, [r7, #20]
  }
  if (ret != BLE_STATUS_SUCCESS) {
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d002      	beq.n	8001040 <MX_BlueNRG_MS_Init+0xe8>
    PRINTF("GAP_Init failed.\n");
 800103a:	4838      	ldr	r0, [pc, #224]	; (800111c <MX_BlueNRG_MS_Init+0x1c4>)
 800103c:	f019 f86c 	bl	801a118 <puts>
  }

  /* Update device name */
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 8001040:	89fc      	ldrh	r4, [r7, #14]
 8001042:	89bd      	ldrh	r5, [r7, #12]
                                   strlen(name), (uint8_t *)name);
 8001044:	6938      	ldr	r0, [r7, #16]
 8001046:	f7ff f8cb 	bl	80001e0 <strlen>
 800104a:	4603      	mov	r3, r0
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 800104c:	b2da      	uxtb	r2, r3
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	9300      	str	r3, [sp, #0]
 8001052:	4613      	mov	r3, r2
 8001054:	2200      	movs	r2, #0
 8001056:	4629      	mov	r1, r5
 8001058:	4620      	mov	r0, r4
 800105a:	f00d fa82 	bl	800e562 <aci_gatt_update_char_value>
 800105e:	4603      	mov	r3, r0
 8001060:	617b      	str	r3, [r7, #20]
  if (ret) {
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d003      	beq.n	8001070 <MX_BlueNRG_MS_Init+0x118>
    PRINTF("aci_gatt_update_char_value failed.\n");            
 8001068:	482d      	ldr	r0, [pc, #180]	; (8001120 <MX_BlueNRG_MS_Init+0x1c8>)
 800106a:	f019 f855 	bl	801a118 <puts>
    while(1);
 800106e:	e7fe      	b.n	800106e <MX_BlueNRG_MS_Init+0x116>
  }
  
  ret = aci_gap_set_auth_requirement(MITM_PROTECTION_REQUIRED,
 8001070:	2301      	movs	r3, #1
 8001072:	9303      	str	r3, [sp, #12]
 8001074:	4b2b      	ldr	r3, [pc, #172]	; (8001124 <MX_BlueNRG_MS_Init+0x1cc>)
 8001076:	9302      	str	r3, [sp, #8]
 8001078:	2300      	movs	r3, #0
 800107a:	9301      	str	r3, [sp, #4]
 800107c:	2310      	movs	r3, #16
 800107e:	9300      	str	r3, [sp, #0]
 8001080:	2307      	movs	r3, #7
 8001082:	2200      	movs	r2, #0
 8001084:	2100      	movs	r1, #0
 8001086:	2001      	movs	r0, #1
 8001088:	f00d f844 	bl	800e114 <aci_gap_set_auth_requirement>
 800108c:	4603      	mov	r3, r0
 800108e:	617b      	str	r3, [r7, #20]
                                     7,
                                     16,
                                     USE_FIXED_PIN_FOR_PAIRING,
                                     123456,
                                     BONDING);
  if (ret) {
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d003      	beq.n	800109e <MX_BlueNRG_MS_Init+0x146>
    PRINTF("aci_gap_set_authentication_requirement failed.\n");
 8001096:	4824      	ldr	r0, [pc, #144]	; (8001128 <MX_BlueNRG_MS_Init+0x1d0>)
 8001098:	f019 f83e 	bl	801a118 <puts>
    while(1);
 800109c:	e7fe      	b.n	800109c <MX_BlueNRG_MS_Init+0x144>
  }
  
  PRINTF("BLE Stack Initialized\n");
 800109e:	4823      	ldr	r0, [pc, #140]	; (800112c <MX_BlueNRG_MS_Init+0x1d4>)
 80010a0:	f019 f83a 	bl	801a118 <puts>
  
  ret = Add_HWServW2ST_Service();
 80010a4:	f000 f93a 	bl	800131c <Add_HWServW2ST_Service>
 80010a8:	4603      	mov	r3, r0
 80010aa:	617b      	str	r3, [r7, #20]
  if(ret == BLE_STATUS_SUCCESS) {
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d10a      	bne.n	80010c8 <MX_BlueNRG_MS_Init+0x170>
    PRINTF("BlueMS HW service added successfully.\n");
 80010b2:	481f      	ldr	r0, [pc, #124]	; (8001130 <MX_BlueNRG_MS_Init+0x1d8>)
 80010b4:	f019 f830 	bl	801a118 <puts>
  } else {
    PRINTF("Error while adding BlueMS HW service: 0x%02x\r\n", ret);
    while(1);
  }
  
  ret = Add_SWServW2ST_Service();
 80010b8:	f000 fa0c 	bl	80014d4 <Add_SWServW2ST_Service>
 80010bc:	4603      	mov	r3, r0
 80010be:	617b      	str	r3, [r7, #20]
  if(ret == BLE_STATUS_SUCCESS) {
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d109      	bne.n	80010da <MX_BlueNRG_MS_Init+0x182>
 80010c6:	e004      	b.n	80010d2 <MX_BlueNRG_MS_Init+0x17a>
    PRINTF("Error while adding BlueMS HW service: 0x%02x\r\n", ret);
 80010c8:	6979      	ldr	r1, [r7, #20]
 80010ca:	481a      	ldr	r0, [pc, #104]	; (8001134 <MX_BlueNRG_MS_Init+0x1dc>)
 80010cc:	f018 ffb0 	bl	801a030 <iprintf>
    while(1);
 80010d0:	e7fe      	b.n	80010d0 <MX_BlueNRG_MS_Init+0x178>
     PRINTF("BlueMS SW service added successfully.\n");
 80010d2:	4819      	ldr	r0, [pc, #100]	; (8001138 <MX_BlueNRG_MS_Init+0x1e0>)
 80010d4:	f019 f820 	bl	801a118 <puts>
 80010d8:	e004      	b.n	80010e4 <MX_BlueNRG_MS_Init+0x18c>
  } else {
     PRINTF("Error while adding BlueMS HW service: 0x%02x\r\n", ret);
 80010da:	6979      	ldr	r1, [r7, #20]
 80010dc:	4815      	ldr	r0, [pc, #84]	; (8001134 <MX_BlueNRG_MS_Init+0x1dc>)
 80010de:	f018 ffa7 	bl	801a030 <iprintf>
     while(1);
 80010e2:	e7fe      	b.n	80010e2 <MX_BlueNRG_MS_Init+0x18a>
  }

  /* Set output power level */
  ret = aci_hal_set_tx_power_level(1,4);
 80010e4:	2104      	movs	r1, #4
 80010e6:	2001      	movs	r0, #1
 80010e8:	f00d fb4e 	bl	800e788 <aci_hal_set_tx_power_level>
 80010ec:	4603      	mov	r3, r0
 80010ee:	617b      	str	r3, [r7, #20]
  
  /* USER CODE BEGIN BlueNRG_MS_Init_PostTreatment */
  
  /* USER CODE END BlueNRG_MS_Init_PostTreatment */
}
 80010f0:	bf00      	nop
 80010f2:	3718      	adds	r7, #24
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bdb0      	pop	{r4, r5, r7, pc}
 80010f8:	0801cc18 	.word	0x0801cc18
 80010fc:	200011c0 	.word	0x200011c0
 8001100:	08001b41 	.word	0x08001b41
 8001104:	0801cc20 	.word	0x0801cc20
 8001108:	200021b9 	.word	0x200021b9
 800110c:	200027ac 	.word	0x200027ac
 8001110:	0801cc34 	.word	0x0801cc34
 8001114:	0801cc58 	.word	0x0801cc58
 8001118:	0801cc80 	.word	0x0801cc80
 800111c:	0801cc94 	.word	0x0801cc94
 8001120:	0801cca8 	.word	0x0801cca8
 8001124:	0001e240 	.word	0x0001e240
 8001128:	0801cccc 	.word	0x0801cccc
 800112c:	0801ccfc 	.word	0x0801ccfc
 8001130:	0801cd14 	.word	0x0801cd14
 8001134:	0801cd3c 	.word	0x0801cd3c
 8001138:	0801cd6c 	.word	0x0801cd6c

0800113c <MX_BlueNRG_MS_Process>:

/*
 * BlueNRG-MS background task
 */
void MX_BlueNRG_MS_Process(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BlueNRG_MS_Process_PreTreatment */
  
  /* USER CODE END BlueNRG_MS_Process_PreTreatment */
  
  User_Process();  
 8001140:	f000 f812 	bl	8001168 <User_Process>
  hci_user_evt_proc();
 8001144:	f00d fe54 	bl	800edf0 <hci_user_evt_proc>

  /* USER CODE BEGIN BlueNRG_MS_Process_PostTreatment */
  
  /* USER CODE END BlueNRG_MS_Process_PostTreatment */
}
 8001148:	bf00      	nop
 800114a:	bd80      	pop	{r7, pc}

0800114c <User_Init>:
 *
 * @param  None
 * @retval None
 */
static void User_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8001150:	2101      	movs	r1, #1
 8001152:	2000      	movs	r0, #0
 8001154:	f006 ffb8 	bl	80080c8 <BSP_PB_Init>
  BSP_LED_Init(LED2);
 8001158:	2000      	movs	r0, #0
 800115a:	f006 ff3b 	bl	8007fd4 <BSP_LED_Init>
  
  BSP_COM_Init(COM1);
 800115e:	2000      	movs	r0, #0
 8001160:	f007 f856 	bl	8008210 <BSP_COM_Init>
}
 8001164:	bf00      	nop
 8001166:	bd80      	pop	{r7, pc}

08001168 <User_Process>:
 *
 * @param  None
 * @retval None
 */
static void User_Process(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  if (set_connectable)
 800116c:	4b4f      	ldr	r3, [pc, #316]	; (80012ac <User_Process+0x144>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	b2db      	uxtb	r3, r3
 8001172:	2b00      	cmp	r3, #0
 8001174:	d004      	beq.n	8001180 <User_Process+0x18>
  {
    Set_DeviceConnectable();
 8001176:	f000 fc4f 	bl	8001a18 <Set_DeviceConnectable>
    set_connectable = FALSE;
 800117a:	4b4c      	ldr	r3, [pc, #304]	; (80012ac <User_Process+0x144>)
 800117c:	2200      	movs	r2, #0
 800117e:	701a      	strb	r2, [r3, #0]
  }  
    
    BSP_LED_Toggle(LED2);
 8001180:	2000      	movs	r0, #0
 8001182:	f006 ff8b 	bl	800809c <BSP_LED_Toggle>
    static uint32_t counter = 0;
    
    if (connected)
 8001186:	4b4a      	ldr	r3, [pc, #296]	; (80012b0 <User_Process+0x148>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2b00      	cmp	r3, #0
 800118c:	f000 808c 	beq.w	80012a8 <User_Process+0x140>
    {
      /* Update emulated Environmental data */
//      Set_Random_Environmental_Values(&data_t, &data_p);
      BlueMS_Environmental_Update((int32_t)(mems_pressure *100), (int16_t)(mems_temperature * 10), (int16_t)(mems_humidity * 10));
 8001190:	4b48      	ldr	r3, [pc, #288]	; (80012b4 <User_Process+0x14c>)
 8001192:	edd3 7a00 	vldr	s15, [r3]
 8001196:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80012b8 <User_Process+0x150>
 800119a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800119e:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 80011a2:	4b46      	ldr	r3, [pc, #280]	; (80012bc <User_Process+0x154>)
 80011a4:	edd3 7a00 	vldr	s15, [r3]
 80011a8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80011ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011b4:	ee17 3a90 	vmov	r3, s15
 80011b8:	b219      	sxth	r1, r3
 80011ba:	4b41      	ldr	r3, [pc, #260]	; (80012c0 <User_Process+0x158>)
 80011bc:	edd3 7a00 	vldr	s15, [r3]
 80011c0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80011c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011cc:	ee17 3a90 	vmov	r3, s15
 80011d0:	b21b      	sxth	r3, r3
 80011d2:	461a      	mov	r2, r3
 80011d4:	ee16 0a90 	vmov	r0, s13
 80011d8:	f000 fbc6 	bl	8001968 <BlueMS_Environmental_Update>
	              
      /* Update emulated Acceleration, Gyroscope and Sensor Fusion data */
      //Set_Random_Motion_Values(counter);
      Acc_Update(&x_axes, &g_axes, &m_axes);      
 80011dc:	4a39      	ldr	r2, [pc, #228]	; (80012c4 <User_Process+0x15c>)
 80011de:	493a      	ldr	r1, [pc, #232]	; (80012c8 <User_Process+0x160>)
 80011e0:	483a      	ldr	r0, [pc, #232]	; (80012cc <User_Process+0x164>)
 80011e2:	f000 fa0b 	bl	80015fc <Acc_Update>

      if(q_axes.AXIS_Z > 180) {
 80011e6:	4b3a      	ldr	r3, [pc, #232]	; (80012d0 <User_Process+0x168>)
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	2bb4      	cmp	r3, #180	; 0xb4
 80011ec:	dd14      	ble.n	8001218 <User_Process+0xb0>
    	  q_axes.AXIS_Z -= 180;
 80011ee:	4b38      	ldr	r3, [pc, #224]	; (80012d0 <User_Process+0x168>)
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	3bb4      	subs	r3, #180	; 0xb4
 80011f4:	4a36      	ldr	r2, [pc, #216]	; (80012d0 <User_Process+0x168>)
 80011f6:	6093      	str	r3, [r2, #8]
    	  q_axes.AXIS_Z = q_axes.AXIS_Z * 10000 / 180;
 80011f8:	4b35      	ldr	r3, [pc, #212]	; (80012d0 <User_Process+0x168>)
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	f242 7210 	movw	r2, #10000	; 0x2710
 8001200:	fb02 f303 	mul.w	r3, r2, r3
 8001204:	4a33      	ldr	r2, [pc, #204]	; (80012d4 <User_Process+0x16c>)
 8001206:	fb82 1203 	smull	r1, r2, r2, r3
 800120a:	441a      	add	r2, r3
 800120c:	11d2      	asrs	r2, r2, #7
 800120e:	17db      	asrs	r3, r3, #31
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	4a2f      	ldr	r2, [pc, #188]	; (80012d0 <User_Process+0x168>)
 8001214:	6093      	str	r3, [r2, #8]
 8001216:	e013      	b.n	8001240 <User_Process+0xd8>
      } else {
    	  q_axes.AXIS_Z = 180 - q_axes.AXIS_Z;
 8001218:	4b2d      	ldr	r3, [pc, #180]	; (80012d0 <User_Process+0x168>)
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 8001220:	4a2b      	ldr	r2, [pc, #172]	; (80012d0 <User_Process+0x168>)
 8001222:	6093      	str	r3, [r2, #8]
    	  q_axes.AXIS_Z = q_axes.AXIS_Z * -10000 / 180;
 8001224:	4b2a      	ldr	r3, [pc, #168]	; (80012d0 <User_Process+0x168>)
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	4a2b      	ldr	r2, [pc, #172]	; (80012d8 <User_Process+0x170>)
 800122a:	fb02 f303 	mul.w	r3, r2, r3
 800122e:	4a29      	ldr	r2, [pc, #164]	; (80012d4 <User_Process+0x16c>)
 8001230:	fb82 1203 	smull	r1, r2, r2, r3
 8001234:	441a      	add	r2, r3
 8001236:	11d2      	asrs	r2, r2, #7
 8001238:	17db      	asrs	r3, r3, #31
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	4a24      	ldr	r2, [pc, #144]	; (80012d0 <User_Process+0x168>)
 800123e:	6093      	str	r3, [r2, #8]
      }

      q_axes.AXIS_Y = q_axes.AXIS_Y * 10000 / 180;
 8001240:	4b23      	ldr	r3, [pc, #140]	; (80012d0 <User_Process+0x168>)
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f242 7210 	movw	r2, #10000	; 0x2710
 8001248:	fb02 f303 	mul.w	r3, r2, r3
 800124c:	4a21      	ldr	r2, [pc, #132]	; (80012d4 <User_Process+0x16c>)
 800124e:	fb82 1203 	smull	r1, r2, r2, r3
 8001252:	441a      	add	r2, r3
 8001254:	11d2      	asrs	r2, r2, #7
 8001256:	17db      	asrs	r3, r3, #31
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	4a1d      	ldr	r2, [pc, #116]	; (80012d0 <User_Process+0x168>)
 800125c:	6053      	str	r3, [r2, #4]

      q_axes.AXIS_X = q_axes.AXIS_X * 10000 / 180;
 800125e:	4b1c      	ldr	r3, [pc, #112]	; (80012d0 <User_Process+0x168>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f242 7210 	movw	r2, #10000	; 0x2710
 8001266:	fb02 f303 	mul.w	r3, r2, r3
 800126a:	4a1a      	ldr	r2, [pc, #104]	; (80012d4 <User_Process+0x16c>)
 800126c:	fb82 1203 	smull	r1, r2, r2, r3
 8001270:	441a      	add	r2, r3
 8001272:	11d2      	asrs	r2, r2, #7
 8001274:	17db      	asrs	r3, r3, #31
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	4a15      	ldr	r2, [pc, #84]	; (80012d0 <User_Process+0x168>)
 800127a:	6013      	str	r3, [r2, #0]

      printf("qx: %ld, qy: %ld, qz: %ld\r\n", q_axes.AXIS_X, q_axes.AXIS_Y,
 800127c:	4b14      	ldr	r3, [pc, #80]	; (80012d0 <User_Process+0x168>)
 800127e:	6819      	ldr	r1, [r3, #0]
 8001280:	4b13      	ldr	r3, [pc, #76]	; (80012d0 <User_Process+0x168>)
 8001282:	685a      	ldr	r2, [r3, #4]
 8001284:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <User_Process+0x168>)
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	4814      	ldr	r0, [pc, #80]	; (80012dc <User_Process+0x174>)
 800128a:	f018 fed1 	bl	801a030 <iprintf>
      			q_axes.AXIS_Z);
      Quat_Update(&q_axes);
 800128e:	4810      	ldr	r0, [pc, #64]	; (80012d0 <User_Process+0x168>)
 8001290:	f000 fa46 	bl	8001720 <Quat_Update>
      
      counter++;
 8001294:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <User_Process+0x178>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	3301      	adds	r3, #1
 800129a:	4a11      	ldr	r2, [pc, #68]	; (80012e0 <User_Process+0x178>)
 800129c:	6013      	str	r3, [r2, #0]
      HAL_Delay(delayy); /* wait 1 sec before sending new data */
 800129e:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <User_Process+0x17c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4618      	mov	r0, r3
 80012a4:	f007 f8d8 	bl	8008458 <HAL_Delay>

    }

}
 80012a8:	bf00      	nop
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	200011c8 	.word	0x200011c8
 80012b0:	200021c4 	.word	0x200021c4
 80012b4:	2000d630 	.word	0x2000d630
 80012b8:	42c80000 	.word	0x42c80000
 80012bc:	2000d628 	.word	0x2000d628
 80012c0:	2000d624 	.word	0x2000d624
 80012c4:	200021e0 	.word	0x200021e0
 80012c8:	200021d4 	.word	0x200021d4
 80012cc:	200021c8 	.word	0x200021c8
 80012d0:	200021ec 	.word	0x200021ec
 80012d4:	b60b60b7 	.word	0xb60b60b7
 80012d8:	ffffd8f0 	.word	0xffffd8f0
 80012dc:	0801cd94 	.word	0x0801cd94
 80012e0:	200021bc 	.word	0x200021bc
 80012e4:	200011c4 	.word	0x200011c4

080012e8 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	71fb      	strb	r3, [r7, #7]
  /* Set the User Button flag */
  //user_button_pressed = 1;
  if(delayy == 1000) {
 80012f2:	4b09      	ldr	r3, [pc, #36]	; (8001318 <BSP_PB_Callback+0x30>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80012fa:	d103      	bne.n	8001304 <BSP_PB_Callback+0x1c>
	  delayy = 10;
 80012fc:	4b06      	ldr	r3, [pc, #24]	; (8001318 <BSP_PB_Callback+0x30>)
 80012fe:	220a      	movs	r2, #10
 8001300:	601a      	str	r2, [r3, #0]
  } else {
	  delayy = 1000;
  }
}
 8001302:	e003      	b.n	800130c <BSP_PB_Callback+0x24>
	  delayy = 1000;
 8001304:	4b04      	ldr	r3, [pc, #16]	; (8001318 <BSP_PB_Callback+0x30>)
 8001306:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800130a:	601a      	str	r2, [r3, #0]
}
 800130c:	bf00      	nop
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
 8001318:	200011c4 	.word	0x200011c4

0800131c <Add_HWServW2ST_Service>:
 * @brief  Add the 'HW' service (and the Environmental and AccGyr characteristics).
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_HWServW2ST_Service(void)
{
 800131c:	b5b0      	push	{r4, r5, r7, lr}
 800131e:	b08c      	sub	sp, #48	; 0x30
 8001320:	af06      	add	r7, sp, #24
  tBleStatus ret;
  uint8_t uuid[16];
  
  /* Add_HWServW2ST_Service */
  COPY_HW_SENS_W2ST_SERVICE_UUID(uuid);  
 8001322:	231b      	movs	r3, #27
 8001324:	713b      	strb	r3, [r7, #4]
 8001326:	23c5      	movs	r3, #197	; 0xc5
 8001328:	717b      	strb	r3, [r7, #5]
 800132a:	23d5      	movs	r3, #213	; 0xd5
 800132c:	71bb      	strb	r3, [r7, #6]
 800132e:	23a5      	movs	r3, #165	; 0xa5
 8001330:	71fb      	strb	r3, [r7, #7]
 8001332:	2302      	movs	r3, #2
 8001334:	723b      	strb	r3, [r7, #8]
 8001336:	2300      	movs	r3, #0
 8001338:	727b      	strb	r3, [r7, #9]
 800133a:	23b4      	movs	r3, #180	; 0xb4
 800133c:	72bb      	strb	r3, [r7, #10]
 800133e:	239a      	movs	r3, #154	; 0x9a
 8001340:	72fb      	strb	r3, [r7, #11]
 8001342:	23e1      	movs	r3, #225	; 0xe1
 8001344:	733b      	strb	r3, [r7, #12]
 8001346:	2311      	movs	r3, #17
 8001348:	737b      	strb	r3, [r7, #13]
 800134a:	2301      	movs	r3, #1
 800134c:	73bb      	strb	r3, [r7, #14]
 800134e:	2300      	movs	r3, #0
 8001350:	73fb      	strb	r3, [r7, #15]
 8001352:	2300      	movs	r3, #0
 8001354:	743b      	strb	r3, [r7, #16]
 8001356:	2300      	movs	r3, #0
 8001358:	747b      	strb	r3, [r7, #17]
 800135a:	2300      	movs	r3, #0
 800135c:	74bb      	strb	r3, [r7, #18]
 800135e:	2300      	movs	r3, #0
 8001360:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 8001362:	4b57      	ldr	r3, [pc, #348]	; (80014c0 <Add_HWServW2ST_Service+0x1a4>)
 8001364:	461d      	mov	r5, r3
 8001366:	1d3c      	adds	r4, r7, #4
 8001368:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800136a:	6028      	str	r0, [r5, #0]
 800136c:	6069      	str	r1, [r5, #4]
 800136e:	60aa      	str	r2, [r5, #8]
 8001370:	60eb      	str	r3, [r5, #12]
  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid.Service_UUID_128, PRIMARY_SERVICE, 
 8001372:	4b54      	ldr	r3, [pc, #336]	; (80014c4 <Add_HWServW2ST_Service+0x1a8>)
 8001374:	9300      	str	r3, [sp, #0]
 8001376:	2310      	movs	r3, #16
 8001378:	2201      	movs	r2, #1
 800137a:	4951      	ldr	r1, [pc, #324]	; (80014c0 <Add_HWServW2ST_Service+0x1a4>)
 800137c:	2002      	movs	r0, #2
 800137e:	f00c ff92 	bl	800e2a6 <aci_gatt_add_serv>
 8001382:	4603      	mov	r3, r0
 8001384:	75fb      	strb	r3, [r7, #23]
                          1+3*5, &HWServW2STHandle); 
  if (ret != BLE_STATUS_SUCCESS) 
 8001386:	7dfb      	ldrb	r3, [r7, #23]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <Add_HWServW2ST_Service+0x74>
    return BLE_STATUS_ERROR;    
 800138c:	2347      	movs	r3, #71	; 0x47
 800138e:	e093      	b.n	80014b8 <Add_HWServW2ST_Service+0x19c>
  
  /* Fill the Environmental BLE Characteristc */
  COPY_ENVIRONMENTAL_W2ST_CHAR_UUID(uuid);
 8001390:	231b      	movs	r3, #27
 8001392:	713b      	strb	r3, [r7, #4]
 8001394:	23c5      	movs	r3, #197	; 0xc5
 8001396:	717b      	strb	r3, [r7, #5]
 8001398:	23d5      	movs	r3, #213	; 0xd5
 800139a:	71bb      	strb	r3, [r7, #6]
 800139c:	23a5      	movs	r3, #165	; 0xa5
 800139e:	71fb      	strb	r3, [r7, #7]
 80013a0:	2302      	movs	r3, #2
 80013a2:	723b      	strb	r3, [r7, #8]
 80013a4:	2300      	movs	r3, #0
 80013a6:	727b      	strb	r3, [r7, #9]
 80013a8:	2336      	movs	r3, #54	; 0x36
 80013aa:	72bb      	strb	r3, [r7, #10]
 80013ac:	23ac      	movs	r3, #172	; 0xac
 80013ae:	72fb      	strb	r3, [r7, #11]
 80013b0:	23e1      	movs	r3, #225	; 0xe1
 80013b2:	733b      	strb	r3, [r7, #12]
 80013b4:	2311      	movs	r3, #17
 80013b6:	737b      	strb	r3, [r7, #13]
 80013b8:	2301      	movs	r3, #1
 80013ba:	73bb      	strb	r3, [r7, #14]
 80013bc:	2300      	movs	r3, #0
 80013be:	73fb      	strb	r3, [r7, #15]
 80013c0:	2300      	movs	r3, #0
 80013c2:	743b      	strb	r3, [r7, #16]
 80013c4:	2300      	movs	r3, #0
 80013c6:	747b      	strb	r3, [r7, #17]
 80013c8:	2300      	movs	r3, #0
 80013ca:	74bb      	strb	r3, [r7, #18]
 80013cc:	2300      	movs	r3, #0
 80013ce:	74fb      	strb	r3, [r7, #19]
  uuid[14] |= 0x04; /* One Temperature value*/
 80013d0:	7cbb      	ldrb	r3, [r7, #18]
 80013d2:	f043 0304 	orr.w	r3, r3, #4
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	74bb      	strb	r3, [r7, #18]
  uuid[14] |= 0x08; /* Humid Value*/
 80013da:	7cbb      	ldrb	r3, [r7, #18]
 80013dc:	f043 0308 	orr.w	r3, r3, #8
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	74bb      	strb	r3, [r7, #18]
  uuid[14] |= 0x10; /* Pressure value*/
 80013e4:	7cbb      	ldrb	r3, [r7, #18]
 80013e6:	f043 0310 	orr.w	r3, r3, #16
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	74bb      	strb	r3, [r7, #18]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);  
 80013ee:	4b36      	ldr	r3, [pc, #216]	; (80014c8 <Add_HWServW2ST_Service+0x1ac>)
 80013f0:	461d      	mov	r5, r3
 80013f2:	1d3c      	adds	r4, r7, #4
 80013f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013f6:	6028      	str	r0, [r5, #0]
 80013f8:	6069      	str	r1, [r5, #4]
 80013fa:	60aa      	str	r2, [r5, #8]
 80013fc:	60eb      	str	r3, [r5, #12]
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128, 
 80013fe:	4b31      	ldr	r3, [pc, #196]	; (80014c4 <Add_HWServW2ST_Service+0x1a8>)
 8001400:	8818      	ldrh	r0, [r3, #0]
 8001402:	4b32      	ldr	r3, [pc, #200]	; (80014cc <Add_HWServW2ST_Service+0x1b0>)
 8001404:	9305      	str	r3, [sp, #20]
 8001406:	2300      	movs	r3, #0
 8001408:	9304      	str	r3, [sp, #16]
 800140a:	2310      	movs	r3, #16
 800140c:	9303      	str	r3, [sp, #12]
 800140e:	2304      	movs	r3, #4
 8001410:	9302      	str	r3, [sp, #8]
 8001412:	2300      	movs	r3, #0
 8001414:	9301      	str	r3, [sp, #4]
 8001416:	2312      	movs	r3, #18
 8001418:	9300      	str	r3, [sp, #0]
 800141a:	230a      	movs	r3, #10
 800141c:	4a2a      	ldr	r2, [pc, #168]	; (80014c8 <Add_HWServW2ST_Service+0x1ac>)
 800141e:	2102      	movs	r1, #2
 8001420:	f00c ffcd 	bl	800e3be <aci_gatt_add_char>
 8001424:	4603      	mov	r3, r0
 8001426:	75fb      	strb	r3, [r7, #23]
                           2+2+4+2,
                           CHAR_PROP_NOTIFY|CHAR_PROP_READ, 
                           ATTR_PERMISSION_NONE, 
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &EnvironmentalCharHandle);
  if (ret != BLE_STATUS_SUCCESS) 
 8001428:	7dfb      	ldrb	r3, [r7, #23]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <Add_HWServW2ST_Service+0x116>
    return BLE_STATUS_ERROR;
 800142e:	2347      	movs	r3, #71	; 0x47
 8001430:	e042      	b.n	80014b8 <Add_HWServW2ST_Service+0x19c>
  
  
  /* Fill the AccGyroMag BLE Characteristc */
  COPY_ACC_GYRO_MAG_W2ST_CHAR_UUID(uuid);
 8001432:	231b      	movs	r3, #27
 8001434:	713b      	strb	r3, [r7, #4]
 8001436:	23c5      	movs	r3, #197	; 0xc5
 8001438:	717b      	strb	r3, [r7, #5]
 800143a:	23d5      	movs	r3, #213	; 0xd5
 800143c:	71bb      	strb	r3, [r7, #6]
 800143e:	23a5      	movs	r3, #165	; 0xa5
 8001440:	71fb      	strb	r3, [r7, #7]
 8001442:	2302      	movs	r3, #2
 8001444:	723b      	strb	r3, [r7, #8]
 8001446:	2300      	movs	r3, #0
 8001448:	727b      	strb	r3, [r7, #9]
 800144a:	2336      	movs	r3, #54	; 0x36
 800144c:	72bb      	strb	r3, [r7, #10]
 800144e:	23ac      	movs	r3, #172	; 0xac
 8001450:	72fb      	strb	r3, [r7, #11]
 8001452:	23e1      	movs	r3, #225	; 0xe1
 8001454:	733b      	strb	r3, [r7, #12]
 8001456:	2311      	movs	r3, #17
 8001458:	737b      	strb	r3, [r7, #13]
 800145a:	2301      	movs	r3, #1
 800145c:	73bb      	strb	r3, [r7, #14]
 800145e:	2300      	movs	r3, #0
 8001460:	73fb      	strb	r3, [r7, #15]
 8001462:	2300      	movs	r3, #0
 8001464:	743b      	strb	r3, [r7, #16]
 8001466:	2300      	movs	r3, #0
 8001468:	747b      	strb	r3, [r7, #17]
 800146a:	23e0      	movs	r3, #224	; 0xe0
 800146c:	74bb      	strb	r3, [r7, #18]
 800146e:	2300      	movs	r3, #0
 8001470:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);  
 8001472:	4b15      	ldr	r3, [pc, #84]	; (80014c8 <Add_HWServW2ST_Service+0x1ac>)
 8001474:	461d      	mov	r5, r3
 8001476:	1d3c      	adds	r4, r7, #4
 8001478:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800147a:	6028      	str	r0, [r5, #0]
 800147c:	6069      	str	r1, [r5, #4]
 800147e:	60aa      	str	r2, [r5, #8]
 8001480:	60eb      	str	r3, [r5, #12]
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128, 
 8001482:	4b10      	ldr	r3, [pc, #64]	; (80014c4 <Add_HWServW2ST_Service+0x1a8>)
 8001484:	8818      	ldrh	r0, [r3, #0]
 8001486:	4b12      	ldr	r3, [pc, #72]	; (80014d0 <Add_HWServW2ST_Service+0x1b4>)
 8001488:	9305      	str	r3, [sp, #20]
 800148a:	2300      	movs	r3, #0
 800148c:	9304      	str	r3, [sp, #16]
 800148e:	2310      	movs	r3, #16
 8001490:	9303      	str	r3, [sp, #12]
 8001492:	2304      	movs	r3, #4
 8001494:	9302      	str	r3, [sp, #8]
 8001496:	2300      	movs	r3, #0
 8001498:	9301      	str	r3, [sp, #4]
 800149a:	2310      	movs	r3, #16
 800149c:	9300      	str	r3, [sp, #0]
 800149e:	2314      	movs	r3, #20
 80014a0:	4a09      	ldr	r2, [pc, #36]	; (80014c8 <Add_HWServW2ST_Service+0x1ac>)
 80014a2:	2102      	movs	r1, #2
 80014a4:	f00c ff8b 	bl	800e3be <aci_gatt_add_char>
 80014a8:	4603      	mov	r3, r0
 80014aa:	75fb      	strb	r3, [r7, #23]
                           2+3*3*2, 
                           CHAR_PROP_NOTIFY, 
                           ATTR_PERMISSION_NONE, 
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &AccGyroMagCharHandle);
  if (ret != BLE_STATUS_SUCCESS) 
 80014ac:	7dfb      	ldrb	r3, [r7, #23]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <Add_HWServW2ST_Service+0x19a>
    return BLE_STATUS_ERROR;
 80014b2:	2347      	movs	r3, #71	; 0x47
 80014b4:	e000      	b.n	80014b8 <Add_HWServW2ST_Service+0x19c>
  
  return BLE_STATUS_SUCCESS;
 80014b6:	2300      	movs	r3, #0
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3718      	adds	r7, #24
 80014bc:	46bd      	mov	sp, r7
 80014be:	bdb0      	pop	{r4, r5, r7, pc}
 80014c0:	200027d0 	.word	0x200027d0
 80014c4:	200027ca 	.word	0x200027ca
 80014c8:	200027b8 	.word	0x200027b8
 80014cc:	200027b4 	.word	0x200027b4
 80014d0:	200027cc 	.word	0x200027cc

080014d4 <Add_SWServW2ST_Service>:
 * @brief  Add the SW Feature service using a vendor specific profile
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_SWServW2ST_Service(void)
{
 80014d4:	b5b0      	push	{r4, r5, r7, lr}
 80014d6:	b08c      	sub	sp, #48	; 0x30
 80014d8:	af06      	add	r7, sp, #24
  tBleStatus ret;
  int32_t NumberOfRecords=1;
 80014da:	2301      	movs	r3, #1
 80014dc:	617b      	str	r3, [r7, #20]
  uint8_t uuid[16];

  COPY_SW_SENS_W2ST_SERVICE_UUID(uuid);
 80014de:	231b      	movs	r3, #27
 80014e0:	703b      	strb	r3, [r7, #0]
 80014e2:	23c5      	movs	r3, #197	; 0xc5
 80014e4:	707b      	strb	r3, [r7, #1]
 80014e6:	23d5      	movs	r3, #213	; 0xd5
 80014e8:	70bb      	strb	r3, [r7, #2]
 80014ea:	23a5      	movs	r3, #165	; 0xa5
 80014ec:	70fb      	strb	r3, [r7, #3]
 80014ee:	2302      	movs	r3, #2
 80014f0:	713b      	strb	r3, [r7, #4]
 80014f2:	2300      	movs	r3, #0
 80014f4:	717b      	strb	r3, [r7, #5]
 80014f6:	23b4      	movs	r3, #180	; 0xb4
 80014f8:	71bb      	strb	r3, [r7, #6]
 80014fa:	239a      	movs	r3, #154	; 0x9a
 80014fc:	71fb      	strb	r3, [r7, #7]
 80014fe:	23e1      	movs	r3, #225	; 0xe1
 8001500:	723b      	strb	r3, [r7, #8]
 8001502:	2311      	movs	r3, #17
 8001504:	727b      	strb	r3, [r7, #9]
 8001506:	2302      	movs	r3, #2
 8001508:	72bb      	strb	r3, [r7, #10]
 800150a:	2300      	movs	r3, #0
 800150c:	72fb      	strb	r3, [r7, #11]
 800150e:	2300      	movs	r3, #0
 8001510:	733b      	strb	r3, [r7, #12]
 8001512:	2300      	movs	r3, #0
 8001514:	737b      	strb	r3, [r7, #13]
 8001516:	2300      	movs	r3, #0
 8001518:	73bb      	strb	r3, [r7, #14]
 800151a:	2300      	movs	r3, #0
 800151c:	73fb      	strb	r3, [r7, #15]
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 800151e:	4b33      	ldr	r3, [pc, #204]	; (80015ec <Add_SWServW2ST_Service+0x118>)
 8001520:	461d      	mov	r5, r3
 8001522:	463c      	mov	r4, r7
 8001524:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001526:	6028      	str	r0, [r5, #0]
 8001528:	6069      	str	r1, [r5, #4]
 800152a:	60aa      	str	r2, [r5, #8]
 800152c:	60eb      	str	r3, [r5, #12]
  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid.Service_UUID_128, PRIMARY_SERVICE, 
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	b2db      	uxtb	r3, r3
 8001532:	461a      	mov	r2, r3
 8001534:	0052      	lsls	r2, r2, #1
 8001536:	4413      	add	r3, r2
 8001538:	b2db      	uxtb	r3, r3
 800153a:	3301      	adds	r3, #1
 800153c:	b2da      	uxtb	r2, r3
 800153e:	4b2c      	ldr	r3, [pc, #176]	; (80015f0 <Add_SWServW2ST_Service+0x11c>)
 8001540:	9300      	str	r3, [sp, #0]
 8001542:	4613      	mov	r3, r2
 8001544:	2201      	movs	r2, #1
 8001546:	4929      	ldr	r1, [pc, #164]	; (80015ec <Add_SWServW2ST_Service+0x118>)
 8001548:	2002      	movs	r0, #2
 800154a:	f00c feac 	bl	800e2a6 <aci_gatt_add_serv>
 800154e:	4603      	mov	r3, r0
 8001550:	74fb      	strb	r3, [r7, #19]
                          1+3*NumberOfRecords, &SWServW2STHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 8001552:	7cfb      	ldrb	r3, [r7, #19]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d141      	bne.n	80015dc <Add_SWServW2ST_Service+0x108>
    goto fail;
  }

  COPY_QUATERNIONS_W2ST_CHAR_UUID(uuid);
 8001558:	231b      	movs	r3, #27
 800155a:	703b      	strb	r3, [r7, #0]
 800155c:	23c5      	movs	r3, #197	; 0xc5
 800155e:	707b      	strb	r3, [r7, #1]
 8001560:	23d5      	movs	r3, #213	; 0xd5
 8001562:	70bb      	strb	r3, [r7, #2]
 8001564:	23a5      	movs	r3, #165	; 0xa5
 8001566:	70fb      	strb	r3, [r7, #3]
 8001568:	2302      	movs	r3, #2
 800156a:	713b      	strb	r3, [r7, #4]
 800156c:	2300      	movs	r3, #0
 800156e:	717b      	strb	r3, [r7, #5]
 8001570:	2336      	movs	r3, #54	; 0x36
 8001572:	71bb      	strb	r3, [r7, #6]
 8001574:	23ac      	movs	r3, #172	; 0xac
 8001576:	71fb      	strb	r3, [r7, #7]
 8001578:	23e1      	movs	r3, #225	; 0xe1
 800157a:	723b      	strb	r3, [r7, #8]
 800157c:	2311      	movs	r3, #17
 800157e:	727b      	strb	r3, [r7, #9]
 8001580:	2301      	movs	r3, #1
 8001582:	72bb      	strb	r3, [r7, #10]
 8001584:	2300      	movs	r3, #0
 8001586:	72fb      	strb	r3, [r7, #11]
 8001588:	2300      	movs	r3, #0
 800158a:	733b      	strb	r3, [r7, #12]
 800158c:	2301      	movs	r3, #1
 800158e:	737b      	strb	r3, [r7, #13]
 8001590:	2300      	movs	r3, #0
 8001592:	73bb      	strb	r3, [r7, #14]
 8001594:	2300      	movs	r3, #0
 8001596:	73fb      	strb	r3, [r7, #15]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 8001598:	4b16      	ldr	r3, [pc, #88]	; (80015f4 <Add_SWServW2ST_Service+0x120>)
 800159a:	461d      	mov	r5, r3
 800159c:	463c      	mov	r4, r7
 800159e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015a0:	6028      	str	r0, [r5, #0]
 80015a2:	6069      	str	r1, [r5, #4]
 80015a4:	60aa      	str	r2, [r5, #8]
 80015a6:	60eb      	str	r3, [r5, #12]
  ret =  aci_gatt_add_char(SWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128, 
 80015a8:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <Add_SWServW2ST_Service+0x11c>)
 80015aa:	8818      	ldrh	r0, [r3, #0]
 80015ac:	4b12      	ldr	r3, [pc, #72]	; (80015f8 <Add_SWServW2ST_Service+0x124>)
 80015ae:	9305      	str	r3, [sp, #20]
 80015b0:	2300      	movs	r3, #0
 80015b2:	9304      	str	r3, [sp, #16]
 80015b4:	2310      	movs	r3, #16
 80015b6:	9303      	str	r3, [sp, #12]
 80015b8:	2304      	movs	r3, #4
 80015ba:	9302      	str	r3, [sp, #8]
 80015bc:	2300      	movs	r3, #0
 80015be:	9301      	str	r3, [sp, #4]
 80015c0:	2310      	movs	r3, #16
 80015c2:	9300      	str	r3, [sp, #0]
 80015c4:	2308      	movs	r3, #8
 80015c6:	4a0b      	ldr	r2, [pc, #44]	; (80015f4 <Add_SWServW2ST_Service+0x120>)
 80015c8:	2102      	movs	r1, #2
 80015ca:	f00c fef8 	bl	800e3be <aci_gatt_add_char>
 80015ce:	4603      	mov	r3, r0
 80015d0:	74fb      	strb	r3, [r7, #19]
                           CHAR_PROP_NOTIFY,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &QuaternionsCharHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 80015d2:	7cfb      	ldrb	r3, [r7, #19]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d103      	bne.n	80015e0 <Add_SWServW2ST_Service+0x10c>
    goto fail;
  }

  return BLE_STATUS_SUCCESS;
 80015d8:	2300      	movs	r3, #0
 80015da:	e003      	b.n	80015e4 <Add_SWServW2ST_Service+0x110>
    goto fail;
 80015dc:	bf00      	nop
 80015de:	e000      	b.n	80015e2 <Add_SWServW2ST_Service+0x10e>
    goto fail;
 80015e0:	bf00      	nop

fail:  
  return BLE_STATUS_ERROR;
 80015e2:	2347      	movs	r3, #71	; 0x47
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3718      	adds	r7, #24
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bdb0      	pop	{r4, r5, r7, pc}
 80015ec:	200027d0 	.word	0x200027d0
 80015f0:	200027c8 	.word	0x200027c8
 80015f4:	200027b8 	.word	0x200027b8
 80015f8:	200027b6 	.word	0x200027b6

080015fc <Acc_Update>:
 * @brief  Update acceleration characteristic value
 * @param  AxesRaw_t structure containing acceleration value in mg.
 * @retval tBleStatus Status
 */
tBleStatus Acc_Update(AxesRaw_t *x_axes, AxesRaw_t *g_axes, AxesRaw_t *m_axes)
{  
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b08c      	sub	sp, #48	; 0x30
 8001600:	af02      	add	r7, sp, #8
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	607a      	str	r2, [r7, #4]
  uint8_t buff[2+2*3*3];
  tBleStatus ret;
  
  HOST_TO_LE_16(buff,(HAL_GetTick()>>3));
 8001608:	f006 ff1a 	bl	8008440 <HAL_GetTick>
 800160c:	4603      	mov	r3, r0
 800160e:	08db      	lsrs	r3, r3, #3
 8001610:	b2db      	uxtb	r3, r3
 8001612:	743b      	strb	r3, [r7, #16]
 8001614:	f006 ff14 	bl	8008440 <HAL_GetTick>
 8001618:	4603      	mov	r3, r0
 800161a:	0adb      	lsrs	r3, r3, #11
 800161c:	b2db      	uxtb	r3, r3
 800161e:	747b      	strb	r3, [r7, #17]
  
  HOST_TO_LE_16(buff+2,-x_axes->AXIS_Y);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	b2db      	uxtb	r3, r3
 8001626:	425b      	negs	r3, r3
 8001628:	b2db      	uxtb	r3, r3
 800162a:	74bb      	strb	r3, [r7, #18]
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	425b      	negs	r3, r3
 8001632:	121b      	asrs	r3, r3, #8
 8001634:	b2db      	uxtb	r3, r3
 8001636:	74fb      	strb	r3, [r7, #19]
  HOST_TO_LE_16(buff+4, x_axes->AXIS_X);
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	b2db      	uxtb	r3, r3
 800163e:	753b      	strb	r3, [r7, #20]
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	121b      	asrs	r3, r3, #8
 8001646:	b2db      	uxtb	r3, r3
 8001648:	757b      	strb	r3, [r7, #21]
  HOST_TO_LE_16(buff+6,-x_axes->AXIS_Z);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	b2db      	uxtb	r3, r3
 8001650:	425b      	negs	r3, r3
 8001652:	b2db      	uxtb	r3, r3
 8001654:	75bb      	strb	r3, [r7, #22]
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	425b      	negs	r3, r3
 800165c:	121b      	asrs	r3, r3, #8
 800165e:	b2db      	uxtb	r3, r3
 8001660:	75fb      	strb	r3, [r7, #23]
    
  HOST_TO_LE_16(buff+8,g_axes->AXIS_Y);
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	b2db      	uxtb	r3, r3
 8001668:	763b      	strb	r3, [r7, #24]
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	121b      	asrs	r3, r3, #8
 8001670:	b2db      	uxtb	r3, r3
 8001672:	767b      	strb	r3, [r7, #25]
  HOST_TO_LE_16(buff+10,g_axes->AXIS_X);
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	b2db      	uxtb	r3, r3
 800167a:	76bb      	strb	r3, [r7, #26]
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	121b      	asrs	r3, r3, #8
 8001682:	b2db      	uxtb	r3, r3
 8001684:	76fb      	strb	r3, [r7, #27]
  HOST_TO_LE_16(buff+12,g_axes->AXIS_Z);
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	b2db      	uxtb	r3, r3
 800168c:	773b      	strb	r3, [r7, #28]
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	121b      	asrs	r3, r3, #8
 8001694:	b2db      	uxtb	r3, r3
 8001696:	777b      	strb	r3, [r7, #29]
  
  HOST_TO_LE_16(buff+14,m_axes->AXIS_Y);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	b2db      	uxtb	r3, r3
 800169e:	77bb      	strb	r3, [r7, #30]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	121b      	asrs	r3, r3, #8
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	77fb      	strb	r3, [r7, #31]
  HOST_TO_LE_16(buff+16,m_axes->AXIS_X);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	f887 3020 	strb.w	r3, [r7, #32]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	121b      	asrs	r3, r3, #8
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  HOST_TO_LE_16(buff+18,m_axes->AXIS_Z);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	121b      	asrs	r3, r3, #8
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    
  ret = aci_gatt_update_char_value(HWServW2STHandle, AccGyroMagCharHandle,
 80016d6:	4b0f      	ldr	r3, [pc, #60]	; (8001714 <Acc_Update+0x118>)
 80016d8:	8818      	ldrh	r0, [r3, #0]
 80016da:	4b0f      	ldr	r3, [pc, #60]	; (8001718 <Acc_Update+0x11c>)
 80016dc:	8819      	ldrh	r1, [r3, #0]
 80016de:	f107 0310 	add.w	r3, r7, #16
 80016e2:	9300      	str	r3, [sp, #0]
 80016e4:	2314      	movs	r3, #20
 80016e6:	2200      	movs	r2, #0
 80016e8:	f00c ff3b 	bl	800e562 <aci_gatt_update_char_value>
 80016ec:	4603      	mov	r3, r0
 80016ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				   0, 2+2*3*3, buff);
  if (ret != BLE_STATUS_SUCCESS){
 80016f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d007      	beq.n	800170a <Acc_Update+0x10e>
    PRINTF("Error while updating Acceleration characteristic: 0x%02X\n",ret) ;
 80016fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80016fe:	4619      	mov	r1, r3
 8001700:	4806      	ldr	r0, [pc, #24]	; (800171c <Acc_Update+0x120>)
 8001702:	f018 fc95 	bl	801a030 <iprintf>
    return BLE_STATUS_ERROR ;
 8001706:	2347      	movs	r3, #71	; 0x47
 8001708:	e000      	b.n	800170c <Acc_Update+0x110>
  }

  return BLE_STATUS_SUCCESS;  
 800170a:	2300      	movs	r3, #0
}
 800170c:	4618      	mov	r0, r3
 800170e:	3728      	adds	r7, #40	; 0x28
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	200027ca 	.word	0x200027ca
 8001718:	200027cc 	.word	0x200027cc
 800171c:	0801cdb0 	.word	0x0801cdb0

08001720 <Quat_Update>:
 * @brief  Update quaternions characteristic value
 * @param  SensorAxes_t *data Structure containing the quaterions
 * @retval tBleStatus      Status
 */
tBleStatus Quat_Update(AxesRaw_t *data)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b088      	sub	sp, #32
 8001724:	af02      	add	r7, sp, #8
 8001726:	6078      	str	r0, [r7, #4]
  tBleStatus ret;
  uint8_t buff[2+6*SEND_N_QUATERNIONS];

  HOST_TO_LE_16(buff,(HAL_GetTick()>>3));
 8001728:	f006 fe8a 	bl	8008440 <HAL_GetTick>
 800172c:	4603      	mov	r3, r0
 800172e:	08db      	lsrs	r3, r3, #3
 8001730:	b2db      	uxtb	r3, r3
 8001732:	733b      	strb	r3, [r7, #12]
 8001734:	f006 fe84 	bl	8008440 <HAL_GetTick>
 8001738:	4603      	mov	r3, r0
 800173a:	0adb      	lsrs	r3, r3, #11
 800173c:	b2db      	uxtb	r3, r3
 800173e:	737b      	strb	r3, [r7, #13]

#if SEND_N_QUATERNIONS == 1
  HOST_TO_LE_16(buff+2,data[0].AXIS_X);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	b2db      	uxtb	r3, r3
 8001746:	73bb      	strb	r3, [r7, #14]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	121b      	asrs	r3, r3, #8
 800174e:	b2db      	uxtb	r3, r3
 8001750:	73fb      	strb	r3, [r7, #15]
  HOST_TO_LE_16(buff+4,data[0].AXIS_Y);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	b2db      	uxtb	r3, r3
 8001758:	743b      	strb	r3, [r7, #16]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	121b      	asrs	r3, r3, #8
 8001760:	b2db      	uxtb	r3, r3
 8001762:	747b      	strb	r3, [r7, #17]
  HOST_TO_LE_16(buff+6,data[0].AXIS_Z);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	b2db      	uxtb	r3, r3
 800176a:	74bb      	strb	r3, [r7, #18]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	121b      	asrs	r3, r3, #8
 8001772:	b2db      	uxtb	r3, r3
 8001774:	74fb      	strb	r3, [r7, #19]
  HOST_TO_LE_16(buff+18,data[2].AXIS_Z);
#else
#error SEND_N_QUATERNIONS could be only 1,2,3
#endif
  
  ret = aci_gatt_update_char_value(SWServW2STHandle, QuaternionsCharHandle,
 8001776:	4b0e      	ldr	r3, [pc, #56]	; (80017b0 <Quat_Update+0x90>)
 8001778:	8818      	ldrh	r0, [r3, #0]
 800177a:	4b0e      	ldr	r3, [pc, #56]	; (80017b4 <Quat_Update+0x94>)
 800177c:	8819      	ldrh	r1, [r3, #0]
 800177e:	f107 030c 	add.w	r3, r7, #12
 8001782:	9300      	str	r3, [sp, #0]
 8001784:	2308      	movs	r3, #8
 8001786:	2200      	movs	r2, #0
 8001788:	f00c feeb 	bl	800e562 <aci_gatt_update_char_value>
 800178c:	4603      	mov	r3, r0
 800178e:	75fb      	strb	r3, [r7, #23]
				   0, 2+6*SEND_N_QUATERNIONS, buff);
  if (ret != BLE_STATUS_SUCCESS){
 8001790:	7dfb      	ldrb	r3, [r7, #23]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d006      	beq.n	80017a4 <Quat_Update+0x84>
    PRINTF("Error while updating Sensor Fusion characteristic: 0x%02X\n",ret) ;
 8001796:	7dfb      	ldrb	r3, [r7, #23]
 8001798:	4619      	mov	r1, r3
 800179a:	4807      	ldr	r0, [pc, #28]	; (80017b8 <Quat_Update+0x98>)
 800179c:	f018 fc48 	bl	801a030 <iprintf>
    return BLE_STATUS_ERROR ;
 80017a0:	2347      	movs	r3, #71	; 0x47
 80017a2:	e000      	b.n	80017a6 <Quat_Update+0x86>
  }
  
  return BLE_STATUS_SUCCESS;
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3718      	adds	r7, #24
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	200027c8 	.word	0x200027c8
 80017b4:	200027b6 	.word	0x200027b6
 80017b8:	0801cdec 	.word	0x0801cdec

080017bc <Read_Request_CB>:
* Description    : Update the sensor valuse.
* Input          : Handle of the characteristic to update.
* Return         : None.
*******************************************************************************/
void Read_Request_CB(uint16_t handle)
{
 80017bc:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 80017c0:	b086      	sub	sp, #24
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	4603      	mov	r3, r0
 80017c6:	80fb      	strh	r3, [r7, #6]
  tBleStatus ret;
  
  if(handle == AccGyroMagCharHandle + 1)
 80017c8:	88fa      	ldrh	r2, [r7, #6]
 80017ca:	4b5c      	ldr	r3, [pc, #368]	; (800193c <Read_Request_CB+0x180>)
 80017cc:	881b      	ldrh	r3, [r3, #0]
 80017ce:	3301      	adds	r3, #1
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d105      	bne.n	80017e0 <Read_Request_CB+0x24>
  {    
    Acc_Update(&x_axes, &g_axes, &m_axes);
 80017d4:	4a5a      	ldr	r2, [pc, #360]	; (8001940 <Read_Request_CB+0x184>)
 80017d6:	495b      	ldr	r1, [pc, #364]	; (8001944 <Read_Request_CB+0x188>)
 80017d8:	485b      	ldr	r0, [pc, #364]	; (8001948 <Read_Request_CB+0x18c>)
 80017da:	f7ff ff0f 	bl	80015fc <Acc_Update>
 80017de:	e094      	b.n	800190a <Read_Request_CB+0x14e>
  }
  else if (handle == EnvironmentalCharHandle + 1)
 80017e0:	88fa      	ldrh	r2, [r7, #6]
 80017e2:	4b5a      	ldr	r3, [pc, #360]	; (800194c <Read_Request_CB+0x190>)
 80017e4:	881b      	ldrh	r3, [r3, #0]
 80017e6:	3301      	adds	r3, #1
 80017e8:	429a      	cmp	r2, r3
 80017ea:	f040 808e 	bne.w	800190a <Read_Request_CB+0x14e>
  {
    float data_t, data_p, data_h;
    data_t = 27.0 + ((uint64_t)rand()*5)/RAND_MAX; //T sensor emulation
 80017ee:	f018 fc9b 	bl	801a128 <rand>
 80017f2:	4603      	mov	r3, r0
 80017f4:	461d      	mov	r5, r3
 80017f6:	ea4f 76e5 	mov.w	r6, r5, asr #31
 80017fa:	4629      	mov	r1, r5
 80017fc:	4632      	mov	r2, r6
 80017fe:	f04f 0300 	mov.w	r3, #0
 8001802:	f04f 0400 	mov.w	r4, #0
 8001806:	0094      	lsls	r4, r2, #2
 8001808:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800180c:	008b      	lsls	r3, r1, #2
 800180e:	4619      	mov	r1, r3
 8001810:	4622      	mov	r2, r4
 8001812:	194b      	adds	r3, r1, r5
 8001814:	eb42 0406 	adc.w	r4, r2, r6
 8001818:	4618      	mov	r0, r3
 800181a:	4621      	mov	r1, r4
 800181c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001820:	f04f 0300 	mov.w	r3, #0
 8001824:	f7ff fa18 	bl	8000c58 <__aeabi_uldivmod>
 8001828:	4603      	mov	r3, r0
 800182a:	460c      	mov	r4, r1
 800182c:	4618      	mov	r0, r3
 800182e:	4621      	mov	r1, r4
 8001830:	f7fe feb4 	bl	800059c <__aeabi_ul2d>
 8001834:	f04f 0200 	mov.w	r2, #0
 8001838:	4b45      	ldr	r3, [pc, #276]	; (8001950 <Read_Request_CB+0x194>)
 800183a:	f7fe fd2f 	bl	800029c <__adddf3>
 800183e:	4603      	mov	r3, r0
 8001840:	460c      	mov	r4, r1
 8001842:	4618      	mov	r0, r3
 8001844:	4621      	mov	r1, r4
 8001846:	f7ff f9b7 	bl	8000bb8 <__aeabi_d2f>
 800184a:	4603      	mov	r3, r0
 800184c:	617b      	str	r3, [r7, #20]
    data_p = 1000.0 + ((uint64_t)rand()*100)/RAND_MAX; //P sensor emulation
 800184e:	f018 fc6b 	bl	801a128 <rand>
 8001852:	4603      	mov	r3, r0
 8001854:	461d      	mov	r5, r3
 8001856:	ea4f 76e5 	mov.w	r6, r5, asr #31
 800185a:	46ab      	mov	fp, r5
 800185c:	46b4      	mov	ip, r6
 800185e:	eb1b 030b 	adds.w	r3, fp, fp
 8001862:	eb4c 040c 	adc.w	r4, ip, ip
 8001866:	469b      	mov	fp, r3
 8001868:	46a4      	mov	ip, r4
 800186a:	eb1b 0b05 	adds.w	fp, fp, r5
 800186e:	eb4c 0c06 	adc.w	ip, ip, r6
 8001872:	f04f 0100 	mov.w	r1, #0
 8001876:	f04f 0200 	mov.w	r2, #0
 800187a:	ea4f 124c 	mov.w	r2, ip, lsl #5
 800187e:	ea42 62db 	orr.w	r2, r2, fp, lsr #27
 8001882:	ea4f 114b 	mov.w	r1, fp, lsl #5
 8001886:	eb1b 0b01 	adds.w	fp, fp, r1
 800188a:	eb4c 0c02 	adc.w	ip, ip, r2
 800188e:	eb1b 0005 	adds.w	r0, fp, r5
 8001892:	eb4c 0106 	adc.w	r1, ip, r6
 8001896:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800189a:	f04f 0300 	mov.w	r3, #0
 800189e:	f7ff f9db 	bl	8000c58 <__aeabi_uldivmod>
 80018a2:	4603      	mov	r3, r0
 80018a4:	460c      	mov	r4, r1
 80018a6:	4618      	mov	r0, r3
 80018a8:	4621      	mov	r1, r4
 80018aa:	f7fe fe77 	bl	800059c <__aeabi_ul2d>
 80018ae:	f04f 0200 	mov.w	r2, #0
 80018b2:	4b28      	ldr	r3, [pc, #160]	; (8001954 <Read_Request_CB+0x198>)
 80018b4:	f7fe fcf2 	bl	800029c <__adddf3>
 80018b8:	4603      	mov	r3, r0
 80018ba:	460c      	mov	r4, r1
 80018bc:	4618      	mov	r0, r3
 80018be:	4621      	mov	r1, r4
 80018c0:	f7ff f97a 	bl	8000bb8 <__aeabi_d2f>
 80018c4:	4603      	mov	r3, r0
 80018c6:	613b      	str	r3, [r7, #16]
    data_h = 10.0;
 80018c8:	4b23      	ldr	r3, [pc, #140]	; (8001958 <Read_Request_CB+0x19c>)
 80018ca:	60fb      	str	r3, [r7, #12]
    BlueMS_Environmental_Update((int32_t)(data_p *100), (int16_t)(data_t * 10), (int16_t)(data_h));
 80018cc:	edd7 7a04 	vldr	s15, [r7, #16]
 80018d0:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800195c <Read_Request_CB+0x1a0>
 80018d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018d8:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 80018dc:	edd7 7a05 	vldr	s15, [r7, #20]
 80018e0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80018e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018ec:	ee17 3a90 	vmov	r3, s15
 80018f0:	b21b      	sxth	r3, r3
 80018f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80018f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018fa:	ee17 2a90 	vmov	r2, s15
 80018fe:	b212      	sxth	r2, r2
 8001900:	4619      	mov	r1, r3
 8001902:	ee16 0a90 	vmov	r0, s13
 8001906:	f000 f82f 	bl	8001968 <BlueMS_Environmental_Update>
  }

  if(connection_handle !=0)
 800190a:	4b15      	ldr	r3, [pc, #84]	; (8001960 <Read_Request_CB+0x1a4>)
 800190c:	881b      	ldrh	r3, [r3, #0]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d00e      	beq.n	8001930 <Read_Request_CB+0x174>
  { 
    ret = aci_gatt_allow_read(connection_handle);
 8001912:	4b13      	ldr	r3, [pc, #76]	; (8001960 <Read_Request_CB+0x1a4>)
 8001914:	881b      	ldrh	r3, [r3, #0]
 8001916:	4618      	mov	r0, r3
 8001918:	f00c feb6 	bl	800e688 <aci_gatt_allow_read>
 800191c:	4603      	mov	r3, r0
 800191e:	72fb      	strb	r3, [r7, #11]
    if (ret != BLE_STATUS_SUCCESS)
 8001920:	7afb      	ldrb	r3, [r7, #11]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d004      	beq.n	8001930 <Read_Request_CB+0x174>
    {
      PRINTF("aci_gatt_allow_read() failed: 0x%02x\r\n", ret); 
 8001926:	7afb      	ldrb	r3, [r7, #11]
 8001928:	4619      	mov	r1, r3
 800192a:	480e      	ldr	r0, [pc, #56]	; (8001964 <Read_Request_CB+0x1a8>)
 800192c:	f018 fb80 	bl	801a030 <iprintf>
    }
  }
}
 8001930:	bf00      	nop
 8001932:	3718      	adds	r7, #24
 8001934:	46bd      	mov	sp, r7
 8001936:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800193a:	bf00      	nop
 800193c:	200027cc 	.word	0x200027cc
 8001940:	200021e0 	.word	0x200021e0
 8001944:	200021d4 	.word	0x200021d4
 8001948:	200021c8 	.word	0x200021c8
 800194c:	200027b4 	.word	0x200027b4
 8001950:	403b0000 	.word	0x403b0000
 8001954:	408f4000 	.word	0x408f4000
 8001958:	41200000 	.word	0x41200000
 800195c:	42c80000 	.word	0x42c80000
 8001960:	200021c0 	.word	0x200021c0
 8001964:	0801ce28 	.word	0x0801ce28

08001968 <BlueMS_Environmental_Update>:

tBleStatus BlueMS_Environmental_Update(int32_t press, int16_t temp, int16_t hum)
{  
 8001968:	b580      	push	{r7, lr}
 800196a:	b088      	sub	sp, #32
 800196c:	af02      	add	r7, sp, #8
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	460b      	mov	r3, r1
 8001972:	807b      	strh	r3, [r7, #2]
 8001974:	4613      	mov	r3, r2
 8001976:	803b      	strh	r3, [r7, #0]
  tBleStatus ret;
  uint8_t buff[10];
  HOST_TO_LE_16(buff, HAL_GetTick()>>3);
 8001978:	f006 fd62 	bl	8008440 <HAL_GetTick>
 800197c:	4603      	mov	r3, r0
 800197e:	08db      	lsrs	r3, r3, #3
 8001980:	b2db      	uxtb	r3, r3
 8001982:	733b      	strb	r3, [r7, #12]
 8001984:	f006 fd5c 	bl	8008440 <HAL_GetTick>
 8001988:	4603      	mov	r3, r0
 800198a:	0adb      	lsrs	r3, r3, #11
 800198c:	b2db      	uxtb	r3, r3
 800198e:	737b      	strb	r3, [r7, #13]
  
  HOST_TO_LE_32(buff+2,press);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	b2db      	uxtb	r3, r3
 8001994:	73bb      	strb	r3, [r7, #14]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	121b      	asrs	r3, r3, #8
 800199a:	b2db      	uxtb	r3, r3
 800199c:	73fb      	strb	r3, [r7, #15]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	141b      	asrs	r3, r3, #16
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	743b      	strb	r3, [r7, #16]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	161b      	asrs	r3, r3, #24
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	747b      	strb	r3, [r7, #17]
  HOST_TO_LE_16(buff+6,hum);
 80019ae:	883b      	ldrh	r3, [r7, #0]
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	74bb      	strb	r3, [r7, #18]
 80019b4:	f9b7 3000 	ldrsh.w	r3, [r7]
 80019b8:	121b      	asrs	r3, r3, #8
 80019ba:	b21b      	sxth	r3, r3
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	74fb      	strb	r3, [r7, #19]
  HOST_TO_LE_16(buff+8,temp);
 80019c0:	887b      	ldrh	r3, [r7, #2]
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	753b      	strb	r3, [r7, #20]
 80019c6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80019ca:	121b      	asrs	r3, r3, #8
 80019cc:	b21b      	sxth	r3, r3
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	757b      	strb	r3, [r7, #21]
  
  ret = aci_gatt_update_char_value(HWServW2STHandle, EnvironmentalCharHandle, 
 80019d2:	4b0e      	ldr	r3, [pc, #56]	; (8001a0c <BlueMS_Environmental_Update+0xa4>)
 80019d4:	8818      	ldrh	r0, [r3, #0]
 80019d6:	4b0e      	ldr	r3, [pc, #56]	; (8001a10 <BlueMS_Environmental_Update+0xa8>)
 80019d8:	8819      	ldrh	r1, [r3, #0]
 80019da:	f107 030c 	add.w	r3, r7, #12
 80019de:	9300      	str	r3, [sp, #0]
 80019e0:	230a      	movs	r3, #10
 80019e2:	2200      	movs	r2, #0
 80019e4:	f00c fdbd 	bl	800e562 <aci_gatt_update_char_value>
 80019e8:	4603      	mov	r3, r0
 80019ea:	75fb      	strb	r3, [r7, #23]
                                   0, 10, buff);
  
  if (ret != BLE_STATUS_SUCCESS){
 80019ec:	7dfb      	ldrb	r3, [r7, #23]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d006      	beq.n	8001a00 <BlueMS_Environmental_Update+0x98>
    PRINTF("Error while updating TEMP characteristic: 0x%04X\n",ret) ;
 80019f2:	7dfb      	ldrb	r3, [r7, #23]
 80019f4:	4619      	mov	r1, r3
 80019f6:	4807      	ldr	r0, [pc, #28]	; (8001a14 <BlueMS_Environmental_Update+0xac>)
 80019f8:	f018 fb1a 	bl	801a030 <iprintf>
    return BLE_STATUS_ERROR ;
 80019fc:	2347      	movs	r3, #71	; 0x47
 80019fe:	e000      	b.n	8001a02 <BlueMS_Environmental_Update+0x9a>
  }
  
  return BLE_STATUS_SUCCESS;	
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3718      	adds	r7, #24
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	200027ca 	.word	0x200027ca
 8001a10:	200027b4 	.word	0x200027b4
 8001a14:	0801ce50 	.word	0x0801ce50

08001a18 <Set_DeviceConnectable>:
 * Input          : None.
 * Output         : None.
 * Return         : None.
 *******************************************************************************/
void Set_DeviceConnectable(void)
{  
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b092      	sub	sp, #72	; 0x48
 8001a1c:	af08      	add	r7, sp, #32
  uint8_t ret;
  const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,SENSOR_DEMO_NAME}; 
 8001a1e:	4a43      	ldr	r2, [pc, #268]	; (8001b2c <Set_DeviceConnectable+0x114>)
 8001a20:	f107 031c 	add.w	r3, r7, #28
 8001a24:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a26:	c303      	stmia	r3!, {r0, r1}
 8001a28:	801a      	strh	r2, [r3, #0]
    
  uint8_t manuf_data[28] = {
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	703b      	strb	r3, [r7, #0]
 8001a2e:	230a      	movs	r3, #10
 8001a30:	707b      	strb	r3, [r7, #1]
 8001a32:	2300      	movs	r3, #0
 8001a34:	70bb      	strb	r3, [r7, #2]
 8001a36:	230a      	movs	r3, #10
 8001a38:	70fb      	strb	r3, [r7, #3]
 8001a3a:	2309      	movs	r3, #9
 8001a3c:	713b      	strb	r3, [r7, #4]
 8001a3e:	2349      	movs	r3, #73	; 0x49
 8001a40:	717b      	strb	r3, [r7, #5]
 8001a42:	234d      	movs	r3, #77	; 0x4d
 8001a44:	71bb      	strb	r3, [r7, #6]
 8001a46:	2353      	movs	r3, #83	; 0x53
 8001a48:	71fb      	strb	r3, [r7, #7]
 8001a4a:	2349      	movs	r3, #73	; 0x49
 8001a4c:	723b      	strb	r3, [r7, #8]
 8001a4e:	235f      	movs	r3, #95	; 0x5f
 8001a50:	727b      	strb	r3, [r7, #9]
 8001a52:	2332      	movs	r3, #50	; 0x32
 8001a54:	72bb      	strb	r3, [r7, #10]
 8001a56:	2330      	movs	r3, #48	; 0x30
 8001a58:	72fb      	strb	r3, [r7, #11]
 8001a5a:	2332      	movs	r3, #50	; 0x32
 8001a5c:	733b      	strb	r3, [r7, #12]
 8001a5e:	2330      	movs	r3, #48	; 0x30
 8001a60:	737b      	strb	r3, [r7, #13]
 8001a62:	230d      	movs	r3, #13
 8001a64:	73bb      	strb	r3, [r7, #14]
 8001a66:	23ff      	movs	r3, #255	; 0xff
 8001a68:	73fb      	strb	r3, [r7, #15]
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	743b      	strb	r3, [r7, #16]
 8001a6e:	2302      	movs	r3, #2
 8001a70:	747b      	strb	r3, [r7, #17]
 8001a72:	2300      	movs	r3, #0
 8001a74:	74bb      	strb	r3, [r7, #18]
 8001a76:	23f4      	movs	r3, #244	; 0xf4
 8001a78:	74fb      	strb	r3, [r7, #19]
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	753b      	strb	r3, [r7, #20]
 8001a7e:	2300      	movs	r3, #0
 8001a80:	757b      	strb	r3, [r7, #21]
    0x02,
    0x00,
    0xF4, /* ACC+Gyro+Mag 0xE0 | 0x04 Temp | 0x10 Pressure */
    0x00, /*  */
    0x00, /*  */
    bdaddr[5], /* BLE MAC start -MSB first- */
 8001a82:	4b2b      	ldr	r3, [pc, #172]	; (8001b30 <Set_DeviceConnectable+0x118>)
 8001a84:	795b      	ldrb	r3, [r3, #5]
  uint8_t manuf_data[28] = {
 8001a86:	75bb      	strb	r3, [r7, #22]
    bdaddr[4],
 8001a88:	4b29      	ldr	r3, [pc, #164]	; (8001b30 <Set_DeviceConnectable+0x118>)
 8001a8a:	791b      	ldrb	r3, [r3, #4]
  uint8_t manuf_data[28] = {
 8001a8c:	75fb      	strb	r3, [r7, #23]
    bdaddr[3],
 8001a8e:	4b28      	ldr	r3, [pc, #160]	; (8001b30 <Set_DeviceConnectable+0x118>)
 8001a90:	78db      	ldrb	r3, [r3, #3]
  uint8_t manuf_data[28] = {
 8001a92:	763b      	strb	r3, [r7, #24]
    bdaddr[2],
 8001a94:	4b26      	ldr	r3, [pc, #152]	; (8001b30 <Set_DeviceConnectable+0x118>)
 8001a96:	789b      	ldrb	r3, [r3, #2]
  uint8_t manuf_data[28] = {
 8001a98:	767b      	strb	r3, [r7, #25]
    bdaddr[1],
 8001a9a:	4b25      	ldr	r3, [pc, #148]	; (8001b30 <Set_DeviceConnectable+0x118>)
 8001a9c:	785b      	ldrb	r3, [r3, #1]
  uint8_t manuf_data[28] = {
 8001a9e:	76bb      	strb	r3, [r7, #26]
    bdaddr[0]  /* BLE MAC stop */
 8001aa0:	4b23      	ldr	r3, [pc, #140]	; (8001b30 <Set_DeviceConnectable+0x118>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
  uint8_t manuf_data[28] = {
 8001aa4:	76fb      	strb	r3, [r7, #27]
  };
  
  manuf_data[20] |= 0x01; /* Sensor Fusion */
 8001aa6:	7d3b      	ldrb	r3, [r7, #20]
 8001aa8:	f043 0301 	orr.w	r3, r3, #1
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	753b      	strb	r3, [r7, #20]
  manuf_data[19] |= 0x08; /* Humidity Sensor*/
 8001ab0:	7cfb      	ldrb	r3, [r7, #19]
 8001ab2:	f043 0308 	orr.w	r3, r3, #8
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	74fb      	strb	r3, [r7, #19]
  
  hci_le_set_scan_resp_data(0, NULL);
 8001aba:	2100      	movs	r1, #0
 8001abc:	2000      	movs	r0, #0
 8001abe:	f00c ff44 	bl	800e94a <hci_le_set_scan_resp_data>
  
  PRINTF("Set General Discoverable Mode.\n");
 8001ac2:	481c      	ldr	r0, [pc, #112]	; (8001b34 <Set_DeviceConnectable+0x11c>)
 8001ac4:	f018 fb28 	bl	801a118 <puts>
  
  ret = aci_gap_set_discoverable(ADV_DATA_TYPE,
 8001ac8:	2300      	movs	r3, #0
 8001aca:	9306      	str	r3, [sp, #24]
 8001acc:	2300      	movs	r3, #0
 8001ace:	9305      	str	r3, [sp, #20]
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	9304      	str	r3, [sp, #16]
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	9303      	str	r3, [sp, #12]
 8001ad8:	f107 031c 	add.w	r3, r7, #28
 8001adc:	9302      	str	r3, [sp, #8]
 8001ade:	230a      	movs	r3, #10
 8001ae0:	9301      	str	r3, [sp, #4]
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	9300      	str	r3, [sp, #0]
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 8001aec:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8001af0:	2000      	movs	r0, #0
 8001af2:	f00c fa20 	bl	800df36 <aci_gap_set_discoverable>
 8001af6:	4603      	mov	r3, r0
 8001af8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                (ADV_INTERVAL_MIN_MS*1000)/625,(ADV_INTERVAL_MAX_MS*1000)/625,
                                 STATIC_RANDOM_ADDR, NO_WHITE_LIST_USE,
                                 sizeof(local_name), local_name, 0, NULL, 0, 0); 
  
  aci_gap_update_adv_data(28, manuf_data);
 8001afc:	463b      	mov	r3, r7
 8001afe:	4619      	mov	r1, r3
 8001b00:	201c      	movs	r0, #28
 8001b02:	f00c fb5b 	bl	800e1bc <aci_gap_update_adv_data>
  
  if(ret != BLE_STATUS_SUCCESS)
 8001b06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d006      	beq.n	8001b1c <Set_DeviceConnectable+0x104>
  {
    PRINTF("aci_gap_set_discoverable() failed: 0x%02x\r\n", ret);
 8001b0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b12:	4619      	mov	r1, r3
 8001b14:	4808      	ldr	r0, [pc, #32]	; (8001b38 <Set_DeviceConnectable+0x120>)
 8001b16:	f018 fa8b 	bl	801a030 <iprintf>
  }
  else
    PRINTF("aci_gap_set_discoverable() --> SUCCESS\r\n");
}
 8001b1a:	e002      	b.n	8001b22 <Set_DeviceConnectable+0x10a>
    PRINTF("aci_gap_set_discoverable() --> SUCCESS\r\n");
 8001b1c:	4807      	ldr	r0, [pc, #28]	; (8001b3c <Set_DeviceConnectable+0x124>)
 8001b1e:	f018 fafb 	bl	801a118 <puts>
}
 8001b22:	bf00      	nop
 8001b24:	3728      	adds	r7, #40	; 0x28
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	0801cef8 	.word	0x0801cef8
 8001b30:	200027ac 	.word	0x200027ac
 8001b34:	0801ce84 	.word	0x0801ce84
 8001b38:	0801cea4 	.word	0x0801cea4
 8001b3c:	0801ced0 	.word	0x0801ced0

08001b40 <user_notify>:
 *         parsed.
 * @param  void* Pointer to the ACI packet
 * @retval None
 */
void user_notify(void * pData)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b088      	sub	sp, #32
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  hci_uart_pckt *hci_pckt = pData;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	61fb      	str	r3, [r7, #28]
  /* obtain event packet */
  hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	3301      	adds	r3, #1
 8001b50:	61bb      	str	r3, [r7, #24]
  
  if(hci_pckt->type != HCI_EVENT_PKT)
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	2b04      	cmp	r3, #4
 8001b58:	d139      	bne.n	8001bce <user_notify+0x8e>
    return;
  
  switch(event_pckt->evt){
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	2b3e      	cmp	r3, #62	; 0x3e
 8001b60:	d006      	beq.n	8001b70 <user_notify+0x30>
 8001b62:	2bff      	cmp	r3, #255	; 0xff
 8001b64:	d01b      	beq.n	8001b9e <user_notify+0x5e>
 8001b66:	2b05      	cmp	r3, #5
 8001b68:	d132      	bne.n	8001bd0 <user_notify+0x90>
    
  case EVT_DISCONN_COMPLETE:
    {
      GAP_DisconnectionComplete_CB();
 8001b6a:	f000 f835 	bl	8001bd8 <GAP_DisconnectionComplete_CB>
    }
    break;
 8001b6e:	e02f      	b.n	8001bd0 <user_notify+0x90>
    
  case EVT_LE_META_EVENT:
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	3302      	adds	r3, #2
 8001b74:	60fb      	str	r3, [r7, #12]
      
      switch(evt->subevent){
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d000      	beq.n	8001b80 <user_notify+0x40>
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
        }
        break;
      }
    }
    break;
 8001b7e:	e027      	b.n	8001bd0 <user_notify+0x90>
          evt_le_connection_complete *cc = (void *)evt->data;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	3301      	adds	r3, #1
 8001b84:	60bb      	str	r3, [r7, #8]
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	1d5a      	adds	r2, r3, #5
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	4619      	mov	r1, r3
 8001b94:	4610      	mov	r0, r2
 8001b96:	f000 f837 	bl	8001c08 <GAP_ConnectionComplete_CB>
        break;
 8001b9a:	bf00      	nop
    break;
 8001b9c:	e018      	b.n	8001bd0 <user_notify+0x90>
    
  case EVT_VENDOR:
    {
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	3302      	adds	r3, #2
 8001ba2:	617b      	str	r3, [r7, #20]
      switch(blue_evt->ecode){
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	881b      	ldrh	r3, [r3, #0]
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	461a      	mov	r2, r3
 8001bac:	f640 4314 	movw	r3, #3092	; 0xc14
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d000      	beq.n	8001bb6 <user_notify+0x76>
        }
        break;        
      }
      
    }
    break;
 8001bb4:	e00c      	b.n	8001bd0 <user_notify+0x90>
          evt_gatt_read_permit_req *pr = (void*)blue_evt->data;                    
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	3302      	adds	r3, #2
 8001bba:	613b      	str	r3, [r7, #16]
          Read_Request_CB(pr->attr_handle);                    
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	885b      	ldrh	r3, [r3, #2]
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7ff fdfa 	bl	80017bc <Read_Request_CB>
        break;        
 8001bc8:	bf00      	nop
    break;
 8001bca:	bf00      	nop
 8001bcc:	e000      	b.n	8001bd0 <user_notify+0x90>
    return;
 8001bce:	bf00      	nop
  }    
}
 8001bd0:	3720      	adds	r7, #32
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
	...

08001bd8 <GAP_DisconnectionComplete_CB>:
 * @brief  This function is called when the peer device gets disconnected.
 * @param  None 
 * @retval None
 */
void GAP_DisconnectionComplete_CB(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  connected = FALSE;
 8001bdc:	4b06      	ldr	r3, [pc, #24]	; (8001bf8 <GAP_DisconnectionComplete_CB+0x20>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	601a      	str	r2, [r3, #0]
  PRINTF("Disconnected\n");
 8001be2:	4806      	ldr	r0, [pc, #24]	; (8001bfc <GAP_DisconnectionComplete_CB+0x24>)
 8001be4:	f018 fa98 	bl	801a118 <puts>
  /* Make the device connectable again. */
  set_connectable = TRUE;
 8001be8:	4b05      	ldr	r3, [pc, #20]	; (8001c00 <GAP_DisconnectionComplete_CB+0x28>)
 8001bea:	2201      	movs	r2, #1
 8001bec:	701a      	strb	r2, [r3, #0]
  notification_enabled = FALSE;
 8001bee:	4b05      	ldr	r3, [pc, #20]	; (8001c04 <GAP_DisconnectionComplete_CB+0x2c>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	701a      	strb	r2, [r3, #0]
}
 8001bf4:	bf00      	nop
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	200021c4 	.word	0x200021c4
 8001bfc:	0801cf04 	.word	0x0801cf04
 8001c00:	200011c8 	.word	0x200011c8
 8001c04:	200021c2 	.word	0x200021c2

08001c08 <GAP_ConnectionComplete_CB>:
 * @param  uint8_t Address of peer device
 * @param  uint16_t Connection handle
 * @retval None
 */
void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle)
{  
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	460b      	mov	r3, r1
 8001c12:	807b      	strh	r3, [r7, #2]
  connected = TRUE;
 8001c14:	4b11      	ldr	r3, [pc, #68]	; (8001c5c <GAP_ConnectionComplete_CB+0x54>)
 8001c16:	2201      	movs	r2, #1
 8001c18:	601a      	str	r2, [r3, #0]
  connection_handle = handle;
 8001c1a:	4a11      	ldr	r2, [pc, #68]	; (8001c60 <GAP_ConnectionComplete_CB+0x58>)
 8001c1c:	887b      	ldrh	r3, [r7, #2]
 8001c1e:	8013      	strh	r3, [r2, #0]
  
  PRINTF("Connected to device:");
 8001c20:	4810      	ldr	r0, [pc, #64]	; (8001c64 <GAP_ConnectionComplete_CB+0x5c>)
 8001c22:	f018 fa05 	bl	801a030 <iprintf>
  for(uint32_t i = 5; i > 0; i--){
 8001c26:	2305      	movs	r3, #5
 8001c28:	60fb      	str	r3, [r7, #12]
 8001c2a:	e00a      	b.n	8001c42 <GAP_ConnectionComplete_CB+0x3a>
    PRINTF("%02X-", addr[i]);
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	4413      	add	r3, r2
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	4619      	mov	r1, r3
 8001c36:	480c      	ldr	r0, [pc, #48]	; (8001c68 <GAP_ConnectionComplete_CB+0x60>)
 8001c38:	f018 f9fa 	bl	801a030 <iprintf>
  for(uint32_t i = 5; i > 0; i--){
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	60fb      	str	r3, [r7, #12]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d1f1      	bne.n	8001c2c <GAP_ConnectionComplete_CB+0x24>
  }
  PRINTF("%02X\n", addr[0]);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4807      	ldr	r0, [pc, #28]	; (8001c6c <GAP_ConnectionComplete_CB+0x64>)
 8001c50:	f018 f9ee 	bl	801a030 <iprintf>
}
 8001c54:	bf00      	nop
 8001c56:	3710      	adds	r7, #16
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	200021c4 	.word	0x200021c4
 8001c60:	200021c0 	.word	0x200021c0
 8001c64:	0801cf14 	.word	0x0801cf14
 8001c68:	0801cf2c 	.word	0x0801cf2c
 8001c6c:	0801cf34 	.word	0x0801cf34

08001c70 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct 
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b088      	sub	sp, #32
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c78:	2300      	movs	r3, #0
 8001c7a:	60bb      	str	r3, [r7, #8]
 8001c7c:	4b1d      	ldr	r3, [pc, #116]	; (8001cf4 <HCI_TL_SPI_Init+0x84>)
 8001c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c80:	4a1c      	ldr	r2, [pc, #112]	; (8001cf4 <HCI_TL_SPI_Init+0x84>)
 8001c82:	f043 0301 	orr.w	r3, r3, #1
 8001c86:	6313      	str	r3, [r2, #48]	; 0x30
 8001c88:	4b1a      	ldr	r3, [pc, #104]	; (8001cf4 <HCI_TL_SPI_Init+0x84>)
 8001c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8c:	f003 0301 	and.w	r3, r3, #1
 8001c90:	60bb      	str	r3, [r7, #8]
 8001c92:	68bb      	ldr	r3, [r7, #8]
  
  /*Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8001c94:	2301      	movs	r3, #1
 8001c96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c98:	4b17      	ldr	r3, [pc, #92]	; (8001cf8 <HCI_TL_SPI_Init+0x88>)
 8001c9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 8001ca0:	f107 030c 	add.w	r3, r7, #12
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4815      	ldr	r0, [pc, #84]	; (8001cfc <HCI_TL_SPI_Init+0x8c>)
 8001ca8:	f007 fe06 	bl	80098b8 <HAL_GPIO_Init>
   
  /*Configure CS & RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 8001cac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cb0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 8001cbe:	f107 030c 	add.w	r3, r7, #12
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	480d      	ldr	r0, [pc, #52]	; (8001cfc <HCI_TL_SPI_Init+0x8c>)
 8001cc6:	f007 fdf7 	bl	80098b8 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 8001cca:	2302      	movs	r3, #2
 8001ccc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct); 
 8001cda:	f107 030c 	add.w	r3, r7, #12
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4806      	ldr	r0, [pc, #24]	; (8001cfc <HCI_TL_SPI_Init+0x8c>)
 8001ce2:	f007 fde9 	bl	80098b8 <HAL_GPIO_Init>
    
  return BSP_SPI1_Init();
 8001ce6:	f000 fe6d 	bl	80029c4 <BSP_SPI1_Init>
 8001cea:	4603      	mov	r3, r0
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3720      	adds	r7, #32
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40023800 	.word	0x40023800
 8001cf8:	10110000 	.word	0x10110000
 8001cfc:	40020000 	.word	0x40020000

08001d00 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN); 
 8001d04:	2101      	movs	r1, #1
 8001d06:	4807      	ldr	r0, [pc, #28]	; (8001d24 <HCI_TL_SPI_DeInit+0x24>)
 8001d08:	f007 ff58 	bl	8009bbc <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN); 
 8001d0c:	2102      	movs	r1, #2
 8001d0e:	4805      	ldr	r0, [pc, #20]	; (8001d24 <HCI_TL_SPI_DeInit+0x24>)
 8001d10:	f007 ff54 	bl	8009bbc <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);   
 8001d14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d18:	4802      	ldr	r0, [pc, #8]	; (8001d24 <HCI_TL_SPI_DeInit+0x24>)
 8001d1a:	f007 ff4f 	bl	8009bbc <HAL_GPIO_DeInit>
  return 0;
 8001d1e:	2300      	movs	r3, #0
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	40020000 	.word	0x40020000

08001d28 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d32:	4809      	ldr	r0, [pc, #36]	; (8001d58 <HCI_TL_SPI_Reset+0x30>)
 8001d34:	f008 f83c 	bl	8009db0 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8001d38:	2005      	movs	r0, #5
 8001d3a:	f006 fb8d 	bl	8008458 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d44:	4804      	ldr	r0, [pc, #16]	; (8001d58 <HCI_TL_SPI_Reset+0x30>)
 8001d46:	f008 f833 	bl	8009db0 <HAL_GPIO_WritePin>
  HAL_Delay(5);    
 8001d4a:	2005      	movs	r0, #5
 8001d4c:	f006 fb84 	bl	8008458 <HAL_Delay>
  return 0;
 8001d50:	2300      	movs	r3, #0
}  
 8001d52:	4618      	mov	r0, r3
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	40020000 	.word	0x40020000

08001d5c <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b088      	sub	sp, #32
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	460b      	mov	r3, r1
 8001d66:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	777b      	strb	r3, [r7, #29]
  uint8_t char_ff = 0xff;
 8001d6c:	23ff      	movs	r3, #255	; 0xff
 8001d6e:	773b      	strb	r3, [r7, #28]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8001d70:	230b      	movs	r3, #11
 8001d72:	753b      	strb	r3, [r7, #20]
 8001d74:	2300      	movs	r3, #0
 8001d76:	757b      	strb	r3, [r7, #21]
 8001d78:	2300      	movs	r3, #0
 8001d7a:	75bb      	strb	r3, [r7, #22]
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	75fb      	strb	r3, [r7, #23]
 8001d80:	2300      	movs	r3, #0
 8001d82:	763b      	strb	r3, [r7, #24]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8001d84:	2200      	movs	r2, #0
 8001d86:	2102      	movs	r1, #2
 8001d88:	4820      	ldr	r0, [pc, #128]	; (8001e0c <HCI_TL_SPI_Receive+0xb0>)
 8001d8a:	f008 f811 	bl	8009db0 <HAL_GPIO_WritePin>

  /* Read the header */  
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 8001d8e:	f107 010c 	add.w	r1, r7, #12
 8001d92:	f107 0314 	add.w	r3, r7, #20
 8001d96:	2205      	movs	r2, #5
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f000 fe43 	bl	8002a24 <BSP_SPI1_SendRecv>
  	
  if(header_slave[0] == 0x02) 
 8001d9e:	7b3b      	ldrb	r3, [r7, #12]
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d129      	bne.n	8001df8 <HCI_TL_SPI_Receive+0x9c>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 8001da4:	7c3b      	ldrb	r3, [r7, #16]
 8001da6:	021b      	lsls	r3, r3, #8
 8001da8:	b21a      	sxth	r2, r3
 8001daa:	7bfb      	ldrb	r3, [r7, #15]
 8001dac:	b21b      	sxth	r3, r3
 8001dae:	4313      	orrs	r3, r2
 8001db0:	b21b      	sxth	r3, r3
 8001db2:	83fb      	strh	r3, [r7, #30]
  
    if(byte_count > 0) {
 8001db4:	8bfb      	ldrh	r3, [r7, #30]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d01e      	beq.n	8001df8 <HCI_TL_SPI_Receive+0x9c>
  
      /* avoid to read more data that size of the buffer */

      if (byte_count > size){
 8001dba:	8bfa      	ldrh	r2, [r7, #30]
 8001dbc:	887b      	ldrh	r3, [r7, #2]
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d901      	bls.n	8001dc6 <HCI_TL_SPI_Receive+0x6a>
        byte_count = size;
 8001dc2:	887b      	ldrh	r3, [r7, #2]
 8001dc4:	83fb      	strh	r3, [r7, #30]
      }        
  
      for(len = 0; len < byte_count; len++)
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	777b      	strb	r3, [r7, #29]
 8001dca:	e010      	b.n	8001dee <HCI_TL_SPI_Receive+0x92>
      {                                               
        BSP_SPI1_SendRecv(&char_ff, (uint8_t*)&read_char, 1);  
 8001dcc:	f107 011b 	add.w	r1, r7, #27
 8001dd0:	f107 031c 	add.w	r3, r7, #28
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f000 fe24 	bl	8002a24 <BSP_SPI1_SendRecv>
        buffer[len] = read_char;
 8001ddc:	7f7b      	ldrb	r3, [r7, #29]
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	4413      	add	r3, r2
 8001de2:	7efa      	ldrb	r2, [r7, #27]
 8001de4:	b2d2      	uxtb	r2, r2
 8001de6:	701a      	strb	r2, [r3, #0]
      for(len = 0; len < byte_count; len++)
 8001de8:	7f7b      	ldrb	r3, [r7, #29]
 8001dea:	3301      	adds	r3, #1
 8001dec:	777b      	strb	r3, [r7, #29]
 8001dee:	7f7b      	ldrb	r3, [r7, #29]
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	8bfa      	ldrh	r2, [r7, #30]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d8e9      	bhi.n	8001dcc <HCI_TL_SPI_Receive+0x70>
      }      
    }    
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001df8:	2201      	movs	r2, #1
 8001dfa:	2102      	movs	r1, #2
 8001dfc:	4803      	ldr	r0, [pc, #12]	; (8001e0c <HCI_TL_SPI_Receive+0xb0>)
 8001dfe:	f007 ffd7 	bl	8009db0 <HAL_GPIO_WritePin>
    }
    PRINT_CSV("\n");
  }
#endif
  
  return len;  
 8001e02:	7f7b      	ldrb	r3, [r7, #29]
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3720      	adds	r7, #32
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40020000 	.word	0x40020000

08001e10 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{  
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b088      	sub	sp, #32
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	460b      	mov	r3, r1
 8001e1a:	807b      	strh	r3, [r7, #2]
  int32_t result;  
  
  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8001e1c:	230a      	movs	r3, #10
 8001e1e:	743b      	strb	r3, [r7, #16]
 8001e20:	2300      	movs	r3, #0
 8001e22:	747b      	strb	r3, [r7, #17]
 8001e24:	2300      	movs	r3, #0
 8001e26:	74bb      	strb	r3, [r7, #18]
 8001e28:	2300      	movs	r3, #0
 8001e2a:	74fb      	strb	r3, [r7, #19]
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	753b      	strb	r3, [r7, #20]
  uint8_t header_slave[HEADER_SIZE];
  
  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 8001e30:	f006 fb06 	bl	8008440 <HAL_GetTick>
 8001e34:	61b8      	str	r0, [r7, #24]
  
  do
  {
    result = 0;
 8001e36:	2300      	movs	r3, #0
 8001e38:	61fb      	str	r3, [r7, #28]
    
    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	2102      	movs	r1, #2
 8001e3e:	481c      	ldr	r0, [pc, #112]	; (8001eb0 <HCI_TL_SPI_Send+0xa0>)
 8001e40:	f007 ffb6 	bl	8009db0 <HAL_GPIO_WritePin>
    
    /* Read header */  
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 8001e44:	f107 0108 	add.w	r1, r7, #8
 8001e48:	f107 0310 	add.w	r3, r7, #16
 8001e4c:	2205      	movs	r2, #5
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f000 fde8 	bl	8002a24 <BSP_SPI1_SendRecv>
    
    if(header_slave[0] == 0x02) 
 8001e54:	7a3b      	ldrb	r3, [r7, #8]
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d10f      	bne.n	8001e7a <HCI_TL_SPI_Send+0x6a>
    {
      /* SPI is ready */
      if(header_slave[1] >= size) 
 8001e5a:	7a7b      	ldrb	r3, [r7, #9]
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	887a      	ldrh	r2, [r7, #2]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d806      	bhi.n	8001e72 <HCI_TL_SPI_Send+0x62>
      {
        BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 8001e64:	887b      	ldrh	r3, [r7, #2]
 8001e66:	461a      	mov	r2, r3
 8001e68:	4912      	ldr	r1, [pc, #72]	; (8001eb4 <HCI_TL_SPI_Send+0xa4>)
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 fdda 	bl	8002a24 <BSP_SPI1_SendRecv>
 8001e70:	e006      	b.n	8001e80 <HCI_TL_SPI_Send+0x70>
      } 
      else 
      {
        /* Buffer is too small */
        result = -2;
 8001e72:	f06f 0301 	mvn.w	r3, #1
 8001e76:	61fb      	str	r3, [r7, #28]
 8001e78:	e002      	b.n	8001e80 <HCI_TL_SPI_Send+0x70>
      }
    } else {
      /* SPI is not ready */
      result = -1;
 8001e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e7e:	61fb      	str	r3, [r7, #28]
    }
    
    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001e80:	2201      	movs	r2, #1
 8001e82:	2102      	movs	r1, #2
 8001e84:	480a      	ldr	r0, [pc, #40]	; (8001eb0 <HCI_TL_SPI_Send+0xa0>)
 8001e86:	f007 ff93 	bl	8009db0 <HAL_GPIO_WritePin>
    
    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 8001e8a:	f006 fad9 	bl	8008440 <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	2b0f      	cmp	r3, #15
 8001e96:	d903      	bls.n	8001ea0 <HCI_TL_SPI_Send+0x90>
    {
      result = -3;
 8001e98:	f06f 0302 	mvn.w	r3, #2
 8001e9c:	61fb      	str	r3, [r7, #28]
      break;
 8001e9e:	e002      	b.n	8001ea6 <HCI_TL_SPI_Send+0x96>
    }
  } while(result < 0);
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	dbc7      	blt.n	8001e36 <HCI_TL_SPI_Send+0x26>
  
  return result;
 8001ea6:	69fb      	ldr	r3, [r7, #28]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3720      	adds	r7, #32
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	40020000 	.word	0x40020000
 8001eb4:	200021f8 	.word	0x200021f8

08001eb8 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8001ebc:	2101      	movs	r1, #1
 8001ebe:	4805      	ldr	r0, [pc, #20]	; (8001ed4 <IsDataAvailable+0x1c>)
 8001ec0:	f007 ff5e 	bl	8009d80 <HAL_GPIO_ReadPin>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	bf0c      	ite	eq
 8001eca:	2301      	moveq	r3, #1
 8001ecc:	2300      	movne	r3, #0
 8001ece:	b2db      	uxtb	r3, r3
} 
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	40020000 	.word	0x40020000

08001ed8 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */ 
void hci_tl_lowlevel_init(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b088      	sub	sp, #32
 8001edc:	af00      	add	r7, sp, #0
  
  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;  
  
  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 8001ede:	4b13      	ldr	r3, [pc, #76]	; (8001f2c <hci_tl_lowlevel_init+0x54>)
 8001ee0:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 8001ee2:	4b13      	ldr	r3, [pc, #76]	; (8001f30 <hci_tl_lowlevel_init+0x58>)
 8001ee4:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 8001ee6:	4b13      	ldr	r3, [pc, #76]	; (8001f34 <hci_tl_lowlevel_init+0x5c>)
 8001ee8:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 8001eea:	4b13      	ldr	r3, [pc, #76]	; (8001f38 <hci_tl_lowlevel_init+0x60>)
 8001eec:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 8001eee:	4b13      	ldr	r3, [pc, #76]	; (8001f3c <hci_tl_lowlevel_init+0x64>)
 8001ef0:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 8001ef2:	4b13      	ldr	r3, [pc, #76]	; (8001f40 <hci_tl_lowlevel_init+0x68>)
 8001ef4:	61fb      	str	r3, [r7, #28]
  
  hci_register_io_bus (&fops);
 8001ef6:	1d3b      	adds	r3, r7, #4
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f00c fe41 	bl	800eb80 <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */
  
  /* USER CODE END hci_tl_lowlevel_init 2 */
  
  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 8001efe:	f04f 61c0 	mov.w	r1, #100663296	; 0x6000000
 8001f02:	4810      	ldr	r0, [pc, #64]	; (8001f44 <hci_tl_lowlevel_init+0x6c>)
 8001f04:	f007 fca0 	bl	8009848 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti0, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 8001f08:	4a0f      	ldr	r2, [pc, #60]	; (8001f48 <hci_tl_lowlevel_init+0x70>)
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	480d      	ldr	r0, [pc, #52]	; (8001f44 <hci_tl_lowlevel_init+0x6c>)
 8001f0e:	f007 fc81 	bl	8009814 <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001f12:	2200      	movs	r2, #0
 8001f14:	2100      	movs	r1, #0
 8001f16:	2006      	movs	r0, #6
 8001f18:	f007 f8bb 	bl	8009092 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001f1c:	2006      	movs	r0, #6
 8001f1e:	f007 f8d4 	bl	80090ca <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */
  
  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 8001f22:	bf00      	nop
 8001f24:	3720      	adds	r7, #32
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	08001c71 	.word	0x08001c71
 8001f30:	08001d01 	.word	0x08001d01
 8001f34:	08001e11 	.word	0x08001e11
 8001f38:	08001d5d 	.word	0x08001d5d
 8001f3c:	08001d29 	.word	0x08001d29
 8001f40:	08002be1 	.word	0x08002be1
 8001f44:	200027e0 	.word	0x200027e0
 8001f48:	08001f4d 	.word	0x08001f4d

08001f4c <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 8001f50:	e005      	b.n	8001f5e <hci_tl_lowlevel_isr+0x12>
  {        
    if (hci_notify_asynch_evt(NULL))
 8001f52:	2000      	movs	r0, #0
 8001f54:	f00c ff76 	bl	800ee44 <hci_notify_asynch_evt>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d105      	bne.n	8001f6a <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 8001f5e:	f7ff ffab 	bl	8001eb8 <IsDataAvailable>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d1f4      	bne.n	8001f52 <hci_tl_lowlevel_isr+0x6>
 8001f68:	e000      	b.n	8001f6c <hci_tl_lowlevel_isr+0x20>
    {
      return;
 8001f6a:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */ 
}
 8001f6c:	bd80      	pop	{r7, pc}
	...

08001f70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f74:	f006 f9fe 	bl	8008374 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f78:	f000 f824 	bl	8001fc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f7c:	f000 fa2c 	bl	80023d8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001f80:	f000 fa0a 	bl	8002398 <MX_DMA_Init>
  MX_ADC1_Init();
 8001f84:	f000 f8a2 	bl	80020cc <MX_ADC1_Init>
  MX_CRC_Init();
 8001f88:	f000 f900 	bl	800218c <MX_CRC_Init>
  MX_RTC_Init();
 8001f8c:	f000 f912 	bl	80021b4 <MX_RTC_Init>
  MX_TIM2_Init();
 8001f90:	f000 f96a 	bl	8002268 <MX_TIM2_Init>
  MX_BlueNRG_MS_Init(); //Inizializzazione della expansion board BlueNRG.
 8001f94:	f7fe ffe0 	bl	8000f58 <MX_BlueNRG_MS_Init>
  MX_MEMS_Init(); //Inizializzazione dei sensori MEMS.
 8001f98:	f00b f9dc 	bl	800d354 <MX_MEMS_Init>
  /* USER CODE BEGIN 2 */
  //Avvio il timer2 che servirà da trigger per avviare la conversione ADC.
  HAL_TIM_Base_Start(&htim2);
 8001f9c:	4806      	ldr	r0, [pc, #24]	; (8001fb8 <main+0x48>)
 8001f9e:	f00a fac0 	bl	800c522 <HAL_TIM_Base_Start>

  //Avvio l'ADC che sfrutterà il DMA per trasferire i dati nelle variabili adcValue.
  HAL_ADC_Start_DMA(&hadc1, adcValue, 2);
 8001fa2:	2202      	movs	r2, #2
 8001fa4:	4905      	ldr	r1, [pc, #20]	; (8001fbc <main+0x4c>)
 8001fa6:	4806      	ldr	r0, [pc, #24]	; (8001fc0 <main+0x50>)
 8001fa8:	f006 fbfc 	bl	80087a4 <HAL_ADC_Start_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  MX_MEMS_Process(); //Processo che acquisisce i valori dai sensori MEMS
 8001fac:	f00b f9d8 	bl	800d360 <MX_MEMS_Process>
	  MX_BlueNRG_MS_Process(); //Processo che provvede all'invio dei dati acquisiti tramite BLE
 8001fb0:	f7ff f8c4 	bl	800113c <MX_BlueNRG_MS_Process>
	  MX_MEMS_Process(); //Processo che acquisisce i valori dai sensori MEMS
 8001fb4:	e7fa      	b.n	8001fac <main+0x3c>
 8001fb6:	bf00      	nop
 8001fb8:	2000d4d8 	.word	0x2000d4d8
 8001fbc:	2000d518 	.word	0x2000d518
 8001fc0:	20002830 	.word	0x20002830

08001fc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b098      	sub	sp, #96	; 0x60
 8001fc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001fce:	2230      	movs	r2, #48	; 0x30
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f018 f823 	bl	801a01e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fd8:	f107 031c 	add.w	r3, r7, #28
 8001fdc:	2200      	movs	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]
 8001fe0:	605a      	str	r2, [r3, #4]
 8001fe2:	609a      	str	r2, [r3, #8]
 8001fe4:	60da      	str	r2, [r3, #12]
 8001fe6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fe8:	f107 0308 	add.w	r3, r7, #8
 8001fec:	2200      	movs	r2, #0
 8001fee:	601a      	str	r2, [r3, #0]
 8001ff0:	605a      	str	r2, [r3, #4]
 8001ff2:	609a      	str	r2, [r3, #8]
 8001ff4:	60da      	str	r2, [r3, #12]
 8001ff6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	607b      	str	r3, [r7, #4]
 8001ffc:	4b31      	ldr	r3, [pc, #196]	; (80020c4 <SystemClock_Config+0x100>)
 8001ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002000:	4a30      	ldr	r2, [pc, #192]	; (80020c4 <SystemClock_Config+0x100>)
 8002002:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002006:	6413      	str	r3, [r2, #64]	; 0x40
 8002008:	4b2e      	ldr	r3, [pc, #184]	; (80020c4 <SystemClock_Config+0x100>)
 800200a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002010:	607b      	str	r3, [r7, #4]
 8002012:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002014:	2300      	movs	r3, #0
 8002016:	603b      	str	r3, [r7, #0]
 8002018:	4b2b      	ldr	r3, [pc, #172]	; (80020c8 <SystemClock_Config+0x104>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002020:	4a29      	ldr	r2, [pc, #164]	; (80020c8 <SystemClock_Config+0x104>)
 8002022:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002026:	6013      	str	r3, [r2, #0]
 8002028:	4b27      	ldr	r3, [pc, #156]	; (80020c8 <SystemClock_Config+0x104>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002030:	603b      	str	r3, [r7, #0]
 8002032:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8002034:	230a      	movs	r3, #10
 8002036:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002038:	2301      	movs	r3, #1
 800203a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800203c:	2310      	movs	r3, #16
 800203e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002040:	2301      	movs	r3, #1
 8002042:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002044:	2302      	movs	r3, #2
 8002046:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002048:	2300      	movs	r3, #0
 800204a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800204c:	2308      	movs	r3, #8
 800204e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 72;
 8002050:	2348      	movs	r3, #72	; 0x48
 8002052:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002054:	2302      	movs	r3, #2
 8002056:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002058:	2307      	movs	r3, #7
 800205a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800205c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002060:	4618      	mov	r0, r3
 8002062:	f008 fee7 	bl	800ae34 <HAL_RCC_OscConfig>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800206c:	f000 fb36 	bl	80026dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002070:	230f      	movs	r3, #15
 8002072:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002074:	2302      	movs	r3, #2
 8002076:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002078:	2300      	movs	r3, #0
 800207a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800207c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002080:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002082:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002086:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002088:	f107 031c 	add.w	r3, r7, #28
 800208c:	2102      	movs	r1, #2
 800208e:	4618      	mov	r0, r3
 8002090:	f009 f940 	bl	800b314 <HAL_RCC_ClockConfig>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <SystemClock_Config+0xda>
  {
    Error_Handler();
 800209a:	f000 fb1f 	bl	80026dc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800209e:	2302      	movs	r3, #2
 80020a0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80020a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020a6:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020a8:	f107 0308 	add.w	r3, r7, #8
 80020ac:	4618      	mov	r0, r3
 80020ae:	f009 fb23 	bl	800b6f8 <HAL_RCCEx_PeriphCLKConfig>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <SystemClock_Config+0xf8>
  {
    Error_Handler();
 80020b8:	f000 fb10 	bl	80026dc <Error_Handler>
  }
}
 80020bc:	bf00      	nop
 80020be:	3760      	adds	r7, #96	; 0x60
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	40023800 	.word	0x40023800
 80020c8:	40007000 	.word	0x40007000

080020cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80020d2:	463b      	mov	r3, r7
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	605a      	str	r2, [r3, #4]
 80020da:	609a      	str	r2, [r3, #8]
 80020dc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 80020de:	4b28      	ldr	r3, [pc, #160]	; (8002180 <MX_ADC1_Init+0xb4>)
 80020e0:	4a28      	ldr	r2, [pc, #160]	; (8002184 <MX_ADC1_Init+0xb8>)
 80020e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80020e4:	4b26      	ldr	r3, [pc, #152]	; (8002180 <MX_ADC1_Init+0xb4>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80020ea:	4b25      	ldr	r3, [pc, #148]	; (8002180 <MX_ADC1_Init+0xb4>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80020f0:	4b23      	ldr	r3, [pc, #140]	; (8002180 <MX_ADC1_Init+0xb4>)
 80020f2:	2201      	movs	r2, #1
 80020f4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80020f6:	4b22      	ldr	r3, [pc, #136]	; (8002180 <MX_ADC1_Init+0xb4>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80020fc:	4b20      	ldr	r3, [pc, #128]	; (8002180 <MX_ADC1_Init+0xb4>)
 80020fe:	2200      	movs	r2, #0
 8002100:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002104:	4b1e      	ldr	r3, [pc, #120]	; (8002180 <MX_ADC1_Init+0xb4>)
 8002106:	2200      	movs	r2, #0
 8002108:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800210a:	4b1d      	ldr	r3, [pc, #116]	; (8002180 <MX_ADC1_Init+0xb4>)
 800210c:	4a1e      	ldr	r2, [pc, #120]	; (8002188 <MX_ADC1_Init+0xbc>)
 800210e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002110:	4b1b      	ldr	r3, [pc, #108]	; (8002180 <MX_ADC1_Init+0xb4>)
 8002112:	2200      	movs	r2, #0
 8002114:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8002116:	4b1a      	ldr	r3, [pc, #104]	; (8002180 <MX_ADC1_Init+0xb4>)
 8002118:	2202      	movs	r2, #2
 800211a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800211c:	4b18      	ldr	r3, [pc, #96]	; (8002180 <MX_ADC1_Init+0xb4>)
 800211e:	2201      	movs	r2, #1
 8002120:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002124:	4b16      	ldr	r3, [pc, #88]	; (8002180 <MX_ADC1_Init+0xb4>)
 8002126:	2200      	movs	r2, #0
 8002128:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800212a:	4815      	ldr	r0, [pc, #84]	; (8002180 <MX_ADC1_Init+0xb4>)
 800212c:	f006 f9b6 	bl	800849c <HAL_ADC_Init>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8002136:	f000 fad1 	bl	80026dc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800213a:	230a      	movs	r3, #10
 800213c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800213e:	2301      	movs	r3, #1
 8002140:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8002142:	2301      	movs	r3, #1
 8002144:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002146:	463b      	mov	r3, r7
 8002148:	4619      	mov	r1, r3
 800214a:	480d      	ldr	r0, [pc, #52]	; (8002180 <MX_ADC1_Init+0xb4>)
 800214c:	f006 fc1c 	bl	8008988 <HAL_ADC_ConfigChannel>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8002156:	f000 fac1 	bl	80026dc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800215a:	230b      	movs	r3, #11
 800215c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800215e:	2302      	movs	r3, #2
 8002160:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002162:	463b      	mov	r3, r7
 8002164:	4619      	mov	r1, r3
 8002166:	4806      	ldr	r0, [pc, #24]	; (8002180 <MX_ADC1_Init+0xb4>)
 8002168:	f006 fc0e 	bl	8008988 <HAL_ADC_ConfigChannel>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8002172:	f000 fab3 	bl	80026dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002176:	bf00      	nop
 8002178:	3710      	adds	r7, #16
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	20002830 	.word	0x20002830
 8002184:	40012000 	.word	0x40012000
 8002188:	0f000001 	.word	0x0f000001

0800218c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002190:	4b06      	ldr	r3, [pc, #24]	; (80021ac <MX_CRC_Init+0x20>)
 8002192:	4a07      	ldr	r2, [pc, #28]	; (80021b0 <MX_CRC_Init+0x24>)
 8002194:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002196:	4805      	ldr	r0, [pc, #20]	; (80021ac <MX_CRC_Init+0x20>)
 8002198:	f006 ffb1 	bl	80090fe <HAL_CRC_Init>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80021a2:	f000 fa9b 	bl	80026dc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80021a6:	bf00      	nop
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	200027e8 	.word	0x200027e8
 80021b0:	40023000 	.word	0x40023000

080021b4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b086      	sub	sp, #24
 80021b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80021ba:	1d3b      	adds	r3, r7, #4
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	605a      	str	r2, [r3, #4]
 80021c2:	609a      	str	r2, [r3, #8]
 80021c4:	60da      	str	r2, [r3, #12]
 80021c6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80021c8:	2300      	movs	r3, #0
 80021ca:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 80021cc:	4b24      	ldr	r3, [pc, #144]	; (8002260 <MX_RTC_Init+0xac>)
 80021ce:	4a25      	ldr	r2, [pc, #148]	; (8002264 <MX_RTC_Init+0xb0>)
 80021d0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80021d2:	4b23      	ldr	r3, [pc, #140]	; (8002260 <MX_RTC_Init+0xac>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80021d8:	4b21      	ldr	r3, [pc, #132]	; (8002260 <MX_RTC_Init+0xac>)
 80021da:	227f      	movs	r2, #127	; 0x7f
 80021dc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80021de:	4b20      	ldr	r3, [pc, #128]	; (8002260 <MX_RTC_Init+0xac>)
 80021e0:	22ff      	movs	r2, #255	; 0xff
 80021e2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80021e4:	4b1e      	ldr	r3, [pc, #120]	; (8002260 <MX_RTC_Init+0xac>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80021ea:	4b1d      	ldr	r3, [pc, #116]	; (8002260 <MX_RTC_Init+0xac>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80021f0:	4b1b      	ldr	r3, [pc, #108]	; (8002260 <MX_RTC_Init+0xac>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80021f6:	481a      	ldr	r0, [pc, #104]	; (8002260 <MX_RTC_Init+0xac>)
 80021f8:	f009 fb6c 	bl	800b8d4 <HAL_RTC_Init>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8002202:	f000 fa6b 	bl	80026dc <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 8002206:	2300      	movs	r3, #0
 8002208:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800220a:	2300      	movs	r3, #0
 800220c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800220e:	2300      	movs	r3, #0
 8002210:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002212:	2300      	movs	r3, #0
 8002214:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002216:	2300      	movs	r3, #0
 8002218:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800221a:	1d3b      	adds	r3, r7, #4
 800221c:	2201      	movs	r2, #1
 800221e:	4619      	mov	r1, r3
 8002220:	480f      	ldr	r0, [pc, #60]	; (8002260 <MX_RTC_Init+0xac>)
 8002222:	f009 fbe8 	bl	800b9f6 <HAL_RTC_SetTime>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 800222c:	f000 fa56 	bl	80026dc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002230:	2301      	movs	r3, #1
 8002232:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002234:	2301      	movs	r3, #1
 8002236:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8002238:	2301      	movs	r3, #1
 800223a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 800223c:	2300      	movs	r3, #0
 800223e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002240:	463b      	mov	r3, r7
 8002242:	2201      	movs	r2, #1
 8002244:	4619      	mov	r1, r3
 8002246:	4806      	ldr	r0, [pc, #24]	; (8002260 <MX_RTC_Init+0xac>)
 8002248:	f009 fcf0 	bl	800bc2c <HAL_RTC_SetDate>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8002252:	f000 fa43 	bl	80026dc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002256:	bf00      	nop
 8002258:	3718      	adds	r7, #24
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	2000d4b8 	.word	0x2000d4b8
 8002264:	40002800 	.word	0x40002800

08002268 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b086      	sub	sp, #24
 800226c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800226e:	f107 0308 	add.w	r3, r7, #8
 8002272:	2200      	movs	r2, #0
 8002274:	601a      	str	r2, [r3, #0]
 8002276:	605a      	str	r2, [r3, #4]
 8002278:	609a      	str	r2, [r3, #8]
 800227a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800227c:	463b      	mov	r3, r7
 800227e:	2200      	movs	r2, #0
 8002280:	601a      	str	r2, [r3, #0]
 8002282:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002284:	4b1d      	ldr	r3, [pc, #116]	; (80022fc <MX_TIM2_Init+0x94>)
 8002286:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800228a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200;
 800228c:	4b1b      	ldr	r3, [pc, #108]	; (80022fc <MX_TIM2_Init+0x94>)
 800228e:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8002292:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002294:	4b19      	ldr	r3, [pc, #100]	; (80022fc <MX_TIM2_Init+0x94>)
 8002296:	2200      	movs	r2, #0
 8002298:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 800229a:	4b18      	ldr	r3, [pc, #96]	; (80022fc <MX_TIM2_Init+0x94>)
 800229c:	2264      	movs	r2, #100	; 0x64
 800229e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022a0:	4b16      	ldr	r3, [pc, #88]	; (80022fc <MX_TIM2_Init+0x94>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022a6:	4b15      	ldr	r3, [pc, #84]	; (80022fc <MX_TIM2_Init+0x94>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80022ac:	4813      	ldr	r0, [pc, #76]	; (80022fc <MX_TIM2_Init+0x94>)
 80022ae:	f00a f90d 	bl	800c4cc <HAL_TIM_Base_Init>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80022b8:	f000 fa10 	bl	80026dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80022c2:	f107 0308 	add.w	r3, r7, #8
 80022c6:	4619      	mov	r1, r3
 80022c8:	480c      	ldr	r0, [pc, #48]	; (80022fc <MX_TIM2_Init+0x94>)
 80022ca:	f00a f94e 	bl	800c56a <HAL_TIM_ConfigClockSource>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80022d4:	f000 fa02 	bl	80026dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80022d8:	2320      	movs	r3, #32
 80022da:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022dc:	2300      	movs	r3, #0
 80022de:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80022e0:	463b      	mov	r3, r7
 80022e2:	4619      	mov	r1, r3
 80022e4:	4805      	ldr	r0, [pc, #20]	; (80022fc <MX_TIM2_Init+0x94>)
 80022e6:	f00a fb11 	bl	800c90c <HAL_TIMEx_MasterConfigSynchronization>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80022f0:	f000 f9f4 	bl	80026dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80022f4:	bf00      	nop
 80022f6:	3718      	adds	r7, #24
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	2000d4d8 	.word	0x2000d4d8

08002300 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM3_Init(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b086      	sub	sp, #24
 8002304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002306:	f107 0308 	add.w	r3, r7, #8
 800230a:	2200      	movs	r2, #0
 800230c:	601a      	str	r2, [r3, #0]
 800230e:	605a      	str	r2, [r3, #4]
 8002310:	609a      	str	r2, [r3, #8]
 8002312:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002314:	463b      	mov	r3, r7
 8002316:	2200      	movs	r2, #0
 8002318:	601a      	str	r2, [r3, #0]
 800231a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800231c:	4b1c      	ldr	r3, [pc, #112]	; (8002390 <MX_TIM3_Init+0x90>)
 800231e:	4a1d      	ldr	r2, [pc, #116]	; (8002394 <MX_TIM3_Init+0x94>)
 8002320:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002322:	4b1b      	ldr	r3, [pc, #108]	; (8002390 <MX_TIM3_Init+0x90>)
 8002324:	2200      	movs	r2, #0
 8002326:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002328:	4b19      	ldr	r3, [pc, #100]	; (8002390 <MX_TIM3_Init+0x90>)
 800232a:	2200      	movs	r2, #0
 800232c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 800232e:	4b18      	ldr	r3, [pc, #96]	; (8002390 <MX_TIM3_Init+0x90>)
 8002330:	2200      	movs	r2, #0
 8002332:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002334:	4b16      	ldr	r3, [pc, #88]	; (8002390 <MX_TIM3_Init+0x90>)
 8002336:	2200      	movs	r2, #0
 8002338:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800233a:	4b15      	ldr	r3, [pc, #84]	; (8002390 <MX_TIM3_Init+0x90>)
 800233c:	2200      	movs	r2, #0
 800233e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002340:	4813      	ldr	r0, [pc, #76]	; (8002390 <MX_TIM3_Init+0x90>)
 8002342:	f00a f8c3 	bl	800c4cc <HAL_TIM_Base_Init>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 800234c:	f000 f9c6 	bl	80026dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002350:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002354:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002356:	f107 0308 	add.w	r3, r7, #8
 800235a:	4619      	mov	r1, r3
 800235c:	480c      	ldr	r0, [pc, #48]	; (8002390 <MX_TIM3_Init+0x90>)
 800235e:	f00a f904 	bl	800c56a <HAL_TIM_ConfigClockSource>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8002368:	f000 f9b8 	bl	80026dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800236c:	2300      	movs	r3, #0
 800236e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002370:	2300      	movs	r3, #0
 8002372:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002374:	463b      	mov	r3, r7
 8002376:	4619      	mov	r1, r3
 8002378:	4805      	ldr	r0, [pc, #20]	; (8002390 <MX_TIM3_Init+0x90>)
 800237a:	f00a fac7 	bl	800c90c <HAL_TIMEx_MasterConfigSynchronization>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8002384:	f000 f9aa 	bl	80026dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002388:	bf00      	nop
 800238a:	3718      	adds	r7, #24
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	200027f0 	.word	0x200027f0
 8002394:	40000400 	.word	0x40000400

08002398 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800239e:	2300      	movs	r3, #0
 80023a0:	607b      	str	r3, [r7, #4]
 80023a2:	4b0c      	ldr	r3, [pc, #48]	; (80023d4 <MX_DMA_Init+0x3c>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a6:	4a0b      	ldr	r2, [pc, #44]	; (80023d4 <MX_DMA_Init+0x3c>)
 80023a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80023ac:	6313      	str	r3, [r2, #48]	; 0x30
 80023ae:	4b09      	ldr	r3, [pc, #36]	; (80023d4 <MX_DMA_Init+0x3c>)
 80023b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023b6:	607b      	str	r3, [r7, #4]
 80023b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80023ba:	2200      	movs	r2, #0
 80023bc:	2100      	movs	r1, #0
 80023be:	2038      	movs	r0, #56	; 0x38
 80023c0:	f006 fe67 	bl	8009092 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80023c4:	2038      	movs	r0, #56	; 0x38
 80023c6:	f006 fe80 	bl	80090ca <HAL_NVIC_EnableIRQ>

}
 80023ca:	bf00      	nop
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	40023800 	.word	0x40023800

080023d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b08a      	sub	sp, #40	; 0x28
 80023dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023de:	f107 0314 	add.w	r3, r7, #20
 80023e2:	2200      	movs	r2, #0
 80023e4:	601a      	str	r2, [r3, #0]
 80023e6:	605a      	str	r2, [r3, #4]
 80023e8:	609a      	str	r2, [r3, #8]
 80023ea:	60da      	str	r2, [r3, #12]
 80023ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023ee:	2300      	movs	r3, #0
 80023f0:	613b      	str	r3, [r7, #16]
 80023f2:	4b3c      	ldr	r3, [pc, #240]	; (80024e4 <MX_GPIO_Init+0x10c>)
 80023f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f6:	4a3b      	ldr	r2, [pc, #236]	; (80024e4 <MX_GPIO_Init+0x10c>)
 80023f8:	f043 0304 	orr.w	r3, r3, #4
 80023fc:	6313      	str	r3, [r2, #48]	; 0x30
 80023fe:	4b39      	ldr	r3, [pc, #228]	; (80024e4 <MX_GPIO_Init+0x10c>)
 8002400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002402:	f003 0304 	and.w	r3, r3, #4
 8002406:	613b      	str	r3, [r7, #16]
 8002408:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800240a:	2300      	movs	r3, #0
 800240c:	60fb      	str	r3, [r7, #12]
 800240e:	4b35      	ldr	r3, [pc, #212]	; (80024e4 <MX_GPIO_Init+0x10c>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002412:	4a34      	ldr	r2, [pc, #208]	; (80024e4 <MX_GPIO_Init+0x10c>)
 8002414:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002418:	6313      	str	r3, [r2, #48]	; 0x30
 800241a:	4b32      	ldr	r3, [pc, #200]	; (80024e4 <MX_GPIO_Init+0x10c>)
 800241c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002422:	60fb      	str	r3, [r7, #12]
 8002424:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002426:	2300      	movs	r3, #0
 8002428:	60bb      	str	r3, [r7, #8]
 800242a:	4b2e      	ldr	r3, [pc, #184]	; (80024e4 <MX_GPIO_Init+0x10c>)
 800242c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242e:	4a2d      	ldr	r2, [pc, #180]	; (80024e4 <MX_GPIO_Init+0x10c>)
 8002430:	f043 0301 	orr.w	r3, r3, #1
 8002434:	6313      	str	r3, [r2, #48]	; 0x30
 8002436:	4b2b      	ldr	r3, [pc, #172]	; (80024e4 <MX_GPIO_Init+0x10c>)
 8002438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	60bb      	str	r3, [r7, #8]
 8002440:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002442:	2300      	movs	r3, #0
 8002444:	607b      	str	r3, [r7, #4]
 8002446:	4b27      	ldr	r3, [pc, #156]	; (80024e4 <MX_GPIO_Init+0x10c>)
 8002448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244a:	4a26      	ldr	r2, [pc, #152]	; (80024e4 <MX_GPIO_Init+0x10c>)
 800244c:	f043 0302 	orr.w	r3, r3, #2
 8002450:	6313      	str	r3, [r2, #48]	; 0x30
 8002452:	4b24      	ldr	r3, [pc, #144]	; (80024e4 <MX_GPIO_Init+0x10c>)
 8002454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002456:	f003 0302 	and.w	r3, r3, #2
 800245a:	607b      	str	r3, [r7, #4]
 800245c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 800245e:	2200      	movs	r2, #0
 8002460:	f44f 7191 	mov.w	r1, #290	; 0x122
 8002464:	4820      	ldr	r0, [pc, #128]	; (80024e8 <MX_GPIO_Init+0x110>)
 8002466:	f007 fca3 	bl	8009db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800246a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800246e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002470:	4b1e      	ldr	r3, [pc, #120]	; (80024ec <MX_GPIO_Init+0x114>)
 8002472:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002474:	2300      	movs	r3, #0
 8002476:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002478:	f107 0314 	add.w	r3, r7, #20
 800247c:	4619      	mov	r1, r3
 800247e:	481c      	ldr	r0, [pc, #112]	; (80024f0 <MX_GPIO_Init+0x118>)
 8002480:	f007 fa1a 	bl	80098b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002484:	2301      	movs	r3, #1
 8002486:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002488:	4b1a      	ldr	r3, [pc, #104]	; (80024f4 <MX_GPIO_Init+0x11c>)
 800248a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248c:	2300      	movs	r3, #0
 800248e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002490:	f107 0314 	add.w	r3, r7, #20
 8002494:	4619      	mov	r1, r3
 8002496:	4814      	ldr	r0, [pc, #80]	; (80024e8 <MX_GPIO_Init+0x110>)
 8002498:	f007 fa0e 	bl	80098b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 LD2_Pin PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|LD2_Pin|GPIO_PIN_8;
 800249c:	f44f 7391 	mov.w	r3, #290	; 0x122
 80024a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024a2:	2301      	movs	r3, #1
 80024a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a6:	2300      	movs	r3, #0
 80024a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024aa:	2300      	movs	r3, #0
 80024ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ae:	f107 0314 	add.w	r3, r7, #20
 80024b2:	4619      	mov	r1, r3
 80024b4:	480c      	ldr	r0, [pc, #48]	; (80024e8 <MX_GPIO_Init+0x110>)
 80024b6:	f007 f9ff 	bl	80098b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80024ba:	2200      	movs	r2, #0
 80024bc:	2100      	movs	r1, #0
 80024be:	2006      	movs	r0, #6
 80024c0:	f006 fde7 	bl	8009092 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80024c4:	2006      	movs	r0, #6
 80024c6:	f006 fe00 	bl	80090ca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80024ca:	2200      	movs	r2, #0
 80024cc:	2100      	movs	r1, #0
 80024ce:	2028      	movs	r0, #40	; 0x28
 80024d0:	f006 fddf 	bl	8009092 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80024d4:	2028      	movs	r0, #40	; 0x28
 80024d6:	f006 fdf8 	bl	80090ca <HAL_NVIC_EnableIRQ>

}
 80024da:	bf00      	nop
 80024dc:	3728      	adds	r7, #40	; 0x28
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	40023800 	.word	0x40023800
 80024e8:	40020000 	.word	0x40020000
 80024ec:	10210000 	.word	0x10210000
 80024f0:	40020800 	.word	0x40020800
 80024f4:	10110000 	.word	0x10110000

080024f8 <HAL_ADC_ConvCpltCallback>:
  *
  * @param [in] hadc : Handler per l'ADC
  * @retval None
  */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80024f8:	b590      	push	{r4, r7, lr}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
	//Trasformazioen dei valori acquisiti dall'ADC1
	float exten1 = ((2 / 3.3) * 0.0001) * adcValue[0] - 0.0001; //((2 / 3.3)) * adcValue[0] - 1
 8002500:	4b6b      	ldr	r3, [pc, #428]	; (80026b0 <HAL_ADC_ConvCpltCallback+0x1b8>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4618      	mov	r0, r3
 8002506:	f7fe f805 	bl	8000514 <__aeabi_ui2d>
 800250a:	a365      	add	r3, pc, #404	; (adr r3, 80026a0 <HAL_ADC_ConvCpltCallback+0x1a8>)
 800250c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002510:	f7fe f87a 	bl	8000608 <__aeabi_dmul>
 8002514:	4603      	mov	r3, r0
 8002516:	460c      	mov	r4, r1
 8002518:	4618      	mov	r0, r3
 800251a:	4621      	mov	r1, r4
 800251c:	a362      	add	r3, pc, #392	; (adr r3, 80026a8 <HAL_ADC_ConvCpltCallback+0x1b0>)
 800251e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002522:	f7fd feb9 	bl	8000298 <__aeabi_dsub>
 8002526:	4603      	mov	r3, r0
 8002528:	460c      	mov	r4, r1
 800252a:	4618      	mov	r0, r3
 800252c:	4621      	mov	r1, r4
 800252e:	f7fe fb43 	bl	8000bb8 <__aeabi_d2f>
 8002532:	4603      	mov	r3, r0
 8002534:	60fb      	str	r3, [r7, #12]
	float exten2 = ((2 / 3.3) * 0.0001) * adcValue[1] - 0.0001;
 8002536:	4b5e      	ldr	r3, [pc, #376]	; (80026b0 <HAL_ADC_ConvCpltCallback+0x1b8>)
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	4618      	mov	r0, r3
 800253c:	f7fd ffea 	bl	8000514 <__aeabi_ui2d>
 8002540:	a357      	add	r3, pc, #348	; (adr r3, 80026a0 <HAL_ADC_ConvCpltCallback+0x1a8>)
 8002542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002546:	f7fe f85f 	bl	8000608 <__aeabi_dmul>
 800254a:	4603      	mov	r3, r0
 800254c:	460c      	mov	r4, r1
 800254e:	4618      	mov	r0, r3
 8002550:	4621      	mov	r1, r4
 8002552:	a355      	add	r3, pc, #340	; (adr r3, 80026a8 <HAL_ADC_ConvCpltCallback+0x1b0>)
 8002554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002558:	f7fd fe9e 	bl	8000298 <__aeabi_dsub>
 800255c:	4603      	mov	r3, r0
 800255e:	460c      	mov	r4, r1
 8002560:	4618      	mov	r0, r3
 8002562:	4621      	mov	r1, r4
 8002564:	f7fe fb28 	bl	8000bb8 <__aeabi_d2f>
 8002568:	4603      	mov	r3, r0
 800256a:	60bb      	str	r3, [r7, #8]

	//Passaggio dei parametri alla struttura dati che verrà inviata tramite BLE
	memBuffer[MEMS_idx].temperature = (int16_t)(mems_temperature * 10);
 800256c:	4b51      	ldr	r3, [pc, #324]	; (80026b4 <HAL_ADC_ConvCpltCallback+0x1bc>)
 800256e:	edd3 7a00 	vldr	s15, [r3]
 8002572:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002576:	ee67 7a87 	vmul.f32	s15, s15, s14
 800257a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800257e:	ee17 3a90 	vmov	r3, s15
 8002582:	b21a      	sxth	r2, r3
 8002584:	4b4c      	ldr	r3, [pc, #304]	; (80026b8 <HAL_ADC_ConvCpltCallback+0x1c0>)
 8002586:	881b      	ldrh	r3, [r3, #0]
 8002588:	4618      	mov	r0, r3
 800258a:	4611      	mov	r1, r2
 800258c:	4a4b      	ldr	r2, [pc, #300]	; (80026bc <HAL_ADC_ConvCpltCallback+0x1c4>)
 800258e:	232c      	movs	r3, #44	; 0x2c
 8002590:	fb03 f300 	mul.w	r3, r3, r0
 8002594:	4413      	add	r3, r2
 8002596:	6019      	str	r1, [r3, #0]
	memBuffer[MEMS_idx].humidity = (int16_t)(mems_humidity * 10);
 8002598:	4b49      	ldr	r3, [pc, #292]	; (80026c0 <HAL_ADC_ConvCpltCallback+0x1c8>)
 800259a:	edd3 7a00 	vldr	s15, [r3]
 800259e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80025a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025aa:	ee17 3a90 	vmov	r3, s15
 80025ae:	b21a      	sxth	r2, r3
 80025b0:	4b41      	ldr	r3, [pc, #260]	; (80026b8 <HAL_ADC_ConvCpltCallback+0x1c0>)
 80025b2:	881b      	ldrh	r3, [r3, #0]
 80025b4:	4618      	mov	r0, r3
 80025b6:	4611      	mov	r1, r2
 80025b8:	4a40      	ldr	r2, [pc, #256]	; (80026bc <HAL_ADC_ConvCpltCallback+0x1c4>)
 80025ba:	232c      	movs	r3, #44	; 0x2c
 80025bc:	fb03 f300 	mul.w	r3, r3, r0
 80025c0:	4413      	add	r3, r2
 80025c2:	3304      	adds	r3, #4
 80025c4:	6019      	str	r1, [r3, #0]
	memBuffer[MEMS_idx].pressure = (int32_t)(mems_pressure *100);
 80025c6:	4b3f      	ldr	r3, [pc, #252]	; (80026c4 <HAL_ADC_ConvCpltCallback+0x1cc>)
 80025c8:	edd3 7a00 	vldr	s15, [r3]
 80025cc:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80026c8 <HAL_ADC_ConvCpltCallback+0x1d0>
 80025d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025d4:	4b38      	ldr	r3, [pc, #224]	; (80026b8 <HAL_ADC_ConvCpltCallback+0x1c0>)
 80025d6:	881b      	ldrh	r3, [r3, #0]
 80025d8:	4619      	mov	r1, r3
 80025da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025de:	ee17 0a90 	vmov	r0, s15
 80025e2:	4a36      	ldr	r2, [pc, #216]	; (80026bc <HAL_ADC_ConvCpltCallback+0x1c4>)
 80025e4:	232c      	movs	r3, #44	; 0x2c
 80025e6:	fb03 f301 	mul.w	r3, r3, r1
 80025ea:	4413      	add	r3, r2
 80025ec:	3308      	adds	r3, #8
 80025ee:	6018      	str	r0, [r3, #0]
	memBuffer[MEMS_idx].exten1 = exten1*10000; //exten1
 80025f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80025f4:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80026cc <HAL_ADC_ConvCpltCallback+0x1d4>
 80025f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025fc:	4b2e      	ldr	r3, [pc, #184]	; (80026b8 <HAL_ADC_ConvCpltCallback+0x1c0>)
 80025fe:	881b      	ldrh	r3, [r3, #0]
 8002600:	4619      	mov	r1, r3
 8002602:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002606:	ee17 0a90 	vmov	r0, s15
 800260a:	4a2c      	ldr	r2, [pc, #176]	; (80026bc <HAL_ADC_ConvCpltCallback+0x1c4>)
 800260c:	232c      	movs	r3, #44	; 0x2c
 800260e:	fb03 f301 	mul.w	r3, r3, r1
 8002612:	4413      	add	r3, r2
 8002614:	330c      	adds	r3, #12
 8002616:	6018      	str	r0, [r3, #0]
	memBuffer[MEMS_idx].exten2 = exten2*10000;
 8002618:	edd7 7a02 	vldr	s15, [r7, #8]
 800261c:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80026cc <HAL_ADC_ConvCpltCallback+0x1d4>
 8002620:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002624:	4b24      	ldr	r3, [pc, #144]	; (80026b8 <HAL_ADC_ConvCpltCallback+0x1c0>)
 8002626:	881b      	ldrh	r3, [r3, #0]
 8002628:	4619      	mov	r1, r3
 800262a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800262e:	ee17 0a90 	vmov	r0, s15
 8002632:	4a22      	ldr	r2, [pc, #136]	; (80026bc <HAL_ADC_ConvCpltCallback+0x1c4>)
 8002634:	232c      	movs	r3, #44	; 0x2c
 8002636:	fb03 f301 	mul.w	r3, r3, r1
 800263a:	4413      	add	r3, r2
 800263c:	3310      	adds	r3, #16
 800263e:	6018      	str	r0, [r3, #0]
	memBuffer[MEMS_idx].x_axes = x_axes;
 8002640:	4b1d      	ldr	r3, [pc, #116]	; (80026b8 <HAL_ADC_ConvCpltCallback+0x1c0>)
 8002642:	881b      	ldrh	r3, [r3, #0]
 8002644:	4619      	mov	r1, r3
 8002646:	4a1d      	ldr	r2, [pc, #116]	; (80026bc <HAL_ADC_ConvCpltCallback+0x1c4>)
 8002648:	232c      	movs	r3, #44	; 0x2c
 800264a:	fb03 f301 	mul.w	r3, r3, r1
 800264e:	4413      	add	r3, r2
 8002650:	3310      	adds	r3, #16
 8002652:	4a1f      	ldr	r2, [pc, #124]	; (80026d0 <HAL_ADC_ConvCpltCallback+0x1d8>)
 8002654:	3304      	adds	r3, #4
 8002656:	ca07      	ldmia	r2, {r0, r1, r2}
 8002658:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	memBuffer[MEMS_idx].q_axes = q_axes;
 800265c:	4b16      	ldr	r3, [pc, #88]	; (80026b8 <HAL_ADC_ConvCpltCallback+0x1c0>)
 800265e:	881b      	ldrh	r3, [r3, #0]
 8002660:	4619      	mov	r1, r3
 8002662:	4a16      	ldr	r2, [pc, #88]	; (80026bc <HAL_ADC_ConvCpltCallback+0x1c4>)
 8002664:	232c      	movs	r3, #44	; 0x2c
 8002666:	fb03 f301 	mul.w	r3, r3, r1
 800266a:	4413      	add	r3, r2
 800266c:	3320      	adds	r3, #32
 800266e:	4a19      	ldr	r2, [pc, #100]	; (80026d4 <HAL_ADC_ConvCpltCallback+0x1dc>)
 8002670:	ca07      	ldmia	r2, {r0, r1, r2}
 8002672:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	MEMS_idx = (MEMS_idx+1)%1000; //aggiornamento indice del buffer circolare
 8002676:	4b10      	ldr	r3, [pc, #64]	; (80026b8 <HAL_ADC_ConvCpltCallback+0x1c0>)
 8002678:	881b      	ldrh	r3, [r3, #0]
 800267a:	3301      	adds	r3, #1
 800267c:	4a16      	ldr	r2, [pc, #88]	; (80026d8 <HAL_ADC_ConvCpltCallback+0x1e0>)
 800267e:	fb82 1203 	smull	r1, r2, r2, r3
 8002682:	1191      	asrs	r1, r2, #6
 8002684:	17da      	asrs	r2, r3, #31
 8002686:	1a8a      	subs	r2, r1, r2
 8002688:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800268c:	fb01 f202 	mul.w	r2, r1, r2
 8002690:	1a9a      	subs	r2, r3, r2
 8002692:	b292      	uxth	r2, r2
 8002694:	4b08      	ldr	r3, [pc, #32]	; (80026b8 <HAL_ADC_ConvCpltCallback+0x1c0>)
 8002696:	801a      	strh	r2, [r3, #0]
}
 8002698:	bf00      	nop
 800269a:	3714      	adds	r7, #20
 800269c:	46bd      	mov	sp, r7
 800269e:	bd90      	pop	{r4, r7, pc}
 80026a0:	62ccec94 	.word	0x62ccec94
 80026a4:	3f0fc668 	.word	0x3f0fc668
 80026a8:	eb1c432d 	.word	0xeb1c432d
 80026ac:	3f1a36e2 	.word	0x3f1a36e2
 80026b0:	2000d518 	.word	0x2000d518
 80026b4:	2000d628 	.word	0x2000d628
 80026b8:	200022f8 	.word	0x200022f8
 80026bc:	20002878 	.word	0x20002878
 80026c0:	2000d624 	.word	0x2000d624
 80026c4:	2000d630 	.word	0x2000d630
 80026c8:	42c80000 	.word	0x42c80000
 80026cc:	461c4000 	.word	0x461c4000
 80026d0:	200021c8 	.word	0x200021c8
 80026d4:	200021ec 	.word	0x200021ec
 80026d8:	10624dd3 	.word	0x10624dd3

080026dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80026e0:	bf00      	nop
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
	...

080026ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026f2:	2300      	movs	r3, #0
 80026f4:	607b      	str	r3, [r7, #4]
 80026f6:	4b10      	ldr	r3, [pc, #64]	; (8002738 <HAL_MspInit+0x4c>)
 80026f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fa:	4a0f      	ldr	r2, [pc, #60]	; (8002738 <HAL_MspInit+0x4c>)
 80026fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002700:	6453      	str	r3, [r2, #68]	; 0x44
 8002702:	4b0d      	ldr	r3, [pc, #52]	; (8002738 <HAL_MspInit+0x4c>)
 8002704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002706:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800270a:	607b      	str	r3, [r7, #4]
 800270c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800270e:	2300      	movs	r3, #0
 8002710:	603b      	str	r3, [r7, #0]
 8002712:	4b09      	ldr	r3, [pc, #36]	; (8002738 <HAL_MspInit+0x4c>)
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	4a08      	ldr	r2, [pc, #32]	; (8002738 <HAL_MspInit+0x4c>)
 8002718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800271c:	6413      	str	r3, [r2, #64]	; 0x40
 800271e:	4b06      	ldr	r3, [pc, #24]	; (8002738 <HAL_MspInit+0x4c>)
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002726:	603b      	str	r3, [r7, #0]
 8002728:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800272a:	2007      	movs	r0, #7
 800272c:	f006 fca6 	bl	800907c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002730:	bf00      	nop
 8002732:	3708      	adds	r7, #8
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	40023800 	.word	0x40023800

0800273c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b08a      	sub	sp, #40	; 0x28
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002744:	f107 0314 	add.w	r3, r7, #20
 8002748:	2200      	movs	r2, #0
 800274a:	601a      	str	r2, [r3, #0]
 800274c:	605a      	str	r2, [r3, #4]
 800274e:	609a      	str	r2, [r3, #8]
 8002750:	60da      	str	r2, [r3, #12]
 8002752:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a33      	ldr	r2, [pc, #204]	; (8002828 <HAL_ADC_MspInit+0xec>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d15f      	bne.n	800281e <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800275e:	2300      	movs	r3, #0
 8002760:	613b      	str	r3, [r7, #16]
 8002762:	4b32      	ldr	r3, [pc, #200]	; (800282c <HAL_ADC_MspInit+0xf0>)
 8002764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002766:	4a31      	ldr	r2, [pc, #196]	; (800282c <HAL_ADC_MspInit+0xf0>)
 8002768:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800276c:	6453      	str	r3, [r2, #68]	; 0x44
 800276e:	4b2f      	ldr	r3, [pc, #188]	; (800282c <HAL_ADC_MspInit+0xf0>)
 8002770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002776:	613b      	str	r3, [r7, #16]
 8002778:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800277a:	2300      	movs	r3, #0
 800277c:	60fb      	str	r3, [r7, #12]
 800277e:	4b2b      	ldr	r3, [pc, #172]	; (800282c <HAL_ADC_MspInit+0xf0>)
 8002780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002782:	4a2a      	ldr	r2, [pc, #168]	; (800282c <HAL_ADC_MspInit+0xf0>)
 8002784:	f043 0304 	orr.w	r3, r3, #4
 8002788:	6313      	str	r3, [r2, #48]	; 0x30
 800278a:	4b28      	ldr	r3, [pc, #160]	; (800282c <HAL_ADC_MspInit+0xf0>)
 800278c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278e:	f003 0304 	and.w	r3, r3, #4
 8002792:	60fb      	str	r3, [r7, #12]
 8002794:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002796:	2303      	movs	r3, #3
 8002798:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800279a:	2303      	movs	r3, #3
 800279c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279e:	2300      	movs	r3, #0
 80027a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027a2:	f107 0314 	add.w	r3, r7, #20
 80027a6:	4619      	mov	r1, r3
 80027a8:	4821      	ldr	r0, [pc, #132]	; (8002830 <HAL_ADC_MspInit+0xf4>)
 80027aa:	f007 f885 	bl	80098b8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80027ae:	4b21      	ldr	r3, [pc, #132]	; (8002834 <HAL_ADC_MspInit+0xf8>)
 80027b0:	4a21      	ldr	r2, [pc, #132]	; (8002838 <HAL_ADC_MspInit+0xfc>)
 80027b2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80027b4:	4b1f      	ldr	r3, [pc, #124]	; (8002834 <HAL_ADC_MspInit+0xf8>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027ba:	4b1e      	ldr	r3, [pc, #120]	; (8002834 <HAL_ADC_MspInit+0xf8>)
 80027bc:	2200      	movs	r2, #0
 80027be:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80027c0:	4b1c      	ldr	r3, [pc, #112]	; (8002834 <HAL_ADC_MspInit+0xf8>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80027c6:	4b1b      	ldr	r3, [pc, #108]	; (8002834 <HAL_ADC_MspInit+0xf8>)
 80027c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027cc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80027ce:	4b19      	ldr	r3, [pc, #100]	; (8002834 <HAL_ADC_MspInit+0xf8>)
 80027d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80027d4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80027d6:	4b17      	ldr	r3, [pc, #92]	; (8002834 <HAL_ADC_MspInit+0xf8>)
 80027d8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80027dc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80027de:	4b15      	ldr	r3, [pc, #84]	; (8002834 <HAL_ADC_MspInit+0xf8>)
 80027e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027e4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80027e6:	4b13      	ldr	r3, [pc, #76]	; (8002834 <HAL_ADC_MspInit+0xf8>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80027ec:	4b11      	ldr	r3, [pc, #68]	; (8002834 <HAL_ADC_MspInit+0xf8>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80027f2:	4810      	ldr	r0, [pc, #64]	; (8002834 <HAL_ADC_MspInit+0xf8>)
 80027f4:	f006 fca0 	bl	8009138 <HAL_DMA_Init>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d001      	beq.n	8002802 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80027fe:	f7ff ff6d 	bl	80026dc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a0b      	ldr	r2, [pc, #44]	; (8002834 <HAL_ADC_MspInit+0xf8>)
 8002806:	639a      	str	r2, [r3, #56]	; 0x38
 8002808:	4a0a      	ldr	r2, [pc, #40]	; (8002834 <HAL_ADC_MspInit+0xf8>)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800280e:	2200      	movs	r2, #0
 8002810:	2100      	movs	r1, #0
 8002812:	2012      	movs	r0, #18
 8002814:	f006 fc3d 	bl	8009092 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002818:	2012      	movs	r0, #18
 800281a:	f006 fc56 	bl	80090ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800281e:	bf00      	nop
 8002820:	3728      	adds	r7, #40	; 0x28
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	40012000 	.word	0x40012000
 800282c:	40023800 	.word	0x40023800
 8002830:	40020800 	.word	0x40020800
 8002834:	2000d458 	.word	0x2000d458
 8002838:	40026410 	.word	0x40026410

0800283c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800283c:	b480      	push	{r7}
 800283e:	b085      	sub	sp, #20
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a0b      	ldr	r2, [pc, #44]	; (8002878 <HAL_CRC_MspInit+0x3c>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d10d      	bne.n	800286a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800284e:	2300      	movs	r3, #0
 8002850:	60fb      	str	r3, [r7, #12]
 8002852:	4b0a      	ldr	r3, [pc, #40]	; (800287c <HAL_CRC_MspInit+0x40>)
 8002854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002856:	4a09      	ldr	r2, [pc, #36]	; (800287c <HAL_CRC_MspInit+0x40>)
 8002858:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800285c:	6313      	str	r3, [r2, #48]	; 0x30
 800285e:	4b07      	ldr	r3, [pc, #28]	; (800287c <HAL_CRC_MspInit+0x40>)
 8002860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002862:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002866:	60fb      	str	r3, [r7, #12]
 8002868:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800286a:	bf00      	nop
 800286c:	3714      	adds	r7, #20
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	40023000 	.word	0x40023000
 800287c:	40023800 	.word	0x40023800

08002880 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a05      	ldr	r2, [pc, #20]	; (80028a4 <HAL_RTC_MspInit+0x24>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d102      	bne.n	8002898 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002892:	4b05      	ldr	r3, [pc, #20]	; (80028a8 <HAL_RTC_MspInit+0x28>)
 8002894:	2201      	movs	r2, #1
 8002896:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002898:	bf00      	nop
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr
 80028a4:	40002800 	.word	0x40002800
 80028a8:	42470e3c 	.word	0x42470e3c

080028ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028bc:	d10e      	bne.n	80028dc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028be:	2300      	movs	r3, #0
 80028c0:	60fb      	str	r3, [r7, #12]
 80028c2:	4b13      	ldr	r3, [pc, #76]	; (8002910 <HAL_TIM_Base_MspInit+0x64>)
 80028c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c6:	4a12      	ldr	r2, [pc, #72]	; (8002910 <HAL_TIM_Base_MspInit+0x64>)
 80028c8:	f043 0301 	orr.w	r3, r3, #1
 80028cc:	6413      	str	r3, [r2, #64]	; 0x40
 80028ce:	4b10      	ldr	r3, [pc, #64]	; (8002910 <HAL_TIM_Base_MspInit+0x64>)
 80028d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	60fb      	str	r3, [r7, #12]
 80028d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80028da:	e012      	b.n	8002902 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a0c      	ldr	r2, [pc, #48]	; (8002914 <HAL_TIM_Base_MspInit+0x68>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d10d      	bne.n	8002902 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028e6:	2300      	movs	r3, #0
 80028e8:	60bb      	str	r3, [r7, #8]
 80028ea:	4b09      	ldr	r3, [pc, #36]	; (8002910 <HAL_TIM_Base_MspInit+0x64>)
 80028ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ee:	4a08      	ldr	r2, [pc, #32]	; (8002910 <HAL_TIM_Base_MspInit+0x64>)
 80028f0:	f043 0302 	orr.w	r3, r3, #2
 80028f4:	6413      	str	r3, [r2, #64]	; 0x40
 80028f6:	4b06      	ldr	r3, [pc, #24]	; (8002910 <HAL_TIM_Base_MspInit+0x64>)
 80028f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	60bb      	str	r3, [r7, #8]
 8002900:	68bb      	ldr	r3, [r7, #8]
}
 8002902:	bf00      	nop
 8002904:	3714      	adds	r7, #20
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	40023800 	.word	0x40023800
 8002914:	40000400 	.word	0x40000400

08002918 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800291c:	bf00      	nop
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr

08002926 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002926:	b480      	push	{r7}
 8002928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800292a:	e7fe      	b.n	800292a <HardFault_Handler+0x4>

0800292c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002930:	e7fe      	b.n	8002930 <MemManage_Handler+0x4>

08002932 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002932:	b480      	push	{r7}
 8002934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002936:	e7fe      	b.n	8002936 <BusFault_Handler+0x4>

08002938 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800293c:	e7fe      	b.n	800293c <UsageFault_Handler+0x4>

0800293e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800293e:	b480      	push	{r7}
 8002940:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002942:	bf00      	nop
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002950:	bf00      	nop
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr

0800295a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800295a:	b480      	push	{r7}
 800295c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800295e:	bf00      	nop
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800296c:	f005 fd54 	bl	8008418 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002970:	bf00      	nop
 8002972:	bd80      	pop	{r7, pc}

08002974 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 8002978:	4802      	ldr	r0, [pc, #8]	; (8002984 <EXTI0_IRQHandler+0x10>)
 800297a:	f006 ff79 	bl	8009870 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800297e:	bf00      	nop
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	200027e0 	.word	0x200027e0

08002988 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800298c:	4802      	ldr	r0, [pc, #8]	; (8002998 <ADC_IRQHandler+0x10>)
 800298e:	f005 fdc8 	bl	8008522 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002992:	bf00      	nop
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	20002830 	.word	0x20002830

0800299c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 80029a0:	4802      	ldr	r0, [pc, #8]	; (80029ac <EXTI15_10_IRQHandler+0x10>)
 80029a2:	f006 ff65 	bl	8009870 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80029a6:	bf00      	nop
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	20001330 	.word	0x20001330

080029b0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80029b4:	4802      	ldr	r0, [pc, #8]	; (80029c0 <DMA2_Stream0_IRQHandler+0x10>)
 80029b6:	f006 fcc5 	bl	8009344 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80029ba:	bf00      	nop
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	2000d458 	.word	0x2000d458

080029c4 <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL. 
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void) 
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80029ca:	2300      	movs	r3, #0
 80029cc:	607b      	str	r3, [r7, #4]
  
  hspi1.Instance  = SPI1;
 80029ce:	4b12      	ldr	r3, [pc, #72]	; (8002a18 <BSP_SPI1_Init+0x54>)
 80029d0:	4a12      	ldr	r2, [pc, #72]	; (8002a1c <BSP_SPI1_Init+0x58>)
 80029d2:	601a      	str	r2, [r3, #0]
  
  if(SPI1InitCounter++ == 0)
 80029d4:	4b12      	ldr	r3, [pc, #72]	; (8002a20 <BSP_SPI1_Init+0x5c>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	1c5a      	adds	r2, r3, #1
 80029da:	4911      	ldr	r1, [pc, #68]	; (8002a20 <BSP_SPI1_Init+0x5c>)
 80029dc:	600a      	str	r2, [r1, #0]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d114      	bne.n	8002a0c <BSP_SPI1_Init+0x48>
  {    
	if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET) 
 80029e2:	480d      	ldr	r0, [pc, #52]	; (8002a18 <BSP_SPI1_Init+0x54>)
 80029e4:	f009 fcb8 	bl	800c358 <HAL_SPI_GetState>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d10e      	bne.n	8002a0c <BSP_SPI1_Init+0x48>
	{ 
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
		/* Init the SPI Msp */
		SPI1_MspInit(&hspi1);
 80029ee:	480a      	ldr	r0, [pc, #40]	; (8002a18 <BSP_SPI1_Init+0x54>)
 80029f0:	f000 f93a 	bl	8002c68 <SPI1_MspInit>
			{
				return BSP_ERROR_MSP_FAILURE;
			}
		}	
#endif   
		if(ret == BSP_ERROR_NONE)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d108      	bne.n	8002a0c <BSP_SPI1_Init+0x48>
		{
			/* Init the SPI */
			if (MX_SPI1_Init(&hspi1) != HAL_OK)
 80029fa:	4807      	ldr	r0, [pc, #28]	; (8002a18 <BSP_SPI1_Init+0x54>)
 80029fc:	f000 f8f8 	bl	8002bf0 <MX_SPI1_Init>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d002      	beq.n	8002a0c <BSP_SPI1_Init+0x48>
			{
				ret = BSP_ERROR_BUS_FAILURE;
 8002a06:	f06f 0307 	mvn.w	r3, #7
 8002a0a:	607b      	str	r3, [r7, #4]
			}
		}
	}
  }	

  return ret;
 8002a0c:	687b      	ldr	r3, [r7, #4]
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	2000d574 	.word	0x2000d574
 8002a1c:	40013000 	.word	0x40013000
 8002a20:	200022fc 	.word	0x200022fc

08002a24 <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b088      	sub	sp, #32
 8002a28:	af02      	add	r7, sp, #8
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002a32:	2300      	movs	r3, #0
 8002a34:	617b      	str	r3, [r7, #20]
  
  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8002a36:	88fa      	ldrh	r2, [r7, #6]
 8002a38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a3c:	9300      	str	r3, [sp, #0]
 8002a3e:	4613      	mov	r3, r2
 8002a40:	68ba      	ldr	r2, [r7, #8]
 8002a42:	68f9      	ldr	r1, [r7, #12]
 8002a44:	4806      	ldr	r0, [pc, #24]	; (8002a60 <BSP_SPI1_SendRecv+0x3c>)
 8002a46:	f009 fae5 	bl	800c014 <HAL_SPI_TransmitReceive>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d002      	beq.n	8002a56 <BSP_SPI1_SendRecv+0x32>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8002a50:	f06f 0305 	mvn.w	r3, #5
 8002a54:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8002a56:	697b      	ldr	r3, [r7, #20]
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3718      	adds	r7, #24
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	2000d574 	.word	0x2000d574

08002a64 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void) 
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	607b      	str	r3, [r7, #4]
  
  hi2c1.Instance  = I2C1;
 8002a6e:	4b13      	ldr	r3, [pc, #76]	; (8002abc <BSP_I2C1_Init+0x58>)
 8002a70:	4a13      	ldr	r2, [pc, #76]	; (8002ac0 <BSP_I2C1_Init+0x5c>)
 8002a72:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8002a74:	4b13      	ldr	r3, [pc, #76]	; (8002ac4 <BSP_I2C1_Init+0x60>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	1c5a      	adds	r2, r3, #1
 8002a7a:	4912      	ldr	r1, [pc, #72]	; (8002ac4 <BSP_I2C1_Init+0x60>)
 8002a7c:	600a      	str	r2, [r1, #0]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d117      	bne.n	8002ab2 <BSP_I2C1_Init+0x4e>
  {     
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8002a82:	480e      	ldr	r0, [pc, #56]	; (8002abc <BSP_I2C1_Init+0x58>)
 8002a84:	f007 fe64 	bl	800a750 <HAL_I2C_GetState>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d111      	bne.n	8002ab2 <BSP_I2C1_Init+0x4e>
    {  
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8002a8e:	480b      	ldr	r0, [pc, #44]	; (8002abc <BSP_I2C1_Init+0x58>)
 8002a90:	f000 f976 	bl	8002d80 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d10b      	bne.n	8002ab2 <BSP_I2C1_Init+0x4e>
	  {
    	/* Init the I2C */
    	if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8002a9a:	4808      	ldr	r0, [pc, #32]	; (8002abc <BSP_I2C1_Init+0x58>)
 8002a9c:	f000 f93c 	bl	8002d18 <MX_I2C1_Init>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d003      	beq.n	8002aae <BSP_I2C1_Init+0x4a>
    	{
      	  ret = BSP_ERROR_BUS_FAILURE;
 8002aa6:	f06f 0307 	mvn.w	r3, #7
 8002aaa:	607b      	str	r3, [r7, #4]
 8002aac:	e001      	b.n	8002ab2 <BSP_I2C1_Init+0x4e>
    	}
        else
        {
      	  ret = BSP_ERROR_NONE;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	607b      	str	r3, [r7, #4]
        }
      }	
    }
  }
  return ret;
 8002ab2:	687b      	ldr	r3, [r7, #4]
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3708      	adds	r7, #8
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	2000d520 	.word	0x2000d520
 8002ac0:	40005400 	.word	0x40005400
 8002ac4:	20002300 	.word	0x20002300

08002ac8 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void) 
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	607b      	str	r3, [r7, #4]
  
  if (I2C1InitCounter > 0)
 8002ad2:	4b0f      	ldr	r3, [pc, #60]	; (8002b10 <BSP_I2C1_DeInit+0x48>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d014      	beq.n	8002b04 <BSP_I2C1_DeInit+0x3c>
  {       
    if (--I2C1InitCounter == 0)
 8002ada:	4b0d      	ldr	r3, [pc, #52]	; (8002b10 <BSP_I2C1_DeInit+0x48>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	4a0b      	ldr	r2, [pc, #44]	; (8002b10 <BSP_I2C1_DeInit+0x48>)
 8002ae2:	6013      	str	r3, [r2, #0]
 8002ae4:	4b0a      	ldr	r3, [pc, #40]	; (8002b10 <BSP_I2C1_DeInit+0x48>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d10b      	bne.n	8002b04 <BSP_I2C1_DeInit+0x3c>
    {    
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */ 
      I2C1_MspDeInit(&hi2c1);
 8002aec:	4809      	ldr	r0, [pc, #36]	; (8002b14 <BSP_I2C1_DeInit+0x4c>)
 8002aee:	f000 f981 	bl	8002df4 <I2C1_MspDeInit>
  #endif  
      /* DeInit the I2C */ 
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8002af2:	4808      	ldr	r0, [pc, #32]	; (8002b14 <BSP_I2C1_DeInit+0x4c>)
 8002af4:	f007 fac8 	bl	800a088 <HAL_I2C_DeInit>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d002      	beq.n	8002b04 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8002afe:	f06f 0307 	mvn.w	r3, #7
 8002b02:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8002b04:	687b      	ldr	r3, [r7, #4]
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3708      	adds	r7, #8
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	20002300 	.word	0x20002300
 8002b14:	2000d520 	.word	0x2000d520

08002b18 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b08a      	sub	sp, #40	; 0x28
 8002b1c:	af04      	add	r7, sp, #16
 8002b1e:	60ba      	str	r2, [r7, #8]
 8002b20:	461a      	mov	r2, r3
 8002b22:	4603      	mov	r3, r0
 8002b24:	81fb      	strh	r3, [r7, #14]
 8002b26:	460b      	mov	r3, r1
 8002b28:	81bb      	strh	r3, [r7, #12]
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;  
 8002b2e:	2300      	movs	r3, #0
 8002b30:	617b      	str	r3, [r7, #20]
  
  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8002b32:	89ba      	ldrh	r2, [r7, #12]
 8002b34:	89f9      	ldrh	r1, [r7, #14]
 8002b36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b3a:	9302      	str	r3, [sp, #8]
 8002b3c:	88fb      	ldrh	r3, [r7, #6]
 8002b3e:	9301      	str	r3, [sp, #4]
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	9300      	str	r3, [sp, #0]
 8002b44:	2301      	movs	r3, #1
 8002b46:	480c      	ldr	r0, [pc, #48]	; (8002b78 <BSP_I2C1_WriteReg+0x60>)
 8002b48:	f007 fae2 	bl	800a110 <HAL_I2C_Mem_Write>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d00c      	beq.n	8002b6c <BSP_I2C1_WriteReg+0x54>
  {    
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8002b52:	4809      	ldr	r0, [pc, #36]	; (8002b78 <BSP_I2C1_WriteReg+0x60>)
 8002b54:	f007 fe0a 	bl	800a76c <HAL_I2C_GetError>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b04      	cmp	r3, #4
 8002b5c:	d103      	bne.n	8002b66 <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002b5e:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8002b62:	617b      	str	r3, [r7, #20]
 8002b64:	e002      	b.n	8002b6c <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8002b66:	f06f 0303 	mvn.w	r3, #3
 8002b6a:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8002b6c:	697b      	ldr	r3, [r7, #20]
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3718      	adds	r7, #24
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	2000d520 	.word	0x2000d520

08002b7c <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length) 
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b08a      	sub	sp, #40	; 0x28
 8002b80:	af04      	add	r7, sp, #16
 8002b82:	60ba      	str	r2, [r7, #8]
 8002b84:	461a      	mov	r2, r3
 8002b86:	4603      	mov	r3, r0
 8002b88:	81fb      	strh	r3, [r7, #14]
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	81bb      	strh	r3, [r7, #12]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002b92:	2300      	movs	r3, #0
 8002b94:	617b      	str	r3, [r7, #20]
  
  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8002b96:	89ba      	ldrh	r2, [r7, #12]
 8002b98:	89f9      	ldrh	r1, [r7, #14]
 8002b9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b9e:	9302      	str	r3, [sp, #8]
 8002ba0:	88fb      	ldrh	r3, [r7, #6]
 8002ba2:	9301      	str	r3, [sp, #4]
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	9300      	str	r3, [sp, #0]
 8002ba8:	2301      	movs	r3, #1
 8002baa:	480c      	ldr	r0, [pc, #48]	; (8002bdc <BSP_I2C1_ReadReg+0x60>)
 8002bac:	f007 fbaa 	bl	800a304 <HAL_I2C_Mem_Read>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d00c      	beq.n	8002bd0 <BSP_I2C1_ReadReg+0x54>
  { 
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8002bb6:	4809      	ldr	r0, [pc, #36]	; (8002bdc <BSP_I2C1_ReadReg+0x60>)
 8002bb8:	f007 fdd8 	bl	800a76c <HAL_I2C_GetError>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b04      	cmp	r3, #4
 8002bc0:	d103      	bne.n	8002bca <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002bc2:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8002bc6:	617b      	str	r3, [r7, #20]
 8002bc8:	e002      	b.n	8002bd0 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002bca:	f06f 0303 	mvn.w	r3, #3
 8002bce:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8002bd0:	697b      	ldr	r3, [r7, #20]
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3718      	adds	r7, #24
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	2000d520 	.word	0x2000d520

08002be0 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8002be0:	b580      	push	{r7, lr}
 8002be2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8002be4:	f005 fc2c 	bl	8008440 <HAL_GetTick>
 8002be8:	4603      	mov	r3, r0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	bd80      	pop	{r7, pc}
	...

08002bf0 <MX_SPI1_Init>:

/* SPI1 init function */ 

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	73fb      	strb	r3, [r7, #15]
  hspi->Instance = SPI1;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4a19      	ldr	r2, [pc, #100]	; (8002c64 <MX_SPI1_Init+0x74>)
 8002c00:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002c08:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c28:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 10;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	220a      	movs	r2, #10
 8002c46:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f009 f975 	bl	800bf38 <HAL_SPI_Init>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d001      	beq.n	8002c58 <MX_SPI1_Init+0x68>
  {
    ret = HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3710      	adds	r7, #16
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	40013000 	.word	0x40013000

08002c68 <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b08a      	sub	sp, #40	; 0x28
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002c70:	2300      	movs	r3, #0
 8002c72:	613b      	str	r3, [r7, #16]
 8002c74:	4b25      	ldr	r3, [pc, #148]	; (8002d0c <SPI1_MspInit+0xa4>)
 8002c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c78:	4a24      	ldr	r2, [pc, #144]	; (8002d0c <SPI1_MspInit+0xa4>)
 8002c7a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c7e:	6453      	str	r3, [r2, #68]	; 0x44
 8002c80:	4b22      	ldr	r3, [pc, #136]	; (8002d0c <SPI1_MspInit+0xa4>)
 8002c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c88:	613b      	str	r3, [r7, #16]
 8002c8a:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	60fb      	str	r3, [r7, #12]
 8002c90:	4b1e      	ldr	r3, [pc, #120]	; (8002d0c <SPI1_MspInit+0xa4>)
 8002c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c94:	4a1d      	ldr	r2, [pc, #116]	; (8002d0c <SPI1_MspInit+0xa4>)
 8002c96:	f043 0301 	orr.w	r3, r3, #1
 8002c9a:	6313      	str	r3, [r2, #48]	; 0x30
 8002c9c:	4b1b      	ldr	r3, [pc, #108]	; (8002d0c <SPI1_MspInit+0xa4>)
 8002c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca0:	f003 0301 	and.w	r3, r3, #1
 8002ca4:	60fb      	str	r3, [r7, #12]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ca8:	2300      	movs	r3, #0
 8002caa:	60bb      	str	r3, [r7, #8]
 8002cac:	4b17      	ldr	r3, [pc, #92]	; (8002d0c <SPI1_MspInit+0xa4>)
 8002cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb0:	4a16      	ldr	r2, [pc, #88]	; (8002d0c <SPI1_MspInit+0xa4>)
 8002cb2:	f043 0302 	orr.w	r3, r3, #2
 8002cb6:	6313      	str	r3, [r2, #48]	; 0x30
 8002cb8:	4b14      	ldr	r3, [pc, #80]	; (8002d0c <SPI1_MspInit+0xa4>)
 8002cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbc:	f003 0302 	and.w	r3, r3, #2
 8002cc0:	60bb      	str	r3, [r7, #8]
 8002cc2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002cc4:	23c0      	movs	r3, #192	; 0xc0
 8002cc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc8:	2302      	movs	r3, #2
 8002cca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002cd4:	2305      	movs	r3, #5
 8002cd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cd8:	f107 0314 	add.w	r3, r7, #20
 8002cdc:	4619      	mov	r1, r3
 8002cde:	480c      	ldr	r0, [pc, #48]	; (8002d10 <SPI1_MspInit+0xa8>)
 8002ce0:	f006 fdea 	bl	80098b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002ce4:	2308      	movs	r3, #8
 8002ce6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ce8:	2302      	movs	r3, #2
 8002cea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cec:	2300      	movs	r3, #0
 8002cee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002cf4:	2305      	movs	r3, #5
 8002cf6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cf8:	f107 0314 	add.w	r3, r7, #20
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	4805      	ldr	r0, [pc, #20]	; (8002d14 <SPI1_MspInit+0xac>)
 8002d00:	f006 fdda 	bl	80098b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 8002d04:	bf00      	nop
 8002d06:	3728      	adds	r7, #40	; 0x28
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	40023800 	.word	0x40023800
 8002d10:	40020000 	.word	0x40020000
 8002d14:	40020400 	.word	0x40020400

08002d18 <MX_I2C1_Init>:
}

/* I2C1 init function */ 

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8002d20:	2300      	movs	r3, #0
 8002d22:	73fb      	strb	r3, [r7, #15]
  hi2c->Instance = I2C1;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4a14      	ldr	r2, [pc, #80]	; (8002d78 <MX_I2C1_Init+0x60>)
 8002d28:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 100000;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a13      	ldr	r2, [pc, #76]	; (8002d7c <MX_I2C1_Init+0x64>)
 8002d2e:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002d42:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f007 f85b 	bl	8009e18 <HAL_I2C_Init>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d001      	beq.n	8002d6c <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3710      	adds	r7, #16
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	40005400 	.word	0x40005400
 8002d7c:	000186a0 	.word	0x000186a0

08002d80 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b08a      	sub	sp, #40	; 0x28
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d88:	2300      	movs	r3, #0
 8002d8a:	613b      	str	r3, [r7, #16]
 8002d8c:	4b17      	ldr	r3, [pc, #92]	; (8002dec <I2C1_MspInit+0x6c>)
 8002d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d90:	4a16      	ldr	r2, [pc, #88]	; (8002dec <I2C1_MspInit+0x6c>)
 8002d92:	f043 0302 	orr.w	r3, r3, #2
 8002d96:	6313      	str	r3, [r2, #48]	; 0x30
 8002d98:	4b14      	ldr	r3, [pc, #80]	; (8002dec <I2C1_MspInit+0x6c>)
 8002d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9c:	f003 0302 	and.w	r3, r3, #2
 8002da0:	613b      	str	r3, [r7, #16]
 8002da2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002da4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002da8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002daa:	2312      	movs	r3, #18
 8002dac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002dae:	2301      	movs	r3, #1
 8002db0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002db2:	2303      	movs	r3, #3
 8002db4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002db6:	2304      	movs	r3, #4
 8002db8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dba:	f107 0314 	add.w	r3, r7, #20
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	480b      	ldr	r0, [pc, #44]	; (8002df0 <I2C1_MspInit+0x70>)
 8002dc2:	f006 fd79 	bl	80098b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	60fb      	str	r3, [r7, #12]
 8002dca:	4b08      	ldr	r3, [pc, #32]	; (8002dec <I2C1_MspInit+0x6c>)
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dce:	4a07      	ldr	r2, [pc, #28]	; (8002dec <I2C1_MspInit+0x6c>)
 8002dd0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002dd4:	6413      	str	r3, [r2, #64]	; 0x40
 8002dd6:	4b05      	ldr	r3, [pc, #20]	; (8002dec <I2C1_MspInit+0x6c>)
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dde:	60fb      	str	r3, [r7, #12]
 8002de0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8002de2:	bf00      	nop
 8002de4:	3728      	adds	r7, #40	; 0x28
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	40023800 	.word	0x40023800
 8002df0:	40020400 	.word	0x40020400

08002df4 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002dfc:	4b07      	ldr	r3, [pc, #28]	; (8002e1c <I2C1_MspDeInit+0x28>)
 8002dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e00:	4a06      	ldr	r2, [pc, #24]	; (8002e1c <I2C1_MspDeInit+0x28>)
 8002e02:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002e06:	6413      	str	r3, [r2, #64]	; 0x40
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8|GPIO_PIN_9);
 8002e08:	f44f 7140 	mov.w	r1, #768	; 0x300
 8002e0c:	4804      	ldr	r0, [pc, #16]	; (8002e20 <I2C1_MspDeInit+0x2c>)
 8002e0e:	f006 fed5 	bl	8009bbc <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8002e12:	bf00      	nop
 8002e14:	3708      	adds	r7, #8
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	40023800 	.word	0x40023800
 8002e20:	40020400 	.word	0x40020400

08002e24 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b086      	sub	sp, #24
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e30:	2300      	movs	r3, #0
 8002e32:	617b      	str	r3, [r7, #20]
 8002e34:	e00a      	b.n	8002e4c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002e36:	f3af 8000 	nop.w
 8002e3a:	4601      	mov	r1, r0
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	1c5a      	adds	r2, r3, #1
 8002e40:	60ba      	str	r2, [r7, #8]
 8002e42:	b2ca      	uxtb	r2, r1
 8002e44:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	3301      	adds	r3, #1
 8002e4a:	617b      	str	r3, [r7, #20]
 8002e4c:	697a      	ldr	r2, [r7, #20]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	dbf0      	blt.n	8002e36 <_read+0x12>
	}

return len;
 8002e54:	687b      	ldr	r3, [r7, #4]
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3718      	adds	r7, #24
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}

08002e5e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e5e:	b580      	push	{r7, lr}
 8002e60:	b086      	sub	sp, #24
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	60f8      	str	r0, [r7, #12]
 8002e66:	60b9      	str	r1, [r7, #8]
 8002e68:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	617b      	str	r3, [r7, #20]
 8002e6e:	e009      	b.n	8002e84 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	1c5a      	adds	r2, r3, #1
 8002e74:	60ba      	str	r2, [r7, #8]
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f005 fa2b 	bl	80082d4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	3301      	adds	r3, #1
 8002e82:	617b      	str	r3, [r7, #20]
 8002e84:	697a      	ldr	r2, [r7, #20]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	dbf1      	blt.n	8002e70 <_write+0x12>
	}
	return len;
 8002e8c:	687b      	ldr	r3, [r7, #4]
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3718      	adds	r7, #24
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <_close>:

int _close(int file)
{
 8002e96:	b480      	push	{r7}
 8002e98:	b083      	sub	sp, #12
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
	return -1;
 8002e9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	370c      	adds	r7, #12
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr

08002eae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002eae:	b480      	push	{r7}
 8002eb0:	b083      	sub	sp, #12
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
 8002eb6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ebe:	605a      	str	r2, [r3, #4]
	return 0;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	370c      	adds	r7, #12
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr

08002ece <_isatty>:

int _isatty(int file)
{
 8002ece:	b480      	push	{r7}
 8002ed0:	b083      	sub	sp, #12
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
	return 1;
 8002ed6:	2301      	movs	r3, #1
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b085      	sub	sp, #20
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	607a      	str	r2, [r7, #4]
	return 0;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3714      	adds	r7, #20
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
	...

08002f00 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002f08:	4b11      	ldr	r3, [pc, #68]	; (8002f50 <_sbrk+0x50>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d102      	bne.n	8002f16 <_sbrk+0x16>
		heap_end = &end;
 8002f10:	4b0f      	ldr	r3, [pc, #60]	; (8002f50 <_sbrk+0x50>)
 8002f12:	4a10      	ldr	r2, [pc, #64]	; (8002f54 <_sbrk+0x54>)
 8002f14:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002f16:	4b0e      	ldr	r3, [pc, #56]	; (8002f50 <_sbrk+0x50>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002f1c:	4b0c      	ldr	r3, [pc, #48]	; (8002f50 <_sbrk+0x50>)
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	4413      	add	r3, r2
 8002f24:	466a      	mov	r2, sp
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d907      	bls.n	8002f3a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002f2a:	f017 f843 	bl	8019fb4 <__errno>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	230c      	movs	r3, #12
 8002f32:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002f34:	f04f 33ff 	mov.w	r3, #4294967295
 8002f38:	e006      	b.n	8002f48 <_sbrk+0x48>
	}

	heap_end += incr;
 8002f3a:	4b05      	ldr	r3, [pc, #20]	; (8002f50 <_sbrk+0x50>)
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4413      	add	r3, r2
 8002f42:	4a03      	ldr	r2, [pc, #12]	; (8002f50 <_sbrk+0x50>)
 8002f44:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002f46:	68fb      	ldr	r3, [r7, #12]
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3710      	adds	r7, #16
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	20002304 	.word	0x20002304
 8002f54:	2000d670 	.word	0x2000d670

08002f58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f5c:	4b08      	ldr	r3, [pc, #32]	; (8002f80 <SystemInit+0x28>)
 8002f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f62:	4a07      	ldr	r2, [pc, #28]	; (8002f80 <SystemInit+0x28>)
 8002f64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002f6c:	4b04      	ldr	r3, [pc, #16]	; (8002f80 <SystemInit+0x28>)
 8002f6e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002f72:	609a      	str	r2, [r3, #8]
#endif
}
 8002f74:	bf00      	nop
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	e000ed00 	.word	0xe000ed00

08002f84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002f84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002fbc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002f88:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002f8a:	e003      	b.n	8002f94 <LoopCopyDataInit>

08002f8c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002f8c:	4b0c      	ldr	r3, [pc, #48]	; (8002fc0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002f8e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002f90:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002f92:	3104      	adds	r1, #4

08002f94 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002f94:	480b      	ldr	r0, [pc, #44]	; (8002fc4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002f96:	4b0c      	ldr	r3, [pc, #48]	; (8002fc8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002f98:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002f9a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002f9c:	d3f6      	bcc.n	8002f8c <CopyDataInit>
  ldr  r2, =_sbss
 8002f9e:	4a0b      	ldr	r2, [pc, #44]	; (8002fcc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002fa0:	e002      	b.n	8002fa8 <LoopFillZerobss>

08002fa2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002fa2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002fa4:	f842 3b04 	str.w	r3, [r2], #4

08002fa8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002fa8:	4b09      	ldr	r3, [pc, #36]	; (8002fd0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002faa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002fac:	d3f9      	bcc.n	8002fa2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002fae:	f7ff ffd3 	bl	8002f58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002fb2:	f017 f805 	bl	8019fc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002fb6:	f7fe ffdb 	bl	8001f70 <main>
  bx  lr    
 8002fba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002fbc:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8002fc0:	0801d698 	.word	0x0801d698
  ldr  r0, =_sdata
 8002fc4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002fc8:	200013b4 	.word	0x200013b4
  ldr  r2, =_sbss
 8002fcc:	200013b4 	.word	0x200013b4
  ldr  r3, = _ebss
 8002fd0:	2000d66c 	.word	0x2000d66c

08002fd4 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002fd4:	e7fe      	b.n	8002fd4 <DMA1_Stream0_IRQHandler>
	...

08002fd8 <HTS221_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_RegisterBusIO(HTS221_Object_t *pObj, HTS221_IO_t *pIO)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d103      	bne.n	8002ff0 <HTS221_RegisterBusIO+0x18>
  {
    ret = HTS221_ERROR;
 8002fe8:	f04f 33ff 	mov.w	r3, #4294967295
 8002fec:	60fb      	str	r3, [r7, #12]
 8002fee:	e030      	b.n	8003052 <HTS221_RegisterBusIO+0x7a>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685a      	ldr	r2, [r3, #4]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	689a      	ldr	r2, [r3, #8]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	7b1a      	ldrb	r2, [r3, #12]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	691a      	ldr	r2, [r3, #16]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	695a      	ldr	r2, [r3, #20]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	699a      	ldr	r2, [r3, #24]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4a0c      	ldr	r2, [pc, #48]	; (800305c <HTS221_RegisterBusIO+0x84>)
 800302c:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a0b      	ldr	r2, [pc, #44]	; (8003060 <HTS221_RegisterBusIO+0x88>)
 8003032:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init != NULL)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d004      	beq.n	800304c <HTS221_RegisterBusIO+0x74>
    {
      ret = pObj->IO.Init();
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4798      	blx	r3
 8003048:	60f8      	str	r0, [r7, #12]
 800304a:	e002      	b.n	8003052 <HTS221_RegisterBusIO+0x7a>
    }
    else
    {
      ret = HTS221_ERROR;
 800304c:	f04f 33ff 	mov.w	r3, #4294967295
 8003050:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8003052:	68fb      	ldr	r3, [r7, #12]
}
 8003054:	4618      	mov	r0, r3
 8003056:	3710      	adds	r7, #16
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}
 800305c:	080036ed 	.word	0x080036ed
 8003060:	0800374f 	.word	0x0800374f

08003064 <HTS221_Init>:
 * @brief  Initialize the HTS221 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_Init(HTS221_Object_t *pObj)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003072:	2b00      	cmp	r3, #0
 8003074:	d108      	bne.n	8003088 <HTS221_Init+0x24>
  {
    if (HTS221_Initialize(pObj) != HTS221_OK)
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f000 fad5 	bl	8003626 <HTS221_Initialize>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d002      	beq.n	8003088 <HTS221_Init+0x24>
    {
      return HTS221_ERROR;
 8003082:	f04f 33ff 	mov.w	r3, #4294967295
 8003086:	e004      	b.n	8003092 <HTS221_Init+0x2e>
    }
  }

  pObj->is_initialized = 1;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return HTS221_OK;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3708      	adds	r7, #8
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}

0800309a <HTS221_DeInit>:
 * @brief  Deinitialize the HTS221 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_DeInit(HTS221_Object_t *pObj)
{
 800309a:	b580      	push	{r7, lr}
 800309c:	b082      	sub	sp, #8
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d111      	bne.n	80030d0 <HTS221_DeInit+0x36>
  {
    if (HTS221_HUM_Disable(pObj) != HTS221_OK)
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f000 f878 	bl	80031a2 <HTS221_HUM_Disable>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d002      	beq.n	80030be <HTS221_DeInit+0x24>
    {
      return HTS221_ERROR;
 80030b8:	f04f 33ff 	mov.w	r3, #4294967295
 80030bc:	e00d      	b.n	80030da <HTS221_DeInit+0x40>
    }

    if (HTS221_TEMP_Disable(pObj) != HTS221_OK)
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 f977 	bl	80033b2 <HTS221_TEMP_Disable>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d002      	beq.n	80030d0 <HTS221_DeInit+0x36>
    {
      return HTS221_ERROR;
 80030ca:	f04f 33ff 	mov.w	r3, #4294967295
 80030ce:	e004      	b.n	80030da <HTS221_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return HTS221_OK;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3708      	adds	r7, #8
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}

080030e2 <HTS221_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_ReadID(HTS221_Object_t *pObj, uint8_t *Id)
{
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b082      	sub	sp, #8
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
 80030ea:	6039      	str	r1, [r7, #0]
  if (hts221_device_id_get(&(pObj->Ctx), Id) != HTS221_OK)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	331c      	adds	r3, #28
 80030f0:	6839      	ldr	r1, [r7, #0]
 80030f2:	4618      	mov	r0, r3
 80030f4:	f000 fc32 	bl	800395c <hts221_device_id_get>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d002      	beq.n	8003104 <HTS221_ReadID+0x22>
  {
    return HTS221_ERROR;
 80030fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003102:	e000      	b.n	8003106 <HTS221_ReadID+0x24>
  }

  return HTS221_OK;
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3708      	adds	r7, #8
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
	...

08003110 <HTS221_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to HTS221 sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_GetCapabilities(HTS221_Object_t *pObj, HTS221_Capabilities_t *Capabilities)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 1;
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	2201      	movs	r2, #1
 800311e:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	2200      	movs	r2, #0
 8003124:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	2201      	movs	r2, #1
 800312a:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	2200      	movs	r2, #0
 8003130:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 12.5f;
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	4a07      	ldr	r2, [pc, #28]	; (8003154 <HTS221_GetCapabilities+0x44>)
 8003136:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 12.5f;
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	4a06      	ldr	r2, [pc, #24]	; (8003154 <HTS221_GetCapabilities+0x44>)
 800313c:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 0.0f;
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	f04f 0200 	mov.w	r2, #0
 8003144:	60da      	str	r2, [r3, #12]
  return HTS221_OK;
 8003146:	2300      	movs	r3, #0
}
 8003148:	4618      	mov	r0, r3
 800314a:	370c      	adds	r7, #12
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr
 8003154:	41480000 	.word	0x41480000

08003158 <HTS221_HUM_Enable>:
 * @brief  Enable the HTS221 humidity sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_Enable(HTS221_Object_t *pObj)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003166:	2b01      	cmp	r3, #1
 8003168:	d101      	bne.n	800316e <HTS221_HUM_Enable+0x16>
  {
    return HTS221_OK;
 800316a:	2300      	movs	r3, #0
 800316c:	e015      	b.n	800319a <HTS221_HUM_Enable+0x42>
  }

  /* Check if the HTS221 temperature sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->temp_is_enabled == 0U)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003174:	2b00      	cmp	r3, #0
 8003176:	d10b      	bne.n	8003190 <HTS221_HUM_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	331c      	adds	r3, #28
 800317c:	2101      	movs	r1, #1
 800317e:	4618      	mov	r0, r3
 8003180:	f000 fbfd 	bl	800397e <hts221_power_on_set>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d002      	beq.n	8003190 <HTS221_HUM_Enable+0x38>
    {
      return HTS221_ERROR;
 800318a:	f04f 33ff 	mov.w	r3, #4294967295
 800318e:	e004      	b.n	800319a <HTS221_HUM_Enable+0x42>
    }
  }

  pObj->hum_is_enabled = 1;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return HTS221_OK;
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3708      	adds	r7, #8
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <HTS221_HUM_Disable>:
 * @brief  Disable the HTS221 humidity sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_Disable(HTS221_Object_t *pObj)
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b082      	sub	sp, #8
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->hum_is_enabled == 0U)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d101      	bne.n	80031b8 <HTS221_HUM_Disable+0x16>
  {
    return HTS221_OK;
 80031b4:	2300      	movs	r3, #0
 80031b6:	e015      	b.n	80031e4 <HTS221_HUM_Disable+0x42>
  }

  /* Check if the HTS221 temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d10b      	bne.n	80031da <HTS221_HUM_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	331c      	adds	r3, #28
 80031c6:	2100      	movs	r1, #0
 80031c8:	4618      	mov	r0, r3
 80031ca:	f000 fbd8 	bl	800397e <hts221_power_on_set>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d002      	beq.n	80031da <HTS221_HUM_Disable+0x38>
    {
      return HTS221_ERROR;
 80031d4:	f04f 33ff 	mov.w	r3, #4294967295
 80031d8:	e004      	b.n	80031e4 <HTS221_HUM_Disable+0x42>
    }
  }

  pObj->hum_is_enabled = 0;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return HTS221_OK;
 80031e2:	2300      	movs	r3, #0
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3708      	adds	r7, #8
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <HTS221_HUM_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 80031f6:	6839      	ldr	r1, [r7, #0]
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f000 f9a1 	bl	8003540 <HTS221_GetOutputDataRate>
 80031fe:	4603      	mov	r3, r0
}
 8003200:	4618      	mov	r0, r3
 8003202:	3708      	adds	r7, #8
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}

08003208 <HTS221_HUM_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8003212:	6839      	ldr	r1, [r7, #0]
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f000 f9d7 	bl	80035c8 <HTS221_SetOutputDataRate>
 800321a:	4603      	mov	r3, r0
}
 800321c:	4618      	mov	r0, r3
 800321e:	3708      	adds	r7, #8
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <HTS221_HUM_GetHumidity>:
 * @param  pObj the device pObj
 * @param  Value pointer where the humidity value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_GetHumidity(HTS221_Object_t *pObj, float *Value)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b088      	sub	sp, #32
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_humidity;
  hts221_axis1bit16_t coeff;
  lin_t lin_hum;

  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	331c      	adds	r3, #28
 8003232:	f107 0218 	add.w	r2, r7, #24
 8003236:	4611      	mov	r1, r2
 8003238:	4618      	mov	r0, r3
 800323a:	f000 fc48 	bl	8003ace <hts221_hum_adc_point_0_get>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d002      	beq.n	800324a <HTS221_HUM_GetHumidity+0x26>
  {
    return HTS221_ERROR;
 8003244:	f04f 33ff 	mov.w	r3, #4294967295
 8003248:	e086      	b.n	8003358 <HTS221_HUM_GetHumidity+0x134>
  }

  lin_hum.x0 = (float)coeff.i16bit;
 800324a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800324e:	ee07 3a90 	vmov	s15, r3
 8003252:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003256:	edc7 7a02 	vstr	s15, [r7, #8]

  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	331c      	adds	r3, #28
 800325e:	f107 0218 	add.w	r2, r7, #24
 8003262:	4611      	mov	r1, r2
 8003264:	4618      	mov	r0, r3
 8003266:	f000 fbb0 	bl	80039ca <hts221_hum_rh_point_0_get>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d002      	beq.n	8003276 <HTS221_HUM_GetHumidity+0x52>
  {
    return HTS221_ERROR;
 8003270:	f04f 33ff 	mov.w	r3, #4294967295
 8003274:	e070      	b.n	8003358 <HTS221_HUM_GetHumidity+0x134>
  }

  lin_hum.y0 = (float)coeff.u8bit[0];
 8003276:	7e3b      	ldrb	r3, [r7, #24]
 8003278:	ee07 3a90 	vmov	s15, r3
 800327c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003280:	edc7 7a03 	vstr	s15, [r7, #12]

  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	331c      	adds	r3, #28
 8003288:	f107 0218 	add.w	r2, r7, #24
 800328c:	4611      	mov	r1, r2
 800328e:	4618      	mov	r0, r3
 8003290:	f000 fc2e 	bl	8003af0 <hts221_hum_adc_point_1_get>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d002      	beq.n	80032a0 <HTS221_HUM_GetHumidity+0x7c>
  {
    return HTS221_ERROR;
 800329a:	f04f 33ff 	mov.w	r3, #4294967295
 800329e:	e05b      	b.n	8003358 <HTS221_HUM_GetHumidity+0x134>
  }

  lin_hum.x1 = (float)coeff.i16bit;
 80032a0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80032a4:	ee07 3a90 	vmov	s15, r3
 80032a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032ac:	edc7 7a04 	vstr	s15, [r7, #16]

  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	331c      	adds	r3, #28
 80032b4:	f107 0218 	add.w	r2, r7, #24
 80032b8:	4611      	mov	r1, r2
 80032ba:	4618      	mov	r0, r3
 80032bc:	f000 fb9c 	bl	80039f8 <hts221_hum_rh_point_1_get>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d002      	beq.n	80032cc <HTS221_HUM_GetHumidity+0xa8>
  {
    return HTS221_ERROR;
 80032c6:	f04f 33ff 	mov.w	r3, #4294967295
 80032ca:	e045      	b.n	8003358 <HTS221_HUM_GetHumidity+0x134>
  }

  lin_hum.y1 = (float)coeff.u8bit[0];
 80032cc:	7e3b      	ldrb	r3, [r7, #24]
 80032ce:	ee07 3a90 	vmov	s15, r3
 80032d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032d6:	edc7 7a05 	vstr	s15, [r7, #20]

  (void)memset(data_raw_humidity.u8bit, 0x00, sizeof(int16_t));
 80032da:	f107 031c 	add.w	r3, r7, #28
 80032de:	2202      	movs	r2, #2
 80032e0:	2100      	movs	r1, #0
 80032e2:	4618      	mov	r0, r3
 80032e4:	f016 fe9b 	bl	801a01e <memset>
  if (hts221_humidity_raw_get(&(pObj->Ctx), data_raw_humidity.u8bit) != HTS221_OK)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	331c      	adds	r3, #28
 80032ec:	f107 021c 	add.w	r2, r7, #28
 80032f0:	4611      	mov	r1, r2
 80032f2:	4618      	mov	r0, r3
 80032f4:	f000 fb10 	bl	8003918 <hts221_humidity_raw_get>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d002      	beq.n	8003304 <HTS221_HUM_GetHumidity+0xe0>
  {
    return HTS221_ERROR;
 80032fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003302:	e029      	b.n	8003358 <HTS221_HUM_GetHumidity+0x134>
  }

  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 8003304:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003308:	ee07 3a90 	vmov	s15, r3
 800330c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003310:	f107 0308 	add.w	r3, r7, #8
 8003314:	ee17 1a90 	vmov	r1, s15
 8003318:	4618      	mov	r0, r3
 800331a:	f000 f9b0 	bl	800367e <Linear_Interpolation>
 800331e:	4602      	mov	r2, r0
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	601a      	str	r2, [r3, #0]

  if (*Value < 0.0f)
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	edd3 7a00 	vldr	s15, [r3]
 800332a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800332e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003332:	d503      	bpl.n	800333c <HTS221_HUM_GetHumidity+0x118>
  {
    *Value = 0.0f;
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	f04f 0200 	mov.w	r2, #0
 800333a:	601a      	str	r2, [r3, #0]
  }

  if (*Value > 100.0f)
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	edd3 7a00 	vldr	s15, [r3]
 8003342:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8003360 <HTS221_HUM_GetHumidity+0x13c>
 8003346:	eef4 7ac7 	vcmpe.f32	s15, s14
 800334a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800334e:	dd02      	ble.n	8003356 <HTS221_HUM_GetHumidity+0x132>
  {
    *Value = 100.0f;
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	4a04      	ldr	r2, [pc, #16]	; (8003364 <HTS221_HUM_GetHumidity+0x140>)
 8003354:	601a      	str	r2, [r3, #0]
  }

  return HTS221_OK;
 8003356:	2300      	movs	r3, #0
}
 8003358:	4618      	mov	r0, r3
 800335a:	3720      	adds	r7, #32
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	42c80000 	.word	0x42c80000
 8003364:	42c80000 	.word	0x42c80000

08003368 <HTS221_TEMP_Enable>:
 * @brief  Enable the HTS221 temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_Enable(HTS221_Object_t *pObj)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003376:	2b01      	cmp	r3, #1
 8003378:	d101      	bne.n	800337e <HTS221_TEMP_Enable+0x16>
  {
    return HTS221_OK;
 800337a:	2300      	movs	r3, #0
 800337c:	e015      	b.n	80033aa <HTS221_TEMP_Enable+0x42>
  }

  /* Check if the HTS221 humidity sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->hum_is_enabled == 0U)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003384:	2b00      	cmp	r3, #0
 8003386:	d10b      	bne.n	80033a0 <HTS221_TEMP_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	331c      	adds	r3, #28
 800338c:	2101      	movs	r1, #1
 800338e:	4618      	mov	r0, r3
 8003390:	f000 faf5 	bl	800397e <hts221_power_on_set>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d002      	beq.n	80033a0 <HTS221_TEMP_Enable+0x38>
    {
      return HTS221_ERROR;
 800339a:	f04f 33ff 	mov.w	r3, #4294967295
 800339e:	e004      	b.n	80033aa <HTS221_TEMP_Enable+0x42>
    }
  }

  pObj->temp_is_enabled = 1;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HTS221_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3708      	adds	r7, #8
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <HTS221_TEMP_Disable>:
 * @brief  Disable the HTS221 temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_Disable(HTS221_Object_t *pObj)
{
 80033b2:	b580      	push	{r7, lr}
 80033b4:	b082      	sub	sp, #8
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d101      	bne.n	80033c8 <HTS221_TEMP_Disable+0x16>
  {
    return HTS221_OK;
 80033c4:	2300      	movs	r3, #0
 80033c6:	e015      	b.n	80033f4 <HTS221_TEMP_Disable+0x42>
  }

  /* Check if the HTS221 humidity sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->hum_is_enabled == 0U)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d10b      	bne.n	80033ea <HTS221_TEMP_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	331c      	adds	r3, #28
 80033d6:	2100      	movs	r1, #0
 80033d8:	4618      	mov	r0, r3
 80033da:	f000 fad0 	bl	800397e <hts221_power_on_set>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d002      	beq.n	80033ea <HTS221_TEMP_Disable+0x38>
    {
      return HTS221_ERROR;
 80033e4:	f04f 33ff 	mov.w	r3, #4294967295
 80033e8:	e004      	b.n	80033f4 <HTS221_TEMP_Disable+0x42>
    }
  }

  pObj->temp_is_enabled = 0;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HTS221_OK;
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3708      	adds	r7, #8
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <HTS221_TEMP_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 8003406:	6839      	ldr	r1, [r7, #0]
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f000 f899 	bl	8003540 <HTS221_GetOutputDataRate>
 800340e:	4603      	mov	r3, r0
}
 8003410:	4618      	mov	r0, r3
 8003412:	3708      	adds	r7, #8
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <HTS221_TEMP_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8003422:	6839      	ldr	r1, [r7, #0]
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f000 f8cf 	bl	80035c8 <HTS221_SetOutputDataRate>
 800342a:	4603      	mov	r3, r0
}
 800342c:	4618      	mov	r0, r3
 800342e:	3708      	adds	r7, #8
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}

08003434 <HTS221_TEMP_GetTemperature>:
 * @param  pObj the device pObj
 * @param  Value pointer where the temperature value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_GetTemperature(HTS221_Object_t *pObj, float *Value)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b088      	sub	sp, #32
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_temperature;
  hts221_axis1bit16_t coeff;
  lin_t lin_temp;

  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	331c      	adds	r3, #28
 8003442:	f107 0218 	add.w	r2, r7, #24
 8003446:	4611      	mov	r1, r2
 8003448:	4618      	mov	r0, r3
 800344a:	f000 fb62 	bl	8003b12 <hts221_temp_adc_point_0_get>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d002      	beq.n	800345a <HTS221_TEMP_GetTemperature+0x26>
  {
    return HTS221_ERROR;
 8003454:	f04f 33ff 	mov.w	r3, #4294967295
 8003458:	e06d      	b.n	8003536 <HTS221_TEMP_GetTemperature+0x102>
  }

  lin_temp.x0 = (float)coeff.i16bit;
 800345a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800345e:	ee07 3a90 	vmov	s15, r3
 8003462:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003466:	edc7 7a02 	vstr	s15, [r7, #8]

  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	331c      	adds	r3, #28
 800346e:	f107 0218 	add.w	r2, r7, #24
 8003472:	4611      	mov	r1, r2
 8003474:	4618      	mov	r0, r3
 8003476:	f000 fad6 	bl	8003a26 <hts221_temp_deg_point_0_get>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d002      	beq.n	8003486 <HTS221_TEMP_GetTemperature+0x52>
  {
    return HTS221_ERROR;
 8003480:	f04f 33ff 	mov.w	r3, #4294967295
 8003484:	e057      	b.n	8003536 <HTS221_TEMP_GetTemperature+0x102>
  }

  lin_temp.y0 = (float)coeff.u8bit[0];
 8003486:	7e3b      	ldrb	r3, [r7, #24]
 8003488:	ee07 3a90 	vmov	s15, r3
 800348c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003490:	edc7 7a03 	vstr	s15, [r7, #12]

  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	331c      	adds	r3, #28
 8003498:	f107 0218 	add.w	r2, r7, #24
 800349c:	4611      	mov	r1, r2
 800349e:	4618      	mov	r0, r3
 80034a0:	f000 fb48 	bl	8003b34 <hts221_temp_adc_point_1_get>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d002      	beq.n	80034b0 <HTS221_TEMP_GetTemperature+0x7c>
  {
    return HTS221_ERROR;
 80034aa:	f04f 33ff 	mov.w	r3, #4294967295
 80034ae:	e042      	b.n	8003536 <HTS221_TEMP_GetTemperature+0x102>
  }

  lin_temp.x1 = (float)coeff.i16bit;
 80034b0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80034b4:	ee07 3a90 	vmov	s15, r3
 80034b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034bc:	edc7 7a04 	vstr	s15, [r7, #16]

  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	331c      	adds	r3, #28
 80034c4:	f107 0218 	add.w	r2, r7, #24
 80034c8:	4611      	mov	r1, r2
 80034ca:	4618      	mov	r0, r3
 80034cc:	f000 fad5 	bl	8003a7a <hts221_temp_deg_point_1_get>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d002      	beq.n	80034dc <HTS221_TEMP_GetTemperature+0xa8>
  {
    return HTS221_ERROR;
 80034d6:	f04f 33ff 	mov.w	r3, #4294967295
 80034da:	e02c      	b.n	8003536 <HTS221_TEMP_GetTemperature+0x102>
  }

  lin_temp.y1 = (float)coeff.u8bit[0];
 80034dc:	7e3b      	ldrb	r3, [r7, #24]
 80034de:	ee07 3a90 	vmov	s15, r3
 80034e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034e6:	edc7 7a05 	vstr	s15, [r7, #20]

  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 80034ea:	f107 031c 	add.w	r3, r7, #28
 80034ee:	2202      	movs	r2, #2
 80034f0:	2100      	movs	r1, #0
 80034f2:	4618      	mov	r0, r3
 80034f4:	f016 fd93 	bl	801a01e <memset>
  if (hts221_temperature_raw_get(&(pObj->Ctx), data_raw_temperature.u8bit) != HTS221_OK)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	331c      	adds	r3, #28
 80034fc:	f107 021c 	add.w	r2, r7, #28
 8003500:	4611      	mov	r1, r2
 8003502:	4618      	mov	r0, r3
 8003504:	f000 fa19 	bl	800393a <hts221_temperature_raw_get>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d002      	beq.n	8003514 <HTS221_TEMP_GetTemperature+0xe0>
  {
    return HTS221_ERROR;
 800350e:	f04f 33ff 	mov.w	r3, #4294967295
 8003512:	e010      	b.n	8003536 <HTS221_TEMP_GetTemperature+0x102>
  }

  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 8003514:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003518:	ee07 3a90 	vmov	s15, r3
 800351c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003520:	f107 0308 	add.w	r3, r7, #8
 8003524:	ee17 1a90 	vmov	r1, s15
 8003528:	4618      	mov	r0, r3
 800352a:	f000 f8a8 	bl	800367e <Linear_Interpolation>
 800352e:	4602      	mov	r2, r0
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	601a      	str	r2, [r3, #0]

  return HTS221_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3720      	adds	r7, #32
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
	...

08003540 <HTS221_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
  int32_t ret = HTS221_OK;
 800354a:	2300      	movs	r3, #0
 800354c:	60fb      	str	r3, [r7, #12]
  hts221_odr_t odr_low_level;

  if (hts221_data_rate_get(&(pObj->Ctx), &odr_low_level) != HTS221_OK)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	331c      	adds	r3, #28
 8003552:	f107 020b 	add.w	r2, r7, #11
 8003556:	4611      	mov	r1, r2
 8003558:	4618      	mov	r0, r3
 800355a:	f000 f97f 	bl	800385c <hts221_data_rate_get>
 800355e:	4603      	mov	r3, r0
 8003560:	2b00      	cmp	r3, #0
 8003562:	d002      	beq.n	800356a <HTS221_GetOutputDataRate+0x2a>
  {
    return HTS221_ERROR;
 8003564:	f04f 33ff 	mov.w	r3, #4294967295
 8003568:	e025      	b.n	80035b6 <HTS221_GetOutputDataRate+0x76>
  }

  switch (odr_low_level)
 800356a:	7afb      	ldrb	r3, [r7, #11]
 800356c:	2b03      	cmp	r3, #3
 800356e:	d81d      	bhi.n	80035ac <HTS221_GetOutputDataRate+0x6c>
 8003570:	a201      	add	r2, pc, #4	; (adr r2, 8003578 <HTS221_GetOutputDataRate+0x38>)
 8003572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003576:	bf00      	nop
 8003578:	08003589 	.word	0x08003589
 800357c:	08003593 	.word	0x08003593
 8003580:	0800359d 	.word	0x0800359d
 8003584:	080035a5 	.word	0x080035a5
  {
    case HTS221_ONE_SHOT:
      *Odr = 0.0f;
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	f04f 0200 	mov.w	r2, #0
 800358e:	601a      	str	r2, [r3, #0]
      break;
 8003590:	e010      	b.n	80035b4 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_1Hz:
      *Odr = 1.0f;
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003598:	601a      	str	r2, [r3, #0]
      break;
 800359a:	e00b      	b.n	80035b4 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_7Hz:
      *Odr = 7.0f;
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	4a08      	ldr	r2, [pc, #32]	; (80035c0 <HTS221_GetOutputDataRate+0x80>)
 80035a0:	601a      	str	r2, [r3, #0]
      break;
 80035a2:	e007      	b.n	80035b4 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_12Hz5:
      *Odr = 12.5f;
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	4a07      	ldr	r2, [pc, #28]	; (80035c4 <HTS221_GetOutputDataRate+0x84>)
 80035a8:	601a      	str	r2, [r3, #0]
      break;
 80035aa:	e003      	b.n	80035b4 <HTS221_GetOutputDataRate+0x74>

    default:
      ret = HTS221_ERROR;
 80035ac:	f04f 33ff 	mov.w	r3, #4294967295
 80035b0:	60fb      	str	r3, [r7, #12]
      break;
 80035b2:	bf00      	nop
  }

  return ret;
 80035b4:	68fb      	ldr	r3, [r7, #12]
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	40e00000 	.word	0x40e00000
 80035c4:	41480000 	.word	0x41480000

080035c8 <HTS221_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
  hts221_odr_t new_odr;

  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 80035d2:	edd7 7a00 	vldr	s15, [r7]
 80035d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80035da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035e2:	d801      	bhi.n	80035e8 <HTS221_SetOutputDataRate+0x20>
 80035e4:	2301      	movs	r3, #1
 80035e6:	e00b      	b.n	8003600 <HTS221_SetOutputDataRate+0x38>
 80035e8:	edd7 7a00 	vldr	s15, [r7]
 80035ec:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 80035f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035f8:	d801      	bhi.n	80035fe <HTS221_SetOutputDataRate+0x36>
 80035fa:	2302      	movs	r3, #2
 80035fc:	e000      	b.n	8003600 <HTS221_SetOutputDataRate+0x38>
 80035fe:	2303      	movs	r3, #3
  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
 8003600:	73fb      	strb	r3, [r7, #15]
            :                 HTS221_ODR_12Hz5;

  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	331c      	adds	r3, #28
 8003606:	7bfa      	ldrb	r2, [r7, #15]
 8003608:	4611      	mov	r1, r2
 800360a:	4618      	mov	r0, r3
 800360c:	f000 f900 	bl	8003810 <hts221_data_rate_set>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d002      	beq.n	800361c <HTS221_SetOutputDataRate+0x54>
  {
    return HTS221_ERROR;
 8003616:	f04f 33ff 	mov.w	r3, #4294967295
 800361a:	e000      	b.n	800361e <HTS221_SetOutputDataRate+0x56>
  }

  return HTS221_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3710      	adds	r7, #16
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}

08003626 <HTS221_Initialize>:
 * @brief  Initialize the HTS221 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_Initialize(HTS221_Object_t *pObj)
{
 8003626:	b580      	push	{r7, lr}
 8003628:	b082      	sub	sp, #8
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
  /* Power off the component. */
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	331c      	adds	r3, #28
 8003632:	2100      	movs	r1, #0
 8003634:	4618      	mov	r0, r3
 8003636:	f000 f9a2 	bl	800397e <hts221_power_on_set>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d002      	beq.n	8003646 <HTS221_Initialize+0x20>
  {
    return HTS221_ERROR;
 8003640:	f04f 33ff 	mov.w	r3, #4294967295
 8003644:	e017      	b.n	8003676 <HTS221_Initialize+0x50>
  }

  /* Enable BDU */
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	331c      	adds	r3, #28
 800364a:	2101      	movs	r1, #1
 800364c:	4618      	mov	r0, r3
 800364e:	f000 f93d 	bl	80038cc <hts221_block_data_update_set>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d002      	beq.n	800365e <HTS221_Initialize+0x38>
  {
    return HTS221_ERROR;
 8003658:	f04f 33ff 	mov.w	r3, #4294967295
 800365c:	e00b      	b.n	8003676 <HTS221_Initialize+0x50>
  }

  /* Set default ODR */
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 800365e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f7ff ffb0 	bl	80035c8 <HTS221_SetOutputDataRate>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d002      	beq.n	8003674 <HTS221_Initialize+0x4e>
  {
    return HTS221_ERROR;
 800366e:	f04f 33ff 	mov.w	r3, #4294967295
 8003672:	e000      	b.n	8003676 <HTS221_Initialize+0x50>
  }

  return HTS221_OK;
 8003674:	2300      	movs	r3, #0
}
 8003676:	4618      	mov	r0, r3
 8003678:	3708      	adds	r7, #8
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}

0800367e <Linear_Interpolation>:
 * @param  Lin the line
 * @param  Coeff the coefficient
 * @retval Calculation result
 */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
 800367e:	b480      	push	{r7}
 8003680:	b083      	sub	sp, #12
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
 8003686:	6039      	str	r1, [r7, #0]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	ed93 7a03 	vldr	s14, [r3, #12]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	edd3 7a01 	vldr	s15, [r3, #4]
 8003694:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003698:	edd7 7a00 	vldr	s15, [r7]
 800369c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	edd3 6a02 	vldr	s13, [r3, #8]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	edd3 7a01 	vldr	s15, [r3, #4]
 80036ac:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	ed93 6a00 	vldr	s12, [r3]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	edd3 7a03 	vldr	s15, [r3, #12]
 80036bc:	ee66 7a27 	vmul.f32	s15, s12, s15
 80036c0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80036c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	edd3 6a02 	vldr	s13, [r3, #8]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	edd3 7a00 	vldr	s15, [r3]
 80036d4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80036d8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80036dc:	ee16 3a90 	vmov	r3, s13
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr

080036ec <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80036ec:	b590      	push	{r4, r7, lr}
 80036ee:	b087      	sub	sp, #28
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	607a      	str	r2, [r7, #4]
 80036f6:	461a      	mov	r2, r3
 80036f8:	460b      	mov	r3, r1
 80036fa:	72fb      	strb	r3, [r7, #11]
 80036fc:	4613      	mov	r3, r2
 80036fe:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d10e      	bne.n	800372a <ReadRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	695c      	ldr	r4, [r3, #20]
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	7b1b      	ldrb	r3, [r3, #12]
 8003714:	b298      	uxth	r0, r3
 8003716:	7afb      	ldrb	r3, [r7, #11]
 8003718:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800371c:	b2db      	uxtb	r3, r3
 800371e:	b299      	uxth	r1, r3
 8003720:	893b      	ldrh	r3, [r7, #8]
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	47a0      	blx	r4
 8003726:	4603      	mov	r3, r0
 8003728:	e00d      	b.n	8003746 <ReadRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	695c      	ldr	r4, [r3, #20]
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	7b1b      	ldrb	r3, [r3, #12]
 8003732:	b298      	uxth	r0, r3
 8003734:	7afb      	ldrb	r3, [r7, #11]
 8003736:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800373a:	b2db      	uxtb	r3, r3
 800373c:	b299      	uxth	r1, r3
 800373e:	893b      	ldrh	r3, [r7, #8]
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	47a0      	blx	r4
 8003744:	4603      	mov	r3, r0
  }
}
 8003746:	4618      	mov	r0, r3
 8003748:	371c      	adds	r7, #28
 800374a:	46bd      	mov	sp, r7
 800374c:	bd90      	pop	{r4, r7, pc}

0800374e <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800374e:	b590      	push	{r4, r7, lr}
 8003750:	b087      	sub	sp, #28
 8003752:	af00      	add	r7, sp, #0
 8003754:	60f8      	str	r0, [r7, #12]
 8003756:	607a      	str	r2, [r7, #4]
 8003758:	461a      	mov	r2, r3
 800375a:	460b      	mov	r3, r1
 800375c:	72fb      	strb	r3, [r7, #11]
 800375e:	4613      	mov	r3, r2
 8003760:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d10e      	bne.n	800378c <WriteRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	691c      	ldr	r4, [r3, #16]
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	7b1b      	ldrb	r3, [r3, #12]
 8003776:	b298      	uxth	r0, r3
 8003778:	7afb      	ldrb	r3, [r7, #11]
 800377a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800377e:	b2db      	uxtb	r3, r3
 8003780:	b299      	uxth	r1, r3
 8003782:	893b      	ldrh	r3, [r7, #8]
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	47a0      	blx	r4
 8003788:	4603      	mov	r3, r0
 800378a:	e00d      	b.n	80037a8 <WriteRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	691c      	ldr	r4, [r3, #16]
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	7b1b      	ldrb	r3, [r3, #12]
 8003794:	b298      	uxth	r0, r3
 8003796:	7afb      	ldrb	r3, [r7, #11]
 8003798:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800379c:	b2db      	uxtb	r3, r3
 800379e:	b299      	uxth	r1, r3
 80037a0:	893b      	ldrh	r3, [r7, #8]
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	47a0      	blx	r4
 80037a6:	4603      	mov	r3, r0
  }
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	371c      	adds	r7, #28
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd90      	pop	{r4, r7, pc}

080037b0 <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                        uint16_t len)
{
 80037b0:	b590      	push	{r4, r7, lr}
 80037b2:	b087      	sub	sp, #28
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	607a      	str	r2, [r7, #4]
 80037ba:	461a      	mov	r2, r3
 80037bc:	460b      	mov	r3, r1
 80037be:	72fb      	strb	r3, [r7, #11]
 80037c0:	4613      	mov	r3, r2
 80037c2:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	685c      	ldr	r4, [r3, #4]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6898      	ldr	r0, [r3, #8]
 80037cc:	893b      	ldrh	r3, [r7, #8]
 80037ce:	7af9      	ldrb	r1, [r7, #11]
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	47a0      	blx	r4
 80037d4:	6178      	str	r0, [r7, #20]
  return ret;
 80037d6:	697b      	ldr	r3, [r7, #20]
}
 80037d8:	4618      	mov	r0, r3
 80037da:	371c      	adds	r7, #28
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd90      	pop	{r4, r7, pc}

080037e0 <hts221_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 80037e0:	b590      	push	{r4, r7, lr}
 80037e2:	b087      	sub	sp, #28
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	607a      	str	r2, [r7, #4]
 80037ea:	461a      	mov	r2, r3
 80037ec:	460b      	mov	r3, r1
 80037ee:	72fb      	strb	r3, [r7, #11]
 80037f0:	4613      	mov	r3, r2
 80037f2:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681c      	ldr	r4, [r3, #0]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6898      	ldr	r0, [r3, #8]
 80037fc:	893b      	ldrh	r3, [r7, #8]
 80037fe:	7af9      	ldrb	r1, [r7, #11]
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	47a0      	blx	r4
 8003804:	6178      	str	r0, [r7, #20]
  return ret;
 8003806:	697b      	ldr	r3, [r7, #20]
}
 8003808:	4618      	mov	r0, r3
 800380a:	371c      	adds	r7, #28
 800380c:	46bd      	mov	sp, r7
 800380e:	bd90      	pop	{r4, r7, pc}

08003810 <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	460b      	mov	r3, r1
 800381a:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 800381c:	f107 0208 	add.w	r2, r7, #8
 8003820:	2301      	movs	r3, #1
 8003822:	2120      	movs	r1, #32
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f7ff ffc3 	bl	80037b0 <hts221_read_reg>
 800382a:	60f8      	str	r0, [r7, #12]

  if(ret == 0){
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d10f      	bne.n	8003852 <hts221_data_rate_set+0x42>
    reg.odr = (uint8_t)val;
 8003832:	78fb      	ldrb	r3, [r7, #3]
 8003834:	f003 0303 	and.w	r3, r3, #3
 8003838:	b2da      	uxtb	r2, r3
 800383a:	7a3b      	ldrb	r3, [r7, #8]
 800383c:	f362 0301 	bfi	r3, r2, #0, #2
 8003840:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 8003842:	f107 0208 	add.w	r2, r7, #8
 8003846:	2301      	movs	r3, #1
 8003848:	2120      	movs	r1, #32
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f7ff ffc8 	bl	80037e0 <hts221_write_reg>
 8003850:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003852:	68fb      	ldr	r3, [r7, #12]
}
 8003854:	4618      	mov	r0, r3
 8003856:	3710      	adds	r7, #16
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <hts221_data_rate_get>:
  * @param  val     Get the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_get(stmdev_ctx_t *ctx, hts221_odr_t *val)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 8003866:	f107 0208 	add.w	r2, r7, #8
 800386a:	2301      	movs	r3, #1
 800386c:	2120      	movs	r1, #32
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f7ff ff9e 	bl	80037b0 <hts221_read_reg>
 8003874:	60f8      	str	r0, [r7, #12]

  switch (reg.odr) {
 8003876:	7a3b      	ldrb	r3, [r7, #8]
 8003878:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b03      	cmp	r3, #3
 8003880:	d81a      	bhi.n	80038b8 <hts221_data_rate_get+0x5c>
 8003882:	a201      	add	r2, pc, #4	; (adr r2, 8003888 <hts221_data_rate_get+0x2c>)
 8003884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003888:	08003899 	.word	0x08003899
 800388c:	080038a1 	.word	0x080038a1
 8003890:	080038a9 	.word	0x080038a9
 8003894:	080038b1 	.word	0x080038b1
    case HTS221_ONE_SHOT:
      *val = HTS221_ONE_SHOT;
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	2200      	movs	r2, #0
 800389c:	701a      	strb	r2, [r3, #0]
      break;
 800389e:	e00f      	b.n	80038c0 <hts221_data_rate_get+0x64>
    case HTS221_ODR_1Hz:
      *val = HTS221_ODR_1Hz;
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	2201      	movs	r2, #1
 80038a4:	701a      	strb	r2, [r3, #0]
      break;
 80038a6:	e00b      	b.n	80038c0 <hts221_data_rate_get+0x64>
    case HTS221_ODR_7Hz:
      *val = HTS221_ODR_7Hz;
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	2202      	movs	r2, #2
 80038ac:	701a      	strb	r2, [r3, #0]
      break;
 80038ae:	e007      	b.n	80038c0 <hts221_data_rate_get+0x64>
    case HTS221_ODR_12Hz5:
      *val = HTS221_ODR_12Hz5;
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	2203      	movs	r2, #3
 80038b4:	701a      	strb	r2, [r3, #0]
      break;
 80038b6:	e003      	b.n	80038c0 <hts221_data_rate_get+0x64>
    default:
      *val = HTS221_ODR_ND;
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	2204      	movs	r2, #4
 80038bc:	701a      	strb	r2, [r3, #0]
      break;
 80038be:	bf00      	nop
  }

  return ret;
 80038c0:	68fb      	ldr	r3, [r7, #12]
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3710      	adds	r7, #16
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop

080038cc <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	460b      	mov	r3, r1
 80038d6:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 80038d8:	f107 0208 	add.w	r2, r7, #8
 80038dc:	2301      	movs	r3, #1
 80038de:	2120      	movs	r1, #32
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f7ff ff65 	bl	80037b0 <hts221_read_reg>
 80038e6:	60f8      	str	r0, [r7, #12]

  if(ret == 0){
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d10f      	bne.n	800390e <hts221_block_data_update_set+0x42>
    reg.bdu = val;
 80038ee:	78fb      	ldrb	r3, [r7, #3]
 80038f0:	f003 0301 	and.w	r3, r3, #1
 80038f4:	b2da      	uxtb	r2, r3
 80038f6:	7a3b      	ldrb	r3, [r7, #8]
 80038f8:	f362 0382 	bfi	r3, r2, #2, #1
 80038fc:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 80038fe:	f107 0208 	add.w	r2, r7, #8
 8003902:	2301      	movs	r3, #1
 8003904:	2120      	movs	r1, #32
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f7ff ff6a 	bl	80037e0 <hts221_write_reg>
 800390c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800390e:	68fb      	ldr	r3, [r7, #12]
}
 8003910:	4618      	mov	r0, r3
 8003912:	3710      	adds	r7, #16
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 8003922:	2302      	movs	r3, #2
 8003924:	683a      	ldr	r2, [r7, #0]
 8003926:	2128      	movs	r1, #40	; 0x28
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f7ff ff41 	bl	80037b0 <hts221_read_reg>
 800392e:	60f8      	str	r0, [r7, #12]
  return ret;
 8003930:	68fb      	ldr	r3, [r7, #12]
}
 8003932:	4618      	mov	r0, r3
 8003934:	3710      	adds	r7, #16
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}

0800393a <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800393a:	b580      	push	{r7, lr}
 800393c:	b084      	sub	sp, #16
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
 8003942:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 8003944:	2302      	movs	r3, #2
 8003946:	683a      	ldr	r2, [r7, #0]
 8003948:	212a      	movs	r1, #42	; 0x2a
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f7ff ff30 	bl	80037b0 <hts221_read_reg>
 8003950:	60f8      	str	r0, [r7, #12]
  return ret;
 8003952:	68fb      	ldr	r3, [r7, #12]
}
 8003954:	4618      	mov	r0, r3
 8003956:	3710      	adds	r7, #16
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 8003966:	2301      	movs	r3, #1
 8003968:	683a      	ldr	r2, [r7, #0]
 800396a:	210f      	movs	r1, #15
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f7ff ff1f 	bl	80037b0 <hts221_read_reg>
 8003972:	60f8      	str	r0, [r7, #12]
  return ret;
 8003974:	68fb      	ldr	r3, [r7, #12]
}
 8003976:	4618      	mov	r0, r3
 8003978:	3710      	adds	r7, #16
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}

0800397e <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800397e:	b580      	push	{r7, lr}
 8003980:	b084      	sub	sp, #16
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
 8003986:	460b      	mov	r3, r1
 8003988:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 800398a:	f107 0208 	add.w	r2, r7, #8
 800398e:	2301      	movs	r3, #1
 8003990:	2120      	movs	r1, #32
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f7ff ff0c 	bl	80037b0 <hts221_read_reg>
 8003998:	60f8      	str	r0, [r7, #12]

  if(ret == 0){
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d10f      	bne.n	80039c0 <hts221_power_on_set+0x42>
    reg.pd = val;
 80039a0:	78fb      	ldrb	r3, [r7, #3]
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	b2da      	uxtb	r2, r3
 80039a8:	7a3b      	ldrb	r3, [r7, #8]
 80039aa:	f362 13c7 	bfi	r3, r2, #7, #1
 80039ae:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 80039b0:	f107 0208 	add.w	r2, r7, #8
 80039b4:	2301      	movs	r3, #1
 80039b6:	2120      	movs	r1, #32
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f7ff ff11 	bl	80037e0 <hts221_write_reg>
 80039be:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80039c0:	68fb      	ldr	r3, [r7, #12]
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3710      	adds	r7, #16
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}

080039ca <hts221_hum_rh_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80039ca:	b580      	push	{r7, lr}
 80039cc:	b084      	sub	sp, #16
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
 80039d2:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, buff, 1);
 80039d4:	2301      	movs	r3, #1
 80039d6:	683a      	ldr	r2, [r7, #0]
 80039d8:	2130      	movs	r1, #48	; 0x30
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f7ff fee8 	bl	80037b0 <hts221_read_reg>
 80039e0:	60f8      	str	r0, [r7, #12]
  *buff = (uint8_t)(((uint16_t)(*buff) >> 1) & 0x7FFFu);
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	085b      	lsrs	r3, r3, #1
 80039e8:	b2da      	uxtb	r2, r3
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	701a      	strb	r2, [r3, #0]

  return ret;
 80039ee:	68fb      	ldr	r3, [r7, #12]
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3710      	adds	r7, #16
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <hts221_hum_rh_point_1_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, buff, 1);
 8003a02:	2301      	movs	r3, #1
 8003a04:	683a      	ldr	r2, [r7, #0]
 8003a06:	2131      	movs	r1, #49	; 0x31
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f7ff fed1 	bl	80037b0 <hts221_read_reg>
 8003a0e:	60f8      	str	r0, [r7, #12]
  *buff = (uint8_t)(((uint16_t)(*buff) >> 1) & 0x7FFFu);
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	085b      	lsrs	r3, r3, #1
 8003a16:	b2da      	uxtb	r2, r3
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	701a      	strb	r2, [r3, #0]

  return ret;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3710      	adds	r7, #16
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}

08003a26 <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003a26:	b580      	push	{r7, lr}
 8003a28:	b086      	sub	sp, #24
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
 8003a2e:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 8003a30:	f107 020f 	add.w	r2, r7, #15
 8003a34:	2301      	movs	r3, #1
 8003a36:	2132      	movs	r1, #50	; 0x32
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f7ff feb9 	bl	80037b0 <hts221_read_reg>
 8003a3e:	6178      	str	r0, [r7, #20]

  if(ret == 0){
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d114      	bne.n	8003a70 <hts221_temp_deg_point_0_get+0x4a>
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t*) &reg, 1);
 8003a46:	f107 0210 	add.w	r2, r7, #16
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	2135      	movs	r1, #53	; 0x35
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f7ff feae 	bl	80037b0 <hts221_read_reg>
 8003a54:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t0_msb;
 8003a56:	7c3b      	ldrb	r3, [r7, #16]
 8003a58:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	74fb      	strb	r3, [r7, #19]
    *(buff) = (uint8_t)(((coeff_h << 8) + coeff_l) >> 3);
 8003a60:	7cfb      	ldrb	r3, [r7, #19]
 8003a62:	021b      	lsls	r3, r3, #8
 8003a64:	7bfa      	ldrb	r2, [r7, #15]
 8003a66:	4413      	add	r3, r2
 8003a68:	10db      	asrs	r3, r3, #3
 8003a6a:	b2da      	uxtb	r2, r3
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8003a70:	697b      	ldr	r3, [r7, #20]
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3718      	adds	r7, #24
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}

08003a7a <hts221_temp_deg_point_1_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003a7a:	b580      	push	{r7, lr}
 8003a7c:	b086      	sub	sp, #24
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
 8003a82:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 8003a84:	f107 020f 	add.w	r2, r7, #15
 8003a88:	2301      	movs	r3, #1
 8003a8a:	2133      	movs	r1, #51	; 0x33
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f7ff fe8f 	bl	80037b0 <hts221_read_reg>
 8003a92:	6178      	str	r0, [r7, #20]

  if(ret == 0){
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d114      	bne.n	8003ac4 <hts221_temp_deg_point_1_get+0x4a>
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t*) &reg, 1);
 8003a9a:	f107 0210 	add.w	r2, r7, #16
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	2135      	movs	r1, #53	; 0x35
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f7ff fe84 	bl	80037b0 <hts221_read_reg>
 8003aa8:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t1_msb;
 8003aaa:	7c3b      	ldrb	r3, [r7, #16]
 8003aac:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	74fb      	strb	r3, [r7, #19]
    *(buff) = (uint8_t)(((coeff_h << 8) + coeff_l) >> 3);
 8003ab4:	7cfb      	ldrb	r3, [r7, #19]
 8003ab6:	021b      	lsls	r3, r3, #8
 8003ab8:	7bfa      	ldrb	r2, [r7, #15]
 8003aba:	4413      	add	r3, r2
 8003abc:	10db      	asrs	r3, r3, #3
 8003abe:	b2da      	uxtb	r2, r3
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8003ac4:	697b      	ldr	r3, [r7, #20]
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3718      	adds	r7, #24
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}

08003ace <hts221_hum_adc_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003ace:	b580      	push	{r7, lr}
 8003ad0:	b084      	sub	sp, #16
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
 8003ad6:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, buff, 2);
 8003ad8:	2302      	movs	r3, #2
 8003ada:	683a      	ldr	r2, [r7, #0]
 8003adc:	2136      	movs	r1, #54	; 0x36
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f7ff fe66 	bl	80037b0 <hts221_read_reg>
 8003ae4:	60f8      	str	r0, [r7, #12]
  return ret;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3710      	adds	r7, #16
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <hts221_hum_adc_point_1_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, buff, 2);
 8003afa:	2302      	movs	r3, #2
 8003afc:	683a      	ldr	r2, [r7, #0]
 8003afe:	213a      	movs	r1, #58	; 0x3a
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f7ff fe55 	bl	80037b0 <hts221_read_reg>
 8003b06:	60f8      	str	r0, [r7, #12]
  return ret;
 8003b08:	68fb      	ldr	r3, [r7, #12]
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3710      	adds	r7, #16
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <hts221_temp_adc_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003b12:	b580      	push	{r7, lr}
 8003b14:	b084      	sub	sp, #16
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
 8003b1a:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, buff, 2);
 8003b1c:	2302      	movs	r3, #2
 8003b1e:	683a      	ldr	r2, [r7, #0]
 8003b20:	213c      	movs	r1, #60	; 0x3c
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f7ff fe44 	bl	80037b0 <hts221_read_reg>
 8003b28:	60f8      	str	r0, [r7, #12]
  return ret;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3710      	adds	r7, #16
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <hts221_temp_adc_point_1_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, buff, 2);
 8003b3e:	2302      	movs	r3, #2
 8003b40:	683a      	ldr	r2, [r7, #0]
 8003b42:	213e      	movs	r1, #62	; 0x3e
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f7ff fe33 	bl	80037b0 <hts221_read_reg>
 8003b4a:	60f8      	str	r0, [r7, #12]
  return ret;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3710      	adds	r7, #16
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
	...

08003b58 <LPS22HB_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_RegisterBusIO(LPS22HB_Object_t *pObj, LPS22HB_IO_t *pIO)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HB_OK;
 8003b62:	2300      	movs	r3, #0
 8003b64:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d103      	bne.n	8003b74 <LPS22HB_RegisterBusIO+0x1c>
  {
    ret = LPS22HB_ERROR;
 8003b6c:	f04f 33ff 	mov.w	r3, #4294967295
 8003b70:	60fb      	str	r3, [r7, #12]
 8003b72:	e04d      	b.n	8003c10 <LPS22HB_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	685a      	ldr	r2, [r3, #4]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	689a      	ldr	r2, [r3, #8]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	7b1a      	ldrb	r2, [r3, #12]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	691a      	ldr	r2, [r3, #16]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	695a      	ldr	r2, [r3, #20]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	699a      	ldr	r2, [r3, #24]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	4a1b      	ldr	r2, [pc, #108]	; (8003c1c <LPS22HB_RegisterBusIO+0xc4>)
 8003bb0:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a1a      	ldr	r2, [pc, #104]	; (8003c20 <LPS22HB_RegisterBusIO+0xc8>)
 8003bb6:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d103      	bne.n	8003bce <LPS22HB_RegisterBusIO+0x76>
    {
      ret = LPS22HB_ERROR;
 8003bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8003bca:	60fb      	str	r3, [r7, #12]
 8003bcc:	e020      	b.n	8003c10 <LPS22HB_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LPS22HB_OK)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4798      	blx	r3
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d003      	beq.n	8003be2 <LPS22HB_RegisterBusIO+0x8a>
    {
      ret = LPS22HB_ERROR;
 8003bda:	f04f 33ff 	mov.w	r3, #4294967295
 8003bde:	60fb      	str	r3, [r7, #12]
 8003be0:	e016      	b.n	8003c10 <LPS22HB_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LPS22HB_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d112      	bne.n	8003c10 <LPS22HB_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d10d      	bne.n	8003c10 <LPS22HB_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	72fb      	strb	r3, [r7, #11]

          if (LPS22HB_Write_Reg(pObj, LPS22HB_CTRL_REG1, data) != LPS22HB_OK)
 8003bf8:	7afb      	ldrb	r3, [r7, #11]
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	2110      	movs	r1, #16
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 f9d5 	bl	8003fae <LPS22HB_Write_Reg>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d002      	beq.n	8003c10 <LPS22HB_RegisterBusIO+0xb8>
          {
            ret = LPS22HB_ERROR;
 8003c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c0e:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8003c10:	68fb      	ldr	r3, [r7, #12]
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3710      	adds	r7, #16
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	08004267 	.word	0x08004267
 8003c20:	080042ed 	.word	0x080042ed

08003c24 <LPS22HB_Init>:
 * @brief  Initialize the LPS22HB sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_Init(LPS22HB_Object_t *pObj)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d108      	bne.n	8003c48 <LPS22HB_Init+0x24>
  {
    if (LPS22HB_Initialize(pObj) != LPS22HB_OK)
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 fabc 	bl	80041b4 <LPS22HB_Initialize>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d002      	beq.n	8003c48 <LPS22HB_Init+0x24>
    {
      return LPS22HB_ERROR;
 8003c42:	f04f 33ff 	mov.w	r3, #4294967295
 8003c46:	e004      	b.n	8003c52 <LPS22HB_Init+0x2e>
    }
  }

  pObj->is_initialized = 1U;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LPS22HB_OK;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3708      	adds	r7, #8
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}

08003c5a <LPS22HB_DeInit>:
 * @brief  Deinitialize the LPS22HB sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_DeInit(LPS22HB_Object_t *pObj)
{
 8003c5a:	b580      	push	{r7, lr}
 8003c5c:	b082      	sub	sp, #8
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d111      	bne.n	8003c90 <LPS22HB_DeInit+0x36>
  {
    if (LPS22HB_PRESS_Disable(pObj) != LPS22HB_OK)
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f000 f877 	bl	8003d60 <LPS22HB_PRESS_Disable>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d002      	beq.n	8003c7e <LPS22HB_DeInit+0x24>
    {
      return LPS22HB_ERROR;
 8003c78:	f04f 33ff 	mov.w	r3, #4294967295
 8003c7c:	e00d      	b.n	8003c9a <LPS22HB_DeInit+0x40>
    }

    if (LPS22HB_TEMP_Disable(pObj) != LPS22HB_OK)
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 f913 	bl	8003eaa <LPS22HB_TEMP_Disable>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d002      	beq.n	8003c90 <LPS22HB_DeInit+0x36>
    {
      return LPS22HB_ERROR;
 8003c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c8e:	e004      	b.n	8003c9a <LPS22HB_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LPS22HB_OK;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3708      	adds	r7, #8
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}

08003ca2 <LPS22HB_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_ReadID(LPS22HB_Object_t *pObj, uint8_t *Id)
{
 8003ca2:	b580      	push	{r7, lr}
 8003ca4:	b082      	sub	sp, #8
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	6078      	str	r0, [r7, #4]
 8003caa:	6039      	str	r1, [r7, #0]
  if (lps22hb_device_id_get(&(pObj->Ctx), Id) != LPS22HB_OK)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	331c      	adds	r3, #28
 8003cb0:	6839      	ldr	r1, [r7, #0]
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f000 fc98 	bl	80045e8 <lps22hb_device_id_get>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d002      	beq.n	8003cc4 <LPS22HB_ReadID+0x22>
  {
    return LPS22HB_ERROR;
 8003cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8003cc2:	e000      	b.n	8003cc6 <LPS22HB_ReadID+0x24>
  }

  return LPS22HB_OK;
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3708      	adds	r7, #8
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
	...

08003cd0 <LPS22HB_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LPS22HB sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_GetCapabilities(LPS22HB_Object_t *pObj, LPS22HB_Capabilities_t *Capabilities)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 1;
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	2201      	movs	r2, #1
 8003cea:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 0.0f;
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	f04f 0200 	mov.w	r2, #0
 8003cf8:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 75.0f;
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	4a05      	ldr	r2, [pc, #20]	; (8003d14 <LPS22HB_GetCapabilities+0x44>)
 8003cfe:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 75.0f;
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	4a04      	ldr	r2, [pc, #16]	; (8003d14 <LPS22HB_GetCapabilities+0x44>)
 8003d04:	60da      	str	r2, [r3, #12]
  return LPS22HB_OK;
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr
 8003d14:	42960000 	.word	0x42960000

08003d18 <LPS22HB_PRESS_Enable>:
 * @brief  Enable the LPS22HB pressure sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_Enable(LPS22HB_Object_t *pObj)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d101      	bne.n	8003d2e <LPS22HB_PRESS_Enable+0x16>
  {
    return LPS22HB_OK;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	e014      	b.n	8003d58 <LPS22HB_PRESS_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hb_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HB_OK)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f103 021c 	add.w	r2, r3, #28
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	4610      	mov	r0, r2
 8003d3e:	f000 fbc7 	bl	80044d0 <lps22hb_data_rate_set>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d002      	beq.n	8003d4e <LPS22HB_PRESS_Enable+0x36>
  {
    return LPS22HB_ERROR;
 8003d48:	f04f 33ff 	mov.w	r3, #4294967295
 8003d4c:	e004      	b.n	8003d58 <LPS22HB_PRESS_Enable+0x40>
  }

  pObj->press_is_enabled = 1;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2201      	movs	r2, #1
 8003d52:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LPS22HB_OK;
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3708      	adds	r7, #8
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <LPS22HB_PRESS_Disable>:
 * @brief  Disable the LPS22HB pressure sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_Disable(LPS22HB_Object_t *pObj)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b082      	sub	sp, #8
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->press_is_enabled == 0U)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d101      	bne.n	8003d76 <LPS22HB_PRESS_Disable+0x16>
  {
    return LPS22HB_OK;
 8003d72:	2300      	movs	r3, #0
 8003d74:	e024      	b.n	8003dc0 <LPS22HB_PRESS_Disable+0x60>
  }

  /* Check if the LPS22HB temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d11a      	bne.n	8003db6 <LPS22HB_PRESS_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f103 021c 	add.w	r2, r3, #28
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	332b      	adds	r3, #43	; 0x2b
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	4610      	mov	r0, r2
 8003d8e:	f000 fbc5 	bl	800451c <lps22hb_data_rate_get>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d002      	beq.n	8003d9e <LPS22HB_PRESS_Disable+0x3e>
    {
      return LPS22HB_ERROR;
 8003d98:	f04f 33ff 	mov.w	r3, #4294967295
 8003d9c:	e010      	b.n	8003dc0 <LPS22HB_PRESS_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	331c      	adds	r3, #28
 8003da2:	2100      	movs	r1, #0
 8003da4:	4618      	mov	r0, r3
 8003da6:	f000 fb93 	bl	80044d0 <lps22hb_data_rate_set>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d002      	beq.n	8003db6 <LPS22HB_PRESS_Disable+0x56>
    {
      return LPS22HB_ERROR;
 8003db0:	f04f 33ff 	mov.w	r3, #4294967295
 8003db4:	e004      	b.n	8003dc0 <LPS22HB_PRESS_Disable+0x60>
    }
  }

  pObj->press_is_enabled = 0;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LPS22HB_OK;
 8003dbe:	2300      	movs	r3, #0
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3708      	adds	r7, #8
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <LPS22HB_PRESS_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_GetOutputDataRate(LPS22HB_Object_t *pObj, float *Odr)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
  return LPS22HB_GetOutputDataRate(pObj, Odr);
 8003dd2:	6839      	ldr	r1, [r7, #0]
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f000 f905 	bl	8003fe4 <LPS22HB_GetOutputDataRate>
 8003dda:	4603      	mov	r3, r0
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3708      	adds	r7, #8
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <LPS22HB_PRESS_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_SetOutputDataRate(LPS22HB_Object_t *pObj, float Odr)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b082      	sub	sp, #8
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
  /* Check if the component is enabled */
  if (pObj->press_is_enabled == 1U)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d105      	bne.n	8003e04 <LPS22HB_PRESS_SetOutputDataRate+0x20>
  {
    return LPS22HB_SetOutputDataRate_When_Enabled(pObj, Odr);
 8003df8:	6839      	ldr	r1, [r7, #0]
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f000 f946 	bl	800408c <LPS22HB_SetOutputDataRate_When_Enabled>
 8003e00:	4603      	mov	r3, r0
 8003e02:	e004      	b.n	8003e0e <LPS22HB_PRESS_SetOutputDataRate+0x2a>
  }
  else
  {
    return LPS22HB_SetOutputDataRate_When_Disabled(pObj, Odr);
 8003e04:	6839      	ldr	r1, [r7, #0]
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f000 f996 	bl	8004138 <LPS22HB_SetOutputDataRate_When_Disabled>
 8003e0c:	4603      	mov	r3, r0
  }
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3708      	adds	r7, #8
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}

08003e16 <LPS22HB_PRESS_GetPressure>:
 * @param  pObj the device pObj
 * @param  Value pointer where the pressure value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_GetPressure(LPS22HB_Object_t *pObj, float *Value)
{
 8003e16:	b580      	push	{r7, lr}
 8003e18:	b084      	sub	sp, #16
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
 8003e1e:	6039      	str	r1, [r7, #0]
  lps22hb_axis1bit32_t data_raw_pressure;

  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 8003e20:	f107 030c 	add.w	r3, r7, #12
 8003e24:	2204      	movs	r2, #4
 8003e26:	2100      	movs	r1, #0
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f016 f8f8 	bl	801a01e <memset>
  if (lps22hb_pressure_raw_get(&(pObj->Ctx), data_raw_pressure.u8bit) != LPS22HB_OK)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	331c      	adds	r3, #28
 8003e32:	f107 020c 	add.w	r2, r7, #12
 8003e36:	4611      	mov	r1, r2
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f000 fbb3 	bl	80045a4 <lps22hb_pressure_raw_get>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d002      	beq.n	8003e4a <LPS22HB_PRESS_GetPressure+0x34>
  {
    return LPS22HB_ERROR;
 8003e44:	f04f 33ff 	mov.w	r3, #4294967295
 8003e48:	e007      	b.n	8003e5a <LPS22HB_PRESS_GetPressure+0x44>
  }

  *Value = lps22hb_from_lsb_to_hpa(data_raw_pressure.i32bit);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f000 fac1 	bl	80043d4 <lps22hb_from_lsb_to_hpa>
 8003e52:	4602      	mov	r2, r0
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	601a      	str	r2, [r3, #0]

  return LPS22HB_OK;
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3710      	adds	r7, #16
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}

08003e62 <LPS22HB_TEMP_Enable>:
 * @brief  Enable the LPS22HB temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_Enable(LPS22HB_Object_t *pObj)
{
 8003e62:	b580      	push	{r7, lr}
 8003e64:	b082      	sub	sp, #8
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d101      	bne.n	8003e78 <LPS22HB_TEMP_Enable+0x16>
  {
    return LPS22HB_OK;
 8003e74:	2300      	movs	r3, #0
 8003e76:	e014      	b.n	8003ea2 <LPS22HB_TEMP_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hb_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HB_OK)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f103 021c 	add.w	r2, r3, #28
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003e84:	4619      	mov	r1, r3
 8003e86:	4610      	mov	r0, r2
 8003e88:	f000 fb22 	bl	80044d0 <lps22hb_data_rate_set>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d002      	beq.n	8003e98 <LPS22HB_TEMP_Enable+0x36>
  {
    return LPS22HB_ERROR;
 8003e92:	f04f 33ff 	mov.w	r3, #4294967295
 8003e96:	e004      	b.n	8003ea2 <LPS22HB_TEMP_Enable+0x40>
  }

  pObj->temp_is_enabled = 1;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LPS22HB_OK;
 8003ea0:	2300      	movs	r3, #0
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3708      	adds	r7, #8
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}

08003eaa <LPS22HB_TEMP_Disable>:
 * @brief  Disable the LPS22HB temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_Disable(LPS22HB_Object_t *pObj)
{
 8003eaa:	b580      	push	{r7, lr}
 8003eac:	b082      	sub	sp, #8
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d101      	bne.n	8003ec0 <LPS22HB_TEMP_Disable+0x16>
  {
    return LPS22HB_OK;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	e024      	b.n	8003f0a <LPS22HB_TEMP_Disable+0x60>
  }

  /* Check if the LPS22HB pressure sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->press_is_enabled == 0U)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d11a      	bne.n	8003f00 <LPS22HB_TEMP_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f103 021c 	add.w	r2, r3, #28
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	332b      	adds	r3, #43	; 0x2b
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	4610      	mov	r0, r2
 8003ed8:	f000 fb20 	bl	800451c <lps22hb_data_rate_get>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d002      	beq.n	8003ee8 <LPS22HB_TEMP_Disable+0x3e>
    {
      return LPS22HB_ERROR;
 8003ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ee6:	e010      	b.n	8003f0a <LPS22HB_TEMP_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	331c      	adds	r3, #28
 8003eec:	2100      	movs	r1, #0
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f000 faee 	bl	80044d0 <lps22hb_data_rate_set>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d002      	beq.n	8003f00 <LPS22HB_TEMP_Disable+0x56>
    {
      return LPS22HB_ERROR;
 8003efa:	f04f 33ff 	mov.w	r3, #4294967295
 8003efe:	e004      	b.n	8003f0a <LPS22HB_TEMP_Disable+0x60>
    }
  }

  pObj->temp_is_enabled = 0;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LPS22HB_OK;
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3708      	adds	r7, #8
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}

08003f12 <LPS22HB_TEMP_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_GetOutputDataRate(LPS22HB_Object_t *pObj, float *Odr)
{
 8003f12:	b580      	push	{r7, lr}
 8003f14:	b082      	sub	sp, #8
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
 8003f1a:	6039      	str	r1, [r7, #0]
  return LPS22HB_GetOutputDataRate(pObj, Odr);
 8003f1c:	6839      	ldr	r1, [r7, #0]
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f000 f860 	bl	8003fe4 <LPS22HB_GetOutputDataRate>
 8003f24:	4603      	mov	r3, r0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3708      	adds	r7, #8
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}

08003f2e <LPS22HB_TEMP_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_SetOutputDataRate(LPS22HB_Object_t *pObj, float Odr)
{
 8003f2e:	b580      	push	{r7, lr}
 8003f30:	b082      	sub	sp, #8
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	6078      	str	r0, [r7, #4]
 8003f36:	6039      	str	r1, [r7, #0]
  /* Check if the component is enabled */
  if (pObj->temp_is_enabled == 1U)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d105      	bne.n	8003f4e <LPS22HB_TEMP_SetOutputDataRate+0x20>
  {
    return LPS22HB_SetOutputDataRate_When_Enabled(pObj, Odr);
 8003f42:	6839      	ldr	r1, [r7, #0]
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f000 f8a1 	bl	800408c <LPS22HB_SetOutputDataRate_When_Enabled>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	e004      	b.n	8003f58 <LPS22HB_TEMP_SetOutputDataRate+0x2a>
  }
  else
  {
    return LPS22HB_SetOutputDataRate_When_Disabled(pObj, Odr);
 8003f4e:	6839      	ldr	r1, [r7, #0]
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f000 f8f1 	bl	8004138 <LPS22HB_SetOutputDataRate_When_Disabled>
 8003f56:	4603      	mov	r3, r0
  }
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3708      	adds	r7, #8
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <LPS22HB_TEMP_GetTemperature>:
 * @param  pObj the device pObj
 * @param  Value pointer where the temperature value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_GetTemperature(LPS22HB_Object_t *pObj, float *Value)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
  lps22hb_axis1bit16_t data_raw_temperature;

  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 8003f6a:	f107 030c 	add.w	r3, r7, #12
 8003f6e:	2202      	movs	r2, #2
 8003f70:	2100      	movs	r1, #0
 8003f72:	4618      	mov	r0, r3
 8003f74:	f016 f853 	bl	801a01e <memset>
  if (lps22hb_temperature_raw_get(&(pObj->Ctx), data_raw_temperature.u8bit) != LPS22HB_OK)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	331c      	adds	r3, #28
 8003f7c:	f107 020c 	add.w	r2, r7, #12
 8003f80:	4611      	mov	r1, r2
 8003f82:	4618      	mov	r0, r3
 8003f84:	f000 fb1f 	bl	80045c6 <lps22hb_temperature_raw_get>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d002      	beq.n	8003f94 <LPS22HB_TEMP_GetTemperature+0x34>
  {
    return LPS22HB_ERROR;
 8003f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8003f92:	e008      	b.n	8003fa6 <LPS22HB_TEMP_GetTemperature+0x46>
  }

  *Value = lps22hb_from_lsb_to_degc(data_raw_temperature.i16bit);
 8003f94:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f000 fa33 	bl	8004404 <lps22hb_from_lsb_to_degc>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	601a      	str	r2, [r3, #0]

  return LPS22HB_OK;
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3710      	adds	r7, #16
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}

08003fae <LPS22HB_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_Write_Reg(LPS22HB_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8003fae:	b580      	push	{r7, lr}
 8003fb0:	b082      	sub	sp, #8
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
 8003fb6:	460b      	mov	r3, r1
 8003fb8:	70fb      	strb	r3, [r7, #3]
 8003fba:	4613      	mov	r3, r2
 8003fbc:	70bb      	strb	r3, [r7, #2]
  if (lps22hb_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HB_OK)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f103 001c 	add.w	r0, r3, #28
 8003fc4:	1cba      	adds	r2, r7, #2
 8003fc6:	78f9      	ldrb	r1, [r7, #3]
 8003fc8:	2301      	movs	r3, #1
 8003fca:	f000 f9ea 	bl	80043a2 <lps22hb_write_reg>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d002      	beq.n	8003fda <LPS22HB_Write_Reg+0x2c>
  {
    return LPS22HB_ERROR;
 8003fd4:	f04f 33ff 	mov.w	r3, #4294967295
 8003fd8:	e000      	b.n	8003fdc <LPS22HB_Write_Reg+0x2e>
  }

  return LPS22HB_OK;
 8003fda:	2300      	movs	r3, #0
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3708      	adds	r7, #8
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <LPS22HB_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_GetOutputDataRate(LPS22HB_Object_t *pObj, float *Odr)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HB_OK;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	60fb      	str	r3, [r7, #12]
  lps22hb_odr_t odr_low_level;

  if (lps22hb_data_rate_get(&(pObj->Ctx), &odr_low_level) != LPS22HB_OK)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	331c      	adds	r3, #28
 8003ff6:	f107 020b 	add.w	r2, r7, #11
 8003ffa:	4611      	mov	r1, r2
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f000 fa8d 	bl	800451c <lps22hb_data_rate_get>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d002      	beq.n	800400e <LPS22HB_GetOutputDataRate+0x2a>
  {
    return LPS22HB_ERROR;
 8004008:	f04f 33ff 	mov.w	r3, #4294967295
 800400c:	e031      	b.n	8004072 <LPS22HB_GetOutputDataRate+0x8e>
  }

  switch (odr_low_level)
 800400e:	7afb      	ldrb	r3, [r7, #11]
 8004010:	2b05      	cmp	r3, #5
 8004012:	d829      	bhi.n	8004068 <LPS22HB_GetOutputDataRate+0x84>
 8004014:	a201      	add	r2, pc, #4	; (adr r2, 800401c <LPS22HB_GetOutputDataRate+0x38>)
 8004016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800401a:	bf00      	nop
 800401c:	08004035 	.word	0x08004035
 8004020:	0800403f 	.word	0x0800403f
 8004024:	08004049 	.word	0x08004049
 8004028:	08004051 	.word	0x08004051
 800402c:	08004059 	.word	0x08004059
 8004030:	08004061 	.word	0x08004061
  {
    case LPS22HB_POWER_DOWN:
      *Odr = 0.0f;
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	f04f 0200 	mov.w	r2, #0
 800403a:	601a      	str	r2, [r3, #0]
      break;
 800403c:	e018      	b.n	8004070 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_1_Hz:
      *Odr = 1.0f;
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004044:	601a      	str	r2, [r3, #0]
      break;
 8004046:	e013      	b.n	8004070 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_10_Hz:
      *Odr = 10.0f;
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	4a0c      	ldr	r2, [pc, #48]	; (800407c <LPS22HB_GetOutputDataRate+0x98>)
 800404c:	601a      	str	r2, [r3, #0]
      break;
 800404e:	e00f      	b.n	8004070 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_25_Hz:
      *Odr = 25.0f;
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	4a0b      	ldr	r2, [pc, #44]	; (8004080 <LPS22HB_GetOutputDataRate+0x9c>)
 8004054:	601a      	str	r2, [r3, #0]
      break;
 8004056:	e00b      	b.n	8004070 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_50_Hz:
      *Odr = 50.0f;
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	4a0a      	ldr	r2, [pc, #40]	; (8004084 <LPS22HB_GetOutputDataRate+0xa0>)
 800405c:	601a      	str	r2, [r3, #0]
      break;
 800405e:	e007      	b.n	8004070 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_75_Hz:
      *Odr = 75.0f;
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	4a09      	ldr	r2, [pc, #36]	; (8004088 <LPS22HB_GetOutputDataRate+0xa4>)
 8004064:	601a      	str	r2, [r3, #0]
      break;
 8004066:	e003      	b.n	8004070 <LPS22HB_GetOutputDataRate+0x8c>

    default:
      ret = LPS22HB_ERROR;
 8004068:	f04f 33ff 	mov.w	r3, #4294967295
 800406c:	60fb      	str	r3, [r7, #12]
      break;
 800406e:	bf00      	nop
  }

  return ret;
 8004070:	68fb      	ldr	r3, [r7, #12]
}
 8004072:	4618      	mov	r0, r3
 8004074:	3710      	adds	r7, #16
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	41200000 	.word	0x41200000
 8004080:	41c80000 	.word	0x41c80000
 8004084:	42480000 	.word	0x42480000
 8004088:	42960000 	.word	0x42960000

0800408c <LPS22HB_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_SetOutputDataRate_When_Enabled(LPS22HB_Object_t *pObj, float Odr)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
  lps22hb_odr_t new_odr;

  new_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
            : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 8004096:	edd7 7a00 	vldr	s15, [r7]
 800409a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800409e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80040a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040a6:	d801      	bhi.n	80040ac <LPS22HB_SetOutputDataRate_When_Enabled+0x20>
 80040a8:	2301      	movs	r3, #1
 80040aa:	e021      	b.n	80040f0 <LPS22HB_SetOutputDataRate_When_Enabled+0x64>
 80040ac:	edd7 7a00 	vldr	s15, [r7]
 80040b0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80040b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80040b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040bc:	d801      	bhi.n	80040c2 <LPS22HB_SetOutputDataRate_When_Enabled+0x36>
 80040be:	2302      	movs	r3, #2
 80040c0:	e016      	b.n	80040f0 <LPS22HB_SetOutputDataRate_When_Enabled+0x64>
 80040c2:	edd7 7a00 	vldr	s15, [r7]
 80040c6:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80040ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80040ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040d2:	d801      	bhi.n	80040d8 <LPS22HB_SetOutputDataRate_When_Enabled+0x4c>
 80040d4:	2303      	movs	r3, #3
 80040d6:	e00b      	b.n	80040f0 <LPS22HB_SetOutputDataRate_When_Enabled+0x64>
 80040d8:	edd7 7a00 	vldr	s15, [r7]
 80040dc:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8004134 <LPS22HB_SetOutputDataRate_When_Enabled+0xa8>
 80040e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80040e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040e8:	d801      	bhi.n	80040ee <LPS22HB_SetOutputDataRate_When_Enabled+0x62>
 80040ea:	2304      	movs	r3, #4
 80040ec:	e000      	b.n	80040f0 <LPS22HB_SetOutputDataRate_When_Enabled+0x64>
 80040ee:	2305      	movs	r3, #5
  new_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
 80040f0:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 25.0f) ? LPS22HB_ODR_25_Hz
            : (Odr <= 50.0f) ? LPS22HB_ODR_50_Hz
            :                  LPS22HB_ODR_75_Hz;

  if (lps22hb_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HB_OK)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	331c      	adds	r3, #28
 80040f6:	7bfa      	ldrb	r2, [r7, #15]
 80040f8:	4611      	mov	r1, r2
 80040fa:	4618      	mov	r0, r3
 80040fc:	f000 f9e8 	bl	80044d0 <lps22hb_data_rate_set>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d002      	beq.n	800410c <LPS22HB_SetOutputDataRate_When_Enabled+0x80>
  {
    return LPS22HB_ERROR;
 8004106:	f04f 33ff 	mov.w	r3, #4294967295
 800410a:	e00f      	b.n	800412c <LPS22HB_SetOutputDataRate_When_Enabled+0xa0>
  }

  if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f103 021c 	add.w	r2, r3, #28
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	332b      	adds	r3, #43	; 0x2b
 8004116:	4619      	mov	r1, r3
 8004118:	4610      	mov	r0, r2
 800411a:	f000 f9ff 	bl	800451c <lps22hb_data_rate_get>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d002      	beq.n	800412a <LPS22HB_SetOutputDataRate_When_Enabled+0x9e>
  {
    return LPS22HB_ERROR;
 8004124:	f04f 33ff 	mov.w	r3, #4294967295
 8004128:	e000      	b.n	800412c <LPS22HB_SetOutputDataRate_When_Enabled+0xa0>
  }

  return LPS22HB_OK;
 800412a:	2300      	movs	r3, #0
}
 800412c:	4618      	mov	r0, r3
 800412e:	3710      	adds	r7, #16
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}
 8004134:	42480000 	.word	0x42480000

08004138 <LPS22HB_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_SetOutputDataRate_When_Disabled(LPS22HB_Object_t *pObj, float Odr)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
  pObj->last_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
                   : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 8004142:	edd7 7a00 	vldr	s15, [r7]
 8004146:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800414a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800414e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004152:	d801      	bhi.n	8004158 <LPS22HB_SetOutputDataRate_When_Disabled+0x20>
 8004154:	2301      	movs	r3, #1
 8004156:	e021      	b.n	800419c <LPS22HB_SetOutputDataRate_When_Disabled+0x64>
 8004158:	edd7 7a00 	vldr	s15, [r7]
 800415c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004160:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004168:	d801      	bhi.n	800416e <LPS22HB_SetOutputDataRate_When_Disabled+0x36>
 800416a:	2302      	movs	r3, #2
 800416c:	e016      	b.n	800419c <LPS22HB_SetOutputDataRate_When_Disabled+0x64>
 800416e:	edd7 7a00 	vldr	s15, [r7]
 8004172:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8004176:	eef4 7ac7 	vcmpe.f32	s15, s14
 800417a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800417e:	d801      	bhi.n	8004184 <LPS22HB_SetOutputDataRate_When_Disabled+0x4c>
 8004180:	2303      	movs	r3, #3
 8004182:	e00b      	b.n	800419c <LPS22HB_SetOutputDataRate_When_Disabled+0x64>
 8004184:	edd7 7a00 	vldr	s15, [r7]
 8004188:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80041b0 <LPS22HB_SetOutputDataRate_When_Disabled+0x78>
 800418c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004194:	d801      	bhi.n	800419a <LPS22HB_SetOutputDataRate_When_Disabled+0x62>
 8004196:	2304      	movs	r3, #4
 8004198:	e000      	b.n	800419c <LPS22HB_SetOutputDataRate_When_Disabled+0x64>
 800419a:	2305      	movs	r3, #5
  pObj->last_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                   : (Odr <= 25.0f) ? LPS22HB_ODR_25_Hz
                   : (Odr <= 50.0f) ? LPS22HB_ODR_50_Hz
                   :                  LPS22HB_ODR_75_Hz;

  return LPS22HB_OK;
 80041a2:	2300      	movs	r3, #0
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	370c      	adds	r7, #12
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr
 80041b0:	42480000 	.word	0x42480000

080041b4 <LPS22HB_Initialize>:
 * @brief  Initialize the LPS22HB sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_Initialize(LPS22HB_Object_t *pObj)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b082      	sub	sp, #8
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  /* Set Power mode */
  if (lps22hb_low_power_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	331c      	adds	r3, #28
 80041c0:	2101      	movs	r1, #1
 80041c2:	4618      	mov	r0, r3
 80041c4:	f000 fa21 	bl	800460a <lps22hb_low_power_set>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d002      	beq.n	80041d4 <LPS22HB_Initialize+0x20>
  {
    return LPS22HB_ERROR;
 80041ce:	f04f 33ff 	mov.w	r3, #4294967295
 80041d2:	e044      	b.n	800425e <LPS22HB_Initialize+0xaa>
  }

  /* Power down the device */
  if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	331c      	adds	r3, #28
 80041d8:	2100      	movs	r1, #0
 80041da:	4618      	mov	r0, r3
 80041dc:	f000 f978 	bl	80044d0 <lps22hb_data_rate_set>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d002      	beq.n	80041ec <LPS22HB_Initialize+0x38>
  {
    return LPS22HB_ERROR;
 80041e6:	f04f 33ff 	mov.w	r3, #4294967295
 80041ea:	e038      	b.n	800425e <LPS22HB_Initialize+0xaa>
  }

  /* Disable low-pass filter on LPS22HB pressure data */
  if (lps22hb_low_pass_filter_mode_set(&(pObj->Ctx), LPS22HB_LPF_ODR_DIV_9) != LPS22HB_OK)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	331c      	adds	r3, #28
 80041f0:	2102      	movs	r1, #2
 80041f2:	4618      	mov	r0, r3
 80041f4:	f000 f946 	bl	8004484 <lps22hb_low_pass_filter_mode_set>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d002      	beq.n	8004204 <LPS22HB_Initialize+0x50>
  {
    return LPS22HB_ERROR;
 80041fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004202:	e02c      	b.n	800425e <LPS22HB_Initialize+0xaa>
  }

  if (lps22hb_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	331c      	adds	r3, #28
 8004208:	2101      	movs	r1, #1
 800420a:	4618      	mov	r0, r3
 800420c:	f000 f914 	bl	8004438 <lps22hb_block_data_update_set>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	d002      	beq.n	800421c <LPS22HB_Initialize+0x68>
  {
    return LPS22HB_ERROR;
 8004216:	f04f 33ff 	mov.w	r3, #4294967295
 800421a:	e020      	b.n	800425e <LPS22HB_Initialize+0xaa>
  }

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d10b      	bne.n	800423c <LPS22HB_Initialize+0x88>
  {
    if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_DISABLE) != LPS22HB_OK)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	331c      	adds	r3, #28
 8004228:	2100      	movs	r1, #0
 800422a:	4618      	mov	r0, r3
 800422c:	f000 fa13 	bl	8004656 <lps22hb_auto_add_inc_set>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d00e      	beq.n	8004254 <LPS22HB_Initialize+0xa0>
    {
      return LPS22HB_ERROR;
 8004236:	f04f 33ff 	mov.w	r3, #4294967295
 800423a:	e010      	b.n	800425e <LPS22HB_Initialize+0xaa>
    }
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	331c      	adds	r3, #28
 8004240:	2101      	movs	r1, #1
 8004242:	4618      	mov	r0, r3
 8004244:	f000 fa07 	bl	8004656 <lps22hb_auto_add_inc_set>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d002      	beq.n	8004254 <LPS22HB_Initialize+0xa0>
    {
      return LPS22HB_ERROR;
 800424e:	f04f 33ff 	mov.w	r3, #4294967295
 8004252:	e004      	b.n	800425e <LPS22HB_Initialize+0xaa>
    }
  }

  pObj->last_odr = LPS22HB_ODR_25_Hz;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2203      	movs	r2, #3
 8004258:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  return LPS22HB_OK;
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3708      	adds	r7, #8
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}

08004266 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004266:	b590      	push	{r4, r7, lr}
 8004268:	b089      	sub	sp, #36	; 0x24
 800426a:	af00      	add	r7, sp, #0
 800426c:	60f8      	str	r0, [r7, #12]
 800426e:	607a      	str	r2, [r7, #4]
 8004270:	461a      	mov	r2, r3
 8004272:	460b      	mov	r3, r1
 8004274:	72fb      	strb	r3, [r7, #11]
 8004276:	4613      	mov	r3, r2
 8004278:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = LPS22HB_OK;
 800427a:	2300      	movs	r3, #0
 800427c:	61bb      	str	r3, [r7, #24]
  LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d121      	bne.n	80042ce <ReadRegWrap+0x68>
  {
    for (i = 0; i < Length; i++)
 800428a:	2300      	movs	r3, #0
 800428c:	83fb      	strh	r3, [r7, #30]
 800428e:	e018      	b.n	80042c2 <ReadRegWrap+0x5c>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	695c      	ldr	r4, [r3, #20]
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	7b1b      	ldrb	r3, [r3, #12]
 8004298:	b298      	uxth	r0, r3
 800429a:	7afb      	ldrb	r3, [r7, #11]
 800429c:	b29a      	uxth	r2, r3
 800429e:	8bfb      	ldrh	r3, [r7, #30]
 80042a0:	4413      	add	r3, r2
 80042a2:	b299      	uxth	r1, r3
 80042a4:	8bfb      	ldrh	r3, [r7, #30]
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	441a      	add	r2, r3
 80042aa:	2301      	movs	r3, #1
 80042ac:	47a0      	blx	r4
 80042ae:	61b8      	str	r0, [r7, #24]
      if (ret != LPS22HB_OK)
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d002      	beq.n	80042bc <ReadRegWrap+0x56>
      {
        return LPS22HB_ERROR;
 80042b6:	f04f 33ff 	mov.w	r3, #4294967295
 80042ba:	e013      	b.n	80042e4 <ReadRegWrap+0x7e>
    for (i = 0; i < Length; i++)
 80042bc:	8bfb      	ldrh	r3, [r7, #30]
 80042be:	3301      	adds	r3, #1
 80042c0:	83fb      	strh	r3, [r7, #30]
 80042c2:	8bfa      	ldrh	r2, [r7, #30]
 80042c4:	893b      	ldrh	r3, [r7, #8]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d3e2      	bcc.n	8004290 <ReadRegWrap+0x2a>
      }
    }

    return ret;
 80042ca:	69bb      	ldr	r3, [r7, #24]
 80042cc:	e00a      	b.n	80042e4 <ReadRegWrap+0x7e>
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	695c      	ldr	r4, [r3, #20]
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	7b1b      	ldrb	r3, [r3, #12]
 80042d6:	b298      	uxth	r0, r3
 80042d8:	7afb      	ldrb	r3, [r7, #11]
 80042da:	b299      	uxth	r1, r3
 80042dc:	893b      	ldrh	r3, [r7, #8]
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	47a0      	blx	r4
 80042e2:	4603      	mov	r3, r0
  }
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3724      	adds	r7, #36	; 0x24
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd90      	pop	{r4, r7, pc}

080042ec <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80042ec:	b590      	push	{r4, r7, lr}
 80042ee:	b089      	sub	sp, #36	; 0x24
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	607a      	str	r2, [r7, #4]
 80042f6:	461a      	mov	r2, r3
 80042f8:	460b      	mov	r3, r1
 80042fa:	72fb      	strb	r3, [r7, #11]
 80042fc:	4613      	mov	r3, r2
 80042fe:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = LPS22HB_OK;
 8004300:	2300      	movs	r3, #0
 8004302:	61bb      	str	r3, [r7, #24]
  LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d121      	bne.n	8004354 <WriteRegWrap+0x68>
  {
    for (i = 0; i < Length; i++)
 8004310:	2300      	movs	r3, #0
 8004312:	83fb      	strh	r3, [r7, #30]
 8004314:	e018      	b.n	8004348 <WriteRegWrap+0x5c>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	691c      	ldr	r4, [r3, #16]
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	7b1b      	ldrb	r3, [r3, #12]
 800431e:	b298      	uxth	r0, r3
 8004320:	7afb      	ldrb	r3, [r7, #11]
 8004322:	b29a      	uxth	r2, r3
 8004324:	8bfb      	ldrh	r3, [r7, #30]
 8004326:	4413      	add	r3, r2
 8004328:	b299      	uxth	r1, r3
 800432a:	8bfb      	ldrh	r3, [r7, #30]
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	441a      	add	r2, r3
 8004330:	2301      	movs	r3, #1
 8004332:	47a0      	blx	r4
 8004334:	61b8      	str	r0, [r7, #24]
      if (ret != LPS22HB_OK)
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d002      	beq.n	8004342 <WriteRegWrap+0x56>
      {
        return LPS22HB_ERROR;
 800433c:	f04f 33ff 	mov.w	r3, #4294967295
 8004340:	e013      	b.n	800436a <WriteRegWrap+0x7e>
    for (i = 0; i < Length; i++)
 8004342:	8bfb      	ldrh	r3, [r7, #30]
 8004344:	3301      	adds	r3, #1
 8004346:	83fb      	strh	r3, [r7, #30]
 8004348:	8bfa      	ldrh	r2, [r7, #30]
 800434a:	893b      	ldrh	r3, [r7, #8]
 800434c:	429a      	cmp	r2, r3
 800434e:	d3e2      	bcc.n	8004316 <WriteRegWrap+0x2a>
      }
    }

    return ret;
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	e00a      	b.n	800436a <WriteRegWrap+0x7e>
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	691c      	ldr	r4, [r3, #16]
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	7b1b      	ldrb	r3, [r3, #12]
 800435c:	b298      	uxth	r0, r3
 800435e:	7afb      	ldrb	r3, [r7, #11]
 8004360:	b299      	uxth	r1, r3
 8004362:	893b      	ldrh	r3, [r7, #8]
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	47a0      	blx	r4
 8004368:	4603      	mov	r3, r0
  }
}
 800436a:	4618      	mov	r0, r3
 800436c:	3724      	adds	r7, #36	; 0x24
 800436e:	46bd      	mov	sp, r7
 8004370:	bd90      	pop	{r4, r7, pc}

08004372 <lps22hb_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hb_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 8004372:	b590      	push	{r4, r7, lr}
 8004374:	b087      	sub	sp, #28
 8004376:	af00      	add	r7, sp, #0
 8004378:	60f8      	str	r0, [r7, #12]
 800437a:	607a      	str	r2, [r7, #4]
 800437c:	461a      	mov	r2, r3
 800437e:	460b      	mov	r3, r1
 8004380:	72fb      	strb	r3, [r7, #11]
 8004382:	4613      	mov	r3, r2
 8004384:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	685c      	ldr	r4, [r3, #4]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6898      	ldr	r0, [r3, #8]
 800438e:	893b      	ldrh	r3, [r7, #8]
 8004390:	7af9      	ldrb	r1, [r7, #11]
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	47a0      	blx	r4
 8004396:	6178      	str	r0, [r7, #20]
  return ret;
 8004398:	697b      	ldr	r3, [r7, #20]
}
 800439a:	4618      	mov	r0, r3
 800439c:	371c      	adds	r7, #28
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd90      	pop	{r4, r7, pc}

080043a2 <lps22hb_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hb_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 80043a2:	b590      	push	{r4, r7, lr}
 80043a4:	b087      	sub	sp, #28
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	60f8      	str	r0, [r7, #12]
 80043aa:	607a      	str	r2, [r7, #4]
 80043ac:	461a      	mov	r2, r3
 80043ae:	460b      	mov	r3, r1
 80043b0:	72fb      	strb	r3, [r7, #11]
 80043b2:	4613      	mov	r3, r2
 80043b4:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681c      	ldr	r4, [r3, #0]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6898      	ldr	r0, [r3, #8]
 80043be:	893b      	ldrh	r3, [r7, #8]
 80043c0:	7af9      	ldrb	r1, [r7, #11]
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	47a0      	blx	r4
 80043c6:	6178      	str	r0, [r7, #20]
  return ret;
 80043c8:	697b      	ldr	r3, [r7, #20]
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	371c      	adds	r7, #28
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd90      	pop	{r4, r7, pc}
	...

080043d4 <lps22hb_from_lsb_to_hpa>:
  * @{
  *
  */

float_t lps22hb_from_lsb_to_hpa(int32_t lsb)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  return ( (float_t)lsb / 4096.0f );
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	ee07 3a90 	vmov	s15, r3
 80043e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043e6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004400 <lps22hb_from_lsb_to_hpa+0x2c>
 80043ea:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80043ee:	ee16 3a90 	vmov	r3, s13
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	370c      	adds	r7, #12
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	45800000 	.word	0x45800000

08004404 <lps22hb_from_lsb_to_degc>:

float_t lps22hb_from_lsb_to_degc(int16_t lsb)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	4603      	mov	r3, r0
 800440c:	80fb      	strh	r3, [r7, #6]
  return ( (float_t)lsb / 100.0f );
 800440e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004412:	ee07 3a90 	vmov	s15, r3
 8004416:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800441a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004434 <lps22hb_from_lsb_to_degc+0x30>
 800441e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004422:	ee16 3a90 	vmov	r3, s13
}
 8004426:	4618      	mov	r0, r3
 8004428:	370c      	adds	r7, #12
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop
 8004434:	42c80000 	.word	0x42c80000

08004438 <lps22hb_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	460b      	mov	r3, r1
 8004442:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8004444:	f107 0208 	add.w	r2, r7, #8
 8004448:	2301      	movs	r3, #1
 800444a:	2110      	movs	r1, #16
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f7ff ff90 	bl	8004372 <lps22hb_read_reg>
 8004452:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d10f      	bne.n	800447a <lps22hb_block_data_update_set+0x42>
    ctrl_reg1.bdu = val;
 800445a:	78fb      	ldrb	r3, [r7, #3]
 800445c:	f003 0301 	and.w	r3, r3, #1
 8004460:	b2da      	uxtb	r2, r3
 8004462:	7a3b      	ldrb	r3, [r7, #8]
 8004464:	f362 0341 	bfi	r3, r2, #1, #1
 8004468:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 800446a:	f107 0208 	add.w	r2, r7, #8
 800446e:	2301      	movs	r3, #1
 8004470:	2110      	movs	r1, #16
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f7ff ff95 	bl	80043a2 <lps22hb_write_reg>
 8004478:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800447a:	68fb      	ldr	r3, [r7, #12]
}
 800447c:	4618      	mov	r0, r3
 800447e:	3710      	adds	r7, #16
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <lps22hb_low_pass_filter_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_low_pass_filter_mode_set(stmdev_ctx_t *ctx,
                                          lps22hb_lpfp_t val)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b084      	sub	sp, #16
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	460b      	mov	r3, r1
 800448e:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8004490:	f107 0208 	add.w	r2, r7, #8
 8004494:	2301      	movs	r3, #1
 8004496:	2110      	movs	r1, #16
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f7ff ff6a 	bl	8004372 <lps22hb_read_reg>
 800449e:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d10f      	bne.n	80044c6 <lps22hb_low_pass_filter_mode_set+0x42>
    ctrl_reg1.lpfp = (uint8_t)val;
 80044a6:	78fb      	ldrb	r3, [r7, #3]
 80044a8:	f003 0303 	and.w	r3, r3, #3
 80044ac:	b2da      	uxtb	r2, r3
 80044ae:	7a3b      	ldrb	r3, [r7, #8]
 80044b0:	f362 0383 	bfi	r3, r2, #2, #2
 80044b4:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 80044b6:	f107 0208 	add.w	r2, r7, #8
 80044ba:	2301      	movs	r3, #1
 80044bc:	2110      	movs	r1, #16
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f7ff ff6f 	bl	80043a2 <lps22hb_write_reg>
 80044c4:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80044c6:	68fb      	ldr	r3, [r7, #12]
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3710      	adds	r7, #16
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <lps22hb_data_rate_set>:
  * @param  val    Change the values of odr in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_data_rate_set(stmdev_ctx_t *ctx, lps22hb_odr_t val)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	460b      	mov	r3, r1
 80044da:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 80044dc:	f107 0208 	add.w	r2, r7, #8
 80044e0:	2301      	movs	r3, #1
 80044e2:	2110      	movs	r1, #16
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f7ff ff44 	bl	8004372 <lps22hb_read_reg>
 80044ea:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d10f      	bne.n	8004512 <lps22hb_data_rate_set+0x42>
    ctrl_reg1.odr = (uint8_t)val;
 80044f2:	78fb      	ldrb	r3, [r7, #3]
 80044f4:	f003 0307 	and.w	r3, r3, #7
 80044f8:	b2da      	uxtb	r2, r3
 80044fa:	7a3b      	ldrb	r3, [r7, #8]
 80044fc:	f362 1306 	bfi	r3, r2, #4, #3
 8004500:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8004502:	f107 0208 	add.w	r2, r7, #8
 8004506:	2301      	movs	r3, #1
 8004508:	2110      	movs	r1, #16
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f7ff ff49 	bl	80043a2 <lps22hb_write_reg>
 8004510:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8004512:	68fb      	ldr	r3, [r7, #12]
}
 8004514:	4618      	mov	r0, r3
 8004516:	3710      	adds	r7, #16
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <lps22hb_data_rate_get>:
  * @param  val    Get the values of odr in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_data_rate_get(stmdev_ctx_t *ctx, lps22hb_odr_t *val)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8004526:	f107 0208 	add.w	r2, r7, #8
 800452a:	2301      	movs	r3, #1
 800452c:	2110      	movs	r1, #16
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f7ff ff1f 	bl	8004372 <lps22hb_read_reg>
 8004534:	60f8      	str	r0, [r7, #12]
  switch (ctrl_reg1.odr){
 8004536:	7a3b      	ldrb	r3, [r7, #8]
 8004538:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800453c:	b2db      	uxtb	r3, r3
 800453e:	2b05      	cmp	r3, #5
 8004540:	d826      	bhi.n	8004590 <lps22hb_data_rate_get+0x74>
 8004542:	a201      	add	r2, pc, #4	; (adr r2, 8004548 <lps22hb_data_rate_get+0x2c>)
 8004544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004548:	08004561 	.word	0x08004561
 800454c:	08004569 	.word	0x08004569
 8004550:	08004571 	.word	0x08004571
 8004554:	08004579 	.word	0x08004579
 8004558:	08004581 	.word	0x08004581
 800455c:	08004589 	.word	0x08004589
    case LPS22HB_POWER_DOWN:
      *val = LPS22HB_POWER_DOWN;
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	2200      	movs	r2, #0
 8004564:	701a      	strb	r2, [r3, #0]
      break;
 8004566:	e017      	b.n	8004598 <lps22hb_data_rate_get+0x7c>
    case LPS22HB_ODR_1_Hz:
      *val = LPS22HB_ODR_1_Hz;
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	2201      	movs	r2, #1
 800456c:	701a      	strb	r2, [r3, #0]
      break;
 800456e:	e013      	b.n	8004598 <lps22hb_data_rate_get+0x7c>
    case LPS22HB_ODR_10_Hz:
      *val = LPS22HB_ODR_10_Hz;
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	2202      	movs	r2, #2
 8004574:	701a      	strb	r2, [r3, #0]
      break;
 8004576:	e00f      	b.n	8004598 <lps22hb_data_rate_get+0x7c>
    case LPS22HB_ODR_25_Hz:
      *val = LPS22HB_ODR_25_Hz;
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	2203      	movs	r2, #3
 800457c:	701a      	strb	r2, [r3, #0]
      break;
 800457e:	e00b      	b.n	8004598 <lps22hb_data_rate_get+0x7c>
    case LPS22HB_ODR_50_Hz:
      *val = LPS22HB_ODR_50_Hz;
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	2204      	movs	r2, #4
 8004584:	701a      	strb	r2, [r3, #0]
      break;
 8004586:	e007      	b.n	8004598 <lps22hb_data_rate_get+0x7c>
    case LPS22HB_ODR_75_Hz:
      *val = LPS22HB_ODR_75_Hz;
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	2205      	movs	r2, #5
 800458c:	701a      	strb	r2, [r3, #0]
      break;
 800458e:	e003      	b.n	8004598 <lps22hb_data_rate_get+0x7c>
    default:
      *val = LPS22HB_ODR_1_Hz;
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	2201      	movs	r2, #1
 8004594:	701a      	strb	r2, [r3, #0]
      break;
 8004596:	bf00      	nop
  }

  return ret;
 8004598:	68fb      	ldr	r3, [r7, #12]
}
 800459a:	4618      	mov	r0, r3
 800459c:	3710      	adds	r7, #16
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop

080045a4 <lps22hb_pressure_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_pressure_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret =  lps22hb_read_reg(ctx, LPS22HB_PRESS_OUT_XL, buff, 3);
 80045ae:	2303      	movs	r3, #3
 80045b0:	683a      	ldr	r2, [r7, #0]
 80045b2:	2128      	movs	r1, #40	; 0x28
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f7ff fedc 	bl	8004372 <lps22hb_read_reg>
 80045ba:	60f8      	str	r0, [r7, #12]
  return ret;
 80045bc:	68fb      	ldr	r3, [r7, #12]
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3710      	adds	r7, #16
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}

080045c6 <lps22hb_temperature_raw_get>:
  * @param  buff   Buffer that stores data read.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_temperature_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80045c6:	b580      	push	{r7, lr}
 80045c8:	b084      	sub	sp, #16
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
 80045ce:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret =  lps22hb_read_reg(ctx, LPS22HB_TEMP_OUT_L, (uint8_t*) buff, 2);
 80045d0:	2302      	movs	r3, #2
 80045d2:	683a      	ldr	r2, [r7, #0]
 80045d4:	212b      	movs	r1, #43	; 0x2b
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f7ff fecb 	bl	8004372 <lps22hb_read_reg>
 80045dc:	60f8      	str	r0, [r7, #12]
  return ret;
 80045de:	68fb      	ldr	r3, [r7, #12]
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3710      	adds	r7, #16
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <lps22hb_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret =  lps22hb_read_reg(ctx, LPS22HB_WHO_AM_I, (uint8_t*) buff, 1);
 80045f2:	2301      	movs	r3, #1
 80045f4:	683a      	ldr	r2, [r7, #0]
 80045f6:	210f      	movs	r1, #15
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f7ff feba 	bl	8004372 <lps22hb_read_reg>
 80045fe:	60f8      	str	r0, [r7, #12]
  return ret;
 8004600:	68fb      	ldr	r3, [r7, #12]
}
 8004602:	4618      	mov	r0, r3
 8004604:	3710      	adds	r7, #16
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}

0800460a <lps22hb_low_power_set>:
  * @param  val    Change the values of lc_en in reg RES_CONF
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_low_power_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800460a:	b580      	push	{r7, lr}
 800460c:	b084      	sub	sp, #16
 800460e:	af00      	add	r7, sp, #0
 8004610:	6078      	str	r0, [r7, #4]
 8004612:	460b      	mov	r3, r1
 8004614:	70fb      	strb	r3, [r7, #3]
  lps22hb_res_conf_t res_conf;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_RES_CONF, (uint8_t*)&res_conf, 1);
 8004616:	f107 0208 	add.w	r2, r7, #8
 800461a:	2301      	movs	r3, #1
 800461c:	211a      	movs	r1, #26
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f7ff fea7 	bl	8004372 <lps22hb_read_reg>
 8004624:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d10f      	bne.n	800464c <lps22hb_low_power_set+0x42>
    res_conf.lc_en = val;
 800462c:	78fb      	ldrb	r3, [r7, #3]
 800462e:	f003 0301 	and.w	r3, r3, #1
 8004632:	b2da      	uxtb	r2, r3
 8004634:	7a3b      	ldrb	r3, [r7, #8]
 8004636:	f362 0300 	bfi	r3, r2, #0, #1
 800463a:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_RES_CONF, (uint8_t*)&res_conf, 1);
 800463c:	f107 0208 	add.w	r2, r7, #8
 8004640:	2301      	movs	r3, #1
 8004642:	211a      	movs	r1, #26
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f7ff feac 	bl	80043a2 <lps22hb_write_reg>
 800464a:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800464c:	68fb      	ldr	r3, [r7, #12]
}
 800464e:	4618      	mov	r0, r3
 8004650:	3710      	adds	r7, #16
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}

08004656 <lps22hb_auto_add_inc_set>:
  * @param  val    Change the values of if_add_inc in reg CTRL_REG2
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_auto_add_inc_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004656:	b580      	push	{r7, lr}
 8004658:	b084      	sub	sp, #16
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
 800465e:	460b      	mov	r3, r1
 8004660:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
 8004662:	f107 0208 	add.w	r2, r7, #8
 8004666:	2301      	movs	r3, #1
 8004668:	2111      	movs	r1, #17
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f7ff fe81 	bl	8004372 <lps22hb_read_reg>
 8004670:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d10f      	bne.n	8004698 <lps22hb_auto_add_inc_set+0x42>
    ctrl_reg2.if_add_inc = val;
 8004678:	78fb      	ldrb	r3, [r7, #3]
 800467a:	f003 0301 	and.w	r3, r3, #1
 800467e:	b2da      	uxtb	r2, r3
 8004680:	7a3b      	ldrb	r3, [r7, #8]
 8004682:	f362 1304 	bfi	r3, r2, #4, #1
 8004686:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
 8004688:	f107 0208 	add.w	r2, r7, #8
 800468c:	2301      	movs	r3, #1
 800468e:	2111      	movs	r1, #17
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f7ff fe86 	bl	80043a2 <lps22hb_write_reg>
 8004696:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8004698:	68fb      	ldr	r3, [r7, #12]
}
 800469a:	4618      	mov	r0, r3
 800469c:	3710      	adds	r7, #16
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
	...

080046a4 <LSM303AGR_ACC_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_RegisterBusIO(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80046ae:	2300      	movs	r3, #0
 80046b0:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d103      	bne.n	80046c0 <LSM303AGR_ACC_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 80046b8:	f04f 33ff 	mov.w	r3, #4294967295
 80046bc:	60fb      	str	r3, [r7, #12]
 80046be:	e04d      	b.n	800475c <LSM303AGR_ACC_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	685a      	ldr	r2, [r3, #4]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	689a      	ldr	r2, [r3, #8]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	7b1a      	ldrb	r2, [r3, #12]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	691a      	ldr	r2, [r3, #16]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	695a      	ldr	r2, [r3, #20]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	699a      	ldr	r2, [r3, #24]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadAccRegWrap;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	4a1b      	ldr	r2, [pc, #108]	; (8004768 <LSM303AGR_ACC_RegisterBusIO+0xc4>)
 80046fc:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteAccRegWrap;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a1a      	ldr	r2, [pc, #104]	; (800476c <LSM303AGR_ACC_RegisterBusIO+0xc8>)
 8004702:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d103      	bne.n	800471a <LSM303AGR_ACC_RegisterBusIO+0x76>
    {
      ret = LSM303AGR_ERROR;
 8004712:	f04f 33ff 	mov.w	r3, #4294967295
 8004716:	60fb      	str	r3, [r7, #12]
 8004718:	e020      	b.n	800475c <LSM303AGR_ACC_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4798      	blx	r3
 8004720:	4603      	mov	r3, r0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d003      	beq.n	800472e <LSM303AGR_ACC_RegisterBusIO+0x8a>
    {
      ret = LSM303AGR_ERROR;
 8004726:	f04f 33ff 	mov.w	r3, #4294967295
 800472a:	60fb      	str	r3, [r7, #12]
 800472c:	e016      	b.n	800475c <LSM303AGR_ACC_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM303AGR_SPI_3WIRES_BUS) /* SPI 3-Wires */
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	2b01      	cmp	r3, #1
 8004734:	d112      	bne.n	800475c <LSM303AGR_ACC_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800473c:	2b00      	cmp	r3, #0
 800473e:	d10d      	bne.n	800475c <LSM303AGR_ACC_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 8004740:	2301      	movs	r3, #1
 8004742:	72fb      	strb	r3, [r7, #11]

          if (LSM303AGR_ACC_Write_Reg(pObj, LSM303AGR_CTRL_REG4_A, data) != LSM303AGR_OK)
 8004744:	7afb      	ldrb	r3, [r7, #11]
 8004746:	461a      	mov	r2, r3
 8004748:	2123      	movs	r1, #35	; 0x23
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f000 fb50 	bl	8004df0 <LSM303AGR_ACC_Write_Reg>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d002      	beq.n	800475c <LSM303AGR_ACC_RegisterBusIO+0xb8>
          {
            return LSM303AGR_ERROR;
 8004756:	f04f 33ff 	mov.w	r3, #4294967295
 800475a:	e000      	b.n	800475e <LSM303AGR_ACC_RegisterBusIO+0xba>
        }
      }
    }
  }

  return ret;
 800475c:	68fb      	ldr	r3, [r7, #12]
}
 800475e:	4618      	mov	r0, r3
 8004760:	3710      	adds	r7, #16
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	080055f9 	.word	0x080055f9
 800476c:	0800565b 	.word	0x0800565b

08004770 <LSM303AGR_ACC_Init>:
 * @brief  Initialize the LSM303AGR sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Init(LSM303AGR_ACC_Object_t *pObj)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b082      	sub	sp, #8
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_xl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	331c      	adds	r3, #28
 800477c:	2101      	movs	r1, #1
 800477e:	4618      	mov	r0, r3
 8004780:	f001 f942 	bl	8005a08 <lsm303agr_xl_block_data_update_set>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d002      	beq.n	8004790 <LSM303AGR_ACC_Init+0x20>
  {
    return LSM303AGR_ERROR;
 800478a:	f04f 33ff 	mov.w	r3, #4294967295
 800478e:	e02c      	b.n	80047ea <LSM303AGR_ACC_Init+0x7a>
  }

  /* FIFO mode selection */
  if (lsm303agr_xl_fifo_mode_set(&(pObj->Ctx), LSM303AGR_BYPASS_MODE) != LSM303AGR_OK)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	331c      	adds	r3, #28
 8004794:	2100      	movs	r1, #0
 8004796:	4618      	mov	r0, r3
 8004798:	f001 fa71 	bl	8005c7e <lsm303agr_xl_fifo_mode_set>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d002      	beq.n	80047a8 <LSM303AGR_ACC_Init+0x38>
  {
    return LSM303AGR_ERROR;
 80047a2:	f04f 33ff 	mov.w	r3, #4294967295
 80047a6:	e020      	b.n	80047ea <LSM303AGR_ACC_Init+0x7a>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM303AGR_XL_ODR_100Hz;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2205      	movs	r2, #5
 80047ac:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	331c      	adds	r3, #28
 80047b4:	2100      	movs	r1, #0
 80047b6:	4618      	mov	r0, r3
 80047b8:	f001 f846 	bl	8005848 <lsm303agr_xl_data_rate_set>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d002      	beq.n	80047c8 <LSM303AGR_ACC_Init+0x58>
  {
    return LSM303AGR_ERROR;
 80047c2:	f04f 33ff 	mov.w	r3, #4294967295
 80047c6:	e010      	b.n	80047ea <LSM303AGR_ACC_Init+0x7a>
  }

  /* Full scale selection. */
  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), LSM303AGR_2g) != LSM303AGR_OK)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	331c      	adds	r3, #28
 80047cc:	2100      	movs	r1, #0
 80047ce:	4618      	mov	r0, r3
 80047d0:	f001 f8bc 	bl	800594c <lsm303agr_xl_full_scale_set>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d002      	beq.n	80047e0 <LSM303AGR_ACC_Init+0x70>
  {
    return LSM303AGR_ERROR;
 80047da:	f04f 33ff 	mov.w	r3, #4294967295
 80047de:	e004      	b.n	80047ea <LSM303AGR_ACC_Init+0x7a>
  }

  pObj->is_initialized = 1;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 80047e8:	2300      	movs	r3, #0
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3708      	adds	r7, #8
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}

080047f2 <LSM303AGR_ACC_DeInit>:
 * @brief  Deinitialize the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_DeInit(LSM303AGR_ACC_Object_t *pObj)
{
 80047f2:	b580      	push	{r7, lr}
 80047f4:	b082      	sub	sp, #8
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM303AGR_ACC_Disable(pObj) != LSM303AGR_OK)
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 f87c 	bl	80048f8 <LSM303AGR_ACC_Disable>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d002      	beq.n	800480c <LSM303AGR_ACC_DeInit+0x1a>
  {
    return LSM303AGR_ERROR;
 8004806:	f04f 33ff 	mov.w	r3, #4294967295
 800480a:	e008      	b.n	800481e <LSM303AGR_ACC_DeInit+0x2c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM303AGR_XL_POWER_DOWN;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  pObj->is_initialized = 0;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 800481c:	2300      	movs	r3, #0
}
 800481e:	4618      	mov	r0, r3
 8004820:	3708      	adds	r7, #8
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}

08004826 <LSM303AGR_ACC_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_ReadID(LSM303AGR_ACC_Object_t *pObj, uint8_t *Id)
{
 8004826:	b580      	push	{r7, lr}
 8004828:	b082      	sub	sp, #8
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
 800482e:	6039      	str	r1, [r7, #0]
  if (lsm303agr_xl_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	331c      	adds	r3, #28
 8004834:	6839      	ldr	r1, [r7, #0]
 8004836:	4618      	mov	r0, r3
 8004838:	f001 f9d9 	bl	8005bee <lsm303agr_xl_device_id_get>
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d002      	beq.n	8004848 <LSM303AGR_ACC_ReadID+0x22>
  {
    return LSM303AGR_ERROR;
 8004842:	f04f 33ff 	mov.w	r3, #4294967295
 8004846:	e000      	b.n	800484a <LSM303AGR_ACC_ReadID+0x24>
  }

  return LSM303AGR_OK;
 8004848:	2300      	movs	r3, #0
}
 800484a:	4618      	mov	r0, r3
 800484c:	3708      	adds	r7, #8
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
	...

08004854 <LSM303AGR_ACC_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM303AGR accelerometer sensor capabilities
 * @retval Component status
 */
int32_t LSM303AGR_ACC_GetCapabilities(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	2201      	movs	r2, #1
 8004862:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	2200      	movs	r2, #0
 8004868:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	2200      	movs	r2, #0
 800486e:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	2200      	movs	r2, #0
 8004874:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	2200      	movs	r2, #0
 800487a:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	2210      	movs	r2, #16
 8004880:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	2200      	movs	r2, #0
 8004886:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	f04f 0200 	mov.w	r2, #0
 800488e:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 400.0f;
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	4a06      	ldr	r2, [pc, #24]	; (80048ac <LSM303AGR_ACC_GetCapabilities+0x58>)
 8004894:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	f04f 0200 	mov.w	r2, #0
 800489c:	619a      	str	r2, [r3, #24]
  return LSM303AGR_OK;
 800489e:	2300      	movs	r3, #0
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr
 80048ac:	43c80000 	.word	0x43c80000

080048b0 <LSM303AGR_ACC_Enable>:
 * @brief  Enable the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Enable(LSM303AGR_ACC_Object_t *pObj)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b082      	sub	sp, #8
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d101      	bne.n	80048c6 <LSM303AGR_ACC_Enable+0x16>
  {
    return LSM303AGR_OK;
 80048c2:	2300      	movs	r3, #0
 80048c4:	e014      	b.n	80048f0 <LSM303AGR_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM303AGR_OK)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f103 021c 	add.w	r2, r3, #28
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80048d2:	4619      	mov	r1, r3
 80048d4:	4610      	mov	r0, r2
 80048d6:	f000 ffb7 	bl	8005848 <lsm303agr_xl_data_rate_set>
 80048da:	4603      	mov	r3, r0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d002      	beq.n	80048e6 <LSM303AGR_ACC_Enable+0x36>
  {
    return LSM303AGR_ERROR;
 80048e0:	f04f 33ff 	mov.w	r3, #4294967295
 80048e4:	e004      	b.n	80048f0 <LSM303AGR_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2201      	movs	r2, #1
 80048ea:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 80048ee:	2300      	movs	r3, #0
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3708      	adds	r7, #8
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <LSM303AGR_ACC_Disable>:
 * @brief  Disable the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Disable(LSM303AGR_ACC_Object_t *pObj)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004906:	2b00      	cmp	r3, #0
 8004908:	d101      	bne.n	800490e <LSM303AGR_ACC_Disable+0x16>
  {
    return LSM303AGR_OK;
 800490a:	2300      	movs	r3, #0
 800490c:	e01f      	b.n	800494e <LSM303AGR_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM303AGR_OK)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f103 021c 	add.w	r2, r3, #28
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	332a      	adds	r3, #42	; 0x2a
 8004918:	4619      	mov	r1, r3
 800491a:	4610      	mov	r0, r2
 800491c:	f000 ffba 	bl	8005894 <lsm303agr_xl_data_rate_get>
 8004920:	4603      	mov	r3, r0
 8004922:	2b00      	cmp	r3, #0
 8004924:	d002      	beq.n	800492c <LSM303AGR_ACC_Disable+0x34>
  {
    return LSM303AGR_ERROR;
 8004926:	f04f 33ff 	mov.w	r3, #4294967295
 800492a:	e010      	b.n	800494e <LSM303AGR_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	331c      	adds	r3, #28
 8004930:	2100      	movs	r1, #0
 8004932:	4618      	mov	r0, r3
 8004934:	f000 ff88 	bl	8005848 <lsm303agr_xl_data_rate_set>
 8004938:	4603      	mov	r3, r0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d002      	beq.n	8004944 <LSM303AGR_ACC_Disable+0x4c>
  {
    return LSM303AGR_ERROR;
 800493e:	f04f 33ff 	mov.w	r3, #4294967295
 8004942:	e004      	b.n	800494e <LSM303AGR_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 800494c:	2300      	movs	r3, #0
}
 800494e:	4618      	mov	r0, r3
 8004950:	3708      	adds	r7, #8
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}

08004956 <LSM303AGR_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetSensitivity(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8004956:	b580      	push	{r7, lr}
 8004958:	b084      	sub	sp, #16
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
 800495e:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8004960:	2300      	movs	r3, #0
 8004962:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	331c      	adds	r3, #28
 8004968:	f107 020b 	add.w	r2, r7, #11
 800496c:	4611      	mov	r1, r2
 800496e:	4618      	mov	r0, r3
 8004970:	f000 ff36 	bl	80057e0 <lsm303agr_xl_operating_mode_get>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d002      	beq.n	8004980 <LSM303AGR_ACC_GetSensitivity+0x2a>
  {
    return LSM303AGR_ERROR;
 800497a:	f04f 33ff 	mov.w	r3, #4294967295
 800497e:	e02e      	b.n	80049de <LSM303AGR_ACC_GetSensitivity+0x88>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (op_mode)
 8004980:	7afb      	ldrb	r3, [r7, #11]
 8004982:	2b01      	cmp	r3, #1
 8004984:	d00d      	beq.n	80049a2 <LSM303AGR_ACC_GetSensitivity+0x4c>
 8004986:	2b02      	cmp	r3, #2
 8004988:	d015      	beq.n	80049b6 <LSM303AGR_ACC_GetSensitivity+0x60>
 800498a:	2b00      	cmp	r3, #0
 800498c:	d11d      	bne.n	80049ca <LSM303AGR_ACC_GetSensitivity+0x74>
  {
    case LSM303AGR_HR_12bit:
      if (LSM303AGR_ACC_GetSensitivityHR(pObj, Sensitivity) != LSM303AGR_OK)
 800498e:	6839      	ldr	r1, [r7, #0]
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f000 fca5 	bl	80052e0 <LSM303AGR_ACC_GetSensitivityHR>
 8004996:	4603      	mov	r3, r0
 8004998:	2b00      	cmp	r3, #0
 800499a:	d01a      	beq.n	80049d2 <LSM303AGR_ACC_GetSensitivity+0x7c>
      {
        return LSM303AGR_ERROR;
 800499c:	f04f 33ff 	mov.w	r3, #4294967295
 80049a0:	e01d      	b.n	80049de <LSM303AGR_ACC_GetSensitivity+0x88>
      }
      break;

    case LSM303AGR_NM_10bit:
      if (LSM303AGR_ACC_GetSensitivityNM(pObj, Sensitivity) != LSM303AGR_OK)
 80049a2:	6839      	ldr	r1, [r7, #0]
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f000 fce1 	bl	800536c <LSM303AGR_ACC_GetSensitivityNM>
 80049aa:	4603      	mov	r3, r0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d012      	beq.n	80049d6 <LSM303AGR_ACC_GetSensitivity+0x80>
      {
        return LSM303AGR_ERROR;
 80049b0:	f04f 33ff 	mov.w	r3, #4294967295
 80049b4:	e013      	b.n	80049de <LSM303AGR_ACC_GetSensitivity+0x88>
      }
      break;

    case LSM303AGR_LP_8bit:
      if (LSM303AGR_ACC_GetSensitivityLP(pObj, Sensitivity) != LSM303AGR_OK)
 80049b6:	6839      	ldr	r1, [r7, #0]
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f000 fd1d 	bl	80053f8 <LSM303AGR_ACC_GetSensitivityLP>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d00a      	beq.n	80049da <LSM303AGR_ACC_GetSensitivity+0x84>
      {
        return LSM303AGR_ERROR;
 80049c4:	f04f 33ff 	mov.w	r3, #4294967295
 80049c8:	e009      	b.n	80049de <LSM303AGR_ACC_GetSensitivity+0x88>
      }
      break;

    default:
      ret = LSM303AGR_ERROR;
 80049ca:	f04f 33ff 	mov.w	r3, #4294967295
 80049ce:	60fb      	str	r3, [r7, #12]
      break;
 80049d0:	e004      	b.n	80049dc <LSM303AGR_ACC_GetSensitivity+0x86>
      break;
 80049d2:	bf00      	nop
 80049d4:	e002      	b.n	80049dc <LSM303AGR_ACC_GetSensitivity+0x86>
      break;
 80049d6:	bf00      	nop
 80049d8:	e000      	b.n	80049dc <LSM303AGR_ACC_GetSensitivity+0x86>
      break;
 80049da:	bf00      	nop
  }

  return ret;
 80049dc:	68fb      	ldr	r3, [r7, #12]
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3710      	adds	r7, #16
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
	...

080049e8 <LSM303AGR_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetOutputDataRate(LSM303AGR_ACC_Object_t *pObj, float *Odr)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80049f2:	2300      	movs	r3, #0
 80049f4:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;
  lsm303agr_odr_a_t odr_low_level;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	331c      	adds	r3, #28
 80049fa:	f107 020b 	add.w	r2, r7, #11
 80049fe:	4611      	mov	r1, r2
 8004a00:	4618      	mov	r0, r3
 8004a02:	f000 feed 	bl	80057e0 <lsm303agr_xl_operating_mode_get>
 8004a06:	4603      	mov	r3, r0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d002      	beq.n	8004a12 <LSM303AGR_ACC_GetOutputDataRate+0x2a>
  {
    return LSM303AGR_ERROR;
 8004a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8004a10:	e09f      	b.n	8004b52 <LSM303AGR_ACC_GetOutputDataRate+0x16a>
  }

  /* Get current output data rate. */
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	331c      	adds	r3, #28
 8004a16:	f107 020a 	add.w	r2, r7, #10
 8004a1a:	4611      	mov	r1, r2
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f000 ff39 	bl	8005894 <lsm303agr_xl_data_rate_get>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d002      	beq.n	8004a2e <LSM303AGR_ACC_GetOutputDataRate+0x46>
  {
    return LSM303AGR_ERROR;
 8004a28:	f04f 33ff 	mov.w	r3, #4294967295
 8004a2c:	e091      	b.n	8004b52 <LSM303AGR_ACC_GetOutputDataRate+0x16a>
  }

  if (op_mode == LSM303AGR_LP_8bit) /* LP mode */
 8004a2e:	7afb      	ldrb	r3, [r7, #11]
 8004a30:	2b02      	cmp	r3, #2
 8004a32:	d148      	bne.n	8004ac6 <LSM303AGR_ACC_GetOutputDataRate+0xde>
  {
    switch (odr_low_level)
 8004a34:	7abb      	ldrb	r3, [r7, #10]
 8004a36:	2b09      	cmp	r3, #9
 8004a38:	d840      	bhi.n	8004abc <LSM303AGR_ACC_GetOutputDataRate+0xd4>
 8004a3a:	a201      	add	r2, pc, #4	; (adr r2, 8004a40 <LSM303AGR_ACC_GetOutputDataRate+0x58>)
 8004a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a40:	08004a69 	.word	0x08004a69
 8004a44:	08004a73 	.word	0x08004a73
 8004a48:	08004a7d 	.word	0x08004a7d
 8004a4c:	08004a85 	.word	0x08004a85
 8004a50:	08004a8d 	.word	0x08004a8d
 8004a54:	08004a95 	.word	0x08004a95
 8004a58:	08004a9d 	.word	0x08004a9d
 8004a5c:	08004aa5 	.word	0x08004aa5
 8004a60:	08004aad 	.word	0x08004aad
 8004a64:	08004ab5 	.word	0x08004ab5
    {
      case LSM303AGR_XL_POWER_DOWN:
        *Odr = 0.0f;
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	f04f 0200 	mov.w	r2, #0
 8004a6e:	601a      	str	r2, [r3, #0]
        break;
 8004a70:	e06e      	b.n	8004b50 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_1Hz:
        *Odr = 1.0f;
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004a78:	601a      	str	r2, [r3, #0]
        break;
 8004a7a:	e069      	b.n	8004b50 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_10Hz:
        *Odr = 10.0f;
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	4a37      	ldr	r2, [pc, #220]	; (8004b5c <LSM303AGR_ACC_GetOutputDataRate+0x174>)
 8004a80:	601a      	str	r2, [r3, #0]
        break;
 8004a82:	e065      	b.n	8004b50 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_25Hz:
        *Odr = 25.0f;
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	4a36      	ldr	r2, [pc, #216]	; (8004b60 <LSM303AGR_ACC_GetOutputDataRate+0x178>)
 8004a88:	601a      	str	r2, [r3, #0]
        break;
 8004a8a:	e061      	b.n	8004b50 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_50Hz:
        *Odr = 50.0f;
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	4a35      	ldr	r2, [pc, #212]	; (8004b64 <LSM303AGR_ACC_GetOutputDataRate+0x17c>)
 8004a90:	601a      	str	r2, [r3, #0]
        break;
 8004a92:	e05d      	b.n	8004b50 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_100Hz:
        *Odr = 100.0f;
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	4a34      	ldr	r2, [pc, #208]	; (8004b68 <LSM303AGR_ACC_GetOutputDataRate+0x180>)
 8004a98:	601a      	str	r2, [r3, #0]
        break;
 8004a9a:	e059      	b.n	8004b50 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_200Hz:
        *Odr = 200.0f;
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	4a33      	ldr	r2, [pc, #204]	; (8004b6c <LSM303AGR_ACC_GetOutputDataRate+0x184>)
 8004aa0:	601a      	str	r2, [r3, #0]
        break;
 8004aa2:	e055      	b.n	8004b50 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_400Hz:
        *Odr = 400.0f;
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	4a32      	ldr	r2, [pc, #200]	; (8004b70 <LSM303AGR_ACC_GetOutputDataRate+0x188>)
 8004aa8:	601a      	str	r2, [r3, #0]
        break;
 8004aaa:	e051      	b.n	8004b50 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_1kHz620_LP:
        *Odr = 1620.0f;
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	4a31      	ldr	r2, [pc, #196]	; (8004b74 <LSM303AGR_ACC_GetOutputDataRate+0x18c>)
 8004ab0:	601a      	str	r2, [r3, #0]
        break;
 8004ab2:	e04d      	b.n	8004b50 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
        *Odr = 5376.0f;
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	4a30      	ldr	r2, [pc, #192]	; (8004b78 <LSM303AGR_ACC_GetOutputDataRate+0x190>)
 8004ab8:	601a      	str	r2, [r3, #0]
        break;
 8004aba:	e049      	b.n	8004b50 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      default:
        ret = LSM303AGR_ERROR;
 8004abc:	f04f 33ff 	mov.w	r3, #4294967295
 8004ac0:	60fb      	str	r3, [r7, #12]
        break;
 8004ac2:	bf00      	nop
 8004ac4:	e044      	b.n	8004b50 <LSM303AGR_ACC_GetOutputDataRate+0x168>
    }
  }
  else /* HR and NM modes */
  {
    switch (odr_low_level)
 8004ac6:	7abb      	ldrb	r3, [r7, #10]
 8004ac8:	2b09      	cmp	r3, #9
 8004aca:	d83d      	bhi.n	8004b48 <LSM303AGR_ACC_GetOutputDataRate+0x160>
 8004acc:	a201      	add	r2, pc, #4	; (adr r2, 8004ad4 <LSM303AGR_ACC_GetOutputDataRate+0xec>)
 8004ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ad2:	bf00      	nop
 8004ad4:	08004afd 	.word	0x08004afd
 8004ad8:	08004b07 	.word	0x08004b07
 8004adc:	08004b11 	.word	0x08004b11
 8004ae0:	08004b19 	.word	0x08004b19
 8004ae4:	08004b21 	.word	0x08004b21
 8004ae8:	08004b29 	.word	0x08004b29
 8004aec:	08004b31 	.word	0x08004b31
 8004af0:	08004b39 	.word	0x08004b39
 8004af4:	08004b49 	.word	0x08004b49
 8004af8:	08004b41 	.word	0x08004b41
    {
      case LSM303AGR_XL_POWER_DOWN:
        *Odr = 0.0f;
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	f04f 0200 	mov.w	r2, #0
 8004b02:	601a      	str	r2, [r3, #0]
        break;
 8004b04:	e024      	b.n	8004b50 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_1Hz:
        *Odr = 1.0f;
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004b0c:	601a      	str	r2, [r3, #0]
        break;
 8004b0e:	e01f      	b.n	8004b50 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_10Hz:
        *Odr = 10.0f;
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	4a12      	ldr	r2, [pc, #72]	; (8004b5c <LSM303AGR_ACC_GetOutputDataRate+0x174>)
 8004b14:	601a      	str	r2, [r3, #0]
        break;
 8004b16:	e01b      	b.n	8004b50 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_25Hz:
        *Odr = 25.0f;
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	4a11      	ldr	r2, [pc, #68]	; (8004b60 <LSM303AGR_ACC_GetOutputDataRate+0x178>)
 8004b1c:	601a      	str	r2, [r3, #0]
        break;
 8004b1e:	e017      	b.n	8004b50 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_50Hz:
        *Odr = 50.0f;
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	4a10      	ldr	r2, [pc, #64]	; (8004b64 <LSM303AGR_ACC_GetOutputDataRate+0x17c>)
 8004b24:	601a      	str	r2, [r3, #0]
        break;
 8004b26:	e013      	b.n	8004b50 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_100Hz:
        *Odr = 100.0f;
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	4a0f      	ldr	r2, [pc, #60]	; (8004b68 <LSM303AGR_ACC_GetOutputDataRate+0x180>)
 8004b2c:	601a      	str	r2, [r3, #0]
        break;
 8004b2e:	e00f      	b.n	8004b50 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_200Hz:
        *Odr = 200.0f;
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	4a0e      	ldr	r2, [pc, #56]	; (8004b6c <LSM303AGR_ACC_GetOutputDataRate+0x184>)
 8004b34:	601a      	str	r2, [r3, #0]
        break;
 8004b36:	e00b      	b.n	8004b50 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_400Hz:
        *Odr = 400.0f;
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	4a0d      	ldr	r2, [pc, #52]	; (8004b70 <LSM303AGR_ACC_GetOutputDataRate+0x188>)
 8004b3c:	601a      	str	r2, [r3, #0]
        break;
 8004b3e:	e007      	b.n	8004b50 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
        *Odr = 1344.0f;
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	4a0e      	ldr	r2, [pc, #56]	; (8004b7c <LSM303AGR_ACC_GetOutputDataRate+0x194>)
 8004b44:	601a      	str	r2, [r3, #0]
        break;
 8004b46:	e003      	b.n	8004b50 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      default:
        ret = LSM303AGR_ERROR;
 8004b48:	f04f 33ff 	mov.w	r3, #4294967295
 8004b4c:	60fb      	str	r3, [r7, #12]
        break;
 8004b4e:	bf00      	nop
    }
  }

  return ret;
 8004b50:	68fb      	ldr	r3, [r7, #12]
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3710      	adds	r7, #16
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	41200000 	.word	0x41200000
 8004b60:	41c80000 	.word	0x41c80000
 8004b64:	42480000 	.word	0x42480000
 8004b68:	42c80000 	.word	0x42c80000
 8004b6c:	43480000 	.word	0x43480000
 8004b70:	43c80000 	.word	0x43c80000
 8004b74:	44ca8000 	.word	0x44ca8000
 8004b78:	45a80000 	.word	0x45a80000
 8004b7c:	44a80000 	.word	0x44a80000

08004b80 <LSM303AGR_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_SetOutputDataRate(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b082      	sub	sp, #8
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d105      	bne.n	8004ba0 <LSM303AGR_ACC_SetOutputDataRate+0x20>
  {
    return LSM303AGR_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8004b94:	6839      	ldr	r1, [r7, #0]
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f000 fc74 	bl	8005484 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	e004      	b.n	8004baa <LSM303AGR_ACC_SetOutputDataRate+0x2a>
  }
  else
  {
    return LSM303AGR_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8004ba0:	6839      	ldr	r1, [r7, #0]
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f000 fcd0 	bl	8005548 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>
 8004ba8:	4603      	mov	r3, r0
  }
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3708      	adds	r7, #8
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
	...

08004bb4 <LSM303AGR_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetFullScale(LSM303AGR_ACC_Object_t *pObj, int32_t *FullScale)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b084      	sub	sp, #16
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM303AGR_OK)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	331c      	adds	r3, #28
 8004bc6:	f107 020b 	add.w	r2, r7, #11
 8004bca:	4611      	mov	r1, r2
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f000 fee3 	bl	8005998 <lsm303agr_xl_full_scale_get>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d002      	beq.n	8004bde <LSM303AGR_ACC_GetFullScale+0x2a>
  {
    return LSM303AGR_ERROR;
 8004bd8:	f04f 33ff 	mov.w	r3, #4294967295
 8004bdc:	e023      	b.n	8004c26 <LSM303AGR_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8004bde:	7afb      	ldrb	r3, [r7, #11]
 8004be0:	2b03      	cmp	r3, #3
 8004be2:	d81b      	bhi.n	8004c1c <LSM303AGR_ACC_GetFullScale+0x68>
 8004be4:	a201      	add	r2, pc, #4	; (adr r2, 8004bec <LSM303AGR_ACC_GetFullScale+0x38>)
 8004be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bea:	bf00      	nop
 8004bec:	08004bfd 	.word	0x08004bfd
 8004bf0:	08004c05 	.word	0x08004c05
 8004bf4:	08004c0d 	.word	0x08004c0d
 8004bf8:	08004c15 	.word	0x08004c15
  {
    case LSM303AGR_2g:
      *FullScale =  2;
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	2202      	movs	r2, #2
 8004c00:	601a      	str	r2, [r3, #0]
      break;
 8004c02:	e00f      	b.n	8004c24 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_4g:
      *FullScale =  4;
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	2204      	movs	r2, #4
 8004c08:	601a      	str	r2, [r3, #0]
      break;
 8004c0a:	e00b      	b.n	8004c24 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_8g:
      *FullScale =  8;
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	2208      	movs	r2, #8
 8004c10:	601a      	str	r2, [r3, #0]
      break;
 8004c12:	e007      	b.n	8004c24 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_16g:
      *FullScale = 16;
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	2210      	movs	r2, #16
 8004c18:	601a      	str	r2, [r3, #0]
      break;
 8004c1a:	e003      	b.n	8004c24 <LSM303AGR_ACC_GetFullScale+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8004c1c:	f04f 33ff 	mov.w	r3, #4294967295
 8004c20:	60fb      	str	r3, [r7, #12]
      break;
 8004c22:	bf00      	nop
  }

  return ret;
 8004c24:	68fb      	ldr	r3, [r7, #12]
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3710      	adds	r7, #16
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop

08004c30 <LSM303AGR_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_SetFullScale(LSM303AGR_ACC_Object_t *pObj, int32_t FullScale)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	6039      	str	r1, [r7, #0]
  lsm303agr_fs_a_t new_fs;

  new_fs = (FullScale <= 2) ? LSM303AGR_2g
           : (FullScale <= 4) ? LSM303AGR_4g
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	dd0b      	ble.n	8004c58 <LSM303AGR_ACC_SetFullScale+0x28>
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	2b04      	cmp	r3, #4
 8004c44:	dd06      	ble.n	8004c54 <LSM303AGR_ACC_SetFullScale+0x24>
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	2b08      	cmp	r3, #8
 8004c4a:	dc01      	bgt.n	8004c50 <LSM303AGR_ACC_SetFullScale+0x20>
 8004c4c:	2302      	movs	r3, #2
 8004c4e:	e004      	b.n	8004c5a <LSM303AGR_ACC_SetFullScale+0x2a>
 8004c50:	2303      	movs	r3, #3
 8004c52:	e002      	b.n	8004c5a <LSM303AGR_ACC_SetFullScale+0x2a>
 8004c54:	2301      	movs	r3, #1
 8004c56:	e000      	b.n	8004c5a <LSM303AGR_ACC_SetFullScale+0x2a>
 8004c58:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM303AGR_2g
 8004c5a:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM303AGR_8g
           :                    LSM303AGR_16g;

  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM303AGR_OK)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	331c      	adds	r3, #28
 8004c60:	7bfa      	ldrb	r2, [r7, #15]
 8004c62:	4611      	mov	r1, r2
 8004c64:	4618      	mov	r0, r3
 8004c66:	f000 fe71 	bl	800594c <lsm303agr_xl_full_scale_set>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d002      	beq.n	8004c76 <LSM303AGR_ACC_SetFullScale+0x46>
  {
    return LSM303AGR_ERROR;
 8004c70:	f04f 33ff 	mov.w	r3, #4294967295
 8004c74:	e000      	b.n	8004c78 <LSM303AGR_ACC_SetFullScale+0x48>
  }

  return LSM303AGR_OK;
 8004c76:	2300      	movs	r3, #0
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3710      	adds	r7, #16
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <LSM303AGR_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetAxesRaw(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b088      	sub	sp, #32
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	6039      	str	r1, [r7, #0]
  int16_t divisor = 1;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	83fb      	strh	r3, [r7, #30]
  lsm303agr_axis3bit16_t data_raw;
  int32_t ret = LSM303AGR_OK;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	61bb      	str	r3, [r7, #24]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	331c      	adds	r3, #28
 8004c96:	f107 020f 	add.w	r2, r7, #15
 8004c9a:	4611      	mov	r1, r2
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f000 fd9f 	bl	80057e0 <lsm303agr_xl_operating_mode_get>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d002      	beq.n	8004cae <LSM303AGR_ACC_GetAxesRaw+0x2e>
  {
    return LSM303AGR_ERROR;
 8004ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8004cac:	e047      	b.n	8004d3e <LSM303AGR_ACC_GetAxesRaw+0xbe>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (op_mode)
 8004cae:	7bfb      	ldrb	r3, [r7, #15]
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d006      	beq.n	8004cc2 <LSM303AGR_ACC_GetAxesRaw+0x42>
 8004cb4:	2b02      	cmp	r3, #2
 8004cb6:	d007      	beq.n	8004cc8 <LSM303AGR_ACC_GetAxesRaw+0x48>
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d109      	bne.n	8004cd0 <LSM303AGR_ACC_GetAxesRaw+0x50>
  {
    case LSM303AGR_HR_12bit:
      divisor = 16;
 8004cbc:	2310      	movs	r3, #16
 8004cbe:	83fb      	strh	r3, [r7, #30]
      break;
 8004cc0:	e00a      	b.n	8004cd8 <LSM303AGR_ACC_GetAxesRaw+0x58>

    case LSM303AGR_NM_10bit:
      divisor = 64;
 8004cc2:	2340      	movs	r3, #64	; 0x40
 8004cc4:	83fb      	strh	r3, [r7, #30]
      break;
 8004cc6:	e007      	b.n	8004cd8 <LSM303AGR_ACC_GetAxesRaw+0x58>

    case LSM303AGR_LP_8bit:
      divisor = 256;
 8004cc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ccc:	83fb      	strh	r3, [r7, #30]
      break;
 8004cce:	e003      	b.n	8004cd8 <LSM303AGR_ACC_GetAxesRaw+0x58>

    default:
      ret = LSM303AGR_ERROR;
 8004cd0:	f04f 33ff 	mov.w	r3, #4294967295
 8004cd4:	61bb      	str	r3, [r7, #24]
      break;
 8004cd6:	bf00      	nop
  }

  if (ret == LSM303AGR_ERROR)
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cde:	d101      	bne.n	8004ce4 <LSM303AGR_ACC_GetAxesRaw+0x64>
  {
    return ret;
 8004ce0:	69bb      	ldr	r3, [r7, #24]
 8004ce2:	e02c      	b.n	8004d3e <LSM303AGR_ACC_GetAxesRaw+0xbe>
  }

  /* Read raw data values. */
  if (lsm303agr_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM303AGR_OK)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	331c      	adds	r3, #28
 8004ce8:	f107 0210 	add.w	r2, r7, #16
 8004cec:	4611      	mov	r1, r2
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f000 feb0 	bl	8005a54 <lsm303agr_acceleration_raw_get>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d002      	beq.n	8004d00 <LSM303AGR_ACC_GetAxesRaw+0x80>
  {
    return LSM303AGR_ERROR;
 8004cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8004cfe:	e01e      	b.n	8004d3e <LSM303AGR_ACC_GetAxesRaw+0xbe>
  }

  /* Format the data. */
  Value->x = (data_raw.i16bit[0] / divisor);
 8004d00:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004d04:	461a      	mov	r2, r3
 8004d06:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004d0a:	fb92 f3f3 	sdiv	r3, r2, r3
 8004d0e:	b21a      	sxth	r2, r3
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	801a      	strh	r2, [r3, #0]
  Value->y = (data_raw.i16bit[1] / divisor);
 8004d14:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004d18:	461a      	mov	r2, r3
 8004d1a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004d1e:	fb92 f3f3 	sdiv	r3, r2, r3
 8004d22:	b21a      	sxth	r2, r3
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	805a      	strh	r2, [r3, #2]
  Value->z = (data_raw.i16bit[2] / divisor);
 8004d28:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004d32:	fb92 f3f3 	sdiv	r3, r2, r3
 8004d36:	b21a      	sxth	r2, r3
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	809a      	strh	r2, [r3, #4]

  return ret;
 8004d3c:	69bb      	ldr	r3, [r7, #24]
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3720      	adds	r7, #32
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}

08004d46 <LSM303AGR_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetAxes(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Axes_t *Acceleration)
{
 8004d46:	b580      	push	{r7, lr}
 8004d48:	b086      	sub	sp, #24
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	6078      	str	r0, [r7, #4]
 8004d4e:	6039      	str	r1, [r7, #0]
  LSM303AGR_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 8004d50:	f04f 0300 	mov.w	r3, #0
 8004d54:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LSM303AGR_ACC_GetAxesRaw(pObj, &data_raw) != LSM303AGR_OK)
 8004d56:	f107 0310 	add.w	r3, r7, #16
 8004d5a:	4619      	mov	r1, r3
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f7ff ff8f 	bl	8004c80 <LSM303AGR_ACC_GetAxesRaw>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d002      	beq.n	8004d6e <LSM303AGR_ACC_GetAxes+0x28>
  {
    return LSM303AGR_ERROR;
 8004d68:	f04f 33ff 	mov.w	r3, #4294967295
 8004d6c:	e03c      	b.n	8004de8 <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Get LSM303AGR actual sensitivity. */
  if (LSM303AGR_ACC_GetSensitivity(pObj, &sensitivity) != LSM303AGR_OK)
 8004d6e:	f107 030c 	add.w	r3, r7, #12
 8004d72:	4619      	mov	r1, r3
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f7ff fdee 	bl	8004956 <LSM303AGR_ACC_GetSensitivity>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d002      	beq.n	8004d86 <LSM303AGR_ACC_GetAxes+0x40>
  {
    return LSM303AGR_ERROR;
 8004d80:	f04f 33ff 	mov.w	r3, #4294967295
 8004d84:	e030      	b.n	8004de8 <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8004d86:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004d8a:	ee07 3a90 	vmov	s15, r3
 8004d8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d92:	edd7 7a03 	vldr	s15, [r7, #12]
 8004d96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d9e:	ee17 2a90 	vmov	r2, s15
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8004da6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004daa:	ee07 3a90 	vmov	s15, r3
 8004dae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004db2:	edd7 7a03 	vldr	s15, [r7, #12]
 8004db6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004dbe:	ee17 2a90 	vmov	r2, s15
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8004dc6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004dca:	ee07 3a90 	vmov	s15, r3
 8004dce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004dd2:	edd7 7a03 	vldr	s15, [r7, #12]
 8004dd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dda:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004dde:	ee17 2a90 	vmov	r2, s15
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 8004de6:	2300      	movs	r3, #0
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3718      	adds	r7, #24
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <LSM303AGR_ACC_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Write_Reg(LSM303AGR_ACC_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b082      	sub	sp, #8
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	460b      	mov	r3, r1
 8004dfa:	70fb      	strb	r3, [r7, #3]
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	70bb      	strb	r3, [r7, #2]
  if (lsm303agr_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM303AGR_OK)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f103 001c 	add.w	r0, r3, #28
 8004e06:	1cba      	adds	r2, r7, #2
 8004e08:	78f9      	ldrb	r1, [r7, #3]
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	f000 fcd0 	bl	80057b0 <lsm303agr_write_reg>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d002      	beq.n	8004e1c <LSM303AGR_ACC_Write_Reg+0x2c>
  {
    return LSM303AGR_ERROR;
 8004e16:	f04f 33ff 	mov.w	r3, #4294967295
 8004e1a:	e000      	b.n	8004e1e <LSM303AGR_ACC_Write_Reg+0x2e>
  }

  return LSM303AGR_OK;
 8004e1c:	2300      	movs	r3, #0
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3708      	adds	r7, #8
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
	...

08004e28 <LSM303AGR_MAG_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_RegisterBusIO(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8004e32:	2300      	movs	r3, #0
 8004e34:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d103      	bne.n	8004e44 <LSM303AGR_MAG_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 8004e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8004e40:	60fb      	str	r3, [r7, #12]
 8004e42:	e04b      	b.n	8004edc <LSM303AGR_MAG_RegisterBusIO+0xb4>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	685a      	ldr	r2, [r3, #4]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	689a      	ldr	r2, [r3, #8]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	7b1a      	ldrb	r2, [r3, #12]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	691a      	ldr	r2, [r3, #16]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	695a      	ldr	r2, [r3, #20]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	699a      	ldr	r2, [r3, #24]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4a1a      	ldr	r2, [pc, #104]	; (8004ee8 <LSM303AGR_MAG_RegisterBusIO+0xc0>)
 8004e80:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a19      	ldr	r2, [pc, #100]	; (8004eec <LSM303AGR_MAG_RegisterBusIO+0xc4>)
 8004e86:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d103      	bne.n	8004e9e <LSM303AGR_MAG_RegisterBusIO+0x76>
    {
      ret = LSM303AGR_ERROR;
 8004e96:	f04f 33ff 	mov.w	r3, #4294967295
 8004e9a:	60fb      	str	r3, [r7, #12]
 8004e9c:	e01e      	b.n	8004edc <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4798      	blx	r3
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d003      	beq.n	8004eb2 <LSM303AGR_MAG_RegisterBusIO+0x8a>
    {
      ret = LSM303AGR_ERROR;
 8004eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8004eae:	60fb      	str	r3, [r7, #12]
 8004eb0:	e014      	b.n	8004edc <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else
    {
      if (pObj->IO.BusType != LSM303AGR_I2C_BUS) /* If the bus type is not I2C */
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d010      	beq.n	8004edc <LSM303AGR_MAG_RegisterBusIO+0xb4>
      {
        /* Disable I2C interface support only the first time */
        if (pObj->is_initialized == 0U)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d10b      	bne.n	8004edc <LSM303AGR_MAG_RegisterBusIO+0xb4>
        {
          /* Disable I2C interface on the component */
          if (lsm303agr_mag_i2c_interface_set(&(pObj->Ctx), LSM303AGR_I2C_DISABLE) != LSM303AGR_OK)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	331c      	adds	r3, #28
 8004ec8:	2101      	movs	r1, #1
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f000 fefd 	bl	8005cca <lsm303agr_mag_i2c_interface_set>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d002      	beq.n	8004edc <LSM303AGR_MAG_RegisterBusIO+0xb4>
          {
            return LSM303AGR_ERROR;
 8004ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8004eda:	e000      	b.n	8004ede <LSM303AGR_MAG_RegisterBusIO+0xb6>
        }
      }
    }
  }

  return ret;
 8004edc:	68fb      	ldr	r3, [r7, #12]
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3710      	adds	r7, #16
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	080056bd 	.word	0x080056bd
 8004eec:	0800571f 	.word	0x0800571f

08004ef0 <LSM303AGR_MAG_Init>:
 * @brief  Initialize the LSM303AGR sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Init(LSM303AGR_MAG_Object_t *pObj)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b082      	sub	sp, #8
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_mag_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	331c      	adds	r3, #28
 8004efc:	2101      	movs	r1, #1
 8004efe:	4618      	mov	r0, r3
 8004f00:	f000 fe3e 	bl	8005b80 <lsm303agr_mag_block_data_update_set>
 8004f04:	4603      	mov	r3, r0
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d002      	beq.n	8004f10 <LSM303AGR_MAG_Init+0x20>
  {
    return LSM303AGR_ERROR;
 8004f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8004f0e:	e028      	b.n	8004f62 <LSM303AGR_MAG_Init+0x72>
  }

  /* Operating mode selection - power down */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	331c      	adds	r3, #28
 8004f14:	2102      	movs	r1, #2
 8004f16:	4618      	mov	r0, r3
 8004f18:	f000 fdad 	bl	8005a76 <lsm303agr_mag_operating_mode_set>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d002      	beq.n	8004f28 <LSM303AGR_MAG_Init+0x38>
  {
    return LSM303AGR_ERROR;
 8004f22:	f04f 33ff 	mov.w	r3, #4294967295
 8004f26:	e01c      	b.n	8004f62 <LSM303AGR_MAG_Init+0x72>
  }

  /* Output data rate selection */
  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), LSM303AGR_MG_ODR_100Hz) != LSM303AGR_OK)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	331c      	adds	r3, #28
 8004f2c:	2103      	movs	r1, #3
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f000 fdc7 	bl	8005ac2 <lsm303agr_mag_data_rate_set>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d002      	beq.n	8004f40 <LSM303AGR_MAG_Init+0x50>
  {
    return LSM303AGR_ERROR;
 8004f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8004f3e:	e010      	b.n	8004f62 <LSM303AGR_MAG_Init+0x72>
  }

  /* Self Test disabled. */
  if (lsm303agr_mag_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LSM303AGR_OK)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	331c      	adds	r3, #28
 8004f44:	2100      	movs	r1, #0
 8004f46:	4618      	mov	r0, r3
 8004f48:	f000 fe73 	bl	8005c32 <lsm303agr_mag_self_test_set>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d002      	beq.n	8004f58 <LSM303AGR_MAG_Init+0x68>
  {
    return LSM303AGR_ERROR;
 8004f52:	f04f 33ff 	mov.w	r3, #4294967295
 8004f56:	e004      	b.n	8004f62 <LSM303AGR_MAG_Init+0x72>
  }

  pObj->is_initialized = 1;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8004f60:	2300      	movs	r3, #0
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3708      	adds	r7, #8
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}

08004f6a <LSM303AGR_MAG_DeInit>:
 * @brief  Deinitialize the LSM303AGR magnetometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_DeInit(LSM303AGR_MAG_Object_t *pObj)
{
 8004f6a:	b580      	push	{r7, lr}
 8004f6c:	b082      	sub	sp, #8
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM303AGR_MAG_Disable(pObj) != LSM303AGR_OK)
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 f874 	bl	8005060 <LSM303AGR_MAG_Disable>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d002      	beq.n	8004f84 <LSM303AGR_MAG_DeInit+0x1a>
  {
    return LSM303AGR_ERROR;
 8004f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8004f82:	e004      	b.n	8004f8e <LSM303AGR_MAG_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2200      	movs	r2, #0
 8004f88:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8004f8c:	2300      	movs	r3, #0
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3708      	adds	r7, #8
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}

08004f96 <LSM303AGR_MAG_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_ReadID(LSM303AGR_MAG_Object_t *pObj, uint8_t *Id)
{
 8004f96:	b580      	push	{r7, lr}
 8004f98:	b082      	sub	sp, #8
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	6078      	str	r0, [r7, #4]
 8004f9e:	6039      	str	r1, [r7, #0]
  if (lsm303agr_mag_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	331c      	adds	r3, #28
 8004fa4:	6839      	ldr	r1, [r7, #0]
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f000 fe32 	bl	8005c10 <lsm303agr_mag_device_id_get>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d002      	beq.n	8004fb8 <LSM303AGR_MAG_ReadID+0x22>
  {
    return LSM303AGR_ERROR;
 8004fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8004fb6:	e000      	b.n	8004fba <LSM303AGR_MAG_ReadID+0x24>
  }

  return LSM303AGR_OK;
 8004fb8:	2300      	movs	r3, #0
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3708      	adds	r7, #8
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
	...

08004fc4 <LSM303AGR_MAG_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM303AGR magnetometer sensor capabilities
 * @retval Component status
 */
int32_t LSM303AGR_MAG_GetCapabilities(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	2201      	movs	r2, #1
 8004fde:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	2232      	movs	r2, #50	; 0x32
 8004ff6:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	f04f 0200 	mov.w	r2, #0
 8004ffe:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	f04f 0200 	mov.w	r2, #0
 8005006:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	4a04      	ldr	r2, [pc, #16]	; (800501c <LSM303AGR_MAG_GetCapabilities+0x58>)
 800500c:	619a      	str	r2, [r3, #24]
  return LSM303AGR_OK;
 800500e:	2300      	movs	r3, #0
}
 8005010:	4618      	mov	r0, r3
 8005012:	370c      	adds	r7, #12
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr
 800501c:	42c80000 	.word	0x42c80000

08005020 <LSM303AGR_MAG_Enable>:
 * @brief Enable the LSM303AGR magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Enable(LSM303AGR_MAG_Object_t *pObj)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b082      	sub	sp, #8
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800502e:	2b01      	cmp	r3, #1
 8005030:	d101      	bne.n	8005036 <LSM303AGR_MAG_Enable+0x16>
  {
    return LSM303AGR_OK;
 8005032:	2300      	movs	r3, #0
 8005034:	e010      	b.n	8005058 <LSM303AGR_MAG_Enable+0x38>
  }

  /* Output data rate selection. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_CONTINUOUS_MODE) != LSM303AGR_OK)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	331c      	adds	r3, #28
 800503a:	2100      	movs	r1, #0
 800503c:	4618      	mov	r0, r3
 800503e:	f000 fd1a 	bl	8005a76 <lsm303agr_mag_operating_mode_set>
 8005042:	4603      	mov	r3, r0
 8005044:	2b00      	cmp	r3, #0
 8005046:	d002      	beq.n	800504e <LSM303AGR_MAG_Enable+0x2e>
  {
    return LSM303AGR_ERROR;
 8005048:	f04f 33ff 	mov.w	r3, #4294967295
 800504c:	e004      	b.n	8005058 <LSM303AGR_MAG_Enable+0x38>
  }

  pObj->mag_is_enabled = 1;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2201      	movs	r2, #1
 8005052:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8005056:	2300      	movs	r3, #0
}
 8005058:	4618      	mov	r0, r3
 800505a:	3708      	adds	r7, #8
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}

08005060 <LSM303AGR_MAG_Disable>:
 * @brief Disable the LSM303AGR magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Disable(LSM303AGR_MAG_Object_t *pObj)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b082      	sub	sp, #8
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800506e:	2b00      	cmp	r3, #0
 8005070:	d101      	bne.n	8005076 <LSM303AGR_MAG_Disable+0x16>
  {
    return LSM303AGR_OK;
 8005072:	2300      	movs	r3, #0
 8005074:	e010      	b.n	8005098 <LSM303AGR_MAG_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	331c      	adds	r3, #28
 800507a:	2102      	movs	r1, #2
 800507c:	4618      	mov	r0, r3
 800507e:	f000 fcfa 	bl	8005a76 <lsm303agr_mag_operating_mode_set>
 8005082:	4603      	mov	r3, r0
 8005084:	2b00      	cmp	r3, #0
 8005086:	d002      	beq.n	800508e <LSM303AGR_MAG_Disable+0x2e>
  {
    return LSM303AGR_ERROR;
 8005088:	f04f 33ff 	mov.w	r3, #4294967295
 800508c:	e004      	b.n	8005098 <LSM303AGR_MAG_Disable+0x38>
  }

  pObj->mag_is_enabled = 0;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8005096:	2300      	movs	r3, #0
}
 8005098:	4618      	mov	r0, r3
 800509a:	3708      	adds	r7, #8
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}

080050a0 <LSM303AGR_MAG_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetSensitivity(LSM303AGR_MAG_Object_t *pObj, float *Sensitivity)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b083      	sub	sp, #12
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
  *Sensitivity = LSM303AGR_MAG_SENSITIVITY_FS_50GAUSS;
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 80050b0:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 80050b2:	2300      	movs	r3, #0
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	370c      	adds	r7, #12
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr

080050c0 <LSM303AGR_MAG_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetOutputDataRate(LSM303AGR_MAG_Object_t *pObj, float *Odr)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b084      	sub	sp, #16
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80050ca:	2300      	movs	r3, #0
 80050cc:	60fb      	str	r3, [r7, #12]
  lsm303agr_mg_odr_m_t odr_low_level;

  /* Get current output data rate. */
  if (lsm303agr_mag_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	331c      	adds	r3, #28
 80050d2:	f107 020b 	add.w	r2, r7, #11
 80050d6:	4611      	mov	r1, r2
 80050d8:	4618      	mov	r0, r3
 80050da:	f000 fd19 	bl	8005b10 <lsm303agr_mag_data_rate_get>
 80050de:	4603      	mov	r3, r0
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d002      	beq.n	80050ea <LSM303AGR_MAG_GetOutputDataRate+0x2a>
  {
    return LSM303AGR_ERROR;
 80050e4:	f04f 33ff 	mov.w	r3, #4294967295
 80050e8:	e023      	b.n	8005132 <LSM303AGR_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 80050ea:	7afb      	ldrb	r3, [r7, #11]
 80050ec:	2b03      	cmp	r3, #3
 80050ee:	d81b      	bhi.n	8005128 <LSM303AGR_MAG_GetOutputDataRate+0x68>
 80050f0:	a201      	add	r2, pc, #4	; (adr r2, 80050f8 <LSM303AGR_MAG_GetOutputDataRate+0x38>)
 80050f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050f6:	bf00      	nop
 80050f8:	08005109 	.word	0x08005109
 80050fc:	08005111 	.word	0x08005111
 8005100:	08005119 	.word	0x08005119
 8005104:	08005121 	.word	0x08005121
  {
    case LSM303AGR_MG_ODR_10Hz:
      *Odr = 10.0f;
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	4a0c      	ldr	r2, [pc, #48]	; (800513c <LSM303AGR_MAG_GetOutputDataRate+0x7c>)
 800510c:	601a      	str	r2, [r3, #0]
      break;
 800510e:	e00f      	b.n	8005130 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_20Hz:
      *Odr = 20.0f;
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	4a0b      	ldr	r2, [pc, #44]	; (8005140 <LSM303AGR_MAG_GetOutputDataRate+0x80>)
 8005114:	601a      	str	r2, [r3, #0]
      break;
 8005116:	e00b      	b.n	8005130 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_50Hz:
      *Odr = 50.0f;
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	4a0a      	ldr	r2, [pc, #40]	; (8005144 <LSM303AGR_MAG_GetOutputDataRate+0x84>)
 800511c:	601a      	str	r2, [r3, #0]
      break;
 800511e:	e007      	b.n	8005130 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_100Hz:
      *Odr = 100.0f;
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	4a09      	ldr	r2, [pc, #36]	; (8005148 <LSM303AGR_MAG_GetOutputDataRate+0x88>)
 8005124:	601a      	str	r2, [r3, #0]
      break;
 8005126:	e003      	b.n	8005130 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8005128:	f04f 33ff 	mov.w	r3, #4294967295
 800512c:	60fb      	str	r3, [r7, #12]
      break;
 800512e:	bf00      	nop
  }

  return ret;
 8005130:	68fb      	ldr	r3, [r7, #12]
}
 8005132:	4618      	mov	r0, r3
 8005134:	3710      	adds	r7, #16
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
 800513a:	bf00      	nop
 800513c:	41200000 	.word	0x41200000
 8005140:	41a00000 	.word	0x41a00000
 8005144:	42480000 	.word	0x42480000
 8005148:	42c80000 	.word	0x42c80000

0800514c <LSM303AGR_MAG_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_SetOutputDataRate(LSM303AGR_MAG_Object_t *pObj, float Odr)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b084      	sub	sp, #16
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
  lsm303agr_mg_odr_m_t new_odr;

  new_odr = (Odr <= 10.000f) ? LSM303AGR_MG_ODR_10Hz
            : (Odr <= 20.000f) ? LSM303AGR_MG_ODR_20Hz
 8005156:	edd7 7a00 	vldr	s15, [r7]
 800515a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800515e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005166:	d801      	bhi.n	800516c <LSM303AGR_MAG_SetOutputDataRate+0x20>
 8005168:	2300      	movs	r3, #0
 800516a:	e016      	b.n	800519a <LSM303AGR_MAG_SetOutputDataRate+0x4e>
 800516c:	edd7 7a00 	vldr	s15, [r7]
 8005170:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8005174:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800517c:	d801      	bhi.n	8005182 <LSM303AGR_MAG_SetOutputDataRate+0x36>
 800517e:	2301      	movs	r3, #1
 8005180:	e00b      	b.n	800519a <LSM303AGR_MAG_SetOutputDataRate+0x4e>
 8005182:	edd7 7a00 	vldr	s15, [r7]
 8005186:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80051c0 <LSM303AGR_MAG_SetOutputDataRate+0x74>
 800518a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800518e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005192:	d801      	bhi.n	8005198 <LSM303AGR_MAG_SetOutputDataRate+0x4c>
 8005194:	2302      	movs	r3, #2
 8005196:	e000      	b.n	800519a <LSM303AGR_MAG_SetOutputDataRate+0x4e>
 8005198:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LSM303AGR_MG_ODR_10Hz
 800519a:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LSM303AGR_MG_ODR_50Hz
            :                    LSM303AGR_MG_ODR_100Hz;

  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	331c      	adds	r3, #28
 80051a0:	7bfa      	ldrb	r2, [r7, #15]
 80051a2:	4611      	mov	r1, r2
 80051a4:	4618      	mov	r0, r3
 80051a6:	f000 fc8c 	bl	8005ac2 <lsm303agr_mag_data_rate_set>
 80051aa:	4603      	mov	r3, r0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d002      	beq.n	80051b6 <LSM303AGR_MAG_SetOutputDataRate+0x6a>
  {
    return LSM303AGR_ERROR;
 80051b0:	f04f 33ff 	mov.w	r3, #4294967295
 80051b4:	e000      	b.n	80051b8 <LSM303AGR_MAG_SetOutputDataRate+0x6c>
  }

  return LSM303AGR_OK;
 80051b6:	2300      	movs	r3, #0
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3710      	adds	r7, #16
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}
 80051c0:	42480000 	.word	0x42480000

080051c4 <LSM303AGR_MAG_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t *FullScale)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	2232      	movs	r2, #50	; 0x32
 80051d2:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 80051d4:	2300      	movs	r3, #0
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	370c      	adds	r7, #12
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr

080051e2 <LSM303AGR_MAG_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_SetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t FullScale)
{
 80051e2:	b480      	push	{r7}
 80051e4:	b083      	sub	sp, #12
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
 80051ea:	6039      	str	r1, [r7, #0]
  return LSM303AGR_OK;
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	370c      	adds	r7, #12
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr

080051fa <LSM303AGR_MAG_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetAxesRaw(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 80051fa:	b580      	push	{r7, lr}
 80051fc:	b084      	sub	sp, #16
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
 8005202:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM303AGR_OK)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	331c      	adds	r3, #28
 8005208:	f107 0208 	add.w	r2, r7, #8
 800520c:	4611      	mov	r1, r2
 800520e:	4618      	mov	r0, r3
 8005210:	f000 fcdc 	bl	8005bcc <lsm303agr_magnetic_raw_get>
 8005214:	4603      	mov	r3, r0
 8005216:	2b00      	cmp	r3, #0
 8005218:	d002      	beq.n	8005220 <LSM303AGR_MAG_GetAxesRaw+0x26>
  {
    return LSM303AGR_ERROR;
 800521a:	f04f 33ff 	mov.w	r3, #4294967295
 800521e:	e00c      	b.n	800523a <LSM303AGR_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8005220:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8005228:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8005230:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	809a      	strh	r2, [r3, #4]

  return LSM303AGR_OK;
 8005238:	2300      	movs	r3, #0
}
 800523a:	4618      	mov	r0, r3
 800523c:	3710      	adds	r7, #16
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}

08005242 <LSM303AGR_MAG_GetAxes>:
 * @param  pObj the device pObj
 * @param  MagneticField pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetAxes(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Axes_t *MagneticField)
{
 8005242:	b580      	push	{r7, lr}
 8005244:	b086      	sub	sp, #24
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
 800524a:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM303AGR_OK)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	331c      	adds	r3, #28
 8005250:	f107 0210 	add.w	r2, r7, #16
 8005254:	4611      	mov	r1, r2
 8005256:	4618      	mov	r0, r3
 8005258:	f000 fcb8 	bl	8005bcc <lsm303agr_magnetic_raw_get>
 800525c:	4603      	mov	r3, r0
 800525e:	2b00      	cmp	r3, #0
 8005260:	d002      	beq.n	8005268 <LSM303AGR_MAG_GetAxes+0x26>
  {
    return LSM303AGR_ERROR;
 8005262:	f04f 33ff 	mov.w	r3, #4294967295
 8005266:	e036      	b.n	80052d6 <LSM303AGR_MAG_GetAxes+0x94>
  }

  /* Get LSM303AGR actual sensitivity. */
  (void)LSM303AGR_MAG_GetSensitivity(pObj, &sensitivity);
 8005268:	f107 030c 	add.w	r3, r7, #12
 800526c:	4619      	mov	r1, r3
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f7ff ff16 	bl	80050a0 <LSM303AGR_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8005274:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005278:	ee07 3a90 	vmov	s15, r3
 800527c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005280:	edd7 7a03 	vldr	s15, [r7, #12]
 8005284:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005288:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800528c:	ee17 2a90 	vmov	r2, s15
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8005294:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005298:	ee07 3a90 	vmov	s15, r3
 800529c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80052a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80052a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80052ac:	ee17 2a90 	vmov	r2, s15
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80052b4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80052b8:	ee07 3a90 	vmov	s15, r3
 80052bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80052c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80052c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80052cc:	ee17 2a90 	vmov	r2, s15
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 80052d4:	2300      	movs	r3, #0
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3718      	adds	r7, #24
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
	...

080052e0 <LSM303AGR_ACC_GetSensitivityHR>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityHR(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80052ea:	2300      	movs	r3, #0
 80052ec:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	331c      	adds	r3, #28
 80052f2:	f107 020b 	add.w	r2, r7, #11
 80052f6:	4611      	mov	r1, r2
 80052f8:	4618      	mov	r0, r3
 80052fa:	f000 fb4d 	bl	8005998 <lsm303agr_xl_full_scale_get>
 80052fe:	4603      	mov	r3, r0
 8005300:	2b00      	cmp	r3, #0
 8005302:	d002      	beq.n	800530a <LSM303AGR_ACC_GetSensitivityHR+0x2a>
  {
    return LSM303AGR_ERROR;
 8005304:	f04f 33ff 	mov.w	r3, #4294967295
 8005308:	e023      	b.n	8005352 <LSM303AGR_ACC_GetSensitivityHR+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 800530a:	7afb      	ldrb	r3, [r7, #11]
 800530c:	2b03      	cmp	r3, #3
 800530e:	d81b      	bhi.n	8005348 <LSM303AGR_ACC_GetSensitivityHR+0x68>
 8005310:	a201      	add	r2, pc, #4	; (adr r2, 8005318 <LSM303AGR_ACC_GetSensitivityHR+0x38>)
 8005312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005316:	bf00      	nop
 8005318:	08005329 	.word	0x08005329
 800531c:	08005331 	.word	0x08005331
 8005320:	08005339 	.word	0x08005339
 8005324:	08005341 	.word	0x08005341
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_HIGH_RESOLUTION_MODE;
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	4a0c      	ldr	r2, [pc, #48]	; (800535c <LSM303AGR_ACC_GetSensitivityHR+0x7c>)
 800532c:	601a      	str	r2, [r3, #0]
      break;
 800532e:	e00f      	b.n	8005350 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_HIGH_RESOLUTION_MODE;
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	4a0b      	ldr	r2, [pc, #44]	; (8005360 <LSM303AGR_ACC_GetSensitivityHR+0x80>)
 8005334:	601a      	str	r2, [r3, #0]
      break;
 8005336:	e00b      	b.n	8005350 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_HIGH_RESOLUTION_MODE;
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	4a0a      	ldr	r2, [pc, #40]	; (8005364 <LSM303AGR_ACC_GetSensitivityHR+0x84>)
 800533c:	601a      	str	r2, [r3, #0]
      break;
 800533e:	e007      	b.n	8005350 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_HIGH_RESOLUTION_MODE;
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	4a09      	ldr	r2, [pc, #36]	; (8005368 <LSM303AGR_ACC_GetSensitivityHR+0x88>)
 8005344:	601a      	str	r2, [r3, #0]
      break;
 8005346:	e003      	b.n	8005350 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8005348:	f04f 33ff 	mov.w	r3, #4294967295
 800534c:	60fb      	str	r3, [r7, #12]
      break;
 800534e:	bf00      	nop
  }

  return ret;
 8005350:	68fb      	ldr	r3, [r7, #12]
}
 8005352:	4618      	mov	r0, r3
 8005354:	3710      	adds	r7, #16
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}
 800535a:	bf00      	nop
 800535c:	3f7ae148 	.word	0x3f7ae148
 8005360:	3ff9999a 	.word	0x3ff9999a
 8005364:	4079999a 	.word	0x4079999a
 8005368:	413b851f 	.word	0x413b851f

0800536c <LSM303AGR_ACC_GetSensitivityNM>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityNM(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8005376:	2300      	movs	r3, #0
 8005378:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	331c      	adds	r3, #28
 800537e:	f107 020b 	add.w	r2, r7, #11
 8005382:	4611      	mov	r1, r2
 8005384:	4618      	mov	r0, r3
 8005386:	f000 fb07 	bl	8005998 <lsm303agr_xl_full_scale_get>
 800538a:	4603      	mov	r3, r0
 800538c:	2b00      	cmp	r3, #0
 800538e:	d002      	beq.n	8005396 <LSM303AGR_ACC_GetSensitivityNM+0x2a>
  {
    return LSM303AGR_ERROR;
 8005390:	f04f 33ff 	mov.w	r3, #4294967295
 8005394:	e023      	b.n	80053de <LSM303AGR_ACC_GetSensitivityNM+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 8005396:	7afb      	ldrb	r3, [r7, #11]
 8005398:	2b03      	cmp	r3, #3
 800539a:	d81b      	bhi.n	80053d4 <LSM303AGR_ACC_GetSensitivityNM+0x68>
 800539c:	a201      	add	r2, pc, #4	; (adr r2, 80053a4 <LSM303AGR_ACC_GetSensitivityNM+0x38>)
 800539e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053a2:	bf00      	nop
 80053a4:	080053b5 	.word	0x080053b5
 80053a8:	080053bd 	.word	0x080053bd
 80053ac:	080053c5 	.word	0x080053c5
 80053b0:	080053cd 	.word	0x080053cd
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_NORMAL_MODE;
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	4a0c      	ldr	r2, [pc, #48]	; (80053e8 <LSM303AGR_ACC_GetSensitivityNM+0x7c>)
 80053b8:	601a      	str	r2, [r3, #0]
      break;
 80053ba:	e00f      	b.n	80053dc <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_NORMAL_MODE;
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	4a0b      	ldr	r2, [pc, #44]	; (80053ec <LSM303AGR_ACC_GetSensitivityNM+0x80>)
 80053c0:	601a      	str	r2, [r3, #0]
      break;
 80053c2:	e00b      	b.n	80053dc <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_NORMAL_MODE;
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	4a0a      	ldr	r2, [pc, #40]	; (80053f0 <LSM303AGR_ACC_GetSensitivityNM+0x84>)
 80053c8:	601a      	str	r2, [r3, #0]
      break;
 80053ca:	e007      	b.n	80053dc <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_NORMAL_MODE;
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	4a09      	ldr	r2, [pc, #36]	; (80053f4 <LSM303AGR_ACC_GetSensitivityNM+0x88>)
 80053d0:	601a      	str	r2, [r3, #0]
      break;
 80053d2:	e003      	b.n	80053dc <LSM303AGR_ACC_GetSensitivityNM+0x70>

    default:
      ret = LSM303AGR_ERROR;
 80053d4:	f04f 33ff 	mov.w	r3, #4294967295
 80053d8:	60fb      	str	r3, [r7, #12]
      break;
 80053da:	bf00      	nop
  }

  return ret;
 80053dc:	68fb      	ldr	r3, [r7, #12]
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3710      	adds	r7, #16
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	4079999a 	.word	0x4079999a
 80053ec:	40fa3d71 	.word	0x40fa3d71
 80053f0:	417a147b 	.word	0x417a147b
 80053f4:	423b999a 	.word	0x423b999a

080053f8 <LSM303AGR_ACC_GetSensitivityLP>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityLP(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b084      	sub	sp, #16
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8005402:	2300      	movs	r3, #0
 8005404:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	331c      	adds	r3, #28
 800540a:	f107 020b 	add.w	r2, r7, #11
 800540e:	4611      	mov	r1, r2
 8005410:	4618      	mov	r0, r3
 8005412:	f000 fac1 	bl	8005998 <lsm303agr_xl_full_scale_get>
 8005416:	4603      	mov	r3, r0
 8005418:	2b00      	cmp	r3, #0
 800541a:	d002      	beq.n	8005422 <LSM303AGR_ACC_GetSensitivityLP+0x2a>
  {
    return LSM303AGR_ERROR;
 800541c:	f04f 33ff 	mov.w	r3, #4294967295
 8005420:	e023      	b.n	800546a <LSM303AGR_ACC_GetSensitivityLP+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 8005422:	7afb      	ldrb	r3, [r7, #11]
 8005424:	2b03      	cmp	r3, #3
 8005426:	d81b      	bhi.n	8005460 <LSM303AGR_ACC_GetSensitivityLP+0x68>
 8005428:	a201      	add	r2, pc, #4	; (adr r2, 8005430 <LSM303AGR_ACC_GetSensitivityLP+0x38>)
 800542a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800542e:	bf00      	nop
 8005430:	08005441 	.word	0x08005441
 8005434:	08005449 	.word	0x08005449
 8005438:	08005451 	.word	0x08005451
 800543c:	08005459 	.word	0x08005459
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_LOW_POWER_MODE;
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	4a0c      	ldr	r2, [pc, #48]	; (8005474 <LSM303AGR_ACC_GetSensitivityLP+0x7c>)
 8005444:	601a      	str	r2, [r3, #0]
      break;
 8005446:	e00f      	b.n	8005468 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_LOW_POWER_MODE;
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	4a0b      	ldr	r2, [pc, #44]	; (8005478 <LSM303AGR_ACC_GetSensitivityLP+0x80>)
 800544c:	601a      	str	r2, [r3, #0]
      break;
 800544e:	e00b      	b.n	8005468 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_LOW_POWER_MODE;
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	4a0a      	ldr	r2, [pc, #40]	; (800547c <LSM303AGR_ACC_GetSensitivityLP+0x84>)
 8005454:	601a      	str	r2, [r3, #0]
      break;
 8005456:	e007      	b.n	8005468 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_LOW_POWER_MODE;
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	4a09      	ldr	r2, [pc, #36]	; (8005480 <LSM303AGR_ACC_GetSensitivityLP+0x88>)
 800545c:	601a      	str	r2, [r3, #0]
      break;
 800545e:	e003      	b.n	8005468 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8005460:	f04f 33ff 	mov.w	r3, #4294967295
 8005464:	60fb      	str	r3, [r7, #12]
      break;
 8005466:	bf00      	nop
  }

  return ret;
 8005468:	68fb      	ldr	r3, [r7, #12]
}
 800546a:	4618      	mov	r0, r3
 800546c:	3710      	adds	r7, #16
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop
 8005474:	417a147b 	.word	0x417a147b
 8005478:	41fa147b 	.word	0x41fa147b
 800547c:	427a147b 	.word	0x427a147b
 8005480:	433b947b 	.word	0x433b947b

08005484 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Enabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b084      	sub	sp, #16
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	6039      	str	r1, [r7, #0]
  lsm303agr_odr_a_t new_odr;

  new_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
            : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 800548e:	edd7 7a00 	vldr	s15, [r7]
 8005492:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005496:	eef4 7ac7 	vcmpe.f32	s15, s14
 800549a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800549e:	d801      	bhi.n	80054a4 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x20>
 80054a0:	2301      	movs	r3, #1
 80054a2:	e037      	b.n	8005514 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x90>
 80054a4:	edd7 7a00 	vldr	s15, [r7]
 80054a8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80054ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054b4:	d801      	bhi.n	80054ba <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x36>
 80054b6:	2302      	movs	r3, #2
 80054b8:	e02c      	b.n	8005514 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x90>
 80054ba:	edd7 7a00 	vldr	s15, [r7]
 80054be:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80054c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054ca:	d801      	bhi.n	80054d0 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x4c>
 80054cc:	2303      	movs	r3, #3
 80054ce:	e021      	b.n	8005514 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x90>
 80054d0:	edd7 7a00 	vldr	s15, [r7]
 80054d4:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800553c <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xb8>
 80054d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054e0:	d801      	bhi.n	80054e6 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x62>
 80054e2:	2304      	movs	r3, #4
 80054e4:	e016      	b.n	8005514 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x90>
 80054e6:	edd7 7a00 	vldr	s15, [r7]
 80054ea:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8005540 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xbc>
 80054ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054f6:	d801      	bhi.n	80054fc <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x78>
 80054f8:	2305      	movs	r3, #5
 80054fa:	e00b      	b.n	8005514 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x90>
 80054fc:	edd7 7a00 	vldr	s15, [r7]
 8005500:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8005544 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8005504:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800550c:	d801      	bhi.n	8005512 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x8e>
 800550e:	2306      	movs	r3, #6
 8005510:	e000      	b.n	8005514 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x90>
 8005512:	2307      	movs	r3, #7
  new_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 8005514:	73fb      	strb	r3, [r7, #15]
            : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
            : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
            :                    LSM303AGR_XL_ODR_400Hz;

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	331c      	adds	r3, #28
 800551a:	7bfa      	ldrb	r2, [r7, #15]
 800551c:	4611      	mov	r1, r2
 800551e:	4618      	mov	r0, r3
 8005520:	f000 f992 	bl	8005848 <lsm303agr_xl_data_rate_set>
 8005524:	4603      	mov	r3, r0
 8005526:	2b00      	cmp	r3, #0
 8005528:	d002      	beq.n	8005530 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xac>
  {
    return LSM303AGR_ERROR;
 800552a:	f04f 33ff 	mov.w	r3, #4294967295
 800552e:	e000      	b.n	8005532 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xae>
  }

  return LSM303AGR_OK;
 8005530:	2300      	movs	r3, #0
}
 8005532:	4618      	mov	r0, r3
 8005534:	3710      	adds	r7, #16
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
 800553a:	bf00      	nop
 800553c:	42480000 	.word	0x42480000
 8005540:	42c80000 	.word	0x42c80000
 8005544:	43480000 	.word	0x43480000

08005548 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Disabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 8005548:	b480      	push	{r7}
 800554a:	b083      	sub	sp, #12
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	6039      	str	r1, [r7, #0]
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
                  : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 8005552:	edd7 7a00 	vldr	s15, [r7]
 8005556:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800555a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800555e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005562:	d801      	bhi.n	8005568 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x20>
 8005564:	2301      	movs	r3, #1
 8005566:	e037      	b.n	80055d8 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x90>
 8005568:	edd7 7a00 	vldr	s15, [r7]
 800556c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005570:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005578:	d801      	bhi.n	800557e <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x36>
 800557a:	2302      	movs	r3, #2
 800557c:	e02c      	b.n	80055d8 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x90>
 800557e:	edd7 7a00 	vldr	s15, [r7]
 8005582:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8005586:	eef4 7ac7 	vcmpe.f32	s15, s14
 800558a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800558e:	d801      	bhi.n	8005594 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x4c>
 8005590:	2303      	movs	r3, #3
 8005592:	e021      	b.n	80055d8 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x90>
 8005594:	edd7 7a00 	vldr	s15, [r7]
 8005598:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80055ec <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xa4>
 800559c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055a4:	d801      	bhi.n	80055aa <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x62>
 80055a6:	2304      	movs	r3, #4
 80055a8:	e016      	b.n	80055d8 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x90>
 80055aa:	edd7 7a00 	vldr	s15, [r7]
 80055ae:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80055f0 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xa8>
 80055b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055ba:	d801      	bhi.n	80055c0 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x78>
 80055bc:	2305      	movs	r3, #5
 80055be:	e00b      	b.n	80055d8 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x90>
 80055c0:	edd7 7a00 	vldr	s15, [r7]
 80055c4:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80055f4 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xac>
 80055c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055d0:	d801      	bhi.n	80055d6 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x8e>
 80055d2:	2306      	movs	r3, #6
 80055d4:	e000      	b.n	80055d8 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x90>
 80055d6:	2307      	movs	r3, #7
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
                  : (Odr <=   50.0f) ? LSM303AGR_XL_ODR_50Hz
                  : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
                  : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
                  :                    LSM303AGR_XL_ODR_400Hz;

  return LSM303AGR_OK;
 80055de:	2300      	movs	r3, #0
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	370c      	adds	r7, #12
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr
 80055ec:	42480000 	.word	0x42480000
 80055f0:	42c80000 	.word	0x42c80000
 80055f4:	43480000 	.word	0x43480000

080055f8 <ReadAccRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80055f8:	b590      	push	{r4, r7, lr}
 80055fa:	b087      	sub	sp, #28
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	60f8      	str	r0, [r7, #12]
 8005600:	607a      	str	r2, [r7, #4]
 8005602:	461a      	mov	r2, r3
 8005604:	460b      	mov	r3, r1
 8005606:	72fb      	strb	r3, [r7, #11]
 8005608:	4613      	mov	r3, r2
 800560a:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d10e      	bne.n	8005636 <ReadAccRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	695c      	ldr	r4, [r3, #20]
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	7b1b      	ldrb	r3, [r3, #12]
 8005620:	b298      	uxth	r0, r3
 8005622:	7afb      	ldrb	r3, [r7, #11]
 8005624:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005628:	b2db      	uxtb	r3, r3
 800562a:	b299      	uxth	r1, r3
 800562c:	893b      	ldrh	r3, [r7, #8]
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	47a0      	blx	r4
 8005632:	4603      	mov	r3, r0
 8005634:	e00d      	b.n	8005652 <ReadAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	695c      	ldr	r4, [r3, #20]
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	7b1b      	ldrb	r3, [r3, #12]
 800563e:	b298      	uxth	r0, r3
 8005640:	7afb      	ldrb	r3, [r7, #11]
 8005642:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005646:	b2db      	uxtb	r3, r3
 8005648:	b299      	uxth	r1, r3
 800564a:	893b      	ldrh	r3, [r7, #8]
 800564c:	687a      	ldr	r2, [r7, #4]
 800564e:	47a0      	blx	r4
 8005650:	4603      	mov	r3, r0
  }
}
 8005652:	4618      	mov	r0, r3
 8005654:	371c      	adds	r7, #28
 8005656:	46bd      	mov	sp, r7
 8005658:	bd90      	pop	{r4, r7, pc}

0800565a <WriteAccRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800565a:	b590      	push	{r4, r7, lr}
 800565c:	b087      	sub	sp, #28
 800565e:	af00      	add	r7, sp, #0
 8005660:	60f8      	str	r0, [r7, #12]
 8005662:	607a      	str	r2, [r7, #4]
 8005664:	461a      	mov	r2, r3
 8005666:	460b      	mov	r3, r1
 8005668:	72fb      	strb	r3, [r7, #11]
 800566a:	4613      	mov	r3, r2
 800566c:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d10e      	bne.n	8005698 <WriteAccRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	691c      	ldr	r4, [r3, #16]
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	7b1b      	ldrb	r3, [r3, #12]
 8005682:	b298      	uxth	r0, r3
 8005684:	7afb      	ldrb	r3, [r7, #11]
 8005686:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800568a:	b2db      	uxtb	r3, r3
 800568c:	b299      	uxth	r1, r3
 800568e:	893b      	ldrh	r3, [r7, #8]
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	47a0      	blx	r4
 8005694:	4603      	mov	r3, r0
 8005696:	e00d      	b.n	80056b4 <WriteAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	691c      	ldr	r4, [r3, #16]
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	7b1b      	ldrb	r3, [r3, #12]
 80056a0:	b298      	uxth	r0, r3
 80056a2:	7afb      	ldrb	r3, [r7, #11]
 80056a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	b299      	uxth	r1, r3
 80056ac:	893b      	ldrh	r3, [r7, #8]
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	47a0      	blx	r4
 80056b2:	4603      	mov	r3, r0
  }
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	371c      	adds	r7, #28
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd90      	pop	{r4, r7, pc}

080056bc <ReadMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80056bc:	b590      	push	{r4, r7, lr}
 80056be:	b087      	sub	sp, #28
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	607a      	str	r2, [r7, #4]
 80056c6:	461a      	mov	r2, r3
 80056c8:	460b      	mov	r3, r1
 80056ca:	72fb      	strb	r3, [r7, #11]
 80056cc:	4613      	mov	r3, r2
 80056ce:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d10e      	bne.n	80056fa <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	695c      	ldr	r4, [r3, #20]
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	7b1b      	ldrb	r3, [r3, #12]
 80056e4:	b298      	uxth	r0, r3
 80056e6:	7afb      	ldrb	r3, [r7, #11]
 80056e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	b299      	uxth	r1, r3
 80056f0:	893b      	ldrh	r3, [r7, #8]
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	47a0      	blx	r4
 80056f6:	4603      	mov	r3, r0
 80056f8:	e00d      	b.n	8005716 <ReadMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	695c      	ldr	r4, [r3, #20]
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	7b1b      	ldrb	r3, [r3, #12]
 8005702:	b298      	uxth	r0, r3
 8005704:	7afb      	ldrb	r3, [r7, #11]
 8005706:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800570a:	b2db      	uxtb	r3, r3
 800570c:	b299      	uxth	r1, r3
 800570e:	893b      	ldrh	r3, [r7, #8]
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	47a0      	blx	r4
 8005714:	4603      	mov	r3, r0
  }
}
 8005716:	4618      	mov	r0, r3
 8005718:	371c      	adds	r7, #28
 800571a:	46bd      	mov	sp, r7
 800571c:	bd90      	pop	{r4, r7, pc}

0800571e <WriteMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800571e:	b590      	push	{r4, r7, lr}
 8005720:	b087      	sub	sp, #28
 8005722:	af00      	add	r7, sp, #0
 8005724:	60f8      	str	r0, [r7, #12]
 8005726:	607a      	str	r2, [r7, #4]
 8005728:	461a      	mov	r2, r3
 800572a:	460b      	mov	r3, r1
 800572c:	72fb      	strb	r3, [r7, #11]
 800572e:	4613      	mov	r3, r2
 8005730:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d10e      	bne.n	800575c <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	691c      	ldr	r4, [r3, #16]
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	7b1b      	ldrb	r3, [r3, #12]
 8005746:	b298      	uxth	r0, r3
 8005748:	7afb      	ldrb	r3, [r7, #11]
 800574a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800574e:	b2db      	uxtb	r3, r3
 8005750:	b299      	uxth	r1, r3
 8005752:	893b      	ldrh	r3, [r7, #8]
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	47a0      	blx	r4
 8005758:	4603      	mov	r3, r0
 800575a:	e00d      	b.n	8005778 <WriteMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	691c      	ldr	r4, [r3, #16]
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	7b1b      	ldrb	r3, [r3, #12]
 8005764:	b298      	uxth	r0, r3
 8005766:	7afb      	ldrb	r3, [r7, #11]
 8005768:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800576c:	b2db      	uxtb	r3, r3
 800576e:	b299      	uxth	r1, r3
 8005770:	893b      	ldrh	r3, [r7, #8]
 8005772:	687a      	ldr	r2, [r7, #4]
 8005774:	47a0      	blx	r4
 8005776:	4603      	mov	r3, r0
  }
}
 8005778:	4618      	mov	r0, r3
 800577a:	371c      	adds	r7, #28
 800577c:	46bd      	mov	sp, r7
 800577e:	bd90      	pop	{r4, r7, pc}

08005780 <lsm303agr_read_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm303agr_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 8005780:	b590      	push	{r4, r7, lr}
 8005782:	b087      	sub	sp, #28
 8005784:	af00      	add	r7, sp, #0
 8005786:	60f8      	str	r0, [r7, #12]
 8005788:	607a      	str	r2, [r7, #4]
 800578a:	461a      	mov	r2, r3
 800578c:	460b      	mov	r3, r1
 800578e:	72fb      	strb	r3, [r7, #11]
 8005790:	4613      	mov	r3, r2
 8005792:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	685c      	ldr	r4, [r3, #4]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6898      	ldr	r0, [r3, #8]
 800579c:	893b      	ldrh	r3, [r7, #8]
 800579e:	7af9      	ldrb	r1, [r7, #11]
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	47a0      	blx	r4
 80057a4:	6178      	str	r0, [r7, #20]
  return ret;
 80057a6:	697b      	ldr	r3, [r7, #20]
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	371c      	adds	r7, #28
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd90      	pop	{r4, r7, pc}

080057b0 <lsm303agr_write_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm303agr_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 80057b0:	b590      	push	{r4, r7, lr}
 80057b2:	b087      	sub	sp, #28
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	607a      	str	r2, [r7, #4]
 80057ba:	461a      	mov	r2, r3
 80057bc:	460b      	mov	r3, r1
 80057be:	72fb      	strb	r3, [r7, #11]
 80057c0:	4613      	mov	r3, r2
 80057c2:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681c      	ldr	r4, [r3, #0]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6898      	ldr	r0, [r3, #8]
 80057cc:	893b      	ldrh	r3, [r7, #8]
 80057ce:	7af9      	ldrb	r1, [r7, #11]
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	47a0      	blx	r4
 80057d4:	6178      	str	r0, [r7, #20]
  return ret;
 80057d6:	697b      	ldr	r3, [r7, #20]
}
 80057d8:	4618      	mov	r0, r3
 80057da:	371c      	adds	r7, #28
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd90      	pop	{r4, r7, pc}

080057e0 <lsm303agr_xl_operating_mode_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_operating_mode_get(stmdev_ctx_t *ctx,
                                        lsm303agr_op_md_a_t *val)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b086      	sub	sp, #24
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;
  
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 80057ea:	f107 020c 	add.w	r2, r7, #12
 80057ee:	2301      	movs	r3, #1
 80057f0:	2120      	movs	r1, #32
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f7ff ffc4 	bl	8005780 <lsm303agr_read_reg>
 80057f8:	6178      	str	r0, [r7, #20]
                           (uint8_t*)&ctrl_reg1_a, 1);
  if(ret == 0){
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d107      	bne.n	8005810 <lsm303agr_xl_operating_mode_get+0x30>
    ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8005800:	f107 0210 	add.w	r2, r7, #16
 8005804:	2301      	movs	r3, #1
 8005806:	2123      	movs	r1, #35	; 0x23
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f7ff ffb9 	bl	8005780 <lsm303agr_read_reg>
 800580e:	6178      	str	r0, [r7, #20]
                             (uint8_t*)&ctrl_reg4_a, 1);
  }

  if ( ctrl_reg1_a.lpen != PROPERTY_DISABLE ){
 8005810:	7b3b      	ldrb	r3, [r7, #12]
 8005812:	f003 0308 	and.w	r3, r3, #8
 8005816:	b2db      	uxtb	r3, r3
 8005818:	2b00      	cmp	r3, #0
 800581a:	d003      	beq.n	8005824 <lsm303agr_xl_operating_mode_get+0x44>
    *val = LSM303AGR_LP_8bit;
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	2202      	movs	r2, #2
 8005820:	701a      	strb	r2, [r3, #0]
 8005822:	e00c      	b.n	800583e <lsm303agr_xl_operating_mode_get+0x5e>
  } else if (ctrl_reg4_a.hr  != PROPERTY_DISABLE ) {
 8005824:	7c3b      	ldrb	r3, [r7, #16]
 8005826:	f003 0308 	and.w	r3, r3, #8
 800582a:	b2db      	uxtb	r3, r3
 800582c:	2b00      	cmp	r3, #0
 800582e:	d003      	beq.n	8005838 <lsm303agr_xl_operating_mode_get+0x58>
    *val = LSM303AGR_HR_12bit;
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	2200      	movs	r2, #0
 8005834:	701a      	strb	r2, [r3, #0]
 8005836:	e002      	b.n	800583e <lsm303agr_xl_operating_mode_get+0x5e>
  } else{
    *val = LSM303AGR_NM_10bit;
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	2201      	movs	r2, #1
 800583c:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800583e:	697b      	ldr	r3, [r7, #20]
}
 8005840:	4618      	mov	r0, r3
 8005842:	3718      	adds	r7, #24
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}

08005848 <lsm303agr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t val)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b084      	sub	sp, #16
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	460b      	mov	r3, r1
 8005852:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8005854:	f107 0208 	add.w	r2, r7, #8
 8005858:	2301      	movs	r3, #1
 800585a:	2120      	movs	r1, #32
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f7ff ff8f 	bl	8005780 <lsm303agr_read_reg>
 8005862:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&ctrl_reg1_a, 1);
  if(ret == 0){
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d10f      	bne.n	800588a <lsm303agr_xl_data_rate_set+0x42>
    ctrl_reg1_a.odr = (uint8_t)val;
 800586a:	78fb      	ldrb	r3, [r7, #3]
 800586c:	f003 030f 	and.w	r3, r3, #15
 8005870:	b2da      	uxtb	r2, r3
 8005872:	7a3b      	ldrb	r3, [r7, #8]
 8005874:	f362 1307 	bfi	r3, r2, #4, #4
 8005878:	723b      	strb	r3, [r7, #8]
   ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG1_A,
 800587a:	f107 0208 	add.w	r2, r7, #8
 800587e:	2301      	movs	r3, #1
 8005880:	2120      	movs	r1, #32
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f7ff ff94 	bl	80057b0 <lsm303agr_write_reg>
 8005888:	60f8      	str	r0, [r7, #12]
                             (uint8_t*)&ctrl_reg1_a, 1);
  }

  return ret;
 800588a:	68fb      	ldr	r3, [r7, #12]
}
 800588c:	4618      	mov	r0, r3
 800588e:	3710      	adds	r7, #16
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}

08005894 <lsm303agr_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_get(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t *val)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 800589e:	f107 0208 	add.w	r2, r7, #8
 80058a2:	2301      	movs	r3, #1
 80058a4:	2120      	movs	r1, #32
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f7ff ff6a 	bl	8005780 <lsm303agr_read_reg>
 80058ac:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&ctrl_reg1_a, 1);

  switch (ctrl_reg1_a.odr){
 80058ae:	7a3b      	ldrb	r3, [r7, #8]
 80058b0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	2b09      	cmp	r3, #9
 80058b8:	d83e      	bhi.n	8005938 <lsm303agr_xl_data_rate_get+0xa4>
 80058ba:	a201      	add	r2, pc, #4	; (adr r2, 80058c0 <lsm303agr_xl_data_rate_get+0x2c>)
 80058bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058c0:	080058e9 	.word	0x080058e9
 80058c4:	080058f1 	.word	0x080058f1
 80058c8:	080058f9 	.word	0x080058f9
 80058cc:	08005901 	.word	0x08005901
 80058d0:	08005909 	.word	0x08005909
 80058d4:	08005911 	.word	0x08005911
 80058d8:	08005919 	.word	0x08005919
 80058dc:	08005921 	.word	0x08005921
 80058e0:	08005929 	.word	0x08005929
 80058e4:	08005931 	.word	0x08005931
    case LSM303AGR_XL_POWER_DOWN:
      *val = LSM303AGR_XL_POWER_DOWN;
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	2200      	movs	r2, #0
 80058ec:	701a      	strb	r2, [r3, #0]
      break;
 80058ee:	e027      	b.n	8005940 <lsm303agr_xl_data_rate_get+0xac>
    case LSM303AGR_XL_ODR_1Hz:
      *val = LSM303AGR_XL_ODR_1Hz;
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	2201      	movs	r2, #1
 80058f4:	701a      	strb	r2, [r3, #0]
      break;
 80058f6:	e023      	b.n	8005940 <lsm303agr_xl_data_rate_get+0xac>
    case LSM303AGR_XL_ODR_10Hz:
      *val = LSM303AGR_XL_ODR_10Hz;
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	2202      	movs	r2, #2
 80058fc:	701a      	strb	r2, [r3, #0]
      break;
 80058fe:	e01f      	b.n	8005940 <lsm303agr_xl_data_rate_get+0xac>
    case LSM303AGR_XL_ODR_25Hz:
      *val = LSM303AGR_XL_ODR_25Hz;
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	2203      	movs	r2, #3
 8005904:	701a      	strb	r2, [r3, #0]
      break;
 8005906:	e01b      	b.n	8005940 <lsm303agr_xl_data_rate_get+0xac>
    case LSM303AGR_XL_ODR_50Hz:
      *val = LSM303AGR_XL_ODR_50Hz;
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	2204      	movs	r2, #4
 800590c:	701a      	strb	r2, [r3, #0]
      break;
 800590e:	e017      	b.n	8005940 <lsm303agr_xl_data_rate_get+0xac>
    case LSM303AGR_XL_ODR_100Hz:
      *val = LSM303AGR_XL_ODR_100Hz;
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	2205      	movs	r2, #5
 8005914:	701a      	strb	r2, [r3, #0]
      break;
 8005916:	e013      	b.n	8005940 <lsm303agr_xl_data_rate_get+0xac>
    case LSM303AGR_XL_ODR_200Hz:
      *val = LSM303AGR_XL_ODR_200Hz;
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	2206      	movs	r2, #6
 800591c:	701a      	strb	r2, [r3, #0]
      break;
 800591e:	e00f      	b.n	8005940 <lsm303agr_xl_data_rate_get+0xac>
    case LSM303AGR_XL_ODR_400Hz:
      *val = LSM303AGR_XL_ODR_400Hz;
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	2207      	movs	r2, #7
 8005924:	701a      	strb	r2, [r3, #0]
      break;
 8005926:	e00b      	b.n	8005940 <lsm303agr_xl_data_rate_get+0xac>
    case LSM303AGR_XL_ODR_1kHz620_LP:
      *val = LSM303AGR_XL_ODR_1kHz620_LP;
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	2208      	movs	r2, #8
 800592c:	701a      	strb	r2, [r3, #0]
      break;
 800592e:	e007      	b.n	8005940 <lsm303agr_xl_data_rate_get+0xac>
    case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
      *val = LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP;
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	2209      	movs	r2, #9
 8005934:	701a      	strb	r2, [r3, #0]
      break;
 8005936:	e003      	b.n	8005940 <lsm303agr_xl_data_rate_get+0xac>
    default:
      *val = LSM303AGR_XL_POWER_DOWN;
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	2200      	movs	r2, #0
 800593c:	701a      	strb	r2, [r3, #0]
      break;
 800593e:	bf00      	nop
  }

  return ret;
 8005940:	68fb      	ldr	r3, [r7, #12]
}
 8005942:	4618      	mov	r0, r3
 8005944:	3710      	adds	r7, #16
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
 800594a:	bf00      	nop

0800594c <lsm303agr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t val)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b084      	sub	sp, #16
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	460b      	mov	r3, r1
 8005956:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8005958:	f107 0208 	add.w	r2, r7, #8
 800595c:	2301      	movs	r3, #1
 800595e:	2123      	movs	r1, #35	; 0x23
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f7ff ff0d 	bl	8005780 <lsm303agr_read_reg>
 8005966:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&ctrl_reg4_a, 1);
  if(ret == 0){
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d10f      	bne.n	800598e <lsm303agr_xl_full_scale_set+0x42>
    ctrl_reg4_a.fs = (uint8_t)val;
 800596e:	78fb      	ldrb	r3, [r7, #3]
 8005970:	f003 0303 	and.w	r3, r3, #3
 8005974:	b2da      	uxtb	r2, r3
 8005976:	7a3b      	ldrb	r3, [r7, #8]
 8005978:	f362 1305 	bfi	r3, r2, #4, #2
 800597c:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 800597e:	f107 0208 	add.w	r2, r7, #8
 8005982:	2301      	movs	r3, #1
 8005984:	2123      	movs	r1, #35	; 0x23
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f7ff ff12 	bl	80057b0 <lsm303agr_write_reg>
 800598c:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&ctrl_reg4_a, 1);
  }

  return ret;
 800598e:	68fb      	ldr	r3, [r7, #12]
}
 8005990:	4618      	mov	r0, r3
 8005992:	3710      	adds	r7, #16
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}

08005998 <lsm303agr_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_get(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t *val)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b084      	sub	sp, #16
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 80059a2:	f107 0208 	add.w	r2, r7, #8
 80059a6:	2301      	movs	r3, #1
 80059a8:	2123      	movs	r1, #35	; 0x23
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f7ff fee8 	bl	8005780 <lsm303agr_read_reg>
 80059b0:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&ctrl_reg4_a, 1);

  switch (ctrl_reg4_a.fs){
 80059b2:	7a3b      	ldrb	r3, [r7, #8]
 80059b4:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80059b8:	b2db      	uxtb	r3, r3
 80059ba:	2b03      	cmp	r3, #3
 80059bc:	d81a      	bhi.n	80059f4 <lsm303agr_xl_full_scale_get+0x5c>
 80059be:	a201      	add	r2, pc, #4	; (adr r2, 80059c4 <lsm303agr_xl_full_scale_get+0x2c>)
 80059c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059c4:	080059d5 	.word	0x080059d5
 80059c8:	080059dd 	.word	0x080059dd
 80059cc:	080059e5 	.word	0x080059e5
 80059d0:	080059ed 	.word	0x080059ed
    case LSM303AGR_2g:
      *val = LSM303AGR_2g;
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	2200      	movs	r2, #0
 80059d8:	701a      	strb	r2, [r3, #0]
      break;
 80059da:	e00f      	b.n	80059fc <lsm303agr_xl_full_scale_get+0x64>
    case LSM303AGR_4g:
      *val = LSM303AGR_4g;
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	2201      	movs	r2, #1
 80059e0:	701a      	strb	r2, [r3, #0]
      break;
 80059e2:	e00b      	b.n	80059fc <lsm303agr_xl_full_scale_get+0x64>
    case LSM303AGR_8g:
      *val = LSM303AGR_8g;
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	2202      	movs	r2, #2
 80059e8:	701a      	strb	r2, [r3, #0]
      break;
 80059ea:	e007      	b.n	80059fc <lsm303agr_xl_full_scale_get+0x64>
    case LSM303AGR_16g:
      *val = LSM303AGR_16g;
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	2203      	movs	r2, #3
 80059f0:	701a      	strb	r2, [r3, #0]
      break;
 80059f2:	e003      	b.n	80059fc <lsm303agr_xl_full_scale_get+0x64>
    default:
      *val = LSM303AGR_2g;
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	2200      	movs	r2, #0
 80059f8:	701a      	strb	r2, [r3, #0]
      break;
 80059fa:	bf00      	nop
  }
  return ret;
 80059fc:	68fb      	ldr	r3, [r7, #12]
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3710      	adds	r7, #16
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	bf00      	nop

08005a08 <lsm303agr_xl_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_block_data_update_set(stmdev_ctx_t *ctx,
                                           uint8_t val)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b084      	sub	sp, #16
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	460b      	mov	r3, r1
 8005a12:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8005a14:	f107 0208 	add.w	r2, r7, #8
 8005a18:	2301      	movs	r3, #1
 8005a1a:	2123      	movs	r1, #35	; 0x23
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f7ff feaf 	bl	8005780 <lsm303agr_read_reg>
 8005a22:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&ctrl_reg4_a, 1);
  if(ret == 0){
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d10f      	bne.n	8005a4a <lsm303agr_xl_block_data_update_set+0x42>
    ctrl_reg4_a.bdu = (uint8_t)val;
 8005a2a:	78fb      	ldrb	r3, [r7, #3]
 8005a2c:	f003 0301 	and.w	r3, r3, #1
 8005a30:	b2da      	uxtb	r2, r3
 8005a32:	7a3b      	ldrb	r3, [r7, #8]
 8005a34:	f362 13c7 	bfi	r3, r2, #7, #1
 8005a38:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8005a3a:	f107 0208 	add.w	r2, r7, #8
 8005a3e:	2301      	movs	r3, #1
 8005a40:	2123      	movs	r1, #35	; 0x23
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f7ff feb4 	bl	80057b0 <lsm303agr_write_reg>
 8005a48:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&ctrl_reg4_a, 1);
  }

  return ret;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3710      	adds	r7, #16
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}

08005a54 <lsm303agr_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_acceleration_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b084      	sub	sp, #16
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUT_X_L_A, buff, 6);
 8005a5e:	2306      	movs	r3, #6
 8005a60:	683a      	ldr	r2, [r7, #0]
 8005a62:	2128      	movs	r1, #40	; 0x28
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f7ff fe8b 	bl	8005780 <lsm303agr_read_reg>
 8005a6a:	60f8      	str	r0, [r7, #12]
  return ret;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3710      	adds	r7, #16
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}

08005a76 <lsm303agr_mag_operating_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_operating_mode_set(stmdev_ctx_t *ctx,
                                         lsm303agr_md_m_t val)
{
 8005a76:	b580      	push	{r7, lr}
 8005a78:	b084      	sub	sp, #16
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	6078      	str	r0, [r7, #4]
 8005a7e:	460b      	mov	r3, r1
 8005a80:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8005a82:	f107 0208 	add.w	r2, r7, #8
 8005a86:	2301      	movs	r3, #1
 8005a88:	2160      	movs	r1, #96	; 0x60
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f7ff fe78 	bl	8005780 <lsm303agr_read_reg>
 8005a90:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&cfg_reg_a_m, 1);
  if(ret == 0){
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d10f      	bne.n	8005ab8 <lsm303agr_mag_operating_mode_set+0x42>
    cfg_reg_a_m.md = (uint8_t)val;
 8005a98:	78fb      	ldrb	r3, [r7, #3]
 8005a9a:	f003 0303 	and.w	r3, r3, #3
 8005a9e:	b2da      	uxtb	r2, r3
 8005aa0:	7a3b      	ldrb	r3, [r7, #8]
 8005aa2:	f362 0301 	bfi	r3, r2, #0, #2
 8005aa6:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8005aa8:	f107 0208 	add.w	r2, r7, #8
 8005aac:	2301      	movs	r3, #1
 8005aae:	2160      	movs	r1, #96	; 0x60
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f7ff fe7d 	bl	80057b0 <lsm303agr_write_reg>
 8005ab6:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&cfg_reg_a_m, 1);
  }

  return ret;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3710      	adds	r7, #16
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}

08005ac2 <lsm303agr_mag_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t val)
{
 8005ac2:	b580      	push	{r7, lr}
 8005ac4:	b084      	sub	sp, #16
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	6078      	str	r0, [r7, #4]
 8005aca:	460b      	mov	r3, r1
 8005acc:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8005ace:	f107 0208 	add.w	r2, r7, #8
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	2160      	movs	r1, #96	; 0x60
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f7ff fe52 	bl	8005780 <lsm303agr_read_reg>
 8005adc:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&cfg_reg_a_m, 1);
  if(ret == 0){
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d10f      	bne.n	8005b04 <lsm303agr_mag_data_rate_set+0x42>
    cfg_reg_a_m.odr = (uint8_t)val;
 8005ae4:	78fb      	ldrb	r3, [r7, #3]
 8005ae6:	f003 0303 	and.w	r3, r3, #3
 8005aea:	b2da      	uxtb	r2, r3
 8005aec:	7a3b      	ldrb	r3, [r7, #8]
 8005aee:	f362 0383 	bfi	r3, r2, #2, #2
 8005af2:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8005af4:	f107 0208 	add.w	r2, r7, #8
 8005af8:	2301      	movs	r3, #1
 8005afa:	2160      	movs	r1, #96	; 0x60
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f7ff fe57 	bl	80057b0 <lsm303agr_write_reg>
 8005b02:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&cfg_reg_a_m, 1);
  }

  return ret;
 8005b04:	68fb      	ldr	r3, [r7, #12]
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3710      	adds	r7, #16
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
	...

08005b10 <lsm303agr_mag_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_get(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t *val)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	6039      	str	r1, [r7, #0]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8005b1a:	f107 0208 	add.w	r2, r7, #8
 8005b1e:	2301      	movs	r3, #1
 8005b20:	2160      	movs	r1, #96	; 0x60
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f7ff fe2c 	bl	8005780 <lsm303agr_read_reg>
 8005b28:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&cfg_reg_a_m, 1);

    switch (cfg_reg_a_m.odr){
 8005b2a:	7a3b      	ldrb	r3, [r7, #8]
 8005b2c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8005b30:	b2db      	uxtb	r3, r3
 8005b32:	2b03      	cmp	r3, #3
 8005b34:	d81a      	bhi.n	8005b6c <lsm303agr_mag_data_rate_get+0x5c>
 8005b36:	a201      	add	r2, pc, #4	; (adr r2, 8005b3c <lsm303agr_mag_data_rate_get+0x2c>)
 8005b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b3c:	08005b4d 	.word	0x08005b4d
 8005b40:	08005b55 	.word	0x08005b55
 8005b44:	08005b5d 	.word	0x08005b5d
 8005b48:	08005b65 	.word	0x08005b65
    case LSM303AGR_MG_ODR_10Hz:
      *val = LSM303AGR_MG_ODR_10Hz;
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	701a      	strb	r2, [r3, #0]
      break;
 8005b52:	e00f      	b.n	8005b74 <lsm303agr_mag_data_rate_get+0x64>
    case LSM303AGR_MG_ODR_20Hz:
      *val = LSM303AGR_MG_ODR_20Hz;
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	2201      	movs	r2, #1
 8005b58:	701a      	strb	r2, [r3, #0]
      break;
 8005b5a:	e00b      	b.n	8005b74 <lsm303agr_mag_data_rate_get+0x64>
    case LSM303AGR_MG_ODR_50Hz:
      *val = LSM303AGR_MG_ODR_50Hz;
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	2202      	movs	r2, #2
 8005b60:	701a      	strb	r2, [r3, #0]
      break;
 8005b62:	e007      	b.n	8005b74 <lsm303agr_mag_data_rate_get+0x64>
    case LSM303AGR_MG_ODR_100Hz:
      *val = LSM303AGR_MG_ODR_100Hz;
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	2203      	movs	r2, #3
 8005b68:	701a      	strb	r2, [r3, #0]
      break;
 8005b6a:	e003      	b.n	8005b74 <lsm303agr_mag_data_rate_get+0x64>
    default:
      *val = LSM303AGR_MG_ODR_10Hz;
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	701a      	strb	r2, [r3, #0]
      break;
 8005b72:	bf00      	nop
  }
  return ret;
 8005b74:	68fb      	ldr	r3, [r7, #12]
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3710      	adds	r7, #16
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	bf00      	nop

08005b80 <lsm303agr_mag_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_block_data_update_set(stmdev_ctx_t *ctx,
                                            uint8_t val)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b084      	sub	sp, #16
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	460b      	mov	r3, r1
 8005b8a:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8005b8c:	f107 0208 	add.w	r2, r7, #8
 8005b90:	2301      	movs	r3, #1
 8005b92:	2162      	movs	r1, #98	; 0x62
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f7ff fdf3 	bl	8005780 <lsm303agr_read_reg>
 8005b9a:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&cfg_reg_c_m, 1);
  if(ret == 0){
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d10f      	bne.n	8005bc2 <lsm303agr_mag_block_data_update_set+0x42>
    cfg_reg_c_m.bdu = (uint8_t)val;
 8005ba2:	78fb      	ldrb	r3, [r7, #3]
 8005ba4:	f003 0301 	and.w	r3, r3, #1
 8005ba8:	b2da      	uxtb	r2, r3
 8005baa:	7a3b      	ldrb	r3, [r7, #8]
 8005bac:	f362 1304 	bfi	r3, r2, #4, #1
 8005bb0:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8005bb2:	f107 0208 	add.w	r2, r7, #8
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	2162      	movs	r1, #98	; 0x62
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f7ff fdf8 	bl	80057b0 <lsm303agr_write_reg>
 8005bc0:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&cfg_reg_c_m, 1);
  }

  return ret;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3710      	adds	r7, #16
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <lsm303agr_magnetic_raw_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_magnetic_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b084      	sub	sp, #16
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUTX_L_REG_M, buff, 6);
 8005bd6:	2306      	movs	r3, #6
 8005bd8:	683a      	ldr	r2, [r7, #0]
 8005bda:	2168      	movs	r1, #104	; 0x68
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f7ff fdcf 	bl	8005780 <lsm303agr_read_reg>
 8005be2:	60f8      	str	r0, [r7, #12]
  return ret;
 8005be4:	68fb      	ldr	r3, [r7, #12]
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3710      	adds	r7, #16
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}

08005bee <lsm303agr_xl_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005bee:	b580      	push	{r7, lr}
 8005bf0:	b084      	sub	sp, #16
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
 8005bf6:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_A, buff, 1);
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	683a      	ldr	r2, [r7, #0]
 8005bfc:	210f      	movs	r1, #15
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f7ff fdbe 	bl	8005780 <lsm303agr_read_reg>
 8005c04:	60f8      	str	r0, [r7, #12]
  return ret;
 8005c06:	68fb      	ldr	r3, [r7, #12]
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3710      	adds	r7, #16
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <lsm303agr_mag_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b084      	sub	sp, #16
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_M, buff, 1);
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	683a      	ldr	r2, [r7, #0]
 8005c1e:	214f      	movs	r1, #79	; 0x4f
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f7ff fdad 	bl	8005780 <lsm303agr_read_reg>
 8005c26:	60f8      	str	r0, [r7, #12]
  return ret;
 8005c28:	68fb      	ldr	r3, [r7, #12]
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3710      	adds	r7, #16
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}

08005c32 <lsm303agr_mag_self_test_set>:
  * @param  val    Change the values of self_test in reg CFG_REG_C_M
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005c32:	b580      	push	{r7, lr}
 8005c34:	b084      	sub	sp, #16
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
 8005c3a:	460b      	mov	r3, r1
 8005c3c:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8005c3e:	f107 0208 	add.w	r2, r7, #8
 8005c42:	2301      	movs	r3, #1
 8005c44:	2162      	movs	r1, #98	; 0x62
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f7ff fd9a 	bl	8005780 <lsm303agr_read_reg>
 8005c4c:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&cfg_reg_c_m, 1);
  if(ret == 0){
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d10f      	bne.n	8005c74 <lsm303agr_mag_self_test_set+0x42>
    cfg_reg_c_m.self_test = (uint8_t)val;
 8005c54:	78fb      	ldrb	r3, [r7, #3]
 8005c56:	f003 0301 	and.w	r3, r3, #1
 8005c5a:	b2da      	uxtb	r2, r3
 8005c5c:	7a3b      	ldrb	r3, [r7, #8]
 8005c5e:	f362 0341 	bfi	r3, r2, #1, #1
 8005c62:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8005c64:	f107 0208 	add.w	r2, r7, #8
 8005c68:	2301      	movs	r3, #1
 8005c6a:	2162      	movs	r1, #98	; 0x62
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f7ff fd9f 	bl	80057b0 <lsm303agr_write_reg>
 8005c72:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&cfg_reg_c_m, 1);
  }

  return ret;
 8005c74:	68fb      	ldr	r3, [r7, #12]
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3710      	adds	r7, #16
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}

08005c7e <lsm303agr_xl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_fifo_mode_set(stmdev_ctx_t *ctx,
                                   lsm303agr_fm_a_t val)
{
 8005c7e:	b580      	push	{r7, lr}
 8005c80:	b084      	sub	sp, #16
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	6078      	str	r0, [r7, #4]
 8005c86:	460b      	mov	r3, r1
 8005c88:	70fb      	strb	r3, [r7, #3]
  lsm303agr_fifo_ctrl_reg_a_t fifo_ctrl_reg_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 8005c8a:	f107 0208 	add.w	r2, r7, #8
 8005c8e:	2301      	movs	r3, #1
 8005c90:	212e      	movs	r1, #46	; 0x2e
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f7ff fd74 	bl	8005780 <lsm303agr_read_reg>
 8005c98:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&fifo_ctrl_reg_a, 1);
  if(ret == 0){
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d10f      	bne.n	8005cc0 <lsm303agr_xl_fifo_mode_set+0x42>
    fifo_ctrl_reg_a.fm = (uint8_t)val;
 8005ca0:	78fb      	ldrb	r3, [r7, #3]
 8005ca2:	f003 0303 	and.w	r3, r3, #3
 8005ca6:	b2da      	uxtb	r2, r3
 8005ca8:	7a3b      	ldrb	r3, [r7, #8]
 8005caa:	f362 1387 	bfi	r3, r2, #6, #2
 8005cae:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 8005cb0:	f107 0208 	add.w	r2, r7, #8
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	212e      	movs	r1, #46	; 0x2e
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f7ff fd79 	bl	80057b0 <lsm303agr_write_reg>
 8005cbe:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&fifo_ctrl_reg_a, 1);
  }

  return ret;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3710      	adds	r7, #16
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}

08005cca <lsm303agr_mag_i2c_interface_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_i2c_interface_set(stmdev_ctx_t *ctx,
                                        lsm303agr_i2c_dis_m_t val)
{
 8005cca:	b580      	push	{r7, lr}
 8005ccc:	b084      	sub	sp, #16
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	6078      	str	r0, [r7, #4]
 8005cd2:	460b      	mov	r3, r1
 8005cd4:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8005cd6:	f107 0208 	add.w	r2, r7, #8
 8005cda:	2301      	movs	r3, #1
 8005cdc:	2162      	movs	r1, #98	; 0x62
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f7ff fd4e 	bl	8005780 <lsm303agr_read_reg>
 8005ce4:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&cfg_reg_c_m, 1);
  if(ret == 0){
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d10f      	bne.n	8005d0c <lsm303agr_mag_i2c_interface_set+0x42>
    cfg_reg_c_m.i2c_dis = (uint8_t)val;
 8005cec:	78fb      	ldrb	r3, [r7, #3]
 8005cee:	f003 0301 	and.w	r3, r3, #1
 8005cf2:	b2da      	uxtb	r2, r3
 8005cf4:	7a3b      	ldrb	r3, [r7, #8]
 8005cf6:	f362 1345 	bfi	r3, r2, #5, #1
 8005cfa:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8005cfc:	f107 0208 	add.w	r2, r7, #8
 8005d00:	2301      	movs	r3, #1
 8005d02:	2162      	movs	r1, #98	; 0x62
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f7ff fd53 	bl	80057b0 <lsm303agr_write_reg>
 8005d0a:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&cfg_reg_c_m, 1);
  }

  return ret;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3710      	adds	r7, #16
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}
	...

08005d18 <LSM6DSL_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_RegisterBusIO(LSM6DSL_Object_t *pObj, LSM6DSL_IO_t *pIO)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b084      	sub	sp, #16
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8005d22:	2300      	movs	r3, #0
 8005d24:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d103      	bne.n	8005d34 <LSM6DSL_RegisterBusIO+0x1c>
  {
    ret = LSM6DSL_ERROR;
 8005d2c:	f04f 33ff 	mov.w	r3, #4294967295
 8005d30:	60fb      	str	r3, [r7, #12]
 8005d32:	e04d      	b.n	8005dd0 <LSM6DSL_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	685a      	ldr	r2, [r3, #4]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	689a      	ldr	r2, [r3, #8]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	7b1a      	ldrb	r2, [r3, #12]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	691a      	ldr	r2, [r3, #16]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	695a      	ldr	r2, [r3, #20]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	699a      	ldr	r2, [r3, #24]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	4a1b      	ldr	r2, [pc, #108]	; (8005ddc <LSM6DSL_RegisterBusIO+0xc4>)
 8005d70:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	4a1a      	ldr	r2, [pc, #104]	; (8005de0 <LSM6DSL_RegisterBusIO+0xc8>)
 8005d76:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d103      	bne.n	8005d8e <LSM6DSL_RegisterBusIO+0x76>
    {
      ret = LSM6DSL_ERROR;
 8005d86:	f04f 33ff 	mov.w	r3, #4294967295
 8005d8a:	60fb      	str	r3, [r7, #12]
 8005d8c:	e020      	b.n	8005dd0 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSL_OK)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4798      	blx	r3
 8005d94:	4603      	mov	r3, r0
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d003      	beq.n	8005da2 <LSM6DSL_RegisterBusIO+0x8a>
    {
      ret = LSM6DSL_ERROR;
 8005d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8005d9e:	60fb      	str	r3, [r7, #12]
 8005da0:	e016      	b.n	8005dd0 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	2b02      	cmp	r3, #2
 8005da8:	d112      	bne.n	8005dd0 <LSM6DSL_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d10d      	bne.n	8005dd0 <LSM6DSL_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8005db4:	230c      	movs	r3, #12
 8005db6:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 8005db8:	7afb      	ldrb	r3, [r7, #11]
 8005dba:	461a      	mov	r2, r3
 8005dbc:	2112      	movs	r1, #18
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f000 fd29 	bl	8006816 <LSM6DSL_Write_Reg>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d002      	beq.n	8005dd0 <LSM6DSL_RegisterBusIO+0xb8>
          {
            ret = LSM6DSL_ERROR;
 8005dca:	f04f 33ff 	mov.w	r3, #4294967295
 8005dce:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3710      	adds	r7, #16
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	08006c7d 	.word	0x08006c7d
 8005de0:	08006cb3 	.word	0x08006cb3

08005de4 <LSM6DSL_Init>:
 * @brief  Initialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Init(LSM6DSL_Object_t *pObj)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b082      	sub	sp, #8
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	331c      	adds	r3, #28
 8005df0:	2101      	movs	r1, #1
 8005df2:	4618      	mov	r0, r3
 8005df4:	f001 f9dd 	bl	80071b2 <lsm6dsl_auto_increment_set>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d002      	beq.n	8005e04 <LSM6DSL_Init+0x20>
  {
    return LSM6DSL_ERROR;
 8005dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8005e02:	e054      	b.n	8005eae <LSM6DSL_Init+0xca>
  }

  /* Enable BDU */
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	331c      	adds	r3, #28
 8005e08:	2101      	movs	r1, #1
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f001 f978 	bl	8007100 <lsm6dsl_block_data_update_set>
 8005e10:	4603      	mov	r3, r0
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d002      	beq.n	8005e1c <LSM6DSL_Init+0x38>
  {
    return LSM6DSL_ERROR;
 8005e16:	f04f 33ff 	mov.w	r3, #4294967295
 8005e1a:	e048      	b.n	8005eae <LSM6DSL_Init+0xca>
  }

  /* FIFO mode selection */
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	331c      	adds	r3, #28
 8005e20:	2100      	movs	r1, #0
 8005e22:	4618      	mov	r0, r3
 8005e24:	f001 f9eb 	bl	80071fe <lsm6dsl_fifo_mode_set>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d002      	beq.n	8005e34 <LSM6DSL_Init+0x50>
  {
    return LSM6DSL_ERROR;
 8005e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8005e32:	e03c      	b.n	8005eae <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2204      	movs	r2, #4
 8005e38:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	331c      	adds	r3, #28
 8005e40:	2100      	movs	r1, #0
 8005e42:	4618      	mov	r0, r3
 8005e44:	f000 ffde 	bl	8006e04 <lsm6dsl_xl_data_rate_set>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d002      	beq.n	8005e54 <LSM6DSL_Init+0x70>
  {
    return LSM6DSL_ERROR;
 8005e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8005e52:	e02c      	b.n	8005eae <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	331c      	adds	r3, #28
 8005e58:	2100      	movs	r1, #0
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f000 ff74 	bl	8006d48 <lsm6dsl_xl_full_scale_set>
 8005e60:	4603      	mov	r3, r0
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d002      	beq.n	8005e6c <LSM6DSL_Init+0x88>
  {
    return LSM6DSL_ERROR;
 8005e66:	f04f 33ff 	mov.w	r3, #4294967295
 8005e6a:	e020      	b.n	8005eae <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2204      	movs	r2, #4
 8005e70:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	331c      	adds	r3, #28
 8005e78:	2100      	movs	r1, #0
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f001 f8b8 	bl	8006ff0 <lsm6dsl_gy_data_rate_set>
 8005e80:	4603      	mov	r3, r0
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d002      	beq.n	8005e8c <LSM6DSL_Init+0xa8>
  {
    return LSM6DSL_ERROR;
 8005e86:	f04f 33ff 	mov.w	r3, #4294967295
 8005e8a:	e010      	b.n	8005eae <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	331c      	adds	r3, #28
 8005e90:	2106      	movs	r1, #6
 8005e92:	4618      	mov	r0, r3
 8005e94:	f001 f844 	bl	8006f20 <lsm6dsl_gy_full_scale_set>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d002      	beq.n	8005ea4 <LSM6DSL_Init+0xc0>
  {
    return LSM6DSL_ERROR;
 8005e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8005ea2:	e004      	b.n	8005eae <LSM6DSL_Init+0xca>
  }

  pObj->is_initialized = 1;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 8005eac:	2300      	movs	r3, #0
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3708      	adds	r7, #8
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}

08005eb6 <LSM6DSL_DeInit>:
 * @brief  Deinitialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_DeInit(LSM6DSL_Object_t *pObj)
{
 8005eb6:	b580      	push	{r7, lr}
 8005eb8:	b082      	sub	sp, #8
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSL_ACC_Disable(pObj) != LSM6DSL_OK)
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 f888 	bl	8005fd4 <LSM6DSL_ACC_Disable>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d002      	beq.n	8005ed0 <LSM6DSL_DeInit+0x1a>
  {
    return LSM6DSL_ERROR;
 8005eca:	f04f 33ff 	mov.w	r3, #4294967295
 8005ece:	e015      	b.n	8005efc <LSM6DSL_DeInit+0x46>
  }

  if (LSM6DSL_GYRO_Disable(pObj) != LSM6DSL_OK)
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f000 fa98 	bl	8006406 <LSM6DSL_GYRO_Disable>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d002      	beq.n	8005ee2 <LSM6DSL_DeInit+0x2c>
  {
    return LSM6DSL_ERROR;
 8005edc:	f04f 33ff 	mov.w	r3, #4294967295
 8005ee0:	e00c      	b.n	8005efc <LSM6DSL_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_OFF;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  pObj->gyro_odr = LSM6DSL_GY_ODR_OFF;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2200      	movs	r2, #0
 8005eee:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  pObj->is_initialized = 0;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 8005efa:	2300      	movs	r3, #0
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3708      	adds	r7, #8
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}

08005f04 <LSM6DSL_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ReadID(LSM6DSL_Object_t *pObj, uint8_t *Id)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b082      	sub	sp, #8
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	6039      	str	r1, [r7, #0]
  if (lsm6dsl_device_id_get(&(pObj->Ctx), Id) != LSM6DSL_OK)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	331c      	adds	r3, #28
 8005f12:	6839      	ldr	r1, [r7, #0]
 8005f14:	4618      	mov	r0, r3
 8005f16:	f001 f93b 	bl	8007190 <lsm6dsl_device_id_get>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d002      	beq.n	8005f26 <LSM6DSL_ReadID+0x22>
  {
    return LSM6DSL_ERROR;
 8005f20:	f04f 33ff 	mov.w	r3, #4294967295
 8005f24:	e000      	b.n	8005f28 <LSM6DSL_ReadID+0x24>
  }

  return LSM6DSL_OK;
 8005f26:	2300      	movs	r3, #0
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3708      	adds	r7, #8
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <LSM6DSL_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM6DSL sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GetCapabilities(LSM6DSL_Object_t *pObj, LSM6DSL_Capabilities_t *Capabilities)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b083      	sub	sp, #12
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	2201      	movs	r2, #1
 8005f44:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005f58:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	2210      	movs	r2, #16
 8005f5e:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	2200      	movs	r2, #0
 8005f64:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	4a07      	ldr	r2, [pc, #28]	; (8005f88 <LSM6DSL_GetCapabilities+0x58>)
 8005f6a:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	4a06      	ldr	r2, [pc, #24]	; (8005f88 <LSM6DSL_GetCapabilities+0x58>)
 8005f70:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	f04f 0200 	mov.w	r2, #0
 8005f78:	619a      	str	r2, [r3, #24]
  return LSM6DSL_OK;
 8005f7a:	2300      	movs	r3, #0
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	370c      	adds	r7, #12
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr
 8005f88:	45d02000 	.word	0x45d02000

08005f8c <LSM6DSL_ACC_Enable>:
 * @brief  Enable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Enable(LSM6DSL_Object_t *pObj)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b082      	sub	sp, #8
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d101      	bne.n	8005fa2 <LSM6DSL_ACC_Enable+0x16>
  {
    return LSM6DSL_OK;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	e014      	b.n	8005fcc <LSM6DSL_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f103 021c 	add.w	r2, r3, #28
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8005fae:	4619      	mov	r1, r3
 8005fb0:	4610      	mov	r0, r2
 8005fb2:	f000 ff27 	bl	8006e04 <lsm6dsl_xl_data_rate_set>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d002      	beq.n	8005fc2 <LSM6DSL_ACC_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8005fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8005fc0:	e004      	b.n	8005fcc <LSM6DSL_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 8005fca:	2300      	movs	r3, #0
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3708      	adds	r7, #8
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <LSM6DSL_ACC_Disable>:
 * @brief  Disable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Disable(LSM6DSL_Object_t *pObj)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b082      	sub	sp, #8
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d101      	bne.n	8005fea <LSM6DSL_ACC_Disable+0x16>
  {
    return LSM6DSL_OK;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	e01f      	b.n	800602a <LSM6DSL_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSL_OK)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f103 021c 	add.w	r2, r3, #28
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	332b      	adds	r3, #43	; 0x2b
 8005ff4:	4619      	mov	r1, r3
 8005ff6:	4610      	mov	r0, r2
 8005ff8:	f000 ff2a 	bl	8006e50 <lsm6dsl_xl_data_rate_get>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d002      	beq.n	8006008 <LSM6DSL_ACC_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 8006002:	f04f 33ff 	mov.w	r3, #4294967295
 8006006:	e010      	b.n	800602a <LSM6DSL_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	331c      	adds	r3, #28
 800600c:	2100      	movs	r1, #0
 800600e:	4618      	mov	r0, r3
 8006010:	f000 fef8 	bl	8006e04 <lsm6dsl_xl_data_rate_set>
 8006014:	4603      	mov	r3, r0
 8006016:	2b00      	cmp	r3, #0
 8006018:	d002      	beq.n	8006020 <LSM6DSL_ACC_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 800601a:	f04f 33ff 	mov.w	r3, #4294967295
 800601e:	e004      	b.n	800602a <LSM6DSL_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2200      	movs	r2, #0
 8006024:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 8006028:	2300      	movs	r3, #0
}
 800602a:	4618      	mov	r0, r3
 800602c:	3708      	adds	r7, #8
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}
	...

08006034 <LSM6DSL_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b084      	sub	sp, #16
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 800603e:	2300      	movs	r3, #0
 8006040:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	331c      	adds	r3, #28
 8006046:	f107 020b 	add.w	r2, r7, #11
 800604a:	4611      	mov	r1, r2
 800604c:	4618      	mov	r0, r3
 800604e:	f000 fea1 	bl	8006d94 <lsm6dsl_xl_full_scale_get>
 8006052:	4603      	mov	r3, r0
 8006054:	2b00      	cmp	r3, #0
 8006056:	d002      	beq.n	800605e <LSM6DSL_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 8006058:	f04f 33ff 	mov.w	r3, #4294967295
 800605c:	e023      	b.n	80060a6 <LSM6DSL_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 800605e:	7afb      	ldrb	r3, [r7, #11]
 8006060:	2b03      	cmp	r3, #3
 8006062:	d81b      	bhi.n	800609c <LSM6DSL_ACC_GetSensitivity+0x68>
 8006064:	a201      	add	r2, pc, #4	; (adr r2, 800606c <LSM6DSL_ACC_GetSensitivity+0x38>)
 8006066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800606a:	bf00      	nop
 800606c:	0800607d 	.word	0x0800607d
 8006070:	08006095 	.word	0x08006095
 8006074:	08006085 	.word	0x08006085
 8006078:	0800608d 	.word	0x0800608d
  {
    case LSM6DSL_2g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_2G;
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	4a0c      	ldr	r2, [pc, #48]	; (80060b0 <LSM6DSL_ACC_GetSensitivity+0x7c>)
 8006080:	601a      	str	r2, [r3, #0]
      break;
 8006082:	e00f      	b.n	80060a4 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_4g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_4G;
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	4a0b      	ldr	r2, [pc, #44]	; (80060b4 <LSM6DSL_ACC_GetSensitivity+0x80>)
 8006088:	601a      	str	r2, [r3, #0]
      break;
 800608a:	e00b      	b.n	80060a4 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_8g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_8G;
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	4a0a      	ldr	r2, [pc, #40]	; (80060b8 <LSM6DSL_ACC_GetSensitivity+0x84>)
 8006090:	601a      	str	r2, [r3, #0]
      break;
 8006092:	e007      	b.n	80060a4 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_16g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_16G;
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	4a09      	ldr	r2, [pc, #36]	; (80060bc <LSM6DSL_ACC_GetSensitivity+0x88>)
 8006098:	601a      	str	r2, [r3, #0]
      break;
 800609a:	e003      	b.n	80060a4 <LSM6DSL_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSL_ERROR;
 800609c:	f04f 33ff 	mov.w	r3, #4294967295
 80060a0:	60fb      	str	r3, [r7, #12]
      break;
 80060a2:	bf00      	nop
  }

  return ret;
 80060a4:	68fb      	ldr	r3, [r7, #12]
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3710      	adds	r7, #16
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
 80060ae:	bf00      	nop
 80060b0:	3d79db23 	.word	0x3d79db23
 80060b4:	3df9db23 	.word	0x3df9db23
 80060b8:	3e79db23 	.word	0x3e79db23
 80060bc:	3ef9db23 	.word	0x3ef9db23

080060c0 <LSM6DSL_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b084      	sub	sp, #16
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80060ca:	2300      	movs	r3, #0
 80060cc:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	331c      	adds	r3, #28
 80060d2:	f107 020b 	add.w	r2, r7, #11
 80060d6:	4611      	mov	r1, r2
 80060d8:	4618      	mov	r0, r3
 80060da:	f000 feb9 	bl	8006e50 <lsm6dsl_xl_data_rate_get>
 80060de:	4603      	mov	r3, r0
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d002      	beq.n	80060ea <LSM6DSL_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 80060e4:	f04f 33ff 	mov.w	r3, #4294967295
 80060e8:	e054      	b.n	8006194 <LSM6DSL_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 80060ea:	7afb      	ldrb	r3, [r7, #11]
 80060ec:	2b0b      	cmp	r3, #11
 80060ee:	d84c      	bhi.n	800618a <LSM6DSL_ACC_GetOutputDataRate+0xca>
 80060f0:	a201      	add	r2, pc, #4	; (adr r2, 80060f8 <LSM6DSL_ACC_GetOutputDataRate+0x38>)
 80060f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060f6:	bf00      	nop
 80060f8:	08006129 	.word	0x08006129
 80060fc:	0800613b 	.word	0x0800613b
 8006100:	08006143 	.word	0x08006143
 8006104:	0800614b 	.word	0x0800614b
 8006108:	08006153 	.word	0x08006153
 800610c:	0800615b 	.word	0x0800615b
 8006110:	08006163 	.word	0x08006163
 8006114:	0800616b 	.word	0x0800616b
 8006118:	08006173 	.word	0x08006173
 800611c:	0800617b 	.word	0x0800617b
 8006120:	08006183 	.word	0x08006183
 8006124:	08006133 	.word	0x08006133
  {
    case LSM6DSL_XL_ODR_OFF:
      *Odr = 0.0f;
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	f04f 0200 	mov.w	r2, #0
 800612e:	601a      	str	r2, [r3, #0]
      break;
 8006130:	e02f      	b.n	8006192 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1Hz6:
      *Odr = 1.6f;
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	4a19      	ldr	r2, [pc, #100]	; (800619c <LSM6DSL_ACC_GetOutputDataRate+0xdc>)
 8006136:	601a      	str	r2, [r3, #0]
      break;
 8006138:	e02b      	b.n	8006192 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_12Hz5:
      *Odr = 12.5f;
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	4a18      	ldr	r2, [pc, #96]	; (80061a0 <LSM6DSL_ACC_GetOutputDataRate+0xe0>)
 800613e:	601a      	str	r2, [r3, #0]
      break;
 8006140:	e027      	b.n	8006192 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_26Hz:
      *Odr = 26.0f;
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	4a17      	ldr	r2, [pc, #92]	; (80061a4 <LSM6DSL_ACC_GetOutputDataRate+0xe4>)
 8006146:	601a      	str	r2, [r3, #0]
      break;
 8006148:	e023      	b.n	8006192 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_52Hz:
      *Odr = 52.0f;
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	4a16      	ldr	r2, [pc, #88]	; (80061a8 <LSM6DSL_ACC_GetOutputDataRate+0xe8>)
 800614e:	601a      	str	r2, [r3, #0]
      break;
 8006150:	e01f      	b.n	8006192 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_104Hz:
      *Odr = 104.0f;
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	4a15      	ldr	r2, [pc, #84]	; (80061ac <LSM6DSL_ACC_GetOutputDataRate+0xec>)
 8006156:	601a      	str	r2, [r3, #0]
      break;
 8006158:	e01b      	b.n	8006192 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_208Hz:
      *Odr = 208.0f;
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	4a14      	ldr	r2, [pc, #80]	; (80061b0 <LSM6DSL_ACC_GetOutputDataRate+0xf0>)
 800615e:	601a      	str	r2, [r3, #0]
      break;
 8006160:	e017      	b.n	8006192 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_416Hz:
      *Odr = 416.0f;
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	4a13      	ldr	r2, [pc, #76]	; (80061b4 <LSM6DSL_ACC_GetOutputDataRate+0xf4>)
 8006166:	601a      	str	r2, [r3, #0]
      break;
 8006168:	e013      	b.n	8006192 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_833Hz:
      *Odr = 833.0f;
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	4a12      	ldr	r2, [pc, #72]	; (80061b8 <LSM6DSL_ACC_GetOutputDataRate+0xf8>)
 800616e:	601a      	str	r2, [r3, #0]
      break;
 8006170:	e00f      	b.n	8006192 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1k66Hz:
      *Odr = 1660.0f;
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	4a11      	ldr	r2, [pc, #68]	; (80061bc <LSM6DSL_ACC_GetOutputDataRate+0xfc>)
 8006176:	601a      	str	r2, [r3, #0]
      break;
 8006178:	e00b      	b.n	8006192 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_3k33Hz:
      *Odr = 3330.0f;
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	4a10      	ldr	r2, [pc, #64]	; (80061c0 <LSM6DSL_ACC_GetOutputDataRate+0x100>)
 800617e:	601a      	str	r2, [r3, #0]
      break;
 8006180:	e007      	b.n	8006192 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_6k66Hz:
      *Odr = 6660.0f;
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	4a0f      	ldr	r2, [pc, #60]	; (80061c4 <LSM6DSL_ACC_GetOutputDataRate+0x104>)
 8006186:	601a      	str	r2, [r3, #0]
      break;
 8006188:	e003      	b.n	8006192 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSL_ERROR;
 800618a:	f04f 33ff 	mov.w	r3, #4294967295
 800618e:	60fb      	str	r3, [r7, #12]
      break;
 8006190:	bf00      	nop
  }

  return ret;
 8006192:	68fb      	ldr	r3, [r7, #12]
}
 8006194:	4618      	mov	r0, r3
 8006196:	3710      	adds	r7, #16
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}
 800619c:	3fcccccd 	.word	0x3fcccccd
 80061a0:	41480000 	.word	0x41480000
 80061a4:	41d00000 	.word	0x41d00000
 80061a8:	42500000 	.word	0x42500000
 80061ac:	42d00000 	.word	0x42d00000
 80061b0:	43500000 	.word	0x43500000
 80061b4:	43d00000 	.word	0x43d00000
 80061b8:	44504000 	.word	0x44504000
 80061bc:	44cf8000 	.word	0x44cf8000
 80061c0:	45502000 	.word	0x45502000
 80061c4:	45d02000 	.word	0x45d02000

080061c8 <LSM6DSL_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b082      	sub	sp, #8
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
 80061d0:	6039      	str	r1, [r7, #0]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d105      	bne.n	80061e8 <LSM6DSL_ACC_SetOutputDataRate+0x20>
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 80061dc:	6839      	ldr	r1, [r7, #0]
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f000 fb34 	bl	800684c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>
 80061e4:	4603      	mov	r3, r0
 80061e6:	e004      	b.n	80061f2 <LSM6DSL_ACC_SetOutputDataRate+0x2a>
  }
  else
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 80061e8:	6839      	ldr	r1, [r7, #0]
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 fbb8 	bl	8006960 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>
 80061f0:	4603      	mov	r3, r0
  }
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3708      	adds	r7, #8
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}
	...

080061fc <LSM6DSL_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetFullScale(LSM6DSL_Object_t *pObj, int32_t *FullScale)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8006206:	2300      	movs	r3, #0
 8006208:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	331c      	adds	r3, #28
 800620e:	f107 020b 	add.w	r2, r7, #11
 8006212:	4611      	mov	r1, r2
 8006214:	4618      	mov	r0, r3
 8006216:	f000 fdbd 	bl	8006d94 <lsm6dsl_xl_full_scale_get>
 800621a:	4603      	mov	r3, r0
 800621c:	2b00      	cmp	r3, #0
 800621e:	d002      	beq.n	8006226 <LSM6DSL_ACC_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 8006220:	f04f 33ff 	mov.w	r3, #4294967295
 8006224:	e023      	b.n	800626e <LSM6DSL_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8006226:	7afb      	ldrb	r3, [r7, #11]
 8006228:	2b03      	cmp	r3, #3
 800622a:	d81b      	bhi.n	8006264 <LSM6DSL_ACC_GetFullScale+0x68>
 800622c:	a201      	add	r2, pc, #4	; (adr r2, 8006234 <LSM6DSL_ACC_GetFullScale+0x38>)
 800622e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006232:	bf00      	nop
 8006234:	08006245 	.word	0x08006245
 8006238:	0800625d 	.word	0x0800625d
 800623c:	0800624d 	.word	0x0800624d
 8006240:	08006255 	.word	0x08006255
  {
    case LSM6DSL_2g:
      *FullScale =  2;
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	2202      	movs	r2, #2
 8006248:	601a      	str	r2, [r3, #0]
      break;
 800624a:	e00f      	b.n	800626c <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_4g:
      *FullScale =  4;
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	2204      	movs	r2, #4
 8006250:	601a      	str	r2, [r3, #0]
      break;
 8006252:	e00b      	b.n	800626c <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_8g:
      *FullScale =  8;
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	2208      	movs	r2, #8
 8006258:	601a      	str	r2, [r3, #0]
      break;
 800625a:	e007      	b.n	800626c <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_16g:
      *FullScale = 16;
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	2210      	movs	r2, #16
 8006260:	601a      	str	r2, [r3, #0]
      break;
 8006262:	e003      	b.n	800626c <LSM6DSL_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSL_ERROR;
 8006264:	f04f 33ff 	mov.w	r3, #4294967295
 8006268:	60fb      	str	r3, [r7, #12]
      break;
 800626a:	bf00      	nop
  }

  return ret;
 800626c:	68fb      	ldr	r3, [r7, #12]
}
 800626e:	4618      	mov	r0, r3
 8006270:	3710      	adds	r7, #16
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
 8006276:	bf00      	nop

08006278 <LSM6DSL_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b084      	sub	sp, #16
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
           : (FullScale <= 4) ? LSM6DSL_4g
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	2b02      	cmp	r3, #2
 8006286:	dd0b      	ble.n	80062a0 <LSM6DSL_ACC_SetFullScale+0x28>
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	2b04      	cmp	r3, #4
 800628c:	dd06      	ble.n	800629c <LSM6DSL_ACC_SetFullScale+0x24>
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	2b08      	cmp	r3, #8
 8006292:	dc01      	bgt.n	8006298 <LSM6DSL_ACC_SetFullScale+0x20>
 8006294:	2303      	movs	r3, #3
 8006296:	e004      	b.n	80062a2 <LSM6DSL_ACC_SetFullScale+0x2a>
 8006298:	2301      	movs	r3, #1
 800629a:	e002      	b.n	80062a2 <LSM6DSL_ACC_SetFullScale+0x2a>
 800629c:	2302      	movs	r3, #2
 800629e:	e000      	b.n	80062a2 <LSM6DSL_ACC_SetFullScale+0x2a>
 80062a0:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
 80062a2:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSL_8g
           :                    LSM6DSL_16g;

  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	331c      	adds	r3, #28
 80062a8:	7bfa      	ldrb	r2, [r7, #15]
 80062aa:	4611      	mov	r1, r2
 80062ac:	4618      	mov	r0, r3
 80062ae:	f000 fd4b 	bl	8006d48 <lsm6dsl_xl_full_scale_set>
 80062b2:	4603      	mov	r3, r0
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d002      	beq.n	80062be <LSM6DSL_ACC_SetFullScale+0x46>
  {
    return LSM6DSL_ERROR;
 80062b8:	f04f 33ff 	mov.w	r3, #4294967295
 80062bc:	e000      	b.n	80062c0 <LSM6DSL_ACC_SetFullScale+0x48>
  }

  return LSM6DSL_OK;
 80062be:	2300      	movs	r3, #0
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3710      	adds	r7, #16
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}

080062c8 <LSM6DSL_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b084      	sub	sp, #16
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	331c      	adds	r3, #28
 80062d6:	f107 0208 	add.w	r2, r7, #8
 80062da:	4611      	mov	r1, r2
 80062dc:	4618      	mov	r0, r3
 80062de:	f000 ff46 	bl	800716e <lsm6dsl_acceleration_raw_get>
 80062e2:	4603      	mov	r3, r0
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d002      	beq.n	80062ee <LSM6DSL_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 80062e8:	f04f 33ff 	mov.w	r3, #4294967295
 80062ec:	e00c      	b.n	8006308 <LSM6DSL_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80062ee:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80062f6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80062fe:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 8006306:	2300      	movs	r3, #0
}
 8006308:	4618      	mov	r0, r3
 800630a:	3710      	adds	r7, #16
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}

08006310 <LSM6DSL_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *Acceleration)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b086      	sub	sp, #24
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 800631a:	f04f 0300 	mov.w	r3, #0
 800631e:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	331c      	adds	r3, #28
 8006324:	f107 0210 	add.w	r2, r7, #16
 8006328:	4611      	mov	r1, r2
 800632a:	4618      	mov	r0, r3
 800632c:	f000 ff1f 	bl	800716e <lsm6dsl_acceleration_raw_get>
 8006330:	4603      	mov	r3, r0
 8006332:	2b00      	cmp	r3, #0
 8006334:	d002      	beq.n	800633c <LSM6DSL_ACC_GetAxes+0x2c>
  {
    return LSM6DSL_ERROR;
 8006336:	f04f 33ff 	mov.w	r3, #4294967295
 800633a:	e03c      	b.n	80063b6 <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 800633c:	f107 030c 	add.w	r3, r7, #12
 8006340:	4619      	mov	r1, r3
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f7ff fe76 	bl	8006034 <LSM6DSL_ACC_GetSensitivity>
 8006348:	4603      	mov	r3, r0
 800634a:	2b00      	cmp	r3, #0
 800634c:	d002      	beq.n	8006354 <LSM6DSL_ACC_GetAxes+0x44>
  {
    return LSM6DSL_ERROR;
 800634e:	f04f 33ff 	mov.w	r3, #4294967295
 8006352:	e030      	b.n	80063b6 <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8006354:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006358:	ee07 3a90 	vmov	s15, r3
 800635c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006360:	edd7 7a03 	vldr	s15, [r7, #12]
 8006364:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006368:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800636c:	ee17 2a90 	vmov	r2, s15
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8006374:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006378:	ee07 3a90 	vmov	s15, r3
 800637c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006380:	edd7 7a03 	vldr	s15, [r7, #12]
 8006384:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006388:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800638c:	ee17 2a90 	vmov	r2, s15
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8006394:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006398:	ee07 3a90 	vmov	s15, r3
 800639c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80063a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80063a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80063ac:	ee17 2a90 	vmov	r2, s15
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 80063b4:	2300      	movs	r3, #0
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3718      	adds	r7, #24
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}

080063be <LSM6DSL_GYRO_Enable>:
 * @brief  Enable the LSM6DSL gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_Enable(LSM6DSL_Object_t *pObj)
{
 80063be:	b580      	push	{r7, lr}
 80063c0:	b082      	sub	sp, #8
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d101      	bne.n	80063d4 <LSM6DSL_GYRO_Enable+0x16>
  {
    return LSM6DSL_OK;
 80063d0:	2300      	movs	r3, #0
 80063d2:	e014      	b.n	80063fe <LSM6DSL_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSL_OK)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f103 021c 	add.w	r2, r3, #28
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80063e0:	4619      	mov	r1, r3
 80063e2:	4610      	mov	r0, r2
 80063e4:	f000 fe04 	bl	8006ff0 <lsm6dsl_gy_data_rate_set>
 80063e8:	4603      	mov	r3, r0
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d002      	beq.n	80063f4 <LSM6DSL_GYRO_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 80063ee:	f04f 33ff 	mov.w	r3, #4294967295
 80063f2:	e004      	b.n	80063fe <LSM6DSL_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2201      	movs	r2, #1
 80063f8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 80063fc:	2300      	movs	r3, #0
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3708      	adds	r7, #8
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}

08006406 <LSM6DSL_GYRO_Disable>:
 * @brief  Disable the LSM6DSL gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_Disable(LSM6DSL_Object_t *pObj)
{
 8006406:	b580      	push	{r7, lr}
 8006408:	b082      	sub	sp, #8
 800640a:	af00      	add	r7, sp, #0
 800640c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8006414:	2b00      	cmp	r3, #0
 8006416:	d101      	bne.n	800641c <LSM6DSL_GYRO_Disable+0x16>
  {
    return LSM6DSL_OK;
 8006418:	2300      	movs	r3, #0
 800641a:	e01f      	b.n	800645c <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSL_OK)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f103 021c 	add.w	r2, r3, #28
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	332c      	adds	r3, #44	; 0x2c
 8006426:	4619      	mov	r1, r3
 8006428:	4610      	mov	r0, r2
 800642a:	f000 fe07 	bl	800703c <lsm6dsl_gy_data_rate_get>
 800642e:	4603      	mov	r3, r0
 8006430:	2b00      	cmp	r3, #0
 8006432:	d002      	beq.n	800643a <LSM6DSL_GYRO_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 8006434:	f04f 33ff 	mov.w	r3, #4294967295
 8006438:	e010      	b.n	800645c <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	331c      	adds	r3, #28
 800643e:	2100      	movs	r1, #0
 8006440:	4618      	mov	r0, r3
 8006442:	f000 fdd5 	bl	8006ff0 <lsm6dsl_gy_data_rate_set>
 8006446:	4603      	mov	r3, r0
 8006448:	2b00      	cmp	r3, #0
 800644a:	d002      	beq.n	8006452 <LSM6DSL_GYRO_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 800644c:	f04f 33ff 	mov.w	r3, #4294967295
 8006450:	e004      	b.n	800645c <LSM6DSL_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2200      	movs	r2, #0
 8006456:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 800645a:	2300      	movs	r3, #0
}
 800645c:	4618      	mov	r0, r3
 800645e:	3708      	adds	r7, #8
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}

08006464 <LSM6DSL_GYRO_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b084      	sub	sp, #16
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 800646e:	2300      	movs	r3, #0
 8006470:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	331c      	adds	r3, #28
 8006476:	f107 020b 	add.w	r2, r7, #11
 800647a:	4611      	mov	r1, r2
 800647c:	4618      	mov	r0, r3
 800647e:	f000 fd75 	bl	8006f6c <lsm6dsl_gy_full_scale_get>
 8006482:	4603      	mov	r3, r0
 8006484:	2b00      	cmp	r3, #0
 8006486:	d002      	beq.n	800648e <LSM6DSL_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 8006488:	f04f 33ff 	mov.w	r3, #4294967295
 800648c:	e02d      	b.n	80064ea <LSM6DSL_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 800648e:	7afb      	ldrb	r3, [r7, #11]
 8006490:	2b06      	cmp	r3, #6
 8006492:	d825      	bhi.n	80064e0 <LSM6DSL_GYRO_GetSensitivity+0x7c>
 8006494:	a201      	add	r2, pc, #4	; (adr r2, 800649c <LSM6DSL_GYRO_GetSensitivity+0x38>)
 8006496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800649a:	bf00      	nop
 800649c:	080064c1 	.word	0x080064c1
 80064a0:	080064b9 	.word	0x080064b9
 80064a4:	080064c9 	.word	0x080064c9
 80064a8:	080064e1 	.word	0x080064e1
 80064ac:	080064d1 	.word	0x080064d1
 80064b0:	080064e1 	.word	0x080064e1
 80064b4:	080064d9 	.word	0x080064d9
  {
    case LSM6DSL_125dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_125DPS;
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	4a0e      	ldr	r2, [pc, #56]	; (80064f4 <LSM6DSL_GYRO_GetSensitivity+0x90>)
 80064bc:	601a      	str	r2, [r3, #0]
      break;
 80064be:	e013      	b.n	80064e8 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_250dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_250DPS;
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	4a0d      	ldr	r2, [pc, #52]	; (80064f8 <LSM6DSL_GYRO_GetSensitivity+0x94>)
 80064c4:	601a      	str	r2, [r3, #0]
      break;
 80064c6:	e00f      	b.n	80064e8 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_500dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_500DPS;
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	4a0c      	ldr	r2, [pc, #48]	; (80064fc <LSM6DSL_GYRO_GetSensitivity+0x98>)
 80064cc:	601a      	str	r2, [r3, #0]
      break;
 80064ce:	e00b      	b.n	80064e8 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_1000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_1000DPS;
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	4a0b      	ldr	r2, [pc, #44]	; (8006500 <LSM6DSL_GYRO_GetSensitivity+0x9c>)
 80064d4:	601a      	str	r2, [r3, #0]
      break;
 80064d6:	e007      	b.n	80064e8 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_2000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_2000DPS;
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	4a0a      	ldr	r2, [pc, #40]	; (8006504 <LSM6DSL_GYRO_GetSensitivity+0xa0>)
 80064dc:	601a      	str	r2, [r3, #0]
      break;
 80064de:	e003      	b.n	80064e8 <LSM6DSL_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSL_ERROR;
 80064e0:	f04f 33ff 	mov.w	r3, #4294967295
 80064e4:	60fb      	str	r3, [r7, #12]
      break;
 80064e6:	bf00      	nop
  }

  return ret;
 80064e8:	68fb      	ldr	r3, [r7, #12]
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3710      	adds	r7, #16
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}
 80064f2:	bf00      	nop
 80064f4:	408c0000 	.word	0x408c0000
 80064f8:	410c0000 	.word	0x410c0000
 80064fc:	418c0000 	.word	0x418c0000
 8006500:	420c0000 	.word	0x420c0000
 8006504:	428c0000 	.word	0x428c0000

08006508 <LSM6DSL_GYRO_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b084      	sub	sp, #16
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8006512:	2300      	movs	r3, #0
 8006514:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	331c      	adds	r3, #28
 800651a:	f107 020b 	add.w	r2, r7, #11
 800651e:	4611      	mov	r1, r2
 8006520:	4618      	mov	r0, r3
 8006522:	f000 fd8b 	bl	800703c <lsm6dsl_gy_data_rate_get>
 8006526:	4603      	mov	r3, r0
 8006528:	2b00      	cmp	r3, #0
 800652a:	d002      	beq.n	8006532 <LSM6DSL_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 800652c:	f04f 33ff 	mov.w	r3, #4294967295
 8006530:	e04e      	b.n	80065d0 <LSM6DSL_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8006532:	7afb      	ldrb	r3, [r7, #11]
 8006534:	2b0a      	cmp	r3, #10
 8006536:	d846      	bhi.n	80065c6 <LSM6DSL_GYRO_GetOutputDataRate+0xbe>
 8006538:	a201      	add	r2, pc, #4	; (adr r2, 8006540 <LSM6DSL_GYRO_GetOutputDataRate+0x38>)
 800653a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800653e:	bf00      	nop
 8006540:	0800656d 	.word	0x0800656d
 8006544:	08006577 	.word	0x08006577
 8006548:	0800657f 	.word	0x0800657f
 800654c:	08006587 	.word	0x08006587
 8006550:	0800658f 	.word	0x0800658f
 8006554:	08006597 	.word	0x08006597
 8006558:	0800659f 	.word	0x0800659f
 800655c:	080065a7 	.word	0x080065a7
 8006560:	080065af 	.word	0x080065af
 8006564:	080065b7 	.word	0x080065b7
 8006568:	080065bf 	.word	0x080065bf
  {
    case LSM6DSL_GY_ODR_OFF:
      *Odr = 0.0f;
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	f04f 0200 	mov.w	r2, #0
 8006572:	601a      	str	r2, [r3, #0]
      break;
 8006574:	e02b      	b.n	80065ce <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_12Hz5:
      *Odr = 12.5f;
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	4a17      	ldr	r2, [pc, #92]	; (80065d8 <LSM6DSL_GYRO_GetOutputDataRate+0xd0>)
 800657a:	601a      	str	r2, [r3, #0]
      break;
 800657c:	e027      	b.n	80065ce <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_26Hz:
      *Odr = 26.0f;
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	4a16      	ldr	r2, [pc, #88]	; (80065dc <LSM6DSL_GYRO_GetOutputDataRate+0xd4>)
 8006582:	601a      	str	r2, [r3, #0]
      break;
 8006584:	e023      	b.n	80065ce <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_52Hz:
      *Odr = 52.0f;
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	4a15      	ldr	r2, [pc, #84]	; (80065e0 <LSM6DSL_GYRO_GetOutputDataRate+0xd8>)
 800658a:	601a      	str	r2, [r3, #0]
      break;
 800658c:	e01f      	b.n	80065ce <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_104Hz:
      *Odr = 104.0f;
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	4a14      	ldr	r2, [pc, #80]	; (80065e4 <LSM6DSL_GYRO_GetOutputDataRate+0xdc>)
 8006592:	601a      	str	r2, [r3, #0]
      break;
 8006594:	e01b      	b.n	80065ce <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_208Hz:
      *Odr = 208.0f;
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	4a13      	ldr	r2, [pc, #76]	; (80065e8 <LSM6DSL_GYRO_GetOutputDataRate+0xe0>)
 800659a:	601a      	str	r2, [r3, #0]
      break;
 800659c:	e017      	b.n	80065ce <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_416Hz:
      *Odr = 416.0f;
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	4a12      	ldr	r2, [pc, #72]	; (80065ec <LSM6DSL_GYRO_GetOutputDataRate+0xe4>)
 80065a2:	601a      	str	r2, [r3, #0]
      break;
 80065a4:	e013      	b.n	80065ce <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_833Hz:
      *Odr = 833.0f;
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	4a11      	ldr	r2, [pc, #68]	; (80065f0 <LSM6DSL_GYRO_GetOutputDataRate+0xe8>)
 80065aa:	601a      	str	r2, [r3, #0]
      break;
 80065ac:	e00f      	b.n	80065ce <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_1k66Hz:
      *Odr =  1660.0f;
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	4a10      	ldr	r2, [pc, #64]	; (80065f4 <LSM6DSL_GYRO_GetOutputDataRate+0xec>)
 80065b2:	601a      	str	r2, [r3, #0]
      break;
 80065b4:	e00b      	b.n	80065ce <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_3k33Hz:
      *Odr =  3330.0f;
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	4a0f      	ldr	r2, [pc, #60]	; (80065f8 <LSM6DSL_GYRO_GetOutputDataRate+0xf0>)
 80065ba:	601a      	str	r2, [r3, #0]
      break;
 80065bc:	e007      	b.n	80065ce <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_6k66Hz:
      *Odr =  6660.0f;
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	4a0e      	ldr	r2, [pc, #56]	; (80065fc <LSM6DSL_GYRO_GetOutputDataRate+0xf4>)
 80065c2:	601a      	str	r2, [r3, #0]
      break;
 80065c4:	e003      	b.n	80065ce <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSL_ERROR;
 80065c6:	f04f 33ff 	mov.w	r3, #4294967295
 80065ca:	60fb      	str	r3, [r7, #12]
      break;
 80065cc:	bf00      	nop
  }

  return ret;
 80065ce:	68fb      	ldr	r3, [r7, #12]
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3710      	adds	r7, #16
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}
 80065d8:	41480000 	.word	0x41480000
 80065dc:	41d00000 	.word	0x41d00000
 80065e0:	42500000 	.word	0x42500000
 80065e4:	42d00000 	.word	0x42d00000
 80065e8:	43500000 	.word	0x43500000
 80065ec:	43d00000 	.word	0x43d00000
 80065f0:	44504000 	.word	0x44504000
 80065f4:	44cf8000 	.word	0x44cf8000
 80065f8:	45502000 	.word	0x45502000
 80065fc:	45d02000 	.word	0x45d02000

08006600 <LSM6DSL_GYRO_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b082      	sub	sp, #8
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	6039      	str	r1, [r7, #0]
  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8006610:	2b01      	cmp	r3, #1
 8006612:	d105      	bne.n	8006620 <LSM6DSL_GYRO_SetOutputDataRate+0x20>
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 8006614:	6839      	ldr	r1, [r7, #0]
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f000 fa24 	bl	8006a64 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>
 800661c:	4603      	mov	r3, r0
 800661e:	e004      	b.n	800662a <LSM6DSL_GYRO_SetOutputDataRate+0x2a>
  }
  else
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8006620:	6839      	ldr	r1, [r7, #0]
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f000 faa8 	bl	8006b78 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>
 8006628:	4603      	mov	r3, r0
  }
}
 800662a:	4618      	mov	r0, r3
 800662c:	3708      	adds	r7, #8
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}
	...

08006634 <LSM6DSL_GYRO_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetFullScale(LSM6DSL_Object_t *pObj, int32_t  *FullScale)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b084      	sub	sp, #16
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 800663e:	2300      	movs	r3, #0
 8006640:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	331c      	adds	r3, #28
 8006646:	f107 020b 	add.w	r2, r7, #11
 800664a:	4611      	mov	r1, r2
 800664c:	4618      	mov	r0, r3
 800664e:	f000 fc8d 	bl	8006f6c <lsm6dsl_gy_full_scale_get>
 8006652:	4603      	mov	r3, r0
 8006654:	2b00      	cmp	r3, #0
 8006656:	d002      	beq.n	800665e <LSM6DSL_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 8006658:	f04f 33ff 	mov.w	r3, #4294967295
 800665c:	e030      	b.n	80066c0 <LSM6DSL_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 800665e:	7afb      	ldrb	r3, [r7, #11]
 8006660:	2b06      	cmp	r3, #6
 8006662:	d828      	bhi.n	80066b6 <LSM6DSL_GYRO_GetFullScale+0x82>
 8006664:	a201      	add	r2, pc, #4	; (adr r2, 800666c <LSM6DSL_GYRO_GetFullScale+0x38>)
 8006666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800666a:	bf00      	nop
 800666c:	08006691 	.word	0x08006691
 8006670:	08006689 	.word	0x08006689
 8006674:	08006699 	.word	0x08006699
 8006678:	080066b7 	.word	0x080066b7
 800667c:	080066a3 	.word	0x080066a3
 8006680:	080066b7 	.word	0x080066b7
 8006684:	080066ad 	.word	0x080066ad
  {
    case LSM6DSL_125dps:
      *FullScale =  125;
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	227d      	movs	r2, #125	; 0x7d
 800668c:	601a      	str	r2, [r3, #0]
      break;
 800668e:	e016      	b.n	80066be <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_250dps:
      *FullScale =  250;
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	22fa      	movs	r2, #250	; 0xfa
 8006694:	601a      	str	r2, [r3, #0]
      break;
 8006696:	e012      	b.n	80066be <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_500dps:
      *FullScale =  500;
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800669e:	601a      	str	r2, [r3, #0]
      break;
 80066a0:	e00d      	b.n	80066be <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_1000dps:
      *FullScale = 1000;
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80066a8:	601a      	str	r2, [r3, #0]
      break;
 80066aa:	e008      	b.n	80066be <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_2000dps:
      *FullScale = 2000;
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80066b2:	601a      	str	r2, [r3, #0]
      break;
 80066b4:	e003      	b.n	80066be <LSM6DSL_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSL_ERROR;
 80066b6:	f04f 33ff 	mov.w	r3, #4294967295
 80066ba:	60fb      	str	r3, [r7, #12]
      break;
 80066bc:	bf00      	nop
  }

  return ret;
 80066be:	68fb      	ldr	r3, [r7, #12]
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3710      	adds	r7, #16
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}

080066c8 <LSM6DSL_GYRO_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b084      	sub	sp, #16
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
 80066d0:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
           : (FullScale <= 250)  ? LSM6DSL_250dps
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	2b7d      	cmp	r3, #125	; 0x7d
 80066d6:	dd12      	ble.n	80066fe <LSM6DSL_GYRO_SetFullScale+0x36>
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	2bfa      	cmp	r3, #250	; 0xfa
 80066dc:	dd0d      	ble.n	80066fa <LSM6DSL_GYRO_SetFullScale+0x32>
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80066e4:	dd07      	ble.n	80066f6 <LSM6DSL_GYRO_SetFullScale+0x2e>
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80066ec:	dc01      	bgt.n	80066f2 <LSM6DSL_GYRO_SetFullScale+0x2a>
 80066ee:	2304      	movs	r3, #4
 80066f0:	e006      	b.n	8006700 <LSM6DSL_GYRO_SetFullScale+0x38>
 80066f2:	2306      	movs	r3, #6
 80066f4:	e004      	b.n	8006700 <LSM6DSL_GYRO_SetFullScale+0x38>
 80066f6:	2302      	movs	r3, #2
 80066f8:	e002      	b.n	8006700 <LSM6DSL_GYRO_SetFullScale+0x38>
 80066fa:	2300      	movs	r3, #0
 80066fc:	e000      	b.n	8006700 <LSM6DSL_GYRO_SetFullScale+0x38>
 80066fe:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
 8006700:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSL_500dps
           : (FullScale <= 1000) ? LSM6DSL_1000dps
           :                       LSM6DSL_2000dps;

  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	331c      	adds	r3, #28
 8006706:	7bfa      	ldrb	r2, [r7, #15]
 8006708:	4611      	mov	r1, r2
 800670a:	4618      	mov	r0, r3
 800670c:	f000 fc08 	bl	8006f20 <lsm6dsl_gy_full_scale_set>
 8006710:	4603      	mov	r3, r0
 8006712:	2b00      	cmp	r3, #0
 8006714:	d002      	beq.n	800671c <LSM6DSL_GYRO_SetFullScale+0x54>
  {
    return LSM6DSL_ERROR;
 8006716:	f04f 33ff 	mov.w	r3, #4294967295
 800671a:	e000      	b.n	800671e <LSM6DSL_GYRO_SetFullScale+0x56>
  }

  return LSM6DSL_OK;
 800671c:	2300      	movs	r3, #0
}
 800671e:	4618      	mov	r0, r3
 8006720:	3710      	adds	r7, #16
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}

08006726 <LSM6DSL_GYRO_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 8006726:	b580      	push	{r7, lr}
 8006728:	b084      	sub	sp, #16
 800672a:	af00      	add	r7, sp, #0
 800672c:	6078      	str	r0, [r7, #4]
 800672e:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	331c      	adds	r3, #28
 8006734:	f107 0208 	add.w	r2, r7, #8
 8006738:	4611      	mov	r1, r2
 800673a:	4618      	mov	r0, r3
 800673c:	f000 fd06 	bl	800714c <lsm6dsl_angular_rate_raw_get>
 8006740:	4603      	mov	r3, r0
 8006742:	2b00      	cmp	r3, #0
 8006744:	d002      	beq.n	800674c <LSM6DSL_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 8006746:	f04f 33ff 	mov.w	r3, #4294967295
 800674a:	e00c      	b.n	8006766 <LSM6DSL_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 800674c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8006754:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 800675c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 8006764:	2300      	movs	r3, #0
}
 8006766:	4618      	mov	r0, r3
 8006768:	3710      	adds	r7, #16
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}

0800676e <LSM6DSL_GYRO_GetAxes>:
 * @param  pObj the device pObj
 * @param  AngularRate pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *AngularRate)
{
 800676e:	b580      	push	{r7, lr}
 8006770:	b086      	sub	sp, #24
 8006772:	af00      	add	r7, sp, #0
 8006774:	6078      	str	r0, [r7, #4]
 8006776:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	331c      	adds	r3, #28
 800677c:	f107 0210 	add.w	r2, r7, #16
 8006780:	4611      	mov	r1, r2
 8006782:	4618      	mov	r0, r3
 8006784:	f000 fce2 	bl	800714c <lsm6dsl_angular_rate_raw_get>
 8006788:	4603      	mov	r3, r0
 800678a:	2b00      	cmp	r3, #0
 800678c:	d002      	beq.n	8006794 <LSM6DSL_GYRO_GetAxes+0x26>
  {
    return LSM6DSL_ERROR;
 800678e:	f04f 33ff 	mov.w	r3, #4294967295
 8006792:	e03c      	b.n	800680e <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8006794:	f107 030c 	add.w	r3, r7, #12
 8006798:	4619      	mov	r1, r3
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f7ff fe62 	bl	8006464 <LSM6DSL_GYRO_GetSensitivity>
 80067a0:	4603      	mov	r3, r0
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d002      	beq.n	80067ac <LSM6DSL_GYRO_GetAxes+0x3e>
  {
    return LSM6DSL_ERROR;
 80067a6:	f04f 33ff 	mov.w	r3, #4294967295
 80067aa:	e030      	b.n	800680e <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80067ac:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80067b0:	ee07 3a90 	vmov	s15, r3
 80067b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80067b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80067bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80067c4:	ee17 2a90 	vmov	r2, s15
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80067cc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80067d0:	ee07 3a90 	vmov	s15, r3
 80067d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80067d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80067dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80067e4:	ee17 2a90 	vmov	r2, s15
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80067ec:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80067f0:	ee07 3a90 	vmov	s15, r3
 80067f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80067f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80067fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006800:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006804:	ee17 2a90 	vmov	r2, s15
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 800680c:	2300      	movs	r3, #0
}
 800680e:	4618      	mov	r0, r3
 8006810:	3718      	adds	r7, #24
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}

08006816 <LSM6DSL_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Write_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8006816:	b580      	push	{r7, lr}
 8006818:	b082      	sub	sp, #8
 800681a:	af00      	add	r7, sp, #0
 800681c:	6078      	str	r0, [r7, #4]
 800681e:	460b      	mov	r3, r1
 8006820:	70fb      	strb	r3, [r7, #3]
 8006822:	4613      	mov	r3, r2
 8006824:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f103 001c 	add.w	r0, r3, #28
 800682c:	1cba      	adds	r2, r7, #2
 800682e:	78f9      	ldrb	r1, [r7, #3]
 8006830:	2301      	movs	r3, #1
 8006832:	f000 fa71 	bl	8006d18 <lsm6dsl_write_reg>
 8006836:	4603      	mov	r3, r0
 8006838:	2b00      	cmp	r3, #0
 800683a:	d002      	beq.n	8006842 <LSM6DSL_Write_Reg+0x2c>
  {
    return LSM6DSL_ERROR;
 800683c:	f04f 33ff 	mov.w	r3, #4294967295
 8006840:	e000      	b.n	8006844 <LSM6DSL_Write_Reg+0x2e>
  }

  return LSM6DSL_OK;
 8006842:	2300      	movs	r3, #0
}
 8006844:	4618      	mov	r0, r3
 8006846:	3708      	adds	r7, #8
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}

0800684c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b084      	sub	sp, #16
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	6039      	str	r1, [r7, #0]
  lsm6dsl_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8006856:	edd7 7a00 	vldr	s15, [r7]
 800685a:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800685e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006866:	d801      	bhi.n	800686c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x20>
 8006868:	2301      	movs	r3, #1
 800686a:	e058      	b.n	800691e <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 800686c:	edd7 7a00 	vldr	s15, [r7]
 8006870:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8006874:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800687c:	d801      	bhi.n	8006882 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x36>
 800687e:	2302      	movs	r3, #2
 8006880:	e04d      	b.n	800691e <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8006882:	edd7 7a00 	vldr	s15, [r7]
 8006886:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8006944 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf8>
 800688a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800688e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006892:	d801      	bhi.n	8006898 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x4c>
 8006894:	2303      	movs	r3, #3
 8006896:	e042      	b.n	800691e <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8006898:	edd7 7a00 	vldr	s15, [r7]
 800689c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8006948 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xfc>
 80068a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80068a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068a8:	d801      	bhi.n	80068ae <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x62>
 80068aa:	2304      	movs	r3, #4
 80068ac:	e037      	b.n	800691e <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 80068ae:	edd7 7a00 	vldr	s15, [r7]
 80068b2:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800694c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x100>
 80068b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80068ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068be:	d801      	bhi.n	80068c4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x78>
 80068c0:	2305      	movs	r3, #5
 80068c2:	e02c      	b.n	800691e <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 80068c4:	edd7 7a00 	vldr	s15, [r7]
 80068c8:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8006950 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x104>
 80068cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80068d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068d4:	d801      	bhi.n	80068da <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x8e>
 80068d6:	2306      	movs	r3, #6
 80068d8:	e021      	b.n	800691e <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 80068da:	edd7 7a00 	vldr	s15, [r7]
 80068de:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8006954 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x108>
 80068e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80068e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068ea:	d801      	bhi.n	80068f0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xa4>
 80068ec:	2307      	movs	r3, #7
 80068ee:	e016      	b.n	800691e <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 80068f0:	edd7 7a00 	vldr	s15, [r7]
 80068f4:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8006958 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x10c>
 80068f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80068fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006900:	d801      	bhi.n	8006906 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xba>
 8006902:	2308      	movs	r3, #8
 8006904:	e00b      	b.n	800691e <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8006906:	edd7 7a00 	vldr	s15, [r7]
 800690a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800695c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x110>
 800690e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006916:	d801      	bhi.n	800691c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd0>
 8006918:	2309      	movs	r3, #9
 800691a:	e000      	b.n	800691e <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 800691c:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 800691e:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
          :                    LSM6DSL_XL_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	331c      	adds	r3, #28
 8006924:	7bfa      	ldrb	r2, [r7, #15]
 8006926:	4611      	mov	r1, r2
 8006928:	4618      	mov	r0, r3
 800692a:	f000 fa6b 	bl	8006e04 <lsm6dsl_xl_data_rate_set>
 800692e:	4603      	mov	r3, r0
 8006930:	2b00      	cmp	r3, #0
 8006932:	d002      	beq.n	800693a <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xee>
  {
    return LSM6DSL_ERROR;
 8006934:	f04f 33ff 	mov.w	r3, #4294967295
 8006938:	e000      	b.n	800693c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf0>
  }

  return LSM6DSL_OK;
 800693a:	2300      	movs	r3, #0
}
 800693c:	4618      	mov	r0, r3
 800693e:	3710      	adds	r7, #16
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}
 8006944:	42500000 	.word	0x42500000
 8006948:	42d00000 	.word	0x42d00000
 800694c:	43500000 	.word	0x43500000
 8006950:	43d00000 	.word	0x43d00000
 8006954:	44504000 	.word	0x44504000
 8006958:	44cf8000 	.word	0x44cf8000
 800695c:	45502000 	.word	0x45502000

08006960 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8006960:	b480      	push	{r7}
 8006962:	b083      	sub	sp, #12
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	6039      	str	r1, [r7, #0]
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
                : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 800696a:	edd7 7a00 	vldr	s15, [r7]
 800696e:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8006972:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800697a:	d801      	bhi.n	8006980 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x20>
 800697c:	2301      	movs	r3, #1
 800697e:	e058      	b.n	8006a32 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8006980:	edd7 7a00 	vldr	s15, [r7]
 8006984:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8006988:	eef4 7ac7 	vcmpe.f32	s15, s14
 800698c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006990:	d801      	bhi.n	8006996 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x36>
 8006992:	2302      	movs	r3, #2
 8006994:	e04d      	b.n	8006a32 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8006996:	edd7 7a00 	vldr	s15, [r7]
 800699a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8006a48 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xe8>
 800699e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80069a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069a6:	d801      	bhi.n	80069ac <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x4c>
 80069a8:	2303      	movs	r3, #3
 80069aa:	e042      	b.n	8006a32 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 80069ac:	edd7 7a00 	vldr	s15, [r7]
 80069b0:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8006a4c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xec>
 80069b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80069b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069bc:	d801      	bhi.n	80069c2 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x62>
 80069be:	2304      	movs	r3, #4
 80069c0:	e037      	b.n	8006a32 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 80069c2:	edd7 7a00 	vldr	s15, [r7]
 80069c6:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8006a50 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf0>
 80069ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80069ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069d2:	d801      	bhi.n	80069d8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x78>
 80069d4:	2305      	movs	r3, #5
 80069d6:	e02c      	b.n	8006a32 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 80069d8:	edd7 7a00 	vldr	s15, [r7]
 80069dc:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8006a54 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf4>
 80069e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80069e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069e8:	d801      	bhi.n	80069ee <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x8e>
 80069ea:	2306      	movs	r3, #6
 80069ec:	e021      	b.n	8006a32 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 80069ee:	edd7 7a00 	vldr	s15, [r7]
 80069f2:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8006a58 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf8>
 80069f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80069fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069fe:	d801      	bhi.n	8006a04 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xa4>
 8006a00:	2307      	movs	r3, #7
 8006a02:	e016      	b.n	8006a32 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8006a04:	edd7 7a00 	vldr	s15, [r7]
 8006a08:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8006a5c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xfc>
 8006a0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a14:	d801      	bhi.n	8006a1a <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xba>
 8006a16:	2308      	movs	r3, #8
 8006a18:	e00b      	b.n	8006a32 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8006a1a:	edd7 7a00 	vldr	s15, [r7]
 8006a1e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8006a60 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x100>
 8006a22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a2a:	d801      	bhi.n	8006a30 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd0>
 8006a2c:	2309      	movs	r3, #9
 8006a2e:	e000      	b.n	8006a32 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8006a30:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8006a32:	687a      	ldr	r2, [r7, #4]
 8006a34:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                : (Odr <=  833.0f) ? LSM6DSL_XL_ODR_833Hz
                : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
                : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
                :                    LSM6DSL_XL_ODR_6k66Hz;

  return LSM6DSL_OK;
 8006a38:	2300      	movs	r3, #0
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	370c      	adds	r7, #12
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr
 8006a46:	bf00      	nop
 8006a48:	42500000 	.word	0x42500000
 8006a4c:	42d00000 	.word	0x42d00000
 8006a50:	43500000 	.word	0x43500000
 8006a54:	43d00000 	.word	0x43d00000
 8006a58:	44504000 	.word	0x44504000
 8006a5c:	44cf8000 	.word	0x44cf8000
 8006a60:	45502000 	.word	0x45502000

08006a64 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b084      	sub	sp, #16
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	6039      	str	r1, [r7, #0]
  lsm6dsl_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 8006a6e:	edd7 7a00 	vldr	s15, [r7]
 8006a72:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8006a76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a7e:	d801      	bhi.n	8006a84 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x20>
 8006a80:	2301      	movs	r3, #1
 8006a82:	e058      	b.n	8006b36 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 8006a84:	edd7 7a00 	vldr	s15, [r7]
 8006a88:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8006a8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a94:	d801      	bhi.n	8006a9a <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x36>
 8006a96:	2302      	movs	r3, #2
 8006a98:	e04d      	b.n	8006b36 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 8006a9a:	edd7 7a00 	vldr	s15, [r7]
 8006a9e:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8006b5c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf8>
 8006aa2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006aaa:	d801      	bhi.n	8006ab0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x4c>
 8006aac:	2303      	movs	r3, #3
 8006aae:	e042      	b.n	8006b36 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 8006ab0:	edd7 7a00 	vldr	s15, [r7]
 8006ab4:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8006b60 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8006ab8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ac0:	d801      	bhi.n	8006ac6 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x62>
 8006ac2:	2304      	movs	r3, #4
 8006ac4:	e037      	b.n	8006b36 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 8006ac6:	edd7 7a00 	vldr	s15, [r7]
 8006aca:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8006b64 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x100>
 8006ace:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ad6:	d801      	bhi.n	8006adc <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x78>
 8006ad8:	2305      	movs	r3, #5
 8006ada:	e02c      	b.n	8006b36 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 8006adc:	edd7 7a00 	vldr	s15, [r7]
 8006ae0:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8006b68 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8006ae4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006aec:	d801      	bhi.n	8006af2 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x8e>
 8006aee:	2306      	movs	r3, #6
 8006af0:	e021      	b.n	8006b36 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 8006af2:	edd7 7a00 	vldr	s15, [r7]
 8006af6:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8006b6c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x108>
 8006afa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b02:	d801      	bhi.n	8006b08 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xa4>
 8006b04:	2307      	movs	r3, #7
 8006b06:	e016      	b.n	8006b36 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 8006b08:	edd7 7a00 	vldr	s15, [r7]
 8006b0c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8006b70 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8006b10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b18:	d801      	bhi.n	8006b1e <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xba>
 8006b1a:	2308      	movs	r3, #8
 8006b1c:	e00b      	b.n	8006b36 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 8006b1e:	edd7 7a00 	vldr	s15, [r7]
 8006b22:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8006b74 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x110>
 8006b26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006b2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b2e:	d801      	bhi.n	8006b34 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd0>
 8006b30:	2309      	movs	r3, #9
 8006b32:	e000      	b.n	8006b36 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 8006b34:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 8006b36:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
          :                    LSM6DSL_GY_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	331c      	adds	r3, #28
 8006b3c:	7bfa      	ldrb	r2, [r7, #15]
 8006b3e:	4611      	mov	r1, r2
 8006b40:	4618      	mov	r0, r3
 8006b42:	f000 fa55 	bl	8006ff0 <lsm6dsl_gy_data_rate_set>
 8006b46:	4603      	mov	r3, r0
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d002      	beq.n	8006b52 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xee>
  {
    return LSM6DSL_ERROR;
 8006b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8006b50:	e000      	b.n	8006b54 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  }

  return LSM6DSL_OK;
 8006b52:	2300      	movs	r3, #0
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	3710      	adds	r7, #16
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}
 8006b5c:	42500000 	.word	0x42500000
 8006b60:	42d00000 	.word	0x42d00000
 8006b64:	43500000 	.word	0x43500000
 8006b68:	43d00000 	.word	0x43d00000
 8006b6c:	44504000 	.word	0x44504000
 8006b70:	44cf8000 	.word	0x44cf8000
 8006b74:	45502000 	.word	0x45502000

08006b78 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b083      	sub	sp, #12
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
 8006b80:	6039      	str	r1, [r7, #0]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
                 : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 8006b82:	edd7 7a00 	vldr	s15, [r7]
 8006b86:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8006b8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b92:	d801      	bhi.n	8006b98 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x20>
 8006b94:	2301      	movs	r3, #1
 8006b96:	e058      	b.n	8006c4a <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8006b98:	edd7 7a00 	vldr	s15, [r7]
 8006b9c:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8006ba0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ba8:	d801      	bhi.n	8006bae <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x36>
 8006baa:	2302      	movs	r3, #2
 8006bac:	e04d      	b.n	8006c4a <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8006bae:	edd7 7a00 	vldr	s15, [r7]
 8006bb2:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8006c60 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8006bb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bbe:	d801      	bhi.n	8006bc4 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x4c>
 8006bc0:	2303      	movs	r3, #3
 8006bc2:	e042      	b.n	8006c4a <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8006bc4:	edd7 7a00 	vldr	s15, [r7]
 8006bc8:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8006c64 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xec>
 8006bcc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bd4:	d801      	bhi.n	8006bda <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x62>
 8006bd6:	2304      	movs	r3, #4
 8006bd8:	e037      	b.n	8006c4a <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8006bda:	edd7 7a00 	vldr	s15, [r7]
 8006bde:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8006c68 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8006be2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bea:	d801      	bhi.n	8006bf0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x78>
 8006bec:	2305      	movs	r3, #5
 8006bee:	e02c      	b.n	8006c4a <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8006bf0:	edd7 7a00 	vldr	s15, [r7]
 8006bf4:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8006c6c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 8006bf8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c00:	d801      	bhi.n	8006c06 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x8e>
 8006c02:	2306      	movs	r3, #6
 8006c04:	e021      	b.n	8006c4a <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8006c06:	edd7 7a00 	vldr	s15, [r7]
 8006c0a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8006c70 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8006c0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c16:	d801      	bhi.n	8006c1c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xa4>
 8006c18:	2307      	movs	r3, #7
 8006c1a:	e016      	b.n	8006c4a <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8006c1c:	edd7 7a00 	vldr	s15, [r7]
 8006c20:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8006c74 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 8006c24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c2c:	d801      	bhi.n	8006c32 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xba>
 8006c2e:	2308      	movs	r3, #8
 8006c30:	e00b      	b.n	8006c4a <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8006c32:	edd7 7a00 	vldr	s15, [r7]
 8006c36:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8006c78 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8006c3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c42:	d801      	bhi.n	8006c48 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd0>
 8006c44:	2309      	movs	r3, #9
 8006c46:	e000      	b.n	8006c4a <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8006c48:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 8006c4a:	687a      	ldr	r2, [r7, #4]
 8006c4c:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
                 : (Odr <=  833.0f) ? LSM6DSL_GY_ODR_833Hz
                 : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
                 : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
                 :                    LSM6DSL_GY_ODR_6k66Hz;

  return LSM6DSL_OK;
 8006c50:	2300      	movs	r3, #0
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	370c      	adds	r7, #12
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr
 8006c5e:	bf00      	nop
 8006c60:	42500000 	.word	0x42500000
 8006c64:	42d00000 	.word	0x42d00000
 8006c68:	43500000 	.word	0x43500000
 8006c6c:	43d00000 	.word	0x43d00000
 8006c70:	44504000 	.word	0x44504000
 8006c74:	44cf8000 	.word	0x44cf8000
 8006c78:	45502000 	.word	0x45502000

08006c7c <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8006c7c:	b590      	push	{r4, r7, lr}
 8006c7e:	b087      	sub	sp, #28
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	60f8      	str	r0, [r7, #12]
 8006c84:	607a      	str	r2, [r7, #4]
 8006c86:	461a      	mov	r2, r3
 8006c88:	460b      	mov	r3, r1
 8006c8a:	72fb      	strb	r3, [r7, #11]
 8006c8c:	4613      	mov	r3, r2
 8006c8e:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	695c      	ldr	r4, [r3, #20]
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	7b1b      	ldrb	r3, [r3, #12]
 8006c9c:	b298      	uxth	r0, r3
 8006c9e:	7afb      	ldrb	r3, [r7, #11]
 8006ca0:	b299      	uxth	r1, r3
 8006ca2:	893b      	ldrh	r3, [r7, #8]
 8006ca4:	687a      	ldr	r2, [r7, #4]
 8006ca6:	47a0      	blx	r4
 8006ca8:	4603      	mov	r3, r0
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	371c      	adds	r7, #28
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd90      	pop	{r4, r7, pc}

08006cb2 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8006cb2:	b590      	push	{r4, r7, lr}
 8006cb4:	b087      	sub	sp, #28
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	60f8      	str	r0, [r7, #12]
 8006cba:	607a      	str	r2, [r7, #4]
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	460b      	mov	r3, r1
 8006cc0:	72fb      	strb	r3, [r7, #11]
 8006cc2:	4613      	mov	r3, r2
 8006cc4:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	691c      	ldr	r4, [r3, #16]
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	7b1b      	ldrb	r3, [r3, #12]
 8006cd2:	b298      	uxth	r0, r3
 8006cd4:	7afb      	ldrb	r3, [r7, #11]
 8006cd6:	b299      	uxth	r1, r3
 8006cd8:	893b      	ldrh	r3, [r7, #8]
 8006cda:	687a      	ldr	r2, [r7, #4]
 8006cdc:	47a0      	blx	r4
 8006cde:	4603      	mov	r3, r0
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	371c      	adds	r7, #28
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd90      	pop	{r4, r7, pc}

08006ce8 <lsm6dsl_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 8006ce8:	b590      	push	{r4, r7, lr}
 8006cea:	b087      	sub	sp, #28
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	60f8      	str	r0, [r7, #12]
 8006cf0:	607a      	str	r2, [r7, #4]
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	460b      	mov	r3, r1
 8006cf6:	72fb      	strb	r3, [r7, #11]
 8006cf8:	4613      	mov	r3, r2
 8006cfa:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	685c      	ldr	r4, [r3, #4]
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	6898      	ldr	r0, [r3, #8]
 8006d04:	893b      	ldrh	r3, [r7, #8]
 8006d06:	7af9      	ldrb	r1, [r7, #11]
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	47a0      	blx	r4
 8006d0c:	6178      	str	r0, [r7, #20]
  return ret;
 8006d0e:	697b      	ldr	r3, [r7, #20]
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	371c      	adds	r7, #28
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd90      	pop	{r4, r7, pc}

08006d18 <lsm6dsl_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 8006d18:	b590      	push	{r4, r7, lr}
 8006d1a:	b087      	sub	sp, #28
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	60f8      	str	r0, [r7, #12]
 8006d20:	607a      	str	r2, [r7, #4]
 8006d22:	461a      	mov	r2, r3
 8006d24:	460b      	mov	r3, r1
 8006d26:	72fb      	strb	r3, [r7, #11]
 8006d28:	4613      	mov	r3, r2
 8006d2a:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681c      	ldr	r4, [r3, #0]
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	6898      	ldr	r0, [r3, #8]
 8006d34:	893b      	ldrh	r3, [r7, #8]
 8006d36:	7af9      	ldrb	r1, [r7, #11]
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	47a0      	blx	r4
 8006d3c:	6178      	str	r0, [r7, #20]
  return ret;
 8006d3e:	697b      	ldr	r3, [r7, #20]
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	371c      	adds	r7, #28
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd90      	pop	{r4, r7, pc}

08006d48 <lsm6dsl_xl_full_scale_set>:
  * @param  val    Change the values of fs_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx, lsm6dsl_fs_xl_t val)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b084      	sub	sp, #16
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	460b      	mov	r3, r1
 8006d52:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8006d54:	f107 0208 	add.w	r2, r7, #8
 8006d58:	2301      	movs	r3, #1
 8006d5a:	2110      	movs	r1, #16
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f7ff ffc3 	bl	8006ce8 <lsm6dsl_read_reg>
 8006d62:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d10f      	bne.n	8006d8a <lsm6dsl_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t) val;
 8006d6a:	78fb      	ldrb	r3, [r7, #3]
 8006d6c:	f003 0303 	and.w	r3, r3, #3
 8006d70:	b2da      	uxtb	r2, r3
 8006d72:	7a3b      	ldrb	r3, [r7, #8]
 8006d74:	f362 0383 	bfi	r3, r2, #2, #2
 8006d78:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8006d7a:	f107 0208 	add.w	r2, r7, #8
 8006d7e:	2301      	movs	r3, #1
 8006d80:	2110      	movs	r1, #16
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f7ff ffc8 	bl	8006d18 <lsm6dsl_write_reg>
 8006d88:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3710      	adds	r7, #16
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}

08006d94 <lsm6dsl_xl_full_scale_get>:
  * @param  val    Get the values of fs_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_get(stmdev_ctx_t *ctx, lsm6dsl_fs_xl_t *val)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b084      	sub	sp, #16
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
 8006d9c:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8006d9e:	f107 0208 	add.w	r2, r7, #8
 8006da2:	2301      	movs	r3, #1
 8006da4:	2110      	movs	r1, #16
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f7ff ff9e 	bl	8006ce8 <lsm6dsl_read_reg>
 8006dac:	60f8      	str	r0, [r7, #12]
  switch (ctrl1_xl.fs_xl) {
 8006dae:	7a3b      	ldrb	r3, [r7, #8]
 8006db0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	2b03      	cmp	r3, #3
 8006db8:	d81a      	bhi.n	8006df0 <lsm6dsl_xl_full_scale_get+0x5c>
 8006dba:	a201      	add	r2, pc, #4	; (adr r2, 8006dc0 <lsm6dsl_xl_full_scale_get+0x2c>)
 8006dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dc0:	08006dd1 	.word	0x08006dd1
 8006dc4:	08006dd9 	.word	0x08006dd9
 8006dc8:	08006de1 	.word	0x08006de1
 8006dcc:	08006de9 	.word	0x08006de9
    case LSM6DSL_2g:
      *val = LSM6DSL_2g;
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	701a      	strb	r2, [r3, #0]
      break;
 8006dd6:	e00f      	b.n	8006df8 <lsm6dsl_xl_full_scale_get+0x64>
    case LSM6DSL_16g:
      *val = LSM6DSL_16g;
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	2201      	movs	r2, #1
 8006ddc:	701a      	strb	r2, [r3, #0]
      break;
 8006dde:	e00b      	b.n	8006df8 <lsm6dsl_xl_full_scale_get+0x64>
    case LSM6DSL_4g:
      *val = LSM6DSL_4g;
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	2202      	movs	r2, #2
 8006de4:	701a      	strb	r2, [r3, #0]
      break;
 8006de6:	e007      	b.n	8006df8 <lsm6dsl_xl_full_scale_get+0x64>
    case LSM6DSL_8g:
      *val = LSM6DSL_8g;
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	2203      	movs	r2, #3
 8006dec:	701a      	strb	r2, [r3, #0]
      break;
 8006dee:	e003      	b.n	8006df8 <lsm6dsl_xl_full_scale_get+0x64>
    default:
      *val = LSM6DSL_XL_FS_ND;
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	2204      	movs	r2, #4
 8006df4:	701a      	strb	r2, [r3, #0]
      break;
 8006df6:	bf00      	nop
  }

  return ret;
 8006df8:	68fb      	ldr	r3, [r7, #12]
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3710      	adds	r7, #16
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}
 8006e02:	bf00      	nop

08006e04 <lsm6dsl_xl_data_rate_set>:
  * @param  val    Change the values of odr_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx, lsm6dsl_odr_xl_t val)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b084      	sub	sp, #16
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	460b      	mov	r3, r1
 8006e0e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8006e10:	f107 0208 	add.w	r2, r7, #8
 8006e14:	2301      	movs	r3, #1
 8006e16:	2110      	movs	r1, #16
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f7ff ff65 	bl	8006ce8 <lsm6dsl_read_reg>
 8006e1e:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d10f      	bne.n	8006e46 <lsm6dsl_xl_data_rate_set+0x42>
    ctrl1_xl.odr_xl = (uint8_t) val;
 8006e26:	78fb      	ldrb	r3, [r7, #3]
 8006e28:	f003 030f 	and.w	r3, r3, #15
 8006e2c:	b2da      	uxtb	r2, r3
 8006e2e:	7a3b      	ldrb	r3, [r7, #8]
 8006e30:	f362 1307 	bfi	r3, r2, #4, #4
 8006e34:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8006e36:	f107 0208 	add.w	r2, r7, #8
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	2110      	movs	r1, #16
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f7ff ff6a 	bl	8006d18 <lsm6dsl_write_reg>
 8006e44:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8006e46:	68fb      	ldr	r3, [r7, #12]
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3710      	adds	r7, #16
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}

08006e50 <lsm6dsl_xl_data_rate_get>:
  * @param  val    Get the values of odr_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_get(stmdev_ctx_t *ctx, lsm6dsl_odr_xl_t *val)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b084      	sub	sp, #16
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8006e5a:	f107 0208 	add.w	r2, r7, #8
 8006e5e:	2301      	movs	r3, #1
 8006e60:	2110      	movs	r1, #16
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f7ff ff40 	bl	8006ce8 <lsm6dsl_read_reg>
 8006e68:	60f8      	str	r0, [r7, #12]
  switch (ctrl1_xl.odr_xl) {
 8006e6a:	7a3b      	ldrb	r3, [r7, #8]
 8006e6c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006e70:	b2db      	uxtb	r3, r3
 8006e72:	2b0b      	cmp	r3, #11
 8006e74:	d84a      	bhi.n	8006f0c <lsm6dsl_xl_data_rate_get+0xbc>
 8006e76:	a201      	add	r2, pc, #4	; (adr r2, 8006e7c <lsm6dsl_xl_data_rate_get+0x2c>)
 8006e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e7c:	08006ead 	.word	0x08006ead
 8006e80:	08006eb5 	.word	0x08006eb5
 8006e84:	08006ebd 	.word	0x08006ebd
 8006e88:	08006ec5 	.word	0x08006ec5
 8006e8c:	08006ecd 	.word	0x08006ecd
 8006e90:	08006ed5 	.word	0x08006ed5
 8006e94:	08006edd 	.word	0x08006edd
 8006e98:	08006ee5 	.word	0x08006ee5
 8006e9c:	08006eed 	.word	0x08006eed
 8006ea0:	08006ef5 	.word	0x08006ef5
 8006ea4:	08006efd 	.word	0x08006efd
 8006ea8:	08006f05 	.word	0x08006f05
    case LSM6DSL_XL_ODR_OFF:
      *val = LSM6DSL_XL_ODR_OFF;
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	701a      	strb	r2, [r3, #0]
      break;
 8006eb2:	e02f      	b.n	8006f14 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_12Hz5:
      *val = LSM6DSL_XL_ODR_12Hz5;
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	701a      	strb	r2, [r3, #0]
      break;
 8006eba:	e02b      	b.n	8006f14 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_26Hz:
      *val = LSM6DSL_XL_ODR_26Hz;
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	2202      	movs	r2, #2
 8006ec0:	701a      	strb	r2, [r3, #0]
      break;
 8006ec2:	e027      	b.n	8006f14 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_52Hz:
      *val = LSM6DSL_XL_ODR_52Hz;
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	2203      	movs	r2, #3
 8006ec8:	701a      	strb	r2, [r3, #0]
      break;
 8006eca:	e023      	b.n	8006f14 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_104Hz:
      *val = LSM6DSL_XL_ODR_104Hz;
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	2204      	movs	r2, #4
 8006ed0:	701a      	strb	r2, [r3, #0]
      break;
 8006ed2:	e01f      	b.n	8006f14 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_208Hz:
      *val = LSM6DSL_XL_ODR_208Hz;
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	2205      	movs	r2, #5
 8006ed8:	701a      	strb	r2, [r3, #0]
      break;
 8006eda:	e01b      	b.n	8006f14 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_416Hz:
      *val = LSM6DSL_XL_ODR_416Hz;
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	2206      	movs	r2, #6
 8006ee0:	701a      	strb	r2, [r3, #0]
      break;
 8006ee2:	e017      	b.n	8006f14 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_833Hz:
      *val = LSM6DSL_XL_ODR_833Hz;
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	2207      	movs	r2, #7
 8006ee8:	701a      	strb	r2, [r3, #0]
      break;
 8006eea:	e013      	b.n	8006f14 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_1k66Hz:
      *val = LSM6DSL_XL_ODR_1k66Hz;
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	2208      	movs	r2, #8
 8006ef0:	701a      	strb	r2, [r3, #0]
      break;
 8006ef2:	e00f      	b.n	8006f14 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_3k33Hz:
      *val = LSM6DSL_XL_ODR_3k33Hz;
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	2209      	movs	r2, #9
 8006ef8:	701a      	strb	r2, [r3, #0]
      break;
 8006efa:	e00b      	b.n	8006f14 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_6k66Hz:
      *val = LSM6DSL_XL_ODR_6k66Hz;
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	220a      	movs	r2, #10
 8006f00:	701a      	strb	r2, [r3, #0]
      break;
 8006f02:	e007      	b.n	8006f14 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_1Hz6:
      *val = LSM6DSL_XL_ODR_1Hz6;
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	220b      	movs	r2, #11
 8006f08:	701a      	strb	r2, [r3, #0]
      break;
 8006f0a:	e003      	b.n	8006f14 <lsm6dsl_xl_data_rate_get+0xc4>
    default:
      *val = LSM6DSL_XL_ODR_ND;
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	220c      	movs	r2, #12
 8006f10:	701a      	strb	r2, [r3, #0]
      break;
 8006f12:	bf00      	nop
  }

  return ret;
 8006f14:	68fb      	ldr	r3, [r7, #12]
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3710      	adds	r7, #16
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	bf00      	nop

08006f20 <lsm6dsl_gy_full_scale_set>:
  * @param  val    Change the values of fs_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx, lsm6dsl_fs_g_t val)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b084      	sub	sp, #16
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
 8006f28:	460b      	mov	r3, r1
 8006f2a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8006f2c:	f107 0208 	add.w	r2, r7, #8
 8006f30:	2301      	movs	r3, #1
 8006f32:	2111      	movs	r1, #17
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f7ff fed7 	bl	8006ce8 <lsm6dsl_read_reg>
 8006f3a:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d10f      	bne.n	8006f62 <lsm6dsl_gy_full_scale_set+0x42>
    ctrl2_g.fs_g = (uint8_t) val;
 8006f42:	78fb      	ldrb	r3, [r7, #3]
 8006f44:	f003 0307 	and.w	r3, r3, #7
 8006f48:	b2da      	uxtb	r2, r3
 8006f4a:	7a3b      	ldrb	r3, [r7, #8]
 8006f4c:	f362 0343 	bfi	r3, r2, #1, #3
 8006f50:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8006f52:	f107 0208 	add.w	r2, r7, #8
 8006f56:	2301      	movs	r3, #1
 8006f58:	2111      	movs	r1, #17
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f7ff fedc 	bl	8006d18 <lsm6dsl_write_reg>
 8006f60:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8006f62:	68fb      	ldr	r3, [r7, #12]
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	3710      	adds	r7, #16
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}

08006f6c <lsm6dsl_gy_full_scale_get>:
  * @param  val    Get the values of fs_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_get(stmdev_ctx_t *ctx, lsm6dsl_fs_g_t *val)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b084      	sub	sp, #16
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8006f76:	f107 0208 	add.w	r2, r7, #8
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	2111      	movs	r1, #17
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f7ff feb2 	bl	8006ce8 <lsm6dsl_read_reg>
 8006f84:	60f8      	str	r0, [r7, #12]
  switch (ctrl2_g.fs_g) {
 8006f86:	7a3b      	ldrb	r3, [r7, #8]
 8006f88:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	2b06      	cmp	r3, #6
 8006f90:	d824      	bhi.n	8006fdc <lsm6dsl_gy_full_scale_get+0x70>
 8006f92:	a201      	add	r2, pc, #4	; (adr r2, 8006f98 <lsm6dsl_gy_full_scale_get+0x2c>)
 8006f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f98:	08006fb5 	.word	0x08006fb5
 8006f9c:	08006fbd 	.word	0x08006fbd
 8006fa0:	08006fc5 	.word	0x08006fc5
 8006fa4:	08006fdd 	.word	0x08006fdd
 8006fa8:	08006fcd 	.word	0x08006fcd
 8006fac:	08006fdd 	.word	0x08006fdd
 8006fb0:	08006fd5 	.word	0x08006fd5
    case LSM6DSL_250dps:
      *val = LSM6DSL_250dps;
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	701a      	strb	r2, [r3, #0]
      break;
 8006fba:	e013      	b.n	8006fe4 <lsm6dsl_gy_full_scale_get+0x78>
    case LSM6DSL_125dps:
      *val = LSM6DSL_125dps;
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	701a      	strb	r2, [r3, #0]
      break;
 8006fc2:	e00f      	b.n	8006fe4 <lsm6dsl_gy_full_scale_get+0x78>
    case LSM6DSL_500dps:
      *val = LSM6DSL_500dps;
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	2202      	movs	r2, #2
 8006fc8:	701a      	strb	r2, [r3, #0]
      break;
 8006fca:	e00b      	b.n	8006fe4 <lsm6dsl_gy_full_scale_get+0x78>
    case LSM6DSL_1000dps:
      *val = LSM6DSL_1000dps;
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	2204      	movs	r2, #4
 8006fd0:	701a      	strb	r2, [r3, #0]
      break;
 8006fd2:	e007      	b.n	8006fe4 <lsm6dsl_gy_full_scale_get+0x78>
    case LSM6DSL_2000dps:
      *val = LSM6DSL_2000dps;
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	2206      	movs	r2, #6
 8006fd8:	701a      	strb	r2, [r3, #0]
      break;
 8006fda:	e003      	b.n	8006fe4 <lsm6dsl_gy_full_scale_get+0x78>
    default:
      *val = LSM6DSL_GY_FS_ND;
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	2207      	movs	r2, #7
 8006fe0:	701a      	strb	r2, [r3, #0]
      break;
 8006fe2:	bf00      	nop
  }

  return ret;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3710      	adds	r7, #16
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}
 8006fee:	bf00      	nop

08006ff0 <lsm6dsl_gy_data_rate_set>:
  * @param  val    Change the values of odr_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx, lsm6dsl_odr_g_t val)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b084      	sub	sp, #16
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
 8006ff8:	460b      	mov	r3, r1
 8006ffa:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8006ffc:	f107 0208 	add.w	r2, r7, #8
 8007000:	2301      	movs	r3, #1
 8007002:	2111      	movs	r1, #17
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f7ff fe6f 	bl	8006ce8 <lsm6dsl_read_reg>
 800700a:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d10f      	bne.n	8007032 <lsm6dsl_gy_data_rate_set+0x42>
    ctrl2_g.odr_g = (uint8_t) val;
 8007012:	78fb      	ldrb	r3, [r7, #3]
 8007014:	f003 030f 	and.w	r3, r3, #15
 8007018:	b2da      	uxtb	r2, r3
 800701a:	7a3b      	ldrb	r3, [r7, #8]
 800701c:	f362 1307 	bfi	r3, r2, #4, #4
 8007020:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8007022:	f107 0208 	add.w	r2, r7, #8
 8007026:	2301      	movs	r3, #1
 8007028:	2111      	movs	r1, #17
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f7ff fe74 	bl	8006d18 <lsm6dsl_write_reg>
 8007030:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8007032:	68fb      	ldr	r3, [r7, #12]
}
 8007034:	4618      	mov	r0, r3
 8007036:	3710      	adds	r7, #16
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}

0800703c <lsm6dsl_gy_data_rate_get>:
  * @param  val    Get the values of odr_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_get(stmdev_ctx_t *ctx, lsm6dsl_odr_g_t *val)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b084      	sub	sp, #16
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
 8007044:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8007046:	f107 0208 	add.w	r2, r7, #8
 800704a:	2301      	movs	r3, #1
 800704c:	2111      	movs	r1, #17
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f7ff fe4a 	bl	8006ce8 <lsm6dsl_read_reg>
 8007054:	60f8      	str	r0, [r7, #12]
  switch (ctrl2_g.odr_g) {
 8007056:	7a3b      	ldrb	r3, [r7, #8]
 8007058:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800705c:	b2db      	uxtb	r3, r3
 800705e:	2b0a      	cmp	r3, #10
 8007060:	d844      	bhi.n	80070ec <lsm6dsl_gy_data_rate_get+0xb0>
 8007062:	a201      	add	r2, pc, #4	; (adr r2, 8007068 <lsm6dsl_gy_data_rate_get+0x2c>)
 8007064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007068:	08007095 	.word	0x08007095
 800706c:	0800709d 	.word	0x0800709d
 8007070:	080070a5 	.word	0x080070a5
 8007074:	080070ad 	.word	0x080070ad
 8007078:	080070b5 	.word	0x080070b5
 800707c:	080070bd 	.word	0x080070bd
 8007080:	080070c5 	.word	0x080070c5
 8007084:	080070cd 	.word	0x080070cd
 8007088:	080070d5 	.word	0x080070d5
 800708c:	080070dd 	.word	0x080070dd
 8007090:	080070e5 	.word	0x080070e5
    case LSM6DSL_GY_ODR_OFF:
      *val = LSM6DSL_GY_ODR_OFF;
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	2200      	movs	r2, #0
 8007098:	701a      	strb	r2, [r3, #0]
      break;
 800709a:	e02b      	b.n	80070f4 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_12Hz5:
      *val = LSM6DSL_GY_ODR_12Hz5;
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	2201      	movs	r2, #1
 80070a0:	701a      	strb	r2, [r3, #0]
      break;
 80070a2:	e027      	b.n	80070f4 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_26Hz:
      *val = LSM6DSL_GY_ODR_26Hz;
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	2202      	movs	r2, #2
 80070a8:	701a      	strb	r2, [r3, #0]
      break;
 80070aa:	e023      	b.n	80070f4 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_52Hz:
      *val = LSM6DSL_GY_ODR_52Hz;
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	2203      	movs	r2, #3
 80070b0:	701a      	strb	r2, [r3, #0]
      break;
 80070b2:	e01f      	b.n	80070f4 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_104Hz:
      *val = LSM6DSL_GY_ODR_104Hz;
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	2204      	movs	r2, #4
 80070b8:	701a      	strb	r2, [r3, #0]
      break;
 80070ba:	e01b      	b.n	80070f4 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_208Hz:
      *val = LSM6DSL_GY_ODR_208Hz;
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	2205      	movs	r2, #5
 80070c0:	701a      	strb	r2, [r3, #0]
      break;
 80070c2:	e017      	b.n	80070f4 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_416Hz:
      *val = LSM6DSL_GY_ODR_416Hz;
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	2206      	movs	r2, #6
 80070c8:	701a      	strb	r2, [r3, #0]
      break;
 80070ca:	e013      	b.n	80070f4 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_833Hz:
      *val = LSM6DSL_GY_ODR_833Hz;
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	2207      	movs	r2, #7
 80070d0:	701a      	strb	r2, [r3, #0]
      break;
 80070d2:	e00f      	b.n	80070f4 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_1k66Hz:
      *val = LSM6DSL_GY_ODR_1k66Hz;
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	2208      	movs	r2, #8
 80070d8:	701a      	strb	r2, [r3, #0]
      break;
 80070da:	e00b      	b.n	80070f4 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_3k33Hz:
      *val = LSM6DSL_GY_ODR_3k33Hz;
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	2209      	movs	r2, #9
 80070e0:	701a      	strb	r2, [r3, #0]
      break;
 80070e2:	e007      	b.n	80070f4 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_6k66Hz:
      *val = LSM6DSL_GY_ODR_6k66Hz;
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	220a      	movs	r2, #10
 80070e8:	701a      	strb	r2, [r3, #0]
      break;
 80070ea:	e003      	b.n	80070f4 <lsm6dsl_gy_data_rate_get+0xb8>
    default:
      *val = LSM6DSL_GY_ODR_ND;
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	220b      	movs	r2, #11
 80070f0:	701a      	strb	r2, [r3, #0]
      break;
 80070f2:	bf00      	nop
  }

  return ret;
 80070f4:	68fb      	ldr	r3, [r7, #12]
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3710      	adds	r7, #16
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}
 80070fe:	bf00      	nop

08007100 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b084      	sub	sp, #16
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	460b      	mov	r3, r1
 800710a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 800710c:	f107 0208 	add.w	r2, r7, #8
 8007110:	2301      	movs	r3, #1
 8007112:	2112      	movs	r1, #18
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f7ff fde7 	bl	8006ce8 <lsm6dsl_read_reg>
 800711a:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d10f      	bne.n	8007142 <lsm6dsl_block_data_update_set+0x42>
    ctrl3_c.bdu = val;
 8007122:	78fb      	ldrb	r3, [r7, #3]
 8007124:	f003 0301 	and.w	r3, r3, #1
 8007128:	b2da      	uxtb	r2, r3
 800712a:	7a3b      	ldrb	r3, [r7, #8]
 800712c:	f362 1386 	bfi	r3, r2, #6, #1
 8007130:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8007132:	f107 0208 	add.w	r2, r7, #8
 8007136:	2301      	movs	r3, #1
 8007138:	2112      	movs	r1, #18
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f7ff fdec 	bl	8006d18 <lsm6dsl_write_reg>
 8007140:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8007142:	68fb      	ldr	r3, [r7, #12]
}
 8007144:	4618      	mov	r0, r3
 8007146:	3710      	adds	r7, #16
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b084      	sub	sp, #16
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 8007156:	2306      	movs	r3, #6
 8007158:	683a      	ldr	r2, [r7, #0]
 800715a:	2122      	movs	r1, #34	; 0x22
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f7ff fdc3 	bl	8006ce8 <lsm6dsl_read_reg>
 8007162:	60f8      	str	r0, [r7, #12]
  return ret;
 8007164:	68fb      	ldr	r3, [r7, #12]
}
 8007166:	4618      	mov	r0, r3
 8007168:	3710      	adds	r7, #16
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}

0800716e <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800716e:	b580      	push	{r7, lr}
 8007170:	b084      	sub	sp, #16
 8007172:	af00      	add	r7, sp, #0
 8007174:	6078      	str	r0, [r7, #4]
 8007176:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 8007178:	2306      	movs	r3, #6
 800717a:	683a      	ldr	r2, [r7, #0]
 800717c:	2128      	movs	r1, #40	; 0x28
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f7ff fdb2 	bl	8006ce8 <lsm6dsl_read_reg>
 8007184:	60f8      	str	r0, [r7, #12]
  return ret;
 8007186:	68fb      	ldr	r3, [r7, #12]
}
 8007188:	4618      	mov	r0, r3
 800718a:	3710      	adds	r7, #16
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}

08007190 <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b084      	sub	sp, #16
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 800719a:	2301      	movs	r3, #1
 800719c:	683a      	ldr	r2, [r7, #0]
 800719e:	210f      	movs	r1, #15
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f7ff fda1 	bl	8006ce8 <lsm6dsl_read_reg>
 80071a6:	60f8      	str	r0, [r7, #12]
  return ret;
 80071a8:	68fb      	ldr	r3, [r7, #12]
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	3710      	adds	r7, #16
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}

080071b2 <lsm6dsl_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80071b2:	b580      	push	{r7, lr}
 80071b4:	b084      	sub	sp, #16
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	6078      	str	r0, [r7, #4]
 80071ba:	460b      	mov	r3, r1
 80071bc:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 80071be:	f107 0208 	add.w	r2, r7, #8
 80071c2:	2301      	movs	r3, #1
 80071c4:	2112      	movs	r1, #18
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f7ff fd8e 	bl	8006ce8 <lsm6dsl_read_reg>
 80071cc:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d10f      	bne.n	80071f4 <lsm6dsl_auto_increment_set+0x42>
    ctrl3_c.if_inc = val;
 80071d4:	78fb      	ldrb	r3, [r7, #3]
 80071d6:	f003 0301 	and.w	r3, r3, #1
 80071da:	b2da      	uxtb	r2, r3
 80071dc:	7a3b      	ldrb	r3, [r7, #8]
 80071de:	f362 0382 	bfi	r3, r2, #2, #1
 80071e2:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 80071e4:	f107 0208 	add.w	r2, r7, #8
 80071e8:	2301      	movs	r3, #1
 80071ea:	2112      	movs	r1, #18
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f7ff fd93 	bl	8006d18 <lsm6dsl_write_reg>
 80071f2:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80071f4:	68fb      	ldr	r3, [r7, #12]
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3710      	adds	r7, #16
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}

080071fe <lsm6dsl_fifo_mode_set>:
  * @param  val    Change the values of fifo_mode in reg FIFO_CTRL5
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx, lsm6dsl_fifo_mode_t val)
{
 80071fe:	b580      	push	{r7, lr}
 8007200:	b084      	sub	sp, #16
 8007202:	af00      	add	r7, sp, #0
 8007204:	6078      	str	r0, [r7, #4]
 8007206:	460b      	mov	r3, r1
 8007208:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5, (uint8_t*)&fifo_ctrl5, 1);
 800720a:	f107 0208 	add.w	r2, r7, #8
 800720e:	2301      	movs	r3, #1
 8007210:	210a      	movs	r1, #10
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f7ff fd68 	bl	8006ce8 <lsm6dsl_read_reg>
 8007218:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d10f      	bne.n	8007240 <lsm6dsl_fifo_mode_set+0x42>
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 8007220:	78fb      	ldrb	r3, [r7, #3]
 8007222:	f003 0307 	and.w	r3, r3, #7
 8007226:	b2da      	uxtb	r2, r3
 8007228:	7a3b      	ldrb	r3, [r7, #8]
 800722a:	f362 0302 	bfi	r3, r2, #0, #3
 800722e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5, (uint8_t*)&fifo_ctrl5, 1);
 8007230:	f107 0208 	add.w	r2, r7, #8
 8007234:	2301      	movs	r3, #1
 8007236:	210a      	movs	r1, #10
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f7ff fd6d 	bl	8006d18 <lsm6dsl_write_reg>
 800723e:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8007240:	68fb      	ldr	r3, [r7, #12]
}
 8007242:	4618      	mov	r0, r3
 8007244:	3710      	adds	r7, #16
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}
	...

0800724c <IKS01A2_ENV_SENSOR_Init>:
 *         - ENV_TEMPERATURE and/or ENV_HUMIDITY for instance 0
 *         - ENV_TEMPERATURE and/or ENV_PRESSURE for instance 1
 * @retval BSP status
 */
int32_t IKS01A2_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b08a      	sub	sp, #40	; 0x28
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
 8007254:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8007256:	2300      	movs	r3, #0
 8007258:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t function = ENV_TEMPERATURE;
 800725a:	2301      	movs	r3, #1
 800725c:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t component_functions = 0;
 800725e:	2300      	movs	r3, #0
 8007260:	61bb      	str	r3, [r7, #24]
  IKS01A2_ENV_SENSOR_Capabilities_t cap;

  switch (Instance)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d002      	beq.n	800726e <IKS01A2_ENV_SENSOR_Init+0x22>
 8007268:	2b01      	cmp	r3, #1
 800726a:	d032      	beq.n	80072d2 <IKS01A2_ENV_SENSOR_Init+0x86>
 800726c:	e063      	b.n	8007336 <IKS01A2_ENV_SENSOR_Init+0xea>
  {
#if (USE_IKS01A2_ENV_SENSOR_HTS221_0 == 1)
    case IKS01A2_HTS221_0:
      if (HTS221_0_Probe(Functions) != BSP_ERROR_NONE)
 800726e:	6838      	ldr	r0, [r7, #0]
 8007270:	f000 f932 	bl	80074d8 <HTS221_0_Probe>
 8007274:	4603      	mov	r3, r0
 8007276:	2b00      	cmp	r3, #0
 8007278:	d002      	beq.n	8007280 <IKS01A2_ENV_SENSOR_Init+0x34>
      {
        return BSP_ERROR_NO_INIT;
 800727a:	f04f 33ff 	mov.w	r3, #4294967295
 800727e:	e098      	b.n	80073b2 <IKS01A2_ENV_SENSOR_Init+0x166>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8007280:	4a4e      	ldr	r2, [pc, #312]	; (80073bc <IKS01A2_ENV_SENSOR_Init+0x170>)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007288:	68db      	ldr	r3, [r3, #12]
 800728a:	494d      	ldr	r1, [pc, #308]	; (80073c0 <IKS01A2_ENV_SENSOR_Init+0x174>)
 800728c:	687a      	ldr	r2, [r7, #4]
 800728e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007292:	f107 0108 	add.w	r1, r7, #8
 8007296:	4610      	mov	r0, r2
 8007298:	4798      	blx	r3
 800729a:	4603      	mov	r3, r0
 800729c:	2b00      	cmp	r3, #0
 800729e:	d002      	beq.n	80072a6 <IKS01A2_ENV_SENSOR_Init+0x5a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80072a0:	f06f 0306 	mvn.w	r3, #6
 80072a4:	e085      	b.n	80073b2 <IKS01A2_ENV_SENSOR_Init+0x166>
      }
      if (cap.Temperature == 1U)
 80072a6:	7a3b      	ldrb	r3, [r7, #8]
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d103      	bne.n	80072b4 <IKS01A2_ENV_SENSOR_Init+0x68>
      {
        component_functions |= ENV_TEMPERATURE;
 80072ac:	69bb      	ldr	r3, [r7, #24]
 80072ae:	f043 0301 	orr.w	r3, r3, #1
 80072b2:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 80072b4:	7abb      	ldrb	r3, [r7, #10]
 80072b6:	2b01      	cmp	r3, #1
 80072b8:	d103      	bne.n	80072c2 <IKS01A2_ENV_SENSOR_Init+0x76>
      {
        component_functions |= ENV_HUMIDITY;
 80072ba:	69bb      	ldr	r3, [r7, #24]
 80072bc:	f043 0304 	orr.w	r3, r3, #4
 80072c0:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 80072c2:	7a7b      	ldrb	r3, [r7, #9]
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	d13a      	bne.n	800733e <IKS01A2_ENV_SENSOR_Init+0xf2>
      {
        component_functions |= ENV_PRESSURE;
 80072c8:	69bb      	ldr	r3, [r7, #24]
 80072ca:	f043 0302 	orr.w	r3, r3, #2
 80072ce:	61bb      	str	r3, [r7, #24]
      }
      break;
 80072d0:	e035      	b.n	800733e <IKS01A2_ENV_SENSOR_Init+0xf2>
#endif

#if (USE_IKS01A2_ENV_SENSOR_LPS22HB_0 == 1)
    case IKS01A2_LPS22HB_0:
      if (LPS22HB_0_Probe(Functions) != BSP_ERROR_NONE)
 80072d2:	6838      	ldr	r0, [r7, #0]
 80072d4:	f000 f9ba 	bl	800764c <LPS22HB_0_Probe>
 80072d8:	4603      	mov	r3, r0
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d002      	beq.n	80072e4 <IKS01A2_ENV_SENSOR_Init+0x98>
      {
        return BSP_ERROR_NO_INIT;
 80072de:	f04f 33ff 	mov.w	r3, #4294967295
 80072e2:	e066      	b.n	80073b2 <IKS01A2_ENV_SENSOR_Init+0x166>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80072e4:	4a35      	ldr	r2, [pc, #212]	; (80073bc <IKS01A2_ENV_SENSOR_Init+0x170>)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072ec:	68db      	ldr	r3, [r3, #12]
 80072ee:	4934      	ldr	r1, [pc, #208]	; (80073c0 <IKS01A2_ENV_SENSOR_Init+0x174>)
 80072f0:	687a      	ldr	r2, [r7, #4]
 80072f2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80072f6:	f107 0108 	add.w	r1, r7, #8
 80072fa:	4610      	mov	r0, r2
 80072fc:	4798      	blx	r3
 80072fe:	4603      	mov	r3, r0
 8007300:	2b00      	cmp	r3, #0
 8007302:	d002      	beq.n	800730a <IKS01A2_ENV_SENSOR_Init+0xbe>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8007304:	f06f 0306 	mvn.w	r3, #6
 8007308:	e053      	b.n	80073b2 <IKS01A2_ENV_SENSOR_Init+0x166>
      }
      if (cap.Temperature == 1U)
 800730a:	7a3b      	ldrb	r3, [r7, #8]
 800730c:	2b01      	cmp	r3, #1
 800730e:	d103      	bne.n	8007318 <IKS01A2_ENV_SENSOR_Init+0xcc>
      {
        component_functions |= ENV_TEMPERATURE;
 8007310:	69bb      	ldr	r3, [r7, #24]
 8007312:	f043 0301 	orr.w	r3, r3, #1
 8007316:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 8007318:	7abb      	ldrb	r3, [r7, #10]
 800731a:	2b01      	cmp	r3, #1
 800731c:	d103      	bne.n	8007326 <IKS01A2_ENV_SENSOR_Init+0xda>
      {
        component_functions |= ENV_HUMIDITY;
 800731e:	69bb      	ldr	r3, [r7, #24]
 8007320:	f043 0304 	orr.w	r3, r3, #4
 8007324:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 8007326:	7a7b      	ldrb	r3, [r7, #9]
 8007328:	2b01      	cmp	r3, #1
 800732a:	d10a      	bne.n	8007342 <IKS01A2_ENV_SENSOR_Init+0xf6>
      {
        component_functions |= ENV_PRESSURE;
 800732c:	69bb      	ldr	r3, [r7, #24]
 800732e:	f043 0302 	orr.w	r3, r3, #2
 8007332:	61bb      	str	r3, [r7, #24]
      }
      break;
 8007334:	e005      	b.n	8007342 <IKS01A2_ENV_SENSOR_Init+0xf6>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8007336:	f06f 0301 	mvn.w	r3, #1
 800733a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800733c:	e002      	b.n	8007344 <IKS01A2_ENV_SENSOR_Init+0xf8>
      break;
 800733e:	bf00      	nop
 8007340:	e000      	b.n	8007344 <IKS01A2_ENV_SENSOR_Init+0xf8>
      break;
 8007342:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8007344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007346:	2b00      	cmp	r3, #0
 8007348:	d001      	beq.n	800734e <IKS01A2_ENV_SENSOR_Init+0x102>
  {
    return ret;
 800734a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800734c:	e031      	b.n	80073b2 <IKS01A2_ENV_SENSOR_Init+0x166>
  }

  for (i = 0; i < IKS01A2_ENV_FUNCTIONS_NBR; i++)
 800734e:	2300      	movs	r3, #0
 8007350:	61fb      	str	r3, [r7, #28]
 8007352:	e02a      	b.n	80073aa <IKS01A2_ENV_SENSOR_Init+0x15e>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8007354:	683a      	ldr	r2, [r7, #0]
 8007356:	6a3b      	ldr	r3, [r7, #32]
 8007358:	4013      	ands	r3, r2
 800735a:	6a3a      	ldr	r2, [r7, #32]
 800735c:	429a      	cmp	r2, r3
 800735e:	d11e      	bne.n	800739e <IKS01A2_ENV_SENSOR_Init+0x152>
 8007360:	69ba      	ldr	r2, [r7, #24]
 8007362:	6a3b      	ldr	r3, [r7, #32]
 8007364:	4013      	ands	r3, r2
 8007366:	6a3a      	ldr	r2, [r7, #32]
 8007368:	429a      	cmp	r2, r3
 800736a:	d118      	bne.n	800739e <IKS01A2_ENV_SENSOR_Init+0x152>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 800736c:	4a15      	ldr	r2, [pc, #84]	; (80073c4 <IKS01A2_ENV_SENSOR_Init+0x178>)
 800736e:	6a3b      	ldr	r3, [r7, #32]
 8007370:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007374:	4814      	ldr	r0, [pc, #80]	; (80073c8 <IKS01A2_ENV_SENSOR_Init+0x17c>)
 8007376:	687a      	ldr	r2, [r7, #4]
 8007378:	4613      	mov	r3, r2
 800737a:	005b      	lsls	r3, r3, #1
 800737c:	4413      	add	r3, r2
 800737e:	440b      	add	r3, r1
 8007380:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	490e      	ldr	r1, [pc, #56]	; (80073c0 <IKS01A2_ENV_SENSOR_Init+0x174>)
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800738e:	4610      	mov	r0, r2
 8007390:	4798      	blx	r3
 8007392:	4603      	mov	r3, r0
 8007394:	2b00      	cmp	r3, #0
 8007396:	d002      	beq.n	800739e <IKS01A2_ENV_SENSOR_Init+0x152>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8007398:	f06f 0304 	mvn.w	r3, #4
 800739c:	e009      	b.n	80073b2 <IKS01A2_ENV_SENSOR_Init+0x166>
      }
    }
    function = function << 1;
 800739e:	6a3b      	ldr	r3, [r7, #32]
 80073a0:	005b      	lsls	r3, r3, #1
 80073a2:	623b      	str	r3, [r7, #32]
  for (i = 0; i < IKS01A2_ENV_FUNCTIONS_NBR; i++)
 80073a4:	69fb      	ldr	r3, [r7, #28]
 80073a6:	3301      	adds	r3, #1
 80073a8:	61fb      	str	r3, [r7, #28]
 80073aa:	69fb      	ldr	r3, [r7, #28]
 80073ac:	2b02      	cmp	r3, #2
 80073ae:	d9d1      	bls.n	8007354 <IKS01A2_ENV_SENSOR_Init+0x108>
  }

  return ret;
 80073b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3728      	adds	r7, #40	; 0x28
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}
 80073ba:	bf00      	nop
 80073bc:	20002320 	.word	0x20002320
 80073c0:	2000d5cc 	.word	0x2000d5cc
 80073c4:	20001300 	.word	0x20001300
 80073c8:	20002308 	.word	0x20002308

080073cc <IKS01A2_ENV_SENSOR_Enable>:
 *         - ENV_TEMPERATURE or ENV_HUMIDITY for instance 0
 *         - ENV_TEMPERATURE or ENV_PRESSURE for instance 1
 * @retval BSP status
 */
int32_t IKS01A2_ENV_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b084      	sub	sp, #16
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A2_ENV_INSTANCES_NBR)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d903      	bls.n	80073e4 <IKS01A2_ENV_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80073dc:	f06f 0301 	mvn.w	r3, #1
 80073e0:	60fb      	str	r3, [r7, #12]
 80073e2:	e028      	b.n	8007436 <IKS01A2_ENV_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 80073e4:	4a16      	ldr	r2, [pc, #88]	; (8007440 <IKS01A2_ENV_SENSOR_Enable+0x74>)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	4013      	ands	r3, r2
 80073f0:	683a      	ldr	r2, [r7, #0]
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d11c      	bne.n	8007430 <IKS01A2_ENV_SENSOR_Enable+0x64>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 80073f6:	4a13      	ldr	r2, [pc, #76]	; (8007444 <IKS01A2_ENV_SENSOR_Enable+0x78>)
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80073fe:	4812      	ldr	r0, [pc, #72]	; (8007448 <IKS01A2_ENV_SENSOR_Enable+0x7c>)
 8007400:	687a      	ldr	r2, [r7, #4]
 8007402:	4613      	mov	r3, r2
 8007404:	005b      	lsls	r3, r3, #1
 8007406:	4413      	add	r3, r2
 8007408:	440b      	add	r3, r1
 800740a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	490e      	ldr	r1, [pc, #56]	; (800744c <IKS01A2_ENV_SENSOR_Enable+0x80>)
 8007412:	687a      	ldr	r2, [r7, #4]
 8007414:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007418:	4610      	mov	r0, r2
 800741a:	4798      	blx	r3
 800741c:	4603      	mov	r3, r0
 800741e:	2b00      	cmp	r3, #0
 8007420:	d003      	beq.n	800742a <IKS01A2_ENV_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007422:	f06f 0304 	mvn.w	r3, #4
 8007426:	60fb      	str	r3, [r7, #12]
 8007428:	e005      	b.n	8007436 <IKS01A2_ENV_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800742a:	2300      	movs	r3, #0
 800742c:	60fb      	str	r3, [r7, #12]
 800742e:	e002      	b.n	8007436 <IKS01A2_ENV_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8007430:	f06f 0301 	mvn.w	r3, #1
 8007434:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8007436:	68fb      	ldr	r3, [r7, #12]
}
 8007438:	4618      	mov	r0, r3
 800743a:	3710      	adds	r7, #16
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}
 8007440:	20002328 	.word	0x20002328
 8007444:	20001300 	.word	0x20001300
 8007448:	20002308 	.word	0x20002308
 800744c:	2000d5cc 	.word	0x2000d5cc

08007450 <IKS01A2_ENV_SENSOR_GetValue>:
 *         - ENV_TEMPERATURE or ENV_PRESSURE for instance 1
 * @param  Value pointer to environmental sensor value
 * @retval BSP status
 */
int32_t IKS01A2_ENV_SENSOR_GetValue(uint32_t Instance, uint32_t Function, float *Value)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b086      	sub	sp, #24
 8007454:	af00      	add	r7, sp, #0
 8007456:	60f8      	str	r0, [r7, #12]
 8007458:	60b9      	str	r1, [r7, #8]
 800745a:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_ENV_INSTANCES_NBR)
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2b01      	cmp	r3, #1
 8007460:	d903      	bls.n	800746a <IKS01A2_ENV_SENSOR_GetValue+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8007462:	f06f 0301 	mvn.w	r3, #1
 8007466:	617b      	str	r3, [r7, #20]
 8007468:	e029      	b.n	80074be <IKS01A2_ENV_SENSOR_GetValue+0x6e>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 800746a:	4a17      	ldr	r2, [pc, #92]	; (80074c8 <IKS01A2_ENV_SENSOR_GetValue+0x78>)
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	4013      	ands	r3, r2
 8007476:	68ba      	ldr	r2, [r7, #8]
 8007478:	429a      	cmp	r2, r3
 800747a:	d11d      	bne.n	80074b8 <IKS01A2_ENV_SENSOR_GetValue+0x68>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetValue(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 800747c:	4a13      	ldr	r2, [pc, #76]	; (80074cc <IKS01A2_ENV_SENSOR_GetValue+0x7c>)
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007484:	4812      	ldr	r0, [pc, #72]	; (80074d0 <IKS01A2_ENV_SENSOR_GetValue+0x80>)
 8007486:	68fa      	ldr	r2, [r7, #12]
 8007488:	4613      	mov	r3, r2
 800748a:	005b      	lsls	r3, r3, #1
 800748c:	4413      	add	r3, r2
 800748e:	440b      	add	r3, r1
 8007490:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8007494:	691b      	ldr	r3, [r3, #16]
 8007496:	490f      	ldr	r1, [pc, #60]	; (80074d4 <IKS01A2_ENV_SENSOR_GetValue+0x84>)
 8007498:	68fa      	ldr	r2, [r7, #12]
 800749a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800749e:	6879      	ldr	r1, [r7, #4]
 80074a0:	4610      	mov	r0, r2
 80074a2:	4798      	blx	r3
 80074a4:	4603      	mov	r3, r0
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d003      	beq.n	80074b2 <IKS01A2_ENV_SENSOR_GetValue+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80074aa:	f06f 0304 	mvn.w	r3, #4
 80074ae:	617b      	str	r3, [r7, #20]
 80074b0:	e005      	b.n	80074be <IKS01A2_ENV_SENSOR_GetValue+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80074b2:	2300      	movs	r3, #0
 80074b4:	617b      	str	r3, [r7, #20]
 80074b6:	e002      	b.n	80074be <IKS01A2_ENV_SENSOR_GetValue+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80074b8:	f06f 0301 	mvn.w	r3, #1
 80074bc:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 80074be:	697b      	ldr	r3, [r7, #20]
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3718      	adds	r7, #24
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}
 80074c8:	20002328 	.word	0x20002328
 80074cc:	20001300 	.word	0x20001300
 80074d0:	20002308 	.word	0x20002308
 80074d4:	2000d5cc 	.word	0x2000d5cc

080074d8 <HTS221_0_Probe>:
 * @param  Functions Environmental sensor functions. Could be :
 *         - ENV_TEMPERATURE and/or ENV_HUMIDITY
 * @retval BSP status
 */
static int32_t HTS221_0_Probe(uint32_t Functions)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b090      	sub	sp, #64	; 0x40
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  HTS221_IO_t            io_ctx;
  uint8_t                id;
  int32_t                ret = BSP_ERROR_NONE;
 80074e0:	2300      	movs	r3, #0
 80074e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  static HTS221_Object_t hts221_obj_0;
  HTS221_Capabilities_t  cap;

  /* Configure the environmental sensor driver */
  io_ctx.BusType     = HTS221_I2C_BUS; /* I2C */
 80074e4:	2300      	movs	r3, #0
 80074e6:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.Address     = HTS221_I2C_ADDRESS;
 80074e8:	23bf      	movs	r3, #191	; 0xbf
 80074ea:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  io_ctx.Init        = IKS01A2_I2C_Init;
 80074ee:	4b49      	ldr	r3, [pc, #292]	; (8007614 <HTS221_0_Probe+0x13c>)
 80074f0:	623b      	str	r3, [r7, #32]
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 80074f2:	4b49      	ldr	r3, [pc, #292]	; (8007618 <HTS221_0_Probe+0x140>)
 80074f4:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 80074f6:	4b49      	ldr	r3, [pc, #292]	; (800761c <HTS221_0_Probe+0x144>)
 80074f8:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 80074fa:	4b49      	ldr	r3, [pc, #292]	; (8007620 <HTS221_0_Probe+0x148>)
 80074fc:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.GetTick     = IKS01A2_GetTick;
 80074fe:	4b49      	ldr	r3, [pc, #292]	; (8007624 <HTS221_0_Probe+0x14c>)
 8007500:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 8007502:	f107 0320 	add.w	r3, r7, #32
 8007506:	4619      	mov	r1, r3
 8007508:	4847      	ldr	r0, [pc, #284]	; (8007628 <HTS221_0_Probe+0x150>)
 800750a:	f7fb fd65 	bl	8002fd8 <HTS221_RegisterBusIO>
 800750e:	4603      	mov	r3, r0
 8007510:	2b00      	cmp	r3, #0
 8007512:	d003      	beq.n	800751c <HTS221_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007514:	f06f 0306 	mvn.w	r3, #6
 8007518:	63fb      	str	r3, [r7, #60]	; 0x3c
 800751a:	e076      	b.n	800760a <HTS221_0_Probe+0x132>
  }
  else if (HTS221_ReadID(&hts221_obj_0, &id) != HTS221_OK)
 800751c:	f107 031f 	add.w	r3, r7, #31
 8007520:	4619      	mov	r1, r3
 8007522:	4841      	ldr	r0, [pc, #260]	; (8007628 <HTS221_0_Probe+0x150>)
 8007524:	f7fb fddd 	bl	80030e2 <HTS221_ReadID>
 8007528:	4603      	mov	r3, r0
 800752a:	2b00      	cmp	r3, #0
 800752c:	d003      	beq.n	8007536 <HTS221_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800752e:	f06f 0306 	mvn.w	r3, #6
 8007532:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007534:	e069      	b.n	800760a <HTS221_0_Probe+0x132>
  }
  else if (id != HTS221_ID)
 8007536:	7ffb      	ldrb	r3, [r7, #31]
 8007538:	2bbc      	cmp	r3, #188	; 0xbc
 800753a:	d003      	beq.n	8007544 <HTS221_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800753c:	f06f 0306 	mvn.w	r3, #6
 8007540:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007542:	e062      	b.n	800760a <HTS221_0_Probe+0x132>
  }
  else
  {
    (void)HTS221_GetCapabilities(&hts221_obj_0, &cap);
 8007544:	f107 030c 	add.w	r3, r7, #12
 8007548:	4619      	mov	r1, r3
 800754a:	4837      	ldr	r0, [pc, #220]	; (8007628 <HTS221_0_Probe+0x150>)
 800754c:	f7fb fde0 	bl	8003110 <HTS221_GetCapabilities>
    EnvCtx[IKS01A2_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8007550:	7b3b      	ldrb	r3, [r7, #12]
 8007552:	461a      	mov	r2, r3
 8007554:	7b7b      	ldrb	r3, [r7, #13]
 8007556:	005b      	lsls	r3, r3, #1
 8007558:	431a      	orrs	r2, r3
                                           uint32_t)cap.Humidity << 2);
 800755a:	7bbb      	ldrb	r3, [r7, #14]
 800755c:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A2_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 800755e:	4313      	orrs	r3, r2
 8007560:	4a32      	ldr	r2, [pc, #200]	; (800762c <HTS221_0_Probe+0x154>)
 8007562:	6013      	str	r3, [r2, #0]

    EnvCompObj[IKS01A2_HTS221_0] = &hts221_obj_0;
 8007564:	4b32      	ldr	r3, [pc, #200]	; (8007630 <HTS221_0_Probe+0x158>)
 8007566:	4a30      	ldr	r2, [pc, #192]	; (8007628 <HTS221_0_Probe+0x150>)
 8007568:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A2_HTS221_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&HTS221_COMMON_Driver;
 800756a:	4b32      	ldr	r3, [pc, #200]	; (8007634 <HTS221_0_Probe+0x15c>)
 800756c:	4a32      	ldr	r2, [pc, #200]	; (8007638 <HTS221_0_Probe+0x160>)
 800756e:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8007570:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007572:	2b00      	cmp	r3, #0
 8007574:	d11d      	bne.n	80075b2 <HTS221_0_Probe+0xda>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f003 0301 	and.w	r3, r3, #1
 800757c:	2b00      	cmp	r3, #0
 800757e:	d018      	beq.n	80075b2 <HTS221_0_Probe+0xda>
 8007580:	7b3b      	ldrb	r3, [r7, #12]
 8007582:	2b01      	cmp	r3, #1
 8007584:	d115      	bne.n	80075b2 <HTS221_0_Probe+0xda>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_HTS221_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_TEMP_Driver;
 8007586:	4b2d      	ldr	r3, [pc, #180]	; (800763c <HTS221_0_Probe+0x164>)
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	4a2d      	ldr	r2, [pc, #180]	; (8007640 <HTS221_0_Probe+0x168>)
 800758c:	492d      	ldr	r1, [pc, #180]	; (8007644 <HTS221_0_Probe+0x16c>)
 800758e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_HTS221_0]->Init(EnvCompObj[IKS01A2_HTS221_0]) != HTS221_OK)
 8007592:	4b28      	ldr	r3, [pc, #160]	; (8007634 <HTS221_0_Probe+0x15c>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a25      	ldr	r2, [pc, #148]	; (8007630 <HTS221_0_Probe+0x158>)
 800759a:	6812      	ldr	r2, [r2, #0]
 800759c:	4610      	mov	r0, r2
 800759e:	4798      	blx	r3
 80075a0:	4603      	mov	r3, r0
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d003      	beq.n	80075ae <HTS221_0_Probe+0xd6>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80075a6:	f06f 0304 	mvn.w	r3, #4
 80075aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80075ac:	e001      	b.n	80075b2 <HTS221_0_Probe+0xda>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80075ae:	2300      	movs	r3, #0
 80075b0:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 80075b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d11d      	bne.n	80075f4 <HTS221_0_Probe+0x11c>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f003 0304 	and.w	r3, r3, #4
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d018      	beq.n	80075f4 <HTS221_0_Probe+0x11c>
 80075c2:	7bbb      	ldrb	r3, [r7, #14]
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d115      	bne.n	80075f4 <HTS221_0_Probe+0x11c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_HTS221_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_HUM_Driver;
 80075c8:	4b1c      	ldr	r3, [pc, #112]	; (800763c <HTS221_0_Probe+0x164>)
 80075ca:	691b      	ldr	r3, [r3, #16]
 80075cc:	4a1c      	ldr	r2, [pc, #112]	; (8007640 <HTS221_0_Probe+0x168>)
 80075ce:	491e      	ldr	r1, [pc, #120]	; (8007648 <HTS221_0_Probe+0x170>)
 80075d0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_HTS221_0]->Init(EnvCompObj[IKS01A2_HTS221_0]) != HTS221_OK)
 80075d4:	4b17      	ldr	r3, [pc, #92]	; (8007634 <HTS221_0_Probe+0x15c>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a15      	ldr	r2, [pc, #84]	; (8007630 <HTS221_0_Probe+0x158>)
 80075dc:	6812      	ldr	r2, [r2, #0]
 80075de:	4610      	mov	r0, r2
 80075e0:	4798      	blx	r3
 80075e2:	4603      	mov	r3, r0
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d003      	beq.n	80075f0 <HTS221_0_Probe+0x118>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80075e8:	f06f 0304 	mvn.w	r3, #4
 80075ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80075ee:	e001      	b.n	80075f4 <HTS221_0_Probe+0x11c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80075f0:	2300      	movs	r3, #0
 80075f2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 80075f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d107      	bne.n	800760a <HTS221_0_Probe+0x132>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f003 0302 	and.w	r3, r3, #2
 8007600:	2b00      	cmp	r3, #0
 8007602:	d002      	beq.n	800760a <HTS221_0_Probe+0x132>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8007604:	f06f 0304 	mvn.w	r3, #4
 8007608:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }

  return ret;
 800760a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800760c:	4618      	mov	r0, r3
 800760e:	3740      	adds	r7, #64	; 0x40
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}
 8007614:	08002a65 	.word	0x08002a65
 8007618:	08002ac9 	.word	0x08002ac9
 800761c:	08002b7d 	.word	0x08002b7d
 8007620:	08002b19 	.word	0x08002b19
 8007624:	08002be1 	.word	0x08002be1
 8007628:	20002330 	.word	0x20002330
 800762c:	20002328 	.word	0x20002328
 8007630:	2000d5cc 	.word	0x2000d5cc
 8007634:	20002320 	.word	0x20002320
 8007638:	200011d0 	.word	0x200011d0
 800763c:	20001300 	.word	0x20001300
 8007640:	20002308 	.word	0x20002308
 8007644:	200011f4 	.word	0x200011f4
 8007648:	200011e0 	.word	0x200011e0

0800764c <LPS22HB_0_Probe>:
 * @param  Functions Environmental sensor functions. Could be :
 *         - ENV_TEMPERATURE and/or ENV_PRESSURE
 * @retval BSP status
 */
static int32_t LPS22HB_0_Probe(uint32_t Functions)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b090      	sub	sp, #64	; 0x40
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  LPS22HB_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 8007654:	2300      	movs	r3, #0
 8007656:	63fb      	str	r3, [r7, #60]	; 0x3c
  static LPS22HB_Object_t lps22hb_obj_0;
  LPS22HB_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = LPS22HB_I2C_BUS; /* I2C */
 8007658:	2300      	movs	r3, #0
 800765a:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.Address     = LPS22HB_I2C_ADD_H;
 800765c:	23bb      	movs	r3, #187	; 0xbb
 800765e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  io_ctx.Init        = IKS01A2_I2C_Init;
 8007662:	4b4a      	ldr	r3, [pc, #296]	; (800778c <LPS22HB_0_Probe+0x140>)
 8007664:	623b      	str	r3, [r7, #32]
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8007666:	4b4a      	ldr	r3, [pc, #296]	; (8007790 <LPS22HB_0_Probe+0x144>)
 8007668:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 800766a:	4b4a      	ldr	r3, [pc, #296]	; (8007794 <LPS22HB_0_Probe+0x148>)
 800766c:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 800766e:	4b4a      	ldr	r3, [pc, #296]	; (8007798 <LPS22HB_0_Probe+0x14c>)
 8007670:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.GetTick     = IKS01A2_GetTick;
 8007672:	4b4a      	ldr	r3, [pc, #296]	; (800779c <LPS22HB_0_Probe+0x150>)
 8007674:	63bb      	str	r3, [r7, #56]	; 0x38

  if (LPS22HB_RegisterBusIO(&lps22hb_obj_0, &io_ctx) != LPS22HB_OK)
 8007676:	f107 0320 	add.w	r3, r7, #32
 800767a:	4619      	mov	r1, r3
 800767c:	4848      	ldr	r0, [pc, #288]	; (80077a0 <LPS22HB_0_Probe+0x154>)
 800767e:	f7fc fa6b 	bl	8003b58 <LPS22HB_RegisterBusIO>
 8007682:	4603      	mov	r3, r0
 8007684:	2b00      	cmp	r3, #0
 8007686:	d003      	beq.n	8007690 <LPS22HB_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007688:	f06f 0306 	mvn.w	r3, #6
 800768c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800768e:	e078      	b.n	8007782 <LPS22HB_0_Probe+0x136>
  }
  else if (LPS22HB_ReadID(&lps22hb_obj_0, &id) != LPS22HB_OK)
 8007690:	f107 031f 	add.w	r3, r7, #31
 8007694:	4619      	mov	r1, r3
 8007696:	4842      	ldr	r0, [pc, #264]	; (80077a0 <LPS22HB_0_Probe+0x154>)
 8007698:	f7fc fb03 	bl	8003ca2 <LPS22HB_ReadID>
 800769c:	4603      	mov	r3, r0
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d003      	beq.n	80076aa <LPS22HB_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80076a2:	f06f 0306 	mvn.w	r3, #6
 80076a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076a8:	e06b      	b.n	8007782 <LPS22HB_0_Probe+0x136>
  }
  else if (id != LPS22HB_ID)
 80076aa:	7ffb      	ldrb	r3, [r7, #31]
 80076ac:	2bb1      	cmp	r3, #177	; 0xb1
 80076ae:	d003      	beq.n	80076b8 <LPS22HB_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80076b0:	f06f 0306 	mvn.w	r3, #6
 80076b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076b6:	e064      	b.n	8007782 <LPS22HB_0_Probe+0x136>
  }
  else
  {
    (void)LPS22HB_GetCapabilities(&lps22hb_obj_0, &cap);
 80076b8:	f107 030c 	add.w	r3, r7, #12
 80076bc:	4619      	mov	r1, r3
 80076be:	4838      	ldr	r0, [pc, #224]	; (80077a0 <LPS22HB_0_Probe+0x154>)
 80076c0:	f7fc fb06 	bl	8003cd0 <LPS22HB_GetCapabilities>

    EnvCtx[IKS01A2_LPS22HB_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 80076c4:	7b3b      	ldrb	r3, [r7, #12]
 80076c6:	461a      	mov	r2, r3
 80076c8:	7b7b      	ldrb	r3, [r7, #13]
 80076ca:	005b      	lsls	r3, r3, #1
 80076cc:	431a      	orrs	r2, r3
                                            uint32_t)cap.Humidity << 2);
 80076ce:	7bbb      	ldrb	r3, [r7, #14]
 80076d0:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A2_LPS22HB_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 80076d2:	4313      	orrs	r3, r2
 80076d4:	4a33      	ldr	r2, [pc, #204]	; (80077a4 <LPS22HB_0_Probe+0x158>)
 80076d6:	6053      	str	r3, [r2, #4]

    EnvCompObj[IKS01A2_LPS22HB_0] = &lps22hb_obj_0;
 80076d8:	4b33      	ldr	r3, [pc, #204]	; (80077a8 <LPS22HB_0_Probe+0x15c>)
 80076da:	4a31      	ldr	r2, [pc, #196]	; (80077a0 <LPS22HB_0_Probe+0x154>)
 80076dc:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A2_LPS22HB_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HB_COMMON_Driver;
 80076de:	4b33      	ldr	r3, [pc, #204]	; (80077ac <LPS22HB_0_Probe+0x160>)
 80076e0:	4a33      	ldr	r2, [pc, #204]	; (80077b0 <LPS22HB_0_Probe+0x164>)
 80076e2:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 80076e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d11e      	bne.n	8007728 <LPS22HB_0_Probe+0xdc>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f003 0301 	and.w	r3, r3, #1
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d019      	beq.n	8007728 <LPS22HB_0_Probe+0xdc>
 80076f4:	7b3b      	ldrb	r3, [r7, #12]
 80076f6:	2b01      	cmp	r3, #1
 80076f8:	d116      	bne.n	8007728 <LPS22HB_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_LPS22HB_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HB_TEMP_Driver;
 80076fa:	4b2e      	ldr	r3, [pc, #184]	; (80077b4 <LPS22HB_0_Probe+0x168>)
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	4a2e      	ldr	r2, [pc, #184]	; (80077b8 <LPS22HB_0_Probe+0x16c>)
 8007700:	3303      	adds	r3, #3
 8007702:	492e      	ldr	r1, [pc, #184]	; (80077bc <LPS22HB_0_Probe+0x170>)
 8007704:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_LPS22HB_0]->Init(EnvCompObj[IKS01A2_LPS22HB_0]) != LPS22HB_OK)
 8007708:	4b28      	ldr	r3, [pc, #160]	; (80077ac <LPS22HB_0_Probe+0x160>)
 800770a:	685b      	ldr	r3, [r3, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4a26      	ldr	r2, [pc, #152]	; (80077a8 <LPS22HB_0_Probe+0x15c>)
 8007710:	6852      	ldr	r2, [r2, #4]
 8007712:	4610      	mov	r0, r2
 8007714:	4798      	blx	r3
 8007716:	4603      	mov	r3, r0
 8007718:	2b00      	cmp	r3, #0
 800771a:	d003      	beq.n	8007724 <LPS22HB_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800771c:	f06f 0304 	mvn.w	r3, #4
 8007720:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007722:	e001      	b.n	8007728 <LPS22HB_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8007724:	2300      	movs	r3, #0
 8007726:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 8007728:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800772a:	2b00      	cmp	r3, #0
 800772c:	d11e      	bne.n	800776c <LPS22HB_0_Probe+0x120>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f003 0302 	and.w	r3, r3, #2
 8007734:	2b00      	cmp	r3, #0
 8007736:	d019      	beq.n	800776c <LPS22HB_0_Probe+0x120>
 8007738:	7b7b      	ldrb	r3, [r7, #13]
 800773a:	2b01      	cmp	r3, #1
 800773c:	d116      	bne.n	800776c <LPS22HB_0_Probe+0x120>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_LPS22HB_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HB_PRESS_Driver;
 800773e:	4b1d      	ldr	r3, [pc, #116]	; (80077b4 <LPS22HB_0_Probe+0x168>)
 8007740:	689b      	ldr	r3, [r3, #8]
 8007742:	4a1d      	ldr	r2, [pc, #116]	; (80077b8 <LPS22HB_0_Probe+0x16c>)
 8007744:	3303      	adds	r3, #3
 8007746:	491e      	ldr	r1, [pc, #120]	; (80077c0 <LPS22HB_0_Probe+0x174>)
 8007748:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_LPS22HB_0]->Init(EnvCompObj[IKS01A2_LPS22HB_0]) != LPS22HB_OK)
 800774c:	4b17      	ldr	r3, [pc, #92]	; (80077ac <LPS22HB_0_Probe+0x160>)
 800774e:	685b      	ldr	r3, [r3, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4a15      	ldr	r2, [pc, #84]	; (80077a8 <LPS22HB_0_Probe+0x15c>)
 8007754:	6852      	ldr	r2, [r2, #4]
 8007756:	4610      	mov	r0, r2
 8007758:	4798      	blx	r3
 800775a:	4603      	mov	r3, r0
 800775c:	2b00      	cmp	r3, #0
 800775e:	d003      	beq.n	8007768 <LPS22HB_0_Probe+0x11c>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007760:	f06f 0304 	mvn.w	r3, #4
 8007764:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007766:	e001      	b.n	800776c <LPS22HB_0_Probe+0x120>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8007768:	2300      	movs	r3, #0
 800776a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 800776c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800776e:	2b00      	cmp	r3, #0
 8007770:	d107      	bne.n	8007782 <LPS22HB_0_Probe+0x136>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f003 0304 	and.w	r3, r3, #4
 8007778:	2b00      	cmp	r3, #0
 800777a:	d002      	beq.n	8007782 <LPS22HB_0_Probe+0x136>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800777c:	f06f 0304 	mvn.w	r3, #4
 8007780:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }
  return ret;
 8007782:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007784:	4618      	mov	r0, r3
 8007786:	3740      	adds	r7, #64	; 0x40
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}
 800778c:	08002a65 	.word	0x08002a65
 8007790:	08002ac9 	.word	0x08002ac9
 8007794:	08002b7d 	.word	0x08002b7d
 8007798:	08002b19 	.word	0x08002b19
 800779c:	08002be1 	.word	0x08002be1
 80077a0:	2000235c 	.word	0x2000235c
 80077a4:	20002328 	.word	0x20002328
 80077a8:	2000d5cc 	.word	0x2000d5cc
 80077ac:	20002320 	.word	0x20002320
 80077b0:	20001208 	.word	0x20001208
 80077b4:	20001300 	.word	0x20001300
 80077b8:	20002308 	.word	0x20002308
 80077bc:	2000122c 	.word	0x2000122c
 80077c0:	20001218 	.word	0x20001218

080077c4 <IKS01A2_MOTION_SENSOR_Init>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b08e      	sub	sp, #56	; 0x38
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
 80077cc:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80077ce:	2300      	movs	r3, #0
 80077d0:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 80077d2:	2301      	movs	r3, #1
 80077d4:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 80077d6:	2300      	movs	r3, #0
 80077d8:	62bb      	str	r3, [r7, #40]	; 0x28
  IKS01A2_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d036      	beq.n	800784e <IKS01A2_MOTION_SENSOR_Init+0x8a>
 80077e0:	2b01      	cmp	r3, #1
 80077e2:	d302      	bcc.n	80077ea <IKS01A2_MOTION_SENSOR_Init+0x26>
 80077e4:	2b02      	cmp	r3, #2
 80077e6:	d064      	beq.n	80078b2 <IKS01A2_MOTION_SENSOR_Init+0xee>
 80077e8:	e095      	b.n	8007916 <IKS01A2_MOTION_SENSOR_Init+0x152>
  {
#if (USE_IKS01A2_MOTION_SENSOR_LSM6DSL_0 == 1)
    case IKS01A2_LSM6DSL_0:
      if (LSM6DSL_0_Probe(Functions) != BSP_ERROR_NONE)
 80077ea:	6838      	ldr	r0, [r7, #0]
 80077ec:	f000 f9ee 	bl	8007bcc <LSM6DSL_0_Probe>
 80077f0:	4603      	mov	r3, r0
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d002      	beq.n	80077fc <IKS01A2_MOTION_SENSOR_Init+0x38>
      {
        return BSP_ERROR_NO_INIT;
 80077f6:	f04f 33ff 	mov.w	r3, #4294967295
 80077fa:	e0cc      	b.n	8007996 <IKS01A2_MOTION_SENSOR_Init+0x1d2>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80077fc:	4a68      	ldr	r2, [pc, #416]	; (80079a0 <IKS01A2_MOTION_SENSOR_Init+0x1dc>)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007804:	68db      	ldr	r3, [r3, #12]
 8007806:	4967      	ldr	r1, [pc, #412]	; (80079a4 <IKS01A2_MOTION_SENSOR_Init+0x1e0>)
 8007808:	687a      	ldr	r2, [r7, #4]
 800780a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800780e:	f107 010c 	add.w	r1, r7, #12
 8007812:	4610      	mov	r0, r2
 8007814:	4798      	blx	r3
 8007816:	4603      	mov	r3, r0
 8007818:	2b00      	cmp	r3, #0
 800781a:	d002      	beq.n	8007822 <IKS01A2_MOTION_SENSOR_Init+0x5e>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800781c:	f06f 0306 	mvn.w	r3, #6
 8007820:	e0b9      	b.n	8007996 <IKS01A2_MOTION_SENSOR_Init+0x1d2>
      }
      if (cap.Acc == 1U)
 8007822:	7b3b      	ldrb	r3, [r7, #12]
 8007824:	2b01      	cmp	r3, #1
 8007826:	d103      	bne.n	8007830 <IKS01A2_MOTION_SENSOR_Init+0x6c>
      {
        component_functions |= MOTION_ACCELERO;
 8007828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800782a:	f043 0302 	orr.w	r3, r3, #2
 800782e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8007830:	7b7b      	ldrb	r3, [r7, #13]
 8007832:	2b01      	cmp	r3, #1
 8007834:	d103      	bne.n	800783e <IKS01A2_MOTION_SENSOR_Init+0x7a>
      {
        component_functions |= MOTION_GYRO;
 8007836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007838:	f043 0301 	orr.w	r3, r3, #1
 800783c:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 800783e:	7bbb      	ldrb	r3, [r7, #14]
 8007840:	2b01      	cmp	r3, #1
 8007842:	d16c      	bne.n	800791e <IKS01A2_MOTION_SENSOR_Init+0x15a>
      {
        component_functions |= MOTION_MAGNETO;
 8007844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007846:	f043 0304 	orr.w	r3, r3, #4
 800784a:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 800784c:	e067      	b.n	800791e <IKS01A2_MOTION_SENSOR_Init+0x15a>
#endif

#if (USE_IKS01A2_MOTION_SENSOR_LSM303AGR_ACC_0 == 1)
    case IKS01A2_LSM303AGR_ACC_0:
      if (LSM303AGR_ACC_0_Probe(Functions) != BSP_ERROR_NONE)
 800784e:	6838      	ldr	r0, [r7, #0]
 8007850:	f000 fa78 	bl	8007d44 <LSM303AGR_ACC_0_Probe>
 8007854:	4603      	mov	r3, r0
 8007856:	2b00      	cmp	r3, #0
 8007858:	d002      	beq.n	8007860 <IKS01A2_MOTION_SENSOR_Init+0x9c>
      {
        return BSP_ERROR_NO_INIT;
 800785a:	f04f 33ff 	mov.w	r3, #4294967295
 800785e:	e09a      	b.n	8007996 <IKS01A2_MOTION_SENSOR_Init+0x1d2>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8007860:	4a4f      	ldr	r2, [pc, #316]	; (80079a0 <IKS01A2_MOTION_SENSOR_Init+0x1dc>)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007868:	68db      	ldr	r3, [r3, #12]
 800786a:	494e      	ldr	r1, [pc, #312]	; (80079a4 <IKS01A2_MOTION_SENSOR_Init+0x1e0>)
 800786c:	687a      	ldr	r2, [r7, #4]
 800786e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007872:	f107 010c 	add.w	r1, r7, #12
 8007876:	4610      	mov	r0, r2
 8007878:	4798      	blx	r3
 800787a:	4603      	mov	r3, r0
 800787c:	2b00      	cmp	r3, #0
 800787e:	d002      	beq.n	8007886 <IKS01A2_MOTION_SENSOR_Init+0xc2>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8007880:	f06f 0306 	mvn.w	r3, #6
 8007884:	e087      	b.n	8007996 <IKS01A2_MOTION_SENSOR_Init+0x1d2>
      }
      if (cap.Acc == 1U)
 8007886:	7b3b      	ldrb	r3, [r7, #12]
 8007888:	2b01      	cmp	r3, #1
 800788a:	d103      	bne.n	8007894 <IKS01A2_MOTION_SENSOR_Init+0xd0>
      {
        component_functions |= MOTION_ACCELERO;
 800788c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800788e:	f043 0302 	orr.w	r3, r3, #2
 8007892:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8007894:	7b7b      	ldrb	r3, [r7, #13]
 8007896:	2b01      	cmp	r3, #1
 8007898:	d103      	bne.n	80078a2 <IKS01A2_MOTION_SENSOR_Init+0xde>
      {
        component_functions |= MOTION_GYRO;
 800789a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800789c:	f043 0301 	orr.w	r3, r3, #1
 80078a0:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 80078a2:	7bbb      	ldrb	r3, [r7, #14]
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	d13c      	bne.n	8007922 <IKS01A2_MOTION_SENSOR_Init+0x15e>
      {
        component_functions |= MOTION_MAGNETO;
 80078a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078aa:	f043 0304 	orr.w	r3, r3, #4
 80078ae:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 80078b0:	e037      	b.n	8007922 <IKS01A2_MOTION_SENSOR_Init+0x15e>
#endif

#if (USE_IKS01A2_MOTION_SENSOR_LSM303AGR_MAG_0 == 1)
    case IKS01A2_LSM303AGR_MAG_0:
      if (LSM303AGR_MAG_0_Probe(Functions) != BSP_ERROR_NONE)
 80078b2:	6838      	ldr	r0, [r7, #0]
 80078b4:	f000 faea 	bl	8007e8c <LSM303AGR_MAG_0_Probe>
 80078b8:	4603      	mov	r3, r0
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d002      	beq.n	80078c4 <IKS01A2_MOTION_SENSOR_Init+0x100>
      {
        return BSP_ERROR_NO_INIT;
 80078be:	f04f 33ff 	mov.w	r3, #4294967295
 80078c2:	e068      	b.n	8007996 <IKS01A2_MOTION_SENSOR_Init+0x1d2>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80078c4:	4a36      	ldr	r2, [pc, #216]	; (80079a0 <IKS01A2_MOTION_SENSOR_Init+0x1dc>)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078cc:	68db      	ldr	r3, [r3, #12]
 80078ce:	4935      	ldr	r1, [pc, #212]	; (80079a4 <IKS01A2_MOTION_SENSOR_Init+0x1e0>)
 80078d0:	687a      	ldr	r2, [r7, #4]
 80078d2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80078d6:	f107 010c 	add.w	r1, r7, #12
 80078da:	4610      	mov	r0, r2
 80078dc:	4798      	blx	r3
 80078de:	4603      	mov	r3, r0
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d002      	beq.n	80078ea <IKS01A2_MOTION_SENSOR_Init+0x126>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80078e4:	f06f 0306 	mvn.w	r3, #6
 80078e8:	e055      	b.n	8007996 <IKS01A2_MOTION_SENSOR_Init+0x1d2>
      }
      if (cap.Acc == 1U)
 80078ea:	7b3b      	ldrb	r3, [r7, #12]
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	d103      	bne.n	80078f8 <IKS01A2_MOTION_SENSOR_Init+0x134>
      {
        component_functions |= MOTION_ACCELERO;
 80078f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f2:	f043 0302 	orr.w	r3, r3, #2
 80078f6:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 80078f8:	7b7b      	ldrb	r3, [r7, #13]
 80078fa:	2b01      	cmp	r3, #1
 80078fc:	d103      	bne.n	8007906 <IKS01A2_MOTION_SENSOR_Init+0x142>
      {
        component_functions |= MOTION_GYRO;
 80078fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007900:	f043 0301 	orr.w	r3, r3, #1
 8007904:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8007906:	7bbb      	ldrb	r3, [r7, #14]
 8007908:	2b01      	cmp	r3, #1
 800790a:	d10c      	bne.n	8007926 <IKS01A2_MOTION_SENSOR_Init+0x162>
      {
        component_functions |= MOTION_MAGNETO;
 800790c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800790e:	f043 0304 	orr.w	r3, r3, #4
 8007912:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8007914:	e007      	b.n	8007926 <IKS01A2_MOTION_SENSOR_Init+0x162>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8007916:	f06f 0301 	mvn.w	r3, #1
 800791a:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 800791c:	e004      	b.n	8007928 <IKS01A2_MOTION_SENSOR_Init+0x164>
      break;
 800791e:	bf00      	nop
 8007920:	e002      	b.n	8007928 <IKS01A2_MOTION_SENSOR_Init+0x164>
      break;
 8007922:	bf00      	nop
 8007924:	e000      	b.n	8007928 <IKS01A2_MOTION_SENSOR_Init+0x164>
      break;
 8007926:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8007928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800792a:	2b00      	cmp	r3, #0
 800792c:	d001      	beq.n	8007932 <IKS01A2_MOTION_SENSOR_Init+0x16e>
  {
    return ret;
 800792e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007930:	e031      	b.n	8007996 <IKS01A2_MOTION_SENSOR_Init+0x1d2>
  }

  for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++)
 8007932:	2300      	movs	r3, #0
 8007934:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007936:	e02a      	b.n	800798e <IKS01A2_MOTION_SENSOR_Init+0x1ca>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8007938:	683a      	ldr	r2, [r7, #0]
 800793a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800793c:	4013      	ands	r3, r2
 800793e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007940:	429a      	cmp	r2, r3
 8007942:	d11e      	bne.n	8007982 <IKS01A2_MOTION_SENSOR_Init+0x1be>
 8007944:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007948:	4013      	ands	r3, r2
 800794a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800794c:	429a      	cmp	r2, r3
 800794e:	d118      	bne.n	8007982 <IKS01A2_MOTION_SENSOR_Init+0x1be>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8007950:	4a15      	ldr	r2, [pc, #84]	; (80079a8 <IKS01A2_MOTION_SENSOR_Init+0x1e4>)
 8007952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007954:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007958:	4814      	ldr	r0, [pc, #80]	; (80079ac <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 800795a:	687a      	ldr	r2, [r7, #4]
 800795c:	4613      	mov	r3, r2
 800795e:	005b      	lsls	r3, r3, #1
 8007960:	4413      	add	r3, r2
 8007962:	440b      	add	r3, r1
 8007964:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	490e      	ldr	r1, [pc, #56]	; (80079a4 <IKS01A2_MOTION_SENSOR_Init+0x1e0>)
 800796c:	687a      	ldr	r2, [r7, #4]
 800796e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007972:	4610      	mov	r0, r2
 8007974:	4798      	blx	r3
 8007976:	4603      	mov	r3, r0
 8007978:	2b00      	cmp	r3, #0
 800797a:	d002      	beq.n	8007982 <IKS01A2_MOTION_SENSOR_Init+0x1be>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 800797c:	f06f 0304 	mvn.w	r3, #4
 8007980:	e009      	b.n	8007996 <IKS01A2_MOTION_SENSOR_Init+0x1d2>
      }
    }
    function = function << 1;
 8007982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007984:	005b      	lsls	r3, r3, #1
 8007986:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++)
 8007988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800798a:	3301      	adds	r3, #1
 800798c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800798e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007990:	2b02      	cmp	r3, #2
 8007992:	d9d1      	bls.n	8007938 <IKS01A2_MOTION_SENSOR_Init+0x174>
  }

  return ret;
 8007994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007996:	4618      	mov	r0, r3
 8007998:	3738      	adds	r7, #56	; 0x38
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}
 800799e:	bf00      	nop
 80079a0:	200023ac 	.word	0x200023ac
 80079a4:	2000d5d4 	.word	0x2000d5d4
 80079a8:	20001314 	.word	0x20001314
 80079ac:	20002388 	.word	0x20002388

080079b0 <IKS01A2_MOTION_SENSOR_Enable>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b084      	sub	sp, #16
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
 80079b8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2b02      	cmp	r3, #2
 80079be:	d903      	bls.n	80079c8 <IKS01A2_MOTION_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80079c0:	f06f 0301 	mvn.w	r3, #1
 80079c4:	60fb      	str	r3, [r7, #12]
 80079c6:	e028      	b.n	8007a1a <IKS01A2_MOTION_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 80079c8:	4a16      	ldr	r2, [pc, #88]	; (8007a24 <IKS01A2_MOTION_SENSOR_Enable+0x74>)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	4013      	ands	r3, r2
 80079d4:	683a      	ldr	r2, [r7, #0]
 80079d6:	429a      	cmp	r2, r3
 80079d8:	d11c      	bne.n	8007a14 <IKS01A2_MOTION_SENSOR_Enable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 80079da:	4a13      	ldr	r2, [pc, #76]	; (8007a28 <IKS01A2_MOTION_SENSOR_Enable+0x78>)
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80079e2:	4812      	ldr	r0, [pc, #72]	; (8007a2c <IKS01A2_MOTION_SENSOR_Enable+0x7c>)
 80079e4:	687a      	ldr	r2, [r7, #4]
 80079e6:	4613      	mov	r3, r2
 80079e8:	005b      	lsls	r3, r3, #1
 80079ea:	4413      	add	r3, r2
 80079ec:	440b      	add	r3, r1
 80079ee:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	490e      	ldr	r1, [pc, #56]	; (8007a30 <IKS01A2_MOTION_SENSOR_Enable+0x80>)
 80079f6:	687a      	ldr	r2, [r7, #4]
 80079f8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80079fc:	4610      	mov	r0, r2
 80079fe:	4798      	blx	r3
 8007a00:	4603      	mov	r3, r0
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d003      	beq.n	8007a0e <IKS01A2_MOTION_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007a06:	f06f 0304 	mvn.w	r3, #4
 8007a0a:	60fb      	str	r3, [r7, #12]
 8007a0c:	e005      	b.n	8007a1a <IKS01A2_MOTION_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	60fb      	str	r3, [r7, #12]
 8007a12:	e002      	b.n	8007a1a <IKS01A2_MOTION_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8007a14:	f06f 0301 	mvn.w	r3, #1
 8007a18:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3710      	adds	r7, #16
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}
 8007a24:	200023b8 	.word	0x200023b8
 8007a28:	20001314 	.word	0x20001314
 8007a2c:	20002388 	.word	0x20002388
 8007a30:	2000d5d4 	.word	0x2000d5d4

08007a34 <IKS01A2_MOTION_SENSOR_GetAxes>:
 *         - MOTION_MAGNETO for instance 2
 * @param  Axes pointer to axes data structure
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b086      	sub	sp, #24
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	60f8      	str	r0, [r7, #12]
 8007a3c:	60b9      	str	r1, [r7, #8]
 8007a3e:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2b02      	cmp	r3, #2
 8007a44:	d903      	bls.n	8007a4e <IKS01A2_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8007a46:	f06f 0301 	mvn.w	r3, #1
 8007a4a:	617b      	str	r3, [r7, #20]
 8007a4c:	e029      	b.n	8007aa2 <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8007a4e:	4a17      	ldr	r2, [pc, #92]	; (8007aac <IKS01A2_MOTION_SENSOR_GetAxes+0x78>)
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	4013      	ands	r3, r2
 8007a5a:	68ba      	ldr	r2, [r7, #8]
 8007a5c:	429a      	cmp	r2, r3
 8007a5e:	d11d      	bne.n	8007a9c <IKS01A2_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 8007a60:	4a13      	ldr	r2, [pc, #76]	; (8007ab0 <IKS01A2_MOTION_SENSOR_GetAxes+0x7c>)
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007a68:	4812      	ldr	r0, [pc, #72]	; (8007ab4 <IKS01A2_MOTION_SENSOR_GetAxes+0x80>)
 8007a6a:	68fa      	ldr	r2, [r7, #12]
 8007a6c:	4613      	mov	r3, r2
 8007a6e:	005b      	lsls	r3, r3, #1
 8007a70:	4413      	add	r3, r2
 8007a72:	440b      	add	r3, r1
 8007a74:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8007a78:	69db      	ldr	r3, [r3, #28]
 8007a7a:	490f      	ldr	r1, [pc, #60]	; (8007ab8 <IKS01A2_MOTION_SENSOR_GetAxes+0x84>)
 8007a7c:	68fa      	ldr	r2, [r7, #12]
 8007a7e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007a82:	6879      	ldr	r1, [r7, #4]
 8007a84:	4610      	mov	r0, r2
 8007a86:	4798      	blx	r3
 8007a88:	4603      	mov	r3, r0
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d003      	beq.n	8007a96 <IKS01A2_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007a8e:	f06f 0304 	mvn.w	r3, #4
 8007a92:	617b      	str	r3, [r7, #20]
 8007a94:	e005      	b.n	8007aa2 <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8007a96:	2300      	movs	r3, #0
 8007a98:	617b      	str	r3, [r7, #20]
 8007a9a:	e002      	b.n	8007aa2 <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8007a9c:	f06f 0301 	mvn.w	r3, #1
 8007aa0:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8007aa2:	697b      	ldr	r3, [r7, #20]
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	3718      	adds	r7, #24
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}
 8007aac:	200023b8 	.word	0x200023b8
 8007ab0:	20001314 	.word	0x20001314
 8007ab4:	20002388 	.word	0x20002388
 8007ab8:	2000d5d4 	.word	0x2000d5d4

08007abc <IKS01A2_MOTION_SENSOR_SetOutputDataRate>:
 *         - MOTION_MAGNETO for instance 2
 * @param  Odr Output Data Rate value to be set
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_SetOutputDataRate(uint32_t Instance, uint32_t Function, float Odr)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b086      	sub	sp, #24
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	60f8      	str	r0, [r7, #12]
 8007ac4:	60b9      	str	r1, [r7, #8]
 8007ac6:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2b02      	cmp	r3, #2
 8007acc:	d903      	bls.n	8007ad6 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8007ace:	f06f 0301 	mvn.w	r3, #1
 8007ad2:	617b      	str	r3, [r7, #20]
 8007ad4:	e029      	b.n	8007b2a <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8007ad6:	4a17      	ldr	r2, [pc, #92]	; (8007b34 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x78>)
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	4013      	ands	r3, r2
 8007ae2:	68ba      	ldr	r2, [r7, #8]
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	d11d      	bne.n	8007b24 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 8007ae8:	4a13      	ldr	r2, [pc, #76]	; (8007b38 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x7c>)
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007af0:	4812      	ldr	r0, [pc, #72]	; (8007b3c <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x80>)
 8007af2:	68fa      	ldr	r2, [r7, #12]
 8007af4:	4613      	mov	r3, r2
 8007af6:	005b      	lsls	r3, r3, #1
 8007af8:	4413      	add	r3, r2
 8007afa:	440b      	add	r3, r1
 8007afc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8007b00:	691b      	ldr	r3, [r3, #16]
 8007b02:	490f      	ldr	r1, [pc, #60]	; (8007b40 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x84>)
 8007b04:	68fa      	ldr	r2, [r7, #12]
 8007b06:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007b0a:	6879      	ldr	r1, [r7, #4]
 8007b0c:	4610      	mov	r0, r2
 8007b0e:	4798      	blx	r3
 8007b10:	4603      	mov	r3, r0
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d003      	beq.n	8007b1e <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007b16:	f06f 0304 	mvn.w	r3, #4
 8007b1a:	617b      	str	r3, [r7, #20]
 8007b1c:	e005      	b.n	8007b2a <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	617b      	str	r3, [r7, #20]
 8007b22:	e002      	b.n	8007b2a <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8007b24:	f06f 0301 	mvn.w	r3, #1
 8007b28:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8007b2a:	697b      	ldr	r3, [r7, #20]
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3718      	adds	r7, #24
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}
 8007b34:	200023b8 	.word	0x200023b8
 8007b38:	20001314 	.word	0x20001314
 8007b3c:	20002388 	.word	0x20002388
 8007b40:	2000d5d4 	.word	0x2000d5d4

08007b44 <IKS01A2_MOTION_SENSOR_SetFullScale>:
 *         - MOTION_MAGNETO for instance 2
 * @param  Fullscale Fullscale value to be set
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_SetFullScale(uint32_t Instance, uint32_t Function, int32_t Fullscale)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b086      	sub	sp, #24
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	60f8      	str	r0, [r7, #12]
 8007b4c:	60b9      	str	r1, [r7, #8]
 8007b4e:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	2b02      	cmp	r3, #2
 8007b54:	d903      	bls.n	8007b5e <IKS01A2_MOTION_SENSOR_SetFullScale+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8007b56:	f06f 0301 	mvn.w	r3, #1
 8007b5a:	617b      	str	r3, [r7, #20]
 8007b5c:	e029      	b.n	8007bb2 <IKS01A2_MOTION_SENSOR_SetFullScale+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8007b5e:	4a17      	ldr	r2, [pc, #92]	; (8007bbc <IKS01A2_MOTION_SENSOR_SetFullScale+0x78>)
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	4013      	ands	r3, r2
 8007b6a:	68ba      	ldr	r2, [r7, #8]
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d11d      	bne.n	8007bac <IKS01A2_MOTION_SENSOR_SetFullScale+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetFullScale(MotionCompObj[Instance],
 8007b70:	4a13      	ldr	r2, [pc, #76]	; (8007bc0 <IKS01A2_MOTION_SENSOR_SetFullScale+0x7c>)
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007b78:	4812      	ldr	r0, [pc, #72]	; (8007bc4 <IKS01A2_MOTION_SENSOR_SetFullScale+0x80>)
 8007b7a:	68fa      	ldr	r2, [r7, #12]
 8007b7c:	4613      	mov	r3, r2
 8007b7e:	005b      	lsls	r3, r3, #1
 8007b80:	4413      	add	r3, r2
 8007b82:	440b      	add	r3, r1
 8007b84:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8007b88:	699b      	ldr	r3, [r3, #24]
 8007b8a:	490f      	ldr	r1, [pc, #60]	; (8007bc8 <IKS01A2_MOTION_SENSOR_SetFullScale+0x84>)
 8007b8c:	68fa      	ldr	r2, [r7, #12]
 8007b8e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007b92:	6879      	ldr	r1, [r7, #4]
 8007b94:	4610      	mov	r0, r2
 8007b96:	4798      	blx	r3
 8007b98:	4603      	mov	r3, r0
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d003      	beq.n	8007ba6 <IKS01A2_MOTION_SENSOR_SetFullScale+0x62>
          Fullscale) != BSP_ERROR_NONE)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007b9e:	f06f 0304 	mvn.w	r3, #4
 8007ba2:	617b      	str	r3, [r7, #20]
 8007ba4:	e005      	b.n	8007bb2 <IKS01A2_MOTION_SENSOR_SetFullScale+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	617b      	str	r3, [r7, #20]
 8007baa:	e002      	b.n	8007bb2 <IKS01A2_MOTION_SENSOR_SetFullScale+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8007bac:	f06f 0301 	mvn.w	r3, #1
 8007bb0:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8007bb2:	697b      	ldr	r3, [r7, #20]
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	3718      	adds	r7, #24
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}
 8007bbc:	200023b8 	.word	0x200023b8
 8007bc0:	20001314 	.word	0x20001314
 8007bc4:	20002388 	.word	0x20002388
 8007bc8:	2000d5d4 	.word	0x2000d5d4

08007bcc <LSM6DSL_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 0 if component ID is OK
 * @retval BSP status
 */
static int32_t LSM6DSL_0_Probe(uint32_t Functions)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b092      	sub	sp, #72	; 0x48
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
  LSM6DSL_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSL_Object_t lsm6dsl_obj_0;
  LSM6DSL_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSL_I2C_BUS; /* I2C */
 8007bd8:	2300      	movs	r3, #0
 8007bda:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM6DSL_I2C_ADD_H;
 8007bdc:	23d7      	movs	r3, #215	; 0xd7
 8007bde:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 8007be2:	4b4a      	ldr	r3, [pc, #296]	; (8007d0c <LSM6DSL_0_Probe+0x140>)
 8007be4:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8007be6:	4b4a      	ldr	r3, [pc, #296]	; (8007d10 <LSM6DSL_0_Probe+0x144>)
 8007be8:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8007bea:	4b4a      	ldr	r3, [pc, #296]	; (8007d14 <LSM6DSL_0_Probe+0x148>)
 8007bec:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8007bee:	4b4a      	ldr	r3, [pc, #296]	; (8007d18 <LSM6DSL_0_Probe+0x14c>)
 8007bf0:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 8007bf2:	4b4a      	ldr	r3, [pc, #296]	; (8007d1c <LSM6DSL_0_Probe+0x150>)
 8007bf4:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM6DSL_RegisterBusIO(&lsm6dsl_obj_0, &io_ctx) != LSM6DSL_OK)
 8007bf6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007bfa:	4619      	mov	r1, r3
 8007bfc:	4848      	ldr	r0, [pc, #288]	; (8007d20 <LSM6DSL_0_Probe+0x154>)
 8007bfe:	f7fe f88b 	bl	8005d18 <LSM6DSL_RegisterBusIO>
 8007c02:	4603      	mov	r3, r0
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d003      	beq.n	8007c10 <LSM6DSL_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007c08:	f06f 0306 	mvn.w	r3, #6
 8007c0c:	647b      	str	r3, [r7, #68]	; 0x44
 8007c0e:	e077      	b.n	8007d00 <LSM6DSL_0_Probe+0x134>
  }
  else if (LSM6DSL_ReadID(&lsm6dsl_obj_0, &id) != LSM6DSL_OK)
 8007c10:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8007c14:	4619      	mov	r1, r3
 8007c16:	4842      	ldr	r0, [pc, #264]	; (8007d20 <LSM6DSL_0_Probe+0x154>)
 8007c18:	f7fe f974 	bl	8005f04 <LSM6DSL_ReadID>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d003      	beq.n	8007c2a <LSM6DSL_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007c22:	f06f 0306 	mvn.w	r3, #6
 8007c26:	647b      	str	r3, [r7, #68]	; 0x44
 8007c28:	e06a      	b.n	8007d00 <LSM6DSL_0_Probe+0x134>
  }
  else if (id != LSM6DSL_ID)
 8007c2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c2e:	2b6a      	cmp	r3, #106	; 0x6a
 8007c30:	d003      	beq.n	8007c3a <LSM6DSL_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007c32:	f06f 0306 	mvn.w	r3, #6
 8007c36:	647b      	str	r3, [r7, #68]	; 0x44
 8007c38:	e062      	b.n	8007d00 <LSM6DSL_0_Probe+0x134>
  }
  else
  {
    (void)LSM6DSL_GetCapabilities(&lsm6dsl_obj_0, &cap);
 8007c3a:	f107 0308 	add.w	r3, r7, #8
 8007c3e:	4619      	mov	r1, r3
 8007c40:	4837      	ldr	r0, [pc, #220]	; (8007d20 <LSM6DSL_0_Probe+0x154>)
 8007c42:	f7fe f975 	bl	8005f30 <LSM6DSL_GetCapabilities>
    MotionCtx[IKS01A2_LSM6DSL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8007c46:	7a7b      	ldrb	r3, [r7, #9]
 8007c48:	461a      	mov	r2, r3
 8007c4a:	7a3b      	ldrb	r3, [r7, #8]
 8007c4c:	005b      	lsls	r3, r3, #1
 8007c4e:	431a      	orrs	r2, r3
 8007c50:	7abb      	ldrb	r3, [r7, #10]
 8007c52:	009b      	lsls	r3, r3, #2
 8007c54:	4313      	orrs	r3, r2
 8007c56:	4a33      	ldr	r2, [pc, #204]	; (8007d24 <LSM6DSL_0_Probe+0x158>)
 8007c58:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A2_LSM6DSL_0] = &lsm6dsl_obj_0;
 8007c5a:	4b33      	ldr	r3, [pc, #204]	; (8007d28 <LSM6DSL_0_Probe+0x15c>)
 8007c5c:	4a30      	ldr	r2, [pc, #192]	; (8007d20 <LSM6DSL_0_Probe+0x154>)
 8007c5e:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM6DSL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSL_COMMON_Driver;
 8007c60:	4b32      	ldr	r3, [pc, #200]	; (8007d2c <LSM6DSL_0_Probe+0x160>)
 8007c62:	4a33      	ldr	r2, [pc, #204]	; (8007d30 <LSM6DSL_0_Probe+0x164>)
 8007c64:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8007c66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d11d      	bne.n	8007ca8 <LSM6DSL_0_Probe+0xdc>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f003 0301 	and.w	r3, r3, #1
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d018      	beq.n	8007ca8 <LSM6DSL_0_Probe+0xdc>
 8007c76:	7a7b      	ldrb	r3, [r7, #9]
 8007c78:	2b01      	cmp	r3, #1
 8007c7a:	d115      	bne.n	8007ca8 <LSM6DSL_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSL_GYRO_Driver;
 8007c7c:	4b2d      	ldr	r3, [pc, #180]	; (8007d34 <LSM6DSL_0_Probe+0x168>)
 8007c7e:	685b      	ldr	r3, [r3, #4]
 8007c80:	4a2d      	ldr	r2, [pc, #180]	; (8007d38 <LSM6DSL_0_Probe+0x16c>)
 8007c82:	492e      	ldr	r1, [pc, #184]	; (8007d3c <LSM6DSL_0_Probe+0x170>)
 8007c84:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 8007c88:	4b28      	ldr	r3, [pc, #160]	; (8007d2c <LSM6DSL_0_Probe+0x160>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a26      	ldr	r2, [pc, #152]	; (8007d28 <LSM6DSL_0_Probe+0x15c>)
 8007c90:	6812      	ldr	r2, [r2, #0]
 8007c92:	4610      	mov	r0, r2
 8007c94:	4798      	blx	r3
 8007c96:	4603      	mov	r3, r0
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d003      	beq.n	8007ca4 <LSM6DSL_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007c9c:	f06f 0304 	mvn.w	r3, #4
 8007ca0:	647b      	str	r3, [r7, #68]	; 0x44
 8007ca2:	e001      	b.n	8007ca8 <LSM6DSL_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8007ca8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d11d      	bne.n	8007cea <LSM6DSL_0_Probe+0x11e>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f003 0302 	and.w	r3, r3, #2
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d018      	beq.n	8007cea <LSM6DSL_0_Probe+0x11e>
 8007cb8:	7a3b      	ldrb	r3, [r7, #8]
 8007cba:	2b01      	cmp	r3, #1
 8007cbc:	d115      	bne.n	8007cea <LSM6DSL_0_Probe+0x11e>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8007cbe:	4b1d      	ldr	r3, [pc, #116]	; (8007d34 <LSM6DSL_0_Probe+0x168>)
 8007cc0:	689b      	ldr	r3, [r3, #8]
 8007cc2:	4a1d      	ldr	r2, [pc, #116]	; (8007d38 <LSM6DSL_0_Probe+0x16c>)
 8007cc4:	491e      	ldr	r1, [pc, #120]	; (8007d40 <LSM6DSL_0_Probe+0x174>)
 8007cc6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM6DSL_ACC_Driver;

      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 8007cca:	4b18      	ldr	r3, [pc, #96]	; (8007d2c <LSM6DSL_0_Probe+0x160>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a15      	ldr	r2, [pc, #84]	; (8007d28 <LSM6DSL_0_Probe+0x15c>)
 8007cd2:	6812      	ldr	r2, [r2, #0]
 8007cd4:	4610      	mov	r0, r2
 8007cd6:	4798      	blx	r3
 8007cd8:	4603      	mov	r3, r0
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d003      	beq.n	8007ce6 <LSM6DSL_0_Probe+0x11a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007cde:	f06f 0304 	mvn.w	r3, #4
 8007ce2:	647b      	str	r3, [r7, #68]	; 0x44
 8007ce4:	e001      	b.n	8007cea <LSM6DSL_0_Probe+0x11e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8007cea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d107      	bne.n	8007d00 <LSM6DSL_0_Probe+0x134>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f003 0304 	and.w	r3, r3, #4
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d002      	beq.n	8007d00 <LSM6DSL_0_Probe+0x134>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8007cfa:	f06f 0304 	mvn.w	r3, #4
 8007cfe:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 8007d00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3748      	adds	r7, #72	; 0x48
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}
 8007d0a:	bf00      	nop
 8007d0c:	08002a65 	.word	0x08002a65
 8007d10:	08002ac9 	.word	0x08002ac9
 8007d14:	08002b7d 	.word	0x08002b7d
 8007d18:	08002b19 	.word	0x08002b19
 8007d1c:	08002be1 	.word	0x08002be1
 8007d20:	200023c4 	.word	0x200023c4
 8007d24:	200023b8 	.word	0x200023b8
 8007d28:	2000d5d4 	.word	0x2000d5d4
 8007d2c:	200023ac 	.word	0x200023ac
 8007d30:	200012a8 	.word	0x200012a8
 8007d34:	20001314 	.word	0x20001314
 8007d38:	20002388 	.word	0x20002388
 8007d3c:	200012dc 	.word	0x200012dc
 8007d40:	200012b8 	.word	0x200012b8

08007d44 <LSM303AGR_ACC_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 1 if component ID is OK
 * @retval error status
 */
static int32_t LSM303AGR_ACC_0_Probe(uint32_t Functions)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b092      	sub	sp, #72	; 0x48
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  LSM303AGR_IO_t                io_ctx;
  uint8_t                       id;
  static LSM303AGR_ACC_Object_t lsm303agr_acc_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 8007d50:	2300      	movs	r3, #0
 8007d52:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM303AGR_I2C_ADD_XL;
 8007d54:	2333      	movs	r3, #51	; 0x33
 8007d56:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 8007d5a:	4b3f      	ldr	r3, [pc, #252]	; (8007e58 <LSM303AGR_ACC_0_Probe+0x114>)
 8007d5c:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8007d5e:	4b3f      	ldr	r3, [pc, #252]	; (8007e5c <LSM303AGR_ACC_0_Probe+0x118>)
 8007d60:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8007d62:	4b3f      	ldr	r3, [pc, #252]	; (8007e60 <LSM303AGR_ACC_0_Probe+0x11c>)
 8007d64:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8007d66:	4b3f      	ldr	r3, [pc, #252]	; (8007e64 <LSM303AGR_ACC_0_Probe+0x120>)
 8007d68:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 8007d6a:	4b3f      	ldr	r3, [pc, #252]	; (8007e68 <LSM303AGR_ACC_0_Probe+0x124>)
 8007d6c:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM303AGR_ACC_RegisterBusIO(&lsm303agr_acc_obj_0, &io_ctx) != LSM303AGR_OK)
 8007d6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007d72:	4619      	mov	r1, r3
 8007d74:	483d      	ldr	r0, [pc, #244]	; (8007e6c <LSM303AGR_ACC_0_Probe+0x128>)
 8007d76:	f7fc fc95 	bl	80046a4 <LSM303AGR_ACC_RegisterBusIO>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d003      	beq.n	8007d88 <LSM303AGR_ACC_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007d80:	f06f 0306 	mvn.w	r3, #6
 8007d84:	647b      	str	r3, [r7, #68]	; 0x44
 8007d86:	e062      	b.n	8007e4e <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else if (LSM303AGR_ACC_ReadID(&lsm303agr_acc_obj_0, &id) != LSM303AGR_OK)
 8007d88:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8007d8c:	4619      	mov	r1, r3
 8007d8e:	4837      	ldr	r0, [pc, #220]	; (8007e6c <LSM303AGR_ACC_0_Probe+0x128>)
 8007d90:	f7fc fd49 	bl	8004826 <LSM303AGR_ACC_ReadID>
 8007d94:	4603      	mov	r3, r0
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d003      	beq.n	8007da2 <LSM303AGR_ACC_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007d9a:	f06f 0306 	mvn.w	r3, #6
 8007d9e:	647b      	str	r3, [r7, #68]	; 0x44
 8007da0:	e055      	b.n	8007e4e <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else if (id != (uint8_t)LSM303AGR_ID_XL)
 8007da2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007da6:	2b33      	cmp	r3, #51	; 0x33
 8007da8:	d003      	beq.n	8007db2 <LSM303AGR_ACC_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007daa:	f06f 0306 	mvn.w	r3, #6
 8007dae:	647b      	str	r3, [r7, #68]	; 0x44
 8007db0:	e04d      	b.n	8007e4e <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else
  {
    (void)LSM303AGR_ACC_GetCapabilities(&lsm303agr_acc_obj_0, &cap);
 8007db2:	f107 0308 	add.w	r3, r7, #8
 8007db6:	4619      	mov	r1, r3
 8007db8:	482c      	ldr	r0, [pc, #176]	; (8007e6c <LSM303AGR_ACC_0_Probe+0x128>)
 8007dba:	f7fc fd4b 	bl	8004854 <LSM303AGR_ACC_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8007dbe:	7a7b      	ldrb	r3, [r7, #9]
 8007dc0:	461a      	mov	r2, r3
 8007dc2:	7a3b      	ldrb	r3, [r7, #8]
 8007dc4:	005b      	lsls	r3, r3, #1
 8007dc6:	431a      	orrs	r2, r3
                                                     uint32_t)cap.Magneto << 2);
 8007dc8:	7abb      	ldrb	r3, [r7, #10]
 8007dca:	009b      	lsls	r3, r3, #2
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	4a28      	ldr	r2, [pc, #160]	; (8007e70 <LSM303AGR_ACC_0_Probe+0x12c>)
 8007dd0:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A2_LSM303AGR_ACC_0] = &lsm303agr_acc_obj_0;
 8007dd2:	4b28      	ldr	r3, [pc, #160]	; (8007e74 <LSM303AGR_ACC_0_Probe+0x130>)
 8007dd4:	4a25      	ldr	r2, [pc, #148]	; (8007e6c <LSM303AGR_ACC_0_Probe+0x128>)
 8007dd6:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_ACC_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_ACC_COMMON_Driver;
 8007dd8:	4b27      	ldr	r3, [pc, #156]	; (8007e78 <LSM303AGR_ACC_0_Probe+0x134>)
 8007dda:	4a28      	ldr	r2, [pc, #160]	; (8007e7c <LSM303AGR_ACC_0_Probe+0x138>)
 8007ddc:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8007dde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d11e      	bne.n	8007e22 <LSM303AGR_ACC_0_Probe+0xde>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f003 0302 	and.w	r3, r3, #2
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d019      	beq.n	8007e22 <LSM303AGR_ACC_0_Probe+0xde>
 8007dee:	7a3b      	ldrb	r3, [r7, #8]
 8007df0:	2b01      	cmp	r3, #1
 8007df2:	d116      	bne.n	8007e22 <LSM303AGR_ACC_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM303AGR_ACC_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8007df4:	4b22      	ldr	r3, [pc, #136]	; (8007e80 <LSM303AGR_ACC_0_Probe+0x13c>)
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	4a22      	ldr	r2, [pc, #136]	; (8007e84 <LSM303AGR_ACC_0_Probe+0x140>)
 8007dfa:	3303      	adds	r3, #3
 8007dfc:	4922      	ldr	r1, [pc, #136]	; (8007e88 <LSM303AGR_ACC_0_Probe+0x144>)
 8007dfe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM303AGR_ACC_Driver;

      if (MotionDrv[IKS01A2_LSM303AGR_ACC_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_ACC_0]) != LSM303AGR_OK)
 8007e02:	4b1d      	ldr	r3, [pc, #116]	; (8007e78 <LSM303AGR_ACC_0_Probe+0x134>)
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4a1a      	ldr	r2, [pc, #104]	; (8007e74 <LSM303AGR_ACC_0_Probe+0x130>)
 8007e0a:	6852      	ldr	r2, [r2, #4]
 8007e0c:	4610      	mov	r0, r2
 8007e0e:	4798      	blx	r3
 8007e10:	4603      	mov	r3, r0
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d003      	beq.n	8007e1e <LSM303AGR_ACC_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007e16:	f06f 0304 	mvn.w	r3, #4
 8007e1a:	647b      	str	r3, [r7, #68]	; 0x44
 8007e1c:	e001      	b.n	8007e22 <LSM303AGR_ACC_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8007e22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d107      	bne.n	8007e38 <LSM303AGR_ACC_0_Probe+0xf4>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f003 0301 	and.w	r3, r3, #1
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d002      	beq.n	8007e38 <LSM303AGR_ACC_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8007e32:	f06f 0304 	mvn.w	r3, #4
 8007e36:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8007e38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d107      	bne.n	8007e4e <LSM303AGR_ACC_0_Probe+0x10a>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f003 0304 	and.w	r3, r3, #4
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d002      	beq.n	8007e4e <LSM303AGR_ACC_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8007e48:	f06f 0304 	mvn.w	r3, #4
 8007e4c:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 8007e4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3748      	adds	r7, #72	; 0x48
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}
 8007e58:	08002a65 	.word	0x08002a65
 8007e5c:	08002ac9 	.word	0x08002ac9
 8007e60:	08002b7d 	.word	0x08002b7d
 8007e64:	08002b19 	.word	0x08002b19
 8007e68:	08002be1 	.word	0x08002be1
 8007e6c:	200023f4 	.word	0x200023f4
 8007e70:	200023b8 	.word	0x200023b8
 8007e74:	2000d5d4 	.word	0x2000d5d4
 8007e78:	200023ac 	.word	0x200023ac
 8007e7c:	20001240 	.word	0x20001240
 8007e80:	20001314 	.word	0x20001314
 8007e84:	20002388 	.word	0x20002388
 8007e88:	20001250 	.word	0x20001250

08007e8c <LSM303AGR_MAG_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 2 if component ID is OK
 * @retval error status
 */
static int32_t LSM303AGR_MAG_0_Probe(uint32_t Functions)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b092      	sub	sp, #72	; 0x48
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  LSM303AGR_IO_t                io_ctx;
  uint8_t                       id;
  static LSM303AGR_MAG_Object_t lsm303agr_mag_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;
 8007e94:	2300      	movs	r3, #0
 8007e96:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the magneto driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 8007e98:	2300      	movs	r3, #0
 8007e9a:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM303AGR_I2C_ADD_MG;
 8007e9c:	233d      	movs	r3, #61	; 0x3d
 8007e9e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 8007ea2:	4b3f      	ldr	r3, [pc, #252]	; (8007fa0 <LSM303AGR_MAG_0_Probe+0x114>)
 8007ea4:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8007ea6:	4b3f      	ldr	r3, [pc, #252]	; (8007fa4 <LSM303AGR_MAG_0_Probe+0x118>)
 8007ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8007eaa:	4b3f      	ldr	r3, [pc, #252]	; (8007fa8 <LSM303AGR_MAG_0_Probe+0x11c>)
 8007eac:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8007eae:	4b3f      	ldr	r3, [pc, #252]	; (8007fac <LSM303AGR_MAG_0_Probe+0x120>)
 8007eb0:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 8007eb2:	4b3f      	ldr	r3, [pc, #252]	; (8007fb0 <LSM303AGR_MAG_0_Probe+0x124>)
 8007eb4:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM303AGR_MAG_RegisterBusIO(&lsm303agr_mag_obj_0, &io_ctx) != LSM303AGR_OK)
 8007eb6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007eba:	4619      	mov	r1, r3
 8007ebc:	483d      	ldr	r0, [pc, #244]	; (8007fb4 <LSM303AGR_MAG_0_Probe+0x128>)
 8007ebe:	f7fc ffb3 	bl	8004e28 <LSM303AGR_MAG_RegisterBusIO>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d003      	beq.n	8007ed0 <LSM303AGR_MAG_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007ec8:	f06f 0306 	mvn.w	r3, #6
 8007ecc:	647b      	str	r3, [r7, #68]	; 0x44
 8007ece:	e062      	b.n	8007f96 <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else if (LSM303AGR_MAG_ReadID(&lsm303agr_mag_obj_0, &id) != LSM303AGR_OK)
 8007ed0:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8007ed4:	4619      	mov	r1, r3
 8007ed6:	4837      	ldr	r0, [pc, #220]	; (8007fb4 <LSM303AGR_MAG_0_Probe+0x128>)
 8007ed8:	f7fd f85d 	bl	8004f96 <LSM303AGR_MAG_ReadID>
 8007edc:	4603      	mov	r3, r0
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d003      	beq.n	8007eea <LSM303AGR_MAG_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007ee2:	f06f 0306 	mvn.w	r3, #6
 8007ee6:	647b      	str	r3, [r7, #68]	; 0x44
 8007ee8:	e055      	b.n	8007f96 <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else if (id != (uint8_t)LSM303AGR_ID_MG)
 8007eea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007eee:	2b40      	cmp	r3, #64	; 0x40
 8007ef0:	d003      	beq.n	8007efa <LSM303AGR_MAG_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007ef2:	f06f 0306 	mvn.w	r3, #6
 8007ef6:	647b      	str	r3, [r7, #68]	; 0x44
 8007ef8:	e04d      	b.n	8007f96 <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else
  {
    (void)LSM303AGR_MAG_GetCapabilities(&lsm303agr_mag_obj_0, &cap);
 8007efa:	f107 0308 	add.w	r3, r7, #8
 8007efe:	4619      	mov	r1, r3
 8007f00:	482c      	ldr	r0, [pc, #176]	; (8007fb4 <LSM303AGR_MAG_0_Probe+0x128>)
 8007f02:	f7fd f85f 	bl	8004fc4 <LSM303AGR_MAG_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8007f06:	7a7b      	ldrb	r3, [r7, #9]
 8007f08:	461a      	mov	r2, r3
 8007f0a:	7a3b      	ldrb	r3, [r7, #8]
 8007f0c:	005b      	lsls	r3, r3, #1
 8007f0e:	431a      	orrs	r2, r3
                                                     uint32_t)cap.Magneto << 2);
 8007f10:	7abb      	ldrb	r3, [r7, #10]
 8007f12:	009b      	lsls	r3, r3, #2
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8007f14:	4313      	orrs	r3, r2
 8007f16:	4a28      	ldr	r2, [pc, #160]	; (8007fb8 <LSM303AGR_MAG_0_Probe+0x12c>)
 8007f18:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A2_LSM303AGR_MAG_0] = &lsm303agr_mag_obj_0;
 8007f1a:	4b28      	ldr	r3, [pc, #160]	; (8007fbc <LSM303AGR_MAG_0_Probe+0x130>)
 8007f1c:	4a25      	ldr	r2, [pc, #148]	; (8007fb4 <LSM303AGR_MAG_0_Probe+0x128>)
 8007f1e:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_MAG_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_MAG_COMMON_Driver;
 8007f20:	4b27      	ldr	r3, [pc, #156]	; (8007fc0 <LSM303AGR_MAG_0_Probe+0x134>)
 8007f22:	4a28      	ldr	r2, [pc, #160]	; (8007fc4 <LSM303AGR_MAG_0_Probe+0x138>)
 8007f24:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 8007f26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d11e      	bne.n	8007f6a <LSM303AGR_MAG_0_Probe+0xde>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f003 0304 	and.w	r3, r3, #4
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d019      	beq.n	8007f6a <LSM303AGR_MAG_0_Probe+0xde>
 8007f36:	7abb      	ldrb	r3, [r7, #10]
 8007f38:	2b01      	cmp	r3, #1
 8007f3a:	d116      	bne.n	8007f6a <LSM303AGR_MAG_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM303AGR_MAG_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8007f3c:	4b22      	ldr	r3, [pc, #136]	; (8007fc8 <LSM303AGR_MAG_0_Probe+0x13c>)
 8007f3e:	691b      	ldr	r3, [r3, #16]
 8007f40:	4a22      	ldr	r2, [pc, #136]	; (8007fcc <LSM303AGR_MAG_0_Probe+0x140>)
 8007f42:	3306      	adds	r3, #6
 8007f44:	4922      	ldr	r1, [pc, #136]	; (8007fd0 <LSM303AGR_MAG_0_Probe+0x144>)
 8007f46:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM303AGR_MAG_Driver;

      if (MotionDrv[IKS01A2_LSM303AGR_MAG_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_MAG_0]) != LSM303AGR_OK)
 8007f4a:	4b1d      	ldr	r3, [pc, #116]	; (8007fc0 <LSM303AGR_MAG_0_Probe+0x134>)
 8007f4c:	689b      	ldr	r3, [r3, #8]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4a1a      	ldr	r2, [pc, #104]	; (8007fbc <LSM303AGR_MAG_0_Probe+0x130>)
 8007f52:	6892      	ldr	r2, [r2, #8]
 8007f54:	4610      	mov	r0, r2
 8007f56:	4798      	blx	r3
 8007f58:	4603      	mov	r3, r0
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d003      	beq.n	8007f66 <LSM303AGR_MAG_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007f5e:	f06f 0304 	mvn.w	r3, #4
 8007f62:	647b      	str	r3, [r7, #68]	; 0x44
 8007f64:	e001      	b.n	8007f6a <LSM303AGR_MAG_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8007f66:	2300      	movs	r3, #0
 8007f68:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 8007f6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d107      	bne.n	8007f80 <LSM303AGR_MAG_0_Probe+0xf4>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f003 0302 	and.w	r3, r3, #2
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d002      	beq.n	8007f80 <LSM303AGR_MAG_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8007f7a:	f06f 0304 	mvn.w	r3, #4
 8007f7e:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8007f80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d107      	bne.n	8007f96 <LSM303AGR_MAG_0_Probe+0x10a>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f003 0301 	and.w	r3, r3, #1
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d002      	beq.n	8007f96 <LSM303AGR_MAG_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8007f90:	f06f 0304 	mvn.w	r3, #4
 8007f94:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 8007f96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	3748      	adds	r7, #72	; 0x48
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}
 8007fa0:	08002a65 	.word	0x08002a65
 8007fa4:	08002ac9 	.word	0x08002ac9
 8007fa8:	08002b7d 	.word	0x08002b7d
 8007fac:	08002b19 	.word	0x08002b19
 8007fb0:	08002be1 	.word	0x08002be1
 8007fb4:	20002420 	.word	0x20002420
 8007fb8:	200023b8 	.word	0x200023b8
 8007fbc:	2000d5d4 	.word	0x2000d5d4
 8007fc0:	200023ac 	.word	0x200023ac
 8007fc4:	20001274 	.word	0x20001274
 8007fc8:	20001314 	.word	0x20001314
 8007fcc:	20002388 	.word	0x20002388
 8007fd0:	20001284 	.word	0x20001284

08007fd4 <BSP_LED_Init>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b088      	sub	sp, #32
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	4603      	mov	r3, r0
 8007fdc:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* LED2 is on the same GPIO Port */
  LED2_GPIO_CLK_ENABLE();    
 8007fde:	2300      	movs	r3, #0
 8007fe0:	60bb      	str	r3, [r7, #8]
 8007fe2:	4b16      	ldr	r3, [pc, #88]	; (800803c <BSP_LED_Init+0x68>)
 8007fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fe6:	4a15      	ldr	r2, [pc, #84]	; (800803c <BSP_LED_Init+0x68>)
 8007fe8:	f043 0301 	orr.w	r3, r3, #1
 8007fec:	6313      	str	r3, [r2, #48]	; 0x30
 8007fee:	4b13      	ldr	r3, [pc, #76]	; (800803c <BSP_LED_Init+0x68>)
 8007ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ff2:	f003 0301 	and.w	r3, r3, #1
 8007ff6:	60bb      	str	r3, [r7, #8]
 8007ff8:	68bb      	ldr	r3, [r7, #8]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin   = LED_PIN [Led];
 8007ffa:	2320      	movs	r3, #32
 8007ffc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8007ffe:	2301      	movs	r3, #1
 8008000:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8008002:	2301      	movs	r3, #1
 8008004:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH; 
 8008006:	2302      	movs	r3, #2
 8008008:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(LED_PORT [Led], &GPIO_InitStruct); 
 800800a:	79fb      	ldrb	r3, [r7, #7]
 800800c:	4a0c      	ldr	r2, [pc, #48]	; (8008040 <BSP_LED_Init+0x6c>)
 800800e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008012:	f107 020c 	add.w	r2, r7, #12
 8008016:	4611      	mov	r1, r2
 8008018:	4618      	mov	r0, r3
 800801a:	f001 fc4d 	bl	80098b8 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 800801e:	79fb      	ldrb	r3, [r7, #7]
 8008020:	4a07      	ldr	r2, [pc, #28]	; (8008040 <BSP_LED_Init+0x6c>)
 8008022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008026:	2120      	movs	r1, #32
 8008028:	2200      	movs	r2, #0
 800802a:	4618      	mov	r0, r3
 800802c:	f001 fec0 	bl	8009db0 <HAL_GPIO_WritePin>
  
  return BSP_ERROR_NONE;
 8008030:	2300      	movs	r3, #0
}
 8008032:	4618      	mov	r0, r3
 8008034:	3720      	adds	r7, #32
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}
 800803a:	bf00      	nop
 800803c:	40023800 	.word	0x40023800
 8008040:	20001328 	.word	0x20001328

08008044 <BSP_LED_On>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b082      	sub	sp, #8
 8008048:	af00      	add	r7, sp, #0
 800804a:	4603      	mov	r3, r0
 800804c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_SET);
 800804e:	79fb      	ldrb	r3, [r7, #7]
 8008050:	4a06      	ldr	r2, [pc, #24]	; (800806c <BSP_LED_On+0x28>)
 8008052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008056:	2120      	movs	r1, #32
 8008058:	2201      	movs	r2, #1
 800805a:	4618      	mov	r0, r3
 800805c:	f001 fea8 	bl	8009db0 <HAL_GPIO_WritePin>
  
  return BSP_ERROR_NONE;
 8008060:	2300      	movs	r3, #0
}
 8008062:	4618      	mov	r0, r3
 8008064:	3708      	adds	r7, #8
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}
 800806a:	bf00      	nop
 800806c:	20001328 	.word	0x20001328

08008070 <BSP_LED_Off>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b082      	sub	sp, #8
 8008074:	af00      	add	r7, sp, #0
 8008076:	4603      	mov	r3, r0
 8008078:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 800807a:	79fb      	ldrb	r3, [r7, #7]
 800807c:	4a06      	ldr	r2, [pc, #24]	; (8008098 <BSP_LED_Off+0x28>)
 800807e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008082:	2120      	movs	r1, #32
 8008084:	2200      	movs	r2, #0
 8008086:	4618      	mov	r0, r3
 8008088:	f001 fe92 	bl	8009db0 <HAL_GPIO_WritePin>
  
  return BSP_ERROR_NONE;
 800808c:	2300      	movs	r3, #0
}
 800808e:	4618      	mov	r0, r3
 8008090:	3708      	adds	r7, #8
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}
 8008096:	bf00      	nop
 8008098:	20001328 	.word	0x20001328

0800809c <BSP_LED_Toggle>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b082      	sub	sp, #8
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	4603      	mov	r3, r0
 80080a4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80080a6:	79fb      	ldrb	r3, [r7, #7]
 80080a8:	4a06      	ldr	r2, [pc, #24]	; (80080c4 <BSP_LED_Toggle+0x28>)
 80080aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080ae:	2220      	movs	r2, #32
 80080b0:	4611      	mov	r1, r2
 80080b2:	4618      	mov	r0, r3
 80080b4:	f001 fe95 	bl	8009de2 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 80080b8:	2300      	movs	r3, #0
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3708      	adds	r7, #8
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}
 80080c2:	bf00      	nop
 80080c4:	20001328 	.word	0x20001328

080080c8 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line 
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b08a      	sub	sp, #40	; 0x28
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	4603      	mov	r3, r0
 80080d0:	460a      	mov	r2, r1
 80080d2:	71fb      	strb	r3, [r7, #7]
 80080d4:	4613      	mov	r3, r2
 80080d6:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80080d8:	2300      	movs	r3, #0
 80080da:	627b      	str	r3, [r7, #36]	; 0x24
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};                                                
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};  											     
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  
  /* Enable the BUTTON clock*/ 
  USER_BUTTON_GPIO_CLK_ENABLE();
 80080dc:	2300      	movs	r3, #0
 80080de:	60fb      	str	r3, [r7, #12]
 80080e0:	4b32      	ldr	r3, [pc, #200]	; (80081ac <BSP_PB_Init+0xe4>)
 80080e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080e4:	4a31      	ldr	r2, [pc, #196]	; (80081ac <BSP_PB_Init+0xe4>)
 80080e6:	f043 0304 	orr.w	r3, r3, #4
 80080ea:	6313      	str	r3, [r2, #48]	; 0x30
 80080ec:	4b2f      	ldr	r3, [pc, #188]	; (80081ac <BSP_PB_Init+0xe4>)
 80080ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080f0:	f003 0304 	and.w	r3, r3, #4
 80080f4:	60fb      	str	r3, [r7, #12]
 80080f6:	68fb      	ldr	r3, [r7, #12]
  gpio_init_structure.Pin = BUTTON_PIN [Button];
 80080f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80080fc:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 80080fe:	2302      	movs	r3, #2
 8008100:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8008102:	2302      	movs	r3, #2
 8008104:	61fb      	str	r3, [r7, #28]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8008106:	79bb      	ldrb	r3, [r7, #6]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d10c      	bne.n	8008126 <BSP_PB_Init+0x5e>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800810c:	2300      	movs	r3, #0
 800810e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8008110:	79fb      	ldrb	r3, [r7, #7]
 8008112:	4a27      	ldr	r2, [pc, #156]	; (80081b0 <BSP_PB_Init+0xe8>)
 8008114:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008118:	f107 0210 	add.w	r2, r7, #16
 800811c:	4611      	mov	r1, r2
 800811e:	4618      	mov	r0, r3
 8008120:	f001 fbca 	bl	80098b8 <HAL_GPIO_Init>
 8008124:	e03d      	b.n	80081a2 <BSP_PB_Init+0xda>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {      
    /* Configure Button pin as input with External interrupt */    
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8008126:	4b23      	ldr	r3, [pc, #140]	; (80081b4 <BSP_PB_Init+0xec>)
 8008128:	617b      	str	r3, [r7, #20]
    
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800812a:	79fb      	ldrb	r3, [r7, #7]
 800812c:	4a20      	ldr	r2, [pc, #128]	; (80081b0 <BSP_PB_Init+0xe8>)
 800812e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008132:	f107 0210 	add.w	r2, r7, #16
 8008136:	4611      	mov	r1, r2
 8008138:	4618      	mov	r0, r3
 800813a:	f001 fbbd 	bl	80098b8 <HAL_GPIO_Init>
    
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 800813e:	79fb      	ldrb	r3, [r7, #7]
 8008140:	00db      	lsls	r3, r3, #3
 8008142:	4a1d      	ldr	r2, [pc, #116]	; (80081b8 <BSP_PB_Init+0xf0>)
 8008144:	1898      	adds	r0, r3, r2
 8008146:	79fb      	ldrb	r3, [r7, #7]
 8008148:	4a1c      	ldr	r2, [pc, #112]	; (80081bc <BSP_PB_Init+0xf4>)
 800814a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800814e:	4619      	mov	r1, r3
 8008150:	f001 fb7a 	bl	8009848 <HAL_EXTI_GetHandle>
 8008154:	4603      	mov	r3, r0
 8008156:	2b00      	cmp	r3, #0
 8008158:	d003      	beq.n	8008162 <BSP_PB_Init+0x9a>
	{
      ret = BSP_ERROR_PERIPH_FAILURE;
 800815a:	f06f 0303 	mvn.w	r3, #3
 800815e:	627b      	str	r3, [r7, #36]	; 0x24
 8008160:	e01f      	b.n	80081a2 <BSP_PB_Init+0xda>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 8008162:	79fb      	ldrb	r3, [r7, #7]
 8008164:	00db      	lsls	r3, r3, #3
 8008166:	4a14      	ldr	r2, [pc, #80]	; (80081b8 <BSP_PB_Init+0xf0>)
 8008168:	1898      	adds	r0, r3, r2
 800816a:	79fb      	ldrb	r3, [r7, #7]
 800816c:	4a14      	ldr	r2, [pc, #80]	; (80081c0 <BSP_PB_Init+0xf8>)
 800816e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008172:	461a      	mov	r2, r3
 8008174:	2100      	movs	r1, #0
 8008176:	f001 fb4d 	bl	8009814 <HAL_EXTI_RegisterCallback>
 800817a:	4603      	mov	r3, r0
 800817c:	2b00      	cmp	r3, #0
 800817e:	d003      	beq.n	8008188 <BSP_PB_Init+0xc0>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8008180:	f06f 0303 	mvn.w	r3, #3
 8008184:	627b      	str	r3, [r7, #36]	; 0x24
 8008186:	e00c      	b.n	80081a2 <BSP_PB_Init+0xda>
    }
	else
	{
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8008188:	2028      	movs	r0, #40	; 0x28
 800818a:	79fb      	ldrb	r3, [r7, #7]
 800818c:	4a0d      	ldr	r2, [pc, #52]	; (80081c4 <BSP_PB_Init+0xfc>)
 800818e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008192:	2200      	movs	r2, #0
 8008194:	4619      	mov	r1, r3
 8008196:	f000 ff7c 	bl	8009092 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 800819a:	2328      	movs	r3, #40	; 0x28
 800819c:	4618      	mov	r0, r3
 800819e:	f000 ff94 	bl	80090ca <HAL_NVIC_EnableIRQ>
	}
  }
  
  return ret;
 80081a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80081a4:	4618      	mov	r0, r3
 80081a6:	3728      	adds	r7, #40	; 0x28
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}
 80081ac:	40023800 	.word	0x40023800
 80081b0:	2000132c 	.word	0x2000132c
 80081b4:	10110000 	.word	0x10110000
 80081b8:	20001330 	.word	0x20001330
 80081bc:	0801d1b8 	.word	0x0801d1b8
 80081c0:	0801d1bc 	.word	0x0801d1bc
 80081c4:	0801d1c0 	.word	0x0801d1c0

080081c8 <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b082      	sub	sp, #8
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	4603      	mov	r3, r0
 80081d0:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 80081d2:	79fb      	ldrb	r3, [r7, #7]
 80081d4:	4a09      	ldr	r2, [pc, #36]	; (80081fc <BSP_PB_GetState+0x34>)
 80081d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80081de:	4611      	mov	r1, r2
 80081e0:	4618      	mov	r0, r3
 80081e2:	f001 fdcd 	bl	8009d80 <HAL_GPIO_ReadPin>
 80081e6:	4603      	mov	r3, r0
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	bf0c      	ite	eq
 80081ec:	2301      	moveq	r3, #1
 80081ee:	2300      	movne	r3, #0
 80081f0:	b2db      	uxtb	r3, r3
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3708      	adds	r7, #8
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}
 80081fa:	bf00      	nop
 80081fc:	2000132c 	.word	0x2000132c

08008200 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{   
 8008200:	b580      	push	{r7, lr}
 8008202:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8008204:	2000      	movs	r0, #0
 8008206:	f7f9 f86f 	bl	80012e8 <BSP_PB_Callback>
}
 800820a:	bf00      	nop
 800820c:	bd80      	pop	{r7, pc}
	...

08008210 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM) 
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b084      	sub	sp, #16
 8008214:	af00      	add	r7, sp, #0
 8008216:	4603      	mov	r3, r0
 8008218:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800821a:	2300      	movs	r3, #0
 800821c:	60fb      	str	r3, [r7, #12]
  
  if(COM > COMn)
 800821e:	79fb      	ldrb	r3, [r7, #7]
 8008220:	2b01      	cmp	r3, #1
 8008222:	d903      	bls.n	800822c <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8008224:	f06f 0301 	mvn.w	r3, #1
 8008228:	60fb      	str	r3, [r7, #12]
 800822a:	e01c      	b.n	8008266 <BSP_COM_Init+0x56>
  }
  else
  {  
     hcom_uart[COM].Instance = COM_USART[COM];
 800822c:	79fa      	ldrb	r2, [r7, #7]
 800822e:	79fb      	ldrb	r3, [r7, #7]
 8008230:	490f      	ldr	r1, [pc, #60]	; (8008270 <BSP_COM_Init+0x60>)
 8008232:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008236:	490f      	ldr	r1, [pc, #60]	; (8008274 <BSP_COM_Init+0x64>)
 8008238:	019b      	lsls	r3, r3, #6
 800823a:	440b      	add	r3, r1
 800823c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 800823e:	79fb      	ldrb	r3, [r7, #7]
 8008240:	019b      	lsls	r3, r3, #6
 8008242:	4a0c      	ldr	r2, [pc, #48]	; (8008274 <BSP_COM_Init+0x64>)
 8008244:	4413      	add	r3, r2
 8008246:	4618      	mov	r0, r3
 8008248:	f000 f85c 	bl	8008304 <USART2_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
  
    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 800824c:	79fb      	ldrb	r3, [r7, #7]
 800824e:	019b      	lsls	r3, r3, #6
 8008250:	4a08      	ldr	r2, [pc, #32]	; (8008274 <BSP_COM_Init+0x64>)
 8008252:	4413      	add	r3, r2
 8008254:	4618      	mov	r0, r3
 8008256:	f000 f80f 	bl	8008278 <MX_USART2_UART_Init>
 800825a:	4603      	mov	r3, r0
 800825c:	2b00      	cmp	r3, #0
 800825e:	d002      	beq.n	8008266 <BSP_COM_Init+0x56>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8008260:	f06f 0303 	mvn.w	r3, #3
 8008264:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8008266:	68fb      	ldr	r3, [r7, #12]
}
 8008268:	4618      	mov	r0, r3
 800826a:	3710      	adds	r7, #16
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}
 8008270:	20001338 	.word	0x20001338
 8008274:	2000d5e0 	.word	0x2000d5e0

08008278 <MX_USART2_UART_Init>:
 */

/* USART2 init function */ 

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b084      	sub	sp, #16
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008280:	2300      	movs	r3, #0
 8008282:	73fb      	strb	r3, [r7, #15]
  huart->Instance = USART2;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	4a12      	ldr	r2, [pc, #72]	; (80082d0 <MX_USART2_UART_Init+0x58>)
 8008288:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008290:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2200      	movs	r2, #0
 8008296:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2200      	movs	r2, #0
 800829c:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2200      	movs	r2, #0
 80082a2:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	220c      	movs	r2, #12
 80082a8:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2200      	movs	r2, #0
 80082ae:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2200      	movs	r2, #0
 80082b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(huart) != HAL_OK)
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f004 fb96 	bl	800c9e8 <HAL_UART_Init>
 80082bc:	4603      	mov	r3, r0
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d001      	beq.n	80082c6 <MX_USART2_UART_Init+0x4e>
  {
    ret = HAL_ERROR;
 80082c2:	2301      	movs	r3, #1
 80082c4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80082c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3710      	adds	r7, #16
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}
 80082d0:	40004400 	.word	0x40004400

080082d4 <__io_putchar>:
#ifdef __GNUC__ 
 int __io_putchar (int ch) 
#else 
 int fputc (int ch, FILE *f) 
#endif /* __GNUC__ */ 
{ 
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b082      	sub	sp, #8
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT); 
 80082dc:	4b07      	ldr	r3, [pc, #28]	; (80082fc <__io_putchar+0x28>)
 80082de:	781b      	ldrb	r3, [r3, #0]
 80082e0:	019b      	lsls	r3, r3, #6
 80082e2:	4a07      	ldr	r2, [pc, #28]	; (8008300 <__io_putchar+0x2c>)
 80082e4:	1898      	adds	r0, r3, r2
 80082e6:	1d39      	adds	r1, r7, #4
 80082e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80082ec:	2201      	movs	r2, #1
 80082ee:	f004 fbd2 	bl	800ca96 <HAL_UART_Transmit>
  return ch;
 80082f2:	687b      	ldr	r3, [r7, #4]
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3708      	adds	r7, #8
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}
 80082fc:	2000244c 	.word	0x2000244c
 8008300:	2000d5e0 	.word	0x2000d5e0

08008304 <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b08a      	sub	sp, #40	; 0x28
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 800830c:	2300      	movs	r3, #0
 800830e:	613b      	str	r3, [r7, #16]
 8008310:	4b16      	ldr	r3, [pc, #88]	; (800836c <USART2_MspInit+0x68>)
 8008312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008314:	4a15      	ldr	r2, [pc, #84]	; (800836c <USART2_MspInit+0x68>)
 8008316:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800831a:	6413      	str	r3, [r2, #64]	; 0x40
 800831c:	4b13      	ldr	r3, [pc, #76]	; (800836c <USART2_MspInit+0x68>)
 800831e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008324:	613b      	str	r3, [r7, #16]
 8008326:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008328:	2300      	movs	r3, #0
 800832a:	60fb      	str	r3, [r7, #12]
 800832c:	4b0f      	ldr	r3, [pc, #60]	; (800836c <USART2_MspInit+0x68>)
 800832e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008330:	4a0e      	ldr	r2, [pc, #56]	; (800836c <USART2_MspInit+0x68>)
 8008332:	f043 0301 	orr.w	r3, r3, #1
 8008336:	6313      	str	r3, [r2, #48]	; 0x30
 8008338:	4b0c      	ldr	r3, [pc, #48]	; (800836c <USART2_MspInit+0x68>)
 800833a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800833c:	f003 0301 	and.w	r3, r3, #1
 8008340:	60fb      	str	r3, [r7, #12]
 8008342:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8008344:	230c      	movs	r3, #12
 8008346:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008348:	2302      	movs	r3, #2
 800834a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800834c:	2300      	movs	r3, #0
 800834e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008350:	2300      	movs	r3, #0
 8008352:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8008354:	2307      	movs	r3, #7
 8008356:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008358:	f107 0314 	add.w	r3, r7, #20
 800835c:	4619      	mov	r1, r3
 800835e:	4804      	ldr	r0, [pc, #16]	; (8008370 <USART2_MspInit+0x6c>)
 8008360:	f001 faaa 	bl	80098b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 8008364:	bf00      	nop
 8008366:	3728      	adds	r7, #40	; 0x28
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}
 800836c:	40023800 	.word	0x40023800
 8008370:	40020000 	.word	0x40020000

08008374 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008378:	4b0e      	ldr	r3, [pc, #56]	; (80083b4 <HAL_Init+0x40>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	4a0d      	ldr	r2, [pc, #52]	; (80083b4 <HAL_Init+0x40>)
 800837e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008382:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008384:	4b0b      	ldr	r3, [pc, #44]	; (80083b4 <HAL_Init+0x40>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	4a0a      	ldr	r2, [pc, #40]	; (80083b4 <HAL_Init+0x40>)
 800838a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800838e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008390:	4b08      	ldr	r3, [pc, #32]	; (80083b4 <HAL_Init+0x40>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	4a07      	ldr	r2, [pc, #28]	; (80083b4 <HAL_Init+0x40>)
 8008396:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800839a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800839c:	2003      	movs	r0, #3
 800839e:	f000 fe6d 	bl	800907c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80083a2:	2000      	movs	r0, #0
 80083a4:	f000 f808 	bl	80083b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80083a8:	f7fa f9a0 	bl	80026ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80083ac:	2300      	movs	r3, #0
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	bd80      	pop	{r7, pc}
 80083b2:	bf00      	nop
 80083b4:	40023c00 	.word	0x40023c00

080083b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b082      	sub	sp, #8
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80083c0:	4b12      	ldr	r3, [pc, #72]	; (800840c <HAL_InitTick+0x54>)
 80083c2:	681a      	ldr	r2, [r3, #0]
 80083c4:	4b12      	ldr	r3, [pc, #72]	; (8008410 <HAL_InitTick+0x58>)
 80083c6:	781b      	ldrb	r3, [r3, #0]
 80083c8:	4619      	mov	r1, r3
 80083ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80083ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80083d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80083d6:	4618      	mov	r0, r3
 80083d8:	f000 fe85 	bl	80090e6 <HAL_SYSTICK_Config>
 80083dc:	4603      	mov	r3, r0
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d001      	beq.n	80083e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80083e2:	2301      	movs	r3, #1
 80083e4:	e00e      	b.n	8008404 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2b0f      	cmp	r3, #15
 80083ea:	d80a      	bhi.n	8008402 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80083ec:	2200      	movs	r2, #0
 80083ee:	6879      	ldr	r1, [r7, #4]
 80083f0:	f04f 30ff 	mov.w	r0, #4294967295
 80083f4:	f000 fe4d 	bl	8009092 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80083f8:	4a06      	ldr	r2, [pc, #24]	; (8008414 <HAL_InitTick+0x5c>)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80083fe:	2300      	movs	r3, #0
 8008400:	e000      	b.n	8008404 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008402:	2301      	movs	r3, #1
}
 8008404:	4618      	mov	r0, r3
 8008406:	3708      	adds	r7, #8
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}
 800840c:	200011cc 	.word	0x200011cc
 8008410:	20001340 	.word	0x20001340
 8008414:	2000133c 	.word	0x2000133c

08008418 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008418:	b480      	push	{r7}
 800841a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800841c:	4b06      	ldr	r3, [pc, #24]	; (8008438 <HAL_IncTick+0x20>)
 800841e:	781b      	ldrb	r3, [r3, #0]
 8008420:	461a      	mov	r2, r3
 8008422:	4b06      	ldr	r3, [pc, #24]	; (800843c <HAL_IncTick+0x24>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4413      	add	r3, r2
 8008428:	4a04      	ldr	r2, [pc, #16]	; (800843c <HAL_IncTick+0x24>)
 800842a:	6013      	str	r3, [r2, #0]
}
 800842c:	bf00      	nop
 800842e:	46bd      	mov	sp, r7
 8008430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008434:	4770      	bx	lr
 8008436:	bf00      	nop
 8008438:	20001340 	.word	0x20001340
 800843c:	2000d620 	.word	0x2000d620

08008440 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008440:	b480      	push	{r7}
 8008442:	af00      	add	r7, sp, #0
  return uwTick;
 8008444:	4b03      	ldr	r3, [pc, #12]	; (8008454 <HAL_GetTick+0x14>)
 8008446:	681b      	ldr	r3, [r3, #0]
}
 8008448:	4618      	mov	r0, r3
 800844a:	46bd      	mov	sp, r7
 800844c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008450:	4770      	bx	lr
 8008452:	bf00      	nop
 8008454:	2000d620 	.word	0x2000d620

08008458 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b084      	sub	sp, #16
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008460:	f7ff ffee 	bl	8008440 <HAL_GetTick>
 8008464:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008470:	d005      	beq.n	800847e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008472:	4b09      	ldr	r3, [pc, #36]	; (8008498 <HAL_Delay+0x40>)
 8008474:	781b      	ldrb	r3, [r3, #0]
 8008476:	461a      	mov	r2, r3
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	4413      	add	r3, r2
 800847c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800847e:	bf00      	nop
 8008480:	f7ff ffde 	bl	8008440 <HAL_GetTick>
 8008484:	4602      	mov	r2, r0
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	1ad3      	subs	r3, r2, r3
 800848a:	68fa      	ldr	r2, [r7, #12]
 800848c:	429a      	cmp	r2, r3
 800848e:	d8f7      	bhi.n	8008480 <HAL_Delay+0x28>
  {
  }
}
 8008490:	bf00      	nop
 8008492:	3710      	adds	r7, #16
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}
 8008498:	20001340 	.word	0x20001340

0800849c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b084      	sub	sp, #16
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80084a4:	2300      	movs	r3, #0
 80084a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d101      	bne.n	80084b2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80084ae:	2301      	movs	r3, #1
 80084b0:	e033      	b.n	800851a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d109      	bne.n	80084ce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f7fa f93e 	bl	800273c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2200      	movs	r2, #0
 80084c4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2200      	movs	r2, #0
 80084ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084d2:	f003 0310 	and.w	r3, r3, #16
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d118      	bne.n	800850c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084de:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80084e2:	f023 0302 	bic.w	r3, r3, #2
 80084e6:	f043 0202 	orr.w	r2, r3, #2
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f000 fb6c 	bl	8008bcc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2200      	movs	r2, #0
 80084f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084fe:	f023 0303 	bic.w	r3, r3, #3
 8008502:	f043 0201 	orr.w	r2, r3, #1
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	641a      	str	r2, [r3, #64]	; 0x40
 800850a:	e001      	b.n	8008510 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800850c:	2301      	movs	r3, #1
 800850e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2200      	movs	r2, #0
 8008514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8008518:	7bfb      	ldrb	r3, [r7, #15]
}
 800851a:	4618      	mov	r0, r3
 800851c:	3710      	adds	r7, #16
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}

08008522 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8008522:	b580      	push	{r7, lr}
 8008524:	b084      	sub	sp, #16
 8008526:	af00      	add	r7, sp, #0
 8008528:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800852a:	2300      	movs	r3, #0
 800852c:	60fb      	str	r3, [r7, #12]
 800852e:	2300      	movs	r3, #0
 8008530:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f003 0302 	and.w	r3, r3, #2
 800853c:	2b02      	cmp	r3, #2
 800853e:	bf0c      	ite	eq
 8008540:	2301      	moveq	r3, #1
 8008542:	2300      	movne	r3, #0
 8008544:	b2db      	uxtb	r3, r3
 8008546:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	685b      	ldr	r3, [r3, #4]
 800854e:	f003 0320 	and.w	r3, r3, #32
 8008552:	2b20      	cmp	r3, #32
 8008554:	bf0c      	ite	eq
 8008556:	2301      	moveq	r3, #1
 8008558:	2300      	movne	r3, #0
 800855a:	b2db      	uxtb	r3, r3
 800855c:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d049      	beq.n	80085f8 <HAL_ADC_IRQHandler+0xd6>
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d046      	beq.n	80085f8 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800856e:	f003 0310 	and.w	r3, r3, #16
 8008572:	2b00      	cmp	r3, #0
 8008574:	d105      	bne.n	8008582 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800857a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	689b      	ldr	r3, [r3, #8]
 8008588:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800858c:	2b00      	cmp	r3, #0
 800858e:	d12b      	bne.n	80085e8 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008594:	2b00      	cmp	r3, #0
 8008596:	d127      	bne.n	80085e8 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800859e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d006      	beq.n	80085b4 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	689b      	ldr	r3, [r3, #8]
 80085ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d119      	bne.n	80085e8 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	685a      	ldr	r2, [r3, #4]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f022 0220 	bic.w	r2, r2, #32
 80085c2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d105      	bne.n	80085e8 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085e0:	f043 0201 	orr.w	r2, r3, #1
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f7f9 ff85 	bl	80024f8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f06f 0212 	mvn.w	r2, #18
 80085f6:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f003 0304 	and.w	r3, r3, #4
 8008602:	2b04      	cmp	r3, #4
 8008604:	bf0c      	ite	eq
 8008606:	2301      	moveq	r3, #1
 8008608:	2300      	movne	r3, #0
 800860a:	b2db      	uxtb	r3, r3
 800860c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	685b      	ldr	r3, [r3, #4]
 8008614:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008618:	2b80      	cmp	r3, #128	; 0x80
 800861a:	bf0c      	ite	eq
 800861c:	2301      	moveq	r3, #1
 800861e:	2300      	movne	r3, #0
 8008620:	b2db      	uxtb	r3, r3
 8008622:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d057      	beq.n	80086da <HAL_ADC_IRQHandler+0x1b8>
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d054      	beq.n	80086da <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008634:	f003 0310 	and.w	r3, r3, #16
 8008638:	2b00      	cmp	r3, #0
 800863a:	d105      	bne.n	8008648 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008640:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	689b      	ldr	r3, [r3, #8]
 800864e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008652:	2b00      	cmp	r3, #0
 8008654:	d139      	bne.n	80086ca <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800865c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8008660:	2b00      	cmp	r3, #0
 8008662:	d006      	beq.n	8008672 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	689b      	ldr	r3, [r3, #8]
 800866a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800866e:	2b00      	cmp	r3, #0
 8008670:	d12b      	bne.n	80086ca <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	685b      	ldr	r3, [r3, #4]
 8008678:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800867c:	2b00      	cmp	r3, #0
 800867e:	d124      	bne.n	80086ca <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	689b      	ldr	r3, [r3, #8]
 8008686:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800868a:	2b00      	cmp	r3, #0
 800868c:	d11d      	bne.n	80086ca <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8008692:	2b00      	cmp	r3, #0
 8008694:	d119      	bne.n	80086ca <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	685a      	ldr	r2, [r3, #4]
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80086a4:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d105      	bne.n	80086ca <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086c2:	f043 0201 	orr.w	r2, r3, #1
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f000 fbfc 	bl	8008ec8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f06f 020c 	mvn.w	r2, #12
 80086d8:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f003 0301 	and.w	r3, r3, #1
 80086e4:	2b01      	cmp	r3, #1
 80086e6:	bf0c      	ite	eq
 80086e8:	2301      	moveq	r3, #1
 80086ea:	2300      	movne	r3, #0
 80086ec:	b2db      	uxtb	r3, r3
 80086ee:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	685b      	ldr	r3, [r3, #4]
 80086f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086fa:	2b40      	cmp	r3, #64	; 0x40
 80086fc:	bf0c      	ite	eq
 80086fe:	2301      	moveq	r3, #1
 8008700:	2300      	movne	r3, #0
 8008702:	b2db      	uxtb	r3, r3
 8008704:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d017      	beq.n	800873c <HAL_ADC_IRQHandler+0x21a>
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d014      	beq.n	800873c <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f003 0301 	and.w	r3, r3, #1
 800871c:	2b01      	cmp	r3, #1
 800871e:	d10d      	bne.n	800873c <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008724:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f000 f917 	bl	8008960 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f06f 0201 	mvn.w	r2, #1
 800873a:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f003 0320 	and.w	r3, r3, #32
 8008746:	2b20      	cmp	r3, #32
 8008748:	bf0c      	ite	eq
 800874a:	2301      	moveq	r3, #1
 800874c:	2300      	movne	r3, #0
 800874e:	b2db      	uxtb	r3, r3
 8008750:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	685b      	ldr	r3, [r3, #4]
 8008758:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800875c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008760:	bf0c      	ite	eq
 8008762:	2301      	moveq	r3, #1
 8008764:	2300      	movne	r3, #0
 8008766:	b2db      	uxtb	r3, r3
 8008768:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d015      	beq.n	800879c <HAL_ADC_IRQHandler+0x27a>
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d012      	beq.n	800879c <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800877a:	f043 0202 	orr.w	r2, r3, #2
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f06f 0220 	mvn.w	r2, #32
 800878a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f000 f8f1 	bl	8008974 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f06f 0220 	mvn.w	r2, #32
 800879a:	601a      	str	r2, [r3, #0]
  }
}
 800879c:	bf00      	nop
 800879e:	3710      	adds	r7, #16
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}

080087a4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b086      	sub	sp, #24
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	60f8      	str	r0, [r7, #12]
 80087ac:	60b9      	str	r1, [r7, #8]
 80087ae:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80087b0:	2300      	movs	r3, #0
 80087b2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087ba:	2b01      	cmp	r3, #1
 80087bc:	d101      	bne.n	80087c2 <HAL_ADC_Start_DMA+0x1e>
 80087be:	2302      	movs	r3, #2
 80087c0:	e0b1      	b.n	8008926 <HAL_ADC_Start_DMA+0x182>
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	2201      	movs	r2, #1
 80087c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	689b      	ldr	r3, [r3, #8]
 80087d0:	f003 0301 	and.w	r3, r3, #1
 80087d4:	2b01      	cmp	r3, #1
 80087d6:	d018      	beq.n	800880a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	689a      	ldr	r2, [r3, #8]
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f042 0201 	orr.w	r2, r2, #1
 80087e6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80087e8:	4b51      	ldr	r3, [pc, #324]	; (8008930 <HAL_ADC_Start_DMA+0x18c>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	4a51      	ldr	r2, [pc, #324]	; (8008934 <HAL_ADC_Start_DMA+0x190>)
 80087ee:	fba2 2303 	umull	r2, r3, r2, r3
 80087f2:	0c9a      	lsrs	r2, r3, #18
 80087f4:	4613      	mov	r3, r2
 80087f6:	005b      	lsls	r3, r3, #1
 80087f8:	4413      	add	r3, r2
 80087fa:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80087fc:	e002      	b.n	8008804 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	3b01      	subs	r3, #1
 8008802:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8008804:	693b      	ldr	r3, [r7, #16]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d1f9      	bne.n	80087fe <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	689b      	ldr	r3, [r3, #8]
 8008810:	f003 0301 	and.w	r3, r3, #1
 8008814:	2b01      	cmp	r3, #1
 8008816:	f040 8085 	bne.w	8008924 <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800881e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8008822:	f023 0301 	bic.w	r3, r3, #1
 8008826:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	685b      	ldr	r3, [r3, #4]
 8008834:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008838:	2b00      	cmp	r3, #0
 800883a:	d007      	beq.n	800884c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008840:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008844:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008850:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008854:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008858:	d106      	bne.n	8008868 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800885e:	f023 0206 	bic.w	r2, r3, #6
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	645a      	str	r2, [r3, #68]	; 0x44
 8008866:	e002      	b.n	800886e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	2200      	movs	r2, #0
 800886c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2200      	movs	r2, #0
 8008872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008876:	4b30      	ldr	r3, [pc, #192]	; (8008938 <HAL_ADC_Start_DMA+0x194>)
 8008878:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800887e:	4a2f      	ldr	r2, [pc, #188]	; (800893c <HAL_ADC_Start_DMA+0x198>)
 8008880:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008886:	4a2e      	ldr	r2, [pc, #184]	; (8008940 <HAL_ADC_Start_DMA+0x19c>)
 8008888:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800888e:	4a2d      	ldr	r2, [pc, #180]	; (8008944 <HAL_ADC_Start_DMA+0x1a0>)
 8008890:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800889a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	685a      	ldr	r2, [r3, #4]
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80088aa:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	689a      	ldr	r2, [r3, #8]
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80088ba:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	334c      	adds	r3, #76	; 0x4c
 80088c6:	4619      	mov	r1, r3
 80088c8:	68ba      	ldr	r2, [r7, #8]
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f000 fce2 	bl	8009294 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80088d0:	697b      	ldr	r3, [r7, #20]
 80088d2:	685b      	ldr	r3, [r3, #4]
 80088d4:	f003 031f 	and.w	r3, r3, #31
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d10f      	bne.n	80088fc <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	689b      	ldr	r3, [r3, #8]
 80088e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d11c      	bne.n	8008924 <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	689a      	ldr	r2, [r3, #8]
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80088f8:	609a      	str	r2, [r3, #8]
 80088fa:	e013      	b.n	8008924 <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	4a11      	ldr	r2, [pc, #68]	; (8008948 <HAL_ADC_Start_DMA+0x1a4>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d10e      	bne.n	8008924 <HAL_ADC_Start_DMA+0x180>
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	689b      	ldr	r3, [r3, #8]
 800890c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008910:	2b00      	cmp	r3, #0
 8008912:	d107      	bne.n	8008924 <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	689a      	ldr	r2, [r3, #8]
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8008922:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8008924:	2300      	movs	r3, #0
}
 8008926:	4618      	mov	r0, r3
 8008928:	3718      	adds	r7, #24
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}
 800892e:	bf00      	nop
 8008930:	200011cc 	.word	0x200011cc
 8008934:	431bde83 	.word	0x431bde83
 8008938:	40012300 	.word	0x40012300
 800893c:	08008dc5 	.word	0x08008dc5
 8008940:	08008e7f 	.word	0x08008e7f
 8008944:	08008e9b 	.word	0x08008e9b
 8008948:	40012000 	.word	0x40012000

0800894c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800894c:	b480      	push	{r7}
 800894e:	b083      	sub	sp, #12
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8008954:	bf00      	nop
 8008956:	370c      	adds	r7, #12
 8008958:	46bd      	mov	sp, r7
 800895a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895e:	4770      	bx	lr

08008960 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8008960:	b480      	push	{r7}
 8008962:	b083      	sub	sp, #12
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8008968:	bf00      	nop
 800896a:	370c      	adds	r7, #12
 800896c:	46bd      	mov	sp, r7
 800896e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008972:	4770      	bx	lr

08008974 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8008974:	b480      	push	{r7}
 8008976:	b083      	sub	sp, #12
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800897c:	bf00      	nop
 800897e:	370c      	adds	r7, #12
 8008980:	46bd      	mov	sp, r7
 8008982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008986:	4770      	bx	lr

08008988 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8008988:	b480      	push	{r7}
 800898a:	b085      	sub	sp, #20
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
 8008990:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8008992:	2300      	movs	r3, #0
 8008994:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800899c:	2b01      	cmp	r3, #1
 800899e:	d101      	bne.n	80089a4 <HAL_ADC_ConfigChannel+0x1c>
 80089a0:	2302      	movs	r3, #2
 80089a2:	e105      	b.n	8008bb0 <HAL_ADC_ConfigChannel+0x228>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2201      	movs	r2, #1
 80089a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	2b09      	cmp	r3, #9
 80089b2:	d925      	bls.n	8008a00 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	68d9      	ldr	r1, [r3, #12]
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	b29b      	uxth	r3, r3
 80089c0:	461a      	mov	r2, r3
 80089c2:	4613      	mov	r3, r2
 80089c4:	005b      	lsls	r3, r3, #1
 80089c6:	4413      	add	r3, r2
 80089c8:	3b1e      	subs	r3, #30
 80089ca:	2207      	movs	r2, #7
 80089cc:	fa02 f303 	lsl.w	r3, r2, r3
 80089d0:	43da      	mvns	r2, r3
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	400a      	ands	r2, r1
 80089d8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	68d9      	ldr	r1, [r3, #12]
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	689a      	ldr	r2, [r3, #8]
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	b29b      	uxth	r3, r3
 80089ea:	4618      	mov	r0, r3
 80089ec:	4603      	mov	r3, r0
 80089ee:	005b      	lsls	r3, r3, #1
 80089f0:	4403      	add	r3, r0
 80089f2:	3b1e      	subs	r3, #30
 80089f4:	409a      	lsls	r2, r3
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	430a      	orrs	r2, r1
 80089fc:	60da      	str	r2, [r3, #12]
 80089fe:	e022      	b.n	8008a46 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	6919      	ldr	r1, [r3, #16]
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	b29b      	uxth	r3, r3
 8008a0c:	461a      	mov	r2, r3
 8008a0e:	4613      	mov	r3, r2
 8008a10:	005b      	lsls	r3, r3, #1
 8008a12:	4413      	add	r3, r2
 8008a14:	2207      	movs	r2, #7
 8008a16:	fa02 f303 	lsl.w	r3, r2, r3
 8008a1a:	43da      	mvns	r2, r3
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	400a      	ands	r2, r1
 8008a22:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	6919      	ldr	r1, [r3, #16]
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	689a      	ldr	r2, [r3, #8]
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	b29b      	uxth	r3, r3
 8008a34:	4618      	mov	r0, r3
 8008a36:	4603      	mov	r3, r0
 8008a38:	005b      	lsls	r3, r3, #1
 8008a3a:	4403      	add	r3, r0
 8008a3c:	409a      	lsls	r2, r3
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	430a      	orrs	r2, r1
 8008a44:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	685b      	ldr	r3, [r3, #4]
 8008a4a:	2b06      	cmp	r3, #6
 8008a4c:	d824      	bhi.n	8008a98 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	685a      	ldr	r2, [r3, #4]
 8008a58:	4613      	mov	r3, r2
 8008a5a:	009b      	lsls	r3, r3, #2
 8008a5c:	4413      	add	r3, r2
 8008a5e:	3b05      	subs	r3, #5
 8008a60:	221f      	movs	r2, #31
 8008a62:	fa02 f303 	lsl.w	r3, r2, r3
 8008a66:	43da      	mvns	r2, r3
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	400a      	ands	r2, r1
 8008a6e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	b29b      	uxth	r3, r3
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	685a      	ldr	r2, [r3, #4]
 8008a82:	4613      	mov	r3, r2
 8008a84:	009b      	lsls	r3, r3, #2
 8008a86:	4413      	add	r3, r2
 8008a88:	3b05      	subs	r3, #5
 8008a8a:	fa00 f203 	lsl.w	r2, r0, r3
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	430a      	orrs	r2, r1
 8008a94:	635a      	str	r2, [r3, #52]	; 0x34
 8008a96:	e04c      	b.n	8008b32 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	685b      	ldr	r3, [r3, #4]
 8008a9c:	2b0c      	cmp	r3, #12
 8008a9e:	d824      	bhi.n	8008aea <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	685a      	ldr	r2, [r3, #4]
 8008aaa:	4613      	mov	r3, r2
 8008aac:	009b      	lsls	r3, r3, #2
 8008aae:	4413      	add	r3, r2
 8008ab0:	3b23      	subs	r3, #35	; 0x23
 8008ab2:	221f      	movs	r2, #31
 8008ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8008ab8:	43da      	mvns	r2, r3
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	400a      	ands	r2, r1
 8008ac0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	b29b      	uxth	r3, r3
 8008ace:	4618      	mov	r0, r3
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	685a      	ldr	r2, [r3, #4]
 8008ad4:	4613      	mov	r3, r2
 8008ad6:	009b      	lsls	r3, r3, #2
 8008ad8:	4413      	add	r3, r2
 8008ada:	3b23      	subs	r3, #35	; 0x23
 8008adc:	fa00 f203 	lsl.w	r2, r0, r3
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	430a      	orrs	r2, r1
 8008ae6:	631a      	str	r2, [r3, #48]	; 0x30
 8008ae8:	e023      	b.n	8008b32 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	685a      	ldr	r2, [r3, #4]
 8008af4:	4613      	mov	r3, r2
 8008af6:	009b      	lsls	r3, r3, #2
 8008af8:	4413      	add	r3, r2
 8008afa:	3b41      	subs	r3, #65	; 0x41
 8008afc:	221f      	movs	r2, #31
 8008afe:	fa02 f303 	lsl.w	r3, r2, r3
 8008b02:	43da      	mvns	r2, r3
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	400a      	ands	r2, r1
 8008b0a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	b29b      	uxth	r3, r3
 8008b18:	4618      	mov	r0, r3
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	685a      	ldr	r2, [r3, #4]
 8008b1e:	4613      	mov	r3, r2
 8008b20:	009b      	lsls	r3, r3, #2
 8008b22:	4413      	add	r3, r2
 8008b24:	3b41      	subs	r3, #65	; 0x41
 8008b26:	fa00 f203 	lsl.w	r2, r0, r3
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	430a      	orrs	r2, r1
 8008b30:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008b32:	4b22      	ldr	r3, [pc, #136]	; (8008bbc <HAL_ADC_ConfigChannel+0x234>)
 8008b34:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4a21      	ldr	r2, [pc, #132]	; (8008bc0 <HAL_ADC_ConfigChannel+0x238>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d109      	bne.n	8008b54 <HAL_ADC_ConfigChannel+0x1cc>
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	2b12      	cmp	r3, #18
 8008b46:	d105      	bne.n	8008b54 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	685b      	ldr	r3, [r3, #4]
 8008b4c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	4a19      	ldr	r2, [pc, #100]	; (8008bc0 <HAL_ADC_ConfigChannel+0x238>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d123      	bne.n	8008ba6 <HAL_ADC_ConfigChannel+0x21e>
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	2b10      	cmp	r3, #16
 8008b64:	d003      	beq.n	8008b6e <HAL_ADC_ConfigChannel+0x1e6>
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	2b11      	cmp	r3, #17
 8008b6c:	d11b      	bne.n	8008ba6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	685b      	ldr	r3, [r3, #4]
 8008b72:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	2b10      	cmp	r3, #16
 8008b80:	d111      	bne.n	8008ba6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8008b82:	4b10      	ldr	r3, [pc, #64]	; (8008bc4 <HAL_ADC_ConfigChannel+0x23c>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	4a10      	ldr	r2, [pc, #64]	; (8008bc8 <HAL_ADC_ConfigChannel+0x240>)
 8008b88:	fba2 2303 	umull	r2, r3, r2, r3
 8008b8c:	0c9a      	lsrs	r2, r3, #18
 8008b8e:	4613      	mov	r3, r2
 8008b90:	009b      	lsls	r3, r3, #2
 8008b92:	4413      	add	r3, r2
 8008b94:	005b      	lsls	r3, r3, #1
 8008b96:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8008b98:	e002      	b.n	8008ba0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	3b01      	subs	r3, #1
 8008b9e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d1f9      	bne.n	8008b9a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8008bae:	2300      	movs	r3, #0
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	3714      	adds	r7, #20
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bba:	4770      	bx	lr
 8008bbc:	40012300 	.word	0x40012300
 8008bc0:	40012000 	.word	0x40012000
 8008bc4:	200011cc 	.word	0x200011cc
 8008bc8:	431bde83 	.word	0x431bde83

08008bcc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008bcc:	b480      	push	{r7}
 8008bce:	b085      	sub	sp, #20
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008bd4:	4b79      	ldr	r3, [pc, #484]	; (8008dbc <ADC_Init+0x1f0>)
 8008bd6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	685b      	ldr	r3, [r3, #4]
 8008bdc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	685a      	ldr	r2, [r3, #4]
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	685b      	ldr	r3, [r3, #4]
 8008bec:	431a      	orrs	r2, r3
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	685a      	ldr	r2, [r3, #4]
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008c00:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	6859      	ldr	r1, [r3, #4]
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	691b      	ldr	r3, [r3, #16]
 8008c0c:	021a      	lsls	r2, r3, #8
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	430a      	orrs	r2, r1
 8008c14:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	685a      	ldr	r2, [r3, #4]
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8008c24:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	6859      	ldr	r1, [r3, #4]
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	689a      	ldr	r2, [r3, #8]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	430a      	orrs	r2, r1
 8008c36:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	689a      	ldr	r2, [r3, #8]
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008c46:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	6899      	ldr	r1, [r3, #8]
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	68da      	ldr	r2, [r3, #12]
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	430a      	orrs	r2, r1
 8008c58:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c5e:	4a58      	ldr	r2, [pc, #352]	; (8008dc0 <ADC_Init+0x1f4>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d022      	beq.n	8008caa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	689a      	ldr	r2, [r3, #8]
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008c72:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	6899      	ldr	r1, [r3, #8]
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	430a      	orrs	r2, r1
 8008c84:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	689a      	ldr	r2, [r3, #8]
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008c94:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	6899      	ldr	r1, [r3, #8]
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	430a      	orrs	r2, r1
 8008ca6:	609a      	str	r2, [r3, #8]
 8008ca8:	e00f      	b.n	8008cca <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	689a      	ldr	r2, [r3, #8]
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008cb8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	689a      	ldr	r2, [r3, #8]
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008cc8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	689a      	ldr	r2, [r3, #8]
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f022 0202 	bic.w	r2, r2, #2
 8008cd8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	6899      	ldr	r1, [r3, #8]
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	7e1b      	ldrb	r3, [r3, #24]
 8008ce4:	005a      	lsls	r2, r3, #1
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	430a      	orrs	r2, r1
 8008cec:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d01b      	beq.n	8008d30 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	685a      	ldr	r2, [r3, #4]
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008d06:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	685a      	ldr	r2, [r3, #4]
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8008d16:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	6859      	ldr	r1, [r3, #4]
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d22:	3b01      	subs	r3, #1
 8008d24:	035a      	lsls	r2, r3, #13
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	430a      	orrs	r2, r1
 8008d2c:	605a      	str	r2, [r3, #4]
 8008d2e:	e007      	b.n	8008d40 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	685a      	ldr	r2, [r3, #4]
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008d3e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8008d4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	69db      	ldr	r3, [r3, #28]
 8008d5a:	3b01      	subs	r3, #1
 8008d5c:	051a      	lsls	r2, r3, #20
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	430a      	orrs	r2, r1
 8008d64:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	689a      	ldr	r2, [r3, #8]
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008d74:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	6899      	ldr	r1, [r3, #8]
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008d82:	025a      	lsls	r2, r3, #9
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	430a      	orrs	r2, r1
 8008d8a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	689a      	ldr	r2, [r3, #8]
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d9a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	6899      	ldr	r1, [r3, #8]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	695b      	ldr	r3, [r3, #20]
 8008da6:	029a      	lsls	r2, r3, #10
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	430a      	orrs	r2, r1
 8008dae:	609a      	str	r2, [r3, #8]
}
 8008db0:	bf00      	nop
 8008db2:	3714      	adds	r7, #20
 8008db4:	46bd      	mov	sp, r7
 8008db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dba:	4770      	bx	lr
 8008dbc:	40012300 	.word	0x40012300
 8008dc0:	0f000001 	.word	0x0f000001

08008dc4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b084      	sub	sp, #16
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dd0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dd6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d13c      	bne.n	8008e58 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008de2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	689b      	ldr	r3, [r3, #8]
 8008df0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d12b      	bne.n	8008e50 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d127      	bne.n	8008e50 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e06:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d006      	beq.n	8008e1c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	689b      	ldr	r3, [r3, #8]
 8008e14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d119      	bne.n	8008e50 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	685a      	ldr	r2, [r3, #4]
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f022 0220 	bic.w	r2, r2, #32
 8008e2a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e30:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d105      	bne.n	8008e50 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e48:	f043 0201 	orr.w	r2, r3, #1
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008e50:	68f8      	ldr	r0, [r7, #12]
 8008e52:	f7f9 fb51 	bl	80024f8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8008e56:	e00e      	b.n	8008e76 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e5c:	f003 0310 	and.w	r3, r3, #16
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d003      	beq.n	8008e6c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8008e64:	68f8      	ldr	r0, [r7, #12]
 8008e66:	f7ff fd85 	bl	8008974 <HAL_ADC_ErrorCallback>
}
 8008e6a:	e004      	b.n	8008e76 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	4798      	blx	r3
}
 8008e76:	bf00      	nop
 8008e78:	3710      	adds	r7, #16
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}

08008e7e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8008e7e:	b580      	push	{r7, lr}
 8008e80:	b084      	sub	sp, #16
 8008e82:	af00      	add	r7, sp, #0
 8008e84:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e8a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8008e8c:	68f8      	ldr	r0, [r7, #12]
 8008e8e:	f7ff fd5d 	bl	800894c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008e92:	bf00      	nop
 8008e94:	3710      	adds	r7, #16
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bd80      	pop	{r7, pc}

08008e9a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8008e9a:	b580      	push	{r7, lr}
 8008e9c:	b084      	sub	sp, #16
 8008e9e:	af00      	add	r7, sp, #0
 8008ea0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ea6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	2240      	movs	r2, #64	; 0x40
 8008eac:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008eb2:	f043 0204 	orr.w	r2, r3, #4
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8008eba:	68f8      	ldr	r0, [r7, #12]
 8008ebc:	f7ff fd5a 	bl	8008974 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008ec0:	bf00      	nop
 8008ec2:	3710      	adds	r7, #16
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}

08008ec8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8008ec8:	b480      	push	{r7}
 8008eca:	b083      	sub	sp, #12
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8008ed0:	bf00      	nop
 8008ed2:	370c      	adds	r7, #12
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eda:	4770      	bx	lr

08008edc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008edc:	b480      	push	{r7}
 8008ede:	b085      	sub	sp, #20
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f003 0307 	and.w	r3, r3, #7
 8008eea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008eec:	4b0c      	ldr	r3, [pc, #48]	; (8008f20 <__NVIC_SetPriorityGrouping+0x44>)
 8008eee:	68db      	ldr	r3, [r3, #12]
 8008ef0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008ef2:	68ba      	ldr	r2, [r7, #8]
 8008ef4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008ef8:	4013      	ands	r3, r2
 8008efa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008f04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008f08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008f0e:	4a04      	ldr	r2, [pc, #16]	; (8008f20 <__NVIC_SetPriorityGrouping+0x44>)
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	60d3      	str	r3, [r2, #12]
}
 8008f14:	bf00      	nop
 8008f16:	3714      	adds	r7, #20
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1e:	4770      	bx	lr
 8008f20:	e000ed00 	.word	0xe000ed00

08008f24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008f24:	b480      	push	{r7}
 8008f26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008f28:	4b04      	ldr	r3, [pc, #16]	; (8008f3c <__NVIC_GetPriorityGrouping+0x18>)
 8008f2a:	68db      	ldr	r3, [r3, #12]
 8008f2c:	0a1b      	lsrs	r3, r3, #8
 8008f2e:	f003 0307 	and.w	r3, r3, #7
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	46bd      	mov	sp, r7
 8008f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3a:	4770      	bx	lr
 8008f3c:	e000ed00 	.word	0xe000ed00

08008f40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008f40:	b480      	push	{r7}
 8008f42:	b083      	sub	sp, #12
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	4603      	mov	r3, r0
 8008f48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	db0b      	blt.n	8008f6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008f52:	79fb      	ldrb	r3, [r7, #7]
 8008f54:	f003 021f 	and.w	r2, r3, #31
 8008f58:	4907      	ldr	r1, [pc, #28]	; (8008f78 <__NVIC_EnableIRQ+0x38>)
 8008f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f5e:	095b      	lsrs	r3, r3, #5
 8008f60:	2001      	movs	r0, #1
 8008f62:	fa00 f202 	lsl.w	r2, r0, r2
 8008f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008f6a:	bf00      	nop
 8008f6c:	370c      	adds	r7, #12
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f74:	4770      	bx	lr
 8008f76:	bf00      	nop
 8008f78:	e000e100 	.word	0xe000e100

08008f7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b083      	sub	sp, #12
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	4603      	mov	r3, r0
 8008f84:	6039      	str	r1, [r7, #0]
 8008f86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	db0a      	blt.n	8008fa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	b2da      	uxtb	r2, r3
 8008f94:	490c      	ldr	r1, [pc, #48]	; (8008fc8 <__NVIC_SetPriority+0x4c>)
 8008f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f9a:	0112      	lsls	r2, r2, #4
 8008f9c:	b2d2      	uxtb	r2, r2
 8008f9e:	440b      	add	r3, r1
 8008fa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008fa4:	e00a      	b.n	8008fbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	b2da      	uxtb	r2, r3
 8008faa:	4908      	ldr	r1, [pc, #32]	; (8008fcc <__NVIC_SetPriority+0x50>)
 8008fac:	79fb      	ldrb	r3, [r7, #7]
 8008fae:	f003 030f 	and.w	r3, r3, #15
 8008fb2:	3b04      	subs	r3, #4
 8008fb4:	0112      	lsls	r2, r2, #4
 8008fb6:	b2d2      	uxtb	r2, r2
 8008fb8:	440b      	add	r3, r1
 8008fba:	761a      	strb	r2, [r3, #24]
}
 8008fbc:	bf00      	nop
 8008fbe:	370c      	adds	r7, #12
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc6:	4770      	bx	lr
 8008fc8:	e000e100 	.word	0xe000e100
 8008fcc:	e000ed00 	.word	0xe000ed00

08008fd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b089      	sub	sp, #36	; 0x24
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	60f8      	str	r0, [r7, #12]
 8008fd8:	60b9      	str	r1, [r7, #8]
 8008fda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	f003 0307 	and.w	r3, r3, #7
 8008fe2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008fe4:	69fb      	ldr	r3, [r7, #28]
 8008fe6:	f1c3 0307 	rsb	r3, r3, #7
 8008fea:	2b04      	cmp	r3, #4
 8008fec:	bf28      	it	cs
 8008fee:	2304      	movcs	r3, #4
 8008ff0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008ff2:	69fb      	ldr	r3, [r7, #28]
 8008ff4:	3304      	adds	r3, #4
 8008ff6:	2b06      	cmp	r3, #6
 8008ff8:	d902      	bls.n	8009000 <NVIC_EncodePriority+0x30>
 8008ffa:	69fb      	ldr	r3, [r7, #28]
 8008ffc:	3b03      	subs	r3, #3
 8008ffe:	e000      	b.n	8009002 <NVIC_EncodePriority+0x32>
 8009000:	2300      	movs	r3, #0
 8009002:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009004:	f04f 32ff 	mov.w	r2, #4294967295
 8009008:	69bb      	ldr	r3, [r7, #24]
 800900a:	fa02 f303 	lsl.w	r3, r2, r3
 800900e:	43da      	mvns	r2, r3
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	401a      	ands	r2, r3
 8009014:	697b      	ldr	r3, [r7, #20]
 8009016:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009018:	f04f 31ff 	mov.w	r1, #4294967295
 800901c:	697b      	ldr	r3, [r7, #20]
 800901e:	fa01 f303 	lsl.w	r3, r1, r3
 8009022:	43d9      	mvns	r1, r3
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009028:	4313      	orrs	r3, r2
         );
}
 800902a:	4618      	mov	r0, r3
 800902c:	3724      	adds	r7, #36	; 0x24
 800902e:	46bd      	mov	sp, r7
 8009030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009034:	4770      	bx	lr
	...

08009038 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b082      	sub	sp, #8
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	3b01      	subs	r3, #1
 8009044:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009048:	d301      	bcc.n	800904e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800904a:	2301      	movs	r3, #1
 800904c:	e00f      	b.n	800906e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800904e:	4a0a      	ldr	r2, [pc, #40]	; (8009078 <SysTick_Config+0x40>)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	3b01      	subs	r3, #1
 8009054:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009056:	210f      	movs	r1, #15
 8009058:	f04f 30ff 	mov.w	r0, #4294967295
 800905c:	f7ff ff8e 	bl	8008f7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009060:	4b05      	ldr	r3, [pc, #20]	; (8009078 <SysTick_Config+0x40>)
 8009062:	2200      	movs	r2, #0
 8009064:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009066:	4b04      	ldr	r3, [pc, #16]	; (8009078 <SysTick_Config+0x40>)
 8009068:	2207      	movs	r2, #7
 800906a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800906c:	2300      	movs	r3, #0
}
 800906e:	4618      	mov	r0, r3
 8009070:	3708      	adds	r7, #8
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}
 8009076:	bf00      	nop
 8009078:	e000e010 	.word	0xe000e010

0800907c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b082      	sub	sp, #8
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f7ff ff29 	bl	8008edc <__NVIC_SetPriorityGrouping>
}
 800908a:	bf00      	nop
 800908c:	3708      	adds	r7, #8
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}

08009092 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009092:	b580      	push	{r7, lr}
 8009094:	b086      	sub	sp, #24
 8009096:	af00      	add	r7, sp, #0
 8009098:	4603      	mov	r3, r0
 800909a:	60b9      	str	r1, [r7, #8]
 800909c:	607a      	str	r2, [r7, #4]
 800909e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80090a0:	2300      	movs	r3, #0
 80090a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80090a4:	f7ff ff3e 	bl	8008f24 <__NVIC_GetPriorityGrouping>
 80090a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80090aa:	687a      	ldr	r2, [r7, #4]
 80090ac:	68b9      	ldr	r1, [r7, #8]
 80090ae:	6978      	ldr	r0, [r7, #20]
 80090b0:	f7ff ff8e 	bl	8008fd0 <NVIC_EncodePriority>
 80090b4:	4602      	mov	r2, r0
 80090b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80090ba:	4611      	mov	r1, r2
 80090bc:	4618      	mov	r0, r3
 80090be:	f7ff ff5d 	bl	8008f7c <__NVIC_SetPriority>
}
 80090c2:	bf00      	nop
 80090c4:	3718      	adds	r7, #24
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}

080090ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80090ca:	b580      	push	{r7, lr}
 80090cc:	b082      	sub	sp, #8
 80090ce:	af00      	add	r7, sp, #0
 80090d0:	4603      	mov	r3, r0
 80090d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80090d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80090d8:	4618      	mov	r0, r3
 80090da:	f7ff ff31 	bl	8008f40 <__NVIC_EnableIRQ>
}
 80090de:	bf00      	nop
 80090e0:	3708      	adds	r7, #8
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}

080090e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80090e6:	b580      	push	{r7, lr}
 80090e8:	b082      	sub	sp, #8
 80090ea:	af00      	add	r7, sp, #0
 80090ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f7ff ffa2 	bl	8009038 <SysTick_Config>
 80090f4:	4603      	mov	r3, r0
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	3708      	adds	r7, #8
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}

080090fe <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80090fe:	b580      	push	{r7, lr}
 8009100:	b082      	sub	sp, #8
 8009102:	af00      	add	r7, sp, #0
 8009104:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d101      	bne.n	8009110 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800910c:	2301      	movs	r3, #1
 800910e:	e00e      	b.n	800912e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	795b      	ldrb	r3, [r3, #5]
 8009114:	b2db      	uxtb	r3, r3
 8009116:	2b00      	cmp	r3, #0
 8009118:	d105      	bne.n	8009126 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2200      	movs	r2, #0
 800911e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f7f9 fb8b 	bl	800283c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2201      	movs	r2, #1
 800912a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800912c:	2300      	movs	r3, #0
}
 800912e:	4618      	mov	r0, r3
 8009130:	3708      	adds	r7, #8
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}
	...

08009138 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b086      	sub	sp, #24
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8009140:	2300      	movs	r3, #0
 8009142:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8009144:	f7ff f97c 	bl	8008440 <HAL_GetTick>
 8009148:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d101      	bne.n	8009154 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8009150:	2301      	movs	r3, #1
 8009152:	e099      	b.n	8009288 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2200      	movs	r2, #0
 8009158:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2202      	movs	r2, #2
 8009160:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	681a      	ldr	r2, [r3, #0]
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f022 0201 	bic.w	r2, r2, #1
 8009172:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009174:	e00f      	b.n	8009196 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009176:	f7ff f963 	bl	8008440 <HAL_GetTick>
 800917a:	4602      	mov	r2, r0
 800917c:	693b      	ldr	r3, [r7, #16]
 800917e:	1ad3      	subs	r3, r2, r3
 8009180:	2b05      	cmp	r3, #5
 8009182:	d908      	bls.n	8009196 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2220      	movs	r2, #32
 8009188:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2203      	movs	r2, #3
 800918e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8009192:	2303      	movs	r3, #3
 8009194:	e078      	b.n	8009288 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f003 0301 	and.w	r3, r3, #1
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d1e8      	bne.n	8009176 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80091ac:	697a      	ldr	r2, [r7, #20]
 80091ae:	4b38      	ldr	r3, [pc, #224]	; (8009290 <HAL_DMA_Init+0x158>)
 80091b0:	4013      	ands	r3, r2
 80091b2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	685a      	ldr	r2, [r3, #4]
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	689b      	ldr	r3, [r3, #8]
 80091bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80091c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	691b      	ldr	r3, [r3, #16]
 80091c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80091ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	699b      	ldr	r3, [r3, #24]
 80091d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80091da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6a1b      	ldr	r3, [r3, #32]
 80091e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80091e2:	697a      	ldr	r2, [r7, #20]
 80091e4:	4313      	orrs	r3, r2
 80091e6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ec:	2b04      	cmp	r3, #4
 80091ee:	d107      	bne.n	8009200 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091f8:	4313      	orrs	r3, r2
 80091fa:	697a      	ldr	r2, [r7, #20]
 80091fc:	4313      	orrs	r3, r2
 80091fe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	697a      	ldr	r2, [r7, #20]
 8009206:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	695b      	ldr	r3, [r3, #20]
 800920e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8009210:	697b      	ldr	r3, [r7, #20]
 8009212:	f023 0307 	bic.w	r3, r3, #7
 8009216:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800921c:	697a      	ldr	r2, [r7, #20]
 800921e:	4313      	orrs	r3, r2
 8009220:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009226:	2b04      	cmp	r3, #4
 8009228:	d117      	bne.n	800925a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800922e:	697a      	ldr	r2, [r7, #20]
 8009230:	4313      	orrs	r3, r2
 8009232:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009238:	2b00      	cmp	r3, #0
 800923a:	d00e      	beq.n	800925a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f000 fa6f 	bl	8009720 <DMA_CheckFifoParam>
 8009242:	4603      	mov	r3, r0
 8009244:	2b00      	cmp	r3, #0
 8009246:	d008      	beq.n	800925a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2240      	movs	r2, #64	; 0x40
 800924c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2201      	movs	r2, #1
 8009252:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8009256:	2301      	movs	r3, #1
 8009258:	e016      	b.n	8009288 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	697a      	ldr	r2, [r7, #20]
 8009260:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f000 fa26 	bl	80096b4 <DMA_CalcBaseAndBitshift>
 8009268:	4603      	mov	r3, r0
 800926a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009270:	223f      	movs	r2, #63	; 0x3f
 8009272:	409a      	lsls	r2, r3
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2200      	movs	r2, #0
 800927c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2201      	movs	r2, #1
 8009282:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8009286:	2300      	movs	r3, #0
}
 8009288:	4618      	mov	r0, r3
 800928a:	3718      	adds	r7, #24
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}
 8009290:	f010803f 	.word	0xf010803f

08009294 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b086      	sub	sp, #24
 8009298:	af00      	add	r7, sp, #0
 800929a:	60f8      	str	r0, [r7, #12]
 800929c:	60b9      	str	r1, [r7, #8]
 800929e:	607a      	str	r2, [r7, #4]
 80092a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80092a2:	2300      	movs	r3, #0
 80092a4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092aa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80092b2:	2b01      	cmp	r3, #1
 80092b4:	d101      	bne.n	80092ba <HAL_DMA_Start_IT+0x26>
 80092b6:	2302      	movs	r3, #2
 80092b8:	e040      	b.n	800933c <HAL_DMA_Start_IT+0xa8>
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	2201      	movs	r2, #1
 80092be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80092c8:	b2db      	uxtb	r3, r3
 80092ca:	2b01      	cmp	r3, #1
 80092cc:	d12f      	bne.n	800932e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	2202      	movs	r2, #2
 80092d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	2200      	movs	r2, #0
 80092da:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	687a      	ldr	r2, [r7, #4]
 80092e0:	68b9      	ldr	r1, [r7, #8]
 80092e2:	68f8      	ldr	r0, [r7, #12]
 80092e4:	f000 f9b8 	bl	8009658 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80092ec:	223f      	movs	r2, #63	; 0x3f
 80092ee:	409a      	lsls	r2, r3
 80092f0:	693b      	ldr	r3, [r7, #16]
 80092f2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	681a      	ldr	r2, [r3, #0]
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f042 0216 	orr.w	r2, r2, #22
 8009302:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009308:	2b00      	cmp	r3, #0
 800930a:	d007      	beq.n	800931c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	681a      	ldr	r2, [r3, #0]
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f042 0208 	orr.w	r2, r2, #8
 800931a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	681a      	ldr	r2, [r3, #0]
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	f042 0201 	orr.w	r2, r2, #1
 800932a:	601a      	str	r2, [r3, #0]
 800932c:	e005      	b.n	800933a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	2200      	movs	r2, #0
 8009332:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8009336:	2302      	movs	r3, #2
 8009338:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800933a:	7dfb      	ldrb	r3, [r7, #23]
}
 800933c:	4618      	mov	r0, r3
 800933e:	3718      	adds	r7, #24
 8009340:	46bd      	mov	sp, r7
 8009342:	bd80      	pop	{r7, pc}

08009344 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b086      	sub	sp, #24
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800934c:	2300      	movs	r3, #0
 800934e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8009350:	4b92      	ldr	r3, [pc, #584]	; (800959c <HAL_DMA_IRQHandler+0x258>)
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	4a92      	ldr	r2, [pc, #584]	; (80095a0 <HAL_DMA_IRQHandler+0x25c>)
 8009356:	fba2 2303 	umull	r2, r3, r2, r3
 800935a:	0a9b      	lsrs	r3, r3, #10
 800935c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009362:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8009364:	693b      	ldr	r3, [r7, #16]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800936e:	2208      	movs	r2, #8
 8009370:	409a      	lsls	r2, r3
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	4013      	ands	r3, r2
 8009376:	2b00      	cmp	r3, #0
 8009378:	d01a      	beq.n	80093b0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f003 0304 	and.w	r3, r3, #4
 8009384:	2b00      	cmp	r3, #0
 8009386:	d013      	beq.n	80093b0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	681a      	ldr	r2, [r3, #0]
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f022 0204 	bic.w	r2, r2, #4
 8009396:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800939c:	2208      	movs	r2, #8
 800939e:	409a      	lsls	r2, r3
 80093a0:	693b      	ldr	r3, [r7, #16]
 80093a2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093a8:	f043 0201 	orr.w	r2, r3, #1
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093b4:	2201      	movs	r2, #1
 80093b6:	409a      	lsls	r2, r3
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	4013      	ands	r3, r2
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d012      	beq.n	80093e6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	695b      	ldr	r3, [r3, #20]
 80093c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d00b      	beq.n	80093e6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093d2:	2201      	movs	r2, #1
 80093d4:	409a      	lsls	r2, r3
 80093d6:	693b      	ldr	r3, [r7, #16]
 80093d8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093de:	f043 0202 	orr.w	r2, r3, #2
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093ea:	2204      	movs	r2, #4
 80093ec:	409a      	lsls	r2, r3
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	4013      	ands	r3, r2
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d012      	beq.n	800941c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f003 0302 	and.w	r3, r3, #2
 8009400:	2b00      	cmp	r3, #0
 8009402:	d00b      	beq.n	800941c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009408:	2204      	movs	r2, #4
 800940a:	409a      	lsls	r2, r3
 800940c:	693b      	ldr	r3, [r7, #16]
 800940e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009414:	f043 0204 	orr.w	r2, r3, #4
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009420:	2210      	movs	r2, #16
 8009422:	409a      	lsls	r2, r3
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	4013      	ands	r3, r2
 8009428:	2b00      	cmp	r3, #0
 800942a:	d043      	beq.n	80094b4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f003 0308 	and.w	r3, r3, #8
 8009436:	2b00      	cmp	r3, #0
 8009438:	d03c      	beq.n	80094b4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800943e:	2210      	movs	r2, #16
 8009440:	409a      	lsls	r2, r3
 8009442:	693b      	ldr	r3, [r7, #16]
 8009444:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009450:	2b00      	cmp	r3, #0
 8009452:	d018      	beq.n	8009486 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800945e:	2b00      	cmp	r3, #0
 8009460:	d108      	bne.n	8009474 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009466:	2b00      	cmp	r3, #0
 8009468:	d024      	beq.n	80094b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	4798      	blx	r3
 8009472:	e01f      	b.n	80094b4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009478:	2b00      	cmp	r3, #0
 800947a:	d01b      	beq.n	80094b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	4798      	blx	r3
 8009484:	e016      	b.n	80094b4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009490:	2b00      	cmp	r3, #0
 8009492:	d107      	bne.n	80094a4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	681a      	ldr	r2, [r3, #0]
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f022 0208 	bic.w	r2, r2, #8
 80094a2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d003      	beq.n	80094b4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094b0:	6878      	ldr	r0, [r7, #4]
 80094b2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094b8:	2220      	movs	r2, #32
 80094ba:	409a      	lsls	r2, r3
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	4013      	ands	r3, r2
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	f000 808e 	beq.w	80095e2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f003 0310 	and.w	r3, r3, #16
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	f000 8086 	beq.w	80095e2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094da:	2220      	movs	r2, #32
 80094dc:	409a      	lsls	r2, r3
 80094de:	693b      	ldr	r3, [r7, #16]
 80094e0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80094e8:	b2db      	uxtb	r3, r3
 80094ea:	2b05      	cmp	r3, #5
 80094ec:	d136      	bne.n	800955c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	681a      	ldr	r2, [r3, #0]
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	f022 0216 	bic.w	r2, r2, #22
 80094fc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	695a      	ldr	r2, [r3, #20]
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800950c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009512:	2b00      	cmp	r3, #0
 8009514:	d103      	bne.n	800951e <HAL_DMA_IRQHandler+0x1da>
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800951a:	2b00      	cmp	r3, #0
 800951c:	d007      	beq.n	800952e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	681a      	ldr	r2, [r3, #0]
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f022 0208 	bic.w	r2, r2, #8
 800952c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009532:	223f      	movs	r2, #63	; 0x3f
 8009534:	409a      	lsls	r2, r3
 8009536:	693b      	ldr	r3, [r7, #16]
 8009538:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2200      	movs	r2, #0
 800953e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2201      	movs	r2, #1
 8009546:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800954e:	2b00      	cmp	r3, #0
 8009550:	d07d      	beq.n	800964e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	4798      	blx	r3
        }
        return;
 800955a:	e078      	b.n	800964e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009566:	2b00      	cmp	r3, #0
 8009568:	d01c      	beq.n	80095a4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009574:	2b00      	cmp	r3, #0
 8009576:	d108      	bne.n	800958a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800957c:	2b00      	cmp	r3, #0
 800957e:	d030      	beq.n	80095e2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	4798      	blx	r3
 8009588:	e02b      	b.n	80095e2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800958e:	2b00      	cmp	r3, #0
 8009590:	d027      	beq.n	80095e2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	4798      	blx	r3
 800959a:	e022      	b.n	80095e2 <HAL_DMA_IRQHandler+0x29e>
 800959c:	200011cc 	.word	0x200011cc
 80095a0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d10f      	bne.n	80095d2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	681a      	ldr	r2, [r3, #0]
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f022 0210 	bic.w	r2, r2, #16
 80095c0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2200      	movs	r2, #0
 80095c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2201      	movs	r2, #1
 80095ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d003      	beq.n	80095e2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d032      	beq.n	8009650 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095ee:	f003 0301 	and.w	r3, r3, #1
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d022      	beq.n	800963c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2205      	movs	r2, #5
 80095fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	681a      	ldr	r2, [r3, #0]
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	f022 0201 	bic.w	r2, r2, #1
 800960c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	3301      	adds	r3, #1
 8009612:	60bb      	str	r3, [r7, #8]
 8009614:	697a      	ldr	r2, [r7, #20]
 8009616:	429a      	cmp	r2, r3
 8009618:	d307      	bcc.n	800962a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f003 0301 	and.w	r3, r3, #1
 8009624:	2b00      	cmp	r3, #0
 8009626:	d1f2      	bne.n	800960e <HAL_DMA_IRQHandler+0x2ca>
 8009628:	e000      	b.n	800962c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800962a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2200      	movs	r2, #0
 8009630:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2201      	movs	r2, #1
 8009638:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009640:	2b00      	cmp	r3, #0
 8009642:	d005      	beq.n	8009650 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	4798      	blx	r3
 800964c:	e000      	b.n	8009650 <HAL_DMA_IRQHandler+0x30c>
        return;
 800964e:	bf00      	nop
    }
  }
}
 8009650:	3718      	adds	r7, #24
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}
 8009656:	bf00      	nop

08009658 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009658:	b480      	push	{r7}
 800965a:	b085      	sub	sp, #20
 800965c:	af00      	add	r7, sp, #0
 800965e:	60f8      	str	r0, [r7, #12]
 8009660:	60b9      	str	r1, [r7, #8]
 8009662:	607a      	str	r2, [r7, #4]
 8009664:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	681a      	ldr	r2, [r3, #0]
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009674:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	683a      	ldr	r2, [r7, #0]
 800967c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	689b      	ldr	r3, [r3, #8]
 8009682:	2b40      	cmp	r3, #64	; 0x40
 8009684:	d108      	bne.n	8009698 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	687a      	ldr	r2, [r7, #4]
 800968c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	68ba      	ldr	r2, [r7, #8]
 8009694:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8009696:	e007      	b.n	80096a8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	68ba      	ldr	r2, [r7, #8]
 800969e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	687a      	ldr	r2, [r7, #4]
 80096a6:	60da      	str	r2, [r3, #12]
}
 80096a8:	bf00      	nop
 80096aa:	3714      	adds	r7, #20
 80096ac:	46bd      	mov	sp, r7
 80096ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b2:	4770      	bx	lr

080096b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80096b4:	b480      	push	{r7}
 80096b6:	b085      	sub	sp, #20
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	b2db      	uxtb	r3, r3
 80096c2:	3b10      	subs	r3, #16
 80096c4:	4a14      	ldr	r2, [pc, #80]	; (8009718 <DMA_CalcBaseAndBitshift+0x64>)
 80096c6:	fba2 2303 	umull	r2, r3, r2, r3
 80096ca:	091b      	lsrs	r3, r3, #4
 80096cc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80096ce:	4a13      	ldr	r2, [pc, #76]	; (800971c <DMA_CalcBaseAndBitshift+0x68>)
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	4413      	add	r3, r2
 80096d4:	781b      	ldrb	r3, [r3, #0]
 80096d6:	461a      	mov	r2, r3
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	2b03      	cmp	r3, #3
 80096e0:	d909      	bls.n	80096f6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80096ea:	f023 0303 	bic.w	r3, r3, #3
 80096ee:	1d1a      	adds	r2, r3, #4
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	659a      	str	r2, [r3, #88]	; 0x58
 80096f4:	e007      	b.n	8009706 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80096fe:	f023 0303 	bic.w	r3, r3, #3
 8009702:	687a      	ldr	r2, [r7, #4]
 8009704:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800970a:	4618      	mov	r0, r3
 800970c:	3714      	adds	r7, #20
 800970e:	46bd      	mov	sp, r7
 8009710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009714:	4770      	bx	lr
 8009716:	bf00      	nop
 8009718:	aaaaaaab 	.word	0xaaaaaaab
 800971c:	0801d1c4 	.word	0x0801d1c4

08009720 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009720:	b480      	push	{r7}
 8009722:	b085      	sub	sp, #20
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009728:	2300      	movs	r3, #0
 800972a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009730:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	699b      	ldr	r3, [r3, #24]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d11f      	bne.n	800977a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800973a:	68bb      	ldr	r3, [r7, #8]
 800973c:	2b03      	cmp	r3, #3
 800973e:	d855      	bhi.n	80097ec <DMA_CheckFifoParam+0xcc>
 8009740:	a201      	add	r2, pc, #4	; (adr r2, 8009748 <DMA_CheckFifoParam+0x28>)
 8009742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009746:	bf00      	nop
 8009748:	08009759 	.word	0x08009759
 800974c:	0800976b 	.word	0x0800976b
 8009750:	08009759 	.word	0x08009759
 8009754:	080097ed 	.word	0x080097ed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800975c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009760:	2b00      	cmp	r3, #0
 8009762:	d045      	beq.n	80097f0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8009764:	2301      	movs	r3, #1
 8009766:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009768:	e042      	b.n	80097f0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800976e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009772:	d13f      	bne.n	80097f4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8009774:	2301      	movs	r3, #1
 8009776:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009778:	e03c      	b.n	80097f4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	699b      	ldr	r3, [r3, #24]
 800977e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009782:	d121      	bne.n	80097c8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	2b03      	cmp	r3, #3
 8009788:	d836      	bhi.n	80097f8 <DMA_CheckFifoParam+0xd8>
 800978a:	a201      	add	r2, pc, #4	; (adr r2, 8009790 <DMA_CheckFifoParam+0x70>)
 800978c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009790:	080097a1 	.word	0x080097a1
 8009794:	080097a7 	.word	0x080097a7
 8009798:	080097a1 	.word	0x080097a1
 800979c:	080097b9 	.word	0x080097b9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80097a0:	2301      	movs	r3, #1
 80097a2:	73fb      	strb	r3, [r7, #15]
      break;
 80097a4:	e02f      	b.n	8009806 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d024      	beq.n	80097fc <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80097b2:	2301      	movs	r3, #1
 80097b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80097b6:	e021      	b.n	80097fc <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097bc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80097c0:	d11e      	bne.n	8009800 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80097c2:	2301      	movs	r3, #1
 80097c4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80097c6:	e01b      	b.n	8009800 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	2b02      	cmp	r3, #2
 80097cc:	d902      	bls.n	80097d4 <DMA_CheckFifoParam+0xb4>
 80097ce:	2b03      	cmp	r3, #3
 80097d0:	d003      	beq.n	80097da <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80097d2:	e018      	b.n	8009806 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80097d4:	2301      	movs	r3, #1
 80097d6:	73fb      	strb	r3, [r7, #15]
      break;
 80097d8:	e015      	b.n	8009806 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d00e      	beq.n	8009804 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80097e6:	2301      	movs	r3, #1
 80097e8:	73fb      	strb	r3, [r7, #15]
      break;
 80097ea:	e00b      	b.n	8009804 <DMA_CheckFifoParam+0xe4>
      break;
 80097ec:	bf00      	nop
 80097ee:	e00a      	b.n	8009806 <DMA_CheckFifoParam+0xe6>
      break;
 80097f0:	bf00      	nop
 80097f2:	e008      	b.n	8009806 <DMA_CheckFifoParam+0xe6>
      break;
 80097f4:	bf00      	nop
 80097f6:	e006      	b.n	8009806 <DMA_CheckFifoParam+0xe6>
      break;
 80097f8:	bf00      	nop
 80097fa:	e004      	b.n	8009806 <DMA_CheckFifoParam+0xe6>
      break;
 80097fc:	bf00      	nop
 80097fe:	e002      	b.n	8009806 <DMA_CheckFifoParam+0xe6>
      break;   
 8009800:	bf00      	nop
 8009802:	e000      	b.n	8009806 <DMA_CheckFifoParam+0xe6>
      break;
 8009804:	bf00      	nop
    }
  } 
  
  return status; 
 8009806:	7bfb      	ldrb	r3, [r7, #15]
}
 8009808:	4618      	mov	r0, r3
 800980a:	3714      	adds	r7, #20
 800980c:	46bd      	mov	sp, r7
 800980e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009812:	4770      	bx	lr

08009814 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8009814:	b480      	push	{r7}
 8009816:	b087      	sub	sp, #28
 8009818:	af00      	add	r7, sp, #0
 800981a:	60f8      	str	r0, [r7, #12]
 800981c:	460b      	mov	r3, r1
 800981e:	607a      	str	r2, [r7, #4]
 8009820:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8009822:	2300      	movs	r3, #0
 8009824:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8009826:	7afb      	ldrb	r3, [r7, #11]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d103      	bne.n	8009834 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	687a      	ldr	r2, [r7, #4]
 8009830:	605a      	str	r2, [r3, #4]
      break;
 8009832:	e002      	b.n	800983a <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8009834:	2301      	movs	r3, #1
 8009836:	75fb      	strb	r3, [r7, #23]
      break;
 8009838:	bf00      	nop
  }

  return status;
 800983a:	7dfb      	ldrb	r3, [r7, #23]
}
 800983c:	4618      	mov	r0, r3
 800983e:	371c      	adds	r7, #28
 8009840:	46bd      	mov	sp, r7
 8009842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009846:	4770      	bx	lr

08009848 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8009848:	b480      	push	{r7}
 800984a:	b083      	sub	sp, #12
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
 8009850:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d101      	bne.n	800985c <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8009858:	2301      	movs	r3, #1
 800985a:	e003      	b.n	8009864 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	683a      	ldr	r2, [r7, #0]
 8009860:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8009862:	2300      	movs	r3, #0
  }
}
 8009864:	4618      	mov	r0, r3
 8009866:	370c      	adds	r7, #12
 8009868:	46bd      	mov	sp, r7
 800986a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986e:	4770      	bx	lr

08009870 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b084      	sub	sp, #16
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f003 031f 	and.w	r3, r3, #31
 8009880:	2201      	movs	r2, #1
 8009882:	fa02 f303 	lsl.w	r3, r2, r3
 8009886:	60fb      	str	r3, [r7, #12]

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 8009888:	4b0a      	ldr	r3, [pc, #40]	; (80098b4 <HAL_EXTI_IRQHandler+0x44>)
 800988a:	695b      	ldr	r3, [r3, #20]
 800988c:	68fa      	ldr	r2, [r7, #12]
 800988e:	4013      	ands	r3, r2
 8009890:	60bb      	str	r3, [r7, #8]
  if (regval != 0x00u)
 8009892:	68bb      	ldr	r3, [r7, #8]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d009      	beq.n	80098ac <HAL_EXTI_IRQHandler+0x3c>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 8009898:	4a06      	ldr	r2, [pc, #24]	; (80098b4 <HAL_EXTI_IRQHandler+0x44>)
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	685b      	ldr	r3, [r3, #4]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d002      	beq.n	80098ac <HAL_EXTI_IRQHandler+0x3c>
    {
      hexti->PendingCallback();
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	685b      	ldr	r3, [r3, #4]
 80098aa:	4798      	blx	r3
    }
  }
}
 80098ac:	bf00      	nop
 80098ae:	3710      	adds	r7, #16
 80098b0:	46bd      	mov	sp, r7
 80098b2:	bd80      	pop	{r7, pc}
 80098b4:	40013c00 	.word	0x40013c00

080098b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80098b8:	b480      	push	{r7}
 80098ba:	b089      	sub	sp, #36	; 0x24
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
 80098c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80098c2:	2300      	movs	r3, #0
 80098c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80098c6:	2300      	movs	r3, #0
 80098c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80098ca:	2300      	movs	r3, #0
 80098cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80098ce:	2300      	movs	r3, #0
 80098d0:	61fb      	str	r3, [r7, #28]
 80098d2:	e159      	b.n	8009b88 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80098d4:	2201      	movs	r2, #1
 80098d6:	69fb      	ldr	r3, [r7, #28]
 80098d8:	fa02 f303 	lsl.w	r3, r2, r3
 80098dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	697a      	ldr	r2, [r7, #20]
 80098e4:	4013      	ands	r3, r2
 80098e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80098e8:	693a      	ldr	r2, [r7, #16]
 80098ea:	697b      	ldr	r3, [r7, #20]
 80098ec:	429a      	cmp	r2, r3
 80098ee:	f040 8148 	bne.w	8009b82 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	685b      	ldr	r3, [r3, #4]
 80098f6:	2b01      	cmp	r3, #1
 80098f8:	d00b      	beq.n	8009912 <HAL_GPIO_Init+0x5a>
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	685b      	ldr	r3, [r3, #4]
 80098fe:	2b02      	cmp	r3, #2
 8009900:	d007      	beq.n	8009912 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009906:	2b11      	cmp	r3, #17
 8009908:	d003      	beq.n	8009912 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	685b      	ldr	r3, [r3, #4]
 800990e:	2b12      	cmp	r3, #18
 8009910:	d130      	bne.n	8009974 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	689b      	ldr	r3, [r3, #8]
 8009916:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009918:	69fb      	ldr	r3, [r7, #28]
 800991a:	005b      	lsls	r3, r3, #1
 800991c:	2203      	movs	r2, #3
 800991e:	fa02 f303 	lsl.w	r3, r2, r3
 8009922:	43db      	mvns	r3, r3
 8009924:	69ba      	ldr	r2, [r7, #24]
 8009926:	4013      	ands	r3, r2
 8009928:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	68da      	ldr	r2, [r3, #12]
 800992e:	69fb      	ldr	r3, [r7, #28]
 8009930:	005b      	lsls	r3, r3, #1
 8009932:	fa02 f303 	lsl.w	r3, r2, r3
 8009936:	69ba      	ldr	r2, [r7, #24]
 8009938:	4313      	orrs	r3, r2
 800993a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	69ba      	ldr	r2, [r7, #24]
 8009940:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	685b      	ldr	r3, [r3, #4]
 8009946:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009948:	2201      	movs	r2, #1
 800994a:	69fb      	ldr	r3, [r7, #28]
 800994c:	fa02 f303 	lsl.w	r3, r2, r3
 8009950:	43db      	mvns	r3, r3
 8009952:	69ba      	ldr	r2, [r7, #24]
 8009954:	4013      	ands	r3, r2
 8009956:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	685b      	ldr	r3, [r3, #4]
 800995c:	091b      	lsrs	r3, r3, #4
 800995e:	f003 0201 	and.w	r2, r3, #1
 8009962:	69fb      	ldr	r3, [r7, #28]
 8009964:	fa02 f303 	lsl.w	r3, r2, r3
 8009968:	69ba      	ldr	r2, [r7, #24]
 800996a:	4313      	orrs	r3, r2
 800996c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	69ba      	ldr	r2, [r7, #24]
 8009972:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	68db      	ldr	r3, [r3, #12]
 8009978:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800997a:	69fb      	ldr	r3, [r7, #28]
 800997c:	005b      	lsls	r3, r3, #1
 800997e:	2203      	movs	r2, #3
 8009980:	fa02 f303 	lsl.w	r3, r2, r3
 8009984:	43db      	mvns	r3, r3
 8009986:	69ba      	ldr	r2, [r7, #24]
 8009988:	4013      	ands	r3, r2
 800998a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	689a      	ldr	r2, [r3, #8]
 8009990:	69fb      	ldr	r3, [r7, #28]
 8009992:	005b      	lsls	r3, r3, #1
 8009994:	fa02 f303 	lsl.w	r3, r2, r3
 8009998:	69ba      	ldr	r2, [r7, #24]
 800999a:	4313      	orrs	r3, r2
 800999c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	69ba      	ldr	r2, [r7, #24]
 80099a2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	685b      	ldr	r3, [r3, #4]
 80099a8:	2b02      	cmp	r3, #2
 80099aa:	d003      	beq.n	80099b4 <HAL_GPIO_Init+0xfc>
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	685b      	ldr	r3, [r3, #4]
 80099b0:	2b12      	cmp	r3, #18
 80099b2:	d123      	bne.n	80099fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80099b4:	69fb      	ldr	r3, [r7, #28]
 80099b6:	08da      	lsrs	r2, r3, #3
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	3208      	adds	r2, #8
 80099bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80099c2:	69fb      	ldr	r3, [r7, #28]
 80099c4:	f003 0307 	and.w	r3, r3, #7
 80099c8:	009b      	lsls	r3, r3, #2
 80099ca:	220f      	movs	r2, #15
 80099cc:	fa02 f303 	lsl.w	r3, r2, r3
 80099d0:	43db      	mvns	r3, r3
 80099d2:	69ba      	ldr	r2, [r7, #24]
 80099d4:	4013      	ands	r3, r2
 80099d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	691a      	ldr	r2, [r3, #16]
 80099dc:	69fb      	ldr	r3, [r7, #28]
 80099de:	f003 0307 	and.w	r3, r3, #7
 80099e2:	009b      	lsls	r3, r3, #2
 80099e4:	fa02 f303 	lsl.w	r3, r2, r3
 80099e8:	69ba      	ldr	r2, [r7, #24]
 80099ea:	4313      	orrs	r3, r2
 80099ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80099ee:	69fb      	ldr	r3, [r7, #28]
 80099f0:	08da      	lsrs	r2, r3, #3
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	3208      	adds	r2, #8
 80099f6:	69b9      	ldr	r1, [r7, #24]
 80099f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009a02:	69fb      	ldr	r3, [r7, #28]
 8009a04:	005b      	lsls	r3, r3, #1
 8009a06:	2203      	movs	r2, #3
 8009a08:	fa02 f303 	lsl.w	r3, r2, r3
 8009a0c:	43db      	mvns	r3, r3
 8009a0e:	69ba      	ldr	r2, [r7, #24]
 8009a10:	4013      	ands	r3, r2
 8009a12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	685b      	ldr	r3, [r3, #4]
 8009a18:	f003 0203 	and.w	r2, r3, #3
 8009a1c:	69fb      	ldr	r3, [r7, #28]
 8009a1e:	005b      	lsls	r3, r3, #1
 8009a20:	fa02 f303 	lsl.w	r3, r2, r3
 8009a24:	69ba      	ldr	r2, [r7, #24]
 8009a26:	4313      	orrs	r3, r2
 8009a28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	69ba      	ldr	r2, [r7, #24]
 8009a2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	685b      	ldr	r3, [r3, #4]
 8009a34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	f000 80a2 	beq.w	8009b82 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009a3e:	2300      	movs	r3, #0
 8009a40:	60fb      	str	r3, [r7, #12]
 8009a42:	4b56      	ldr	r3, [pc, #344]	; (8009b9c <HAL_GPIO_Init+0x2e4>)
 8009a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a46:	4a55      	ldr	r2, [pc, #340]	; (8009b9c <HAL_GPIO_Init+0x2e4>)
 8009a48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009a4c:	6453      	str	r3, [r2, #68]	; 0x44
 8009a4e:	4b53      	ldr	r3, [pc, #332]	; (8009b9c <HAL_GPIO_Init+0x2e4>)
 8009a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009a56:	60fb      	str	r3, [r7, #12]
 8009a58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009a5a:	4a51      	ldr	r2, [pc, #324]	; (8009ba0 <HAL_GPIO_Init+0x2e8>)
 8009a5c:	69fb      	ldr	r3, [r7, #28]
 8009a5e:	089b      	lsrs	r3, r3, #2
 8009a60:	3302      	adds	r3, #2
 8009a62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009a68:	69fb      	ldr	r3, [r7, #28]
 8009a6a:	f003 0303 	and.w	r3, r3, #3
 8009a6e:	009b      	lsls	r3, r3, #2
 8009a70:	220f      	movs	r2, #15
 8009a72:	fa02 f303 	lsl.w	r3, r2, r3
 8009a76:	43db      	mvns	r3, r3
 8009a78:	69ba      	ldr	r2, [r7, #24]
 8009a7a:	4013      	ands	r3, r2
 8009a7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	4a48      	ldr	r2, [pc, #288]	; (8009ba4 <HAL_GPIO_Init+0x2ec>)
 8009a82:	4293      	cmp	r3, r2
 8009a84:	d019      	beq.n	8009aba <HAL_GPIO_Init+0x202>
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	4a47      	ldr	r2, [pc, #284]	; (8009ba8 <HAL_GPIO_Init+0x2f0>)
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	d013      	beq.n	8009ab6 <HAL_GPIO_Init+0x1fe>
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	4a46      	ldr	r2, [pc, #280]	; (8009bac <HAL_GPIO_Init+0x2f4>)
 8009a92:	4293      	cmp	r3, r2
 8009a94:	d00d      	beq.n	8009ab2 <HAL_GPIO_Init+0x1fa>
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	4a45      	ldr	r2, [pc, #276]	; (8009bb0 <HAL_GPIO_Init+0x2f8>)
 8009a9a:	4293      	cmp	r3, r2
 8009a9c:	d007      	beq.n	8009aae <HAL_GPIO_Init+0x1f6>
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	4a44      	ldr	r2, [pc, #272]	; (8009bb4 <HAL_GPIO_Init+0x2fc>)
 8009aa2:	4293      	cmp	r3, r2
 8009aa4:	d101      	bne.n	8009aaa <HAL_GPIO_Init+0x1f2>
 8009aa6:	2304      	movs	r3, #4
 8009aa8:	e008      	b.n	8009abc <HAL_GPIO_Init+0x204>
 8009aaa:	2307      	movs	r3, #7
 8009aac:	e006      	b.n	8009abc <HAL_GPIO_Init+0x204>
 8009aae:	2303      	movs	r3, #3
 8009ab0:	e004      	b.n	8009abc <HAL_GPIO_Init+0x204>
 8009ab2:	2302      	movs	r3, #2
 8009ab4:	e002      	b.n	8009abc <HAL_GPIO_Init+0x204>
 8009ab6:	2301      	movs	r3, #1
 8009ab8:	e000      	b.n	8009abc <HAL_GPIO_Init+0x204>
 8009aba:	2300      	movs	r3, #0
 8009abc:	69fa      	ldr	r2, [r7, #28]
 8009abe:	f002 0203 	and.w	r2, r2, #3
 8009ac2:	0092      	lsls	r2, r2, #2
 8009ac4:	4093      	lsls	r3, r2
 8009ac6:	69ba      	ldr	r2, [r7, #24]
 8009ac8:	4313      	orrs	r3, r2
 8009aca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009acc:	4934      	ldr	r1, [pc, #208]	; (8009ba0 <HAL_GPIO_Init+0x2e8>)
 8009ace:	69fb      	ldr	r3, [r7, #28]
 8009ad0:	089b      	lsrs	r3, r3, #2
 8009ad2:	3302      	adds	r3, #2
 8009ad4:	69ba      	ldr	r2, [r7, #24]
 8009ad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009ada:	4b37      	ldr	r3, [pc, #220]	; (8009bb8 <HAL_GPIO_Init+0x300>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009ae0:	693b      	ldr	r3, [r7, #16]
 8009ae2:	43db      	mvns	r3, r3
 8009ae4:	69ba      	ldr	r2, [r7, #24]
 8009ae6:	4013      	ands	r3, r2
 8009ae8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	685b      	ldr	r3, [r3, #4]
 8009aee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d003      	beq.n	8009afe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8009af6:	69ba      	ldr	r2, [r7, #24]
 8009af8:	693b      	ldr	r3, [r7, #16]
 8009afa:	4313      	orrs	r3, r2
 8009afc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009afe:	4a2e      	ldr	r2, [pc, #184]	; (8009bb8 <HAL_GPIO_Init+0x300>)
 8009b00:	69bb      	ldr	r3, [r7, #24]
 8009b02:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8009b04:	4b2c      	ldr	r3, [pc, #176]	; (8009bb8 <HAL_GPIO_Init+0x300>)
 8009b06:	685b      	ldr	r3, [r3, #4]
 8009b08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009b0a:	693b      	ldr	r3, [r7, #16]
 8009b0c:	43db      	mvns	r3, r3
 8009b0e:	69ba      	ldr	r2, [r7, #24]
 8009b10:	4013      	ands	r3, r2
 8009b12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	685b      	ldr	r3, [r3, #4]
 8009b18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d003      	beq.n	8009b28 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8009b20:	69ba      	ldr	r2, [r7, #24]
 8009b22:	693b      	ldr	r3, [r7, #16]
 8009b24:	4313      	orrs	r3, r2
 8009b26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009b28:	4a23      	ldr	r2, [pc, #140]	; (8009bb8 <HAL_GPIO_Init+0x300>)
 8009b2a:	69bb      	ldr	r3, [r7, #24]
 8009b2c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009b2e:	4b22      	ldr	r3, [pc, #136]	; (8009bb8 <HAL_GPIO_Init+0x300>)
 8009b30:	689b      	ldr	r3, [r3, #8]
 8009b32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009b34:	693b      	ldr	r3, [r7, #16]
 8009b36:	43db      	mvns	r3, r3
 8009b38:	69ba      	ldr	r2, [r7, #24]
 8009b3a:	4013      	ands	r3, r2
 8009b3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	685b      	ldr	r3, [r3, #4]
 8009b42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d003      	beq.n	8009b52 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8009b4a:	69ba      	ldr	r2, [r7, #24]
 8009b4c:	693b      	ldr	r3, [r7, #16]
 8009b4e:	4313      	orrs	r3, r2
 8009b50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009b52:	4a19      	ldr	r2, [pc, #100]	; (8009bb8 <HAL_GPIO_Init+0x300>)
 8009b54:	69bb      	ldr	r3, [r7, #24]
 8009b56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009b58:	4b17      	ldr	r3, [pc, #92]	; (8009bb8 <HAL_GPIO_Init+0x300>)
 8009b5a:	68db      	ldr	r3, [r3, #12]
 8009b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009b5e:	693b      	ldr	r3, [r7, #16]
 8009b60:	43db      	mvns	r3, r3
 8009b62:	69ba      	ldr	r2, [r7, #24]
 8009b64:	4013      	ands	r3, r2
 8009b66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	685b      	ldr	r3, [r3, #4]
 8009b6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d003      	beq.n	8009b7c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8009b74:	69ba      	ldr	r2, [r7, #24]
 8009b76:	693b      	ldr	r3, [r7, #16]
 8009b78:	4313      	orrs	r3, r2
 8009b7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009b7c:	4a0e      	ldr	r2, [pc, #56]	; (8009bb8 <HAL_GPIO_Init+0x300>)
 8009b7e:	69bb      	ldr	r3, [r7, #24]
 8009b80:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009b82:	69fb      	ldr	r3, [r7, #28]
 8009b84:	3301      	adds	r3, #1
 8009b86:	61fb      	str	r3, [r7, #28]
 8009b88:	69fb      	ldr	r3, [r7, #28]
 8009b8a:	2b0f      	cmp	r3, #15
 8009b8c:	f67f aea2 	bls.w	80098d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009b90:	bf00      	nop
 8009b92:	3724      	adds	r7, #36	; 0x24
 8009b94:	46bd      	mov	sp, r7
 8009b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9a:	4770      	bx	lr
 8009b9c:	40023800 	.word	0x40023800
 8009ba0:	40013800 	.word	0x40013800
 8009ba4:	40020000 	.word	0x40020000
 8009ba8:	40020400 	.word	0x40020400
 8009bac:	40020800 	.word	0x40020800
 8009bb0:	40020c00 	.word	0x40020c00
 8009bb4:	40021000 	.word	0x40021000
 8009bb8:	40013c00 	.word	0x40013c00

08009bbc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009bbc:	b480      	push	{r7}
 8009bbe:	b087      	sub	sp, #28
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
 8009bc4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8009bca:	2300      	movs	r3, #0
 8009bcc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8009bce:	2300      	movs	r3, #0
 8009bd0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	617b      	str	r3, [r7, #20]
 8009bd6:	e0bb      	b.n	8009d50 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009bd8:	2201      	movs	r2, #1
 8009bda:	697b      	ldr	r3, [r7, #20]
 8009bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8009be0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8009be2:	683a      	ldr	r2, [r7, #0]
 8009be4:	693b      	ldr	r3, [r7, #16]
 8009be6:	4013      	ands	r3, r2
 8009be8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8009bea:	68fa      	ldr	r2, [r7, #12]
 8009bec:	693b      	ldr	r3, [r7, #16]
 8009bee:	429a      	cmp	r2, r3
 8009bf0:	f040 80ab 	bne.w	8009d4a <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8009bf4:	4a5b      	ldr	r2, [pc, #364]	; (8009d64 <HAL_GPIO_DeInit+0x1a8>)
 8009bf6:	697b      	ldr	r3, [r7, #20]
 8009bf8:	089b      	lsrs	r3, r3, #2
 8009bfa:	3302      	adds	r3, #2
 8009bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c00:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8009c02:	697b      	ldr	r3, [r7, #20]
 8009c04:	f003 0303 	and.w	r3, r3, #3
 8009c08:	009b      	lsls	r3, r3, #2
 8009c0a:	220f      	movs	r2, #15
 8009c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8009c10:	68ba      	ldr	r2, [r7, #8]
 8009c12:	4013      	ands	r3, r2
 8009c14:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	4a53      	ldr	r2, [pc, #332]	; (8009d68 <HAL_GPIO_DeInit+0x1ac>)
 8009c1a:	4293      	cmp	r3, r2
 8009c1c:	d019      	beq.n	8009c52 <HAL_GPIO_DeInit+0x96>
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	4a52      	ldr	r2, [pc, #328]	; (8009d6c <HAL_GPIO_DeInit+0x1b0>)
 8009c22:	4293      	cmp	r3, r2
 8009c24:	d013      	beq.n	8009c4e <HAL_GPIO_DeInit+0x92>
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	4a51      	ldr	r2, [pc, #324]	; (8009d70 <HAL_GPIO_DeInit+0x1b4>)
 8009c2a:	4293      	cmp	r3, r2
 8009c2c:	d00d      	beq.n	8009c4a <HAL_GPIO_DeInit+0x8e>
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	4a50      	ldr	r2, [pc, #320]	; (8009d74 <HAL_GPIO_DeInit+0x1b8>)
 8009c32:	4293      	cmp	r3, r2
 8009c34:	d007      	beq.n	8009c46 <HAL_GPIO_DeInit+0x8a>
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	4a4f      	ldr	r2, [pc, #316]	; (8009d78 <HAL_GPIO_DeInit+0x1bc>)
 8009c3a:	4293      	cmp	r3, r2
 8009c3c:	d101      	bne.n	8009c42 <HAL_GPIO_DeInit+0x86>
 8009c3e:	2304      	movs	r3, #4
 8009c40:	e008      	b.n	8009c54 <HAL_GPIO_DeInit+0x98>
 8009c42:	2307      	movs	r3, #7
 8009c44:	e006      	b.n	8009c54 <HAL_GPIO_DeInit+0x98>
 8009c46:	2303      	movs	r3, #3
 8009c48:	e004      	b.n	8009c54 <HAL_GPIO_DeInit+0x98>
 8009c4a:	2302      	movs	r3, #2
 8009c4c:	e002      	b.n	8009c54 <HAL_GPIO_DeInit+0x98>
 8009c4e:	2301      	movs	r3, #1
 8009c50:	e000      	b.n	8009c54 <HAL_GPIO_DeInit+0x98>
 8009c52:	2300      	movs	r3, #0
 8009c54:	697a      	ldr	r2, [r7, #20]
 8009c56:	f002 0203 	and.w	r2, r2, #3
 8009c5a:	0092      	lsls	r2, r2, #2
 8009c5c:	4093      	lsls	r3, r2
 8009c5e:	68ba      	ldr	r2, [r7, #8]
 8009c60:	429a      	cmp	r2, r3
 8009c62:	d132      	bne.n	8009cca <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8009c64:	4b45      	ldr	r3, [pc, #276]	; (8009d7c <HAL_GPIO_DeInit+0x1c0>)
 8009c66:	681a      	ldr	r2, [r3, #0]
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	43db      	mvns	r3, r3
 8009c6c:	4943      	ldr	r1, [pc, #268]	; (8009d7c <HAL_GPIO_DeInit+0x1c0>)
 8009c6e:	4013      	ands	r3, r2
 8009c70:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8009c72:	4b42      	ldr	r3, [pc, #264]	; (8009d7c <HAL_GPIO_DeInit+0x1c0>)
 8009c74:	685a      	ldr	r2, [r3, #4]
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	43db      	mvns	r3, r3
 8009c7a:	4940      	ldr	r1, [pc, #256]	; (8009d7c <HAL_GPIO_DeInit+0x1c0>)
 8009c7c:	4013      	ands	r3, r2
 8009c7e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8009c80:	4b3e      	ldr	r3, [pc, #248]	; (8009d7c <HAL_GPIO_DeInit+0x1c0>)
 8009c82:	689a      	ldr	r2, [r3, #8]
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	43db      	mvns	r3, r3
 8009c88:	493c      	ldr	r1, [pc, #240]	; (8009d7c <HAL_GPIO_DeInit+0x1c0>)
 8009c8a:	4013      	ands	r3, r2
 8009c8c:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8009c8e:	4b3b      	ldr	r3, [pc, #236]	; (8009d7c <HAL_GPIO_DeInit+0x1c0>)
 8009c90:	68da      	ldr	r2, [r3, #12]
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	43db      	mvns	r3, r3
 8009c96:	4939      	ldr	r1, [pc, #228]	; (8009d7c <HAL_GPIO_DeInit+0x1c0>)
 8009c98:	4013      	ands	r3, r2
 8009c9a:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8009c9c:	697b      	ldr	r3, [r7, #20]
 8009c9e:	f003 0303 	and.w	r3, r3, #3
 8009ca2:	009b      	lsls	r3, r3, #2
 8009ca4:	220f      	movs	r2, #15
 8009ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8009caa:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8009cac:	4a2d      	ldr	r2, [pc, #180]	; (8009d64 <HAL_GPIO_DeInit+0x1a8>)
 8009cae:	697b      	ldr	r3, [r7, #20]
 8009cb0:	089b      	lsrs	r3, r3, #2
 8009cb2:	3302      	adds	r3, #2
 8009cb4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	43da      	mvns	r2, r3
 8009cbc:	4829      	ldr	r0, [pc, #164]	; (8009d64 <HAL_GPIO_DeInit+0x1a8>)
 8009cbe:	697b      	ldr	r3, [r7, #20]
 8009cc0:	089b      	lsrs	r3, r3, #2
 8009cc2:	400a      	ands	r2, r1
 8009cc4:	3302      	adds	r3, #2
 8009cc6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681a      	ldr	r2, [r3, #0]
 8009cce:	697b      	ldr	r3, [r7, #20]
 8009cd0:	005b      	lsls	r3, r3, #1
 8009cd2:	2103      	movs	r1, #3
 8009cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8009cd8:	43db      	mvns	r3, r3
 8009cda:	401a      	ands	r2, r3
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8009ce0:	697b      	ldr	r3, [r7, #20]
 8009ce2:	08da      	lsrs	r2, r3, #3
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	3208      	adds	r2, #8
 8009ce8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009cec:	697b      	ldr	r3, [r7, #20]
 8009cee:	f003 0307 	and.w	r3, r3, #7
 8009cf2:	009b      	lsls	r3, r3, #2
 8009cf4:	220f      	movs	r2, #15
 8009cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8009cfa:	43db      	mvns	r3, r3
 8009cfc:	697a      	ldr	r2, [r7, #20]
 8009cfe:	08d2      	lsrs	r2, r2, #3
 8009d00:	4019      	ands	r1, r3
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	3208      	adds	r2, #8
 8009d06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	68da      	ldr	r2, [r3, #12]
 8009d0e:	697b      	ldr	r3, [r7, #20]
 8009d10:	005b      	lsls	r3, r3, #1
 8009d12:	2103      	movs	r1, #3
 8009d14:	fa01 f303 	lsl.w	r3, r1, r3
 8009d18:	43db      	mvns	r3, r3
 8009d1a:	401a      	ands	r2, r3
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	685a      	ldr	r2, [r3, #4]
 8009d24:	2101      	movs	r1, #1
 8009d26:	697b      	ldr	r3, [r7, #20]
 8009d28:	fa01 f303 	lsl.w	r3, r1, r3
 8009d2c:	43db      	mvns	r3, r3
 8009d2e:	401a      	ands	r2, r3
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	689a      	ldr	r2, [r3, #8]
 8009d38:	697b      	ldr	r3, [r7, #20]
 8009d3a:	005b      	lsls	r3, r3, #1
 8009d3c:	2103      	movs	r1, #3
 8009d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8009d42:	43db      	mvns	r3, r3
 8009d44:	401a      	ands	r2, r3
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009d4a:	697b      	ldr	r3, [r7, #20]
 8009d4c:	3301      	adds	r3, #1
 8009d4e:	617b      	str	r3, [r7, #20]
 8009d50:	697b      	ldr	r3, [r7, #20]
 8009d52:	2b0f      	cmp	r3, #15
 8009d54:	f67f af40 	bls.w	8009bd8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8009d58:	bf00      	nop
 8009d5a:	371c      	adds	r7, #28
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d62:	4770      	bx	lr
 8009d64:	40013800 	.word	0x40013800
 8009d68:	40020000 	.word	0x40020000
 8009d6c:	40020400 	.word	0x40020400
 8009d70:	40020800 	.word	0x40020800
 8009d74:	40020c00 	.word	0x40020c00
 8009d78:	40021000 	.word	0x40021000
 8009d7c:	40013c00 	.word	0x40013c00

08009d80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009d80:	b480      	push	{r7}
 8009d82:	b085      	sub	sp, #20
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
 8009d88:	460b      	mov	r3, r1
 8009d8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	691a      	ldr	r2, [r3, #16]
 8009d90:	887b      	ldrh	r3, [r7, #2]
 8009d92:	4013      	ands	r3, r2
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d002      	beq.n	8009d9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009d98:	2301      	movs	r3, #1
 8009d9a:	73fb      	strb	r3, [r7, #15]
 8009d9c:	e001      	b.n	8009da2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009d9e:	2300      	movs	r3, #0
 8009da0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009da4:	4618      	mov	r0, r3
 8009da6:	3714      	adds	r7, #20
 8009da8:	46bd      	mov	sp, r7
 8009daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dae:	4770      	bx	lr

08009db0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009db0:	b480      	push	{r7}
 8009db2:	b083      	sub	sp, #12
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
 8009db8:	460b      	mov	r3, r1
 8009dba:	807b      	strh	r3, [r7, #2]
 8009dbc:	4613      	mov	r3, r2
 8009dbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009dc0:	787b      	ldrb	r3, [r7, #1]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d003      	beq.n	8009dce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009dc6:	887a      	ldrh	r2, [r7, #2]
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009dcc:	e003      	b.n	8009dd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8009dce:	887b      	ldrh	r3, [r7, #2]
 8009dd0:	041a      	lsls	r2, r3, #16
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	619a      	str	r2, [r3, #24]
}
 8009dd6:	bf00      	nop
 8009dd8:	370c      	adds	r7, #12
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de0:	4770      	bx	lr

08009de2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009de2:	b480      	push	{r7}
 8009de4:	b083      	sub	sp, #12
 8009de6:	af00      	add	r7, sp, #0
 8009de8:	6078      	str	r0, [r7, #4]
 8009dea:	460b      	mov	r3, r1
 8009dec:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	695a      	ldr	r2, [r3, #20]
 8009df2:	887b      	ldrh	r3, [r7, #2]
 8009df4:	401a      	ands	r2, r3
 8009df6:	887b      	ldrh	r3, [r7, #2]
 8009df8:	429a      	cmp	r2, r3
 8009dfa:	d104      	bne.n	8009e06 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8009dfc:	887b      	ldrh	r3, [r7, #2]
 8009dfe:	041a      	lsls	r2, r3, #16
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8009e04:	e002      	b.n	8009e0c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8009e06:	887a      	ldrh	r2, [r7, #2]
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	619a      	str	r2, [r3, #24]
}
 8009e0c:	bf00      	nop
 8009e0e:	370c      	adds	r7, #12
 8009e10:	46bd      	mov	sp, r7
 8009e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e16:	4770      	bx	lr

08009e18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b084      	sub	sp, #16
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d101      	bne.n	8009e2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009e26:	2301      	movs	r3, #1
 8009e28:	e11f      	b.n	800a06a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e30:	b2db      	uxtb	r3, r3
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d106      	bne.n	8009e44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2200      	movs	r2, #0
 8009e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	f000 f951 	bl	800a0e6 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2224      	movs	r2, #36	; 0x24
 8009e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	681a      	ldr	r2, [r3, #0]
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f022 0201 	bic.w	r2, r2, #1
 8009e5a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	681a      	ldr	r2, [r3, #0]
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009e6a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	681a      	ldr	r2, [r3, #0]
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009e7a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009e7c:	f001 fc14 	bl	800b6a8 <HAL_RCC_GetPCLK1Freq>
 8009e80:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	685b      	ldr	r3, [r3, #4]
 8009e86:	4a7b      	ldr	r2, [pc, #492]	; (800a074 <HAL_I2C_Init+0x25c>)
 8009e88:	4293      	cmp	r3, r2
 8009e8a:	d807      	bhi.n	8009e9c <HAL_I2C_Init+0x84>
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	4a7a      	ldr	r2, [pc, #488]	; (800a078 <HAL_I2C_Init+0x260>)
 8009e90:	4293      	cmp	r3, r2
 8009e92:	bf94      	ite	ls
 8009e94:	2301      	movls	r3, #1
 8009e96:	2300      	movhi	r3, #0
 8009e98:	b2db      	uxtb	r3, r3
 8009e9a:	e006      	b.n	8009eaa <HAL_I2C_Init+0x92>
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	4a77      	ldr	r2, [pc, #476]	; (800a07c <HAL_I2C_Init+0x264>)
 8009ea0:	4293      	cmp	r3, r2
 8009ea2:	bf94      	ite	ls
 8009ea4:	2301      	movls	r3, #1
 8009ea6:	2300      	movhi	r3, #0
 8009ea8:	b2db      	uxtb	r3, r3
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d001      	beq.n	8009eb2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009eae:	2301      	movs	r3, #1
 8009eb0:	e0db      	b.n	800a06a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	4a72      	ldr	r2, [pc, #456]	; (800a080 <HAL_I2C_Init+0x268>)
 8009eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8009eba:	0c9b      	lsrs	r3, r3, #18
 8009ebc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	685b      	ldr	r3, [r3, #4]
 8009ec4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	68ba      	ldr	r2, [r7, #8]
 8009ece:	430a      	orrs	r2, r1
 8009ed0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	6a1b      	ldr	r3, [r3, #32]
 8009ed8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	685b      	ldr	r3, [r3, #4]
 8009ee0:	4a64      	ldr	r2, [pc, #400]	; (800a074 <HAL_I2C_Init+0x25c>)
 8009ee2:	4293      	cmp	r3, r2
 8009ee4:	d802      	bhi.n	8009eec <HAL_I2C_Init+0xd4>
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	3301      	adds	r3, #1
 8009eea:	e009      	b.n	8009f00 <HAL_I2C_Init+0xe8>
 8009eec:	68bb      	ldr	r3, [r7, #8]
 8009eee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009ef2:	fb02 f303 	mul.w	r3, r2, r3
 8009ef6:	4a63      	ldr	r2, [pc, #396]	; (800a084 <HAL_I2C_Init+0x26c>)
 8009ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8009efc:	099b      	lsrs	r3, r3, #6
 8009efe:	3301      	adds	r3, #1
 8009f00:	687a      	ldr	r2, [r7, #4]
 8009f02:	6812      	ldr	r2, [r2, #0]
 8009f04:	430b      	orrs	r3, r1
 8009f06:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	69db      	ldr	r3, [r3, #28]
 8009f0e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8009f12:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	685b      	ldr	r3, [r3, #4]
 8009f1a:	4956      	ldr	r1, [pc, #344]	; (800a074 <HAL_I2C_Init+0x25c>)
 8009f1c:	428b      	cmp	r3, r1
 8009f1e:	d80d      	bhi.n	8009f3c <HAL_I2C_Init+0x124>
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	1e59      	subs	r1, r3, #1
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	685b      	ldr	r3, [r3, #4]
 8009f28:	005b      	lsls	r3, r3, #1
 8009f2a:	fbb1 f3f3 	udiv	r3, r1, r3
 8009f2e:	3301      	adds	r3, #1
 8009f30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009f34:	2b04      	cmp	r3, #4
 8009f36:	bf38      	it	cc
 8009f38:	2304      	movcc	r3, #4
 8009f3a:	e04f      	b.n	8009fdc <HAL_I2C_Init+0x1c4>
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	689b      	ldr	r3, [r3, #8]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d111      	bne.n	8009f68 <HAL_I2C_Init+0x150>
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	1e58      	subs	r0, r3, #1
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6859      	ldr	r1, [r3, #4]
 8009f4c:	460b      	mov	r3, r1
 8009f4e:	005b      	lsls	r3, r3, #1
 8009f50:	440b      	add	r3, r1
 8009f52:	fbb0 f3f3 	udiv	r3, r0, r3
 8009f56:	3301      	adds	r3, #1
 8009f58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	bf0c      	ite	eq
 8009f60:	2301      	moveq	r3, #1
 8009f62:	2300      	movne	r3, #0
 8009f64:	b2db      	uxtb	r3, r3
 8009f66:	e012      	b.n	8009f8e <HAL_I2C_Init+0x176>
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	1e58      	subs	r0, r3, #1
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	6859      	ldr	r1, [r3, #4]
 8009f70:	460b      	mov	r3, r1
 8009f72:	009b      	lsls	r3, r3, #2
 8009f74:	440b      	add	r3, r1
 8009f76:	0099      	lsls	r1, r3, #2
 8009f78:	440b      	add	r3, r1
 8009f7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8009f7e:	3301      	adds	r3, #1
 8009f80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	bf0c      	ite	eq
 8009f88:	2301      	moveq	r3, #1
 8009f8a:	2300      	movne	r3, #0
 8009f8c:	b2db      	uxtb	r3, r3
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d001      	beq.n	8009f96 <HAL_I2C_Init+0x17e>
 8009f92:	2301      	movs	r3, #1
 8009f94:	e022      	b.n	8009fdc <HAL_I2C_Init+0x1c4>
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	689b      	ldr	r3, [r3, #8]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d10e      	bne.n	8009fbc <HAL_I2C_Init+0x1a4>
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	1e58      	subs	r0, r3, #1
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6859      	ldr	r1, [r3, #4]
 8009fa6:	460b      	mov	r3, r1
 8009fa8:	005b      	lsls	r3, r3, #1
 8009faa:	440b      	add	r3, r1
 8009fac:	fbb0 f3f3 	udiv	r3, r0, r3
 8009fb0:	3301      	adds	r3, #1
 8009fb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009fb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009fba:	e00f      	b.n	8009fdc <HAL_I2C_Init+0x1c4>
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	1e58      	subs	r0, r3, #1
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	6859      	ldr	r1, [r3, #4]
 8009fc4:	460b      	mov	r3, r1
 8009fc6:	009b      	lsls	r3, r3, #2
 8009fc8:	440b      	add	r3, r1
 8009fca:	0099      	lsls	r1, r3, #2
 8009fcc:	440b      	add	r3, r1
 8009fce:	fbb0 f3f3 	udiv	r3, r0, r3
 8009fd2:	3301      	adds	r3, #1
 8009fd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009fd8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009fdc:	6879      	ldr	r1, [r7, #4]
 8009fde:	6809      	ldr	r1, [r1, #0]
 8009fe0:	4313      	orrs	r3, r2
 8009fe2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	69da      	ldr	r2, [r3, #28]
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6a1b      	ldr	r3, [r3, #32]
 8009ff6:	431a      	orrs	r2, r3
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	430a      	orrs	r2, r1
 8009ffe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	689b      	ldr	r3, [r3, #8]
 800a006:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800a00a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a00e:	687a      	ldr	r2, [r7, #4]
 800a010:	6911      	ldr	r1, [r2, #16]
 800a012:	687a      	ldr	r2, [r7, #4]
 800a014:	68d2      	ldr	r2, [r2, #12]
 800a016:	4311      	orrs	r1, r2
 800a018:	687a      	ldr	r2, [r7, #4]
 800a01a:	6812      	ldr	r2, [r2, #0]
 800a01c:	430b      	orrs	r3, r1
 800a01e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	68db      	ldr	r3, [r3, #12]
 800a026:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	695a      	ldr	r2, [r3, #20]
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	699b      	ldr	r3, [r3, #24]
 800a032:	431a      	orrs	r2, r3
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	430a      	orrs	r2, r1
 800a03a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	681a      	ldr	r2, [r3, #0]
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f042 0201 	orr.w	r2, r2, #1
 800a04a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2200      	movs	r2, #0
 800a050:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2220      	movs	r2, #32
 800a056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2200      	movs	r2, #0
 800a05e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2200      	movs	r2, #0
 800a064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a068:	2300      	movs	r3, #0
}
 800a06a:	4618      	mov	r0, r3
 800a06c:	3710      	adds	r7, #16
 800a06e:	46bd      	mov	sp, r7
 800a070:	bd80      	pop	{r7, pc}
 800a072:	bf00      	nop
 800a074:	000186a0 	.word	0x000186a0
 800a078:	001e847f 	.word	0x001e847f
 800a07c:	003d08ff 	.word	0x003d08ff
 800a080:	431bde83 	.word	0x431bde83
 800a084:	10624dd3 	.word	0x10624dd3

0800a088 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b082      	sub	sp, #8
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d101      	bne.n	800a09a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800a096:	2301      	movs	r3, #1
 800a098:	e021      	b.n	800a0de <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	2224      	movs	r2, #36	; 0x24
 800a09e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	681a      	ldr	r2, [r3, #0]
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	f022 0201 	bic.w	r2, r2, #1
 800a0b0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800a0b2:	6878      	ldr	r0, [r7, #4]
 800a0b4:	f000 f821 	bl	800a0fa <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a0dc:	2300      	movs	r3, #0
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	3708      	adds	r7, #8
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}

0800a0e6 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800a0e6:	b480      	push	{r7}
 800a0e8:	b083      	sub	sp, #12
 800a0ea:	af00      	add	r7, sp, #0
 800a0ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800a0ee:	bf00      	nop
 800a0f0:	370c      	adds	r7, #12
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f8:	4770      	bx	lr

0800a0fa <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800a0fa:	b480      	push	{r7}
 800a0fc:	b083      	sub	sp, #12
 800a0fe:	af00      	add	r7, sp, #0
 800a100:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800a102:	bf00      	nop
 800a104:	370c      	adds	r7, #12
 800a106:	46bd      	mov	sp, r7
 800a108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10c:	4770      	bx	lr
	...

0800a110 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b088      	sub	sp, #32
 800a114:	af02      	add	r7, sp, #8
 800a116:	60f8      	str	r0, [r7, #12]
 800a118:	4608      	mov	r0, r1
 800a11a:	4611      	mov	r1, r2
 800a11c:	461a      	mov	r2, r3
 800a11e:	4603      	mov	r3, r0
 800a120:	817b      	strh	r3, [r7, #10]
 800a122:	460b      	mov	r3, r1
 800a124:	813b      	strh	r3, [r7, #8]
 800a126:	4613      	mov	r3, r2
 800a128:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a12a:	f7fe f989 	bl	8008440 <HAL_GetTick>
 800a12e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a136:	b2db      	uxtb	r3, r3
 800a138:	2b20      	cmp	r3, #32
 800a13a:	f040 80d9 	bne.w	800a2f0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a13e:	697b      	ldr	r3, [r7, #20]
 800a140:	9300      	str	r3, [sp, #0]
 800a142:	2319      	movs	r3, #25
 800a144:	2201      	movs	r2, #1
 800a146:	496d      	ldr	r1, [pc, #436]	; (800a2fc <HAL_I2C_Mem_Write+0x1ec>)
 800a148:	68f8      	ldr	r0, [r7, #12]
 800a14a:	f000 fc95 	bl	800aa78 <I2C_WaitOnFlagUntilTimeout>
 800a14e:	4603      	mov	r3, r0
 800a150:	2b00      	cmp	r3, #0
 800a152:	d001      	beq.n	800a158 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800a154:	2302      	movs	r3, #2
 800a156:	e0cc      	b.n	800a2f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a15e:	2b01      	cmp	r3, #1
 800a160:	d101      	bne.n	800a166 <HAL_I2C_Mem_Write+0x56>
 800a162:	2302      	movs	r3, #2
 800a164:	e0c5      	b.n	800a2f2 <HAL_I2C_Mem_Write+0x1e2>
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	2201      	movs	r2, #1
 800a16a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	f003 0301 	and.w	r3, r3, #1
 800a178:	2b01      	cmp	r3, #1
 800a17a:	d007      	beq.n	800a18c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	681a      	ldr	r2, [r3, #0]
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	f042 0201 	orr.w	r2, r2, #1
 800a18a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	681a      	ldr	r2, [r3, #0]
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a19a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	2221      	movs	r2, #33	; 0x21
 800a1a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	2240      	movs	r2, #64	; 0x40
 800a1a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	6a3a      	ldr	r2, [r7, #32]
 800a1b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a1bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a1c2:	b29a      	uxth	r2, r3
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	4a4d      	ldr	r2, [pc, #308]	; (800a300 <HAL_I2C_Mem_Write+0x1f0>)
 800a1cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a1ce:	88f8      	ldrh	r0, [r7, #6]
 800a1d0:	893a      	ldrh	r2, [r7, #8]
 800a1d2:	8979      	ldrh	r1, [r7, #10]
 800a1d4:	697b      	ldr	r3, [r7, #20]
 800a1d6:	9301      	str	r3, [sp, #4]
 800a1d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1da:	9300      	str	r3, [sp, #0]
 800a1dc:	4603      	mov	r3, r0
 800a1de:	68f8      	ldr	r0, [r7, #12]
 800a1e0:	f000 fad0 	bl	800a784 <I2C_RequestMemoryWrite>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d052      	beq.n	800a290 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800a1ea:	2301      	movs	r3, #1
 800a1ec:	e081      	b.n	800a2f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a1ee:	697a      	ldr	r2, [r7, #20]
 800a1f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a1f2:	68f8      	ldr	r0, [r7, #12]
 800a1f4:	f000 fd16 	bl	800ac24 <I2C_WaitOnTXEFlagUntilTimeout>
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d00d      	beq.n	800a21a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a202:	2b04      	cmp	r3, #4
 800a204:	d107      	bne.n	800a216 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	681a      	ldr	r2, [r3, #0]
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a214:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a216:	2301      	movs	r3, #1
 800a218:	e06b      	b.n	800a2f2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a21e:	781a      	ldrb	r2, [r3, #0]
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a22a:	1c5a      	adds	r2, r3, #1
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a234:	3b01      	subs	r3, #1
 800a236:	b29a      	uxth	r2, r3
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a240:	b29b      	uxth	r3, r3
 800a242:	3b01      	subs	r3, #1
 800a244:	b29a      	uxth	r2, r3
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	695b      	ldr	r3, [r3, #20]
 800a250:	f003 0304 	and.w	r3, r3, #4
 800a254:	2b04      	cmp	r3, #4
 800a256:	d11b      	bne.n	800a290 <HAL_I2C_Mem_Write+0x180>
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d017      	beq.n	800a290 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a264:	781a      	ldrb	r2, [r3, #0]
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a270:	1c5a      	adds	r2, r3, #1
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a27a:	3b01      	subs	r3, #1
 800a27c:	b29a      	uxth	r2, r3
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a286:	b29b      	uxth	r3, r3
 800a288:	3b01      	subs	r3, #1
 800a28a:	b29a      	uxth	r2, r3
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a294:	2b00      	cmp	r3, #0
 800a296:	d1aa      	bne.n	800a1ee <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a298:	697a      	ldr	r2, [r7, #20]
 800a29a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a29c:	68f8      	ldr	r0, [r7, #12]
 800a29e:	f000 fd02 	bl	800aca6 <I2C_WaitOnBTFFlagUntilTimeout>
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d00d      	beq.n	800a2c4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2ac:	2b04      	cmp	r3, #4
 800a2ae:	d107      	bne.n	800a2c0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	681a      	ldr	r2, [r3, #0]
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a2be:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a2c0:	2301      	movs	r3, #1
 800a2c2:	e016      	b.n	800a2f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	681a      	ldr	r2, [r3, #0]
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a2d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	2220      	movs	r2, #32
 800a2d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	2200      	movs	r2, #0
 800a2e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	e000      	b.n	800a2f2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800a2f0:	2302      	movs	r3, #2
  }
}
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	3718      	adds	r7, #24
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bd80      	pop	{r7, pc}
 800a2fa:	bf00      	nop
 800a2fc:	00100002 	.word	0x00100002
 800a300:	ffff0000 	.word	0xffff0000

0800a304 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b08c      	sub	sp, #48	; 0x30
 800a308:	af02      	add	r7, sp, #8
 800a30a:	60f8      	str	r0, [r7, #12]
 800a30c:	4608      	mov	r0, r1
 800a30e:	4611      	mov	r1, r2
 800a310:	461a      	mov	r2, r3
 800a312:	4603      	mov	r3, r0
 800a314:	817b      	strh	r3, [r7, #10]
 800a316:	460b      	mov	r3, r1
 800a318:	813b      	strh	r3, [r7, #8]
 800a31a:	4613      	mov	r3, r2
 800a31c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a31e:	f7fe f88f 	bl	8008440 <HAL_GetTick>
 800a322:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a32a:	b2db      	uxtb	r3, r3
 800a32c:	2b20      	cmp	r3, #32
 800a32e:	f040 8208 	bne.w	800a742 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a334:	9300      	str	r3, [sp, #0]
 800a336:	2319      	movs	r3, #25
 800a338:	2201      	movs	r2, #1
 800a33a:	497b      	ldr	r1, [pc, #492]	; (800a528 <HAL_I2C_Mem_Read+0x224>)
 800a33c:	68f8      	ldr	r0, [r7, #12]
 800a33e:	f000 fb9b 	bl	800aa78 <I2C_WaitOnFlagUntilTimeout>
 800a342:	4603      	mov	r3, r0
 800a344:	2b00      	cmp	r3, #0
 800a346:	d001      	beq.n	800a34c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800a348:	2302      	movs	r3, #2
 800a34a:	e1fb      	b.n	800a744 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a352:	2b01      	cmp	r3, #1
 800a354:	d101      	bne.n	800a35a <HAL_I2C_Mem_Read+0x56>
 800a356:	2302      	movs	r3, #2
 800a358:	e1f4      	b.n	800a744 <HAL_I2C_Mem_Read+0x440>
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	2201      	movs	r2, #1
 800a35e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	f003 0301 	and.w	r3, r3, #1
 800a36c:	2b01      	cmp	r3, #1
 800a36e:	d007      	beq.n	800a380 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	681a      	ldr	r2, [r3, #0]
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	f042 0201 	orr.w	r2, r2, #1
 800a37e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	681a      	ldr	r2, [r3, #0]
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a38e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	2222      	movs	r2, #34	; 0x22
 800a394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	2240      	movs	r2, #64	; 0x40
 800a39c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800a3b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a3b6:	b29a      	uxth	r2, r3
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	4a5b      	ldr	r2, [pc, #364]	; (800a52c <HAL_I2C_Mem_Read+0x228>)
 800a3c0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a3c2:	88f8      	ldrh	r0, [r7, #6]
 800a3c4:	893a      	ldrh	r2, [r7, #8]
 800a3c6:	8979      	ldrh	r1, [r7, #10]
 800a3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ca:	9301      	str	r3, [sp, #4]
 800a3cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3ce:	9300      	str	r3, [sp, #0]
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	68f8      	ldr	r0, [r7, #12]
 800a3d4:	f000 fa6a 	bl	800a8ac <I2C_RequestMemoryRead>
 800a3d8:	4603      	mov	r3, r0
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d001      	beq.n	800a3e2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800a3de:	2301      	movs	r3, #1
 800a3e0:	e1b0      	b.n	800a744 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d113      	bne.n	800a412 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	623b      	str	r3, [r7, #32]
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	695b      	ldr	r3, [r3, #20]
 800a3f4:	623b      	str	r3, [r7, #32]
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	699b      	ldr	r3, [r3, #24]
 800a3fc:	623b      	str	r3, [r7, #32]
 800a3fe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	681a      	ldr	r2, [r3, #0]
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a40e:	601a      	str	r2, [r3, #0]
 800a410:	e184      	b.n	800a71c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a416:	2b01      	cmp	r3, #1
 800a418:	d11b      	bne.n	800a452 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	681a      	ldr	r2, [r3, #0]
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a428:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a42a:	2300      	movs	r3, #0
 800a42c:	61fb      	str	r3, [r7, #28]
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	695b      	ldr	r3, [r3, #20]
 800a434:	61fb      	str	r3, [r7, #28]
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	699b      	ldr	r3, [r3, #24]
 800a43c:	61fb      	str	r3, [r7, #28]
 800a43e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	681a      	ldr	r2, [r3, #0]
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a44e:	601a      	str	r2, [r3, #0]
 800a450:	e164      	b.n	800a71c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a456:	2b02      	cmp	r3, #2
 800a458:	d11b      	bne.n	800a492 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	681a      	ldr	r2, [r3, #0]
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a468:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	681a      	ldr	r2, [r3, #0]
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a478:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a47a:	2300      	movs	r3, #0
 800a47c:	61bb      	str	r3, [r7, #24]
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	695b      	ldr	r3, [r3, #20]
 800a484:	61bb      	str	r3, [r7, #24]
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	699b      	ldr	r3, [r3, #24]
 800a48c:	61bb      	str	r3, [r7, #24]
 800a48e:	69bb      	ldr	r3, [r7, #24]
 800a490:	e144      	b.n	800a71c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a492:	2300      	movs	r3, #0
 800a494:	617b      	str	r3, [r7, #20]
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	695b      	ldr	r3, [r3, #20]
 800a49c:	617b      	str	r3, [r7, #20]
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	699b      	ldr	r3, [r3, #24]
 800a4a4:	617b      	str	r3, [r7, #20]
 800a4a6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800a4a8:	e138      	b.n	800a71c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4ae:	2b03      	cmp	r3, #3
 800a4b0:	f200 80f1 	bhi.w	800a696 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4b8:	2b01      	cmp	r3, #1
 800a4ba:	d123      	bne.n	800a504 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a4bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a4c0:	68f8      	ldr	r0, [r7, #12]
 800a4c2:	f000 fc31 	bl	800ad28 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a4c6:	4603      	mov	r3, r0
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d001      	beq.n	800a4d0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800a4cc:	2301      	movs	r3, #1
 800a4ce:	e139      	b.n	800a744 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	691a      	ldr	r2, [r3, #16]
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4da:	b2d2      	uxtb	r2, r2
 800a4dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4e2:	1c5a      	adds	r2, r3, #1
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4ec:	3b01      	subs	r3, #1
 800a4ee:	b29a      	uxth	r2, r3
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a4f8:	b29b      	uxth	r3, r3
 800a4fa:	3b01      	subs	r3, #1
 800a4fc:	b29a      	uxth	r2, r3
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a502:	e10b      	b.n	800a71c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a508:	2b02      	cmp	r3, #2
 800a50a:	d14e      	bne.n	800a5aa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a50c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a50e:	9300      	str	r3, [sp, #0]
 800a510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a512:	2200      	movs	r2, #0
 800a514:	4906      	ldr	r1, [pc, #24]	; (800a530 <HAL_I2C_Mem_Read+0x22c>)
 800a516:	68f8      	ldr	r0, [r7, #12]
 800a518:	f000 faae 	bl	800aa78 <I2C_WaitOnFlagUntilTimeout>
 800a51c:	4603      	mov	r3, r0
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d008      	beq.n	800a534 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800a522:	2301      	movs	r3, #1
 800a524:	e10e      	b.n	800a744 <HAL_I2C_Mem_Read+0x440>
 800a526:	bf00      	nop
 800a528:	00100002 	.word	0x00100002
 800a52c:	ffff0000 	.word	0xffff0000
 800a530:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	681a      	ldr	r2, [r3, #0]
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a542:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	691a      	ldr	r2, [r3, #16]
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a54e:	b2d2      	uxtb	r2, r2
 800a550:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a556:	1c5a      	adds	r2, r3, #1
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a560:	3b01      	subs	r3, #1
 800a562:	b29a      	uxth	r2, r3
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a56c:	b29b      	uxth	r3, r3
 800a56e:	3b01      	subs	r3, #1
 800a570:	b29a      	uxth	r2, r3
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	691a      	ldr	r2, [r3, #16]
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a580:	b2d2      	uxtb	r2, r2
 800a582:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a588:	1c5a      	adds	r2, r3, #1
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a592:	3b01      	subs	r3, #1
 800a594:	b29a      	uxth	r2, r3
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a59e:	b29b      	uxth	r3, r3
 800a5a0:	3b01      	subs	r3, #1
 800a5a2:	b29a      	uxth	r2, r3
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a5a8:	e0b8      	b.n	800a71c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a5aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ac:	9300      	str	r3, [sp, #0]
 800a5ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	4966      	ldr	r1, [pc, #408]	; (800a74c <HAL_I2C_Mem_Read+0x448>)
 800a5b4:	68f8      	ldr	r0, [r7, #12]
 800a5b6:	f000 fa5f 	bl	800aa78 <I2C_WaitOnFlagUntilTimeout>
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d001      	beq.n	800a5c4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800a5c0:	2301      	movs	r3, #1
 800a5c2:	e0bf      	b.n	800a744 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	681a      	ldr	r2, [r3, #0]
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a5d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	691a      	ldr	r2, [r3, #16]
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5de:	b2d2      	uxtb	r2, r2
 800a5e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5e6:	1c5a      	adds	r2, r3, #1
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5f0:	3b01      	subs	r3, #1
 800a5f2:	b29a      	uxth	r2, r3
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a5fc:	b29b      	uxth	r3, r3
 800a5fe:	3b01      	subs	r3, #1
 800a600:	b29a      	uxth	r2, r3
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a608:	9300      	str	r3, [sp, #0]
 800a60a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a60c:	2200      	movs	r2, #0
 800a60e:	494f      	ldr	r1, [pc, #316]	; (800a74c <HAL_I2C_Mem_Read+0x448>)
 800a610:	68f8      	ldr	r0, [r7, #12]
 800a612:	f000 fa31 	bl	800aa78 <I2C_WaitOnFlagUntilTimeout>
 800a616:	4603      	mov	r3, r0
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d001      	beq.n	800a620 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800a61c:	2301      	movs	r3, #1
 800a61e:	e091      	b.n	800a744 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	681a      	ldr	r2, [r3, #0]
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a62e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	691a      	ldr	r2, [r3, #16]
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a63a:	b2d2      	uxtb	r2, r2
 800a63c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a642:	1c5a      	adds	r2, r3, #1
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a64c:	3b01      	subs	r3, #1
 800a64e:	b29a      	uxth	r2, r3
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a658:	b29b      	uxth	r3, r3
 800a65a:	3b01      	subs	r3, #1
 800a65c:	b29a      	uxth	r2, r3
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	691a      	ldr	r2, [r3, #16]
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a66c:	b2d2      	uxtb	r2, r2
 800a66e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a674:	1c5a      	adds	r2, r3, #1
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a67e:	3b01      	subs	r3, #1
 800a680:	b29a      	uxth	r2, r3
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a68a:	b29b      	uxth	r3, r3
 800a68c:	3b01      	subs	r3, #1
 800a68e:	b29a      	uxth	r2, r3
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a694:	e042      	b.n	800a71c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a696:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a698:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a69a:	68f8      	ldr	r0, [r7, #12]
 800a69c:	f000 fb44 	bl	800ad28 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d001      	beq.n	800a6aa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	e04c      	b.n	800a744 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	691a      	ldr	r2, [r3, #16]
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6b4:	b2d2      	uxtb	r2, r2
 800a6b6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6bc:	1c5a      	adds	r2, r3, #1
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a6c6:	3b01      	subs	r3, #1
 800a6c8:	b29a      	uxth	r2, r3
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6d2:	b29b      	uxth	r3, r3
 800a6d4:	3b01      	subs	r3, #1
 800a6d6:	b29a      	uxth	r2, r3
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	695b      	ldr	r3, [r3, #20]
 800a6e2:	f003 0304 	and.w	r3, r3, #4
 800a6e6:	2b04      	cmp	r3, #4
 800a6e8:	d118      	bne.n	800a71c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	691a      	ldr	r2, [r3, #16]
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6f4:	b2d2      	uxtb	r2, r2
 800a6f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6fc:	1c5a      	adds	r2, r3, #1
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a706:	3b01      	subs	r3, #1
 800a708:	b29a      	uxth	r2, r3
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a712:	b29b      	uxth	r3, r3
 800a714:	3b01      	subs	r3, #1
 800a716:	b29a      	uxth	r2, r3
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a720:	2b00      	cmp	r3, #0
 800a722:	f47f aec2 	bne.w	800a4aa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	2220      	movs	r2, #32
 800a72a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	2200      	movs	r2, #0
 800a732:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	2200      	movs	r2, #0
 800a73a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a73e:	2300      	movs	r3, #0
 800a740:	e000      	b.n	800a744 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800a742:	2302      	movs	r3, #2
  }
}
 800a744:	4618      	mov	r0, r3
 800a746:	3728      	adds	r7, #40	; 0x28
 800a748:	46bd      	mov	sp, r7
 800a74a:	bd80      	pop	{r7, pc}
 800a74c:	00010004 	.word	0x00010004

0800a750 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800a750:	b480      	push	{r7}
 800a752:	b083      	sub	sp, #12
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a75e:	b2db      	uxtb	r3, r3
}
 800a760:	4618      	mov	r0, r3
 800a762:	370c      	adds	r7, #12
 800a764:	46bd      	mov	sp, r7
 800a766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76a:	4770      	bx	lr

0800a76c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800a76c:	b480      	push	{r7}
 800a76e:	b083      	sub	sp, #12
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800a778:	4618      	mov	r0, r3
 800a77a:	370c      	adds	r7, #12
 800a77c:	46bd      	mov	sp, r7
 800a77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a782:	4770      	bx	lr

0800a784 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b088      	sub	sp, #32
 800a788:	af02      	add	r7, sp, #8
 800a78a:	60f8      	str	r0, [r7, #12]
 800a78c:	4608      	mov	r0, r1
 800a78e:	4611      	mov	r1, r2
 800a790:	461a      	mov	r2, r3
 800a792:	4603      	mov	r3, r0
 800a794:	817b      	strh	r3, [r7, #10]
 800a796:	460b      	mov	r3, r1
 800a798:	813b      	strh	r3, [r7, #8]
 800a79a:	4613      	mov	r3, r2
 800a79c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	681a      	ldr	r2, [r3, #0]
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a7ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a7ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7b0:	9300      	str	r3, [sp, #0]
 800a7b2:	6a3b      	ldr	r3, [r7, #32]
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a7ba:	68f8      	ldr	r0, [r7, #12]
 800a7bc:	f000 f95c 	bl	800aa78 <I2C_WaitOnFlagUntilTimeout>
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d00c      	beq.n	800a7e0 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d003      	beq.n	800a7dc <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a7da:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a7dc:	2303      	movs	r3, #3
 800a7de:	e05f      	b.n	800a8a0 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a7e0:	897b      	ldrh	r3, [r7, #10]
 800a7e2:	b2db      	uxtb	r3, r3
 800a7e4:	461a      	mov	r2, r3
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a7ee:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a7f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7f2:	6a3a      	ldr	r2, [r7, #32]
 800a7f4:	492c      	ldr	r1, [pc, #176]	; (800a8a8 <I2C_RequestMemoryWrite+0x124>)
 800a7f6:	68f8      	ldr	r0, [r7, #12]
 800a7f8:	f000 f995 	bl	800ab26 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d001      	beq.n	800a806 <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 800a802:	2301      	movs	r3, #1
 800a804:	e04c      	b.n	800a8a0 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a806:	2300      	movs	r3, #0
 800a808:	617b      	str	r3, [r7, #20]
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	695b      	ldr	r3, [r3, #20]
 800a810:	617b      	str	r3, [r7, #20]
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	699b      	ldr	r3, [r3, #24]
 800a818:	617b      	str	r3, [r7, #20]
 800a81a:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a81c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a81e:	6a39      	ldr	r1, [r7, #32]
 800a820:	68f8      	ldr	r0, [r7, #12]
 800a822:	f000 f9ff 	bl	800ac24 <I2C_WaitOnTXEFlagUntilTimeout>
 800a826:	4603      	mov	r3, r0
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d00d      	beq.n	800a848 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a830:	2b04      	cmp	r3, #4
 800a832:	d107      	bne.n	800a844 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	681a      	ldr	r2, [r3, #0]
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a842:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a844:	2301      	movs	r3, #1
 800a846:	e02b      	b.n	800a8a0 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a848:	88fb      	ldrh	r3, [r7, #6]
 800a84a:	2b01      	cmp	r3, #1
 800a84c:	d105      	bne.n	800a85a <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a84e:	893b      	ldrh	r3, [r7, #8]
 800a850:	b2da      	uxtb	r2, r3
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	611a      	str	r2, [r3, #16]
 800a858:	e021      	b.n	800a89e <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a85a:	893b      	ldrh	r3, [r7, #8]
 800a85c:	0a1b      	lsrs	r3, r3, #8
 800a85e:	b29b      	uxth	r3, r3
 800a860:	b2da      	uxtb	r2, r3
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a86a:	6a39      	ldr	r1, [r7, #32]
 800a86c:	68f8      	ldr	r0, [r7, #12]
 800a86e:	f000 f9d9 	bl	800ac24 <I2C_WaitOnTXEFlagUntilTimeout>
 800a872:	4603      	mov	r3, r0
 800a874:	2b00      	cmp	r3, #0
 800a876:	d00d      	beq.n	800a894 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a87c:	2b04      	cmp	r3, #4
 800a87e:	d107      	bne.n	800a890 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	681a      	ldr	r2, [r3, #0]
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a88e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a890:	2301      	movs	r3, #1
 800a892:	e005      	b.n	800a8a0 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a894:	893b      	ldrh	r3, [r7, #8]
 800a896:	b2da      	uxtb	r2, r3
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a89e:	2300      	movs	r3, #0
}
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	3718      	adds	r7, #24
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}
 800a8a8:	00010002 	.word	0x00010002

0800a8ac <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b088      	sub	sp, #32
 800a8b0:	af02      	add	r7, sp, #8
 800a8b2:	60f8      	str	r0, [r7, #12]
 800a8b4:	4608      	mov	r0, r1
 800a8b6:	4611      	mov	r1, r2
 800a8b8:	461a      	mov	r2, r3
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	817b      	strh	r3, [r7, #10]
 800a8be:	460b      	mov	r3, r1
 800a8c0:	813b      	strh	r3, [r7, #8]
 800a8c2:	4613      	mov	r3, r2
 800a8c4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	681a      	ldr	r2, [r3, #0]
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a8d4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	681a      	ldr	r2, [r3, #0]
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a8e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a8e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8e8:	9300      	str	r3, [sp, #0]
 800a8ea:	6a3b      	ldr	r3, [r7, #32]
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a8f2:	68f8      	ldr	r0, [r7, #12]
 800a8f4:	f000 f8c0 	bl	800aa78 <I2C_WaitOnFlagUntilTimeout>
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d00c      	beq.n	800a918 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d003      	beq.n	800a914 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a912:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a914:	2303      	movs	r3, #3
 800a916:	e0a9      	b.n	800aa6c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a918:	897b      	ldrh	r3, [r7, #10]
 800a91a:	b2db      	uxtb	r3, r3
 800a91c:	461a      	mov	r2, r3
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a926:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a92a:	6a3a      	ldr	r2, [r7, #32]
 800a92c:	4951      	ldr	r1, [pc, #324]	; (800aa74 <I2C_RequestMemoryRead+0x1c8>)
 800a92e:	68f8      	ldr	r0, [r7, #12]
 800a930:	f000 f8f9 	bl	800ab26 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a934:	4603      	mov	r3, r0
 800a936:	2b00      	cmp	r3, #0
 800a938:	d001      	beq.n	800a93e <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 800a93a:	2301      	movs	r3, #1
 800a93c:	e096      	b.n	800aa6c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a93e:	2300      	movs	r3, #0
 800a940:	617b      	str	r3, [r7, #20]
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	695b      	ldr	r3, [r3, #20]
 800a948:	617b      	str	r3, [r7, #20]
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	699b      	ldr	r3, [r3, #24]
 800a950:	617b      	str	r3, [r7, #20]
 800a952:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a954:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a956:	6a39      	ldr	r1, [r7, #32]
 800a958:	68f8      	ldr	r0, [r7, #12]
 800a95a:	f000 f963 	bl	800ac24 <I2C_WaitOnTXEFlagUntilTimeout>
 800a95e:	4603      	mov	r3, r0
 800a960:	2b00      	cmp	r3, #0
 800a962:	d00d      	beq.n	800a980 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a968:	2b04      	cmp	r3, #4
 800a96a:	d107      	bne.n	800a97c <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	681a      	ldr	r2, [r3, #0]
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a97a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a97c:	2301      	movs	r3, #1
 800a97e:	e075      	b.n	800aa6c <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a980:	88fb      	ldrh	r3, [r7, #6]
 800a982:	2b01      	cmp	r3, #1
 800a984:	d105      	bne.n	800a992 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a986:	893b      	ldrh	r3, [r7, #8]
 800a988:	b2da      	uxtb	r2, r3
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	611a      	str	r2, [r3, #16]
 800a990:	e021      	b.n	800a9d6 <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a992:	893b      	ldrh	r3, [r7, #8]
 800a994:	0a1b      	lsrs	r3, r3, #8
 800a996:	b29b      	uxth	r3, r3
 800a998:	b2da      	uxtb	r2, r3
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a9a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9a2:	6a39      	ldr	r1, [r7, #32]
 800a9a4:	68f8      	ldr	r0, [r7, #12]
 800a9a6:	f000 f93d 	bl	800ac24 <I2C_WaitOnTXEFlagUntilTimeout>
 800a9aa:	4603      	mov	r3, r0
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d00d      	beq.n	800a9cc <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9b4:	2b04      	cmp	r3, #4
 800a9b6:	d107      	bne.n	800a9c8 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	681a      	ldr	r2, [r3, #0]
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a9c6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a9c8:	2301      	movs	r3, #1
 800a9ca:	e04f      	b.n	800aa6c <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a9cc:	893b      	ldrh	r3, [r7, #8]
 800a9ce:	b2da      	uxtb	r2, r3
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a9d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9d8:	6a39      	ldr	r1, [r7, #32]
 800a9da:	68f8      	ldr	r0, [r7, #12]
 800a9dc:	f000 f922 	bl	800ac24 <I2C_WaitOnTXEFlagUntilTimeout>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d00d      	beq.n	800aa02 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9ea:	2b04      	cmp	r3, #4
 800a9ec:	d107      	bne.n	800a9fe <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	681a      	ldr	r2, [r3, #0]
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a9fc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a9fe:	2301      	movs	r3, #1
 800aa00:	e034      	b.n	800aa6c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	681a      	ldr	r2, [r3, #0]
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800aa10:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800aa12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa14:	9300      	str	r3, [sp, #0]
 800aa16:	6a3b      	ldr	r3, [r7, #32]
 800aa18:	2200      	movs	r2, #0
 800aa1a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800aa1e:	68f8      	ldr	r0, [r7, #12]
 800aa20:	f000 f82a 	bl	800aa78 <I2C_WaitOnFlagUntilTimeout>
 800aa24:	4603      	mov	r3, r0
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d00c      	beq.n	800aa44 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d003      	beq.n	800aa40 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aa3e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800aa40:	2303      	movs	r3, #3
 800aa42:	e013      	b.n	800aa6c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800aa44:	897b      	ldrh	r3, [r7, #10]
 800aa46:	b2db      	uxtb	r3, r3
 800aa48:	f043 0301 	orr.w	r3, r3, #1
 800aa4c:	b2da      	uxtb	r2, r3
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800aa54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa56:	6a3a      	ldr	r2, [r7, #32]
 800aa58:	4906      	ldr	r1, [pc, #24]	; (800aa74 <I2C_RequestMemoryRead+0x1c8>)
 800aa5a:	68f8      	ldr	r0, [r7, #12]
 800aa5c:	f000 f863 	bl	800ab26 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800aa60:	4603      	mov	r3, r0
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d001      	beq.n	800aa6a <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 800aa66:	2301      	movs	r3, #1
 800aa68:	e000      	b.n	800aa6c <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 800aa6a:	2300      	movs	r3, #0
}
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	3718      	adds	r7, #24
 800aa70:	46bd      	mov	sp, r7
 800aa72:	bd80      	pop	{r7, pc}
 800aa74:	00010002 	.word	0x00010002

0800aa78 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b084      	sub	sp, #16
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	60f8      	str	r0, [r7, #12]
 800aa80:	60b9      	str	r1, [r7, #8]
 800aa82:	603b      	str	r3, [r7, #0]
 800aa84:	4613      	mov	r3, r2
 800aa86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800aa88:	e025      	b.n	800aad6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa90:	d021      	beq.n	800aad6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa92:	f7fd fcd5 	bl	8008440 <HAL_GetTick>
 800aa96:	4602      	mov	r2, r0
 800aa98:	69bb      	ldr	r3, [r7, #24]
 800aa9a:	1ad3      	subs	r3, r2, r3
 800aa9c:	683a      	ldr	r2, [r7, #0]
 800aa9e:	429a      	cmp	r2, r3
 800aaa0:	d302      	bcc.n	800aaa8 <I2C_WaitOnFlagUntilTimeout+0x30>
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d116      	bne.n	800aad6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	2200      	movs	r2, #0
 800aaac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	2220      	movs	r2, #32
 800aab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	2200      	movs	r2, #0
 800aaba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aac2:	f043 0220 	orr.w	r2, r3, #32
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	2200      	movs	r2, #0
 800aace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800aad2:	2301      	movs	r3, #1
 800aad4:	e023      	b.n	800ab1e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800aad6:	68bb      	ldr	r3, [r7, #8]
 800aad8:	0c1b      	lsrs	r3, r3, #16
 800aada:	b2db      	uxtb	r3, r3
 800aadc:	2b01      	cmp	r3, #1
 800aade:	d10d      	bne.n	800aafc <I2C_WaitOnFlagUntilTimeout+0x84>
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	695b      	ldr	r3, [r3, #20]
 800aae6:	43da      	mvns	r2, r3
 800aae8:	68bb      	ldr	r3, [r7, #8]
 800aaea:	4013      	ands	r3, r2
 800aaec:	b29b      	uxth	r3, r3
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	bf0c      	ite	eq
 800aaf2:	2301      	moveq	r3, #1
 800aaf4:	2300      	movne	r3, #0
 800aaf6:	b2db      	uxtb	r3, r3
 800aaf8:	461a      	mov	r2, r3
 800aafa:	e00c      	b.n	800ab16 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	699b      	ldr	r3, [r3, #24]
 800ab02:	43da      	mvns	r2, r3
 800ab04:	68bb      	ldr	r3, [r7, #8]
 800ab06:	4013      	ands	r3, r2
 800ab08:	b29b      	uxth	r3, r3
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	bf0c      	ite	eq
 800ab0e:	2301      	moveq	r3, #1
 800ab10:	2300      	movne	r3, #0
 800ab12:	b2db      	uxtb	r3, r3
 800ab14:	461a      	mov	r2, r3
 800ab16:	79fb      	ldrb	r3, [r7, #7]
 800ab18:	429a      	cmp	r2, r3
 800ab1a:	d0b6      	beq.n	800aa8a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ab1c:	2300      	movs	r3, #0
}
 800ab1e:	4618      	mov	r0, r3
 800ab20:	3710      	adds	r7, #16
 800ab22:	46bd      	mov	sp, r7
 800ab24:	bd80      	pop	{r7, pc}

0800ab26 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800ab26:	b580      	push	{r7, lr}
 800ab28:	b084      	sub	sp, #16
 800ab2a:	af00      	add	r7, sp, #0
 800ab2c:	60f8      	str	r0, [r7, #12]
 800ab2e:	60b9      	str	r1, [r7, #8]
 800ab30:	607a      	str	r2, [r7, #4]
 800ab32:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800ab34:	e051      	b.n	800abda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	695b      	ldr	r3, [r3, #20]
 800ab3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ab40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab44:	d123      	bne.n	800ab8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	681a      	ldr	r2, [r3, #0]
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ab54:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800ab5e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	2200      	movs	r2, #0
 800ab64:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	2220      	movs	r2, #32
 800ab6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	2200      	movs	r2, #0
 800ab72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab7a:	f043 0204 	orr.w	r2, r3, #4
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	2200      	movs	r2, #0
 800ab86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800ab8a:	2301      	movs	r3, #1
 800ab8c:	e046      	b.n	800ac1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab94:	d021      	beq.n	800abda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab96:	f7fd fc53 	bl	8008440 <HAL_GetTick>
 800ab9a:	4602      	mov	r2, r0
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	1ad3      	subs	r3, r2, r3
 800aba0:	687a      	ldr	r2, [r7, #4]
 800aba2:	429a      	cmp	r2, r3
 800aba4:	d302      	bcc.n	800abac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d116      	bne.n	800abda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	2200      	movs	r2, #0
 800abb0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	2220      	movs	r2, #32
 800abb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	2200      	movs	r2, #0
 800abbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abc6:	f043 0220 	orr.w	r2, r3, #32
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	2200      	movs	r2, #0
 800abd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800abd6:	2301      	movs	r3, #1
 800abd8:	e020      	b.n	800ac1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800abda:	68bb      	ldr	r3, [r7, #8]
 800abdc:	0c1b      	lsrs	r3, r3, #16
 800abde:	b2db      	uxtb	r3, r3
 800abe0:	2b01      	cmp	r3, #1
 800abe2:	d10c      	bne.n	800abfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	695b      	ldr	r3, [r3, #20]
 800abea:	43da      	mvns	r2, r3
 800abec:	68bb      	ldr	r3, [r7, #8]
 800abee:	4013      	ands	r3, r2
 800abf0:	b29b      	uxth	r3, r3
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	bf14      	ite	ne
 800abf6:	2301      	movne	r3, #1
 800abf8:	2300      	moveq	r3, #0
 800abfa:	b2db      	uxtb	r3, r3
 800abfc:	e00b      	b.n	800ac16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	699b      	ldr	r3, [r3, #24]
 800ac04:	43da      	mvns	r2, r3
 800ac06:	68bb      	ldr	r3, [r7, #8]
 800ac08:	4013      	ands	r3, r2
 800ac0a:	b29b      	uxth	r3, r3
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	bf14      	ite	ne
 800ac10:	2301      	movne	r3, #1
 800ac12:	2300      	moveq	r3, #0
 800ac14:	b2db      	uxtb	r3, r3
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d18d      	bne.n	800ab36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800ac1a:	2300      	movs	r3, #0
}
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	3710      	adds	r7, #16
 800ac20:	46bd      	mov	sp, r7
 800ac22:	bd80      	pop	{r7, pc}

0800ac24 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b084      	sub	sp, #16
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	60f8      	str	r0, [r7, #12]
 800ac2c:	60b9      	str	r1, [r7, #8]
 800ac2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ac30:	e02d      	b.n	800ac8e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800ac32:	68f8      	ldr	r0, [r7, #12]
 800ac34:	f000 f8ce 	bl	800add4 <I2C_IsAcknowledgeFailed>
 800ac38:	4603      	mov	r3, r0
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d001      	beq.n	800ac42 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800ac3e:	2301      	movs	r3, #1
 800ac40:	e02d      	b.n	800ac9e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ac42:	68bb      	ldr	r3, [r7, #8]
 800ac44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac48:	d021      	beq.n	800ac8e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac4a:	f7fd fbf9 	bl	8008440 <HAL_GetTick>
 800ac4e:	4602      	mov	r2, r0
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	1ad3      	subs	r3, r2, r3
 800ac54:	68ba      	ldr	r2, [r7, #8]
 800ac56:	429a      	cmp	r2, r3
 800ac58:	d302      	bcc.n	800ac60 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800ac5a:	68bb      	ldr	r3, [r7, #8]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d116      	bne.n	800ac8e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	2200      	movs	r2, #0
 800ac64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	2220      	movs	r2, #32
 800ac6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	2200      	movs	r2, #0
 800ac72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac7a:	f043 0220 	orr.w	r2, r3, #32
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	2200      	movs	r2, #0
 800ac86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ac8a:	2301      	movs	r3, #1
 800ac8c:	e007      	b.n	800ac9e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	695b      	ldr	r3, [r3, #20]
 800ac94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac98:	2b80      	cmp	r3, #128	; 0x80
 800ac9a:	d1ca      	bne.n	800ac32 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ac9c:	2300      	movs	r3, #0
}
 800ac9e:	4618      	mov	r0, r3
 800aca0:	3710      	adds	r7, #16
 800aca2:	46bd      	mov	sp, r7
 800aca4:	bd80      	pop	{r7, pc}

0800aca6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800aca6:	b580      	push	{r7, lr}
 800aca8:	b084      	sub	sp, #16
 800acaa:	af00      	add	r7, sp, #0
 800acac:	60f8      	str	r0, [r7, #12]
 800acae:	60b9      	str	r1, [r7, #8]
 800acb0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800acb2:	e02d      	b.n	800ad10 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800acb4:	68f8      	ldr	r0, [r7, #12]
 800acb6:	f000 f88d 	bl	800add4 <I2C_IsAcknowledgeFailed>
 800acba:	4603      	mov	r3, r0
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d001      	beq.n	800acc4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800acc0:	2301      	movs	r3, #1
 800acc2:	e02d      	b.n	800ad20 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acca:	d021      	beq.n	800ad10 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800accc:	f7fd fbb8 	bl	8008440 <HAL_GetTick>
 800acd0:	4602      	mov	r2, r0
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	1ad3      	subs	r3, r2, r3
 800acd6:	68ba      	ldr	r2, [r7, #8]
 800acd8:	429a      	cmp	r2, r3
 800acda:	d302      	bcc.n	800ace2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800acdc:	68bb      	ldr	r3, [r7, #8]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d116      	bne.n	800ad10 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	2200      	movs	r2, #0
 800ace6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	2220      	movs	r2, #32
 800acec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	2200      	movs	r2, #0
 800acf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acfc:	f043 0220 	orr.w	r2, r3, #32
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	2200      	movs	r2, #0
 800ad08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ad0c:	2301      	movs	r3, #1
 800ad0e:	e007      	b.n	800ad20 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	695b      	ldr	r3, [r3, #20]
 800ad16:	f003 0304 	and.w	r3, r3, #4
 800ad1a:	2b04      	cmp	r3, #4
 800ad1c:	d1ca      	bne.n	800acb4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ad1e:	2300      	movs	r3, #0
}
 800ad20:	4618      	mov	r0, r3
 800ad22:	3710      	adds	r7, #16
 800ad24:	46bd      	mov	sp, r7
 800ad26:	bd80      	pop	{r7, pc}

0800ad28 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b084      	sub	sp, #16
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	60f8      	str	r0, [r7, #12]
 800ad30:	60b9      	str	r1, [r7, #8]
 800ad32:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ad34:	e042      	b.n	800adbc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	695b      	ldr	r3, [r3, #20]
 800ad3c:	f003 0310 	and.w	r3, r3, #16
 800ad40:	2b10      	cmp	r3, #16
 800ad42:	d119      	bne.n	800ad78 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	f06f 0210 	mvn.w	r2, #16
 800ad4c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	2200      	movs	r2, #0
 800ad52:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	2220      	movs	r2, #32
 800ad58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	2200      	movs	r2, #0
 800ad60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	2200      	movs	r2, #0
 800ad70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800ad74:	2301      	movs	r3, #1
 800ad76:	e029      	b.n	800adcc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ad78:	f7fd fb62 	bl	8008440 <HAL_GetTick>
 800ad7c:	4602      	mov	r2, r0
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	1ad3      	subs	r3, r2, r3
 800ad82:	68ba      	ldr	r2, [r7, #8]
 800ad84:	429a      	cmp	r2, r3
 800ad86:	d302      	bcc.n	800ad8e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800ad88:	68bb      	ldr	r3, [r7, #8]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d116      	bne.n	800adbc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	2200      	movs	r2, #0
 800ad92:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	2220      	movs	r2, #32
 800ad98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	2200      	movs	r2, #0
 800ada0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ada8:	f043 0220 	orr.w	r2, r3, #32
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	2200      	movs	r2, #0
 800adb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800adb8:	2301      	movs	r3, #1
 800adba:	e007      	b.n	800adcc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	695b      	ldr	r3, [r3, #20]
 800adc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adc6:	2b40      	cmp	r3, #64	; 0x40
 800adc8:	d1b5      	bne.n	800ad36 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800adca:	2300      	movs	r3, #0
}
 800adcc:	4618      	mov	r0, r3
 800adce:	3710      	adds	r7, #16
 800add0:	46bd      	mov	sp, r7
 800add2:	bd80      	pop	{r7, pc}

0800add4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800add4:	b480      	push	{r7}
 800add6:	b083      	sub	sp, #12
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	695b      	ldr	r3, [r3, #20]
 800ade2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ade6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800adea:	d11b      	bne.n	800ae24 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800adf4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	2200      	movs	r2, #0
 800adfa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	2220      	movs	r2, #32
 800ae00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2200      	movs	r2, #0
 800ae08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae10:	f043 0204 	orr.w	r2, r3, #4
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800ae20:	2301      	movs	r3, #1
 800ae22:	e000      	b.n	800ae26 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800ae24:	2300      	movs	r3, #0
}
 800ae26:	4618      	mov	r0, r3
 800ae28:	370c      	adds	r7, #12
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae30:	4770      	bx	lr
	...

0800ae34 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b086      	sub	sp, #24
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d101      	bne.n	800ae46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ae42:	2301      	movs	r3, #1
 800ae44:	e25b      	b.n	800b2fe <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	f003 0301 	and.w	r3, r3, #1
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d075      	beq.n	800af3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800ae52:	4ba3      	ldr	r3, [pc, #652]	; (800b0e0 <HAL_RCC_OscConfig+0x2ac>)
 800ae54:	689b      	ldr	r3, [r3, #8]
 800ae56:	f003 030c 	and.w	r3, r3, #12
 800ae5a:	2b04      	cmp	r3, #4
 800ae5c:	d00c      	beq.n	800ae78 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ae5e:	4ba0      	ldr	r3, [pc, #640]	; (800b0e0 <HAL_RCC_OscConfig+0x2ac>)
 800ae60:	689b      	ldr	r3, [r3, #8]
 800ae62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800ae66:	2b08      	cmp	r3, #8
 800ae68:	d112      	bne.n	800ae90 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ae6a:	4b9d      	ldr	r3, [pc, #628]	; (800b0e0 <HAL_RCC_OscConfig+0x2ac>)
 800ae6c:	685b      	ldr	r3, [r3, #4]
 800ae6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ae72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ae76:	d10b      	bne.n	800ae90 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ae78:	4b99      	ldr	r3, [pc, #612]	; (800b0e0 <HAL_RCC_OscConfig+0x2ac>)
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d05b      	beq.n	800af3c <HAL_RCC_OscConfig+0x108>
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	685b      	ldr	r3, [r3, #4]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d157      	bne.n	800af3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800ae8c:	2301      	movs	r3, #1
 800ae8e:	e236      	b.n	800b2fe <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	685b      	ldr	r3, [r3, #4]
 800ae94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae98:	d106      	bne.n	800aea8 <HAL_RCC_OscConfig+0x74>
 800ae9a:	4b91      	ldr	r3, [pc, #580]	; (800b0e0 <HAL_RCC_OscConfig+0x2ac>)
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	4a90      	ldr	r2, [pc, #576]	; (800b0e0 <HAL_RCC_OscConfig+0x2ac>)
 800aea0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aea4:	6013      	str	r3, [r2, #0]
 800aea6:	e01d      	b.n	800aee4 <HAL_RCC_OscConfig+0xb0>
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	685b      	ldr	r3, [r3, #4]
 800aeac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800aeb0:	d10c      	bne.n	800aecc <HAL_RCC_OscConfig+0x98>
 800aeb2:	4b8b      	ldr	r3, [pc, #556]	; (800b0e0 <HAL_RCC_OscConfig+0x2ac>)
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	4a8a      	ldr	r2, [pc, #552]	; (800b0e0 <HAL_RCC_OscConfig+0x2ac>)
 800aeb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800aebc:	6013      	str	r3, [r2, #0]
 800aebe:	4b88      	ldr	r3, [pc, #544]	; (800b0e0 <HAL_RCC_OscConfig+0x2ac>)
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	4a87      	ldr	r2, [pc, #540]	; (800b0e0 <HAL_RCC_OscConfig+0x2ac>)
 800aec4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aec8:	6013      	str	r3, [r2, #0]
 800aeca:	e00b      	b.n	800aee4 <HAL_RCC_OscConfig+0xb0>
 800aecc:	4b84      	ldr	r3, [pc, #528]	; (800b0e0 <HAL_RCC_OscConfig+0x2ac>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	4a83      	ldr	r2, [pc, #524]	; (800b0e0 <HAL_RCC_OscConfig+0x2ac>)
 800aed2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aed6:	6013      	str	r3, [r2, #0]
 800aed8:	4b81      	ldr	r3, [pc, #516]	; (800b0e0 <HAL_RCC_OscConfig+0x2ac>)
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	4a80      	ldr	r2, [pc, #512]	; (800b0e0 <HAL_RCC_OscConfig+0x2ac>)
 800aede:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800aee2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	685b      	ldr	r3, [r3, #4]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d013      	beq.n	800af14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aeec:	f7fd faa8 	bl	8008440 <HAL_GetTick>
 800aef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800aef2:	e008      	b.n	800af06 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800aef4:	f7fd faa4 	bl	8008440 <HAL_GetTick>
 800aef8:	4602      	mov	r2, r0
 800aefa:	693b      	ldr	r3, [r7, #16]
 800aefc:	1ad3      	subs	r3, r2, r3
 800aefe:	2b64      	cmp	r3, #100	; 0x64
 800af00:	d901      	bls.n	800af06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800af02:	2303      	movs	r3, #3
 800af04:	e1fb      	b.n	800b2fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800af06:	4b76      	ldr	r3, [pc, #472]	; (800b0e0 <HAL_RCC_OscConfig+0x2ac>)
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d0f0      	beq.n	800aef4 <HAL_RCC_OscConfig+0xc0>
 800af12:	e014      	b.n	800af3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800af14:	f7fd fa94 	bl	8008440 <HAL_GetTick>
 800af18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800af1a:	e008      	b.n	800af2e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800af1c:	f7fd fa90 	bl	8008440 <HAL_GetTick>
 800af20:	4602      	mov	r2, r0
 800af22:	693b      	ldr	r3, [r7, #16]
 800af24:	1ad3      	subs	r3, r2, r3
 800af26:	2b64      	cmp	r3, #100	; 0x64
 800af28:	d901      	bls.n	800af2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800af2a:	2303      	movs	r3, #3
 800af2c:	e1e7      	b.n	800b2fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800af2e:	4b6c      	ldr	r3, [pc, #432]	; (800b0e0 <HAL_RCC_OscConfig+0x2ac>)
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af36:	2b00      	cmp	r3, #0
 800af38:	d1f0      	bne.n	800af1c <HAL_RCC_OscConfig+0xe8>
 800af3a:	e000      	b.n	800af3e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800af3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	f003 0302 	and.w	r3, r3, #2
 800af46:	2b00      	cmp	r3, #0
 800af48:	d063      	beq.n	800b012 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800af4a:	4b65      	ldr	r3, [pc, #404]	; (800b0e0 <HAL_RCC_OscConfig+0x2ac>)
 800af4c:	689b      	ldr	r3, [r3, #8]
 800af4e:	f003 030c 	and.w	r3, r3, #12
 800af52:	2b00      	cmp	r3, #0
 800af54:	d00b      	beq.n	800af6e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800af56:	4b62      	ldr	r3, [pc, #392]	; (800b0e0 <HAL_RCC_OscConfig+0x2ac>)
 800af58:	689b      	ldr	r3, [r3, #8]
 800af5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800af5e:	2b08      	cmp	r3, #8
 800af60:	d11c      	bne.n	800af9c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800af62:	4b5f      	ldr	r3, [pc, #380]	; (800b0e0 <HAL_RCC_OscConfig+0x2ac>)
 800af64:	685b      	ldr	r3, [r3, #4]
 800af66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d116      	bne.n	800af9c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800af6e:	4b5c      	ldr	r3, [pc, #368]	; (800b0e0 <HAL_RCC_OscConfig+0x2ac>)
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	f003 0302 	and.w	r3, r3, #2
 800af76:	2b00      	cmp	r3, #0
 800af78:	d005      	beq.n	800af86 <HAL_RCC_OscConfig+0x152>
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	68db      	ldr	r3, [r3, #12]
 800af7e:	2b01      	cmp	r3, #1
 800af80:	d001      	beq.n	800af86 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800af82:	2301      	movs	r3, #1
 800af84:	e1bb      	b.n	800b2fe <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800af86:	4b56      	ldr	r3, [pc, #344]	; (800b0e0 <HAL_RCC_OscConfig+0x2ac>)
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	691b      	ldr	r3, [r3, #16]
 800af92:	00db      	lsls	r3, r3, #3
 800af94:	4952      	ldr	r1, [pc, #328]	; (800b0e0 <HAL_RCC_OscConfig+0x2ac>)
 800af96:	4313      	orrs	r3, r2
 800af98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800af9a:	e03a      	b.n	800b012 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	68db      	ldr	r3, [r3, #12]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d020      	beq.n	800afe6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800afa4:	4b4f      	ldr	r3, [pc, #316]	; (800b0e4 <HAL_RCC_OscConfig+0x2b0>)
 800afa6:	2201      	movs	r2, #1
 800afa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800afaa:	f7fd fa49 	bl	8008440 <HAL_GetTick>
 800afae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800afb0:	e008      	b.n	800afc4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800afb2:	f7fd fa45 	bl	8008440 <HAL_GetTick>
 800afb6:	4602      	mov	r2, r0
 800afb8:	693b      	ldr	r3, [r7, #16]
 800afba:	1ad3      	subs	r3, r2, r3
 800afbc:	2b02      	cmp	r3, #2
 800afbe:	d901      	bls.n	800afc4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800afc0:	2303      	movs	r3, #3
 800afc2:	e19c      	b.n	800b2fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800afc4:	4b46      	ldr	r3, [pc, #280]	; (800b0e0 <HAL_RCC_OscConfig+0x2ac>)
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	f003 0302 	and.w	r3, r3, #2
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d0f0      	beq.n	800afb2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800afd0:	4b43      	ldr	r3, [pc, #268]	; (800b0e0 <HAL_RCC_OscConfig+0x2ac>)
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	691b      	ldr	r3, [r3, #16]
 800afdc:	00db      	lsls	r3, r3, #3
 800afde:	4940      	ldr	r1, [pc, #256]	; (800b0e0 <HAL_RCC_OscConfig+0x2ac>)
 800afe0:	4313      	orrs	r3, r2
 800afe2:	600b      	str	r3, [r1, #0]
 800afe4:	e015      	b.n	800b012 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800afe6:	4b3f      	ldr	r3, [pc, #252]	; (800b0e4 <HAL_RCC_OscConfig+0x2b0>)
 800afe8:	2200      	movs	r2, #0
 800afea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800afec:	f7fd fa28 	bl	8008440 <HAL_GetTick>
 800aff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800aff2:	e008      	b.n	800b006 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800aff4:	f7fd fa24 	bl	8008440 <HAL_GetTick>
 800aff8:	4602      	mov	r2, r0
 800affa:	693b      	ldr	r3, [r7, #16]
 800affc:	1ad3      	subs	r3, r2, r3
 800affe:	2b02      	cmp	r3, #2
 800b000:	d901      	bls.n	800b006 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800b002:	2303      	movs	r3, #3
 800b004:	e17b      	b.n	800b2fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b006:	4b36      	ldr	r3, [pc, #216]	; (800b0e0 <HAL_RCC_OscConfig+0x2ac>)
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	f003 0302 	and.w	r3, r3, #2
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d1f0      	bne.n	800aff4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	f003 0308 	and.w	r3, r3, #8
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d030      	beq.n	800b080 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	695b      	ldr	r3, [r3, #20]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d016      	beq.n	800b054 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b026:	4b30      	ldr	r3, [pc, #192]	; (800b0e8 <HAL_RCC_OscConfig+0x2b4>)
 800b028:	2201      	movs	r2, #1
 800b02a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b02c:	f7fd fa08 	bl	8008440 <HAL_GetTick>
 800b030:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b032:	e008      	b.n	800b046 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b034:	f7fd fa04 	bl	8008440 <HAL_GetTick>
 800b038:	4602      	mov	r2, r0
 800b03a:	693b      	ldr	r3, [r7, #16]
 800b03c:	1ad3      	subs	r3, r2, r3
 800b03e:	2b02      	cmp	r3, #2
 800b040:	d901      	bls.n	800b046 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800b042:	2303      	movs	r3, #3
 800b044:	e15b      	b.n	800b2fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b046:	4b26      	ldr	r3, [pc, #152]	; (800b0e0 <HAL_RCC_OscConfig+0x2ac>)
 800b048:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b04a:	f003 0302 	and.w	r3, r3, #2
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d0f0      	beq.n	800b034 <HAL_RCC_OscConfig+0x200>
 800b052:	e015      	b.n	800b080 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b054:	4b24      	ldr	r3, [pc, #144]	; (800b0e8 <HAL_RCC_OscConfig+0x2b4>)
 800b056:	2200      	movs	r2, #0
 800b058:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b05a:	f7fd f9f1 	bl	8008440 <HAL_GetTick>
 800b05e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b060:	e008      	b.n	800b074 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b062:	f7fd f9ed 	bl	8008440 <HAL_GetTick>
 800b066:	4602      	mov	r2, r0
 800b068:	693b      	ldr	r3, [r7, #16]
 800b06a:	1ad3      	subs	r3, r2, r3
 800b06c:	2b02      	cmp	r3, #2
 800b06e:	d901      	bls.n	800b074 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800b070:	2303      	movs	r3, #3
 800b072:	e144      	b.n	800b2fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b074:	4b1a      	ldr	r3, [pc, #104]	; (800b0e0 <HAL_RCC_OscConfig+0x2ac>)
 800b076:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b078:	f003 0302 	and.w	r3, r3, #2
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d1f0      	bne.n	800b062 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	f003 0304 	and.w	r3, r3, #4
 800b088:	2b00      	cmp	r3, #0
 800b08a:	f000 80a0 	beq.w	800b1ce <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b08e:	2300      	movs	r3, #0
 800b090:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b092:	4b13      	ldr	r3, [pc, #76]	; (800b0e0 <HAL_RCC_OscConfig+0x2ac>)
 800b094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d10f      	bne.n	800b0be <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b09e:	2300      	movs	r3, #0
 800b0a0:	60bb      	str	r3, [r7, #8]
 800b0a2:	4b0f      	ldr	r3, [pc, #60]	; (800b0e0 <HAL_RCC_OscConfig+0x2ac>)
 800b0a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0a6:	4a0e      	ldr	r2, [pc, #56]	; (800b0e0 <HAL_RCC_OscConfig+0x2ac>)
 800b0a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b0ac:	6413      	str	r3, [r2, #64]	; 0x40
 800b0ae:	4b0c      	ldr	r3, [pc, #48]	; (800b0e0 <HAL_RCC_OscConfig+0x2ac>)
 800b0b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b0b6:	60bb      	str	r3, [r7, #8]
 800b0b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b0ba:	2301      	movs	r3, #1
 800b0bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b0be:	4b0b      	ldr	r3, [pc, #44]	; (800b0ec <HAL_RCC_OscConfig+0x2b8>)
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d121      	bne.n	800b10e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b0ca:	4b08      	ldr	r3, [pc, #32]	; (800b0ec <HAL_RCC_OscConfig+0x2b8>)
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	4a07      	ldr	r2, [pc, #28]	; (800b0ec <HAL_RCC_OscConfig+0x2b8>)
 800b0d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b0d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b0d6:	f7fd f9b3 	bl	8008440 <HAL_GetTick>
 800b0da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b0dc:	e011      	b.n	800b102 <HAL_RCC_OscConfig+0x2ce>
 800b0de:	bf00      	nop
 800b0e0:	40023800 	.word	0x40023800
 800b0e4:	42470000 	.word	0x42470000
 800b0e8:	42470e80 	.word	0x42470e80
 800b0ec:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b0f0:	f7fd f9a6 	bl	8008440 <HAL_GetTick>
 800b0f4:	4602      	mov	r2, r0
 800b0f6:	693b      	ldr	r3, [r7, #16]
 800b0f8:	1ad3      	subs	r3, r2, r3
 800b0fa:	2b02      	cmp	r3, #2
 800b0fc:	d901      	bls.n	800b102 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800b0fe:	2303      	movs	r3, #3
 800b100:	e0fd      	b.n	800b2fe <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b102:	4b81      	ldr	r3, [pc, #516]	; (800b308 <HAL_RCC_OscConfig+0x4d4>)
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d0f0      	beq.n	800b0f0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	689b      	ldr	r3, [r3, #8]
 800b112:	2b01      	cmp	r3, #1
 800b114:	d106      	bne.n	800b124 <HAL_RCC_OscConfig+0x2f0>
 800b116:	4b7d      	ldr	r3, [pc, #500]	; (800b30c <HAL_RCC_OscConfig+0x4d8>)
 800b118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b11a:	4a7c      	ldr	r2, [pc, #496]	; (800b30c <HAL_RCC_OscConfig+0x4d8>)
 800b11c:	f043 0301 	orr.w	r3, r3, #1
 800b120:	6713      	str	r3, [r2, #112]	; 0x70
 800b122:	e01c      	b.n	800b15e <HAL_RCC_OscConfig+0x32a>
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	689b      	ldr	r3, [r3, #8]
 800b128:	2b05      	cmp	r3, #5
 800b12a:	d10c      	bne.n	800b146 <HAL_RCC_OscConfig+0x312>
 800b12c:	4b77      	ldr	r3, [pc, #476]	; (800b30c <HAL_RCC_OscConfig+0x4d8>)
 800b12e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b130:	4a76      	ldr	r2, [pc, #472]	; (800b30c <HAL_RCC_OscConfig+0x4d8>)
 800b132:	f043 0304 	orr.w	r3, r3, #4
 800b136:	6713      	str	r3, [r2, #112]	; 0x70
 800b138:	4b74      	ldr	r3, [pc, #464]	; (800b30c <HAL_RCC_OscConfig+0x4d8>)
 800b13a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b13c:	4a73      	ldr	r2, [pc, #460]	; (800b30c <HAL_RCC_OscConfig+0x4d8>)
 800b13e:	f043 0301 	orr.w	r3, r3, #1
 800b142:	6713      	str	r3, [r2, #112]	; 0x70
 800b144:	e00b      	b.n	800b15e <HAL_RCC_OscConfig+0x32a>
 800b146:	4b71      	ldr	r3, [pc, #452]	; (800b30c <HAL_RCC_OscConfig+0x4d8>)
 800b148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b14a:	4a70      	ldr	r2, [pc, #448]	; (800b30c <HAL_RCC_OscConfig+0x4d8>)
 800b14c:	f023 0301 	bic.w	r3, r3, #1
 800b150:	6713      	str	r3, [r2, #112]	; 0x70
 800b152:	4b6e      	ldr	r3, [pc, #440]	; (800b30c <HAL_RCC_OscConfig+0x4d8>)
 800b154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b156:	4a6d      	ldr	r2, [pc, #436]	; (800b30c <HAL_RCC_OscConfig+0x4d8>)
 800b158:	f023 0304 	bic.w	r3, r3, #4
 800b15c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	689b      	ldr	r3, [r3, #8]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d015      	beq.n	800b192 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b166:	f7fd f96b 	bl	8008440 <HAL_GetTick>
 800b16a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b16c:	e00a      	b.n	800b184 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b16e:	f7fd f967 	bl	8008440 <HAL_GetTick>
 800b172:	4602      	mov	r2, r0
 800b174:	693b      	ldr	r3, [r7, #16]
 800b176:	1ad3      	subs	r3, r2, r3
 800b178:	f241 3288 	movw	r2, #5000	; 0x1388
 800b17c:	4293      	cmp	r3, r2
 800b17e:	d901      	bls.n	800b184 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800b180:	2303      	movs	r3, #3
 800b182:	e0bc      	b.n	800b2fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b184:	4b61      	ldr	r3, [pc, #388]	; (800b30c <HAL_RCC_OscConfig+0x4d8>)
 800b186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b188:	f003 0302 	and.w	r3, r3, #2
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d0ee      	beq.n	800b16e <HAL_RCC_OscConfig+0x33a>
 800b190:	e014      	b.n	800b1bc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b192:	f7fd f955 	bl	8008440 <HAL_GetTick>
 800b196:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b198:	e00a      	b.n	800b1b0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b19a:	f7fd f951 	bl	8008440 <HAL_GetTick>
 800b19e:	4602      	mov	r2, r0
 800b1a0:	693b      	ldr	r3, [r7, #16]
 800b1a2:	1ad3      	subs	r3, r2, r3
 800b1a4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b1a8:	4293      	cmp	r3, r2
 800b1aa:	d901      	bls.n	800b1b0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800b1ac:	2303      	movs	r3, #3
 800b1ae:	e0a6      	b.n	800b2fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b1b0:	4b56      	ldr	r3, [pc, #344]	; (800b30c <HAL_RCC_OscConfig+0x4d8>)
 800b1b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1b4:	f003 0302 	and.w	r3, r3, #2
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d1ee      	bne.n	800b19a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b1bc:	7dfb      	ldrb	r3, [r7, #23]
 800b1be:	2b01      	cmp	r3, #1
 800b1c0:	d105      	bne.n	800b1ce <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b1c2:	4b52      	ldr	r3, [pc, #328]	; (800b30c <HAL_RCC_OscConfig+0x4d8>)
 800b1c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1c6:	4a51      	ldr	r2, [pc, #324]	; (800b30c <HAL_RCC_OscConfig+0x4d8>)
 800b1c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b1cc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	699b      	ldr	r3, [r3, #24]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	f000 8092 	beq.w	800b2fc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b1d8:	4b4c      	ldr	r3, [pc, #304]	; (800b30c <HAL_RCC_OscConfig+0x4d8>)
 800b1da:	689b      	ldr	r3, [r3, #8]
 800b1dc:	f003 030c 	and.w	r3, r3, #12
 800b1e0:	2b08      	cmp	r3, #8
 800b1e2:	d05c      	beq.n	800b29e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	699b      	ldr	r3, [r3, #24]
 800b1e8:	2b02      	cmp	r3, #2
 800b1ea:	d141      	bne.n	800b270 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b1ec:	4b48      	ldr	r3, [pc, #288]	; (800b310 <HAL_RCC_OscConfig+0x4dc>)
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b1f2:	f7fd f925 	bl	8008440 <HAL_GetTick>
 800b1f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b1f8:	e008      	b.n	800b20c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b1fa:	f7fd f921 	bl	8008440 <HAL_GetTick>
 800b1fe:	4602      	mov	r2, r0
 800b200:	693b      	ldr	r3, [r7, #16]
 800b202:	1ad3      	subs	r3, r2, r3
 800b204:	2b02      	cmp	r3, #2
 800b206:	d901      	bls.n	800b20c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800b208:	2303      	movs	r3, #3
 800b20a:	e078      	b.n	800b2fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b20c:	4b3f      	ldr	r3, [pc, #252]	; (800b30c <HAL_RCC_OscConfig+0x4d8>)
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b214:	2b00      	cmp	r3, #0
 800b216:	d1f0      	bne.n	800b1fa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	69da      	ldr	r2, [r3, #28]
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	6a1b      	ldr	r3, [r3, #32]
 800b220:	431a      	orrs	r2, r3
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b226:	019b      	lsls	r3, r3, #6
 800b228:	431a      	orrs	r2, r3
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b22e:	085b      	lsrs	r3, r3, #1
 800b230:	3b01      	subs	r3, #1
 800b232:	041b      	lsls	r3, r3, #16
 800b234:	431a      	orrs	r2, r3
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b23a:	061b      	lsls	r3, r3, #24
 800b23c:	4933      	ldr	r1, [pc, #204]	; (800b30c <HAL_RCC_OscConfig+0x4d8>)
 800b23e:	4313      	orrs	r3, r2
 800b240:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b242:	4b33      	ldr	r3, [pc, #204]	; (800b310 <HAL_RCC_OscConfig+0x4dc>)
 800b244:	2201      	movs	r2, #1
 800b246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b248:	f7fd f8fa 	bl	8008440 <HAL_GetTick>
 800b24c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b24e:	e008      	b.n	800b262 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b250:	f7fd f8f6 	bl	8008440 <HAL_GetTick>
 800b254:	4602      	mov	r2, r0
 800b256:	693b      	ldr	r3, [r7, #16]
 800b258:	1ad3      	subs	r3, r2, r3
 800b25a:	2b02      	cmp	r3, #2
 800b25c:	d901      	bls.n	800b262 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800b25e:	2303      	movs	r3, #3
 800b260:	e04d      	b.n	800b2fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b262:	4b2a      	ldr	r3, [pc, #168]	; (800b30c <HAL_RCC_OscConfig+0x4d8>)
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d0f0      	beq.n	800b250 <HAL_RCC_OscConfig+0x41c>
 800b26e:	e045      	b.n	800b2fc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b270:	4b27      	ldr	r3, [pc, #156]	; (800b310 <HAL_RCC_OscConfig+0x4dc>)
 800b272:	2200      	movs	r2, #0
 800b274:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b276:	f7fd f8e3 	bl	8008440 <HAL_GetTick>
 800b27a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b27c:	e008      	b.n	800b290 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b27e:	f7fd f8df 	bl	8008440 <HAL_GetTick>
 800b282:	4602      	mov	r2, r0
 800b284:	693b      	ldr	r3, [r7, #16]
 800b286:	1ad3      	subs	r3, r2, r3
 800b288:	2b02      	cmp	r3, #2
 800b28a:	d901      	bls.n	800b290 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800b28c:	2303      	movs	r3, #3
 800b28e:	e036      	b.n	800b2fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b290:	4b1e      	ldr	r3, [pc, #120]	; (800b30c <HAL_RCC_OscConfig+0x4d8>)
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d1f0      	bne.n	800b27e <HAL_RCC_OscConfig+0x44a>
 800b29c:	e02e      	b.n	800b2fc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	699b      	ldr	r3, [r3, #24]
 800b2a2:	2b01      	cmp	r3, #1
 800b2a4:	d101      	bne.n	800b2aa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800b2a6:	2301      	movs	r3, #1
 800b2a8:	e029      	b.n	800b2fe <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800b2aa:	4b18      	ldr	r3, [pc, #96]	; (800b30c <HAL_RCC_OscConfig+0x4d8>)
 800b2ac:	685b      	ldr	r3, [r3, #4]
 800b2ae:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	69db      	ldr	r3, [r3, #28]
 800b2ba:	429a      	cmp	r2, r3
 800b2bc:	d11c      	bne.n	800b2f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b2c8:	429a      	cmp	r2, r3
 800b2ca:	d115      	bne.n	800b2f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800b2cc:	68fa      	ldr	r2, [r7, #12]
 800b2ce:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800b2d2:	4013      	ands	r3, r2
 800b2d4:	687a      	ldr	r2, [r7, #4]
 800b2d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b2d8:	4293      	cmp	r3, r2
 800b2da:	d10d      	bne.n	800b2f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800b2e6:	429a      	cmp	r2, r3
 800b2e8:	d106      	bne.n	800b2f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800b2f4:	429a      	cmp	r2, r3
 800b2f6:	d001      	beq.n	800b2fc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800b2f8:	2301      	movs	r3, #1
 800b2fa:	e000      	b.n	800b2fe <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800b2fc:	2300      	movs	r3, #0
}
 800b2fe:	4618      	mov	r0, r3
 800b300:	3718      	adds	r7, #24
 800b302:	46bd      	mov	sp, r7
 800b304:	bd80      	pop	{r7, pc}
 800b306:	bf00      	nop
 800b308:	40007000 	.word	0x40007000
 800b30c:	40023800 	.word	0x40023800
 800b310:	42470060 	.word	0x42470060

0800b314 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b314:	b580      	push	{r7, lr}
 800b316:	b084      	sub	sp, #16
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
 800b31c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d101      	bne.n	800b328 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b324:	2301      	movs	r3, #1
 800b326:	e0cc      	b.n	800b4c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b328:	4b68      	ldr	r3, [pc, #416]	; (800b4cc <HAL_RCC_ClockConfig+0x1b8>)
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	f003 030f 	and.w	r3, r3, #15
 800b330:	683a      	ldr	r2, [r7, #0]
 800b332:	429a      	cmp	r2, r3
 800b334:	d90c      	bls.n	800b350 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b336:	4b65      	ldr	r3, [pc, #404]	; (800b4cc <HAL_RCC_ClockConfig+0x1b8>)
 800b338:	683a      	ldr	r2, [r7, #0]
 800b33a:	b2d2      	uxtb	r2, r2
 800b33c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b33e:	4b63      	ldr	r3, [pc, #396]	; (800b4cc <HAL_RCC_ClockConfig+0x1b8>)
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	f003 030f 	and.w	r3, r3, #15
 800b346:	683a      	ldr	r2, [r7, #0]
 800b348:	429a      	cmp	r2, r3
 800b34a:	d001      	beq.n	800b350 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800b34c:	2301      	movs	r3, #1
 800b34e:	e0b8      	b.n	800b4c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	f003 0302 	and.w	r3, r3, #2
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d020      	beq.n	800b39e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	f003 0304 	and.w	r3, r3, #4
 800b364:	2b00      	cmp	r3, #0
 800b366:	d005      	beq.n	800b374 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b368:	4b59      	ldr	r3, [pc, #356]	; (800b4d0 <HAL_RCC_ClockConfig+0x1bc>)
 800b36a:	689b      	ldr	r3, [r3, #8]
 800b36c:	4a58      	ldr	r2, [pc, #352]	; (800b4d0 <HAL_RCC_ClockConfig+0x1bc>)
 800b36e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b372:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	f003 0308 	and.w	r3, r3, #8
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d005      	beq.n	800b38c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b380:	4b53      	ldr	r3, [pc, #332]	; (800b4d0 <HAL_RCC_ClockConfig+0x1bc>)
 800b382:	689b      	ldr	r3, [r3, #8]
 800b384:	4a52      	ldr	r2, [pc, #328]	; (800b4d0 <HAL_RCC_ClockConfig+0x1bc>)
 800b386:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b38a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b38c:	4b50      	ldr	r3, [pc, #320]	; (800b4d0 <HAL_RCC_ClockConfig+0x1bc>)
 800b38e:	689b      	ldr	r3, [r3, #8]
 800b390:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	689b      	ldr	r3, [r3, #8]
 800b398:	494d      	ldr	r1, [pc, #308]	; (800b4d0 <HAL_RCC_ClockConfig+0x1bc>)
 800b39a:	4313      	orrs	r3, r2
 800b39c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	f003 0301 	and.w	r3, r3, #1
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d044      	beq.n	800b434 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	685b      	ldr	r3, [r3, #4]
 800b3ae:	2b01      	cmp	r3, #1
 800b3b0:	d107      	bne.n	800b3c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b3b2:	4b47      	ldr	r3, [pc, #284]	; (800b4d0 <HAL_RCC_ClockConfig+0x1bc>)
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d119      	bne.n	800b3f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b3be:	2301      	movs	r3, #1
 800b3c0:	e07f      	b.n	800b4c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	685b      	ldr	r3, [r3, #4]
 800b3c6:	2b02      	cmp	r3, #2
 800b3c8:	d003      	beq.n	800b3d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b3ce:	2b03      	cmp	r3, #3
 800b3d0:	d107      	bne.n	800b3e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b3d2:	4b3f      	ldr	r3, [pc, #252]	; (800b4d0 <HAL_RCC_ClockConfig+0x1bc>)
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d109      	bne.n	800b3f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b3de:	2301      	movs	r3, #1
 800b3e0:	e06f      	b.n	800b4c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b3e2:	4b3b      	ldr	r3, [pc, #236]	; (800b4d0 <HAL_RCC_ClockConfig+0x1bc>)
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	f003 0302 	and.w	r3, r3, #2
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d101      	bne.n	800b3f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b3ee:	2301      	movs	r3, #1
 800b3f0:	e067      	b.n	800b4c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b3f2:	4b37      	ldr	r3, [pc, #220]	; (800b4d0 <HAL_RCC_ClockConfig+0x1bc>)
 800b3f4:	689b      	ldr	r3, [r3, #8]
 800b3f6:	f023 0203 	bic.w	r2, r3, #3
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	685b      	ldr	r3, [r3, #4]
 800b3fe:	4934      	ldr	r1, [pc, #208]	; (800b4d0 <HAL_RCC_ClockConfig+0x1bc>)
 800b400:	4313      	orrs	r3, r2
 800b402:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b404:	f7fd f81c 	bl	8008440 <HAL_GetTick>
 800b408:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b40a:	e00a      	b.n	800b422 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b40c:	f7fd f818 	bl	8008440 <HAL_GetTick>
 800b410:	4602      	mov	r2, r0
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	1ad3      	subs	r3, r2, r3
 800b416:	f241 3288 	movw	r2, #5000	; 0x1388
 800b41a:	4293      	cmp	r3, r2
 800b41c:	d901      	bls.n	800b422 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b41e:	2303      	movs	r3, #3
 800b420:	e04f      	b.n	800b4c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b422:	4b2b      	ldr	r3, [pc, #172]	; (800b4d0 <HAL_RCC_ClockConfig+0x1bc>)
 800b424:	689b      	ldr	r3, [r3, #8]
 800b426:	f003 020c 	and.w	r2, r3, #12
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	685b      	ldr	r3, [r3, #4]
 800b42e:	009b      	lsls	r3, r3, #2
 800b430:	429a      	cmp	r2, r3
 800b432:	d1eb      	bne.n	800b40c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b434:	4b25      	ldr	r3, [pc, #148]	; (800b4cc <HAL_RCC_ClockConfig+0x1b8>)
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	f003 030f 	and.w	r3, r3, #15
 800b43c:	683a      	ldr	r2, [r7, #0]
 800b43e:	429a      	cmp	r2, r3
 800b440:	d20c      	bcs.n	800b45c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b442:	4b22      	ldr	r3, [pc, #136]	; (800b4cc <HAL_RCC_ClockConfig+0x1b8>)
 800b444:	683a      	ldr	r2, [r7, #0]
 800b446:	b2d2      	uxtb	r2, r2
 800b448:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b44a:	4b20      	ldr	r3, [pc, #128]	; (800b4cc <HAL_RCC_ClockConfig+0x1b8>)
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	f003 030f 	and.w	r3, r3, #15
 800b452:	683a      	ldr	r2, [r7, #0]
 800b454:	429a      	cmp	r2, r3
 800b456:	d001      	beq.n	800b45c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b458:	2301      	movs	r3, #1
 800b45a:	e032      	b.n	800b4c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	f003 0304 	and.w	r3, r3, #4
 800b464:	2b00      	cmp	r3, #0
 800b466:	d008      	beq.n	800b47a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b468:	4b19      	ldr	r3, [pc, #100]	; (800b4d0 <HAL_RCC_ClockConfig+0x1bc>)
 800b46a:	689b      	ldr	r3, [r3, #8]
 800b46c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	68db      	ldr	r3, [r3, #12]
 800b474:	4916      	ldr	r1, [pc, #88]	; (800b4d0 <HAL_RCC_ClockConfig+0x1bc>)
 800b476:	4313      	orrs	r3, r2
 800b478:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	f003 0308 	and.w	r3, r3, #8
 800b482:	2b00      	cmp	r3, #0
 800b484:	d009      	beq.n	800b49a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b486:	4b12      	ldr	r3, [pc, #72]	; (800b4d0 <HAL_RCC_ClockConfig+0x1bc>)
 800b488:	689b      	ldr	r3, [r3, #8]
 800b48a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	691b      	ldr	r3, [r3, #16]
 800b492:	00db      	lsls	r3, r3, #3
 800b494:	490e      	ldr	r1, [pc, #56]	; (800b4d0 <HAL_RCC_ClockConfig+0x1bc>)
 800b496:	4313      	orrs	r3, r2
 800b498:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b49a:	f000 f821 	bl	800b4e0 <HAL_RCC_GetSysClockFreq>
 800b49e:	4601      	mov	r1, r0
 800b4a0:	4b0b      	ldr	r3, [pc, #44]	; (800b4d0 <HAL_RCC_ClockConfig+0x1bc>)
 800b4a2:	689b      	ldr	r3, [r3, #8]
 800b4a4:	091b      	lsrs	r3, r3, #4
 800b4a6:	f003 030f 	and.w	r3, r3, #15
 800b4aa:	4a0a      	ldr	r2, [pc, #40]	; (800b4d4 <HAL_RCC_ClockConfig+0x1c0>)
 800b4ac:	5cd3      	ldrb	r3, [r2, r3]
 800b4ae:	fa21 f303 	lsr.w	r3, r1, r3
 800b4b2:	4a09      	ldr	r2, [pc, #36]	; (800b4d8 <HAL_RCC_ClockConfig+0x1c4>)
 800b4b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800b4b6:	4b09      	ldr	r3, [pc, #36]	; (800b4dc <HAL_RCC_ClockConfig+0x1c8>)
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	f7fc ff7c 	bl	80083b8 <HAL_InitTick>

  return HAL_OK;
 800b4c0:	2300      	movs	r3, #0
}
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	3710      	adds	r7, #16
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	bd80      	pop	{r7, pc}
 800b4ca:	bf00      	nop
 800b4cc:	40023c00 	.word	0x40023c00
 800b4d0:	40023800 	.word	0x40023800
 800b4d4:	0801d1a0 	.word	0x0801d1a0
 800b4d8:	200011cc 	.word	0x200011cc
 800b4dc:	2000133c 	.word	0x2000133c

0800b4e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b4e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b4e2:	b085      	sub	sp, #20
 800b4e4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	607b      	str	r3, [r7, #4]
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	60fb      	str	r3, [r7, #12]
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b4f6:	4b63      	ldr	r3, [pc, #396]	; (800b684 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b4f8:	689b      	ldr	r3, [r3, #8]
 800b4fa:	f003 030c 	and.w	r3, r3, #12
 800b4fe:	2b04      	cmp	r3, #4
 800b500:	d007      	beq.n	800b512 <HAL_RCC_GetSysClockFreq+0x32>
 800b502:	2b08      	cmp	r3, #8
 800b504:	d008      	beq.n	800b518 <HAL_RCC_GetSysClockFreq+0x38>
 800b506:	2b00      	cmp	r3, #0
 800b508:	f040 80b4 	bne.w	800b674 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b50c:	4b5e      	ldr	r3, [pc, #376]	; (800b688 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800b50e:	60bb      	str	r3, [r7, #8]
       break;
 800b510:	e0b3      	b.n	800b67a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b512:	4b5e      	ldr	r3, [pc, #376]	; (800b68c <HAL_RCC_GetSysClockFreq+0x1ac>)
 800b514:	60bb      	str	r3, [r7, #8]
      break;
 800b516:	e0b0      	b.n	800b67a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b518:	4b5a      	ldr	r3, [pc, #360]	; (800b684 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b51a:	685b      	ldr	r3, [r3, #4]
 800b51c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b520:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b522:	4b58      	ldr	r3, [pc, #352]	; (800b684 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b524:	685b      	ldr	r3, [r3, #4]
 800b526:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d04a      	beq.n	800b5c4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b52e:	4b55      	ldr	r3, [pc, #340]	; (800b684 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b530:	685b      	ldr	r3, [r3, #4]
 800b532:	099b      	lsrs	r3, r3, #6
 800b534:	f04f 0400 	mov.w	r4, #0
 800b538:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b53c:	f04f 0200 	mov.w	r2, #0
 800b540:	ea03 0501 	and.w	r5, r3, r1
 800b544:	ea04 0602 	and.w	r6, r4, r2
 800b548:	4629      	mov	r1, r5
 800b54a:	4632      	mov	r2, r6
 800b54c:	f04f 0300 	mov.w	r3, #0
 800b550:	f04f 0400 	mov.w	r4, #0
 800b554:	0154      	lsls	r4, r2, #5
 800b556:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800b55a:	014b      	lsls	r3, r1, #5
 800b55c:	4619      	mov	r1, r3
 800b55e:	4622      	mov	r2, r4
 800b560:	1b49      	subs	r1, r1, r5
 800b562:	eb62 0206 	sbc.w	r2, r2, r6
 800b566:	f04f 0300 	mov.w	r3, #0
 800b56a:	f04f 0400 	mov.w	r4, #0
 800b56e:	0194      	lsls	r4, r2, #6
 800b570:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800b574:	018b      	lsls	r3, r1, #6
 800b576:	1a5b      	subs	r3, r3, r1
 800b578:	eb64 0402 	sbc.w	r4, r4, r2
 800b57c:	f04f 0100 	mov.w	r1, #0
 800b580:	f04f 0200 	mov.w	r2, #0
 800b584:	00e2      	lsls	r2, r4, #3
 800b586:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800b58a:	00d9      	lsls	r1, r3, #3
 800b58c:	460b      	mov	r3, r1
 800b58e:	4614      	mov	r4, r2
 800b590:	195b      	adds	r3, r3, r5
 800b592:	eb44 0406 	adc.w	r4, r4, r6
 800b596:	f04f 0100 	mov.w	r1, #0
 800b59a:	f04f 0200 	mov.w	r2, #0
 800b59e:	0262      	lsls	r2, r4, #9
 800b5a0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800b5a4:	0259      	lsls	r1, r3, #9
 800b5a6:	460b      	mov	r3, r1
 800b5a8:	4614      	mov	r4, r2
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	4621      	mov	r1, r4
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	f04f 0400 	mov.w	r4, #0
 800b5b4:	461a      	mov	r2, r3
 800b5b6:	4623      	mov	r3, r4
 800b5b8:	f7f5 fb4e 	bl	8000c58 <__aeabi_uldivmod>
 800b5bc:	4603      	mov	r3, r0
 800b5be:	460c      	mov	r4, r1
 800b5c0:	60fb      	str	r3, [r7, #12]
 800b5c2:	e049      	b.n	800b658 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b5c4:	4b2f      	ldr	r3, [pc, #188]	; (800b684 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b5c6:	685b      	ldr	r3, [r3, #4]
 800b5c8:	099b      	lsrs	r3, r3, #6
 800b5ca:	f04f 0400 	mov.w	r4, #0
 800b5ce:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b5d2:	f04f 0200 	mov.w	r2, #0
 800b5d6:	ea03 0501 	and.w	r5, r3, r1
 800b5da:	ea04 0602 	and.w	r6, r4, r2
 800b5de:	4629      	mov	r1, r5
 800b5e0:	4632      	mov	r2, r6
 800b5e2:	f04f 0300 	mov.w	r3, #0
 800b5e6:	f04f 0400 	mov.w	r4, #0
 800b5ea:	0154      	lsls	r4, r2, #5
 800b5ec:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800b5f0:	014b      	lsls	r3, r1, #5
 800b5f2:	4619      	mov	r1, r3
 800b5f4:	4622      	mov	r2, r4
 800b5f6:	1b49      	subs	r1, r1, r5
 800b5f8:	eb62 0206 	sbc.w	r2, r2, r6
 800b5fc:	f04f 0300 	mov.w	r3, #0
 800b600:	f04f 0400 	mov.w	r4, #0
 800b604:	0194      	lsls	r4, r2, #6
 800b606:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800b60a:	018b      	lsls	r3, r1, #6
 800b60c:	1a5b      	subs	r3, r3, r1
 800b60e:	eb64 0402 	sbc.w	r4, r4, r2
 800b612:	f04f 0100 	mov.w	r1, #0
 800b616:	f04f 0200 	mov.w	r2, #0
 800b61a:	00e2      	lsls	r2, r4, #3
 800b61c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800b620:	00d9      	lsls	r1, r3, #3
 800b622:	460b      	mov	r3, r1
 800b624:	4614      	mov	r4, r2
 800b626:	195b      	adds	r3, r3, r5
 800b628:	eb44 0406 	adc.w	r4, r4, r6
 800b62c:	f04f 0100 	mov.w	r1, #0
 800b630:	f04f 0200 	mov.w	r2, #0
 800b634:	02a2      	lsls	r2, r4, #10
 800b636:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800b63a:	0299      	lsls	r1, r3, #10
 800b63c:	460b      	mov	r3, r1
 800b63e:	4614      	mov	r4, r2
 800b640:	4618      	mov	r0, r3
 800b642:	4621      	mov	r1, r4
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	f04f 0400 	mov.w	r4, #0
 800b64a:	461a      	mov	r2, r3
 800b64c:	4623      	mov	r3, r4
 800b64e:	f7f5 fb03 	bl	8000c58 <__aeabi_uldivmod>
 800b652:	4603      	mov	r3, r0
 800b654:	460c      	mov	r4, r1
 800b656:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b658:	4b0a      	ldr	r3, [pc, #40]	; (800b684 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b65a:	685b      	ldr	r3, [r3, #4]
 800b65c:	0c1b      	lsrs	r3, r3, #16
 800b65e:	f003 0303 	and.w	r3, r3, #3
 800b662:	3301      	adds	r3, #1
 800b664:	005b      	lsls	r3, r3, #1
 800b666:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800b668:	68fa      	ldr	r2, [r7, #12]
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b670:	60bb      	str	r3, [r7, #8]
      break;
 800b672:	e002      	b.n	800b67a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b674:	4b04      	ldr	r3, [pc, #16]	; (800b688 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800b676:	60bb      	str	r3, [r7, #8]
      break;
 800b678:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b67a:	68bb      	ldr	r3, [r7, #8]
}
 800b67c:	4618      	mov	r0, r3
 800b67e:	3714      	adds	r7, #20
 800b680:	46bd      	mov	sp, r7
 800b682:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b684:	40023800 	.word	0x40023800
 800b688:	00f42400 	.word	0x00f42400
 800b68c:	007a1200 	.word	0x007a1200

0800b690 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b690:	b480      	push	{r7}
 800b692:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b694:	4b03      	ldr	r3, [pc, #12]	; (800b6a4 <HAL_RCC_GetHCLKFreq+0x14>)
 800b696:	681b      	ldr	r3, [r3, #0]
}
 800b698:	4618      	mov	r0, r3
 800b69a:	46bd      	mov	sp, r7
 800b69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a0:	4770      	bx	lr
 800b6a2:	bf00      	nop
 800b6a4:	200011cc 	.word	0x200011cc

0800b6a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800b6ac:	f7ff fff0 	bl	800b690 <HAL_RCC_GetHCLKFreq>
 800b6b0:	4601      	mov	r1, r0
 800b6b2:	4b05      	ldr	r3, [pc, #20]	; (800b6c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b6b4:	689b      	ldr	r3, [r3, #8]
 800b6b6:	0a9b      	lsrs	r3, r3, #10
 800b6b8:	f003 0307 	and.w	r3, r3, #7
 800b6bc:	4a03      	ldr	r2, [pc, #12]	; (800b6cc <HAL_RCC_GetPCLK1Freq+0x24>)
 800b6be:	5cd3      	ldrb	r3, [r2, r3]
 800b6c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	bd80      	pop	{r7, pc}
 800b6c8:	40023800 	.word	0x40023800
 800b6cc:	0801d1b0 	.word	0x0801d1b0

0800b6d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800b6d4:	f7ff ffdc 	bl	800b690 <HAL_RCC_GetHCLKFreq>
 800b6d8:	4601      	mov	r1, r0
 800b6da:	4b05      	ldr	r3, [pc, #20]	; (800b6f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b6dc:	689b      	ldr	r3, [r3, #8]
 800b6de:	0b5b      	lsrs	r3, r3, #13
 800b6e0:	f003 0307 	and.w	r3, r3, #7
 800b6e4:	4a03      	ldr	r2, [pc, #12]	; (800b6f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b6e6:	5cd3      	ldrb	r3, [r2, r3]
 800b6e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	bd80      	pop	{r7, pc}
 800b6f0:	40023800 	.word	0x40023800
 800b6f4:	0801d1b0 	.word	0x0801d1b0

0800b6f8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b086      	sub	sp, #24
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b700:	2300      	movs	r3, #0
 800b702:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800b704:	2300      	movs	r3, #0
 800b706:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	f003 0301 	and.w	r3, r3, #1
 800b710:	2b00      	cmp	r3, #0
 800b712:	d105      	bne.n	800b720 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d035      	beq.n	800b78c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800b720:	4b67      	ldr	r3, [pc, #412]	; (800b8c0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800b722:	2200      	movs	r2, #0
 800b724:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b726:	f7fc fe8b 	bl	8008440 <HAL_GetTick>
 800b72a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b72c:	e008      	b.n	800b740 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800b72e:	f7fc fe87 	bl	8008440 <HAL_GetTick>
 800b732:	4602      	mov	r2, r0
 800b734:	697b      	ldr	r3, [r7, #20]
 800b736:	1ad3      	subs	r3, r2, r3
 800b738:	2b02      	cmp	r3, #2
 800b73a:	d901      	bls.n	800b740 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b73c:	2303      	movs	r3, #3
 800b73e:	e0ba      	b.n	800b8b6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b740:	4b60      	ldr	r3, [pc, #384]	; (800b8c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d1f0      	bne.n	800b72e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	685b      	ldr	r3, [r3, #4]
 800b750:	019a      	lsls	r2, r3, #6
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	689b      	ldr	r3, [r3, #8]
 800b756:	071b      	lsls	r3, r3, #28
 800b758:	495a      	ldr	r1, [pc, #360]	; (800b8c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800b75a:	4313      	orrs	r3, r2
 800b75c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800b760:	4b57      	ldr	r3, [pc, #348]	; (800b8c0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800b762:	2201      	movs	r2, #1
 800b764:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b766:	f7fc fe6b 	bl	8008440 <HAL_GetTick>
 800b76a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b76c:	e008      	b.n	800b780 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800b76e:	f7fc fe67 	bl	8008440 <HAL_GetTick>
 800b772:	4602      	mov	r2, r0
 800b774:	697b      	ldr	r3, [r7, #20]
 800b776:	1ad3      	subs	r3, r2, r3
 800b778:	2b02      	cmp	r3, #2
 800b77a:	d901      	bls.n	800b780 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b77c:	2303      	movs	r3, #3
 800b77e:	e09a      	b.n	800b8b6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b780:	4b50      	ldr	r3, [pc, #320]	; (800b8c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d0f0      	beq.n	800b76e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	f003 0302 	and.w	r3, r3, #2
 800b794:	2b00      	cmp	r3, #0
 800b796:	f000 8083 	beq.w	800b8a0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800b79a:	2300      	movs	r3, #0
 800b79c:	60fb      	str	r3, [r7, #12]
 800b79e:	4b49      	ldr	r3, [pc, #292]	; (800b8c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800b7a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7a2:	4a48      	ldr	r2, [pc, #288]	; (800b8c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800b7a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b7a8:	6413      	str	r3, [r2, #64]	; 0x40
 800b7aa:	4b46      	ldr	r3, [pc, #280]	; (800b8c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800b7ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b7b2:	60fb      	str	r3, [r7, #12]
 800b7b4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800b7b6:	4b44      	ldr	r3, [pc, #272]	; (800b8c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	4a43      	ldr	r2, [pc, #268]	; (800b8c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b7bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b7c0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b7c2:	f7fc fe3d 	bl	8008440 <HAL_GetTick>
 800b7c6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800b7c8:	e008      	b.n	800b7dc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800b7ca:	f7fc fe39 	bl	8008440 <HAL_GetTick>
 800b7ce:	4602      	mov	r2, r0
 800b7d0:	697b      	ldr	r3, [r7, #20]
 800b7d2:	1ad3      	subs	r3, r2, r3
 800b7d4:	2b02      	cmp	r3, #2
 800b7d6:	d901      	bls.n	800b7dc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800b7d8:	2303      	movs	r3, #3
 800b7da:	e06c      	b.n	800b8b6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800b7dc:	4b3a      	ldr	r3, [pc, #232]	; (800b8c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d0f0      	beq.n	800b7ca <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800b7e8:	4b36      	ldr	r3, [pc, #216]	; (800b8c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800b7ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b7f0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800b7f2:	693b      	ldr	r3, [r7, #16]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d02f      	beq.n	800b858 <HAL_RCCEx_PeriphCLKConfig+0x160>
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	68db      	ldr	r3, [r3, #12]
 800b7fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b800:	693a      	ldr	r2, [r7, #16]
 800b802:	429a      	cmp	r2, r3
 800b804:	d028      	beq.n	800b858 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b806:	4b2f      	ldr	r3, [pc, #188]	; (800b8c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800b808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b80a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b80e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800b810:	4b2e      	ldr	r3, [pc, #184]	; (800b8cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800b812:	2201      	movs	r2, #1
 800b814:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800b816:	4b2d      	ldr	r3, [pc, #180]	; (800b8cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800b818:	2200      	movs	r2, #0
 800b81a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800b81c:	4a29      	ldr	r2, [pc, #164]	; (800b8c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800b81e:	693b      	ldr	r3, [r7, #16]
 800b820:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800b822:	4b28      	ldr	r3, [pc, #160]	; (800b8c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800b824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b826:	f003 0301 	and.w	r3, r3, #1
 800b82a:	2b01      	cmp	r3, #1
 800b82c:	d114      	bne.n	800b858 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800b82e:	f7fc fe07 	bl	8008440 <HAL_GetTick>
 800b832:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b834:	e00a      	b.n	800b84c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b836:	f7fc fe03 	bl	8008440 <HAL_GetTick>
 800b83a:	4602      	mov	r2, r0
 800b83c:	697b      	ldr	r3, [r7, #20]
 800b83e:	1ad3      	subs	r3, r2, r3
 800b840:	f241 3288 	movw	r2, #5000	; 0x1388
 800b844:	4293      	cmp	r3, r2
 800b846:	d901      	bls.n	800b84c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800b848:	2303      	movs	r3, #3
 800b84a:	e034      	b.n	800b8b6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b84c:	4b1d      	ldr	r3, [pc, #116]	; (800b8c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800b84e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b850:	f003 0302 	and.w	r3, r3, #2
 800b854:	2b00      	cmp	r3, #0
 800b856:	d0ee      	beq.n	800b836 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	68db      	ldr	r3, [r3, #12]
 800b85c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b860:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b864:	d10d      	bne.n	800b882 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800b866:	4b17      	ldr	r3, [pc, #92]	; (800b8c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800b868:	689b      	ldr	r3, [r3, #8]
 800b86a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	68db      	ldr	r3, [r3, #12]
 800b872:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b876:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b87a:	4912      	ldr	r1, [pc, #72]	; (800b8c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800b87c:	4313      	orrs	r3, r2
 800b87e:	608b      	str	r3, [r1, #8]
 800b880:	e005      	b.n	800b88e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800b882:	4b10      	ldr	r3, [pc, #64]	; (800b8c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800b884:	689b      	ldr	r3, [r3, #8]
 800b886:	4a0f      	ldr	r2, [pc, #60]	; (800b8c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800b888:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800b88c:	6093      	str	r3, [r2, #8]
 800b88e:	4b0d      	ldr	r3, [pc, #52]	; (800b8c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800b890:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	68db      	ldr	r3, [r3, #12]
 800b896:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b89a:	490a      	ldr	r1, [pc, #40]	; (800b8c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800b89c:	4313      	orrs	r3, r2
 800b89e:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	f003 0308 	and.w	r3, r3, #8
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d003      	beq.n	800b8b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	7c1a      	ldrb	r2, [r3, #16]
 800b8b0:	4b07      	ldr	r3, [pc, #28]	; (800b8d0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800b8b2:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800b8b4:	2300      	movs	r3, #0
}
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	3718      	adds	r7, #24
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	bd80      	pop	{r7, pc}
 800b8be:	bf00      	nop
 800b8c0:	42470068 	.word	0x42470068
 800b8c4:	40023800 	.word	0x40023800
 800b8c8:	40007000 	.word	0x40007000
 800b8cc:	42470e40 	.word	0x42470e40
 800b8d0:	424711e0 	.word	0x424711e0

0800b8d4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b082      	sub	sp, #8
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d101      	bne.n	800b8e6 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800b8e2:	2301      	movs	r3, #1
 800b8e4:	e083      	b.n	800b9ee <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	7f5b      	ldrb	r3, [r3, #29]
 800b8ea:	b2db      	uxtb	r3, r3
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d105      	bne.n	800b8fc <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800b8f6:	6878      	ldr	r0, [r7, #4]
 800b8f8:	f7f6 ffc2 	bl	8002880 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	2202      	movs	r2, #2
 800b900:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	22ca      	movs	r2, #202	; 0xca
 800b908:	625a      	str	r2, [r3, #36]	; 0x24
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	2253      	movs	r2, #83	; 0x53
 800b910:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800b912:	6878      	ldr	r0, [r7, #4]
 800b914:	f000 faa8 	bl	800be68 <RTC_EnterInitMode>
 800b918:	4603      	mov	r3, r0
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d008      	beq.n	800b930 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	22ff      	movs	r2, #255	; 0xff
 800b924:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	2204      	movs	r2, #4
 800b92a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800b92c:	2301      	movs	r3, #1
 800b92e:	e05e      	b.n	800b9ee <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	689b      	ldr	r3, [r3, #8]
 800b936:	687a      	ldr	r2, [r7, #4]
 800b938:	6812      	ldr	r2, [r2, #0]
 800b93a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b93e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b942:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	6899      	ldr	r1, [r3, #8]
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	685a      	ldr	r2, [r3, #4]
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	691b      	ldr	r3, [r3, #16]
 800b952:	431a      	orrs	r2, r3
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	695b      	ldr	r3, [r3, #20]
 800b958:	431a      	orrs	r2, r3
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	430a      	orrs	r2, r1
 800b960:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	687a      	ldr	r2, [r7, #4]
 800b968:	68d2      	ldr	r2, [r2, #12]
 800b96a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	6919      	ldr	r1, [r3, #16]
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	689b      	ldr	r3, [r3, #8]
 800b976:	041a      	lsls	r2, r3, #16
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	430a      	orrs	r2, r1
 800b97e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	68da      	ldr	r2, [r3, #12]
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b98e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	689b      	ldr	r3, [r3, #8]
 800b996:	f003 0320 	and.w	r3, r3, #32
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d10e      	bne.n	800b9bc <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b99e:	6878      	ldr	r0, [r7, #4]
 800b9a0:	f000 fa3a 	bl	800be18 <HAL_RTC_WaitForSynchro>
 800b9a4:	4603      	mov	r3, r0
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d008      	beq.n	800b9bc <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	22ff      	movs	r2, #255	; 0xff
 800b9b0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	2204      	movs	r2, #4
 800b9b6:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800b9b8:	2301      	movs	r3, #1
 800b9ba:	e018      	b.n	800b9ee <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b9ca:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	699a      	ldr	r2, [r3, #24]
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	430a      	orrs	r2, r1
 800b9dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	22ff      	movs	r2, #255	; 0xff
 800b9e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	2201      	movs	r2, #1
 800b9ea:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800b9ec:	2300      	movs	r3, #0
  }
}
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	3708      	adds	r7, #8
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	bd80      	pop	{r7, pc}

0800b9f6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b9f6:	b590      	push	{r4, r7, lr}
 800b9f8:	b087      	sub	sp, #28
 800b9fa:	af00      	add	r7, sp, #0
 800b9fc:	60f8      	str	r0, [r7, #12]
 800b9fe:	60b9      	str	r1, [r7, #8]
 800ba00:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800ba02:	2300      	movs	r3, #0
 800ba04:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	7f1b      	ldrb	r3, [r3, #28]
 800ba0a:	2b01      	cmp	r3, #1
 800ba0c:	d101      	bne.n	800ba12 <HAL_RTC_SetTime+0x1c>
 800ba0e:	2302      	movs	r3, #2
 800ba10:	e0aa      	b.n	800bb68 <HAL_RTC_SetTime+0x172>
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	2201      	movs	r2, #1
 800ba16:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	2202      	movs	r2, #2
 800ba1c:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d126      	bne.n	800ba72 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	689b      	ldr	r3, [r3, #8]
 800ba2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d102      	bne.n	800ba38 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800ba32:	68bb      	ldr	r3, [r7, #8]
 800ba34:	2200      	movs	r2, #0
 800ba36:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800ba38:	68bb      	ldr	r3, [r7, #8]
 800ba3a:	781b      	ldrb	r3, [r3, #0]
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	f000 fa3f 	bl	800bec0 <RTC_ByteToBcd2>
 800ba42:	4603      	mov	r3, r0
 800ba44:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800ba46:	68bb      	ldr	r3, [r7, #8]
 800ba48:	785b      	ldrb	r3, [r3, #1]
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	f000 fa38 	bl	800bec0 <RTC_ByteToBcd2>
 800ba50:	4603      	mov	r3, r0
 800ba52:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800ba54:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800ba56:	68bb      	ldr	r3, [r7, #8]
 800ba58:	789b      	ldrb	r3, [r3, #2]
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	f000 fa30 	bl	800bec0 <RTC_ByteToBcd2>
 800ba60:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800ba62:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800ba66:	68bb      	ldr	r3, [r7, #8]
 800ba68:	78db      	ldrb	r3, [r3, #3]
 800ba6a:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800ba6c:	4313      	orrs	r3, r2
 800ba6e:	617b      	str	r3, [r7, #20]
 800ba70:	e018      	b.n	800baa4 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	689b      	ldr	r3, [r3, #8]
 800ba78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d102      	bne.n	800ba86 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800ba80:	68bb      	ldr	r3, [r7, #8]
 800ba82:	2200      	movs	r2, #0
 800ba84:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800ba86:	68bb      	ldr	r3, [r7, #8]
 800ba88:	781b      	ldrb	r3, [r3, #0]
 800ba8a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800ba8c:	68bb      	ldr	r3, [r7, #8]
 800ba8e:	785b      	ldrb	r3, [r3, #1]
 800ba90:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800ba92:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800ba94:	68ba      	ldr	r2, [r7, #8]
 800ba96:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800ba98:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800ba9a:	68bb      	ldr	r3, [r7, #8]
 800ba9c:	78db      	ldrb	r3, [r3, #3]
 800ba9e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800baa0:	4313      	orrs	r3, r2
 800baa2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	22ca      	movs	r2, #202	; 0xca
 800baaa:	625a      	str	r2, [r3, #36]	; 0x24
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	2253      	movs	r2, #83	; 0x53
 800bab2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800bab4:	68f8      	ldr	r0, [r7, #12]
 800bab6:	f000 f9d7 	bl	800be68 <RTC_EnterInitMode>
 800baba:	4603      	mov	r3, r0
 800babc:	2b00      	cmp	r3, #0
 800babe:	d00b      	beq.n	800bad8 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	22ff      	movs	r2, #255	; 0xff
 800bac6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	2204      	movs	r2, #4
 800bacc:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	2200      	movs	r2, #0
 800bad2:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800bad4:	2301      	movs	r3, #1
 800bad6:	e047      	b.n	800bb68 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	681a      	ldr	r2, [r3, #0]
 800badc:	697b      	ldr	r3, [r7, #20]
 800bade:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800bae2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800bae6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	689a      	ldr	r2, [r3, #8]
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800baf6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	6899      	ldr	r1, [r3, #8]
 800bafe:	68bb      	ldr	r3, [r7, #8]
 800bb00:	68da      	ldr	r2, [r3, #12]
 800bb02:	68bb      	ldr	r3, [r7, #8]
 800bb04:	691b      	ldr	r3, [r3, #16]
 800bb06:	431a      	orrs	r2, r3
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	430a      	orrs	r2, r1
 800bb0e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	68da      	ldr	r2, [r3, #12]
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bb1e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	689b      	ldr	r3, [r3, #8]
 800bb26:	f003 0320 	and.w	r3, r3, #32
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d111      	bne.n	800bb52 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800bb2e:	68f8      	ldr	r0, [r7, #12]
 800bb30:	f000 f972 	bl	800be18 <HAL_RTC_WaitForSynchro>
 800bb34:	4603      	mov	r3, r0
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d00b      	beq.n	800bb52 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	22ff      	movs	r2, #255	; 0xff
 800bb40:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	2204      	movs	r2, #4
 800bb46:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800bb4e:	2301      	movs	r3, #1
 800bb50:	e00a      	b.n	800bb68 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	22ff      	movs	r2, #255	; 0xff
 800bb58:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	2201      	movs	r2, #1
 800bb5e:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	2200      	movs	r2, #0
 800bb64:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800bb66:	2300      	movs	r3, #0
  }
}
 800bb68:	4618      	mov	r0, r3
 800bb6a:	371c      	adds	r7, #28
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	bd90      	pop	{r4, r7, pc}

0800bb70 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b086      	sub	sp, #24
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	60f8      	str	r0, [r7, #12]
 800bb78:	60b9      	str	r1, [r7, #8]
 800bb7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bb86:	68bb      	ldr	r3, [r7, #8]
 800bb88:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	691b      	ldr	r3, [r3, #16]
 800bb90:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800bb94:	68bb      	ldr	r3, [r7, #8]
 800bb96:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800bba2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800bba6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800bba8:	697b      	ldr	r3, [r7, #20]
 800bbaa:	0c1b      	lsrs	r3, r3, #16
 800bbac:	b2db      	uxtb	r3, r3
 800bbae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bbb2:	b2da      	uxtb	r2, r3
 800bbb4:	68bb      	ldr	r3, [r7, #8]
 800bbb6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800bbb8:	697b      	ldr	r3, [r7, #20]
 800bbba:	0a1b      	lsrs	r3, r3, #8
 800bbbc:	b2db      	uxtb	r3, r3
 800bbbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bbc2:	b2da      	uxtb	r2, r3
 800bbc4:	68bb      	ldr	r3, [r7, #8]
 800bbc6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800bbc8:	697b      	ldr	r3, [r7, #20]
 800bbca:	b2db      	uxtb	r3, r3
 800bbcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bbd0:	b2da      	uxtb	r2, r3
 800bbd2:	68bb      	ldr	r3, [r7, #8]
 800bbd4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800bbd6:	697b      	ldr	r3, [r7, #20]
 800bbd8:	0c1b      	lsrs	r3, r3, #16
 800bbda:	b2db      	uxtb	r3, r3
 800bbdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbe0:	b2da      	uxtb	r2, r3
 800bbe2:	68bb      	ldr	r3, [r7, #8]
 800bbe4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d11a      	bne.n	800bc22 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800bbec:	68bb      	ldr	r3, [r7, #8]
 800bbee:	781b      	ldrb	r3, [r3, #0]
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	f000 f983 	bl	800befc <RTC_Bcd2ToByte>
 800bbf6:	4603      	mov	r3, r0
 800bbf8:	461a      	mov	r2, r3
 800bbfa:	68bb      	ldr	r3, [r7, #8]
 800bbfc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800bbfe:	68bb      	ldr	r3, [r7, #8]
 800bc00:	785b      	ldrb	r3, [r3, #1]
 800bc02:	4618      	mov	r0, r3
 800bc04:	f000 f97a 	bl	800befc <RTC_Bcd2ToByte>
 800bc08:	4603      	mov	r3, r0
 800bc0a:	461a      	mov	r2, r3
 800bc0c:	68bb      	ldr	r3, [r7, #8]
 800bc0e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800bc10:	68bb      	ldr	r3, [r7, #8]
 800bc12:	789b      	ldrb	r3, [r3, #2]
 800bc14:	4618      	mov	r0, r3
 800bc16:	f000 f971 	bl	800befc <RTC_Bcd2ToByte>
 800bc1a:	4603      	mov	r3, r0
 800bc1c:	461a      	mov	r2, r3
 800bc1e:	68bb      	ldr	r3, [r7, #8]
 800bc20:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800bc22:	2300      	movs	r3, #0
}
 800bc24:	4618      	mov	r0, r3
 800bc26:	3718      	adds	r7, #24
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	bd80      	pop	{r7, pc}

0800bc2c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800bc2c:	b590      	push	{r4, r7, lr}
 800bc2e:	b087      	sub	sp, #28
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	60f8      	str	r0, [r7, #12]
 800bc34:	60b9      	str	r1, [r7, #8]
 800bc36:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800bc38:	2300      	movs	r3, #0
 800bc3a:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	7f1b      	ldrb	r3, [r3, #28]
 800bc40:	2b01      	cmp	r3, #1
 800bc42:	d101      	bne.n	800bc48 <HAL_RTC_SetDate+0x1c>
 800bc44:	2302      	movs	r3, #2
 800bc46:	e094      	b.n	800bd72 <HAL_RTC_SetDate+0x146>
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	2201      	movs	r2, #1
 800bc4c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	2202      	movs	r2, #2
 800bc52:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d10e      	bne.n	800bc78 <HAL_RTC_SetDate+0x4c>
 800bc5a:	68bb      	ldr	r3, [r7, #8]
 800bc5c:	785b      	ldrb	r3, [r3, #1]
 800bc5e:	f003 0310 	and.w	r3, r3, #16
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d008      	beq.n	800bc78 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800bc66:	68bb      	ldr	r3, [r7, #8]
 800bc68:	785b      	ldrb	r3, [r3, #1]
 800bc6a:	f023 0310 	bic.w	r3, r3, #16
 800bc6e:	b2db      	uxtb	r3, r3
 800bc70:	330a      	adds	r3, #10
 800bc72:	b2da      	uxtb	r2, r3
 800bc74:	68bb      	ldr	r3, [r7, #8]
 800bc76:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d11c      	bne.n	800bcb8 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800bc7e:	68bb      	ldr	r3, [r7, #8]
 800bc80:	78db      	ldrb	r3, [r3, #3]
 800bc82:	4618      	mov	r0, r3
 800bc84:	f000 f91c 	bl	800bec0 <RTC_ByteToBcd2>
 800bc88:	4603      	mov	r3, r0
 800bc8a:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800bc8c:	68bb      	ldr	r3, [r7, #8]
 800bc8e:	785b      	ldrb	r3, [r3, #1]
 800bc90:	4618      	mov	r0, r3
 800bc92:	f000 f915 	bl	800bec0 <RTC_ByteToBcd2>
 800bc96:	4603      	mov	r3, r0
 800bc98:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800bc9a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800bc9c:	68bb      	ldr	r3, [r7, #8]
 800bc9e:	789b      	ldrb	r3, [r3, #2]
 800bca0:	4618      	mov	r0, r3
 800bca2:	f000 f90d 	bl	800bec0 <RTC_ByteToBcd2>
 800bca6:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800bca8:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800bcac:	68bb      	ldr	r3, [r7, #8]
 800bcae:	781b      	ldrb	r3, [r3, #0]
 800bcb0:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800bcb2:	4313      	orrs	r3, r2
 800bcb4:	617b      	str	r3, [r7, #20]
 800bcb6:	e00e      	b.n	800bcd6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800bcb8:	68bb      	ldr	r3, [r7, #8]
 800bcba:	78db      	ldrb	r3, [r3, #3]
 800bcbc:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800bcbe:	68bb      	ldr	r3, [r7, #8]
 800bcc0:	785b      	ldrb	r3, [r3, #1]
 800bcc2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800bcc4:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800bcc6:	68ba      	ldr	r2, [r7, #8]
 800bcc8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800bcca:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800bccc:	68bb      	ldr	r3, [r7, #8]
 800bcce:	781b      	ldrb	r3, [r3, #0]
 800bcd0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800bcd2:	4313      	orrs	r3, r2
 800bcd4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	22ca      	movs	r2, #202	; 0xca
 800bcdc:	625a      	str	r2, [r3, #36]	; 0x24
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	2253      	movs	r2, #83	; 0x53
 800bce4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800bce6:	68f8      	ldr	r0, [r7, #12]
 800bce8:	f000 f8be 	bl	800be68 <RTC_EnterInitMode>
 800bcec:	4603      	mov	r3, r0
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d00b      	beq.n	800bd0a <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	22ff      	movs	r2, #255	; 0xff
 800bcf8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	2204      	movs	r2, #4
 800bcfe:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	2200      	movs	r2, #0
 800bd04:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800bd06:	2301      	movs	r3, #1
 800bd08:	e033      	b.n	800bd72 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	681a      	ldr	r2, [r3, #0]
 800bd0e:	697b      	ldr	r3, [r7, #20]
 800bd10:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800bd14:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800bd18:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	68da      	ldr	r2, [r3, #12]
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bd28:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	689b      	ldr	r3, [r3, #8]
 800bd30:	f003 0320 	and.w	r3, r3, #32
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d111      	bne.n	800bd5c <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800bd38:	68f8      	ldr	r0, [r7, #12]
 800bd3a:	f000 f86d 	bl	800be18 <HAL_RTC_WaitForSynchro>
 800bd3e:	4603      	mov	r3, r0
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d00b      	beq.n	800bd5c <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	22ff      	movs	r2, #255	; 0xff
 800bd4a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	2204      	movs	r2, #4
 800bd50:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	2200      	movs	r2, #0
 800bd56:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800bd58:	2301      	movs	r3, #1
 800bd5a:	e00a      	b.n	800bd72 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	22ff      	movs	r2, #255	; 0xff
 800bd62:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	2201      	movs	r2, #1
 800bd68:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	2200      	movs	r2, #0
 800bd6e:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800bd70:	2300      	movs	r3, #0
  }
}
 800bd72:	4618      	mov	r0, r3
 800bd74:	371c      	adds	r7, #28
 800bd76:	46bd      	mov	sp, r7
 800bd78:	bd90      	pop	{r4, r7, pc}

0800bd7a <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800bd7a:	b580      	push	{r7, lr}
 800bd7c:	b086      	sub	sp, #24
 800bd7e:	af00      	add	r7, sp, #0
 800bd80:	60f8      	str	r0, [r7, #12]
 800bd82:	60b9      	str	r1, [r7, #8]
 800bd84:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800bd86:	2300      	movs	r3, #0
 800bd88:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	685b      	ldr	r3, [r3, #4]
 800bd90:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800bd94:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800bd98:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800bd9a:	697b      	ldr	r3, [r7, #20]
 800bd9c:	0c1b      	lsrs	r3, r3, #16
 800bd9e:	b2da      	uxtb	r2, r3
 800bda0:	68bb      	ldr	r3, [r7, #8]
 800bda2:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800bda4:	697b      	ldr	r3, [r7, #20]
 800bda6:	0a1b      	lsrs	r3, r3, #8
 800bda8:	b2db      	uxtb	r3, r3
 800bdaa:	f003 031f 	and.w	r3, r3, #31
 800bdae:	b2da      	uxtb	r2, r3
 800bdb0:	68bb      	ldr	r3, [r7, #8]
 800bdb2:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800bdb4:	697b      	ldr	r3, [r7, #20]
 800bdb6:	b2db      	uxtb	r3, r3
 800bdb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bdbc:	b2da      	uxtb	r2, r3
 800bdbe:	68bb      	ldr	r3, [r7, #8]
 800bdc0:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800bdc2:	697b      	ldr	r3, [r7, #20]
 800bdc4:	0b5b      	lsrs	r3, r3, #13
 800bdc6:	b2db      	uxtb	r3, r3
 800bdc8:	f003 0307 	and.w	r3, r3, #7
 800bdcc:	b2da      	uxtb	r2, r3
 800bdce:	68bb      	ldr	r3, [r7, #8]
 800bdd0:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d11a      	bne.n	800be0e <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800bdd8:	68bb      	ldr	r3, [r7, #8]
 800bdda:	78db      	ldrb	r3, [r3, #3]
 800bddc:	4618      	mov	r0, r3
 800bdde:	f000 f88d 	bl	800befc <RTC_Bcd2ToByte>
 800bde2:	4603      	mov	r3, r0
 800bde4:	461a      	mov	r2, r3
 800bde6:	68bb      	ldr	r3, [r7, #8]
 800bde8:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800bdea:	68bb      	ldr	r3, [r7, #8]
 800bdec:	785b      	ldrb	r3, [r3, #1]
 800bdee:	4618      	mov	r0, r3
 800bdf0:	f000 f884 	bl	800befc <RTC_Bcd2ToByte>
 800bdf4:	4603      	mov	r3, r0
 800bdf6:	461a      	mov	r2, r3
 800bdf8:	68bb      	ldr	r3, [r7, #8]
 800bdfa:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800bdfc:	68bb      	ldr	r3, [r7, #8]
 800bdfe:	789b      	ldrb	r3, [r3, #2]
 800be00:	4618      	mov	r0, r3
 800be02:	f000 f87b 	bl	800befc <RTC_Bcd2ToByte>
 800be06:	4603      	mov	r3, r0
 800be08:	461a      	mov	r2, r3
 800be0a:	68bb      	ldr	r3, [r7, #8]
 800be0c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800be0e:	2300      	movs	r3, #0
}
 800be10:	4618      	mov	r0, r3
 800be12:	3718      	adds	r7, #24
 800be14:	46bd      	mov	sp, r7
 800be16:	bd80      	pop	{r7, pc}

0800be18 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b084      	sub	sp, #16
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800be20:	2300      	movs	r3, #0
 800be22:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	68da      	ldr	r2, [r3, #12]
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800be32:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800be34:	f7fc fb04 	bl	8008440 <HAL_GetTick>
 800be38:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800be3a:	e009      	b.n	800be50 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800be3c:	f7fc fb00 	bl	8008440 <HAL_GetTick>
 800be40:	4602      	mov	r2, r0
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	1ad3      	subs	r3, r2, r3
 800be46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800be4a:	d901      	bls.n	800be50 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800be4c:	2303      	movs	r3, #3
 800be4e:	e007      	b.n	800be60 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	68db      	ldr	r3, [r3, #12]
 800be56:	f003 0320 	and.w	r3, r3, #32
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d0ee      	beq.n	800be3c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800be5e:	2300      	movs	r3, #0
}
 800be60:	4618      	mov	r0, r3
 800be62:	3710      	adds	r7, #16
 800be64:	46bd      	mov	sp, r7
 800be66:	bd80      	pop	{r7, pc}

0800be68 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b084      	sub	sp, #16
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800be70:	2300      	movs	r3, #0
 800be72:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	68db      	ldr	r3, [r3, #12]
 800be7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d119      	bne.n	800beb6 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	f04f 32ff 	mov.w	r2, #4294967295
 800be8a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800be8c:	f7fc fad8 	bl	8008440 <HAL_GetTick>
 800be90:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800be92:	e009      	b.n	800bea8 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800be94:	f7fc fad4 	bl	8008440 <HAL_GetTick>
 800be98:	4602      	mov	r2, r0
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	1ad3      	subs	r3, r2, r3
 800be9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bea2:	d901      	bls.n	800bea8 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800bea4:	2303      	movs	r3, #3
 800bea6:	e007      	b.n	800beb8 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	68db      	ldr	r3, [r3, #12]
 800beae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d0ee      	beq.n	800be94 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800beb6:	2300      	movs	r3, #0
}
 800beb8:	4618      	mov	r0, r3
 800beba:	3710      	adds	r7, #16
 800bebc:	46bd      	mov	sp, r7
 800bebe:	bd80      	pop	{r7, pc}

0800bec0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800bec0:	b480      	push	{r7}
 800bec2:	b085      	sub	sp, #20
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	4603      	mov	r3, r0
 800bec8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800beca:	2300      	movs	r3, #0
 800becc:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800bece:	e005      	b.n	800bedc <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	3301      	adds	r3, #1
 800bed4:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800bed6:	79fb      	ldrb	r3, [r7, #7]
 800bed8:	3b0a      	subs	r3, #10
 800beda:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 800bedc:	79fb      	ldrb	r3, [r7, #7]
 800bede:	2b09      	cmp	r3, #9
 800bee0:	d8f6      	bhi.n	800bed0 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	b2db      	uxtb	r3, r3
 800bee6:	011b      	lsls	r3, r3, #4
 800bee8:	b2da      	uxtb	r2, r3
 800beea:	79fb      	ldrb	r3, [r7, #7]
 800beec:	4313      	orrs	r3, r2
 800beee:	b2db      	uxtb	r3, r3
}
 800bef0:	4618      	mov	r0, r3
 800bef2:	3714      	adds	r7, #20
 800bef4:	46bd      	mov	sp, r7
 800bef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befa:	4770      	bx	lr

0800befc <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800befc:	b480      	push	{r7}
 800befe:	b085      	sub	sp, #20
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	4603      	mov	r3, r0
 800bf04:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800bf06:	2300      	movs	r3, #0
 800bf08:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800bf0a:	79fb      	ldrb	r3, [r7, #7]
 800bf0c:	091b      	lsrs	r3, r3, #4
 800bf0e:	b2db      	uxtb	r3, r3
 800bf10:	461a      	mov	r2, r3
 800bf12:	4613      	mov	r3, r2
 800bf14:	009b      	lsls	r3, r3, #2
 800bf16:	4413      	add	r3, r2
 800bf18:	005b      	lsls	r3, r3, #1
 800bf1a:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800bf1c:	79fb      	ldrb	r3, [r7, #7]
 800bf1e:	f003 030f 	and.w	r3, r3, #15
 800bf22:	b2da      	uxtb	r2, r3
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	b2db      	uxtb	r3, r3
 800bf28:	4413      	add	r3, r2
 800bf2a:	b2db      	uxtb	r3, r3
}
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	3714      	adds	r7, #20
 800bf30:	46bd      	mov	sp, r7
 800bf32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf36:	4770      	bx	lr

0800bf38 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	b082      	sub	sp, #8
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d101      	bne.n	800bf4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bf46:	2301      	movs	r3, #1
 800bf48:	e056      	b.n	800bff8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	2200      	movs	r2, #0
 800bf4e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bf56:	b2db      	uxtb	r3, r3
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d106      	bne.n	800bf6a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	2200      	movs	r2, #0
 800bf60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bf64:	6878      	ldr	r0, [r7, #4]
 800bf66:	f000 f84b 	bl	800c000 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	2202      	movs	r2, #2
 800bf6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	681a      	ldr	r2, [r3, #0]
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bf80:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	685a      	ldr	r2, [r3, #4]
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	689b      	ldr	r3, [r3, #8]
 800bf8a:	431a      	orrs	r2, r3
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	68db      	ldr	r3, [r3, #12]
 800bf90:	431a      	orrs	r2, r3
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	691b      	ldr	r3, [r3, #16]
 800bf96:	431a      	orrs	r2, r3
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	695b      	ldr	r3, [r3, #20]
 800bf9c:	431a      	orrs	r2, r3
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	699b      	ldr	r3, [r3, #24]
 800bfa2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bfa6:	431a      	orrs	r2, r3
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	69db      	ldr	r3, [r3, #28]
 800bfac:	431a      	orrs	r2, r3
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	6a1b      	ldr	r3, [r3, #32]
 800bfb2:	ea42 0103 	orr.w	r1, r2, r3
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	430a      	orrs	r2, r1
 800bfc0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	699b      	ldr	r3, [r3, #24]
 800bfc6:	0c1b      	lsrs	r3, r3, #16
 800bfc8:	f003 0104 	and.w	r1, r3, #4
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	430a      	orrs	r2, r1
 800bfd6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	69da      	ldr	r2, [r3, #28]
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bfe6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	2200      	movs	r2, #0
 800bfec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	2201      	movs	r2, #1
 800bff2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800bff6:	2300      	movs	r3, #0
}
 800bff8:	4618      	mov	r0, r3
 800bffa:	3708      	adds	r7, #8
 800bffc:	46bd      	mov	sp, r7
 800bffe:	bd80      	pop	{r7, pc}

0800c000 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800c000:	b480      	push	{r7}
 800c002:	b083      	sub	sp, #12
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 800c008:	bf00      	nop
 800c00a:	370c      	adds	r7, #12
 800c00c:	46bd      	mov	sp, r7
 800c00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c012:	4770      	bx	lr

0800c014 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800c014:	b580      	push	{r7, lr}
 800c016:	b08c      	sub	sp, #48	; 0x30
 800c018:	af00      	add	r7, sp, #0
 800c01a:	60f8      	str	r0, [r7, #12]
 800c01c:	60b9      	str	r1, [r7, #8]
 800c01e:	607a      	str	r2, [r7, #4]
 800c020:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800c022:	2301      	movs	r3, #1
 800c024:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800c026:	2300      	movs	r3, #0
 800c028:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c032:	2b01      	cmp	r3, #1
 800c034:	d101      	bne.n	800c03a <HAL_SPI_TransmitReceive+0x26>
 800c036:	2302      	movs	r3, #2
 800c038:	e18a      	b.n	800c350 <HAL_SPI_TransmitReceive+0x33c>
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	2201      	movs	r2, #1
 800c03e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c042:	f7fc f9fd 	bl	8008440 <HAL_GetTick>
 800c046:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c04e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	685b      	ldr	r3, [r3, #4]
 800c056:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800c058:	887b      	ldrh	r3, [r7, #2]
 800c05a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800c05c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c060:	2b01      	cmp	r3, #1
 800c062:	d00f      	beq.n	800c084 <HAL_SPI_TransmitReceive+0x70>
 800c064:	69fb      	ldr	r3, [r7, #28]
 800c066:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c06a:	d107      	bne.n	800c07c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	689b      	ldr	r3, [r3, #8]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d103      	bne.n	800c07c <HAL_SPI_TransmitReceive+0x68>
 800c074:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c078:	2b04      	cmp	r3, #4
 800c07a:	d003      	beq.n	800c084 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800c07c:	2302      	movs	r3, #2
 800c07e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800c082:	e15b      	b.n	800c33c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800c084:	68bb      	ldr	r3, [r7, #8]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d005      	beq.n	800c096 <HAL_SPI_TransmitReceive+0x82>
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d002      	beq.n	800c096 <HAL_SPI_TransmitReceive+0x82>
 800c090:	887b      	ldrh	r3, [r7, #2]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d103      	bne.n	800c09e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800c096:	2301      	movs	r3, #1
 800c098:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800c09c:	e14e      	b.n	800c33c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c0a4:	b2db      	uxtb	r3, r3
 800c0a6:	2b04      	cmp	r3, #4
 800c0a8:	d003      	beq.n	800c0b2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	2205      	movs	r2, #5
 800c0ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	2200      	movs	r2, #0
 800c0b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	687a      	ldr	r2, [r7, #4]
 800c0bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	887a      	ldrh	r2, [r7, #2]
 800c0c2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	887a      	ldrh	r2, [r7, #2]
 800c0c8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	68ba      	ldr	r2, [r7, #8]
 800c0ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	887a      	ldrh	r2, [r7, #2]
 800c0d4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	887a      	ldrh	r2, [r7, #2]
 800c0da:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	2200      	movs	r2, #0
 800c0e0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	2200      	movs	r2, #0
 800c0e6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0f2:	2b40      	cmp	r3, #64	; 0x40
 800c0f4:	d007      	beq.n	800c106 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	681a      	ldr	r2, [r3, #0]
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c104:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	68db      	ldr	r3, [r3, #12]
 800c10a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c10e:	d178      	bne.n	800c202 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	685b      	ldr	r3, [r3, #4]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d002      	beq.n	800c11e <HAL_SPI_TransmitReceive+0x10a>
 800c118:	8b7b      	ldrh	r3, [r7, #26]
 800c11a:	2b01      	cmp	r3, #1
 800c11c:	d166      	bne.n	800c1ec <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c122:	881a      	ldrh	r2, [r3, #0]
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c12e:	1c9a      	adds	r2, r3, #2
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c138:	b29b      	uxth	r3, r3
 800c13a:	3b01      	subs	r3, #1
 800c13c:	b29a      	uxth	r2, r3
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c142:	e053      	b.n	800c1ec <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	689b      	ldr	r3, [r3, #8]
 800c14a:	f003 0302 	and.w	r3, r3, #2
 800c14e:	2b02      	cmp	r3, #2
 800c150:	d11b      	bne.n	800c18a <HAL_SPI_TransmitReceive+0x176>
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c156:	b29b      	uxth	r3, r3
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d016      	beq.n	800c18a <HAL_SPI_TransmitReceive+0x176>
 800c15c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c15e:	2b01      	cmp	r3, #1
 800c160:	d113      	bne.n	800c18a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c166:	881a      	ldrh	r2, [r3, #0]
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c172:	1c9a      	adds	r2, r3, #2
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c17c:	b29b      	uxth	r3, r3
 800c17e:	3b01      	subs	r3, #1
 800c180:	b29a      	uxth	r2, r3
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c186:	2300      	movs	r3, #0
 800c188:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	689b      	ldr	r3, [r3, #8]
 800c190:	f003 0301 	and.w	r3, r3, #1
 800c194:	2b01      	cmp	r3, #1
 800c196:	d119      	bne.n	800c1cc <HAL_SPI_TransmitReceive+0x1b8>
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c19c:	b29b      	uxth	r3, r3
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d014      	beq.n	800c1cc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	68da      	ldr	r2, [r3, #12]
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1ac:	b292      	uxth	r2, r2
 800c1ae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1b4:	1c9a      	adds	r2, r3, #2
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c1be:	b29b      	uxth	r3, r3
 800c1c0:	3b01      	subs	r3, #1
 800c1c2:	b29a      	uxth	r2, r3
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c1c8:	2301      	movs	r3, #1
 800c1ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800c1cc:	f7fc f938 	bl	8008440 <HAL_GetTick>
 800c1d0:	4602      	mov	r2, r0
 800c1d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1d4:	1ad3      	subs	r3, r2, r3
 800c1d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c1d8:	429a      	cmp	r2, r3
 800c1da:	d807      	bhi.n	800c1ec <HAL_SPI_TransmitReceive+0x1d8>
 800c1dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1e2:	d003      	beq.n	800c1ec <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800c1e4:	2303      	movs	r3, #3
 800c1e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800c1ea:	e0a7      	b.n	800c33c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c1f0:	b29b      	uxth	r3, r3
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d1a6      	bne.n	800c144 <HAL_SPI_TransmitReceive+0x130>
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c1fa:	b29b      	uxth	r3, r3
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d1a1      	bne.n	800c144 <HAL_SPI_TransmitReceive+0x130>
 800c200:	e07c      	b.n	800c2fc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	685b      	ldr	r3, [r3, #4]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d002      	beq.n	800c210 <HAL_SPI_TransmitReceive+0x1fc>
 800c20a:	8b7b      	ldrh	r3, [r7, #26]
 800c20c:	2b01      	cmp	r3, #1
 800c20e:	d16b      	bne.n	800c2e8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	330c      	adds	r3, #12
 800c21a:	7812      	ldrb	r2, [r2, #0]
 800c21c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c222:	1c5a      	adds	r2, r3, #1
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c22c:	b29b      	uxth	r3, r3
 800c22e:	3b01      	subs	r3, #1
 800c230:	b29a      	uxth	r2, r3
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c236:	e057      	b.n	800c2e8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	689b      	ldr	r3, [r3, #8]
 800c23e:	f003 0302 	and.w	r3, r3, #2
 800c242:	2b02      	cmp	r3, #2
 800c244:	d11c      	bne.n	800c280 <HAL_SPI_TransmitReceive+0x26c>
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c24a:	b29b      	uxth	r3, r3
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d017      	beq.n	800c280 <HAL_SPI_TransmitReceive+0x26c>
 800c250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c252:	2b01      	cmp	r3, #1
 800c254:	d114      	bne.n	800c280 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	330c      	adds	r3, #12
 800c260:	7812      	ldrb	r2, [r2, #0]
 800c262:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c268:	1c5a      	adds	r2, r3, #1
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c272:	b29b      	uxth	r3, r3
 800c274:	3b01      	subs	r3, #1
 800c276:	b29a      	uxth	r2, r3
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c27c:	2300      	movs	r3, #0
 800c27e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	689b      	ldr	r3, [r3, #8]
 800c286:	f003 0301 	and.w	r3, r3, #1
 800c28a:	2b01      	cmp	r3, #1
 800c28c:	d119      	bne.n	800c2c2 <HAL_SPI_TransmitReceive+0x2ae>
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c292:	b29b      	uxth	r3, r3
 800c294:	2b00      	cmp	r3, #0
 800c296:	d014      	beq.n	800c2c2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	68da      	ldr	r2, [r3, #12]
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2a2:	b2d2      	uxtb	r2, r2
 800c2a4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2aa:	1c5a      	adds	r2, r3, #1
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c2b4:	b29b      	uxth	r3, r3
 800c2b6:	3b01      	subs	r3, #1
 800c2b8:	b29a      	uxth	r2, r3
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c2be:	2301      	movs	r3, #1
 800c2c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800c2c2:	f7fc f8bd 	bl	8008440 <HAL_GetTick>
 800c2c6:	4602      	mov	r2, r0
 800c2c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2ca:	1ad3      	subs	r3, r2, r3
 800c2cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c2ce:	429a      	cmp	r2, r3
 800c2d0:	d803      	bhi.n	800c2da <HAL_SPI_TransmitReceive+0x2c6>
 800c2d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2d8:	d102      	bne.n	800c2e0 <HAL_SPI_TransmitReceive+0x2cc>
 800c2da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d103      	bne.n	800c2e8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800c2e0:	2303      	movs	r3, #3
 800c2e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800c2e6:	e029      	b.n	800c33c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c2ec:	b29b      	uxth	r3, r3
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d1a2      	bne.n	800c238 <HAL_SPI_TransmitReceive+0x224>
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c2f6:	b29b      	uxth	r3, r3
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d19d      	bne.n	800c238 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c2fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c300:	68f8      	ldr	r0, [r7, #12]
 800c302:	f000 f8a1 	bl	800c448 <SPI_EndRxTxTransaction>
 800c306:	4603      	mov	r3, r0
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d006      	beq.n	800c31a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800c30c:	2301      	movs	r3, #1
 800c30e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	2220      	movs	r2, #32
 800c316:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800c318:	e010      	b.n	800c33c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	689b      	ldr	r3, [r3, #8]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d10b      	bne.n	800c33a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c322:	2300      	movs	r3, #0
 800c324:	617b      	str	r3, [r7, #20]
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	68db      	ldr	r3, [r3, #12]
 800c32c:	617b      	str	r3, [r7, #20]
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	689b      	ldr	r3, [r3, #8]
 800c334:	617b      	str	r3, [r7, #20]
 800c336:	697b      	ldr	r3, [r7, #20]
 800c338:	e000      	b.n	800c33c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800c33a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	2201      	movs	r2, #1
 800c340:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	2200      	movs	r2, #0
 800c348:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c34c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800c350:	4618      	mov	r0, r3
 800c352:	3730      	adds	r7, #48	; 0x30
 800c354:	46bd      	mov	sp, r7
 800c356:	bd80      	pop	{r7, pc}

0800c358 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800c358:	b480      	push	{r7}
 800c35a:	b083      	sub	sp, #12
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c366:	b2db      	uxtb	r3, r3
}
 800c368:	4618      	mov	r0, r3
 800c36a:	370c      	adds	r7, #12
 800c36c:	46bd      	mov	sp, r7
 800c36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c372:	4770      	bx	lr

0800c374 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b084      	sub	sp, #16
 800c378:	af00      	add	r7, sp, #0
 800c37a:	60f8      	str	r0, [r7, #12]
 800c37c:	60b9      	str	r1, [r7, #8]
 800c37e:	603b      	str	r3, [r7, #0]
 800c380:	4613      	mov	r3, r2
 800c382:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c384:	e04c      	b.n	800c420 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c386:	683b      	ldr	r3, [r7, #0]
 800c388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c38c:	d048      	beq.n	800c420 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800c38e:	f7fc f857 	bl	8008440 <HAL_GetTick>
 800c392:	4602      	mov	r2, r0
 800c394:	69bb      	ldr	r3, [r7, #24]
 800c396:	1ad3      	subs	r3, r2, r3
 800c398:	683a      	ldr	r2, [r7, #0]
 800c39a:	429a      	cmp	r2, r3
 800c39c:	d902      	bls.n	800c3a4 <SPI_WaitFlagStateUntilTimeout+0x30>
 800c39e:	683b      	ldr	r3, [r7, #0]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d13d      	bne.n	800c420 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	685a      	ldr	r2, [r3, #4]
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c3b2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	685b      	ldr	r3, [r3, #4]
 800c3b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c3bc:	d111      	bne.n	800c3e2 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	689b      	ldr	r3, [r3, #8]
 800c3c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c3c6:	d004      	beq.n	800c3d2 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	689b      	ldr	r3, [r3, #8]
 800c3cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c3d0:	d107      	bne.n	800c3e2 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	681a      	ldr	r2, [r3, #0]
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c3e0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c3ea:	d10f      	bne.n	800c40c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	681a      	ldr	r2, [r3, #0]
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c3fa:	601a      	str	r2, [r3, #0]
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	681a      	ldr	r2, [r3, #0]
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c40a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	2201      	movs	r2, #1
 800c410:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	2200      	movs	r2, #0
 800c418:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800c41c:	2303      	movs	r3, #3
 800c41e:	e00f      	b.n	800c440 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	689a      	ldr	r2, [r3, #8]
 800c426:	68bb      	ldr	r3, [r7, #8]
 800c428:	4013      	ands	r3, r2
 800c42a:	68ba      	ldr	r2, [r7, #8]
 800c42c:	429a      	cmp	r2, r3
 800c42e:	bf0c      	ite	eq
 800c430:	2301      	moveq	r3, #1
 800c432:	2300      	movne	r3, #0
 800c434:	b2db      	uxtb	r3, r3
 800c436:	461a      	mov	r2, r3
 800c438:	79fb      	ldrb	r3, [r7, #7]
 800c43a:	429a      	cmp	r2, r3
 800c43c:	d1a3      	bne.n	800c386 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800c43e:	2300      	movs	r3, #0
}
 800c440:	4618      	mov	r0, r3
 800c442:	3710      	adds	r7, #16
 800c444:	46bd      	mov	sp, r7
 800c446:	bd80      	pop	{r7, pc}

0800c448 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c448:	b580      	push	{r7, lr}
 800c44a:	b088      	sub	sp, #32
 800c44c:	af02      	add	r7, sp, #8
 800c44e:	60f8      	str	r0, [r7, #12]
 800c450:	60b9      	str	r1, [r7, #8]
 800c452:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800c454:	4b1b      	ldr	r3, [pc, #108]	; (800c4c4 <SPI_EndRxTxTransaction+0x7c>)
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	4a1b      	ldr	r2, [pc, #108]	; (800c4c8 <SPI_EndRxTxTransaction+0x80>)
 800c45a:	fba2 2303 	umull	r2, r3, r2, r3
 800c45e:	0d5b      	lsrs	r3, r3, #21
 800c460:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c464:	fb02 f303 	mul.w	r3, r2, r3
 800c468:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	685b      	ldr	r3, [r3, #4]
 800c46e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c472:	d112      	bne.n	800c49a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	9300      	str	r3, [sp, #0]
 800c478:	68bb      	ldr	r3, [r7, #8]
 800c47a:	2200      	movs	r2, #0
 800c47c:	2180      	movs	r1, #128	; 0x80
 800c47e:	68f8      	ldr	r0, [r7, #12]
 800c480:	f7ff ff78 	bl	800c374 <SPI_WaitFlagStateUntilTimeout>
 800c484:	4603      	mov	r3, r0
 800c486:	2b00      	cmp	r3, #0
 800c488:	d016      	beq.n	800c4b8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c48e:	f043 0220 	orr.w	r2, r3, #32
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800c496:	2303      	movs	r3, #3
 800c498:	e00f      	b.n	800c4ba <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800c49a:	697b      	ldr	r3, [r7, #20]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d00a      	beq.n	800c4b6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800c4a0:	697b      	ldr	r3, [r7, #20]
 800c4a2:	3b01      	subs	r3, #1
 800c4a4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	689b      	ldr	r3, [r3, #8]
 800c4ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c4b0:	2b80      	cmp	r3, #128	; 0x80
 800c4b2:	d0f2      	beq.n	800c49a <SPI_EndRxTxTransaction+0x52>
 800c4b4:	e000      	b.n	800c4b8 <SPI_EndRxTxTransaction+0x70>
        break;
 800c4b6:	bf00      	nop
  }

  return HAL_OK;
 800c4b8:	2300      	movs	r3, #0
}
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	3718      	adds	r7, #24
 800c4be:	46bd      	mov	sp, r7
 800c4c0:	bd80      	pop	{r7, pc}
 800c4c2:	bf00      	nop
 800c4c4:	200011cc 	.word	0x200011cc
 800c4c8:	165e9f81 	.word	0x165e9f81

0800c4cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c4cc:	b580      	push	{r7, lr}
 800c4ce:	b082      	sub	sp, #8
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d101      	bne.n	800c4de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c4da:	2301      	movs	r3, #1
 800c4dc:	e01d      	b.n	800c51a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c4e4:	b2db      	uxtb	r3, r3
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d106      	bne.n	800c4f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	2200      	movs	r2, #0
 800c4ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c4f2:	6878      	ldr	r0, [r7, #4]
 800c4f4:	f7f6 f9da 	bl	80028ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	2202      	movs	r2, #2
 800c4fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681a      	ldr	r2, [r3, #0]
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	3304      	adds	r3, #4
 800c508:	4619      	mov	r1, r3
 800c50a:	4610      	mov	r0, r2
 800c50c:	f000 f8e4 	bl	800c6d8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	2201      	movs	r2, #1
 800c514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c518:	2300      	movs	r3, #0
}
 800c51a:	4618      	mov	r0, r3
 800c51c:	3708      	adds	r7, #8
 800c51e:	46bd      	mov	sp, r7
 800c520:	bd80      	pop	{r7, pc}

0800c522 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800c522:	b480      	push	{r7}
 800c524:	b085      	sub	sp, #20
 800c526:	af00      	add	r7, sp, #0
 800c528:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	2202      	movs	r2, #2
 800c52e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	689b      	ldr	r3, [r3, #8]
 800c538:	f003 0307 	and.w	r3, r3, #7
 800c53c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	2b06      	cmp	r3, #6
 800c542:	d007      	beq.n	800c554 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	681a      	ldr	r2, [r3, #0]
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	f042 0201 	orr.w	r2, r2, #1
 800c552:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	2201      	movs	r2, #1
 800c558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800c55c:	2300      	movs	r3, #0
}
 800c55e:	4618      	mov	r0, r3
 800c560:	3714      	adds	r7, #20
 800c562:	46bd      	mov	sp, r7
 800c564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c568:	4770      	bx	lr

0800c56a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c56a:	b580      	push	{r7, lr}
 800c56c:	b084      	sub	sp, #16
 800c56e:	af00      	add	r7, sp, #0
 800c570:	6078      	str	r0, [r7, #4]
 800c572:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c57a:	2b01      	cmp	r3, #1
 800c57c:	d101      	bne.n	800c582 <HAL_TIM_ConfigClockSource+0x18>
 800c57e:	2302      	movs	r3, #2
 800c580:	e0a6      	b.n	800c6d0 <HAL_TIM_ConfigClockSource+0x166>
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	2201      	movs	r2, #1
 800c586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	2202      	movs	r2, #2
 800c58e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	689b      	ldr	r3, [r3, #8]
 800c598:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c5a0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c5a8:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	68fa      	ldr	r2, [r7, #12]
 800c5b0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c5b2:	683b      	ldr	r3, [r7, #0]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	2b40      	cmp	r3, #64	; 0x40
 800c5b8:	d067      	beq.n	800c68a <HAL_TIM_ConfigClockSource+0x120>
 800c5ba:	2b40      	cmp	r3, #64	; 0x40
 800c5bc:	d80b      	bhi.n	800c5d6 <HAL_TIM_ConfigClockSource+0x6c>
 800c5be:	2b10      	cmp	r3, #16
 800c5c0:	d073      	beq.n	800c6aa <HAL_TIM_ConfigClockSource+0x140>
 800c5c2:	2b10      	cmp	r3, #16
 800c5c4:	d802      	bhi.n	800c5cc <HAL_TIM_ConfigClockSource+0x62>
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d06f      	beq.n	800c6aa <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800c5ca:	e078      	b.n	800c6be <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800c5cc:	2b20      	cmp	r3, #32
 800c5ce:	d06c      	beq.n	800c6aa <HAL_TIM_ConfigClockSource+0x140>
 800c5d0:	2b30      	cmp	r3, #48	; 0x30
 800c5d2:	d06a      	beq.n	800c6aa <HAL_TIM_ConfigClockSource+0x140>
      break;
 800c5d4:	e073      	b.n	800c6be <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800c5d6:	2b70      	cmp	r3, #112	; 0x70
 800c5d8:	d00d      	beq.n	800c5f6 <HAL_TIM_ConfigClockSource+0x8c>
 800c5da:	2b70      	cmp	r3, #112	; 0x70
 800c5dc:	d804      	bhi.n	800c5e8 <HAL_TIM_ConfigClockSource+0x7e>
 800c5de:	2b50      	cmp	r3, #80	; 0x50
 800c5e0:	d033      	beq.n	800c64a <HAL_TIM_ConfigClockSource+0xe0>
 800c5e2:	2b60      	cmp	r3, #96	; 0x60
 800c5e4:	d041      	beq.n	800c66a <HAL_TIM_ConfigClockSource+0x100>
      break;
 800c5e6:	e06a      	b.n	800c6be <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800c5e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c5ec:	d066      	beq.n	800c6bc <HAL_TIM_ConfigClockSource+0x152>
 800c5ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c5f2:	d017      	beq.n	800c624 <HAL_TIM_ConfigClockSource+0xba>
      break;
 800c5f4:	e063      	b.n	800c6be <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	6818      	ldr	r0, [r3, #0]
 800c5fa:	683b      	ldr	r3, [r7, #0]
 800c5fc:	6899      	ldr	r1, [r3, #8]
 800c5fe:	683b      	ldr	r3, [r7, #0]
 800c600:	685a      	ldr	r2, [r3, #4]
 800c602:	683b      	ldr	r3, [r7, #0]
 800c604:	68db      	ldr	r3, [r3, #12]
 800c606:	f000 f961 	bl	800c8cc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	689b      	ldr	r3, [r3, #8]
 800c610:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c618:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	68fa      	ldr	r2, [r7, #12]
 800c620:	609a      	str	r2, [r3, #8]
      break;
 800c622:	e04c      	b.n	800c6be <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	6818      	ldr	r0, [r3, #0]
 800c628:	683b      	ldr	r3, [r7, #0]
 800c62a:	6899      	ldr	r1, [r3, #8]
 800c62c:	683b      	ldr	r3, [r7, #0]
 800c62e:	685a      	ldr	r2, [r3, #4]
 800c630:	683b      	ldr	r3, [r7, #0]
 800c632:	68db      	ldr	r3, [r3, #12]
 800c634:	f000 f94a 	bl	800c8cc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	689a      	ldr	r2, [r3, #8]
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c646:	609a      	str	r2, [r3, #8]
      break;
 800c648:	e039      	b.n	800c6be <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	6818      	ldr	r0, [r3, #0]
 800c64e:	683b      	ldr	r3, [r7, #0]
 800c650:	6859      	ldr	r1, [r3, #4]
 800c652:	683b      	ldr	r3, [r7, #0]
 800c654:	68db      	ldr	r3, [r3, #12]
 800c656:	461a      	mov	r2, r3
 800c658:	f000 f8be 	bl	800c7d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	2150      	movs	r1, #80	; 0x50
 800c662:	4618      	mov	r0, r3
 800c664:	f000 f917 	bl	800c896 <TIM_ITRx_SetConfig>
      break;
 800c668:	e029      	b.n	800c6be <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	6818      	ldr	r0, [r3, #0]
 800c66e:	683b      	ldr	r3, [r7, #0]
 800c670:	6859      	ldr	r1, [r3, #4]
 800c672:	683b      	ldr	r3, [r7, #0]
 800c674:	68db      	ldr	r3, [r3, #12]
 800c676:	461a      	mov	r2, r3
 800c678:	f000 f8dd 	bl	800c836 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	2160      	movs	r1, #96	; 0x60
 800c682:	4618      	mov	r0, r3
 800c684:	f000 f907 	bl	800c896 <TIM_ITRx_SetConfig>
      break;
 800c688:	e019      	b.n	800c6be <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	6818      	ldr	r0, [r3, #0]
 800c68e:	683b      	ldr	r3, [r7, #0]
 800c690:	6859      	ldr	r1, [r3, #4]
 800c692:	683b      	ldr	r3, [r7, #0]
 800c694:	68db      	ldr	r3, [r3, #12]
 800c696:	461a      	mov	r2, r3
 800c698:	f000 f89e 	bl	800c7d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	2140      	movs	r1, #64	; 0x40
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	f000 f8f7 	bl	800c896 <TIM_ITRx_SetConfig>
      break;
 800c6a8:	e009      	b.n	800c6be <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	681a      	ldr	r2, [r3, #0]
 800c6ae:	683b      	ldr	r3, [r7, #0]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	4619      	mov	r1, r3
 800c6b4:	4610      	mov	r0, r2
 800c6b6:	f000 f8ee 	bl	800c896 <TIM_ITRx_SetConfig>
      break;
 800c6ba:	e000      	b.n	800c6be <HAL_TIM_ConfigClockSource+0x154>
      break;
 800c6bc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	2201      	movs	r2, #1
 800c6c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	2200      	movs	r2, #0
 800c6ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c6ce:	2300      	movs	r3, #0
}
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	3710      	adds	r7, #16
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	bd80      	pop	{r7, pc}

0800c6d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c6d8:	b480      	push	{r7}
 800c6da:	b085      	sub	sp, #20
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]
 800c6e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	4a34      	ldr	r2, [pc, #208]	; (800c7bc <TIM_Base_SetConfig+0xe4>)
 800c6ec:	4293      	cmp	r3, r2
 800c6ee:	d00f      	beq.n	800c710 <TIM_Base_SetConfig+0x38>
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c6f6:	d00b      	beq.n	800c710 <TIM_Base_SetConfig+0x38>
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	4a31      	ldr	r2, [pc, #196]	; (800c7c0 <TIM_Base_SetConfig+0xe8>)
 800c6fc:	4293      	cmp	r3, r2
 800c6fe:	d007      	beq.n	800c710 <TIM_Base_SetConfig+0x38>
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	4a30      	ldr	r2, [pc, #192]	; (800c7c4 <TIM_Base_SetConfig+0xec>)
 800c704:	4293      	cmp	r3, r2
 800c706:	d003      	beq.n	800c710 <TIM_Base_SetConfig+0x38>
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	4a2f      	ldr	r2, [pc, #188]	; (800c7c8 <TIM_Base_SetConfig+0xf0>)
 800c70c:	4293      	cmp	r3, r2
 800c70e:	d108      	bne.n	800c722 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c716:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c718:	683b      	ldr	r3, [r7, #0]
 800c71a:	685b      	ldr	r3, [r3, #4]
 800c71c:	68fa      	ldr	r2, [r7, #12]
 800c71e:	4313      	orrs	r3, r2
 800c720:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	4a25      	ldr	r2, [pc, #148]	; (800c7bc <TIM_Base_SetConfig+0xe4>)
 800c726:	4293      	cmp	r3, r2
 800c728:	d01b      	beq.n	800c762 <TIM_Base_SetConfig+0x8a>
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c730:	d017      	beq.n	800c762 <TIM_Base_SetConfig+0x8a>
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	4a22      	ldr	r2, [pc, #136]	; (800c7c0 <TIM_Base_SetConfig+0xe8>)
 800c736:	4293      	cmp	r3, r2
 800c738:	d013      	beq.n	800c762 <TIM_Base_SetConfig+0x8a>
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	4a21      	ldr	r2, [pc, #132]	; (800c7c4 <TIM_Base_SetConfig+0xec>)
 800c73e:	4293      	cmp	r3, r2
 800c740:	d00f      	beq.n	800c762 <TIM_Base_SetConfig+0x8a>
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	4a20      	ldr	r2, [pc, #128]	; (800c7c8 <TIM_Base_SetConfig+0xf0>)
 800c746:	4293      	cmp	r3, r2
 800c748:	d00b      	beq.n	800c762 <TIM_Base_SetConfig+0x8a>
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	4a1f      	ldr	r2, [pc, #124]	; (800c7cc <TIM_Base_SetConfig+0xf4>)
 800c74e:	4293      	cmp	r3, r2
 800c750:	d007      	beq.n	800c762 <TIM_Base_SetConfig+0x8a>
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	4a1e      	ldr	r2, [pc, #120]	; (800c7d0 <TIM_Base_SetConfig+0xf8>)
 800c756:	4293      	cmp	r3, r2
 800c758:	d003      	beq.n	800c762 <TIM_Base_SetConfig+0x8a>
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	4a1d      	ldr	r2, [pc, #116]	; (800c7d4 <TIM_Base_SetConfig+0xfc>)
 800c75e:	4293      	cmp	r3, r2
 800c760:	d108      	bne.n	800c774 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c768:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c76a:	683b      	ldr	r3, [r7, #0]
 800c76c:	68db      	ldr	r3, [r3, #12]
 800c76e:	68fa      	ldr	r2, [r7, #12]
 800c770:	4313      	orrs	r3, r2
 800c772:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c77a:	683b      	ldr	r3, [r7, #0]
 800c77c:	695b      	ldr	r3, [r3, #20]
 800c77e:	4313      	orrs	r3, r2
 800c780:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	68fa      	ldr	r2, [r7, #12]
 800c786:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c788:	683b      	ldr	r3, [r7, #0]
 800c78a:	689a      	ldr	r2, [r3, #8]
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c790:	683b      	ldr	r3, [r7, #0]
 800c792:	681a      	ldr	r2, [r3, #0]
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	4a08      	ldr	r2, [pc, #32]	; (800c7bc <TIM_Base_SetConfig+0xe4>)
 800c79c:	4293      	cmp	r3, r2
 800c79e:	d103      	bne.n	800c7a8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c7a0:	683b      	ldr	r3, [r7, #0]
 800c7a2:	691a      	ldr	r2, [r3, #16]
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	2201      	movs	r2, #1
 800c7ac:	615a      	str	r2, [r3, #20]
}
 800c7ae:	bf00      	nop
 800c7b0:	3714      	adds	r7, #20
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b8:	4770      	bx	lr
 800c7ba:	bf00      	nop
 800c7bc:	40010000 	.word	0x40010000
 800c7c0:	40000400 	.word	0x40000400
 800c7c4:	40000800 	.word	0x40000800
 800c7c8:	40000c00 	.word	0x40000c00
 800c7cc:	40014000 	.word	0x40014000
 800c7d0:	40014400 	.word	0x40014400
 800c7d4:	40014800 	.word	0x40014800

0800c7d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c7d8:	b480      	push	{r7}
 800c7da:	b087      	sub	sp, #28
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	60f8      	str	r0, [r7, #12]
 800c7e0:	60b9      	str	r1, [r7, #8]
 800c7e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	6a1b      	ldr	r3, [r3, #32]
 800c7e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	6a1b      	ldr	r3, [r3, #32]
 800c7ee:	f023 0201 	bic.w	r2, r3, #1
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	699b      	ldr	r3, [r3, #24]
 800c7fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c7fc:	693b      	ldr	r3, [r7, #16]
 800c7fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c802:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	011b      	lsls	r3, r3, #4
 800c808:	693a      	ldr	r2, [r7, #16]
 800c80a:	4313      	orrs	r3, r2
 800c80c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c80e:	697b      	ldr	r3, [r7, #20]
 800c810:	f023 030a 	bic.w	r3, r3, #10
 800c814:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c816:	697a      	ldr	r2, [r7, #20]
 800c818:	68bb      	ldr	r3, [r7, #8]
 800c81a:	4313      	orrs	r3, r2
 800c81c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	693a      	ldr	r2, [r7, #16]
 800c822:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	697a      	ldr	r2, [r7, #20]
 800c828:	621a      	str	r2, [r3, #32]
}
 800c82a:	bf00      	nop
 800c82c:	371c      	adds	r7, #28
 800c82e:	46bd      	mov	sp, r7
 800c830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c834:	4770      	bx	lr

0800c836 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c836:	b480      	push	{r7}
 800c838:	b087      	sub	sp, #28
 800c83a:	af00      	add	r7, sp, #0
 800c83c:	60f8      	str	r0, [r7, #12]
 800c83e:	60b9      	str	r1, [r7, #8]
 800c840:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	6a1b      	ldr	r3, [r3, #32]
 800c846:	f023 0210 	bic.w	r2, r3, #16
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	699b      	ldr	r3, [r3, #24]
 800c852:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	6a1b      	ldr	r3, [r3, #32]
 800c858:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c85a:	697b      	ldr	r3, [r7, #20]
 800c85c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c860:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	031b      	lsls	r3, r3, #12
 800c866:	697a      	ldr	r2, [r7, #20]
 800c868:	4313      	orrs	r3, r2
 800c86a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c86c:	693b      	ldr	r3, [r7, #16]
 800c86e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c872:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c874:	68bb      	ldr	r3, [r7, #8]
 800c876:	011b      	lsls	r3, r3, #4
 800c878:	693a      	ldr	r2, [r7, #16]
 800c87a:	4313      	orrs	r3, r2
 800c87c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	697a      	ldr	r2, [r7, #20]
 800c882:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	693a      	ldr	r2, [r7, #16]
 800c888:	621a      	str	r2, [r3, #32]
}
 800c88a:	bf00      	nop
 800c88c:	371c      	adds	r7, #28
 800c88e:	46bd      	mov	sp, r7
 800c890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c894:	4770      	bx	lr

0800c896 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c896:	b480      	push	{r7}
 800c898:	b085      	sub	sp, #20
 800c89a:	af00      	add	r7, sp, #0
 800c89c:	6078      	str	r0, [r7, #4]
 800c89e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	689b      	ldr	r3, [r3, #8]
 800c8a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c8ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c8ae:	683a      	ldr	r2, [r7, #0]
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	4313      	orrs	r3, r2
 800c8b4:	f043 0307 	orr.w	r3, r3, #7
 800c8b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	68fa      	ldr	r2, [r7, #12]
 800c8be:	609a      	str	r2, [r3, #8]
}
 800c8c0:	bf00      	nop
 800c8c2:	3714      	adds	r7, #20
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ca:	4770      	bx	lr

0800c8cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c8cc:	b480      	push	{r7}
 800c8ce:	b087      	sub	sp, #28
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	60f8      	str	r0, [r7, #12]
 800c8d4:	60b9      	str	r1, [r7, #8]
 800c8d6:	607a      	str	r2, [r7, #4]
 800c8d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	689b      	ldr	r3, [r3, #8]
 800c8de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c8e0:	697b      	ldr	r3, [r7, #20]
 800c8e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c8e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c8e8:	683b      	ldr	r3, [r7, #0]
 800c8ea:	021a      	lsls	r2, r3, #8
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	431a      	orrs	r2, r3
 800c8f0:	68bb      	ldr	r3, [r7, #8]
 800c8f2:	4313      	orrs	r3, r2
 800c8f4:	697a      	ldr	r2, [r7, #20]
 800c8f6:	4313      	orrs	r3, r2
 800c8f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	697a      	ldr	r2, [r7, #20]
 800c8fe:	609a      	str	r2, [r3, #8]
}
 800c900:	bf00      	nop
 800c902:	371c      	adds	r7, #28
 800c904:	46bd      	mov	sp, r7
 800c906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c90a:	4770      	bx	lr

0800c90c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c90c:	b480      	push	{r7}
 800c90e:	b085      	sub	sp, #20
 800c910:	af00      	add	r7, sp, #0
 800c912:	6078      	str	r0, [r7, #4]
 800c914:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c91c:	2b01      	cmp	r3, #1
 800c91e:	d101      	bne.n	800c924 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c920:	2302      	movs	r3, #2
 800c922:	e050      	b.n	800c9c6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	2201      	movs	r2, #1
 800c928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	2202      	movs	r2, #2
 800c930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	685b      	ldr	r3, [r3, #4]
 800c93a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	689b      	ldr	r3, [r3, #8]
 800c942:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c94a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c94c:	683b      	ldr	r3, [r7, #0]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	68fa      	ldr	r2, [r7, #12]
 800c952:	4313      	orrs	r3, r2
 800c954:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	68fa      	ldr	r2, [r7, #12]
 800c95c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	4a1c      	ldr	r2, [pc, #112]	; (800c9d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800c964:	4293      	cmp	r3, r2
 800c966:	d018      	beq.n	800c99a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c970:	d013      	beq.n	800c99a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	4a18      	ldr	r2, [pc, #96]	; (800c9d8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800c978:	4293      	cmp	r3, r2
 800c97a:	d00e      	beq.n	800c99a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	4a16      	ldr	r2, [pc, #88]	; (800c9dc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800c982:	4293      	cmp	r3, r2
 800c984:	d009      	beq.n	800c99a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	4a15      	ldr	r2, [pc, #84]	; (800c9e0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800c98c:	4293      	cmp	r3, r2
 800c98e:	d004      	beq.n	800c99a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	4a13      	ldr	r2, [pc, #76]	; (800c9e4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800c996:	4293      	cmp	r3, r2
 800c998:	d10c      	bne.n	800c9b4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c99a:	68bb      	ldr	r3, [r7, #8]
 800c99c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c9a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c9a2:	683b      	ldr	r3, [r7, #0]
 800c9a4:	685b      	ldr	r3, [r3, #4]
 800c9a6:	68ba      	ldr	r2, [r7, #8]
 800c9a8:	4313      	orrs	r3, r2
 800c9aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	68ba      	ldr	r2, [r7, #8]
 800c9b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	2201      	movs	r2, #1
 800c9b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	2200      	movs	r2, #0
 800c9c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c9c4:	2300      	movs	r3, #0
}
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	3714      	adds	r7, #20
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d0:	4770      	bx	lr
 800c9d2:	bf00      	nop
 800c9d4:	40010000 	.word	0x40010000
 800c9d8:	40000400 	.word	0x40000400
 800c9dc:	40000800 	.word	0x40000800
 800c9e0:	40000c00 	.word	0x40000c00
 800c9e4:	40014000 	.word	0x40014000

0800c9e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b082      	sub	sp, #8
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d101      	bne.n	800c9fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c9f6:	2301      	movs	r3, #1
 800c9f8:	e03f      	b.n	800ca7a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ca00:	b2db      	uxtb	r3, r3
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d106      	bne.n	800ca14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	2200      	movs	r2, #0
 800ca0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ca0e:	6878      	ldr	r0, [r7, #4]
 800ca10:	f000 f837 	bl	800ca82 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	2224      	movs	r2, #36	; 0x24
 800ca18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	68da      	ldr	r2, [r3, #12]
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ca2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ca2c:	6878      	ldr	r0, [r7, #4]
 800ca2e:	f000 f915 	bl	800cc5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	691a      	ldr	r2, [r3, #16]
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ca40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	695a      	ldr	r2, [r3, #20]
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ca50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	68da      	ldr	r2, [r3, #12]
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ca60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	2200      	movs	r2, #0
 800ca66:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	2220      	movs	r2, #32
 800ca6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	2220      	movs	r2, #32
 800ca74:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800ca78:	2300      	movs	r3, #0
}
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	3708      	adds	r7, #8
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	bd80      	pop	{r7, pc}

0800ca82 <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800ca82:	b480      	push	{r7}
 800ca84:	b083      	sub	sp, #12
 800ca86:	af00      	add	r7, sp, #0
 800ca88:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 800ca8a:	bf00      	nop
 800ca8c:	370c      	adds	r7, #12
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca94:	4770      	bx	lr

0800ca96 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ca96:	b580      	push	{r7, lr}
 800ca98:	b088      	sub	sp, #32
 800ca9a:	af02      	add	r7, sp, #8
 800ca9c:	60f8      	str	r0, [r7, #12]
 800ca9e:	60b9      	str	r1, [r7, #8]
 800caa0:	603b      	str	r3, [r7, #0]
 800caa2:	4613      	mov	r3, r2
 800caa4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800caa6:	2300      	movs	r3, #0
 800caa8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800cab0:	b2db      	uxtb	r3, r3
 800cab2:	2b20      	cmp	r3, #32
 800cab4:	f040 8083 	bne.w	800cbbe <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800cab8:	68bb      	ldr	r3, [r7, #8]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d002      	beq.n	800cac4 <HAL_UART_Transmit+0x2e>
 800cabe:	88fb      	ldrh	r3, [r7, #6]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d101      	bne.n	800cac8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800cac4:	2301      	movs	r3, #1
 800cac6:	e07b      	b.n	800cbc0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800cace:	2b01      	cmp	r3, #1
 800cad0:	d101      	bne.n	800cad6 <HAL_UART_Transmit+0x40>
 800cad2:	2302      	movs	r3, #2
 800cad4:	e074      	b.n	800cbc0 <HAL_UART_Transmit+0x12a>
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	2201      	movs	r2, #1
 800cada:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	2200      	movs	r2, #0
 800cae2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	2221      	movs	r2, #33	; 0x21
 800cae8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800caec:	f7fb fca8 	bl	8008440 <HAL_GetTick>
 800caf0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	88fa      	ldrh	r2, [r7, #6]
 800caf6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	88fa      	ldrh	r2, [r7, #6]
 800cafc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	2200      	movs	r2, #0
 800cb02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800cb06:	e042      	b.n	800cb8e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800cb0c:	b29b      	uxth	r3, r3
 800cb0e:	3b01      	subs	r3, #1
 800cb10:	b29a      	uxth	r2, r3
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	689b      	ldr	r3, [r3, #8]
 800cb1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cb1e:	d122      	bne.n	800cb66 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	9300      	str	r3, [sp, #0]
 800cb24:	697b      	ldr	r3, [r7, #20]
 800cb26:	2200      	movs	r2, #0
 800cb28:	2180      	movs	r1, #128	; 0x80
 800cb2a:	68f8      	ldr	r0, [r7, #12]
 800cb2c:	f000 f84c 	bl	800cbc8 <UART_WaitOnFlagUntilTimeout>
 800cb30:	4603      	mov	r3, r0
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d001      	beq.n	800cb3a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800cb36:	2303      	movs	r3, #3
 800cb38:	e042      	b.n	800cbc0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800cb3a:	68bb      	ldr	r3, [r7, #8]
 800cb3c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800cb3e:	693b      	ldr	r3, [r7, #16]
 800cb40:	881b      	ldrh	r3, [r3, #0]
 800cb42:	461a      	mov	r2, r3
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cb4c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	691b      	ldr	r3, [r3, #16]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d103      	bne.n	800cb5e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800cb56:	68bb      	ldr	r3, [r7, #8]
 800cb58:	3302      	adds	r3, #2
 800cb5a:	60bb      	str	r3, [r7, #8]
 800cb5c:	e017      	b.n	800cb8e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800cb5e:	68bb      	ldr	r3, [r7, #8]
 800cb60:	3301      	adds	r3, #1
 800cb62:	60bb      	str	r3, [r7, #8]
 800cb64:	e013      	b.n	800cb8e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cb66:	683b      	ldr	r3, [r7, #0]
 800cb68:	9300      	str	r3, [sp, #0]
 800cb6a:	697b      	ldr	r3, [r7, #20]
 800cb6c:	2200      	movs	r2, #0
 800cb6e:	2180      	movs	r1, #128	; 0x80
 800cb70:	68f8      	ldr	r0, [r7, #12]
 800cb72:	f000 f829 	bl	800cbc8 <UART_WaitOnFlagUntilTimeout>
 800cb76:	4603      	mov	r3, r0
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d001      	beq.n	800cb80 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800cb7c:	2303      	movs	r3, #3
 800cb7e:	e01f      	b.n	800cbc0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800cb80:	68bb      	ldr	r3, [r7, #8]
 800cb82:	1c5a      	adds	r2, r3, #1
 800cb84:	60ba      	str	r2, [r7, #8]
 800cb86:	781a      	ldrb	r2, [r3, #0]
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800cb92:	b29b      	uxth	r3, r3
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d1b7      	bne.n	800cb08 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cb98:	683b      	ldr	r3, [r7, #0]
 800cb9a:	9300      	str	r3, [sp, #0]
 800cb9c:	697b      	ldr	r3, [r7, #20]
 800cb9e:	2200      	movs	r2, #0
 800cba0:	2140      	movs	r1, #64	; 0x40
 800cba2:	68f8      	ldr	r0, [r7, #12]
 800cba4:	f000 f810 	bl	800cbc8 <UART_WaitOnFlagUntilTimeout>
 800cba8:	4603      	mov	r3, r0
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d001      	beq.n	800cbb2 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800cbae:	2303      	movs	r3, #3
 800cbb0:	e006      	b.n	800cbc0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	2220      	movs	r2, #32
 800cbb6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800cbba:	2300      	movs	r3, #0
 800cbbc:	e000      	b.n	800cbc0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800cbbe:	2302      	movs	r3, #2
  }
}
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	3718      	adds	r7, #24
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	bd80      	pop	{r7, pc}

0800cbc8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800cbc8:	b580      	push	{r7, lr}
 800cbca:	b084      	sub	sp, #16
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	60f8      	str	r0, [r7, #12]
 800cbd0:	60b9      	str	r1, [r7, #8]
 800cbd2:	603b      	str	r3, [r7, #0]
 800cbd4:	4613      	mov	r3, r2
 800cbd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cbd8:	e02c      	b.n	800cc34 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cbda:	69bb      	ldr	r3, [r7, #24]
 800cbdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbe0:	d028      	beq.n	800cc34 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800cbe2:	69bb      	ldr	r3, [r7, #24]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d007      	beq.n	800cbf8 <UART_WaitOnFlagUntilTimeout+0x30>
 800cbe8:	f7fb fc2a 	bl	8008440 <HAL_GetTick>
 800cbec:	4602      	mov	r2, r0
 800cbee:	683b      	ldr	r3, [r7, #0]
 800cbf0:	1ad3      	subs	r3, r2, r3
 800cbf2:	69ba      	ldr	r2, [r7, #24]
 800cbf4:	429a      	cmp	r2, r3
 800cbf6:	d21d      	bcs.n	800cc34 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	68da      	ldr	r2, [r3, #12]
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800cc06:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	695a      	ldr	r2, [r3, #20]
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	f022 0201 	bic.w	r2, r2, #1
 800cc16:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	2220      	movs	r2, #32
 800cc1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	2220      	movs	r2, #32
 800cc24:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800cc30:	2303      	movs	r3, #3
 800cc32:	e00f      	b.n	800cc54 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	681a      	ldr	r2, [r3, #0]
 800cc3a:	68bb      	ldr	r3, [r7, #8]
 800cc3c:	4013      	ands	r3, r2
 800cc3e:	68ba      	ldr	r2, [r7, #8]
 800cc40:	429a      	cmp	r2, r3
 800cc42:	bf0c      	ite	eq
 800cc44:	2301      	moveq	r3, #1
 800cc46:	2300      	movne	r3, #0
 800cc48:	b2db      	uxtb	r3, r3
 800cc4a:	461a      	mov	r2, r3
 800cc4c:	79fb      	ldrb	r3, [r7, #7]
 800cc4e:	429a      	cmp	r2, r3
 800cc50:	d0c3      	beq.n	800cbda <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800cc52:	2300      	movs	r3, #0
}
 800cc54:	4618      	mov	r0, r3
 800cc56:	3710      	adds	r7, #16
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	bd80      	pop	{r7, pc}

0800cc5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cc5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc60:	b085      	sub	sp, #20
 800cc62:	af00      	add	r7, sp, #0
 800cc64:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	691b      	ldr	r3, [r3, #16]
 800cc6c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	68da      	ldr	r2, [r3, #12]
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	430a      	orrs	r2, r1
 800cc7a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	689a      	ldr	r2, [r3, #8]
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	691b      	ldr	r3, [r3, #16]
 800cc84:	431a      	orrs	r2, r3
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	695b      	ldr	r3, [r3, #20]
 800cc8a:	431a      	orrs	r2, r3
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	69db      	ldr	r3, [r3, #28]
 800cc90:	4313      	orrs	r3, r2
 800cc92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	68db      	ldr	r3, [r3, #12]
 800cc9a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800cc9e:	f023 030c 	bic.w	r3, r3, #12
 800cca2:	687a      	ldr	r2, [r7, #4]
 800cca4:	6812      	ldr	r2, [r2, #0]
 800cca6:	68f9      	ldr	r1, [r7, #12]
 800cca8:	430b      	orrs	r3, r1
 800ccaa:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	695b      	ldr	r3, [r3, #20]
 800ccb2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	699a      	ldr	r2, [r3, #24]
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	430a      	orrs	r2, r1
 800ccc0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	69db      	ldr	r3, [r3, #28]
 800ccc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ccca:	f040 818b 	bne.w	800cfe4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	4ac1      	ldr	r2, [pc, #772]	; (800cfd8 <UART_SetConfig+0x37c>)
 800ccd4:	4293      	cmp	r3, r2
 800ccd6:	d005      	beq.n	800cce4 <UART_SetConfig+0x88>
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	4abf      	ldr	r2, [pc, #764]	; (800cfdc <UART_SetConfig+0x380>)
 800ccde:	4293      	cmp	r3, r2
 800cce0:	f040 80bd 	bne.w	800ce5e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800cce4:	f7fe fcf4 	bl	800b6d0 <HAL_RCC_GetPCLK2Freq>
 800cce8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ccea:	68bb      	ldr	r3, [r7, #8]
 800ccec:	461d      	mov	r5, r3
 800ccee:	f04f 0600 	mov.w	r6, #0
 800ccf2:	46a8      	mov	r8, r5
 800ccf4:	46b1      	mov	r9, r6
 800ccf6:	eb18 0308 	adds.w	r3, r8, r8
 800ccfa:	eb49 0409 	adc.w	r4, r9, r9
 800ccfe:	4698      	mov	r8, r3
 800cd00:	46a1      	mov	r9, r4
 800cd02:	eb18 0805 	adds.w	r8, r8, r5
 800cd06:	eb49 0906 	adc.w	r9, r9, r6
 800cd0a:	f04f 0100 	mov.w	r1, #0
 800cd0e:	f04f 0200 	mov.w	r2, #0
 800cd12:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800cd16:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800cd1a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800cd1e:	4688      	mov	r8, r1
 800cd20:	4691      	mov	r9, r2
 800cd22:	eb18 0005 	adds.w	r0, r8, r5
 800cd26:	eb49 0106 	adc.w	r1, r9, r6
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	685b      	ldr	r3, [r3, #4]
 800cd2e:	461d      	mov	r5, r3
 800cd30:	f04f 0600 	mov.w	r6, #0
 800cd34:	196b      	adds	r3, r5, r5
 800cd36:	eb46 0406 	adc.w	r4, r6, r6
 800cd3a:	461a      	mov	r2, r3
 800cd3c:	4623      	mov	r3, r4
 800cd3e:	f7f3 ff8b 	bl	8000c58 <__aeabi_uldivmod>
 800cd42:	4603      	mov	r3, r0
 800cd44:	460c      	mov	r4, r1
 800cd46:	461a      	mov	r2, r3
 800cd48:	4ba5      	ldr	r3, [pc, #660]	; (800cfe0 <UART_SetConfig+0x384>)
 800cd4a:	fba3 2302 	umull	r2, r3, r3, r2
 800cd4e:	095b      	lsrs	r3, r3, #5
 800cd50:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800cd54:	68bb      	ldr	r3, [r7, #8]
 800cd56:	461d      	mov	r5, r3
 800cd58:	f04f 0600 	mov.w	r6, #0
 800cd5c:	46a9      	mov	r9, r5
 800cd5e:	46b2      	mov	sl, r6
 800cd60:	eb19 0309 	adds.w	r3, r9, r9
 800cd64:	eb4a 040a 	adc.w	r4, sl, sl
 800cd68:	4699      	mov	r9, r3
 800cd6a:	46a2      	mov	sl, r4
 800cd6c:	eb19 0905 	adds.w	r9, r9, r5
 800cd70:	eb4a 0a06 	adc.w	sl, sl, r6
 800cd74:	f04f 0100 	mov.w	r1, #0
 800cd78:	f04f 0200 	mov.w	r2, #0
 800cd7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cd80:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800cd84:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800cd88:	4689      	mov	r9, r1
 800cd8a:	4692      	mov	sl, r2
 800cd8c:	eb19 0005 	adds.w	r0, r9, r5
 800cd90:	eb4a 0106 	adc.w	r1, sl, r6
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	685b      	ldr	r3, [r3, #4]
 800cd98:	461d      	mov	r5, r3
 800cd9a:	f04f 0600 	mov.w	r6, #0
 800cd9e:	196b      	adds	r3, r5, r5
 800cda0:	eb46 0406 	adc.w	r4, r6, r6
 800cda4:	461a      	mov	r2, r3
 800cda6:	4623      	mov	r3, r4
 800cda8:	f7f3 ff56 	bl	8000c58 <__aeabi_uldivmod>
 800cdac:	4603      	mov	r3, r0
 800cdae:	460c      	mov	r4, r1
 800cdb0:	461a      	mov	r2, r3
 800cdb2:	4b8b      	ldr	r3, [pc, #556]	; (800cfe0 <UART_SetConfig+0x384>)
 800cdb4:	fba3 1302 	umull	r1, r3, r3, r2
 800cdb8:	095b      	lsrs	r3, r3, #5
 800cdba:	2164      	movs	r1, #100	; 0x64
 800cdbc:	fb01 f303 	mul.w	r3, r1, r3
 800cdc0:	1ad3      	subs	r3, r2, r3
 800cdc2:	00db      	lsls	r3, r3, #3
 800cdc4:	3332      	adds	r3, #50	; 0x32
 800cdc6:	4a86      	ldr	r2, [pc, #536]	; (800cfe0 <UART_SetConfig+0x384>)
 800cdc8:	fba2 2303 	umull	r2, r3, r2, r3
 800cdcc:	095b      	lsrs	r3, r3, #5
 800cdce:	005b      	lsls	r3, r3, #1
 800cdd0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800cdd4:	4498      	add	r8, r3
 800cdd6:	68bb      	ldr	r3, [r7, #8]
 800cdd8:	461d      	mov	r5, r3
 800cdda:	f04f 0600 	mov.w	r6, #0
 800cdde:	46a9      	mov	r9, r5
 800cde0:	46b2      	mov	sl, r6
 800cde2:	eb19 0309 	adds.w	r3, r9, r9
 800cde6:	eb4a 040a 	adc.w	r4, sl, sl
 800cdea:	4699      	mov	r9, r3
 800cdec:	46a2      	mov	sl, r4
 800cdee:	eb19 0905 	adds.w	r9, r9, r5
 800cdf2:	eb4a 0a06 	adc.w	sl, sl, r6
 800cdf6:	f04f 0100 	mov.w	r1, #0
 800cdfa:	f04f 0200 	mov.w	r2, #0
 800cdfe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ce02:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ce06:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ce0a:	4689      	mov	r9, r1
 800ce0c:	4692      	mov	sl, r2
 800ce0e:	eb19 0005 	adds.w	r0, r9, r5
 800ce12:	eb4a 0106 	adc.w	r1, sl, r6
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	685b      	ldr	r3, [r3, #4]
 800ce1a:	461d      	mov	r5, r3
 800ce1c:	f04f 0600 	mov.w	r6, #0
 800ce20:	196b      	adds	r3, r5, r5
 800ce22:	eb46 0406 	adc.w	r4, r6, r6
 800ce26:	461a      	mov	r2, r3
 800ce28:	4623      	mov	r3, r4
 800ce2a:	f7f3 ff15 	bl	8000c58 <__aeabi_uldivmod>
 800ce2e:	4603      	mov	r3, r0
 800ce30:	460c      	mov	r4, r1
 800ce32:	461a      	mov	r2, r3
 800ce34:	4b6a      	ldr	r3, [pc, #424]	; (800cfe0 <UART_SetConfig+0x384>)
 800ce36:	fba3 1302 	umull	r1, r3, r3, r2
 800ce3a:	095b      	lsrs	r3, r3, #5
 800ce3c:	2164      	movs	r1, #100	; 0x64
 800ce3e:	fb01 f303 	mul.w	r3, r1, r3
 800ce42:	1ad3      	subs	r3, r2, r3
 800ce44:	00db      	lsls	r3, r3, #3
 800ce46:	3332      	adds	r3, #50	; 0x32
 800ce48:	4a65      	ldr	r2, [pc, #404]	; (800cfe0 <UART_SetConfig+0x384>)
 800ce4a:	fba2 2303 	umull	r2, r3, r2, r3
 800ce4e:	095b      	lsrs	r3, r3, #5
 800ce50:	f003 0207 	and.w	r2, r3, #7
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	4442      	add	r2, r8
 800ce5a:	609a      	str	r2, [r3, #8]
 800ce5c:	e26f      	b.n	800d33e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ce5e:	f7fe fc23 	bl	800b6a8 <HAL_RCC_GetPCLK1Freq>
 800ce62:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ce64:	68bb      	ldr	r3, [r7, #8]
 800ce66:	461d      	mov	r5, r3
 800ce68:	f04f 0600 	mov.w	r6, #0
 800ce6c:	46a8      	mov	r8, r5
 800ce6e:	46b1      	mov	r9, r6
 800ce70:	eb18 0308 	adds.w	r3, r8, r8
 800ce74:	eb49 0409 	adc.w	r4, r9, r9
 800ce78:	4698      	mov	r8, r3
 800ce7a:	46a1      	mov	r9, r4
 800ce7c:	eb18 0805 	adds.w	r8, r8, r5
 800ce80:	eb49 0906 	adc.w	r9, r9, r6
 800ce84:	f04f 0100 	mov.w	r1, #0
 800ce88:	f04f 0200 	mov.w	r2, #0
 800ce8c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800ce90:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800ce94:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800ce98:	4688      	mov	r8, r1
 800ce9a:	4691      	mov	r9, r2
 800ce9c:	eb18 0005 	adds.w	r0, r8, r5
 800cea0:	eb49 0106 	adc.w	r1, r9, r6
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	685b      	ldr	r3, [r3, #4]
 800cea8:	461d      	mov	r5, r3
 800ceaa:	f04f 0600 	mov.w	r6, #0
 800ceae:	196b      	adds	r3, r5, r5
 800ceb0:	eb46 0406 	adc.w	r4, r6, r6
 800ceb4:	461a      	mov	r2, r3
 800ceb6:	4623      	mov	r3, r4
 800ceb8:	f7f3 fece 	bl	8000c58 <__aeabi_uldivmod>
 800cebc:	4603      	mov	r3, r0
 800cebe:	460c      	mov	r4, r1
 800cec0:	461a      	mov	r2, r3
 800cec2:	4b47      	ldr	r3, [pc, #284]	; (800cfe0 <UART_SetConfig+0x384>)
 800cec4:	fba3 2302 	umull	r2, r3, r3, r2
 800cec8:	095b      	lsrs	r3, r3, #5
 800ceca:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800cece:	68bb      	ldr	r3, [r7, #8]
 800ced0:	461d      	mov	r5, r3
 800ced2:	f04f 0600 	mov.w	r6, #0
 800ced6:	46a9      	mov	r9, r5
 800ced8:	46b2      	mov	sl, r6
 800ceda:	eb19 0309 	adds.w	r3, r9, r9
 800cede:	eb4a 040a 	adc.w	r4, sl, sl
 800cee2:	4699      	mov	r9, r3
 800cee4:	46a2      	mov	sl, r4
 800cee6:	eb19 0905 	adds.w	r9, r9, r5
 800ceea:	eb4a 0a06 	adc.w	sl, sl, r6
 800ceee:	f04f 0100 	mov.w	r1, #0
 800cef2:	f04f 0200 	mov.w	r2, #0
 800cef6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cefa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800cefe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800cf02:	4689      	mov	r9, r1
 800cf04:	4692      	mov	sl, r2
 800cf06:	eb19 0005 	adds.w	r0, r9, r5
 800cf0a:	eb4a 0106 	adc.w	r1, sl, r6
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	685b      	ldr	r3, [r3, #4]
 800cf12:	461d      	mov	r5, r3
 800cf14:	f04f 0600 	mov.w	r6, #0
 800cf18:	196b      	adds	r3, r5, r5
 800cf1a:	eb46 0406 	adc.w	r4, r6, r6
 800cf1e:	461a      	mov	r2, r3
 800cf20:	4623      	mov	r3, r4
 800cf22:	f7f3 fe99 	bl	8000c58 <__aeabi_uldivmod>
 800cf26:	4603      	mov	r3, r0
 800cf28:	460c      	mov	r4, r1
 800cf2a:	461a      	mov	r2, r3
 800cf2c:	4b2c      	ldr	r3, [pc, #176]	; (800cfe0 <UART_SetConfig+0x384>)
 800cf2e:	fba3 1302 	umull	r1, r3, r3, r2
 800cf32:	095b      	lsrs	r3, r3, #5
 800cf34:	2164      	movs	r1, #100	; 0x64
 800cf36:	fb01 f303 	mul.w	r3, r1, r3
 800cf3a:	1ad3      	subs	r3, r2, r3
 800cf3c:	00db      	lsls	r3, r3, #3
 800cf3e:	3332      	adds	r3, #50	; 0x32
 800cf40:	4a27      	ldr	r2, [pc, #156]	; (800cfe0 <UART_SetConfig+0x384>)
 800cf42:	fba2 2303 	umull	r2, r3, r2, r3
 800cf46:	095b      	lsrs	r3, r3, #5
 800cf48:	005b      	lsls	r3, r3, #1
 800cf4a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800cf4e:	4498      	add	r8, r3
 800cf50:	68bb      	ldr	r3, [r7, #8]
 800cf52:	461d      	mov	r5, r3
 800cf54:	f04f 0600 	mov.w	r6, #0
 800cf58:	46a9      	mov	r9, r5
 800cf5a:	46b2      	mov	sl, r6
 800cf5c:	eb19 0309 	adds.w	r3, r9, r9
 800cf60:	eb4a 040a 	adc.w	r4, sl, sl
 800cf64:	4699      	mov	r9, r3
 800cf66:	46a2      	mov	sl, r4
 800cf68:	eb19 0905 	adds.w	r9, r9, r5
 800cf6c:	eb4a 0a06 	adc.w	sl, sl, r6
 800cf70:	f04f 0100 	mov.w	r1, #0
 800cf74:	f04f 0200 	mov.w	r2, #0
 800cf78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cf7c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800cf80:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800cf84:	4689      	mov	r9, r1
 800cf86:	4692      	mov	sl, r2
 800cf88:	eb19 0005 	adds.w	r0, r9, r5
 800cf8c:	eb4a 0106 	adc.w	r1, sl, r6
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	685b      	ldr	r3, [r3, #4]
 800cf94:	461d      	mov	r5, r3
 800cf96:	f04f 0600 	mov.w	r6, #0
 800cf9a:	196b      	adds	r3, r5, r5
 800cf9c:	eb46 0406 	adc.w	r4, r6, r6
 800cfa0:	461a      	mov	r2, r3
 800cfa2:	4623      	mov	r3, r4
 800cfa4:	f7f3 fe58 	bl	8000c58 <__aeabi_uldivmod>
 800cfa8:	4603      	mov	r3, r0
 800cfaa:	460c      	mov	r4, r1
 800cfac:	461a      	mov	r2, r3
 800cfae:	4b0c      	ldr	r3, [pc, #48]	; (800cfe0 <UART_SetConfig+0x384>)
 800cfb0:	fba3 1302 	umull	r1, r3, r3, r2
 800cfb4:	095b      	lsrs	r3, r3, #5
 800cfb6:	2164      	movs	r1, #100	; 0x64
 800cfb8:	fb01 f303 	mul.w	r3, r1, r3
 800cfbc:	1ad3      	subs	r3, r2, r3
 800cfbe:	00db      	lsls	r3, r3, #3
 800cfc0:	3332      	adds	r3, #50	; 0x32
 800cfc2:	4a07      	ldr	r2, [pc, #28]	; (800cfe0 <UART_SetConfig+0x384>)
 800cfc4:	fba2 2303 	umull	r2, r3, r2, r3
 800cfc8:	095b      	lsrs	r3, r3, #5
 800cfca:	f003 0207 	and.w	r2, r3, #7
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	4442      	add	r2, r8
 800cfd4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800cfd6:	e1b2      	b.n	800d33e <UART_SetConfig+0x6e2>
 800cfd8:	40011000 	.word	0x40011000
 800cfdc:	40011400 	.word	0x40011400
 800cfe0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	4ad7      	ldr	r2, [pc, #860]	; (800d348 <UART_SetConfig+0x6ec>)
 800cfea:	4293      	cmp	r3, r2
 800cfec:	d005      	beq.n	800cffa <UART_SetConfig+0x39e>
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	4ad6      	ldr	r2, [pc, #856]	; (800d34c <UART_SetConfig+0x6f0>)
 800cff4:	4293      	cmp	r3, r2
 800cff6:	f040 80d1 	bne.w	800d19c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800cffa:	f7fe fb69 	bl	800b6d0 <HAL_RCC_GetPCLK2Freq>
 800cffe:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d000:	68bb      	ldr	r3, [r7, #8]
 800d002:	469a      	mov	sl, r3
 800d004:	f04f 0b00 	mov.w	fp, #0
 800d008:	46d0      	mov	r8, sl
 800d00a:	46d9      	mov	r9, fp
 800d00c:	eb18 0308 	adds.w	r3, r8, r8
 800d010:	eb49 0409 	adc.w	r4, r9, r9
 800d014:	4698      	mov	r8, r3
 800d016:	46a1      	mov	r9, r4
 800d018:	eb18 080a 	adds.w	r8, r8, sl
 800d01c:	eb49 090b 	adc.w	r9, r9, fp
 800d020:	f04f 0100 	mov.w	r1, #0
 800d024:	f04f 0200 	mov.w	r2, #0
 800d028:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800d02c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800d030:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800d034:	4688      	mov	r8, r1
 800d036:	4691      	mov	r9, r2
 800d038:	eb1a 0508 	adds.w	r5, sl, r8
 800d03c:	eb4b 0609 	adc.w	r6, fp, r9
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	685b      	ldr	r3, [r3, #4]
 800d044:	4619      	mov	r1, r3
 800d046:	f04f 0200 	mov.w	r2, #0
 800d04a:	f04f 0300 	mov.w	r3, #0
 800d04e:	f04f 0400 	mov.w	r4, #0
 800d052:	0094      	lsls	r4, r2, #2
 800d054:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d058:	008b      	lsls	r3, r1, #2
 800d05a:	461a      	mov	r2, r3
 800d05c:	4623      	mov	r3, r4
 800d05e:	4628      	mov	r0, r5
 800d060:	4631      	mov	r1, r6
 800d062:	f7f3 fdf9 	bl	8000c58 <__aeabi_uldivmod>
 800d066:	4603      	mov	r3, r0
 800d068:	460c      	mov	r4, r1
 800d06a:	461a      	mov	r2, r3
 800d06c:	4bb8      	ldr	r3, [pc, #736]	; (800d350 <UART_SetConfig+0x6f4>)
 800d06e:	fba3 2302 	umull	r2, r3, r3, r2
 800d072:	095b      	lsrs	r3, r3, #5
 800d074:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800d078:	68bb      	ldr	r3, [r7, #8]
 800d07a:	469b      	mov	fp, r3
 800d07c:	f04f 0c00 	mov.w	ip, #0
 800d080:	46d9      	mov	r9, fp
 800d082:	46e2      	mov	sl, ip
 800d084:	eb19 0309 	adds.w	r3, r9, r9
 800d088:	eb4a 040a 	adc.w	r4, sl, sl
 800d08c:	4699      	mov	r9, r3
 800d08e:	46a2      	mov	sl, r4
 800d090:	eb19 090b 	adds.w	r9, r9, fp
 800d094:	eb4a 0a0c 	adc.w	sl, sl, ip
 800d098:	f04f 0100 	mov.w	r1, #0
 800d09c:	f04f 0200 	mov.w	r2, #0
 800d0a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d0a4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d0a8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d0ac:	4689      	mov	r9, r1
 800d0ae:	4692      	mov	sl, r2
 800d0b0:	eb1b 0509 	adds.w	r5, fp, r9
 800d0b4:	eb4c 060a 	adc.w	r6, ip, sl
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	685b      	ldr	r3, [r3, #4]
 800d0bc:	4619      	mov	r1, r3
 800d0be:	f04f 0200 	mov.w	r2, #0
 800d0c2:	f04f 0300 	mov.w	r3, #0
 800d0c6:	f04f 0400 	mov.w	r4, #0
 800d0ca:	0094      	lsls	r4, r2, #2
 800d0cc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d0d0:	008b      	lsls	r3, r1, #2
 800d0d2:	461a      	mov	r2, r3
 800d0d4:	4623      	mov	r3, r4
 800d0d6:	4628      	mov	r0, r5
 800d0d8:	4631      	mov	r1, r6
 800d0da:	f7f3 fdbd 	bl	8000c58 <__aeabi_uldivmod>
 800d0de:	4603      	mov	r3, r0
 800d0e0:	460c      	mov	r4, r1
 800d0e2:	461a      	mov	r2, r3
 800d0e4:	4b9a      	ldr	r3, [pc, #616]	; (800d350 <UART_SetConfig+0x6f4>)
 800d0e6:	fba3 1302 	umull	r1, r3, r3, r2
 800d0ea:	095b      	lsrs	r3, r3, #5
 800d0ec:	2164      	movs	r1, #100	; 0x64
 800d0ee:	fb01 f303 	mul.w	r3, r1, r3
 800d0f2:	1ad3      	subs	r3, r2, r3
 800d0f4:	011b      	lsls	r3, r3, #4
 800d0f6:	3332      	adds	r3, #50	; 0x32
 800d0f8:	4a95      	ldr	r2, [pc, #596]	; (800d350 <UART_SetConfig+0x6f4>)
 800d0fa:	fba2 2303 	umull	r2, r3, r2, r3
 800d0fe:	095b      	lsrs	r3, r3, #5
 800d100:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d104:	4498      	add	r8, r3
 800d106:	68bb      	ldr	r3, [r7, #8]
 800d108:	469b      	mov	fp, r3
 800d10a:	f04f 0c00 	mov.w	ip, #0
 800d10e:	46d9      	mov	r9, fp
 800d110:	46e2      	mov	sl, ip
 800d112:	eb19 0309 	adds.w	r3, r9, r9
 800d116:	eb4a 040a 	adc.w	r4, sl, sl
 800d11a:	4699      	mov	r9, r3
 800d11c:	46a2      	mov	sl, r4
 800d11e:	eb19 090b 	adds.w	r9, r9, fp
 800d122:	eb4a 0a0c 	adc.w	sl, sl, ip
 800d126:	f04f 0100 	mov.w	r1, #0
 800d12a:	f04f 0200 	mov.w	r2, #0
 800d12e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d132:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d136:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d13a:	4689      	mov	r9, r1
 800d13c:	4692      	mov	sl, r2
 800d13e:	eb1b 0509 	adds.w	r5, fp, r9
 800d142:	eb4c 060a 	adc.w	r6, ip, sl
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	685b      	ldr	r3, [r3, #4]
 800d14a:	4619      	mov	r1, r3
 800d14c:	f04f 0200 	mov.w	r2, #0
 800d150:	f04f 0300 	mov.w	r3, #0
 800d154:	f04f 0400 	mov.w	r4, #0
 800d158:	0094      	lsls	r4, r2, #2
 800d15a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d15e:	008b      	lsls	r3, r1, #2
 800d160:	461a      	mov	r2, r3
 800d162:	4623      	mov	r3, r4
 800d164:	4628      	mov	r0, r5
 800d166:	4631      	mov	r1, r6
 800d168:	f7f3 fd76 	bl	8000c58 <__aeabi_uldivmod>
 800d16c:	4603      	mov	r3, r0
 800d16e:	460c      	mov	r4, r1
 800d170:	461a      	mov	r2, r3
 800d172:	4b77      	ldr	r3, [pc, #476]	; (800d350 <UART_SetConfig+0x6f4>)
 800d174:	fba3 1302 	umull	r1, r3, r3, r2
 800d178:	095b      	lsrs	r3, r3, #5
 800d17a:	2164      	movs	r1, #100	; 0x64
 800d17c:	fb01 f303 	mul.w	r3, r1, r3
 800d180:	1ad3      	subs	r3, r2, r3
 800d182:	011b      	lsls	r3, r3, #4
 800d184:	3332      	adds	r3, #50	; 0x32
 800d186:	4a72      	ldr	r2, [pc, #456]	; (800d350 <UART_SetConfig+0x6f4>)
 800d188:	fba2 2303 	umull	r2, r3, r2, r3
 800d18c:	095b      	lsrs	r3, r3, #5
 800d18e:	f003 020f 	and.w	r2, r3, #15
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	4442      	add	r2, r8
 800d198:	609a      	str	r2, [r3, #8]
 800d19a:	e0d0      	b.n	800d33e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800d19c:	f7fe fa84 	bl	800b6a8 <HAL_RCC_GetPCLK1Freq>
 800d1a0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d1a2:	68bb      	ldr	r3, [r7, #8]
 800d1a4:	469a      	mov	sl, r3
 800d1a6:	f04f 0b00 	mov.w	fp, #0
 800d1aa:	46d0      	mov	r8, sl
 800d1ac:	46d9      	mov	r9, fp
 800d1ae:	eb18 0308 	adds.w	r3, r8, r8
 800d1b2:	eb49 0409 	adc.w	r4, r9, r9
 800d1b6:	4698      	mov	r8, r3
 800d1b8:	46a1      	mov	r9, r4
 800d1ba:	eb18 080a 	adds.w	r8, r8, sl
 800d1be:	eb49 090b 	adc.w	r9, r9, fp
 800d1c2:	f04f 0100 	mov.w	r1, #0
 800d1c6:	f04f 0200 	mov.w	r2, #0
 800d1ca:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800d1ce:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800d1d2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800d1d6:	4688      	mov	r8, r1
 800d1d8:	4691      	mov	r9, r2
 800d1da:	eb1a 0508 	adds.w	r5, sl, r8
 800d1de:	eb4b 0609 	adc.w	r6, fp, r9
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	685b      	ldr	r3, [r3, #4]
 800d1e6:	4619      	mov	r1, r3
 800d1e8:	f04f 0200 	mov.w	r2, #0
 800d1ec:	f04f 0300 	mov.w	r3, #0
 800d1f0:	f04f 0400 	mov.w	r4, #0
 800d1f4:	0094      	lsls	r4, r2, #2
 800d1f6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d1fa:	008b      	lsls	r3, r1, #2
 800d1fc:	461a      	mov	r2, r3
 800d1fe:	4623      	mov	r3, r4
 800d200:	4628      	mov	r0, r5
 800d202:	4631      	mov	r1, r6
 800d204:	f7f3 fd28 	bl	8000c58 <__aeabi_uldivmod>
 800d208:	4603      	mov	r3, r0
 800d20a:	460c      	mov	r4, r1
 800d20c:	461a      	mov	r2, r3
 800d20e:	4b50      	ldr	r3, [pc, #320]	; (800d350 <UART_SetConfig+0x6f4>)
 800d210:	fba3 2302 	umull	r2, r3, r3, r2
 800d214:	095b      	lsrs	r3, r3, #5
 800d216:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800d21a:	68bb      	ldr	r3, [r7, #8]
 800d21c:	469b      	mov	fp, r3
 800d21e:	f04f 0c00 	mov.w	ip, #0
 800d222:	46d9      	mov	r9, fp
 800d224:	46e2      	mov	sl, ip
 800d226:	eb19 0309 	adds.w	r3, r9, r9
 800d22a:	eb4a 040a 	adc.w	r4, sl, sl
 800d22e:	4699      	mov	r9, r3
 800d230:	46a2      	mov	sl, r4
 800d232:	eb19 090b 	adds.w	r9, r9, fp
 800d236:	eb4a 0a0c 	adc.w	sl, sl, ip
 800d23a:	f04f 0100 	mov.w	r1, #0
 800d23e:	f04f 0200 	mov.w	r2, #0
 800d242:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d246:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d24a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d24e:	4689      	mov	r9, r1
 800d250:	4692      	mov	sl, r2
 800d252:	eb1b 0509 	adds.w	r5, fp, r9
 800d256:	eb4c 060a 	adc.w	r6, ip, sl
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	685b      	ldr	r3, [r3, #4]
 800d25e:	4619      	mov	r1, r3
 800d260:	f04f 0200 	mov.w	r2, #0
 800d264:	f04f 0300 	mov.w	r3, #0
 800d268:	f04f 0400 	mov.w	r4, #0
 800d26c:	0094      	lsls	r4, r2, #2
 800d26e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d272:	008b      	lsls	r3, r1, #2
 800d274:	461a      	mov	r2, r3
 800d276:	4623      	mov	r3, r4
 800d278:	4628      	mov	r0, r5
 800d27a:	4631      	mov	r1, r6
 800d27c:	f7f3 fcec 	bl	8000c58 <__aeabi_uldivmod>
 800d280:	4603      	mov	r3, r0
 800d282:	460c      	mov	r4, r1
 800d284:	461a      	mov	r2, r3
 800d286:	4b32      	ldr	r3, [pc, #200]	; (800d350 <UART_SetConfig+0x6f4>)
 800d288:	fba3 1302 	umull	r1, r3, r3, r2
 800d28c:	095b      	lsrs	r3, r3, #5
 800d28e:	2164      	movs	r1, #100	; 0x64
 800d290:	fb01 f303 	mul.w	r3, r1, r3
 800d294:	1ad3      	subs	r3, r2, r3
 800d296:	011b      	lsls	r3, r3, #4
 800d298:	3332      	adds	r3, #50	; 0x32
 800d29a:	4a2d      	ldr	r2, [pc, #180]	; (800d350 <UART_SetConfig+0x6f4>)
 800d29c:	fba2 2303 	umull	r2, r3, r2, r3
 800d2a0:	095b      	lsrs	r3, r3, #5
 800d2a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d2a6:	4498      	add	r8, r3
 800d2a8:	68bb      	ldr	r3, [r7, #8]
 800d2aa:	469b      	mov	fp, r3
 800d2ac:	f04f 0c00 	mov.w	ip, #0
 800d2b0:	46d9      	mov	r9, fp
 800d2b2:	46e2      	mov	sl, ip
 800d2b4:	eb19 0309 	adds.w	r3, r9, r9
 800d2b8:	eb4a 040a 	adc.w	r4, sl, sl
 800d2bc:	4699      	mov	r9, r3
 800d2be:	46a2      	mov	sl, r4
 800d2c0:	eb19 090b 	adds.w	r9, r9, fp
 800d2c4:	eb4a 0a0c 	adc.w	sl, sl, ip
 800d2c8:	f04f 0100 	mov.w	r1, #0
 800d2cc:	f04f 0200 	mov.w	r2, #0
 800d2d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d2d4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d2d8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d2dc:	4689      	mov	r9, r1
 800d2de:	4692      	mov	sl, r2
 800d2e0:	eb1b 0509 	adds.w	r5, fp, r9
 800d2e4:	eb4c 060a 	adc.w	r6, ip, sl
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	685b      	ldr	r3, [r3, #4]
 800d2ec:	4619      	mov	r1, r3
 800d2ee:	f04f 0200 	mov.w	r2, #0
 800d2f2:	f04f 0300 	mov.w	r3, #0
 800d2f6:	f04f 0400 	mov.w	r4, #0
 800d2fa:	0094      	lsls	r4, r2, #2
 800d2fc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d300:	008b      	lsls	r3, r1, #2
 800d302:	461a      	mov	r2, r3
 800d304:	4623      	mov	r3, r4
 800d306:	4628      	mov	r0, r5
 800d308:	4631      	mov	r1, r6
 800d30a:	f7f3 fca5 	bl	8000c58 <__aeabi_uldivmod>
 800d30e:	4603      	mov	r3, r0
 800d310:	460c      	mov	r4, r1
 800d312:	461a      	mov	r2, r3
 800d314:	4b0e      	ldr	r3, [pc, #56]	; (800d350 <UART_SetConfig+0x6f4>)
 800d316:	fba3 1302 	umull	r1, r3, r3, r2
 800d31a:	095b      	lsrs	r3, r3, #5
 800d31c:	2164      	movs	r1, #100	; 0x64
 800d31e:	fb01 f303 	mul.w	r3, r1, r3
 800d322:	1ad3      	subs	r3, r2, r3
 800d324:	011b      	lsls	r3, r3, #4
 800d326:	3332      	adds	r3, #50	; 0x32
 800d328:	4a09      	ldr	r2, [pc, #36]	; (800d350 <UART_SetConfig+0x6f4>)
 800d32a:	fba2 2303 	umull	r2, r3, r2, r3
 800d32e:	095b      	lsrs	r3, r3, #5
 800d330:	f003 020f 	and.w	r2, r3, #15
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	4442      	add	r2, r8
 800d33a:	609a      	str	r2, [r3, #8]
}
 800d33c:	e7ff      	b.n	800d33e <UART_SetConfig+0x6e2>
 800d33e:	bf00      	nop
 800d340:	3714      	adds	r7, #20
 800d342:	46bd      	mov	sp, r7
 800d344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d348:	40011000 	.word	0x40011000
 800d34c:	40011400 	.word	0x40011400
 800d350:	51eb851f 	.word	0x51eb851f

0800d354 <MX_MEMS_Init>:
static void DWT_Start(void);
static uint32_t DWT_Stop(void);


void MX_MEMS_Init(void)
{
 800d354:	b580      	push	{r7, lr}
 800d356:	af00      	add	r7, sp, #0

  /* USER CODE END MEMS_Init_PreTreatment */

  /* Initialize the peripherals and the MEMS components */

  MX_DataLogFusion_Init();
 800d358:	f000 f808 	bl	800d36c <MX_DataLogFusion_Init>

  /* USER CODE BEGIN MEMS_Init_PostTreatment */

  /* USER CODE END MEMS_Init_PostTreatment */
}
 800d35c:	bf00      	nop
 800d35e:	bd80      	pop	{r7, pc}

0800d360 <MX_MEMS_Process>:

/*
 * LM background task
 */
void MX_MEMS_Process(void)
{
 800d360:	b580      	push	{r7, lr}
 800d362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MEMS_Process_PreTreatment */

  /* USER CODE END MEMS_Process_PreTreatment */

  MX_DataLogFusion_Process();
 800d364:	f000 f872 	bl	800d44c <MX_DataLogFusion_Process>

  /* USER CODE BEGIN MEMS_Process_PostTreatment */

  /* USER CODE END MEMS_Process_PostTreatment */
}
 800d368:	bf00      	nop
 800d36a:	bd80      	pop	{r7, pc}

0800d36c <MX_DataLogFusion_Init>:
/**
  * @brief  Initialize the DataLogFusion application
  * @retval None
  */
static void MX_DataLogFusion_Init(void)
{
 800d36c:	b580      	push	{r7, lr}
 800d36e:	b086      	sub	sp, #24
 800d370:	af00      	add	r7, sp, #0
  float ans_float;

  /* Initialize LED */
  BSP_LED_Init(LED2);
 800d372:	2000      	movs	r0, #0
 800d374:	f7fa fe2e 	bl	8007fd4 <BSP_LED_Init>

  /* Initialize push button */
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 800d378:	2101      	movs	r1, #1
 800d37a:	2000      	movs	r0, #0
 800d37c:	f7fa fea4 	bl	80080c8 <BSP_PB_Init>

  /* Initialize Virtual COM Port */
  BSP_COM_Init(COM1);
 800d380:	2000      	movs	r0, #0
 800d382:	f7fa ff45 	bl	8008210 <BSP_COM_Init>

  /* Initialize Timer */
  BSP_IP_TIM_Init();
 800d386:	f7f4 ffbb 	bl	8002300 <MX_TIM3_Init>

  /* Configure Timer to run with desired algorithm frequency */
  TIM_Config(ALGO_FREQ);
 800d38a:	2064      	movs	r0, #100	; 0x64
 800d38c:	f000 fae2 	bl	800d954 <TIM_Config>

  /* Initialize (disabled) Sensors */
  Init_Sensors();
 800d390:	f000 f884 	bl	800d49c <Init_Sensors>

  /* Sensor Fusion API initialization function */
  MotionFX_manager_init();
 800d394:	f000 fc68 	bl	800dc68 <MotionFX_manager_init>

  /* OPTIONAL */
  /* Get library version */
  MotionFX_manager_get_version(lib_version, &lib_version_len);
 800d398:	4927      	ldr	r1, [pc, #156]	; (800d438 <MX_DataLogFusion_Init+0xcc>)
 800d39a:	4828      	ldr	r0, [pc, #160]	; (800d43c <MX_DataLogFusion_Init+0xd0>)
 800d39c:	f000 fce0 	bl	800dd60 <MotionFX_manager_get_version>

  /* LED Blink */
  BSP_LED_On(LED2);
 800d3a0:	2000      	movs	r0, #0
 800d3a2:	f7fa fe4f 	bl	8008044 <BSP_LED_On>
  HAL_Delay(500);
 800d3a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800d3aa:	f7fb f855 	bl	8008458 <HAL_Delay>
  BSP_LED_Off(LED2);
 800d3ae:	2000      	movs	r0, #0
 800d3b0:	f7fa fe5e 	bl	8008070 <BSP_LED_Off>

  /* Enable magnetometer calibration */
  MotionFX_manager_MagCal_start(ALGO_PERIOD);
 800d3b4:	200a      	movs	r0, #10
 800d3b6:	f000 fcf2 	bl	800dd9e <MotionFX_manager_MagCal_start>

  /* Test if calibration data are available */
  MFX_MagCal_output_t mag_cal_test;
  MotionFX_MagCal_getParams(&mag_cal_test);
 800d3ba:	1d3b      	adds	r3, r7, #4
 800d3bc:	4618      	mov	r0, r3
 800d3be:	f00c fda3 	bl	8019f08 <MotionFX_MagCal_getParams>

  /* If calibration data are available load HI coeficients */
  if (mag_cal_test.cal_quality == MFX_MAGCALGOOD)
 800d3c2:	7c3b      	ldrb	r3, [r7, #16]
 800d3c4:	2b03      	cmp	r3, #3
 800d3c6:	d132      	bne.n	800d42e <MX_DataLogFusion_Init+0xc2>
  {
    ans_float = (mag_cal_test.hi_bias[0] * FROM_UT50_TO_MGAUSS);
 800d3c8:	edd7 7a01 	vldr	s15, [r7, #4]
 800d3cc:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800d440 <MX_DataLogFusion_Init+0xd4>
 800d3d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d3d4:	edc7 7a05 	vstr	s15, [r7, #20]
    MagOffset.x = (int32_t)ans_float;
 800d3d8:	edd7 7a05 	vldr	s15, [r7, #20]
 800d3dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d3e0:	ee17 2a90 	vmov	r2, s15
 800d3e4:	4b17      	ldr	r3, [pc, #92]	; (800d444 <MX_DataLogFusion_Init+0xd8>)
 800d3e6:	601a      	str	r2, [r3, #0]
    ans_float = (mag_cal_test.hi_bias[1] * FROM_UT50_TO_MGAUSS);
 800d3e8:	edd7 7a02 	vldr	s15, [r7, #8]
 800d3ec:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800d440 <MX_DataLogFusion_Init+0xd4>
 800d3f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d3f4:	edc7 7a05 	vstr	s15, [r7, #20]
    MagOffset.y = (int32_t)ans_float;
 800d3f8:	edd7 7a05 	vldr	s15, [r7, #20]
 800d3fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d400:	ee17 2a90 	vmov	r2, s15
 800d404:	4b0f      	ldr	r3, [pc, #60]	; (800d444 <MX_DataLogFusion_Init+0xd8>)
 800d406:	605a      	str	r2, [r3, #4]
    ans_float = (mag_cal_test.hi_bias[2] * FROM_UT50_TO_MGAUSS);
 800d408:	edd7 7a03 	vldr	s15, [r7, #12]
 800d40c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800d440 <MX_DataLogFusion_Init+0xd4>
 800d410:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d414:	edc7 7a05 	vstr	s15, [r7, #20]
    MagOffset.z = (int32_t)ans_float;
 800d418:	edd7 7a05 	vldr	s15, [r7, #20]
 800d41c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d420:	ee17 2a90 	vmov	r2, s15
 800d424:	4b07      	ldr	r3, [pc, #28]	; (800d444 <MX_DataLogFusion_Init+0xd8>)
 800d426:	609a      	str	r2, [r3, #8]

    MagCalStatus = 1;
 800d428:	4b07      	ldr	r3, [pc, #28]	; (800d448 <MX_DataLogFusion_Init+0xdc>)
 800d42a:	2201      	movs	r2, #1
 800d42c:	701a      	strb	r2, [r3, #0]
  }


}
 800d42e:	bf00      	nop
 800d430:	3718      	adds	r7, #24
 800d432:	46bd      	mov	sp, r7
 800d434:	bd80      	pop	{r7, pc}
 800d436:	bf00      	nop
 800d438:	2000d62c 	.word	0x2000d62c
 800d43c:	2000d634 	.word	0x2000d634
 800d440:	43fa0000 	.word	0x43fa0000
 800d444:	20002474 	.word	0x20002474
 800d448:	20002484 	.word	0x20002484

0800d44c <MX_DataLogFusion_Process>:
/**
  * @brief  Process of the DataLogFusion application
  * @retval None
  */
static void MX_DataLogFusion_Process(void)
{
 800d44c:	b580      	push	{r7, lr}
 800d44e:	af00      	add	r7, sp, #0

   /* Reset magnetometer calibration value*/
   MagCalStatus = 0;
 800d450:	4b10      	ldr	r3, [pc, #64]	; (800d494 <MX_DataLogFusion_Process+0x48>)
 800d452:	2200      	movs	r2, #0
 800d454:	701a      	strb	r2, [r3, #0]
   MagOffset.x = 0;
 800d456:	4b10      	ldr	r3, [pc, #64]	; (800d498 <MX_DataLogFusion_Process+0x4c>)
 800d458:	2200      	movs	r2, #0
 800d45a:	601a      	str	r2, [r3, #0]
   MagOffset.y = 0;
 800d45c:	4b0e      	ldr	r3, [pc, #56]	; (800d498 <MX_DataLogFusion_Process+0x4c>)
 800d45e:	2200      	movs	r2, #0
 800d460:	605a      	str	r2, [r3, #4]
   MagOffset.z = 0;
 800d462:	4b0d      	ldr	r3, [pc, #52]	; (800d498 <MX_DataLogFusion_Process+0x4c>)
 800d464:	2200      	movs	r2, #0
 800d466:	609a      	str	r2, [r3, #8]

   /* Enable magnetometer calibration */
   MotionFX_manager_MagCal_start(ALGO_PERIOD);
 800d468:	200a      	movs	r0, #10
 800d46a:	f000 fc98 	bl	800dd9e <MotionFX_manager_MagCal_start>


   RTC_Handler();
 800d46e:	f000 f83d 	bl	800d4ec <RTC_Handler>
   Accelero_Sensor_Handler();
 800d472:	f000 f959 	bl	800d728 <Accelero_Sensor_Handler>
   Gyro_Sensor_Handler();
 800d476:	f000 f979 	bl	800d76c <Gyro_Sensor_Handler>
   Magneto_Sensor_Handler();
 800d47a:	f000 f999 	bl	800d7b0 <Magneto_Sensor_Handler>
   Humidity_Sensor_Handler();
 800d47e:	f000 fa5f 	bl	800d940 <Humidity_Sensor_Handler>
   Temperature_Sensor_Handler();
 800d482:	f000 fa53 	bl	800d92c <Temperature_Sensor_Handler>
   Pressure_Sensor_Handler();
 800d486:	f000 fa47 	bl	800d918 <Pressure_Sensor_Handler>

   /* Sensor Fusion specific part */
   FX_Data_Handler();
 800d48a:	f000 f86d 	bl	800d568 <FX_Data_Handler>

}
 800d48e:	bf00      	nop
 800d490:	bd80      	pop	{r7, pc}
 800d492:	bf00      	nop
 800d494:	20002484 	.word	0x20002484
 800d498:	20002474 	.word	0x20002474

0800d49c <Init_Sensors>:
 * @brief  Initialize all sensors
 * @param  None
 * @retval None
 */
static void Init_Sensors(void)
{
 800d49c:	b580      	push	{r7, lr}
 800d49e:	af00      	add	r7, sp, #0
  BSP_SENSOR_ACC_Init();
 800d4a0:	f000 face 	bl	800da40 <BSP_SENSOR_ACC_Init>
  BSP_SENSOR_GYR_Init();
 800d4a4:	f000 fad4 	bl	800da50 <BSP_SENSOR_GYR_Init>
  BSP_SENSOR_MAG_Init();
 800d4a8:	f000 fada 	bl	800da60 <BSP_SENSOR_MAG_Init>
  BSP_SENSOR_PRESS_Init();
 800d4ac:	f000 fae0 	bl	800da70 <BSP_SENSOR_PRESS_Init>
  BSP_SENSOR_TEMP_Init();
 800d4b0:	f000 fae6 	bl	800da80 <BSP_SENSOR_TEMP_Init>
  BSP_SENSOR_HUM_Init();
 800d4b4:	f000 faec 	bl	800da90 <BSP_SENSOR_HUM_Init>

  /* Set accelerometer:
   *   - ODR >= 100Hz
   *   - FS   = <-2g, 2g>
   */
  BSP_SENSOR_ACC_SetOutputDataRate(100.0f);
 800d4b8:	480b      	ldr	r0, [pc, #44]	; (800d4e8 <Init_Sensors+0x4c>)
 800d4ba:	f000 fb6f 	bl	800db9c <BSP_SENSOR_ACC_SetOutputDataRate>
  BSP_SENSOR_ACC_SetFullScale(2);
 800d4be:	2002      	movs	r0, #2
 800d4c0:	f000 fb86 	bl	800dbd0 <BSP_SENSOR_ACC_SetFullScale>

  /* Set magnetometer:
   *   - ODR >= 100Hz
   *   - FS   = 50Gauss (always) // TODO: Valid for all magnetometers?
   */
  BSP_SENSOR_MAG_SetOutputDataRate(100.0f);
 800d4c4:	4808      	ldr	r0, [pc, #32]	; (800d4e8 <Init_Sensors+0x4c>)
 800d4c6:	f000 fb76 	bl	800dbb6 <BSP_SENSOR_MAG_SetOutputDataRate>


  BSP_SENSOR_ACC_Enable();
 800d4ca:	f000 fae9 	bl	800daa0 <BSP_SENSOR_ACC_Enable>
  BSP_SENSOR_GYR_Enable();
 800d4ce:	f000 faef 	bl	800dab0 <BSP_SENSOR_GYR_Enable>
  BSP_SENSOR_MAG_Enable();
 800d4d2:	f000 faf5 	bl	800dac0 <BSP_SENSOR_MAG_Enable>
  BSP_SENSOR_PRESS_Enable();
 800d4d6:	f000 fafb 	bl	800dad0 <BSP_SENSOR_PRESS_Enable>
  BSP_SENSOR_TEMP_Enable();
 800d4da:	f000 fb01 	bl	800dae0 <BSP_SENSOR_TEMP_Enable>
  BSP_SENSOR_HUM_Enable();
 800d4de:	f000 fb07 	bl	800daf0 <BSP_SENSOR_HUM_Enable>

}
 800d4e2:	bf00      	nop
 800d4e4:	bd80      	pop	{r7, pc}
 800d4e6:	bf00      	nop
 800d4e8:	42c80000 	.word	0x42c80000

0800d4ec <RTC_Handler>:
/**
 * @brief  Handles the time+date getting/sending
 * @retval None
 */
static void RTC_Handler()
{
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b08c      	sub	sp, #48	; 0x30
 800d4f0:	af02      	add	r7, sp, #8
  uint8_t sub_sec = 0;
 800d4f2:	2300      	movs	r3, #0
 800d4f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  RTC_DateTypeDef sdatestructureget;
  RTC_TimeTypeDef stimestructure;
  uint32_t ans_uint32;
  int32_t ans_int32;
  uint32_t RtcSynchPrediv = hrtc.Init.SynchPrediv;
 800d4f8:	4b19      	ldr	r3, [pc, #100]	; (800d560 <RTC_Handler+0x74>)
 800d4fa:	68db      	ldr	r3, [r3, #12]
 800d4fc:	623b      	str	r3, [r7, #32]

  (void)HAL_RTC_GetTime(&hrtc, &stimestructure, FORMAT_BIN);
 800d4fe:	463b      	mov	r3, r7
 800d500:	2200      	movs	r2, #0
 800d502:	4619      	mov	r1, r3
 800d504:	4816      	ldr	r0, [pc, #88]	; (800d560 <RTC_Handler+0x74>)
 800d506:	f7fe fb33 	bl	800bb70 <HAL_RTC_GetTime>
  (void)HAL_RTC_GetDate(&hrtc, &sdatestructureget, FORMAT_BIN);
 800d50a:	f107 0314 	add.w	r3, r7, #20
 800d50e:	2200      	movs	r2, #0
 800d510:	4619      	mov	r1, r3
 800d512:	4813      	ldr	r0, [pc, #76]	; (800d560 <RTC_Handler+0x74>)
 800d514:	f7fe fc31 	bl	800bd7a <HAL_RTC_GetDate>

  /* To be MISRA C-2012 compliant the original calculation:
     sub_sec = ((((((int)RtcSynchPrediv) - ((int)stimestructure.SubSeconds)) * 100) / (RtcSynchPrediv + 1)) & 0xFF);
     has been split to separate expressions */
  ans_int32 = (RtcSynchPrediv - (int32_t)stimestructure.SubSeconds) * 100;
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	6a3a      	ldr	r2, [r7, #32]
 800d51c:	1ad3      	subs	r3, r2, r3
 800d51e:	2264      	movs	r2, #100	; 0x64
 800d520:	fb02 f303 	mul.w	r3, r2, r3
 800d524:	61fb      	str	r3, [r7, #28]
  ans_int32 /= RtcSynchPrediv + 1;
 800d526:	69fa      	ldr	r2, [r7, #28]
 800d528:	6a3b      	ldr	r3, [r7, #32]
 800d52a:	3301      	adds	r3, #1
 800d52c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d530:	61fb      	str	r3, [r7, #28]
  ans_uint32 = (uint32_t)ans_int32 & 0xFFU;
 800d532:	69fb      	ldr	r3, [r7, #28]
 800d534:	b2db      	uxtb	r3, r3
 800d536:	61bb      	str	r3, [r7, #24]
  sub_sec = (uint8_t)ans_uint32;
 800d538:	69bb      	ldr	r3, [r7, #24]
 800d53a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  printf("Hour: %hu, Minutes: %hu Seconds: %hu, SubSeconds: %hu\r\n",
			(uint8_t) stimestructure.Hours, (uint8_t) stimestructure.Minutes,
 800d53e:	783b      	ldrb	r3, [r7, #0]
  printf("Hour: %hu, Minutes: %hu Seconds: %hu, SubSeconds: %hu\r\n",
 800d540:	4619      	mov	r1, r3
			(uint8_t) stimestructure.Hours, (uint8_t) stimestructure.Minutes,
 800d542:	787b      	ldrb	r3, [r7, #1]
  printf("Hour: %hu, Minutes: %hu Seconds: %hu, SubSeconds: %hu\r\n",
 800d544:	461a      	mov	r2, r3
			(uint8_t) stimestructure.Seconds, sub_sec);
 800d546:	78bb      	ldrb	r3, [r7, #2]
  printf("Hour: %hu, Minutes: %hu Seconds: %hu, SubSeconds: %hu\r\n",
 800d548:	4618      	mov	r0, r3
 800d54a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d54e:	9300      	str	r3, [sp, #0]
 800d550:	4603      	mov	r3, r0
 800d552:	4804      	ldr	r0, [pc, #16]	; (800d564 <RTC_Handler+0x78>)
 800d554:	f00c fd6c 	bl	801a030 <iprintf>
}
 800d558:	bf00      	nop
 800d55a:	3728      	adds	r7, #40	; 0x28
 800d55c:	46bd      	mov	sp, r7
 800d55e:	bd80      	pop	{r7, pc}
 800d560:	2000d4b8 	.word	0x2000d4b8
 800d564:	0801cf3c 	.word	0x0801cf3c

0800d568 <FX_Data_Handler>:
 * @brief  Sensor Fusion data handler
 * @param  Msg the Sensor Fusion data part of the stream
 * @retval None
 */
static void FX_Data_Handler()
{
 800d568:	b580      	push	{r7, lr}
 800d56a:	b0aa      	sub	sp, #168	; 0xa8
 800d56c:	af00      	add	r7, sp, #0
  uint32_t elapsed_time_us = 0U;
 800d56e:	2300      	movs	r3, #0
 800d570:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  MFX_input_t data_in;
  MFX_input_t *pdata_in = &data_in;
 800d574:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800d578:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  MFX_output_t data_out;
  MFX_output_t *pdata_out = &data_out;
 800d57c:	463b      	mov	r3, r7
 800d57e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c


  /* Convert angular velocity from [mdps] to [dps] */
  data_in.gyro[0] = (float)GyrValue.x * FROM_MDPS_TO_DPS;
 800d582:	4b60      	ldr	r3, [pc, #384]	; (800d704 <FX_Data_Handler+0x19c>)
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	ee07 3a90 	vmov	s15, r3
 800d58a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d58e:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 800d708 <FX_Data_Handler+0x1a0>
 800d592:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d596:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
  data_in.gyro[1] = (float)GyrValue.y * FROM_MDPS_TO_DPS;
 800d59a:	4b5a      	ldr	r3, [pc, #360]	; (800d704 <FX_Data_Handler+0x19c>)
 800d59c:	685b      	ldr	r3, [r3, #4]
 800d59e:	ee07 3a90 	vmov	s15, r3
 800d5a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d5a6:	ed9f 7a58 	vldr	s14, [pc, #352]	; 800d708 <FX_Data_Handler+0x1a0>
 800d5aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d5ae:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
  data_in.gyro[2] = (float)GyrValue.z * FROM_MDPS_TO_DPS;
 800d5b2:	4b54      	ldr	r3, [pc, #336]	; (800d704 <FX_Data_Handler+0x19c>)
 800d5b4:	689b      	ldr	r3, [r3, #8]
 800d5b6:	ee07 3a90 	vmov	s15, r3
 800d5ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d5be:	ed9f 7a52 	vldr	s14, [pc, #328]	; 800d708 <FX_Data_Handler+0x1a0>
 800d5c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d5c6:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98

  /* Convert acceleration from [mg] to [g] */
  data_in.acc[0] = (float)AccValue.x * FROM_MG_TO_G;
 800d5ca:	4b50      	ldr	r3, [pc, #320]	; (800d70c <FX_Data_Handler+0x1a4>)
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	ee07 3a90 	vmov	s15, r3
 800d5d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d5d6:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800d708 <FX_Data_Handler+0x1a0>
 800d5da:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d5de:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
  data_in.acc[1] = (float)AccValue.y * FROM_MG_TO_G;
 800d5e2:	4b4a      	ldr	r3, [pc, #296]	; (800d70c <FX_Data_Handler+0x1a4>)
 800d5e4:	685b      	ldr	r3, [r3, #4]
 800d5e6:	ee07 3a90 	vmov	s15, r3
 800d5ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d5ee:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800d708 <FX_Data_Handler+0x1a0>
 800d5f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d5f6:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
  data_in.acc[2] = (float)AccValue.z * FROM_MG_TO_G;
 800d5fa:	4b44      	ldr	r3, [pc, #272]	; (800d70c <FX_Data_Handler+0x1a4>)
 800d5fc:	689b      	ldr	r3, [r3, #8]
 800d5fe:	ee07 3a90 	vmov	s15, r3
 800d602:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d606:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800d708 <FX_Data_Handler+0x1a0>
 800d60a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d60e:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c

  /* Convert magnetic field intensity from [mGauss] to [uT / 50] */
  data_in.mag[0] = (float)MagValue.x * FROM_MGAUSS_TO_UT50;
 800d612:	4b3f      	ldr	r3, [pc, #252]	; (800d710 <FX_Data_Handler+0x1a8>)
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	ee07 3a90 	vmov	s15, r3
 800d61a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d61e:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 800d714 <FX_Data_Handler+0x1ac>
 800d622:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d626:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
  data_in.mag[1] = (float)MagValue.y * FROM_MGAUSS_TO_UT50;
 800d62a:	4b39      	ldr	r3, [pc, #228]	; (800d710 <FX_Data_Handler+0x1a8>)
 800d62c:	685b      	ldr	r3, [r3, #4]
 800d62e:	ee07 3a90 	vmov	s15, r3
 800d632:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d636:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800d714 <FX_Data_Handler+0x1ac>
 800d63a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d63e:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
  data_in.mag[2] = (float)MagValue.z * FROM_MGAUSS_TO_UT50;
 800d642:	4b33      	ldr	r3, [pc, #204]	; (800d710 <FX_Data_Handler+0x1a8>)
 800d644:	689b      	ldr	r3, [r3, #8]
 800d646:	ee07 3a90 	vmov	s15, r3
 800d64a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d64e:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800d714 <FX_Data_Handler+0x1ac>
 800d652:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d656:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80

  /* Run Sensor Fusion algorithm */
  BSP_LED_On(LED2);
 800d65a:	2000      	movs	r0, #0
 800d65c:	f7fa fcf2 	bl	8008044 <BSP_LED_On>
  DWT_Start();
 800d660:	f000 f9ac 	bl	800d9bc <DWT_Start>
  MotionFX_manager_run(pdata_in, pdata_out, MOTION_FX_ENGINE_DELTATIME);
 800d664:	4a2c      	ldr	r2, [pc, #176]	; (800d718 <FX_Data_Handler+0x1b0>)
 800d666:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800d66a:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800d66e:	f000 fb51 	bl	800dd14 <MotionFX_manager_run>
  elapsed_time_us = DWT_Stop();
 800d672:	f000 f9bd 	bl	800d9f0 <DWT_Stop>
 800d676:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
  BSP_LED_Off(LED2);
 800d67a:	2000      	movs	r0, #0
 800d67c:	f7fa fcf8 	bl	8008070 <BSP_LED_Off>

  if (Enabled6X == 1U)
 800d680:	4b26      	ldr	r3, [pc, #152]	; (800d71c <FX_Data_Handler+0x1b4>)
 800d682:	781b      	ldrb	r3, [r3, #0]
 800d684:	2b01      	cmp	r3, #1
 800d686:	d118      	bne.n	800d6ba <FX_Data_Handler+0x152>
  {
	  q_axes.AXIS_Z = data_out.rotation_6X[0];
 800d688:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800d68c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d690:	ee17 2a90 	vmov	r2, s15
 800d694:	4b22      	ldr	r3, [pc, #136]	; (800d720 <FX_Data_Handler+0x1b8>)
 800d696:	609a      	str	r2, [r3, #8]
	  q_axes.AXIS_Y = data_out.rotation_6X[1];
 800d698:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800d69c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d6a0:	ee17 2a90 	vmov	r2, s15
 800d6a4:	4b1e      	ldr	r3, [pc, #120]	; (800d720 <FX_Data_Handler+0x1b8>)
 800d6a6:	605a      	str	r2, [r3, #4]
	  q_axes.AXIS_X = data_out.rotation_6X[2];
 800d6a8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800d6ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d6b0:	ee17 2a90 	vmov	r2, s15
 800d6b4:	4b1a      	ldr	r3, [pc, #104]	; (800d720 <FX_Data_Handler+0x1b8>)
 800d6b6:	601a      	str	r2, [r3, #0]
 800d6b8:	e017      	b.n	800d6ea <FX_Data_Handler+0x182>
  }
  else
  {
	  q_axes.AXIS_Z = data_out.rotation_9X[0];
 800d6ba:	edd7 7a00 	vldr	s15, [r7]
 800d6be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d6c2:	ee17 2a90 	vmov	r2, s15
 800d6c6:	4b16      	ldr	r3, [pc, #88]	; (800d720 <FX_Data_Handler+0x1b8>)
 800d6c8:	609a      	str	r2, [r3, #8]
	  q_axes.AXIS_Y = data_out.rotation_9X[1];
 800d6ca:	edd7 7a01 	vldr	s15, [r7, #4]
 800d6ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d6d2:	ee17 2a90 	vmov	r2, s15
 800d6d6:	4b12      	ldr	r3, [pc, #72]	; (800d720 <FX_Data_Handler+0x1b8>)
 800d6d8:	605a      	str	r2, [r3, #4]
	  q_axes.AXIS_X = data_out.rotation_9X[2];
 800d6da:	edd7 7a02 	vldr	s15, [r7, #8]
 800d6de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d6e2:	ee17 2a90 	vmov	r2, s15
 800d6e6:	4b0e      	ldr	r3, [pc, #56]	; (800d720 <FX_Data_Handler+0x1b8>)
 800d6e8:	601a      	str	r2, [r3, #0]
  }

	printf("qx: %ld, qy: %ld, qz: %ld\r\n", q_axes.AXIS_X, q_axes.AXIS_Y,
 800d6ea:	4b0d      	ldr	r3, [pc, #52]	; (800d720 <FX_Data_Handler+0x1b8>)
 800d6ec:	6819      	ldr	r1, [r3, #0]
 800d6ee:	4b0c      	ldr	r3, [pc, #48]	; (800d720 <FX_Data_Handler+0x1b8>)
 800d6f0:	685a      	ldr	r2, [r3, #4]
 800d6f2:	4b0b      	ldr	r3, [pc, #44]	; (800d720 <FX_Data_Handler+0x1b8>)
 800d6f4:	689b      	ldr	r3, [r3, #8]
 800d6f6:	480b      	ldr	r0, [pc, #44]	; (800d724 <FX_Data_Handler+0x1bc>)
 800d6f8:	f00c fc9a 	bl	801a030 <iprintf>
			q_axes.AXIS_Z);

  UNUSED(elapsed_time_us);

}
 800d6fc:	bf00      	nop
 800d6fe:	37a8      	adds	r7, #168	; 0xa8
 800d700:	46bd      	mov	sp, r7
 800d702:	bd80      	pop	{r7, pc}
 800d704:	2000245c 	.word	0x2000245c
 800d708:	3a83126f 	.word	0x3a83126f
 800d70c:	20002450 	.word	0x20002450
 800d710:	20002468 	.word	0x20002468
 800d714:	3b03126f 	.word	0x3b03126f
 800d718:	3c23d70a 	.word	0x3c23d70a
 800d71c:	20001341 	.word	0x20001341
 800d720:	200021ec 	.word	0x200021ec
 800d724:	0801cf74 	.word	0x0801cf74

0800d728 <Accelero_Sensor_Handler>:

/**
 * @brief  Handles the ACC axes data getting/sending
 * @retval None
 */
static void Accelero_Sensor_Handler() {
 800d728:	b580      	push	{r7, lr}
 800d72a:	af00      	add	r7, sp, #0
	BSP_SENSOR_ACC_GetAxes(&AccValue);
 800d72c:	480c      	ldr	r0, [pc, #48]	; (800d760 <Accelero_Sensor_Handler+0x38>)
 800d72e:	f000 f9e7 	bl	800db00 <BSP_SENSOR_ACC_GetAxes>

	x_axes.AXIS_X = AccValue.x;
 800d732:	4b0b      	ldr	r3, [pc, #44]	; (800d760 <Accelero_Sensor_Handler+0x38>)
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	4a0b      	ldr	r2, [pc, #44]	; (800d764 <Accelero_Sensor_Handler+0x3c>)
 800d738:	6013      	str	r3, [r2, #0]
	x_axes.AXIS_Y = AccValue.y;
 800d73a:	4b09      	ldr	r3, [pc, #36]	; (800d760 <Accelero_Sensor_Handler+0x38>)
 800d73c:	685b      	ldr	r3, [r3, #4]
 800d73e:	4a09      	ldr	r2, [pc, #36]	; (800d764 <Accelero_Sensor_Handler+0x3c>)
 800d740:	6053      	str	r3, [r2, #4]
	x_axes.AXIS_Z = AccValue.z;
 800d742:	4b07      	ldr	r3, [pc, #28]	; (800d760 <Accelero_Sensor_Handler+0x38>)
 800d744:	689b      	ldr	r3, [r3, #8]
 800d746:	4a07      	ldr	r2, [pc, #28]	; (800d764 <Accelero_Sensor_Handler+0x3c>)
 800d748:	6093      	str	r3, [r2, #8]
	printf("ax: %ld, ay: %ld, az: %ld\r\n", x_axes.AXIS_X,
 800d74a:	4b06      	ldr	r3, [pc, #24]	; (800d764 <Accelero_Sensor_Handler+0x3c>)
 800d74c:	6819      	ldr	r1, [r3, #0]
 800d74e:	4b05      	ldr	r3, [pc, #20]	; (800d764 <Accelero_Sensor_Handler+0x3c>)
 800d750:	685a      	ldr	r2, [r3, #4]
 800d752:	4b04      	ldr	r3, [pc, #16]	; (800d764 <Accelero_Sensor_Handler+0x3c>)
 800d754:	689b      	ldr	r3, [r3, #8]
 800d756:	4804      	ldr	r0, [pc, #16]	; (800d768 <Accelero_Sensor_Handler+0x40>)
 800d758:	f00c fc6a 	bl	801a030 <iprintf>
			x_axes.AXIS_Y, x_axes.AXIS_Z);

}
 800d75c:	bf00      	nop
 800d75e:	bd80      	pop	{r7, pc}
 800d760:	20002450 	.word	0x20002450
 800d764:	200021c8 	.word	0x200021c8
 800d768:	0801cf90 	.word	0x0801cf90

0800d76c <Gyro_Sensor_Handler>:

/**
 * @brief  Handles the GYR axes data getting/sending
 * @retval None
 */
static void Gyro_Sensor_Handler() {
 800d76c:	b580      	push	{r7, lr}
 800d76e:	af00      	add	r7, sp, #0
	BSP_SENSOR_GYR_GetAxes(&GyrValue);
 800d770:	480c      	ldr	r0, [pc, #48]	; (800d7a4 <Gyro_Sensor_Handler+0x38>)
 800d772:	f000 f9d2 	bl	800db1a <BSP_SENSOR_GYR_GetAxes>
	g_axes.AXIS_X = GyrValue.x;
 800d776:	4b0b      	ldr	r3, [pc, #44]	; (800d7a4 <Gyro_Sensor_Handler+0x38>)
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	4a0b      	ldr	r2, [pc, #44]	; (800d7a8 <Gyro_Sensor_Handler+0x3c>)
 800d77c:	6013      	str	r3, [r2, #0]
	g_axes.AXIS_Y = GyrValue.y;
 800d77e:	4b09      	ldr	r3, [pc, #36]	; (800d7a4 <Gyro_Sensor_Handler+0x38>)
 800d780:	685b      	ldr	r3, [r3, #4]
 800d782:	4a09      	ldr	r2, [pc, #36]	; (800d7a8 <Gyro_Sensor_Handler+0x3c>)
 800d784:	6053      	str	r3, [r2, #4]
	g_axes.AXIS_Z = GyrValue.z;
 800d786:	4b07      	ldr	r3, [pc, #28]	; (800d7a4 <Gyro_Sensor_Handler+0x38>)
 800d788:	689b      	ldr	r3, [r3, #8]
 800d78a:	4a07      	ldr	r2, [pc, #28]	; (800d7a8 <Gyro_Sensor_Handler+0x3c>)
 800d78c:	6093      	str	r3, [r2, #8]
	printf("gx: %ld, gy: %ld, gz: %ld\r\n", g_axes.AXIS_X, g_axes.AXIS_Y,
 800d78e:	4b06      	ldr	r3, [pc, #24]	; (800d7a8 <Gyro_Sensor_Handler+0x3c>)
 800d790:	6819      	ldr	r1, [r3, #0]
 800d792:	4b05      	ldr	r3, [pc, #20]	; (800d7a8 <Gyro_Sensor_Handler+0x3c>)
 800d794:	685a      	ldr	r2, [r3, #4]
 800d796:	4b04      	ldr	r3, [pc, #16]	; (800d7a8 <Gyro_Sensor_Handler+0x3c>)
 800d798:	689b      	ldr	r3, [r3, #8]
 800d79a:	4804      	ldr	r0, [pc, #16]	; (800d7ac <Gyro_Sensor_Handler+0x40>)
 800d79c:	f00c fc48 	bl	801a030 <iprintf>
			g_axes.AXIS_Z);
}
 800d7a0:	bf00      	nop
 800d7a2:	bd80      	pop	{r7, pc}
 800d7a4:	2000245c 	.word	0x2000245c
 800d7a8:	200021d4 	.word	0x200021d4
 800d7ac:	0801cfac 	.word	0x0801cfac

0800d7b0 <Magneto_Sensor_Handler>:
/**
 * @brief  Handles the MAG axes data getting/sending
 * @retval None
 */
static void Magneto_Sensor_Handler()
{
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b08a      	sub	sp, #40	; 0x28
 800d7b4:	af00      	add	r7, sp, #0
  float ans_float;
  MFX_MagCal_input_t mag_data_in;
  MFX_MagCal_output_t mag_data_out;

  BSP_SENSOR_MAG_GetAxes(&MagValue);
 800d7b6:	4850      	ldr	r0, [pc, #320]	; (800d8f8 <Magneto_Sensor_Handler+0x148>)
 800d7b8:	f000 f9bc 	bl	800db34 <BSP_SENSOR_MAG_GetAxes>

  if (MagCalStatus == 0U)
 800d7bc:	4b4f      	ldr	r3, [pc, #316]	; (800d8fc <Magneto_Sensor_Handler+0x14c>)
 800d7be:	781b      	ldrb	r3, [r3, #0]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d16b      	bne.n	800d89c <Magneto_Sensor_Handler+0xec>
  {
	  mag_data_in.mag[0] = (float)MagValue.x * FROM_MGAUSS_TO_UT50;
 800d7c4:	4b4c      	ldr	r3, [pc, #304]	; (800d8f8 <Magneto_Sensor_Handler+0x148>)
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	ee07 3a90 	vmov	s15, r3
 800d7cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d7d0:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800d900 <Magneto_Sensor_Handler+0x150>
 800d7d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d7d8:	edc7 7a05 	vstr	s15, [r7, #20]
      mag_data_in.mag[1] = (float)MagValue.y * FROM_MGAUSS_TO_UT50;
 800d7dc:	4b46      	ldr	r3, [pc, #280]	; (800d8f8 <Magneto_Sensor_Handler+0x148>)
 800d7de:	685b      	ldr	r3, [r3, #4]
 800d7e0:	ee07 3a90 	vmov	s15, r3
 800d7e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d7e8:	ed9f 7a45 	vldr	s14, [pc, #276]	; 800d900 <Magneto_Sensor_Handler+0x150>
 800d7ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d7f0:	edc7 7a06 	vstr	s15, [r7, #24]
      mag_data_in.mag[2] = (float)MagValue.z * FROM_MGAUSS_TO_UT50;
 800d7f4:	4b40      	ldr	r3, [pc, #256]	; (800d8f8 <Magneto_Sensor_Handler+0x148>)
 800d7f6:	689b      	ldr	r3, [r3, #8]
 800d7f8:	ee07 3a90 	vmov	s15, r3
 800d7fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d800:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 800d900 <Magneto_Sensor_Handler+0x150>
 800d804:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d808:	edc7 7a07 	vstr	s15, [r7, #28]

      mag_data_in.time_stamp = (int)MagTimeStamp;
 800d80c:	4b3d      	ldr	r3, [pc, #244]	; (800d904 <Magneto_Sensor_Handler+0x154>)
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	623b      	str	r3, [r7, #32]
      MagTimeStamp += (uint32_t)ALGO_PERIOD;
 800d812:	4b3c      	ldr	r3, [pc, #240]	; (800d904 <Magneto_Sensor_Handler+0x154>)
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	330a      	adds	r3, #10
 800d818:	4a3a      	ldr	r2, [pc, #232]	; (800d904 <Magneto_Sensor_Handler+0x154>)
 800d81a:	6013      	str	r3, [r2, #0]

      MotionFX_manager_MagCal_run(&mag_data_in, &mag_data_out);
 800d81c:	1d3a      	adds	r2, r7, #4
 800d81e:	f107 0314 	add.w	r3, r7, #20
 800d822:	4611      	mov	r1, r2
 800d824:	4618      	mov	r0, r3
 800d826:	f000 faab 	bl	800dd80 <MotionFX_manager_MagCal_run>

      if (mag_data_out.cal_quality == MFX_MAGCALGOOD)
 800d82a:	7c3b      	ldrb	r3, [r7, #16]
 800d82c:	2b03      	cmp	r3, #3
 800d82e:	d135      	bne.n	800d89c <Magneto_Sensor_Handler+0xec>
      {
        MagCalStatus = 1;
 800d830:	4b32      	ldr	r3, [pc, #200]	; (800d8fc <Magneto_Sensor_Handler+0x14c>)
 800d832:	2201      	movs	r2, #1
 800d834:	701a      	strb	r2, [r3, #0]

        ans_float = (mag_data_out.hi_bias[0] * FROM_UT50_TO_MGAUSS);
 800d836:	edd7 7a01 	vldr	s15, [r7, #4]
 800d83a:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800d908 <Magneto_Sensor_Handler+0x158>
 800d83e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d842:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        MagOffset.x = (int32_t)ans_float;
 800d846:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800d84a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d84e:	ee17 2a90 	vmov	r2, s15
 800d852:	4b2e      	ldr	r3, [pc, #184]	; (800d90c <Magneto_Sensor_Handler+0x15c>)
 800d854:	601a      	str	r2, [r3, #0]
        ans_float = (mag_data_out.hi_bias[1] * FROM_UT50_TO_MGAUSS);
 800d856:	edd7 7a02 	vldr	s15, [r7, #8]
 800d85a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800d908 <Magneto_Sensor_Handler+0x158>
 800d85e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d862:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        MagOffset.y = (int32_t)ans_float;
 800d866:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800d86a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d86e:	ee17 2a90 	vmov	r2, s15
 800d872:	4b26      	ldr	r3, [pc, #152]	; (800d90c <Magneto_Sensor_Handler+0x15c>)
 800d874:	605a      	str	r2, [r3, #4]
        ans_float = (mag_data_out.hi_bias[2] * FROM_UT50_TO_MGAUSS);
 800d876:	edd7 7a03 	vldr	s15, [r7, #12]
 800d87a:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800d908 <Magneto_Sensor_Handler+0x158>
 800d87e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d882:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        MagOffset.z = (int32_t)ans_float;
 800d886:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800d88a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d88e:	ee17 2a90 	vmov	r2, s15
 800d892:	4b1e      	ldr	r3, [pc, #120]	; (800d90c <Magneto_Sensor_Handler+0x15c>)
 800d894:	609a      	str	r2, [r3, #8]

        /* Disable magnetometer calibration */
        MotionFX_manager_MagCal_stop(ALGO_PERIOD);
 800d896:	200a      	movs	r0, #10
 800d898:	f000 fa8d 	bl	800ddb6 <MotionFX_manager_MagCal_stop>
      }
    }

    MagValue.x = (int32_t)(MagValue.x - MagOffset.x);
 800d89c:	4b16      	ldr	r3, [pc, #88]	; (800d8f8 <Magneto_Sensor_Handler+0x148>)
 800d89e:	681a      	ldr	r2, [r3, #0]
 800d8a0:	4b1a      	ldr	r3, [pc, #104]	; (800d90c <Magneto_Sensor_Handler+0x15c>)
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	1ad3      	subs	r3, r2, r3
 800d8a6:	4a14      	ldr	r2, [pc, #80]	; (800d8f8 <Magneto_Sensor_Handler+0x148>)
 800d8a8:	6013      	str	r3, [r2, #0]
    MagValue.y = (int32_t)(MagValue.y - MagOffset.y);
 800d8aa:	4b13      	ldr	r3, [pc, #76]	; (800d8f8 <Magneto_Sensor_Handler+0x148>)
 800d8ac:	685a      	ldr	r2, [r3, #4]
 800d8ae:	4b17      	ldr	r3, [pc, #92]	; (800d90c <Magneto_Sensor_Handler+0x15c>)
 800d8b0:	685b      	ldr	r3, [r3, #4]
 800d8b2:	1ad3      	subs	r3, r2, r3
 800d8b4:	4a10      	ldr	r2, [pc, #64]	; (800d8f8 <Magneto_Sensor_Handler+0x148>)
 800d8b6:	6053      	str	r3, [r2, #4]
    MagValue.z = (int32_t)(MagValue.z - MagOffset.z);
 800d8b8:	4b0f      	ldr	r3, [pc, #60]	; (800d8f8 <Magneto_Sensor_Handler+0x148>)
 800d8ba:	689a      	ldr	r2, [r3, #8]
 800d8bc:	4b13      	ldr	r3, [pc, #76]	; (800d90c <Magneto_Sensor_Handler+0x15c>)
 800d8be:	689b      	ldr	r3, [r3, #8]
 800d8c0:	1ad3      	subs	r3, r2, r3
 800d8c2:	4a0d      	ldr	r2, [pc, #52]	; (800d8f8 <Magneto_Sensor_Handler+0x148>)
 800d8c4:	6093      	str	r3, [r2, #8]

	m_axes.AXIS_X = MagValue.x;
 800d8c6:	4b0c      	ldr	r3, [pc, #48]	; (800d8f8 <Magneto_Sensor_Handler+0x148>)
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	4a11      	ldr	r2, [pc, #68]	; (800d910 <Magneto_Sensor_Handler+0x160>)
 800d8cc:	6013      	str	r3, [r2, #0]
	m_axes.AXIS_Y = MagValue.y;
 800d8ce:	4b0a      	ldr	r3, [pc, #40]	; (800d8f8 <Magneto_Sensor_Handler+0x148>)
 800d8d0:	685b      	ldr	r3, [r3, #4]
 800d8d2:	4a0f      	ldr	r2, [pc, #60]	; (800d910 <Magneto_Sensor_Handler+0x160>)
 800d8d4:	6053      	str	r3, [r2, #4]
	m_axes.AXIS_Z = MagValue.z;
 800d8d6:	4b08      	ldr	r3, [pc, #32]	; (800d8f8 <Magneto_Sensor_Handler+0x148>)
 800d8d8:	689b      	ldr	r3, [r3, #8]
 800d8da:	4a0d      	ldr	r2, [pc, #52]	; (800d910 <Magneto_Sensor_Handler+0x160>)
 800d8dc:	6093      	str	r3, [r2, #8]
	printf("mx: %ld, my: %ld, mz: %ld\r\n", m_axes.AXIS_X, m_axes.AXIS_Y,
 800d8de:	4b0c      	ldr	r3, [pc, #48]	; (800d910 <Magneto_Sensor_Handler+0x160>)
 800d8e0:	6819      	ldr	r1, [r3, #0]
 800d8e2:	4b0b      	ldr	r3, [pc, #44]	; (800d910 <Magneto_Sensor_Handler+0x160>)
 800d8e4:	685a      	ldr	r2, [r3, #4]
 800d8e6:	4b0a      	ldr	r3, [pc, #40]	; (800d910 <Magneto_Sensor_Handler+0x160>)
 800d8e8:	689b      	ldr	r3, [r3, #8]
 800d8ea:	480a      	ldr	r0, [pc, #40]	; (800d914 <Magneto_Sensor_Handler+0x164>)
 800d8ec:	f00c fba0 	bl	801a030 <iprintf>
			m_axes.AXIS_Z);

}
 800d8f0:	bf00      	nop
 800d8f2:	3728      	adds	r7, #40	; 0x28
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	bd80      	pop	{r7, pc}
 800d8f8:	20002468 	.word	0x20002468
 800d8fc:	20002484 	.word	0x20002484
 800d900:	3b03126f 	.word	0x3b03126f
 800d904:	20002480 	.word	0x20002480
 800d908:	43fa0000 	.word	0x43fa0000
 800d90c:	20002474 	.word	0x20002474
 800d910:	200021e0 	.word	0x200021e0
 800d914:	0801cfc8 	.word	0x0801cfc8

0800d918 <Pressure_Sensor_Handler>:
/**
 * @brief  Handles the PRESS sensor data getting/sending.
 * @retval None
 */
static void Pressure_Sensor_Handler()
{
 800d918:	b580      	push	{r7, lr}
 800d91a:	af00      	add	r7, sp, #0
  BSP_SENSOR_PRESS_GetValue(&mems_pressure);
 800d91c:	4802      	ldr	r0, [pc, #8]	; (800d928 <Pressure_Sensor_Handler+0x10>)
 800d91e:	f000 f916 	bl	800db4e <BSP_SENSOR_PRESS_GetValue>
}
 800d922:	bf00      	nop
 800d924:	bd80      	pop	{r7, pc}
 800d926:	bf00      	nop
 800d928:	2000d630 	.word	0x2000d630

0800d92c <Temperature_Sensor_Handler>:
/**
 * @brief  Handles the TEMP axes data getting/sending
 * @retval None
 */
static void Temperature_Sensor_Handler()
{
 800d92c:	b580      	push	{r7, lr}
 800d92e:	af00      	add	r7, sp, #0
  BSP_SENSOR_TEMP_GetValue(&mems_temperature);
 800d930:	4802      	ldr	r0, [pc, #8]	; (800d93c <Temperature_Sensor_Handler+0x10>)
 800d932:	f000 f919 	bl	800db68 <BSP_SENSOR_TEMP_GetValue>
}
 800d936:	bf00      	nop
 800d938:	bd80      	pop	{r7, pc}
 800d93a:	bf00      	nop
 800d93c:	2000d628 	.word	0x2000d628

0800d940 <Humidity_Sensor_Handler>:
/**
 * @brief  Handles the HUM axes data getting/sending
 * @retval None
 */
static void Humidity_Sensor_Handler()
{
 800d940:	b580      	push	{r7, lr}
 800d942:	af00      	add	r7, sp, #0
  BSP_SENSOR_HUM_GetValue(&mems_humidity);
 800d944:	4802      	ldr	r0, [pc, #8]	; (800d950 <Humidity_Sensor_Handler+0x10>)
 800d946:	f000 f91c 	bl	800db82 <BSP_SENSOR_HUM_GetValue>
}
 800d94a:	bf00      	nop
 800d94c:	bd80      	pop	{r7, pc}
 800d94e:	bf00      	nop
 800d950:	2000d624 	.word	0x2000d624

0800d954 <TIM_Config>:
 * @brief  Timer configuration
 * @param  Freq the desired Timer frequency
 * @retval None
 */
static void TIM_Config(uint32_t Freq)
{
 800d954:	b580      	push	{r7, lr}
 800d956:	b086      	sub	sp, #24
 800d958:	af00      	add	r7, sp, #0
 800d95a:	6078      	str	r0, [r7, #4]
  const uint32_t tim_counter_clock = 2000; /* TIM counter clock 2 kHz */
 800d95c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800d960:	617b      	str	r3, [r7, #20]
  uint32_t prescaler_value = (uint32_t)((SystemCoreClock / tim_counter_clock) - 1);
 800d962:	4b14      	ldr	r3, [pc, #80]	; (800d9b4 <TIM_Config+0x60>)
 800d964:	681a      	ldr	r2, [r3, #0]
 800d966:	697b      	ldr	r3, [r7, #20]
 800d968:	fbb2 f3f3 	udiv	r3, r2, r3
 800d96c:	3b01      	subs	r3, #1
 800d96e:	613b      	str	r3, [r7, #16]
  uint32_t period = (tim_counter_clock / Freq) - 1;
 800d970:	697a      	ldr	r2, [r7, #20]
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	fbb2 f3f3 	udiv	r3, r2, r3
 800d978:	3b01      	subs	r3, #1
 800d97a:	60fb      	str	r3, [r7, #12]

  BSP_IP_TIM_Handle.Init.Prescaler         = prescaler_value;
 800d97c:	4a0e      	ldr	r2, [pc, #56]	; (800d9b8 <TIM_Config+0x64>)
 800d97e:	693b      	ldr	r3, [r7, #16]
 800d980:	6053      	str	r3, [r2, #4]
  BSP_IP_TIM_Handle.Init.CounterMode       = TIM_COUNTERMODE_UP;
 800d982:	4b0d      	ldr	r3, [pc, #52]	; (800d9b8 <TIM_Config+0x64>)
 800d984:	2200      	movs	r2, #0
 800d986:	609a      	str	r2, [r3, #8]
  BSP_IP_TIM_Handle.Init.Period            = period;
 800d988:	4a0b      	ldr	r2, [pc, #44]	; (800d9b8 <TIM_Config+0x64>)
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	60d3      	str	r3, [r2, #12]
  BSP_IP_TIM_Handle.Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
 800d98e:	4b0a      	ldr	r3, [pc, #40]	; (800d9b8 <TIM_Config+0x64>)
 800d990:	2200      	movs	r2, #0
 800d992:	611a      	str	r2, [r3, #16]
  BSP_IP_TIM_Handle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d994:	4b08      	ldr	r3, [pc, #32]	; (800d9b8 <TIM_Config+0x64>)
 800d996:	2200      	movs	r2, #0
 800d998:	619a      	str	r2, [r3, #24]

  if (HAL_TIM_Base_Init(&BSP_IP_TIM_Handle) != HAL_OK)
 800d99a:	4807      	ldr	r0, [pc, #28]	; (800d9b8 <TIM_Config+0x64>)
 800d99c:	f7fe fd96 	bl	800c4cc <HAL_TIM_Base_Init>
 800d9a0:	4603      	mov	r3, r0
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d001      	beq.n	800d9aa <TIM_Config+0x56>
  {
    Error_Handler();
 800d9a6:	f7f4 fe99 	bl	80026dc <Error_Handler>
  }
}
 800d9aa:	bf00      	nop
 800d9ac:	3718      	adds	r7, #24
 800d9ae:	46bd      	mov	sp, r7
 800d9b0:	bd80      	pop	{r7, pc}
 800d9b2:	bf00      	nop
 800d9b4:	200011cc 	.word	0x200011cc
 800d9b8:	200027f0 	.word	0x200027f0

0800d9bc <DWT_Start>:
 * @brief  Start counting clock cycles
 * @param  None
 * @retval None
 */
static void DWT_Start(void)
{
 800d9bc:	b480      	push	{r7}
 800d9be:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800d9c0:	4b09      	ldr	r3, [pc, #36]	; (800d9e8 <DWT_Start+0x2c>)
 800d9c2:	68db      	ldr	r3, [r3, #12]
 800d9c4:	4a08      	ldr	r2, [pc, #32]	; (800d9e8 <DWT_Start+0x2c>)
 800d9c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d9ca:	60d3      	str	r3, [r2, #12]
  DWT->CYCCNT = 0; /* Clear count of clock cycles */
 800d9cc:	4b07      	ldr	r3, [pc, #28]	; (800d9ec <DWT_Start+0x30>)
 800d9ce:	2200      	movs	r2, #0
 800d9d0:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= 1;  /* Enable counter */
 800d9d2:	4b06      	ldr	r3, [pc, #24]	; (800d9ec <DWT_Start+0x30>)
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	4a05      	ldr	r2, [pc, #20]	; (800d9ec <DWT_Start+0x30>)
 800d9d8:	f043 0301 	orr.w	r3, r3, #1
 800d9dc:	6013      	str	r3, [r2, #0]
}
 800d9de:	bf00      	nop
 800d9e0:	46bd      	mov	sp, r7
 800d9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e6:	4770      	bx	lr
 800d9e8:	e000edf0 	.word	0xe000edf0
 800d9ec:	e0001000 	.word	0xe0001000

0800d9f0 <DWT_Stop>:
 * @brief  Stop counting clock cycles and calculate elapsed time in [us]
 * @param  None
 * @retval Elapsed time in [us]
 */
static uint32_t DWT_Stop(void)
{
 800d9f0:	b480      	push	{r7}
 800d9f2:	b083      	sub	sp, #12
 800d9f4:	af00      	add	r7, sp, #0
  volatile uint32_t cycles_count = 0U;
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	603b      	str	r3, [r7, #0]
  uint32_t system_core_clock_mhz = 0U;
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	607b      	str	r3, [r7, #4]

  DWT->CTRL = DWT->CTRL ^ 1;  /* Disable counter */
 800d9fe:	4b0d      	ldr	r3, [pc, #52]	; (800da34 <DWT_Stop+0x44>)
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	4a0c      	ldr	r2, [pc, #48]	; (800da34 <DWT_Stop+0x44>)
 800da04:	f083 0301 	eor.w	r3, r3, #1
 800da08:	6013      	str	r3, [r2, #0]
  cycles_count = DWT->CYCCNT; /* Read count of clock cycles */
 800da0a:	4b0a      	ldr	r3, [pc, #40]	; (800da34 <DWT_Stop+0x44>)
 800da0c:	685b      	ldr	r3, [r3, #4]
 800da0e:	603b      	str	r3, [r7, #0]

  /* Calculate elapsed time in [us] */
  system_core_clock_mhz = SystemCoreClock / 1000000U;
 800da10:	4b09      	ldr	r3, [pc, #36]	; (800da38 <DWT_Stop+0x48>)
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	4a09      	ldr	r2, [pc, #36]	; (800da3c <DWT_Stop+0x4c>)
 800da16:	fba2 2303 	umull	r2, r3, r2, r3
 800da1a:	0c9b      	lsrs	r3, r3, #18
 800da1c:	607b      	str	r3, [r7, #4]
  return cycles_count / system_core_clock_mhz;
 800da1e:	683a      	ldr	r2, [r7, #0]
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800da26:	4618      	mov	r0, r3
 800da28:	370c      	adds	r7, #12
 800da2a:	46bd      	mov	sp, r7
 800da2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da30:	4770      	bx	lr
 800da32:	bf00      	nop
 800da34:	e0001000 	.word	0xe0001000
 800da38:	200011cc 	.word	0x200011cc
 800da3c:	431bde83 	.word	0x431bde83

0800da40 <BSP_SENSOR_ACC_Init>:
  * @brief  Initializes accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Init(void)
{
 800da40:	b580      	push	{r7, lr}
 800da42:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM6DSL_0, MOTION_ACCELERO);
 800da44:	2102      	movs	r1, #2
 800da46:	2000      	movs	r0, #0
 800da48:	f7f9 febc 	bl	80077c4 <IKS01A2_MOTION_SENSOR_Init>
}
 800da4c:	bf00      	nop
 800da4e:	bd80      	pop	{r7, pc}

0800da50 <BSP_SENSOR_GYR_Init>:
  * @brief  Initializes gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Init(void)
{
 800da50:	b580      	push	{r7, lr}
 800da52:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM6DSL_0, MOTION_GYRO);
 800da54:	2101      	movs	r1, #1
 800da56:	2000      	movs	r0, #0
 800da58:	f7f9 feb4 	bl	80077c4 <IKS01A2_MOTION_SENSOR_Init>
}
 800da5c:	bf00      	nop
 800da5e:	bd80      	pop	{r7, pc}

0800da60 <BSP_SENSOR_MAG_Init>:
  * @brief  Initializes magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Init(void)
{
 800da60:	b580      	push	{r7, lr}
 800da62:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM303AGR_MAG_0, MOTION_MAGNETO);
 800da64:	2104      	movs	r1, #4
 800da66:	2002      	movs	r0, #2
 800da68:	f7f9 feac 	bl	80077c4 <IKS01A2_MOTION_SENSOR_Init>
}
 800da6c:	bf00      	nop
 800da6e:	bd80      	pop	{r7, pc}

0800da70 <BSP_SENSOR_PRESS_Init>:
  * @brief  Initializes pressure sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_PRESS_Init(void)
{
 800da70:	b580      	push	{r7, lr}
 800da72:	af00      	add	r7, sp, #0
  (void)IKS01A2_ENV_SENSOR_Init(IKS01A2_LPS22HB_0, ENV_PRESSURE);
 800da74:	2102      	movs	r1, #2
 800da76:	2001      	movs	r0, #1
 800da78:	f7f9 fbe8 	bl	800724c <IKS01A2_ENV_SENSOR_Init>
}
 800da7c:	bf00      	nop
 800da7e:	bd80      	pop	{r7, pc}

0800da80 <BSP_SENSOR_TEMP_Init>:
  * @brief  Initializes temperature sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_TEMP_Init(void)
{
 800da80:	b580      	push	{r7, lr}
 800da82:	af00      	add	r7, sp, #0
  (void)IKS01A2_ENV_SENSOR_Init(IKS01A2_HTS221_0, ENV_TEMPERATURE);
 800da84:	2101      	movs	r1, #1
 800da86:	2000      	movs	r0, #0
 800da88:	f7f9 fbe0 	bl	800724c <IKS01A2_ENV_SENSOR_Init>
}
 800da8c:	bf00      	nop
 800da8e:	bd80      	pop	{r7, pc}

0800da90 <BSP_SENSOR_HUM_Init>:
  * @brief  Initializes humidity sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_HUM_Init(void)
{
 800da90:	b580      	push	{r7, lr}
 800da92:	af00      	add	r7, sp, #0
  (void)IKS01A2_ENV_SENSOR_Init(IKS01A2_HTS221_0, ENV_HUMIDITY);
 800da94:	2104      	movs	r1, #4
 800da96:	2000      	movs	r0, #0
 800da98:	f7f9 fbd8 	bl	800724c <IKS01A2_ENV_SENSOR_Init>
}
 800da9c:	bf00      	nop
 800da9e:	bd80      	pop	{r7, pc}

0800daa0 <BSP_SENSOR_ACC_Enable>:
  * @brief  Enables accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Enable(void)
{
 800daa0:	b580      	push	{r7, lr}
 800daa2:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM6DSL_0, MOTION_ACCELERO);
 800daa4:	2102      	movs	r1, #2
 800daa6:	2000      	movs	r0, #0
 800daa8:	f7f9 ff82 	bl	80079b0 <IKS01A2_MOTION_SENSOR_Enable>
}
 800daac:	bf00      	nop
 800daae:	bd80      	pop	{r7, pc}

0800dab0 <BSP_SENSOR_GYR_Enable>:
  * @brief  Enables gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Enable(void)
{
 800dab0:	b580      	push	{r7, lr}
 800dab2:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM6DSL_0, MOTION_GYRO);
 800dab4:	2101      	movs	r1, #1
 800dab6:	2000      	movs	r0, #0
 800dab8:	f7f9 ff7a 	bl	80079b0 <IKS01A2_MOTION_SENSOR_Enable>
}
 800dabc:	bf00      	nop
 800dabe:	bd80      	pop	{r7, pc}

0800dac0 <BSP_SENSOR_MAG_Enable>:
  * @brief  Enables magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Enable(void)
{
 800dac0:	b580      	push	{r7, lr}
 800dac2:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM303AGR_MAG_0, MOTION_MAGNETO);
 800dac4:	2104      	movs	r1, #4
 800dac6:	2002      	movs	r0, #2
 800dac8:	f7f9 ff72 	bl	80079b0 <IKS01A2_MOTION_SENSOR_Enable>
}
 800dacc:	bf00      	nop
 800dace:	bd80      	pop	{r7, pc}

0800dad0 <BSP_SENSOR_PRESS_Enable>:
  * @brief  Enables pressure sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_PRESS_Enable(void)
{
 800dad0:	b580      	push	{r7, lr}
 800dad2:	af00      	add	r7, sp, #0
  (void)IKS01A2_ENV_SENSOR_Enable(IKS01A2_LPS22HB_0, ENV_PRESSURE);
 800dad4:	2102      	movs	r1, #2
 800dad6:	2001      	movs	r0, #1
 800dad8:	f7f9 fc78 	bl	80073cc <IKS01A2_ENV_SENSOR_Enable>
}
 800dadc:	bf00      	nop
 800dade:	bd80      	pop	{r7, pc}

0800dae0 <BSP_SENSOR_TEMP_Enable>:
  * @brief  Enables temperature sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_TEMP_Enable(void)
{
 800dae0:	b580      	push	{r7, lr}
 800dae2:	af00      	add	r7, sp, #0
  (void)IKS01A2_ENV_SENSOR_Enable(IKS01A2_HTS221_0, ENV_TEMPERATURE);
 800dae4:	2101      	movs	r1, #1
 800dae6:	2000      	movs	r0, #0
 800dae8:	f7f9 fc70 	bl	80073cc <IKS01A2_ENV_SENSOR_Enable>
}
 800daec:	bf00      	nop
 800daee:	bd80      	pop	{r7, pc}

0800daf0 <BSP_SENSOR_HUM_Enable>:
  * @brief  Enables humidity sensors
  * @param  None
  * @retval None
  */
void BSP_SENSOR_HUM_Enable(void)
{
 800daf0:	b580      	push	{r7, lr}
 800daf2:	af00      	add	r7, sp, #0
  (void)IKS01A2_ENV_SENSOR_Enable(IKS01A2_HTS221_0, ENV_HUMIDITY);
 800daf4:	2104      	movs	r1, #4
 800daf6:	2000      	movs	r0, #0
 800daf8:	f7f9 fc68 	bl	80073cc <IKS01A2_ENV_SENSOR_Enable>
}
 800dafc:	bf00      	nop
 800dafe:	bd80      	pop	{r7, pc}

0800db00 <BSP_SENSOR_ACC_GetAxes>:
  * @brief  Get accelerometer data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_ACC_GetAxes(IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 800db00:	b580      	push	{r7, lr}
 800db02:	b082      	sub	sp, #8
 800db04:	af00      	add	r7, sp, #0
 800db06:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM6DSL_0, MOTION_ACCELERO, Axes);
 800db08:	687a      	ldr	r2, [r7, #4]
 800db0a:	2102      	movs	r1, #2
 800db0c:	2000      	movs	r0, #0
 800db0e:	f7f9 ff91 	bl	8007a34 <IKS01A2_MOTION_SENSOR_GetAxes>
}
 800db12:	bf00      	nop
 800db14:	3708      	adds	r7, #8
 800db16:	46bd      	mov	sp, r7
 800db18:	bd80      	pop	{r7, pc}

0800db1a <BSP_SENSOR_GYR_GetAxes>:
  * @brief  Get gyroscope data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_GYR_GetAxes(IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 800db1a:	b580      	push	{r7, lr}
 800db1c:	b082      	sub	sp, #8
 800db1e:	af00      	add	r7, sp, #0
 800db20:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM6DSL_0, MOTION_GYRO, Axes);
 800db22:	687a      	ldr	r2, [r7, #4]
 800db24:	2101      	movs	r1, #1
 800db26:	2000      	movs	r0, #0
 800db28:	f7f9 ff84 	bl	8007a34 <IKS01A2_MOTION_SENSOR_GetAxes>
}
 800db2c:	bf00      	nop
 800db2e:	3708      	adds	r7, #8
 800db30:	46bd      	mov	sp, r7
 800db32:	bd80      	pop	{r7, pc}

0800db34 <BSP_SENSOR_MAG_GetAxes>:
  * @brief  Get magnetometer data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_MAG_GetAxes(IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 800db34:	b580      	push	{r7, lr}
 800db36:	b082      	sub	sp, #8
 800db38:	af00      	add	r7, sp, #0
 800db3a:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM303AGR_MAG_0, MOTION_MAGNETO, Axes);
 800db3c:	687a      	ldr	r2, [r7, #4]
 800db3e:	2104      	movs	r1, #4
 800db40:	2002      	movs	r0, #2
 800db42:	f7f9 ff77 	bl	8007a34 <IKS01A2_MOTION_SENSOR_GetAxes>
}
 800db46:	bf00      	nop
 800db48:	3708      	adds	r7, #8
 800db4a:	46bd      	mov	sp, r7
 800db4c:	bd80      	pop	{r7, pc}

0800db4e <BSP_SENSOR_PRESS_GetValue>:
  * @brief  Get pressure sensor data
  * @param  Value pointer to pressure value
  * @retval None
  */
void BSP_SENSOR_PRESS_GetValue(float *Value)
{
 800db4e:	b580      	push	{r7, lr}
 800db50:	b082      	sub	sp, #8
 800db52:	af00      	add	r7, sp, #0
 800db54:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_ENV_SENSOR_GetValue(IKS01A2_LPS22HB_0, ENV_PRESSURE, Value);
 800db56:	687a      	ldr	r2, [r7, #4]
 800db58:	2102      	movs	r1, #2
 800db5a:	2001      	movs	r0, #1
 800db5c:	f7f9 fc78 	bl	8007450 <IKS01A2_ENV_SENSOR_GetValue>
}
 800db60:	bf00      	nop
 800db62:	3708      	adds	r7, #8
 800db64:	46bd      	mov	sp, r7
 800db66:	bd80      	pop	{r7, pc}

0800db68 <BSP_SENSOR_TEMP_GetValue>:
  * @brief  Get temperature sensor data
  * @param  Value pointer to temperature value
  * @retval None
  */
void BSP_SENSOR_TEMP_GetValue(float *Value)
{
 800db68:	b580      	push	{r7, lr}
 800db6a:	b082      	sub	sp, #8
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_ENV_SENSOR_GetValue(IKS01A2_HTS221_0, ENV_TEMPERATURE, Value);
 800db70:	687a      	ldr	r2, [r7, #4]
 800db72:	2101      	movs	r1, #1
 800db74:	2000      	movs	r0, #0
 800db76:	f7f9 fc6b 	bl	8007450 <IKS01A2_ENV_SENSOR_GetValue>
}
 800db7a:	bf00      	nop
 800db7c:	3708      	adds	r7, #8
 800db7e:	46bd      	mov	sp, r7
 800db80:	bd80      	pop	{r7, pc}

0800db82 <BSP_SENSOR_HUM_GetValue>:
  * @brief  Get humidity sensor data
  * @param  Value pointer to humidity value
  * @retval None
  */
void BSP_SENSOR_HUM_GetValue(float *Value)
{
 800db82:	b580      	push	{r7, lr}
 800db84:	b082      	sub	sp, #8
 800db86:	af00      	add	r7, sp, #0
 800db88:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_ENV_SENSOR_GetValue(IKS01A2_HTS221_0, ENV_HUMIDITY, Value);
 800db8a:	687a      	ldr	r2, [r7, #4]
 800db8c:	2104      	movs	r1, #4
 800db8e:	2000      	movs	r0, #0
 800db90:	f7f9 fc5e 	bl	8007450 <IKS01A2_ENV_SENSOR_GetValue>
}
 800db94:	bf00      	nop
 800db96:	3708      	adds	r7, #8
 800db98:	46bd      	mov	sp, r7
 800db9a:	bd80      	pop	{r7, pc}

0800db9c <BSP_SENSOR_ACC_SetOutputDataRate>:
  * @brief  Set output data rate for accelerometer
  * @param  Odr Output Data Rate value to be set
  * @retval None
  */
void BSP_SENSOR_ACC_SetOutputDataRate(float Odr)
{
 800db9c:	b580      	push	{r7, lr}
 800db9e:	b082      	sub	sp, #8
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_MOTION_SENSOR_SetOutputDataRate(IKS01A2_LSM6DSL_0, MOTION_ACCELERO, Odr);
 800dba4:	687a      	ldr	r2, [r7, #4]
 800dba6:	2102      	movs	r1, #2
 800dba8:	2000      	movs	r0, #0
 800dbaa:	f7f9 ff87 	bl	8007abc <IKS01A2_MOTION_SENSOR_SetOutputDataRate>
}
 800dbae:	bf00      	nop
 800dbb0:	3708      	adds	r7, #8
 800dbb2:	46bd      	mov	sp, r7
 800dbb4:	bd80      	pop	{r7, pc}

0800dbb6 <BSP_SENSOR_MAG_SetOutputDataRate>:
  * @brief  Set output data rate for magnetometer
  * @param  Odr Output Data Rate value to be set
  * @retval None
  */
void BSP_SENSOR_MAG_SetOutputDataRate(float Odr)
{
 800dbb6:	b580      	push	{r7, lr}
 800dbb8:	b082      	sub	sp, #8
 800dbba:	af00      	add	r7, sp, #0
 800dbbc:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_MOTION_SENSOR_SetOutputDataRate(IKS01A2_LSM303AGR_MAG_0, MOTION_MAGNETO, Odr);
 800dbbe:	687a      	ldr	r2, [r7, #4]
 800dbc0:	2104      	movs	r1, #4
 800dbc2:	2002      	movs	r0, #2
 800dbc4:	f7f9 ff7a 	bl	8007abc <IKS01A2_MOTION_SENSOR_SetOutputDataRate>
}
 800dbc8:	bf00      	nop
 800dbca:	3708      	adds	r7, #8
 800dbcc:	46bd      	mov	sp, r7
 800dbce:	bd80      	pop	{r7, pc}

0800dbd0 <BSP_SENSOR_ACC_SetFullScale>:
  * @brief  Set full scale for acclerometer
  * @param  Fullscale Fullscale value to be set
  * @retval None
  */
void BSP_SENSOR_ACC_SetFullScale(int32_t Fullscale)
{
 800dbd0:	b580      	push	{r7, lr}
 800dbd2:	b082      	sub	sp, #8
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_MOTION_SENSOR_SetFullScale(IKS01A2_LSM6DSL_0, MOTION_ACCELERO, Fullscale);
 800dbd8:	687a      	ldr	r2, [r7, #4]
 800dbda:	2102      	movs	r1, #2
 800dbdc:	2000      	movs	r0, #0
 800dbde:	f7f9 ffb1 	bl	8007b44 <IKS01A2_MOTION_SENSOR_SetFullScale>
}
 800dbe2:	bf00      	nop
 800dbe4:	3708      	adds	r7, #8
 800dbe6:	46bd      	mov	sp, r7
 800dbe8:	bd80      	pop	{r7, pc}

0800dbea <BSP_SENSOR_ACC_GetOrientation>:
  * @brief  Get accelerometer sensor orientation
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_ACC_GetOrientation(char *Orientation)
{
 800dbea:	b480      	push	{r7}
 800dbec:	b083      	sub	sp, #12
 800dbee:	af00      	add	r7, sp, #0
 800dbf0:	6078      	str	r0, [r7, #4]
  Orientation[0] = 'n';
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	226e      	movs	r2, #110	; 0x6e
 800dbf6:	701a      	strb	r2, [r3, #0]
  Orientation[1] = 'w';
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	3301      	adds	r3, #1
 800dbfc:	2277      	movs	r2, #119	; 0x77
 800dbfe:	701a      	strb	r2, [r3, #0]
  Orientation[2] = 'u';
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	3302      	adds	r3, #2
 800dc04:	2275      	movs	r2, #117	; 0x75
 800dc06:	701a      	strb	r2, [r3, #0]
}
 800dc08:	bf00      	nop
 800dc0a:	370c      	adds	r7, #12
 800dc0c:	46bd      	mov	sp, r7
 800dc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc12:	4770      	bx	lr

0800dc14 <BSP_SENSOR_GYR_GetOrientation>:
  * @brief  Get gyroscope sensor orientation
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_GYR_GetOrientation(char *Orientation)
{
 800dc14:	b480      	push	{r7}
 800dc16:	b083      	sub	sp, #12
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	6078      	str	r0, [r7, #4]
  Orientation[0] = 'n';
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	226e      	movs	r2, #110	; 0x6e
 800dc20:	701a      	strb	r2, [r3, #0]
  Orientation[1] = 'w';
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	3301      	adds	r3, #1
 800dc26:	2277      	movs	r2, #119	; 0x77
 800dc28:	701a      	strb	r2, [r3, #0]
  Orientation[2] = 'u';
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	3302      	adds	r3, #2
 800dc2e:	2275      	movs	r2, #117	; 0x75
 800dc30:	701a      	strb	r2, [r3, #0]
}
 800dc32:	bf00      	nop
 800dc34:	370c      	adds	r7, #12
 800dc36:	46bd      	mov	sp, r7
 800dc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc3c:	4770      	bx	lr

0800dc3e <BSP_SENSOR_MAG_GetOrientation>:
  * @brief  Get magnetometer sensor orientation
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_MAG_GetOrientation(char *Orientation)
{
 800dc3e:	b480      	push	{r7}
 800dc40:	b083      	sub	sp, #12
 800dc42:	af00      	add	r7, sp, #0
 800dc44:	6078      	str	r0, [r7, #4]
  Orientation[0] = 'n';
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	226e      	movs	r2, #110	; 0x6e
 800dc4a:	701a      	strb	r2, [r3, #0]
  Orientation[1] = 'e';
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	3301      	adds	r3, #1
 800dc50:	2265      	movs	r2, #101	; 0x65
 800dc52:	701a      	strb	r2, [r3, #0]
  Orientation[2] = 'u';
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	3302      	adds	r3, #2
 800dc58:	2275      	movs	r2, #117	; 0x75
 800dc5a:	701a      	strb	r2, [r3, #0]
}
 800dc5c:	bf00      	nop
 800dc5e:	370c      	adds	r7, #12
 800dc60:	46bd      	mov	sp, r7
 800dc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc66:	4770      	bx	lr

0800dc68 <MotionFX_manager_init>:
 * @brief  Initialize the MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_init(void)
{
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	af00      	add	r7, sp, #0
  MotionFX_initialize();
 800dc6c:	f00a fd60 	bl	8018730 <MotionFX_initialize>

  MotionFX_getKnobs(ipKnobs);
 800dc70:	4b24      	ldr	r3, [pc, #144]	; (800dd04 <MotionFX_manager_init+0x9c>)
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	4618      	mov	r0, r3
 800dc76:	f00b f821 	bl	8018cbc <MotionFX_getKnobs>

  BSP_SENSOR_ACC_GetOrientation(ipKnobs->acc_orientation);
 800dc7a:	4b22      	ldr	r3, [pc, #136]	; (800dd04 <MotionFX_manager_init+0x9c>)
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	3329      	adds	r3, #41	; 0x29
 800dc80:	4618      	mov	r0, r3
 800dc82:	f7ff ffb2 	bl	800dbea <BSP_SENSOR_ACC_GetOrientation>
  BSP_SENSOR_GYR_GetOrientation(ipKnobs->gyro_orientation);
 800dc86:	4b1f      	ldr	r3, [pc, #124]	; (800dd04 <MotionFX_manager_init+0x9c>)
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	332d      	adds	r3, #45	; 0x2d
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	f7ff ffc1 	bl	800dc14 <BSP_SENSOR_GYR_GetOrientation>
  BSP_SENSOR_MAG_GetOrientation(ipKnobs->mag_orientation);
 800dc92:	4b1c      	ldr	r3, [pc, #112]	; (800dd04 <MotionFX_manager_init+0x9c>)
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	3331      	adds	r3, #49	; 0x31
 800dc98:	4618      	mov	r0, r3
 800dc9a:	f7ff ffd0 	bl	800dc3e <BSP_SENSOR_MAG_GetOrientation>

  ipKnobs->gbias_acc_th_sc_6X = GBIAS_ACC_TH_SC_6X;
 800dc9e:	4b19      	ldr	r3, [pc, #100]	; (800dd04 <MotionFX_manager_init+0x9c>)
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	4a19      	ldr	r2, [pc, #100]	; (800dd08 <MotionFX_manager_init+0xa0>)
 800dca4:	615a      	str	r2, [r3, #20]
  ipKnobs->gbias_gyro_th_sc_6X = GBIAS_GYRO_TH_SC_6X;
 800dca6:	4b17      	ldr	r3, [pc, #92]	; (800dd04 <MotionFX_manager_init+0x9c>)
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	4a18      	ldr	r2, [pc, #96]	; (800dd0c <MotionFX_manager_init+0xa4>)
 800dcac:	619a      	str	r2, [r3, #24]
  ipKnobs->gbias_mag_th_sc_6X = GBIAS_MAG_TH_SC_6X;
 800dcae:	4b15      	ldr	r3, [pc, #84]	; (800dd04 <MotionFX_manager_init+0x9c>)
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	4a17      	ldr	r2, [pc, #92]	; (800dd10 <MotionFX_manager_init+0xa8>)
 800dcb4:	611a      	str	r2, [r3, #16]

  ipKnobs->gbias_acc_th_sc_9X = GBIAS_ACC_TH_SC_9X;
 800dcb6:	4b13      	ldr	r3, [pc, #76]	; (800dd04 <MotionFX_manager_init+0x9c>)
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	4a13      	ldr	r2, [pc, #76]	; (800dd08 <MotionFX_manager_init+0xa0>)
 800dcbc:	621a      	str	r2, [r3, #32]
  ipKnobs->gbias_gyro_th_sc_9X = GBIAS_GYRO_TH_SC_9X;
 800dcbe:	4b11      	ldr	r3, [pc, #68]	; (800dd04 <MotionFX_manager_init+0x9c>)
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	4a12      	ldr	r2, [pc, #72]	; (800dd0c <MotionFX_manager_init+0xa4>)
 800dcc4:	625a      	str	r2, [r3, #36]	; 0x24
  ipKnobs->gbias_mag_th_sc_9X = GBIAS_MAG_TH_SC_9X;
 800dcc6:	4b0f      	ldr	r3, [pc, #60]	; (800dd04 <MotionFX_manager_init+0x9c>)
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	4a11      	ldr	r2, [pc, #68]	; (800dd10 <MotionFX_manager_init+0xa8>)
 800dccc:	61da      	str	r2, [r3, #28]

  ipKnobs->output_type = MFX_ENGINE_OUTPUT_ENU;
 800dcce:	4b0d      	ldr	r3, [pc, #52]	; (800dd04 <MotionFX_manager_init+0x9c>)
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	2201      	movs	r2, #1
 800dcd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  ipKnobs->LMode = 1;
 800dcd8:	4b0a      	ldr	r3, [pc, #40]	; (800dd04 <MotionFX_manager_init+0x9c>)
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	2201      	movs	r2, #1
 800dcde:	731a      	strb	r2, [r3, #12]
  ipKnobs->modx = DECIMATION;
 800dce0:	4b08      	ldr	r3, [pc, #32]	; (800dd04 <MotionFX_manager_init+0x9c>)
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	2201      	movs	r2, #1
 800dce6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  MotionFX_setKnobs(ipKnobs);
 800dcea:	4b06      	ldr	r3, [pc, #24]	; (800dd04 <MotionFX_manager_init+0x9c>)
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	4618      	mov	r0, r3
 800dcf0:	f00a ff80 	bl	8018bf4 <MotionFX_setKnobs>

  MotionFX_enable_6X(MFX_ENGINE_ENABLE);
 800dcf4:	2001      	movs	r0, #1
 800dcf6:	f00b f837 	bl	8018d68 <MotionFX_enable_6X>
  MotionFX_enable_9X(MFX_ENGINE_ENABLE);
 800dcfa:	2001      	movs	r0, #1
 800dcfc:	f00b f854 	bl	8018da8 <MotionFX_enable_9X>
}
 800dd00:	bf00      	nop
 800dd02:	bd80      	pop	{r7, pc}
 800dd04:	20001344 	.word	0x20001344
 800dd08:	3ac88a48 	.word	0x3ac88a48
 800dd0c:	3b83126f 	.word	0x3b83126f
 800dd10:	3b449ba6 	.word	0x3b449ba6

0800dd14 <MotionFX_manager_run>:
 * @param  data_out Structure containing output data
 * @param  delta_time Delta time
 * @retval None
 */
void MotionFX_manager_run(MFX_input_t *data_in, MFX_output_t *data_out, float delta_time)
{
 800dd14:	b580      	push	{r7, lr}
 800dd16:	b084      	sub	sp, #16
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	60f8      	str	r0, [r7, #12]
 800dd1c:	60b9      	str	r1, [r7, #8]
 800dd1e:	607a      	str	r2, [r7, #4]
  if (discardedCount == sampleToDiscard)
 800dd20:	4b0d      	ldr	r3, [pc, #52]	; (800dd58 <MotionFX_manager_run+0x44>)
 800dd22:	681a      	ldr	r2, [r3, #0]
 800dd24:	4b0d      	ldr	r3, [pc, #52]	; (800dd5c <MotionFX_manager_run+0x48>)
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	429a      	cmp	r2, r3
 800dd2a:	d10c      	bne.n	800dd46 <MotionFX_manager_run+0x32>
  {
    MotionFX_propagate(data_out, data_in, &delta_time);
 800dd2c:	1d3b      	adds	r3, r7, #4
 800dd2e:	461a      	mov	r2, r3
 800dd30:	68f9      	ldr	r1, [r7, #12]
 800dd32:	68b8      	ldr	r0, [r7, #8]
 800dd34:	f00b fa1c 	bl	8019170 <MotionFX_propagate>
    MotionFX_update(data_out, data_in, &delta_time, NULL);
 800dd38:	1d3a      	adds	r2, r7, #4
 800dd3a:	2300      	movs	r3, #0
 800dd3c:	68f9      	ldr	r1, [r7, #12]
 800dd3e:	68b8      	ldr	r0, [r7, #8]
 800dd40:	f00b f854 	bl	8018dec <MotionFX_update>
  }
  else
  {
    discardedCount++;
  }
}
 800dd44:	e004      	b.n	800dd50 <MotionFX_manager_run+0x3c>
    discardedCount++;
 800dd46:	4b04      	ldr	r3, [pc, #16]	; (800dd58 <MotionFX_manager_run+0x44>)
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	3301      	adds	r3, #1
 800dd4c:	4a02      	ldr	r2, [pc, #8]	; (800dd58 <MotionFX_manager_run+0x44>)
 800dd4e:	6013      	str	r3, [r2, #0]
}
 800dd50:	bf00      	nop
 800dd52:	3710      	adds	r7, #16
 800dd54:	46bd      	mov	sp, r7
 800dd56:	bd80      	pop	{r7, pc}
 800dd58:	200024c4 	.word	0x200024c4
 800dd5c:	20001348 	.word	0x20001348

0800dd60 <MotionFX_manager_get_version>:
 * @param  version  Library version string (must be array of 35 char)
 * @param  length  Library version string length
 * @retval None
 */
void MotionFX_manager_get_version(char *version, int *length)
{
 800dd60:	b580      	push	{r7, lr}
 800dd62:	b082      	sub	sp, #8
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	6078      	str	r0, [r7, #4]
 800dd68:	6039      	str	r1, [r7, #0]
  *length = (int)MotionFX_GetLibVersion(version);
 800dd6a:	6878      	ldr	r0, [r7, #4]
 800dd6c:	f00c f8fc 	bl	8019f68 <MotionFX_GetLibVersion>
 800dd70:	4603      	mov	r3, r0
 800dd72:	461a      	mov	r2, r3
 800dd74:	683b      	ldr	r3, [r7, #0]
 800dd76:	601a      	str	r2, [r3, #0]
}
 800dd78:	bf00      	nop
 800dd7a:	3708      	adds	r7, #8
 800dd7c:	46bd      	mov	sp, r7
 800dd7e:	bd80      	pop	{r7, pc}

0800dd80 <MotionFX_manager_MagCal_run>:
 * @brief  Run magnetometer calibration algorithm
 * @param  None
 * @retval None
 */
void MotionFX_manager_MagCal_run(MFX_MagCal_input_t *data_in, MFX_MagCal_output_t *data_out)
{
 800dd80:	b580      	push	{r7, lr}
 800dd82:	b082      	sub	sp, #8
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	6078      	str	r0, [r7, #4]
 800dd88:	6039      	str	r1, [r7, #0]
  MotionFX_MagCal_run(data_in);
 800dd8a:	6878      	ldr	r0, [r7, #4]
 800dd8c:	f00c f816 	bl	8019dbc <MotionFX_MagCal_run>
  MotionFX_MagCal_getParams(data_out);
 800dd90:	6838      	ldr	r0, [r7, #0]
 800dd92:	f00c f8b9 	bl	8019f08 <MotionFX_MagCal_getParams>
}
 800dd96:	bf00      	nop
 800dd98:	3708      	adds	r7, #8
 800dd9a:	46bd      	mov	sp, r7
 800dd9c:	bd80      	pop	{r7, pc}

0800dd9e <MotionFX_manager_MagCal_start>:
 * @brief  Start magnetometer calibration
 * @param  None
 * @retval None
 */
void MotionFX_manager_MagCal_start(int sampletime)
{
 800dd9e:	b580      	push	{r7, lr}
 800dda0:	b082      	sub	sp, #8
 800dda2:	af00      	add	r7, sp, #0
 800dda4:	6078      	str	r0, [r7, #4]
  MotionFX_MagCal_init(sampletime, 1);
 800dda6:	2101      	movs	r1, #1
 800dda8:	6878      	ldr	r0, [r7, #4]
 800ddaa:	f00b ff57 	bl	8019c5c <MotionFX_MagCal_init>
}
 800ddae:	bf00      	nop
 800ddb0:	3708      	adds	r7, #8
 800ddb2:	46bd      	mov	sp, r7
 800ddb4:	bd80      	pop	{r7, pc}

0800ddb6 <MotionFX_manager_MagCal_stop>:
 * @brief  Stop magnetometer calibration
 * @param  None
 * @retval None
 */
void MotionFX_manager_MagCal_stop(int sampletime)
{
 800ddb6:	b580      	push	{r7, lr}
 800ddb8:	b082      	sub	sp, #8
 800ddba:	af00      	add	r7, sp, #0
 800ddbc:	6078      	str	r0, [r7, #4]
  MotionFX_MagCal_init(sampletime, 0);
 800ddbe:	2100      	movs	r1, #0
 800ddc0:	6878      	ldr	r0, [r7, #4]
 800ddc2:	f00b ff4b 	bl	8019c5c <MotionFX_MagCal_init>
}
 800ddc6:	bf00      	nop
 800ddc8:	3708      	adds	r7, #8
 800ddca:	46bd      	mov	sp, r7
 800ddcc:	bd80      	pop	{r7, pc}

0800ddce <MotionFX_LoadMagCalFromNVM>:
 * @param  dataSize length ot the data
 * @param  data pointer to the data
 * @retval (1) fail, (0) success
 */
char MotionFX_LoadMagCalFromNVM(unsigned short int dataSize, unsigned int *data)
{
 800ddce:	b480      	push	{r7}
 800ddd0:	b083      	sub	sp, #12
 800ddd2:	af00      	add	r7, sp, #0
 800ddd4:	4603      	mov	r3, r0
 800ddd6:	6039      	str	r1, [r7, #0]
 800ddd8:	80fb      	strh	r3, [r7, #6]
  return (char)1;
 800ddda:	2301      	movs	r3, #1
}
 800dddc:	4618      	mov	r0, r3
 800ddde:	370c      	adds	r7, #12
 800dde0:	46bd      	mov	sp, r7
 800dde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde6:	4770      	bx	lr

0800dde8 <MotionFX_SaveMagCalInNVM>:
 * @param  dataSize length ot the data
 * @param  data pointer to the data
 * @retval (1) fail, (0) success
 */
char MotionFX_SaveMagCalInNVM(unsigned short int dataSize, unsigned int *data)
{
 800dde8:	b480      	push	{r7}
 800ddea:	b083      	sub	sp, #12
 800ddec:	af00      	add	r7, sp, #0
 800ddee:	4603      	mov	r3, r0
 800ddf0:	6039      	str	r1, [r7, #0]
 800ddf2:	80fb      	strh	r3, [r7, #6]
  return (char)1;
 800ddf4:	2301      	movs	r3, #1
}
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	370c      	adds	r7, #12
 800ddfa:	46bd      	mov	sp, r7
 800ddfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de00:	4770      	bx	lr

0800de02 <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 800de02:	b580      	push	{r7, lr}
 800de04:	b08c      	sub	sp, #48	; 0x30
 800de06:	af00      	add	r7, sp, #0
 800de08:	603b      	str	r3, [r7, #0]
 800de0a:	4603      	mov	r3, r0
 800de0c:	71fb      	strb	r3, [r7, #7]
 800de0e:	460b      	mov	r3, r1
 800de10:	71bb      	strb	r3, [r7, #6]
 800de12:	4613      	mov	r3, r2
 800de14:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 800de16:	79fb      	ldrb	r3, [r7, #7]
 800de18:	753b      	strb	r3, [r7, #20]
  cp.privacy_enabled = privacy_enabled;
 800de1a:	79bb      	ldrb	r3, [r7, #6]
 800de1c:	757b      	strb	r3, [r7, #21]
  cp.device_name_char_len = device_name_char_len;
 800de1e:	797b      	ldrb	r3, [r7, #5]
 800de20:	75bb      	strb	r3, [r7, #22]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800de22:	f107 030c 	add.w	r3, r7, #12
 800de26:	2207      	movs	r2, #7
 800de28:	2100      	movs	r1, #0
 800de2a:	4618      	mov	r0, r3
 800de2c:	f00c f8f7 	bl	801a01e <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800de30:	f107 0318 	add.w	r3, r7, #24
 800de34:	2218      	movs	r2, #24
 800de36:	2100      	movs	r1, #0
 800de38:	4618      	mov	r0, r3
 800de3a:	f00c f8f0 	bl	801a01e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800de3e:	233f      	movs	r3, #63	; 0x3f
 800de40:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_GAP_INIT;
 800de42:	238a      	movs	r3, #138	; 0x8a
 800de44:	837b      	strh	r3, [r7, #26]
  rq.cparam = &cp;
 800de46:	f107 0314 	add.w	r3, r7, #20
 800de4a:	623b      	str	r3, [r7, #32]
  rq.clen = sizeof(cp);
 800de4c:	2303      	movs	r3, #3
 800de4e:	627b      	str	r3, [r7, #36]	; 0x24
  rq.rparam = &resp;
 800de50:	f107 030c 	add.w	r3, r7, #12
 800de54:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.rlen = GAP_INIT_RP_SIZE;
 800de56:	2307      	movs	r3, #7
 800de58:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if (hci_send_req(&rq, FALSE) < 0)
 800de5a:	f107 0318 	add.w	r3, r7, #24
 800de5e:	2100      	movs	r1, #0
 800de60:	4618      	mov	r0, r3
 800de62:	f000 fead 	bl	800ebc0 <hci_send_req>
 800de66:	4603      	mov	r3, r0
 800de68:	2b00      	cmp	r3, #0
 800de6a:	da01      	bge.n	800de70 <aci_gap_init_IDB05A1+0x6e>
    return BLE_STATUS_TIMEOUT;
 800de6c:	23ff      	movs	r3, #255	; 0xff
 800de6e:	e014      	b.n	800de9a <aci_gap_init_IDB05A1+0x98>
  
  if (resp.status) {
 800de70:	7b3b      	ldrb	r3, [r7, #12]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d001      	beq.n	800de7a <aci_gap_init_IDB05A1+0x78>
    return resp.status;
 800de76:	7b3b      	ldrb	r3, [r7, #12]
 800de78:	e00f      	b.n	800de9a <aci_gap_init_IDB05A1+0x98>
  }
  
  *service_handle = btohs(resp.service_handle);
 800de7a:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 800de7e:	b29a      	uxth	r2, r3
 800de80:	683b      	ldr	r3, [r7, #0]
 800de82:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 800de84:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 800de88:	b29a      	uxth	r2, r3
 800de8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de8c:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 800de8e:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 800de92:	b29a      	uxth	r2, r3
 800de94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de96:	801a      	strh	r2, [r3, #0]
  
  return 0;
 800de98:	2300      	movs	r3, #0
}
 800de9a:	4618      	mov	r0, r3
 800de9c:	3730      	adds	r7, #48	; 0x30
 800de9e:	46bd      	mov	sp, r7
 800dea0:	bd80      	pop	{r7, pc}

0800dea2 <aci_gap_init_IDB04A1>:

tBleStatus aci_gap_init_IDB04A1(uint8_t role, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 800dea2:	b580      	push	{r7, lr}
 800dea4:	b08e      	sub	sp, #56	; 0x38
 800dea6:	af00      	add	r7, sp, #0
 800dea8:	60b9      	str	r1, [r7, #8]
 800deaa:	607a      	str	r2, [r7, #4]
 800deac:	603b      	str	r3, [r7, #0]
 800deae:	4603      	mov	r3, r0
 800deb0:	73fb      	strb	r3, [r7, #15]
  struct hci_request rq;
  gap_init_cp_IDB04A1 cp;
  gap_init_rp resp;

  cp.role = role;
 800deb2:	7bfb      	ldrb	r3, [r7, #15]
 800deb4:	773b      	strb	r3, [r7, #28]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800deb6:	f107 0314 	add.w	r3, r7, #20
 800deba:	2207      	movs	r2, #7
 800debc:	2100      	movs	r1, #0
 800debe:	4618      	mov	r0, r3
 800dec0:	f00c f8ad 	bl	801a01e <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800dec4:	f107 0320 	add.w	r3, r7, #32
 800dec8:	2218      	movs	r2, #24
 800deca:	2100      	movs	r1, #0
 800decc:	4618      	mov	r0, r3
 800dece:	f00c f8a6 	bl	801a01e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800ded2:	233f      	movs	r3, #63	; 0x3f
 800ded4:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_GAP_INIT;
 800ded6:	238a      	movs	r3, #138	; 0x8a
 800ded8:	847b      	strh	r3, [r7, #34]	; 0x22
  rq.cparam = &cp;
 800deda:	f107 031c 	add.w	r3, r7, #28
 800dede:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.clen = sizeof(cp);
 800dee0:	2301      	movs	r3, #1
 800dee2:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.rparam = &resp;
 800dee4:	f107 0314 	add.w	r3, r7, #20
 800dee8:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rlen = GAP_INIT_RP_SIZE;
 800deea:	2307      	movs	r3, #7
 800deec:	637b      	str	r3, [r7, #52]	; 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 800deee:	f107 0320 	add.w	r3, r7, #32
 800def2:	2100      	movs	r1, #0
 800def4:	4618      	mov	r0, r3
 800def6:	f000 fe63 	bl	800ebc0 <hci_send_req>
 800defa:	4603      	mov	r3, r0
 800defc:	2b00      	cmp	r3, #0
 800defe:	da01      	bge.n	800df04 <aci_gap_init_IDB04A1+0x62>
    return BLE_STATUS_TIMEOUT;
 800df00:	23ff      	movs	r3, #255	; 0xff
 800df02:	e014      	b.n	800df2e <aci_gap_init_IDB04A1+0x8c>
  
  if (resp.status) {
 800df04:	7d3b      	ldrb	r3, [r7, #20]
 800df06:	2b00      	cmp	r3, #0
 800df08:	d001      	beq.n	800df0e <aci_gap_init_IDB04A1+0x6c>
    return resp.status;
 800df0a:	7d3b      	ldrb	r3, [r7, #20]
 800df0c:	e00f      	b.n	800df2e <aci_gap_init_IDB04A1+0x8c>
  }
  
  *service_handle = btohs(resp.service_handle);
 800df0e:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 800df12:	b29a      	uxth	r2, r3
 800df14:	68bb      	ldr	r3, [r7, #8]
 800df16:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 800df18:	f8b7 3017 	ldrh.w	r3, [r7, #23]
 800df1c:	b29a      	uxth	r2, r3
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 800df22:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 800df26:	b29a      	uxth	r2, r3
 800df28:	683b      	ldr	r3, [r7, #0]
 800df2a:	801a      	strh	r2, [r3, #0]
  
  return 0;
 800df2c:	2300      	movs	r3, #0
}
 800df2e:	4618      	mov	r0, r3
 800df30:	3738      	adds	r7, #56	; 0x38
 800df32:	46bd      	mov	sp, r7
 800df34:	bd80      	pop	{r7, pc}

0800df36 <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 800df36:	b590      	push	{r4, r7, lr}
 800df38:	b095      	sub	sp, #84	; 0x54
 800df3a:	af00      	add	r7, sp, #0
 800df3c:	4604      	mov	r4, r0
 800df3e:	4608      	mov	r0, r1
 800df40:	4611      	mov	r1, r2
 800df42:	461a      	mov	r2, r3
 800df44:	4623      	mov	r3, r4
 800df46:	71fb      	strb	r3, [r7, #7]
 800df48:	4603      	mov	r3, r0
 800df4a:	80bb      	strh	r3, [r7, #4]
 800df4c:	460b      	mov	r3, r1
 800df4e:	807b      	strh	r3, [r7, #2]
 800df50:	4613      	mov	r3, r2
 800df52:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
 800df54:	2300      	movs	r3, #0
 800df56:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 800df5a:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 800df5e:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800df62:	4413      	add	r3, r2
 800df64:	330e      	adds	r3, #14
 800df66:	2b28      	cmp	r3, #40	; 0x28
 800df68:	d901      	bls.n	800df6e <aci_gap_set_discoverable+0x38>
    return BLE_STATUS_INVALID_PARAMS;
 800df6a:	2342      	movs	r3, #66	; 0x42
 800df6c:	e0ce      	b.n	800e10c <aci_gap_set_discoverable+0x1d6>

  buffer[indx] = AdvType;
 800df6e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800df72:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800df76:	4413      	add	r3, r2
 800df78:	79fa      	ldrb	r2, [r7, #7]
 800df7a:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800df7e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800df82:	3301      	adds	r3, #1
 800df84:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  AdvIntervMin = htobs(AdvIntervMin);
 800df88:	88bb      	ldrh	r3, [r7, #4]
 800df8a:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 800df8c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800df90:	f107 0208 	add.w	r2, r7, #8
 800df94:	4413      	add	r3, r2
 800df96:	88ba      	ldrh	r2, [r7, #4]
 800df98:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 800df9a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800df9e:	3302      	adds	r3, #2
 800dfa0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  AdvIntervMax = htobs(AdvIntervMax);
 800dfa4:	887b      	ldrh	r3, [r7, #2]
 800dfa6:	807b      	strh	r3, [r7, #2]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 800dfa8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800dfac:	f107 0208 	add.w	r2, r7, #8
 800dfb0:	4413      	add	r3, r2
 800dfb2:	887a      	ldrh	r2, [r7, #2]
 800dfb4:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 800dfb6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800dfba:	3302      	adds	r3, #2
 800dfbc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = OwnAddrType;
 800dfc0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800dfc4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800dfc8:	4413      	add	r3, r2
 800dfca:	79ba      	ldrb	r2, [r7, #6]
 800dfcc:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800dfd0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800dfd4:	3301      	adds	r3, #1
 800dfd6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = AdvFilterPolicy;
 800dfda:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800dfde:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800dfe2:	4413      	add	r3, r2
 800dfe4:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 800dfe8:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800dfec:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800dff0:	3301      	adds	r3, #1
 800dff2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = LocalNameLen;
 800dff6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800dffa:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800dffe:	4413      	add	r3, r2
 800e000:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 800e004:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800e008:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e00c:	3301      	adds	r3, #1
 800e00e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 800e012:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e016:	f107 0208 	add.w	r2, r7, #8
 800e01a:	4413      	add	r3, r2
 800e01c:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 800e020:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e022:	4618      	mov	r0, r3
 800e024:	f00b fff0 	bl	801a008 <memcpy>
  indx +=  LocalNameLen;
 800e028:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800e02c:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800e030:	4413      	add	r3, r2
 800e032:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  buffer[indx] = ServiceUUIDLen;
 800e036:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e03a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800e03e:	4413      	add	r3, r2
 800e040:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 800e044:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800e048:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e04c:	3301      	adds	r3, #1
 800e04e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 800e052:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e056:	f107 0208 	add.w	r2, r7, #8
 800e05a:	4413      	add	r3, r2
 800e05c:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 800e060:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800e062:	4618      	mov	r0, r3
 800e064:	f00b ffd0 	bl	801a008 <memcpy>
  indx +=  ServiceUUIDLen;  
 800e068:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800e06c:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800e070:	4413      	add	r3, r2
 800e072:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
 800e076:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800e07a:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 800e07e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e082:	f107 0208 	add.w	r2, r7, #8
 800e086:	4413      	add	r3, r2
 800e088:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 800e08c:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 800e08e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e092:	3302      	adds	r3, #2
 800e094:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
 800e098:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800e09c:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 800e0a0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e0a4:	f107 0208 	add.w	r2, r7, #8
 800e0a8:	4413      	add	r3, r2
 800e0aa:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 800e0ae:	801a      	strh	r2, [r3, #0]
  indx +=  2;    
 800e0b0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e0b4:	3302      	adds	r3, #2
 800e0b6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800e0ba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800e0be:	2218      	movs	r2, #24
 800e0c0:	2100      	movs	r1, #0
 800e0c2:	4618      	mov	r0, r3
 800e0c4:	f00b ffab 	bl	801a01e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800e0c8:	233f      	movs	r3, #63	; 0x3f
 800e0ca:	86bb      	strh	r3, [r7, #52]	; 0x34
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 800e0cc:	2383      	movs	r3, #131	; 0x83
 800e0ce:	86fb      	strh	r3, [r7, #54]	; 0x36
  rq.cparam = (void *)buffer;
 800e0d0:	f107 0308 	add.w	r3, r7, #8
 800e0d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.clen = indx;
 800e0d6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e0da:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rparam = &status;
 800e0dc:	f107 0333 	add.w	r3, r7, #51	; 0x33
 800e0e0:	647b      	str	r3, [r7, #68]	; 0x44
  rq.rlen = 1;
 800e0e2:	2301      	movs	r3, #1
 800e0e4:	64bb      	str	r3, [r7, #72]	; 0x48

  if (hci_send_req(&rq, FALSE) < 0)
 800e0e6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800e0ea:	2100      	movs	r1, #0
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	f000 fd67 	bl	800ebc0 <hci_send_req>
 800e0f2:	4603      	mov	r3, r0
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	da01      	bge.n	800e0fc <aci_gap_set_discoverable+0x1c6>
    return BLE_STATUS_TIMEOUT;
 800e0f8:	23ff      	movs	r3, #255	; 0xff
 800e0fa:	e007      	b.n	800e10c <aci_gap_set_discoverable+0x1d6>

  if (status) {
 800e0fc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e100:	2b00      	cmp	r3, #0
 800e102:	d002      	beq.n	800e10a <aci_gap_set_discoverable+0x1d4>
    return status;
 800e104:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e108:	e000      	b.n	800e10c <aci_gap_set_discoverable+0x1d6>
  }

  return 0;
 800e10a:	2300      	movs	r3, #0
}
 800e10c:	4618      	mov	r0, r3
 800e10e:	3754      	adds	r7, #84	; 0x54
 800e110:	46bd      	mov	sp, r7
 800e112:	bd90      	pop	{r4, r7, pc}

0800e114 <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 800e114:	b590      	push	{r4, r7, lr}
 800e116:	b091      	sub	sp, #68	; 0x44
 800e118:	af00      	add	r7, sp, #0
 800e11a:	603a      	str	r2, [r7, #0]
 800e11c:	461a      	mov	r2, r3
 800e11e:	4603      	mov	r3, r0
 800e120:	71fb      	strb	r3, [r7, #7]
 800e122:	460b      	mov	r3, r1
 800e124:	71bb      	strb	r3, [r7, #6]
 800e126:	4613      	mov	r3, r2
 800e128:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 800e12a:	79fb      	ldrb	r3, [r7, #7]
 800e12c:	733b      	strb	r3, [r7, #12]
  cp.oob_enable = oob_enable;
 800e12e:	79bb      	ldrb	r3, [r7, #6]
 800e130:	737b      	strb	r3, [r7, #13]
  BLUENRG_memcpy(cp.oob_data, oob_data, 16);
 800e132:	683a      	ldr	r2, [r7, #0]
 800e134:	f107 030e 	add.w	r3, r7, #14
 800e138:	6814      	ldr	r4, [r2, #0]
 800e13a:	6850      	ldr	r0, [r2, #4]
 800e13c:	6891      	ldr	r1, [r2, #8]
 800e13e:	68d2      	ldr	r2, [r2, #12]
 800e140:	601c      	str	r4, [r3, #0]
 800e142:	6058      	str	r0, [r3, #4]
 800e144:	6099      	str	r1, [r3, #8]
 800e146:	60da      	str	r2, [r3, #12]
  cp.min_encryption_key_size = min_encryption_key_size;
 800e148:	797b      	ldrb	r3, [r7, #5]
 800e14a:	77bb      	strb	r3, [r7, #30]
  cp.max_encryption_key_size = max_encryption_key_size;
 800e14c:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800e150:	77fb      	strb	r3, [r7, #31]
  cp.use_fixed_pin = use_fixed_pin;
 800e152:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800e156:	f887 3020 	strb.w	r3, [r7, #32]
  cp.fixed_pin = htobl(fixed_pin);
 800e15a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e15c:	f8c7 3021 	str.w	r3, [r7, #33]	; 0x21
  cp.bonding_mode = bonding_mode;
 800e160:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800e164:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800e168:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e16c:	2218      	movs	r2, #24
 800e16e:	2100      	movs	r1, #0
 800e170:	4618      	mov	r0, r3
 800e172:	f00b ff54 	bl	801a01e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800e176:	233f      	movs	r3, #63	; 0x3f
 800e178:	853b      	strh	r3, [r7, #40]	; 0x28
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
 800e17a:	2386      	movs	r3, #134	; 0x86
 800e17c:	857b      	strh	r3, [r7, #42]	; 0x2a
  rq.cparam = &cp;
 800e17e:	f107 030c 	add.w	r3, r7, #12
 800e182:	633b      	str	r3, [r7, #48]	; 0x30
  rq.clen = sizeof(cp);
 800e184:	231a      	movs	r3, #26
 800e186:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rparam = &status;
 800e188:	f107 030b 	add.w	r3, r7, #11
 800e18c:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rlen = 1;
 800e18e:	2301      	movs	r3, #1
 800e190:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (hci_send_req(&rq, FALSE) < 0)
 800e192:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e196:	2100      	movs	r1, #0
 800e198:	4618      	mov	r0, r3
 800e19a:	f000 fd11 	bl	800ebc0 <hci_send_req>
 800e19e:	4603      	mov	r3, r0
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	da01      	bge.n	800e1a8 <aci_gap_set_auth_requirement+0x94>
    return BLE_STATUS_TIMEOUT;
 800e1a4:	23ff      	movs	r3, #255	; 0xff
 800e1a6:	e005      	b.n	800e1b4 <aci_gap_set_auth_requirement+0xa0>

  if (status) {
 800e1a8:	7afb      	ldrb	r3, [r7, #11]
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d001      	beq.n	800e1b2 <aci_gap_set_auth_requirement+0x9e>
    return status;
 800e1ae:	7afb      	ldrb	r3, [r7, #11]
 800e1b0:	e000      	b.n	800e1b4 <aci_gap_set_auth_requirement+0xa0>
  }
    
  return 0;
 800e1b2:	2300      	movs	r3, #0
}
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	3744      	adds	r7, #68	; 0x44
 800e1b8:	46bd      	mov	sp, r7
 800e1ba:	bd90      	pop	{r4, r7, pc}

0800e1bc <aci_gap_update_adv_data>:
  return status;

}

tBleStatus aci_gap_update_adv_data(uint8_t AdvLen, const uint8_t *AdvData)
{
 800e1bc:	b580      	push	{r7, lr}
 800e1be:	b092      	sub	sp, #72	; 0x48
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	4603      	mov	r3, r0
 800e1c4:	6039      	str	r1, [r7, #0]
 800e1c6:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[32];
  uint8_t indx = 0;
 800e1c8:	2300      	movs	r3, #0
 800e1ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  if (AdvLen > (sizeof(buffer)-1))
 800e1ce:	79fb      	ldrb	r3, [r7, #7]
 800e1d0:	2b1f      	cmp	r3, #31
 800e1d2:	d901      	bls.n	800e1d8 <aci_gap_update_adv_data+0x1c>
    return BLE_STATUS_INVALID_PARAMS;
 800e1d4:	2342      	movs	r3, #66	; 0x42
 800e1d6:	e03f      	b.n	800e258 <aci_gap_update_adv_data+0x9c>

  buffer[indx] = AdvLen;
 800e1d8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800e1dc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800e1e0:	4413      	add	r3, r2
 800e1e2:	79fa      	ldrb	r2, [r7, #7]
 800e1e4:	f803 2c40 	strb.w	r2, [r3, #-64]
  indx++;
 800e1e8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800e1ec:	3301      	adds	r3, #1
 800e1ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  BLUENRG_memcpy(buffer + indx, AdvData, AdvLen);
 800e1f2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800e1f6:	f107 0208 	add.w	r2, r7, #8
 800e1fa:	4413      	add	r3, r2
 800e1fc:	79fa      	ldrb	r2, [r7, #7]
 800e1fe:	6839      	ldr	r1, [r7, #0]
 800e200:	4618      	mov	r0, r3
 800e202:	f00b ff01 	bl	801a008 <memcpy>
  indx +=  AdvLen;
 800e206:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800e20a:	79fb      	ldrb	r3, [r7, #7]
 800e20c:	4413      	add	r3, r2
 800e20e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800e212:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e216:	2218      	movs	r2, #24
 800e218:	2100      	movs	r1, #0
 800e21a:	4618      	mov	r0, r3
 800e21c:	f00b feff 	bl	801a01e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800e220:	233f      	movs	r3, #63	; 0x3f
 800e222:	85bb      	strh	r3, [r7, #44]	; 0x2c
  rq.ocf = OCF_GAP_UPDATE_ADV_DATA;
 800e224:	238e      	movs	r3, #142	; 0x8e
 800e226:	85fb      	strh	r3, [r7, #46]	; 0x2e
  rq.cparam = (void *)buffer;
 800e228:	f107 0308 	add.w	r3, r7, #8
 800e22c:	637b      	str	r3, [r7, #52]	; 0x34
  rq.clen = indx;
 800e22e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800e232:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rparam = &status;
 800e234:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800e238:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rlen = 1;
 800e23a:	2301      	movs	r3, #1
 800e23c:	643b      	str	r3, [r7, #64]	; 0x40
    
  if (hci_send_req(&rq, FALSE) < 0)
 800e23e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e242:	2100      	movs	r1, #0
 800e244:	4618      	mov	r0, r3
 800e246:	f000 fcbb 	bl	800ebc0 <hci_send_req>
 800e24a:	4603      	mov	r3, r0
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	da01      	bge.n	800e254 <aci_gap_update_adv_data+0x98>
    return BLE_STATUS_TIMEOUT;
 800e250:	23ff      	movs	r3, #255	; 0xff
 800e252:	e001      	b.n	800e258 <aci_gap_update_adv_data+0x9c>
    
  return status;
 800e254:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800e258:	4618      	mov	r0, r3
 800e25a:	3748      	adds	r7, #72	; 0x48
 800e25c:	46bd      	mov	sp, r7
 800e25e:	bd80      	pop	{r7, pc}

0800e260 <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 800e260:	b580      	push	{r7, lr}
 800e262:	b088      	sub	sp, #32
 800e264:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800e266:	f107 0308 	add.w	r3, r7, #8
 800e26a:	2218      	movs	r2, #24
 800e26c:	2100      	movs	r1, #0
 800e26e:	4618      	mov	r0, r3
 800e270:	f00b fed5 	bl	801a01e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800e274:	233f      	movs	r3, #63	; 0x3f
 800e276:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_GATT_INIT;
 800e278:	f240 1301 	movw	r3, #257	; 0x101
 800e27c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800e27e:	1dfb      	adds	r3, r7, #7
 800e280:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800e282:	2301      	movs	r3, #1
 800e284:	61fb      	str	r3, [r7, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 800e286:	f107 0308 	add.w	r3, r7, #8
 800e28a:	2100      	movs	r1, #0
 800e28c:	4618      	mov	r0, r3
 800e28e:	f000 fc97 	bl	800ebc0 <hci_send_req>
 800e292:	4603      	mov	r3, r0
 800e294:	2b00      	cmp	r3, #0
 800e296:	da01      	bge.n	800e29c <aci_gatt_init+0x3c>
    return BLE_STATUS_TIMEOUT;
 800e298:	23ff      	movs	r3, #255	; 0xff
 800e29a:	e000      	b.n	800e29e <aci_gatt_init+0x3e>

  return status;
 800e29c:	79fb      	ldrb	r3, [r7, #7]
}
 800e29e:	4618      	mov	r0, r3
 800e2a0:	3720      	adds	r7, #32
 800e2a2:	46bd      	mov	sp, r7
 800e2a4:	bd80      	pop	{r7, pc}

0800e2a6 <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 800e2a6:	b580      	push	{r7, lr}
 800e2a8:	b090      	sub	sp, #64	; 0x40
 800e2aa:	af00      	add	r7, sp, #0
 800e2ac:	6039      	str	r1, [r7, #0]
 800e2ae:	4611      	mov	r1, r2
 800e2b0:	461a      	mov	r2, r3
 800e2b2:	4603      	mov	r3, r0
 800e2b4:	71fb      	strb	r3, [r7, #7]
 800e2b6:	460b      	mov	r3, r1
 800e2b8:	71bb      	strb	r3, [r7, #6]
 800e2ba:	4613      	mov	r3, r2
 800e2bc:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
 800e2be:	2300      	movs	r3, #0
 800e2c0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_uuid_type;
 800e2c4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800e2c8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800e2cc:	4413      	add	r3, r2
 800e2ce:	79fa      	ldrb	r2, [r7, #7]
 800e2d0:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 800e2d4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800e2d8:	3301      	adds	r3, #1
 800e2da:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  if(service_uuid_type == UUID_TYPE_16){
 800e2de:	79fb      	ldrb	r3, [r7, #7]
 800e2e0:	2b01      	cmp	r3, #1
 800e2e2:	d103      	bne.n	800e2ec <aci_gatt_add_serv+0x46>
    uuid_len = 2;
 800e2e4:	2302      	movs	r3, #2
 800e2e6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800e2ea:	e002      	b.n	800e2f2 <aci_gatt_add_serv+0x4c>
  }
  else {
    uuid_len = 16;
 800e2ec:	2310      	movs	r3, #16
 800e2ee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 800e2f2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800e2f6:	f107 020c 	add.w	r2, r7, #12
 800e2fa:	4413      	add	r3, r2
 800e2fc:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800e300:	6839      	ldr	r1, [r7, #0]
 800e302:	4618      	mov	r0, r3
 800e304:	f00b fe80 	bl	801a008 <memcpy>
  indx +=  uuid_len;
 800e308:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 800e30c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e310:	4413      	add	r3, r2
 800e312:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_type;
 800e316:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800e31a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800e31e:	4413      	add	r3, r2
 800e320:	79ba      	ldrb	r2, [r7, #6]
 800e322:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 800e326:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800e32a:	3301      	adds	r3, #1
 800e32c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = max_attr_records;
 800e330:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800e334:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800e338:	4413      	add	r3, r2
 800e33a:	797a      	ldrb	r2, [r7, #5]
 800e33c:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 800e340:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800e344:	3301      	adds	r3, #1
 800e346:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800e34a:	f107 0320 	add.w	r3, r7, #32
 800e34e:	2203      	movs	r2, #3
 800e350:	2100      	movs	r1, #0
 800e352:	4618      	mov	r0, r3
 800e354:	f00b fe63 	bl	801a01e <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800e358:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e35c:	2218      	movs	r2, #24
 800e35e:	2100      	movs	r1, #0
 800e360:	4618      	mov	r0, r3
 800e362:	f00b fe5c 	bl	801a01e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800e366:	233f      	movs	r3, #63	; 0x3f
 800e368:	84bb      	strh	r3, [r7, #36]	; 0x24
  rq.ocf = OCF_GATT_ADD_SERV;
 800e36a:	f44f 7381 	mov.w	r3, #258	; 0x102
 800e36e:	84fb      	strh	r3, [r7, #38]	; 0x26
  rq.cparam = (void *)buffer;
 800e370:	f107 030c 	add.w	r3, r7, #12
 800e374:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.clen = indx;
 800e376:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800e37a:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rparam = &resp;
 800e37c:	f107 0320 	add.w	r3, r7, #32
 800e380:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 800e382:	2303      	movs	r3, #3
 800e384:	63bb      	str	r3, [r7, #56]	; 0x38

  if (hci_send_req(&rq, FALSE) < 0)
 800e386:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e38a:	2100      	movs	r1, #0
 800e38c:	4618      	mov	r0, r3
 800e38e:	f000 fc17 	bl	800ebc0 <hci_send_req>
 800e392:	4603      	mov	r3, r0
 800e394:	2b00      	cmp	r3, #0
 800e396:	da01      	bge.n	800e39c <aci_gatt_add_serv+0xf6>
    return BLE_STATUS_TIMEOUT;
 800e398:	23ff      	movs	r3, #255	; 0xff
 800e39a:	e00c      	b.n	800e3b6 <aci_gatt_add_serv+0x110>

  if (resp.status) {
 800e39c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d002      	beq.n	800e3aa <aci_gatt_add_serv+0x104>
    return resp.status;
 800e3a4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e3a8:	e005      	b.n	800e3b6 <aci_gatt_add_serv+0x110>
  }
    
  *serviceHandle = btohs(resp.handle);
 800e3aa:	f8b7 3021 	ldrh.w	r3, [r7, #33]	; 0x21
 800e3ae:	b29a      	uxth	r2, r3
 800e3b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e3b2:	801a      	strh	r2, [r3, #0]

  return 0;
 800e3b4:	2300      	movs	r3, #0
}
 800e3b6:	4618      	mov	r0, r3
 800e3b8:	3740      	adds	r7, #64	; 0x40
 800e3ba:	46bd      	mov	sp, r7
 800e3bc:	bd80      	pop	{r7, pc}

0800e3be <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 800e3be:	b580      	push	{r7, lr}
 800e3c0:	b092      	sub	sp, #72	; 0x48
 800e3c2:	af00      	add	r7, sp, #0
 800e3c4:	603a      	str	r2, [r7, #0]
 800e3c6:	461a      	mov	r2, r3
 800e3c8:	4603      	mov	r3, r0
 800e3ca:	80fb      	strh	r3, [r7, #6]
 800e3cc:	460b      	mov	r3, r1
 800e3ce:	717b      	strb	r3, [r7, #5]
 800e3d0:	4613      	mov	r3, r2
 800e3d2:	713b      	strb	r3, [r7, #4]
  struct hci_request rq;
  gatt_add_serv_rp resp;
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
 800e3d4:	2300      	movs	r3, #0
 800e3d6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  serviceHandle = htobs(serviceHandle);
 800e3da:	88fb      	ldrh	r3, [r7, #6]
 800e3dc:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 800e3de:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800e3e2:	f107 020c 	add.w	r2, r7, #12
 800e3e6:	4413      	add	r3, r2
 800e3e8:	88fa      	ldrh	r2, [r7, #6]
 800e3ea:	801a      	strh	r2, [r3, #0]
  indx += 2;
 800e3ec:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800e3f0:	3302      	adds	r3, #2
 800e3f2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charUuidType;
 800e3f6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800e3fa:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800e3fe:	4413      	add	r3, r2
 800e400:	797a      	ldrb	r2, [r7, #5]
 800e402:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800e406:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800e40a:	3301      	adds	r3, #1
 800e40c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  if(charUuidType == UUID_TYPE_16){
 800e410:	797b      	ldrb	r3, [r7, #5]
 800e412:	2b01      	cmp	r3, #1
 800e414:	d103      	bne.n	800e41e <aci_gatt_add_char+0x60>
    uuid_len = 2;
 800e416:	2302      	movs	r3, #2
 800e418:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800e41c:	e002      	b.n	800e424 <aci_gatt_add_char+0x66>
  }
  else {
    uuid_len = 16;
 800e41e:	2310      	movs	r3, #16
 800e420:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 800e424:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800e428:	f107 020c 	add.w	r2, r7, #12
 800e42c:	4413      	add	r3, r2
 800e42e:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800e432:	6839      	ldr	r1, [r7, #0]
 800e434:	4618      	mov	r0, r3
 800e436:	f00b fde7 	bl	801a008 <memcpy>
  indx +=  uuid_len;
 800e43a:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 800e43e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800e442:	4413      	add	r3, r2
 800e444:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charValueLen;
 800e448:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800e44c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800e450:	4413      	add	r3, r2
 800e452:	793a      	ldrb	r2, [r7, #4]
 800e454:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800e458:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800e45c:	3301      	adds	r3, #1
 800e45e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charProperties;
 800e462:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800e466:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800e46a:	4413      	add	r3, r2
 800e46c:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800e470:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800e474:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800e478:	3301      	adds	r3, #1
 800e47a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = secPermissions;
 800e47e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800e482:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800e486:	4413      	add	r3, r2
 800e488:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 800e48c:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800e490:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800e494:	3301      	adds	r3, #1
 800e496:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = gattEvtMask;
 800e49a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800e49e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800e4a2:	4413      	add	r3, r2
 800e4a4:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800e4a8:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800e4ac:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800e4b0:	3301      	adds	r3, #1
 800e4b2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = encryKeySize;
 800e4b6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800e4ba:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800e4be:	4413      	add	r3, r2
 800e4c0:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 800e4c4:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800e4c8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800e4cc:	3301      	adds	r3, #1
 800e4ce:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = isVariable;
 800e4d2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800e4d6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800e4da:	4413      	add	r3, r2
 800e4dc:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 800e4e0:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800e4e4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800e4e8:	3301      	adds	r3, #1
 800e4ea:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800e4ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e4f2:	2203      	movs	r2, #3
 800e4f4:	2100      	movs	r1, #0
 800e4f6:	4618      	mov	r0, r3
 800e4f8:	f00b fd91 	bl	801a01e <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800e4fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e500:	2218      	movs	r2, #24
 800e502:	2100      	movs	r1, #0
 800e504:	4618      	mov	r0, r3
 800e506:	f00b fd8a 	bl	801a01e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800e50a:	233f      	movs	r3, #63	; 0x3f
 800e50c:	85bb      	strh	r3, [r7, #44]	; 0x2c
  rq.ocf = OCF_GATT_ADD_CHAR;
 800e50e:	f44f 7382 	mov.w	r3, #260	; 0x104
 800e512:	85fb      	strh	r3, [r7, #46]	; 0x2e
  rq.cparam = (void *)buffer;
 800e514:	f107 030c 	add.w	r3, r7, #12
 800e518:	637b      	str	r3, [r7, #52]	; 0x34
  rq.clen = indx;
 800e51a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800e51e:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rparam = &resp;
 800e520:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e524:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 800e526:	2303      	movs	r3, #3
 800e528:	643b      	str	r3, [r7, #64]	; 0x40

  if (hci_send_req(&rq, FALSE) < 0)
 800e52a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e52e:	2100      	movs	r1, #0
 800e530:	4618      	mov	r0, r3
 800e532:	f000 fb45 	bl	800ebc0 <hci_send_req>
 800e536:	4603      	mov	r3, r0
 800e538:	2b00      	cmp	r3, #0
 800e53a:	da01      	bge.n	800e540 <aci_gatt_add_char+0x182>
    return BLE_STATUS_TIMEOUT;
 800e53c:	23ff      	movs	r3, #255	; 0xff
 800e53e:	e00c      	b.n	800e55a <aci_gatt_add_char+0x19c>

  if (resp.status) {
 800e540:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e544:	2b00      	cmp	r3, #0
 800e546:	d002      	beq.n	800e54e <aci_gatt_add_char+0x190>
    return resp.status;
 800e548:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e54c:	e005      	b.n	800e55a <aci_gatt_add_char+0x19c>
  }
    
  *charHandle = btohs(resp.handle);
 800e54e:	f8b7 3029 	ldrh.w	r3, [r7, #41]	; 0x29
 800e552:	b29a      	uxth	r2, r3
 800e554:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e556:	801a      	strh	r2, [r3, #0]

  return 0;
 800e558:	2300      	movs	r3, #0
}
 800e55a:	4618      	mov	r0, r3
 800e55c:	3748      	adds	r7, #72	; 0x48
 800e55e:	46bd      	mov	sp, r7
 800e560:	bd80      	pop	{r7, pc}

0800e562 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
                                      const void *charValue)
{
 800e562:	b590      	push	{r4, r7, lr}
 800e564:	b0ab      	sub	sp, #172	; 0xac
 800e566:	af00      	add	r7, sp, #0
 800e568:	4604      	mov	r4, r0
 800e56a:	4608      	mov	r0, r1
 800e56c:	4611      	mov	r1, r2
 800e56e:	461a      	mov	r2, r3
 800e570:	4623      	mov	r3, r4
 800e572:	80fb      	strh	r3, [r7, #6]
 800e574:	4603      	mov	r3, r0
 800e576:	80bb      	strh	r3, [r7, #4]
 800e578:	460b      	mov	r3, r1
 800e57a:	70fb      	strb	r3, [r7, #3]
 800e57c:	4613      	mov	r3, r2
 800e57e:	70bb      	strb	r3, [r7, #2]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 800e580:	2300      	movs	r3, #0
 800e582:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 800e586:	78bb      	ldrb	r3, [r7, #2]
 800e588:	3306      	adds	r3, #6
 800e58a:	2b80      	cmp	r3, #128	; 0x80
 800e58c:	dd01      	ble.n	800e592 <aci_gatt_update_char_value+0x30>
    return BLE_STATUS_INVALID_PARAMS;
 800e58e:	2342      	movs	r3, #66	; 0x42
 800e590:	e076      	b.n	800e680 <aci_gatt_update_char_value+0x11e>

  servHandle = htobs(servHandle);
 800e592:	88fb      	ldrh	r3, [r7, #6]
 800e594:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 800e596:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800e59a:	f107 0208 	add.w	r2, r7, #8
 800e59e:	4413      	add	r3, r2
 800e5a0:	88fa      	ldrh	r2, [r7, #6]
 800e5a2:	801a      	strh	r2, [r3, #0]
  indx += 2;
 800e5a4:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800e5a8:	3302      	adds	r3, #2
 800e5aa:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  charHandle = htobs(charHandle);
 800e5ae:	88bb      	ldrh	r3, [r7, #4]
 800e5b0:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 800e5b2:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800e5b6:	f107 0208 	add.w	r2, r7, #8
 800e5ba:	4413      	add	r3, r2
 800e5bc:	88ba      	ldrh	r2, [r7, #4]
 800e5be:	801a      	strh	r2, [r3, #0]
  indx += 2;
 800e5c0:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800e5c4:	3302      	adds	r3, #2
 800e5c6:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = charValOffset;
 800e5ca:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800e5ce:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800e5d2:	4413      	add	r3, r2
 800e5d4:	78fa      	ldrb	r2, [r7, #3]
 800e5d6:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 800e5da:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800e5de:	3301      	adds	r3, #1
 800e5e0:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = charValueLen;
 800e5e4:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800e5e8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800e5ec:	4413      	add	r3, r2
 800e5ee:	78ba      	ldrb	r2, [r7, #2]
 800e5f0:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 800e5f4:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800e5f8:	3301      	adds	r3, #1
 800e5fa:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 800e5fe:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800e602:	f107 0208 	add.w	r2, r7, #8
 800e606:	4413      	add	r3, r2
 800e608:	78ba      	ldrb	r2, [r7, #2]
 800e60a:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800e60e:	4618      	mov	r0, r3
 800e610:	f00b fcfa 	bl	801a008 <memcpy>
  indx +=  charValueLen;
 800e614:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 800e618:	78bb      	ldrb	r3, [r7, #2]
 800e61a:	4413      	add	r3, r2
 800e61c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800e620:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e624:	2218      	movs	r2, #24
 800e626:	2100      	movs	r1, #0
 800e628:	4618      	mov	r0, r3
 800e62a:	f00b fcf8 	bl	801a01e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800e62e:	233f      	movs	r3, #63	; 0x3f
 800e630:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 800e634:	f44f 7383 	mov.w	r3, #262	; 0x106
 800e638:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  rq.cparam = (void *)buffer;
 800e63c:	f107 0308 	add.w	r3, r7, #8
 800e640:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  rq.clen = indx;
 800e644:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800e648:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  rq.rparam = &status;
 800e64c:	f107 038b 	add.w	r3, r7, #139	; 0x8b
 800e650:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  rq.rlen = 1;
 800e654:	2301      	movs	r3, #1
 800e656:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 800e65a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e65e:	2100      	movs	r1, #0
 800e660:	4618      	mov	r0, r3
 800e662:	f000 faad 	bl	800ebc0 <hci_send_req>
 800e666:	4603      	mov	r3, r0
 800e668:	2b00      	cmp	r3, #0
 800e66a:	da01      	bge.n	800e670 <aci_gatt_update_char_value+0x10e>
    return BLE_STATUS_TIMEOUT;
 800e66c:	23ff      	movs	r3, #255	; 0xff
 800e66e:	e007      	b.n	800e680 <aci_gatt_update_char_value+0x11e>

  if (status) {
 800e670:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800e674:	2b00      	cmp	r3, #0
 800e676:	d002      	beq.n	800e67e <aci_gatt_update_char_value+0x11c>
    return status;
 800e678:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800e67c:	e000      	b.n	800e680 <aci_gatt_update_char_value+0x11e>
  }

  return 0;
 800e67e:	2300      	movs	r3, #0
}
 800e680:	4618      	mov	r0, r3
 800e682:	37ac      	adds	r7, #172	; 0xac
 800e684:	46bd      	mov	sp, r7
 800e686:	bd90      	pop	{r4, r7, pc}

0800e688 <aci_gatt_allow_read>:

  return 0;
}

tBleStatus aci_gatt_allow_read(uint16_t conn_handle)
{
 800e688:	b580      	push	{r7, lr}
 800e68a:	b08a      	sub	sp, #40	; 0x28
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	4603      	mov	r3, r0
 800e690:	80fb      	strh	r3, [r7, #6]
    struct hci_request rq;
    gatt_allow_read_cp cp;
    uint8_t status;
    
    cp.conn_handle = htobs(conn_handle);
 800e692:	88fb      	ldrh	r3, [r7, #6]
 800e694:	81bb      	strh	r3, [r7, #12]

    BLUENRG_memset(&rq, 0, sizeof(rq));
 800e696:	f107 0310 	add.w	r3, r7, #16
 800e69a:	2218      	movs	r2, #24
 800e69c:	2100      	movs	r1, #0
 800e69e:	4618      	mov	r0, r3
 800e6a0:	f00b fcbd 	bl	801a01e <memset>
    rq.ogf = OGF_VENDOR_CMD;
 800e6a4:	233f      	movs	r3, #63	; 0x3f
 800e6a6:	823b      	strh	r3, [r7, #16]
    rq.ocf = OCF_GATT_ALLOW_READ;
 800e6a8:	f240 1327 	movw	r3, #295	; 0x127
 800e6ac:	827b      	strh	r3, [r7, #18]
    rq.cparam = &cp;
 800e6ae:	f107 030c 	add.w	r3, r7, #12
 800e6b2:	61bb      	str	r3, [r7, #24]
    rq.clen = GATT_ALLOW_READ_CP_SIZE;
 800e6b4:	2302      	movs	r3, #2
 800e6b6:	61fb      	str	r3, [r7, #28]
    rq.rparam = &status;
 800e6b8:	f107 030b 	add.w	r3, r7, #11
 800e6bc:	623b      	str	r3, [r7, #32]
    rq.rlen = 1;
 800e6be:	2301      	movs	r3, #1
 800e6c0:	627b      	str	r3, [r7, #36]	; 0x24

    if (hci_send_req(&rq, FALSE) < 0)
 800e6c2:	f107 0310 	add.w	r3, r7, #16
 800e6c6:	2100      	movs	r1, #0
 800e6c8:	4618      	mov	r0, r3
 800e6ca:	f000 fa79 	bl	800ebc0 <hci_send_req>
 800e6ce:	4603      	mov	r3, r0
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	da01      	bge.n	800e6d8 <aci_gatt_allow_read+0x50>
      return BLE_STATUS_TIMEOUT;
 800e6d4:	23ff      	movs	r3, #255	; 0xff
 800e6d6:	e000      	b.n	800e6da <aci_gatt_allow_read+0x52>

    return status;
 800e6d8:	7afb      	ldrb	r3, [r7, #11]
}
 800e6da:	4618      	mov	r0, r3
 800e6dc:	3728      	adds	r7, #40	; 0x28
 800e6de:	46bd      	mov	sp, r7
 800e6e0:	bd80      	pop	{r7, pc}

0800e6e2 <aci_hal_read_config_data>:

  return status;
}

tBleStatus aci_hal_read_config_data(uint8_t offset, uint16_t data_len, uint8_t *data_len_out_p, uint8_t *data)
{
 800e6e2:	b580      	push	{r7, lr}
 800e6e4:	b0ac      	sub	sp, #176	; 0xb0
 800e6e6:	af00      	add	r7, sp, #0
 800e6e8:	60ba      	str	r2, [r7, #8]
 800e6ea:	607b      	str	r3, [r7, #4]
 800e6ec:	4603      	mov	r3, r0
 800e6ee:	73fb      	strb	r3, [r7, #15]
 800e6f0:	460b      	mov	r3, r1
 800e6f2:	81bb      	strh	r3, [r7, #12]
  struct hci_request rq;
  hal_read_config_data_cp cp;
  hal_read_config_data_rp rp;
  
  cp.offset = offset;
 800e6f4:	7bfb      	ldrb	r3, [r7, #15]
 800e6f6:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800e6fa:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800e6fe:	2218      	movs	r2, #24
 800e700:	2100      	movs	r1, #0
 800e702:	4618      	mov	r0, r3
 800e704:	f00b fc8b 	bl	801a01e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800e708:	233f      	movs	r3, #63	; 0x3f
 800e70a:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
  rq.ocf = OCF_HAL_READ_CONFIG_DATA;
 800e70e:	230d      	movs	r3, #13
 800e710:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  rq.cparam = &cp;
 800e714:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800e718:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  rq.clen = sizeof(cp);
 800e71c:	2301      	movs	r3, #1
 800e71e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  rq.rparam = &rp;
 800e722:	f107 0314 	add.w	r3, r7, #20
 800e726:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  rq.rlen = sizeof(rp);
 800e72a:	2380      	movs	r3, #128	; 0x80
 800e72c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  
  if (hci_send_req(&rq, FALSE) < 0)
 800e730:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800e734:	2100      	movs	r1, #0
 800e736:	4618      	mov	r0, r3
 800e738:	f000 fa42 	bl	800ebc0 <hci_send_req>
 800e73c:	4603      	mov	r3, r0
 800e73e:	2b00      	cmp	r3, #0
 800e740:	da01      	bge.n	800e746 <aci_hal_read_config_data+0x64>
    return BLE_STATUS_TIMEOUT;
 800e742:	23ff      	movs	r3, #255	; 0xff
 800e744:	e01c      	b.n	800e780 <aci_hal_read_config_data+0x9e>
  
  if(rp.status)
 800e746:	7d3b      	ldrb	r3, [r7, #20]
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d001      	beq.n	800e750 <aci_hal_read_config_data+0x6e>
    return rp.status;
 800e74c:	7d3b      	ldrb	r3, [r7, #20]
 800e74e:	e017      	b.n	800e780 <aci_hal_read_config_data+0x9e>
  
  *data_len_out_p = rq.rlen-1;
 800e750:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e754:	b2db      	uxtb	r3, r3
 800e756:	3b01      	subs	r3, #1
 800e758:	b2da      	uxtb	r2, r3
 800e75a:	68bb      	ldr	r3, [r7, #8]
 800e75c:	701a      	strb	r2, [r3, #0]
  
  BLUENRG_memcpy(data, rp.data, MIN(data_len, *data_len_out_p));
 800e75e:	68bb      	ldr	r3, [r7, #8]
 800e760:	781b      	ldrb	r3, [r3, #0]
 800e762:	b29b      	uxth	r3, r3
 800e764:	89ba      	ldrh	r2, [r7, #12]
 800e766:	4293      	cmp	r3, r2
 800e768:	bf28      	it	cs
 800e76a:	4613      	movcs	r3, r2
 800e76c:	b29b      	uxth	r3, r3
 800e76e:	461a      	mov	r2, r3
 800e770:	f107 0314 	add.w	r3, r7, #20
 800e774:	3301      	adds	r3, #1
 800e776:	4619      	mov	r1, r3
 800e778:	6878      	ldr	r0, [r7, #4]
 800e77a:	f00b fc45 	bl	801a008 <memcpy>
  
  return 0;
 800e77e:	2300      	movs	r3, #0
}
 800e780:	4618      	mov	r0, r3
 800e782:	37b0      	adds	r7, #176	; 0xb0
 800e784:	46bd      	mov	sp, r7
 800e786:	bd80      	pop	{r7, pc}

0800e788 <aci_hal_set_tx_power_level>:

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 800e788:	b580      	push	{r7, lr}
 800e78a:	b08a      	sub	sp, #40	; 0x28
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	4603      	mov	r3, r0
 800e790:	460a      	mov	r2, r1
 800e792:	71fb      	strb	r3, [r7, #7]
 800e794:	4613      	mov	r3, r2
 800e796:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  hal_set_tx_power_level_cp cp;    
  uint8_t status;
    
  cp.en_high_power = en_high_power;
 800e798:	79fb      	ldrb	r3, [r7, #7]
 800e79a:	733b      	strb	r3, [r7, #12]
  cp.pa_level = pa_level;
 800e79c:	79bb      	ldrb	r3, [r7, #6]
 800e79e:	737b      	strb	r3, [r7, #13]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800e7a0:	f107 0310 	add.w	r3, r7, #16
 800e7a4:	2218      	movs	r2, #24
 800e7a6:	2100      	movs	r1, #0
 800e7a8:	4618      	mov	r0, r3
 800e7aa:	f00b fc38 	bl	801a01e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800e7ae:	233f      	movs	r3, #63	; 0x3f
 800e7b0:	823b      	strh	r3, [r7, #16]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
 800e7b2:	230f      	movs	r3, #15
 800e7b4:	827b      	strh	r3, [r7, #18]
  rq.cparam = &cp;
 800e7b6:	f107 030c 	add.w	r3, r7, #12
 800e7ba:	61bb      	str	r3, [r7, #24]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 800e7bc:	2302      	movs	r3, #2
 800e7be:	61fb      	str	r3, [r7, #28]
  rq.rparam = &status;
 800e7c0:	f107 030b 	add.w	r3, r7, #11
 800e7c4:	623b      	str	r3, [r7, #32]
  rq.rlen = 1;
 800e7c6:	2301      	movs	r3, #1
 800e7c8:	627b      	str	r3, [r7, #36]	; 0x24

  if (hci_send_req(&rq, FALSE) < 0)
 800e7ca:	f107 0310 	add.w	r3, r7, #16
 800e7ce:	2100      	movs	r1, #0
 800e7d0:	4618      	mov	r0, r3
 800e7d2:	f000 f9f5 	bl	800ebc0 <hci_send_req>
 800e7d6:	4603      	mov	r3, r0
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	da01      	bge.n	800e7e0 <aci_hal_set_tx_power_level+0x58>
    return BLE_STATUS_TIMEOUT;
 800e7dc:	23ff      	movs	r3, #255	; 0xff
 800e7de:	e000      	b.n	800e7e2 <aci_hal_set_tx_power_level+0x5a>

  return status;
 800e7e0:	7afb      	ldrb	r3, [r7, #11]
}
 800e7e2:	4618      	mov	r0, r3
 800e7e4:	3728      	adds	r7, #40	; 0x28
 800e7e6:	46bd      	mov	sp, r7
 800e7e8:	bd80      	pop	{r7, pc}

0800e7ea <getBlueNRGVersion>:
#include "hci.h"
#include "hci_le.h"
#include "string.h"

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 800e7ea:	b590      	push	{r4, r7, lr}
 800e7ec:	b089      	sub	sp, #36	; 0x24
 800e7ee:	af02      	add	r7, sp, #8
 800e7f0:	6078      	str	r0, [r7, #4]
 800e7f2:	6039      	str	r1, [r7, #0]
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 800e7f4:	f107 0410 	add.w	r4, r7, #16
 800e7f8:	f107 0215 	add.w	r2, r7, #21
 800e7fc:	f107 0112 	add.w	r1, r7, #18
 800e800:	f107 0016 	add.w	r0, r7, #22
 800e804:	f107 030e 	add.w	r3, r7, #14
 800e808:	9300      	str	r3, [sp, #0]
 800e80a:	4623      	mov	r3, r4
 800e80c:	f000 f853 	bl	800e8b6 <hci_le_read_local_version>
 800e810:	4603      	mov	r3, r0
 800e812:	75fb      	strb	r3, [r7, #23]
				     &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 800e814:	7dfb      	ldrb	r3, [r7, #23]
 800e816:	2b00      	cmp	r3, #0
 800e818:	d126      	bne.n	800e868 <getBlueNRGVersion+0x7e>
    *hwVersion = hci_revision >> 8;
 800e81a:	8a7b      	ldrh	r3, [r7, #18]
 800e81c:	0a1b      	lsrs	r3, r3, #8
 800e81e:	b29b      	uxth	r3, r3
 800e820:	b2da      	uxtb	r2, r3
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	701a      	strb	r2, [r3, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
 800e826:	8a7b      	ldrh	r3, [r7, #18]
 800e828:	021b      	lsls	r3, r3, #8
 800e82a:	b29a      	uxth	r2, r3
 800e82c:	683b      	ldr	r3, [r7, #0]
 800e82e:	801a      	strh	r2, [r3, #0]
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 800e830:	683b      	ldr	r3, [r7, #0]
 800e832:	881b      	ldrh	r3, [r3, #0]
 800e834:	b21a      	sxth	r2, r3
 800e836:	89fb      	ldrh	r3, [r7, #14]
 800e838:	091b      	lsrs	r3, r3, #4
 800e83a:	b29b      	uxth	r3, r3
 800e83c:	011b      	lsls	r3, r3, #4
 800e83e:	b21b      	sxth	r3, r3
 800e840:	b2db      	uxtb	r3, r3
 800e842:	b21b      	sxth	r3, r3
 800e844:	4313      	orrs	r3, r2
 800e846:	b21b      	sxth	r3, r3
 800e848:	b29a      	uxth	r2, r3
 800e84a:	683b      	ldr	r3, [r7, #0]
 800e84c:	801a      	strh	r2, [r3, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 800e84e:	683b      	ldr	r3, [r7, #0]
 800e850:	881b      	ldrh	r3, [r3, #0]
 800e852:	b21a      	sxth	r2, r3
 800e854:	89fb      	ldrh	r3, [r7, #14]
 800e856:	b21b      	sxth	r3, r3
 800e858:	f003 030f 	and.w	r3, r3, #15
 800e85c:	b21b      	sxth	r3, r3
 800e85e:	4313      	orrs	r3, r2
 800e860:	b21b      	sxth	r3, r3
 800e862:	b29a      	uxth	r2, r3
 800e864:	683b      	ldr	r3, [r7, #0]
 800e866:	801a      	strh	r2, [r3, #0]
  }
  return status;
 800e868:	7dfb      	ldrb	r3, [r7, #23]
}
 800e86a:	4618      	mov	r0, r3
 800e86c:	371c      	adds	r7, #28
 800e86e:	46bd      	mov	sp, r7
 800e870:	bd90      	pop	{r4, r7, pc}

0800e872 <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 800e872:	b580      	push	{r7, lr}
 800e874:	b088      	sub	sp, #32
 800e876:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800e878:	f107 0308 	add.w	r3, r7, #8
 800e87c:	2218      	movs	r2, #24
 800e87e:	2100      	movs	r1, #0
 800e880:	4618      	mov	r0, r3
 800e882:	f00b fbcc 	bl	801a01e <memset>
  rq.ogf = OGF_HOST_CTL;
 800e886:	2303      	movs	r3, #3
 800e888:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_RESET;
 800e88a:	2303      	movs	r3, #3
 800e88c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800e88e:	1dfb      	adds	r3, r7, #7
 800e890:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800e892:	2301      	movs	r3, #1
 800e894:	61fb      	str	r3, [r7, #28]
  
  if (hci_send_req(&rq, FALSE) < 0)
 800e896:	f107 0308 	add.w	r3, r7, #8
 800e89a:	2100      	movs	r1, #0
 800e89c:	4618      	mov	r0, r3
 800e89e:	f000 f98f 	bl	800ebc0 <hci_send_req>
 800e8a2:	4603      	mov	r3, r0
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	da01      	bge.n	800e8ac <hci_reset+0x3a>
    return BLE_STATUS_TIMEOUT;
 800e8a8:	23ff      	movs	r3, #255	; 0xff
 800e8aa:	e000      	b.n	800e8ae <hci_reset+0x3c>
  
  return status;  
 800e8ac:	79fb      	ldrb	r3, [r7, #7]
}
 800e8ae:	4618      	mov	r0, r3
 800e8b0:	3720      	adds	r7, #32
 800e8b2:	46bd      	mov	sp, r7
 800e8b4:	bd80      	pop	{r7, pc}

0800e8b6 <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 800e8b6:	b580      	push	{r7, lr}
 800e8b8:	b08e      	sub	sp, #56	; 0x38
 800e8ba:	af00      	add	r7, sp, #0
 800e8bc:	60f8      	str	r0, [r7, #12]
 800e8be:	60b9      	str	r1, [r7, #8]
 800e8c0:	607a      	str	r2, [r7, #4]
 800e8c2:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  read_local_version_rp resp;
  
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800e8c4:	f107 0314 	add.w	r3, r7, #20
 800e8c8:	2209      	movs	r2, #9
 800e8ca:	2100      	movs	r1, #0
 800e8cc:	4618      	mov	r0, r3
 800e8ce:	f00b fba6 	bl	801a01e <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800e8d2:	f107 0320 	add.w	r3, r7, #32
 800e8d6:	2218      	movs	r2, #24
 800e8d8:	2100      	movs	r1, #0
 800e8da:	4618      	mov	r0, r3
 800e8dc:	f00b fb9f 	bl	801a01e <memset>
  rq.ogf = OGF_INFO_PARAM;
 800e8e0:	2304      	movs	r3, #4
 800e8e2:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_READ_LOCAL_VERSION;
 800e8e4:	2301      	movs	r3, #1
 800e8e6:	847b      	strh	r3, [r7, #34]	; 0x22
  rq.cparam = NULL;
 800e8e8:	2300      	movs	r3, #0
 800e8ea:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.clen = 0;
 800e8ec:	2300      	movs	r3, #0
 800e8ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.rparam = &resp;
 800e8f0:	f107 0314 	add.w	r3, r7, #20
 800e8f4:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 800e8f6:	2309      	movs	r3, #9
 800e8f8:	637b      	str	r3, [r7, #52]	; 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 800e8fa:	f107 0320 	add.w	r3, r7, #32
 800e8fe:	2100      	movs	r1, #0
 800e900:	4618      	mov	r0, r3
 800e902:	f000 f95d 	bl	800ebc0 <hci_send_req>
 800e906:	4603      	mov	r3, r0
 800e908:	2b00      	cmp	r3, #0
 800e90a:	da01      	bge.n	800e910 <hci_le_read_local_version+0x5a>
    return BLE_STATUS_TIMEOUT;
 800e90c:	23ff      	movs	r3, #255	; 0xff
 800e90e:	e018      	b.n	800e942 <hci_le_read_local_version+0x8c>
  
  if (resp.status) {
 800e910:	7d3b      	ldrb	r3, [r7, #20]
 800e912:	2b00      	cmp	r3, #0
 800e914:	d001      	beq.n	800e91a <hci_le_read_local_version+0x64>
    return resp.status;
 800e916:	7d3b      	ldrb	r3, [r7, #20]
 800e918:	e013      	b.n	800e942 <hci_le_read_local_version+0x8c>
  }
  
  
  *hci_version = resp.hci_version;
 800e91a:	7d7a      	ldrb	r2, [r7, #21]
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	701a      	strb	r2, [r3, #0]
  *hci_revision =  btohs(resp.hci_revision);
 800e920:	8afa      	ldrh	r2, [r7, #22]
 800e922:	68bb      	ldr	r3, [r7, #8]
 800e924:	801a      	strh	r2, [r3, #0]
  *lmp_pal_version = resp.lmp_pal_version;
 800e926:	7e3a      	ldrb	r2, [r7, #24]
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	701a      	strb	r2, [r3, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 800e92c:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 800e930:	b29a      	uxth	r2, r3
 800e932:	683b      	ldr	r3, [r7, #0]
 800e934:	801a      	strh	r2, [r3, #0]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 800e936:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 800e93a:	b29a      	uxth	r2, r3
 800e93c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e93e:	801a      	strh	r2, [r3, #0]
  
  return 0;
 800e940:	2300      	movs	r3, #0
}
 800e942:	4618      	mov	r0, r3
 800e944:	3738      	adds	r7, #56	; 0x38
 800e946:	46bd      	mov	sp, r7
 800e948:	bd80      	pop	{r7, pc}

0800e94a <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 800e94a:	b580      	push	{r7, lr}
 800e94c:	b092      	sub	sp, #72	; 0x48
 800e94e:	af00      	add	r7, sp, #0
 800e950:	4603      	mov	r3, r0
 800e952:	6039      	str	r1, [r7, #0]
 800e954:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 800e956:	f107 0310 	add.w	r3, r7, #16
 800e95a:	2220      	movs	r2, #32
 800e95c:	2100      	movs	r1, #0
 800e95e:	4618      	mov	r0, r3
 800e960:	f00b fb5d 	bl	801a01e <memset>
  scan_resp_cp.length = length;
 800e964:	79fb      	ldrb	r3, [r7, #7]
 800e966:	743b      	strb	r3, [r7, #16]
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 800e968:	79fb      	ldrb	r3, [r7, #7]
 800e96a:	2b1f      	cmp	r3, #31
 800e96c:	bf28      	it	cs
 800e96e:	231f      	movcs	r3, #31
 800e970:	b2db      	uxtb	r3, r3
 800e972:	461a      	mov	r2, r3
 800e974:	f107 0310 	add.w	r3, r7, #16
 800e978:	3301      	adds	r3, #1
 800e97a:	6839      	ldr	r1, [r7, #0]
 800e97c:	4618      	mov	r0, r3
 800e97e:	f00b fb43 	bl	801a008 <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800e982:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e986:	2218      	movs	r2, #24
 800e988:	2100      	movs	r1, #0
 800e98a:	4618      	mov	r0, r3
 800e98c:	f00b fb47 	bl	801a01e <memset>
  rq.ogf = OGF_LE_CTL;
 800e990:	2308      	movs	r3, #8
 800e992:	863b      	strh	r3, [r7, #48]	; 0x30
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
 800e994:	2309      	movs	r3, #9
 800e996:	867b      	strh	r3, [r7, #50]	; 0x32
  rq.cparam = &scan_resp_cp;
 800e998:	f107 0310 	add.w	r3, r7, #16
 800e99c:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 800e99e:	2320      	movs	r3, #32
 800e9a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rparam = &status;
 800e9a2:	f107 030f 	add.w	r3, r7, #15
 800e9a6:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rlen = 1;
 800e9a8:	2301      	movs	r3, #1
 800e9aa:	647b      	str	r3, [r7, #68]	; 0x44
  
  if (hci_send_req(&rq, FALSE) < 0)
 800e9ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e9b0:	2100      	movs	r1, #0
 800e9b2:	4618      	mov	r0, r3
 800e9b4:	f000 f904 	bl	800ebc0 <hci_send_req>
 800e9b8:	4603      	mov	r3, r0
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	da01      	bge.n	800e9c2 <hci_le_set_scan_resp_data+0x78>
    return BLE_STATUS_TIMEOUT;
 800e9be:	23ff      	movs	r3, #255	; 0xff
 800e9c0:	e000      	b.n	800e9c4 <hci_le_set_scan_resp_data+0x7a>
  
  return status;
 800e9c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9c4:	4618      	mov	r0, r3
 800e9c6:	3748      	adds	r7, #72	; 0x48
 800e9c8:	46bd      	mov	sp, r7
 800e9ca:	bd80      	pop	{r7, pc}

0800e9cc <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 800e9cc:	b480      	push	{r7}
 800e9ce:	b085      	sub	sp, #20
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	3308      	adds	r3, #8
 800e9d8:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	781b      	ldrb	r3, [r3, #0]
 800e9de:	2b04      	cmp	r3, #4
 800e9e0:	d001      	beq.n	800e9e6 <verify_packet+0x1a>
    return 1; /* Incorrect type */
 800e9e2:	2301      	movs	r3, #1
 800e9e4:	e00c      	b.n	800ea00 <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	3302      	adds	r3, #2
 800e9ea:	781b      	ldrb	r3, [r3, #0]
 800e9ec:	461a      	mov	r2, r3
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800e9f4:	3b03      	subs	r3, #3
 800e9f6:	429a      	cmp	r2, r3
 800e9f8:	d001      	beq.n	800e9fe <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 800e9fa:	2302      	movs	r3, #2
 800e9fc:	e000      	b.n	800ea00 <verify_packet+0x34>
  
  return 0;      
 800e9fe:	2300      	movs	r3, #0
}
 800ea00:	4618      	mov	r0, r3
 800ea02:	3714      	adds	r7, #20
 800ea04:	46bd      	mov	sp, r7
 800ea06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea0a:	4770      	bx	lr

0800ea0c <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 800ea0c:	b580      	push	{r7, lr}
 800ea0e:	b0a6      	sub	sp, #152	; 0x98
 800ea10:	af00      	add	r7, sp, #0
 800ea12:	607b      	str	r3, [r7, #4]
 800ea14:	4603      	mov	r3, r0
 800ea16:	81fb      	strh	r3, [r7, #14]
 800ea18:	460b      	mov	r3, r1
 800ea1a:	81bb      	strh	r3, [r7, #12]
 800ea1c:	4613      	mov	r3, r2
 800ea1e:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 800ea20:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ea24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ea28:	b21a      	sxth	r2, r3
 800ea2a:	89fb      	ldrh	r3, [r7, #14]
 800ea2c:	029b      	lsls	r3, r3, #10
 800ea2e:	b21b      	sxth	r3, r3
 800ea30:	4313      	orrs	r3, r2
 800ea32:	b21b      	sxth	r3, r3
 800ea34:	b29b      	uxth	r3, r3
 800ea36:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 800ea38:	7afb      	ldrb	r3, [r7, #11]
 800ea3a:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 800ea3c:	2301      	movs	r3, #1
 800ea3e:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 800ea40:	f107 0318 	add.w	r3, r7, #24
 800ea44:	3301      	adds	r3, #1
 800ea46:	461a      	mov	r2, r3
 800ea48:	f107 0314 	add.w	r3, r7, #20
 800ea4c:	8819      	ldrh	r1, [r3, #0]
 800ea4e:	789b      	ldrb	r3, [r3, #2]
 800ea50:	8011      	strh	r1, [r2, #0]
 800ea52:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 800ea54:	f107 0318 	add.w	r3, r7, #24
 800ea58:	3304      	adds	r3, #4
 800ea5a:	7afa      	ldrb	r2, [r7, #11]
 800ea5c:	6879      	ldr	r1, [r7, #4]
 800ea5e:	4618      	mov	r0, r3
 800ea60:	f00b fad2 	bl	801a008 <memcpy>
  
  if (hciContext.io.Send)
 800ea64:	4b08      	ldr	r3, [pc, #32]	; (800ea88 <send_cmd+0x7c>)
 800ea66:	691b      	ldr	r3, [r3, #16]
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d009      	beq.n	800ea80 <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 800ea6c:	4b06      	ldr	r3, [pc, #24]	; (800ea88 <send_cmd+0x7c>)
 800ea6e:	691b      	ldr	r3, [r3, #16]
 800ea70:	7afa      	ldrb	r2, [r7, #11]
 800ea72:	b292      	uxth	r2, r2
 800ea74:	3204      	adds	r2, #4
 800ea76:	b291      	uxth	r1, r2
 800ea78:	f107 0218 	add.w	r2, r7, #24
 800ea7c:	4610      	mov	r0, r2
 800ea7e:	4798      	blx	r3
  }
}
 800ea80:	bf00      	nop
 800ea82:	3798      	adds	r7, #152	; 0x98
 800ea84:	46bd      	mov	sp, r7
 800ea86:	bd80      	pop	{r7, pc}
 800ea88:	20002784 	.word	0x20002784

0800ea8c <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 800ea8c:	b580      	push	{r7, lr}
 800ea8e:	b084      	sub	sp, #16
 800ea90:	af00      	add	r7, sp, #0
 800ea92:	6078      	str	r0, [r7, #4]
 800ea94:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 800ea96:	e00a      	b.n	800eaae <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 800ea98:	f107 030c 	add.w	r3, r7, #12
 800ea9c:	4619      	mov	r1, r3
 800ea9e:	6838      	ldr	r0, [r7, #0]
 800eaa0:	f000 fada 	bl	800f058 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	4619      	mov	r1, r3
 800eaa8:	6878      	ldr	r0, [r7, #4]
 800eaaa:	f000 fa49 	bl	800ef40 <list_insert_head>
  while (!list_is_empty(src_list))
 800eaae:	6838      	ldr	r0, [r7, #0]
 800eab0:	f000 fa26 	bl	800ef00 <list_is_empty>
 800eab4:	4603      	mov	r3, r0
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d0ee      	beq.n	800ea98 <move_list+0xc>
  }
}
 800eaba:	bf00      	nop
 800eabc:	3710      	adds	r7, #16
 800eabe:	46bd      	mov	sp, r7
 800eac0:	bd80      	pop	{r7, pc}
	...

0800eac4 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 800eac4:	b580      	push	{r7, lr}
 800eac6:	b082      	sub	sp, #8
 800eac8:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;
  
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800eaca:	e009      	b.n	800eae0 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 800eacc:	1d3b      	adds	r3, r7, #4
 800eace:	4619      	mov	r1, r3
 800ead0:	4808      	ldr	r0, [pc, #32]	; (800eaf4 <free_event_list+0x30>)
 800ead2:	f000 fa9c 	bl	800f00e <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	4619      	mov	r1, r3
 800eada:	4807      	ldr	r0, [pc, #28]	; (800eaf8 <free_event_list+0x34>)
 800eadc:	f000 fa54 	bl	800ef88 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800eae0:	4805      	ldr	r0, [pc, #20]	; (800eaf8 <free_event_list+0x34>)
 800eae2:	f000 fade 	bl	800f0a2 <list_get_size>
 800eae6:	4603      	mov	r3, r0
 800eae8:	2b01      	cmp	r3, #1
 800eaea:	ddef      	ble.n	800eacc <free_event_list+0x8>
  }
}
 800eaec:	bf00      	nop
 800eaee:	3708      	adds	r7, #8
 800eaf0:	46bd      	mov	sp, r7
 800eaf2:	bd80      	pop	{r7, pc}
 800eaf4:	2000d660 	.word	0x2000d660
 800eaf8:	2000d658 	.word	0x2000d658

0800eafc <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800eafc:	b580      	push	{r7, lr}
 800eafe:	b084      	sub	sp, #16
 800eb00:	af00      	add	r7, sp, #0
 800eb02:	6078      	str	r0, [r7, #4]
 800eb04:	6039      	str	r1, [r7, #0]
  uint8_t index;
  
  if(UserEvtRx != NULL)
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d002      	beq.n	800eb12 <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 800eb0c:	4a18      	ldr	r2, [pc, #96]	; (800eb70 <hci_init+0x74>)
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 800eb12:	f7f3 f9e1 	bl	8001ed8 <hci_tl_lowlevel_init>
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 800eb16:	4817      	ldr	r0, [pc, #92]	; (800eb74 <hci_init+0x78>)
 800eb18:	f000 f9e2 	bl	800eee0 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 800eb1c:	4816      	ldr	r0, [pc, #88]	; (800eb78 <hci_init+0x7c>)
 800eb1e:	f000 f9df 	bl	800eee0 <list_init_head>
  
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800eb22:	2300      	movs	r3, #0
 800eb24:	73fb      	strb	r3, [r7, #15]
 800eb26:	e00c      	b.n	800eb42 <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 800eb28:	7bfb      	ldrb	r3, [r7, #15]
 800eb2a:	228c      	movs	r2, #140	; 0x8c
 800eb2c:	fb02 f303 	mul.w	r3, r2, r3
 800eb30:	4a12      	ldr	r2, [pc, #72]	; (800eb7c <hci_init+0x80>)
 800eb32:	4413      	add	r3, r2
 800eb34:	4619      	mov	r1, r3
 800eb36:	480f      	ldr	r0, [pc, #60]	; (800eb74 <hci_init+0x78>)
 800eb38:	f000 fa26 	bl	800ef88 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800eb3c:	7bfb      	ldrb	r3, [r7, #15]
 800eb3e:	3301      	adds	r3, #1
 800eb40:	73fb      	strb	r3, [r7, #15]
 800eb42:	7bfb      	ldrb	r3, [r7, #15]
 800eb44:	2b04      	cmp	r3, #4
 800eb46:	d9ef      	bls.n	800eb28 <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 800eb48:	4b09      	ldr	r3, [pc, #36]	; (800eb70 <hci_init+0x74>)
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d003      	beq.n	800eb58 <hci_init+0x5c>
 800eb50:	4b07      	ldr	r3, [pc, #28]	; (800eb70 <hci_init+0x74>)
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	2000      	movs	r0, #0
 800eb56:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 800eb58:	4b05      	ldr	r3, [pc, #20]	; (800eb70 <hci_init+0x74>)
 800eb5a:	689b      	ldr	r3, [r3, #8]
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d002      	beq.n	800eb66 <hci_init+0x6a>
 800eb60:	4b03      	ldr	r3, [pc, #12]	; (800eb70 <hci_init+0x74>)
 800eb62:	689b      	ldr	r3, [r3, #8]
 800eb64:	4798      	blx	r3
}
 800eb66:	bf00      	nop
 800eb68:	3710      	adds	r7, #16
 800eb6a:	46bd      	mov	sp, r7
 800eb6c:	bd80      	pop	{r7, pc}
 800eb6e:	bf00      	nop
 800eb70:	20002784 	.word	0x20002784
 800eb74:	2000d658 	.word	0x2000d658
 800eb78:	2000d660 	.word	0x2000d660
 800eb7c:	200024c8 	.word	0x200024c8

0800eb80 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 800eb80:	b480      	push	{r7}
 800eb82:	b083      	sub	sp, #12
 800eb84:	af00      	add	r7, sp, #0
 800eb86:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	4a0b      	ldr	r2, [pc, #44]	; (800ebbc <hci_register_io_bus+0x3c>)
 800eb8e:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	68db      	ldr	r3, [r3, #12]
 800eb94:	4a09      	ldr	r2, [pc, #36]	; (800ebbc <hci_register_io_bus+0x3c>)
 800eb96:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	691b      	ldr	r3, [r3, #16]
 800eb9c:	4a07      	ldr	r2, [pc, #28]	; (800ebbc <hci_register_io_bus+0x3c>)
 800eb9e:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	699b      	ldr	r3, [r3, #24]
 800eba4:	4a05      	ldr	r2, [pc, #20]	; (800ebbc <hci_register_io_bus+0x3c>)
 800eba6:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;    
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	689b      	ldr	r3, [r3, #8]
 800ebac:	4a03      	ldr	r2, [pc, #12]	; (800ebbc <hci_register_io_bus+0x3c>)
 800ebae:	6093      	str	r3, [r2, #8]
}
 800ebb0:	bf00      	nop
 800ebb2:	370c      	adds	r7, #12
 800ebb4:	46bd      	mov	sp, r7
 800ebb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebba:	4770      	bx	lr
 800ebbc:	20002784 	.word	0x20002784

0800ebc0 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 800ebc0:	b580      	push	{r7, lr}
 800ebc2:	b08e      	sub	sp, #56	; 0x38
 800ebc4:	af00      	add	r7, sp, #0
 800ebc6:	6078      	str	r0, [r7, #4]
 800ebc8:	460b      	mov	r3, r1
 800ebca:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	885b      	ldrh	r3, [r3, #2]
 800ebd0:	b21b      	sxth	r3, r3
 800ebd2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ebd6:	b21a      	sxth	r2, r3
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	881b      	ldrh	r3, [r3, #0]
 800ebdc:	029b      	lsls	r3, r3, #10
 800ebde:	b21b      	sxth	r3, r3
 800ebe0:	4313      	orrs	r3, r2
 800ebe2:	b21b      	sxth	r3, r3
 800ebe4:	86fb      	strh	r3, [r7, #54]	; 0x36
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 800ebe6:	2300      	movs	r3, #0
 800ebe8:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 800ebea:	f107 0308 	add.w	r3, r7, #8
 800ebee:	4618      	mov	r0, r3
 800ebf0:	f000 f976 	bl	800eee0 <list_init_head>

  free_event_list();
 800ebf4:	f7ff ff66 	bl	800eac4 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	8818      	ldrh	r0, [r3, #0]
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	8859      	ldrh	r1, [r3, #2]
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	68db      	ldr	r3, [r3, #12]
 800ec04:	b2da      	uxtb	r2, r3
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	689b      	ldr	r3, [r3, #8]
 800ec0a:	f7ff feff 	bl	800ea0c <send_cmd>
  
  if (async)
 800ec0e:	78fb      	ldrb	r3, [r7, #3]
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d001      	beq.n	800ec18 <hci_send_req+0x58>
  {
    return 0;
 800ec14:	2300      	movs	r3, #0
 800ec16:	e0e2      	b.n	800edde <hci_send_req+0x21e>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 800ec18:	f7f9 fc12 	bl	8008440 <HAL_GetTick>
 800ec1c:	6338      	str	r0, [r7, #48]	; 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800ec1e:	f7f9 fc0f 	bl	8008440 <HAL_GetTick>
 800ec22:	4602      	mov	r2, r0
 800ec24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec26:	1ad3      	subs	r3, r2, r3
 800ec28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ec2c:	f200 80b3 	bhi.w	800ed96 <hci_send_req+0x1d6>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 800ec30:	486d      	ldr	r0, [pc, #436]	; (800ede8 <hci_send_req+0x228>)
 800ec32:	f000 f965 	bl	800ef00 <list_is_empty>
 800ec36:	4603      	mov	r3, r0
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d000      	beq.n	800ec3e <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800ec3c:	e7ef      	b.n	800ec1e <hci_send_req+0x5e>
      {
        break;
 800ec3e:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 800ec40:	f107 0310 	add.w	r3, r7, #16
 800ec44:	4619      	mov	r1, r3
 800ec46:	4868      	ldr	r0, [pc, #416]	; (800ede8 <hci_send_req+0x228>)
 800ec48:	f000 f9e1 	bl	800f00e <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 800ec4c:	693b      	ldr	r3, [r7, #16]
 800ec4e:	3308      	adds	r3, #8
 800ec50:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 800ec52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec54:	781b      	ldrb	r3, [r3, #0]
 800ec56:	2b04      	cmp	r3, #4
 800ec58:	d17a      	bne.n	800ed50 <hci_send_req+0x190>
    {
      event_pckt = (void *)(hci_hdr->data);
 800ec5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec5c:	3301      	adds	r3, #1
 800ec5e:	62bb      	str	r3, [r7, #40]	; 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 800ec60:	693b      	ldr	r3, [r7, #16]
 800ec62:	3308      	adds	r3, #8
 800ec64:	3303      	adds	r3, #3
 800ec66:	627b      	str	r3, [r7, #36]	; 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 800ec68:	693b      	ldr	r3, [r7, #16]
 800ec6a:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800ec6e:	3b03      	subs	r3, #3
 800ec70:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 800ec72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec74:	781b      	ldrb	r3, [r3, #0]
 800ec76:	2b0f      	cmp	r3, #15
 800ec78:	d00a      	beq.n	800ec90 <hci_send_req+0xd0>
 800ec7a:	2b0f      	cmp	r3, #15
 800ec7c:	dc02      	bgt.n	800ec84 <hci_send_req+0xc4>
 800ec7e:	2b0e      	cmp	r3, #14
 800ec80:	d028      	beq.n	800ecd4 <hci_send_req+0x114>
      
      case EVT_HARDWARE_ERROR:            
        goto failed;
      
      default:      
        break;
 800ec82:	e06a      	b.n	800ed5a <hci_send_req+0x19a>
      switch (event_pckt->evt) 
 800ec84:	2b10      	cmp	r3, #16
 800ec86:	f000 8088 	beq.w	800ed9a <hci_send_req+0x1da>
 800ec8a:	2b3e      	cmp	r3, #62	; 0x3e
 800ec8c:	d042      	beq.n	800ed14 <hci_send_req+0x154>
        break;
 800ec8e:	e064      	b.n	800ed5a <hci_send_req+0x19a>
        cs = (void *) ptr;
 800ec90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec92:	61bb      	str	r3, [r7, #24]
        if (cs->opcode != opcode)
 800ec94:	69bb      	ldr	r3, [r7, #24]
 800ec96:	885b      	ldrh	r3, [r3, #2]
 800ec98:	b29b      	uxth	r3, r3
 800ec9a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ec9c:	429a      	cmp	r2, r3
 800ec9e:	d17e      	bne.n	800ed9e <hci_send_req+0x1de>
        if (r->event != EVT_CMD_STATUS) {
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	685b      	ldr	r3, [r3, #4]
 800eca4:	2b0f      	cmp	r3, #15
 800eca6:	d004      	beq.n	800ecb2 <hci_send_req+0xf2>
          if (cs->status) {
 800eca8:	69bb      	ldr	r3, [r7, #24]
 800ecaa:	781b      	ldrb	r3, [r3, #0]
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d051      	beq.n	800ed54 <hci_send_req+0x194>
            goto failed;
 800ecb0:	e078      	b.n	800eda4 <hci_send_req+0x1e4>
        r->rlen = MIN(len, r->rlen);
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	695a      	ldr	r2, [r3, #20]
 800ecb6:	6a3b      	ldr	r3, [r7, #32]
 800ecb8:	429a      	cmp	r2, r3
 800ecba:	bf28      	it	cs
 800ecbc:	461a      	movcs	r2, r3
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	6918      	ldr	r0, [r3, #16]
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	695b      	ldr	r3, [r3, #20]
 800ecca:	461a      	mov	r2, r3
 800eccc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ecce:	f00b f99b 	bl	801a008 <memcpy>
        goto done;
 800ecd2:	e078      	b.n	800edc6 <hci_send_req+0x206>
        cc = (void *) ptr;
 800ecd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecd6:	617b      	str	r3, [r7, #20]
        if (cc->opcode != opcode)
 800ecd8:	697b      	ldr	r3, [r7, #20]
 800ecda:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ecde:	b29b      	uxth	r3, r3
 800ece0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ece2:	429a      	cmp	r2, r3
 800ece4:	d15d      	bne.n	800eda2 <hci_send_req+0x1e2>
        ptr += EVT_CMD_COMPLETE_SIZE;
 800ece6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ece8:	3303      	adds	r3, #3
 800ecea:	627b      	str	r3, [r7, #36]	; 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 800ecec:	6a3b      	ldr	r3, [r7, #32]
 800ecee:	3b03      	subs	r3, #3
 800ecf0:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	695a      	ldr	r2, [r3, #20]
 800ecf6:	6a3b      	ldr	r3, [r7, #32]
 800ecf8:	429a      	cmp	r2, r3
 800ecfa:	bf28      	it	cs
 800ecfc:	461a      	movcs	r2, r3
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	6918      	ldr	r0, [r3, #16]
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	695b      	ldr	r3, [r3, #20]
 800ed0a:	461a      	mov	r2, r3
 800ed0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ed0e:	f00b f97b 	bl	801a008 <memcpy>
        goto done;
 800ed12:	e058      	b.n	800edc6 <hci_send_req+0x206>
        me = (void *) ptr;
 800ed14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed16:	61fb      	str	r3, [r7, #28]
        if (me->subevent != r->event)
 800ed18:	69fb      	ldr	r3, [r7, #28]
 800ed1a:	781b      	ldrb	r3, [r3, #0]
 800ed1c:	461a      	mov	r2, r3
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	685b      	ldr	r3, [r3, #4]
 800ed22:	429a      	cmp	r2, r3
 800ed24:	d118      	bne.n	800ed58 <hci_send_req+0x198>
        len -= 1;
 800ed26:	6a3b      	ldr	r3, [r7, #32]
 800ed28:	3b01      	subs	r3, #1
 800ed2a:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	695a      	ldr	r2, [r3, #20]
 800ed30:	6a3b      	ldr	r3, [r7, #32]
 800ed32:	429a      	cmp	r2, r3
 800ed34:	bf28      	it	cs
 800ed36:	461a      	movcs	r2, r3
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	6918      	ldr	r0, [r3, #16]
 800ed40:	69fb      	ldr	r3, [r7, #28]
 800ed42:	1c59      	adds	r1, r3, #1
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	695b      	ldr	r3, [r3, #20]
 800ed48:	461a      	mov	r2, r3
 800ed4a:	f00b f95d 	bl	801a008 <memcpy>
        goto done;
 800ed4e:	e03a      	b.n	800edc6 <hci_send_req+0x206>
      }
    }
 800ed50:	bf00      	nop
 800ed52:	e002      	b.n	800ed5a <hci_send_req+0x19a>
          break;
 800ed54:	bf00      	nop
 800ed56:	e000      	b.n	800ed5a <hci_send_req+0x19a>
          break;
 800ed58:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 800ed5a:	4824      	ldr	r0, [pc, #144]	; (800edec <hci_send_req+0x22c>)
 800ed5c:	f000 f8d0 	bl	800ef00 <list_is_empty>
 800ed60:	4603      	mov	r3, r0
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d00d      	beq.n	800ed82 <hci_send_req+0x1c2>
 800ed66:	4820      	ldr	r0, [pc, #128]	; (800ede8 <hci_send_req+0x228>)
 800ed68:	f000 f8ca 	bl	800ef00 <list_is_empty>
 800ed6c:	4603      	mov	r3, r0
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d007      	beq.n	800ed82 <hci_send_req+0x1c2>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800ed72:	693b      	ldr	r3, [r7, #16]
 800ed74:	4619      	mov	r1, r3
 800ed76:	481d      	ldr	r0, [pc, #116]	; (800edec <hci_send_req+0x22c>)
 800ed78:	f000 f906 	bl	800ef88 <list_insert_tail>
      hciReadPacket=NULL;
 800ed7c:	2300      	movs	r3, #0
 800ed7e:	613b      	str	r3, [r7, #16]
 800ed80:	e008      	b.n	800ed94 <hci_send_req+0x1d4>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 800ed82:	693a      	ldr	r2, [r7, #16]
 800ed84:	f107 0308 	add.w	r3, r7, #8
 800ed88:	4611      	mov	r1, r2
 800ed8a:	4618      	mov	r0, r3
 800ed8c:	f000 f8fc 	bl	800ef88 <list_insert_tail>
      hciReadPacket=NULL;
 800ed90:	2300      	movs	r3, #0
 800ed92:	613b      	str	r3, [r7, #16]
  {
 800ed94:	e740      	b.n	800ec18 <hci_send_req+0x58>
        goto failed;
 800ed96:	bf00      	nop
 800ed98:	e004      	b.n	800eda4 <hci_send_req+0x1e4>
        goto failed;
 800ed9a:	bf00      	nop
 800ed9c:	e002      	b.n	800eda4 <hci_send_req+0x1e4>
          goto failed;
 800ed9e:	bf00      	nop
 800eda0:	e000      	b.n	800eda4 <hci_send_req+0x1e4>
          goto failed;
 800eda2:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 800eda4:	693b      	ldr	r3, [r7, #16]
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d004      	beq.n	800edb4 <hci_send_req+0x1f4>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800edaa:	693b      	ldr	r3, [r7, #16]
 800edac:	4619      	mov	r1, r3
 800edae:	480f      	ldr	r0, [pc, #60]	; (800edec <hci_send_req+0x22c>)
 800edb0:	f000 f8c6 	bl	800ef40 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);  
 800edb4:	f107 0308 	add.w	r3, r7, #8
 800edb8:	4619      	mov	r1, r3
 800edba:	480b      	ldr	r0, [pc, #44]	; (800ede8 <hci_send_req+0x228>)
 800edbc:	f7ff fe66 	bl	800ea8c <move_list>
  return -1;
 800edc0:	f04f 33ff 	mov.w	r3, #4294967295
 800edc4:	e00b      	b.n	800edde <hci_send_req+0x21e>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 800edc6:	693b      	ldr	r3, [r7, #16]
 800edc8:	4619      	mov	r1, r3
 800edca:	4808      	ldr	r0, [pc, #32]	; (800edec <hci_send_req+0x22c>)
 800edcc:	f000 f8b8 	bl	800ef40 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800edd0:	f107 0308 	add.w	r3, r7, #8
 800edd4:	4619      	mov	r1, r3
 800edd6:	4804      	ldr	r0, [pc, #16]	; (800ede8 <hci_send_req+0x228>)
 800edd8:	f7ff fe58 	bl	800ea8c <move_list>
  return 0;
 800eddc:	2300      	movs	r3, #0
}
 800edde:	4618      	mov	r0, r3
 800ede0:	3738      	adds	r7, #56	; 0x38
 800ede2:	46bd      	mov	sp, r7
 800ede4:	bd80      	pop	{r7, pc}
 800ede6:	bf00      	nop
 800ede8:	2000d660 	.word	0x2000d660
 800edec:	2000d658 	.word	0x2000d658

0800edf0 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800edf0:	b580      	push	{r7, lr}
 800edf2:	b082      	sub	sp, #8
 800edf4:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 800edf6:	2300      	movs	r3, #0
 800edf8:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800edfa:	e013      	b.n	800ee24 <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 800edfc:	1d3b      	adds	r3, r7, #4
 800edfe:	4619      	mov	r1, r3
 800ee00:	480d      	ldr	r0, [pc, #52]	; (800ee38 <hci_user_evt_proc+0x48>)
 800ee02:	f000 f904 	bl	800f00e <list_remove_head>
    if (hciContext.UserEvtRx != NULL)
 800ee06:	4b0d      	ldr	r3, [pc, #52]	; (800ee3c <hci_user_evt_proc+0x4c>)
 800ee08:	69db      	ldr	r3, [r3, #28]
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d005      	beq.n	800ee1a <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 800ee0e:	4b0b      	ldr	r3, [pc, #44]	; (800ee3c <hci_user_evt_proc+0x4c>)
 800ee10:	69db      	ldr	r3, [r3, #28]
 800ee12:	687a      	ldr	r2, [r7, #4]
 800ee14:	3208      	adds	r2, #8
 800ee16:	4610      	mov	r0, r2
 800ee18:	4798      	blx	r3
    }
    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	4619      	mov	r1, r3
 800ee1e:	4808      	ldr	r0, [pc, #32]	; (800ee40 <hci_user_evt_proc+0x50>)
 800ee20:	f000 f8b2 	bl	800ef88 <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800ee24:	4804      	ldr	r0, [pc, #16]	; (800ee38 <hci_user_evt_proc+0x48>)
 800ee26:	f000 f86b 	bl	800ef00 <list_is_empty>
 800ee2a:	4603      	mov	r3, r0
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d0e5      	beq.n	800edfc <hci_user_evt_proc+0xc>
  }
}
 800ee30:	bf00      	nop
 800ee32:	3708      	adds	r7, #8
 800ee34:	46bd      	mov	sp, r7
 800ee36:	bd80      	pop	{r7, pc}
 800ee38:	2000d660 	.word	0x2000d660
 800ee3c:	20002784 	.word	0x20002784
 800ee40:	2000d658 	.word	0x2000d658

0800ee44 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 800ee44:	b580      	push	{r7, lr}
 800ee46:	b086      	sub	sp, #24
 800ee48:	af00      	add	r7, sp, #0
 800ee4a:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 800ee4c:	2300      	movs	r3, #0
 800ee4e:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 800ee50:	2300      	movs	r3, #0
 800ee52:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 800ee54:	481f      	ldr	r0, [pc, #124]	; (800eed4 <hci_notify_asynch_evt+0x90>)
 800ee56:	f000 f853 	bl	800ef00 <list_is_empty>
 800ee5a:	4603      	mov	r3, r0
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d132      	bne.n	800eec6 <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 800ee60:	f107 030c 	add.w	r3, r7, #12
 800ee64:	4619      	mov	r1, r3
 800ee66:	481b      	ldr	r0, [pc, #108]	; (800eed4 <hci_notify_asynch_evt+0x90>)
 800ee68:	f000 f8d1 	bl	800f00e <list_remove_head>
    
    if (hciContext.io.Receive)
 800ee6c:	4b1a      	ldr	r3, [pc, #104]	; (800eed8 <hci_notify_asynch_evt+0x94>)
 800ee6e:	68db      	ldr	r3, [r3, #12]
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d02a      	beq.n	800eeca <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 800ee74:	4b18      	ldr	r3, [pc, #96]	; (800eed8 <hci_notify_asynch_evt+0x94>)
 800ee76:	68db      	ldr	r3, [r3, #12]
 800ee78:	68fa      	ldr	r2, [r7, #12]
 800ee7a:	3208      	adds	r2, #8
 800ee7c:	2180      	movs	r1, #128	; 0x80
 800ee7e:	4610      	mov	r0, r2
 800ee80:	4798      	blx	r3
 800ee82:	4603      	mov	r3, r0
 800ee84:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 800ee86:	7cfb      	ldrb	r3, [r7, #19]
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d016      	beq.n	800eeba <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	7cfa      	ldrb	r2, [r7, #19]
 800ee90:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
        if (verify_packet(hciReadPacket) == 0)
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	4618      	mov	r0, r3
 800ee98:	f7ff fd98 	bl	800e9cc <verify_packet>
 800ee9c:	4603      	mov	r3, r0
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d105      	bne.n	800eeae <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	4619      	mov	r1, r3
 800eea6:	480d      	ldr	r0, [pc, #52]	; (800eedc <hci_notify_asynch_evt+0x98>)
 800eea8:	f000 f86e 	bl	800ef88 <list_insert_tail>
 800eeac:	e00d      	b.n	800eeca <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	4619      	mov	r1, r3
 800eeb2:	4808      	ldr	r0, [pc, #32]	; (800eed4 <hci_notify_asynch_evt+0x90>)
 800eeb4:	f000 f844 	bl	800ef40 <list_insert_head>
 800eeb8:	e007      	b.n	800eeca <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	4619      	mov	r1, r3
 800eebe:	4805      	ldr	r0, [pc, #20]	; (800eed4 <hci_notify_asynch_evt+0x90>)
 800eec0:	f000 f83e 	bl	800ef40 <list_insert_head>
 800eec4:	e001      	b.n	800eeca <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 800eec6:	2301      	movs	r3, #1
 800eec8:	617b      	str	r3, [r7, #20]
  }
  return ret;
 800eeca:	697b      	ldr	r3, [r7, #20]

}
 800eecc:	4618      	mov	r0, r3
 800eece:	3718      	adds	r7, #24
 800eed0:	46bd      	mov	sp, r7
 800eed2:	bd80      	pop	{r7, pc}
 800eed4:	2000d658 	.word	0x2000d658
 800eed8:	20002784 	.word	0x20002784
 800eedc:	2000d660 	.word	0x2000d660

0800eee0 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 800eee0:	b480      	push	{r7}
 800eee2:	b083      	sub	sp, #12
 800eee4:	af00      	add	r7, sp, #0
 800eee6:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	687a      	ldr	r2, [r7, #4]
 800eeec:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	687a      	ldr	r2, [r7, #4]
 800eef2:	605a      	str	r2, [r3, #4]
}
 800eef4:	bf00      	nop
 800eef6:	370c      	adds	r7, #12
 800eef8:	46bd      	mov	sp, r7
 800eefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eefe:	4770      	bx	lr

0800ef00 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 800ef00:	b480      	push	{r7}
 800ef02:	b087      	sub	sp, #28
 800ef04:	af00      	add	r7, sp, #0
 800ef06:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ef08:	f3ef 8310 	mrs	r3, PRIMASK
 800ef0c:	60fb      	str	r3, [r7, #12]
  return(result);
 800ef0e:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ef10:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800ef12:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	687a      	ldr	r2, [r7, #4]
 800ef1a:	429a      	cmp	r2, r3
 800ef1c:	d102      	bne.n	800ef24 <list_is_empty+0x24>
  {
    return_value = 1;
 800ef1e:	2301      	movs	r3, #1
 800ef20:	75fb      	strb	r3, [r7, #23]
 800ef22:	e001      	b.n	800ef28 <list_is_empty+0x28>
  }
  else
  {
    return_value = 0;
 800ef24:	2300      	movs	r3, #0
 800ef26:	75fb      	strb	r3, [r7, #23]
 800ef28:	693b      	ldr	r3, [r7, #16]
 800ef2a:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ef2c:	68bb      	ldr	r3, [r7, #8]
 800ef2e:	f383 8810 	msr	PRIMASK, r3
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 800ef32:	7dfb      	ldrb	r3, [r7, #23]
}
 800ef34:	4618      	mov	r0, r3
 800ef36:	371c      	adds	r7, #28
 800ef38:	46bd      	mov	sp, r7
 800ef3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef3e:	4770      	bx	lr

0800ef40 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 800ef40:	b480      	push	{r7}
 800ef42:	b087      	sub	sp, #28
 800ef44:	af00      	add	r7, sp, #0
 800ef46:	6078      	str	r0, [r7, #4]
 800ef48:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ef4a:	f3ef 8310 	mrs	r3, PRIMASK
 800ef4e:	60fb      	str	r3, [r7, #12]
  return(result);
 800ef50:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ef52:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ef54:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	681a      	ldr	r2, [r3, #0]
 800ef5a:	683b      	ldr	r3, [r7, #0]
 800ef5c:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800ef5e:	683b      	ldr	r3, [r7, #0]
 800ef60:	687a      	ldr	r2, [r7, #4]
 800ef62:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	683a      	ldr	r2, [r7, #0]
 800ef68:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800ef6a:	683b      	ldr	r3, [r7, #0]
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	683a      	ldr	r2, [r7, #0]
 800ef70:	605a      	str	r2, [r3, #4]
 800ef72:	697b      	ldr	r3, [r7, #20]
 800ef74:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ef76:	693b      	ldr	r3, [r7, #16]
 800ef78:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800ef7c:	bf00      	nop
 800ef7e:	371c      	adds	r7, #28
 800ef80:	46bd      	mov	sp, r7
 800ef82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef86:	4770      	bx	lr

0800ef88 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 800ef88:	b480      	push	{r7}
 800ef8a:	b087      	sub	sp, #28
 800ef8c:	af00      	add	r7, sp, #0
 800ef8e:	6078      	str	r0, [r7, #4]
 800ef90:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ef92:	f3ef 8310 	mrs	r3, PRIMASK
 800ef96:	60fb      	str	r3, [r7, #12]
  return(result);
 800ef98:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ef9a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ef9c:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 800ef9e:	683b      	ldr	r3, [r7, #0]
 800efa0:	687a      	ldr	r2, [r7, #4]
 800efa2:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	685a      	ldr	r2, [r3, #4]
 800efa8:	683b      	ldr	r3, [r7, #0]
 800efaa:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	683a      	ldr	r2, [r7, #0]
 800efb0:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800efb2:	683b      	ldr	r3, [r7, #0]
 800efb4:	685b      	ldr	r3, [r3, #4]
 800efb6:	683a      	ldr	r2, [r7, #0]
 800efb8:	601a      	str	r2, [r3, #0]
 800efba:	697b      	ldr	r3, [r7, #20]
 800efbc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800efbe:	693b      	ldr	r3, [r7, #16]
 800efc0:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800efc4:	bf00      	nop
 800efc6:	371c      	adds	r7, #28
 800efc8:	46bd      	mov	sp, r7
 800efca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efce:	4770      	bx	lr

0800efd0 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 800efd0:	b480      	push	{r7}
 800efd2:	b087      	sub	sp, #28
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800efd8:	f3ef 8310 	mrs	r3, PRIMASK
 800efdc:	60fb      	str	r3, [r7, #12]
  return(result);
 800efde:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800efe0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800efe2:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	685b      	ldr	r3, [r3, #4]
 800efe8:	687a      	ldr	r2, [r7, #4]
 800efea:	6812      	ldr	r2, [r2, #0]
 800efec:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	687a      	ldr	r2, [r7, #4]
 800eff4:	6852      	ldr	r2, [r2, #4]
 800eff6:	605a      	str	r2, [r3, #4]
 800eff8:	697b      	ldr	r3, [r7, #20]
 800effa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800effc:	693b      	ldr	r3, [r7, #16]
 800effe:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800f002:	bf00      	nop
 800f004:	371c      	adds	r7, #28
 800f006:	46bd      	mov	sp, r7
 800f008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f00c:	4770      	bx	lr

0800f00e <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 800f00e:	b580      	push	{r7, lr}
 800f010:	b086      	sub	sp, #24
 800f012:	af00      	add	r7, sp, #0
 800f014:	6078      	str	r0, [r7, #4]
 800f016:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f018:	f3ef 8310 	mrs	r3, PRIMASK
 800f01c:	60fb      	str	r3, [r7, #12]
  return(result);
 800f01e:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800f020:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f022:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	681a      	ldr	r2, [r3, #0]
 800f028:	683b      	ldr	r3, [r7, #0]
 800f02a:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	4618      	mov	r0, r3
 800f032:	f7ff ffcd 	bl	800efd0 <list_remove_node>
  (*node)->next = NULL;
 800f036:	683b      	ldr	r3, [r7, #0]
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	2200      	movs	r2, #0
 800f03c:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800f03e:	683b      	ldr	r3, [r7, #0]
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	2200      	movs	r2, #0
 800f044:	605a      	str	r2, [r3, #4]
 800f046:	697b      	ldr	r3, [r7, #20]
 800f048:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f04a:	693b      	ldr	r3, [r7, #16]
 800f04c:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800f050:	bf00      	nop
 800f052:	3718      	adds	r7, #24
 800f054:	46bd      	mov	sp, r7
 800f056:	bd80      	pop	{r7, pc}

0800f058 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 800f058:	b580      	push	{r7, lr}
 800f05a:	b086      	sub	sp, #24
 800f05c:	af00      	add	r7, sp, #0
 800f05e:	6078      	str	r0, [r7, #4]
 800f060:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f062:	f3ef 8310 	mrs	r3, PRIMASK
 800f066:	60fb      	str	r3, [r7, #12]
  return(result);
 800f068:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800f06a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f06c:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	685a      	ldr	r2, [r3, #4]
 800f072:	683b      	ldr	r3, [r7, #0]
 800f074:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	685b      	ldr	r3, [r3, #4]
 800f07a:	4618      	mov	r0, r3
 800f07c:	f7ff ffa8 	bl	800efd0 <list_remove_node>
  (*node)->next = NULL;
 800f080:	683b      	ldr	r3, [r7, #0]
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	2200      	movs	r2, #0
 800f086:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800f088:	683b      	ldr	r3, [r7, #0]
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	2200      	movs	r2, #0
 800f08e:	605a      	str	r2, [r3, #4]
 800f090:	697b      	ldr	r3, [r7, #20]
 800f092:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f094:	693b      	ldr	r3, [r7, #16]
 800f096:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800f09a:	bf00      	nop
 800f09c:	3718      	adds	r7, #24
 800f09e:	46bd      	mov	sp, r7
 800f0a0:	bd80      	pop	{r7, pc}

0800f0a2 <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 800f0a2:	b480      	push	{r7}
 800f0a4:	b089      	sub	sp, #36	; 0x24
 800f0a6:	af00      	add	r7, sp, #0
 800f0a8:	6078      	str	r0, [r7, #4]
  int size = 0;
 800f0aa:	2300      	movs	r3, #0
 800f0ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f0ae:	f3ef 8310 	mrs	r3, PRIMASK
 800f0b2:	613b      	str	r3, [r7, #16]
  return(result);
 800f0b4:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800f0b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f0b8:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800f0c0:	e005      	b.n	800f0ce <list_get_size+0x2c>
  {
    size++;
 800f0c2:	69fb      	ldr	r3, [r7, #28]
 800f0c4:	3301      	adds	r3, #1
 800f0c6:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 800f0c8:	69bb      	ldr	r3, [r7, #24]
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800f0ce:	69ba      	ldr	r2, [r7, #24]
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	429a      	cmp	r2, r3
 800f0d4:	d1f5      	bne.n	800f0c2 <list_get_size+0x20>
 800f0d6:	697b      	ldr	r3, [r7, #20]
 800f0d8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	f383 8810 	msr	PRIMASK, r3
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 800f0e0:	69fb      	ldr	r3, [r7, #28]
}
 800f0e2:	4618      	mov	r0, r3
 800f0e4:	3724      	adds	r7, #36	; 0x24
 800f0e6:	46bd      	mov	sp, r7
 800f0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ec:	4770      	bx	lr
	...

0800f0f0 <m_mldivide>:
 800f0f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0f4:	ed2d 8b02 	vpush	{d8}
 800f0f8:	b099      	sub	sp, #100	; 0x64
 800f0fa:	4606      	mov	r6, r0
 800f0fc:	460d      	mov	r5, r1
 800f0fe:	4614      	mov	r4, r2
 800f100:	4607      	mov	r7, r0
 800f102:	f100 0820 	add.w	r8, r0, #32
 800f106:	f10d 0e3c 	add.w	lr, sp, #60	; 0x3c
 800f10a:	6838      	ldr	r0, [r7, #0]
 800f10c:	6879      	ldr	r1, [r7, #4]
 800f10e:	68ba      	ldr	r2, [r7, #8]
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	46f4      	mov	ip, lr
 800f114:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f118:	3710      	adds	r7, #16
 800f11a:	4547      	cmp	r7, r8
 800f11c:	46e6      	mov	lr, ip
 800f11e:	d1f4      	bne.n	800f10a <m_mldivide+0x1a>
 800f120:	edd6 7a00 	vldr	s15, [r6]
 800f124:	ed96 7a01 	vldr	s14, [r6, #4]
 800f128:	6838      	ldr	r0, [r7, #0]
 800f12a:	f8cc 0000 	str.w	r0, [ip]
 800f12e:	eef0 7ae7 	vabs.f32	s15, s15
 800f132:	eeb0 7ac7 	vabs.f32	s14, s14
 800f136:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f13a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f13e:	f100 8173 	bmi.w	800f428 <m_mldivide+0x338>
 800f142:	2307      	movs	r3, #7
 800f144:	2004      	movs	r0, #4
 800f146:	f04f 0b00 	mov.w	fp, #0
 800f14a:	9305      	str	r3, [sp, #20]
 800f14c:	2301      	movs	r3, #1
 800f14e:	9004      	str	r0, [sp, #16]
 800f150:	eeb0 7a67 	vmov.f32	s14, s15
 800f154:	46de      	mov	lr, fp
 800f156:	f04f 0806 	mov.w	r8, #6
 800f15a:	2703      	movs	r7, #3
 800f15c:	9301      	str	r3, [sp, #4]
 800f15e:	edd6 7a02 	vldr	s15, [r6, #8]
 800f162:	eef0 7ae7 	vabs.f32	s15, s15
 800f166:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f16a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f16e:	f300 816a 	bgt.w	800f446 <m_mldivide+0x356>
 800f172:	2202      	movs	r2, #2
 800f174:	9202      	str	r2, [sp, #8]
 800f176:	9a01      	ldr	r2, [sp, #4]
 800f178:	2308      	movs	r3, #8
 800f17a:	f04f 0c05 	mov.w	ip, #5
 800f17e:	4430      	add	r0, r6
 800f180:	4476      	add	r6, lr
 800f182:	edd0 6a00 	vldr	s13, [r0]
 800f186:	ed96 7a00 	vldr	s14, [r6]
 800f18a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f18e:	0090      	lsls	r0, r2, #2
 800f190:	aa18      	add	r2, sp, #96	; 0x60
 800f192:	eb02 0e00 	add.w	lr, r2, r0
 800f196:	9006      	str	r0, [sp, #24]
 800f198:	9a02      	ldr	r2, [sp, #8]
 800f19a:	ea4f 008b 	mov.w	r0, fp, lsl #2
 800f19e:	ae18      	add	r6, sp, #96	; 0x60
 800f1a0:	900b      	str	r0, [sp, #44]	; 0x2c
 800f1a2:	1830      	adds	r0, r6, r0
 800f1a4:	9e04      	ldr	r6, [sp, #16]
 800f1a6:	ea4f 0a82 	mov.w	sl, r2, lsl #2
 800f1aa:	aa18      	add	r2, sp, #96	; 0x60
 800f1ac:	00b6      	lsls	r6, r6, #2
 800f1ae:	4452      	add	r2, sl
 800f1b0:	9208      	str	r2, [sp, #32]
 800f1b2:	00bf      	lsls	r7, r7, #2
 800f1b4:	4632      	mov	r2, r6
 800f1b6:	9607      	str	r6, [sp, #28]
 800f1b8:	ae18      	add	r6, sp, #96	; 0x60
 800f1ba:	970c      	str	r7, [sp, #48]	; 0x30
 800f1bc:	19f7      	adds	r7, r6, r7
 800f1be:	9709      	str	r7, [sp, #36]	; 0x24
 800f1c0:	4637      	mov	r7, r6
 800f1c2:	18b9      	adds	r1, r7, r2
 800f1c4:	9103      	str	r1, [sp, #12]
 800f1c6:	9908      	ldr	r1, [sp, #32]
 800f1c8:	ed4e 7a09 	vstr	s15, [lr, #-36]	; 0xffffffdc
 800f1cc:	ed51 6a09 	vldr	s13, [r1, #-36]	; 0xffffffdc
 800f1d0:	ed10 7a09 	vldr	s14, [r0, #-36]	; 0xffffffdc
 800f1d4:	9805      	ldr	r0, [sp, #20]
 800f1d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f1da:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800f1de:	0080      	lsls	r0, r0, #2
 800f1e0:	ea4f 098c 	mov.w	r9, ip, lsl #2
 800f1e4:	eb07 0c09 	add.w	ip, r7, r9
 800f1e8:	4616      	mov	r6, r2
 800f1ea:	4607      	mov	r7, r0
 800f1ec:	920d      	str	r2, [sp, #52]	; 0x34
 800f1ee:	aa18      	add	r2, sp, #96	; 0x60
 800f1f0:	9008      	str	r0, [sp, #32]
 800f1f2:	1990      	adds	r0, r2, r6
 800f1f4:	19d6      	adds	r6, r2, r7
 800f1f6:	960a      	str	r6, [sp, #40]	; 0x28
 800f1f8:	9f03      	ldr	r7, [sp, #12]
 800f1fa:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800f1fc:	ed41 7a09 	vstr	s15, [r1, #-36]	; 0xffffffdc
 800f200:	ed5e 6a09 	vldr	s13, [lr, #-36]	; 0xffffffdc
 800f204:	ed16 7a09 	vldr	s14, [r6, #-36]	; 0xffffffdc
 800f208:	ed57 7a09 	vldr	s15, [r7, #-36]	; 0xffffffdc
 800f20c:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800f210:	009b      	lsls	r3, r3, #2
 800f212:	eb02 0803 	add.w	r8, r2, r3
 800f216:	460a      	mov	r2, r1
 800f218:	ed47 7a09 	vstr	s15, [r7, #-36]	; 0xffffffdc
 800f21c:	ed52 6a09 	vldr	s13, [r2, #-36]	; 0xffffffdc
 800f220:	ed16 7a09 	vldr	s14, [r6, #-36]	; 0xffffffdc
 800f224:	ed5c 7a09 	vldr	s15, [ip, #-36]	; 0xffffffdc
 800f228:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800f22c:	4611      	mov	r1, r2
 800f22e:	ed4c 7a09 	vstr	s15, [ip, #-36]	; 0xffffffdc
 800f232:	ed5e 6a09 	vldr	s13, [lr, #-36]	; 0xffffffdc
 800f236:	ed10 7a09 	vldr	s14, [r0, #-36]	; 0xffffffdc
 800f23a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800f23c:	9f03      	ldr	r7, [sp, #12]
 800f23e:	ed56 7a09 	vldr	s15, [r6, #-36]	; 0xffffffdc
 800f242:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800f246:	ed46 7a09 	vstr	s15, [r6, #-36]	; 0xffffffdc
 800f24a:	ed51 6a09 	vldr	s13, [r1, #-36]	; 0xffffffdc
 800f24e:	ed10 7a09 	vldr	s14, [r0, #-36]	; 0xffffffdc
 800f252:	ed58 7a09 	vldr	s15, [r8, #-36]	; 0xffffffdc
 800f256:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800f25a:	ed48 7a09 	vstr	s15, [r8, #-36]	; 0xffffffdc
 800f25e:	ed5c 7a09 	vldr	s15, [ip, #-36]	; 0xffffffdc
 800f262:	ed17 7a09 	vldr	s14, [r7, #-36]	; 0xffffffdc
 800f266:	eeb0 6ae7 	vabs.f32	s12, s15
 800f26a:	eef0 6ac7 	vabs.f32	s13, s14
 800f26e:	eeb4 6ae6 	vcmpe.f32	s12, s13
 800f272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f276:	dc14      	bgt.n	800f2a2 <m_mldivide+0x1b2>
 800f278:	9802      	ldr	r0, [sp, #8]
 800f27a:	9901      	ldr	r1, [sp, #4]
 800f27c:	9e04      	ldr	r6, [sp, #16]
 800f27e:	9001      	str	r0, [sp, #4]
 800f280:	9805      	ldr	r0, [sp, #20]
 800f282:	f8cd a018 	str.w	sl, [sp, #24]
 800f286:	eef0 6a47 	vmov.f32	s13, s14
 800f28a:	e9cd 9307 	strd	r9, r3, [sp, #28]
 800f28e:	eeb0 7a67 	vmov.f32	s14, s15
 800f292:	9102      	str	r1, [sp, #8]
 800f294:	eef0 7a66 	vmov.f32	s15, s13
 800f298:	ea4f 0986 	mov.w	r9, r6, lsl #2
 800f29c:	0083      	lsls	r3, r0, #2
 800f29e:	ea4f 0a81 	mov.w	sl, r1, lsl #2
 800f2a2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f2a6:	9a07      	ldr	r2, [sp, #28]
 800f2a8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800f2aa:	a818      	add	r0, sp, #96	; 0x60
 800f2ac:	4402      	add	r2, r0
 800f2ae:	4616      	mov	r6, r2
 800f2b0:	9a08      	ldr	r2, [sp, #32]
 800f2b2:	4402      	add	r2, r0
 800f2b4:	4610      	mov	r0, r2
 800f2b6:	aa18      	add	r2, sp, #96	; 0x60
 800f2b8:	1899      	adds	r1, r3, r2
 800f2ba:	eb05 0e07 	add.w	lr, r5, r7
 800f2be:	ed9e 7a00 	vldr	s14, [lr]
 800f2c2:	ed46 6a09 	vstr	s13, [r6, #-36]	; 0xffffffdc
 800f2c6:	ed11 6a09 	vldr	s12, [r1, #-36]	; 0xffffffdc
 800f2ca:	ed50 7a09 	vldr	s15, [r0, #-36]	; 0xffffffdc
 800f2ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f2d0:	ed84 7a00 	vstr	s14, [r4]
 800f2d4:	eee6 7ac6 	vfms.f32	s15, s13, s12
 800f2d8:	eb02 0e0a 	add.w	lr, r2, sl
 800f2dc:	4413      	add	r3, r2
 800f2de:	44aa      	add	sl, r5
 800f2e0:	ed40 7a09 	vstr	s15, [r0, #-36]	; 0xffffffdc
 800f2e4:	ed5e 1a09 	vldr	s3, [lr, #-36]	; 0xffffffdc
 800f2e8:	edda 6a00 	vldr	s13, [sl]
 800f2ec:	ed56 2a09 	vldr	s5, [r6, #-36]	; 0xffffffdc
 800f2f0:	ed11 3a09 	vldr	s6, [r1, #-36]	; 0xffffffdc
 800f2f4:	4698      	mov	r8, r3
 800f2f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f2f8:	ed58 3a09 	vldr	s7, [r8, #-36]	; 0xffffffdc
 800f2fc:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800f300:	eef1 8a61 	vneg.f32	s17, s3
 800f304:	eee8 6a87 	vfma.f32	s13, s17, s14
 800f308:	4413      	add	r3, r2
 800f30a:	eb02 0c07 	add.w	ip, r2, r7
 800f30e:	eec1 4a27 	vdiv.f32	s9, s2, s15
 800f312:	461f      	mov	r7, r3
 800f314:	9b06      	ldr	r3, [sp, #24]
 800f316:	4491      	add	r9, r2
 800f318:	eb02 0e03 	add.w	lr, r2, r3
 800f31c:	18e8      	adds	r0, r5, r3
 800f31e:	9a02      	ldr	r2, [sp, #8]
 800f320:	9b01      	ldr	r3, [sp, #4]
 800f322:	eb05 0683 	add.w	r6, r5, r3, lsl #2
 800f326:	edc4 6a01 	vstr	s13, [r4, #4]
 800f32a:	ed59 5a09 	vldr	s11, [r9, #-36]	; 0xffffffdc
 800f32e:	ed1e 2a09 	vldr	s4, [lr, #-36]	; 0xffffffdc
 800f332:	ed90 6a00 	vldr	s12, [r0]
 800f336:	ed5c 0a09 	vldr	s1, [ip, #-36]	; 0xffffffdc
 800f33a:	ed17 4a09 	vldr	s8, [r7, #-36]	; 0xffffffdc
 800f33e:	ee81 5a25 	vdiv.f32	s10, s2, s11
 800f342:	eb05 0c8b 	add.w	ip, r5, fp, lsl #2
 800f346:	eb05 0782 	add.w	r7, r5, r2, lsl #2
 800f34a:	eeb1 8a42 	vneg.f32	s16, s4
 800f34e:	eea8 6a07 	vfma.f32	s12, s16, s14
 800f352:	eeb1 0a62 	vneg.f32	s0, s5
 800f356:	eea0 6a26 	vfma.f32	s12, s0, s13
 800f35a:	eec1 5a20 	vdiv.f32	s11, s2, s1
 800f35e:	ee26 6a24 	vmul.f32	s12, s12, s9
 800f362:	eef1 0a43 	vneg.f32	s1, s6
 800f366:	eee0 6a86 	vfma.f32	s13, s1, s12
 800f36a:	eeb1 1a63 	vneg.f32	s2, s7
 800f36e:	eea1 7a06 	vfma.f32	s14, s2, s12
 800f372:	ee66 6a85 	vmul.f32	s13, s13, s10
 800f376:	eef1 7a44 	vneg.f32	s15, s8
 800f37a:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800f37e:	ed84 6a02 	vstr	s12, [r4, #8]
 800f382:	ee27 7a25 	vmul.f32	s14, s14, s11
 800f386:	edc4 6a01 	vstr	s13, [r4, #4]
 800f38a:	ed84 7a00 	vstr	s14, [r4]
 800f38e:	ed9c 7a03 	vldr	s14, [ip, #12]
 800f392:	ed84 7a03 	vstr	s14, [r4, #12]
 800f396:	edd7 6a03 	vldr	s13, [r7, #12]
 800f39a:	eee8 6a87 	vfma.f32	s13, s17, s14
 800f39e:	edc4 6a04 	vstr	s13, [r4, #16]
 800f3a2:	ed96 6a03 	vldr	s12, [r6, #12]
 800f3a6:	eea8 6a07 	vfma.f32	s12, s16, s14
 800f3aa:	eea0 6a26 	vfma.f32	s12, s0, s13
 800f3ae:	ee26 6a24 	vmul.f32	s12, s12, s9
 800f3b2:	eee0 6a86 	vfma.f32	s13, s1, s12
 800f3b6:	eea1 7a06 	vfma.f32	s14, s2, s12
 800f3ba:	ee66 6a85 	vmul.f32	s13, s13, s10
 800f3be:	ed84 6a05 	vstr	s12, [r4, #20]
 800f3c2:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800f3c6:	edc4 6a04 	vstr	s13, [r4, #16]
 800f3ca:	ee27 7a25 	vmul.f32	s14, s14, s11
 800f3ce:	ed84 7a03 	vstr	s14, [r4, #12]
 800f3d2:	ed9c 7a06 	vldr	s14, [ip, #24]
 800f3d6:	ed84 7a06 	vstr	s14, [r4, #24]
 800f3da:	edd7 7a06 	vldr	s15, [r7, #24]
 800f3de:	eeb1 6a47 	vneg.f32	s12, s14
 800f3e2:	eee6 7a21 	vfma.f32	s15, s12, s3
 800f3e6:	edc4 7a07 	vstr	s15, [r4, #28]
 800f3ea:	edd6 6a06 	vldr	s13, [r6, #24]
 800f3ee:	eee6 6a02 	vfma.f32	s13, s12, s4
 800f3f2:	eee7 6ae2 	vfms.f32	s13, s15, s5
 800f3f6:	ee66 4aa4 	vmul.f32	s9, s13, s9
 800f3fa:	eef1 6a64 	vneg.f32	s13, s9
 800f3fe:	eee6 7a83 	vfma.f32	s15, s13, s6
 800f402:	eea6 7aa3 	vfma.f32	s14, s13, s7
 800f406:	ee67 7a85 	vmul.f32	s15, s15, s10
 800f40a:	edc4 4a08 	vstr	s9, [r4, #32]
 800f40e:	eea7 7ac4 	vfms.f32	s14, s15, s8
 800f412:	edc4 7a07 	vstr	s15, [r4, #28]
 800f416:	ee27 7a25 	vmul.f32	s14, s14, s11
 800f41a:	ed84 7a06 	vstr	s14, [r4, #24]
 800f41e:	b019      	add	sp, #100	; 0x64
 800f420:	ecbd 8b02 	vpop	{d8}
 800f424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f428:	2300      	movs	r3, #0
 800f42a:	2704      	movs	r7, #4
 800f42c:	9301      	str	r3, [sp, #4]
 800f42e:	4618      	mov	r0, r3
 800f430:	f04f 0c06 	mov.w	ip, #6
 800f434:	2303      	movs	r3, #3
 800f436:	46be      	mov	lr, r7
 800f438:	f04f 0807 	mov.w	r8, #7
 800f43c:	e9cd 3c04 	strd	r3, ip, [sp, #16]
 800f440:	f04f 0b01 	mov.w	fp, #1
 800f444:	e68b      	b.n	800f15e <m_mldivide+0x6e>
 800f446:	2207      	movs	r2, #7
 800f448:	2304      	movs	r3, #4
 800f44a:	f04f 0808 	mov.w	r8, #8
 800f44e:	9205      	str	r2, [sp, #20]
 800f450:	2100      	movs	r1, #0
 800f452:	2201      	movs	r2, #1
 800f454:	9304      	str	r3, [sp, #16]
 800f456:	4618      	mov	r0, r3
 800f458:	46c6      	mov	lr, r8
 800f45a:	2306      	movs	r3, #6
 800f45c:	f04f 0c03 	mov.w	ip, #3
 800f460:	2705      	movs	r7, #5
 800f462:	f04f 0b02 	mov.w	fp, #2
 800f466:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800f46a:	e688      	b.n	800f17e <m_mldivide+0x8e>

0800f46c <m_qmult_eml>:
 800f46c:	ed91 3a02 	vldr	s6, [r1, #8]
 800f470:	edd0 3a01 	vldr	s7, [r0, #4]
 800f474:	ed91 5a03 	vldr	s10, [r1, #12]
 800f478:	ed90 4a02 	vldr	s8, [r0, #8]
 800f47c:	ed91 2a00 	vldr	s4, [r1]
 800f480:	edd1 2a01 	vldr	s5, [r1, #4]
 800f484:	edd0 4a00 	vldr	s9, [r0]
 800f488:	edd0 5a03 	vldr	s11, [r0, #12]
 800f48c:	eeb1 1a43 	vneg.f32	s2, s6
 800f490:	ee23 6a83 	vmul.f32	s12, s7, s6
 800f494:	ee24 7a01 	vmul.f32	s14, s8, s2
 800f498:	ee64 6a02 	vmul.f32	s13, s8, s4
 800f49c:	ee64 7a05 	vmul.f32	s15, s8, s10
 800f4a0:	eef1 0a62 	vneg.f32	s1, s5
 800f4a4:	eef1 1a42 	vneg.f32	s3, s4
 800f4a8:	eea4 6a85 	vfma.f32	s12, s9, s10
 800f4ac:	eea3 7aa0 	vfma.f32	s14, s7, s1
 800f4b0:	eee3 6a85 	vfma.f32	s13, s7, s10
 800f4b4:	eee3 7aa1 	vfma.f32	s15, s7, s3
 800f4b8:	eea4 6a20 	vfma.f32	s12, s8, s1
 800f4bc:	eee4 6a81 	vfma.f32	s13, s9, s2
 800f4c0:	eea4 7aa1 	vfma.f32	s14, s9, s3
 800f4c4:	eee4 7aa2 	vfma.f32	s15, s9, s5
 800f4c8:	eea5 6a82 	vfma.f32	s12, s11, s4
 800f4cc:	eee5 6aa2 	vfma.f32	s13, s11, s5
 800f4d0:	eea5 7a85 	vfma.f32	s14, s11, s10
 800f4d4:	eee5 7a83 	vfma.f32	s15, s11, s6
 800f4d8:	ed82 6a00 	vstr	s12, [r2]
 800f4dc:	edc2 6a01 	vstr	s13, [r2, #4]
 800f4e0:	ed82 7a03 	vstr	s14, [r2, #12]
 800f4e4:	edc2 7a02 	vstr	s15, [r2, #8]
 800f4e8:	4770      	bx	lr
 800f4ea:	bf00      	nop

0800f4ec <m_q2dcm_eml>:
 800f4ec:	b510      	push	{r4, lr}
 800f4ee:	ed2d 8b06 	vpush	{d8-d10}
 800f4f2:	edd0 9a01 	vldr	s19, [r0, #4]
 800f4f6:	ed90 9a03 	vldr	s18, [r0, #12]
 800f4fa:	ed90 8a00 	vldr	s16, [r0]
 800f4fe:	edd0 8a02 	vldr	s17, [r0, #8]
 800f502:	ee29 aaa9 	vmul.f32	s20, s19, s19
 800f506:	ee69 aa09 	vmul.f32	s21, s18, s18
 800f50a:	460c      	mov	r4, r1
 800f50c:	1d08      	adds	r0, r1, #4
 800f50e:	2220      	movs	r2, #32
 800f510:	2100      	movs	r1, #0
 800f512:	f00a fd84 	bl	801a01e <memset>
 800f516:	eef1 4a48 	vneg.f32	s9, s16
 800f51a:	eeb0 5a4a 	vmov.f32	s10, s20
 800f51e:	eef0 5a4a 	vmov.f32	s11, s20
 800f522:	eeb0 6a6a 	vmov.f32	s12, s21
 800f526:	eee4 5a88 	vfma.f32	s11, s9, s16
 800f52a:	ee98 5a08 	vfnms.f32	s10, s16, s16
 800f52e:	eea8 6aa8 	vfma.f32	s12, s17, s17
 800f532:	eeb1 4a68 	vneg.f32	s8, s17
 800f536:	ee29 7aa8 	vmul.f32	s14, s19, s17
 800f53a:	ee68 6a89 	vmul.f32	s13, s17, s18
 800f53e:	ee69 7a89 	vmul.f32	s15, s19, s18
 800f542:	eea4 5a28 	vfma.f32	s10, s8, s17
 800f546:	eee4 5a28 	vfma.f32	s11, s8, s17
 800f54a:	eea4 6a88 	vfma.f32	s12, s9, s16
 800f54e:	eeb0 4a47 	vmov.f32	s8, s14
 800f552:	eea4 4a89 	vfma.f32	s8, s9, s18
 800f556:	eef0 3a66 	vmov.f32	s7, s13
 800f55a:	eef0 4a67 	vmov.f32	s9, s15
 800f55e:	eee8 3a29 	vfma.f32	s7, s16, s19
 800f562:	eed8 6a29 	vfnms.f32	s13, s16, s19
 800f566:	eea8 7a09 	vfma.f32	s14, s16, s18
 800f56a:	eed8 4a28 	vfnms.f32	s9, s16, s17
 800f56e:	eee8 7a28 	vfma.f32	s15, s16, s17
 800f572:	ee35 5a2a 	vadd.f32	s10, s10, s21
 800f576:	ee75 5aaa 	vadd.f32	s11, s11, s21
 800f57a:	ee36 6a4a 	vsub.f32	s12, s12, s20
 800f57e:	ecbd 8b06 	vpop	{d8-d10}
 800f582:	ee73 3aa3 	vadd.f32	s7, s7, s7
 800f586:	ee76 6aa6 	vadd.f32	s13, s13, s13
 800f58a:	ee34 4a04 	vadd.f32	s8, s8, s8
 800f58e:	ee37 7a07 	vadd.f32	s14, s14, s14
 800f592:	ee74 4aa4 	vadd.f32	s9, s9, s9
 800f596:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800f59a:	ed84 5a00 	vstr	s10, [r4]
 800f59e:	edc4 5a04 	vstr	s11, [r4, #16]
 800f5a2:	ed84 6a08 	vstr	s12, [r4, #32]
 800f5a6:	edc4 3a03 	vstr	s7, [r4, #12]
 800f5aa:	edc4 6a01 	vstr	s13, [r4, #4]
 800f5ae:	ed84 4a05 	vstr	s8, [r4, #20]
 800f5b2:	ed84 7a07 	vstr	s14, [r4, #28]
 800f5b6:	edc4 4a06 	vstr	s9, [r4, #24]
 800f5ba:	edc4 7a02 	vstr	s15, [r4, #8]
 800f5be:	bd10      	pop	{r4, pc}

0800f5c0 <MEMS_EmptyDataFrame>:
 800f5c0:	2300      	movs	r3, #0
 800f5c2:	8103      	strh	r3, [r0, #8]
 800f5c4:	60c3      	str	r3, [r0, #12]
 800f5c6:	4770      	bx	lr

0800f5c8 <MEMS_DataBuffInit>:
 800f5c8:	b510      	push	{r4, lr}
 800f5ca:	4604      	mov	r4, r0
 800f5cc:	f7ff fff8 	bl	800f5c0 <MEMS_EmptyDataFrame>
 800f5d0:	2382      	movs	r3, #130	; 0x82
 800f5d2:	8163      	strh	r3, [r4, #10]
 800f5d4:	4b01      	ldr	r3, [pc, #4]	; (800f5dc <MEMS_DataBuffInit+0x14>)
 800f5d6:	6123      	str	r3, [r4, #16]
 800f5d8:	bd10      	pop	{r4, pc}
 800f5da:	bf00      	nop
 800f5dc:	200013d0 	.word	0x200013d0

0800f5e0 <MEMS_checkTimeToRun>:
 800f5e0:	7803      	ldrb	r3, [r0, #0]
 800f5e2:	b363      	cbz	r3, 800f63e <MEMS_checkTimeToRun+0x5e>
 800f5e4:	890b      	ldrh	r3, [r1, #8]
 800f5e6:	894a      	ldrh	r2, [r1, #10]
 800f5e8:	429a      	cmp	r2, r3
 800f5ea:	d027      	beq.n	800f63c <MEMS_checkTimeToRun+0x5c>
 800f5ec:	b430      	push	{r4, r5}
 800f5ee:	b373      	cbz	r3, 800f64e <MEMS_checkTimeToRun+0x6e>
 800f5f0:	68ca      	ldr	r2, [r1, #12]
 800f5f2:	3201      	adds	r2, #1
 800f5f4:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800f5f8:	441a      	add	r2, r3
 800f5fa:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f5fe:	bf08      	it	eq
 800f600:	2200      	moveq	r2, #0
 800f602:	f502 531c 	add.w	r3, r2, #9984	; 0x2700
 800f606:	3310      	adds	r3, #16
 800f608:	6844      	ldr	r4, [r0, #4]
 800f60a:	429c      	cmp	r4, r3
 800f60c:	bf88      	it	hi
 800f60e:	6042      	strhi	r2, [r0, #4]
 800f610:	8905      	ldrh	r5, [r0, #8]
 800f612:	6844      	ldr	r4, [r0, #4]
 800f614:	442c      	add	r4, r5
 800f616:	4294      	cmp	r4, r2
 800f618:	d815      	bhi.n	800f646 <MEMS_checkTimeToRun+0x66>
 800f61a:	890b      	ldrh	r3, [r1, #8]
 800f61c:	b18b      	cbz	r3, 800f642 <MEMS_checkTimeToRun+0x62>
 800f61e:	3b01      	subs	r3, #1
 800f620:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 800f624:	68c9      	ldr	r1, [r1, #12]
 800f626:	fb04 1313 	mls	r3, r4, r3, r1
 800f62a:	1ad3      	subs	r3, r2, r3
 800f62c:	b21b      	sxth	r3, r3
 800f62e:	42ab      	cmp	r3, r5
 800f630:	bfb4      	ite	lt
 800f632:	2300      	movlt	r3, #0
 800f634:	2301      	movge	r3, #1
 800f636:	4618      	mov	r0, r3
 800f638:	bc30      	pop	{r4, r5}
 800f63a:	4770      	bx	lr
 800f63c:	2301      	movs	r3, #1
 800f63e:	4618      	mov	r0, r3
 800f640:	4770      	bx	lr
 800f642:	2300      	movs	r3, #0
 800f644:	e7f1      	b.n	800f62a <MEMS_checkTimeToRun+0x4a>
 800f646:	2300      	movs	r3, #0
 800f648:	4618      	mov	r0, r3
 800f64a:	bc30      	pop	{r4, r5}
 800f64c:	4770      	bx	lr
 800f64e:	2200      	movs	r2, #0
 800f650:	e7d7      	b.n	800f602 <MEMS_checkTimeToRun+0x22>
 800f652:	bf00      	nop

0800f654 <updateProcBuffer_Temp>:
 800f654:	f8d1 c000 	ldr.w	ip, [r1]
 800f658:	790b      	ldrb	r3, [r1, #4]
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d05a      	beq.n	800f714 <updateProcBuffer_Temp+0xc0>
 800f65e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f662:	2400      	movs	r4, #0
 800f664:	f04f 087a 	mov.w	r8, #122	; 0x7a
 800f668:	f06f 4560 	mvn.w	r5, #3758096384	; 0xe0000000
 800f66c:	f04f 0e01 	mov.w	lr, #1
 800f670:	fb08 1604 	mla	r6, r8, r4, r1
 800f674:	79b3      	ldrb	r3, [r6, #6]
 800f676:	2b00      	cmp	r3, #0
 800f678:	d045      	beq.n	800f706 <updateProcBuffer_Temp+0xb2>
 800f67a:	8943      	ldrh	r3, [r0, #10]
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d042      	beq.n	800f706 <updateProcBuffer_Temp+0xb2>
 800f680:	8902      	ldrh	r2, [r0, #8]
 800f682:	4293      	cmp	r3, r2
 800f684:	bf28      	it	cs
 800f686:	4613      	movcs	r3, r2
 800f688:	8103      	strh	r3, [r0, #8]
 800f68a:	79b3      	ldrb	r3, [r6, #6]
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d03a      	beq.n	800f706 <updateProcBuffer_Temp+0xb2>
 800f690:	2200      	movs	r2, #0
 800f692:	fb08 f704 	mul.w	r7, r8, r4
 800f696:	8903      	ldrh	r3, [r0, #8]
 800f698:	3301      	adds	r3, #1
 800f69a:	b29b      	uxth	r3, r3
 800f69c:	f8b0 900a 	ldrh.w	r9, [r0, #10]
 800f6a0:	454b      	cmp	r3, r9
 800f6a2:	bf28      	it	cs
 800f6a4:	464b      	movcs	r3, r9
 800f6a6:	8103      	strh	r3, [r0, #8]
 800f6a8:	eb03 0905 	add.w	r9, r3, r5
 800f6ac:	6903      	ldr	r3, [r0, #16]
 800f6ae:	f803 e039 	strb.w	lr, [r3, r9, lsl #3]
 800f6b2:	eb07 09c2 	add.w	r9, r7, r2, lsl #3
 800f6b6:	4489      	add	r9, r1
 800f6b8:	f9b9 a00a 	ldrsh.w	sl, [r9, #10]
 800f6bc:	8903      	ldrh	r3, [r0, #8]
 800f6be:	eb03 0b05 	add.w	fp, r3, r5
 800f6c2:	6903      	ldr	r3, [r0, #16]
 800f6c4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f6c8:	f8a3 a002 	strh.w	sl, [r3, #2]
 800f6cc:	f9b9 a00c 	ldrsh.w	sl, [r9, #12]
 800f6d0:	8903      	ldrh	r3, [r0, #8]
 800f6d2:	eb03 0b05 	add.w	fp, r3, r5
 800f6d6:	6903      	ldr	r3, [r0, #16]
 800f6d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f6dc:	f8a3 a004 	strh.w	sl, [r3, #4]
 800f6e0:	f9b9 a00e 	ldrsh.w	sl, [r9, #14]
 800f6e4:	8903      	ldrh	r3, [r0, #8]
 800f6e6:	eb03 0b05 	add.w	fp, r3, r5
 800f6ea:	6903      	ldr	r3, [r0, #16]
 800f6ec:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f6f0:	f8a3 a006 	strh.w	sl, [r3, #6]
 800f6f4:	f8b9 3008 	ldrh.w	r3, [r9, #8]
 800f6f8:	4463      	add	r3, ip
 800f6fa:	60c3      	str	r3, [r0, #12]
 800f6fc:	3201      	adds	r2, #1
 800f6fe:	b2d2      	uxtb	r2, r2
 800f700:	79b3      	ldrb	r3, [r6, #6]
 800f702:	4293      	cmp	r3, r2
 800f704:	d8c7      	bhi.n	800f696 <updateProcBuffer_Temp+0x42>
 800f706:	3401      	adds	r4, #1
 800f708:	b2e4      	uxtb	r4, r4
 800f70a:	790b      	ldrb	r3, [r1, #4]
 800f70c:	42a3      	cmp	r3, r4
 800f70e:	d8af      	bhi.n	800f670 <updateProcBuffer_Temp+0x1c>
 800f710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f714:	4770      	bx	lr
 800f716:	bf00      	nop

0800f718 <MEMS_getSensorData_I16>:
 800f718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f71c:	8903      	ldrh	r3, [r0, #8]
 800f71e:	fa1f fe82 	uxth.w	lr, r2
 800f722:	4573      	cmp	r3, lr
 800f724:	d95e      	bls.n	800f7e4 <MEMS_getSensorData_I16+0xcc>
 800f726:	f8a1 e004 	strh.w	lr, [r1, #4]
 800f72a:	f890 c008 	ldrb.w	ip, [r0, #8]
 800f72e:	ebac 0c02 	sub.w	ip, ip, r2
 800f732:	fa5f fc8c 	uxtb.w	ip, ip
 800f736:	8903      	ldrh	r3, [r0, #8]
 800f738:	3b01      	subs	r3, #1
 800f73a:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 800f73e:	68c5      	ldr	r5, [r0, #12]
 800f740:	fb04 5313 	mls	r3, r4, r3, r5
 800f744:	600b      	str	r3, [r1, #0]
 800f746:	888b      	ldrh	r3, [r1, #4]
 800f748:	b1db      	cbz	r3, 800f782 <MEMS_getSensorData_I16+0x6a>
 800f74a:	2600      	movs	r6, #0
 800f74c:	00f7      	lsls	r7, r6, #3
 800f74e:	6903      	ldr	r3, [r0, #16]
 800f750:	f813 4036 	ldrb.w	r4, [r3, r6, lsl #3]
 800f754:	688b      	ldr	r3, [r1, #8]
 800f756:	f803 4036 	strb.w	r4, [r3, r6, lsl #3]
 800f75a:	2500      	movs	r5, #0
 800f75c:	6903      	ldr	r3, [r0, #16]
 800f75e:	19dc      	adds	r4, r3, r7
 800f760:	ea4f 0845 	mov.w	r8, r5, lsl #1
 800f764:	4444      	add	r4, r8
 800f766:	f9b4 4002 	ldrsh.w	r4, [r4, #2]
 800f76a:	688b      	ldr	r3, [r1, #8]
 800f76c:	443b      	add	r3, r7
 800f76e:	4443      	add	r3, r8
 800f770:	805c      	strh	r4, [r3, #2]
 800f772:	3501      	adds	r5, #1
 800f774:	2d03      	cmp	r5, #3
 800f776:	d1f1      	bne.n	800f75c <MEMS_getSensorData_I16+0x44>
 800f778:	3601      	adds	r6, #1
 800f77a:	b2f6      	uxtb	r6, r6
 800f77c:	888b      	ldrh	r3, [r1, #4]
 800f77e:	42b3      	cmp	r3, r6
 800f780:	d8e4      	bhi.n	800f74c <MEMS_getSensorData_I16+0x34>
 800f782:	8903      	ldrh	r3, [r0, #8]
 800f784:	459e      	cmp	lr, r3
 800f786:	d22a      	bcs.n	800f7de <MEMS_getSensorData_I16+0xc6>
 800f788:	eba3 0e0e 	sub.w	lr, r3, lr
 800f78c:	f8a0 e008 	strh.w	lr, [r0, #8]
 800f790:	f1bc 0f00 	cmp.w	ip, #0
 800f794:	d021      	beq.n	800f7da <MEMS_getSensorData_I16+0xc2>
 800f796:	f10c 3cff 	add.w	ip, ip, #4294967295
 800f79a:	fa5f fc8c 	uxtb.w	ip, ip
 800f79e:	f10c 0c01 	add.w	ip, ip, #1
 800f7a2:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800f7a6:	00d2      	lsls	r2, r2, #3
 800f7a8:	2600      	movs	r6, #0
 800f7aa:	46b6      	mov	lr, r6
 800f7ac:	6903      	ldr	r3, [r0, #16]
 800f7ae:	1997      	adds	r7, r2, r6
 800f7b0:	5dd9      	ldrb	r1, [r3, r7]
 800f7b2:	5599      	strb	r1, [r3, r6]
 800f7b4:	2100      	movs	r1, #0
 800f7b6:	6903      	ldr	r3, [r0, #16]
 800f7b8:	19dc      	adds	r4, r3, r7
 800f7ba:	004d      	lsls	r5, r1, #1
 800f7bc:	442c      	add	r4, r5
 800f7be:	f9b4 4002 	ldrsh.w	r4, [r4, #2]
 800f7c2:	4433      	add	r3, r6
 800f7c4:	442b      	add	r3, r5
 800f7c6:	805c      	strh	r4, [r3, #2]
 800f7c8:	3101      	adds	r1, #1
 800f7ca:	2903      	cmp	r1, #3
 800f7cc:	d1f3      	bne.n	800f7b6 <MEMS_getSensorData_I16+0x9e>
 800f7ce:	6903      	ldr	r3, [r0, #16]
 800f7d0:	f803 e007 	strb.w	lr, [r3, r7]
 800f7d4:	3608      	adds	r6, #8
 800f7d6:	4566      	cmp	r6, ip
 800f7d8:	d1e8      	bne.n	800f7ac <MEMS_getSensorData_I16+0x94>
 800f7da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7de:	2300      	movs	r3, #0
 800f7e0:	8103      	strh	r3, [r0, #8]
 800f7e2:	e7d5      	b.n	800f790 <MEMS_getSensorData_I16+0x78>
 800f7e4:	808b      	strh	r3, [r1, #4]
 800f7e6:	f04f 0c00 	mov.w	ip, #0
 800f7ea:	e7a4      	b.n	800f736 <MEMS_getSensorData_I16+0x1e>

0800f7ec <m_dcm2q_eml>:
 800f7ec:	ed90 7a04 	vldr	s14, [r0, #16]
 800f7f0:	edd0 7a00 	vldr	s15, [r0]
 800f7f4:	edd0 6a08 	vldr	s13, [r0, #32]
 800f7f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f7fc:	b538      	push	{r3, r4, r5, lr}
 800f7fe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f802:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800f806:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f80a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f80e:	ed2d 8b02 	vpush	{d8}
 800f812:	4604      	mov	r4, r0
 800f814:	460d      	mov	r5, r1
 800f816:	f340 80bc 	ble.w	800f992 <m_dcm2q_eml+0x1a6>
 800f81a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f81e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f822:	ee17 0a90 	vmov	r0, s15
 800f826:	f7f0 fe97 	bl	8000558 <__aeabi_f2d>
 800f82a:	f00b fd1b 	bl	801b264 <sqrt>
 800f82e:	f7f1 f9c3 	bl	8000bb8 <__aeabi_d2f>
 800f832:	ee07 0a10 	vmov	s14, r0
 800f836:	edd4 7a05 	vldr	s15, [r4, #20]
 800f83a:	edd4 5a07 	vldr	s11, [r4, #28]
 800f83e:	ed94 5a06 	vldr	s10, [r4, #24]
 800f842:	ed94 6a02 	vldr	s12, [r4, #8]
 800f846:	edd4 6a03 	vldr	s13, [r4, #12]
 800f84a:	edd4 4a01 	vldr	s9, [r4, #4]
 800f84e:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800f852:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800f856:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 800f85a:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 800f85e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f862:	bf54      	ite	pl
 800f864:	eef0 5a48 	vmovpl.f32	s11, s16
 800f868:	eef0 5a67 	vmovmi.f32	s11, s15
 800f86c:	ee27 7a25 	vmul.f32	s14, s14, s11
 800f870:	ee36 6a45 	vsub.f32	s12, s12, s10
 800f874:	ed85 7a00 	vstr	s14, [r5]
 800f878:	ed94 7a04 	vldr	s14, [r4, #16]
 800f87c:	ed94 5a00 	vldr	s10, [r4]
 800f880:	edd4 5a08 	vldr	s11, [r4, #32]
 800f884:	ee37 7a45 	vsub.f32	s14, s14, s10
 800f888:	ee76 6ae4 	vsub.f32	s13, s13, s9
 800f88c:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 800f890:	ee37 7a65 	vsub.f32	s14, s14, s11
 800f894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f898:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800f89c:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 800f8a0:	bf54      	ite	pl
 800f8a2:	eef0 8a48 	vmovpl.f32	s17, s16
 800f8a6:	eef0 8a67 	vmovmi.f32	s17, s15
 800f8aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8ae:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800f8b2:	bf48      	it	mi
 800f8b4:	eeb0 8a67 	vmovmi.f32	s16, s15
 800f8b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8bc:	dd66      	ble.n	800f98c <m_dcm2q_eml+0x1a0>
 800f8be:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f8c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f8c6:	ee17 0a90 	vmov	r0, s15
 800f8ca:	f7f0 fe45 	bl	8000558 <__aeabi_f2d>
 800f8ce:	f00b fcc9 	bl	801b264 <sqrt>
 800f8d2:	f7f1 f971 	bl	8000bb8 <__aeabi_d2f>
 800f8d6:	ee07 0a90 	vmov	s15, r0
 800f8da:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800f8de:	edc5 7a01 	vstr	s15, [r5, #4]
 800f8e2:	edd4 6a04 	vldr	s13, [r4, #16]
 800f8e6:	ed94 7a00 	vldr	s14, [r4]
 800f8ea:	edd4 7a08 	vldr	s15, [r4, #32]
 800f8ee:	ee37 7a26 	vadd.f32	s14, s14, s13
 800f8f2:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 800f8f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f8fa:	eef4 7ae6 	vcmpe.f32	s15, s13
 800f8fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f902:	dd40      	ble.n	800f986 <m_dcm2q_eml+0x19a>
 800f904:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f908:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f90c:	ee17 0a90 	vmov	r0, s15
 800f910:	f7f0 fe22 	bl	8000558 <__aeabi_f2d>
 800f914:	f00b fca6 	bl	801b264 <sqrt>
 800f918:	f7f1 f94e 	bl	8000bb8 <__aeabi_d2f>
 800f91c:	ee07 0a90 	vmov	s15, r0
 800f920:	ee67 7a88 	vmul.f32	s15, s15, s16
 800f924:	edc5 7a02 	vstr	s15, [r5, #8]
 800f928:	ed94 7a04 	vldr	s14, [r4, #16]
 800f92c:	edd4 7a00 	vldr	s15, [r4]
 800f930:	edd4 6a08 	vldr	s13, [r4, #32]
 800f934:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f938:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800f93c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f940:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f948:	dd16      	ble.n	800f978 <m_dcm2q_eml+0x18c>
 800f94a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f94e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f952:	ee17 0a90 	vmov	r0, s15
 800f956:	f7f0 fdff 	bl	8000558 <__aeabi_f2d>
 800f95a:	f00b fc83 	bl	801b264 <sqrt>
 800f95e:	f7f1 f92b 	bl	8000bb8 <__aeabi_d2f>
 800f962:	ecbd 8b02 	vpop	{d8}
 800f966:	ee07 0a10 	vmov	s14, r0
 800f96a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f96e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f972:	edc5 7a03 	vstr	s15, [r5, #12]
 800f976:	bd38      	pop	{r3, r4, r5, pc}
 800f978:	ecbd 8b02 	vpop	{d8}
 800f97c:	eddf 7a06 	vldr	s15, [pc, #24]	; 800f998 <m_dcm2q_eml+0x1ac>
 800f980:	edc5 7a03 	vstr	s15, [r5, #12]
 800f984:	bd38      	pop	{r3, r4, r5, pc}
 800f986:	eddf 7a04 	vldr	s15, [pc, #16]	; 800f998 <m_dcm2q_eml+0x1ac>
 800f98a:	e7cb      	b.n	800f924 <m_dcm2q_eml+0x138>
 800f98c:	eddf 7a02 	vldr	s15, [pc, #8]	; 800f998 <m_dcm2q_eml+0x1ac>
 800f990:	e7a5      	b.n	800f8de <m_dcm2q_eml+0xf2>
 800f992:	ed9f 7a01 	vldr	s14, [pc, #4]	; 800f998 <m_dcm2q_eml+0x1ac>
 800f996:	e74e      	b.n	800f836 <m_dcm2q_eml+0x4a>
 800f998:	00000000 	.word	0x00000000

0800f99c <SpacePointGyroProp>:
 800f99c:	b570      	push	{r4, r5, r6, lr}
 800f99e:	ed92 6a01 	vldr	s12, [r2, #4]
 800f9a2:	ed92 7a00 	vldr	s14, [r2]
 800f9a6:	edd2 6a02 	vldr	s13, [r2, #8]
 800f9aa:	edd1 7a02 	vldr	s15, [r1, #8]
 800f9ae:	ed2d 8b04 	vpush	{d8-d9}
 800f9b2:	edd1 8a01 	vldr	s17, [r1, #4]
 800f9b6:	ed9f 8a3c 	vldr	s16, [pc, #240]	; 800faa8 <SpacePointGyroProp+0x10c>
 800f9ba:	ed91 9a00 	vldr	s18, [r1]
 800f9be:	9d08      	ldr	r5, [sp, #32]
 800f9c0:	ee20 8a08 	vmul.f32	s16, s0, s16
 800f9c4:	ee78 8ac6 	vsub.f32	s17, s17, s12
 800f9c8:	ee39 9a47 	vsub.f32	s18, s18, s14
 800f9cc:	ee68 8a88 	vmul.f32	s17, s17, s16
 800f9d0:	ee29 9a08 	vmul.f32	s18, s18, s16
 800f9d4:	ee28 7aa8 	vmul.f32	s14, s17, s17
 800f9d8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f9dc:	eea9 7a09 	vfma.f32	s14, s18, s18
 800f9e0:	4606      	mov	r6, r0
 800f9e2:	461c      	mov	r4, r3
 800f9e4:	ee27 8a88 	vmul.f32	s16, s15, s16
 800f9e8:	eef0 7a47 	vmov.f32	s15, s14
 800f9ec:	eee8 7a08 	vfma.f32	s15, s16, s16
 800f9f0:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 800f9f4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f9f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f9fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fa00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa04:	d445      	bmi.n	800fa92 <SpacePointGyroProp+0xf6>
 800fa06:	2000      	movs	r0, #0
 800fa08:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800fa0c:	ee29 9a00 	vmul.f32	s18, s18, s0
 800fa10:	ee68 8a80 	vmul.f32	s17, s17, s0
 800fa14:	ee28 8a00 	vmul.f32	s16, s16, s0
 800fa18:	4622      	mov	r2, r4
 800fa1a:	60e8      	str	r0, [r5, #12]
 800fa1c:	4631      	mov	r1, r6
 800fa1e:	ed85 9a00 	vstr	s18, [r5]
 800fa22:	edc5 8a01 	vstr	s17, [r5, #4]
 800fa26:	ed85 8a02 	vstr	s16, [r5, #8]
 800fa2a:	4628      	mov	r0, r5
 800fa2c:	f7ff fd1e 	bl	800f46c <m_qmult_eml>
 800fa30:	edd4 8a02 	vldr	s17, [r4, #8]
 800fa34:	ed94 9a01 	vldr	s18, [r4, #4]
 800fa38:	ed94 8a03 	vldr	s16, [r4, #12]
 800fa3c:	edd4 9a00 	vldr	s19, [r4]
 800fa40:	ee68 7aa8 	vmul.f32	s15, s17, s17
 800fa44:	eee9 7a09 	vfma.f32	s15, s18, s18
 800fa48:	eee8 7a08 	vfma.f32	s15, s16, s16
 800fa4c:	eee9 7aa9 	vfma.f32	s15, s19, s19
 800fa50:	ee17 0a90 	vmov	r0, s15
 800fa54:	f7f0 fd80 	bl	8000558 <__aeabi_f2d>
 800fa58:	f00b fc04 	bl	801b264 <sqrt>
 800fa5c:	f7f1 f8ac 	bl	8000bb8 <__aeabi_d2f>
 800fa60:	ee07 0a90 	vmov	s15, r0
 800fa64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fa68:	eec7 7a27 	vdiv.f32	s15, s14, s15
 800fa6c:	ee69 9aa7 	vmul.f32	s19, s19, s15
 800fa70:	ee29 9a27 	vmul.f32	s18, s18, s15
 800fa74:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800fa78:	ee28 8a27 	vmul.f32	s16, s16, s15
 800fa7c:	edc4 9a00 	vstr	s19, [r4]
 800fa80:	ed84 9a01 	vstr	s18, [r4, #4]
 800fa84:	edc4 8a02 	vstr	s17, [r4, #8]
 800fa88:	ed84 8a03 	vstr	s16, [r4, #12]
 800fa8c:	ecbd 8b04 	vpop	{d8-d9}
 800fa90:	bd70      	pop	{r4, r5, r6, pc}
 800fa92:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fa96:	ee17 0a90 	vmov	r0, s15
 800fa9a:	f7f0 fd5d 	bl	8000558 <__aeabi_f2d>
 800fa9e:	f00b fbe1 	bl	801b264 <sqrt>
 800faa2:	f7f1 f889 	bl	8000bb8 <__aeabi_d2f>
 800faa6:	e7af      	b.n	800fa08 <SpacePointGyroProp+0x6c>
 800faa8:	3c8efa35 	.word	0x3c8efa35

0800faac <quatErr2EulerErr>:
 800faac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fab0:	2300      	movs	r3, #0
 800fab2:	ed2d 8b04 	vpush	{d8-d9}
 800fab6:	6013      	str	r3, [r2, #0]
 800fab8:	6053      	str	r3, [r2, #4]
 800faba:	6093      	str	r3, [r2, #8]
 800fabc:	ed9f 8a71 	vldr	s16, [pc, #452]	; 800fc84 <quatErr2EulerErr+0x1d8>
 800fac0:	edd0 7a01 	vldr	s15, [r0, #4]
 800fac4:	ee67 7a88 	vmul.f32	s15, s15, s16
 800fac8:	4606      	mov	r6, r0
 800faca:	ee17 0a90 	vmov	r0, s15
 800face:	460c      	mov	r4, r1
 800fad0:	4615      	mov	r5, r2
 800fad2:	f00b fab1 	bl	801b038 <cosf>
 800fad6:	edd6 8a02 	vldr	s17, [r6, #8]
 800fada:	ee68 8a88 	vmul.f32	s17, s17, s16
 800fade:	ee09 0a10 	vmov	s18, r0
 800fae2:	ee18 0a90 	vmov	r0, s17
 800fae6:	f00b fb07 	bl	801b0f8 <sinf>
 800faea:	ee08 0a10 	vmov	s16, r0
 800faee:	ee18 0a90 	vmov	r0, s17
 800faf2:	f00b faa1 	bl	801b038 <cosf>
 800faf6:	ee06 0a10 	vmov	s12, r0
 800fafa:	edd4 7a01 	vldr	s15, [r4, #4]
 800fafe:	edd4 6a02 	vldr	s13, [r4, #8]
 800fb02:	ed9f 7a61 	vldr	s14, [pc, #388]	; 800fc88 <quatErr2EulerErr+0x1dc>
 800fb06:	ee66 8a06 	vmul.f32	s17, s12, s12
 800fb0a:	ee28 8a08 	vmul.f32	s16, s16, s16
 800fb0e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800fb12:	eee8 7a26 	vfma.f32	s15, s16, s13
 800fb16:	eef1 6ae7 	vsqrt.f32	s13, s15
 800fb1a:	ee66 7a87 	vmul.f32	s15, s13, s14
 800fb1e:	ee17 0a90 	vmov	r0, s15
 800fb22:	f7f0 fd19 	bl	8000558 <__aeabi_f2d>
 800fb26:	2200      	movs	r2, #0
 800fb28:	4b58      	ldr	r3, [pc, #352]	; (800fc8c <quatErr2EulerErr+0x1e0>)
 800fb2a:	4680      	mov	r8, r0
 800fb2c:	4689      	mov	r9, r1
 800fb2e:	f7f0 ffe7 	bl	8000b00 <__aeabi_dcmple>
 800fb32:	b918      	cbnz	r0, 800fb3c <quatErr2EulerErr+0x90>
 800fb34:	f8df 9154 	ldr.w	r9, [pc, #340]	; 800fc8c <quatErr2EulerErr+0x1e0>
 800fb38:	f04f 0800 	mov.w	r8, #0
 800fb3c:	4649      	mov	r1, r9
 800fb3e:	4640      	mov	r0, r8
 800fb40:	f7f1 f83a 	bl	8000bb8 <__aeabi_d2f>
 800fb44:	f7f0 fd08 	bl	8000558 <__aeabi_f2d>
 800fb48:	2200      	movs	r2, #0
 800fb4a:	4b51      	ldr	r3, [pc, #324]	; (800fc90 <quatErr2EulerErr+0x1e4>)
 800fb4c:	4680      	mov	r8, r0
 800fb4e:	4689      	mov	r9, r1
 800fb50:	f7f0 ffe0 	bl	8000b14 <__aeabi_dcmpge>
 800fb54:	b918      	cbnz	r0, 800fb5e <quatErr2EulerErr+0xb2>
 800fb56:	f8df 9138 	ldr.w	r9, [pc, #312]	; 800fc90 <quatErr2EulerErr+0x1e4>
 800fb5a:	f04f 0800 	mov.w	r8, #0
 800fb5e:	4649      	mov	r1, r9
 800fb60:	4640      	mov	r0, r8
 800fb62:	f7f1 f829 	bl	8000bb8 <__aeabi_d2f>
 800fb66:	6068      	str	r0, [r5, #4]
 800fb68:	edd4 7a02 	vldr	s15, [r4, #8]
 800fb6c:	ed94 6a01 	vldr	s12, [r4, #4]
 800fb70:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800fc94 <quatErr2EulerErr+0x1e8>
 800fb74:	eddf 6a44 	vldr	s13, [pc, #272]	; 800fc88 <quatErr2EulerErr+0x1dc>
 800fb78:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800fb7c:	eea9 7a09 	vfma.f32	s14, s18, s18
 800fb80:	eee8 7a06 	vfma.f32	s15, s16, s12
 800fb84:	ee87 6a87 	vdiv.f32	s12, s15, s14
 800fb88:	eef1 7ac6 	vsqrt.f32	s15, s12
 800fb8c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800fb90:	ee17 0a90 	vmov	r0, s15
 800fb94:	f7f0 fce0 	bl	8000558 <__aeabi_f2d>
 800fb98:	2200      	movs	r2, #0
 800fb9a:	4b3f      	ldr	r3, [pc, #252]	; (800fc98 <quatErr2EulerErr+0x1ec>)
 800fb9c:	4680      	mov	r8, r0
 800fb9e:	4689      	mov	r9, r1
 800fba0:	f7f0 ffae 	bl	8000b00 <__aeabi_dcmple>
 800fba4:	b918      	cbnz	r0, 800fbae <quatErr2EulerErr+0x102>
 800fba6:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 800fc98 <quatErr2EulerErr+0x1ec>
 800fbaa:	f04f 0800 	mov.w	r8, #0
 800fbae:	4649      	mov	r1, r9
 800fbb0:	4640      	mov	r0, r8
 800fbb2:	f7f1 f801 	bl	8000bb8 <__aeabi_d2f>
 800fbb6:	f7f0 fccf 	bl	8000558 <__aeabi_f2d>
 800fbba:	2200      	movs	r2, #0
 800fbbc:	4b34      	ldr	r3, [pc, #208]	; (800fc90 <quatErr2EulerErr+0x1e4>)
 800fbbe:	4680      	mov	r8, r0
 800fbc0:	4689      	mov	r9, r1
 800fbc2:	f7f0 ffa7 	bl	8000b14 <__aeabi_dcmpge>
 800fbc6:	b918      	cbnz	r0, 800fbd0 <quatErr2EulerErr+0x124>
 800fbc8:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 800fc90 <quatErr2EulerErr+0x1e4>
 800fbcc:	f04f 0800 	mov.w	r8, #0
 800fbd0:	4640      	mov	r0, r8
 800fbd2:	4649      	mov	r1, r9
 800fbd4:	f7f0 fff0 	bl	8000bb8 <__aeabi_d2f>
 800fbd8:	6028      	str	r0, [r5, #0]
 800fbda:	edd6 7a01 	vldr	s15, [r6, #4]
 800fbde:	eddf 5a29 	vldr	s11, [pc, #164]	; 800fc84 <quatErr2EulerErr+0x1d8>
 800fbe2:	edd4 6a02 	vldr	s13, [r4, #8]
 800fbe6:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 800fc9c <quatErr2EulerErr+0x1f0>
 800fbea:	ed94 6a01 	vldr	s12, [r4, #4]
 800fbee:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800fbf2:	ee28 8a26 	vmul.f32	s16, s16, s13
 800fbf6:	eef0 6ae7 	vabs.f32	s13, s15
 800fbfa:	eef4 6ac7 	vcmpe.f32	s13, s14
 800fbfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc02:	eea8 8a86 	vfma.f32	s16, s17, s12
 800fc06:	d430      	bmi.n	800fc6a <quatErr2EulerErr+0x1be>
 800fc08:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800fca0 <quatErr2EulerErr+0x1f4>
 800fc0c:	edd4 7a00 	vldr	s15, [r4]
 800fc10:	eee8 7a07 	vfma.f32	s15, s16, s14
 800fc14:	eeb1 7ae7 	vsqrt.f32	s14, s15
 800fc18:	eddf 7a1b 	vldr	s15, [pc, #108]	; 800fc88 <quatErr2EulerErr+0x1dc>
 800fc1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fc20:	ee17 0a90 	vmov	r0, s15
 800fc24:	f7f0 fc98 	bl	8000558 <__aeabi_f2d>
 800fc28:	2200      	movs	r2, #0
 800fc2a:	4b1b      	ldr	r3, [pc, #108]	; (800fc98 <quatErr2EulerErr+0x1ec>)
 800fc2c:	4606      	mov	r6, r0
 800fc2e:	460f      	mov	r7, r1
 800fc30:	f7f0 ff66 	bl	8000b00 <__aeabi_dcmple>
 800fc34:	b908      	cbnz	r0, 800fc3a <quatErr2EulerErr+0x18e>
 800fc36:	4f18      	ldr	r7, [pc, #96]	; (800fc98 <quatErr2EulerErr+0x1ec>)
 800fc38:	2600      	movs	r6, #0
 800fc3a:	4639      	mov	r1, r7
 800fc3c:	4630      	mov	r0, r6
 800fc3e:	f7f0 ffbb 	bl	8000bb8 <__aeabi_d2f>
 800fc42:	f7f0 fc89 	bl	8000558 <__aeabi_f2d>
 800fc46:	2200      	movs	r2, #0
 800fc48:	4b11      	ldr	r3, [pc, #68]	; (800fc90 <quatErr2EulerErr+0x1e4>)
 800fc4a:	4606      	mov	r6, r0
 800fc4c:	460f      	mov	r7, r1
 800fc4e:	f7f0 ff61 	bl	8000b14 <__aeabi_dcmpge>
 800fc52:	b908      	cbnz	r0, 800fc58 <quatErr2EulerErr+0x1ac>
 800fc54:	4f0e      	ldr	r7, [pc, #56]	; (800fc90 <quatErr2EulerErr+0x1e4>)
 800fc56:	2600      	movs	r6, #0
 800fc58:	4630      	mov	r0, r6
 800fc5a:	4639      	mov	r1, r7
 800fc5c:	f7f0 ffac 	bl	8000bb8 <__aeabi_d2f>
 800fc60:	ecbd 8b04 	vpop	{d8-d9}
 800fc64:	60a8      	str	r0, [r5, #8]
 800fc66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fc6a:	ee17 0a90 	vmov	r0, s15
 800fc6e:	f00b fa7d 	bl	801b16c <tanf>
 800fc72:	ee07 0a10 	vmov	s14, r0
 800fc76:	edd4 7a00 	vldr	s15, [r4]
 800fc7a:	ee27 7a07 	vmul.f32	s14, s14, s14
 800fc7e:	eee7 7a08 	vfma.f32	s15, s14, s16
 800fc82:	e7c7      	b.n	800fc14 <quatErr2EulerErr+0x168>
 800fc84:	3c8efa35 	.word	0x3c8efa35
 800fc88:	42e52ee1 	.word	0x42e52ee1
 800fc8c:	40568000 	.word	0x40568000
 800fc90:	3ff00000 	.word	0x3ff00000
 800fc94:	3a83126f 	.word	0x3a83126f
 800fc98:	40668000 	.word	0x40668000
 800fc9c:	3fbc430e 	.word	0x3fbc430e
 800fca0:	42c6ab07 	.word	0x42c6ab07

0800fca4 <rt_InitInfAndNaN.isra.3>:
 800fca4:	4b05      	ldr	r3, [pc, #20]	; (800fcbc <rt_InitInfAndNaN.isra.3+0x18>)
 800fca6:	4a06      	ldr	r2, [pc, #24]	; (800fcc0 <rt_InitInfAndNaN.isra.3+0x1c>)
 800fca8:	f503 6182 	add.w	r1, r3, #1040	; 0x410
 800fcac:	f203 4314 	addw	r3, r3, #1044	; 0x414
 800fcb0:	f04f 40ff 	mov.w	r0, #2139095040	; 0x7f800000
 800fcb4:	6008      	str	r0, [r1, #0]
 800fcb6:	601a      	str	r2, [r3, #0]
 800fcb8:	4770      	bx	lr
 800fcba:	bf00      	nop
 800fcbc:	200013d0 	.word	0x200013d0
 800fcc0:	ff800000 	.word	0xff800000

0800fcc4 <MEMSloadFromNVM.isra.10>:
 800fcc4:	f7fe b883 	b.w	800ddce <MotionFX_LoadMagCalFromNVM>

0800fcc8 <MEMSLoadMagCalNVM>:
 800fcc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fcca:	b097      	sub	sp, #92	; 0x5c
 800fccc:	4604      	mov	r4, r0
 800fcce:	2301      	movs	r3, #1
 800fcd0:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
 800fcd4:	a916      	add	r1, sp, #88	; 0x58
 800fcd6:	2300      	movs	r3, #0
 800fcd8:	f801 3d54 	strb.w	r3, [r1, #-84]!
 800fcdc:	2054      	movs	r0, #84	; 0x54
 800fcde:	f7ff fff1 	bl	800fcc4 <MEMSloadFromNVM.isra.10>
 800fce2:	2801      	cmp	r0, #1
 800fce4:	d101      	bne.n	800fcea <MEMSLoadMagCalNVM+0x22>
 800fce6:	b017      	add	sp, #92	; 0x5c
 800fce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fcea:	2300      	movs	r3, #0
 800fcec:	f88d 3004 	strb.w	r3, [sp, #4]
 800fcf0:	9d02      	ldr	r5, [sp, #8]
 800fcf2:	2d00      	cmp	r5, #0
 800fcf4:	d0f7      	beq.n	800fce6 <MEMSLoadMagCalNVM+0x1e>
 800fcf6:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d0f3      	beq.n	800fce6 <MEMSLoadMagCalNVM+0x1e>
 800fcfe:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d0ef      	beq.n	800fce6 <MEMSLoadMagCalNVM+0x1e>
 800fd06:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 800fd0a:	429a      	cmp	r2, r3
 800fd0c:	d3eb      	bcc.n	800fce6 <MEMSLoadMagCalNVM+0x1e>
 800fd0e:	f10d 0c0c 	add.w	ip, sp, #12
 800fd12:	f104 066c 	add.w	r6, r4, #108	; 0x6c
 800fd16:	f10d 0e3c 	add.w	lr, sp, #60	; 0x3c
 800fd1a:	4667      	mov	r7, ip
 800fd1c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800fd1e:	6030      	str	r0, [r6, #0]
 800fd20:	6071      	str	r1, [r6, #4]
 800fd22:	60b2      	str	r2, [r6, #8]
 800fd24:	60f3      	str	r3, [r6, #12]
 800fd26:	46bc      	mov	ip, r7
 800fd28:	3610      	adds	r6, #16
 800fd2a:	4577      	cmp	r7, lr
 800fd2c:	d1f5      	bne.n	800fd1a <MEMSLoadMagCalNVM+0x52>
 800fd2e:	6838      	ldr	r0, [r7, #0]
 800fd30:	6030      	str	r0, [r6, #0]
 800fd32:	61e5      	str	r5, [r4, #28]
 800fd34:	ad10      	add	r5, sp, #64	; 0x40
 800fd36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fd38:	6560      	str	r0, [r4, #84]	; 0x54
 800fd3a:	65a1      	str	r1, [r4, #88]	; 0x58
 800fd3c:	65e2      	str	r2, [r4, #92]	; 0x5c
 800fd3e:	6623      	str	r3, [r4, #96]	; 0x60
 800fd40:	cd03      	ldmia	r5!, {r0, r1}
 800fd42:	6660      	str	r0, [r4, #100]	; 0x64
 800fd44:	66a1      	str	r1, [r4, #104]	; 0x68
 800fd46:	e7ce      	b.n	800fce6 <MEMSLoadMagCalNVM+0x1e>

0800fd48 <MEMSsaveInNVM.isra.11>:
 800fd48:	f7fe b84e 	b.w	800dde8 <MotionFX_SaveMagCalInNVM>

0800fd4c <MEMSSaveMagCalNVM>:
 800fd4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fd4e:	b097      	sub	sp, #92	; 0x5c
 800fd50:	4606      	mov	r6, r0
 800fd52:	2301      	movs	r3, #1
 800fd54:	f88d 3004 	strb.w	r3, [sp, #4]
 800fd58:	f100 0458 	add.w	r4, r0, #88	; 0x58
 800fd5c:	af03      	add	r7, sp, #12
 800fd5e:	f100 0c88 	add.w	ip, r0, #136	; 0x88
 800fd62:	463d      	mov	r5, r7
 800fd64:	6820      	ldr	r0, [r4, #0]
 800fd66:	6861      	ldr	r1, [r4, #4]
 800fd68:	68a2      	ldr	r2, [r4, #8]
 800fd6a:	68e3      	ldr	r3, [r4, #12]
 800fd6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800fd6e:	3410      	adds	r4, #16
 800fd70:	462f      	mov	r7, r5
 800fd72:	4564      	cmp	r4, ip
 800fd74:	d1f5      	bne.n	800fd62 <MEMSSaveMagCalNVM+0x16>
 800fd76:	6820      	ldr	r0, [r4, #0]
 800fd78:	6028      	str	r0, [r5, #0]
 800fd7a:	68b3      	ldr	r3, [r6, #8]
 800fd7c:	9302      	str	r3, [sp, #8]
 800fd7e:	ac10      	add	r4, sp, #64	; 0x40
 800fd80:	f856 0f40 	ldr.w	r0, [r6, #64]!
 800fd84:	6871      	ldr	r1, [r6, #4]
 800fd86:	68b2      	ldr	r2, [r6, #8]
 800fd88:	68f3      	ldr	r3, [r6, #12]
 800fd8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fd8c:	6930      	ldr	r0, [r6, #16]
 800fd8e:	6971      	ldr	r1, [r6, #20]
 800fd90:	c403      	stmia	r4!, {r0, r1}
 800fd92:	a901      	add	r1, sp, #4
 800fd94:	2054      	movs	r0, #84	; 0x54
 800fd96:	f7ff ffd7 	bl	800fd48 <MEMSsaveInNVM.isra.11>
 800fd9a:	b017      	add	sp, #92	; 0x5c
 800fd9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd9e:	bf00      	nop

0800fda0 <llEvaluate.constprop.23>:
 800fda0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fda2:	b085      	sub	sp, #20
 800fda4:	4606      	mov	r6, r0
 800fda6:	f102 0e10 	add.w	lr, r2, #16
 800fdaa:	4607      	mov	r7, r0
 800fdac:	4604      	mov	r4, r0
 800fdae:	466b      	mov	r3, sp
 800fdb0:	f852 5b04 	ldr.w	r5, [r2], #4
 800fdb4:	601d      	str	r5, [r3, #0]
 800fdb6:	46ec      	mov	ip, sp
 800fdb8:	463d      	mov	r5, r7
 800fdba:	42a5      	cmp	r5, r4
 800fdbc:	edd3 7a00 	vldr	s15, [r3]
 800fdc0:	d008      	beq.n	800fdd4 <llEvaluate.constprop.23+0x34>
 800fdc2:	ecbc 7a01 	vldmia	ip!, {s14}
 800fdc6:	ecf5 6a01 	vldmia	r5!, {s13}
 800fdca:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800fdce:	edc3 7a00 	vstr	s15, [r3]
 800fdd2:	e7f2      	b.n	800fdba <llEvaluate.constprop.23+0x1a>
 800fdd4:	edd5 6a00 	vldr	s13, [r5]
 800fdd8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800fddc:	462c      	mov	r4, r5
 800fdde:	4572      	cmp	r2, lr
 800fde0:	f107 0710 	add.w	r7, r7, #16
 800fde4:	f104 0414 	add.w	r4, r4, #20
 800fde8:	eca3 7a01 	vstmia	r3!, {s14}
 800fdec:	d1e0      	bne.n	800fdb0 <llEvaluate.constprop.23+0x10>
 800fdee:	f10d 0c10 	add.w	ip, sp, #16
 800fdf2:	f101 0410 	add.w	r4, r1, #16
 800fdf6:	2203      	movs	r2, #3
 800fdf8:	f85c 5d04 	ldr.w	r5, [ip, #-4]!
 800fdfc:	f844 5c04 	str.w	r5, [r4, #-4]
 800fe00:	1c53      	adds	r3, r2, #1
 800fe02:	b25b      	sxtb	r3, r3
 800fe04:	ea4f 0e82 	mov.w	lr, r2, lsl #2
 800fe08:	b21d      	sxth	r5, r3
 800fe0a:	eb00 1705 	add.w	r7, r0, r5, lsl #4
 800fe0e:	2b04      	cmp	r3, #4
 800fe10:	4477      	add	r7, lr
 800fe12:	eb01 0585 	add.w	r5, r1, r5, lsl #2
 800fe16:	ed54 7a01 	vldr	s15, [r4, #-4]
 800fe1a:	d00a      	beq.n	800fe32 <llEvaluate.constprop.23+0x92>
 800fe1c:	edd7 6a00 	vldr	s13, [r7]
 800fe20:	ed95 7a00 	vldr	s14, [r5]
 800fe24:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800fe28:	3301      	adds	r3, #1
 800fe2a:	b25b      	sxtb	r3, r3
 800fe2c:	ed44 7a01 	vstr	s15, [r4, #-4]
 800fe30:	e7ea      	b.n	800fe08 <llEvaluate.constprop.23+0x68>
 800fe32:	edd6 6a0f 	vldr	s13, [r6, #60]	; 0x3c
 800fe36:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800fe3a:	3a01      	subs	r2, #1
 800fe3c:	1c53      	adds	r3, r2, #1
 800fe3e:	f1a6 0614 	sub.w	r6, r6, #20
 800fe42:	ed24 7a01 	vstmdb	r4!, {s14}
 800fe46:	d1d7      	bne.n	800fdf8 <llEvaluate.constprop.23+0x58>
 800fe48:	b005      	add	sp, #20
 800fe4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fe4c <iNemo_setOrientation.constprop.40>:
 800fe4c:	b4f0      	push	{r4, r5, r6, r7}
 800fe4e:	4973      	ldr	r1, [pc, #460]	; (801001c <iNemo_setOrientation.constprop.40+0x1d0>)
 800fe50:	4b73      	ldr	r3, [pc, #460]	; (8010020 <iNemo_setOrientation.constprop.40+0x1d4>)
 800fe52:	7808      	ldrb	r0, [r1, #0]
 800fe54:	2200      	movs	r2, #0
 800fe56:	f1a0 0742 	sub.w	r7, r0, #66	; 0x42
 800fe5a:	b084      	sub	sp, #16
 800fe5c:	2f17      	cmp	r7, #23
 800fe5e:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
 800fe62:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
 800fe66:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 800fe6a:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
 800fe6e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800fe72:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
 800fe76:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
 800fe7a:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
 800fe7e:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
 800fe82:	790a      	ldrb	r2, [r1, #4]
 800fe84:	bf98      	it	ls
 800fe86:	3020      	addls	r0, #32
 800fe88:	f88d 0004 	strb.w	r0, [sp, #4]
 800fe8c:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 800fe90:	2817      	cmp	r0, #23
 800fe92:	bf98      	it	ls
 800fe94:	3220      	addls	r2, #32
 800fe96:	f88d 2008 	strb.w	r2, [sp, #8]
 800fe9a:	7a0a      	ldrb	r2, [r1, #8]
 800fe9c:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 800fea0:	2817      	cmp	r0, #23
 800fea2:	bf98      	it	ls
 800fea4:	3220      	addls	r2, #32
 800fea6:	f88d 200c 	strb.w	r2, [sp, #12]
 800feaa:	784a      	ldrb	r2, [r1, #1]
 800feac:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 800feb0:	2817      	cmp	r0, #23
 800feb2:	bf98      	it	ls
 800feb4:	3220      	addls	r2, #32
 800feb6:	f88d 2005 	strb.w	r2, [sp, #5]
 800feba:	794a      	ldrb	r2, [r1, #5]
 800febc:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 800fec0:	2817      	cmp	r0, #23
 800fec2:	bf98      	it	ls
 800fec4:	3220      	addls	r2, #32
 800fec6:	f88d 2009 	strb.w	r2, [sp, #9]
 800feca:	7a4a      	ldrb	r2, [r1, #9]
 800fecc:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 800fed0:	2817      	cmp	r0, #23
 800fed2:	bf98      	it	ls
 800fed4:	3220      	addls	r2, #32
 800fed6:	f88d 200d 	strb.w	r2, [sp, #13]
 800feda:	788a      	ldrb	r2, [r1, #2]
 800fedc:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 800fee0:	2817      	cmp	r0, #23
 800fee2:	bf98      	it	ls
 800fee4:	3220      	addls	r2, #32
 800fee6:	f88d 2006 	strb.w	r2, [sp, #6]
 800feea:	798a      	ldrb	r2, [r1, #6]
 800feec:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 800fef0:	2817      	cmp	r0, #23
 800fef2:	bf98      	it	ls
 800fef4:	3220      	addls	r2, #32
 800fef6:	f88d 200a 	strb.w	r2, [sp, #10]
 800fefa:	7a8a      	ldrb	r2, [r1, #10]
 800fefc:	f1a2 0142 	sub.w	r1, r2, #66	; 0x42
 800ff00:	2917      	cmp	r1, #23
 800ff02:	bf98      	it	ls
 800ff04:	3220      	addls	r2, #32
 800ff06:	f88d 200e 	strb.w	r2, [sp, #14]
 800ff0a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ff0e:	3a64      	subs	r2, #100	; 0x64
 800ff10:	2a13      	cmp	r2, #19
 800ff12:	d80e      	bhi.n	800ff32 <iNemo_setOrientation.constprop.40+0xe6>
 800ff14:	e8df f002 	tbb	[pc, r2]
 800ff18:	0d0dba0a 	.word	0x0d0dba0a
 800ff1c:	0d0d0d0d 	.word	0x0d0d0d0d
 800ff20:	0dbe0d0d 	.word	0x0dbe0d0d
 800ff24:	c20d0d0d 	.word	0xc20d0d0d
 800ff28:	ca0dc60d 	.word	0xca0dc60d
 800ff2c:	22ff      	movs	r2, #255	; 0xff
 800ff2e:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
 800ff32:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ff36:	3a64      	subs	r2, #100	; 0x64
 800ff38:	2a13      	cmp	r2, #19
 800ff3a:	d80e      	bhi.n	800ff5a <iNemo_setOrientation.constprop.40+0x10e>
 800ff3c:	e8df f002 	tbb	[pc, r2]
 800ff40:	0d0dba0a 	.word	0x0d0dba0a
 800ff44:	0d0d0d0d 	.word	0x0d0d0d0d
 800ff48:	0dbe0d0d 	.word	0x0dbe0d0d
 800ff4c:	c20d0d0d 	.word	0xc20d0d0d
 800ff50:	ca0dc60d 	.word	0xca0dc60d
 800ff54:	22ff      	movs	r2, #255	; 0xff
 800ff56:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
 800ff5a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ff5e:	3a64      	subs	r2, #100	; 0x64
 800ff60:	2a13      	cmp	r2, #19
 800ff62:	d80e      	bhi.n	800ff82 <iNemo_setOrientation.constprop.40+0x136>
 800ff64:	e8df f002 	tbb	[pc, r2]
 800ff68:	0d0dba0a 	.word	0x0d0dba0a
 800ff6c:	0d0d0d0d 	.word	0x0d0d0d0d
 800ff70:	0dbe0d0d 	.word	0x0dbe0d0d
 800ff74:	c20d0d0d 	.word	0xc20d0d0d
 800ff78:	ca0dc60d 	.word	0xca0dc60d
 800ff7c:	22ff      	movs	r2, #255	; 0xff
 800ff7e:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
 800ff82:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800ff86:	3a64      	subs	r2, #100	; 0x64
 800ff88:	2a13      	cmp	r2, #19
 800ff8a:	d80e      	bhi.n	800ffaa <iNemo_setOrientation.constprop.40+0x15e>
 800ff8c:	e8df f002 	tbb	[pc, r2]
 800ff90:	0d0dba0a 	.word	0x0d0dba0a
 800ff94:	0d0d0d0d 	.word	0x0d0d0d0d
 800ff98:	0dbe0d0d 	.word	0x0dbe0d0d
 800ff9c:	c20d0d0d 	.word	0xc20d0d0d
 800ffa0:	ca0dc60d 	.word	0xca0dc60d
 800ffa4:	22ff      	movs	r2, #255	; 0xff
 800ffa6:	f883 2436 	strb.w	r2, [r3, #1078]	; 0x436
 800ffaa:	f89d 2009 	ldrb.w	r2, [sp, #9]
 800ffae:	3a64      	subs	r2, #100	; 0x64
 800ffb0:	2a13      	cmp	r2, #19
 800ffb2:	d80e      	bhi.n	800ffd2 <iNemo_setOrientation.constprop.40+0x186>
 800ffb4:	e8df f002 	tbb	[pc, r2]
 800ffb8:	0d0dba0a 	.word	0x0d0dba0a
 800ffbc:	0d0d0d0d 	.word	0x0d0d0d0d
 800ffc0:	0dbe0d0d 	.word	0x0dbe0d0d
 800ffc4:	c20d0d0d 	.word	0xc20d0d0d
 800ffc8:	ca0dc60d 	.word	0xca0dc60d
 800ffcc:	22ff      	movs	r2, #255	; 0xff
 800ffce:	f883 2437 	strb.w	r2, [r3, #1079]	; 0x437
 800ffd2:	f89d 200a 	ldrb.w	r2, [sp, #10]
 800ffd6:	3a64      	subs	r2, #100	; 0x64
 800ffd8:	2a13      	cmp	r2, #19
 800ffda:	d80e      	bhi.n	800fffa <iNemo_setOrientation.constprop.40+0x1ae>
 800ffdc:	e8df f002 	tbb	[pc, r2]
 800ffe0:	0d0dba0a 	.word	0x0d0dba0a
 800ffe4:	0d0d0d0d 	.word	0x0d0d0d0d
 800ffe8:	0dbe0d0d 	.word	0x0dbe0d0d
 800ffec:	c20d0d0d 	.word	0xc20d0d0d
 800fff0:	ca0dc60d 	.word	0xca0dc60d
 800fff4:	22ff      	movs	r2, #255	; 0xff
 800fff6:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
 800fffa:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800fffe:	3a64      	subs	r2, #100	; 0x64
 8010000:	2a13      	cmp	r2, #19
 8010002:	d812      	bhi.n	801002a <iNemo_setOrientation.constprop.40+0x1de>
 8010004:	e8df f002 	tbb	[pc, r2]
 8010008:	1111ba0e 	.word	0x1111ba0e
 801000c:	11111111 	.word	0x11111111
 8010010:	11be1111 	.word	0x11be1111
 8010014:	c2111111 	.word	0xc2111111
 8010018:	ca11c611 	.word	0xca11c611
 801001c:	20000000 	.word	0x20000000
 8010020:	200013d0 	.word	0x200013d0
 8010024:	22ff      	movs	r2, #255	; 0xff
 8010026:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a
 801002a:	f89d 200d 	ldrb.w	r2, [sp, #13]
 801002e:	3a64      	subs	r2, #100	; 0x64
 8010030:	2a13      	cmp	r2, #19
 8010032:	d80e      	bhi.n	8010052 <iNemo_setOrientation.constprop.40+0x206>
 8010034:	e8df f002 	tbb	[pc, r2]
 8010038:	0d0db60a 	.word	0x0d0db60a
 801003c:	0d0d0d0d 	.word	0x0d0d0d0d
 8010040:	0dba0d0d 	.word	0x0dba0d0d
 8010044:	be0d0d0d 	.word	0xbe0d0d0d
 8010048:	c60dc20d 	.word	0xc60dc20d
 801004c:	22ff      	movs	r2, #255	; 0xff
 801004e:	f883 242b 	strb.w	r2, [r3, #1067]	; 0x42b
 8010052:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8010056:	3a64      	subs	r2, #100	; 0x64
 8010058:	2a13      	cmp	r2, #19
 801005a:	d80e      	bhi.n	801007a <iNemo_setOrientation.constprop.40+0x22e>
 801005c:	e8df f002 	tbb	[pc, r2]
 8010060:	0d0db60a 	.word	0x0d0db60a
 8010064:	0d0d0d0d 	.word	0x0d0d0d0d
 8010068:	0dbc0d0d 	.word	0x0dbc0d0d
 801006c:	c20d0d0d 	.word	0xc20d0d0d
 8010070:	100dc80d 	.word	0x100dc80d
 8010074:	22ff      	movs	r2, #255	; 0xff
 8010076:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
 801007a:	b004      	add	sp, #16
 801007c:	bcf0      	pop	{r4, r5, r6, r7}
 801007e:	4770      	bx	lr
 8010080:	22ff      	movs	r2, #255	; 0xff
 8010082:	f883 2426 	strb.w	r2, [r3, #1062]	; 0x426
 8010086:	b004      	add	sp, #16
 8010088:	bcf0      	pop	{r4, r5, r6, r7}
 801008a:	4770      	bx	lr
 801008c:	2201      	movs	r2, #1
 801008e:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
 8010092:	e74e      	b.n	800ff32 <iNemo_setOrientation.constprop.40+0xe6>
 8010094:	2201      	movs	r2, #1
 8010096:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
 801009a:	e74a      	b.n	800ff32 <iNemo_setOrientation.constprop.40+0xe6>
 801009c:	22ff      	movs	r2, #255	; 0xff
 801009e:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
 80100a2:	e746      	b.n	800ff32 <iNemo_setOrientation.constprop.40+0xe6>
 80100a4:	2201      	movs	r2, #1
 80100a6:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
 80100aa:	e742      	b.n	800ff32 <iNemo_setOrientation.constprop.40+0xe6>
 80100ac:	22ff      	movs	r2, #255	; 0xff
 80100ae:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
 80100b2:	e73e      	b.n	800ff32 <iNemo_setOrientation.constprop.40+0xe6>
 80100b4:	2201      	movs	r2, #1
 80100b6:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
 80100ba:	e74e      	b.n	800ff5a <iNemo_setOrientation.constprop.40+0x10e>
 80100bc:	2201      	movs	r2, #1
 80100be:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 80100c2:	e74a      	b.n	800ff5a <iNemo_setOrientation.constprop.40+0x10e>
 80100c4:	22ff      	movs	r2, #255	; 0xff
 80100c6:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 80100ca:	e746      	b.n	800ff5a <iNemo_setOrientation.constprop.40+0x10e>
 80100cc:	2201      	movs	r2, #1
 80100ce:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
 80100d2:	e742      	b.n	800ff5a <iNemo_setOrientation.constprop.40+0x10e>
 80100d4:	22ff      	movs	r2, #255	; 0xff
 80100d6:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
 80100da:	e73e      	b.n	800ff5a <iNemo_setOrientation.constprop.40+0x10e>
 80100dc:	2201      	movs	r2, #1
 80100de:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
 80100e2:	e74e      	b.n	800ff82 <iNemo_setOrientation.constprop.40+0x136>
 80100e4:	2201      	movs	r2, #1
 80100e6:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 80100ea:	e74a      	b.n	800ff82 <iNemo_setOrientation.constprop.40+0x136>
 80100ec:	22ff      	movs	r2, #255	; 0xff
 80100ee:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 80100f2:	e746      	b.n	800ff82 <iNemo_setOrientation.constprop.40+0x136>
 80100f4:	2201      	movs	r2, #1
 80100f6:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
 80100fa:	e742      	b.n	800ff82 <iNemo_setOrientation.constprop.40+0x136>
 80100fc:	22ff      	movs	r2, #255	; 0xff
 80100fe:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
 8010102:	e73e      	b.n	800ff82 <iNemo_setOrientation.constprop.40+0x136>
 8010104:	2201      	movs	r2, #1
 8010106:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
 801010a:	e74e      	b.n	800ffaa <iNemo_setOrientation.constprop.40+0x15e>
 801010c:	2201      	movs	r2, #1
 801010e:	f883 2433 	strb.w	r2, [r3, #1075]	; 0x433
 8010112:	e74a      	b.n	800ffaa <iNemo_setOrientation.constprop.40+0x15e>
 8010114:	22ff      	movs	r2, #255	; 0xff
 8010116:	f883 2433 	strb.w	r2, [r3, #1075]	; 0x433
 801011a:	e746      	b.n	800ffaa <iNemo_setOrientation.constprop.40+0x15e>
 801011c:	2201      	movs	r2, #1
 801011e:	f883 2436 	strb.w	r2, [r3, #1078]	; 0x436
 8010122:	e742      	b.n	800ffaa <iNemo_setOrientation.constprop.40+0x15e>
 8010124:	22ff      	movs	r2, #255	; 0xff
 8010126:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
 801012a:	e73e      	b.n	800ffaa <iNemo_setOrientation.constprop.40+0x15e>
 801012c:	2201      	movs	r2, #1
 801012e:	f883 2431 	strb.w	r2, [r3, #1073]	; 0x431
 8010132:	e74e      	b.n	800ffd2 <iNemo_setOrientation.constprop.40+0x186>
 8010134:	2201      	movs	r2, #1
 8010136:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
 801013a:	e74a      	b.n	800ffd2 <iNemo_setOrientation.constprop.40+0x186>
 801013c:	22ff      	movs	r2, #255	; 0xff
 801013e:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
 8010142:	e746      	b.n	800ffd2 <iNemo_setOrientation.constprop.40+0x186>
 8010144:	2201      	movs	r2, #1
 8010146:	f883 2437 	strb.w	r2, [r3, #1079]	; 0x437
 801014a:	e742      	b.n	800ffd2 <iNemo_setOrientation.constprop.40+0x186>
 801014c:	22ff      	movs	r2, #255	; 0xff
 801014e:	f883 2431 	strb.w	r2, [r3, #1073]	; 0x431
 8010152:	e73e      	b.n	800ffd2 <iNemo_setOrientation.constprop.40+0x186>
 8010154:	2201      	movs	r2, #1
 8010156:	f883 2432 	strb.w	r2, [r3, #1074]	; 0x432
 801015a:	e74e      	b.n	800fffa <iNemo_setOrientation.constprop.40+0x1ae>
 801015c:	2201      	movs	r2, #1
 801015e:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435
 8010162:	e74a      	b.n	800fffa <iNemo_setOrientation.constprop.40+0x1ae>
 8010164:	22ff      	movs	r2, #255	; 0xff
 8010166:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435
 801016a:	e746      	b.n	800fffa <iNemo_setOrientation.constprop.40+0x1ae>
 801016c:	2201      	movs	r2, #1
 801016e:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
 8010172:	e742      	b.n	800fffa <iNemo_setOrientation.constprop.40+0x1ae>
 8010174:	22ff      	movs	r2, #255	; 0xff
 8010176:	f883 2432 	strb.w	r2, [r3, #1074]	; 0x432
 801017a:	e73e      	b.n	800fffa <iNemo_setOrientation.constprop.40+0x1ae>
 801017c:	2201      	movs	r2, #1
 801017e:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
 8010182:	e752      	b.n	801002a <iNemo_setOrientation.constprop.40+0x1de>
 8010184:	2201      	movs	r2, #1
 8010186:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
 801018a:	e74e      	b.n	801002a <iNemo_setOrientation.constprop.40+0x1de>
 801018c:	22ff      	movs	r2, #255	; 0xff
 801018e:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
 8010192:	e74a      	b.n	801002a <iNemo_setOrientation.constprop.40+0x1de>
 8010194:	2201      	movs	r2, #1
 8010196:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a
 801019a:	e746      	b.n	801002a <iNemo_setOrientation.constprop.40+0x1de>
 801019c:	22ff      	movs	r2, #255	; 0xff
 801019e:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
 80101a2:	e742      	b.n	801002a <iNemo_setOrientation.constprop.40+0x1de>
 80101a4:	2201      	movs	r2, #1
 80101a6:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
 80101aa:	e752      	b.n	8010052 <iNemo_setOrientation.constprop.40+0x206>
 80101ac:	2201      	movs	r2, #1
 80101ae:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
 80101b2:	e74e      	b.n	8010052 <iNemo_setOrientation.constprop.40+0x206>
 80101b4:	22ff      	movs	r2, #255	; 0xff
 80101b6:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
 80101ba:	e74a      	b.n	8010052 <iNemo_setOrientation.constprop.40+0x206>
 80101bc:	2201      	movs	r2, #1
 80101be:	f883 242b 	strb.w	r2, [r3, #1067]	; 0x42b
 80101c2:	e746      	b.n	8010052 <iNemo_setOrientation.constprop.40+0x206>
 80101c4:	22ff      	movs	r2, #255	; 0xff
 80101c6:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
 80101ca:	e742      	b.n	8010052 <iNemo_setOrientation.constprop.40+0x206>
 80101cc:	2201      	movs	r2, #1
 80101ce:	f883 2426 	strb.w	r2, [r3, #1062]	; 0x426
 80101d2:	b004      	add	sp, #16
 80101d4:	bcf0      	pop	{r4, r5, r6, r7}
 80101d6:	4770      	bx	lr
 80101d8:	2201      	movs	r2, #1
 80101da:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
 80101de:	b004      	add	sp, #16
 80101e0:	bcf0      	pop	{r4, r5, r6, r7}
 80101e2:	4770      	bx	lr
 80101e4:	22ff      	movs	r2, #255	; 0xff
 80101e6:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
 80101ea:	b004      	add	sp, #16
 80101ec:	bcf0      	pop	{r4, r5, r6, r7}
 80101ee:	4770      	bx	lr
 80101f0:	2201      	movs	r2, #1
 80101f2:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
 80101f6:	b004      	add	sp, #16
 80101f8:	bcf0      	pop	{r4, r5, r6, r7}
 80101fa:	4770      	bx	lr

080101fc <iNemo_setOrientation_6X.constprop.41>:
 80101fc:	b4f0      	push	{r4, r5, r6, r7}
 80101fe:	4973      	ldr	r1, [pc, #460]	; (80103cc <iNemo_setOrientation_6X.constprop.41+0x1d0>)
 8010200:	4b73      	ldr	r3, [pc, #460]	; (80103d0 <iNemo_setOrientation_6X.constprop.41+0x1d4>)
 8010202:	7808      	ldrb	r0, [r1, #0]
 8010204:	2200      	movs	r2, #0
 8010206:	f1a0 0742 	sub.w	r7, r0, #66	; 0x42
 801020a:	b084      	sub	sp, #16
 801020c:	2f17      	cmp	r7, #23
 801020e:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
 8010212:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
 8010216:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
 801021a:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
 801021e:	f8c3 2454 	str.w	r2, [r3, #1108]	; 0x454
 8010222:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
 8010226:	f883 2450 	strb.w	r2, [r3, #1104]	; 0x450
 801022a:	f8c3 2458 	str.w	r2, [r3, #1112]	; 0x458
 801022e:	f883 245c 	strb.w	r2, [r3, #1116]	; 0x45c
 8010232:	790a      	ldrb	r2, [r1, #4]
 8010234:	bf98      	it	ls
 8010236:	3020      	addls	r0, #32
 8010238:	f88d 0004 	strb.w	r0, [sp, #4]
 801023c:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 8010240:	2817      	cmp	r0, #23
 8010242:	bf98      	it	ls
 8010244:	3220      	addls	r2, #32
 8010246:	f88d 2008 	strb.w	r2, [sp, #8]
 801024a:	7a0a      	ldrb	r2, [r1, #8]
 801024c:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 8010250:	2817      	cmp	r0, #23
 8010252:	bf98      	it	ls
 8010254:	3220      	addls	r2, #32
 8010256:	f88d 200c 	strb.w	r2, [sp, #12]
 801025a:	784a      	ldrb	r2, [r1, #1]
 801025c:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 8010260:	2817      	cmp	r0, #23
 8010262:	bf98      	it	ls
 8010264:	3220      	addls	r2, #32
 8010266:	f88d 2005 	strb.w	r2, [sp, #5]
 801026a:	794a      	ldrb	r2, [r1, #5]
 801026c:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 8010270:	2817      	cmp	r0, #23
 8010272:	bf98      	it	ls
 8010274:	3220      	addls	r2, #32
 8010276:	f88d 2009 	strb.w	r2, [sp, #9]
 801027a:	7a4a      	ldrb	r2, [r1, #9]
 801027c:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 8010280:	2817      	cmp	r0, #23
 8010282:	bf98      	it	ls
 8010284:	3220      	addls	r2, #32
 8010286:	f88d 200d 	strb.w	r2, [sp, #13]
 801028a:	788a      	ldrb	r2, [r1, #2]
 801028c:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 8010290:	2817      	cmp	r0, #23
 8010292:	bf98      	it	ls
 8010294:	3220      	addls	r2, #32
 8010296:	f88d 2006 	strb.w	r2, [sp, #6]
 801029a:	798a      	ldrb	r2, [r1, #6]
 801029c:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 80102a0:	2817      	cmp	r0, #23
 80102a2:	bf98      	it	ls
 80102a4:	3220      	addls	r2, #32
 80102a6:	f88d 200a 	strb.w	r2, [sp, #10]
 80102aa:	7a8a      	ldrb	r2, [r1, #10]
 80102ac:	f1a2 0142 	sub.w	r1, r2, #66	; 0x42
 80102b0:	2917      	cmp	r1, #23
 80102b2:	bf98      	it	ls
 80102b4:	3220      	addls	r2, #32
 80102b6:	f88d 200e 	strb.w	r2, [sp, #14]
 80102ba:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80102be:	3a64      	subs	r2, #100	; 0x64
 80102c0:	2a13      	cmp	r2, #19
 80102c2:	d80e      	bhi.n	80102e2 <iNemo_setOrientation_6X.constprop.41+0xe6>
 80102c4:	e8df f002 	tbb	[pc, r2]
 80102c8:	0d0dba0a 	.word	0x0d0dba0a
 80102cc:	0d0d0d0d 	.word	0x0d0d0d0d
 80102d0:	0dbe0d0d 	.word	0x0dbe0d0d
 80102d4:	c20d0d0d 	.word	0xc20d0d0d
 80102d8:	ca0dc60d 	.word	0xca0dc60d
 80102dc:	22ff      	movs	r2, #255	; 0xff
 80102de:	f883 2442 	strb.w	r2, [r3, #1090]	; 0x442
 80102e2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80102e6:	3a64      	subs	r2, #100	; 0x64
 80102e8:	2a13      	cmp	r2, #19
 80102ea:	d80e      	bhi.n	801030a <iNemo_setOrientation_6X.constprop.41+0x10e>
 80102ec:	e8df f002 	tbb	[pc, r2]
 80102f0:	0d0dba0a 	.word	0x0d0dba0a
 80102f4:	0d0d0d0d 	.word	0x0d0d0d0d
 80102f8:	0dbe0d0d 	.word	0x0dbe0d0d
 80102fc:	c20d0d0d 	.word	0xc20d0d0d
 8010300:	ca0dc60d 	.word	0xca0dc60d
 8010304:	22ff      	movs	r2, #255	; 0xff
 8010306:	f883 2443 	strb.w	r2, [r3, #1091]	; 0x443
 801030a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801030e:	3a64      	subs	r2, #100	; 0x64
 8010310:	2a13      	cmp	r2, #19
 8010312:	d80e      	bhi.n	8010332 <iNemo_setOrientation_6X.constprop.41+0x136>
 8010314:	e8df f002 	tbb	[pc, r2]
 8010318:	0d0dba0a 	.word	0x0d0dba0a
 801031c:	0d0d0d0d 	.word	0x0d0d0d0d
 8010320:	0dbe0d0d 	.word	0x0dbe0d0d
 8010324:	c20d0d0d 	.word	0xc20d0d0d
 8010328:	ca0dc60d 	.word	0xca0dc60d
 801032c:	22ff      	movs	r2, #255	; 0xff
 801032e:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
 8010332:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8010336:	3a64      	subs	r2, #100	; 0x64
 8010338:	2a13      	cmp	r2, #19
 801033a:	d80e      	bhi.n	801035a <iNemo_setOrientation_6X.constprop.41+0x15e>
 801033c:	e8df f002 	tbb	[pc, r2]
 8010340:	0d0dba0a 	.word	0x0d0dba0a
 8010344:	0d0d0d0d 	.word	0x0d0d0d0d
 8010348:	0dbe0d0d 	.word	0x0dbe0d0d
 801034c:	c20d0d0d 	.word	0xc20d0d0d
 8010350:	ca0dc60d 	.word	0xca0dc60d
 8010354:	22ff      	movs	r2, #255	; 0xff
 8010356:	f883 245a 	strb.w	r2, [r3, #1114]	; 0x45a
 801035a:	f89d 2009 	ldrb.w	r2, [sp, #9]
 801035e:	3a64      	subs	r2, #100	; 0x64
 8010360:	2a13      	cmp	r2, #19
 8010362:	d80e      	bhi.n	8010382 <iNemo_setOrientation_6X.constprop.41+0x186>
 8010364:	e8df f002 	tbb	[pc, r2]
 8010368:	0d0dba0a 	.word	0x0d0dba0a
 801036c:	0d0d0d0d 	.word	0x0d0d0d0d
 8010370:	0dbe0d0d 	.word	0x0dbe0d0d
 8010374:	c20d0d0d 	.word	0xc20d0d0d
 8010378:	ca0dc60d 	.word	0xca0dc60d
 801037c:	22ff      	movs	r2, #255	; 0xff
 801037e:	f883 245b 	strb.w	r2, [r3, #1115]	; 0x45b
 8010382:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8010386:	3a64      	subs	r2, #100	; 0x64
 8010388:	2a13      	cmp	r2, #19
 801038a:	d80e      	bhi.n	80103aa <iNemo_setOrientation_6X.constprop.41+0x1ae>
 801038c:	e8df f002 	tbb	[pc, r2]
 8010390:	0d0dba0a 	.word	0x0d0dba0a
 8010394:	0d0d0d0d 	.word	0x0d0d0d0d
 8010398:	0dbe0d0d 	.word	0x0dbe0d0d
 801039c:	c20d0d0d 	.word	0xc20d0d0d
 80103a0:	ca0dc60d 	.word	0xca0dc60d
 80103a4:	22ff      	movs	r2, #255	; 0xff
 80103a6:	f883 245c 	strb.w	r2, [r3, #1116]	; 0x45c
 80103aa:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80103ae:	3a64      	subs	r2, #100	; 0x64
 80103b0:	2a13      	cmp	r2, #19
 80103b2:	d812      	bhi.n	80103da <iNemo_setOrientation_6X.constprop.41+0x1de>
 80103b4:	e8df f002 	tbb	[pc, r2]
 80103b8:	1111ba0e 	.word	0x1111ba0e
 80103bc:	11111111 	.word	0x11111111
 80103c0:	11be1111 	.word	0x11be1111
 80103c4:	c2111111 	.word	0xc2111111
 80103c8:	ca11c611 	.word	0xca11c611
 80103cc:	20000000 	.word	0x20000000
 80103d0:	200013d0 	.word	0x200013d0
 80103d4:	22ff      	movs	r2, #255	; 0xff
 80103d6:	f883 244e 	strb.w	r2, [r3, #1102]	; 0x44e
 80103da:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80103de:	3a64      	subs	r2, #100	; 0x64
 80103e0:	2a13      	cmp	r2, #19
 80103e2:	d80e      	bhi.n	8010402 <iNemo_setOrientation_6X.constprop.41+0x206>
 80103e4:	e8df f002 	tbb	[pc, r2]
 80103e8:	0d0db60a 	.word	0x0d0db60a
 80103ec:	0d0d0d0d 	.word	0x0d0d0d0d
 80103f0:	0dba0d0d 	.word	0x0dba0d0d
 80103f4:	be0d0d0d 	.word	0xbe0d0d0d
 80103f8:	c60dc20d 	.word	0xc60dc20d
 80103fc:	22ff      	movs	r2, #255	; 0xff
 80103fe:	f883 244f 	strb.w	r2, [r3, #1103]	; 0x44f
 8010402:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8010406:	3a64      	subs	r2, #100	; 0x64
 8010408:	2a13      	cmp	r2, #19
 801040a:	d80e      	bhi.n	801042a <iNemo_setOrientation_6X.constprop.41+0x22e>
 801040c:	e8df f002 	tbb	[pc, r2]
 8010410:	0d0db60a 	.word	0x0d0db60a
 8010414:	0d0d0d0d 	.word	0x0d0d0d0d
 8010418:	0dbc0d0d 	.word	0x0dbc0d0d
 801041c:	c20d0d0d 	.word	0xc20d0d0d
 8010420:	100dc80d 	.word	0x100dc80d
 8010424:	22ff      	movs	r2, #255	; 0xff
 8010426:	f883 2450 	strb.w	r2, [r3, #1104]	; 0x450
 801042a:	b004      	add	sp, #16
 801042c:	bcf0      	pop	{r4, r5, r6, r7}
 801042e:	4770      	bx	lr
 8010430:	22ff      	movs	r2, #255	; 0xff
 8010432:	f883 244a 	strb.w	r2, [r3, #1098]	; 0x44a
 8010436:	b004      	add	sp, #16
 8010438:	bcf0      	pop	{r4, r5, r6, r7}
 801043a:	4770      	bx	lr
 801043c:	2201      	movs	r2, #1
 801043e:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
 8010442:	e74e      	b.n	80102e2 <iNemo_setOrientation_6X.constprop.41+0xe6>
 8010444:	2201      	movs	r2, #1
 8010446:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
 801044a:	e74a      	b.n	80102e2 <iNemo_setOrientation_6X.constprop.41+0xe6>
 801044c:	22ff      	movs	r2, #255	; 0xff
 801044e:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
 8010452:	e746      	b.n	80102e2 <iNemo_setOrientation_6X.constprop.41+0xe6>
 8010454:	2201      	movs	r2, #1
 8010456:	f883 2442 	strb.w	r2, [r3, #1090]	; 0x442
 801045a:	e742      	b.n	80102e2 <iNemo_setOrientation_6X.constprop.41+0xe6>
 801045c:	22ff      	movs	r2, #255	; 0xff
 801045e:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
 8010462:	e73e      	b.n	80102e2 <iNemo_setOrientation_6X.constprop.41+0xe6>
 8010464:	2201      	movs	r2, #1
 8010466:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
 801046a:	e74e      	b.n	801030a <iNemo_setOrientation_6X.constprop.41+0x10e>
 801046c:	2201      	movs	r2, #1
 801046e:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
 8010472:	e74a      	b.n	801030a <iNemo_setOrientation_6X.constprop.41+0x10e>
 8010474:	22ff      	movs	r2, #255	; 0xff
 8010476:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
 801047a:	e746      	b.n	801030a <iNemo_setOrientation_6X.constprop.41+0x10e>
 801047c:	2201      	movs	r2, #1
 801047e:	f883 2443 	strb.w	r2, [r3, #1091]	; 0x443
 8010482:	e742      	b.n	801030a <iNemo_setOrientation_6X.constprop.41+0x10e>
 8010484:	22ff      	movs	r2, #255	; 0xff
 8010486:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
 801048a:	e73e      	b.n	801030a <iNemo_setOrientation_6X.constprop.41+0x10e>
 801048c:	2201      	movs	r2, #1
 801048e:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
 8010492:	e74e      	b.n	8010332 <iNemo_setOrientation_6X.constprop.41+0x136>
 8010494:	2201      	movs	r2, #1
 8010496:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
 801049a:	e74a      	b.n	8010332 <iNemo_setOrientation_6X.constprop.41+0x136>
 801049c:	22ff      	movs	r2, #255	; 0xff
 801049e:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
 80104a2:	e746      	b.n	8010332 <iNemo_setOrientation_6X.constprop.41+0x136>
 80104a4:	2201      	movs	r2, #1
 80104a6:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
 80104aa:	e742      	b.n	8010332 <iNemo_setOrientation_6X.constprop.41+0x136>
 80104ac:	22ff      	movs	r2, #255	; 0xff
 80104ae:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
 80104b2:	e73e      	b.n	8010332 <iNemo_setOrientation_6X.constprop.41+0x136>
 80104b4:	2201      	movs	r2, #1
 80104b6:	f883 2454 	strb.w	r2, [r3, #1108]	; 0x454
 80104ba:	e74e      	b.n	801035a <iNemo_setOrientation_6X.constprop.41+0x15e>
 80104bc:	2201      	movs	r2, #1
 80104be:	f883 2457 	strb.w	r2, [r3, #1111]	; 0x457
 80104c2:	e74a      	b.n	801035a <iNemo_setOrientation_6X.constprop.41+0x15e>
 80104c4:	22ff      	movs	r2, #255	; 0xff
 80104c6:	f883 2457 	strb.w	r2, [r3, #1111]	; 0x457
 80104ca:	e746      	b.n	801035a <iNemo_setOrientation_6X.constprop.41+0x15e>
 80104cc:	2201      	movs	r2, #1
 80104ce:	f883 245a 	strb.w	r2, [r3, #1114]	; 0x45a
 80104d2:	e742      	b.n	801035a <iNemo_setOrientation_6X.constprop.41+0x15e>
 80104d4:	22ff      	movs	r2, #255	; 0xff
 80104d6:	f883 2454 	strb.w	r2, [r3, #1108]	; 0x454
 80104da:	e73e      	b.n	801035a <iNemo_setOrientation_6X.constprop.41+0x15e>
 80104dc:	2201      	movs	r2, #1
 80104de:	f883 2455 	strb.w	r2, [r3, #1109]	; 0x455
 80104e2:	e74e      	b.n	8010382 <iNemo_setOrientation_6X.constprop.41+0x186>
 80104e4:	2201      	movs	r2, #1
 80104e6:	f883 2458 	strb.w	r2, [r3, #1112]	; 0x458
 80104ea:	e74a      	b.n	8010382 <iNemo_setOrientation_6X.constprop.41+0x186>
 80104ec:	22ff      	movs	r2, #255	; 0xff
 80104ee:	f883 2458 	strb.w	r2, [r3, #1112]	; 0x458
 80104f2:	e746      	b.n	8010382 <iNemo_setOrientation_6X.constprop.41+0x186>
 80104f4:	2201      	movs	r2, #1
 80104f6:	f883 245b 	strb.w	r2, [r3, #1115]	; 0x45b
 80104fa:	e742      	b.n	8010382 <iNemo_setOrientation_6X.constprop.41+0x186>
 80104fc:	22ff      	movs	r2, #255	; 0xff
 80104fe:	f883 2455 	strb.w	r2, [r3, #1109]	; 0x455
 8010502:	e73e      	b.n	8010382 <iNemo_setOrientation_6X.constprop.41+0x186>
 8010504:	2201      	movs	r2, #1
 8010506:	f883 2456 	strb.w	r2, [r3, #1110]	; 0x456
 801050a:	e74e      	b.n	80103aa <iNemo_setOrientation_6X.constprop.41+0x1ae>
 801050c:	2201      	movs	r2, #1
 801050e:	f883 2459 	strb.w	r2, [r3, #1113]	; 0x459
 8010512:	e74a      	b.n	80103aa <iNemo_setOrientation_6X.constprop.41+0x1ae>
 8010514:	22ff      	movs	r2, #255	; 0xff
 8010516:	f883 2459 	strb.w	r2, [r3, #1113]	; 0x459
 801051a:	e746      	b.n	80103aa <iNemo_setOrientation_6X.constprop.41+0x1ae>
 801051c:	2201      	movs	r2, #1
 801051e:	f883 245c 	strb.w	r2, [r3, #1116]	; 0x45c
 8010522:	e742      	b.n	80103aa <iNemo_setOrientation_6X.constprop.41+0x1ae>
 8010524:	22ff      	movs	r2, #255	; 0xff
 8010526:	f883 2456 	strb.w	r2, [r3, #1110]	; 0x456
 801052a:	e73e      	b.n	80103aa <iNemo_setOrientation_6X.constprop.41+0x1ae>
 801052c:	2201      	movs	r2, #1
 801052e:	f883 2448 	strb.w	r2, [r3, #1096]	; 0x448
 8010532:	e752      	b.n	80103da <iNemo_setOrientation_6X.constprop.41+0x1de>
 8010534:	2201      	movs	r2, #1
 8010536:	f883 244b 	strb.w	r2, [r3, #1099]	; 0x44b
 801053a:	e74e      	b.n	80103da <iNemo_setOrientation_6X.constprop.41+0x1de>
 801053c:	22ff      	movs	r2, #255	; 0xff
 801053e:	f883 244b 	strb.w	r2, [r3, #1099]	; 0x44b
 8010542:	e74a      	b.n	80103da <iNemo_setOrientation_6X.constprop.41+0x1de>
 8010544:	2201      	movs	r2, #1
 8010546:	f883 244e 	strb.w	r2, [r3, #1102]	; 0x44e
 801054a:	e746      	b.n	80103da <iNemo_setOrientation_6X.constprop.41+0x1de>
 801054c:	22ff      	movs	r2, #255	; 0xff
 801054e:	f883 2448 	strb.w	r2, [r3, #1096]	; 0x448
 8010552:	e742      	b.n	80103da <iNemo_setOrientation_6X.constprop.41+0x1de>
 8010554:	2201      	movs	r2, #1
 8010556:	f883 2449 	strb.w	r2, [r3, #1097]	; 0x449
 801055a:	e752      	b.n	8010402 <iNemo_setOrientation_6X.constprop.41+0x206>
 801055c:	2201      	movs	r2, #1
 801055e:	f883 244c 	strb.w	r2, [r3, #1100]	; 0x44c
 8010562:	e74e      	b.n	8010402 <iNemo_setOrientation_6X.constprop.41+0x206>
 8010564:	22ff      	movs	r2, #255	; 0xff
 8010566:	f883 244c 	strb.w	r2, [r3, #1100]	; 0x44c
 801056a:	e74a      	b.n	8010402 <iNemo_setOrientation_6X.constprop.41+0x206>
 801056c:	2201      	movs	r2, #1
 801056e:	f883 244f 	strb.w	r2, [r3, #1103]	; 0x44f
 8010572:	e746      	b.n	8010402 <iNemo_setOrientation_6X.constprop.41+0x206>
 8010574:	22ff      	movs	r2, #255	; 0xff
 8010576:	f883 2449 	strb.w	r2, [r3, #1097]	; 0x449
 801057a:	e742      	b.n	8010402 <iNemo_setOrientation_6X.constprop.41+0x206>
 801057c:	2201      	movs	r2, #1
 801057e:	f883 244a 	strb.w	r2, [r3, #1098]	; 0x44a
 8010582:	b004      	add	sp, #16
 8010584:	bcf0      	pop	{r4, r5, r6, r7}
 8010586:	4770      	bx	lr
 8010588:	2201      	movs	r2, #1
 801058a:	f883 244d 	strb.w	r2, [r3, #1101]	; 0x44d
 801058e:	b004      	add	sp, #16
 8010590:	bcf0      	pop	{r4, r5, r6, r7}
 8010592:	4770      	bx	lr
 8010594:	22ff      	movs	r2, #255	; 0xff
 8010596:	f883 244d 	strb.w	r2, [r3, #1101]	; 0x44d
 801059a:	b004      	add	sp, #16
 801059c:	bcf0      	pop	{r4, r5, r6, r7}
 801059e:	4770      	bx	lr
 80105a0:	2201      	movs	r2, #1
 80105a2:	f883 2450 	strb.w	r2, [r3, #1104]	; 0x450
 80105a6:	b004      	add	sp, #16
 80105a8:	bcf0      	pop	{r4, r5, r6, r7}
 80105aa:	4770      	bx	lr

080105ac <getMagStats.constprop.26>:
 80105ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105b0:	2400      	movs	r4, #0
 80105b2:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 801078c <getMagStats.constprop.26+0x1e0>
 80105b6:	601c      	str	r4, [r3, #0]
 80105b8:	6014      	str	r4, [r2, #0]
 80105ba:	f898 e500 	ldrb.w	lr, [r8, #1280]	; 0x500
 80105be:	f898 c501 	ldrb.w	ip, [r8, #1281]	; 0x501
 80105c2:	f998 4502 	ldrsb.w	r4, [r8, #1282]	; 0x502
 80105c6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80105ca:	45e6      	cmp	lr, ip
 80105cc:	b083      	sub	sp, #12
 80105ce:	f104 0401 	add.w	r4, r4, #1
 80105d2:	ee87 4a80 	vdiv.f32	s8, s15, s0
 80105d6:	f000 80c7 	beq.w	8010768 <getMagStats.constprop.26+0x1bc>
 80105da:	eba4 040e 	sub.w	r4, r4, lr
 80105de:	fb94 f9fc 	sdiv	r9, r4, ip
 80105e2:	fb0c 4419 	mls	r4, ip, r9, r4
 80105e6:	2c00      	cmp	r4, #0
 80105e8:	fa0f f984 	sxth.w	r9, r4
 80105ec:	bfbc      	itt	lt
 80105ee:	4464      	addlt	r4, ip
 80105f0:	fa0f f984 	sxthlt.w	r9, r4
 80105f4:	eddf 3a62 	vldr	s7, [pc, #392]	; 8010780 <getMagStats.constprop.26+0x1d4>
 80105f8:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 80105fc:	ee64 3a23 	vmul.f32	s7, s8, s7
 8010600:	ee24 4a27 	vmul.f32	s8, s8, s15
 8010604:	f1be 0f00 	cmp.w	lr, #0
 8010608:	f000 80b5 	beq.w	8010776 <getMagStats.constprop.26+0x1ca>
 801060c:	2700      	movs	r7, #0
 801060e:	f8b0 b000 	ldrh.w	fp, [r0]
 8010612:	f8b0 a002 	ldrh.w	sl, [r0, #2]
 8010616:	8880      	ldrh	r0, [r0, #4]
 8010618:	9001      	str	r0, [sp, #4]
 801061a:	eddf 5a5a 	vldr	s11, [pc, #360]	; 8010784 <getMagStats.constprop.26+0x1d8>
 801061e:	9700      	str	r7, [sp, #0]
 8010620:	e001      	b.n	8010626 <getMagStats.constprop.26+0x7a>
 8010622:	edd2 5a00 	vldr	s11, [r2]
 8010626:	9801      	ldr	r0, [sp, #4]
 8010628:	edd1 4a00 	vldr	s9, [r1]
 801062c:	ed91 6a04 	vldr	s12, [r1, #16]
 8010630:	edd1 6a08 	vldr	s13, [r1, #32]
 8010634:	eb09 0507 	add.w	r5, r9, r7
 8010638:	fb95 f4fc 	sdiv	r4, r5, ip
 801063c:	fb0c 5414 	mls	r4, ip, r4, r5
 8010640:	b2e4      	uxtb	r4, r4
 8010642:	3404      	adds	r4, #4
 8010644:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
 8010648:	3701      	adds	r7, #1
 801064a:	f8b4 6502 	ldrh.w	r6, [r4, #1282]	; 0x502
 801064e:	f8b4 5504 	ldrh.w	r5, [r4, #1284]	; 0x504
 8010652:	f8b4 4506 	ldrh.w	r4, [r4, #1286]	; 0x506
 8010656:	eba6 060b 	sub.w	r6, r6, fp
 801065a:	b236      	sxth	r6, r6
 801065c:	ee07 6a90 	vmov	s15, r6
 8010660:	eba5 050a 	sub.w	r5, r5, sl
 8010664:	b22d      	sxth	r5, r5
 8010666:	1a24      	subs	r4, r4, r0
 8010668:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 801066c:	ee07 5a90 	vmov	s15, r5
 8010670:	b224      	sxth	r4, r4
 8010672:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8010676:	ee07 4a90 	vmov	s15, r4
 801067a:	ee25 5a24 	vmul.f32	s10, s10, s9
 801067e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010682:	ee27 7a06 	vmul.f32	s14, s14, s12
 8010686:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801068a:	eefd 6ac5 	vcvt.s32.f32	s13, s10
 801068e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8010692:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010696:	ee16 0a90 	vmov	r0, s13
 801069a:	ee17 4a10 	vmov	r4, s14
 801069e:	b205      	sxth	r5, r0
 80106a0:	ee17 0a90 	vmov	r0, s15
 80106a4:	fb14 f404 	smulbb	r4, r4, r4
 80106a8:	fb05 4505 	mla	r5, r5, r5, r4
 80106ac:	b204      	sxth	r4, r0
 80106ae:	fb04 5404 	mla	r4, r4, r4, r5
 80106b2:	ee07 4a90 	vmov	s15, r4
 80106b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80106ba:	9800      	ldr	r0, [sp, #0]
 80106bc:	eeb1 7ae7 	vsqrt.f32	s14, s15
 80106c0:	1c46      	adds	r6, r0, #1
 80106c2:	b2fd      	uxtb	r5, r7
 80106c4:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80106c8:	ee17 0a10 	vmov	r0, s14
 80106cc:	b200      	sxth	r0, r0
 80106ce:	ee07 0a90 	vmov	s15, r0
 80106d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80106d6:	ee37 7ae3 	vsub.f32	s14, s15, s7
 80106da:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80106de:	eeb0 7ac7 	vabs.f32	s14, s14
 80106e2:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80106e6:	edc2 7a00 	vstr	s15, [r2]
 80106ea:	ee17 0a10 	vmov	r0, s14
 80106ee:	b204      	sxth	r4, r0
 80106f0:	ee07 4a10 	vmov	s14, r4
 80106f4:	fb04 f004 	mul.w	r0, r4, r4
 80106f8:	ee07 0a90 	vmov	s15, r0
 80106fc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010700:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010704:	eeb4 4ac7 	vcmpe.f32	s8, s14
 8010708:	ed93 7a00 	vldr	s14, [r3]
 801070c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010710:	bf48      	it	mi
 8010712:	b2f0      	uxtbmi	r0, r6
 8010714:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010718:	bf48      	it	mi
 801071a:	9000      	strmi	r0, [sp, #0]
 801071c:	45ae      	cmp	lr, r5
 801071e:	edc3 7a00 	vstr	s15, [r3]
 8010722:	f63f af7e 	bhi.w	8010622 <getMagStats.constprop.26+0x76>
 8010726:	9800      	ldr	r0, [sp, #0]
 8010728:	eddf 6a17 	vldr	s13, [pc, #92]	; 8010788 <getMagStats.constprop.26+0x1dc>
 801072c:	ee07 ea10 	vmov	s14, lr
 8010730:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010734:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8010738:	eef1 7ac6 	vsqrt.f32	s15, s12
 801073c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8010740:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010748:	bfb8      	it	lt
 801074a:	eef0 7a66 	vmovlt.f32	s15, s13
 801074e:	edc3 7a00 	vstr	s15, [r3]
 8010752:	edd2 7a00 	vldr	s15, [r2]
 8010756:	ee20 0a27 	vmul.f32	s0, s0, s15
 801075a:	eec0 7a07 	vdiv.f32	s15, s0, s14
 801075e:	edc2 7a00 	vstr	s15, [r2]
 8010762:	b003      	add	sp, #12
 8010764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010768:	fb94 f9fe 	sdiv	r9, r4, lr
 801076c:	fb0e 4919 	mls	r9, lr, r9, r4
 8010770:	fa0f f989 	sxth.w	r9, r9
 8010774:	e73e      	b.n	80105f4 <getMagStats.constprop.26+0x48>
 8010776:	edd3 7a00 	vldr	s15, [r3]
 801077a:	4670      	mov	r0, lr
 801077c:	e7d4      	b.n	8010728 <getMagStats.constprop.26+0x17c>
 801077e:	bf00      	nop
 8010780:	423c0000 	.word	0x423c0000
 8010784:	00000000 	.word	0x00000000
 8010788:	3f59999a 	.word	0x3f59999a
 801078c:	200013d0 	.word	0x200013d0

08010790 <MEMS_updateMagBufferIndex.constprop.24>:
 8010790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010794:	4e98      	ldr	r6, [pc, #608]	; (80109f8 <MEMS_updateMagBufferIndex.constprop.24+0x268>)
 8010796:	ed2d 8b02 	vpush	{d8}
 801079a:	f896 9500 	ldrb.w	r9, [r6, #1280]	; 0x500
 801079e:	f896 8501 	ldrb.w	r8, [r6, #1281]	; 0x501
 80107a2:	f996 1502 	ldrsb.w	r1, [r6, #1282]	; 0x502
 80107a6:	2300      	movs	r3, #0
 80107a8:	45c1      	cmp	r9, r8
 80107aa:	b08f      	sub	sp, #60	; 0x3c
 80107ac:	f101 0101 	add.w	r1, r1, #1
 80107b0:	f8c6 3508 	str.w	r3, [r6, #1288]	; 0x508
 80107b4:	f8c6 350c 	str.w	r3, [r6, #1292]	; 0x50c
 80107b8:	f8c6 3510 	str.w	r3, [r6, #1296]	; 0x510
 80107bc:	f8c6 3514 	str.w	r3, [r6, #1300]	; 0x514
 80107c0:	f8c6 351c 	str.w	r3, [r6, #1308]	; 0x51c
 80107c4:	f8c6 3518 	str.w	r3, [r6, #1304]	; 0x518
 80107c8:	f000 810b 	beq.w	80109e2 <MEMS_updateMagBufferIndex.constprop.24+0x252>
 80107cc:	eba1 0109 	sub.w	r1, r1, r9
 80107d0:	fb91 f3f8 	sdiv	r3, r1, r8
 80107d4:	fb08 1113 	mls	r1, r8, r3, r1
 80107d8:	b20b      	sxth	r3, r1
 80107da:	2900      	cmp	r1, #0
 80107dc:	9301      	str	r3, [sp, #4]
 80107de:	f2c0 80fc 	blt.w	80109da <MEMS_updateMagBufferIndex.constprop.24+0x24a>
 80107e2:	f1b9 0f00 	cmp.w	r9, #0
 80107e6:	d107      	bne.n	80107f8 <MEMS_updateMagBufferIndex.constprop.24+0x68>
 80107e8:	23ff      	movs	r3, #255	; 0xff
 80107ea:	f886 3502 	strb.w	r3, [r6, #1282]	; 0x502
 80107ee:	b00f      	add	sp, #60	; 0x3c
 80107f0:	ecbd 8b02 	vpop	{d8}
 80107f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107f8:	2500      	movs	r5, #0
 80107fa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80107fe:	f8cd 9018 	str.w	r9, [sp, #24]
 8010802:	ee87 8a80 	vdiv.f32	s16, s15, s0
 8010806:	9509      	str	r5, [sp, #36]	; 0x24
 8010808:	46aa      	mov	sl, r5
 801080a:	950d      	str	r5, [sp, #52]	; 0x34
 801080c:	9507      	str	r5, [sp, #28]
 801080e:	950a      	str	r5, [sp, #40]	; 0x28
 8010810:	9502      	str	r5, [sp, #8]
 8010812:	950b      	str	r5, [sp, #44]	; 0x2c
 8010814:	9503      	str	r5, [sp, #12]
 8010816:	950c      	str	r5, [sp, #48]	; 0x30
 8010818:	9504      	str	r5, [sp, #16]
 801081a:	9508      	str	r5, [sp, #32]
 801081c:	9505      	str	r5, [sp, #20]
 801081e:	2701      	movs	r7, #1
 8010820:	4681      	mov	r9, r0
 8010822:	e02b      	b.n	801087c <MEMS_updateMagBufferIndex.constprop.24+0xec>
 8010824:	9b05      	ldr	r3, [sp, #20]
 8010826:	3c20      	subs	r4, #32
 8010828:	fa07 f404 	lsl.w	r4, r7, r4
 801082c:	ea24 0403 	bic.w	r4, r4, r3
 8010830:	4063      	eors	r3, r4
 8010832:	9305      	str	r3, [sp, #20]
 8010834:	f1bb 0f1f 	cmp.w	fp, #31
 8010838:	f04f 0301 	mov.w	r3, #1
 801083c:	9308      	str	r3, [sp, #32]
 801083e:	f240 8091 	bls.w	8010964 <MEMS_updateMagBufferIndex.constprop.24+0x1d4>
 8010842:	9a03      	ldr	r2, [sp, #12]
 8010844:	f1ab 0320 	sub.w	r3, fp, #32
 8010848:	fa07 f303 	lsl.w	r3, r7, r3
 801084c:	ea23 0302 	bic.w	r3, r3, r2
 8010850:	4053      	eors	r3, r2
 8010852:	9303      	str	r3, [sp, #12]
 8010854:	291f      	cmp	r1, #31
 8010856:	f04f 0301 	mov.w	r3, #1
 801085a:	930b      	str	r3, [sp, #44]	; 0x2c
 801085c:	f200 808f 	bhi.w	801097e <MEMS_updateMagBufferIndex.constprop.24+0x1ee>
 8010860:	2301      	movs	r3, #1
 8010862:	3501      	adds	r5, #1
 8010864:	9a06      	ldr	r2, [sp, #24]
 8010866:	9309      	str	r3, [sp, #36]	; 0x24
 8010868:	fa07 f101 	lsl.w	r1, r7, r1
 801086c:	b2eb      	uxtb	r3, r5
 801086e:	ea21 010a 	bic.w	r1, r1, sl
 8010872:	429a      	cmp	r2, r3
 8010874:	ea8a 0a01 	eor.w	sl, sl, r1
 8010878:	f240 8091 	bls.w	801099e <MEMS_updateMagBufferIndex.constprop.24+0x20e>
 801087c:	9b01      	ldr	r3, [sp, #4]
 801087e:	1959      	adds	r1, r3, r5
 8010880:	fb91 f3f8 	sdiv	r3, r1, r8
 8010884:	fb08 1313 	mls	r3, r8, r3, r1
 8010888:	b2db      	uxtb	r3, r3
 801088a:	f103 0b04 	add.w	fp, r3, #4
 801088e:	eb06 01cb 	add.w	r1, r6, fp, lsl #3
 8010892:	f9b1 0502 	ldrsh.w	r0, [r1, #1282]	; 0x502
 8010896:	fb90 f1f9 	sdiv	r1, r0, r9
 801089a:	fb09 0111 	mls	r1, r9, r1, r0
 801089e:	2900      	cmp	r1, #0
 80108a0:	bfb8      	it	lt
 80108a2:	4449      	addlt	r1, r9
 80108a4:	b20b      	sxth	r3, r1
 80108a6:	ee07 3a90 	vmov	s15, r3
 80108aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80108ae:	ee67 7a88 	vmul.f32	s15, s15, s16
 80108b2:	ee17 0a90 	vmov	r0, s15
 80108b6:	f00a fbf7 	bl	801b0a8 <roundf>
 80108ba:	eb06 01cb 	add.w	r1, r6, fp, lsl #3
 80108be:	ee07 0a90 	vmov	s15, r0
 80108c2:	f9b1 0504 	ldrsh.w	r0, [r1, #1284]	; 0x504
 80108c6:	fb90 f1f9 	sdiv	r1, r0, r9
 80108ca:	fb09 0111 	mls	r1, r9, r1, r0
 80108ce:	2900      	cmp	r1, #0
 80108d0:	bfb8      	it	lt
 80108d2:	4449      	addlt	r1, r9
 80108d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80108d8:	b20b      	sxth	r3, r1
 80108da:	edcd 7a00 	vstr	s15, [sp]
 80108de:	ee07 3a90 	vmov	s15, r3
 80108e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80108e6:	f89d 4000 	ldrb.w	r4, [sp]
 80108ea:	ee67 7a88 	vmul.f32	s15, s15, s16
 80108ee:	ee17 0a90 	vmov	r0, s15
 80108f2:	f00a fbd9 	bl	801b0a8 <roundf>
 80108f6:	eb06 03cb 	add.w	r3, r6, fp, lsl #3
 80108fa:	ee07 0a90 	vmov	s15, r0
 80108fe:	f9b3 3506 	ldrsh.w	r3, [r3, #1286]	; 0x506
 8010902:	fb93 f1f9 	sdiv	r1, r3, r9
 8010906:	fb09 3111 	mls	r1, r9, r1, r3
 801090a:	2900      	cmp	r1, #0
 801090c:	bfb8      	it	lt
 801090e:	4449      	addlt	r1, r9
 8010910:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010914:	b20b      	sxth	r3, r1
 8010916:	edcd 7a00 	vstr	s15, [sp]
 801091a:	ee07 3a90 	vmov	s15, r3
 801091e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010922:	f89d b000 	ldrb.w	fp, [sp]
 8010926:	ee67 7a88 	vmul.f32	s15, s15, s16
 801092a:	ee17 0a90 	vmov	r0, s15
 801092e:	f00a fbbb 	bl	801b0a8 <roundf>
 8010932:	ee07 0a90 	vmov	s15, r0
 8010936:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801093a:	2c1f      	cmp	r4, #31
 801093c:	edcd 7a00 	vstr	s15, [sp]
 8010940:	f89d 1000 	ldrb.w	r1, [sp]
 8010944:	f63f af6e 	bhi.w	8010824 <MEMS_updateMagBufferIndex.constprop.24+0x94>
 8010948:	9b04      	ldr	r3, [sp, #16]
 801094a:	fa07 f404 	lsl.w	r4, r7, r4
 801094e:	ea24 0403 	bic.w	r4, r4, r3
 8010952:	4063      	eors	r3, r4
 8010954:	9304      	str	r3, [sp, #16]
 8010956:	f1bb 0f1f 	cmp.w	fp, #31
 801095a:	f04f 0301 	mov.w	r3, #1
 801095e:	930c      	str	r3, [sp, #48]	; 0x30
 8010960:	f63f af6f 	bhi.w	8010842 <MEMS_updateMagBufferIndex.constprop.24+0xb2>
 8010964:	9a02      	ldr	r2, [sp, #8]
 8010966:	fa07 f30b 	lsl.w	r3, r7, fp
 801096a:	ea23 0302 	bic.w	r3, r3, r2
 801096e:	4053      	eors	r3, r2
 8010970:	9302      	str	r3, [sp, #8]
 8010972:	291f      	cmp	r1, #31
 8010974:	f04f 0301 	mov.w	r3, #1
 8010978:	930a      	str	r3, [sp, #40]	; 0x28
 801097a:	f67f af71 	bls.w	8010860 <MEMS_updateMagBufferIndex.constprop.24+0xd0>
 801097e:	9b07      	ldr	r3, [sp, #28]
 8010980:	9a06      	ldr	r2, [sp, #24]
 8010982:	3920      	subs	r1, #32
 8010984:	fa07 f101 	lsl.w	r1, r7, r1
 8010988:	ea21 0103 	bic.w	r1, r1, r3
 801098c:	404b      	eors	r3, r1
 801098e:	9307      	str	r3, [sp, #28]
 8010990:	3501      	adds	r5, #1
 8010992:	2301      	movs	r3, #1
 8010994:	930d      	str	r3, [sp, #52]	; 0x34
 8010996:	b2eb      	uxtb	r3, r5
 8010998:	429a      	cmp	r2, r3
 801099a:	f63f af6f 	bhi.w	801087c <MEMS_updateMagBufferIndex.constprop.24+0xec>
 801099e:	9b08      	ldr	r3, [sp, #32]
 80109a0:	4652      	mov	r2, sl
 80109a2:	bb2b      	cbnz	r3, 80109f0 <MEMS_updateMagBufferIndex.constprop.24+0x260>
 80109a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80109a6:	b113      	cbz	r3, 80109ae <MEMS_updateMagBufferIndex.constprop.24+0x21e>
 80109a8:	9b04      	ldr	r3, [sp, #16]
 80109aa:	f8c6 350c 	str.w	r3, [r6, #1292]	; 0x50c
 80109ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80109b0:	b113      	cbz	r3, 80109b8 <MEMS_updateMagBufferIndex.constprop.24+0x228>
 80109b2:	9b03      	ldr	r3, [sp, #12]
 80109b4:	f8c6 3510 	str.w	r3, [r6, #1296]	; 0x510
 80109b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80109ba:	b113      	cbz	r3, 80109c2 <MEMS_updateMagBufferIndex.constprop.24+0x232>
 80109bc:	9b02      	ldr	r3, [sp, #8]
 80109be:	f8c6 3514 	str.w	r3, [r6, #1300]	; 0x514
 80109c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80109c4:	b113      	cbz	r3, 80109cc <MEMS_updateMagBufferIndex.constprop.24+0x23c>
 80109c6:	9b07      	ldr	r3, [sp, #28]
 80109c8:	f8c6 351c 	str.w	r3, [r6, #1308]	; 0x51c
 80109cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	f43f af0d 	beq.w	80107ee <MEMS_updateMagBufferIndex.constprop.24+0x5e>
 80109d4:	f8c6 2518 	str.w	r2, [r6, #1304]	; 0x518
 80109d8:	e709      	b.n	80107ee <MEMS_updateMagBufferIndex.constprop.24+0x5e>
 80109da:	4441      	add	r1, r8
 80109dc:	b20b      	sxth	r3, r1
 80109de:	9301      	str	r3, [sp, #4]
 80109e0:	e6ff      	b.n	80107e2 <MEMS_updateMagBufferIndex.constprop.24+0x52>
 80109e2:	fb91 f3f9 	sdiv	r3, r1, r9
 80109e6:	fb09 1113 	mls	r1, r9, r3, r1
 80109ea:	b20b      	sxth	r3, r1
 80109ec:	9301      	str	r3, [sp, #4]
 80109ee:	e6f8      	b.n	80107e2 <MEMS_updateMagBufferIndex.constprop.24+0x52>
 80109f0:	9b05      	ldr	r3, [sp, #20]
 80109f2:	f8c6 3508 	str.w	r3, [r6, #1288]	; 0x508
 80109f6:	e7d5      	b.n	80109a4 <MEMS_updateMagBufferIndex.constprop.24+0x214>
 80109f8:	200013d0 	.word	0x200013d0
 80109fc:	00000000 	.word	0x00000000

08010a00 <iNemo_quat2heading>:
 8010a00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a04:	4ddc      	ldr	r5, [pc, #880]	; (8010d78 <iNemo_quat2heading+0x378>)
 8010a06:	ed2d 8b0a 	vpush	{d8-d12}
 8010a0a:	ed92 ba01 	vldr	s22, [r2, #4]
 8010a0e:	edd2 aa00 	vldr	s21, [r2]
 8010a12:	ed92 aa02 	vldr	s20, [r2, #8]
 8010a16:	edd0 ba01 	vldr	s23, [r0, #4]
 8010a1a:	ed90 ca00 	vldr	s24, [r0]
 8010a1e:	edd0 ca02 	vldr	s25, [r0, #8]
 8010a22:	ed90 9a03 	vldr	s18, [r0, #12]
 8010a26:	f8d5 4820 	ldr.w	r4, [r5, #2080]	; 0x820
 8010a2a:	468a      	mov	sl, r1
 8010a2c:	eeb0 8acb 	vabs.f32	s16, s22
 8010a30:	eef0 8aea 	vabs.f32	s17, s21
 8010a34:	eef0 9aca 	vabs.f32	s19, s20
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d145      	bne.n	8010ac8 <iNemo_quat2heading+0xc8>
 8010a3c:	ee18 0a10 	vmov	r0, s16
 8010a40:	f7ef fd8a 	bl	8000558 <__aeabi_f2d>
 8010a44:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8010a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a4c:	4606      	mov	r6, r0
 8010a4e:	460f      	mov	r7, r1
 8010a50:	f140 80f6 	bpl.w	8010c40 <iNemo_quat2heading+0x240>
 8010a54:	eef4 8ae9 	vcmpe.f32	s17, s19
 8010a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a5c:	f340 80f0 	ble.w	8010c40 <iNemo_quat2heading+0x240>
 8010a60:	ee18 0a90 	vmov	r0, s17
 8010a64:	f7ef fd78 	bl	8000558 <__aeabi_f2d>
 8010a68:	a3bf      	add	r3, pc, #764	; (adr r3, 8010d68 <iNemo_quat2heading+0x368>)
 8010a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a6e:	4680      	mov	r8, r0
 8010a70:	4689      	mov	r9, r1
 8010a72:	4630      	mov	r0, r6
 8010a74:	4639      	mov	r1, r7
 8010a76:	f7ef fdc7 	bl	8000608 <__aeabi_dmul>
 8010a7a:	eef5 aac0 	vcmpe.f32	s21, #0.0
 8010a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a82:	4602      	mov	r2, r0
 8010a84:	460b      	mov	r3, r1
 8010a86:	4640      	mov	r0, r8
 8010a88:	4649      	mov	r1, r9
 8010a8a:	f340 820a 	ble.w	8010ea2 <iNemo_quat2heading+0x4a2>
 8010a8e:	f7f0 f84b 	bl	8000b28 <__aeabi_dcmpgt>
 8010a92:	b170      	cbz	r0, 8010ab2 <iNemo_quat2heading+0xb2>
 8010a94:	ee19 0a90 	vmov	r0, s19
 8010a98:	f7ef fd5e 	bl	8000558 <__aeabi_f2d>
 8010a9c:	a3b2      	add	r3, pc, #712	; (adr r3, 8010d68 <iNemo_quat2heading+0x368>)
 8010a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010aa2:	f7ef fdb1 	bl	8000608 <__aeabi_dmul>
 8010aa6:	4642      	mov	r2, r8
 8010aa8:	464b      	mov	r3, r9
 8010aaa:	f7f0 f81f 	bl	8000aec <__aeabi_dcmplt>
 8010aae:	2800      	cmp	r0, #0
 8010ab0:	d148      	bne.n	8010b44 <iNemo_quat2heading+0x144>
 8010ab2:	2c05      	cmp	r4, #5
 8010ab4:	f200 8224 	bhi.w	8010f00 <iNemo_quat2heading+0x500>
 8010ab8:	e8df f014 	tbh	[pc, r4, lsl #1]
 8010abc:	00980120 	.word	0x00980120
 8010ac0:	017e0047 	.word	0x017e0047
 8010ac4:	01200047 	.word	0x01200047
 8010ac8:	ee18 0a90 	vmov	r0, s17
 8010acc:	f7ef fd44 	bl	8000558 <__aeabi_f2d>
 8010ad0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8010ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ad8:	eef1 ca6c 	vneg.f32	s25, s25
 8010adc:	4606      	mov	r6, r0
 8010ade:	460f      	mov	r7, r1
 8010ae0:	dd4f      	ble.n	8010b82 <iNemo_quat2heading+0x182>
 8010ae2:	eeb4 8ae9 	vcmpe.f32	s16, s19
 8010ae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010aea:	dd4a      	ble.n	8010b82 <iNemo_quat2heading+0x182>
 8010aec:	ee18 0a10 	vmov	r0, s16
 8010af0:	f7ef fd32 	bl	8000558 <__aeabi_f2d>
 8010af4:	a39c      	add	r3, pc, #624	; (adr r3, 8010d68 <iNemo_quat2heading+0x368>)
 8010af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010afa:	4680      	mov	r8, r0
 8010afc:	4689      	mov	r9, r1
 8010afe:	4630      	mov	r0, r6
 8010b00:	4639      	mov	r1, r7
 8010b02:	f7ef fd81 	bl	8000608 <__aeabi_dmul>
 8010b06:	eeb5 bac0 	vcmpe.f32	s22, #0.0
 8010b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b0e:	4602      	mov	r2, r0
 8010b10:	460b      	mov	r3, r1
 8010b12:	4640      	mov	r0, r8
 8010b14:	4649      	mov	r1, r9
 8010b16:	f340 81dd 	ble.w	8010ed4 <iNemo_quat2heading+0x4d4>
 8010b1a:	f7f0 f805 	bl	8000b28 <__aeabi_dcmpgt>
 8010b1e:	2800      	cmp	r0, #0
 8010b20:	f000 8119 	beq.w	8010d56 <iNemo_quat2heading+0x356>
 8010b24:	ee19 0a90 	vmov	r0, s19
 8010b28:	f7ef fd16 	bl	8000558 <__aeabi_f2d>
 8010b2c:	a38e      	add	r3, pc, #568	; (adr r3, 8010d68 <iNemo_quat2heading+0x368>)
 8010b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b32:	f7ef fd69 	bl	8000608 <__aeabi_dmul>
 8010b36:	4642      	mov	r2, r8
 8010b38:	464b      	mov	r3, r9
 8010b3a:	f7ef ffd7 	bl	8000aec <__aeabi_dcmplt>
 8010b3e:	2800      	cmp	r0, #0
 8010b40:	f000 8109 	beq.w	8010d56 <iNemo_quat2heading+0x356>
 8010b44:	2304      	movs	r3, #4
 8010b46:	f8c5 3820 	str.w	r3, [r5, #2080]	; 0x820
 8010b4a:	ed9a 0a00 	vldr	s0, [sl]
 8010b4e:	eddf 7a8b 	vldr	s15, [pc, #556]	; 8010d7c <iNemo_quat2heading+0x37c>
 8010b52:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010b56:	eddf 7a8a 	vldr	s15, [pc, #552]	; 8010d80 <iNemo_quat2heading+0x380>
 8010b5a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8010b5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b62:	bfa8      	it	ge
 8010b64:	ee30 0a67 	vsubge.f32	s0, s0, s15
 8010b68:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8010b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b70:	d503      	bpl.n	8010b7a <iNemo_quat2heading+0x17a>
 8010b72:	eddf 7a83 	vldr	s15, [pc, #524]	; 8010d80 <iNemo_quat2heading+0x380>
 8010b76:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010b7a:	ecbd 8b0a 	vpop	{d8-d12}
 8010b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b82:	eef4 8ae9 	vcmpe.f32	s17, s19
 8010b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b8a:	f340 80ba 	ble.w	8010d02 <iNemo_quat2heading+0x302>
 8010b8e:	ee18 0a10 	vmov	r0, s16
 8010b92:	f7ef fce1 	bl	8000558 <__aeabi_f2d>
 8010b96:	a374      	add	r3, pc, #464	; (adr r3, 8010d68 <iNemo_quat2heading+0x368>)
 8010b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b9c:	f7ef fd34 	bl	8000608 <__aeabi_dmul>
 8010ba0:	eef5 aac0 	vcmpe.f32	s21, #0.0
 8010ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ba8:	4632      	mov	r2, r6
 8010baa:	463b      	mov	r3, r7
 8010bac:	f340 8145 	ble.w	8010e3a <iNemo_quat2heading+0x43a>
 8010bb0:	f7ef ff9c 	bl	8000aec <__aeabi_dcmplt>
 8010bb4:	2800      	cmp	r0, #0
 8010bb6:	f000 80ce 	beq.w	8010d56 <iNemo_quat2heading+0x356>
 8010bba:	ee19 0a90 	vmov	r0, s19
 8010bbe:	f7ef fccb 	bl	8000558 <__aeabi_f2d>
 8010bc2:	a369      	add	r3, pc, #420	; (adr r3, 8010d68 <iNemo_quat2heading+0x368>)
 8010bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bc8:	f7ef fd1e 	bl	8000608 <__aeabi_dmul>
 8010bcc:	4632      	mov	r2, r6
 8010bce:	463b      	mov	r3, r7
 8010bd0:	f7ef ff8c 	bl	8000aec <__aeabi_dcmplt>
 8010bd4:	2800      	cmp	r0, #0
 8010bd6:	f000 80be 	beq.w	8010d56 <iNemo_quat2heading+0x356>
 8010bda:	eef0 7a6b 	vmov.f32	s15, s23
 8010bde:	2301      	movs	r3, #1
 8010be0:	eef0 ba4c 	vmov.f32	s23, s24
 8010be4:	f8c5 3820 	str.w	r3, [r5, #2080]	; 0x820
 8010be8:	eeb0 ca67 	vmov.f32	s24, s15
 8010bec:	ee6b 7aeb 	vnmul.f32	s15, s23, s23
 8010bf0:	eeec 7a0c 	vfma.f32	s15, s24, s24
 8010bf4:	eeec 7aec 	vfms.f32	s15, s25, s25
 8010bf8:	eee9 7a09 	vfma.f32	s15, s18, s18
 8010bfc:	ee2c 9a89 	vmul.f32	s18, s25, s18
 8010c00:	ee17 0a90 	vmov	r0, s15
 8010c04:	eeab 9a8c 	vfma.f32	s18, s23, s24
 8010c08:	f7ef fca6 	bl	8000558 <__aeabi_f2d>
 8010c0c:	ee79 7a09 	vadd.f32	s15, s18, s18
 8010c10:	4604      	mov	r4, r0
 8010c12:	460d      	mov	r5, r1
 8010c14:	ee17 0a90 	vmov	r0, s15
 8010c18:	f7ef fc9e 	bl	8000558 <__aeabi_f2d>
 8010c1c:	4622      	mov	r2, r4
 8010c1e:	462b      	mov	r3, r5
 8010c20:	f00a fb1e 	bl	801b260 <atan2>
 8010c24:	a352      	add	r3, pc, #328	; (adr r3, 8010d70 <iNemo_quat2heading+0x370>)
 8010c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c2a:	f7ef fced 	bl	8000608 <__aeabi_dmul>
 8010c2e:	2200      	movs	r2, #0
 8010c30:	4b54      	ldr	r3, [pc, #336]	; (8010d84 <iNemo_quat2heading+0x384>)
 8010c32:	f7ef fb31 	bl	8000298 <__aeabi_dsub>
 8010c36:	f7ef ffbf 	bl	8000bb8 <__aeabi_d2f>
 8010c3a:	ee00 0a10 	vmov	s0, r0
 8010c3e:	e78a      	b.n	8010b56 <iNemo_quat2heading+0x156>
 8010c40:	eeb4 8ae9 	vcmpe.f32	s16, s19
 8010c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c48:	dd29      	ble.n	8010c9e <iNemo_quat2heading+0x29e>
 8010c4a:	ee18 0a90 	vmov	r0, s17
 8010c4e:	f7ef fc83 	bl	8000558 <__aeabi_f2d>
 8010c52:	a345      	add	r3, pc, #276	; (adr r3, 8010d68 <iNemo_quat2heading+0x368>)
 8010c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c58:	f7ef fcd6 	bl	8000608 <__aeabi_dmul>
 8010c5c:	eeb5 bac0 	vcmpe.f32	s22, #0.0
 8010c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c64:	4632      	mov	r2, r6
 8010c66:	463b      	mov	r3, r7
 8010c68:	f340 808e 	ble.w	8010d88 <iNemo_quat2heading+0x388>
 8010c6c:	f7ef ff3e 	bl	8000aec <__aeabi_dcmplt>
 8010c70:	2800      	cmp	r0, #0
 8010c72:	f43f af1e 	beq.w	8010ab2 <iNemo_quat2heading+0xb2>
 8010c76:	ee19 0a90 	vmov	r0, s19
 8010c7a:	f7ef fc6d 	bl	8000558 <__aeabi_f2d>
 8010c7e:	a33a      	add	r3, pc, #232	; (adr r3, 8010d68 <iNemo_quat2heading+0x368>)
 8010c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c84:	f7ef fcc0 	bl	8000608 <__aeabi_dmul>
 8010c88:	4632      	mov	r2, r6
 8010c8a:	463b      	mov	r3, r7
 8010c8c:	f7ef ff2e 	bl	8000aec <__aeabi_dcmplt>
 8010c90:	2800      	cmp	r0, #0
 8010c92:	f43f af0e 	beq.w	8010ab2 <iNemo_quat2heading+0xb2>
 8010c96:	2301      	movs	r3, #1
 8010c98:	f8c5 3820 	str.w	r3, [r5, #2080]	; 0x820
 8010c9c:	e7a6      	b.n	8010bec <iNemo_quat2heading+0x1ec>
 8010c9e:	ee19 0a90 	vmov	r0, s19
 8010ca2:	f7ef fc59 	bl	8000558 <__aeabi_f2d>
 8010ca6:	a330      	add	r3, pc, #192	; (adr r3, 8010d68 <iNemo_quat2heading+0x368>)
 8010ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cac:	4680      	mov	r8, r0
 8010cae:	4689      	mov	r9, r1
 8010cb0:	4630      	mov	r0, r6
 8010cb2:	4639      	mov	r1, r7
 8010cb4:	f7ef fca8 	bl	8000608 <__aeabi_dmul>
 8010cb8:	eeb5 aac0 	vcmpe.f32	s20, #0.0
 8010cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cc0:	4602      	mov	r2, r0
 8010cc2:	460b      	mov	r3, r1
 8010cc4:	4640      	mov	r0, r8
 8010cc6:	4649      	mov	r1, r9
 8010cc8:	f340 80d5 	ble.w	8010e76 <iNemo_quat2heading+0x476>
 8010ccc:	f7ef ff2c 	bl	8000b28 <__aeabi_dcmpgt>
 8010cd0:	2800      	cmp	r0, #0
 8010cd2:	f43f aeee 	beq.w	8010ab2 <iNemo_quat2heading+0xb2>
 8010cd6:	ee18 0a90 	vmov	r0, s17
 8010cda:	f7ef fc3d 	bl	8000558 <__aeabi_f2d>
 8010cde:	a322      	add	r3, pc, #136	; (adr r3, 8010d68 <iNemo_quat2heading+0x368>)
 8010ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ce4:	f7ef fc90 	bl	8000608 <__aeabi_dmul>
 8010ce8:	4642      	mov	r2, r8
 8010cea:	464b      	mov	r3, r9
 8010cec:	f7ef fefe 	bl	8000aec <__aeabi_dcmplt>
 8010cf0:	2800      	cmp	r0, #0
 8010cf2:	f43f aede 	beq.w	8010ab2 <iNemo_quat2heading+0xb2>
 8010cf6:	2300      	movs	r3, #0
 8010cf8:	f8c5 3820 	str.w	r3, [r5, #2080]	; 0x820
 8010cfc:	ed9a 0a00 	vldr	s0, [sl]
 8010d00:	e729      	b.n	8010b56 <iNemo_quat2heading+0x156>
 8010d02:	a319      	add	r3, pc, #100	; (adr r3, 8010d68 <iNemo_quat2heading+0x368>)
 8010d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d08:	4630      	mov	r0, r6
 8010d0a:	4639      	mov	r1, r7
 8010d0c:	f7ef fc7c 	bl	8000608 <__aeabi_dmul>
 8010d10:	4680      	mov	r8, r0
 8010d12:	ee19 0a90 	vmov	r0, s19
 8010d16:	4689      	mov	r9, r1
 8010d18:	f7ef fc1e 	bl	8000558 <__aeabi_f2d>
 8010d1c:	eeb5 aac0 	vcmpe.f32	s20, #0.0
 8010d20:	4606      	mov	r6, r0
 8010d22:	460f      	mov	r7, r1
 8010d24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d28:	4640      	mov	r0, r8
 8010d2a:	4649      	mov	r1, r9
 8010d2c:	4632      	mov	r2, r6
 8010d2e:	463b      	mov	r3, r7
 8010d30:	d56c      	bpl.n	8010e0c <iNemo_quat2heading+0x40c>
 8010d32:	f7ef fedb 	bl	8000aec <__aeabi_dcmplt>
 8010d36:	b170      	cbz	r0, 8010d56 <iNemo_quat2heading+0x356>
 8010d38:	ee18 0a10 	vmov	r0, s16
 8010d3c:	f7ef fc0c 	bl	8000558 <__aeabi_f2d>
 8010d40:	a309      	add	r3, pc, #36	; (adr r3, 8010d68 <iNemo_quat2heading+0x368>)
 8010d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d46:	f7ef fc5f 	bl	8000608 <__aeabi_dmul>
 8010d4a:	4632      	mov	r2, r6
 8010d4c:	463b      	mov	r3, r7
 8010d4e:	f7ef fecd 	bl	8000aec <__aeabi_dcmplt>
 8010d52:	2800      	cmp	r0, #0
 8010d54:	d1cf      	bne.n	8010cf6 <iNemo_quat2heading+0x2f6>
 8010d56:	eef0 7a4c 	vmov.f32	s15, s24
 8010d5a:	eeb0 ca6b 	vmov.f32	s24, s23
 8010d5e:	eef0 ba67 	vmov.f32	s23, s15
 8010d62:	e6a6      	b.n	8010ab2 <iNemo_quat2heading+0xb2>
 8010d64:	f3af 8000 	nop.w
 8010d68:	e0000000 	.word	0xe0000000
 8010d6c:	3ff6b851 	.word	0x3ff6b851
 8010d70:	20000000 	.word	0x20000000
 8010d74:	404ca5dc 	.word	0x404ca5dc
 8010d78:	200013d0 	.word	0x200013d0
 8010d7c:	43340000 	.word	0x43340000
 8010d80:	43b40000 	.word	0x43b40000
 8010d84:	40568000 	.word	0x40568000
 8010d88:	f7ef feb0 	bl	8000aec <__aeabi_dcmplt>
 8010d8c:	2800      	cmp	r0, #0
 8010d8e:	f43f ae90 	beq.w	8010ab2 <iNemo_quat2heading+0xb2>
 8010d92:	ee19 0a90 	vmov	r0, s19
 8010d96:	f7ef fbdf 	bl	8000558 <__aeabi_f2d>
 8010d9a:	a35b      	add	r3, pc, #364	; (adr r3, 8010f08 <iNemo_quat2heading+0x508>)
 8010d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010da0:	f7ef fc32 	bl	8000608 <__aeabi_dmul>
 8010da4:	4632      	mov	r2, r6
 8010da6:	463b      	mov	r3, r7
 8010da8:	f7ef fea0 	bl	8000aec <__aeabi_dcmplt>
 8010dac:	2800      	cmp	r0, #0
 8010dae:	f43f ae80 	beq.w	8010ab2 <iNemo_quat2heading+0xb2>
 8010db2:	2303      	movs	r3, #3
 8010db4:	f8c5 3820 	str.w	r3, [r5, #2080]	; 0x820
 8010db8:	ee6b 7aeb 	vnmul.f32	s15, s23, s23
 8010dbc:	eeec 7a0c 	vfma.f32	s15, s24, s24
 8010dc0:	eeec 7aec 	vfms.f32	s15, s25, s25
 8010dc4:	eee9 7a09 	vfma.f32	s15, s18, s18
 8010dc8:	ee2c 9a89 	vmul.f32	s18, s25, s18
 8010dcc:	ee17 0a90 	vmov	r0, s15
 8010dd0:	eeab 9a8c 	vfma.f32	s18, s23, s24
 8010dd4:	f7ef fbc0 	bl	8000558 <__aeabi_f2d>
 8010dd8:	ee79 7a09 	vadd.f32	s15, s18, s18
 8010ddc:	4604      	mov	r4, r0
 8010dde:	460d      	mov	r5, r1
 8010de0:	ee17 0a90 	vmov	r0, s15
 8010de4:	f7ef fbb8 	bl	8000558 <__aeabi_f2d>
 8010de8:	4622      	mov	r2, r4
 8010dea:	462b      	mov	r3, r5
 8010dec:	f00a fa38 	bl	801b260 <atan2>
 8010df0:	a349      	add	r3, pc, #292	; (adr r3, 8010f18 <iNemo_quat2heading+0x518>)
 8010df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010df6:	f7ef fc07 	bl	8000608 <__aeabi_dmul>
 8010dfa:	2200      	movs	r2, #0
 8010dfc:	4b44      	ldr	r3, [pc, #272]	; (8010f10 <iNemo_quat2heading+0x510>)
 8010dfe:	f7ef fa4d 	bl	800029c <__adddf3>
 8010e02:	f7ef fed9 	bl	8000bb8 <__aeabi_d2f>
 8010e06:	ee00 0a10 	vmov	s0, r0
 8010e0a:	e6a4      	b.n	8010b56 <iNemo_quat2heading+0x156>
 8010e0c:	f7ef fe6e 	bl	8000aec <__aeabi_dcmplt>
 8010e10:	2800      	cmp	r0, #0
 8010e12:	d0a0      	beq.n	8010d56 <iNemo_quat2heading+0x356>
 8010e14:	ee18 0a10 	vmov	r0, s16
 8010e18:	f7ef fb9e 	bl	8000558 <__aeabi_f2d>
 8010e1c:	a33a      	add	r3, pc, #232	; (adr r3, 8010f08 <iNemo_quat2heading+0x508>)
 8010e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e22:	f7ef fbf1 	bl	8000608 <__aeabi_dmul>
 8010e26:	4632      	mov	r2, r6
 8010e28:	463b      	mov	r3, r7
 8010e2a:	f7ef fe5f 	bl	8000aec <__aeabi_dcmplt>
 8010e2e:	2800      	cmp	r0, #0
 8010e30:	d091      	beq.n	8010d56 <iNemo_quat2heading+0x356>
 8010e32:	2302      	movs	r3, #2
 8010e34:	f8c5 3820 	str.w	r3, [r5, #2080]	; 0x820
 8010e38:	e687      	b.n	8010b4a <iNemo_quat2heading+0x14a>
 8010e3a:	f7ef fe57 	bl	8000aec <__aeabi_dcmplt>
 8010e3e:	2800      	cmp	r0, #0
 8010e40:	d089      	beq.n	8010d56 <iNemo_quat2heading+0x356>
 8010e42:	ee19 0a90 	vmov	r0, s19
 8010e46:	f7ef fb87 	bl	8000558 <__aeabi_f2d>
 8010e4a:	a32f      	add	r3, pc, #188	; (adr r3, 8010f08 <iNemo_quat2heading+0x508>)
 8010e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e50:	f7ef fbda 	bl	8000608 <__aeabi_dmul>
 8010e54:	4632      	mov	r2, r6
 8010e56:	463b      	mov	r3, r7
 8010e58:	f7ef fe48 	bl	8000aec <__aeabi_dcmplt>
 8010e5c:	2800      	cmp	r0, #0
 8010e5e:	f43f af7a 	beq.w	8010d56 <iNemo_quat2heading+0x356>
 8010e62:	eef0 7a6b 	vmov.f32	s15, s23
 8010e66:	2303      	movs	r3, #3
 8010e68:	eef0 ba4c 	vmov.f32	s23, s24
 8010e6c:	f8c5 3820 	str.w	r3, [r5, #2080]	; 0x820
 8010e70:	eeb0 ca67 	vmov.f32	s24, s15
 8010e74:	e7a0      	b.n	8010db8 <iNemo_quat2heading+0x3b8>
 8010e76:	f7ef fe57 	bl	8000b28 <__aeabi_dcmpgt>
 8010e7a:	2800      	cmp	r0, #0
 8010e7c:	f43f ae19 	beq.w	8010ab2 <iNemo_quat2heading+0xb2>
 8010e80:	ee18 0a90 	vmov	r0, s17
 8010e84:	f7ef fb68 	bl	8000558 <__aeabi_f2d>
 8010e88:	a31f      	add	r3, pc, #124	; (adr r3, 8010f08 <iNemo_quat2heading+0x508>)
 8010e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e8e:	f7ef fbbb 	bl	8000608 <__aeabi_dmul>
 8010e92:	4642      	mov	r2, r8
 8010e94:	464b      	mov	r3, r9
 8010e96:	f7ef fe29 	bl	8000aec <__aeabi_dcmplt>
 8010e9a:	2800      	cmp	r0, #0
 8010e9c:	f43f ae09 	beq.w	8010ab2 <iNemo_quat2heading+0xb2>
 8010ea0:	e7c7      	b.n	8010e32 <iNemo_quat2heading+0x432>
 8010ea2:	f7ef fe41 	bl	8000b28 <__aeabi_dcmpgt>
 8010ea6:	2800      	cmp	r0, #0
 8010ea8:	f43f ae03 	beq.w	8010ab2 <iNemo_quat2heading+0xb2>
 8010eac:	ee19 0a90 	vmov	r0, s19
 8010eb0:	f7ef fb52 	bl	8000558 <__aeabi_f2d>
 8010eb4:	a314      	add	r3, pc, #80	; (adr r3, 8010f08 <iNemo_quat2heading+0x508>)
 8010eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010eba:	f7ef fba5 	bl	8000608 <__aeabi_dmul>
 8010ebe:	4642      	mov	r2, r8
 8010ec0:	464b      	mov	r3, r9
 8010ec2:	f7ef fe13 	bl	8000aec <__aeabi_dcmplt>
 8010ec6:	2800      	cmp	r0, #0
 8010ec8:	f43f adf3 	beq.w	8010ab2 <iNemo_quat2heading+0xb2>
 8010ecc:	2305      	movs	r3, #5
 8010ece:	f8c5 3820 	str.w	r3, [r5, #2080]	; 0x820
 8010ed2:	e713      	b.n	8010cfc <iNemo_quat2heading+0x2fc>
 8010ed4:	f7ef fe28 	bl	8000b28 <__aeabi_dcmpgt>
 8010ed8:	2800      	cmp	r0, #0
 8010eda:	f43f af3c 	beq.w	8010d56 <iNemo_quat2heading+0x356>
 8010ede:	ee19 0a90 	vmov	r0, s19
 8010ee2:	f7ef fb39 	bl	8000558 <__aeabi_f2d>
 8010ee6:	a308      	add	r3, pc, #32	; (adr r3, 8010f08 <iNemo_quat2heading+0x508>)
 8010ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010eec:	f7ef fb8c 	bl	8000608 <__aeabi_dmul>
 8010ef0:	4642      	mov	r2, r8
 8010ef2:	464b      	mov	r3, r9
 8010ef4:	f7ef fdfa 	bl	8000aec <__aeabi_dcmplt>
 8010ef8:	2800      	cmp	r0, #0
 8010efa:	f43f af2c 	beq.w	8010d56 <iNemo_quat2heading+0x356>
 8010efe:	e7e5      	b.n	8010ecc <iNemo_quat2heading+0x4cc>
 8010f00:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8010f14 <iNemo_quat2heading+0x514>
 8010f04:	e639      	b.n	8010b7a <iNemo_quat2heading+0x17a>
 8010f06:	bf00      	nop
 8010f08:	e0000000 	.word	0xe0000000
 8010f0c:	3ff6b851 	.word	0x3ff6b851
 8010f10:	40568000 	.word	0x40568000
 8010f14:	00000000 	.word	0x00000000
 8010f18:	20000000 	.word	0x20000000
 8010f1c:	404ca5dc 	.word	0x404ca5dc

08010f20 <output_update>:
 8010f20:	edd0 5a03 	vldr	s11, [r0, #12]
 8010f24:	ed90 7a02 	vldr	s14, [r0, #8]
 8010f28:	edd0 4a01 	vldr	s9, [r0, #4]
 8010f2c:	edd0 3a00 	vldr	s7, [r0]
 8010f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f34:	ee65 7aa5 	vmul.f32	s15, s11, s11
 8010f38:	eeb1 5a64 	vneg.f32	s10, s9
 8010f3c:	eee7 7a07 	vfma.f32	s15, s14, s14
 8010f40:	4682      	mov	sl, r0
 8010f42:	460f      	mov	r7, r1
 8010f44:	ee24 6a87 	vmul.f32	s12, s9, s14
 8010f48:	ee65 6ac5 	vnmul.f32	s13, s11, s10
 8010f4c:	ed2d 8b0a 	vpush	{d8-d12}
 8010f50:	eeb1 4a63 	vneg.f32	s8, s7
 8010f54:	eee3 6a87 	vfma.f32	s13, s7, s14
 8010f58:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 8010f5c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8010f5e:	ed8a 4a00 	vstr	s8, [sl]
 8010f62:	eee4 7a23 	vfma.f32	s15, s8, s7
 8010f66:	4614      	mov	r4, r2
 8010f68:	461d      	mov	r5, r3
 8010f6a:	eea4 6a25 	vfma.f32	s12, s8, s11
 8010f6e:	eeb1 7a47 	vneg.f32	s14, s14
 8010f72:	ed8a 7a02 	vstr	s14, [sl, #8]
 8010f76:	ee36 6a06 	vadd.f32	s12, s12, s12
 8010f7a:	ee76 6aa6 	vadd.f32	s13, s13, s13
 8010f7e:	eee5 7a24 	vfma.f32	s15, s10, s9
 8010f82:	ed8a 5a01 	vstr	s10, [sl, #4]
 8010f86:	2800      	cmp	r0, #0
 8010f88:	d141      	bne.n	801100e <output_update+0xee>
 8010f8a:	edc3 6a00 	vstr	s13, [r3]
 8010f8e:	edc3 7a02 	vstr	s15, [r3, #8]
 8010f92:	ed83 6a01 	vstr	s12, [r3, #4]
 8010f96:	ed9a 7a02 	vldr	s14, [sl, #8]
 8010f9a:	edda 6a03 	vldr	s13, [sl, #12]
 8010f9e:	edda 5a00 	vldr	s11, [sl]
 8010fa2:	ed9a 6a01 	vldr	s12, [sl, #4]
 8010fa6:	4bf2      	ldr	r3, [pc, #968]	; (8011370 <output_update+0x450>)
 8010fa8:	ee67 7a26 	vmul.f32	s15, s14, s13
 8010fac:	ee65 baa5 	vmul.f32	s23, s11, s11
 8010fb0:	eee5 7a86 	vfma.f32	s15, s11, s12
 8010fb4:	ee26 aa06 	vmul.f32	s20, s12, s12
 8010fb8:	ee67 9a07 	vmul.f32	s19, s14, s14
 8010fbc:	ee37 8aa7 	vadd.f32	s16, s15, s15
 8010fc0:	ee3b 7aca 	vsub.f32	s14, s23, s20
 8010fc4:	edd3 aa00 	vldr	s21, [r3]
 8010fc8:	ee26 9aa6 	vmul.f32	s18, s13, s13
 8010fcc:	ee37 7a69 	vsub.f32	s14, s14, s19
 8010fd0:	eeb4 8a6a 	vcmp.f32	s16, s21
 8010fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fd8:	ee37 7a09 	vadd.f32	s14, s14, s18
 8010fdc:	d032      	beq.n	8011044 <output_update+0x124>
 8010fde:	edd3 7a01 	vldr	s15, [r3, #4]
 8010fe2:	eeb4 8a67 	vcmp.f32	s16, s15
 8010fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fea:	d02b      	beq.n	8011044 <output_update+0x124>
 8010fec:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8010ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ff4:	f040 81a4 	bne.w	8011340 <output_update+0x420>
 8010ff8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8010ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011000:	f340 81ef 	ble.w	80113e2 <output_update+0x4c2>
 8011004:	ed9f badb 	vldr	s22, [pc, #876]	; 8011374 <output_update+0x454>
 8011008:	ed9f 7adb 	vldr	s14, [pc, #876]	; 8011378 <output_update+0x458>
 801100c:	e04c      	b.n	80110a8 <output_update+0x188>
 801100e:	2801      	cmp	r0, #1
 8011010:	f000 8099 	beq.w	8011146 <output_update+0x226>
 8011014:	ecbd 8b0a 	vpop	{d8-d12}
 8011018:	ed9f 6ae2 	vldr	s12, [pc, #904]	; 80113a4 <output_update+0x484>
 801101c:	edd2 6a00 	vldr	s13, [r2]
 8011020:	ed92 7a01 	vldr	s14, [r2, #4]
 8011024:	edd2 7a02 	vldr	s15, [r2, #8]
 8011028:	ee66 6a86 	vmul.f32	s13, s13, s12
 801102c:	ee27 7a06 	vmul.f32	s14, s14, s12
 8011030:	ee67 7a86 	vmul.f32	s15, s15, s12
 8011034:	edc2 6a00 	vstr	s13, [r2]
 8011038:	ed82 7a01 	vstr	s14, [r2, #4]
 801103c:	edc2 7a02 	vstr	s15, [r2, #8]
 8011040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011044:	eeb4 7a6a 	vcmp.f32	s14, s21
 8011048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801104c:	f040 811f 	bne.w	801128e <output_update+0x36e>
 8011050:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8011054:	eddf 5ac9 	vldr	s11, [pc, #804]	; 801137c <output_update+0x45c>
 8011058:	ed9f 4ac9 	vldr	s8, [pc, #804]	; 8011380 <output_update+0x460>
 801105c:	ed9f 6ac9 	vldr	s12, [pc, #804]	; 8011384 <output_update+0x464>
 8011060:	eddf 4ac9 	vldr	s9, [pc, #804]	; 8011388 <output_update+0x468>
 8011064:	ed9f bac9 	vldr	s22, [pc, #804]	; 801138c <output_update+0x46c>
 8011068:	ed9f 5ac9 	vldr	s10, [pc, #804]	; 8011390 <output_update+0x470>
 801106c:	eddf 6ac9 	vldr	s13, [pc, #804]	; 8011394 <output_update+0x474>
 8011070:	eddf 7ac9 	vldr	s15, [pc, #804]	; 8011398 <output_update+0x478>
 8011074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011078:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801107c:	bfd8      	it	le
 801107e:	eef0 5a44 	vmovle.f32	s11, s8
 8011082:	bfd8      	it	le
 8011084:	eeb0 6a64 	vmovle.f32	s12, s9
 8011088:	bfd8      	it	le
 801108a:	eeb0 ba45 	vmovle.f32	s22, s10
 801108e:	bfd4      	ite	le
 8011090:	eeb0 7a67 	vmovle.f32	s14, s15
 8011094:	eeb0 7a66 	vmovgt.f32	s14, s13
 8011098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801109c:	bfc8      	it	gt
 801109e:	eeb0 ba65 	vmovgt.f32	s22, s11
 80110a2:	bfc8      	it	gt
 80110a4:	eeb0 7a46 	vmovgt.f32	s14, s12
 80110a8:	ed84 7a00 	vstr	s14, [r4]
 80110ac:	edda 7a01 	vldr	s15, [sl, #4]
 80110b0:	ed9a 7a03 	vldr	s14, [sl, #12]
 80110b4:	edda 6a02 	vldr	s13, [sl, #8]
 80110b8:	ed9a 6a00 	vldr	s12, [sl]
 80110bc:	ee27 7a67 	vnmul.f32	s14, s14, s15
 80110c0:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 80110c4:	eea6 7a26 	vfma.f32	s14, s12, s13
 80110c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80110cc:	ee17 0a90 	vmov	r0, s15
 80110d0:	f7ef fa42 	bl	8000558 <__aeabi_f2d>
 80110d4:	f00a f870 	bl	801b1b8 <asin>
 80110d8:	f7ef fd6e 	bl	8000bb8 <__aeabi_d2f>
 80110dc:	6060      	str	r0, [r4, #4]
 80110de:	edda 7a03 	vldr	s15, [sl, #12]
 80110e2:	ed9a 8a00 	vldr	s16, [sl]
 80110e6:	edda 6a01 	vldr	s13, [sl, #4]
 80110ea:	ed9a 7a02 	vldr	s14, [sl, #8]
 80110ee:	ee28 8a27 	vmul.f32	s16, s16, s15
 80110f2:	ee79 7a89 	vadd.f32	s15, s19, s18
 80110f6:	eea6 8a87 	vfma.f32	s16, s13, s14
 80110fa:	ee77 7aeb 	vsub.f32	s15, s15, s23
 80110fe:	ee38 8a08 	vadd.f32	s16, s16, s16
 8011102:	ee08 0a90 	vmov	s17, r0
 8011106:	eeb4 8a6a 	vcmp.f32	s16, s21
 801110a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801110e:	ee77 7aca 	vsub.f32	s15, s15, s20
 8011112:	f000 80c6 	beq.w	80112a2 <output_update+0x382>
 8011116:	4ba1      	ldr	r3, [pc, #644]	; (801139c <output_update+0x47c>)
 8011118:	ed93 7a00 	vldr	s14, [r3]
 801111c:	eeb4 8a47 	vcmp.f32	s16, s14
 8011120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011124:	f000 80bd 	beq.w	80112a2 <output_update+0x382>
 8011128:	eef5 7a40 	vcmp.f32	s15, #0.0
 801112c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011130:	f040 8140 	bne.w	80113b4 <output_update+0x494>
 8011134:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8011138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801113c:	f340 8157 	ble.w	80113ee <output_update+0x4ce>
 8011140:	eddf 7a8c 	vldr	s15, [pc, #560]	; 8011374 <output_update+0x454>
 8011144:	e0d6      	b.n	80112f4 <output_update+0x3d4>
 8011146:	eef1 7a67 	vneg.f32	s15, s15
 801114a:	ed83 6a00 	vstr	s12, [r3]
 801114e:	edc3 6a01 	vstr	s13, [r3, #4]
 8011152:	edc3 7a02 	vstr	s15, [r3, #8]
 8011156:	ed9a aa00 	vldr	s20, [sl]
 801115a:	edda 8a02 	vldr	s17, [sl, #8]
 801115e:	edda aa01 	vldr	s21, [sl, #4]
 8011162:	ed9a 8a03 	vldr	s16, [sl, #12]
 8011166:	ee2a 9a0a 	vmul.f32	s18, s20, s20
 801116a:	ee68 7aa8 	vmul.f32	s15, s17, s17
 801116e:	ee39 9a09 	vadd.f32	s18, s18, s18
 8011172:	eeb0 ca00 	vmov.f32	s24, #0	; 0x40000000  2.0
 8011176:	eeb0 7a49 	vmov.f32	s14, s18
 801117a:	eea7 7a8c 	vfma.f32	s14, s15, s24
 801117e:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
 8011182:	ee7b 7ac7 	vsub.f32	s15, s23, s14
 8011186:	eef1 8a68 	vneg.f32	s17, s17
 801118a:	ee17 0a90 	vmov	r0, s15
 801118e:	f7ef f9e3 	bl	8000558 <__aeabi_f2d>
 8011192:	ee6a 7a2a 	vmul.f32	s15, s20, s21
 8011196:	4680      	mov	r8, r0
 8011198:	eee8 7a88 	vfma.f32	s15, s17, s16
 801119c:	4689      	mov	r9, r1
 801119e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80111a2:	ee17 0a90 	vmov	r0, s15
 80111a6:	f7ef f9d7 	bl	8000558 <__aeabi_f2d>
 80111aa:	4642      	mov	r2, r8
 80111ac:	464b      	mov	r3, r9
 80111ae:	f00a f857 	bl	801b260 <atan2>
 80111b2:	f7ef fd01 	bl	8000bb8 <__aeabi_d2f>
 80111b6:	ee6a 7aaa 	vmul.f32	s15, s21, s21
 80111ba:	ee0b 0a10 	vmov	s22, r0
 80111be:	eea7 9a8c 	vfma.f32	s18, s15, s24
 80111c2:	eef1 9a4b 	vneg.f32	s19, s22
 80111c6:	ee7b 7ac9 	vsub.f32	s15, s23, s18
 80111ca:	edc4 9a00 	vstr	s19, [r4]
 80111ce:	ee17 0a90 	vmov	r0, s15
 80111d2:	f7ef f9c1 	bl	8000558 <__aeabi_f2d>
 80111d6:	ee6a 7a88 	vmul.f32	s15, s21, s16
 80111da:	4680      	mov	r8, r0
 80111dc:	eeea 7a28 	vfma.f32	s15, s20, s17
 80111e0:	4689      	mov	r9, r1
 80111e2:	ee28 8a4a 	vnmul.f32	s16, s16, s20
 80111e6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80111ea:	eea8 8aaa 	vfma.f32	s16, s17, s21
 80111ee:	ee17 0a90 	vmov	r0, s15
 80111f2:	f7ef f9b1 	bl	8000558 <__aeabi_f2d>
 80111f6:	4642      	mov	r2, r8
 80111f8:	464b      	mov	r3, r9
 80111fa:	f00a f831 	bl	801b260 <atan2>
 80111fe:	f7ef fcdb 	bl	8000bb8 <__aeabi_d2f>
 8011202:	ee07 0a90 	vmov	s15, r0
 8011206:	eeb1 9a67 	vneg.f32	s18, s15
 801120a:	ee78 7a08 	vadd.f32	s15, s16, s16
 801120e:	ed84 9a01 	vstr	s18, [r4, #4]
 8011212:	ee17 0a90 	vmov	r0, s15
 8011216:	f7ef f99f 	bl	8000558 <__aeabi_f2d>
 801121a:	f009 ffcd 	bl	801b1b8 <asin>
 801121e:	f7ef fccb 	bl	8000bb8 <__aeabi_d2f>
 8011222:	eeb5 bac0 	vcmpe.f32	s22, #0.0
 8011226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801122a:	ee07 0a90 	vmov	s15, r0
 801122e:	60a0      	str	r0, [r4, #8]
 8011230:	dd03      	ble.n	801123a <output_update+0x31a>
 8011232:	eddf 9a5b 	vldr	s19, [pc, #364]	; 80113a0 <output_update+0x480>
 8011236:	ee79 9acb 	vsub.f32	s19, s19, s22
 801123a:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 80113a4 <output_update+0x484>
 801123e:	ee69 9a87 	vmul.f32	s19, s19, s14
 8011242:	ee29 9a07 	vmul.f32	s18, s18, s14
 8011246:	ee67 7a87 	vmul.f32	s15, s15, s14
 801124a:	edc4 9a00 	vstr	s19, [r4]
 801124e:	ed84 9a01 	vstr	s18, [r4, #4]
 8011252:	edc4 7a02 	vstr	s15, [r4, #8]
 8011256:	ed97 7a01 	vldr	s14, [r7, #4]
 801125a:	edd5 7a00 	vldr	s15, [r5]
 801125e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011262:	ecbd 8b0a 	vpop	{d8-d12}
 8011266:	edc6 7a00 	vstr	s15, [r6]
 801126a:	ed97 7a00 	vldr	s14, [r7]
 801126e:	edd5 7a01 	vldr	s15, [r5, #4]
 8011272:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011276:	edc6 7a01 	vstr	s15, [r6, #4]
 801127a:	edd5 7a02 	vldr	s15, [r5, #8]
 801127e:	ed97 7a02 	vldr	s14, [r7, #8]
 8011282:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011286:	edc6 7a02 	vstr	s15, [r6, #8]
 801128a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801128e:	4b43      	ldr	r3, [pc, #268]	; (801139c <output_update+0x47c>)
 8011290:	edd3 7a00 	vldr	s15, [r3]
 8011294:	eeb4 7a67 	vcmp.f32	s14, s15
 8011298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801129c:	f47f aea6 	bne.w	8010fec <output_update+0xcc>
 80112a0:	e6d6      	b.n	8011050 <output_update+0x130>
 80112a2:	eef4 7a6a 	vcmp.f32	s15, s21
 80112a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112aa:	d008      	beq.n	80112be <output_update+0x39e>
 80112ac:	4b3b      	ldr	r3, [pc, #236]	; (801139c <output_update+0x47c>)
 80112ae:	ed93 7a00 	vldr	s14, [r3]
 80112b2:	eef4 7a47 	vcmp.f32	s15, s14
 80112b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112ba:	f47f af35 	bne.w	8011128 <output_update+0x208>
 80112be:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80112c2:	eddf 6a2e 	vldr	s13, [pc, #184]	; 801137c <output_update+0x45c>
 80112c6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8011380 <output_update+0x460>
 80112ca:	ed9f 7a30 	vldr	s14, [pc, #192]	; 801138c <output_update+0x46c>
 80112ce:	ed9f 6a30 	vldr	s12, [pc, #192]	; 8011390 <output_update+0x470>
 80112d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112d6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80112da:	bfd8      	it	le
 80112dc:	eef0 6a65 	vmovle.f32	s13, s11
 80112e0:	bfd4      	ite	le
 80112e2:	eef0 7a46 	vmovle.f32	s15, s12
 80112e6:	eef0 7a47 	vmovgt.f32	s15, s14
 80112ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112ee:	bfc8      	it	gt
 80112f0:	eef0 7a66 	vmovgt.f32	s15, s13
 80112f4:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80113a4 <output_update+0x484>
 80112f8:	ed84 ba00 	vstr	s22, [r4]
 80112fc:	ee68 8a87 	vmul.f32	s17, s17, s14
 8011300:	edc4 7a02 	vstr	s15, [r4, #8]
 8011304:	edc4 8a01 	vstr	s17, [r4, #4]
 8011308:	ed97 7a00 	vldr	s14, [r7]
 801130c:	edd5 7a00 	vldr	s15, [r5]
 8011310:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011314:	ecbd 8b0a 	vpop	{d8-d12}
 8011318:	edc6 7a00 	vstr	s15, [r6]
 801131c:	ed97 7a01 	vldr	s14, [r7, #4]
 8011320:	edd5 7a01 	vldr	s15, [r5, #4]
 8011324:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011328:	edc6 7a01 	vstr	s15, [r6, #4]
 801132c:	edd5 7a02 	vldr	s15, [r5, #8]
 8011330:	ed97 7a02 	vldr	s14, [r7, #8]
 8011334:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011338:	edc6 7a02 	vstr	s15, [r6, #8]
 801133c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011340:	ee17 0a10 	vmov	r0, s14
 8011344:	f7ef f908 	bl	8000558 <__aeabi_f2d>
 8011348:	4680      	mov	r8, r0
 801134a:	4689      	mov	r9, r1
 801134c:	ee18 0a10 	vmov	r0, s16
 8011350:	f7ef f902 	bl	8000558 <__aeabi_f2d>
 8011354:	4642      	mov	r2, r8
 8011356:	464b      	mov	r3, r9
 8011358:	f009 ff82 	bl	801b260 <atan2>
 801135c:	f7ef fc2c 	bl	8000bb8 <__aeabi_d2f>
 8011360:	ed9f ba10 	vldr	s22, [pc, #64]	; 80113a4 <output_update+0x484>
 8011364:	ee07 0a10 	vmov	s14, r0
 8011368:	ee27 ba0b 	vmul.f32	s22, s14, s22
 801136c:	e69c      	b.n	80110a8 <output_update+0x188>
 801136e:	bf00      	nop
 8011370:	200017e0 	.word	0x200017e0
 8011374:	42b40000 	.word	0x42b40000
 8011378:	3fc90fdb 	.word	0x3fc90fdb
 801137c:	42340000 	.word	0x42340000
 8011380:	c2340000 	.word	0xc2340000
 8011384:	3f490fdb 	.word	0x3f490fdb
 8011388:	bf490fdb 	.word	0xbf490fdb
 801138c:	43070000 	.word	0x43070000
 8011390:	c3070000 	.word	0xc3070000
 8011394:	4016cbe4 	.word	0x4016cbe4
 8011398:	c016cbe4 	.word	0xc016cbe4
 801139c:	200017e4 	.word	0x200017e4
 80113a0:	40c90e56 	.word	0x40c90e56
 80113a4:	42652ee1 	.word	0x42652ee1
 80113a8:	00000000 	.word	0x00000000
 80113ac:	bfc90fdb 	.word	0xbfc90fdb
 80113b0:	c2b40000 	.word	0xc2b40000
 80113b4:	ee17 0a90 	vmov	r0, s15
 80113b8:	f7ef f8ce 	bl	8000558 <__aeabi_f2d>
 80113bc:	4680      	mov	r8, r0
 80113be:	4689      	mov	r9, r1
 80113c0:	ee18 0a10 	vmov	r0, s16
 80113c4:	f7ef f8c8 	bl	8000558 <__aeabi_f2d>
 80113c8:	4642      	mov	r2, r8
 80113ca:	464b      	mov	r3, r9
 80113cc:	f009 ff48 	bl	801b260 <atan2>
 80113d0:	f7ef fbf2 	bl	8000bb8 <__aeabi_d2f>
 80113d4:	ed5f 7a0d 	vldr	s15, [pc, #-52]	; 80113a4 <output_update+0x484>
 80113d8:	ee07 0a10 	vmov	s14, r0
 80113dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80113e0:	e788      	b.n	80112f4 <output_update+0x3d4>
 80113e2:	d408      	bmi.n	80113f6 <output_update+0x4d6>
 80113e4:	ed1f ba10 	vldr	s22, [pc, #-64]	; 80113a8 <output_update+0x488>
 80113e8:	eeb0 7a4b 	vmov.f32	s14, s22
 80113ec:	e65c      	b.n	80110a8 <output_update+0x188>
 80113ee:	d407      	bmi.n	8011400 <output_update+0x4e0>
 80113f0:	ed5f 7a13 	vldr	s15, [pc, #-76]	; 80113a8 <output_update+0x488>
 80113f4:	e77e      	b.n	80112f4 <output_update+0x3d4>
 80113f6:	ed1f ba12 	vldr	s22, [pc, #-72]	; 80113b0 <output_update+0x490>
 80113fa:	ed1f 7a14 	vldr	s14, [pc, #-80]	; 80113ac <output_update+0x48c>
 80113fe:	e653      	b.n	80110a8 <output_update+0x188>
 8011400:	ed5f 7a15 	vldr	s15, [pc, #-84]	; 80113b0 <output_update+0x490>
 8011404:	e776      	b.n	80112f4 <output_update+0x3d4>
 8011406:	bf00      	nop

08011408 <MEMS_runMagCal.constprop.14>:
 8011408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801140c:	ed2d 8b0c 	vpush	{d8-d13}
 8011410:	f8df b408 	ldr.w	fp, [pc, #1032]	; 801181c <MEMS_runMagCal.constprop.14+0x414>
 8011414:	f2ad 5d6c 	subw	sp, sp, #1388	; 0x56c
 8011418:	2382      	movs	r3, #130	; 0x82
 801141a:	461a      	mov	r2, r3
 801141c:	f50b 608c 	add.w	r0, fp, #1120	; 0x460
 8011420:	ac56      	add	r4, sp, #344	; 0x158
 8011422:	a917      	add	r1, sp, #92	; 0x5c
 8011424:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
 8011428:	9419      	str	r4, [sp, #100]	; 0x64
 801142a:	f7fe f975 	bl	800f718 <MEMS_getSensorData_I16>
 801142e:	f8bd 0060 	ldrh.w	r0, [sp, #96]	; 0x60
 8011432:	f9bb 2462 	ldrsh.w	r2, [fp, #1122]	; 0x462
 8011436:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011438:	f100 39ff 	add.w	r9, r0, #4294967295
 801143c:	fb02 3209 	mla	r2, r2, r9, r3
 8011440:	9209      	str	r2, [sp, #36]	; 0x24
 8011442:	f8cb 24ac 	str.w	r2, [fp, #1196]	; 0x4ac
 8011446:	2800      	cmp	r0, #0
 8011448:	f000 8275 	beq.w	8011936 <MEMS_runMagCal.constprop.14+0x52e>
 801144c:	f8db 347c 	ldr.w	r3, [fp, #1148]	; 0x47c
 8011450:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8011454:	f502 32c3 	add.w	r2, r2, #99840	; 0x18600
 8011458:	fb01 f103 	mul.w	r1, r1, r3
 801145c:	32a0      	adds	r2, #160	; 0xa0
 801145e:	428a      	cmp	r2, r1
 8011460:	f080 826f 	bcs.w	8011942 <MEMS_runMagCal.constprop.14+0x53a>
 8011464:	2200      	movs	r2, #0
 8011466:	f88b 2500 	strb.w	r2, [fp, #1280]	; 0x500
 801146a:	2b00      	cmp	r3, #0
 801146c:	f040 8274 	bne.w	8011958 <MEMS_runMagCal.constprop.14+0x550>
 8011470:	f8cb 347c 	str.w	r3, [fp, #1148]	; 0x47c
 8011474:	2200      	movs	r2, #0
 8011476:	f8cb 3478 	str.w	r3, [fp, #1144]	; 0x478
 801147a:	f8cb 2480 	str.w	r2, [fp, #1152]	; 0x480
 801147e:	2300      	movs	r3, #0
 8011480:	22ff      	movs	r2, #255	; 0xff
 8011482:	f8cb 3508 	str.w	r3, [fp, #1288]	; 0x508
 8011486:	f8cb 350c 	str.w	r3, [fp, #1292]	; 0x50c
 801148a:	f8cb 3510 	str.w	r3, [fp, #1296]	; 0x510
 801148e:	f8cb 3514 	str.w	r3, [fp, #1300]	; 0x514
 8011492:	f8cb 351c 	str.w	r3, [fp, #1308]	; 0x51c
 8011496:	f8cb 3518 	str.w	r3, [fp, #1304]	; 0x518
 801149a:	f88b 2502 	strb.w	r2, [fp, #1282]	; 0x502
 801149e:	4bdb      	ldr	r3, [pc, #876]	; (801180c <MEMS_runMagCal.constprop.14+0x404>)
 80114a0:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 80114a4:	4fda      	ldr	r7, [pc, #872]	; (8011810 <MEMS_runMagCal.constprop.14+0x408>)
 80114a6:	eddf 7adb 	vldr	s15, [pc, #876]	; 8011814 <MEMS_runMagCal.constprop.14+0x40c>
 80114aa:	edd3 2a01 	vldr	s5, [r3, #4]
 80114ae:	edd3 5a1f 	vldr	s11, [r3, #124]	; 0x7c
 80114b2:	ed93 5a1c 	vldr	s10, [r3, #112]	; 0x70
 80114b6:	edd3 4a23 	vldr	s9, [r3, #140]	; 0x8c
 80114ba:	ed93 4a1d 	vldr	s8, [r3, #116]	; 0x74
 80114be:	edd3 3a27 	vldr	s7, [r3, #156]	; 0x9c
 80114c2:	ed93 3a1e 	vldr	s6, [r3, #120]	; 0x78
 80114c6:	9002      	str	r0, [sp, #8]
 80114c8:	f04f 0c00 	mov.w	ip, #0
 80114cc:	fa1f f989 	uxth.w	r9, r9
 80114d0:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80114d4:	464d      	mov	r5, r9
 80114d6:	e9cd cc04 	strd	ip, ip, [sp, #16]
 80114da:	e9cd cc06 	strd	ip, ip, [sp, #24]
 80114de:	f06f 2480 	mvn.w	r4, #2147516416	; 0x80008000
 80114e2:	f04f 2280 	mov.w	r2, #2147516416	; 0x80008000
 80114e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80114ea:	468e      	mov	lr, r1
 80114ec:	2d03      	cmp	r5, #3
 80114ee:	9446      	str	r4, [sp, #280]	; 0x118
 80114f0:	9236      	str	r2, [sp, #216]	; 0xd8
 80114f2:	f8ad 30dc 	strh.w	r3, [sp, #220]	; 0xdc
 80114f6:	f8cd a020 	str.w	sl, [sp, #32]
 80114fa:	4653      	mov	r3, sl
 80114fc:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8011500:	eeb0 7a67 	vmov.f32	s14, s15
 8011504:	f8ad 111c 	strh.w	r1, [sp, #284]	; 0x11c
 8011508:	9101      	str	r1, [sp, #4]
 801150a:	4688      	mov	r8, r1
 801150c:	bf28      	it	cs
 801150e:	2503      	movcs	r5, #3
 8011510:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 8011514:	9700      	str	r7, [sp, #0]
 8011516:	f8cd c00c 	str.w	ip, [sp, #12]
 801151a:	4662      	mov	r2, ip
 801151c:	4666      	mov	r6, ip
 801151e:	4664      	mov	r4, ip
 8011520:	4638      	mov	r0, r7
 8011522:	46f1      	mov	r9, lr
 8011524:	46ba      	mov	sl, r7
 8011526:	7819      	ldrb	r1, [r3, #0]
 8011528:	2900      	cmp	r1, #0
 801152a:	d047      	beq.n	80115bc <MEMS_runMagCal.constprop.14+0x1b4>
 801152c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8011530:	4297      	cmp	r7, r2
 8011532:	f106 0601 	add.w	r6, r6, #1
 8011536:	bfbc      	itt	lt
 8011538:	4617      	movlt	r7, r2
 801153a:	f04f 0c01 	movlt.w	ip, #1
 801153e:	4596      	cmp	lr, r2
 8011540:	b276      	sxtb	r6, r6
 8011542:	dd02      	ble.n	801154a <MEMS_runMagCal.constprop.14+0x142>
 8011544:	2101      	movs	r1, #1
 8011546:	4696      	mov	lr, r2
 8011548:	9104      	str	r1, [sp, #16]
 801154a:	ee07 2a90 	vmov	s15, r2
 801154e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011552:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8011556:	ee77 7ac5 	vsub.f32	s15, s15, s10
 801155a:	4290      	cmp	r0, r2
 801155c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8011560:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8011564:	da02      	bge.n	801156c <MEMS_runMagCal.constprop.14+0x164>
 8011566:	2101      	movs	r1, #1
 8011568:	4610      	mov	r0, r2
 801156a:	9105      	str	r1, [sp, #20]
 801156c:	4591      	cmp	r9, r2
 801156e:	dd02      	ble.n	8011576 <MEMS_runMagCal.constprop.14+0x16e>
 8011570:	2101      	movs	r1, #1
 8011572:	4691      	mov	r9, r2
 8011574:	9106      	str	r1, [sp, #24]
 8011576:	ee06 2a90 	vmov	s13, r2
 801157a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801157e:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8011582:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8011586:	4552      	cmp	r2, sl
 8011588:	ee66 6aa4 	vmul.f32	s13, s13, s9
 801158c:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8011590:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011594:	dd02      	ble.n	801159c <MEMS_runMagCal.constprop.14+0x194>
 8011596:	2101      	movs	r1, #1
 8011598:	4692      	mov	sl, r2
 801159a:	9107      	str	r1, [sp, #28]
 801159c:	4542      	cmp	r2, r8
 801159e:	da02      	bge.n	80115a6 <MEMS_runMagCal.constprop.14+0x19e>
 80115a0:	2101      	movs	r1, #1
 80115a2:	4690      	mov	r8, r2
 80115a4:	9103      	str	r1, [sp, #12]
 80115a6:	ee07 2a90 	vmov	s15, r2
 80115aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80115ae:	2201      	movs	r2, #1
 80115b0:	ee77 7ac3 	vsub.f32	s15, s15, s6
 80115b4:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80115b8:	eea7 7aa7 	vfma.f32	s14, s15, s15
 80115bc:	3401      	adds	r4, #1
 80115be:	b2a4      	uxth	r4, r4
 80115c0:	42ac      	cmp	r4, r5
 80115c2:	f103 0308 	add.w	r3, r3, #8
 80115c6:	d9ae      	bls.n	8011526 <MEMS_runMagCal.constprop.14+0x11e>
 80115c8:	9000      	str	r0, [sp, #0]
 80115ca:	9802      	ldr	r0, [sp, #8]
 80115cc:	f8cd 9004 	str.w	r9, [sp, #4]
 80115d0:	42a0      	cmp	r0, r4
 80115d2:	f8cd a008 	str.w	sl, [sp, #8]
 80115d6:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 80115da:	f8dd a020 	ldr.w	sl, [sp, #32]
 80115de:	f240 81bf 	bls.w	8011960 <MEMS_runMagCal.constprop.14+0x558>
 80115e2:	eba9 0904 	sub.w	r9, r9, r4
 80115e6:	fa14 f989 	uxtah	r9, r4, r9
 80115ea:	eb0a 04c4 	add.w	r4, sl, r4, lsl #3
 80115ee:	f1aa 0a16 	sub.w	sl, sl, #22
 80115f2:	eb0a 09c9 	add.w	r9, sl, r9, lsl #3
 80115f6:	3c1e      	subs	r4, #30
 80115f8:	f04f 0a00 	mov.w	sl, #0
 80115fc:	f8cd c020 	str.w	ip, [sp, #32]
 8011600:	7fa3      	ldrb	r3, [r4, #30]
 8011602:	2b00      	cmp	r3, #0
 8011604:	f000 8092 	beq.w	801172c <MEMS_runMagCal.constprop.14+0x324>
 8011608:	f9b4 1020 	ldrsh.w	r1, [r4, #32]
 801160c:	3601      	adds	r6, #1
 801160e:	42b9      	cmp	r1, r7
 8011610:	b276      	sxtb	r6, r6
 8011612:	dd02      	ble.n	801161a <MEMS_runMagCal.constprop.14+0x212>
 8011614:	2301      	movs	r3, #1
 8011616:	460f      	mov	r7, r1
 8011618:	9308      	str	r3, [sp, #32]
 801161a:	4571      	cmp	r1, lr
 801161c:	da02      	bge.n	8011624 <MEMS_runMagCal.constprop.14+0x21c>
 801161e:	2301      	movs	r3, #1
 8011620:	468e      	mov	lr, r1
 8011622:	9304      	str	r3, [sp, #16]
 8011624:	ee07 1a90 	vmov	s15, r1
 8011628:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801162c:	f9b4 2022 	ldrsh.w	r2, [r4, #34]	; 0x22
 8011630:	9b00      	ldr	r3, [sp, #0]
 8011632:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8011636:	429a      	cmp	r2, r3
 8011638:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801163c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8011640:	dd02      	ble.n	8011648 <MEMS_runMagCal.constprop.14+0x240>
 8011642:	2301      	movs	r3, #1
 8011644:	9200      	str	r2, [sp, #0]
 8011646:	9305      	str	r3, [sp, #20]
 8011648:	9b01      	ldr	r3, [sp, #4]
 801164a:	429a      	cmp	r2, r3
 801164c:	da02      	bge.n	8011654 <MEMS_runMagCal.constprop.14+0x24c>
 801164e:	2301      	movs	r3, #1
 8011650:	9201      	str	r2, [sp, #4]
 8011652:	9306      	str	r3, [sp, #24]
 8011654:	ee06 2a90 	vmov	s13, r2
 8011658:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801165c:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	; 0x24
 8011660:	9802      	ldr	r0, [sp, #8]
 8011662:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8011666:	4283      	cmp	r3, r0
 8011668:	ee66 6aa4 	vmul.f32	s13, s13, s9
 801166c:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8011670:	ee37 6a87 	vadd.f32	s12, s15, s14
 8011674:	dd02      	ble.n	801167c <MEMS_runMagCal.constprop.14+0x274>
 8011676:	2001      	movs	r0, #1
 8011678:	9302      	str	r3, [sp, #8]
 801167a:	9007      	str	r0, [sp, #28]
 801167c:	4543      	cmp	r3, r8
 801167e:	da02      	bge.n	8011686 <MEMS_runMagCal.constprop.14+0x27e>
 8011680:	2001      	movs	r0, #1
 8011682:	4698      	mov	r8, r3
 8011684:	9003      	str	r0, [sp, #12]
 8011686:	f9b4 c008 	ldrsh.w	ip, [r4, #8]
 801168a:	f9b4 5000 	ldrsh.w	r5, [r4]
 801168e:	f9b4 0018 	ldrsh.w	r0, [r4, #24]
 8011692:	1b49      	subs	r1, r1, r5
 8011694:	eba0 000c 	sub.w	r0, r0, ip
 8011698:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801169c:	ee07 0a90 	vmov	s15, r0
 80116a0:	f9b4 101a 	ldrsh.w	r1, [r4, #26]
 80116a4:	f9b4 c00a 	ldrsh.w	ip, [r4, #10]
 80116a8:	f9b4 5002 	ldrsh.w	r5, [r4, #2]
 80116ac:	f9b4 001c 	ldrsh.w	r0, [r4, #28]
 80116b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80116b4:	1b52      	subs	r2, r2, r5
 80116b6:	eba1 010c 	sub.w	r1, r1, ip
 80116ba:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 80116be:	eeb0 7ac7 	vabs.f32	s14, s14
 80116c2:	ee07 1a90 	vmov	s15, r1
 80116c6:	eefc 6ac7 	vcvt.u32.f32	s13, s14
 80116ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80116ce:	eeb8 7a66 	vcvt.f32.u32	s14, s13
 80116d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80116d6:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80116da:	eef0 7ae7 	vabs.f32	s15, s15
 80116de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80116e2:	1a80      	subs	r0, r0, r2
 80116e4:	ee07 3a90 	vmov	s15, r3
 80116e8:	1a59      	subs	r1, r3, r1
 80116ea:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 80116ee:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80116f2:	ee07 0a90 	vmov	s15, r0
 80116f6:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80116fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80116fe:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8011702:	eef0 7ae7 	vabs.f32	s15, s15
 8011706:	ee77 7a87 	vadd.f32	s15, s15, s14
 801170a:	ee76 6ac3 	vsub.f32	s13, s13, s6
 801170e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011712:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8011716:	eeb0 7a46 	vmov.f32	s14, s12
 801171a:	ee17 3a90 	vmov	r3, s15
 801171e:	eea6 7aa6 	vfma.f32	s14, s13, s13
 8011722:	459a      	cmp	sl, r3
 8011724:	f04f 0201 	mov.w	r2, #1
 8011728:	bf38      	it	cc
 801172a:	469a      	movcc	sl, r3
 801172c:	3408      	adds	r4, #8
 801172e:	45a1      	cmp	r9, r4
 8011730:	f47f af66 	bne.w	8011600 <MEMS_runMagCal.constprop.14+0x1f8>
 8011734:	f8dd c020 	ldr.w	ip, [sp, #32]
 8011738:	eddf 7a36 	vldr	s15, [pc, #216]	; 8011814 <MEMS_runMagCal.constprop.14+0x40c>
 801173c:	9b03      	ldr	r3, [sp, #12]
 801173e:	2a00      	cmp	r2, #0
 8011740:	bf08      	it	eq
 8011742:	eeb0 7a67 	vmoveq.f32	s14, s15
 8011746:	2b00      	cmp	r3, #0
 8011748:	f040 810d 	bne.w	8011966 <MEMS_runMagCal.constprop.14+0x55e>
 801174c:	9b07      	ldr	r3, [sp, #28]
 801174e:	b113      	cbz	r3, 8011756 <MEMS_runMagCal.constprop.14+0x34e>
 8011750:	9b02      	ldr	r3, [sp, #8]
 8011752:	f8ad 30dc 	strh.w	r3, [sp, #220]	; 0xdc
 8011756:	9b06      	ldr	r3, [sp, #24]
 8011758:	b113      	cbz	r3, 8011760 <MEMS_runMagCal.constprop.14+0x358>
 801175a:	9b01      	ldr	r3, [sp, #4]
 801175c:	f8ad 311a 	strh.w	r3, [sp, #282]	; 0x11a
 8011760:	9b05      	ldr	r3, [sp, #20]
 8011762:	b113      	cbz	r3, 801176a <MEMS_runMagCal.constprop.14+0x362>
 8011764:	9b00      	ldr	r3, [sp, #0]
 8011766:	f8ad 30da 	strh.w	r3, [sp, #218]	; 0xda
 801176a:	9b04      	ldr	r3, [sp, #16]
 801176c:	b10b      	cbz	r3, 8011772 <MEMS_runMagCal.constprop.14+0x36a>
 801176e:	f8ad e118 	strh.w	lr, [sp, #280]	; 0x118
 8011772:	f1bc 0f00 	cmp.w	ip, #0
 8011776:	f041 81fb 	bne.w	8012b70 <MEMS_runMagCal.constprop.14+0x1768>
 801177a:	4f25      	ldr	r7, [pc, #148]	; (8011810 <MEMS_runMagCal.constprop.14+0x408>)
 801177c:	2e00      	cmp	r6, #0
 801177e:	f000 80f5 	beq.w	801196c <MEMS_runMagCal.constprop.14+0x564>
 8011782:	f9bd 30d8 	ldrsh.w	r3, [sp, #216]	; 0xd8
 8011786:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801178a:	f280 81b1 	bge.w	8011af0 <MEMS_runMagCal.constprop.14+0x6e8>
 801178e:	f9bd 0118 	ldrsh.w	r0, [sp, #280]	; 0x118
 8011792:	f510 4f80 	cmn.w	r0, #16384	; 0x4000
 8011796:	f2c0 81ab 	blt.w	8011af0 <MEMS_runMagCal.constprop.14+0x6e8>
 801179a:	f9bd 30da 	ldrsh.w	r3, [sp, #218]	; 0xda
 801179e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80117a2:	f280 81a5 	bge.w	8011af0 <MEMS_runMagCal.constprop.14+0x6e8>
 80117a6:	f9bd 211a 	ldrsh.w	r2, [sp, #282]	; 0x11a
 80117aa:	f512 4f80 	cmn.w	r2, #16384	; 0x4000
 80117ae:	f2c0 819f 	blt.w	8011af0 <MEMS_runMagCal.constprop.14+0x6e8>
 80117b2:	f9bd 10dc 	ldrsh.w	r1, [sp, #220]	; 0xdc
 80117b6:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 80117ba:	f280 8199 	bge.w	8011af0 <MEMS_runMagCal.constprop.14+0x6e8>
 80117be:	f9bd 411c 	ldrsh.w	r4, [sp, #284]	; 0x11c
 80117c2:	f514 4f80 	cmn.w	r4, #16384	; 0x4000
 80117c6:	f2c0 8193 	blt.w	8011af0 <MEMS_runMagCal.constprop.14+0x6e8>
 80117ca:	ee07 6a90 	vmov	s15, r6
 80117ce:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80117d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80117d6:	eec7 7a06 	vdiv.f32	s15, s14, s12
 80117da:	1a9a      	subs	r2, r3, r2
 80117dc:	1b09      	subs	r1, r1, r4
 80117de:	428a      	cmp	r2, r1
 80117e0:	4613      	mov	r3, r2
 80117e2:	eba7 0700 	sub.w	r7, r7, r0
 80117e6:	bfb8      	it	lt
 80117e8:	460b      	movlt	r3, r1
 80117ea:	42bb      	cmp	r3, r7
 80117ec:	bfb8      	it	lt
 80117ee:	463b      	movlt	r3, r7
 80117f0:	ee86 6aa2 	vdiv.f32	s12, s13, s5
 80117f4:	eeb1 7ae7 	vsqrt.f32	s14, s15
 80117f8:	ee06 3a90 	vmov	s13, r3
 80117fc:	eddf 7a06 	vldr	s15, [pc, #24]	; 8011818 <MEMS_runMagCal.constprop.14+0x410>
 8011800:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8011804:	ee66 7a27 	vmul.f32	s15, s12, s15
 8011808:	e010      	b.n	801182c <MEMS_runMagCal.constprop.14+0x424>
 801180a:	bf00      	nop
 801180c:	20001830 	.word	0x20001830
 8011810:	ffff8000 	.word	0xffff8000
 8011814:	00000000 	.word	0x00000000
 8011818:	43020000 	.word	0x43020000
 801181c:	200013d0 	.word	0x200013d0
 8011820:	447a0000 	.word	0x447a0000
 8011824:	42c80000 	.word	0x42c80000
 8011828:	477fff00 	.word	0x477fff00
 801182c:	ee22 7a87 	vmul.f32	s14, s5, s14
 8011830:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011838:	f100 815a 	bmi.w	8011af0 <MEMS_runMagCal.constprop.14+0x6e8>
 801183c:	ee07 aa90 	vmov	s15, sl
 8011840:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011844:	ed5f 5a0a 	vldr	s11, [pc, #-40]	; 8011820 <MEMS_runMagCal.constprop.14+0x418>
 8011848:	ee67 2aa2 	vmul.f32	s5, s15, s5
 801184c:	eef4 2ae5 	vcmpe.f32	s5, s11
 8011850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011854:	f300 814c 	bgt.w	8011af0 <MEMS_runMagCal.constprop.14+0x6e8>
 8011858:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 801185c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8011860:	eeb4 6ae6 	vcmpe.f32	s12, s13
 8011864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011868:	f300 84ff 	bgt.w	801226a <MEMS_runMagCal.constprop.14+0xe62>
 801186c:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 8011870:	ee66 7a27 	vmul.f32	s15, s12, s15
 8011874:	eef4 6ae7 	vcmpe.f32	s13, s15
 8011878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801187c:	f340 84fb 	ble.w	8012276 <MEMS_runMagCal.constprop.14+0xe6e>
 8011880:	ee07 7a90 	vmov	s15, r7
 8011884:	ee36 6a06 	vadd.f32	s12, s12, s12
 8011888:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801188c:	eef4 7ac6 	vcmpe.f32	s15, s12
 8011890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011894:	f340 84ef 	ble.w	8012276 <MEMS_runMagCal.constprop.14+0xe6e>
 8011898:	ee07 2a90 	vmov	s15, r2
 801189c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80118a0:	eeb4 6ae7 	vcmpe.f32	s12, s15
 80118a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118a8:	f140 84e5 	bpl.w	8012276 <MEMS_runMagCal.constprop.14+0xe6e>
 80118ac:	ee07 1a90 	vmov	s15, r1
 80118b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80118b4:	f04f 0900 	mov.w	r9, #0
 80118b8:	eeb4 6ae7 	vcmpe.f32	s12, s15
 80118bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118c0:	bf4c      	ite	mi
 80118c2:	f04f 0a01 	movmi.w	sl, #1
 80118c6:	46ca      	movpl	sl, r9
 80118c8:	ed5f 6a2a 	vldr	s13, [pc, #-168]	; 8011824 <MEMS_runMagCal.constprop.14+0x41c>
 80118cc:	ed5f 7a2a 	vldr	s15, [pc, #-168]	; 8011828 <MEMS_runMagCal.constprop.14+0x420>
 80118d0:	f89b 54cc 	ldrb.w	r5, [fp, #1228]	; 0x4cc
 80118d4:	ee27 7a26 	vmul.f32	s14, s14, s13
 80118d8:	2300      	movs	r3, #0
 80118da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80118de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118e2:	bf88      	it	hi
 80118e4:	eeb0 7a67 	vmovhi.f32	s14, s15
 80118e8:	2d01      	cmp	r5, #1
 80118ea:	ed8d 7a0d 	vstr	s14, [sp, #52]	; 0x34
 80118ee:	9300      	str	r3, [sp, #0]
 80118f0:	d955      	bls.n	801199e <MEMS_runMagCal.constprop.14+0x596>
 80118f2:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80118f6:	edcd 7a01 	vstr	s15, [sp, #4]
 80118fa:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80118fe:	3bc8      	subs	r3, #200	; 0xc8
 8011900:	b29b      	uxth	r3, r3
 8011902:	f644 422c 	movw	r2, #19500	; 0x4c2c
 8011906:	4293      	cmp	r3, r2
 8011908:	d909      	bls.n	801191e <MEMS_runMagCal.constprop.14+0x516>
 801190a:	2500      	movs	r5, #0
 801190c:	23ff      	movs	r3, #255	; 0xff
 801190e:	f88b 54cc 	strb.w	r5, [fp, #1228]	; 0x4cc
 8011912:	f88b 5500 	strb.w	r5, [fp, #1280]	; 0x500
 8011916:	f88b 54b4 	strb.w	r5, [fp, #1204]	; 0x4b4
 801191a:	f88b 3502 	strb.w	r3, [fp, #1282]	; 0x502
 801191e:	9b00      	ldr	r3, [sp, #0]
 8011920:	2b02      	cmp	r3, #2
 8011922:	d13c      	bne.n	801199e <MEMS_runMagCal.constprop.14+0x596>
 8011924:	2200      	movs	r2, #0
 8011926:	23ff      	movs	r3, #255	; 0xff
 8011928:	9909      	ldr	r1, [sp, #36]	; 0x24
 801192a:	f8cb 1480 	str.w	r1, [fp, #1152]	; 0x480
 801192e:	f88b 2500 	strb.w	r2, [fp, #1280]	; 0x500
 8011932:	f88b 3502 	strb.w	r3, [fp, #1282]	; 0x502
 8011936:	f20d 5d6c 	addw	sp, sp, #1388	; 0x56c
 801193a:	ecbd 8b0c 	vpop	{d8-d13}
 801193e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011942:	f8db 1504 	ldr.w	r1, [fp, #1284]	; 0x504
 8011946:	428a      	cmp	r2, r1
 8011948:	f4ff ad8c 	bcc.w	8011464 <MEMS_runMagCal.constprop.14+0x5c>
 801194c:	f89b 3500 	ldrb.w	r3, [fp, #1280]	; 0x500
 8011950:	2b00      	cmp	r3, #0
 8011952:	f47f ada4 	bne.w	801149e <MEMS_runMagCal.constprop.14+0x96>
 8011956:	e592      	b.n	801147e <MEMS_runMagCal.constprop.14+0x76>
 8011958:	2301      	movs	r3, #1
 801195a:	f8cb 347c 	str.w	r3, [fp, #1148]	; 0x47c
 801195e:	e589      	b.n	8011474 <MEMS_runMagCal.constprop.14+0x6c>
 8011960:	f04f 0a00 	mov.w	sl, #0
 8011964:	e6e8      	b.n	8011738 <MEMS_runMagCal.constprop.14+0x330>
 8011966:	f8ad 811c 	strh.w	r8, [sp, #284]	; 0x11c
 801196a:	e6ef      	b.n	801174c <MEMS_runMagCal.constprop.14+0x344>
 801196c:	ed5f 6a53 	vldr	s13, [pc, #-332]	; 8011824 <MEMS_runMagCal.constprop.14+0x41c>
 8011970:	ed5f 7a53 	vldr	s15, [pc, #-332]	; 8011828 <MEMS_runMagCal.constprop.14+0x420>
 8011974:	f89b 54cc 	ldrb.w	r5, [fp, #1228]	; 0x4cc
 8011978:	ee27 7a26 	vmul.f32	s14, s14, s13
 801197c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011984:	bf88      	it	hi
 8011986:	eeb0 7a67 	vmovhi.f32	s14, s15
 801198a:	2d01      	cmp	r5, #1
 801198c:	ed8d 7a0d 	vstr	s14, [sp, #52]	; 0x34
 8011990:	bf88      	it	hi
 8011992:	9600      	strhi	r6, [sp, #0]
 8011994:	f200 80c2 	bhi.w	8011b1c <MEMS_runMagCal.constprop.14+0x714>
 8011998:	46b1      	mov	r9, r6
 801199a:	9600      	str	r6, [sp, #0]
 801199c:	46b2      	mov	sl, r6
 801199e:	f99b 3486 	ldrsb.w	r3, [fp, #1158]	; 0x486
 80119a2:	f89b 7485 	ldrb.w	r7, [fp, #1157]	; 0x485
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	f2c0 80c2 	blt.w	8011b30 <MEMS_runMagCal.constprop.14+0x728>
 80119ac:	3301      	adds	r3, #1
 80119ae:	fb93 f4f7 	sdiv	r4, r3, r7
 80119b2:	fb07 3314 	mls	r3, r7, r4, r3
 80119b6:	b25c      	sxtb	r4, r3
 80119b8:	f88b 4486 	strb.w	r4, [fp, #1158]	; 0x486
 80119bc:	f89b 6484 	ldrb.w	r6, [fp, #1156]	; 0x484
 80119c0:	3601      	adds	r6, #1
 80119c2:	42be      	cmp	r6, r7
 80119c4:	bfa8      	it	ge
 80119c6:	463e      	movge	r6, r7
 80119c8:	fa5f f886 	uxtb.w	r8, r6
 80119cc:	ee17 0a10 	vmov	r0, s14
 80119d0:	f88b 8484 	strb.w	r8, [fp, #1156]	; 0x484
 80119d4:	f009 fb68 	bl	801b0a8 <roundf>
 80119d8:	ee07 0a90 	vmov	s15, r0
 80119dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80119e0:	eb0b 0344 	add.w	r3, fp, r4, lsl #1
 80119e4:	ee17 0a90 	vmov	r0, s15
 80119e8:	f8a3 0488 	strh.w	r0, [r3, #1160]	; 0x488
 80119ec:	9b00      	ldr	r3, [sp, #0]
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d198      	bne.n	8011924 <MEMS_runMagCal.constprop.14+0x51c>
 80119f2:	f8db 3480 	ldr.w	r3, [fp, #1152]	; 0x480
 80119f6:	b123      	cbz	r3, 8011a02 <MEMS_runMagCal.constprop.14+0x5fa>
 80119f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80119fa:	f503 6296 	add.w	r2, r3, #1200	; 0x4b0
 80119fe:	4291      	cmp	r1, r2
 8011a00:	d399      	bcc.n	8011936 <MEMS_runMagCal.constprop.14+0x52e>
 8011a02:	f1b9 0f00 	cmp.w	r9, #0
 8011a06:	d196      	bne.n	8011936 <MEMS_runMagCal.constprop.14+0x52e>
 8011a08:	1eaa      	subs	r2, r5, #2
 8011a0a:	2a01      	cmp	r2, #1
 8011a0c:	f240 8363 	bls.w	80120d6 <MEMS_runMagCal.constprop.14+0xcce>
 8011a10:	4be3      	ldr	r3, [pc, #908]	; (8011da0 <MEMS_runMagCal.constprop.14+0x998>)
 8011a12:	eddf 7ae4 	vldr	s15, [pc, #912]	; 8011da4 <MEMS_runMagCal.constprop.14+0x99c>
 8011a16:	ed93 8a01 	vldr	s16, [r3, #4]
 8011a1a:	f8bd 4060 	ldrh.w	r4, [sp, #96]	; 0x60
 8011a1e:	f8db 3504 	ldr.w	r3, [fp, #1284]	; 0x504
 8011a22:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011a24:	f9bb 0462 	ldrsh.w	r0, [fp, #1122]	; 0x462
 8011a28:	f89b 5500 	ldrb.w	r5, [fp, #1280]	; 0x500
 8011a2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011a30:	eec7 8a08 	vdiv.f32	s17, s14, s16
 8011a34:	f503 511c 	add.w	r1, r3, #9984	; 0x2700
 8011a38:	3c01      	subs	r4, #1
 8011a3a:	fb00 2404 	mla	r4, r0, r4, r2
 8011a3e:	3110      	adds	r1, #16
 8011a40:	42a1      	cmp	r1, r4
 8011a42:	eeb0 9a08 	vmov.f32	s18, #8	; 0x40400000  3.0
 8011a46:	ee28 9a89 	vmul.f32	s18, s17, s18
 8011a4a:	ee69 7a27 	vmul.f32	s15, s18, s15
 8011a4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011a52:	ee17 2a90 	vmov	r2, s15
 8011a56:	fa1f f982 	uxth.w	r9, r2
 8011a5a:	d27f      	bcs.n	8011b5c <MEMS_runMagCal.constprop.14+0x754>
 8011a5c:	f242 3228 	movw	r2, #9000	; 0x2328
 8011a60:	4294      	cmp	r4, r2
 8011a62:	f89b 0501 	ldrb.w	r0, [fp, #1281]	; 0x501
 8011a66:	f99b 2502 	ldrsb.w	r2, [fp, #1282]	; 0x502
 8011a6a:	bf1a      	itte	ne
 8011a6c:	f5a4 540c 	subne.w	r4, r4, #8960	; 0x2300
 8011a70:	3c28      	subne	r4, #40	; 0x28
 8011a72:	2400      	moveq	r4, #0
 8011a74:	42a8      	cmp	r0, r5
 8011a76:	f102 0201 	add.w	r2, r2, #1
 8011a7a:	f000 869f 	beq.w	80127bc <MEMS_runMagCal.constprop.14+0x13b4>
 8011a7e:	1b52      	subs	r2, r2, r5
 8011a80:	fb92 f1f0 	sdiv	r1, r2, r0
 8011a84:	fb00 2211 	mls	r2, r0, r1, r2
 8011a88:	2a00      	cmp	r2, #0
 8011a8a:	b216      	sxth	r6, r2
 8011a8c:	bfbc      	itt	lt
 8011a8e:	1812      	addlt	r2, r2, r0
 8011a90:	b216      	sxthlt	r6, r2
 8011a92:	b22f      	sxth	r7, r5
 8011a94:	2f00      	cmp	r7, #0
 8011a96:	d05e      	beq.n	8011b56 <MEMS_runMagCal.constprop.14+0x74e>
 8011a98:	2200      	movs	r2, #0
 8011a9a:	1b1b      	subs	r3, r3, r4
 8011a9c:	b299      	uxth	r1, r3
 8011a9e:	9201      	str	r2, [sp, #4]
 8011aa0:	4696      	mov	lr, r2
 8011aa2:	46ac      	mov	ip, r5
 8011aa4:	9402      	str	r4, [sp, #8]
 8011aa6:	e003      	b.n	8011ab0 <MEMS_runMagCal.constprop.14+0x6a8>
 8011aa8:	3201      	adds	r2, #1
 8011aaa:	b213      	sxth	r3, r2
 8011aac:	429f      	cmp	r7, r3
 8011aae:	dd43      	ble.n	8011b38 <MEMS_runMagCal.constprop.14+0x730>
 8011ab0:	eb06 0802 	add.w	r8, r6, r2
 8011ab4:	fb98 f3f0 	sdiv	r3, r8, r0
 8011ab8:	fb00 8313 	mls	r3, r0, r3, r8
 8011abc:	b2db      	uxtb	r3, r3
 8011abe:	3304      	adds	r3, #4
 8011ac0:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8011ac4:	f8b3 8500 	ldrh.w	r8, [r3, #1280]	; 0x500
 8011ac8:	4488      	add	r8, r1
 8011aca:	fa0f f888 	sxth.w	r8, r8
 8011ace:	f1b8 0f00 	cmp.w	r8, #0
 8011ad2:	f8a3 8500 	strh.w	r8, [r3, #1280]	; 0x500
 8011ad6:	dae7      	bge.n	8011aa8 <MEMS_runMagCal.constprop.14+0x6a0>
 8011ad8:	f10c 33ff 	add.w	r3, ip, #4294967295
 8011adc:	f1bc 0f00 	cmp.w	ip, #0
 8011ae0:	f000 82f6 	beq.w	80120d0 <MEMS_runMagCal.constprop.14+0xcc8>
 8011ae4:	2401      	movs	r4, #1
 8011ae6:	9401      	str	r4, [sp, #4]
 8011ae8:	fa5f fc83 	uxtb.w	ip, r3
 8011aec:	46a6      	mov	lr, r4
 8011aee:	e7db      	b.n	8011aa8 <MEMS_runMagCal.constprop.14+0x6a0>
 8011af0:	eddf 6aad 	vldr	s13, [pc, #692]	; 8011da8 <MEMS_runMagCal.constprop.14+0x9a0>
 8011af4:	eddf 7aad 	vldr	s15, [pc, #692]	; 8011dac <MEMS_runMagCal.constprop.14+0x9a4>
 8011af8:	f89b 54cc 	ldrb.w	r5, [fp, #1228]	; 0x4cc
 8011afc:	ee27 7a26 	vmul.f32	s14, s14, s13
 8011b00:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011b04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b08:	bf88      	it	hi
 8011b0a:	eeb0 7a67 	vmovhi.f32	s14, s15
 8011b0e:	2d01      	cmp	r5, #1
 8011b10:	ed8d 7a0d 	vstr	s14, [sp, #52]	; 0x34
 8011b14:	f67f af06 	bls.w	8011924 <MEMS_runMagCal.constprop.14+0x51c>
 8011b18:	2302      	movs	r3, #2
 8011b1a:	9300      	str	r3, [sp, #0]
 8011b1c:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8011b20:	f04f 0a00 	mov.w	sl, #0
 8011b24:	edcd 7a01 	vstr	s15, [sp, #4]
 8011b28:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8011b2c:	46d1      	mov	r9, sl
 8011b2e:	e6e6      	b.n	80118fe <MEMS_runMagCal.constprop.14+0x4f6>
 8011b30:	2400      	movs	r4, #0
 8011b32:	f88b 4486 	strb.w	r4, [fp, #1158]	; 0x486
 8011b36:	e741      	b.n	80119bc <MEMS_runMagCal.constprop.14+0x5b4>
 8011b38:	e9dd 3401 	ldrd	r3, r4, [sp, #4]
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	f040 8735 	bne.w	80129ac <MEMS_runMagCal.constprop.14+0x15a4>
 8011b42:	f1be 0f00 	cmp.w	lr, #0
 8011b46:	d006      	beq.n	8011b56 <MEMS_runMagCal.constprop.14+0x74e>
 8011b48:	eeb0 0a49 	vmov.f32	s0, s18
 8011b4c:	4648      	mov	r0, r9
 8011b4e:	f7fe fe1f 	bl	8010790 <MEMS_updateMagBufferIndex.constprop.24>
 8011b52:	f89b 5500 	ldrb.w	r5, [fp, #1280]	; 0x500
 8011b56:	f8cb 4504 	str.w	r4, [fp, #1284]	; 0x504
 8011b5a:	4623      	mov	r3, r4
 8011b5c:	2d00      	cmp	r5, #0
 8011b5e:	f000 82fa 	beq.w	8012156 <MEMS_runMagCal.constprop.14+0xd4e>
 8011b62:	f99b 2502 	ldrsb.w	r2, [fp, #1282]	; 0x502
 8011b66:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8011b68:	eb0b 02c2 	add.w	r2, fp, r2, lsl #3
 8011b6c:	f9b2 2520 	ldrsh.w	r2, [r2, #1312]	; 0x520
 8011b70:	f502 529c 	add.w	r2, r2, #4992	; 0x1380
 8011b74:	3208      	adds	r2, #8
 8011b76:	4413      	add	r3, r2
 8011b78:	4299      	cmp	r1, r3
 8011b7a:	f200 81e7 	bhi.w	8011f4c <MEMS_runMagCal.constprop.14+0xb44>
 8011b7e:	f1ba 0f00 	cmp.w	sl, #0
 8011b82:	d104      	bne.n	8011b8e <MEMS_runMagCal.constprop.14+0x786>
 8011b84:	f89b 3500 	ldrb.w	r3, [fp, #1280]	; 0x500
 8011b88:	2b0a      	cmp	r3, #10
 8011b8a:	f240 82e8 	bls.w	801215e <MEMS_runMagCal.constprop.14+0xd56>
 8011b8e:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 8011b92:	9301      	str	r3, [sp, #4]
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	f000 82e2 	beq.w	801215e <MEMS_runMagCal.constprop.14+0xd56>
 8011b9a:	eddf 6a85 	vldr	s13, [pc, #532]	; 8011db0 <MEMS_runMagCal.constprop.14+0x9a8>
 8011b9e:	ed9f 7a85 	vldr	s14, [pc, #532]	; 8011db4 <MEMS_runMagCal.constprop.14+0x9ac>
 8011ba2:	f8cd a018 	str.w	sl, [sp, #24]
 8011ba6:	ee29 aa09 	vmul.f32	s20, s18, s18
 8011baa:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8011bae:	eef7 9a08 	vmov.f32	s19, #120	; 0x3fc00000  1.5
 8011bb2:	2300      	movs	r3, #0
 8011bb4:	ee28 8a26 	vmul.f32	s16, s16, s13
 8011bb8:	ee2a aa07 	vmul.f32	s20, s20, s14
 8011bbc:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8011bc0:	ee69 9a29 	vmul.f32	s19, s18, s19
 8011bc4:	9304      	str	r3, [sp, #16]
 8011bc6:	461a      	mov	r2, r3
 8011bc8:	461c      	mov	r4, r3
 8011bca:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011bcc:	f813 1034 	ldrb.w	r1, [r3, r4, lsl #3]
 8011bd0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011bd4:	b2a4      	uxth	r4, r4
 8011bd6:	2900      	cmp	r1, #0
 8011bd8:	f000 8123 	beq.w	8011e22 <MEMS_runMagCal.constprop.14+0xa1a>
 8011bdc:	f9b3 5002 	ldrsh.w	r5, [r3, #2]
 8011be0:	f9b3 6004 	ldrsh.w	r6, [r3, #4]
 8011be4:	f9b3 7006 	ldrsh.w	r7, [r3, #6]
 8011be8:	ee07 5a90 	vmov	s15, r5
 8011bec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011bf0:	eef0 7ae7 	vabs.f32	s15, s15
 8011bf4:	eef4 7ae8 	vcmpe.f32	s15, s17
 8011bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bfc:	d516      	bpl.n	8011c2c <MEMS_runMagCal.constprop.14+0x824>
 8011bfe:	ee07 6a90 	vmov	s15, r6
 8011c02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011c06:	eef0 7ae7 	vabs.f32	s15, s15
 8011c0a:	eef4 8ae7 	vcmpe.f32	s17, s15
 8011c0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c12:	dd0b      	ble.n	8011c2c <MEMS_runMagCal.constprop.14+0x824>
 8011c14:	ee07 7a90 	vmov	s15, r7
 8011c18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011c1c:	eef0 7ae7 	vabs.f32	s15, s15
 8011c20:	eef4 8ae7 	vcmpe.f32	s17, s15
 8011c24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c28:	f300 80fb 	bgt.w	8011e22 <MEMS_runMagCal.constprop.14+0xa1a>
 8011c2c:	f89b 8500 	ldrb.w	r8, [fp, #1280]	; 0x500
 8011c30:	f1b8 0f00 	cmp.w	r8, #0
 8011c34:	f000 819a 	beq.w	8011f6c <MEMS_runMagCal.constprop.14+0xb64>
 8011c38:	f9bb 281a 	ldrsh.w	r2, [fp, #2074]	; 0x81a
 8011c3c:	f9bb 1818 	ldrsh.w	r1, [fp, #2072]	; 0x818
 8011c40:	f9bb 381c 	ldrsh.w	r3, [fp, #2076]	; 0x81c
 8011c44:	1b92      	subs	r2, r2, r6
 8011c46:	fb02 f002 	mul.w	r0, r2, r2
 8011c4a:	1b4a      	subs	r2, r1, r5
 8011c4c:	fb02 0202 	mla	r2, r2, r2, r0
 8011c50:	1bdb      	subs	r3, r3, r7
 8011c52:	fb03 2303 	mla	r3, r3, r3, r2
 8011c56:	ee07 3a90 	vmov	s15, r3
 8011c5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011c5e:	eeb4 aae7 	vcmpe.f32	s20, s15
 8011c62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c66:	f300 80dc 	bgt.w	8011e22 <MEMS_runMagCal.constprop.14+0xa1a>
 8011c6a:	fb95 f3f9 	sdiv	r3, r5, r9
 8011c6e:	fb09 5313 	mls	r3, r9, r3, r5
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	bfb8      	it	lt
 8011c76:	444b      	addlt	r3, r9
 8011c78:	b21b      	sxth	r3, r3
 8011c7a:	ee07 3a90 	vmov	s15, r3
 8011c7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011c82:	ee67 7a88 	vmul.f32	s15, s15, s16
 8011c86:	ee17 0a90 	vmov	r0, s15
 8011c8a:	f009 fa0d 	bl	801b0a8 <roundf>
 8011c8e:	fb96 f3f9 	sdiv	r3, r6, r9
 8011c92:	ee07 0a90 	vmov	s15, r0
 8011c96:	fb09 6313 	mls	r3, r9, r3, r6
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	bfb8      	it	lt
 8011c9e:	444b      	addlt	r3, r9
 8011ca0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011ca4:	b21b      	sxth	r3, r3
 8011ca6:	edcd 7a02 	vstr	s15, [sp, #8]
 8011caa:	ee07 3a90 	vmov	s15, r3
 8011cae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011cb2:	f89d a008 	ldrb.w	sl, [sp, #8]
 8011cb6:	ee67 7a88 	vmul.f32	s15, s15, s16
 8011cba:	ee17 0a90 	vmov	r0, s15
 8011cbe:	f009 f9f3 	bl	801b0a8 <roundf>
 8011cc2:	fb97 f3f9 	sdiv	r3, r7, r9
 8011cc6:	ee07 0a90 	vmov	s15, r0
 8011cca:	fb09 7313 	mls	r3, r9, r3, r7
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	bfb8      	it	lt
 8011cd2:	444b      	addlt	r3, r9
 8011cd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011cd8:	b21b      	sxth	r3, r3
 8011cda:	edcd 7a02 	vstr	s15, [sp, #8]
 8011cde:	ee07 3a90 	vmov	s15, r3
 8011ce2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011ce6:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8011cea:	9202      	str	r2, [sp, #8]
 8011cec:	ee67 7a88 	vmul.f32	s15, s15, s16
 8011cf0:	ee17 0a90 	vmov	r0, s15
 8011cf4:	f009 f9d8 	bl	801b0a8 <roundf>
 8011cf8:	ee07 0a90 	vmov	s15, r0
 8011cfc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011d00:	f1ba 0f1f 	cmp.w	sl, #31
 8011d04:	edcd 7a03 	vstr	s15, [sp, #12]
 8011d08:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8011d0c:	f8db 2508 	ldr.w	r2, [fp, #1288]	; 0x508
 8011d10:	f8db 350c 	ldr.w	r3, [fp, #1292]	; 0x50c
 8011d14:	9103      	str	r1, [sp, #12]
 8011d16:	f240 81cb 	bls.w	80120b0 <MEMS_runMagCal.constprop.14+0xca8>
 8011d1a:	f1aa 0320 	sub.w	r3, sl, #32
 8011d1e:	2101      	movs	r1, #1
 8011d20:	fa01 f303 	lsl.w	r3, r1, r3
 8011d24:	4013      	ands	r3, r2
 8011d26:	9802      	ldr	r0, [sp, #8]
 8011d28:	f8db 1510 	ldr.w	r1, [fp, #1296]	; 0x510
 8011d2c:	f8db 2514 	ldr.w	r2, [fp, #1300]	; 0x514
 8011d30:	281f      	cmp	r0, #31
 8011d32:	f240 81c6 	bls.w	80120c2 <MEMS_runMagCal.constprop.14+0xcba>
 8011d36:	f1a0 0220 	sub.w	r2, r0, #32
 8011d3a:	2001      	movs	r0, #1
 8011d3c:	fa00 f202 	lsl.w	r2, r0, r2
 8011d40:	ea02 0e01 	and.w	lr, r2, r1
 8011d44:	9a03      	ldr	r2, [sp, #12]
 8011d46:	f8db 151c 	ldr.w	r1, [fp, #1308]	; 0x51c
 8011d4a:	f8db 0518 	ldr.w	r0, [fp, #1304]	; 0x518
 8011d4e:	2a1f      	cmp	r2, #31
 8011d50:	f240 81b3 	bls.w	80120ba <MEMS_runMagCal.constprop.14+0xcb2>
 8011d54:	f1a2 0020 	sub.w	r0, r2, #32
 8011d58:	2201      	movs	r2, #1
 8011d5a:	fa02 f000 	lsl.w	r0, r2, r0
 8011d5e:	4001      	ands	r1, r0
 8011d60:	2900      	cmp	r1, #0
 8011d62:	f040 8199 	bne.w	8012098 <MEMS_runMagCal.constprop.14+0xc90>
 8011d66:	f99b 1502 	ldrsb.w	r1, [fp, #1282]	; 0x502
 8011d6a:	f89b c501 	ldrb.w	ip, [fp, #1281]	; 0x501
 8011d6e:	1c4a      	adds	r2, r1, #1
 8011d70:	9205      	str	r2, [sp, #20]
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	f000 820b 	beq.w	801218e <MEMS_runMagCal.constprop.14+0xd86>
 8011d78:	45e0      	cmp	r8, ip
 8011d7a:	9b05      	ldr	r3, [sp, #20]
 8011d7c:	f000 84f9 	beq.w	8012772 <MEMS_runMagCal.constprop.14+0x136a>
 8011d80:	eba3 0208 	sub.w	r2, r3, r8
 8011d84:	fb92 f3fc 	sdiv	r3, r2, ip
 8011d88:	fb0c 2313 	mls	r3, ip, r3, r2
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	fa0f fe83 	sxth.w	lr, r3
 8011d92:	bfbc      	itt	lt
 8011d94:	4463      	addlt	r3, ip
 8011d96:	fa0f fe83 	sxthlt.w	lr, r3
 8011d9a:	2200      	movs	r2, #0
 8011d9c:	e011      	b.n	8011dc2 <MEMS_runMagCal.constprop.14+0x9ba>
 8011d9e:	bf00      	nop
 8011da0:	20001830 	.word	0x20001830
 8011da4:	427c0000 	.word	0x427c0000
 8011da8:	42c80000 	.word	0x42c80000
 8011dac:	477fff00 	.word	0x477fff00
 8011db0:	3eaaaaab 	.word	0x3eaaaaab
 8011db4:	3f666666 	.word	0x3f666666
 8011db8:	3a83126f 	.word	0x3a83126f
 8011dbc:	4598      	cmp	r8, r3
 8011dbe:	f240 81ea 	bls.w	8012196 <MEMS_runMagCal.constprop.14+0xd8e>
 8011dc2:	eb0e 0102 	add.w	r1, lr, r2
 8011dc6:	fb91 f3fc 	sdiv	r3, r1, ip
 8011dca:	fb0c 1313 	mls	r3, ip, r3, r1
 8011dce:	b2db      	uxtb	r3, r3
 8011dd0:	3304      	adds	r3, #4
 8011dd2:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8011dd6:	3201      	adds	r2, #1
 8011dd8:	f9b3 0502 	ldrsh.w	r0, [r3, #1282]	; 0x502
 8011ddc:	f9b3 1504 	ldrsh.w	r1, [r3, #1284]	; 0x504
 8011de0:	f9b3 3506 	ldrsh.w	r3, [r3, #1286]	; 0x506
 8011de4:	1a28      	subs	r0, r5, r0
 8011de6:	1a71      	subs	r1, r6, r1
 8011de8:	ee06 0a10 	vmov	s12, r0
 8011dec:	ee07 1a10 	vmov	s14, r1
 8011df0:	1afb      	subs	r3, r7, r3
 8011df2:	ee07 3a90 	vmov	s15, r3
 8011df6:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8011dfa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011dfe:	eeb0 6ac6 	vabs.f32	s12, s12
 8011e02:	eeb0 7ac7 	vabs.f32	s14, s14
 8011e06:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8011e0a:	ee36 7a07 	vadd.f32	s14, s12, s14
 8011e0e:	eef0 7ae6 	vabs.f32	s15, s13
 8011e12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011e16:	b2d3      	uxtb	r3, r2
 8011e18:	eef4 9ae7 	vcmpe.f32	s19, s15
 8011e1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e20:	ddcc      	ble.n	8011dbc <MEMS_runMagCal.constprop.14+0x9b4>
 8011e22:	3401      	adds	r4, #1
 8011e24:	9b01      	ldr	r3, [sp, #4]
 8011e26:	b224      	sxth	r4, r4
 8011e28:	429c      	cmp	r4, r3
 8011e2a:	4622      	mov	r2, r4
 8011e2c:	f6ff aecd 	blt.w	8011bca <MEMS_runMagCal.constprop.14+0x7c2>
 8011e30:	f8dd a018 	ldr.w	sl, [sp, #24]
 8011e34:	9a04      	ldr	r2, [sp, #16]
 8011e36:	f89b 3474 	ldrb.w	r3, [fp, #1140]	; 0x474
 8011e3a:	431a      	orrs	r2, r3
 8011e3c:	f88b 2474 	strb.w	r2, [fp, #1140]	; 0x474
 8011e40:	2a00      	cmp	r2, #0
 8011e42:	f43f ad78 	beq.w	8011936 <MEMS_runMagCal.constprop.14+0x52e>
 8011e46:	f89b 3500 	ldrb.w	r3, [fp, #1280]	; 0x500
 8011e4a:	9301      	str	r3, [sp, #4]
 8011e4c:	2b19      	cmp	r3, #25
 8011e4e:	f67f ad72 	bls.w	8011936 <MEMS_runMagCal.constprop.14+0x52e>
 8011e52:	f8db 347c 	ldr.w	r3, [fp, #1148]	; 0x47c
 8011e56:	9302      	str	r3, [sp, #8]
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	f000 8482 	beq.w	8012762 <MEMS_runMagCal.constprop.14+0x135a>
 8011e5e:	f8db 3478 	ldr.w	r3, [fp, #1144]	; 0x478
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	f000 847d 	beq.w	8012762 <MEMS_runMagCal.constprop.14+0x135a>
 8011e68:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 8011e6c:	ed5f 6a2e 	vldr	s13, [pc, #-184]	; 8011db8 <MEMS_runMagCal.constprop.14+0x9b0>
 8011e70:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8011e74:	ee07 3a90 	vmov	s15, r3
 8011e78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011e7c:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8011e80:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8011e84:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011e88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e8c:	f200 8469 	bhi.w	8012762 <MEMS_runMagCal.constprop.14+0x135a>
 8011e90:	f1ba 0f00 	cmp.w	sl, #0
 8011e94:	f43f ad4f 	beq.w	8011936 <MEMS_runMagCal.constprop.14+0x52e>
 8011e98:	eddd 7a02 	vldr	s15, [sp, #8]
 8011e9c:	ed5f 6a3a 	vldr	s13, [pc, #-232]	; 8011db8 <MEMS_runMagCal.constprop.14+0x9b0>
 8011ea0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011ea4:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8011ea8:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8011eac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011eb4:	bf4c      	ite	mi
 8011eb6:	2301      	movmi	r3, #1
 8011eb8:	2300      	movpl	r3, #0
 8011eba:	9303      	str	r3, [sp, #12]
 8011ebc:	49e2      	ldr	r1, [pc, #904]	; (8012248 <MEMS_runMagCal.constprop.14+0xe40>)
 8011ebe:	f8db 9508 	ldr.w	r9, [fp, #1288]	; 0x508
 8011ec2:	edd1 8a01 	vldr	s17, [r1, #4]
 8011ec6:	f8db 850c 	ldr.w	r8, [fp, #1292]	; 0x50c
 8011eca:	f8db e514 	ldr.w	lr, [fp, #1300]	; 0x514
 8011ece:	f8db c518 	ldr.w	ip, [fp, #1304]	; 0x518
 8011ed2:	f8db 7510 	ldr.w	r7, [fp, #1296]	; 0x510
 8011ed6:	f8db 651c 	ldr.w	r6, [fp, #1308]	; 0x51c
 8011eda:	2200      	movs	r2, #0
 8011edc:	9229      	str	r2, [sp, #164]	; 0xa4
 8011ede:	4614      	mov	r4, r2
 8011ee0:	4610      	mov	r0, r2
 8011ee2:	4611      	mov	r1, r2
 8011ee4:	e9cd 222a 	strd	r2, r2, [sp, #168]	; 0xa8
 8011ee8:	e9cd 222c 	strd	r2, r2, [sp, #176]	; 0xb0
 8011eec:	2501      	movs	r5, #1
 8011eee:	e019      	b.n	8011f24 <MEMS_runMagCal.constprop.14+0xb1c>
 8011ef0:	f1a1 0320 	sub.w	r3, r1, #32
 8011ef4:	fa05 f303 	lsl.w	r3, r5, r3
 8011ef8:	ea19 0f03 	tst.w	r9, r3
 8011efc:	ea07 0a03 	and.w	sl, r7, r3
 8011f00:	d030      	beq.n	8011f64 <MEMS_runMagCal.constprop.14+0xb5c>
 8011f02:	3001      	adds	r0, #1
 8011f04:	b2c0      	uxtb	r0, r0
 8011f06:	f1ba 0f00 	cmp.w	sl, #0
 8011f0a:	d001      	beq.n	8011f10 <MEMS_runMagCal.constprop.14+0xb08>
 8011f0c:	3401      	adds	r4, #1
 8011f0e:	b2e4      	uxtb	r4, r4
 8011f10:	4033      	ands	r3, r6
 8011f12:	3101      	adds	r1, #1
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	bf0c      	ite	eq
 8011f18:	4613      	moveq	r3, r2
 8011f1a:	1c53      	addne	r3, r2, #1
 8011f1c:	2940      	cmp	r1, #64	; 0x40
 8011f1e:	b2da      	uxtb	r2, r3
 8011f20:	f000 81ae 	beq.w	8012280 <MEMS_runMagCal.constprop.14+0xe78>
 8011f24:	291f      	cmp	r1, #31
 8011f26:	d8e3      	bhi.n	8011ef0 <MEMS_runMagCal.constprop.14+0xae8>
 8011f28:	fa05 f301 	lsl.w	r3, r5, r1
 8011f2c:	ea08 0a03 	and.w	sl, r8, r3
 8011f30:	f1ba 0f00 	cmp.w	sl, #0
 8011f34:	bf18      	it	ne
 8011f36:	3001      	addne	r0, #1
 8011f38:	ea1e 0f03 	tst.w	lr, r3
 8011f3c:	bf18      	it	ne
 8011f3e:	3401      	addne	r4, #1
 8011f40:	b2c0      	uxtb	r0, r0
 8011f42:	bf18      	it	ne
 8011f44:	b2e4      	uxtbne	r4, r4
 8011f46:	ea0c 0303 	and.w	r3, ip, r3
 8011f4a:	e7e2      	b.n	8011f12 <MEMS_runMagCal.constprop.14+0xb0a>
 8011f4c:	2200      	movs	r2, #0
 8011f4e:	23ff      	movs	r3, #255	; 0xff
 8011f50:	eeb0 0a49 	vmov.f32	s0, s18
 8011f54:	4648      	mov	r0, r9
 8011f56:	f88b 2500 	strb.w	r2, [fp, #1280]	; 0x500
 8011f5a:	f88b 3502 	strb.w	r3, [fp, #1282]	; 0x502
 8011f5e:	f7fe fc17 	bl	8010790 <MEMS_updateMagBufferIndex.constprop.24>
 8011f62:	e60c      	b.n	8011b7e <MEMS_runMagCal.constprop.14+0x776>
 8011f64:	f1ba 0f00 	cmp.w	sl, #0
 8011f68:	d1d0      	bne.n	8011f0c <MEMS_runMagCal.constprop.14+0xb04>
 8011f6a:	e7d1      	b.n	8011f10 <MEMS_runMagCal.constprop.14+0xb08>
 8011f6c:	f9bb 0462 	ldrsh.w	r0, [fp, #1122]	; 0x462
 8011f70:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011f72:	fb95 f1f9 	sdiv	r1, r5, r9
 8011f76:	fb02 3200 	mla	r2, r2, r0, r3
 8011f7a:	fb09 5311 	mls	r3, r9, r1, r5
 8011f7e:	2b00      	cmp	r3, #0
 8011f80:	bfb8      	it	lt
 8011f82:	444b      	addlt	r3, r9
 8011f84:	b21b      	sxth	r3, r3
 8011f86:	ee07 3a90 	vmov	s15, r3
 8011f8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011f8e:	f04f 0c01 	mov.w	ip, #1
 8011f92:	ee67 7a88 	vmul.f32	s15, s15, s16
 8011f96:	f88b c500 	strb.w	ip, [fp, #1280]	; 0x500
 8011f9a:	ee17 0a90 	vmov	r0, s15
 8011f9e:	f8cb 2504 	str.w	r2, [fp, #1284]	; 0x504
 8011fa2:	f8ab 5522 	strh.w	r5, [fp, #1314]	; 0x522
 8011fa6:	f8ab 5818 	strh.w	r5, [fp, #2072]	; 0x818
 8011faa:	f8ab 6524 	strh.w	r6, [fp, #1316]	; 0x524
 8011fae:	f8ab 681a 	strh.w	r6, [fp, #2074]	; 0x81a
 8011fb2:	f8ab 7526 	strh.w	r7, [fp, #1318]	; 0x526
 8011fb6:	f8ab 781c 	strh.w	r7, [fp, #2076]	; 0x81c
 8011fba:	f88b 8502 	strb.w	r8, [fp, #1282]	; 0x502
 8011fbe:	f8ab 8520 	strh.w	r8, [fp, #1312]	; 0x520
 8011fc2:	f009 f871 	bl	801b0a8 <roundf>
 8011fc6:	fb96 f3f9 	sdiv	r3, r6, r9
 8011fca:	ee07 0a90 	vmov	s15, r0
 8011fce:	fb09 6613 	mls	r6, r9, r3, r6
 8011fd2:	2e00      	cmp	r6, #0
 8011fd4:	bfb8      	it	lt
 8011fd6:	444e      	addlt	r6, r9
 8011fd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011fdc:	b233      	sxth	r3, r6
 8011fde:	edcd 7a02 	vstr	s15, [sp, #8]
 8011fe2:	ee07 3a90 	vmov	s15, r3
 8011fe6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011fea:	f89d 5008 	ldrb.w	r5, [sp, #8]
 8011fee:	ee67 7a88 	vmul.f32	s15, s15, s16
 8011ff2:	ee17 0a90 	vmov	r0, s15
 8011ff6:	f009 f857 	bl	801b0a8 <roundf>
 8011ffa:	fb97 f3f9 	sdiv	r3, r7, r9
 8011ffe:	ee07 0a90 	vmov	s15, r0
 8012002:	fb09 7713 	mls	r7, r9, r3, r7
 8012006:	2f00      	cmp	r7, #0
 8012008:	bfb8      	it	lt
 801200a:	444f      	addlt	r7, r9
 801200c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012010:	b23b      	sxth	r3, r7
 8012012:	edcd 7a02 	vstr	s15, [sp, #8]
 8012016:	ee07 3a90 	vmov	s15, r3
 801201a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801201e:	f89d 6008 	ldrb.w	r6, [sp, #8]
 8012022:	ee67 7a88 	vmul.f32	s15, s15, s16
 8012026:	ee17 0a90 	vmov	r0, s15
 801202a:	f009 f83d 	bl	801b0a8 <roundf>
 801202e:	ee07 0a90 	vmov	s15, r0
 8012032:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012036:	2d1f      	cmp	r5, #31
 8012038:	edcd 7a02 	vstr	s15, [sp, #8]
 801203c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8012040:	f240 809b 	bls.w	801217a <MEMS_runMagCal.constprop.14+0xd72>
 8012044:	f8db 1508 	ldr.w	r1, [fp, #1288]	; 0x508
 8012048:	f1a5 0220 	sub.w	r2, r5, #32
 801204c:	2001      	movs	r0, #1
 801204e:	fa00 f202 	lsl.w	r2, r0, r2
 8012052:	ea22 0201 	bic.w	r2, r2, r1
 8012056:	404a      	eors	r2, r1
 8012058:	f8cb 2508 	str.w	r2, [fp, #1288]	; 0x508
 801205c:	2e1f      	cmp	r6, #31
 801205e:	f240 8082 	bls.w	8012166 <MEMS_runMagCal.constprop.14+0xd5e>
 8012062:	f8db 1510 	ldr.w	r1, [fp, #1296]	; 0x510
 8012066:	f1a6 0220 	sub.w	r2, r6, #32
 801206a:	2001      	movs	r0, #1
 801206c:	fa00 f202 	lsl.w	r2, r0, r2
 8012070:	ea22 0201 	bic.w	r2, r2, r1
 8012074:	404a      	eors	r2, r1
 8012076:	f8cb 2510 	str.w	r2, [fp, #1296]	; 0x510
 801207a:	2b1f      	cmp	r3, #31
 801207c:	f200 80e8 	bhi.w	8012250 <MEMS_runMagCal.constprop.14+0xe48>
 8012080:	f8db 2518 	ldr.w	r2, [fp, #1304]	; 0x518
 8012084:	2101      	movs	r1, #1
 8012086:	fa01 f303 	lsl.w	r3, r1, r3
 801208a:	ea23 0302 	bic.w	r3, r3, r2
 801208e:	4053      	eors	r3, r2
 8012090:	f8cb 3518 	str.w	r3, [fp, #1304]	; 0x518
 8012094:	9104      	str	r1, [sp, #16]
 8012096:	e6c4      	b.n	8011e22 <MEMS_runMagCal.constprop.14+0xa1a>
 8012098:	b11b      	cbz	r3, 80120a2 <MEMS_runMagCal.constprop.14+0xc9a>
 801209a:	f1be 0f00 	cmp.w	lr, #0
 801209e:	f47f aec0 	bne.w	8011e22 <MEMS_runMagCal.constprop.14+0xa1a>
 80120a2:	f99b 3502 	ldrsb.w	r3, [fp, #1282]	; 0x502
 80120a6:	f89b c501 	ldrb.w	ip, [fp, #1281]	; 0x501
 80120aa:	3301      	adds	r3, #1
 80120ac:	9305      	str	r3, [sp, #20]
 80120ae:	e663      	b.n	8011d78 <MEMS_runMagCal.constprop.14+0x970>
 80120b0:	2201      	movs	r2, #1
 80120b2:	fa02 f20a 	lsl.w	r2, r2, sl
 80120b6:	4013      	ands	r3, r2
 80120b8:	e635      	b.n	8011d26 <MEMS_runMagCal.constprop.14+0x91e>
 80120ba:	2101      	movs	r1, #1
 80120bc:	4091      	lsls	r1, r2
 80120be:	4001      	ands	r1, r0
 80120c0:	e64e      	b.n	8011d60 <MEMS_runMagCal.constprop.14+0x958>
 80120c2:	4601      	mov	r1, r0
 80120c4:	2001      	movs	r0, #1
 80120c6:	fa00 f101 	lsl.w	r1, r0, r1
 80120ca:	ea02 0e01 	and.w	lr, r2, r1
 80120ce:	e639      	b.n	8011d44 <MEMS_runMagCal.constprop.14+0x93c>
 80120d0:	f04f 0e01 	mov.w	lr, #1
 80120d4:	e4e8      	b.n	8011aa8 <MEMS_runMagCal.constprop.14+0x6a0>
 80120d6:	45b8      	cmp	r8, r7
 80120d8:	f000 8377 	beq.w	80127ca <MEMS_runMagCal.constprop.14+0x13c2>
 80120dc:	f8db 247c 	ldr.w	r2, [fp, #1148]	; 0x47c
 80120e0:	2d03      	cmp	r5, #3
 80120e2:	f47f ac95 	bne.w	8011a10 <MEMS_runMagCal.constprop.14+0x608>
 80120e6:	ee07 3a90 	vmov	s15, r3
 80120ea:	f8db 3478 	ldr.w	r3, [fp, #1144]	; 0x478
 80120ee:	eddf 6a57 	vldr	s13, [pc, #348]	; 801224c <MEMS_runMagCal.constprop.14+0xe44>
 80120f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80120f6:	ee07 3a10 	vmov	s14, r3
 80120fa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80120fe:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8012102:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801210a:	f77f ac81 	ble.w	8011a10 <MEMS_runMagCal.constprop.14+0x608>
 801210e:	2a00      	cmp	r2, #0
 8012110:	f43f ac7e 	beq.w	8011a10 <MEMS_runMagCal.constprop.14+0x608>
 8012114:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 8012118:	320a      	adds	r2, #10
 801211a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801211e:	ee07 2a90 	vmov	s15, r2
 8012122:	ee27 7a26 	vmul.f32	s14, s14, s13
 8012126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801212a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801212e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012132:	f77f ac6d 	ble.w	8011a10 <MEMS_runMagCal.constprop.14+0x608>
 8012136:	f89b 3475 	ldrb.w	r3, [fp, #1141]	; 0x475
 801213a:	2b00      	cmp	r3, #0
 801213c:	f47f ac68 	bne.w	8011a10 <MEMS_runMagCal.constprop.14+0x608>
 8012140:	f89b 34b4 	ldrb.w	r3, [fp, #1204]	; 0x4b4
 8012144:	2b00      	cmp	r3, #0
 8012146:	f43f abf6 	beq.w	8011936 <MEMS_runMagCal.constprop.14+0x52e>
 801214a:	f89b 34bc 	ldrb.w	r3, [fp, #1212]	; 0x4bc
 801214e:	2bff      	cmp	r3, #255	; 0xff
 8012150:	f47f abf1 	bne.w	8011936 <MEMS_runMagCal.constprop.14+0x52e>
 8012154:	e45c      	b.n	8011a10 <MEMS_runMagCal.constprop.14+0x608>
 8012156:	f1ba 0f00 	cmp.w	sl, #0
 801215a:	f47f ad18 	bne.w	8011b8e <MEMS_runMagCal.constprop.14+0x786>
 801215e:	2300      	movs	r3, #0
 8012160:	9304      	str	r3, [sp, #16]
 8012162:	461a      	mov	r2, r3
 8012164:	e667      	b.n	8011e36 <MEMS_runMagCal.constprop.14+0xa2e>
 8012166:	f8db 1514 	ldr.w	r1, [fp, #1300]	; 0x514
 801216a:	2201      	movs	r2, #1
 801216c:	40b2      	lsls	r2, r6
 801216e:	ea22 0201 	bic.w	r2, r2, r1
 8012172:	404a      	eors	r2, r1
 8012174:	f8cb 2514 	str.w	r2, [fp, #1300]	; 0x514
 8012178:	e77f      	b.n	801207a <MEMS_runMagCal.constprop.14+0xc72>
 801217a:	f8db 150c 	ldr.w	r1, [fp, #1292]	; 0x50c
 801217e:	2201      	movs	r2, #1
 8012180:	40aa      	lsls	r2, r5
 8012182:	ea22 0201 	bic.w	r2, r2, r1
 8012186:	404a      	eors	r2, r1
 8012188:	f8cb 250c 	str.w	r2, [fp, #1292]	; 0x50c
 801218c:	e766      	b.n	801205c <MEMS_runMagCal.constprop.14+0xc54>
 801218e:	f1be 0f00 	cmp.w	lr, #0
 8012192:	f47f adf1 	bne.w	8011d78 <MEMS_runMagCal.constprop.14+0x970>
 8012196:	9b05      	ldr	r3, [sp, #20]
 8012198:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801219a:	fb93 f1fc 	sdiv	r1, r3, ip
 801219e:	f108 0801 	add.w	r8, r8, #1
 80121a2:	fb0c 3111 	mls	r1, ip, r1, r3
 80121a6:	f8db 3504 	ldr.w	r3, [fp, #1284]	; 0x504
 80121aa:	f8bb 0462 	ldrh.w	r0, [fp, #1122]	; 0x462
 80121ae:	f8ab 5818 	strh.w	r5, [fp, #2072]	; 0x818
 80121b2:	45e0      	cmp	r8, ip
 80121b4:	b249      	sxtb	r1, r1
 80121b6:	bfa8      	it	ge
 80121b8:	46e0      	movge	r8, ip
 80121ba:	1ad3      	subs	r3, r2, r3
 80121bc:	1d0a      	adds	r2, r1, #4
 80121be:	eb0b 02c2 	add.w	r2, fp, r2, lsl #3
 80121c2:	fa5f f888 	uxtb.w	r8, r8
 80121c6:	fb10 3304 	smlabb	r3, r0, r4, r3
 80121ca:	45e0      	cmp	r8, ip
 80121cc:	f8ab 681a 	strh.w	r6, [fp, #2074]	; 0x81a
 80121d0:	f88b 8500 	strb.w	r8, [fp, #1280]	; 0x500
 80121d4:	f8ab 781c 	strh.w	r7, [fp, #2076]	; 0x81c
 80121d8:	f88b 1502 	strb.w	r1, [fp, #1282]	; 0x502
 80121dc:	f8a2 5502 	strh.w	r5, [r2, #1282]	; 0x502
 80121e0:	f8a2 6504 	strh.w	r6, [r2, #1284]	; 0x504
 80121e4:	f8a2 7506 	strh.w	r7, [r2, #1286]	; 0x506
 80121e8:	f8a2 3500 	strh.w	r3, [r2, #1280]	; 0x500
 80121ec:	f000 836c 	beq.w	80128c8 <MEMS_runMagCal.constprop.14+0x14c0>
 80121f0:	f1ba 0f1f 	cmp.w	sl, #31
 80121f4:	f240 82d0 	bls.w	8012798 <MEMS_runMagCal.constprop.14+0x1390>
 80121f8:	f8db 2508 	ldr.w	r2, [fp, #1288]	; 0x508
 80121fc:	f1aa 0320 	sub.w	r3, sl, #32
 8012200:	2101      	movs	r1, #1
 8012202:	fa01 f303 	lsl.w	r3, r1, r3
 8012206:	ea23 0302 	bic.w	r3, r3, r2
 801220a:	4053      	eors	r3, r2
 801220c:	f8cb 3508 	str.w	r3, [fp, #1288]	; 0x508
 8012210:	9b02      	ldr	r3, [sp, #8]
 8012212:	2b1f      	cmp	r3, #31
 8012214:	f240 82b5 	bls.w	8012782 <MEMS_runMagCal.constprop.14+0x137a>
 8012218:	f8db 2510 	ldr.w	r2, [fp, #1296]	; 0x510
 801221c:	3b20      	subs	r3, #32
 801221e:	2101      	movs	r1, #1
 8012220:	fa01 f303 	lsl.w	r3, r1, r3
 8012224:	ea23 0302 	bic.w	r3, r3, r2
 8012228:	4053      	eors	r3, r2
 801222a:	f8cb 3510 	str.w	r3, [fp, #1296]	; 0x510
 801222e:	9b03      	ldr	r3, [sp, #12]
 8012230:	2b1f      	cmp	r3, #31
 8012232:	f200 82bc 	bhi.w	80127ae <MEMS_runMagCal.constprop.14+0x13a6>
 8012236:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 801223a:	9301      	str	r3, [sp, #4]
 801223c:	f8db 2518 	ldr.w	r2, [fp, #1304]	; 0x518
 8012240:	9b03      	ldr	r3, [sp, #12]
 8012242:	2101      	movs	r1, #1
 8012244:	e71f      	b.n	8012086 <MEMS_runMagCal.constprop.14+0xc7e>
 8012246:	bf00      	nop
 8012248:	20001830 	.word	0x20001830
 801224c:	3a83126f 	.word	0x3a83126f
 8012250:	f8db 251c 	ldr.w	r2, [fp, #1308]	; 0x51c
 8012254:	3b20      	subs	r3, #32
 8012256:	2101      	movs	r1, #1
 8012258:	fa01 f303 	lsl.w	r3, r1, r3
 801225c:	ea23 0302 	bic.w	r3, r3, r2
 8012260:	4053      	eors	r3, r2
 8012262:	f8cb 351c 	str.w	r3, [fp, #1308]	; 0x51c
 8012266:	9104      	str	r1, [sp, #16]
 8012268:	e5db      	b.n	8011e22 <MEMS_runMagCal.constprop.14+0xa1a>
 801226a:	f04f 0a00 	mov.w	sl, #0
 801226e:	f04f 0901 	mov.w	r9, #1
 8012272:	f7ff bb29 	b.w	80118c8 <MEMS_runMagCal.constprop.14+0x4c0>
 8012276:	f04f 0a00 	mov.w	sl, #0
 801227a:	46d1      	mov	r9, sl
 801227c:	f7ff bb24 	b.w	80118c8 <MEMS_runMagCal.constprop.14+0x4c0>
 8012280:	2805      	cmp	r0, #5
 8012282:	f240 8269 	bls.w	8012758 <MEMS_runMagCal.constprop.14+0x1350>
 8012286:	2c05      	cmp	r4, #5
 8012288:	f240 8266 	bls.w	8012758 <MEMS_runMagCal.constprop.14+0x1350>
 801228c:	2a05      	cmp	r2, #5
 801228e:	f240 8263 	bls.w	8012758 <MEMS_runMagCal.constprop.14+0x1350>
 8012292:	f89b 6501 	ldrb.w	r6, [fp, #1281]	; 0x501
 8012296:	9a01      	ldr	r2, [sp, #4]
 8012298:	f99b a502 	ldrsb.w	sl, [fp, #1282]	; 0x502
 801229c:	42b2      	cmp	r2, r6
 801229e:	f10a 0301 	add.w	r3, sl, #1
 80122a2:	f000 8367 	beq.w	8012974 <MEMS_runMagCal.constprop.14+0x156c>
 80122a6:	1a9a      	subs	r2, r3, r2
 80122a8:	fb92 f3f6 	sdiv	r3, r2, r6
 80122ac:	fb06 2313 	mls	r3, r6, r3, r2
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	b219      	sxth	r1, r3
 80122b4:	bfbc      	itt	lt
 80122b6:	199b      	addlt	r3, r3, r6
 80122b8:	b219      	sxthlt	r1, r3
 80122ba:	f101 0315 	add.w	r3, r1, #21
 80122be:	00db      	lsls	r3, r3, #3
 80122c0:	eb0b 0203 	add.w	r2, fp, r3
 80122c4:	489b      	ldr	r0, [pc, #620]	; (8012534 <MEMS_runMagCal.constprop.14+0x112c>)
 80122c6:	f9b2 547e 	ldrsh.w	r5, [r2, #1150]	; 0x47e
 80122ca:	f9b2 c47a 	ldrsh.w	ip, [r2, #1146]	; 0x47a
 80122ce:	f9b2 747c 	ldrsh.w	r7, [r2, #1148]	; 0x47c
 80122d2:	f8ad 5048 	strh.w	r5, [sp, #72]	; 0x48
 80122d6:	2200      	movs	r2, #0
 80122d8:	4403      	add	r3, r0
 80122da:	e9cd 2206 	strd	r2, r2, [sp, #24]
 80122de:	f8d3 301a 	ldr.w	r3, [r3, #26]
 80122e2:	9311      	str	r3, [sp, #68]	; 0x44
 80122e4:	9313      	str	r3, [sp, #76]	; 0x4c
 80122e6:	46e0      	mov	r8, ip
 80122e8:	f8ad 5050 	strh.w	r5, [sp, #80]	; 0x50
 80122ec:	46a9      	mov	r9, r5
 80122ee:	46be      	mov	lr, r7
 80122f0:	920a      	str	r2, [sp, #40]	; 0x28
 80122f2:	9208      	str	r2, [sp, #32]
 80122f4:	920b      	str	r2, [sp, #44]	; 0x2c
 80122f6:	9205      	str	r2, [sp, #20]
 80122f8:	9104      	str	r1, [sp, #16]
 80122fa:	9b04      	ldr	r3, [sp, #16]
 80122fc:	1898      	adds	r0, r3, r2
 80122fe:	fb90 f3f6 	sdiv	r3, r0, r6
 8012302:	fb06 0313 	mls	r3, r6, r3, r0
 8012306:	b2db      	uxtb	r3, r3
 8012308:	3315      	adds	r3, #21
 801230a:	eb0b 00c3 	add.w	r0, fp, r3, lsl #3
 801230e:	f9b0 447a 	ldrsh.w	r4, [r0, #1146]	; 0x47a
 8012312:	4564      	cmp	r4, ip
 8012314:	dd02      	ble.n	801231c <MEMS_runMagCal.constprop.14+0xf14>
 8012316:	2001      	movs	r0, #1
 8012318:	46a4      	mov	ip, r4
 801231a:	900b      	str	r0, [sp, #44]	; 0x2c
 801231c:	eb0b 00c3 	add.w	r0, fp, r3, lsl #3
 8012320:	f9b0 047c 	ldrsh.w	r0, [r0, #1148]	; 0x47c
 8012324:	42b8      	cmp	r0, r7
 8012326:	dd02      	ble.n	801232e <MEMS_runMagCal.constprop.14+0xf26>
 8012328:	2101      	movs	r1, #1
 801232a:	4607      	mov	r7, r0
 801232c:	910a      	str	r1, [sp, #40]	; 0x28
 801232e:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8012332:	f9b3 347e 	ldrsh.w	r3, [r3, #1150]	; 0x47e
 8012336:	42ab      	cmp	r3, r5
 8012338:	dd02      	ble.n	8012340 <MEMS_runMagCal.constprop.14+0xf38>
 801233a:	2101      	movs	r1, #1
 801233c:	461d      	mov	r5, r3
 801233e:	9108      	str	r1, [sp, #32]
 8012340:	4544      	cmp	r4, r8
 8012342:	da02      	bge.n	801234a <MEMS_runMagCal.constprop.14+0xf42>
 8012344:	2101      	movs	r1, #1
 8012346:	46a0      	mov	r8, r4
 8012348:	9107      	str	r1, [sp, #28]
 801234a:	4570      	cmp	r0, lr
 801234c:	da02      	bge.n	8012354 <MEMS_runMagCal.constprop.14+0xf4c>
 801234e:	2101      	movs	r1, #1
 8012350:	4686      	mov	lr, r0
 8012352:	9106      	str	r1, [sp, #24]
 8012354:	454b      	cmp	r3, r9
 8012356:	da02      	bge.n	801235e <MEMS_runMagCal.constprop.14+0xf56>
 8012358:	4699      	mov	r9, r3
 801235a:	2301      	movs	r3, #1
 801235c:	9305      	str	r3, [sp, #20]
 801235e:	3201      	adds	r2, #1
 8012360:	9801      	ldr	r0, [sp, #4]
 8012362:	b2d3      	uxtb	r3, r2
 8012364:	4298      	cmp	r0, r3
 8012366:	d8c8      	bhi.n	80122fa <MEMS_runMagCal.constprop.14+0xef2>
 8012368:	9b06      	ldr	r3, [sp, #24]
 801236a:	9904      	ldr	r1, [sp, #16]
 801236c:	2b00      	cmp	r3, #0
 801236e:	f040 8324 	bne.w	80129ba <MEMS_runMagCal.constprop.14+0x15b2>
 8012372:	9b07      	ldr	r3, [sp, #28]
 8012374:	b10b      	cbz	r3, 801237a <MEMS_runMagCal.constprop.14+0xf72>
 8012376:	f8ad 804c 	strh.w	r8, [sp, #76]	; 0x4c
 801237a:	9b05      	ldr	r3, [sp, #20]
 801237c:	b10b      	cbz	r3, 8012382 <MEMS_runMagCal.constprop.14+0xf7a>
 801237e:	f8ad 9050 	strh.w	r9, [sp, #80]	; 0x50
 8012382:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012384:	b10b      	cbz	r3, 801238a <MEMS_runMagCal.constprop.14+0xf82>
 8012386:	f8ad c044 	strh.w	ip, [sp, #68]	; 0x44
 801238a:	9b08      	ldr	r3, [sp, #32]
 801238c:	b10b      	cbz	r3, 8012392 <MEMS_runMagCal.constprop.14+0xf8a>
 801238e:	f8ad 5048 	strh.w	r5, [sp, #72]	; 0x48
 8012392:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012394:	b10b      	cbz	r3, 801239a <MEMS_runMagCal.constprop.14+0xf92>
 8012396:	f8ad 7046 	strh.w	r7, [sp, #70]	; 0x46
 801239a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801239e:	ee87 9aa8 	vdiv.f32	s18, s15, s17
 80123a2:	f8bd 5046 	ldrh.w	r5, [sp, #70]	; 0x46
 80123a6:	f8bd 004e 	ldrh.w	r0, [sp, #78]	; 0x4e
 80123aa:	f8bd 7044 	ldrh.w	r7, [sp, #68]	; 0x44
 80123ae:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
 80123b2:	f8bd 4048 	ldrh.w	r4, [sp, #72]	; 0x48
 80123b6:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 80123ba:	1a28      	subs	r0, r5, r0
 80123bc:	f89b 54b4 	ldrb.w	r5, [fp, #1204]	; 0x4b4
 80123c0:	1aba      	subs	r2, r7, r2
 80123c2:	1ae3      	subs	r3, r4, r3
 80123c4:	b212      	sxth	r2, r2
 80123c6:	ed9f 5a5c 	vldr	s10, [pc, #368]	; 8012538 <MEMS_runMagCal.constprop.14+0x1130>
 80123ca:	b200      	sxth	r0, r0
 80123cc:	ee29 5a05 	vmul.f32	s10, s18, s10
 80123d0:	b21b      	sxth	r3, r3
 80123d2:	2d00      	cmp	r5, #0
 80123d4:	f040 82b5 	bne.w	8012942 <MEMS_runMagCal.constprop.14+0x153a>
 80123d8:	f89b 44cc 	ldrb.w	r4, [fp, #1228]	; 0x4cc
 80123dc:	fab4 f484 	clz	r4, r4
 80123e0:	0964      	lsrs	r4, r4, #5
 80123e2:	9404      	str	r4, [sp, #16]
 80123e4:	ee07 2a10 	vmov	s14, r2
 80123e8:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 80123ec:	ee65 7a27 	vmul.f32	s15, s10, s15
 80123f0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80123f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80123f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123fc:	f300 8285 	bgt.w	801290a <MEMS_runMagCal.constprop.14+0x1502>
 8012400:	ee06 0a90 	vmov	s13, r0
 8012404:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8012408:	eef4 7ae6 	vcmpe.f32	s15, s13
 801240c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012410:	f100 827b 	bmi.w	801290a <MEMS_runMagCal.constprop.14+0x1502>
 8012414:	ee06 3a10 	vmov	s12, r3
 8012418:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 801241c:	eef4 7ac6 	vcmpe.f32	s15, s12
 8012420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012424:	f100 8271 	bmi.w	801290a <MEMS_runMagCal.constprop.14+0x1502>
 8012428:	4293      	cmp	r3, r2
 801242a:	461c      	mov	r4, r3
 801242c:	bfa8      	it	ge
 801242e:	4614      	movge	r4, r2
 8012430:	b224      	sxth	r4, r4
 8012432:	4284      	cmp	r4, r0
 8012434:	bfa8      	it	ge
 8012436:	4604      	movge	r4, r0
 8012438:	4290      	cmp	r0, r2
 801243a:	4605      	mov	r5, r0
 801243c:	bfb8      	it	lt
 801243e:	4615      	movlt	r5, r2
 8012440:	429c      	cmp	r4, r3
 8012442:	bfa8      	it	ge
 8012444:	461c      	movge	r4, r3
 8012446:	429d      	cmp	r5, r3
 8012448:	bfb8      	it	lt
 801244a:	461d      	movlt	r5, r3
 801244c:	fa0f fa85 	sxth.w	sl, r5
 8012450:	b224      	sxth	r4, r4
 8012452:	4592      	cmp	sl, r2
 8012454:	f8ad 404e 	strh.w	r4, [sp, #78]	; 0x4e
 8012458:	f340 8276 	ble.w	8012948 <MEMS_runMagCal.constprop.14+0x1540>
 801245c:	4294      	cmp	r4, r2
 801245e:	f280 8273 	bge.w	8012948 <MEMS_runMagCal.constprop.14+0x1540>
 8012462:	2501      	movs	r5, #1
 8012464:	4582      	cmp	sl, r0
 8012466:	f300 8299 	bgt.w	801299c <MEMS_runMagCal.constprop.14+0x1594>
 801246a:	4553      	cmp	r3, sl
 801246c:	f280 8291 	bge.w	8012992 <MEMS_runMagCal.constprop.14+0x158a>
 8012470:	42a3      	cmp	r3, r4
 8012472:	f340 828e 	ble.w	8012992 <MEMS_runMagCal.constprop.14+0x158a>
 8012476:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
 801247a:	9b04      	ldr	r3, [sp, #16]
 801247c:	2b00      	cmp	r3, #0
 801247e:	f000 8142 	beq.w	8012706 <MEMS_runMagCal.constprop.14+0x12fe>
 8012482:	eeb4 5ac7 	vcmpe.f32	s10, s14
 8012486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801248a:	dc0c      	bgt.n	80124a6 <MEMS_runMagCal.constprop.14+0x109e>
 801248c:	eeb4 5ae6 	vcmpe.f32	s10, s13
 8012490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012494:	dc07      	bgt.n	80124a6 <MEMS_runMagCal.constprop.14+0x109e>
 8012496:	eeb4 5ac6 	vcmpe.f32	s10, s12
 801249a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801249e:	bfcc      	ite	gt
 80124a0:	2301      	movgt	r3, #1
 80124a2:	2300      	movle	r3, #0
 80124a4:	9304      	str	r3, [sp, #16]
 80124a6:	eddf 7a25 	vldr	s15, [pc, #148]	; 801253c <MEMS_runMagCal.constprop.14+0x1134>
 80124aa:	ee05 aa90 	vmov	s11, sl
 80124ae:	ee65 7a27 	vmul.f32	s15, s10, s15
 80124b2:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80124b6:	eef4 5ae7 	vcmpe.f32	s11, s15
 80124ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124be:	db1e      	blt.n	80124fe <MEMS_runMagCal.constprop.14+0x10f6>
 80124c0:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 80124c4:	ee05 3a90 	vmov	s11, r3
 80124c8:	eef7 7a02 	vmov.f32	s15, #114	; 0x3f900000  1.125
 80124cc:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80124d0:	ee65 7a27 	vmul.f32	s15, s10, s15
 80124d4:	eef4 5ae7 	vcmpe.f32	s11, s15
 80124d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124dc:	db0f      	blt.n	80124fe <MEMS_runMagCal.constprop.14+0x10f6>
 80124de:	ebba 0f44 	cmp.w	sl, r4, lsl #1
 80124e2:	da0c      	bge.n	80124fe <MEMS_runMagCal.constprop.14+0x10f6>
 80124e4:	ee07 4a90 	vmov	s15, r4
 80124e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80124ec:	eef7 5a04 	vmov.f32	s11, #116	; 0x3fa00000  1.250
 80124f0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80124f4:	eeb4 5ae7 	vcmpe.f32	s10, s15
 80124f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124fc:	d422      	bmi.n	8012544 <MEMS_runMagCal.constprop.14+0x113c>
 80124fe:	eef7 7a02 	vmov.f32	s15, #114	; 0x3f900000  1.125
 8012502:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012506:	eeb4 5ac7 	vcmpe.f32	s10, s14
 801250a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801250e:	f300 8123 	bgt.w	8012758 <MEMS_runMagCal.constprop.14+0x1350>
 8012512:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8012516:	eeb4 5ae6 	vcmpe.f32	s10, s13
 801251a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801251e:	f300 811b 	bgt.w	8012758 <MEMS_runMagCal.constprop.14+0x1350>
 8012522:	ee66 7a27 	vmul.f32	s15, s12, s15
 8012526:	eeb4 5ae7 	vcmpe.f32	s10, s15
 801252a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801252e:	f300 8113 	bgt.w	8012758 <MEMS_runMagCal.constprop.14+0x1350>
 8012532:	e007      	b.n	8012544 <MEMS_runMagCal.constprop.14+0x113c>
 8012534:	20001830 	.word	0x20001830
 8012538:	42340000 	.word	0x42340000
 801253c:	3faccccd 	.word	0x3faccccd
 8012540:	00000000 	.word	0x00000000
 8012544:	fa4f f981 	sxtb.w	r9, r1
 8012548:	2700      	movs	r7, #0
 801254a:	f109 0301 	add.w	r3, r9, #1
 801254e:	9302      	str	r3, [sp, #8]
 8012550:	46b8      	mov	r8, r7
 8012552:	463b      	mov	r3, r7
 8012554:	f04f 0e01 	mov.w	lr, #1
 8012558:	9a02      	ldr	r2, [sp, #8]
 801255a:	eb09 0103 	add.w	r1, r9, r3
 801255e:	441a      	add	r2, r3
 8012560:	fb91 f3f6 	sdiv	r3, r1, r6
 8012564:	fb06 1313 	mls	r3, r6, r3, r1
 8012568:	b25c      	sxtb	r4, r3
 801256a:	2c00      	cmp	r4, #0
 801256c:	bfb8      	it	lt
 801256e:	199b      	addlt	r3, r3, r6
 8012570:	fb92 f1f6 	sdiv	r1, r2, r6
 8012574:	fb06 2111 	mls	r1, r6, r1, r2
 8012578:	bfb8      	it	lt
 801257a:	b25c      	sxtblt	r4, r3
 801257c:	b249      	sxtb	r1, r1
 801257e:	3104      	adds	r1, #4
 8012580:	3404      	adds	r4, #4
 8012582:	eb0b 02c4 	add.w	r2, fp, r4, lsl #3
 8012586:	eb0b 03c1 	add.w	r3, fp, r1, lsl #3
 801258a:	f9b2 0502 	ldrsh.w	r0, [r2, #1282]	; 0x502
 801258e:	f9b3 3502 	ldrsh.w	r3, [r3, #1282]	; 0x502
 8012592:	1a1a      	subs	r2, r3, r0
 8012594:	2a00      	cmp	r2, #0
 8012596:	b29b      	uxth	r3, r3
 8012598:	b280      	uxth	r0, r0
 801259a:	bfb4      	ite	lt
 801259c:	1ac3      	sublt	r3, r0, r3
 801259e:	1a1b      	subge	r3, r3, r0
 80125a0:	eb0b 02c4 	add.w	r2, fp, r4, lsl #3
 80125a4:	b218      	sxth	r0, r3
 80125a6:	eb0b 03c1 	add.w	r3, fp, r1, lsl #3
 80125aa:	f9b2 2504 	ldrsh.w	r2, [r2, #1284]	; 0x504
 80125ae:	f9b3 3504 	ldrsh.w	r3, [r3, #1284]	; 0x504
 80125b2:	1a9d      	subs	r5, r3, r2
 80125b4:	2d00      	cmp	r5, #0
 80125b6:	b29b      	uxth	r3, r3
 80125b8:	b292      	uxth	r2, r2
 80125ba:	bfb4      	ite	lt
 80125bc:	1ad3      	sublt	r3, r2, r3
 80125be:	1a9b      	subge	r3, r3, r2
 80125c0:	eb0b 05c1 	add.w	r5, fp, r1, lsl #3
 80125c4:	eb0b 02c4 	add.w	r2, fp, r4, lsl #3
 80125c8:	eb0b 01c1 	add.w	r1, fp, r1, lsl #3
 80125cc:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 80125d0:	f9b5 5506 	ldrsh.w	r5, [r5, #1286]	; 0x506
 80125d4:	f9b2 2506 	ldrsh.w	r2, [r2, #1286]	; 0x506
 80125d8:	f8b1 1500 	ldrh.w	r1, [r1, #1280]	; 0x500
 80125dc:	f8b4 4500 	ldrh.w	r4, [r4, #1280]	; 0x500
 80125e0:	eba5 0c02 	sub.w	ip, r5, r2
 80125e4:	1b09      	subs	r1, r1, r4
 80125e6:	b292      	uxth	r2, r2
 80125e8:	f1bc 0f00 	cmp.w	ip, #0
 80125ec:	b2ad      	uxth	r5, r5
 80125ee:	b209      	sxth	r1, r1
 80125f0:	bfb4      	ite	lt
 80125f2:	1b52      	sublt	r2, r2, r5
 80125f4:	1aaa      	subge	r2, r5, r2
 80125f6:	2900      	cmp	r1, #0
 80125f8:	b21b      	sxth	r3, r3
 80125fa:	b212      	sxth	r2, r2
 80125fc:	dd1e      	ble.n	801263c <MEMS_runMagCal.constprop.14+0x1234>
 80125fe:	4403      	add	r3, r0
 8012600:	441a      	add	r2, r3
 8012602:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012606:	fb03 f202 	mul.w	r2, r3, r2
 801260a:	ee07 2a90 	vmov	s15, r2
 801260e:	ee07 1a10 	vmov	s14, r1
 8012612:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012616:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801261a:	ee67 7aa8 	vmul.f32	s15, s15, s17
 801261e:	f108 0801 	add.w	r8, r8, #1
 8012622:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8012626:	fa5f f888 	uxtb.w	r8, r8
 801262a:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 801262e:	ee17 3a90 	vmov	r3, s15
 8012632:	b21b      	sxth	r3, r3
 8012634:	2b96      	cmp	r3, #150	; 0x96
 8012636:	bfc4      	itt	gt
 8012638:	3701      	addgt	r7, #1
 801263a:	b2ff      	uxtbgt	r7, r7
 801263c:	4673      	mov	r3, lr
 801263e:	9901      	ldr	r1, [sp, #4]
 8012640:	f10e 0e01 	add.w	lr, lr, #1
 8012644:	fa5f f28e 	uxtb.w	r2, lr
 8012648:	4291      	cmp	r1, r2
 801264a:	d885      	bhi.n	8012558 <MEMS_runMagCal.constprop.14+0x1150>
 801264c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8012650:	4547      	cmp	r7, r8
 8012652:	f340 8081 	ble.w	8012758 <MEMS_runMagCal.constprop.14+0x1350>
 8012656:	9b03      	ldr	r3, [sp, #12]
 8012658:	b92b      	cbnz	r3, 8012666 <MEMS_runMagCal.constprop.14+0x125e>
 801265a:	f89b 34cc 	ldrb.w	r3, [fp, #1228]	; 0x4cc
 801265e:	3b02      	subs	r3, #2
 8012660:	2b01      	cmp	r3, #1
 8012662:	f240 81ad 	bls.w	80129c0 <MEMS_runMagCal.constprop.14+0x15b8>
 8012666:	2220      	movs	r2, #32
 8012668:	2100      	movs	r1, #0
 801266a:	a82e      	add	r0, sp, #184	; 0xb8
 801266c:	f007 fcd7 	bl	801a01e <memset>
 8012670:	f89b 8500 	ldrb.w	r8, [fp, #1280]	; 0x500
 8012674:	f89b 2501 	ldrb.w	r2, [fp, #1281]	; 0x501
 8012678:	f99b 3502 	ldrsb.w	r3, [fp, #1282]	; 0x502
 801267c:	2100      	movs	r1, #0
 801267e:	4590      	cmp	r8, r2
 8012680:	e9cd 111a 	strd	r1, r1, [sp, #104]	; 0x68
 8012684:	911c      	str	r1, [sp, #112]	; 0x70
 8012686:	f103 0301 	add.w	r3, r3, #1
 801268a:	f000 824f 	beq.w	8012b2c <MEMS_runMagCal.constprop.14+0x1724>
 801268e:	eba3 0308 	sub.w	r3, r3, r8
 8012692:	fb93 f1f2 	sdiv	r1, r3, r2
 8012696:	fb02 3311 	mls	r3, r2, r1, r3
 801269a:	2b00      	cmp	r3, #0
 801269c:	b219      	sxth	r1, r3
 801269e:	bfbc      	itt	lt
 80126a0:	189b      	addlt	r3, r3, r2
 80126a2:	b219      	sxthlt	r1, r3
 80126a4:	ed5f 7a5a 	vldr	s15, [pc, #-360]	; 8012540 <MEMS_runMagCal.constprop.14+0x1138>
 80126a8:	2000      	movs	r0, #0
 80126aa:	eeb0 7a67 	vmov.f32	s14, s15
 80126ae:	eef0 6a67 	vmov.f32	s13, s15
 80126b2:	4604      	mov	r4, r0
 80126b4:	b2c3      	uxtb	r3, r0
 80126b6:	4598      	cmp	r8, r3
 80126b8:	eb01 0500 	add.w	r5, r1, r0
 80126bc:	f240 81d4 	bls.w	8012a68 <MEMS_runMagCal.constprop.14+0x1660>
 80126c0:	fb95 f3f2 	sdiv	r3, r5, r2
 80126c4:	fb02 5313 	mls	r3, r2, r3, r5
 80126c8:	b2db      	uxtb	r3, r3
 80126ca:	3304      	adds	r3, #4
 80126cc:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 80126d0:	3001      	adds	r0, #1
 80126d2:	f9b3 4502 	ldrsh.w	r4, [r3, #1282]	; 0x502
 80126d6:	ee05 4a10 	vmov	s10, r4
 80126da:	f9b3 4504 	ldrsh.w	r4, [r3, #1284]	; 0x504
 80126de:	f9b3 3506 	ldrsh.w	r3, [r3, #1286]	; 0x506
 80126e2:	ee05 4a90 	vmov	s11, r4
 80126e6:	ee06 3a10 	vmov	s12, r3
 80126ea:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 80126ee:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80126f2:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80126f6:	ee76 6a85 	vadd.f32	s13, s13, s10
 80126fa:	ee37 7a25 	vadd.f32	s14, s14, s11
 80126fe:	ee77 7a86 	vadd.f32	s15, s15, s12
 8012702:	2401      	movs	r4, #1
 8012704:	e7d6      	b.n	80126b4 <MEMS_runMagCal.constprop.14+0x12ac>
 8012706:	4bcb      	ldr	r3, [pc, #812]	; (8012a34 <MEMS_runMagCal.constprop.14+0x162c>)
 8012708:	ed9f 4ad0 	vldr	s8, [pc, #832]	; 8012a4c <MEMS_runMagCal.constprop.14+0x1644>
 801270c:	edd3 4a23 	vldr	s9, [r3, #140]	; 0x8c
 8012710:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8012714:	edd3 5a27 	vldr	s11, [r3, #156]	; 0x9c
 8012718:	ee77 7aa4 	vadd.f32	s15, s15, s9
 801271c:	eef7 4a02 	vmov.f32	s9, #114	; 0x3f900000  1.125
 8012720:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8012724:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8012728:	ee67 7a84 	vmul.f32	s15, s15, s8
 801272c:	eef4 7ae4 	vcmpe.f32	s15, s9
 8012730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012734:	bf88      	it	hi
 8012736:	eef0 7a64 	vmovhi.f32	s15, s9
 801273a:	eef4 7ae5 	vcmpe.f32	s15, s11
 801273e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012742:	bfb8      	it	lt
 8012744:	eef0 7a65 	vmovlt.f32	s15, s11
 8012748:	ee27 7a27 	vmul.f32	s14, s14, s15
 801274c:	eeb4 5ac7 	vcmpe.f32	s10, s14
 8012750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012754:	f77f aedd 	ble.w	8012512 <MEMS_runMagCal.constprop.14+0x110a>
 8012758:	2300      	movs	r3, #0
 801275a:	f88b 3474 	strb.w	r3, [fp, #1140]	; 0x474
 801275e:	f7ff b8ea 	b.w	8011936 <MEMS_runMagCal.constprop.14+0x52e>
 8012762:	f1ba 0f00 	cmp.w	sl, #0
 8012766:	f040 80b5 	bne.w	80128d4 <MEMS_runMagCal.constprop.14+0x14cc>
 801276a:	2300      	movs	r3, #0
 801276c:	9303      	str	r3, [sp, #12]
 801276e:	f7ff bba5 	b.w	8011ebc <MEMS_runMagCal.constprop.14+0xab4>
 8012772:	fb93 fef8 	sdiv	lr, r3, r8
 8012776:	fb08 3e1e 	mls	lr, r8, lr, r3
 801277a:	fa0f fe8e 	sxth.w	lr, lr
 801277e:	f7ff bb0c 	b.w	8011d9a <MEMS_runMagCal.constprop.14+0x992>
 8012782:	f8db 2514 	ldr.w	r2, [fp, #1300]	; 0x514
 8012786:	2101      	movs	r1, #1
 8012788:	fa01 f303 	lsl.w	r3, r1, r3
 801278c:	ea23 0302 	bic.w	r3, r3, r2
 8012790:	4053      	eors	r3, r2
 8012792:	f8cb 3514 	str.w	r3, [fp, #1300]	; 0x514
 8012796:	e54a      	b.n	801222e <MEMS_runMagCal.constprop.14+0xe26>
 8012798:	f8db 250c 	ldr.w	r2, [fp, #1292]	; 0x50c
 801279c:	2301      	movs	r3, #1
 801279e:	fa03 f30a 	lsl.w	r3, r3, sl
 80127a2:	ea23 0302 	bic.w	r3, r3, r2
 80127a6:	4053      	eors	r3, r2
 80127a8:	f8cb 350c 	str.w	r3, [fp, #1292]	; 0x50c
 80127ac:	e530      	b.n	8012210 <MEMS_runMagCal.constprop.14+0xe08>
 80127ae:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
 80127b2:	f8db 251c 	ldr.w	r2, [fp, #1308]	; 0x51c
 80127b6:	9101      	str	r1, [sp, #4]
 80127b8:	3b20      	subs	r3, #32
 80127ba:	e54c      	b.n	8012256 <MEMS_runMagCal.constprop.14+0xe4e>
 80127bc:	fb92 f6f5 	sdiv	r6, r2, r5
 80127c0:	fb05 2216 	mls	r2, r5, r6, r2
 80127c4:	b216      	sxth	r6, r2
 80127c6:	f7ff b964 	b.w	8011a92 <MEMS_runMagCal.constprop.14+0x68a>
 80127ca:	eddf 6aa2 	vldr	s13, [pc, #648]	; 8012a54 <MEMS_runMagCal.constprop.14+0x164c>
 80127ce:	3401      	adds	r4, #1
 80127d0:	f10d 0938 	add.w	r9, sp, #56	; 0x38
 80127d4:	fb94 fef7 	sdiv	lr, r4, r7
 80127d8:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 80127dc:	fb07 441e 	mls	r4, r7, lr, r4
 80127e0:	edc9 6a00 	vstr	s13, [r9]
 80127e4:	2f00      	cmp	r7, #0
 80127e6:	f000 80cb 	beq.w	8012980 <MEMS_runMagCal.constprop.14+0x1578>
 80127ea:	fa1f fe84 	uxth.w	lr, r4
 80127ee:	1e79      	subs	r1, r7, #1
 80127f0:	2000      	movs	r0, #0
 80127f2:	1c72      	adds	r2, r6, #1
 80127f4:	fa12 f881 	uxtah	r8, r2, r1
 80127f8:	9301      	str	r3, [sp, #4]
 80127fa:	eeb0 6a66 	vmov.f32	s12, s13
 80127fe:	ebae 0e06 	sub.w	lr, lr, r6
 8012802:	4604      	mov	r4, r0
 8012804:	4631      	mov	r1, r6
 8012806:	f241 2c5c 	movw	ip, #4700	; 0x125c
 801280a:	4603      	mov	r3, r0
 801280c:	428e      	cmp	r6, r1
 801280e:	eb0e 0201 	add.w	r2, lr, r1
 8012812:	dc21      	bgt.n	8012858 <MEMS_runMagCal.constprop.14+0x1450>
 8012814:	fb92 f0f7 	sdiv	r0, r2, r7
 8012818:	fb07 2210 	mls	r2, r7, r0, r2
 801281c:	eb0b 0242 	add.w	r2, fp, r2, lsl #1
 8012820:	2301      	movs	r3, #1
 8012822:	f8b2 0488 	ldrh.w	r0, [r2, #1160]	; 0x488
 8012826:	f5a0 5292 	sub.w	r2, r0, #4672	; 0x1240
 801282a:	4560      	cmp	r0, ip
 801282c:	f1a2 021c 	sub.w	r2, r2, #28
 8012830:	bf98      	it	ls
 8012832:	ebac 0200 	subls.w	r2, ip, r0
 8012836:	b292      	uxth	r2, r2
 8012838:	fb02 f202 	mul.w	r2, r2, r2
 801283c:	ee07 2a90 	vmov	s15, r2
 8012840:	ee07 0a10 	vmov	s14, r0
 8012844:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012848:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801284c:	441c      	add	r4, r3
 801284e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8012852:	ee36 6a07 	vadd.f32	s12, s12, s14
 8012856:	b2a4      	uxth	r4, r4
 8012858:	3101      	adds	r1, #1
 801285a:	4588      	cmp	r8, r1
 801285c:	d1d6      	bne.n	801280c <MEMS_runMagCal.constprop.14+0x1404>
 801285e:	461a      	mov	r2, r3
 8012860:	9b01      	ldr	r3, [sp, #4]
 8012862:	2a00      	cmp	r2, #0
 8012864:	f040 815d 	bne.w	8012b22 <MEMS_runMagCal.constprop.14+0x171a>
 8012868:	ed99 7a00 	vldr	s14, [r9]
 801286c:	b1ac      	cbz	r4, 801289a <MEMS_runMagCal.constprop.14+0x1492>
 801286e:	ee07 4a90 	vmov	s15, r4
 8012872:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012876:	ed9d 5a0d 	vldr	s10, [sp, #52]	; 0x34
 801287a:	ed9f 6a6f 	vldr	s12, [pc, #444]	; 8012a38 <MEMS_runMagCal.constprop.14+0x1630>
 801287e:	eec7 5a27 	vdiv.f32	s11, s14, s15
 8012882:	eec5 6a27 	vdiv.f32	s13, s10, s15
 8012886:	eeb1 7ae5 	vsqrt.f32	s14, s11
 801288a:	ee66 7a86 	vmul.f32	s15, s13, s12
 801288e:	ee27 7a06 	vmul.f32	s14, s14, s12
 8012892:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 8012896:	ed89 7a00 	vstr	s14, [r9]
 801289a:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 801289e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80128a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128a6:	dd1b      	ble.n	80128e0 <MEMS_runMagCal.constprop.14+0x14d8>
 80128a8:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 80128ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80128b0:	2302      	movs	r3, #2
 80128b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128b6:	f88b 34cc 	strb.w	r3, [fp, #1228]	; 0x4cc
 80128ba:	f77f a8a9 	ble.w	8011a10 <MEMS_runMagCal.constprop.14+0x608>
 80128be:	2301      	movs	r3, #1
 80128c0:	f88b 3475 	strb.w	r3, [fp, #1141]	; 0x475
 80128c4:	f7ff b8a4 	b.w	8011a10 <MEMS_runMagCal.constprop.14+0x608>
 80128c8:	eeb0 0a49 	vmov.f32	s0, s18
 80128cc:	4648      	mov	r0, r9
 80128ce:	f7fd ff5f 	bl	8010790 <MEMS_updateMagBufferIndex.constprop.24>
 80128d2:	e48d      	b.n	80121f0 <MEMS_runMagCal.constprop.14+0xde8>
 80128d4:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 80128d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80128dc:	f7ff badc 	b.w	8011e98 <MEMS_runMagCal.constprop.14+0xa90>
 80128e0:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80128e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80128e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128ec:	f8db 247c 	ldr.w	r2, [fp, #1148]	; 0x47c
 80128f0:	d42d      	bmi.n	801294e <MEMS_runMagCal.constprop.14+0x1546>
 80128f2:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 80128f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80128fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128fe:	bfc4      	itt	gt
 8012900:	2101      	movgt	r1, #1
 8012902:	f88b 1475 	strbgt.w	r1, [fp, #1141]	; 0x475
 8012906:	f7ff bbeb 	b.w	80120e0 <MEMS_runMagCal.constprop.14+0xcd8>
 801290a:	eb0b 03ca 	add.w	r3, fp, sl, lsl #3
 801290e:	f8db 2504 	ldr.w	r2, [fp, #1284]	; 0x504
 8012912:	f9b3 3520 	ldrsh.w	r3, [r3, #1312]	; 0x520
 8012916:	f8db 1480 	ldr.w	r1, [fp, #1152]	; 0x480
 801291a:	4413      	add	r3, r2
 801291c:	4299      	cmp	r1, r3
 801291e:	f4bf af1b 	bcs.w	8012758 <MEMS_runMagCal.constprop.14+0x1350>
 8012922:	9902      	ldr	r1, [sp, #8]
 8012924:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012928:	fb03 f301 	mul.w	r3, r3, r1
 801292c:	3364      	adds	r3, #100	; 0x64
 801292e:	4293      	cmp	r3, r2
 8012930:	bf38      	it	cc
 8012932:	4613      	movcc	r3, r2
 8012934:	2200      	movs	r2, #0
 8012936:	f8cb 3480 	str.w	r3, [fp, #1152]	; 0x480
 801293a:	f88b 2474 	strb.w	r2, [fp, #1140]	; 0x474
 801293e:	f7fe bffa 	b.w	8011936 <MEMS_runMagCal.constprop.14+0x52e>
 8012942:	2400      	movs	r4, #0
 8012944:	9404      	str	r4, [sp, #16]
 8012946:	e54d      	b.n	80123e4 <MEMS_runMagCal.constprop.14+0xfdc>
 8012948:	4622      	mov	r2, r4
 801294a:	2500      	movs	r5, #0
 801294c:	e58a      	b.n	8012464 <MEMS_runMagCal.constprop.14+0x105c>
 801294e:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 8012952:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012956:	2003      	movs	r0, #3
 8012958:	2100      	movs	r1, #0
 801295a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801295e:	f88b 04cc 	strb.w	r0, [fp, #1228]	; 0x4cc
 8012962:	f88b 1475 	strb.w	r1, [fp, #1141]	; 0x475
 8012966:	f77f abbe 	ble.w	80120e6 <MEMS_runMagCal.constprop.14+0xcde>
 801296a:	2101      	movs	r1, #1
 801296c:	f88b 1475 	strb.w	r1, [fp, #1141]	; 0x475
 8012970:	f7ff bbb9 	b.w	80120e6 <MEMS_runMagCal.constprop.14+0xcde>
 8012974:	fb93 f1f2 	sdiv	r1, r3, r2
 8012978:	fb02 3311 	mls	r3, r2, r1, r3
 801297c:	b219      	sxth	r1, r3
 801297e:	e49c      	b.n	80122ba <MEMS_runMagCal.constprop.14+0xeb2>
 8012980:	2203      	movs	r2, #3
 8012982:	f88b 24cc 	strb.w	r2, [fp, #1228]	; 0x4cc
 8012986:	f88b 8475 	strb.w	r8, [fp, #1141]	; 0x475
 801298a:	f8db 247c 	ldr.w	r2, [fp, #1148]	; 0x47c
 801298e:	f7ff bbaa 	b.w	80120e6 <MEMS_runMagCal.constprop.14+0xcde>
 8012992:	4613      	mov	r3, r2
 8012994:	2d00      	cmp	r5, #0
 8012996:	f43f ad70 	beq.w	801247a <MEMS_runMagCal.constprop.14+0x1072>
 801299a:	e56c      	b.n	8012476 <MEMS_runMagCal.constprop.14+0x106e>
 801299c:	4284      	cmp	r4, r0
 801299e:	f6bf ad64 	bge.w	801246a <MEMS_runMagCal.constprop.14+0x1062>
 80129a2:	4553      	cmp	r3, sl
 80129a4:	da07      	bge.n	80129b6 <MEMS_runMagCal.constprop.14+0x15ae>
 80129a6:	4602      	mov	r2, r0
 80129a8:	2501      	movs	r5, #1
 80129aa:	e561      	b.n	8012470 <MEMS_runMagCal.constprop.14+0x1068>
 80129ac:	f88b c500 	strb.w	ip, [fp, #1280]	; 0x500
 80129b0:	4665      	mov	r5, ip
 80129b2:	f7ff b8c6 	b.w	8011b42 <MEMS_runMagCal.constprop.14+0x73a>
 80129b6:	4603      	mov	r3, r0
 80129b8:	e55d      	b.n	8012476 <MEMS_runMagCal.constprop.14+0x106e>
 80129ba:	f8ad e04e 	strh.w	lr, [sp, #78]	; 0x4e
 80129be:	e4d8      	b.n	8012372 <MEMS_runMagCal.constprop.14+0xf6a>
 80129c0:	4e1e      	ldr	r6, [pc, #120]	; (8012a3c <MEMS_runMagCal.constprop.14+0x1634>)
 80129c2:	9c03      	ldr	r4, [sp, #12]
 80129c4:	ad15      	add	r5, sp, #84	; 0x54
 80129c6:	f856 0b04 	ldr.w	r0, [r6], #4
 80129ca:	f008 fb6d 	bl	801b0a8 <roundf>
 80129ce:	ee07 0a90 	vmov	s15, r0
 80129d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80129d6:	ee17 0a90 	vmov	r0, s15
 80129da:	f825 0014 	strh.w	r0, [r5, r4, lsl #1]
 80129de:	3401      	adds	r4, #1
 80129e0:	2c03      	cmp	r4, #3
 80129e2:	d1f0      	bne.n	80129c6 <MEMS_runMagCal.constprop.14+0x15be>
 80129e4:	ab0f      	add	r3, sp, #60	; 0x3c
 80129e6:	aa10      	add	r2, sp, #64	; 0x40
 80129e8:	eeb0 0a68 	vmov.f32	s0, s17
 80129ec:	4914      	ldr	r1, [pc, #80]	; (8012a40 <MEMS_runMagCal.constprop.14+0x1638>)
 80129ee:	4628      	mov	r0, r5
 80129f0:	f7fd fddc 	bl	80105ac <getMagStats.constprop.26>
 80129f4:	ed9d 7a0f 	vldr	s14, [sp, #60]	; 0x3c
 80129f8:	eddf 7a12 	vldr	s15, [pc, #72]	; 8012a44 <MEMS_runMagCal.constprop.14+0x163c>
 80129fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012a00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a04:	d511      	bpl.n	8012a2a <MEMS_runMagCal.constprop.14+0x1622>
 8012a06:	b980      	cbnz	r0, 8012a2a <MEMS_runMagCal.constprop.14+0x1622>
 8012a08:	f89b 34b4 	ldrb.w	r3, [fp, #1204]	; 0x4b4
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	f000 8093 	beq.w	8012b38 <MEMS_runMagCal.constprop.14+0x1730>
 8012a12:	f89b 34bd 	ldrb.w	r3, [fp, #1213]	; 0x4bd
 8012a16:	ee07 3a90 	vmov	s15, r3
 8012a1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012a1e:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8012a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a26:	f300 8087 	bgt.w	8012b38 <MEMS_runMagCal.constprop.14+0x1730>
 8012a2a:	2300      	movs	r3, #0
 8012a2c:	602b      	str	r3, [r5, #0]
 8012a2e:	80ab      	strh	r3, [r5, #4]
 8012a30:	e619      	b.n	8012666 <MEMS_runMagCal.constprop.14+0x125e>
 8012a32:	bf00      	nop
 8012a34:	20001830 	.word	0x20001830
 8012a38:	3c23d70a 	.word	0x3c23d70a
 8012a3c:	200018a0 	.word	0x200018a0
 8012a40:	200018ac 	.word	0x200018ac
 8012a44:	3ff4cccd 	.word	0x3ff4cccd
 8012a48:	358637bd 	.word	0x358637bd
 8012a4c:	3eaaaaab 	.word	0x3eaaaaab
 8012a50:	3e2aaaab 	.word	0x3e2aaaab
 8012a54:	00000000 	.word	0x00000000
 8012a58:	40060a92 	.word	0x40060a92
 8012a5c:	42960000 	.word	0x42960000
 8012a60:	3a83126f 	.word	0x3a83126f
 8012a64:	430d0000 	.word	0x430d0000
 8012a68:	b12c      	cbz	r4, 8012a76 <MEMS_runMagCal.constprop.14+0x166e>
 8012a6a:	edcd 6a1a 	vstr	s13, [sp, #104]	; 0x68
 8012a6e:	ed8d 7a1b 	vstr	s14, [sp, #108]	; 0x6c
 8012a72:	edcd 7a1c 	vstr	s15, [sp, #112]	; 0x70
 8012a76:	ee07 8a90 	vmov	s15, r8
 8012a7a:	eeb8 bae7 	vcvt.f32.s32	s22, s15
 8012a7e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012a82:	eec7 9a8b 	vdiv.f32	s19, s15, s22
 8012a86:	2000      	movs	r0, #0
 8012a88:	4604      	mov	r4, r0
 8012a8a:	eddd aa1a 	vldr	s21, [sp, #104]	; 0x68
 8012a8e:	ed9d aa1b 	vldr	s20, [sp, #108]	; 0x6c
 8012a92:	ed9d 7a1c 	vldr	s14, [sp, #112]	; 0x70
 8012a96:	ed5f 7a11 	vldr	s15, [pc, #-68]	; 8012a54 <MEMS_runMagCal.constprop.14+0x164c>
 8012a9a:	ee69 aaaa 	vmul.f32	s21, s19, s21
 8012a9e:	ee29 aa8a 	vmul.f32	s20, s19, s20
 8012aa2:	ee69 9a87 	vmul.f32	s19, s19, s14
 8012aa6:	eef0 5a67 	vmov.f32	s11, s15
 8012aaa:	eeb0 5a67 	vmov.f32	s10, s15
 8012aae:	eef0 4a67 	vmov.f32	s9, s15
 8012ab2:	eeb0 4a67 	vmov.f32	s8, s15
 8012ab6:	eef0 3a67 	vmov.f32	s7, s15
 8012aba:	b2c3      	uxtb	r3, r0
 8012abc:	4598      	cmp	r8, r3
 8012abe:	eb01 0500 	add.w	r5, r1, r0
 8012ac2:	d959      	bls.n	8012b78 <MEMS_runMagCal.constprop.14+0x1770>
 8012ac4:	fb95 f3f2 	sdiv	r3, r5, r2
 8012ac8:	fb02 5313 	mls	r3, r2, r3, r5
 8012acc:	b2db      	uxtb	r3, r3
 8012ace:	3304      	adds	r3, #4
 8012ad0:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8012ad4:	3001      	adds	r0, #1
 8012ad6:	f9b3 4502 	ldrsh.w	r4, [r3, #1282]	; 0x502
 8012ada:	ee06 4a10 	vmov	s12, r4
 8012ade:	f9b3 4504 	ldrsh.w	r4, [r3, #1284]	; 0x504
 8012ae2:	f9b3 3506 	ldrsh.w	r3, [r3, #1286]	; 0x506
 8012ae6:	ee06 4a90 	vmov	s13, r4
 8012aea:	ee07 3a10 	vmov	s14, r3
 8012aee:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8012af2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8012af6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012afa:	ee36 6a6a 	vsub.f32	s12, s12, s21
 8012afe:	ee76 6aca 	vsub.f32	s13, s13, s20
 8012b02:	ee37 7a69 	vsub.f32	s14, s14, s19
 8012b06:	eea6 4a06 	vfma.f32	s8, s12, s12
 8012b0a:	2401      	movs	r4, #1
 8012b0c:	eee6 4a26 	vfma.f32	s9, s12, s13
 8012b10:	eee6 3aa6 	vfma.f32	s7, s13, s13
 8012b14:	eea6 5a07 	vfma.f32	s10, s12, s14
 8012b18:	eee6 5a87 	vfma.f32	s11, s13, s14
 8012b1c:	eee7 7a07 	vfma.f32	s15, s14, s14
 8012b20:	e7cb      	b.n	8012aba <MEMS_runMagCal.constprop.14+0x16b2>
 8012b22:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8012b26:	edc9 6a00 	vstr	s13, [r9]
 8012b2a:	e69d      	b.n	8012868 <MEMS_runMagCal.constprop.14+0x1460>
 8012b2c:	fb93 f1f8 	sdiv	r1, r3, r8
 8012b30:	fb08 3311 	mls	r3, r8, r1, r3
 8012b34:	b219      	sxth	r1, r3
 8012b36:	e5b5      	b.n	80126a4 <MEMS_runMagCal.constprop.14+0x129c>
 8012b38:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 8012b3c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8012b40:	ed5f 7a39 	vldr	s15, [pc, #-228]	; 8012a60 <MEMS_runMagCal.constprop.14+0x1658>
 8012b44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012b48:	2303      	movs	r3, #3
 8012b4a:	ee17 0a90 	vmov	r0, s15
 8012b4e:	f88b 34cc 	strb.w	r3, [fp, #1228]	; 0x4cc
 8012b52:	f008 faa9 	bl	801b0a8 <roundf>
 8012b56:	ee07 0a90 	vmov	s15, r0
 8012b5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012b5e:	2300      	movs	r3, #0
 8012b60:	ee17 0a90 	vmov	r0, s15
 8012b64:	f88b 3474 	strb.w	r3, [fp, #1140]	; 0x474
 8012b68:	f8cb 0478 	str.w	r0, [fp, #1144]	; 0x478
 8012b6c:	f7fe bee3 	b.w	8011936 <MEMS_runMagCal.constprop.14+0x52e>
 8012b70:	f8ad 70d8 	strh.w	r7, [sp, #216]	; 0xd8
 8012b74:	f7fe be02 	b.w	801177c <MEMS_runMagCal.constprop.14+0x374>
 8012b78:	b15c      	cbz	r4, 8012b92 <MEMS_runMagCal.constprop.14+0x178a>
 8012b7a:	edcd 3a31 	vstr	s7, [sp, #196]	; 0xc4
 8012b7e:	ed8d 4a2e 	vstr	s8, [sp, #184]	; 0xb8
 8012b82:	edcd 4a2f 	vstr	s9, [sp, #188]	; 0xbc
 8012b86:	ed8d 5a30 	vstr	s10, [sp, #192]	; 0xc0
 8012b8a:	edcd 5a32 	vstr	s11, [sp, #200]	; 0xc8
 8012b8e:	edcd 7a33 	vstr	s15, [sp, #204]	; 0xcc
 8012b92:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8012b96:	eddd 5a2f 	vldr	s11, [sp, #188]	; 0xbc
 8012b9a:	ed9d 6a32 	vldr	s12, [sp, #200]	; 0xc8
 8012b9e:	ed1f 5a56 	vldr	s10, [pc, #-344]	; 8012a48 <MEMS_runMagCal.constprop.14+0x1640>
 8012ba2:	eddd ba2e 	vldr	s23, [sp, #184]	; 0xb8
 8012ba6:	eddd 7a31 	vldr	s15, [sp, #196]	; 0xc4
 8012baa:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8012bae:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8012bb2:	eee5 6aa5 	vfma.f32	s13, s11, s11
 8012bb6:	eee6 6a06 	vfma.f32	s13, s12, s12
 8012bba:	eef4 6ac5 	vcmpe.f32	s13, s10
 8012bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bc2:	f100 80be 	bmi.w	8012d42 <MEMS_runMagCal.constprop.14+0x193a>
 8012bc6:	ee3b daa7 	vadd.f32	s26, s23, s15
 8012bca:	ed1f 6a60 	vldr	s12, [pc, #-384]	; 8012a4c <MEMS_runMagCal.constprop.14+0x1644>
 8012bce:	ed5f 5a60 	vldr	s11, [pc, #-384]	; 8012a50 <MEMS_runMagCal.constprop.14+0x1648>
 8012bd2:	ee3d da07 	vadd.f32	s26, s26, s14
 8012bd6:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 8012bda:	ee2d da06 	vmul.f32	s26, s26, s12
 8012bde:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8012be2:	ee77 7acd 	vsub.f32	s15, s15, s26
 8012be6:	ee7b bacd 	vsub.f32	s23, s23, s26
 8012bea:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8012bee:	ee37 7a4d 	vsub.f32	s14, s14, s26
 8012bf2:	eeeb 7aab 	vfma.f32	s15, s23, s23
 8012bf6:	f04f 0900 	mov.w	r9, #0
 8012bfa:	4649      	mov	r1, r9
 8012bfc:	f04f 0e02 	mov.w	lr, #2
 8012c00:	eee6 7a85 	vfma.f32	s15, s13, s10
 8012c04:	eee7 7a07 	vfma.f32	s15, s14, s14
 8012c08:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8012c0c:	eeb1 cae7 	vsqrt.f32	s24, s15
 8012c10:	ee86 7a0c 	vdiv.f32	s14, s12, s24
 8012c14:	1c4c      	adds	r4, r1, #1
 8012c16:	fb01 f304 	mul.w	r3, r1, r4
 8012c1a:	fb93 f3fe 	sdiv	r3, r3, lr
 8012c1e:	eba9 0303 	sub.w	r3, r9, r3
 8012c22:	b2c8      	uxtb	r0, r1
 8012c24:	aa46      	add	r2, sp, #280	; 0x118
 8012c26:	b2dd      	uxtb	r5, r3
 8012c28:	230c      	movs	r3, #12
 8012c2a:	fb03 2101 	mla	r1, r3, r1, r2
 8012c2e:	4606      	mov	r6, r0
 8012c30:	2200      	movs	r2, #0
 8012c32:	9001      	str	r0, [sp, #4]
 8012c34:	fa5f fc82 	uxtb.w	ip, r2
 8012c38:	9801      	ldr	r0, [sp, #4]
 8012c3a:	eb05 030c 	add.w	r3, r5, ip
 8012c3e:	4560      	cmp	r0, ip
 8012c40:	b2db      	uxtb	r3, r3
 8012c42:	f102 0701 	add.w	r7, r2, #1
 8012c46:	a82e      	add	r0, sp, #184	; 0xb8
 8012c48:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8012c4c:	fb02 fc07 	mul.w	ip, r2, r7
 8012c50:	f200 80db 	bhi.w	8012e0a <MEMS_runMagCal.constprop.14+0x1a02>
 8012c54:	edd0 7a00 	vldr	s15, [r0]
 8012c58:	f000 80cf 	beq.w	8012dfa <MEMS_runMagCal.constprop.14+0x19f2>
 8012c5c:	aa2e      	add	r2, sp, #184	; 0xb8
 8012c5e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012c62:	edd3 7a00 	vldr	s15, [r3]
 8012c66:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012c6a:	edc1 7a00 	vstr	s15, [r1]
 8012c6e:	3603      	adds	r6, #3
 8012c70:	2f03      	cmp	r7, #3
 8012c72:	b2f6      	uxtb	r6, r6
 8012c74:	f101 0104 	add.w	r1, r1, #4
 8012c78:	463a      	mov	r2, r7
 8012c7a:	d1db      	bne.n	8012c34 <MEMS_runMagCal.constprop.14+0x182c>
 8012c7c:	f109 0903 	add.w	r9, r9, #3
 8012c80:	2c03      	cmp	r4, #3
 8012c82:	fa5f f989 	uxtb.w	r9, r9
 8012c86:	4621      	mov	r1, r4
 8012c88:	d1c4      	bne.n	8012c14 <MEMS_runMagCal.constprop.14+0x180c>
 8012c8a:	eddd 4a4e 	vldr	s9, [sp, #312]	; 0x138
 8012c8e:	ed9d 6a49 	vldr	s12, [sp, #292]	; 0x124
 8012c92:	ed9d 4a4b 	vldr	s8, [sp, #300]	; 0x12c
 8012c96:	eddd 5a4d 	vldr	s11, [sp, #308]	; 0x134
 8012c9a:	ed9d 7a4c 	vldr	s14, [sp, #304]	; 0x130
 8012c9e:	ed9d 5a4a 	vldr	s10, [sp, #296]	; 0x128
 8012ca2:	eddd 3a47 	vldr	s7, [sp, #284]	; 0x11c
 8012ca6:	ee66 7a64 	vnmul.f32	s15, s12, s9
 8012caa:	ee65 6ac4 	vnmul.f32	s13, s11, s8
 8012cae:	eee4 7a07 	vfma.f32	s15, s8, s14
 8012cb2:	eee5 6a24 	vfma.f32	s13, s10, s9
 8012cb6:	ee27 7a45 	vnmul.f32	s14, s14, s10
 8012cba:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8012cbe:	eddd 4a46 	vldr	s9, [sp, #280]	; 0x118
 8012cc2:	ed9d 5a48 	vldr	s10, [sp, #288]	; 0x120
 8012cc6:	eea5 7a86 	vfma.f32	s14, s11, s12
 8012cca:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8012cce:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8012cd2:	eee5 7a07 	vfma.f32	s15, s10, s14
 8012cd6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8012cda:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012cde:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ce6:	f240 8172 	bls.w	8012fce <MEMS_runMagCal.constprop.14+0x1bc6>
 8012cea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012cee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cf6:	f2c0 815f 	blt.w	8012fb8 <MEMS_runMagCal.constprop.14+0x1bb0>
 8012cfa:	ed5f caaa 	vldr	s25, [pc, #-680]	; 8012a54 <MEMS_runMagCal.constprop.14+0x164c>
 8012cfe:	ee1c 0a90 	vmov	r0, s25
 8012d02:	f008 f999 	bl	801b038 <cosf>
 8012d06:	ed5f 7aac 	vldr	s15, [pc, #-688]	; 8012a58 <MEMS_runMagCal.constprop.14+0x1650>
 8012d0a:	ee7c 7aa7 	vadd.f32	s15, s25, s15
 8012d0e:	ee07 0a10 	vmov	s14, r0
 8012d12:	ee3c ca0c 	vadd.f32	s24, s24, s24
 8012d16:	ee17 0a90 	vmov	r0, s15
 8012d1a:	eef0 ba4d 	vmov.f32	s23, s26
 8012d1e:	eee7 ba0c 	vfma.f32	s23, s14, s24
 8012d22:	f008 f989 	bl	801b038 <cosf>
 8012d26:	ee06 0a90 	vmov	s13, r0
 8012d2a:	eeb0 7a4d 	vmov.f32	s14, s26
 8012d2e:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8012d32:	eea6 7a8c 	vfma.f32	s14, s13, s24
 8012d36:	eef0 6a6b 	vmov.f32	s13, s23
 8012d3a:	eedd 6a27 	vfnms.f32	s13, s26, s15
 8012d3e:	ee76 7ac7 	vsub.f32	s15, s13, s14
 8012d42:	ee77 6a27 	vadd.f32	s13, s14, s15
 8012d46:	eef0 7ae7 	vabs.f32	s15, s15
 8012d4a:	ee76 6aab 	vadd.f32	s13, s13, s23
 8012d4e:	eef0 baeb 	vabs.f32	s23, s23
 8012d52:	eec6 5a8b 	vdiv.f32	s11, s13, s22
 8012d56:	eef4 7aeb 	vcmpe.f32	s15, s23
 8012d5a:	eeb1 6ae5 	vsqrt.f32	s12, s11
 8012d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d62:	eeb0 7ac7 	vabs.f32	s14, s14
 8012d66:	bf8c      	ite	hi
 8012d68:	eef0 6a6b 	vmovhi.f32	s13, s23
 8012d6c:	eef0 6a67 	vmovls.f32	s13, s15
 8012d70:	eef4 6ac7 	vcmpe.f32	s13, s14
 8012d74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d78:	eef4 7aeb 	vcmpe.f32	s15, s23
 8012d7c:	bf88      	it	hi
 8012d7e:	eef0 6a47 	vmovhi.f32	s13, s14
 8012d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d86:	bfb8      	it	lt
 8012d88:	eef0 7a6b 	vmovlt.f32	s15, s23
 8012d8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012d90:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
 8012d94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d98:	ee66 5aa5 	vmul.f32	s11, s13, s11
 8012d9c:	bfa8      	it	ge
 8012d9e:	eef0 7a47 	vmovge.f32	s15, s14
 8012da2:	eef4 7ae5 	vcmpe.f32	s15, s11
 8012da6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012daa:	ee28 7a86 	vmul.f32	s14, s17, s12
 8012dae:	dc19      	bgt.n	8012de4 <MEMS_runMagCal.constprop.14+0x19dc>
 8012db0:	eeb3 6a04 	vmov.f32	s12, #52	; 0x41a00000  20.0
 8012db4:	ee66 6a86 	vmul.f32	s13, s13, s12
 8012db8:	eef4 7ae6 	vcmpe.f32	s15, s13
 8012dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012dc0:	dd02      	ble.n	8012dc8 <MEMS_runMagCal.constprop.14+0x19c0>
 8012dc2:	f1b8 0f22 	cmp.w	r8, #34	; 0x22
 8012dc6:	d90d      	bls.n	8012de4 <MEMS_runMagCal.constprop.14+0x19dc>
 8012dc8:	ed5f 7adc 	vldr	s15, [pc, #-880]	; 8012a5c <MEMS_runMagCal.constprop.14+0x1654>
 8012dcc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012dd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012dd4:	dc06      	bgt.n	8012de4 <MEMS_runMagCal.constprop.14+0x19dc>
 8012dd6:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8012dda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012dde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012de2:	d517      	bpl.n	8012e14 <MEMS_runMagCal.constprop.14+0x1a0c>
 8012de4:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 8012de8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8012dec:	ed5f 7ae4 	vldr	s15, [pc, #-912]	; 8012a60 <MEMS_runMagCal.constprop.14+0x1658>
 8012df0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012df4:	ee17 0a90 	vmov	r0, s15
 8012df8:	e6ab      	b.n	8012b52 <MEMS_runMagCal.constprop.14+0x174a>
 8012dfa:	ee77 7acd 	vsub.f32	s15, s15, s26
 8012dfe:	1c57      	adds	r7, r2, #1
 8012e00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012e04:	edc1 7a00 	vstr	s15, [r1]
 8012e08:	e731      	b.n	8012c6e <MEMS_runMagCal.constprop.14+0x1866>
 8012e0a:	fb9c f3fe 	sdiv	r3, ip, lr
 8012e0e:	1af3      	subs	r3, r6, r3
 8012e10:	b2db      	uxtb	r3, r3
 8012e12:	e723      	b.n	8012c5c <MEMS_runMagCal.constprop.14+0x1854>
 8012e14:	ed1f 7aed 	vldr	s14, [pc, #-948]	; 8012a64 <MEMS_runMagCal.constprop.14+0x165c>
 8012e18:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8012e1c:	2300      	movs	r3, #0
 8012e1e:	e9cd 3332 	strd	r3, r3, [sp, #200]	; 0xc8
 8012e22:	9335      	str	r3, [sp, #212]	; 0xd4
 8012e24:	ee07 aa10 	vmov	s14, sl
 8012e28:	eeb8 8ac7 	vcvt.f32.s32	s16, s14
 8012e2c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8012e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e34:	d409      	bmi.n	8012e4a <MEMS_runMagCal.constprop.14+0x1a42>
 8012e36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012e3a:	ee17 3a90 	vmov	r3, s15
 8012e3e:	fa0f fa83 	sxth.w	sl, r3
 8012e42:	ee07 aa90 	vmov	s15, sl
 8012e46:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8012e4a:	ed9f 7ace 	vldr	s14, [pc, #824]	; 8013184 <MEMS_runMagCal.constprop.14+0x1d7c>
 8012e4e:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8012e52:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8012e56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e5a:	dc09      	bgt.n	8012e70 <MEMS_runMagCal.constprop.14+0x1a68>
 8012e5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012e60:	ee17 3a90 	vmov	r3, s15
 8012e64:	fa0f fa83 	sxth.w	sl, r3
 8012e68:	ee07 aa90 	vmov	s15, sl
 8012e6c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8012e70:	eddf 7ac5 	vldr	s15, [pc, #788]	; 8013188 <MEMS_runMagCal.constprop.14+0x1d80>
 8012e74:	ed9f 7ac5 	vldr	s14, [pc, #788]	; 801318c <MEMS_runMagCal.constprop.14+0x1d84>
 8012e78:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8012e7c:	ee28 8a27 	vmul.f32	s16, s16, s15
 8012e80:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8012e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e88:	f340 850a 	ble.w	80138a0 <MEMS_runMagCal.constprop.14+0x2498>
 8012e8c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8012e90:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8012e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e98:	f140 8502 	bpl.w	80138a0 <MEMS_runMagCal.constprop.14+0x2498>
 8012e9c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8012ea0:	ee48 7a27 	vmla.f32	s15, s16, s15
 8012ea4:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8013184 <MEMS_runMagCal.constprop.14+0x1d7c>
 8012ea8:	ed9f bab9 	vldr	s22, [pc, #740]	; 8013190 <MEMS_runMagCal.constprop.14+0x1d88>
 8012eac:	ed9f 8ab9 	vldr	s16, [pc, #740]	; 8013194 <MEMS_runMagCal.constprop.14+0x1d8c>
 8012eb0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012eb4:	ee68 aaaa 	vmul.f32	s21, s17, s21
 8012eb8:	ee28 aa8a 	vmul.f32	s20, s17, s20
 8012ebc:	ee68 9aa9 	vmul.f32	s19, s17, s19
 8012ec0:	edcd aa2e 	vstr	s21, [sp, #184]	; 0xb8
 8012ec4:	ed8d aa2f 	vstr	s20, [sp, #188]	; 0xbc
 8012ec8:	edcd 9a30 	vstr	s19, [sp, #192]	; 0xc0
 8012ecc:	edcd 7a31 	vstr	s15, [sp, #196]	; 0xc4
 8012ed0:	edcd 7a34 	vstr	s15, [sp, #208]	; 0xd0
 8012ed4:	2400      	movs	r4, #0
 8012ed6:	4621      	mov	r1, r4
 8012ed8:	2240      	movs	r2, #64	; 0x40
 8012eda:	a836      	add	r0, sp, #216	; 0xd8
 8012edc:	e9cd 4421 	strd	r4, r4, [sp, #132]	; 0x84
 8012ee0:	e9cd 4423 	strd	r4, r4, [sp, #140]	; 0x8c
 8012ee4:	e9cd 441d 	strd	r4, r4, [sp, #116]	; 0x74
 8012ee8:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
 8012eec:	f007 f897 	bl	801a01e <memset>
 8012ef0:	4621      	mov	r1, r4
 8012ef2:	2240      	movs	r2, #64	; 0x40
 8012ef4:	a846      	add	r0, sp, #280	; 0x118
 8012ef6:	f007 f892 	bl	801a01e <memset>
 8012efa:	eddd 4a31 	vldr	s9, [sp, #196]	; 0xc4
 8012efe:	eddf 7aa6 	vldr	s15, [pc, #664]	; 8013198 <MEMS_runMagCal.constprop.14+0x1d90>
 8012f02:	eef4 4ae7 	vcmpe.f32	s9, s15
 8012f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f0a:	f100 80a6 	bmi.w	801305a <MEMS_runMagCal.constprop.14+0x1c52>
 8012f0e:	f89b 4500 	ldrb.w	r4, [fp, #1280]	; 0x500
 8012f12:	f89b 0501 	ldrb.w	r0, [fp, #1281]	; 0x501
 8012f16:	f99b 3502 	ldrsb.w	r3, [fp, #1282]	; 0x502
 8012f1a:	4284      	cmp	r4, r0
 8012f1c:	f103 0301 	add.w	r3, r3, #1
 8012f20:	f000 84b7 	beq.w	8013892 <MEMS_runMagCal.constprop.14+0x248a>
 8012f24:	1b1b      	subs	r3, r3, r4
 8012f26:	fb93 f2f0 	sdiv	r2, r3, r0
 8012f2a:	fb00 3312 	mls	r3, r0, r2, r3
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	b219      	sxth	r1, r3
 8012f32:	bfbc      	itt	lt
 8012f34:	181b      	addlt	r3, r3, r0
 8012f36:	b219      	sxthlt	r1, r3
 8012f38:	f8df 928c 	ldr.w	r9, [pc, #652]	; 80131c8 <MEMS_runMagCal.constprop.14+0x1dc0>
 8012f3c:	2500      	movs	r5, #0
 8012f3e:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 8012f42:	af29      	add	r7, sp, #164	; 0xa4
 8012f44:	2614      	movs	r6, #20
 8012f46:	b2eb      	uxtb	r3, r5
 8012f48:	429c      	cmp	r4, r3
 8012f4a:	d976      	bls.n	801303a <MEMS_runMagCal.constprop.14+0x1c32>
 8012f4c:	194a      	adds	r2, r1, r5
 8012f4e:	fb92 f3f0 	sdiv	r3, r2, r0
 8012f52:	fb00 2313 	mls	r3, r0, r3, r2
 8012f56:	b2db      	uxtb	r3, r3
 8012f58:	3304      	adds	r3, #4
 8012f5a:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8012f5e:	eddd 6a2f 	vldr	s13, [sp, #188]	; 0xbc
 8012f62:	f9b3 2504 	ldrsh.w	r2, [r3, #1284]	; 0x504
 8012f66:	ed9d 6a2e 	vldr	s12, [sp, #184]	; 0xb8
 8012f6a:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8012f6e:	ee05 2a10 	vmov	s10, r2
 8012f72:	f9b3 2502 	ldrsh.w	r2, [r3, #1282]	; 0x502
 8012f76:	f9b3 3506 	ldrsh.w	r3, [r3, #1286]	; 0x506
 8012f7a:	ee07 2a10 	vmov	s14, r2
 8012f7e:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8012f82:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012f86:	eed8 6a85 	vfnms.f32	s13, s17, s10
 8012f8a:	ee98 6a87 	vfnms.f32	s12, s17, s14
 8012f8e:	ee05 3a90 	vmov	s11, r3
 8012f92:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8012f96:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8012f9a:	eea6 7a06 	vfma.f32	s14, s12, s12
 8012f9e:	eed8 7aa5 	vfnms.f32	s15, s17, s11
 8012fa2:	eea7 7aa7 	vfma.f32	s14, s15, s15
 8012fa6:	eeb4 7acb 	vcmpe.f32	s14, s22
 8012faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fae:	eef1 5ac7 	vsqrt.f32	s11, s14
 8012fb2:	d50f      	bpl.n	8012fd4 <MEMS_runMagCal.constprop.14+0x1bcc>
 8012fb4:	3501      	adds	r5, #1
 8012fb6:	e7c6      	b.n	8012f46 <MEMS_runMagCal.constprop.14+0x1b3e>
 8012fb8:	ee17 0a90 	vmov	r0, s15
 8012fbc:	f008 f9a6 	bl	801b30c <acosf>
 8012fc0:	eddf ca76 	vldr	s25, [pc, #472]	; 801319c <MEMS_runMagCal.constprop.14+0x1d94>
 8012fc4:	ee07 0a90 	vmov	s15, r0
 8012fc8:	ee67 caac 	vmul.f32	s25, s15, s25
 8012fcc:	e697      	b.n	8012cfe <MEMS_runMagCal.constprop.14+0x18f6>
 8012fce:	eddf ca74 	vldr	s25, [pc, #464]	; 80131a0 <MEMS_runMagCal.constprop.14+0x1d98>
 8012fd2:	e694      	b.n	8012cfe <MEMS_runMagCal.constprop.14+0x18f6>
 8012fd4:	ee84 7a25 	vdiv.f32	s14, s8, s11
 8012fd8:	f10d 0c84 	add.w	ip, sp, #132	; 0x84
 8012fdc:	aa25      	add	r2, sp, #148	; 0x94
 8012fde:	2300      	movs	r3, #0
 8012fe0:	f8cd 90a0 	str.w	r9, [sp, #160]	; 0xa0
 8012fe4:	ee74 5ae5 	vsub.f32	s11, s9, s11
 8012fe8:	ee27 6a46 	vnmul.f32	s12, s14, s12
 8012fec:	ee67 6a66 	vnmul.f32	s13, s14, s13
 8012ff0:	ee67 7a67 	vnmul.f32	s15, s14, s15
 8012ff4:	ed8d 6a25 	vstr	s12, [sp, #148]	; 0x94
 8012ff8:	edcd 6a26 	vstr	s13, [sp, #152]	; 0x98
 8012ffc:	edcd 7a27 	vstr	s15, [sp, #156]	; 0x9c
 8013000:	eddc 7a00 	vldr	s15, [ip]
 8013004:	ed92 7a00 	vldr	s14, [r2]
 8013008:	eee5 7a87 	vfma.f32	s15, s11, s14
 801300c:	f10d 0ed8 	add.w	lr, sp, #216	; 0xd8
 8013010:	fb06 e803 	mla	r8, r6, r3, lr
 8013014:	4696      	mov	lr, r2
 8013016:	ecec 7a01 	vstmia	ip!, {s15}
 801301a:	edd8 7a00 	vldr	s15, [r8]
 801301e:	ecfe 6a01 	vldmia	lr!, {s13}
 8013022:	eee7 7a26 	vfma.f32	s15, s14, s13
 8013026:	4577      	cmp	r7, lr
 8013028:	ece8 7a01 	vstmia	r8!, {s15}
 801302c:	d1f5      	bne.n	801301a <MEMS_runMagCal.constprop.14+0x1c12>
 801302e:	3301      	adds	r3, #1
 8013030:	2b04      	cmp	r3, #4
 8013032:	f102 0204 	add.w	r2, r2, #4
 8013036:	d1e3      	bne.n	8013000 <MEMS_runMagCal.constprop.14+0x1bf8>
 8013038:	e7bc      	b.n	8012fb4 <MEMS_runMagCal.constprop.14+0x1bac>
 801303a:	aa37      	add	r2, sp, #220	; 0xdc
 801303c:	2103      	movs	r1, #3
 801303e:	2300      	movs	r3, #0
 8013040:	f102 000c 	add.w	r0, r2, #12
 8013044:	428b      	cmp	r3, r1
 8013046:	eb02 0483 	add.w	r4, r2, r3, lsl #2
 801304a:	f000 842d 	beq.w	80138a8 <MEMS_runMagCal.constprop.14+0x24a0>
 801304e:	6825      	ldr	r5, [r4, #0]
 8013050:	eb00 1403 	add.w	r4, r0, r3, lsl #4
 8013054:	3301      	adds	r3, #1
 8013056:	6025      	str	r5, [r4, #0]
 8013058:	e7f4      	b.n	8013044 <MEMS_runMagCal.constprop.14+0x1c3c>
 801305a:	eddf 9a52 	vldr	s19, [pc, #328]	; 80131a4 <MEMS_runMagCal.constprop.14+0x1d9c>
 801305e:	eddf 7a52 	vldr	s15, [pc, #328]	; 80131a8 <MEMS_runMagCal.constprop.14+0x1da0>
 8013062:	eeb0 7a69 	vmov.f32	s14, s19
 8013066:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 801306a:	eddd 6a31 	vldr	s13, [sp, #196]	; 0xc4
 801306e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8013184 <MEMS_runMagCal.constprop.14+0x1d7c>
 8013072:	eef4 7ac6 	vcmpe.f32	s15, s12
 8013076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801307a:	ee85 8aa6 	vdiv.f32	s16, s11, s13
 801307e:	dc0e      	bgt.n	801309e <MEMS_runMagCal.constprop.14+0x1c96>
 8013080:	eddf 7a4a 	vldr	s15, [pc, #296]	; 80131ac <MEMS_runMagCal.constprop.14+0x1da4>
 8013084:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801308c:	dc07      	bgt.n	801309e <MEMS_runMagCal.constprop.14+0x1c96>
 801308e:	eddf 7a42 	vldr	s15, [pc, #264]	; 8013198 <MEMS_runMagCal.constprop.14+0x1d90>
 8013092:	eef4 6ae7 	vcmpe.f32	s13, s15
 8013096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801309a:	f200 809f 	bhi.w	80131dc <MEMS_runMagCal.constprop.14+0x1dd4>
 801309e:	4b44      	ldr	r3, [pc, #272]	; (80131b0 <MEMS_runMagCal.constprop.14+0x1da8>)
 80130a0:	ed9f 8a41 	vldr	s16, [pc, #260]	; 80131a8 <MEMS_runMagCal.constprop.14+0x1da0>
 80130a4:	9325      	str	r3, [sp, #148]	; 0x94
 80130a6:	9334      	str	r3, [sp, #208]	; 0xd0
 80130a8:	ed9f 5a36 	vldr	s10, [pc, #216]	; 8013184 <MEMS_runMagCal.constprop.14+0x1d7c>
 80130ac:	eddd 5a31 	vldr	s11, [sp, #196]	; 0xc4
 80130b0:	ed9d 7a34 	vldr	s14, [sp, #208]	; 0xd0
 80130b4:	ed9d 6a2e 	vldr	s12, [sp, #184]	; 0xb8
 80130b8:	eddd aa2f 	vldr	s21, [sp, #188]	; 0xbc
 80130bc:	ed9d aa30 	vldr	s20, [sp, #192]	; 0xc0
 80130c0:	eddd 6a25 	vldr	s13, [sp, #148]	; 0x94
 80130c4:	eec5 7a25 	vdiv.f32	s15, s10, s11
 80130c8:	2300      	movs	r3, #0
 80130ca:	9347      	str	r3, [sp, #284]	; 0x11c
 80130cc:	9348      	str	r3, [sp, #288]	; 0x120
 80130ce:	9349      	str	r3, [sp, #292]	; 0x124
 80130d0:	934b      	str	r3, [sp, #300]	; 0x12c
 80130d2:	934c      	str	r3, [sp, #304]	; 0x130
 80130d4:	934d      	str	r3, [sp, #308]	; 0x134
 80130d6:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80130da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130de:	ee29 6a06 	vmul.f32	s12, s18, s12
 80130e2:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 80130e6:	edcd 7a4a 	vstr	s15, [sp, #296]	; 0x128
 80130ea:	edcd 7a4e 	vstr	s15, [sp, #312]	; 0x138
 80130ee:	ee69 aa2a 	vmul.f32	s21, s18, s21
 80130f2:	ee29 aa0a 	vmul.f32	s20, s18, s20
 80130f6:	d441      	bmi.n	801317c <MEMS_runMagCal.constprop.14+0x1d74>
 80130f8:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80130fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013100:	d43c      	bmi.n	801317c <MEMS_runMagCal.constprop.14+0x1d74>
 8013102:	eec6 5a87 	vdiv.f32	s11, s13, s14
 8013106:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
 801310a:	ee79 9ae5 	vsub.f32	s19, s19, s11
 801310e:	eddf 6a29 	vldr	s13, [pc, #164]	; 80131b4 <MEMS_runMagCal.constprop.14+0x1dac>
 8013112:	eddf 5a29 	vldr	s11, [pc, #164]	; 80131b8 <MEMS_runMagCal.constprop.14+0x1db0>
 8013116:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801311a:	ee77 6ae6 	vsub.f32	s13, s15, s13
 801311e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8013122:	eef4 7ae5 	vcmpe.f32	s15, s11
 8013126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801312a:	eef0 6ae6 	vabs.f32	s13, s13
 801312e:	eeb0 7ac7 	vabs.f32	s14, s14
 8013132:	dd06      	ble.n	8013142 <MEMS_runMagCal.constprop.14+0x1d3a>
 8013134:	eddf 7a21 	vldr	s15, [pc, #132]	; 80131bc <MEMS_runMagCal.constprop.14+0x1db4>
 8013138:	eef4 6ae7 	vcmpe.f32	s13, s15
 801313c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013140:	d47d      	bmi.n	801323e <MEMS_runMagCal.constprop.14+0x1e36>
 8013142:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80131c0 <MEMS_runMagCal.constprop.14+0x1db8>
 8013146:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801314a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801314e:	db76      	blt.n	801323e <MEMS_runMagCal.constprop.14+0x1e36>
 8013150:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80131c4 <MEMS_runMagCal.constprop.14+0x1dbc>
 8013154:	f89b 3500 	ldrb.w	r3, [fp, #1280]	; 0x500
 8013158:	eec7 7a28 	vdiv.f32	s15, s14, s17
 801315c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8013160:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013164:	ee87 0a28 	vdiv.f32	s0, s14, s17
 8013168:	ee17 2a90 	vmov	r2, s15
 801316c:	b290      	uxth	r0, r2
 801316e:	b113      	cbz	r3, 8013176 <MEMS_runMagCal.constprop.14+0x1d6e>
 8013170:	3b01      	subs	r3, #1
 8013172:	f88b 3500 	strb.w	r3, [fp, #1280]	; 0x500
 8013176:	f7fd fb0b 	bl	8010790 <MEMS_updateMagBufferIndex.constprop.24>
 801317a:	e633      	b.n	8012de4 <MEMS_runMagCal.constprop.14+0x19dc>
 801317c:	eddf 9a09 	vldr	s19, [pc, #36]	; 80131a4 <MEMS_runMagCal.constprop.14+0x1d9c>
 8013180:	e7c5      	b.n	801310e <MEMS_runMagCal.constprop.14+0x1d06>
 8013182:	bf00      	nop
 8013184:	423c0000 	.word	0x423c0000
 8013188:	3c2e4c41 	.word	0x3c2e4c41
 801318c:	3e4ccccd 	.word	0x3e4ccccd
 8013190:	2b8cbccc 	.word	0x2b8cbccc
 8013194:	358637bd 	.word	0x358637bd
 8013198:	3dcccccd 	.word	0x3dcccccd
 801319c:	3eaaaaab 	.word	0x3eaaaaab
 80131a0:	3f860a92 	.word	0x3f860a92
 80131a4:	00000000 	.word	0x00000000
 80131a8:	41f00001 	.word	0x41f00001
 80131ac:	400ccccd 	.word	0x400ccccd
 80131b0:	423c0000 	.word	0x423c0000
 80131b4:	3f8ccccd 	.word	0x3f8ccccd
 80131b8:	3ee66666 	.word	0x3ee66666
 80131bc:	3f266666 	.word	0x3f266666
 80131c0:	3eb33333 	.word	0x3eb33333
 80131c4:	433d0000 	.word	0x433d0000
 80131c8:	bf800000 	.word	0xbf800000
 80131cc:	3f19999a 	.word	0x3f19999a
 80131d0:	3a83126f 	.word	0x3a83126f
 80131d4:	3c23d70a 	.word	0x3c23d70a
 80131d8:	447a0000 	.word	0x447a0000
 80131dc:	2224      	movs	r2, #36	; 0x24
 80131de:	2100      	movs	r1, #0
 80131e0:	a846      	add	r0, sp, #280	; 0x118
 80131e2:	f006 ff1c 	bl	801a01e <memset>
 80131e6:	ad2e      	add	r5, sp, #184	; 0xb8
 80131e8:	2400      	movs	r4, #0
 80131ea:	ecf5 7a01 	vldmia	r5!, {s15}
 80131ee:	ee69 7a27 	vmul.f32	s15, s18, s15
 80131f2:	ee17 0a90 	vmov	r0, s15
 80131f6:	f007 ff57 	bl	801b0a8 <roundf>
 80131fa:	ee07 0a90 	vmov	s15, r0
 80131fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013202:	aa36      	add	r2, sp, #216	; 0xd8
 8013204:	ee17 0a90 	vmov	r0, s15
 8013208:	ab46      	add	r3, sp, #280	; 0x118
 801320a:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 801320e:	f822 0014 	strh.w	r0, [r2, r4, lsl #1]
 8013212:	3401      	adds	r4, #1
 8013214:	2c03      	cmp	r4, #3
 8013216:	ed83 8a00 	vstr	s16, [r3]
 801321a:	d1e6      	bne.n	80131ea <MEMS_runMagCal.constprop.14+0x1de2>
 801321c:	ab25      	add	r3, sp, #148	; 0x94
 801321e:	aa34      	add	r2, sp, #208	; 0xd0
 8013220:	eeb0 0a68 	vmov.f32	s0, s17
 8013224:	a946      	add	r1, sp, #280	; 0x118
 8013226:	a836      	add	r0, sp, #216	; 0xd8
 8013228:	f7fd f9c0 	bl	80105ac <getMagStats.constprop.26>
 801322c:	ed9d 8a25 	vldr	s16, [sp, #148]	; 0x94
 8013230:	ee78 7a08 	vadd.f32	s15, s16, s16
 8013234:	ee28 8a29 	vmul.f32	s16, s16, s19
 8013238:	edcd 7a25 	vstr	s15, [sp, #148]	; 0x94
 801323c:	e734      	b.n	80130a8 <MEMS_runMagCal.constprop.14+0x1ca0>
 801323e:	ed5f 7a1d 	vldr	s15, [pc, #-116]	; 80131cc <MEMS_runMagCal.constprop.14+0x1dc4>
 8013242:	eef4 9ae7 	vcmpe.f32	s19, s15
 8013246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801324a:	d481      	bmi.n	8013150 <MEMS_runMagCal.constprop.14+0x1d48>
 801324c:	ee16 0a10 	vmov	r0, s12
 8013250:	f007 ff2a 	bl	801b0a8 <roundf>
 8013254:	ee07 0a90 	vmov	s15, r0
 8013258:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801325c:	ad15      	add	r5, sp, #84	; 0x54
 801325e:	ee17 3a90 	vmov	r3, s15
 8013262:	ee1a 0a90 	vmov	r0, s21
 8013266:	802b      	strh	r3, [r5, #0]
 8013268:	f007 ff1e 	bl	801b0a8 <roundf>
 801326c:	ee07 0a90 	vmov	s15, r0
 8013270:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013274:	ee1a 0a10 	vmov	r0, s20
 8013278:	ee17 3a90 	vmov	r3, s15
 801327c:	806b      	strh	r3, [r5, #2]
 801327e:	f007 ff13 	bl	801b0a8 <roundf>
 8013282:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 8013286:	ee06 0a90 	vmov	s13, r0
 801328a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801328e:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8013292:	ed5f 7a31 	vldr	s15, [pc, #-196]	; 80131d0 <MEMS_runMagCal.constprop.14+0x1dc8>
 8013296:	ee16 3a90 	vmov	r3, s13
 801329a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801329e:	80ab      	strh	r3, [r5, #4]
 80132a0:	ee17 0a90 	vmov	r0, s15
 80132a4:	f007 ff00 	bl	801b0a8 <roundf>
 80132a8:	ee07 0a90 	vmov	s15, r0
 80132ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80132b0:	ab0f      	add	r3, sp, #60	; 0x3c
 80132b2:	ee17 4a90 	vmov	r4, s15
 80132b6:	eeb0 0a68 	vmov.f32	s0, s17
 80132ba:	4628      	mov	r0, r5
 80132bc:	aa10      	add	r2, sp, #64	; 0x40
 80132be:	a946      	add	r1, sp, #280	; 0x118
 80132c0:	f8cb 4478 	str.w	r4, [fp, #1144]	; 0x478
 80132c4:	f7fd f972 	bl	80105ac <getMagStats.constprop.26>
 80132c8:	f89b 4500 	ldrb.w	r4, [fp, #1280]	; 0x500
 80132cc:	ed5f 6a3f 	vldr	s13, [pc, #-252]	; 80131d4 <MEMS_runMagCal.constprop.14+0x1dcc>
 80132d0:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 80132d4:	005b      	lsls	r3, r3, #1
 80132d6:	ee07 3a90 	vmov	s15, r3
 80132da:	ee07 0a10 	vmov	s14, r0
 80132de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80132e2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80132e6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80132ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80132ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132f2:	f300 82cb 	bgt.w	801388c <MEMS_runMagCal.constprop.14+0x2484>
 80132f6:	ed9d 7a0f 	vldr	s14, [sp, #60]	; 0x3c
 80132fa:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80132fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013306:	f340 82be 	ble.w	8013886 <MEMS_runMagCal.constprop.14+0x247e>
 801330a:	f89b 84b4 	ldrb.w	r8, [fp, #1204]	; 0x4b4
 801330e:	fab8 f888 	clz	r8, r8
 8013312:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8013316:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 801331a:	f8db 7478 	ldr.w	r7, [fp, #1144]	; 0x478
 801331e:	9729      	str	r7, [sp, #164]	; 0xa4
 8013320:	ee69 7a27 	vmul.f32	s15, s18, s15
 8013324:	eec7 7aa9 	vdiv.f32	s15, s15, s19
 8013328:	ee17 0a90 	vmov	r0, s15
 801332c:	f007 febc 	bl	801b0a8 <roundf>
 8013330:	ee07 0a90 	vmov	s15, r0
 8013334:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013338:	ee17 3a90 	vmov	r3, s15
 801333c:	ee69 7a08 	vmul.f32	s15, s18, s16
 8013340:	f88d 30a8 	strb.w	r3, [sp, #168]	; 0xa8
 8013344:	ee17 0a90 	vmov	r0, s15
 8013348:	f007 feae 	bl	801b0a8 <roundf>
 801334c:	ee07 0a90 	vmov	s15, r0
 8013350:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013354:	ed1f 7a60 	vldr	s14, [pc, #-384]	; 80131d8 <MEMS_runMagCal.constprop.14+0x1dd0>
 8013358:	ee17 0a90 	vmov	r0, s15
 801335c:	f10d 02ae 	add.w	r2, sp, #174	; 0xae
 8013360:	f88d 00a9 	strb.w	r0, [sp, #169]	; 0xa9
 8013364:	2300      	movs	r3, #0
 8013366:	a946      	add	r1, sp, #280	; 0x118
 8013368:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 801336c:	edd1 7a00 	vldr	s15, [r1]
 8013370:	f835 1013 	ldrh.w	r1, [r5, r3, lsl #1]
 8013374:	f822 1c04 	strh.w	r1, [r2, #-4]
 8013378:	ee67 7a87 	vmul.f32	s15, s15, s14
 801337c:	3301      	adds	r3, #1
 801337e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013382:	2b03      	cmp	r3, #3
 8013384:	ee17 1a90 	vmov	r1, s15
 8013388:	f822 1f02 	strh.w	r1, [r2, #2]!
 801338c:	d1eb      	bne.n	8013366 <MEMS_runMagCal.constprop.14+0x1f5e>
 801338e:	9b04      	ldr	r3, [sp, #16]
 8013390:	b113      	cbz	r3, 8013398 <MEMS_runMagCal.constprop.14+0x1f90>
 8013392:	23ff      	movs	r3, #255	; 0xff
 8013394:	f88d 30a8 	strb.w	r3, [sp, #168]	; 0xa8
 8013398:	2600      	movs	r6, #0
 801339a:	f88b 6474 	strb.w	r6, [fp, #1140]	; 0x474
 801339e:	f1b8 0f00 	cmp.w	r8, #0
 80133a2:	f43e aac8 	beq.w	8011936 <MEMS_runMagCal.constprop.14+0x52e>
 80133a6:	f89b 34b4 	ldrb.w	r3, [fp, #1204]	; 0x4b4
 80133aa:	f88b 6475 	strb.w	r6, [fp, #1141]	; 0x475
 80133ae:	2b00      	cmp	r3, #0
 80133b0:	f040 80f0 	bne.w	8013594 <MEMS_runMagCal.constprop.14+0x218c>
 80133b4:	4d72      	ldr	r5, [pc, #456]	; (8013580 <MEMS_runMagCal.constprop.14+0x2178>)
 80133b6:	f10d 0938 	add.w	r9, sp, #56	; 0x38
 80133ba:	f10d 06aa 	add.w	r6, sp, #170	; 0xaa
 80133be:	f10d 08a4 	add.w	r8, sp, #164	; 0xa4
 80133c2:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 80133c6:	f8df e1c4 	ldr.w	lr, [pc, #452]	; 801358c <MEMS_runMagCal.constprop.14+0x2184>
 80133ca:	f8cb 747c 	str.w	r7, [fp, #1148]	; 0x47c
 80133ce:	ed1e 0a15 	vldr	s0, [lr, #-84]	; 0xffffffac
 80133d2:	f8bd a0b0 	ldrh.w	sl, [sp, #176]	; 0xb0
 80133d6:	f8bd c0b2 	ldrh.w	ip, [sp, #178]	; 0xb2
 80133da:	eddf 7a6d 	vldr	s15, [pc, #436]	; 8013590 <MEMS_runMagCal.constprop.14+0x2188>
 80133de:	f8d8 8000 	ldr.w	r8, [r8]
 80133e2:	f1ae 0758 	sub.w	r7, lr, #88	; 0x58
 80133e6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80133ea:	f9bd 30aa 	ldrsh.w	r3, [sp, #170]	; 0xaa
 80133ee:	f8bd 20b4 	ldrh.w	r2, [sp, #180]	; 0xb4
 80133f2:	f8ce 8000 	str.w	r8, [lr]
 80133f6:	ee03 3a90 	vmov	s7, r3
 80133fa:	f9bd 30ac 	ldrsh.w	r3, [sp, #172]	; 0xac
 80133fe:	f89b 0485 	ldrb.w	r0, [fp, #1157]	; 0x485
 8013402:	ee04 3a10 	vmov	s8, r3
 8013406:	f9bd 30ae 	ldrsh.w	r3, [sp, #174]	; 0xae
 801340a:	ee04 3a90 	vmov	s9, r3
 801340e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8013412:	fb03 f10a 	mul.w	r1, r3, sl
 8013416:	ee05 1a10 	vmov	s10, r1
 801341a:	fb03 f10c 	mul.w	r1, r3, ip
 801341e:	fb03 f302 	mul.w	r3, r3, r2
 8013422:	ee05 1a90 	vmov	s11, r1
 8013426:	ee06 3a10 	vmov	s12, r3
 801342a:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 801342e:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8013432:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8013436:	ee25 5a27 	vmul.f32	s10, s10, s15
 801343a:	ee65 5aa7 	vmul.f32	s11, s11, s15
 801343e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8013442:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 8013446:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 801344a:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 801344e:	2301      	movs	r3, #1
 8013450:	2100      	movs	r1, #0
 8013452:	22ff      	movs	r2, #255	; 0xff
 8013454:	ed87 5a1f 	vstr	s10, [r7, #124]	; 0x7c
 8013458:	edc7 5a23 	vstr	s11, [r7, #140]	; 0x8c
 801345c:	ed87 6a27 	vstr	s12, [r7, #156]	; 0x9c
 8013460:	edc7 3a1c 	vstr	s7, [r7, #112]	; 0x70
 8013464:	ed87 4a1d 	vstr	s8, [r7, #116]	; 0x74
 8013468:	edc7 4a1e 	vstr	s9, [r7, #120]	; 0x78
 801346c:	f88b 34b4 	strb.w	r3, [fp, #1204]	; 0x4b4
 8013470:	f88b 34cd 	strb.w	r3, [fp, #1229]	; 0x4cd
 8013474:	f88b 1484 	strb.w	r1, [fp, #1156]	; 0x484
 8013478:	f88b 2486 	strb.w	r2, [fp, #1158]	; 0x486
 801347c:	2c00      	cmp	r4, #0
 801347e:	d04e      	beq.n	801351e <MEMS_runMagCal.constprop.14+0x2116>
 8013480:	ed9f 3a40 	vldr	s6, [pc, #256]	; 8013584 <MEMS_runMagCal.constprop.14+0x217c>
 8013484:	f89b 7501 	ldrb.w	r7, [fp, #1281]	; 0x501
 8013488:	ee20 3a03 	vmul.f32	s6, s0, s6
 801348c:	f04f 32ff 	mov.w	r2, #4294967295
 8013490:	468c      	mov	ip, r1
 8013492:	fb9c f3f7 	sdiv	r3, ip, r7
 8013496:	fb07 c313 	mls	r3, r7, r3, ip
 801349a:	b2db      	uxtb	r3, r3
 801349c:	3315      	adds	r3, #21
 801349e:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 80134a2:	f102 0c01 	add.w	ip, r2, #1
 80134a6:	f9b3 247c 	ldrsh.w	r2, [r3, #1148]	; 0x47c
 80134aa:	ee07 2a90 	vmov	s15, r2
 80134ae:	f9b3 247a 	ldrsh.w	r2, [r3, #1146]	; 0x47a
 80134b2:	f9b3 347e 	ldrsh.w	r3, [r3, #1150]	; 0x47e
 80134b6:	ee06 2a90 	vmov	s13, r2
 80134ba:	fb9c f2f0 	sdiv	r2, ip, r0
 80134be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80134c2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80134c6:	ee77 7ac4 	vsub.f32	s15, s15, s8
 80134ca:	ee07 3a10 	vmov	s14, r3
 80134ce:	ee76 6ae3 	vsub.f32	s13, s13, s7
 80134d2:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80134d6:	ee66 6a85 	vmul.f32	s13, s13, s10
 80134da:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80134de:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80134e2:	eee6 7aa6 	vfma.f32	s15, s13, s13
 80134e6:	fb00 c212 	mls	r2, r0, r2, ip
 80134ea:	b252      	sxtb	r2, r2
 80134ec:	ee37 7a64 	vsub.f32	s14, s14, s9
 80134f0:	3101      	adds	r1, #1
 80134f2:	ee27 7a06 	vmul.f32	s14, s14, s12
 80134f6:	b209      	sxth	r1, r1
 80134f8:	eee7 7a07 	vfma.f32	s15, s14, s14
 80134fc:	eb0b 0342 	add.w	r3, fp, r2, lsl #1
 8013500:	42a1      	cmp	r1, r4
 8013502:	468c      	mov	ip, r1
 8013504:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8013508:	ee67 7a03 	vmul.f32	s15, s14, s6
 801350c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013510:	ee17 ea90 	vmov	lr, s15
 8013514:	f8a3 e488 	strh.w	lr, [r3, #1160]	; 0x488
 8013518:	dbbb      	blt.n	8013492 <MEMS_runMagCal.constprop.14+0x208a>
 801351a:	f88b 2486 	strb.w	r2, [fp, #1158]	; 0x486
 801351e:	4284      	cmp	r4, r0
 8013520:	bf28      	it	cs
 8013522:	4604      	movcs	r4, r0
 8013524:	4629      	mov	r1, r5
 8013526:	4630      	mov	r0, r6
 8013528:	464b      	mov	r3, r9
 801352a:	aa0d      	add	r2, sp, #52	; 0x34
 801352c:	f88b 4484 	strb.w	r4, [fp, #1156]	; 0x484
 8013530:	f7fd f83c 	bl	80105ac <getMagStats.constprop.26>
 8013534:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8013588 <MEMS_runMagCal.constprop.14+0x2180>
 8013538:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 801353c:	edd9 6a00 	vldr	s13, [r9]
 8013540:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013544:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8013548:	eef0 7ae7 	vabs.f32	s15, s15
 801354c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013554:	f140 8175 	bpl.w	8013842 <MEMS_runMagCal.constprop.14+0x243a>
 8013558:	eef4 6ac7 	vcmpe.f32	s13, s14
 801355c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013560:	f140 816f 	bpl.w	8013842 <MEMS_runMagCal.constprop.14+0x243a>
 8013564:	2303      	movs	r3, #3
 8013566:	f89d 20a8 	ldrb.w	r2, [sp, #168]	; 0xa8
 801356a:	f88b 34cc 	strb.w	r3, [fp, #1228]	; 0x4cc
 801356e:	2ac8      	cmp	r2, #200	; 0xc8
 8013570:	f67e a9e1 	bls.w	8011936 <MEMS_runMagCal.constprop.14+0x52e>
 8013574:	2302      	movs	r3, #2
 8013576:	f88b 34cc 	strb.w	r3, [fp, #1228]	; 0x4cc
 801357a:	f7fe b9dc 	b.w	8011936 <MEMS_runMagCal.constprop.14+0x52e>
 801357e:	bf00      	nop
 8013580:	200018ac 	.word	0x200018ac
 8013584:	42c80000 	.word	0x42c80000
 8013588:	423c0000 	.word	0x423c0000
 801358c:	20001888 	.word	0x20001888
 8013590:	358637bd 	.word	0x358637bd
 8013594:	f8bd 00b4 	ldrh.w	r0, [sp, #180]	; 0xb4
 8013598:	f8bd 10b0 	ldrh.w	r1, [sp, #176]	; 0xb0
 801359c:	f8bd 20b2 	ldrh.w	r2, [sp, #178]	; 0xb2
 80135a0:	ed1f 6a05 	vldr	s12, [pc, #-20]	; 8013590 <MEMS_runMagCal.constprop.14+0x2188>
 80135a4:	4dd2      	ldr	r5, [pc, #840]	; (80138f0 <MEMS_runMagCal.constprop.14+0x24e8>)
 80135a6:	9647      	str	r6, [sp, #284]	; 0x11c
 80135a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80135ac:	fb03 f101 	mul.w	r1, r3, r1
 80135b0:	fb03 f202 	mul.w	r2, r3, r2
 80135b4:	fb03 f300 	mul.w	r3, r3, r0
 80135b8:	ee06 1a90 	vmov	s13, r1
 80135bc:	ee07 2a10 	vmov	s14, r2
 80135c0:	ee07 3a90 	vmov	s15, r3
 80135c4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80135c8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80135cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80135d0:	ee66 6a86 	vmul.f32	s13, s13, s12
 80135d4:	ee27 7a06 	vmul.f32	s14, s14, s12
 80135d8:	ee67 7a86 	vmul.f32	s15, s15, s12
 80135dc:	ed15 0a1e 	vldr	s0, [r5, #-120]	; 0xffffff88
 80135e0:	9648      	str	r6, [sp, #288]	; 0x120
 80135e2:	4629      	mov	r1, r5
 80135e4:	ab36      	add	r3, sp, #216	; 0xd8
 80135e6:	aa0d      	add	r2, sp, #52	; 0x34
 80135e8:	9649      	str	r6, [sp, #292]	; 0x124
 80135ea:	964b      	str	r6, [sp, #300]	; 0x12c
 80135ec:	964c      	str	r6, [sp, #304]	; 0x130
 80135ee:	964d      	str	r6, [sp, #308]	; 0x134
 80135f0:	f10d 0938 	add.w	r9, sp, #56	; 0x38
 80135f4:	f1a5 001e 	sub.w	r0, r5, #30
 80135f8:	f10d 06aa 	add.w	r6, sp, #170	; 0xaa
 80135fc:	edcd 6a46 	vstr	s13, [sp, #280]	; 0x118
 8013600:	ed8d 7a4a 	vstr	s14, [sp, #296]	; 0x128
 8013604:	edcd 7a4e 	vstr	s15, [sp, #312]	; 0x138
 8013608:	f7fc ffd0 	bl	80105ac <getMagStats.constprop.26>
 801360c:	a946      	add	r1, sp, #280	; 0x118
 801360e:	464b      	mov	r3, r9
 8013610:	4630      	mov	r0, r6
 8013612:	aa0d      	add	r2, sp, #52	; 0x34
 8013614:	ed15 0a1e 	vldr	s0, [r5, #-120]	; 0xffffff88
 8013618:	f7fc ffc8 	bl	80105ac <getMagStats.constprop.26>
 801361c:	eddf 6ab5 	vldr	s13, [pc, #724]	; 80138f4 <MEMS_runMagCal.constprop.14+0x24ec>
 8013620:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 8013624:	ed99 7a00 	vldr	s14, [r9]
 8013628:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801362c:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8013630:	eef0 7ae7 	vabs.f32	s15, s15
 8013634:	eef4 7ae6 	vcmpe.f32	s15, s13
 8013638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801363c:	f140 8110 	bpl.w	8013860 <MEMS_runMagCal.constprop.14+0x2458>
 8013640:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8013644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013648:	f140 810a 	bpl.w	8013860 <MEMS_runMagCal.constprop.14+0x2458>
 801364c:	2303      	movs	r3, #3
 801364e:	eddd 6a36 	vldr	s13, [sp, #216]	; 0xd8
 8013652:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8013656:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801365a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801365e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013662:	f57e a968 	bpl.w	8011936 <MEMS_runMagCal.constprop.14+0x52e>
 8013666:	f89b 24cc 	ldrb.w	r2, [fp, #1228]	; 0x4cc
 801366a:	429a      	cmp	r2, r3
 801366c:	f63e a963 	bhi.w	8011936 <MEMS_runMagCal.constprop.14+0x52e>
 8013670:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8013674:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013678:	eef4 6ae7 	vcmpe.f32	s13, s15
 801367c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013680:	d40e      	bmi.n	80136a0 <MEMS_runMagCal.constprop.14+0x2298>
 8013682:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 8013686:	eef4 6ae7 	vcmpe.f32	s13, s15
 801368a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801368e:	f140 80d4 	bpl.w	801383a <MEMS_runMagCal.constprop.14+0x2432>
 8013692:	f89b 24bc 	ldrb.w	r2, [fp, #1212]	; 0x4bc
 8013696:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 801369a:	429a      	cmp	r2, r3
 801369c:	f080 80cd 	bcs.w	801383a <MEMS_runMagCal.constprop.14+0x2432>
 80136a0:	4b95      	ldr	r3, [pc, #596]	; (80138f8 <MEMS_runMagCal.constprop.14+0x24f0>)
 80136a2:	f9bb 14c0 	ldrsh.w	r1, [fp, #1216]	; 0x4c0
 80136a6:	f9bd 70ac 	ldrsh.w	r7, [sp, #172]	; 0xac
 80136aa:	f9bb 04be 	ldrsh.w	r0, [fp, #1214]	; 0x4be
 80136ae:	f9bd e0aa 	ldrsh.w	lr, [sp, #170]	; 0xaa
 80136b2:	edd3 5a01 	vldr	s11, [r3, #4]
 80136b6:	f9bb 24c2 	ldrsh.w	r2, [fp, #1218]	; 0x4c2
 80136ba:	f9bd 40ae 	ldrsh.w	r4, [sp, #174]	; 0xae
 80136be:	1bcb      	subs	r3, r1, r7
 80136c0:	eba0 0c0e 	sub.w	ip, r0, lr
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	bfb8      	it	lt
 80136c8:	425b      	neglt	r3, r3
 80136ca:	f1bc 0f00 	cmp.w	ip, #0
 80136ce:	bfb8      	it	lt
 80136d0:	f1cc 0c00 	rsblt	ip, ip, #0
 80136d4:	4563      	cmp	r3, ip
 80136d6:	bfb8      	it	lt
 80136d8:	4663      	movlt	r3, ip
 80136da:	eba2 0c04 	sub.w	ip, r2, r4
 80136de:	f1bc 0f00 	cmp.w	ip, #0
 80136e2:	b21b      	sxth	r3, r3
 80136e4:	bfb8      	it	lt
 80136e6:	f1cc 0c00 	rsblt	ip, ip, #0
 80136ea:	4563      	cmp	r3, ip
 80136ec:	bfb8      	it	lt
 80136ee:	4663      	movlt	r3, ip
 80136f0:	b21b      	sxth	r3, r3
 80136f2:	ee07 3a90 	vmov	s15, r3
 80136f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80136fa:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 80136fe:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8013702:	eef4 7ac6 	vcmpe.f32	s15, s12
 8013706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801370a:	f140 8096 	bpl.w	801383a <MEMS_runMagCal.constprop.14+0x2432>
 801370e:	ee37 7a26 	vadd.f32	s14, s14, s13
 8013712:	f8bb 34c4 	ldrh.w	r3, [fp, #1220]	; 0x4c4
 8013716:	eec6 3a87 	vdiv.f32	s7, s13, s14
 801371a:	ee04 3a90 	vmov	s9, r3
 801371e:	f8bb 34c6 	ldrh.w	r3, [fp, #1222]	; 0x4c6
 8013722:	ee05 3a10 	vmov	s10, r3
 8013726:	f8bb 34c8 	ldrh.w	r3, [fp, #1224]	; 0x4c8
 801372a:	ee07 0a90 	vmov	s15, r0
 801372e:	ee05 3a90 	vmov	s11, r3
 8013732:	f89b 34bc 	ldrb.w	r3, [fp, #1212]	; 0x4bc
 8013736:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801373a:	ee36 4a63 	vsub.f32	s8, s12, s7
 801373e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8013742:	ee06 3a10 	vmov	s12, r3
 8013746:	ee03 ea10 	vmov	s6, lr
 801374a:	f8bd 30b0 	ldrh.w	r3, [sp, #176]	; 0xb0
 801374e:	ee07 1a90 	vmov	s15, r1
 8013752:	ee00 3a90 	vmov	s1, r3
 8013756:	ee66 6a84 	vmul.f32	s13, s13, s8
 801375a:	eeb8 2ac3 	vcvt.f32.s32	s4, s6
 801375e:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8013762:	f8bd 30b2 	ldrh.w	r3, [sp, #178]	; 0xb2
 8013766:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801376a:	ee64 4a84 	vmul.f32	s9, s9, s8
 801376e:	ee03 7a10 	vmov	s6, r7
 8013772:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8013776:	eee3 6a82 	vfma.f32	s13, s7, s4
 801377a:	ee07 2a90 	vmov	s15, r2
 801377e:	ee01 3a10 	vmov	s2, r3
 8013782:	ee27 7a04 	vmul.f32	s14, s14, s8
 8013786:	f8bd 30b4 	ldrh.w	r3, [sp, #180]	; 0xb4
 801378a:	eef8 2ac3 	vcvt.f32.s32	s5, s6
 801378e:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8013792:	eee3 4aa0 	vfma.f32	s9, s7, s1
 8013796:	ee01 3a90 	vmov	s3, r3
 801379a:	ee25 5a04 	vmul.f32	s10, s10, s8
 801379e:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 80137a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80137a6:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80137aa:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80137ae:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 80137b2:	ee03 4a10 	vmov	s6, r4
 80137b6:	eea3 7aa2 	vfma.f32	s14, s7, s5
 80137ba:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 80137be:	ee67 7a84 	vmul.f32	s15, s15, s8
 80137c2:	ee65 5a84 	vmul.f32	s11, s11, s8
 80137c6:	ee26 6a04 	vmul.f32	s12, s12, s8
 80137ca:	ee16 2a90 	vmov	r2, s13
 80137ce:	ee04 3a10 	vmov	s8, r3
 80137d2:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 80137d6:	eea3 5a81 	vfma.f32	s10, s7, s2
 80137da:	f8ad 20aa 	strh.w	r2, [sp, #170]	; 0xaa
 80137de:	eefc 4ae4 	vcvt.u32.f32	s9, s9
 80137e2:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 80137e6:	ee14 2a90 	vmov	r2, s9
 80137ea:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 80137ee:	eee3 7a83 	vfma.f32	s15, s7, s6
 80137f2:	f8ad 20b0 	strh.w	r2, [sp, #176]	; 0xb0
 80137f6:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80137fa:	eee3 5aa1 	vfma.f32	s11, s7, s3
 80137fe:	ee17 2a10 	vmov	r2, s14
 8013802:	eea3 6a84 	vfma.f32	s12, s7, s8
 8013806:	f8ad 20ac 	strh.w	r2, [sp, #172]	; 0xac
 801380a:	eebc 5ac5 	vcvt.u32.f32	s10, s10
 801380e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013812:	ee15 2a10 	vmov	r2, s10
 8013816:	eefc 5ae5 	vcvt.u32.f32	s11, s11
 801381a:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 801381e:	f8ad 20b2 	strh.w	r2, [sp, #178]	; 0xb2
 8013822:	ee17 2a90 	vmov	r2, s15
 8013826:	ee16 3a10 	vmov	r3, s12
 801382a:	f8ad 20ae 	strh.w	r2, [sp, #174]	; 0xae
 801382e:	ee15 2a90 	vmov	r2, s11
 8013832:	f88d 30a8 	strb.w	r3, [sp, #168]	; 0xa8
 8013836:	f8ad 20b4 	strh.w	r2, [sp, #180]	; 0xb4
 801383a:	9f29      	ldr	r7, [sp, #164]	; 0xa4
 801383c:	f89b 4500 	ldrb.w	r4, [fp, #1280]	; 0x500
 8013840:	e5bd      	b.n	80133be <MEMS_runMagCal.constprop.14+0x1fb6>
 8013842:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8013846:	eef4 7ac7 	vcmpe.f32	s15, s14
 801384a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801384e:	d516      	bpl.n	801387e <MEMS_runMagCal.constprop.14+0x2476>
 8013850:	eef4 6ac7 	vcmpe.f32	s13, s14
 8013854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013858:	bf4c      	ite	mi
 801385a:	2302      	movmi	r3, #2
 801385c:	2301      	movpl	r3, #1
 801385e:	e682      	b.n	8013566 <MEMS_runMagCal.constprop.14+0x215e>
 8013860:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8013864:	eef4 7ae6 	vcmpe.f32	s15, s13
 8013868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801386c:	d509      	bpl.n	8013882 <MEMS_runMagCal.constprop.14+0x247a>
 801386e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8013872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013876:	bf4c      	ite	mi
 8013878:	2302      	movmi	r3, #2
 801387a:	2301      	movpl	r3, #1
 801387c:	e6e7      	b.n	801364e <MEMS_runMagCal.constprop.14+0x2246>
 801387e:	2301      	movs	r3, #1
 8013880:	e671      	b.n	8013566 <MEMS_runMagCal.constprop.14+0x215e>
 8013882:	2301      	movs	r3, #1
 8013884:	e6e3      	b.n	801364e <MEMS_runMagCal.constprop.14+0x2246>
 8013886:	f04f 0801 	mov.w	r8, #1
 801388a:	e544      	b.n	8013316 <MEMS_runMagCal.constprop.14+0x1f0e>
 801388c:	f04f 0800 	mov.w	r8, #0
 8013890:	e541      	b.n	8013316 <MEMS_runMagCal.constprop.14+0x1f0e>
 8013892:	fb93 f1f4 	sdiv	r1, r3, r4
 8013896:	fb04 3311 	mls	r3, r4, r1, r3
 801389a:	b219      	sxth	r1, r3
 801389c:	f7ff bb4c 	b.w	8012f38 <MEMS_runMagCal.constprop.14+0x1b30>
 80138a0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80138a4:	f7ff bafe 	b.w	8012ea4 <MEMS_runMagCal.constprop.14+0x1a9c>
 80138a8:	3214      	adds	r2, #20
 80138aa:	1e59      	subs	r1, r3, #1
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	f47f abc6 	bne.w	801303e <MEMS_runMagCal.constprop.14+0x1c36>
 80138b2:	2240      	movs	r2, #64	; 0x40
 80138b4:	2100      	movs	r1, #0
 80138b6:	a846      	add	r0, sp, #280	; 0x118
 80138b8:	f006 fbb1 	bl	801a01e <memset>
 80138bc:	a946      	add	r1, sp, #280	; 0x118
 80138be:	2200      	movs	r2, #0
 80138c0:	f04f 0e14 	mov.w	lr, #20
 80138c4:	ac36      	add	r4, sp, #216	; 0xd8
 80138c6:	b256      	sxtb	r6, r2
 80138c8:	2000      	movs	r0, #0
 80138ca:	eb01 0986 	add.w	r9, r1, r6, lsl #2
 80138ce:	4603      	mov	r3, r0
 80138d0:	eb04 1802 	add.w	r8, r4, r2, lsl #4
 80138d4:	fb0e 4c02 	mla	ip, lr, r2, r4
 80138d8:	ac46      	add	r4, sp, #280	; 0x118
 80138da:	eb04 1503 	add.w	r5, r4, r3, lsl #4
 80138de:	b2c4      	uxtb	r4, r0
 80138e0:	462f      	mov	r7, r5
 80138e2:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 80138e6:	468a      	mov	sl, r1
 80138e8:	eddf 7a05 	vldr	s15, [pc, #20]	; 8013900 <MEMS_runMagCal.constprop.14+0x24f8>
 80138ec:	e014      	b.n	8013918 <MEMS_runMagCal.constprop.14+0x2510>
 80138ee:	bf00      	nop
 80138f0:	200018ac 	.word	0x200018ac
 80138f4:	423c0000 	.word	0x423c0000
 80138f8:	20001830 	.word	0x20001830
 80138fc:	3dcccccd 	.word	0x3dcccccd
 8013900:	00000000 	.word	0x00000000
 8013904:	3e99999a 	.word	0x3e99999a
 8013908:	3f666666 	.word	0x3f666666
 801390c:	ecfa 6a01 	vldmia	sl!, {s13}
 8013910:	ecb7 7a01 	vldmia	r7!, {s14}
 8013914:	eee6 7a87 	vfma.f32	s15, s13, s14
 8013918:	45a2      	cmp	sl, r4
 801391a:	d1f7      	bne.n	801390c <MEMS_runMagCal.constprop.14+0x2504>
 801391c:	429e      	cmp	r6, r3
 801391e:	f000 80b5 	beq.w	8013a8c <MEMS_runMagCal.constprop.14+0x2684>
 8013922:	009b      	lsls	r3, r3, #2
 8013924:	441d      	add	r5, r3
 8013926:	edd5 6a00 	vldr	s13, [r5]
 801392a:	eeb0 7ae6 	vabs.f32	s14, s13
 801392e:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8013932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013936:	f53f ab90 	bmi.w	801305a <MEMS_runMagCal.constprop.14+0x1c52>
 801393a:	eb08 0403 	add.w	r4, r8, r3
 801393e:	ed94 7a00 	vldr	s14, [r4]
 8013942:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013946:	440b      	add	r3, r1
 8013948:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801394c:	ed83 7a00 	vstr	s14, [r3]
 8013950:	3001      	adds	r0, #1
 8013952:	b243      	sxtb	r3, r0
 8013954:	42b3      	cmp	r3, r6
 8013956:	ddbf      	ble.n	80138d8 <MEMS_runMagCal.constprop.14+0x24d0>
 8013958:	3201      	adds	r2, #1
 801395a:	2a04      	cmp	r2, #4
 801395c:	f101 0110 	add.w	r1, r1, #16
 8013960:	d1b0      	bne.n	80138c4 <MEMS_runMagCal.constprop.14+0x24bc>
 8013962:	aa21      	add	r2, sp, #132	; 0x84
 8013964:	a91d      	add	r1, sp, #116	; 0x74
 8013966:	a846      	add	r0, sp, #280	; 0x118
 8013968:	f7fc fa1a 	bl	800fda0 <llEvaluate.constprop.23>
 801396c:	ed5f 9a1d 	vldr	s19, [pc, #-116]	; 80138fc <MEMS_runMagCal.constprop.14+0x24f4>
 8013970:	ad21      	add	r5, sp, #132	; 0x84
 8013972:	ae25      	add	r6, sp, #148	; 0x94
 8013974:	f10d 0890 	add.w	r8, sp, #144	; 0x90
 8013978:	2400      	movs	r4, #0
 801397a:	f04f 577e 	mov.w	r7, #1065353216	; 0x3f800000
 801397e:	e9cd 4421 	strd	r4, r4, [sp, #132]	; 0x84
 8013982:	e9cd 4423 	strd	r4, r4, [sp, #140]	; 0x8c
 8013986:	aa21      	add	r2, sp, #132	; 0x84
 8013988:	a925      	add	r1, sp, #148	; 0x94
 801398a:	a846      	add	r0, sp, #280	; 0x118
 801398c:	f845 7b04 	str.w	r7, [r5], #4
 8013990:	f7fc fa06 	bl	800fda0 <llEvaluate.constprop.23>
 8013994:	ecb6 7a01 	vldmia	r6!, {s14}
 8013998:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801399c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139a0:	f340 8083 	ble.w	8013aaa <MEMS_runMagCal.constprop.14+0x26a2>
 80139a4:	eef1 7ac7 	vsqrt.f32	s15, s14
 80139a8:	eef4 9ae7 	vcmpe.f32	s19, s15
 80139ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139b0:	bfb8      	it	lt
 80139b2:	eef0 9a67 	vmovlt.f32	s19, s15
 80139b6:	45a8      	cmp	r8, r5
 80139b8:	d1e1      	bne.n	801397e <MEMS_runMagCal.constprop.14+0x2576>
 80139ba:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 80139be:	eddd 6a20 	vldr	s13, [sp, #128]	; 0x80
 80139c2:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 80139c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80139ca:	eef4 6ae7 	vcmpe.f32	s13, s15
 80139ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139d2:	d501      	bpl.n	80139d8 <MEMS_runMagCal.constprop.14+0x25d0>
 80139d4:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 80139d8:	ed9d 4a1d 	vldr	s8, [sp, #116]	; 0x74
 80139dc:	ed9d 5a1e 	vldr	s10, [sp, #120]	; 0x78
 80139e0:	ed1f 2a39 	vldr	s4, [pc, #-228]	; 8013900 <MEMS_runMagCal.constprop.14+0x24f8>
 80139e4:	ed9d 6a1f 	vldr	s12, [sp, #124]	; 0x7c
 80139e8:	eddd 5a30 	vldr	s11, [sp, #192]	; 0xc0
 80139ec:	eddd 3a2e 	vldr	s7, [sp, #184]	; 0xb8
 80139f0:	eddd 4a2f 	vldr	s9, [sp, #188]	; 0xbc
 80139f4:	eddd 6a20 	vldr	s13, [sp, #128]	; 0x80
 80139f8:	ed9d 3a31 	vldr	s6, [sp, #196]	; 0xc4
 80139fc:	ed5f 2a3f 	vldr	s5, [pc, #-252]	; 8013904 <MEMS_runMagCal.constprop.14+0x24fc>
 8013a00:	eeb0 7ac4 	vabs.f32	s14, s8
 8013a04:	eef0 7ac5 	vabs.f32	s15, s10
 8013a08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013a0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a10:	bfa8      	it	ge
 8013a12:	eef0 7a47 	vmovge.f32	s15, s14
 8013a16:	eef4 7ac2 	vcmpe.f32	s15, s4
 8013a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a1e:	eeb0 7ac6 	vabs.f32	s14, s12
 8013a22:	bfb8      	it	lt
 8013a24:	eef0 7a42 	vmovlt.f32	s15, s4
 8013a28:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a30:	bfa8      	it	ge
 8013a32:	eef0 7a47 	vmovge.f32	s15, s14
 8013a36:	ee35 6a86 	vadd.f32	s12, s11, s12
 8013a3a:	ee33 4a84 	vadd.f32	s8, s7, s8
 8013a3e:	ee34 5a85 	vadd.f32	s10, s9, s10
 8013a42:	ee73 5a26 	vadd.f32	s11, s6, s13
 8013a46:	eef4 7ae2 	vcmpe.f32	s15, s5
 8013a4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a4e:	ed8d 4a2e 	vstr	s8, [sp, #184]	; 0xb8
 8013a52:	ed8d 5a2f 	vstr	s10, [sp, #188]	; 0xbc
 8013a56:	ed8d 6a30 	vstr	s12, [sp, #192]	; 0xc0
 8013a5a:	edcd 5a31 	vstr	s11, [sp, #196]	; 0xc4
 8013a5e:	eeb0 7ae6 	vabs.f32	s14, s13
 8013a62:	d50a      	bpl.n	8013a7a <MEMS_runMagCal.constprop.14+0x2672>
 8013a64:	ed5f 6a58 	vldr	s13, [pc, #-352]	; 8013908 <MEMS_runMagCal.constprop.14+0x2500>
 8013a68:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8013a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a70:	d503      	bpl.n	8013a7a <MEMS_runMagCal.constprop.14+0x2672>
 8013a72:	9b00      	ldr	r3, [sp, #0]
 8013a74:	2b01      	cmp	r3, #1
 8013a76:	f63f aaf6 	bhi.w	8013066 <MEMS_runMagCal.constprop.14+0x1c5e>
 8013a7a:	9b00      	ldr	r3, [sp, #0]
 8013a7c:	3301      	adds	r3, #1
 8013a7e:	b2db      	uxtb	r3, r3
 8013a80:	2b05      	cmp	r3, #5
 8013a82:	9300      	str	r3, [sp, #0]
 8013a84:	f47f aa26 	bne.w	8012ed4 <MEMS_runMagCal.constprop.14+0x1acc>
 8013a88:	f7ff baed 	b.w	8013066 <MEMS_runMagCal.constprop.14+0x1c5e>
 8013a8c:	ed9c 7a00 	vldr	s14, [ip]
 8013a90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013a94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a98:	f57f aadf 	bpl.w	801305a <MEMS_runMagCal.constprop.14+0x1c52>
 8013a9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013aa0:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8013aa4:	ed89 7a00 	vstr	s14, [r9]
 8013aa8:	e752      	b.n	8013950 <MEMS_runMagCal.constprop.14+0x2548>
 8013aaa:	eef2 9a04 	vmov.f32	s19, #36	; 0x41200000  10.0
 8013aae:	e782      	b.n	80139b6 <MEMS_runMagCal.constprop.14+0x25ae>

08013ab0 <m_kalman_3gyro.isra.6.constprop.36>:
 8013ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ab4:	ed2d 8b10 	vpush	{d8-d15}
 8013ab8:	4ccb      	ldr	r4, [pc, #812]	; (8013de8 <m_kalman_3gyro.isra.6.constprop.36+0x338>)
 8013aba:	f2ad 6d34 	subw	sp, sp, #1588	; 0x634
 8013abe:	468e      	mov	lr, r1
 8013ac0:	4690      	mov	r8, r2
 8013ac2:	9001      	str	r0, [sp, #4]
 8013ac4:	9127      	str	r1, [sp, #156]	; 0x9c
 8013ac6:	920b      	str	r2, [sp, #44]	; 0x2c
 8013ac8:	9308      	str	r3, [sp, #32]
 8013aca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013acc:	aeb6      	add	r6, sp, #728	; 0x2d8
 8013ace:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8013ad0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013ad2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8013ad4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013ad6:	f89d 56a0 	ldrb.w	r5, [sp, #1696]	; 0x6a0
 8013ada:	9528      	str	r5, [sp, #160]	; 0xa0
 8013adc:	f89d 56a4 	ldrb.w	r5, [sp, #1700]	; 0x6a4
 8013ae0:	f8dd a6e0 	ldr.w	sl, [sp, #1760]	; 0x6e0
 8013ae4:	950c      	str	r5, [sp, #48]	; 0x30
 8013ae6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8013ae8:	4625      	mov	r5, r4
 8013aea:	afc3      	add	r7, sp, #780	; 0x30c
 8013aec:	f855 3b04 	ldr.w	r3, [r5], #4
 8013af0:	6033      	str	r3, [r6, #0]
 8013af2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013af4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8013af6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013af8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8013afa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013afc:	f104 0c38 	add.w	ip, r4, #56	; 0x38
 8013b00:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8013b02:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013b06:	aed0      	add	r6, sp, #832	; 0x340
 8013b08:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8013b0a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013b0e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8013b10:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013b14:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8013b16:	682a      	ldr	r2, [r5, #0]
 8013b18:	f8dc 3000 	ldr.w	r3, [ip]
 8013b1c:	603a      	str	r2, [r7, #0]
 8013b1e:	f104 076c 	add.w	r7, r4, #108	; 0x6c
 8013b22:	6033      	str	r3, [r6, #0]
 8013b24:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8013b26:	addd      	add	r5, sp, #884	; 0x374
 8013b28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013b2a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8013b2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013b2e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8013b30:	f104 06a0 	add.w	r6, r4, #160	; 0xa0
 8013b34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013b36:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8013b38:	683f      	ldr	r7, [r7, #0]
 8013b3a:	602f      	str	r7, [r5, #0]
 8013b3c:	ad98      	add	r5, sp, #608	; 0x260
 8013b3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013b40:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8013b42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013b44:	e896 0003 	ldmia.w	r6, {r0, r1}
 8013b48:	f104 06c8 	add.w	r6, r4, #200	; 0xc8
 8013b4c:	e885 0003 	stmia.w	r5, {r0, r1}
 8013b50:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8013b52:	ada2      	add	r5, sp, #648	; 0x288
 8013b54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013b56:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8013b58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013b5a:	e896 0003 	ldmia.w	r6, {r0, r1}
 8013b5e:	f104 06f0 	add.w	r6, r4, #240	; 0xf0
 8013b62:	e885 0003 	stmia.w	r5, {r0, r1}
 8013b66:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8013b68:	adac      	add	r5, sp, #688	; 0x2b0
 8013b6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013b6c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8013b6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013b70:	e896 0003 	ldmia.w	r6, {r0, r1}
 8013b74:	f504 768c 	add.w	r6, r4, #280	; 0x118
 8013b78:	e885 0003 	stmia.w	r5, {r0, r1}
 8013b7c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8013b7e:	ad5d      	add	r5, sp, #372	; 0x174
 8013b80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013b82:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8013b86:	f8dd 66d4 	ldr.w	r6, [sp, #1748]	; 0x6d4
 8013b8a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8013b8e:	f504 749a 	add.w	r4, r4, #308	; 0x134
 8013b92:	2500      	movs	r5, #0
 8013b94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013b96:	7035      	strb	r5, [r6, #0]
 8013b98:	f8dd 66d8 	ldr.w	r6, [sp, #1752]	; 0x6d8
 8013b9c:	edcd 1a02 	vstr	s3, [sp, #8]
 8013ba0:	7035      	strb	r5, [r6, #0]
 8013ba2:	f8dd 66dc 	ldr.w	r6, [sp, #1756]	; 0x6dc
 8013ba6:	7035      	strb	r5, [r6, #0]
 8013ba8:	edde da01 	vldr	s27, [lr, #4]
 8013bac:	edde 8a00 	vldr	s17, [lr]
 8013bb0:	ed9e 8a02 	vldr	s16, [lr, #8]
 8013bb4:	ee6d 7aad 	vmul.f32	s15, s27, s27
 8013bb8:	ad64      	add	r5, sp, #400	; 0x190
 8013bba:	eee8 7aa8 	vfma.f32	s15, s17, s17
 8013bbe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013bc0:	eee8 7a08 	vfma.f32	s15, s16, s16
 8013bc4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8013bc8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8013bcc:	ee17 0a90 	vmov	r0, s15
 8013bd0:	eeb0 ea40 	vmov.f32	s28, s0
 8013bd4:	eef0 ea60 	vmov.f32	s29, s1
 8013bd8:	eeb0 fa41 	vmov.f32	s30, s2
 8013bdc:	eef0 fa42 	vmov.f32	s31, s4
 8013be0:	f7ec fcba 	bl	8000558 <__aeabi_f2d>
 8013be4:	f007 fb3e 	bl	801b264 <sqrt>
 8013be8:	f7ec ffe6 	bl	8000bb8 <__aeabi_d2f>
 8013bec:	edd8 aa01 	vldr	s21, [r8, #4]
 8013bf0:	ed98 ba00 	vldr	s22, [r8]
 8013bf4:	ed98 aa02 	vldr	s20, [r8, #8]
 8013bf8:	4b7c      	ldr	r3, [pc, #496]	; (8013dec <m_kalman_3gyro.isra.6.constprop.36+0x33c>)
 8013bfa:	ee6a 7aaa 	vmul.f32	s15, s21, s21
 8013bfe:	ee09 0a90 	vmov	s19, r0
 8013c02:	eeeb 7a0b 	vfma.f32	s15, s22, s22
 8013c06:	6018      	str	r0, [r3, #0]
 8013c08:	f50a 7317 	add.w	r3, sl, #604	; 0x25c
 8013c0c:	930a      	str	r3, [sp, #40]	; 0x28
 8013c0e:	eeea 7a0a 	vfma.f32	s15, s20, s20
 8013c12:	eef7 ca00 	vmov.f32	s25, #112	; 0x3f800000  1.0
 8013c16:	ee17 0a90 	vmov	r0, s15
 8013c1a:	f7ec fc9d 	bl	8000558 <__aeabi_f2d>
 8013c1e:	f007 fb21 	bl	801b264 <sqrt>
 8013c22:	f7ec ffc9 	bl	8000bb8 <__aeabi_d2f>
 8013c26:	ee09 0a10 	vmov	s18, r0
 8013c2a:	ee8c caa9 	vdiv.f32	s24, s25, s19
 8013c2e:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8013c32:	ab5a      	add	r3, sp, #360	; 0x168
 8013c34:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8013c38:	f50a 638c 	add.w	r3, sl, #1120	; 0x460
 8013c3c:	9319      	str	r3, [sp, #100]	; 0x64
 8013c3e:	f50d 63d7 	add.w	r3, sp, #1720	; 0x6b8
 8013c42:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013c46:	eecc 7a89 	vdiv.f32	s15, s25, s18
 8013c4a:	ee6c ba2d 	vmul.f32	s23, s24, s27
 8013c4e:	ee67 aaaa 	vmul.f32	s21, s15, s21
 8013c52:	ee68 9a8c 	vmul.f32	s19, s17, s24
 8013c56:	ee27 ba8b 	vmul.f32	s22, s15, s22
 8013c5a:	ee2c ca08 	vmul.f32	s24, s24, s16
 8013c5e:	ee2a aa27 	vmul.f32	s20, s20, s15
 8013c62:	ee2a daab 	vmul.f32	s26, s21, s23
 8013c66:	edcd 8a57 	vstr	s17, [sp, #348]	; 0x15c
 8013c6a:	ed8d 8a59 	vstr	s16, [sp, #356]	; 0x164
 8013c6e:	edcd da58 	vstr	s27, [sp, #352]	; 0x160
 8013c72:	edcd 9a3e 	vstr	s19, [sp, #248]	; 0xf8
 8013c76:	edcd ba3f 	vstr	s23, [sp, #252]	; 0xfc
 8013c7a:	ed8d ba41 	vstr	s22, [sp, #260]	; 0x104
 8013c7e:	edcd aa42 	vstr	s21, [sp, #264]	; 0x108
 8013c82:	ed8d ca40 	vstr	s24, [sp, #256]	; 0x100
 8013c86:	ed8d aa43 	vstr	s20, [sp, #268]	; 0x10c
 8013c8a:	f7ec ff95 	bl	8000bb8 <__aeabi_d2f>
 8013c8e:	eeab da29 	vfma.f32	s26, s22, s19
 8013c92:	f89a 48cd 	ldrb.w	r4, [sl, #2253]	; 0x8cd
 8013c96:	ee08 0a90 	vmov	s17, r0
 8013c9a:	ed9f 8a55 	vldr	s16, [pc, #340]	; 8013df0 <m_kalman_3gyro.isra.6.constprop.36+0x340>
 8013c9e:	eeac da0a 	vfma.f32	s26, s24, s20
 8013ca2:	ee28 8a88 	vmul.f32	s16, s17, s16
 8013ca6:	2c00      	cmp	r4, #0
 8013ca8:	f000 85be 	beq.w	8014828 <m_kalman_3gyro.isra.6.constprop.36+0xd78>
 8013cac:	ab47      	add	r3, sp, #284	; 0x11c
 8013cae:	9309      	str	r3, [sp, #36]	; 0x24
 8013cb0:	f50a 7375 	add.w	r3, sl, #980	; 0x3d4
 8013cb4:	9312      	str	r3, [sp, #72]	; 0x48
 8013cb6:	f20a 4304 	addw	r3, sl, #1028	; 0x404
 8013cba:	9313      	str	r3, [sp, #76]	; 0x4c
 8013cbc:	f50a 6382 	add.w	r3, sl, #1040	; 0x410
 8013cc0:	9314      	str	r3, [sp, #80]	; 0x50
 8013cc2:	f20a 4314 	addw	r3, sl, #1044	; 0x414
 8013cc6:	9315      	str	r3, [sp, #84]	; 0x54
 8013cc8:	f50a 6383 	add.w	r3, sl, #1048	; 0x418
 8013ccc:	9316      	str	r3, [sp, #88]	; 0x58
 8013cce:	f20a 431c 	addw	r3, sl, #1052	; 0x41c
 8013cd2:	931b      	str	r3, [sp, #108]	; 0x6c
 8013cd4:	f20a 4324 	addw	r3, sl, #1060	; 0x424
 8013cd8:	931c      	str	r3, [sp, #112]	; 0x70
 8013cda:	f50a 6385 	add.w	r3, sl, #1064	; 0x428
 8013cde:	931d      	str	r3, [sp, #116]	; 0x74
 8013ce0:	f20a 432c 	addw	r3, sl, #1068	; 0x42c
 8013ce4:	931e      	str	r3, [sp, #120]	; 0x78
 8013ce6:	f50a 6386 	add.w	r3, sl, #1072	; 0x430
 8013cea:	9317      	str	r3, [sp, #92]	; 0x5c
 8013cec:	f20a 4334 	addw	r3, sl, #1076	; 0x434
 8013cf0:	9310      	str	r3, [sp, #64]	; 0x40
 8013cf2:	f50a 6387 	add.w	r3, sl, #1080	; 0x438
 8013cf6:	931f      	str	r3, [sp, #124]	; 0x7c
 8013cf8:	f20a 433c 	addw	r3, sl, #1084	; 0x43c
 8013cfc:	9311      	str	r3, [sp, #68]	; 0x44
 8013cfe:	f50a 6388 	add.w	r3, sl, #1088	; 0x440
 8013d02:	930d      	str	r3, [sp, #52]	; 0x34
 8013d04:	f20a 4344 	addw	r3, sl, #1092	; 0x444
 8013d08:	930e      	str	r3, [sp, #56]	; 0x38
 8013d0a:	f50a 6389 	add.w	r3, sl, #1096	; 0x448
 8013d0e:	9318      	str	r3, [sp, #96]	; 0x60
 8013d10:	f20a 434c 	addw	r3, sl, #1100	; 0x44c
 8013d14:	930f      	str	r3, [sp, #60]	; 0x3c
 8013d16:	f60a 0398 	addw	r3, sl, #2200	; 0x898
 8013d1a:	f50a 6881 	add.w	r8, sl, #1032	; 0x408
 8013d1e:	f20a 490c 	addw	r9, sl, #1036	; 0x40c
 8013d22:	9335      	str	r3, [sp, #212]	; 0xd4
 8013d24:	f20a 4384 	addw	r3, sl, #1156	; 0x484
 8013d28:	eddf 4a32 	vldr	s9, [pc, #200]	; 8013df4 <m_kalman_3gyro.isra.6.constprop.36+0x344>
 8013d2c:	edd3 6a00 	vldr	s13, [r3]
 8013d30:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013d32:	ed9f 5a31 	vldr	s10, [pc, #196]	; 8013df8 <m_kalman_3gyro.isra.6.constprop.36+0x348>
 8013d36:	edd3 7a00 	vldr	s15, [r3]
 8013d3a:	eddf 5a30 	vldr	s11, [pc, #192]	; 8013dfc <m_kalman_3gyro.isra.6.constprop.36+0x34c>
 8013d3e:	ed9f 6a30 	vldr	s12, [pc, #192]	; 8013e00 <m_kalman_3gyro.isra.6.constprop.36+0x350>
 8013d42:	9b01      	ldr	r3, [sp, #4]
 8013d44:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8013d48:	f20a 45cc 	addw	r5, sl, #1228	; 0x4cc
 8013d4c:	eee7 6a85 	vfma.f32	s13, s15, s10
 8013d50:	f50a 649e 	add.w	r4, sl, #1264	; 0x4f0
 8013d54:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013d56:	ed95 7a00 	vldr	s14, [r5]
 8013d5a:	edd4 7a00 	vldr	s15, [r4]
 8013d5e:	eee7 6a25 	vfma.f32	s13, s14, s11
 8013d62:	f50d 64d7 	add.w	r4, sp, #1720	; 0x6b8
 8013d66:	f50a 6691 	add.w	r6, sl, #1160	; 0x488
 8013d6a:	ed94 3b00 	vldr	d3, [r4]
 8013d6e:	eee7 6a86 	vfma.f32	s13, s15, s12
 8013d72:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8013d74:	ed8a 3b0e 	vstr	d3, [sl, #56]	; 0x38
 8013d78:	ed84 8a00 	vstr	s16, [r4]
 8013d7c:	edca 6af8 	vstr	s13, [sl, #992]	; 0x3e0
 8013d80:	edd6 7a00 	vldr	s15, [r6]
 8013d84:	f20a 4764 	addw	r7, sl, #1124	; 0x464
 8013d88:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8013d8c:	edd7 3a00 	vldr	s7, [r7]
 8013d90:	973a      	str	r7, [sp, #232]	; 0xe8
 8013d92:	eee3 7a85 	vfma.f32	s15, s7, s10
 8013d96:	f50a 659a 	add.w	r5, sl, #1232	; 0x4d0
 8013d9a:	f20a 4cf4 	addw	ip, sl, #1268	; 0x4f4
 8013d9e:	ed95 4a00 	vldr	s8, [r5]
 8013da2:	ed9c 7a00 	vldr	s14, [ip]
 8013da6:	eee4 7a25 	vfma.f32	s15, s8, s11
 8013daa:	f20a 458c 	addw	r5, sl, #1164	; 0x48c
 8013dae:	f50a 678d 	add.w	r7, sl, #1128	; 0x468
 8013db2:	f20a 44d4 	addw	r4, sl, #1236	; 0x4d4
 8013db6:	eee7 7a06 	vfma.f32	s15, s14, s12
 8013dba:	9401      	str	r4, [sp, #4]
 8013dbc:	f20a 446c 	addw	r4, sl, #1132	; 0x46c
 8013dc0:	942b      	str	r4, [sp, #172]	; 0xac
 8013dc2:	edca 7af9 	vstr	s15, [sl, #996]	; 0x3e4
 8013dc6:	ed95 7a00 	vldr	s14, [r5]
 8013dca:	edd7 3a00 	vldr	s7, [r7]
 8013dce:	973b      	str	r7, [sp, #236]	; 0xec
 8013dd0:	ee27 7a24 	vmul.f32	s14, s14, s9
 8013dd4:	f50a 648e 	add.w	r4, sl, #1136	; 0x470
 8013dd8:	eea3 7a85 	vfma.f32	s14, s7, s10
 8013ddc:	942c      	str	r4, [sp, #176]	; 0xb0
 8013dde:	9c01      	ldr	r4, [sp, #4]
 8013de0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8013de2:	ed94 4a00 	vldr	s8, [r4]
 8013de6:	e00d      	b.n	8013e04 <m_kalman_3gyro.isra.6.constprop.36+0x354>
 8013de8:	0801cfe4 	.word	0x0801cfe4
 8013dec:	20001bf4 	.word	0x20001bf4
 8013df0:	3ca3d70a 	.word	0x3ca3d70a
 8013df4:	bdcccccd 	.word	0xbdcccccd
 8013df8:	be4ccccd 	.word	0xbe4ccccd
 8013dfc:	3dcccccd 	.word	0x3dcccccd
 8013e00:	3e4ccccd 	.word	0x3e4ccccd
 8013e04:	eea4 7a25 	vfma.f32	s14, s8, s11
 8013e08:	f50a 669f 	add.w	r6, sl, #1272	; 0x4f8
 8013e0c:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8013e10:	ed96 4a00 	vldr	s8, [r6]
 8013e14:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 8013e16:	eea4 7a06 	vfma.f32	s14, s8, s12
 8013e1a:	f50a 6c92 	add.w	ip, sl, #1168	; 0x490
 8013e1e:	f50a 6e9b 	add.w	lr, sl, #1240	; 0x4d8
 8013e22:	f20a 4b94 	addw	fp, sl, #1172	; 0x494
 8013e26:	ed8a 7afa 	vstr	s14, [sl, #1000]	; 0x3e8
 8013e2a:	ed9c 4a00 	vldr	s8, [ip]
 8013e2e:	edd5 3a00 	vldr	s7, [r5]
 8013e32:	ee24 4a24 	vmul.f32	s8, s8, s9
 8013e36:	f50a 658f 	add.w	r5, sl, #1144	; 0x478
 8013e3a:	eea3 4a85 	vfma.f32	s8, s7, s10
 8013e3e:	9520      	str	r5, [sp, #128]	; 0x80
 8013e40:	f20a 45fc 	addw	r5, sl, #1276	; 0x4fc
 8013e44:	edde 3a00 	vldr	s7, [lr]
 8013e48:	eea3 4aa5 	vfma.f32	s8, s7, s11
 8013e4c:	f20a 44dc 	addw	r4, sl, #1244	; 0x4dc
 8013e50:	f50a 62a0 	add.w	r2, sl, #1280	; 0x500
 8013e54:	edd5 3a00 	vldr	s7, [r5]
 8013e58:	9d2c      	ldr	r5, [sp, #176]	; 0xb0
 8013e5a:	eea3 4a86 	vfma.f32	s8, s7, s12
 8013e5e:	f50a 6393 	add.w	r3, sl, #1176	; 0x498
 8013e62:	f20a 4674 	addw	r6, sl, #1140	; 0x474
 8013e66:	f20a 4ce4 	addw	ip, sl, #1252	; 0x4e4
 8013e6a:	ed8a 4afb 	vstr	s8, [sl, #1004]	; 0x3ec
 8013e6e:	ed9b 4a00 	vldr	s8, [fp]
 8013e72:	edd5 3a00 	vldr	s7, [r5]
 8013e76:	f8cd c0bc 	str.w	ip, [sp, #188]	; 0xbc
 8013e7a:	ee24 4a24 	vmul.f32	s8, s8, s9
 8013e7e:	f50a 6ca1 	add.w	ip, sl, #1288	; 0x508
 8013e82:	eea3 4a85 	vfma.f32	s8, s7, s10
 8013e86:	f8cd c0c8 	str.w	ip, [sp, #200]	; 0xc8
 8013e8a:	f50a 6c94 	add.w	ip, sl, #1184	; 0x4a0
 8013e8e:	edd4 3a00 	vldr	s7, [r4]
 8013e92:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
 8013e96:	eea3 4aa5 	vfma.f32	s8, s7, s11
 8013e9a:	f20a 4c7c 	addw	ip, sl, #1148	; 0x47c
 8013e9e:	f50a 619c 	add.w	r1, sl, #1248	; 0x4e0
 8013ea2:	edd2 3a00 	vldr	s7, [r2]
 8013ea6:	f8cd c084 	str.w	ip, [sp, #132]	; 0x84
 8013eaa:	eea3 4a86 	vfma.f32	s8, s7, s12
 8013eae:	f50a 6c9d 	add.w	ip, sl, #1256	; 0x4e8
 8013eb2:	f8cd c0c0 	str.w	ip, [sp, #192]	; 0xc0
 8013eb6:	ee67 3aa7 	vmul.f32	s7, s15, s15
 8013eba:	ed8a 4afc 	vstr	s8, [sl, #1008]	; 0x3f0
 8013ebe:	edd3 7a00 	vldr	s15, [r3]
 8013ec2:	ed96 4a00 	vldr	s8, [r6]
 8013ec6:	963c      	str	r6, [sp, #240]	; 0xf0
 8013ec8:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8013ecc:	eee6 3aa6 	vfma.f32	s7, s13, s13
 8013ed0:	f20a 5c0c 	addw	ip, sl, #1292	; 0x50c
 8013ed4:	f8cd c0cc 	str.w	ip, [sp, #204]	; 0xcc
 8013ed8:	eee4 7a05 	vfma.f32	s15, s8, s10
 8013edc:	f20a 4ca4 	addw	ip, sl, #1188	; 0x4a4
 8013ee0:	f8cd c0b8 	str.w	ip, [sp, #184]	; 0xb8
 8013ee4:	eef0 6a63 	vmov.f32	s13, s7
 8013ee8:	edd1 3a00 	vldr	s7, [r1]
 8013eec:	f50a 6c90 	add.w	ip, sl, #1152	; 0x480
 8013ef0:	eee3 7aa5 	vfma.f32	s15, s7, s11
 8013ef4:	f20a 479c 	addw	r7, sl, #1180	; 0x49c
 8013ef8:	f20a 5004 	addw	r0, sl, #1284	; 0x504
 8013efc:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
 8013f00:	f50a 64a2 	add.w	r4, sl, #1296	; 0x510
 8013f04:	f20a 4cec 	addw	ip, sl, #1260	; 0x4ec
 8013f08:	f50a 760e 	add.w	r6, sl, #568	; 0x238
 8013f0c:	f8cd c0c4 	str.w	ip, [sp, #196]	; 0xc4
 8013f10:	973d      	str	r7, [sp, #244]	; 0xf4
 8013f12:	9434      	str	r4, [sp, #208]	; 0xd0
 8013f14:	962a      	str	r6, [sp, #168]	; 0xa8
 8013f16:	ed90 4a00 	vldr	s8, [r0]
 8013f1a:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8013f1c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8013f1e:	eee4 7a06 	vfma.f32	s15, s8, s12
 8013f22:	f50a 6480 	add.w	r4, sl, #1024	; 0x400
 8013f26:	f50a 7105 	add.w	r1, sl, #532	; 0x214
 8013f2a:	eee7 6a07 	vfma.f32	s13, s14, s14
 8013f2e:	9129      	str	r1, [sp, #164]	; 0xa4
 8013f30:	edca 7afd 	vstr	s15, [sl, #1012]	; 0x3f4
 8013f34:	edd7 7a00 	vldr	s15, [r7]
 8013f38:	ed95 4a00 	vldr	s8, [r5]
 8013f3c:	9d2f      	ldr	r5, [sp, #188]	; 0xbc
 8013f3e:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8013f42:	ee16 0a90 	vmov	r0, s13
 8013f46:	eee4 7a05 	vfma.f32	s15, s8, s10
 8013f4a:	edd5 6a00 	vldr	s13, [r5]
 8013f4e:	9d32      	ldr	r5, [sp, #200]	; 0xc8
 8013f50:	eee6 7aa5 	vfma.f32	s15, s13, s11
 8013f54:	ed95 7a00 	vldr	s14, [r5]
 8013f58:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 8013f5a:	eee7 7a06 	vfma.f32	s15, s14, s12
 8013f5e:	edca 7afe 	vstr	s15, [sl, #1016]	; 0x3f8
 8013f62:	edd5 7a00 	vldr	s15, [r5]
 8013f66:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8013f68:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8013f6c:	ed95 4a00 	vldr	s8, [r5]
 8013f70:	9d30      	ldr	r5, [sp, #192]	; 0xc0
 8013f72:	eee4 7a05 	vfma.f32	s15, s8, s10
 8013f76:	edd5 6a00 	vldr	s13, [r5]
 8013f7a:	9d33      	ldr	r5, [sp, #204]	; 0xcc
 8013f7c:	eee6 7aa5 	vfma.f32	s15, s13, s11
 8013f80:	ed95 7a00 	vldr	s14, [r5]
 8013f84:	9d2e      	ldr	r5, [sp, #184]	; 0xb8
 8013f86:	eee7 7a06 	vfma.f32	s15, s14, s12
 8013f8a:	edca 7aff 	vstr	s15, [sl, #1020]	; 0x3fc
 8013f8e:	ed95 8a00 	vldr	s16, [r5]
 8013f92:	9d22      	ldr	r5, [sp, #136]	; 0x88
 8013f94:	ed9c 7a00 	vldr	s14, [ip]
 8013f98:	edd5 6a00 	vldr	s13, [r5]
 8013f9c:	edd3 7a00 	vldr	s15, [r3]
 8013fa0:	ee28 8a24 	vmul.f32	s16, s16, s9
 8013fa4:	eea6 8a85 	vfma.f32	s16, s13, s10
 8013fa8:	eea7 8a25 	vfma.f32	s16, s14, s11
 8013fac:	eea7 8a86 	vfma.f32	s16, s15, s12
 8013fb0:	ed84 8a00 	vstr	s16, [r4]
 8013fb4:	f7ec fad0 	bl	8000558 <__aeabi_f2d>
 8013fb8:	f007 f954 	bl	801b264 <sqrt>
 8013fbc:	f7ec fdfc 	bl	8000bb8 <__aeabi_d2f>
 8013fc0:	edda 7afc 	vldr	s15, [sl, #1008]	; 0x3f0
 8013fc4:	edda 6afb 	vldr	s13, [sl, #1004]	; 0x3ec
 8013fc8:	ed9a 7afd 	vldr	s14, [sl, #1012]	; 0x3f4
 8013fcc:	49a1      	ldr	r1, [pc, #644]	; (8014254 <m_kalman_3gyro.isra.6.constprop.36+0x7a4>)
 8013fce:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8013fd2:	ee0d 0a90 	vmov	s27, r0
 8013fd6:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8013fda:	6008      	str	r0, [r1, #0]
 8013fdc:	eee7 7a07 	vfma.f32	s15, s14, s14
 8013fe0:	ee17 0a90 	vmov	r0, s15
 8013fe4:	f7ec fab8 	bl	8000558 <__aeabi_f2d>
 8013fe8:	f007 f93c 	bl	801b264 <sqrt>
 8013fec:	f7ec fde4 	bl	8000bb8 <__aeabi_d2f>
 8013ff0:	edda 7aff 	vldr	s15, [sl, #1020]	; 0x3fc
 8013ff4:	ed9a 7afe 	vldr	s14, [sl, #1016]	; 0x3f8
 8013ff8:	4b96      	ldr	r3, [pc, #600]	; (8014254 <m_kalman_3gyro.isra.6.constprop.36+0x7a4>)
 8013ffa:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8013ffe:	f843 0f04 	str.w	r0, [r3, #4]!
 8014002:	eee7 7a07 	vfma.f32	s15, s14, s14
 8014006:	9339      	str	r3, [sp, #228]	; 0xe4
 8014008:	ee0c 0a90 	vmov	s25, r0
 801400c:	eee8 7a08 	vfma.f32	s15, s16, s16
 8014010:	ee17 0a90 	vmov	r0, s15
 8014014:	f7ec faa0 	bl	8000558 <__aeabi_f2d>
 8014018:	f007 f924 	bl	801b264 <sqrt>
 801401c:	f7ec fdcc 	bl	8000bb8 <__aeabi_d2f>
 8014020:	ee6b 7a4c 	vnmul.f32	s15, s22, s24
 8014024:	ee2a 7a6b 	vnmul.f32	s14, s20, s23
 8014028:	eee9 7a8a 	vfma.f32	s15, s19, s20
 801402c:	4b89      	ldr	r3, [pc, #548]	; (8014254 <m_kalman_3gyro.isra.6.constprop.36+0x7a4>)
 801402e:	eeac 7a2a 	vfma.f32	s14, s24, s21
 8014032:	f843 0f08 	str.w	r0, [r3, #8]!
 8014036:	ee6a 9ae9 	vnmul.f32	s19, s21, s19
 801403a:	eeb0 ca47 	vmov.f32	s24, s14
 801403e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8014042:	eeeb 9a8b 	vfma.f32	s19, s23, s22
 8014046:	931a      	str	r3, [sp, #104]	; 0x68
 8014048:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801404a:	edcd 7a01 	vstr	s15, [sp, #4]
 801404e:	eeac 7a0c 	vfma.f32	s14, s24, s24
 8014052:	ee08 0a10 	vmov	s16, r0
 8014056:	eea9 7aa9 	vfma.f32	s14, s19, s19
 801405a:	edc3 da00 	vstr	s27, [r3]
 801405e:	ee17 0a10 	vmov	r0, s14
 8014062:	edc8 ca00 	vstr	s25, [r8]
 8014066:	ed89 8a00 	vstr	s16, [r9]
 801406a:	ed8a ba90 	vstr	s22, [sl, #576]	; 0x240
 801406e:	edca aa93 	vstr	s21, [sl, #588]	; 0x24c
 8014072:	ed8a aa96 	vstr	s20, [sl, #600]	; 0x258
 8014076:	f7ec fa6f 	bl	8000558 <__aeabi_f2d>
 801407a:	f007 f8f3 	bl	801b264 <sqrt>
 801407e:	f7ec fd9b 	bl	8000bb8 <__aeabi_d2f>
 8014082:	ee07 0a90 	vmov	s15, r0
 8014086:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801408a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801408e:	ab7d      	add	r3, sp, #500	; 0x1f4
 8014090:	461a      	mov	r2, r3
 8014092:	4631      	mov	r1, r6
 8014094:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8014096:	eddd 7a01 	vldr	s15, [sp, #4]
 801409a:	ee69 9a87 	vmul.f32	s19, s19, s14
 801409e:	ee67 ba87 	vmul.f32	s23, s15, s14
 80140a2:	ee2c ca07 	vmul.f32	s24, s24, s14
 80140a6:	ee6a 6ae9 	vnmul.f32	s13, s21, s19
 80140aa:	ee2a 7a4c 	vnmul.f32	s14, s20, s24
 80140ae:	ee6b 7a6b 	vnmul.f32	s15, s22, s23
 80140b2:	eeeb 6a8a 	vfma.f32	s13, s23, s20
 80140b6:	eea9 7a8b 	vfma.f32	s14, s19, s22
 80140ba:	eeec 7a2a 	vfma.f32	s15, s24, s21
 80140be:	edca 6a8e 	vstr	s13, [sl, #568]	; 0x238
 80140c2:	ed8a 7a91 	vstr	s14, [sl, #580]	; 0x244
 80140c6:	edca 7a94 	vstr	s15, [sl, #592]	; 0x250
 80140ca:	ed8a ca8f 	vstr	s24, [sl, #572]	; 0x23c
 80140ce:	edca ba92 	vstr	s23, [sl, #584]	; 0x248
 80140d2:	edca 9a95 	vstr	s19, [sl, #596]	; 0x254
 80140d6:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 80140da:	ed8d 7a24 	vstr	s14, [sp, #144]	; 0x90
 80140de:	edcd 7a25 	vstr	s15, [sp, #148]	; 0x94
 80140e2:	f7fb f805 	bl	800f0f0 <m_mldivide>
 80140e6:	a87d      	add	r0, sp, #500	; 0x1f4
 80140e8:	a94b      	add	r1, sp, #300	; 0x12c
 80140ea:	f7fb fb7f 	bl	800f7ec <m_dcm2q_eml>
 80140ee:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80140f0:	f5aa 70ae 	sub.w	r0, sl, #348	; 0x15c
 80140f4:	4653      	mov	r3, sl
 80140f6:	f8d3 23ac 	ldr.w	r2, [r3, #940]	; 0x3ac
 80140fa:	f8d3 13b0 	ldr.w	r1, [r3, #944]	; 0x3b0
 80140fe:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
 8014102:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 8014106:	f8c3 13bc 	str.w	r1, [r3, #956]	; 0x3bc
 801410a:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
 801410e:	3b0c      	subs	r3, #12
 8014110:	4298      	cmp	r0, r3
 8014112:	d1f0      	bne.n	80140f6 <m_kalman_3gyro.isra.6.constprop.36+0x646>
 8014114:	ed9d 7a02 	vldr	s14, [sp, #8]
 8014118:	eddd 6a4b 	vldr	s13, [sp, #300]	; 0x12c
 801411c:	eddf 5a4e 	vldr	s11, [pc, #312]	; 8014258 <m_kalman_3gyro.isra.6.constprop.36+0x7a8>
 8014120:	9738      	str	r7, [sp, #224]	; 0xe0
 8014122:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014126:	ee87 6a87 	vdiv.f32	s12, s15, s14
 801412a:	ac44      	add	r4, sp, #272	; 0x110
 801412c:	f507 71ae 	add.w	r1, r7, #348	; 0x15c
 8014130:	f107 050c 	add.w	r5, r7, #12
 8014134:	4638      	mov	r0, r7
 8014136:	ed9d 7a4c 	vldr	s14, [sp, #304]	; 0x130
 801413a:	eddd 7a4d 	vldr	s15, [sp, #308]	; 0x134
 801413e:	ee76 6aa6 	vadd.f32	s13, s13, s13
 8014142:	ee37 7a07 	vadd.f32	s14, s14, s14
 8014146:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801414a:	ee66 6a86 	vmul.f32	s13, s13, s12
 801414e:	ee27 7a06 	vmul.f32	s14, s14, s12
 8014152:	ee67 7a86 	vmul.f32	s15, s15, s12
 8014156:	ed9f 6a41 	vldr	s12, [pc, #260]	; 801425c <m_kalman_3gyro.isra.6.constprop.36+0x7ac>
 801415a:	edca 6a97 	vstr	s13, [sl, #604]	; 0x25c
 801415e:	ed8a 7a98 	vstr	s14, [sl, #608]	; 0x260
 8014162:	edca 7a99 	vstr	s15, [sl, #612]	; 0x264
 8014166:	edd0 6a00 	vldr	s13, [r0]
 801416a:	4603      	mov	r3, r0
 801416c:	eef0 7a66 	vmov.f32	s15, s13
 8014170:	330c      	adds	r3, #12
 8014172:	ed93 7a00 	vldr	s14, [r3]
 8014176:	428b      	cmp	r3, r1
 8014178:	ee77 7a87 	vadd.f32	s15, s15, s14
 801417c:	d1f8      	bne.n	8014170 <m_kalman_3gyro.isra.6.constprop.36+0x6c0>
 801417e:	ee27 7aa5 	vmul.f32	s14, s15, s11
 8014182:	4602      	mov	r2, r0
 8014184:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8014188:	ee66 6aa6 	vmul.f32	s13, s13, s13
 801418c:	320c      	adds	r2, #12
 801418e:	edd2 7a00 	vldr	s15, [r2]
 8014192:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014196:	4293      	cmp	r3, r2
 8014198:	eee7 6aa7 	vfma.f32	s13, s15, s15
 801419c:	d1f6      	bne.n	801418c <m_kalman_3gyro.isra.6.constprop.36+0x6dc>
 801419e:	ee66 6a86 	vmul.f32	s13, s13, s12
 80141a2:	3004      	adds	r0, #4
 80141a4:	42a8      	cmp	r0, r5
 80141a6:	ece4 6a01 	vstmia	r4!, {s13}
 80141aa:	f101 0104 	add.w	r1, r1, #4
 80141ae:	d1da      	bne.n	8014166 <m_kalman_3gyro.isra.6.constprop.36+0x6b6>
 80141b0:	9844      	ldr	r0, [sp, #272]	; 0x110
 80141b2:	970a      	str	r7, [sp, #40]	; 0x28
 80141b4:	f7ec f9d0 	bl	8000558 <__aeabi_f2d>
 80141b8:	f007 f854 	bl	801b264 <sqrt>
 80141bc:	f7ec fcfc 	bl	8000bb8 <__aeabi_d2f>
 80141c0:	ee06 0a90 	vmov	s13, r0
 80141c4:	9845      	ldr	r0, [sp, #276]	; 0x114
 80141c6:	edcd 6a44 	vstr	s13, [sp, #272]	; 0x110
 80141ca:	edcd 6a02 	vstr	s13, [sp, #8]
 80141ce:	f7ec f9c3 	bl	8000558 <__aeabi_f2d>
 80141d2:	f007 f847 	bl	801b264 <sqrt>
 80141d6:	f7ec fcef 	bl	8000bb8 <__aeabi_d2f>
 80141da:	ee07 0a90 	vmov	s15, r0
 80141de:	9846      	ldr	r0, [sp, #280]	; 0x118
 80141e0:	edcd 7a45 	vstr	s15, [sp, #276]	; 0x114
 80141e4:	edcd 7a01 	vstr	s15, [sp, #4]
 80141e8:	f7ec f9b6 	bl	8000558 <__aeabi_f2d>
 80141ec:	f007 f83a 	bl	801b264 <sqrt>
 80141f0:	f7ec fce2 	bl	8000bb8 <__aeabi_d2f>
 80141f4:	eddd 7a01 	vldr	s15, [sp, #4]
 80141f8:	eddd 6a02 	vldr	s13, [sp, #8]
 80141fc:	9046      	str	r0, [sp, #280]	; 0x118
 80141fe:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8014202:	ee07 0a10 	vmov	s14, r0
 8014206:	eee6 7aa6 	vfma.f32	s15, s13, s13
 801420a:	f50a 7372 	add.w	r3, sl, #968	; 0x3c8
 801420e:	9326      	str	r3, [sp, #152]	; 0x98
 8014210:	f20d 48ec 	addw	r8, sp, #1260	; 0x4ec
 8014214:	eee7 7a07 	vfma.f32	s15, s14, s14
 8014218:	f50d 7b6a 	add.w	fp, sp, #936	; 0x3a8
 801421c:	ee17 0a90 	vmov	r0, s15
 8014220:	f7ec f99a 	bl	8000558 <__aeabi_f2d>
 8014224:	f007 f81e 	bl	801b264 <sqrt>
 8014228:	f7ec fcc6 	bl	8000bb8 <__aeabi_d2f>
 801422c:	4b0c      	ldr	r3, [pc, #48]	; (8014260 <m_kalman_3gyro.isra.6.constprop.36+0x7b0>)
 801422e:	f8ca 03c4 	str.w	r0, [sl, #964]	; 0x3c4
 8014232:	ecf3 7a01 	vldmia	r3!, {s15}
 8014236:	f8cd a6e0 	str.w	sl, [sp, #1760]	; 0x6e0
 801423a:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 801423e:	edd3 7a00 	vldr	s15, [r3]
 8014242:	edcd 7a37 	vstr	s15, [sp, #220]	; 0xdc
 8014246:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014248:	4640      	mov	r0, r8
 801424a:	f20d 31a7 	addw	r1, sp, #935	; 0x3a7
 801424e:	2301      	movs	r3, #1
 8014250:	e00c      	b.n	801426c <m_kalman_3gyro.isra.6.constprop.36+0x7bc>
 8014252:	bf00      	nop
 8014254:	20001bf8 	.word	0x20001bf8
 8014258:	3d088889 	.word	0x3d088889
 801425c:	3d0d3dcb 	.word	0x3d0d3dcb
 8014260:	200017e0 	.word	0x200017e0
 8014264:	3f333333 	.word	0x3f333333
 8014268:	3f4ccccd 	.word	0x3f4ccccd
 801426c:	f801 3f01 	strb.w	r3, [r1, #1]!
 8014270:	3301      	adds	r3, #1
 8014272:	f852 4b0c 	ldr.w	r4, [r2], #12
 8014276:	f840 4b04 	str.w	r4, [r0], #4
 801427a:	2b1f      	cmp	r3, #31
 801427c:	d1f6      	bne.n	801426c <m_kalman_3gyro.isra.6.constprop.36+0x7bc>
 801427e:	221e      	movs	r2, #30
 8014280:	2101      	movs	r1, #1
 8014282:	a88f      	add	r0, sp, #572	; 0x23c
 8014284:	f005 fecb 	bl	801a01e <memset>
 8014288:	ed98 7a00 	vldr	s14, [r8]
 801428c:	edd8 7a01 	vldr	s15, [r8, #4]
 8014290:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014294:	ed98 7a02 	vldr	s14, [r8, #8]
 8014298:	edd8 7a03 	vldr	s15, [r8, #12]
 801429c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142a0:	bf88      	it	hi
 80142a2:	f44f 7381 	movhi.w	r3, #258	; 0x102
 80142a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80142aa:	ed98 7a04 	vldr	s14, [r8, #16]
 80142ae:	edd8 7a05 	vldr	s15, [r8, #20]
 80142b2:	bf88      	it	hi
 80142b4:	f8ab 3000 	strhhi.w	r3, [fp]
 80142b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142bc:	bf88      	it	hi
 80142be:	f44f 7341 	movhi.w	r3, #772	; 0x304
 80142c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80142c6:	ed98 7a06 	vldr	s14, [r8, #24]
 80142ca:	edd8 7a07 	vldr	s15, [r8, #28]
 80142ce:	bf88      	it	hi
 80142d0:	f8ab 3002 	strhhi.w	r3, [fp, #2]
 80142d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142d8:	bf88      	it	hi
 80142da:	f240 5306 	movwhi	r3, #1286	; 0x506
 80142de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80142e2:	ed98 7a08 	vldr	s14, [r8, #32]
 80142e6:	edd8 7a09 	vldr	s15, [r8, #36]	; 0x24
 80142ea:	bf88      	it	hi
 80142ec:	f8ab 3004 	strhhi.w	r3, [fp, #4]
 80142f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142f4:	bf88      	it	hi
 80142f6:	f44f 63e1 	movhi.w	r3, #1800	; 0x708
 80142fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80142fe:	ed98 7a0a 	vldr	s14, [r8, #40]	; 0x28
 8014302:	edd8 7a0b 	vldr	s15, [r8, #44]	; 0x2c
 8014306:	bf88      	it	hi
 8014308:	f8ab 3006 	strhhi.w	r3, [fp, #6]
 801430c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014310:	bf88      	it	hi
 8014312:	f640 130a 	movwhi	r3, #2314	; 0x90a
 8014316:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801431a:	ed98 7a0c 	vldr	s14, [r8, #48]	; 0x30
 801431e:	edd8 7a0d 	vldr	s15, [r8, #52]	; 0x34
 8014322:	bf88      	it	hi
 8014324:	f8ab 3008 	strhhi.w	r3, [fp, #8]
 8014328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801432c:	bf88      	it	hi
 801432e:	f640 330c 	movwhi	r3, #2828	; 0xb0c
 8014332:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014336:	ed98 7a0e 	vldr	s14, [r8, #56]	; 0x38
 801433a:	edd8 7a0f 	vldr	s15, [r8, #60]	; 0x3c
 801433e:	bf88      	it	hi
 8014340:	f8ab 300a 	strhhi.w	r3, [fp, #10]
 8014344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014348:	bf88      	it	hi
 801434a:	f640 530e 	movwhi	r3, #3342	; 0xd0e
 801434e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014352:	ed98 7a10 	vldr	s14, [r8, #64]	; 0x40
 8014356:	edd8 7a11 	vldr	s15, [r8, #68]	; 0x44
 801435a:	bf88      	it	hi
 801435c:	f8ab 300c 	strhhi.w	r3, [fp, #12]
 8014360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014364:	bf88      	it	hi
 8014366:	f44f 6371 	movhi.w	r3, #3856	; 0xf10
 801436a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801436e:	ed98 7a12 	vldr	s14, [r8, #72]	; 0x48
 8014372:	edd8 7a13 	vldr	s15, [r8, #76]	; 0x4c
 8014376:	bf88      	it	hi
 8014378:	f8ab 300e 	strhhi.w	r3, [fp, #14]
 801437c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014380:	bf88      	it	hi
 8014382:	f241 1312 	movwhi	r3, #4370	; 0x1112
 8014386:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801438a:	ed98 7a14 	vldr	s14, [r8, #80]	; 0x50
 801438e:	edd8 7a15 	vldr	s15, [r8, #84]	; 0x54
 8014392:	bf88      	it	hi
 8014394:	f8ab 3010 	strhhi.w	r3, [fp, #16]
 8014398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801439c:	bf88      	it	hi
 801439e:	f241 3314 	movwhi	r3, #4884	; 0x1314
 80143a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80143a6:	bf88      	it	hi
 80143a8:	f8ab 3012 	strhhi.w	r3, [fp, #18]
 80143ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143b0:	bf84      	itt	hi
 80143b2:	f241 5316 	movwhi	r3, #5398	; 0x1516
 80143b6:	f8ab 3014 	strhhi.w	r3, [fp, #20]
 80143ba:	ed98 7a16 	vldr	s14, [r8, #88]	; 0x58
 80143be:	edd8 7a17 	vldr	s15, [r8, #92]	; 0x5c
 80143c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80143c6:	ed98 7a18 	vldr	s14, [r8, #96]	; 0x60
 80143ca:	edd8 7a19 	vldr	s15, [r8, #100]	; 0x64
 80143ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143d2:	bf88      	it	hi
 80143d4:	f241 7318 	movwhi	r3, #5912	; 0x1718
 80143d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80143dc:	ed98 7a1a 	vldr	s14, [r8, #104]	; 0x68
 80143e0:	edd8 7a1b 	vldr	s15, [r8, #108]	; 0x6c
 80143e4:	bf88      	it	hi
 80143e6:	f8ab 3016 	strhhi.w	r3, [fp, #22]
 80143ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143ee:	bf88      	it	hi
 80143f0:	f641 131a 	movwhi	r3, #6426	; 0x191a
 80143f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80143f8:	ed98 7a1c 	vldr	s14, [r8, #112]	; 0x70
 80143fc:	edd8 7a1d 	vldr	s15, [r8, #116]	; 0x74
 8014400:	bf88      	it	hi
 8014402:	f8ab 3018 	strhhi.w	r3, [fp, #24]
 8014406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801440a:	bf88      	it	hi
 801440c:	f641 331c 	movwhi	r3, #6940	; 0x1b1c
 8014410:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014414:	bf88      	it	hi
 8014416:	f8ab 301a 	strhhi.w	r3, [fp, #26]
 801441a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801441e:	bf84      	itt	hi
 8014420:	f641 531e 	movwhi	r3, #7454	; 0x1d1e
 8014424:	f8ab 301c 	strhhi.w	r3, [fp, #28]
 8014428:	2304      	movs	r3, #4
 801442a:	9306      	str	r3, [sp, #24]
 801442c:	2302      	movs	r3, #2
 801442e:	9302      	str	r3, [sp, #8]
 8014430:	9b02      	ldr	r3, [sp, #8]
 8014432:	f103 0901 	add.w	r9, r3, #1
 8014436:	f1b9 0f1f 	cmp.w	r9, #31
 801443a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801443e:	9304      	str	r3, [sp, #16]
 8014440:	d055      	beq.n	80144ee <m_kalman_3gyro.isra.6.constprop.36+0xa3e>
 8014442:	2301      	movs	r3, #1
 8014444:	9301      	str	r3, [sp, #4]
 8014446:	9b01      	ldr	r3, [sp, #4]
 8014448:	9a04      	ldr	r2, [sp, #16]
 801444a:	18d7      	adds	r7, r2, r3
 801444c:	2f1f      	cmp	r7, #31
 801444e:	bfa8      	it	ge
 8014450:	271f      	movge	r7, #31
 8014452:	eba7 0a03 	sub.w	sl, r7, r3
 8014456:	f1ba 0f00 	cmp.w	sl, #0
 801445a:	dd40      	ble.n	80144de <m_kalman_3gyro.isra.6.constprop.36+0xa2e>
 801445c:	461d      	mov	r5, r3
 801445e:	464e      	mov	r6, r9
 8014460:	2401      	movs	r4, #1
 8014462:	e008      	b.n	8014476 <m_kalman_3gyro.isra.6.constprop.36+0x9c6>
 8014464:	3601      	adds	r6, #1
 8014466:	ab8f      	add	r3, sp, #572	; 0x23c
 8014468:	42be      	cmp	r6, r7
 801446a:	541a      	strb	r2, [r3, r0]
 801446c:	f000 81a6 	beq.w	80147bc <m_kalman_3gyro.isra.6.constprop.36+0xd0c>
 8014470:	3401      	adds	r4, #1
 8014472:	45a2      	cmp	sl, r4
 8014474:	db2c      	blt.n	80144d0 <m_kalman_3gyro.isra.6.constprop.36+0xa20>
 8014476:	f105 3cff 	add.w	ip, r5, #4294967295
 801447a:	1e71      	subs	r1, r6, #1
 801447c:	f91b 300c 	ldrsb.w	r3, [fp, ip]
 8014480:	f91b 2001 	ldrsb.w	r2, [fp, r1]
 8014484:	eb08 0e83 	add.w	lr, r8, r3, lsl #2
 8014488:	eb08 0082 	add.w	r0, r8, r2, lsl #2
 801448c:	ed50 7a01 	vldr	s15, [r0, #-4]
 8014490:	ed1e 7a01 	vldr	s14, [lr, #-4]
 8014494:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801449c:	f104 30ff 	add.w	r0, r4, #4294967295
 80144a0:	d8e0      	bhi.n	8014464 <m_kalman_3gyro.isra.6.constprop.36+0x9b4>
 80144a2:	3501      	adds	r5, #1
 80144a4:	aa8f      	add	r2, sp, #572	; 0x23c
 80144a6:	45a9      	cmp	r9, r5
 80144a8:	5413      	strb	r3, [r2, r0]
 80144aa:	d1e1      	bne.n	8014470 <m_kalman_3gyro.isra.6.constprop.36+0x9c0>
 80144ac:	ab8f      	add	r3, sp, #572	; 0x23c
 80144ae:	42be      	cmp	r6, r7
 80144b0:	eba7 0206 	sub.w	r2, r7, r6
 80144b4:	eb03 0004 	add.w	r0, r3, r4
 80144b8:	4459      	add	r1, fp
 80144ba:	f280 818e 	bge.w	80147da <m_kalman_3gyro.isra.6.constprop.36+0xd2a>
 80144be:	443c      	add	r4, r7
 80144c0:	1ba4      	subs	r4, r4, r6
 80144c2:	3401      	adds	r4, #1
 80144c4:	f005 fda0 	bl	801a008 <memcpy>
 80144c8:	45a2      	cmp	sl, r4
 80144ca:	464d      	mov	r5, r9
 80144cc:	463e      	mov	r6, r7
 80144ce:	dad2      	bge.n	8014476 <m_kalman_3gyro.isra.6.constprop.36+0x9c6>
 80144d0:	9b01      	ldr	r3, [sp, #4]
 80144d2:	1e58      	subs	r0, r3, #1
 80144d4:	4458      	add	r0, fp
 80144d6:	4652      	mov	r2, sl
 80144d8:	a98f      	add	r1, sp, #572	; 0x23c
 80144da:	f005 fd95 	bl	801a008 <memcpy>
 80144de:	9b02      	ldr	r3, [sp, #8]
 80144e0:	9701      	str	r7, [sp, #4]
 80144e2:	eb03 0907 	add.w	r9, r3, r7
 80144e6:	f1b9 0f1e 	cmp.w	r9, #30
 80144ea:	ddac      	ble.n	8014446 <m_kalman_3gyro.isra.6.constprop.36+0x996>
 80144ec:	9b04      	ldr	r3, [sp, #16]
 80144ee:	9302      	str	r3, [sp, #8]
 80144f0:	9b06      	ldr	r3, [sp, #24]
 80144f2:	3b01      	subs	r3, #1
 80144f4:	9306      	str	r3, [sp, #24]
 80144f6:	d19b      	bne.n	8014430 <m_kalman_3gyro.isra.6.constprop.36+0x980>
 80144f8:	f99b 200e 	ldrsb.w	r2, [fp, #14]
 80144fc:	f99b 300f 	ldrsb.w	r3, [fp, #15]
 8014500:	eb08 0282 	add.w	r2, r8, r2, lsl #2
 8014504:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8014508:	ed52 7a01 	vldr	s15, [r2, #-4]
 801450c:	ed13 7a01 	vldr	s14, [r3, #-4]
 8014510:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014518:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801451c:	bf4c      	ite	mi
 801451e:	2201      	movmi	r2, #1
 8014520:	2200      	movpl	r2, #0
 8014522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014526:	bf4c      	ite	mi
 8014528:	2301      	movmi	r3, #1
 801452a:	2300      	movpl	r3, #0
 801452c:	429a      	cmp	r2, r3
 801452e:	f000 8156 	beq.w	80147de <m_kalman_3gyro.isra.6.constprop.36+0xd2e>
 8014532:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014536:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801453a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801453e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014540:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8014542:	3204      	adds	r2, #4
 8014544:	920a      	str	r2, [sp, #40]	; 0x28
 8014546:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014548:	ece3 7a01 	vstmia	r3!, {s15}
 801454c:	4293      	cmp	r3, r2
 801454e:	9326      	str	r3, [sp, #152]	; 0x98
 8014550:	f47f ae79 	bne.w	8014246 <m_kalman_3gyro.isra.6.constprop.36+0x796>
 8014554:	f8dd a6e0 	ldr.w	sl, [sp, #1760]	; 0x6e0
 8014558:	edda 7af3 	vldr	s15, [sl, #972]	; 0x3cc
 801455c:	edda 6af2 	vldr	s13, [sl, #968]	; 0x3c8
 8014560:	ed9a 7af4 	vldr	s14, [sl, #976]	; 0x3d0
 8014564:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8014568:	eee6 7aa6 	vfma.f32	s15, s13, s13
 801456c:	eee7 7a07 	vfma.f32	s15, s14, s14
 8014570:	ee17 0a90 	vmov	r0, s15
 8014574:	f7eb fff0 	bl	8000558 <__aeabi_f2d>
 8014578:	f006 fe74 	bl	801b264 <sqrt>
 801457c:	f7ec fb1c 	bl	8000bb8 <__aeabi_d2f>
 8014580:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8014584:	ee2e 6a07 	vmul.f32	s12, s28, s14
 8014588:	ee6e 6a87 	vmul.f32	s13, s29, s14
 801458c:	eecd 7a86 	vdiv.f32	s15, s27, s12
 8014590:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8014592:	9002      	str	r0, [sp, #8]
 8014594:	ee8c 6aa6 	vdiv.f32	s12, s25, s13
 8014598:	ee2f 7a07 	vmul.f32	s14, s30, s14
 801459c:	edc3 7a00 	vstr	s15, [r3]
 80145a0:	eec8 6a07 	vdiv.f32	s13, s16, s14
 80145a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80145a6:	ed1f 7ad1 	vldr	s14, [pc, #-836]	; 8014264 <m_kalman_3gyro.isra.6.constprop.36+0x7b4>
 80145aa:	ed83 6a00 	vstr	s12, [r3]
 80145ae:	ee77 7a86 	vadd.f32	s15, s15, s12
 80145b2:	ee28 8a07 	vmul.f32	s16, s16, s14
 80145b6:	ee05 0a90 	vmov	s11, r0
 80145ba:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80145be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80145c2:	eeac 8a87 	vfma.f32	s16, s25, s14
 80145c6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80145c8:	ee25 7a87 	vmul.f32	s14, s11, s14
 80145cc:	edc3 6a00 	vstr	s13, [r3]
 80145d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80145d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80145d6:	ed1f 6adc 	vldr	s12, [pc, #-880]	; 8014268 <m_kalman_3gyro.isra.6.constprop.36+0x7b8>
 80145da:	ed83 7a00 	vstr	s14, [r3]
 80145de:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 80145e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80145e4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80145e8:	ee28 8a06 	vmul.f32	s16, s16, s12
 80145ec:	edc3 7a00 	vstr	s15, [r3]
 80145f0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80145f2:	ed83 8a00 	vstr	s16, [r3]
 80145f6:	f89a 38ce 	ldrb.w	r3, [sl, #2254]	; 0x8ce
 80145fa:	2b00      	cmp	r3, #0
 80145fc:	f000 829e 	beq.w	8014b3c <m_kalman_3gyro.isra.6.constprop.36+0x108c>
 8014600:	f60a 03c8 	addw	r3, sl, #2248	; 0x8c8
 8014604:	9304      	str	r3, [sp, #16]
 8014606:	f50a 630c 	add.w	r3, sl, #2240	; 0x8c0
 801460a:	f60a 09c4 	addw	r9, sl, #2244	; 0x8c4
 801460e:	9301      	str	r3, [sp, #4]
 8014610:	f60a 07bc 	addw	r7, sl, #2236	; 0x8bc
 8014614:	f60a 06b8 	addw	r6, sl, #2232	; 0x8b8
 8014618:	461c      	mov	r4, r3
 801461a:	ed99 7a00 	vldr	s14, [r9]
 801461e:	9b04      	ldr	r3, [sp, #16]
 8014620:	ed8d 7a12 	vstr	s14, [sp, #72]	; 0x48
 8014624:	ed83 7a00 	vstr	s14, [r3]
 8014628:	e9da 010a 	ldrd	r0, r1, [sl, #40]	; 0x28
 801462c:	f7ec fac4 	bl	8000bb8 <__aeabi_d2f>
 8014630:	ed94 6a00 	vldr	s12, [r4]
 8014634:	9004      	str	r0, [sp, #16]
 8014636:	ed89 6a00 	vstr	s12, [r9]
 801463a:	e9da 0108 	ldrd	r0, r1, [sl, #32]
 801463e:	ed8d 6a0a 	vstr	s12, [sp, #40]	; 0x28
 8014642:	f7ec fab9 	bl	8000bb8 <__aeabi_d2f>
 8014646:	edd7 7a00 	vldr	s15, [r7]
 801464a:	9001      	str	r0, [sp, #4]
 801464c:	edc4 7a00 	vstr	s15, [r4]
 8014650:	e9da 0106 	ldrd	r0, r1, [sl, #24]
 8014654:	edcd 7a06 	vstr	s15, [sp, #24]
 8014658:	f7ec faae 	bl	8000bb8 <__aeabi_d2f>
 801465c:	eddd 7a06 	vldr	s15, [sp, #24]
 8014660:	ed9d 6a0a 	vldr	s12, [sp, #40]	; 0x28
 8014664:	edd6 6a00 	vldr	s13, [r6]
 8014668:	ee07 0a10 	vmov	s14, r0
 801466c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014670:	ed9d 7a01 	vldr	s14, [sp, #4]
 8014674:	edc7 6a00 	vstr	s13, [r7]
 8014678:	eee7 7a06 	vfma.f32	s15, s14, s12
 801467c:	e9da 0104 	ldrd	r0, r1, [sl, #16]
 8014680:	edcd 6a06 	vstr	s13, [sp, #24]
 8014684:	edcd 7a01 	vstr	s15, [sp, #4]
 8014688:	f7ec fa96 	bl	8000bb8 <__aeabi_d2f>
 801468c:	eddd 7a01 	vldr	s15, [sp, #4]
 8014690:	eddd 6a06 	vldr	s13, [sp, #24]
 8014694:	ee07 0a10 	vmov	s14, r0
 8014698:	eee6 7a87 	vfma.f32	s15, s13, s14
 801469c:	e9da 0102 	ldrd	r0, r1, [sl, #8]
 80146a0:	ed9d 7a12 	vldr	s14, [sp, #72]	; 0x48
 80146a4:	eddd 6a04 	vldr	s13, [sp, #16]
 80146a8:	ed86 8a00 	vstr	s16, [r6]
 80146ac:	eee6 7a87 	vfma.f32	s15, s13, s14
 80146b0:	edcd 7a01 	vstr	s15, [sp, #4]
 80146b4:	f7ec fa80 	bl	8000bb8 <__aeabi_d2f>
 80146b8:	eddd 7a01 	vldr	s15, [sp, #4]
 80146bc:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80146be:	ee07 0a10 	vmov	s14, r0
 80146c2:	eee8 7a07 	vfma.f32	s15, s16, s14
 80146c6:	2200      	movs	r2, #0
 80146c8:	2300      	movs	r3, #0
 80146ca:	edc1 7a00 	vstr	s15, [r1]
 80146ce:	f50d 61d7 	add.w	r1, sp, #1720	; 0x6b8
 80146d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80146d6:	eeb0 8a67 	vmov.f32	s16, s15
 80146da:	f7ec fa11 	bl	8000b00 <__aeabi_dcmple>
 80146de:	2800      	cmp	r0, #0
 80146e0:	f040 834a 	bne.w	8014d78 <m_kalman_3gyro.isra.6.constprop.36+0x12c8>
 80146e4:	f50d 61d7 	add.w	r1, sp, #1720	; 0x6b8
 80146e8:	2200      	movs	r2, #0
 80146ea:	4b4e      	ldr	r3, [pc, #312]	; (8014824 <m_kalman_3gyro.isra.6.constprop.36+0xd74>)
 80146ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80146f0:	f7ec f9f2 	bl	8000ad8 <__aeabi_dcmpeq>
 80146f4:	2800      	cmp	r0, #0
 80146f6:	f000 8284 	beq.w	8014c02 <m_kalman_3gyro.isra.6.constprop.36+0x1152>
 80146fa:	eddd 7ab6 	vldr	s15, [sp, #728]	; 0x2d8
 80146fe:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8014702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014706:	f302 83c0 	bgt.w	8016e8a <m_kalman_3gyro.isra.6.constprop.36+0x33da>
 801470a:	eddd 7ac3 	vldr	s15, [sp, #780]	; 0x30c
 801470e:	ed9d 7ad0 	vldr	s14, [sp, #832]	; 0x340
 8014712:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014714:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8014718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801471c:	edc3 7a00 	vstr	s15, [r3]
 8014720:	f142 83bf 	bpl.w	8016ea2 <m_kalman_3gyro.isra.6.constprop.36+0x33f2>
 8014724:	ed9d 7adc 	vldr	s14, [sp, #880]	; 0x370
 8014728:	eeb4 7ac8 	vcmpe.f32	s14, s16
 801472c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014730:	f340 831a 	ble.w	8014d68 <m_kalman_3gyro.isra.6.constprop.36+0x12b8>
 8014734:	200d      	movs	r0, #13
 8014736:	2402      	movs	r4, #2
 8014738:	2101      	movs	r1, #1
 801473a:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
 801473e:	180b      	adds	r3, r1, r0
 8014740:	085b      	lsrs	r3, r3, #1
 8014742:	199a      	adds	r2, r3, r6
 8014744:	f50d 65c6 	add.w	r5, sp, #1584	; 0x630
 8014748:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 801474c:	f5a5 753c 	sub.w	r5, r5, #752	; 0x2f0
 8014750:	e00e      	b.n	8014770 <m_kalman_3gyro.isra.6.constprop.36+0xcc0>
 8014752:	18ca      	adds	r2, r1, r3
 8014754:	4618      	mov	r0, r3
 8014756:	429c      	cmp	r4, r3
 8014758:	ea4f 0352 	mov.w	r3, r2, lsr #1
 801475c:	eb03 0206 	add.w	r2, r3, r6
 8014760:	f50d 65c6 	add.w	r5, sp, #1584	; 0x630
 8014764:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 8014768:	f5a5 753c 	sub.w	r5, r5, #752	; 0x2f0
 801476c:	f083 810b 	bcs.w	8017986 <m_kalman_3gyro.isra.6.constprop.36+0x3ed6>
 8014770:	ed95 7a00 	vldr	s14, [r5]
 8014774:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8014778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801477c:	dbe9      	blt.n	8014752 <m_kalman_3gyro.isra.6.constprop.36+0xca2>
 801477e:	1c5c      	adds	r4, r3, #1
 8014780:	42a0      	cmp	r0, r4
 8014782:	4619      	mov	r1, r3
 8014784:	d8db      	bhi.n	801473e <m_kalman_3gyro.isra.6.constprop.36+0xc8e>
 8014786:	0092      	lsls	r2, r2, #2
 8014788:	009b      	lsls	r3, r3, #2
 801478a:	a9d0      	add	r1, sp, #832	; 0x340
 801478c:	1888      	adds	r0, r1, r2
 801478e:	4419      	add	r1, r3
 8014790:	edd0 6a00 	vldr	s13, [r0]
 8014794:	ed91 7a00 	vldr	s14, [r1]
 8014798:	ee78 5a66 	vsub.f32	s11, s16, s13
 801479c:	ee37 7a66 	vsub.f32	s14, s14, s13
 80147a0:	a9dd      	add	r1, sp, #884	; 0x374
 80147a2:	ee85 6a87 	vdiv.f32	s12, s11, s14
 80147a6:	440a      	add	r2, r1
 80147a8:	440b      	add	r3, r1
 80147aa:	ed92 7a00 	vldr	s14, [r2]
 80147ae:	edd3 6a00 	vldr	s13, [r3]
 80147b2:	ee76 6ac7 	vsub.f32	s13, s13, s14
 80147b6:	eea6 7a26 	vfma.f32	s14, s12, s13
 80147ba:	e2d7      	b.n	8014d6c <m_kalman_3gyro.isra.6.constprop.36+0x12bc>
 80147bc:	45a9      	cmp	r9, r5
 80147be:	eba9 0205 	sub.w	r2, r9, r5
 80147c2:	eb03 0004 	add.w	r0, r3, r4
 80147c6:	eb0b 010c 	add.w	r1, fp, ip
 80147ca:	f77f ae51 	ble.w	8014470 <m_kalman_3gyro.isra.6.constprop.36+0x9c0>
 80147ce:	444c      	add	r4, r9
 80147d0:	1b64      	subs	r4, r4, r5
 80147d2:	f005 fc19 	bl	801a008 <memcpy>
 80147d6:	464d      	mov	r5, r9
 80147d8:	e64a      	b.n	8014470 <m_kalman_3gyro.isra.6.constprop.36+0x9c0>
 80147da:	464d      	mov	r5, r9
 80147dc:	e648      	b.n	8014470 <m_kalman_3gyro.isra.6.constprop.36+0x9c0>
 80147de:	eddd 6a36 	vldr	s13, [sp, #216]	; 0xd8
 80147e2:	eef4 7a66 	vcmp.f32	s15, s13
 80147e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147ea:	f43f aea2 	beq.w	8014532 <m_kalman_3gyro.isra.6.constprop.36+0xa82>
 80147ee:	ed9d 6a37 	vldr	s12, [sp, #220]	; 0xdc
 80147f2:	eef4 7a46 	vcmp.f32	s15, s12
 80147f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147fa:	f43f ae9a 	beq.w	8014532 <m_kalman_3gyro.isra.6.constprop.36+0xa82>
 80147fe:	eeb4 7a66 	vcmp.f32	s14, s13
 8014802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014806:	f43f ae94 	beq.w	8014532 <m_kalman_3gyro.isra.6.constprop.36+0xa82>
 801480a:	eeb4 7a46 	vcmp.f32	s14, s12
 801480e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014812:	f43f ae8e 	beq.w	8014532 <m_kalman_3gyro.isra.6.constprop.36+0xa82>
 8014816:	ee37 7a67 	vsub.f32	s14, s14, s15
 801481a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801481e:	eee7 7a26 	vfma.f32	s15, s14, s13
 8014822:	e68c      	b.n	801453e <m_kalman_3gyro.isra.6.constprop.36+0xa8e>
 8014824:	3ff00000 	.word	0x3ff00000
 8014828:	f50d 60d7 	add.w	r0, sp, #1720	; 0x6b8
 801482c:	ed90 7b00 	vldr	d7, [r0]
 8014830:	ae47      	add	r6, sp, #284	; 0x11c
 8014832:	2101      	movs	r1, #1
 8014834:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014838:	2500      	movs	r5, #0
 801483a:	ed8a 7b0e 	vstr	d7, [sl, #56]	; 0x38
 801483e:	f8ca 4044 	str.w	r4, [sl, #68]	; 0x44
 8014842:	f88a 18cd 	strb.w	r1, [sl, #2253]	; 0x8cd
 8014846:	f8aa 2030 	strh.w	r2, [sl, #48]	; 0x30
 801484a:	4621      	mov	r1, r4
 801484c:	e9ca 4412 	strd	r4, r4, [sl, #72]	; 0x48
 8014850:	e9ca 4415 	strd	r4, r4, [sl, #84]	; 0x54
 8014854:	f8ca 405c 	str.w	r4, [sl, #92]	; 0x5c
 8014858:	2230      	movs	r2, #48	; 0x30
 801485a:	edca ca18 	vstr	s25, [sl, #96]	; 0x60
 801485e:	edca ca14 	vstr	s25, [sl, #80]	; 0x50
 8014862:	edca ca10 	vstr	s25, [sl, #64]	; 0x40
 8014866:	f10a 0064 	add.w	r0, sl, #100	; 0x64
 801486a:	6035      	str	r5, [r6, #0]
 801486c:	6075      	str	r5, [r6, #4]
 801486e:	60b5      	str	r5, [r6, #8]
 8014870:	60f5      	str	r5, [r6, #12]
 8014872:	9609      	str	r6, [sp, #36]	; 0x24
 8014874:	f005 fbd3 	bl	801a01e <memset>
 8014878:	4bae      	ldr	r3, [pc, #696]	; (8014b34 <m_kalman_3gyro.isra.6.constprop.36+0x1084>)
 801487a:	f8ca 5094 	str.w	r5, [sl, #148]	; 0x94
 801487e:	4621      	mov	r1, r4
 8014880:	f8ca 5098 	str.w	r5, [sl, #152]	; 0x98
 8014884:	f8ca 509c 	str.w	r5, [sl, #156]	; 0x9c
 8014888:	f8ca 30ac 	str.w	r3, [sl, #172]	; 0xac
 801488c:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8014890:	edca ca2c 	vstr	s25, [sl, #176]	; 0xb0
 8014894:	edca ca2d 	vstr	s25, [sl, #180]	; 0xb4
 8014898:	f10a 00b8 	add.w	r0, sl, #184	; 0xb8
 801489c:	f005 fbbf 	bl	801a01e <memset>
 80148a0:	2400      	movs	r4, #0
 80148a2:	4ba5      	ldr	r3, [pc, #660]	; (8014b38 <m_kalman_3gyro.isra.6.constprop.36+0x1088>)
 80148a4:	f8ca 30b8 	str.w	r3, [sl, #184]	; 0xb8
 80148a8:	f04f 5b7e 	mov.w	fp, #1065353216	; 0x3f800000
 80148ac:	f04f 3001 	mov.w	r0, #16843009	; 0x1010101
 80148b0:	4621      	mov	r1, r4
 80148b2:	f8ca 30e0 	str.w	r3, [sl, #224]	; 0xe0
 80148b6:	f8ca 3108 	str.w	r3, [sl, #264]	; 0x108
 80148ba:	f8ca 3130 	str.w	r3, [sl, #304]	; 0x130
 80148be:	f8ca 3158 	str.w	r3, [sl, #344]	; 0x158
 80148c2:	f8ca 3180 	str.w	r3, [sl, #384]	; 0x180
 80148c6:	f8ca 31a8 	str.w	r3, [sl, #424]	; 0x1a8
 80148ca:	f8ca 31d0 	str.w	r3, [sl, #464]	; 0x1d0
 80148ce:	f8ca 31f8 	str.w	r3, [sl, #504]	; 0x1f8
 80148d2:	f8ca 01fc 	str.w	r0, [sl, #508]	; 0x1fc
 80148d6:	f8ca 0200 	str.w	r0, [sl, #512]	; 0x200
 80148da:	f8ca 0204 	str.w	r0, [sl, #516]	; 0x204
 80148de:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80148e2:	f8ca 4218 	str.w	r4, [sl, #536]	; 0x218
 80148e6:	f8ca 421c 	str.w	r4, [sl, #540]	; 0x21c
 80148ea:	f8ca 4220 	str.w	r4, [sl, #544]	; 0x220
 80148ee:	f8ca 4228 	str.w	r4, [sl, #552]	; 0x228
 80148f2:	f8ca 422c 	str.w	r4, [sl, #556]	; 0x22c
 80148f6:	f8ca 4230 	str.w	r4, [sl, #560]	; 0x230
 80148fa:	f8ca 423c 	str.w	r4, [sl, #572]	; 0x23c
 80148fe:	f8ca b234 	str.w	fp, [sl, #564]	; 0x234
 8014902:	f8ca b224 	str.w	fp, [sl, #548]	; 0x224
 8014906:	f8ca b214 	str.w	fp, [sl, #532]	; 0x214
 801490a:	f8ca 4240 	str.w	r4, [sl, #576]	; 0x240
 801490e:	f8ca 4244 	str.w	r4, [sl, #580]	; 0x244
 8014912:	f8ca 424c 	str.w	r4, [sl, #588]	; 0x24c
 8014916:	f8ca 4250 	str.w	r4, [sl, #592]	; 0x250
 801491a:	f8ca 4254 	str.w	r4, [sl, #596]	; 0x254
 801491e:	f8ca b258 	str.w	fp, [sl, #600]	; 0x258
 8014922:	f8ca b248 	str.w	fp, [sl, #584]	; 0x248
 8014926:	f8ca b238 	str.w	fp, [sl, #568]	; 0x238
 801492a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801492c:	f005 fb77 	bl	801a01e <memset>
 8014930:	f20a 4e24 	addw	lr, sl, #1060	; 0x424
 8014934:	f8cd e070 	str.w	lr, [sp, #112]	; 0x70
 8014938:	f50a 6e85 	add.w	lr, sl, #1064	; 0x428
 801493c:	f8cd e074 	str.w	lr, [sp, #116]	; 0x74
 8014940:	f20a 4e2c 	addw	lr, sl, #1068	; 0x42c
 8014944:	f8cd e078 	str.w	lr, [sp, #120]	; 0x78
 8014948:	f50a 6e86 	add.w	lr, sl, #1072	; 0x430
 801494c:	f8cd e05c 	str.w	lr, [sp, #92]	; 0x5c
 8014950:	f20a 4e34 	addw	lr, sl, #1076	; 0x434
 8014954:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
 8014958:	f50a 6e87 	add.w	lr, sl, #1080	; 0x438
 801495c:	f8cd e07c 	str.w	lr, [sp, #124]	; 0x7c
 8014960:	f20a 4e3c 	addw	lr, sl, #1084	; 0x43c
 8014964:	f50a 7375 	add.w	r3, sl, #980	; 0x3d4
 8014968:	f8cd e044 	str.w	lr, [sp, #68]	; 0x44
 801496c:	f50a 6e88 	add.w	lr, sl, #1088	; 0x440
 8014970:	9312      	str	r3, [sp, #72]	; 0x48
 8014972:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 8014976:	f20a 4e44 	addw	lr, sl, #1092	; 0x444
 801497a:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801497c:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 8014980:	f20a 4004 	addw	r0, sl, #1028	; 0x404
 8014984:	f50a 6582 	add.w	r5, sl, #1040	; 0x410
 8014988:	f50a 6e89 	add.w	lr, sl, #1096	; 0x448
 801498c:	2600      	movs	r6, #0
 801498e:	9013      	str	r0, [sp, #76]	; 0x4c
 8014990:	9514      	str	r5, [sp, #80]	; 0x50
 8014992:	f20a 4014 	addw	r0, sl, #1044	; 0x414
 8014996:	f50a 6583 	add.w	r5, sl, #1048	; 0x418
 801499a:	f20a 4c1c 	addw	ip, sl, #1052	; 0x41c
 801499e:	f8cd e060 	str.w	lr, [sp, #96]	; 0x60
 80149a2:	f20a 4e4c 	addw	lr, sl, #1100	; 0x44c
 80149a6:	f8ca 43d4 	str.w	r4, [sl, #980]	; 0x3d4
 80149aa:	f8ca 63c4 	str.w	r6, [sl, #964]	; 0x3c4
 80149ae:	f8ca 63c8 	str.w	r6, [sl, #968]	; 0x3c8
 80149b2:	f8ca 63cc 	str.w	r6, [sl, #972]	; 0x3cc
 80149b6:	f8ca 63d0 	str.w	r6, [sl, #976]	; 0x3d0
 80149ba:	9015      	str	r0, [sp, #84]	; 0x54
 80149bc:	607c      	str	r4, [r7, #4]
 80149be:	60bc      	str	r4, [r7, #8]
 80149c0:	9516      	str	r5, [sp, #88]	; 0x58
 80149c2:	f8cd c06c 	str.w	ip, [sp, #108]	; 0x6c
 80149c6:	f8cd e03c 	str.w	lr, [sp, #60]	; 0x3c
 80149ca:	f8ca 43e0 	str.w	r4, [sl, #992]	; 0x3e0
 80149ce:	f8ca 43e4 	str.w	r4, [sl, #996]	; 0x3e4
 80149d2:	f8ca 43e8 	str.w	r4, [sl, #1000]	; 0x3e8
 80149d6:	f8ca 43ec 	str.w	r4, [sl, #1004]	; 0x3ec
 80149da:	f8ca 43f0 	str.w	r4, [sl, #1008]	; 0x3f0
 80149de:	f8ca 43f4 	str.w	r4, [sl, #1012]	; 0x3f4
 80149e2:	f8ca 43f8 	str.w	r4, [sl, #1016]	; 0x3f8
 80149e6:	f8ca 43fc 	str.w	r4, [sl, #1020]	; 0x3fc
 80149ea:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80149ec:	f8ca 4400 	str.w	r4, [sl, #1024]	; 0x400
 80149f0:	f50a 6881 	add.w	r8, sl, #1032	; 0x408
 80149f4:	601e      	str	r6, [r3, #0]
 80149f6:	f20a 490c 	addw	r9, sl, #1036	; 0x40c
 80149fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80149fc:	f8c8 6000 	str.w	r6, [r8]
 8014a00:	f8c9 6000 	str.w	r6, [r9]
 8014a04:	601e      	str	r6, [r3, #0]
 8014a06:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014a08:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 8014a0a:	601e      	str	r6, [r3, #0]
 8014a0c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8014a0e:	601e      	str	r6, [r3, #0]
 8014a10:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014a12:	f50a 6084 	add.w	r0, sl, #1056	; 0x420
 8014a16:	601e      	str	r6, [r3, #0]
 8014a18:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8014a1a:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
 8014a1e:	f8c0 c000 	str.w	ip, [r0]
 8014a22:	601e      	str	r6, [r3, #0]
 8014a24:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8014a26:	603e      	str	r6, [r7, #0]
 8014a28:	601e      	str	r6, [r3, #0]
 8014a2a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014a2c:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8014a2e:	601e      	str	r6, [r3, #0]
 8014a30:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014a32:	603e      	str	r6, [r7, #0]
 8014a34:	601e      	str	r6, [r3, #0]
 8014a36:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014a38:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8014a3a:	f8c3 b000 	str.w	fp, [r3]
 8014a3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014a40:	ed87 8a00 	vstr	s16, [r7]
 8014a44:	601e      	str	r6, [r3, #0]
 8014a46:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8014a48:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8014a4a:	f8c3 b000 	str.w	fp, [r3]
 8014a4e:	2532      	movs	r5, #50	; 0x32
 8014a50:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8014a52:	603e      	str	r6, [r7, #0]
 8014a54:	f8ca 4450 	str.w	r4, [sl, #1104]	; 0x450
 8014a58:	f8ca 4454 	str.w	r4, [sl, #1108]	; 0x454
 8014a5c:	f8ca 445c 	str.w	r4, [sl, #1116]	; 0x45c
 8014a60:	f8ca 5458 	str.w	r5, [sl, #1112]	; 0x458
 8014a64:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014a68:	ab74      	add	r3, sp, #464	; 0x1d0
 8014a6a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8014a6e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014a70:	f8d3 b000 	ldr.w	fp, [r3]
 8014a74:	f8d3 e004 	ldr.w	lr, [r3, #4]
 8014a78:	f8d3 c008 	ldr.w	ip, [r3, #8]
 8014a7c:	ca07      	ldmia	r2, {r0, r1, r2}
 8014a7e:	ac77      	add	r4, sp, #476	; 0x1dc
 8014a80:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8014a84:	9a08      	ldr	r2, [sp, #32]
 8014a86:	ca07      	ldmia	r2, {r0, r1, r2}
 8014a88:	ac7a      	add	r4, sp, #488	; 0x1e8
 8014a8a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8014a8e:	68de      	ldr	r6, [r3, #12]
 8014a90:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8014a92:	691d      	ldr	r5, [r3, #16]
 8014a94:	695c      	ldr	r4, [r3, #20]
 8014a96:	6998      	ldr	r0, [r3, #24]
 8014a98:	69d9      	ldr	r1, [r3, #28]
 8014a9a:	6a1a      	ldr	r2, [r3, #32]
 8014a9c:	f8cd 9010 	str.w	r9, [sp, #16]
 8014aa0:	463b      	mov	r3, r7
 8014aa2:	46c1      	mov	r9, r8
 8014aa4:	f507 6787 	add.w	r7, r7, #1080	; 0x438
 8014aa8:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8014aac:	9735      	str	r7, [sp, #212]	; 0xd4
 8014aae:	f8c3 b000 	str.w	fp, [r3]
 8014ab2:	f8c3 e004 	str.w	lr, [r3, #4]
 8014ab6:	f8c3 c008 	str.w	ip, [r3, #8]
 8014aba:	60de      	str	r6, [r3, #12]
 8014abc:	611d      	str	r5, [r3, #16]
 8014abe:	615c      	str	r4, [r3, #20]
 8014ac0:	6198      	str	r0, [r3, #24]
 8014ac2:	61d9      	str	r1, [r3, #28]
 8014ac4:	621a      	str	r2, [r3, #32]
 8014ac6:	3324      	adds	r3, #36	; 0x24
 8014ac8:	42bb      	cmp	r3, r7
 8014aca:	d1f0      	bne.n	8014aae <m_kalman_3gyro.isra.6.constprop.36+0xffe>
 8014acc:	f8dd 36c0 	ldr.w	r3, [sp, #1728]	; 0x6c0
 8014ad0:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8014ad4:	681a      	ldr	r2, [r3, #0]
 8014ad6:	ed9d ca40 	vldr	s24, [sp, #256]	; 0x100
 8014ada:	eddd ba3f 	vldr	s23, [sp, #252]	; 0xfc
 8014ade:	eddd 9a3e 	vldr	s19, [sp, #248]	; 0xf8
 8014ae2:	ed9d ba41 	vldr	s22, [sp, #260]	; 0x104
 8014ae6:	eddd aa42 	vldr	s21, [sp, #264]	; 0x108
 8014aea:	ed9d aa43 	vldr	s20, [sp, #268]	; 0x10c
 8014aee:	f60a 0398 	addw	r3, sl, #2200	; 0x898
 8014af2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8014af6:	601a      	str	r2, [r3, #0]
 8014af8:	f8dd 36c0 	ldr.w	r3, [sp, #1728]	; 0x6c0
 8014afc:	685a      	ldr	r2, [r3, #4]
 8014afe:	f60a 039c 	addw	r3, sl, #2204	; 0x89c
 8014b02:	46c8      	mov	r8, r9
 8014b04:	601a      	str	r2, [r3, #0]
 8014b06:	f8dd 36c0 	ldr.w	r3, [sp, #1728]	; 0x6c0
 8014b0a:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8014b0e:	6898      	ldr	r0, [r3, #8]
 8014b10:	f50a 620a 	add.w	r2, sl, #2208	; 0x8a0
 8014b14:	2300      	movs	r3, #0
 8014b16:	6010      	str	r0, [r2, #0]
 8014b18:	f88a 38a4 	strb.w	r3, [sl, #2212]	; 0x8a4
 8014b1c:	f8ca 38a6 	str.w	r3, [sl, #2214]	; 0x8a6
 8014b20:	f88a 38ad 	strb.w	r3, [sl, #2221]	; 0x8ad
 8014b24:	f88a 38ae 	strb.w	r3, [sl, #2222]	; 0x8ae
 8014b28:	f8ca 38b0 	str.w	r3, [sl, #2224]	; 0x8b0
 8014b2c:	f8aa 18aa 	strh.w	r1, [sl, #2218]	; 0x8aa
 8014b30:	f7ff b8f8 	b.w	8013d24 <m_kalman_3gyro.isra.6.constprop.36+0x274>
 8014b34:	3f666666 	.word	0x3f666666
 8014b38:	40a00000 	.word	0x40a00000
 8014b3c:	ed9a 7b02 	vldr	d7, [sl, #8]
 8014b40:	f50a 620c 	add.w	r2, sl, #2240	; 0x8c0
 8014b44:	4614      	mov	r4, r2
 8014b46:	2301      	movs	r3, #1
 8014b48:	f60a 06b8 	addw	r6, sl, #2232	; 0x8b8
 8014b4c:	f60a 07bc 	addw	r7, sl, #2236	; 0x8bc
 8014b50:	e9da 0104 	ldrd	r0, r1, [sl, #16]
 8014b54:	f88a 38ce 	strb.w	r3, [sl, #2254]	; 0x8ce
 8014b58:	9201      	str	r2, [sp, #4]
 8014b5a:	ed86 8a00 	vstr	s16, [r6]
 8014b5e:	e9da 2306 	ldrd	r2, r3, [sl, #24]
 8014b62:	ed87 8a00 	vstr	s16, [r7]
 8014b66:	ed84 8a00 	vstr	s16, [r4]
 8014b6a:	ed8d 7b06 	vstr	d7, [sp, #24]
 8014b6e:	f60a 09c4 	addw	r9, sl, #2244	; 0x8c4
 8014b72:	f7eb fb93 	bl	800029c <__adddf3>
 8014b76:	f60a 03c8 	addw	r3, sl, #2248	; 0x8c8
 8014b7a:	461c      	mov	r4, r3
 8014b7c:	9304      	str	r3, [sp, #16]
 8014b7e:	ed89 8a00 	vstr	s16, [r9]
 8014b82:	e9da 2308 	ldrd	r2, r3, [sl, #32]
 8014b86:	f7eb fb89 	bl	800029c <__adddf3>
 8014b8a:	e9da 230a 	ldrd	r2, r3, [sl, #40]	; 0x28
 8014b8e:	ed84 8a00 	vstr	s16, [r4]
 8014b92:	f7eb fb83 	bl	800029c <__adddf3>
 8014b96:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014b9a:	f7eb fb7f 	bl	800029c <__adddf3>
 8014b9e:	4602      	mov	r2, r0
 8014ba0:	460b      	mov	r3, r1
 8014ba2:	2000      	movs	r0, #0
 8014ba4:	4973      	ldr	r1, [pc, #460]	; (8014d74 <m_kalman_3gyro.isra.6.constprop.36+0x12c4>)
 8014ba6:	f7eb fe59 	bl	800085c <__aeabi_ddiv>
 8014baa:	4604      	mov	r4, r0
 8014bac:	460d      	mov	r5, r1
 8014bae:	4602      	mov	r2, r0
 8014bb0:	460b      	mov	r3, r1
 8014bb2:	e9da 0102 	ldrd	r0, r1, [sl, #8]
 8014bb6:	f7eb fd27 	bl	8000608 <__aeabi_dmul>
 8014bba:	4622      	mov	r2, r4
 8014bbc:	462b      	mov	r3, r5
 8014bbe:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8014bc2:	e9da 0104 	ldrd	r0, r1, [sl, #16]
 8014bc6:	f7eb fd1f 	bl	8000608 <__aeabi_dmul>
 8014bca:	4622      	mov	r2, r4
 8014bcc:	462b      	mov	r3, r5
 8014bce:	e9ca 0104 	strd	r0, r1, [sl, #16]
 8014bd2:	e9da 0106 	ldrd	r0, r1, [sl, #24]
 8014bd6:	f7eb fd17 	bl	8000608 <__aeabi_dmul>
 8014bda:	4622      	mov	r2, r4
 8014bdc:	462b      	mov	r3, r5
 8014bde:	e9ca 0106 	strd	r0, r1, [sl, #24]
 8014be2:	e9da 0108 	ldrd	r0, r1, [sl, #32]
 8014be6:	f7eb fd0f 	bl	8000608 <__aeabi_dmul>
 8014bea:	4622      	mov	r2, r4
 8014bec:	e9ca 0108 	strd	r0, r1, [sl, #32]
 8014bf0:	462b      	mov	r3, r5
 8014bf2:	e9da 010a 	ldrd	r0, r1, [sl, #40]	; 0x28
 8014bf6:	f7eb fd07 	bl	8000608 <__aeabi_dmul>
 8014bfa:	9c01      	ldr	r4, [sp, #4]
 8014bfc:	e9ca 010a 	strd	r0, r1, [sl, #40]	; 0x28
 8014c00:	e50b      	b.n	801461a <m_kalman_3gyro.isra.6.constprop.36+0xb6a>
 8014c02:	eddd 5ad1 	vldr	s11, [sp, #836]	; 0x344
 8014c06:	ed9d 6ab8 	vldr	s12, [sp, #736]	; 0x2e0
 8014c0a:	eddd 7ad2 	vldr	s15, [sp, #840]	; 0x348
 8014c0e:	eddd 4ab9 	vldr	s9, [sp, #740]	; 0x2e4
 8014c12:	ed9d 5ad3 	vldr	s10, [sp, #844]	; 0x34c
 8014c16:	eddd 6ab6 	vldr	s13, [sp, #728]	; 0x2d8
 8014c1a:	ed9d 7ad0 	vldr	s14, [sp, #832]	; 0x340
 8014c1e:	ed9d 4ab7 	vldr	s8, [sp, #732]	; 0x2dc
 8014c22:	ee65 5aa8 	vmul.f32	s11, s11, s17
 8014c26:	ee26 6a28 	vmul.f32	s12, s12, s17
 8014c2a:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8014c2e:	edcd 5ad1 	vstr	s11, [sp, #836]	; 0x344
 8014c32:	ed8d 6ab8 	vstr	s12, [sp, #736]	; 0x2e0
 8014c36:	eddd 5aba 	vldr	s11, [sp, #744]	; 0x2e8
 8014c3a:	ed9d 6ad4 	vldr	s12, [sp, #848]	; 0x350
 8014c3e:	edcd 7ad2 	vstr	s15, [sp, #840]	; 0x348
 8014c42:	eddd 7abb 	vldr	s15, [sp, #748]	; 0x2ec
 8014c46:	ee64 4aa8 	vmul.f32	s9, s9, s17
 8014c4a:	ee25 5a28 	vmul.f32	s10, s10, s17
 8014c4e:	ee65 5aa8 	vmul.f32	s11, s11, s17
 8014c52:	ee26 6a28 	vmul.f32	s12, s12, s17
 8014c56:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8014c5a:	edcd 4ab9 	vstr	s9, [sp, #740]	; 0x2e4
 8014c5e:	ed8d 5ad3 	vstr	s10, [sp, #844]	; 0x34c
 8014c62:	eddd 4ad5 	vldr	s9, [sp, #852]	; 0x354
 8014c66:	ed9d 5abc 	vldr	s10, [sp, #752]	; 0x2f0
 8014c6a:	edcd 5aba 	vstr	s11, [sp, #744]	; 0x2e8
 8014c6e:	ed8d 6ad4 	vstr	s12, [sp, #848]	; 0x350
 8014c72:	eddd 5ad6 	vldr	s11, [sp, #856]	; 0x358
 8014c76:	ed9d 6abd 	vldr	s12, [sp, #756]	; 0x2f4
 8014c7a:	edcd 7abb 	vstr	s15, [sp, #748]	; 0x2ec
 8014c7e:	eddd 7ad7 	vldr	s15, [sp, #860]	; 0x35c
 8014c82:	ee68 6aa6 	vmul.f32	s13, s17, s13
 8014c86:	ee24 4a28 	vmul.f32	s8, s8, s17
 8014c8a:	ee64 4aa8 	vmul.f32	s9, s9, s17
 8014c8e:	ee25 5a28 	vmul.f32	s10, s10, s17
 8014c92:	ee65 5aa8 	vmul.f32	s11, s11, s17
 8014c96:	ee26 6a28 	vmul.f32	s12, s12, s17
 8014c9a:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8014c9e:	ee28 7a87 	vmul.f32	s14, s17, s14
 8014ca2:	edcd 4ad5 	vstr	s9, [sp, #852]	; 0x354
 8014ca6:	ed8d 5abc 	vstr	s10, [sp, #752]	; 0x2f0
 8014caa:	edcd 5ad6 	vstr	s11, [sp, #856]	; 0x358
 8014cae:	ed8d 6abd 	vstr	s12, [sp, #756]	; 0x2f4
 8014cb2:	edcd 7ad7 	vstr	s15, [sp, #860]	; 0x35c
 8014cb6:	edcd 6ab6 	vstr	s13, [sp, #728]	; 0x2d8
 8014cba:	ed8d 7ad0 	vstr	s14, [sp, #832]	; 0x340
 8014cbe:	ed8d 4ab7 	vstr	s8, [sp, #732]	; 0x2dc
 8014cc2:	ed9d 4abe 	vldr	s8, [sp, #760]	; 0x2f8
 8014cc6:	eddd 5ad8 	vldr	s11, [sp, #864]	; 0x360
 8014cca:	ed9d 6abf 	vldr	s12, [sp, #764]	; 0x2fc
 8014cce:	eddd 7ad9 	vldr	s15, [sp, #868]	; 0x364
 8014cd2:	eddd 4ac0 	vldr	s9, [sp, #768]	; 0x300
 8014cd6:	ed9d 5ada 	vldr	s10, [sp, #872]	; 0x368
 8014cda:	ee65 5aa8 	vmul.f32	s11, s11, s17
 8014cde:	ee26 6a28 	vmul.f32	s12, s12, s17
 8014ce2:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8014ce6:	ee64 4aa8 	vmul.f32	s9, s9, s17
 8014cea:	edcd 5ad8 	vstr	s11, [sp, #864]	; 0x360
 8014cee:	ed8d 6abf 	vstr	s12, [sp, #764]	; 0x2fc
 8014cf2:	eddd 5ac1 	vldr	s11, [sp, #772]	; 0x304
 8014cf6:	ed9d 6adb 	vldr	s12, [sp, #876]	; 0x36c
 8014cfa:	edcd 7ad9 	vstr	s15, [sp, #868]	; 0x364
 8014cfe:	edcd 4ac0 	vstr	s9, [sp, #768]	; 0x300
 8014d02:	eddd 7ac2 	vldr	s15, [sp, #776]	; 0x308
 8014d06:	eddd 4adc 	vldr	s9, [sp, #880]	; 0x370
 8014d0a:	ee24 4a28 	vmul.f32	s8, s8, s17
 8014d0e:	ee25 5a28 	vmul.f32	s10, s10, s17
 8014d12:	ee65 5aa8 	vmul.f32	s11, s11, s17
 8014d16:	ee26 6a28 	vmul.f32	s12, s12, s17
 8014d1a:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8014d1e:	eeb4 8ae6 	vcmpe.f32	s16, s13
 8014d22:	ee68 8aa4 	vmul.f32	s17, s17, s9
 8014d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d2a:	ed8d 4abe 	vstr	s8, [sp, #760]	; 0x2f8
 8014d2e:	ed8d 5ada 	vstr	s10, [sp, #872]	; 0x368
 8014d32:	edcd 5ac1 	vstr	s11, [sp, #772]	; 0x304
 8014d36:	ed8d 6adb 	vstr	s12, [sp, #876]	; 0x36c
 8014d3a:	edcd 7ac2 	vstr	s15, [sp, #776]	; 0x308
 8014d3e:	edcd 8adc 	vstr	s17, [sp, #880]	; 0x370
 8014d42:	f302 8098 	bgt.w	8016e76 <m_kalman_3gyro.isra.6.constprop.36+0x33c6>
 8014d46:	eddd 7ac3 	vldr	s15, [sp, #780]	; 0x30c
 8014d4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014d4c:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8014d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d54:	edc3 7a00 	vstr	s15, [r3]
 8014d58:	f342 80a3 	ble.w	8016ea2 <m_kalman_3gyro.isra.6.constprop.36+0x33f2>
 8014d5c:	eef4 8ac8 	vcmpe.f32	s17, s16
 8014d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d64:	f302 8471 	bgt.w	801764a <m_kalman_3gyro.isra.6.constprop.36+0x3b9a>
 8014d68:	ed9d 7ae9 	vldr	s14, [sp, #932]	; 0x3a4
 8014d6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014d6e:	ed83 7a00 	vstr	s14, [r3]
 8014d72:	e009      	b.n	8014d88 <m_kalman_3gyro.isra.6.constprop.36+0x12d8>
 8014d74:	3ff00000 	.word	0x3ff00000
 8014d78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014d7a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014d7e:	edc3 7a00 	vstr	s15, [r3]
 8014d82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014d84:	edc3 7a00 	vstr	s15, [r3]
 8014d88:	4bd1      	ldr	r3, [pc, #836]	; (80150d0 <m_kalman_3gyro.isra.6.constprop.36+0x1620>)
 8014d8a:	ed9a 7a2d 	vldr	s14, [sl, #180]	; 0xb4
 8014d8e:	edd3 8a00 	vldr	s17, [r3]
 8014d92:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8014d94:	f8df 934c 	ldr.w	r9, [pc, #844]	; 80150e4 <m_kalman_3gyro.isra.6.constprop.36+0x1634>
 8014d98:	edc3 7a00 	vstr	s15, [r3]
 8014d9c:	ee78 7ac7 	vsub.f32	s15, s17, s14
 8014da0:	eef0 7ae7 	vabs.f32	s15, s15
 8014da4:	ee17 0a90 	vmov	r0, s15
 8014da8:	f7eb fbd6 	bl	8000558 <__aeabi_f2d>
 8014dac:	f006 f8c4 	bl	801af38 <floor>
 8014db0:	f7eb feda 	bl	8000b68 <__aeabi_d2iz>
 8014db4:	f8dd 36d4 	ldr.w	r3, [sp, #1748]	; 0x6d4
 8014db8:	7018      	strb	r0, [r3, #0]
 8014dba:	ed9a 7a2d 	vldr	s14, [sl, #180]	; 0xb4
 8014dbe:	edda 7a2b 	vldr	s15, [sl, #172]	; 0xac
 8014dc2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014dc4:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8014dc8:	ee7d 7a67 	vsub.f32	s15, s26, s15
 8014dcc:	eeb0 7ac7 	vabs.f32	s14, s14
 8014dd0:	eef0 7ae7 	vabs.f32	s15, s15
 8014dd4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014dd8:	ed89 7a00 	vstr	s14, [r9]
 8014ddc:	edc3 7a00 	vstr	s15, [r3]
 8014de0:	ee17 0a90 	vmov	r0, s15
 8014de4:	edcd 7a01 	vstr	s15, [sp, #4]
 8014de8:	f7eb fbb6 	bl	8000558 <__aeabi_f2d>
 8014dec:	a3b6      	add	r3, pc, #728	; (adr r3, 80150c8 <m_kalman_3gyro.isra.6.constprop.36+0x1618>)
 8014dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014df2:	f7eb fe99 	bl	8000b28 <__aeabi_dcmpgt>
 8014df6:	2800      	cmp	r0, #0
 8014df8:	f001 82ae 	beq.w	8016358 <m_kalman_3gyro.isra.6.constprop.36+0x28a8>
 8014dfc:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 80150d4 <m_kalman_3gyro.isra.6.constprop.36+0x1624>
 8014e00:	eddd 7a01 	vldr	s15, [sp, #4]
 8014e04:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014e08:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8014e0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014e10:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8014e14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e1c:	f301 86af 	bgt.w	8016b7e <m_kalman_3gyro.isra.6.constprop.36+0x30ce>
 8014e20:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014e24:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014e28:	ee17 0a90 	vmov	r0, s15
 8014e2c:	f7eb fb94 	bl	8000558 <__aeabi_f2d>
 8014e30:	4604      	mov	r4, r0
 8014e32:	460d      	mov	r5, r1
 8014e34:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014e38:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8014e3c:	eef0 7ae7 	vabs.f32	s15, s15
 8014e40:	ee17 0a90 	vmov	r0, s15
 8014e44:	f7eb fb88 	bl	8000558 <__aeabi_f2d>
 8014e48:	2200      	movs	r2, #0
 8014e4a:	4ba3      	ldr	r3, [pc, #652]	; (80150d8 <m_kalman_3gyro.isra.6.constprop.36+0x1628>)
 8014e4c:	f7eb fa24 	bl	8000298 <__aeabi_dsub>
 8014e50:	4622      	mov	r2, r4
 8014e52:	462b      	mov	r3, r5
 8014e54:	4606      	mov	r6, r0
 8014e56:	460f      	mov	r7, r1
 8014e58:	f7eb fe5c 	bl	8000b14 <__aeabi_dcmpge>
 8014e5c:	b908      	cbnz	r0, 8014e62 <m_kalman_3gyro.isra.6.constprop.36+0x13b2>
 8014e5e:	4626      	mov	r6, r4
 8014e60:	462f      	mov	r7, r5
 8014e62:	4630      	mov	r0, r6
 8014e64:	4639      	mov	r1, r7
 8014e66:	f7eb fea7 	bl	8000bb8 <__aeabi_d2f>
 8014e6a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014e6c:	6018      	str	r0, [r3, #0]
 8014e6e:	f89a 3031 	ldrb.w	r3, [sl, #49]	; 0x31
 8014e72:	f10a 0040 	add.w	r0, sl, #64	; 0x40
 8014e76:	9001      	str	r0, [sp, #4]
 8014e78:	b17b      	cbz	r3, 8014e9a <m_kalman_3gyro.isra.6.constprop.36+0x13ea>
 8014e7a:	f89a 3030 	ldrb.w	r3, [sl, #48]	; 0x30
 8014e7e:	b963      	cbnz	r3, 8014e9a <m_kalman_3gyro.isra.6.constprop.36+0x13ea>
 8014e80:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014e82:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8014e86:	ee6f 7aa7 	vmul.f32	s15, s31, s15
 8014e8a:	ed93 7a00 	vldr	s14, [r3]
 8014e8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e96:	f101 879b 	bmi.w	8016dd0 <m_kalman_3gyro.isra.6.constprop.36+0x3320>
 8014e9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014e9c:	edd3 7a00 	vldr	s15, [r3]
 8014ea0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8014ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ea8:	f04f 0400 	mov.w	r4, #0
 8014eac:	d10f      	bne.n	8014ece <m_kalman_3gyro.isra.6.constprop.36+0x141e>
 8014eae:	edd3 7a01 	vldr	s15, [r3, #4]
 8014eb2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8014eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014eba:	4619      	mov	r1, r3
 8014ebc:	d107      	bne.n	8014ece <m_kalman_3gyro.isra.6.constprop.36+0x141e>
 8014ebe:	edd3 7a02 	vldr	s15, [r3, #8]
 8014ec2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8014ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014eca:	f001 872a 	beq.w	8016d22 <m_kalman_3gyro.isra.6.constprop.36+0x3272>
 8014ece:	f50d 61d6 	add.w	r1, sp, #1712	; 0x6b0
 8014ed2:	2200      	movs	r2, #0
 8014ed4:	2300      	movs	r3, #0
 8014ed6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014eda:	f7eb fdfd 	bl	8000ad8 <__aeabi_dcmpeq>
 8014ede:	2800      	cmp	r0, #0
 8014ee0:	d144      	bne.n	8014f6c <m_kalman_3gyro.isra.6.constprop.36+0x14bc>
 8014ee2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014ee4:	ee7f faaf 	vadd.f32	s31, s31, s31
 8014ee8:	edd3 7a00 	vldr	s15, [r3]
 8014eec:	eef4 7aef 	vcmpe.f32	s15, s31
 8014ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ef4:	d53a      	bpl.n	8014f6c <m_kalman_3gyro.isra.6.constprop.36+0x14bc>
 8014ef6:	eddd 7a23 	vldr	s15, [sp, #140]	; 0x8c
 8014efa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014efc:	edca 7a10 	vstr	s15, [sl, #64]	; 0x40
 8014f00:	eddd 7a24 	vldr	s15, [sp, #144]	; 0x90
 8014f04:	ed8a ba12 	vstr	s22, [sl, #72]	; 0x48
 8014f08:	edca 7a13 	vstr	s15, [sl, #76]	; 0x4c
 8014f0c:	eddd 7a25 	vldr	s15, [sp, #148]	; 0x94
 8014f10:	edca aa15 	vstr	s21, [sl, #84]	; 0x54
 8014f14:	ed8a aa18 	vstr	s20, [sl, #96]	; 0x60
 8014f18:	ed8a ca11 	vstr	s24, [sl, #68]	; 0x44
 8014f1c:	edca ba14 	vstr	s23, [sl, #80]	; 0x50
 8014f20:	edca 9a17 	vstr	s19, [sl, #92]	; 0x5c
 8014f24:	edca 7a16 	vstr	s15, [sl, #88]	; 0x58
 8014f28:	9801      	ldr	r0, [sp, #4]
 8014f2a:	f7fa fc5f 	bl	800f7ec <m_dcm2q_eml>
 8014f2e:	f8dd 16dc 	ldr.w	r1, [sp, #1756]	; 0x6dc
 8014f32:	2300      	movs	r3, #0
 8014f34:	2201      	movs	r2, #1
 8014f36:	700a      	strb	r2, [r1, #0]
 8014f38:	ed8a da2b 	vstr	s26, [sl, #172]	; 0xac
 8014f3c:	edca 8a2d 	vstr	s17, [sl, #180]	; 0xb4
 8014f40:	f8ca 30b8 	str.w	r3, [sl, #184]	; 0xb8
 8014f44:	f8ca 30bc 	str.w	r3, [sl, #188]	; 0xbc
 8014f48:	f8ca 30c0 	str.w	r3, [sl, #192]	; 0xc0
 8014f4c:	f8ca 30dc 	str.w	r3, [sl, #220]	; 0xdc
 8014f50:	f8ca 30e0 	str.w	r3, [sl, #224]	; 0xe0
 8014f54:	f8ca 30e4 	str.w	r3, [sl, #228]	; 0xe4
 8014f58:	f8ca 3100 	str.w	r3, [sl, #256]	; 0x100
 8014f5c:	f8ca 3104 	str.w	r3, [sl, #260]	; 0x104
 8014f60:	f8ca 3108 	str.w	r3, [sl, #264]	; 0x108
 8014f64:	f8ca 31a8 	str.w	r3, [sl, #424]	; 0x1a8
 8014f68:	f8ca 31f8 	str.w	r3, [sl, #504]	; 0x1f8
 8014f6c:	2300      	movs	r3, #0
 8014f6e:	f8ca 3094 	str.w	r3, [sl, #148]	; 0x94
 8014f72:	f8ca 3098 	str.w	r3, [sl, #152]	; 0x98
 8014f76:	f8ca 309c 	str.w	r3, [sl, #156]	; 0x9c
 8014f7a:	9901      	ldr	r1, [sp, #4]
 8014f7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014f7e:	f7fa fab5 	bl	800f4ec <m_q2dcm_eml>
 8014f82:	edda 9a2b 	vldr	s19, [sl, #172]	; 0xac
 8014f86:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014f8a:	eee9 7ae9 	vfms.f32	s15, s19, s19
 8014f8e:	ee17 0a90 	vmov	r0, s15
 8014f92:	f7eb fae1 	bl	8000558 <__aeabi_f2d>
 8014f96:	f006 f965 	bl	801b264 <sqrt>
 8014f9a:	f7eb fe0d 	bl	8000bb8 <__aeabi_d2f>
 8014f9e:	ed9a 3a12 	vldr	s6, [sl, #72]	; 0x48
 8014fa2:	edda 7a10 	vldr	s15, [sl, #64]	; 0x40
 8014fa6:	edda 5a15 	vldr	s11, [sl, #84]	; 0x54
 8014faa:	edda 2a18 	vldr	s5, [sl, #96]	; 0x60
 8014fae:	edda 4a13 	vldr	s9, [sl, #76]	; 0x4c
 8014fb2:	ed9a 5a16 	vldr	s10, [sl, #88]	; 0x58
 8014fb6:	eddd 3a57 	vldr	s7, [sp, #348]	; 0x15c
 8014fba:	ed9d 4a58 	vldr	s8, [sp, #352]	; 0x160
 8014fbe:	ed8a da22 	vstr	s26, [sl, #136]	; 0x88
 8014fc2:	ee06 0a10 	vmov	s12, r0
 8014fc6:	ee29 7a83 	vmul.f32	s14, s19, s6
 8014fca:	ee69 6aa5 	vmul.f32	s13, s19, s11
 8014fce:	eea6 7a27 	vfma.f32	s14, s12, s15
 8014fd2:	ee69 7aa2 	vmul.f32	s15, s19, s5
 8014fd6:	eee6 6a24 	vfma.f32	s13, s12, s9
 8014fda:	eee6 7a05 	vfma.f32	s15, s12, s10
 8014fde:	ee73 3ac7 	vsub.f32	s7, s7, s14
 8014fe2:	ed9d 5a5b 	vldr	s10, [sp, #364]	; 0x16c
 8014fe6:	eddd 4a59 	vldr	s9, [sp, #356]	; 0x164
 8014fea:	ed8a 7a82 	vstr	s14, [sl, #520]	; 0x208
 8014fee:	ee35 5a65 	vsub.f32	s10, s10, s11
 8014ff2:	ed9d 6a5a 	vldr	s12, [sp, #360]	; 0x168
 8014ff6:	eddd 5a5c 	vldr	s11, [sp, #368]	; 0x170
 8014ffa:	edca 3a19 	vstr	s7, [sl, #100]	; 0x64
 8014ffe:	ed9a 7a2c 	vldr	s14, [sl, #176]	; 0xb0
 8015002:	eddf 3a36 	vldr	s7, [pc, #216]	; 80150dc <m_kalman_3gyro.isra.6.constprop.36+0x162c>
 8015006:	ed8a 9a23 	vstr	s18, [sl, #140]	; 0x8c
 801500a:	ee34 4a66 	vsub.f32	s8, s8, s13
 801500e:	ee74 4ae7 	vsub.f32	s9, s9, s15
 8015012:	ee75 5ae2 	vsub.f32	s11, s11, s5
 8015016:	ee36 6a43 	vsub.f32	s12, s12, s6
 801501a:	eeb4 7ae3 	vcmpe.f32	s14, s7
 801501e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015022:	edca 8a24 	vstr	s17, [sl, #144]	; 0x90
 8015026:	edca 6a83 	vstr	s13, [sl, #524]	; 0x20c
 801502a:	ed8a 4a1a 	vstr	s8, [sl, #104]	; 0x68
 801502e:	edca 7a84 	vstr	s15, [sl, #528]	; 0x210
 8015032:	edca 4a1b 	vstr	s9, [sl, #108]	; 0x6c
 8015036:	ed8a 5a1d 	vstr	s10, [sl, #116]	; 0x74
 801503a:	edca 5a1e 	vstr	s11, [sl, #120]	; 0x78
 801503e:	ed8a 6a1c 	vstr	s12, [sl, #112]	; 0x70
 8015042:	f141 8147 	bpl.w	80162d4 <m_kalman_3gyro.isra.6.constprop.36+0x2824>
 8015046:	eddf 7a26 	vldr	s15, [pc, #152]	; 80150e0 <m_kalman_3gyro.isra.6.constprop.36+0x1630>
 801504a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801504e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015052:	f341 813f 	ble.w	80162d4 <m_kalman_3gyro.isra.6.constprop.36+0x2824>
 8015056:	ee79 7a47 	vsub.f32	s15, s18, s14
 801505a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801505c:	eef0 7ae7 	vabs.f32	s15, s15
 8015060:	edc3 7a00 	vstr	s15, [r3]
 8015064:	ee7c 7aa7 	vadd.f32	s15, s25, s15
 8015068:	ed9d 7a98 	vldr	s14, [sp, #608]	; 0x260
 801506c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801506e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015076:	edc3 7a00 	vstr	s15, [r3]
 801507a:	f341 8167 	ble.w	801634c <m_kalman_3gyro.isra.6.constprop.36+0x289c>
 801507e:	ed9d 7aa1 	vldr	s14, [sp, #644]	; 0x284
 8015082:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801508a:	f102 813d 	bmi.w	8017308 <m_kalman_3gyro.isra.6.constprop.36+0x3858>
 801508e:	eddd 8aab 	vldr	s17, [sp, #684]	; 0x2ac
 8015092:	ed9d 9ab5 	vldr	s18, [sp, #724]	; 0x2d4
 8015096:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015098:	ed9d 7a5d 	vldr	s14, [sp, #372]	; 0x174
 801509c:	edd3 7a00 	vldr	s15, [r3]
 80150a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80150a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80150a8:	f341 856d 	ble.w	8016b86 <m_kalman_3gyro.isra.6.constprop.36+0x30d6>
 80150ac:	ed9d 7a63 	vldr	s14, [sp, #396]	; 0x18c
 80150b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80150b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80150b8:	f142 8150 	bpl.w	801735c <m_kalman_3gyro.isra.6.constprop.36+0x38ac>
 80150bc:	2007      	movs	r0, #7
 80150be:	2402      	movs	r4, #2
 80150c0:	2101      	movs	r1, #1
 80150c2:	f06f 4540 	mvn.w	r5, #3221225472	; 0xc0000000
 80150c6:	e021      	b.n	801510c <m_kalman_3gyro.isra.6.constprop.36+0x165c>
 80150c8:	9999999a 	.word	0x9999999a
 80150cc:	3fb99999 	.word	0x3fb99999
 80150d0:	20001bf4 	.word	0x20001bf4
 80150d4:	3dcccccd 	.word	0x3dcccccd
 80150d8:	3fe00000 	.word	0x3fe00000
 80150dc:	3f99999a 	.word	0x3f99999a
 80150e0:	3f4ccccd 	.word	0x3f4ccccd
 80150e4:	20001c04 	.word	0x20001c04
 80150e8:	00000000 	.word	0x00000000
 80150ec:	3d088889 	.word	0x3d088889
 80150f0:	42480000 	.word	0x42480000
 80150f4:	3c23d70a 	.word	0x3c23d70a
 80150f8:	ed93 7a00 	vldr	s14, [r3]
 80150fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015104:	bfb8      	it	lt
 8015106:	4610      	movlt	r0, r2
 8015108:	f282 80fa 	bge.w	8017300 <m_kalman_3gyro.isra.6.constprop.36+0x3850>
 801510c:	1842      	adds	r2, r0, r1
 801510e:	0852      	lsrs	r2, r2, #1
 8015110:	1953      	adds	r3, r2, r5
 8015112:	f50d 66c6 	add.w	r6, sp, #1584	; 0x630
 8015116:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801511a:	42a0      	cmp	r0, r4
 801511c:	f2a3 43bc 	subw	r3, r3, #1212	; 0x4bc
 8015120:	d8ea      	bhi.n	80150f8 <m_kalman_3gyro.isra.6.constprop.36+0x1648>
 8015122:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 8015126:	3b01      	subs	r3, #1
 8015128:	009b      	lsls	r3, r3, #2
 801512a:	0089      	lsls	r1, r1, #2
 801512c:	aa5d      	add	r2, sp, #372	; 0x174
 801512e:	18d0      	adds	r0, r2, r3
 8015130:	440a      	add	r2, r1
 8015132:	edd0 6a00 	vldr	s13, [r0]
 8015136:	ed92 7a00 	vldr	s14, [r2]
 801513a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801513e:	ee37 7a66 	vsub.f32	s14, s14, s13
 8015142:	aa64      	add	r2, sp, #400	; 0x190
 8015144:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8015148:	4413      	add	r3, r2
 801514a:	4411      	add	r1, r2
 801514c:	edd3 9a00 	vldr	s19, [r3]
 8015150:	edd1 7a00 	vldr	s15, [r1]
 8015154:	ee77 7ae9 	vsub.f32	s15, s15, s19
 8015158:	eee6 9aa7 	vfma.f32	s19, s13, s15
 801515c:	9d19      	ldr	r5, [sp, #100]	; 0x64
 801515e:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8015160:	ed5f 7a1f 	vldr	s15, [pc, #-124]	; 80150e8 <m_kalman_3gyro.isra.6.constprop.36+0x1638>
 8015164:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8015166:	edca 7af5 	vstr	s15, [sl, #980]	; 0x3d4
 801516a:	462e      	mov	r6, r5
 801516c:	eef0 6a67 	vmov.f32	s13, s15
 8015170:	eeb0 6a67 	vmov.f32	s12, s15
 8015174:	eef0 5a67 	vmov.f32	s11, s15
 8015178:	edca 7af6 	vstr	s15, [sl, #984]	; 0x3d8
 801517c:	edca 7af7 	vstr	s15, [sl, #988]	; 0x3dc
 8015180:	ed95 7a06 	vldr	s14, [r5, #24]
 8015184:	edd3 7a00 	vldr	s15, [r3]
 8015188:	ee77 7a67 	vsub.f32	s15, s14, s15
 801518c:	3524      	adds	r5, #36	; 0x24
 801518e:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8015192:	330c      	adds	r3, #12
 8015194:	edca 5af5 	vstr	s11, [sl, #980]	; 0x3d4
 8015198:	ed15 7a02 	vldr	s14, [r5, #-8]
 801519c:	ed53 7a02 	vldr	s15, [r3, #-8]
 80151a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80151a4:	ee36 6a27 	vadd.f32	s12, s12, s15
 80151a8:	ed8a 6af6 	vstr	s12, [sl, #984]	; 0x3d8
 80151ac:	ed15 7a01 	vldr	s14, [r5, #-4]
 80151b0:	ed53 7a01 	vldr	s15, [r3, #-4]
 80151b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80151b8:	42aa      	cmp	r2, r5
 80151ba:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80151be:	edca 6af7 	vstr	s13, [sl, #988]	; 0x3dc
 80151c2:	d1dd      	bne.n	8015180 <m_kalman_3gyro.isra.6.constprop.36+0x16d0>
 80151c4:	ed5f 7a37 	vldr	s15, [pc, #-220]	; 80150ec <m_kalman_3gyro.isra.6.constprop.36+0x163c>
 80151c8:	9811      	ldr	r0, [sp, #68]	; 0x44
 80151ca:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80151ce:	ee26 6a27 	vmul.f32	s12, s12, s15
 80151d2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80151d6:	edca 5af5 	vstr	s11, [sl, #980]	; 0x3d4
 80151da:	ed8a 6af6 	vstr	s12, [sl, #984]	; 0x3d8
 80151de:	edca 6af7 	vstr	s13, [sl, #988]	; 0x3dc
 80151e2:	f50a 6305 	add.w	r3, sl, #2128	; 0x850
 80151e6:	681a      	ldr	r2, [r3, #0]
 80151e8:	6859      	ldr	r1, [r3, #4]
 80151ea:	625a      	str	r2, [r3, #36]	; 0x24
 80151ec:	689a      	ldr	r2, [r3, #8]
 80151ee:	6299      	str	r1, [r3, #40]	; 0x28
 80151f0:	62da      	str	r2, [r3, #44]	; 0x2c
 80151f2:	68d9      	ldr	r1, [r3, #12]
 80151f4:	691a      	ldr	r2, [r3, #16]
 80151f6:	6319      	str	r1, [r3, #48]	; 0x30
 80151f8:	635a      	str	r2, [r3, #52]	; 0x34
 80151fa:	6959      	ldr	r1, [r3, #20]
 80151fc:	699a      	ldr	r2, [r3, #24]
 80151fe:	6399      	str	r1, [r3, #56]	; 0x38
 8015200:	63da      	str	r2, [r3, #60]	; 0x3c
 8015202:	69d9      	ldr	r1, [r3, #28]
 8015204:	6a1a      	ldr	r2, [r3, #32]
 8015206:	6419      	str	r1, [r3, #64]	; 0x40
 8015208:	645a      	str	r2, [r3, #68]	; 0x44
 801520a:	3b24      	subs	r3, #36	; 0x24
 801520c:	4298      	cmp	r0, r3
 801520e:	d1ea      	bne.n	80151e6 <m_kalman_3gyro.isra.6.constprop.36+0x1736>
 8015210:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8015212:	9919      	ldr	r1, [sp, #100]	; 0x64
 8015214:	6813      	ldr	r3, [r2, #0]
 8015216:	600b      	str	r3, [r1, #0]
 8015218:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801521a:	982b      	ldr	r0, [sp, #172]	; 0xac
 801521c:	680b      	ldr	r3, [r1, #0]
 801521e:	6003      	str	r3, [r0, #0]
 8015220:	9808      	ldr	r0, [sp, #32]
 8015222:	9c20      	ldr	r4, [sp, #128]	; 0x80
 8015224:	6803      	ldr	r3, [r0, #0]
 8015226:	6023      	str	r3, [r4, #0]
 8015228:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 801522a:	6853      	ldr	r3, [r2, #4]
 801522c:	6023      	str	r3, [r4, #0]
 801522e:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8015230:	684b      	ldr	r3, [r1, #4]
 8015232:	6023      	str	r3, [r4, #0]
 8015234:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8015236:	6843      	ldr	r3, [r0, #4]
 8015238:	6023      	str	r3, [r4, #0]
 801523a:	6893      	ldr	r3, [r2, #8]
 801523c:	9a3b      	ldr	r2, [sp, #236]	; 0xec
 801523e:	6013      	str	r3, [r2, #0]
 8015240:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 8015242:	688b      	ldr	r3, [r1, #8]
 8015244:	6013      	str	r3, [r2, #0]
 8015246:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8015248:	6883      	ldr	r3, [r0, #8]
 801524a:	6013      	str	r3, [r2, #0]
 801524c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801524e:	2b02      	cmp	r3, #2
 8015250:	f001 808c 	beq.w	801636c <m_kalman_3gyro.isra.6.constprop.36+0x28bc>
 8015254:	eeb4 eaed 	vcmpe.f32	s28, s27
 8015258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801525c:	f301 815e 	bgt.w	801651c <m_kalman_3gyro.isra.6.constprop.36+0x2a6c>
 8015260:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015262:	2b00      	cmp	r3, #0
 8015264:	f041 8634 	bne.w	8016ed0 <m_kalman_3gyro.isra.6.constprop.36+0x3420>
 8015268:	f8da 20a4 	ldr.w	r2, [sl, #164]	; 0xa4
 801526c:	f8da 30a8 	ldr.w	r3, [sl, #168]	; 0xa8
 8015270:	f8ca 2080 	str.w	r2, [sl, #128]	; 0x80
 8015274:	f89a 2030 	ldrb.w	r2, [sl, #48]	; 0x30
 8015278:	f8da 10a0 	ldr.w	r1, [sl, #160]	; 0xa0
 801527c:	f8ca 3084 	str.w	r3, [sl, #132]	; 0x84
 8015280:	2300      	movs	r3, #0
 8015282:	f8ca 107c 	str.w	r1, [sl, #124]	; 0x7c
 8015286:	f8aa 3202 	strh.w	r3, [sl, #514]	; 0x202
 801528a:	f88a 3204 	strb.w	r3, [sl, #516]	; 0x204
 801528e:	f8ca 345c 	str.w	r3, [sl, #1116]	; 0x45c
 8015292:	2a00      	cmp	r2, #0
 8015294:	f001 8050 	beq.w	8016338 <m_kalman_3gyro.isra.6.constprop.36+0x2888>
 8015298:	f88a 3030 	strb.w	r3, [sl, #48]	; 0x30
 801529c:	ac86      	add	r4, sp, #536	; 0x218
 801529e:	ed5f 7a6c 	vldr	s15, [pc, #-432]	; 80150f0 <m_kalman_3gyro.isra.6.constprop.36+0x1640>
 80152a2:	eeb4 9ae7 	vcmpe.f32	s18, s15
 80152a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152aa:	f2c1 801e 	blt.w	80162ea <m_kalman_3gyro.isra.6.constprop.36+0x283a>
 80152ae:	2300      	movs	r3, #0
 80152b0:	f8aa 3202 	strh.w	r3, [sl, #514]	; 0x202
 80152b4:	f88a 3204 	strb.w	r3, [sl, #516]	; 0x204
 80152b8:	f8ca 3458 	str.w	r3, [sl, #1112]	; 0x458
 80152bc:	f8dd 3698 	ldr.w	r3, [sp, #1688]	; 0x698
 80152c0:	990e      	ldr	r1, [sp, #56]	; 0x38
 80152c2:	ed93 5a08 	vldr	s10, [r3, #32]
 80152c6:	edd3 3a06 	vldr	s7, [r3, #24]
 80152ca:	ed93 4a07 	vldr	s8, [r3, #28]
 80152ce:	edd3 4a00 	vldr	s9, [r3]
 80152d2:	edd3 5a01 	vldr	s11, [r3, #4]
 80152d6:	ed93 2a02 	vldr	s4, [r3, #8]
 80152da:	edd3 6a03 	vldr	s13, [r3, #12]
 80152de:	ed93 7a04 	vldr	s14, [r3, #16]
 80152e2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80152e6:	edd3 2a05 	vldr	s5, [r3, #20]
 80152ea:	f8dd 2698 	ldr.w	r2, [sp, #1688]	; 0x698
 80152ee:	ed1f 3a7f 	vldr	s6, [pc, #-508]	; 80150f4 <m_kalman_3gyro.isra.6.constprop.36+0x1644>
 80152f2:	ee24 4a09 	vmul.f32	s8, s8, s18
 80152f6:	ee63 3a89 	vmul.f32	s7, s7, s18
 80152fa:	ee25 9a09 	vmul.f32	s18, s10, s18
 80152fe:	ed83 4a07 	vstr	s8, [r3, #28]
 8015302:	edc3 3a06 	vstr	s7, [r3, #24]
 8015306:	ed83 9a08 	vstr	s18, [r3, #32]
 801530a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801530c:	ed91 6a00 	vldr	s12, [r1]
 8015310:	ed93 4a00 	vldr	s8, [r3]
 8015314:	ee24 4a06 	vmul.f32	s8, s8, s12
 8015318:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 801531c:	ee64 4a84 	vmul.f32	s9, s9, s8
 8015320:	ee38 5a85 	vadd.f32	s10, s17, s10
 8015324:	edc2 4a00 	vstr	s9, [r2]
 8015328:	edd3 4a00 	vldr	s9, [r3]
 801532c:	ed91 6a00 	vldr	s12, [r1]
 8015330:	ee64 4a86 	vmul.f32	s9, s9, s12
 8015334:	460a      	mov	r2, r1
 8015336:	ee65 5aa4 	vmul.f32	s11, s11, s9
 801533a:	f8dd 1698 	ldr.w	r1, [sp, #1688]	; 0x698
 801533e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8015342:	edc1 5a01 	vstr	s11, [r1, #4]
 8015346:	edd3 5a00 	vldr	s11, [r3]
 801534a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801534c:	eec6 4a05 	vdiv.f32	s9, s12, s10
 8015350:	ed92 6a00 	vldr	s12, [r2]
 8015354:	ee26 6a25 	vmul.f32	s12, s12, s11
 8015358:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801535c:	ee22 6a06 	vmul.f32	s12, s4, s12
 8015360:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8015364:	ed81 6a02 	vstr	s12, [r1, #8]
 8015368:	ed93 6a00 	vldr	s12, [r3]
 801536c:	ee66 6a86 	vmul.f32	s13, s13, s12
 8015370:	eef4 4ac3 	vcmpe.f32	s9, s6
 8015374:	edc1 6a03 	vstr	s13, [r1, #12]
 8015378:	edd3 6a00 	vldr	s13, [r3]
 801537c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8015380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015384:	ed81 7a04 	vstr	s14, [r1, #16]
 8015388:	ed93 7a00 	vldr	s14, [r3]
 801538c:	edc1 7a09 	vstr	s15, [r1, #36]	; 0x24
 8015390:	ee62 7a87 	vmul.f32	s15, s5, s14
 8015394:	f8dd 369c 	ldr.w	r3, [sp, #1692]	; 0x69c
 8015398:	edc1 7a05 	vstr	s15, [r1, #20]
 801539c:	edd3 7a06 	vldr	s15, [r3, #24]
 80153a0:	bfb8      	it	lt
 80153a2:	eef0 4a43 	vmovlt.f32	s9, s6
 80153a6:	ee67 7aa4 	vmul.f32	s15, s15, s9
 80153aa:	edc3 7a06 	vstr	s15, [r3, #24]
 80153ae:	edd1 7a0a 	vldr	s15, [r1, #40]	; 0x28
 80153b2:	f8dd 369c 	ldr.w	r3, [sp, #1692]	; 0x69c
 80153b6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80153ba:	ee67 7aa8 	vmul.f32	s15, s15, s17
 80153be:	edc1 7a0a 	vstr	s15, [r1, #40]	; 0x28
 80153c2:	edd3 7a07 	vldr	s15, [r3, #28]
 80153c6:	ee67 7aa4 	vmul.f32	s15, s15, s9
 80153ca:	edc3 7a07 	vstr	s15, [r3, #28]
 80153ce:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80153d0:	edd1 7a0b 	vldr	s15, [r1, #44]	; 0x2c
 80153d4:	ed93 7a00 	vldr	s14, [r3]
 80153d8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80153da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80153de:	edc1 7a0b 	vstr	s15, [r1, #44]	; 0x2c
 80153e2:	b3cb      	cbz	r3, 8015458 <m_kalman_3gyro.isra.6.constprop.36+0x19a8>
 80153e4:	edd1 7a03 	vldr	s15, [r1, #12]
 80153e8:	f8dd 369c 	ldr.w	r3, [sp, #1692]	; 0x69c
 80153ec:	ee67 7aa8 	vmul.f32	s15, s15, s17
 80153f0:	edc1 7a03 	vstr	s15, [r1, #12]
 80153f4:	edd3 7a00 	vldr	s15, [r3]
 80153f8:	ee67 7aa4 	vmul.f32	s15, s15, s9
 80153fc:	edc3 7a00 	vstr	s15, [r3]
 8015400:	edd1 7a04 	vldr	s15, [r1, #16]
 8015404:	f8dd 369c 	ldr.w	r3, [sp, #1692]	; 0x69c
 8015408:	ee67 7aa8 	vmul.f32	s15, s15, s17
 801540c:	edc1 7a04 	vstr	s15, [r1, #16]
 8015410:	edd3 7a01 	vldr	s15, [r3, #4]
 8015414:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8015418:	edc3 7a01 	vstr	s15, [r3, #4]
 801541c:	edd1 7a05 	vldr	s15, [r1, #20]
 8015420:	f8dd 369c 	ldr.w	r3, [sp, #1692]	; 0x69c
 8015424:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8015428:	edc1 7a05 	vstr	s15, [r1, #20]
 801542c:	edd3 7a02 	vldr	s15, [r3, #8]
 8015430:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8015434:	edc3 7a02 	vstr	s15, [r3, #8]
 8015438:	edd1 7a0a 	vldr	s15, [r1, #40]	; 0x28
 801543c:	f8dd 369c 	ldr.w	r3, [sp, #1692]	; 0x69c
 8015440:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8015444:	ee67 8aa8 	vmul.f32	s17, s15, s17
 8015448:	edc1 8a0a 	vstr	s17, [r1, #40]	; 0x28
 801544c:	edd3 7a07 	vldr	s15, [r3, #28]
 8015450:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8015454:	edc3 7a07 	vstr	s15, [r3, #28]
 8015458:	f8dd 369c 	ldr.w	r3, [sp, #1692]	; 0x69c
 801545c:	ed9a 3a2e 	vldr	s6, [sl, #184]	; 0xb8
 8015460:	edd3 2a00 	vldr	s5, [r3]
 8015464:	f8dd 269c 	ldr.w	r2, [sp, #1692]	; 0x69c
 8015468:	edda 3a38 	vldr	s7, [sl, #224]	; 0xe0
 801546c:	ed9a 4a42 	vldr	s8, [sl, #264]	; 0x108
 8015470:	edda 4a4c 	vldr	s9, [sl, #304]	; 0x130
 8015474:	ed9a 5a56 	vldr	s10, [sl, #344]	; 0x158
 8015478:	edda 5a60 	vldr	s11, [sl, #384]	; 0x180
 801547c:	ed9a 6a6a 	vldr	s12, [sl, #424]	; 0x1a8
 8015480:	edda 6a74 	vldr	s13, [sl, #464]	; 0x1d0
 8015484:	ed9d 2a59 	vldr	s4, [sp, #356]	; 0x164
 8015488:	eddd 7a58 	vldr	s15, [sp, #352]	; 0x160
 801548c:	ed9a 7a7e 	vldr	s14, [sl, #504]	; 0x1f8
 8015490:	edc4 7a06 	vstr	s15, [r4, #24]
 8015494:	eea2 3aa2 	vfma.f32	s6, s5, s5
 8015498:	2300      	movs	r3, #0
 801549a:	6023      	str	r3, [r4, #0]
 801549c:	eef1 2a42 	vneg.f32	s5, s4
 80154a0:	ed8a 3a2e 	vstr	s6, [sl, #184]	; 0xb8
 80154a4:	ed92 3a01 	vldr	s6, [r2, #4]
 80154a8:	edc4 2a03 	vstr	s5, [r4, #12]
 80154ac:	eee3 3a03 	vfma.f32	s7, s6, s6
 80154b0:	eef1 7a67 	vneg.f32	s15, s15
 80154b4:	edca 3a38 	vstr	s7, [sl, #224]	; 0xe0
 80154b8:	edd2 3a02 	vldr	s7, [r2, #8]
 80154bc:	eea3 4aa3 	vfma.f32	s8, s7, s7
 80154c0:	ed8a 4a42 	vstr	s8, [sl, #264]	; 0x108
 80154c4:	ed92 4a03 	vldr	s8, [r2, #12]
 80154c8:	eee4 4a04 	vfma.f32	s9, s8, s8
 80154cc:	edca 4a4c 	vstr	s9, [sl, #304]	; 0x130
 80154d0:	edd2 4a04 	vldr	s9, [r2, #16]
 80154d4:	eea4 5aa4 	vfma.f32	s10, s9, s9
 80154d8:	ed8a 5a56 	vstr	s10, [sl, #344]	; 0x158
 80154dc:	ed92 5a05 	vldr	s10, [r2, #20]
 80154e0:	eee5 5a05 	vfma.f32	s11, s10, s10
 80154e4:	edca 5a60 	vstr	s11, [sl, #384]	; 0x180
 80154e8:	edd2 5a06 	vldr	s11, [r2, #24]
 80154ec:	eea5 6aa5 	vfma.f32	s12, s11, s11
 80154f0:	ed8a 6a6a 	vstr	s12, [sl, #424]	; 0x1a8
 80154f4:	ed92 6a07 	vldr	s12, [r2, #28]
 80154f8:	eee6 6a06 	vfma.f32	s13, s12, s12
 80154fc:	edca 6a74 	vstr	s13, [sl, #464]	; 0x1d0
 8015500:	edd2 6a08 	vldr	s13, [r2, #32]
 8015504:	f8dd 26a8 	ldr.w	r2, [sp, #1704]	; 0x6a8
 8015508:	eddd 5a57 	vldr	s11, [sp, #348]	; 0x15c
 801550c:	ed9d 6a5c 	vldr	s12, [sp, #368]	; 0x170
 8015510:	edc4 7a02 	vstr	s15, [r4, #8]
 8015514:	eea6 7aa6 	vfma.f32	s14, s13, s13
 8015518:	6123      	str	r3, [r4, #16]
 801551a:	6223      	str	r3, [r4, #32]
 801551c:	eddd 6a5b 	vldr	s13, [sp, #364]	; 0x16c
 8015520:	ed8a 7a7e 	vstr	s14, [sl, #504]	; 0x1f8
 8015524:	7812      	ldrb	r2, [r2, #0]
 8015526:	f88a 21fc 	strb.w	r2, [sl, #508]	; 0x1fc
 801552a:	f8dd 26a8 	ldr.w	r2, [sp, #1704]	; 0x6a8
 801552e:	ed9d 7a5a 	vldr	s14, [sp, #360]	; 0x168
 8015532:	7812      	ldrb	r2, [r2, #0]
 8015534:	f88a 21fd 	strb.w	r2, [sl, #509]	; 0x1fd
 8015538:	f8dd 26a8 	ldr.w	r2, [sp, #1704]	; 0x6a8
 801553c:	938f      	str	r3, [sp, #572]	; 0x23c
 801553e:	7812      	ldrb	r2, [r2, #0]
 8015540:	f88a 21fe 	strb.w	r2, [sl, #510]	; 0x1fe
 8015544:	f8dd 26a8 	ldr.w	r2, [sp, #1704]	; 0x6a8
 8015548:	9393      	str	r3, [sp, #588]	; 0x24c
 801554a:	7852      	ldrb	r2, [r2, #1]
 801554c:	f88a 21ff 	strb.w	r2, [sl, #511]	; 0x1ff
 8015550:	f8dd 26a8 	ldr.w	r2, [sp, #1704]	; 0x6a8
 8015554:	9397      	str	r3, [sp, #604]	; 0x25c
 8015556:	7852      	ldrb	r2, [r2, #1]
 8015558:	f88a 2200 	strb.w	r2, [sl, #512]	; 0x200
 801555c:	f8dd 26a8 	ldr.w	r2, [sp, #1704]	; 0x6a8
 8015560:	ed84 2a01 	vstr	s4, [r4, #4]
 8015564:	7852      	ldrb	r2, [r2, #1]
 8015566:	f88a 2201 	strb.w	r2, [sl, #513]	; 0x201
 801556a:	eeb1 4a65 	vneg.f32	s8, s11
 801556e:	edc4 5a05 	vstr	s11, [r4, #20]
 8015572:	ed84 4a07 	vstr	s8, [r4, #28]
 8015576:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8015578:	ed8d 6a90 	vstr	s12, [sp, #576]	; 0x240
 801557c:	eef1 4a46 	vneg.f32	s9, s12
 8015580:	eeb1 5a66 	vneg.f32	s10, s13
 8015584:	eef1 7a47 	vneg.f32	s15, s14
 8015588:	edcd 4a92 	vstr	s9, [sp, #584]	; 0x248
 801558c:	edcd 6a95 	vstr	s13, [sp, #596]	; 0x254
 8015590:	ed8d 5a91 	vstr	s10, [sp, #580]	; 0x244
 8015594:	ed8d 7a94 	vstr	s14, [sp, #592]	; 0x250
 8015598:	edcd 7a96 	vstr	s15, [sp, #600]	; 0x258
 801559c:	b1ab      	cbz	r3, 80155ca <m_kalman_3gyro.isra.6.constprop.36+0x1b1a>
 801559e:	f8dd 36a8 	ldr.w	r3, [sp, #1704]	; 0x6a8
 80155a2:	785b      	ldrb	r3, [r3, #1]
 80155a4:	b18b      	cbz	r3, 80155ca <m_kalman_3gyro.isra.6.constprop.36+0x1b1a>
 80155a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80155a8:	ed93 7a00 	vldr	s14, [r3]
 80155ac:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80155b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80155b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80155b8:	bfd4      	ite	le
 80155ba:	2301      	movle	r3, #1
 80155bc:	2300      	movgt	r3, #0
 80155be:	f88a 31ff 	strb.w	r3, [sl, #511]	; 0x1ff
 80155c2:	f88a 3200 	strb.w	r3, [sl, #512]	; 0x200
 80155c6:	f88a 3201 	strb.w	r3, [sl, #513]	; 0x201
 80155ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80155cc:	edd3 7a00 	vldr	s15, [r3]
 80155d0:	eef4 7ac8 	vcmpe.f32	s15, s16
 80155d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80155d8:	f2c0 86b1 	blt.w	801633e <m_kalman_3gyro.isra.6.constprop.36+0x288e>
 80155dc:	f50d 63d7 	add.w	r3, sp, #1720	; 0x6b8
 80155e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80155e4:	2200      	movs	r2, #0
 80155e6:	2300      	movs	r3, #0
 80155e8:	f7eb fa9e 	bl	8000b28 <__aeabi_dcmpgt>
 80155ec:	2800      	cmp	r0, #0
 80155ee:	f000 86a6 	beq.w	801633e <m_kalman_3gyro.isra.6.constprop.36+0x288e>
 80155f2:	2300      	movs	r3, #0
 80155f4:	f8aa 31fc 	strh.w	r3, [sl, #508]	; 0x1fc
 80155f8:	f88a 31fe 	strb.w	r3, [sl, #510]	; 0x1fe
 80155fc:	f88a 3205 	strb.w	r3, [sl, #517]	; 0x205
 8015600:	f88a 3207 	strb.w	r3, [sl, #519]	; 0x207
 8015604:	edda 7a24 	vldr	s15, [sl, #144]	; 0x90
 8015608:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 801560c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015614:	dc06      	bgt.n	8015624 <m_kalman_3gyro.isra.6.constprop.36+0x1b74>
 8015616:	ed9f 7a59 	vldr	s14, [pc, #356]	; 801577c <m_kalman_3gyro.isra.6.constprop.36+0x1ccc>
 801561a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801561e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015622:	d508      	bpl.n	8015636 <m_kalman_3gyro.isra.6.constprop.36+0x1b86>
 8015624:	2300      	movs	r3, #0
 8015626:	f8aa 31fc 	strh.w	r3, [sl, #508]	; 0x1fc
 801562a:	f88a 31fe 	strb.w	r3, [sl, #510]	; 0x1fe
 801562e:	f88a 3205 	strb.w	r3, [sl, #517]	; 0x205
 8015632:	f88a 3207 	strb.w	r3, [sl, #519]	; 0x207
 8015636:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801563a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801563e:	eef0 7ae7 	vabs.f32	s15, s15
 8015642:	ee17 0a90 	vmov	r0, s15
 8015646:	f7ea ff87 	bl	8000558 <__aeabi_f2d>
 801564a:	f8dd 3698 	ldr.w	r3, [sp, #1688]	; 0x698
 801564e:	4606      	mov	r6, r0
 8015650:	6818      	ldr	r0, [r3, #0]
 8015652:	460f      	mov	r7, r1
 8015654:	f7ea ff80 	bl	8000558 <__aeabi_f2d>
 8015658:	4602      	mov	r2, r0
 801565a:	460b      	mov	r3, r1
 801565c:	4630      	mov	r0, r6
 801565e:	4639      	mov	r1, r7
 8015660:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8015664:	f7eb fa56 	bl	8000b14 <__aeabi_dcmpge>
 8015668:	b908      	cbnz	r0, 801566e <m_kalman_3gyro.isra.6.constprop.36+0x1bbe>
 801566a:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801566e:	4630      	mov	r0, r6
 8015670:	4639      	mov	r1, r7
 8015672:	f7eb faa1 	bl	8000bb8 <__aeabi_d2f>
 8015676:	f8dd 3698 	ldr.w	r3, [sp, #1688]	; 0x698
 801567a:	6018      	str	r0, [r3, #0]
 801567c:	6058      	str	r0, [r3, #4]
 801567e:	6098      	str	r0, [r3, #8]
 8015680:	edda 7a23 	vldr	s15, [sl, #140]	; 0x8c
 8015684:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8015688:	eef4 7ac7 	vcmpe.f32	s15, s14
 801568c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015690:	f300 8613 	bgt.w	80162ba <m_kalman_3gyro.isra.6.constprop.36+0x280a>
 8015694:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8015780 <m_kalman_3gyro.isra.6.constprop.36+0x1cd0>
 8015698:	eef4 7ac7 	vcmpe.f32	s15, s14
 801569c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80156a0:	f100 860b 	bmi.w	80162ba <m_kalman_3gyro.isra.6.constprop.36+0x280a>
 80156a4:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80156a8:	ee37 8ac8 	vsub.f32	s16, s15, s16
 80156ac:	eef0 7ac8 	vabs.f32	s15, s16
 80156b0:	ee17 0a90 	vmov	r0, s15
 80156b4:	f7ea ff50 	bl	8000558 <__aeabi_f2d>
 80156b8:	f8dd 3698 	ldr.w	r3, [sp, #1688]	; 0x698
 80156bc:	4606      	mov	r6, r0
 80156be:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80156c0:	460f      	mov	r7, r1
 80156c2:	f7ea ff49 	bl	8000558 <__aeabi_f2d>
 80156c6:	4602      	mov	r2, r0
 80156c8:	460b      	mov	r3, r1
 80156ca:	4630      	mov	r0, r6
 80156cc:	4639      	mov	r1, r7
 80156ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80156d2:	f7eb fa1f 	bl	8000b14 <__aeabi_dcmpge>
 80156d6:	2800      	cmp	r0, #0
 80156d8:	f001 831f 	beq.w	8016d1a <m_kalman_3gyro.isra.6.constprop.36+0x326a>
 80156dc:	4630      	mov	r0, r6
 80156de:	4639      	mov	r1, r7
 80156e0:	f7eb fa6a 	bl	8000bb8 <__aeabi_d2f>
 80156e4:	f8dd 3698 	ldr.w	r3, [sp, #1688]	; 0x698
 80156e8:	ed93 7a03 	vldr	s14, [r3, #12]
 80156ec:	6298      	str	r0, [r3, #40]	; 0x28
 80156ee:	ee68 7a08 	vmul.f32	s15, s16, s16
 80156f2:	ee67 6a07 	vmul.f32	s13, s14, s14
 80156f6:	eef4 7ae6 	vcmpe.f32	s15, s13
 80156fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80156fe:	f301 82f2 	bgt.w	8016ce6 <m_kalman_3gyro.isra.6.constprop.36+0x3236>
 8015702:	ed99 7a00 	vldr	s14, [r9]
 8015706:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801570a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801570e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015712:	f341 8211 	ble.w	8016b38 <m_kalman_3gyro.isra.6.constprop.36+0x3088>
 8015716:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801571a:	2300      	movs	r3, #0
 801571c:	f8dd 2698 	ldr.w	r2, [sp, #1688]	; 0x698
 8015720:	f8aa 31fc 	strh.w	r3, [sl, #508]	; 0x1fc
 8015724:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015728:	f88a 31fe 	strb.w	r3, [sl, #510]	; 0x1fe
 801572c:	edd2 6a0b 	vldr	s13, [r2, #44]	; 0x2c
 8015730:	ed92 6a09 	vldr	s12, [r2, #36]	; 0x24
 8015734:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8015738:	ee26 6a27 	vmul.f32	s12, s12, s15
 801573c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015740:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8015744:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8015748:	ed82 6a09 	vstr	s12, [r2, #36]	; 0x24
 801574c:	edc2 7a0b 	vstr	s15, [r2, #44]	; 0x2c
 8015750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015754:	bfc4      	itt	gt
 8015756:	f88a 3205 	strbgt.w	r3, [sl, #517]	; 0x205
 801575a:	f88a 3207 	strbgt.w	r3, [sl, #519]	; 0x207
 801575e:	f89a 38ae 	ldrb.w	r3, [sl, #2222]	; 0x8ae
 8015762:	2b0e      	cmp	r3, #14
 8015764:	d802      	bhi.n	801576c <m_kalman_3gyro.isra.6.constprop.36+0x1cbc>
 8015766:	3305      	adds	r3, #5
 8015768:	f88a 38ae 	strb.w	r3, [sl, #2222]	; 0x8ae
 801576c:	4623      	mov	r3, r4
 801576e:	af8f      	add	r7, sp, #572	; 0x23c
 8015770:	f04f 0900 	mov.w	r9, #0
 8015774:	ed9f 8a03 	vldr	s16, [pc, #12]	; 8015784 <m_kalman_3gyro.isra.6.constprop.36+0x1cd4>
 8015778:	e027      	b.n	80157ca <m_kalman_3gyro.isra.6.constprop.36+0x1d1a>
 801577a:	bf00      	nop
 801577c:	3e4ccccd 	.word	0x3e4ccccd
 8015780:	3ecccccd 	.word	0x3ecccccd
 8015784:	00000000 	.word	0x00000000
 8015788:	ed57 6a03 	vldr	s13, [r7, #-12]
 801578c:	ed97 7a00 	vldr	s14, [r7]
 8015790:	edd7 7a03 	vldr	s15, [r7, #12]
 8015794:	eb0a 0009 	add.w	r0, sl, r9
 8015798:	ee76 6aa6 	vadd.f32	s13, s13, s13
 801579c:	ee37 7a07 	vadd.f32	s14, s14, s14
 80157a0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80157a4:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80157a8:	edcd 6a7d 	vstr	s13, [sp, #500]	; 0x1f4
 80157ac:	ed8d 7a7e 	vstr	s14, [sp, #504]	; 0x1f8
 80157b0:	edcd 7a7f 	vstr	s15, [sp, #508]	; 0x1fc
 80157b4:	bb7a      	cbnz	r2, 8015816 <m_kalman_3gyro.isra.6.constprop.36+0x1d66>
 80157b6:	f109 0901 	add.w	r9, r9, #1
 80157ba:	f1b9 0f0c 	cmp.w	r9, #12
 80157be:	f103 0304 	add.w	r3, r3, #4
 80157c2:	f107 0704 	add.w	r7, r7, #4
 80157c6:	f000 84c3 	beq.w	8016150 <m_kalman_3gyro.isra.6.constprop.36+0x26a0>
 80157ca:	f1b9 0f02 	cmp.w	r9, #2
 80157ce:	ed8d 8a7d 	vstr	s16, [sp, #500]	; 0x1f4
 80157d2:	ed8d 8a7e 	vstr	s16, [sp, #504]	; 0x1f8
 80157d6:	ed8d 8a7f 	vstr	s16, [sp, #508]	; 0x1fc
 80157da:	ed8d 8a80 	vstr	s16, [sp, #512]	; 0x200
 80157de:	ed8d 8a81 	vstr	s16, [sp, #516]	; 0x204
 80157e2:	ed8d 8a82 	vstr	s16, [sp, #520]	; 0x208
 80157e6:	ed8d 8a83 	vstr	s16, [sp, #524]	; 0x20c
 80157ea:	ed8d 8a84 	vstr	s16, [sp, #528]	; 0x210
 80157ee:	ed8d 8a85 	vstr	s16, [sp, #532]	; 0x214
 80157f2:	f340 8413 	ble.w	801601c <m_kalman_3gyro.isra.6.constprop.36+0x256c>
 80157f6:	f1b9 0f05 	cmp.w	r9, #5
 80157fa:	ddc5      	ble.n	8015788 <m_kalman_3gyro.isra.6.constprop.36+0x1cd8>
 80157fc:	aa7d      	add	r2, sp, #500	; 0x1f4
 80157fe:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 8015802:	eb0a 0009 	add.w	r0, sl, r9
 8015806:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 801580a:	f842 1c0c 	str.w	r1, [r2, #-12]
 801580e:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8015812:	2a00      	cmp	r2, #0
 8015814:	d0cf      	beq.n	80157b6 <m_kalman_3gyro.isra.6.constprop.36+0x1d06>
 8015816:	ad74      	add	r5, sp, #464	; 0x1d0
 8015818:	f10a 02b8 	add.w	r2, sl, #184	; 0xb8
 801581c:	ed9d da7d 	vldr	s26, [sp, #500]	; 0x1f4
 8015820:	eddd da7e 	vldr	s27, [sp, #504]	; 0x1f8
 8015824:	ed9d ea7f 	vldr	s28, [sp, #508]	; 0x1fc
 8015828:	eddd ea80 	vldr	s29, [sp, #512]	; 0x200
 801582c:	ed9d fa81 	vldr	s30, [sp, #516]	; 0x204
 8015830:	eddd fa82 	vldr	s31, [sp, #520]	; 0x208
 8015834:	eddd 6a83 	vldr	s13, [sp, #524]	; 0x20c
 8015838:	ed9d 6a84 	vldr	s12, [sp, #528]	; 0x210
 801583c:	eddd 5a85 	vldr	s11, [sp, #532]	; 0x214
 8015840:	9204      	str	r2, [sp, #16]
 8015842:	ed85 8a00 	vstr	s16, [r5]
 8015846:	4616      	mov	r6, r2
 8015848:	ed85 8a01 	vstr	s16, [r5, #4]
 801584c:	ed85 8a02 	vstr	s16, [r5, #8]
 8015850:	ed85 8a03 	vstr	s16, [r5, #12]
 8015854:	ed85 8a04 	vstr	s16, [r5, #16]
 8015858:	ed85 8a05 	vstr	s16, [r5, #20]
 801585c:	ed85 8a06 	vstr	s16, [r5, #24]
 8015860:	ed85 8a07 	vstr	s16, [r5, #28]
 8015864:	ed85 8a08 	vstr	s16, [r5, #32]
 8015868:	4629      	mov	r1, r5
 801586a:	f10a 04dc 	add.w	r4, sl, #220	; 0xdc
 801586e:	ecb2 7a01 	vldmia	r2!, {s14}
 8015872:	ecf1 7a01 	vldmia	r1!, {s15}
 8015876:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801587a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801587e:	d006      	beq.n	801588e <m_kalman_3gyro.isra.6.constprop.36+0x1dde>
 8015880:	eeb5 da40 	vcmp.f32	s26, #0.0
 8015884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015888:	bf18      	it	ne
 801588a:	eeed 7a07 	vfmane.f32	s15, s26, s14
 801588e:	ed92 7a08 	vldr	s14, [r2, #32]
 8015892:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8015896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801589a:	d006      	beq.n	80158aa <m_kalman_3gyro.isra.6.constprop.36+0x1dfa>
 801589c:	eef5 da40 	vcmp.f32	s27, #0.0
 80158a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80158a4:	bf18      	it	ne
 80158a6:	eeed 7a87 	vfmane.f32	s15, s27, s14
 80158aa:	ed92 7a11 	vldr	s14, [r2, #68]	; 0x44
 80158ae:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80158b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80158b6:	d006      	beq.n	80158c6 <m_kalman_3gyro.isra.6.constprop.36+0x1e16>
 80158b8:	eeb5 ea40 	vcmp.f32	s28, #0.0
 80158bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80158c0:	bf18      	it	ne
 80158c2:	eeee 7a07 	vfmane.f32	s15, s28, s14
 80158c6:	ed92 7a1a 	vldr	s14, [r2, #104]	; 0x68
 80158ca:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80158ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80158d2:	d006      	beq.n	80158e2 <m_kalman_3gyro.isra.6.constprop.36+0x1e32>
 80158d4:	eef5 ea40 	vcmp.f32	s29, #0.0
 80158d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80158dc:	bf18      	it	ne
 80158de:	eeee 7a87 	vfmane.f32	s15, s29, s14
 80158e2:	ed92 7a23 	vldr	s14, [r2, #140]	; 0x8c
 80158e6:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80158ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80158ee:	d006      	beq.n	80158fe <m_kalman_3gyro.isra.6.constprop.36+0x1e4e>
 80158f0:	eeb5 fa40 	vcmp.f32	s30, #0.0
 80158f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80158f8:	bf18      	it	ne
 80158fa:	eeef 7a07 	vfmane.f32	s15, s30, s14
 80158fe:	ed92 7a2c 	vldr	s14, [r2, #176]	; 0xb0
 8015902:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8015906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801590a:	d006      	beq.n	801591a <m_kalman_3gyro.isra.6.constprop.36+0x1e6a>
 801590c:	eef5 fa40 	vcmp.f32	s31, #0.0
 8015910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015914:	bf18      	it	ne
 8015916:	eeef 7a87 	vfmane.f32	s15, s31, s14
 801591a:	ed92 7a35 	vldr	s14, [r2, #212]	; 0xd4
 801591e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8015922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015926:	d006      	beq.n	8015936 <m_kalman_3gyro.isra.6.constprop.36+0x1e86>
 8015928:	eef5 6a40 	vcmp.f32	s13, #0.0
 801592c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015930:	bf18      	it	ne
 8015932:	eee6 7a87 	vfmane.f32	s15, s13, s14
 8015936:	ed92 7a3e 	vldr	s14, [r2, #248]	; 0xf8
 801593a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801593e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015942:	d006      	beq.n	8015952 <m_kalman_3gyro.isra.6.constprop.36+0x1ea2>
 8015944:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8015948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801594c:	bf18      	it	ne
 801594e:	eee6 7a07 	vfmane.f32	s15, s12, s14
 8015952:	ed92 7a47 	vldr	s14, [r2, #284]	; 0x11c
 8015956:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801595a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801595e:	d006      	beq.n	801596e <m_kalman_3gyro.isra.6.constprop.36+0x1ebe>
 8015960:	eef5 5a40 	vcmp.f32	s11, #0.0
 8015964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015968:	bf18      	it	ne
 801596a:	eee5 7a87 	vfmane.f32	s15, s11, s14
 801596e:	4294      	cmp	r4, r2
 8015970:	ed41 7a01 	vstr	s15, [r1, #-4]
 8015974:	f47f af7b 	bne.w	801586e <m_kalman_3gyro.isra.6.constprop.36+0x1dbe>
 8015978:	eeb5 da40 	vcmp.f32	s26, #0.0
 801597c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015980:	ed95 ca00 	vldr	s24, [r5]
 8015984:	f000 83af 	beq.w	80160e6 <m_kalman_3gyro.isra.6.constprop.36+0x2636>
 8015988:	eeb5 ca40 	vcmp.f32	s24, #0.0
 801598c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015990:	f000 83a9 	beq.w	80160e6 <m_kalman_3gyro.isra.6.constprop.36+0x2636>
 8015994:	ee6c 7a0d 	vmul.f32	s15, s24, s26
 8015998:	eef5 da40 	vcmp.f32	s27, #0.0
 801599c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80159a0:	ed95 9a01 	vldr	s18, [r5, #4]
 80159a4:	d006      	beq.n	80159b4 <m_kalman_3gyro.isra.6.constprop.36+0x1f04>
 80159a6:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80159aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80159ae:	bf18      	it	ne
 80159b0:	eee9 7a2d 	vfmane.f32	s15, s18, s27
 80159b4:	eeb5 ea40 	vcmp.f32	s28, #0.0
 80159b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80159bc:	edd5 ba02 	vldr	s23, [r5, #8]
 80159c0:	d006      	beq.n	80159d0 <m_kalman_3gyro.isra.6.constprop.36+0x1f20>
 80159c2:	eef5 ba40 	vcmp.f32	s23, #0.0
 80159c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80159ca:	bf18      	it	ne
 80159cc:	eeee 7a2b 	vfmane.f32	s15, s28, s23
 80159d0:	eef5 ea40 	vcmp.f32	s29, #0.0
 80159d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80159d8:	edd5 ca03 	vldr	s25, [r5, #12]
 80159dc:	d006      	beq.n	80159ec <m_kalman_3gyro.isra.6.constprop.36+0x1f3c>
 80159de:	eef5 ca40 	vcmp.f32	s25, #0.0
 80159e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80159e6:	bf18      	it	ne
 80159e8:	eeee 7aac 	vfmane.f32	s15, s29, s25
 80159ec:	eeb5 fa40 	vcmp.f32	s30, #0.0
 80159f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80159f4:	ed95 ba04 	vldr	s22, [r5, #16]
 80159f8:	d006      	beq.n	8015a08 <m_kalman_3gyro.isra.6.constprop.36+0x1f58>
 80159fa:	eeb5 ba40 	vcmp.f32	s22, #0.0
 80159fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a02:	bf18      	it	ne
 8015a04:	eeef 7a0b 	vfmane.f32	s15, s30, s22
 8015a08:	eef5 fa40 	vcmp.f32	s31, #0.0
 8015a0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a10:	ed95 aa05 	vldr	s20, [r5, #20]
 8015a14:	d006      	beq.n	8015a24 <m_kalman_3gyro.isra.6.constprop.36+0x1f74>
 8015a16:	eeb5 aa40 	vcmp.f32	s20, #0.0
 8015a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a1e:	bf18      	it	ne
 8015a20:	eeef 7a8a 	vfmane.f32	s15, s31, s20
 8015a24:	eef5 6a40 	vcmp.f32	s13, #0.0
 8015a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a2c:	edd5 aa06 	vldr	s21, [r5, #24]
 8015a30:	d006      	beq.n	8015a40 <m_kalman_3gyro.isra.6.constprop.36+0x1f90>
 8015a32:	eef5 aa40 	vcmp.f32	s21, #0.0
 8015a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a3a:	bf18      	it	ne
 8015a3c:	eeea 7aa6 	vfmane.f32	s15, s21, s13
 8015a40:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8015a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a48:	edd5 9a07 	vldr	s19, [r5, #28]
 8015a4c:	d006      	beq.n	8015a5c <m_kalman_3gyro.isra.6.constprop.36+0x1fac>
 8015a4e:	eef5 9a40 	vcmp.f32	s19, #0.0
 8015a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a56:	bf18      	it	ne
 8015a58:	eee9 7a86 	vfmane.f32	s15, s19, s12
 8015a5c:	eef5 5a40 	vcmp.f32	s11, #0.0
 8015a60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a64:	edd5 8a08 	vldr	s17, [r5, #32]
 8015a68:	d006      	beq.n	8015a78 <m_kalman_3gyro.isra.6.constprop.36+0x1fc8>
 8015a6a:	eef5 8a40 	vcmp.f32	s17, #0.0
 8015a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a72:	bf18      	it	ne
 8015a74:	eee8 7aa5 	vfmane.f32	s15, s17, s11
 8015a78:	f8dd 2698 	ldr.w	r2, [sp, #1688]	; 0x698
 8015a7c:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 8015a80:	ed92 7a00 	vldr	s14, [r2]
 8015a84:	eee7 7a07 	vfma.f32	s15, s14, s14
 8015a88:	eb09 0249 	add.w	r2, r9, r9, lsl #1
 8015a8c:	1882      	adds	r2, r0, r2
 8015a8e:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8015a92:	ee85 7a27 	vdiv.f32	s14, s10, s15
 8015a96:	f1b9 0f05 	cmp.w	r9, #5
 8015a9a:	9202      	str	r2, [sp, #8]
 8015a9c:	ee27 ca0c 	vmul.f32	s24, s14, s24
 8015aa0:	ee29 9a07 	vmul.f32	s18, s18, s14
 8015aa4:	ee67 ba2b 	vmul.f32	s23, s14, s23
 8015aa8:	ee67 ca2c 	vmul.f32	s25, s14, s25
 8015aac:	ee27 ba0b 	vmul.f32	s22, s14, s22
 8015ab0:	ee27 aa0a 	vmul.f32	s20, s14, s20
 8015ab4:	ee67 aa2a 	vmul.f32	s21, s14, s21
 8015ab8:	ee69 9a87 	vmul.f32	s19, s19, s14
 8015abc:	ee68 8a87 	vmul.f32	s17, s17, s14
 8015ac0:	ed8d ca6b 	vstr	s24, [sp, #428]	; 0x1ac
 8015ac4:	ed8d 9a6c 	vstr	s18, [sp, #432]	; 0x1b0
 8015ac8:	edcd ba6d 	vstr	s23, [sp, #436]	; 0x1b4
 8015acc:	edcd ca6e 	vstr	s25, [sp, #440]	; 0x1b8
 8015ad0:	ed8d ba6f 	vstr	s22, [sp, #444]	; 0x1bc
 8015ad4:	ed8d aa70 	vstr	s20, [sp, #448]	; 0x1c0
 8015ad8:	edcd aa71 	vstr	s21, [sp, #452]	; 0x1c4
 8015adc:	edcd 9a72 	vstr	s19, [sp, #456]	; 0x1c8
 8015ae0:	edcd 8a73 	vstr	s17, [sp, #460]	; 0x1cc
 8015ae4:	f340 8087 	ble.w	8015bf6 <m_kalman_3gyro.isra.6.constprop.36+0x2146>
 8015ae8:	eeb5 da40 	vcmp.f32	s26, #0.0
 8015aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015af0:	ed92 7a19 	vldr	s14, [r2, #100]	; 0x64
 8015af4:	f000 83cd 	beq.w	8016292 <m_kalman_3gyro.isra.6.constprop.36+0x27e2>
 8015af8:	edda 7a25 	vldr	s15, [sl, #148]	; 0x94
 8015afc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8015b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b04:	f000 83c5 	beq.w	8016292 <m_kalman_3gyro.isra.6.constprop.36+0x27e2>
 8015b08:	ee67 7a8d 	vmul.f32	s15, s15, s26
 8015b0c:	eef5 da40 	vcmp.f32	s27, #0.0
 8015b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b14:	d008      	beq.n	8015b28 <m_kalman_3gyro.isra.6.constprop.36+0x2078>
 8015b16:	ed9a 5a26 	vldr	s10, [sl, #152]	; 0x98
 8015b1a:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8015b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b22:	bf18      	it	ne
 8015b24:	eee5 7a2d 	vfmane.f32	s15, s10, s27
 8015b28:	eeb5 ea40 	vcmp.f32	s28, #0.0
 8015b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b30:	d008      	beq.n	8015b44 <m_kalman_3gyro.isra.6.constprop.36+0x2094>
 8015b32:	ed9a 5a27 	vldr	s10, [sl, #156]	; 0x9c
 8015b36:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8015b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b3e:	bf18      	it	ne
 8015b40:	eee5 7a0e 	vfmane.f32	s15, s10, s28
 8015b44:	eef5 ea40 	vcmp.f32	s29, #0.0
 8015b48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b4c:	d008      	beq.n	8015b60 <m_kalman_3gyro.isra.6.constprop.36+0x20b0>
 8015b4e:	ed9a 5a28 	vldr	s10, [sl, #160]	; 0xa0
 8015b52:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8015b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b5a:	bf18      	it	ne
 8015b5c:	eee5 7a2e 	vfmane.f32	s15, s10, s29
 8015b60:	eeb5 fa40 	vcmp.f32	s30, #0.0
 8015b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b68:	d008      	beq.n	8015b7c <m_kalman_3gyro.isra.6.constprop.36+0x20cc>
 8015b6a:	ed9a 5a29 	vldr	s10, [sl, #164]	; 0xa4
 8015b6e:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8015b72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b76:	bf18      	it	ne
 8015b78:	eee5 7a0f 	vfmane.f32	s15, s10, s30
 8015b7c:	eef5 fa40 	vcmp.f32	s31, #0.0
 8015b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b84:	d008      	beq.n	8015b98 <m_kalman_3gyro.isra.6.constprop.36+0x20e8>
 8015b86:	ed9a 5a2a 	vldr	s10, [sl, #168]	; 0xa8
 8015b8a:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8015b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b92:	bf18      	it	ne
 8015b94:	eee5 7a2f 	vfmane.f32	s15, s10, s31
 8015b98:	eef5 6a40 	vcmp.f32	s13, #0.0
 8015b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ba0:	d008      	beq.n	8015bb4 <m_kalman_3gyro.isra.6.constprop.36+0x2104>
 8015ba2:	ed9a 5a2b 	vldr	s10, [sl, #172]	; 0xac
 8015ba6:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8015baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015bae:	bf18      	it	ne
 8015bb0:	eee5 7a26 	vfmane.f32	s15, s10, s13
 8015bb4:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8015bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015bbc:	d008      	beq.n	8015bd0 <m_kalman_3gyro.isra.6.constprop.36+0x2120>
 8015bbe:	ed9a 5a2c 	vldr	s10, [sl, #176]	; 0xb0
 8015bc2:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8015bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015bca:	bf18      	it	ne
 8015bcc:	eee5 7a06 	vfmane.f32	s15, s10, s12
 8015bd0:	eef5 5a40 	vcmp.f32	s11, #0.0
 8015bd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015bd8:	d008      	beq.n	8015bec <m_kalman_3gyro.isra.6.constprop.36+0x213c>
 8015bda:	ed9a 5a2d 	vldr	s10, [sl, #180]	; 0xb4
 8015bde:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8015be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015be6:	bf18      	it	ne
 8015be8:	eee5 7a25 	vfmane.f32	s15, s10, s11
 8015bec:	9a02      	ldr	r2, [sp, #8]
 8015bee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015bf2:	edc2 7a19 	vstr	s15, [r2, #100]	; 0x64
 8015bf6:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8015bfa:	2100      	movs	r1, #0
 8015bfc:	4658      	mov	r0, fp
 8015bfe:	930b      	str	r3, [sp, #44]	; 0x2c
 8015c00:	edcd 5a0a 	vstr	s11, [sp, #40]	; 0x28
 8015c04:	ed8d 6a08 	vstr	s12, [sp, #32]
 8015c08:	edcd 6a06 	vstr	s13, [sp, #24]
 8015c0c:	f004 fa07 	bl	801a01e <memset>
 8015c10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015c12:	eddd 5a0a 	vldr	s11, [sp, #40]	; 0x28
 8015c16:	ed9d 6a08 	vldr	s12, [sp, #32]
 8015c1a:	eddd 6a06 	vldr	s13, [sp, #24]
 8015c1e:	465c      	mov	r4, fp
 8015c20:	a96b      	add	r1, sp, #428	; 0x1ac
 8015c22:	465a      	mov	r2, fp
 8015c24:	ecf1 7a01 	vldmia	r1!, {s15}
 8015c28:	eef5 7a40 	vcmp.f32	s15, #0.0
 8015c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c30:	d062      	beq.n	8015cf8 <m_kalman_3gyro.isra.6.constprop.36+0x2248>
 8015c32:	eeb5 da40 	vcmp.f32	s26, #0.0
 8015c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c3a:	d005      	beq.n	8015c48 <m_kalman_3gyro.isra.6.constprop.36+0x2198>
 8015c3c:	ed92 7a00 	vldr	s14, [r2]
 8015c40:	eea7 7a8d 	vfma.f32	s14, s15, s26
 8015c44:	ed82 7a00 	vstr	s14, [r2]
 8015c48:	eef5 da40 	vcmp.f32	s27, #0.0
 8015c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c50:	d005      	beq.n	8015c5e <m_kalman_3gyro.isra.6.constprop.36+0x21ae>
 8015c52:	ed92 7a09 	vldr	s14, [r2, #36]	; 0x24
 8015c56:	eea7 7aad 	vfma.f32	s14, s15, s27
 8015c5a:	ed82 7a09 	vstr	s14, [r2, #36]	; 0x24
 8015c5e:	eeb5 ea40 	vcmp.f32	s28, #0.0
 8015c62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c66:	d005      	beq.n	8015c74 <m_kalman_3gyro.isra.6.constprop.36+0x21c4>
 8015c68:	ed92 7a12 	vldr	s14, [r2, #72]	; 0x48
 8015c6c:	eea7 7a8e 	vfma.f32	s14, s15, s28
 8015c70:	ed82 7a12 	vstr	s14, [r2, #72]	; 0x48
 8015c74:	eef5 ea40 	vcmp.f32	s29, #0.0
 8015c78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c7c:	d005      	beq.n	8015c8a <m_kalman_3gyro.isra.6.constprop.36+0x21da>
 8015c7e:	ed92 7a1b 	vldr	s14, [r2, #108]	; 0x6c
 8015c82:	eea7 7aae 	vfma.f32	s14, s15, s29
 8015c86:	ed82 7a1b 	vstr	s14, [r2, #108]	; 0x6c
 8015c8a:	eeb5 fa40 	vcmp.f32	s30, #0.0
 8015c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c92:	d005      	beq.n	8015ca0 <m_kalman_3gyro.isra.6.constprop.36+0x21f0>
 8015c94:	ed92 7a24 	vldr	s14, [r2, #144]	; 0x90
 8015c98:	eea7 7a8f 	vfma.f32	s14, s15, s30
 8015c9c:	ed82 7a24 	vstr	s14, [r2, #144]	; 0x90
 8015ca0:	eef5 fa40 	vcmp.f32	s31, #0.0
 8015ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ca8:	d005      	beq.n	8015cb6 <m_kalman_3gyro.isra.6.constprop.36+0x2206>
 8015caa:	ed92 7a2d 	vldr	s14, [r2, #180]	; 0xb4
 8015cae:	eea7 7aaf 	vfma.f32	s14, s15, s31
 8015cb2:	ed82 7a2d 	vstr	s14, [r2, #180]	; 0xb4
 8015cb6:	eef5 6a40 	vcmp.f32	s13, #0.0
 8015cba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015cbe:	d005      	beq.n	8015ccc <m_kalman_3gyro.isra.6.constprop.36+0x221c>
 8015cc0:	ed92 7a36 	vldr	s14, [r2, #216]	; 0xd8
 8015cc4:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8015cc8:	ed82 7a36 	vstr	s14, [r2, #216]	; 0xd8
 8015ccc:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8015cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015cd4:	d005      	beq.n	8015ce2 <m_kalman_3gyro.isra.6.constprop.36+0x2232>
 8015cd6:	ed92 7a3f 	vldr	s14, [r2, #252]	; 0xfc
 8015cda:	eea7 7a86 	vfma.f32	s14, s15, s12
 8015cde:	ed82 7a3f 	vstr	s14, [r2, #252]	; 0xfc
 8015ce2:	eef5 5a40 	vcmp.f32	s11, #0.0
 8015ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015cea:	d005      	beq.n	8015cf8 <m_kalman_3gyro.isra.6.constprop.36+0x2248>
 8015cec:	ed92 7a48 	vldr	s14, [r2, #288]	; 0x120
 8015cf0:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8015cf4:	ed82 7a48 	vstr	s14, [r2, #288]	; 0x120
 8015cf8:	42a9      	cmp	r1, r5
 8015cfa:	f102 0204 	add.w	r2, r2, #4
 8015cfe:	d191      	bne.n	8015c24 <m_kalman_3gyro.isra.6.constprop.36+0x2174>
 8015d00:	f8df c664 	ldr.w	ip, [pc, #1636]	; 8016368 <m_kalman_3gyro.isra.6.constprop.36+0x28b8>
 8015d04:	4658      	mov	r0, fp
 8015d06:	2100      	movs	r1, #0
 8015d08:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015d0c:	fbac e201 	umull	lr, r2, ip, r1
 8015d10:	edd0 7a00 	vldr	s15, [r0]
 8015d14:	08d2      	lsrs	r2, r2, #3
 8015d16:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8015d1a:	ebb1 0f42 	cmp.w	r1, r2, lsl #1
 8015d1e:	ee36 7ae7 	vsub.f32	s14, s13, s15
 8015d22:	f101 0101 	add.w	r1, r1, #1
 8015d26:	bf16      	itet	ne
 8015d28:	eef1 7a67 	vnegne.f32	s15, s15
 8015d2c:	ed80 7a00 	vstreq	s14, [r0]
 8015d30:	edc0 7a00 	vstrne	s15, [r0]
 8015d34:	2951      	cmp	r1, #81	; 0x51
 8015d36:	f100 0004 	add.w	r0, r0, #4
 8015d3a:	d1e7      	bne.n	8015d0c <m_kalman_3gyro.isra.6.constprop.36+0x225c>
 8015d3c:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8015d40:	9904      	ldr	r1, [sp, #16]
 8015d42:	9306      	str	r3, [sp, #24]
 8015d44:	4640      	mov	r0, r8
 8015d46:	f004 f95f 	bl	801a008 <memcpy>
 8015d4a:	9804      	ldr	r0, [sp, #16]
 8015d4c:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8015d50:	2100      	movs	r1, #0
 8015d52:	f004 f964 	bl	801a01e <memset>
 8015d56:	9b06      	ldr	r3, [sp, #24]
 8015d58:	f10b 0c24 	add.w	ip, fp, #36	; 0x24
 8015d5c:	f50d 60c6 	add.w	r0, sp, #1584	; 0x630
 8015d60:	ecf4 3a01 	vldmia	r4!, {s7}
 8015d64:	ed94 4a08 	vldr	s8, [r4, #32]
 8015d68:	edd4 4a11 	vldr	s9, [r4, #68]	; 0x44
 8015d6c:	ed94 5a1a 	vldr	s10, [r4, #104]	; 0x68
 8015d70:	edd4 5a23 	vldr	s11, [r4, #140]	; 0x8c
 8015d74:	ed94 6a2c 	vldr	s12, [r4, #176]	; 0xb0
 8015d78:	edd4 6a35 	vldr	s13, [r4, #212]	; 0xd4
 8015d7c:	ed94 7a3e 	vldr	s14, [r4, #248]	; 0xf8
 8015d80:	edd4 7a47 	vldr	s15, [r4, #284]	; 0x11c
 8015d84:	4642      	mov	r2, r8
 8015d86:	4631      	mov	r1, r6
 8015d88:	eef5 3a40 	vcmp.f32	s7, #0.0
 8015d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d90:	d00c      	beq.n	8015dac <m_kalman_3gyro.isra.6.constprop.36+0x22fc>
 8015d92:	ed92 3a00 	vldr	s6, [r2]
 8015d96:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8015d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d9e:	d005      	beq.n	8015dac <m_kalman_3gyro.isra.6.constprop.36+0x22fc>
 8015da0:	edd1 2a00 	vldr	s5, [r1]
 8015da4:	eee3 2a83 	vfma.f32	s5, s7, s6
 8015da8:	edc1 2a00 	vstr	s5, [r1]
 8015dac:	eeb5 4a40 	vcmp.f32	s8, #0.0
 8015db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015db4:	d00c      	beq.n	8015dd0 <m_kalman_3gyro.isra.6.constprop.36+0x2320>
 8015db6:	ed92 3a01 	vldr	s6, [r2, #4]
 8015dba:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8015dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015dc2:	d005      	beq.n	8015dd0 <m_kalman_3gyro.isra.6.constprop.36+0x2320>
 8015dc4:	edd1 2a00 	vldr	s5, [r1]
 8015dc8:	eee4 2a03 	vfma.f32	s5, s8, s6
 8015dcc:	edc1 2a00 	vstr	s5, [r1]
 8015dd0:	eef5 4a40 	vcmp.f32	s9, #0.0
 8015dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015dd8:	d00c      	beq.n	8015df4 <m_kalman_3gyro.isra.6.constprop.36+0x2344>
 8015dda:	ed92 3a02 	vldr	s6, [r2, #8]
 8015dde:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8015de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015de6:	d005      	beq.n	8015df4 <m_kalman_3gyro.isra.6.constprop.36+0x2344>
 8015de8:	edd1 2a00 	vldr	s5, [r1]
 8015dec:	eee4 2a83 	vfma.f32	s5, s9, s6
 8015df0:	edc1 2a00 	vstr	s5, [r1]
 8015df4:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8015df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015dfc:	d00c      	beq.n	8015e18 <m_kalman_3gyro.isra.6.constprop.36+0x2368>
 8015dfe:	ed92 3a03 	vldr	s6, [r2, #12]
 8015e02:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8015e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e0a:	d005      	beq.n	8015e18 <m_kalman_3gyro.isra.6.constprop.36+0x2368>
 8015e0c:	edd1 2a00 	vldr	s5, [r1]
 8015e10:	eee5 2a03 	vfma.f32	s5, s10, s6
 8015e14:	edc1 2a00 	vstr	s5, [r1]
 8015e18:	eef5 5a40 	vcmp.f32	s11, #0.0
 8015e1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e20:	d00c      	beq.n	8015e3c <m_kalman_3gyro.isra.6.constprop.36+0x238c>
 8015e22:	ed92 3a04 	vldr	s6, [r2, #16]
 8015e26:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8015e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e2e:	d005      	beq.n	8015e3c <m_kalman_3gyro.isra.6.constprop.36+0x238c>
 8015e30:	edd1 2a00 	vldr	s5, [r1]
 8015e34:	eee5 2a83 	vfma.f32	s5, s11, s6
 8015e38:	edc1 2a00 	vstr	s5, [r1]
 8015e3c:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8015e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e44:	d00c      	beq.n	8015e60 <m_kalman_3gyro.isra.6.constprop.36+0x23b0>
 8015e46:	ed92 3a05 	vldr	s6, [r2, #20]
 8015e4a:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8015e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e52:	d005      	beq.n	8015e60 <m_kalman_3gyro.isra.6.constprop.36+0x23b0>
 8015e54:	edd1 2a00 	vldr	s5, [r1]
 8015e58:	eee6 2a03 	vfma.f32	s5, s12, s6
 8015e5c:	edc1 2a00 	vstr	s5, [r1]
 8015e60:	eef5 6a40 	vcmp.f32	s13, #0.0
 8015e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e68:	d00c      	beq.n	8015e84 <m_kalman_3gyro.isra.6.constprop.36+0x23d4>
 8015e6a:	ed92 3a06 	vldr	s6, [r2, #24]
 8015e6e:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8015e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e76:	d005      	beq.n	8015e84 <m_kalman_3gyro.isra.6.constprop.36+0x23d4>
 8015e78:	edd1 2a00 	vldr	s5, [r1]
 8015e7c:	eee6 2a83 	vfma.f32	s5, s13, s6
 8015e80:	edc1 2a00 	vstr	s5, [r1]
 8015e84:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8015e88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e8c:	d00c      	beq.n	8015ea8 <m_kalman_3gyro.isra.6.constprop.36+0x23f8>
 8015e8e:	ed92 3a07 	vldr	s6, [r2, #28]
 8015e92:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8015e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e9a:	d005      	beq.n	8015ea8 <m_kalman_3gyro.isra.6.constprop.36+0x23f8>
 8015e9c:	edd1 2a00 	vldr	s5, [r1]
 8015ea0:	eee7 2a03 	vfma.f32	s5, s14, s6
 8015ea4:	edc1 2a00 	vstr	s5, [r1]
 8015ea8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8015eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015eb0:	d00c      	beq.n	8015ecc <m_kalman_3gyro.isra.6.constprop.36+0x241c>
 8015eb2:	ed92 3a08 	vldr	s6, [r2, #32]
 8015eb6:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8015eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ebe:	d005      	beq.n	8015ecc <m_kalman_3gyro.isra.6.constprop.36+0x241c>
 8015ec0:	edd1 2a00 	vldr	s5, [r1]
 8015ec4:	eee7 2a83 	vfma.f32	s5, s15, s6
 8015ec8:	edc1 2a00 	vstr	s5, [r1]
 8015ecc:	3224      	adds	r2, #36	; 0x24
 8015ece:	4282      	cmp	r2, r0
 8015ed0:	f101 0124 	add.w	r1, r1, #36	; 0x24
 8015ed4:	f47f af58 	bne.w	8015d88 <m_kalman_3gyro.isra.6.constprop.36+0x22d8>
 8015ed8:	45a4      	cmp	ip, r4
 8015eda:	f106 0604 	add.w	r6, r6, #4
 8015ede:	f47f af3f 	bne.w	8015d60 <m_kalman_3gyro.isra.6.constprop.36+0x22b0>
 8015ee2:	9a02      	ldr	r2, [sp, #8]
 8015ee4:	ed85 8a00 	vstr	s16, [r5]
 8015ee8:	eeb5 ca40 	vcmp.f32	s24, #0.0
 8015eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ef0:	ed85 8a01 	vstr	s16, [r5, #4]
 8015ef4:	edd2 7a19 	vldr	s15, [r2, #100]	; 0x64
 8015ef8:	f000 8098 	beq.w	801602c <m_kalman_3gyro.isra.6.constprop.36+0x257c>
 8015efc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8015f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f04:	f000 8092 	beq.w	801602c <m_kalman_3gyro.isra.6.constprop.36+0x257c>
 8015f08:	ee27 ca8c 	vmul.f32	s24, s15, s24
 8015f0c:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8015f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f14:	ed85 ca00 	vstr	s24, [r5]
 8015f18:	f040 85a1 	bne.w	8016a5e <m_kalman_3gyro.isra.6.constprop.36+0x2fae>
 8015f1c:	eef5 ba40 	vcmp.f32	s23, #0.0
 8015f20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f24:	eeb0 9a48 	vmov.f32	s18, s16
 8015f28:	f000 8090 	beq.w	801604c <m_kalman_3gyro.isra.6.constprop.36+0x259c>
 8015f2c:	ee67 baab 	vmul.f32	s23, s15, s23
 8015f30:	eef5 ca40 	vcmp.f32	s25, #0.0
 8015f34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f38:	edc5 ba02 	vstr	s23, [r5, #8]
 8015f3c:	f000 8095 	beq.w	801606a <m_kalman_3gyro.isra.6.constprop.36+0x25ba>
 8015f40:	ee67 caac 	vmul.f32	s25, s15, s25
 8015f44:	eeb5 ba40 	vcmp.f32	s22, #0.0
 8015f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f4c:	edc5 ca03 	vstr	s25, [r5, #12]
 8015f50:	f000 80eb 	beq.w	801612a <m_kalman_3gyro.isra.6.constprop.36+0x267a>
 8015f54:	ee27 ba8b 	vmul.f32	s22, s15, s22
 8015f58:	eeb5 aa40 	vcmp.f32	s20, #0.0
 8015f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f60:	ed85 ba04 	vstr	s22, [r5, #16]
 8015f64:	f000 8094 	beq.w	8016090 <m_kalman_3gyro.isra.6.constprop.36+0x25e0>
 8015f68:	ee27 aa8a 	vmul.f32	s20, s15, s20
 8015f6c:	eef5 aa40 	vcmp.f32	s21, #0.0
 8015f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f74:	ed85 aa05 	vstr	s20, [r5, #20]
 8015f78:	f000 80ba 	beq.w	80160f0 <m_kalman_3gyro.isra.6.constprop.36+0x2640>
 8015f7c:	ee67 aaaa 	vmul.f32	s21, s15, s21
 8015f80:	eef5 9a40 	vcmp.f32	s19, #0.0
 8015f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f88:	edc5 aa06 	vstr	s21, [r5, #24]
 8015f8c:	f000 8098 	beq.w	80160c0 <m_kalman_3gyro.isra.6.constprop.36+0x2610>
 8015f90:	ee67 9aa9 	vmul.f32	s19, s15, s19
 8015f94:	eef5 8a40 	vcmp.f32	s17, #0.0
 8015f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f9c:	edc5 9a07 	vstr	s19, [r5, #28]
 8015fa0:	f040 809e 	bne.w	80160e0 <m_kalman_3gyro.isra.6.constprop.36+0x2630>
 8015fa4:	eef0 7a48 	vmov.f32	s15, s16
 8015fa8:	ed9a 4a25 	vldr	s8, [sl, #148]	; 0x94
 8015fac:	edda 6a26 	vldr	s13, [sl, #152]	; 0x98
 8015fb0:	edda 4a27 	vldr	s9, [sl, #156]	; 0x9c
 8015fb4:	edda 3a28 	vldr	s7, [sl, #160]	; 0xa0
 8015fb8:	ed9a 5a29 	vldr	s10, [sl, #164]	; 0xa4
 8015fbc:	ed9a 6a2a 	vldr	s12, [sl, #168]	; 0xa8
 8015fc0:	edda 5a2b 	vldr	s11, [sl, #172]	; 0xac
 8015fc4:	ed9a 3a2c 	vldr	s6, [sl, #176]	; 0xb0
 8015fc8:	ed9a 7a2d 	vldr	s14, [sl, #180]	; 0xb4
 8015fcc:	edc5 7a08 	vstr	s15, [r5, #32]
 8015fd0:	ee34 ca0c 	vadd.f32	s24, s8, s24
 8015fd4:	ee36 9a89 	vadd.f32	s18, s13, s18
 8015fd8:	ee74 baab 	vadd.f32	s23, s9, s23
 8015fdc:	ee73 caac 	vadd.f32	s25, s7, s25
 8015fe0:	ee35 ba0b 	vadd.f32	s22, s10, s22
 8015fe4:	ee36 aa0a 	vadd.f32	s20, s12, s20
 8015fe8:	ee75 aaaa 	vadd.f32	s21, s11, s21
 8015fec:	ee73 9a29 	vadd.f32	s19, s6, s19
 8015ff0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015ff4:	ed8a ca25 	vstr	s24, [sl, #148]	; 0x94
 8015ff8:	ed8a 9a26 	vstr	s18, [sl, #152]	; 0x98
 8015ffc:	edca ba27 	vstr	s23, [sl, #156]	; 0x9c
 8016000:	edca ca28 	vstr	s25, [sl, #160]	; 0xa0
 8016004:	ed8a ba29 	vstr	s22, [sl, #164]	; 0xa4
 8016008:	ed8a aa2a 	vstr	s20, [sl, #168]	; 0xa8
 801600c:	edca aa2b 	vstr	s21, [sl, #172]	; 0xac
 8016010:	edca 9a2c 	vstr	s19, [sl, #176]	; 0xb0
 8016014:	edca 7a2d 	vstr	s15, [sl, #180]	; 0xb4
 8016018:	f7ff bbcd 	b.w	80157b6 <m_kalman_3gyro.isra.6.constprop.36+0x1d06>
 801601c:	edd3 6a00 	vldr	s13, [r3]
 8016020:	ed93 7a03 	vldr	s14, [r3, #12]
 8016024:	edd3 7a06 	vldr	s15, [r3, #24]
 8016028:	f7ff bbb4 	b.w	8015794 <m_kalman_3gyro.isra.6.constprop.36+0x1ce4>
 801602c:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8016030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016034:	f000 8130 	beq.w	8016298 <m_kalman_3gyro.isra.6.constprop.36+0x27e8>
 8016038:	eef5 7a40 	vcmp.f32	s15, #0.0
 801603c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016040:	f040 850b 	bne.w	8016a5a <m_kalman_3gyro.isra.6.constprop.36+0x2faa>
 8016044:	eeb0 9a48 	vmov.f32	s18, s16
 8016048:	eeb0 ca48 	vmov.f32	s24, s16
 801604c:	eef5 ca40 	vcmp.f32	s25, #0.0
 8016050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016054:	ed85 8a02 	vstr	s16, [r5, #8]
 8016058:	d077      	beq.n	801614a <m_kalman_3gyro.isra.6.constprop.36+0x269a>
 801605a:	eef5 7a40 	vcmp.f32	s15, #0.0
 801605e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016062:	eef0 ba48 	vmov.f32	s23, s16
 8016066:	f47f af6b 	bne.w	8015f40 <m_kalman_3gyro.isra.6.constprop.36+0x2490>
 801606a:	eeb5 ba40 	vcmp.f32	s22, #0.0
 801606e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016072:	ed85 8a03 	vstr	s16, [r5, #12]
 8016076:	d056      	beq.n	8016126 <m_kalman_3gyro.isra.6.constprop.36+0x2676>
 8016078:	eef5 7a40 	vcmp.f32	s15, #0.0
 801607c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016080:	f041 813a 	bne.w	80172f8 <m_kalman_3gyro.isra.6.constprop.36+0x3848>
 8016084:	ed85 8a04 	vstr	s16, [r5, #16]
 8016088:	eeb0 ba48 	vmov.f32	s22, s16
 801608c:	eef0 ca48 	vmov.f32	s25, s16
 8016090:	eef5 aa40 	vcmp.f32	s21, #0.0
 8016094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016098:	ed85 8a05 	vstr	s16, [r5, #20]
 801609c:	d026      	beq.n	80160ec <m_kalman_3gyro.isra.6.constprop.36+0x263c>
 801609e:	eef5 7a40 	vcmp.f32	s15, #0.0
 80160a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80160a6:	f041 8123 	bne.w	80172f0 <m_kalman_3gyro.isra.6.constprop.36+0x3840>
 80160aa:	eef5 9a40 	vcmp.f32	s19, #0.0
 80160ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80160b2:	ed85 8a06 	vstr	s16, [r5, #24]
 80160b6:	d12b      	bne.n	8016110 <m_kalman_3gyro.isra.6.constprop.36+0x2660>
 80160b8:	eef0 aa48 	vmov.f32	s21, s16
 80160bc:	eeb0 aa48 	vmov.f32	s20, s16
 80160c0:	eef5 8a40 	vcmp.f32	s17, #0.0
 80160c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80160c8:	ed85 8a07 	vstr	s16, [r5, #28]
 80160cc:	f000 84bf 	beq.w	8016a4e <m_kalman_3gyro.isra.6.constprop.36+0x2f9e>
 80160d0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80160d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80160d8:	eef0 9a48 	vmov.f32	s19, s16
 80160dc:	f43f af62 	beq.w	8015fa4 <m_kalman_3gyro.isra.6.constprop.36+0x24f4>
 80160e0:	ee67 7aa8 	vmul.f32	s15, s15, s17
 80160e4:	e760      	b.n	8015fa8 <m_kalman_3gyro.isra.6.constprop.36+0x24f8>
 80160e6:	eddf 7a9e 	vldr	s15, [pc, #632]	; 8016360 <m_kalman_3gyro.isra.6.constprop.36+0x28b0>
 80160ea:	e455      	b.n	8015998 <m_kalman_3gyro.isra.6.constprop.36+0x1ee8>
 80160ec:	eeb0 aa48 	vmov.f32	s20, s16
 80160f0:	eef5 9a40 	vcmp.f32	s19, #0.0
 80160f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80160f8:	ed85 8a06 	vstr	s16, [r5, #24]
 80160fc:	f000 849d 	beq.w	8016a3a <m_kalman_3gyro.isra.6.constprop.36+0x2f8a>
 8016100:	eef5 7a40 	vcmp.f32	s15, #0.0
 8016104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016108:	d004      	beq.n	8016114 <m_kalman_3gyro.isra.6.constprop.36+0x2664>
 801610a:	eef0 aa48 	vmov.f32	s21, s16
 801610e:	e73f      	b.n	8015f90 <m_kalman_3gyro.isra.6.constprop.36+0x24e0>
 8016110:	eeb0 aa48 	vmov.f32	s20, s16
 8016114:	ed85 8a07 	vstr	s16, [r5, #28]
 8016118:	eef0 9a48 	vmov.f32	s19, s16
 801611c:	eef0 aa48 	vmov.f32	s21, s16
 8016120:	eef0 7a48 	vmov.f32	s15, s16
 8016124:	e740      	b.n	8015fa8 <m_kalman_3gyro.isra.6.constprop.36+0x24f8>
 8016126:	eef0 ca48 	vmov.f32	s25, s16
 801612a:	eeb5 aa40 	vcmp.f32	s20, #0.0
 801612e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016132:	ed85 8a04 	vstr	s16, [r5, #16]
 8016136:	f000 849e 	beq.w	8016a76 <m_kalman_3gyro.isra.6.constprop.36+0x2fc6>
 801613a:	eef5 7a40 	vcmp.f32	s15, #0.0
 801613e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016142:	eeb0 ba48 	vmov.f32	s22, s16
 8016146:	d0a3      	beq.n	8016090 <m_kalman_3gyro.isra.6.constprop.36+0x25e0>
 8016148:	e70e      	b.n	8015f68 <m_kalman_3gyro.isra.6.constprop.36+0x24b8>
 801614a:	eef0 ba48 	vmov.f32	s23, s16
 801614e:	e78c      	b.n	801606a <m_kalman_3gyro.isra.6.constprop.36+0x25ba>
 8016150:	edda 8a26 	vldr	s17, [sl, #152]	; 0x98
 8016154:	ed9a 9a25 	vldr	s18, [sl, #148]	; 0x94
 8016158:	ed9a 8a27 	vldr	s16, [sl, #156]	; 0x9c
 801615c:	ee28 aaa8 	vmul.f32	s20, s17, s17
 8016160:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8016164:	eea9 aa09 	vfma.f32	s20, s18, s18
 8016168:	eea8 aa08 	vfma.f32	s20, s16, s16
 801616c:	eeb4 aae7 	vcmpe.f32	s20, s15
 8016170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016174:	f100 84f3 	bmi.w	8016b5e <m_kalman_3gyro.isra.6.constprop.36+0x30ae>
 8016178:	eddf 9a79 	vldr	s19, [pc, #484]	; 8016360 <m_kalman_3gyro.isra.6.constprop.36+0x28b0>
 801617c:	f8ba 3030 	ldrh.w	r3, [sl, #48]	; 0x30
 8016180:	2b00      	cmp	r3, #0
 8016182:	f000 847c 	beq.w	8016a7e <m_kalman_3gyro.isra.6.constprop.36+0x2fce>
 8016186:	f8dd 06c8 	ldr.w	r0, [sp, #1736]	; 0x6c8
 801618a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801618c:	2300      	movs	r3, #0
 801618e:	6003      	str	r3, [r0, #0]
 8016190:	f8dd 06c8 	ldr.w	r0, [sp, #1736]	; 0x6c8
 8016194:	600b      	str	r3, [r1, #0]
 8016196:	6043      	str	r3, [r0, #4]
 8016198:	f8dd 06c8 	ldr.w	r0, [sp, #1736]	; 0x6c8
 801619c:	604b      	str	r3, [r1, #4]
 801619e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80161a2:	608b      	str	r3, [r1, #8]
 80161a4:	6083      	str	r3, [r0, #8]
 80161a6:	60ca      	str	r2, [r1, #12]
 80161a8:	60c2      	str	r2, [r0, #12]
 80161aa:	460f      	mov	r7, r1
 80161ac:	4638      	mov	r0, r7
 80161ae:	9901      	ldr	r1, [sp, #4]
 80161b0:	f7f9 f99c 	bl	800f4ec <m_q2dcm_eml>
 80161b4:	ed97 9a01 	vldr	s18, [r7, #4]
 80161b8:	edd7 9a00 	vldr	s19, [r7]
 80161bc:	edd7 8a02 	vldr	s17, [r7, #8]
 80161c0:	ed97 8a03 	vldr	s16, [r7, #12]
 80161c4:	ee69 7a09 	vmul.f32	s15, s18, s18
 80161c8:	f50a 7616 	add.w	r6, sl, #600	; 0x258
 80161cc:	eee9 7aa9 	vfma.f32	s15, s19, s19
 80161d0:	eee8 7aa8 	vfma.f32	s15, s17, s17
 80161d4:	eee8 7a08 	vfma.f32	s15, s16, s16
 80161d8:	ee17 0a90 	vmov	r0, s15
 80161dc:	f7ea f9bc 	bl	8000558 <__aeabi_f2d>
 80161e0:	f005 f840 	bl	801b264 <sqrt>
 80161e4:	f7ea fce8 	bl	8000bb8 <__aeabi_d2f>
 80161e8:	ee07 0a90 	vmov	s15, r0
 80161ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80161f0:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80161f4:	e9dd 5429 	ldrd	r5, r4, [sp, #164]	; 0xa4
 80161f8:	ee69 9aa7 	vmul.f32	s19, s19, s15
 80161fc:	ee29 9a27 	vmul.f32	s18, s18, s15
 8016200:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8016204:	ee28 8a27 	vmul.f32	s16, s16, s15
 8016208:	edc7 9a00 	vstr	s19, [r7]
 801620c:	ed87 9a01 	vstr	s18, [r7, #4]
 8016210:	edc7 8a02 	vstr	s17, [r7, #8]
 8016214:	ed87 8a03 	vstr	s16, [r7, #12]
 8016218:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 801621c:	f8dd 76c4 	ldr.w	r7, [sp, #1732]	; 0x6c4
 8016220:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8016224:	6821      	ldr	r1, [r4, #0]
 8016226:	6862      	ldr	r2, [r4, #4]
 8016228:	68a3      	ldr	r3, [r4, #8]
 801622a:	68e0      	ldr	r0, [r4, #12]
 801622c:	60e8      	str	r0, [r5, #12]
 801622e:	3410      	adds	r4, #16
 8016230:	42b4      	cmp	r4, r6
 8016232:	6029      	str	r1, [r5, #0]
 8016234:	606a      	str	r2, [r5, #4]
 8016236:	60ab      	str	r3, [r5, #8]
 8016238:	f105 0510 	add.w	r5, r5, #16
 801623c:	d1f2      	bne.n	8016224 <m_kalman_3gyro.isra.6.constprop.36+0x2774>
 801623e:	6823      	ldr	r3, [r4, #0]
 8016240:	602b      	str	r3, [r5, #0]
 8016242:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 8016246:	f8da 3094 	ldr.w	r3, [sl, #148]	; 0x94
 801624a:	6013      	str	r3, [r2, #0]
 801624c:	f8da 3098 	ldr.w	r3, [sl, #152]	; 0x98
 8016250:	6053      	str	r3, [r2, #4]
 8016252:	f8da 309c 	ldr.w	r3, [sl, #156]	; 0x9c
 8016256:	6093      	str	r3, [r2, #8]
 8016258:	f8da 30a0 	ldr.w	r3, [sl, #160]	; 0xa0
 801625c:	60d3      	str	r3, [r2, #12]
 801625e:	f8da 30a4 	ldr.w	r3, [sl, #164]	; 0xa4
 8016262:	6113      	str	r3, [r2, #16]
 8016264:	f8da 30a8 	ldr.w	r3, [sl, #168]	; 0xa8
 8016268:	6153      	str	r3, [r2, #20]
 801626a:	f8da 30ac 	ldr.w	r3, [sl, #172]	; 0xac
 801626e:	6193      	str	r3, [r2, #24]
 8016270:	f8da 30b0 	ldr.w	r3, [sl, #176]	; 0xb0
 8016274:	61d3      	str	r3, [r2, #28]
 8016276:	f8da 30b4 	ldr.w	r3, [sl, #180]	; 0xb4
 801627a:	6213      	str	r3, [r2, #32]
 801627c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801627e:	f8dd 26cc 	ldr.w	r2, [sp, #1740]	; 0x6cc
 8016282:	681b      	ldr	r3, [r3, #0]
 8016284:	6013      	str	r3, [r2, #0]
 8016286:	f20d 6d34 	addw	sp, sp, #1588	; 0x634
 801628a:	ecbd 8b10 	vpop	{d8-d15}
 801628e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016292:	eddf 7a33 	vldr	s15, [pc, #204]	; 8016360 <m_kalman_3gyro.isra.6.constprop.36+0x28b0>
 8016296:	e439      	b.n	8015b0c <m_kalman_3gyro.isra.6.constprop.36+0x205c>
 8016298:	eef5 ba40 	vcmp.f32	s23, #0.0
 801629c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162a0:	f43f aed0 	beq.w	8016044 <m_kalman_3gyro.isra.6.constprop.36+0x2594>
 80162a4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80162a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162ac:	eeb0 9a48 	vmov.f32	s18, s16
 80162b0:	eeb0 ca48 	vmov.f32	s24, s16
 80162b4:	f43f aeca 	beq.w	801604c <m_kalman_3gyro.isra.6.constprop.36+0x259c>
 80162b8:	e638      	b.n	8015f2c <m_kalman_3gyro.isra.6.constprop.36+0x247c>
 80162ba:	2300      	movs	r3, #0
 80162bc:	f88a 31ff 	strb.w	r3, [sl, #511]	; 0x1ff
 80162c0:	f88a 3200 	strb.w	r3, [sl, #512]	; 0x200
 80162c4:	f88a 3201 	strb.w	r3, [sl, #513]	; 0x201
 80162c8:	f88a 3205 	strb.w	r3, [sl, #517]	; 0x205
 80162cc:	f88a 3206 	strb.w	r3, [sl, #518]	; 0x206
 80162d0:	f7ff ba17 	b.w	8015702 <m_kalman_3gyro.isra.6.constprop.36+0x1c52>
 80162d4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80162d8:	ee79 7a67 	vsub.f32	s15, s18, s15
 80162dc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80162de:	eef0 7ae7 	vabs.f32	s15, s15
 80162e2:	edc3 7a00 	vstr	s15, [r3]
 80162e6:	f7fe bebd 	b.w	8015064 <m_kalman_3gyro.isra.6.constprop.36+0x15b4>
 80162ea:	f8da 2458 	ldr.w	r2, [sl, #1112]	; 0x458
 80162ee:	2a31      	cmp	r2, #49	; 0x31
 80162f0:	f73e afe4 	bgt.w	80152bc <m_kalman_3gyro.isra.6.constprop.36+0x180c>
 80162f4:	2300      	movs	r3, #0
 80162f6:	2a00      	cmp	r2, #0
 80162f8:	f8aa 3202 	strh.w	r3, [sl, #514]	; 0x202
 80162fc:	f88a 3204 	strb.w	r3, [sl, #516]	; 0x204
 8016300:	f102 0301 	add.w	r3, r2, #1
 8016304:	dd03      	ble.n	801630e <m_kalman_3gyro.isra.6.constprop.36+0x285e>
 8016306:	2b00      	cmp	r3, #0
 8016308:	bfd8      	it	le
 801630a:	f06f 4300 	mvnle.w	r3, #2147483648	; 0x80000000
 801630e:	f8ca 3458 	str.w	r3, [sl, #1112]	; 0x458
 8016312:	f7fe bfd3 	b.w	80152bc <m_kalman_3gyro.isra.6.constprop.36+0x180c>
 8016316:	f8da 20a4 	ldr.w	r2, [sl, #164]	; 0xa4
 801631a:	f8da 30a8 	ldr.w	r3, [sl, #168]	; 0xa8
 801631e:	f8ca 2080 	str.w	r2, [sl, #128]	; 0x80
 8016322:	f8ca 3084 	str.w	r3, [sl, #132]	; 0x84
 8016326:	f8da 20a0 	ldr.w	r2, [sl, #160]	; 0xa0
 801632a:	f8ca 207c 	str.w	r2, [sl, #124]	; 0x7c
 801632e:	2300      	movs	r3, #0
 8016330:	f8ca 3450 	str.w	r3, [sl, #1104]	; 0x450
 8016334:	f8ca 345c 	str.w	r3, [sl, #1116]	; 0x45c
 8016338:	ac86      	add	r4, sp, #536	; 0x218
 801633a:	f7fe bfb0 	b.w	801529e <m_kalman_3gyro.isra.6.constprop.36+0x17ee>
 801633e:	2301      	movs	r3, #1
 8016340:	f88a 3205 	strb.w	r3, [sl, #517]	; 0x205
 8016344:	f88a 3207 	strb.w	r3, [sl, #519]	; 0x207
 8016348:	f7ff b95c 	b.w	8015604 <m_kalman_3gyro.isra.6.constprop.36+0x1b54>
 801634c:	eddd 8aa2 	vldr	s17, [sp, #648]	; 0x288
 8016350:	ed9d 9aac 	vldr	s18, [sp, #688]	; 0x2b0
 8016354:	f7fe be9f 	b.w	8015096 <m_kalman_3gyro.isra.6.constprop.36+0x15e6>
 8016358:	2400      	movs	r4, #0
 801635a:	4d02      	ldr	r5, [pc, #8]	; (8016364 <m_kalman_3gyro.isra.6.constprop.36+0x28b4>)
 801635c:	f7fe bd6a 	b.w	8014e34 <m_kalman_3gyro.isra.6.constprop.36+0x1384>
 8016360:	00000000 	.word	0x00000000
 8016364:	3ff00000 	.word	0x3ff00000
 8016368:	cccccccd 	.word	0xcccccccd
 801636c:	f60a 0378 	addw	r3, sl, #2168	; 0x878
 8016370:	ed93 7a00 	vldr	s14, [r3]
 8016374:	f60a 0374 	addw	r3, sl, #2164	; 0x874
 8016378:	ee67 7a07 	vmul.f32	s15, s14, s14
 801637c:	ed93 aa00 	vldr	s20, [r3]
 8016380:	ed8d 7a06 	vstr	s14, [sp, #24]
 8016384:	eeea 7a0a 	vfma.f32	s15, s20, s20
 8016388:	f60a 037c 	addw	r3, sl, #2172	; 0x87c
 801638c:	ac86      	add	r4, sp, #536	; 0x218
 801638e:	edd3 aa00 	vldr	s21, [r3]
 8016392:	eeea 7aaa 	vfma.f32	s15, s21, s21
 8016396:	eef7 fa00 	vmov.f32	s31, #112	; 0x3f800000  1.0
 801639a:	ee17 0a90 	vmov	r0, s15
 801639e:	f7ea f8db 	bl	8000558 <__aeabi_f2d>
 80163a2:	f004 ff5f 	bl	801b264 <sqrt>
 80163a6:	f60a 0384 	addw	r3, sl, #2180	; 0x884
 80163aa:	ed93 ba00 	vldr	s22, [r3]
 80163ae:	f50a 6308 	add.w	r3, sl, #2176	; 0x880
 80163b2:	ed93 da00 	vldr	s26, [r3]
 80163b6:	ee6b 7a0b 	vmul.f32	s15, s22, s22
 80163ba:	f60a 0388 	addw	r3, sl, #2184	; 0x888
 80163be:	eeed 7a0d 	vfma.f32	s15, s26, s26
 80163c2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80163c6:	edd3 ba00 	vldr	s23, [r3]
 80163ca:	eeeb 7aab 	vfma.f32	s15, s23, s23
 80163ce:	ee17 0a90 	vmov	r0, s15
 80163d2:	f7ea f8c1 	bl	8000558 <__aeabi_f2d>
 80163d6:	f004 ff45 	bl	801b264 <sqrt>
 80163da:	f7ea fbed 	bl	8000bb8 <__aeabi_d2f>
 80163de:	4bd2      	ldr	r3, [pc, #840]	; (8016728 <m_kalman_3gyro.isra.6.constprop.36+0x2c78>)
 80163e0:	ee07 0a90 	vmov	s15, r0
 80163e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80163e8:	edc3 7a00 	vstr	s15, [r3]
 80163ec:	ee8f caa7 	vdiv.f32	s24, s31, s15
 80163f0:	f7ea fbe2 	bl	8000bb8 <__aeabi_d2f>
 80163f4:	ee07 0a90 	vmov	s15, r0
 80163f8:	eecf 7aa7 	vdiv.f32	s15, s31, s15
 80163fc:	ee2c da0d 	vmul.f32	s26, s24, s26
 8016400:	ee27 6aaa 	vmul.f32	s12, s15, s21
 8016404:	ed9d 7a06 	vldr	s14, [sp, #24]
 8016408:	ee6c ba2b 	vmul.f32	s23, s24, s23
 801640c:	ee27 aa8a 	vmul.f32	s20, s15, s20
 8016410:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016414:	ee2d 7a46 	vnmul.f32	s14, s26, s12
 8016418:	ee2c ca0b 	vmul.f32	s24, s24, s22
 801641c:	eeab 7a8a 	vfma.f32	s14, s23, s20
 8016420:	ee67 6aeb 	vnmul.f32	s13, s15, s23
 8016424:	eef0 aa47 	vmov.f32	s21, s14
 8016428:	eee6 6a0c 	vfma.f32	s13, s12, s24
 801642c:	ee27 7a07 	vmul.f32	s14, s14, s14
 8016430:	ee2a aa4c 	vnmul.f32	s20, s20, s24
 8016434:	eeb0 ba66 	vmov.f32	s22, s13
 8016438:	eea7 aa8d 	vfma.f32	s20, s15, s26
 801643c:	eef0 7a47 	vmov.f32	s15, s14
 8016440:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8016444:	eeea 7a0a 	vfma.f32	s15, s20, s20
 8016448:	ee17 0a90 	vmov	r0, s15
 801644c:	f7ea f884 	bl	8000558 <__aeabi_f2d>
 8016450:	f004 ff08 	bl	801b264 <sqrt>
 8016454:	f7ea fbb0 	bl	8000bb8 <__aeabi_d2f>
 8016458:	ee07 0a90 	vmov	s15, r0
 801645c:	eecf 7aa7 	vdiv.f32	s15, s31, s15
 8016460:	aa7d      	add	r2, sp, #500	; 0x1f4
 8016462:	4620      	mov	r0, r4
 8016464:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8016466:	ed84 da02 	vstr	s26, [r4, #8]
 801646a:	ee6b 6a27 	vmul.f32	s13, s22, s15
 801646e:	ee2a 7aa7 	vmul.f32	s14, s21, s15
 8016472:	ee6a 7a27 	vmul.f32	s15, s20, s15
 8016476:	ee6d 5a47 	vnmul.f32	s11, s26, s14
 801647a:	ee2c 5a67 	vnmul.f32	s10, s24, s15
 801647e:	ee26 6aeb 	vnmul.f32	s12, s13, s23
 8016482:	eeab 5a87 	vfma.f32	s10, s23, s14
 8016486:	eee6 5a8c 	vfma.f32	s11, s13, s24
 801648a:	eea7 6a8d 	vfma.f32	s12, s15, s26
 801648e:	edc4 6a01 	vstr	s13, [r4, #4]
 8016492:	ed84 7a04 	vstr	s14, [r4, #16]
 8016496:	edc4 7a07 	vstr	s15, [r4, #28]
 801649a:	ed84 5a00 	vstr	s10, [r4]
 801649e:	edc4 5a06 	vstr	s11, [r4, #24]
 80164a2:	ed84 6a03 	vstr	s12, [r4, #12]
 80164a6:	ed84 ca05 	vstr	s24, [r4, #20]
 80164aa:	edc4 ba08 	vstr	s23, [r4, #32]
 80164ae:	f7f8 fe1f 	bl	800f0f0 <m_mldivide>
 80164b2:	a94b      	add	r1, sp, #300	; 0x12c
 80164b4:	a87d      	add	r0, sp, #500	; 0x1f4
 80164b6:	f7f9 f999 	bl	800f7ec <m_dcm2q_eml>
 80164ba:	eddf 7a9c 	vldr	s15, [pc, #624]	; 801672c <m_kalman_3gyro.isra.6.constprop.36+0x2c7c>
 80164be:	984b      	ldr	r0, [sp, #300]	; 0x12c
 80164c0:	994c      	ldr	r1, [sp, #304]	; 0x130
 80164c2:	9a4d      	ldr	r2, [sp, #308]	; 0x134
 80164c4:	9b4e      	ldr	r3, [sp, #312]	; 0x138
 80164c6:	904f      	str	r0, [sp, #316]	; 0x13c
 80164c8:	eeb0 7a67 	vmov.f32	s14, s15
 80164cc:	eef0 6a67 	vmov.f32	s13, s15
 80164d0:	9150      	str	r1, [sp, #320]	; 0x140
 80164d2:	9251      	str	r2, [sp, #324]	; 0x144
 80164d4:	9352      	str	r3, [sp, #328]	; 0x148
 80164d6:	ed96 5a06 	vldr	s10, [r6, #24]
 80164da:	edd6 5a07 	vldr	s11, [r6, #28]
 80164de:	ed96 6a08 	vldr	s12, [r6, #32]
 80164e2:	3624      	adds	r6, #36	; 0x24
 80164e4:	42b5      	cmp	r5, r6
 80164e6:	ee76 6a85 	vadd.f32	s13, s13, s10
 80164ea:	ee37 7a25 	vadd.f32	s14, s14, s11
 80164ee:	ee77 7a86 	vadd.f32	s15, s15, s12
 80164f2:	d1f0      	bne.n	80164d6 <m_kalman_3gyro.isra.6.constprop.36+0x2a26>
 80164f4:	ed9f 6a8e 	vldr	s12, [pc, #568]	; 8016730 <m_kalman_3gyro.isra.6.constprop.36+0x2c80>
 80164f8:	eeb4 eaed 	vcmpe.f32	s28, s27
 80164fc:	ee66 6a86 	vmul.f32	s13, s13, s12
 8016500:	ee27 7a06 	vmul.f32	s14, s14, s12
 8016504:	ee67 7a86 	vmul.f32	s15, s15, s12
 8016508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801650c:	edcd 6a3e 	vstr	s13, [sp, #248]	; 0xf8
 8016510:	ed8d 7a3f 	vstr	s14, [sp, #252]	; 0xfc
 8016514:	edcd 7a40 	vstr	s15, [sp, #256]	; 0x100
 8016518:	f340 8339 	ble.w	8016b8e <m_kalman_3gyro.isra.6.constprop.36+0x30de>
 801651c:	eef4 eaec 	vcmpe.f32	s29, s25
 8016520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016524:	f77e ae9c 	ble.w	8015260 <m_kalman_3gyro.isra.6.constprop.36+0x17b0>
 8016528:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801652a:	edd3 7a00 	vldr	s15, [r3]
 801652e:	eeb4 fae7 	vcmpe.f32	s30, s15
 8016532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016536:	f77e ae93 	ble.w	8015260 <m_kalman_3gyro.isra.6.constprop.36+0x17b0>
 801653a:	9b08      	ldr	r3, [sp, #32]
 801653c:	eddf 7a7d 	vldr	s15, [pc, #500]	; 8016734 <m_kalman_3gyro.isra.6.constprop.36+0x2c84>
 8016540:	ed93 7a00 	vldr	s14, [r3]
 8016544:	eeb0 7ac7 	vabs.f32	s14, s14
 8016548:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801654c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016550:	f57e ae86 	bpl.w	8015260 <m_kalman_3gyro.isra.6.constprop.36+0x17b0>
 8016554:	ed93 7a01 	vldr	s14, [r3, #4]
 8016558:	eeb0 7ac7 	vabs.f32	s14, s14
 801655c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016564:	f57e ae7c 	bpl.w	8015260 <m_kalman_3gyro.isra.6.constprop.36+0x17b0>
 8016568:	ed93 7a02 	vldr	s14, [r3, #8]
 801656c:	eeb0 7ac7 	vabs.f32	s14, s14
 8016570:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016578:	f57e ae72 	bpl.w	8015260 <m_kalman_3gyro.isra.6.constprop.36+0x17b0>
 801657c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801657e:	eddf 7a6e 	vldr	s15, [pc, #440]	; 8016738 <m_kalman_3gyro.isra.6.constprop.36+0x2c88>
 8016582:	ed93 7a00 	vldr	s14, [r3]
 8016586:	eeb0 7ac7 	vabs.f32	s14, s14
 801658a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801658e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016592:	f57e ae65 	bpl.w	8015260 <m_kalman_3gyro.isra.6.constprop.36+0x17b0>
 8016596:	ed93 7a01 	vldr	s14, [r3, #4]
 801659a:	eeb0 7ac7 	vabs.f32	s14, s14
 801659e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80165a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80165a6:	f57e ae5b 	bpl.w	8015260 <m_kalman_3gyro.isra.6.constprop.36+0x17b0>
 80165aa:	ed93 7a02 	vldr	s14, [r3, #8]
 80165ae:	eeb0 7ac7 	vabs.f32	s14, s14
 80165b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80165b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80165ba:	f57e ae51 	bpl.w	8015260 <m_kalman_3gyro.isra.6.constprop.36+0x17b0>
 80165be:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80165c0:	f8da 2450 	ldr.w	r2, [sl, #1104]	; 0x450
 80165c4:	ed93 5a00 	vldr	s10, [r3]
 80165c8:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 80165ca:	edd3 5a00 	vldr	s11, [r3]
 80165ce:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80165d0:	edd3 6a00 	vldr	s13, [r3]
 80165d4:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80165d6:	2a09      	cmp	r2, #9
 80165d8:	eef4 5ac5 	vcmpe.f32	s11, s10
 80165dc:	f50a 6198 	add.w	r1, sl, #1216	; 0x4c0
 80165e0:	ed93 7a00 	vldr	s14, [r3]
 80165e4:	ed91 6a00 	vldr	s12, [r1]
 80165e8:	bfcc      	ite	gt
 80165ea:	230a      	movgt	r3, #10
 80165ec:	2305      	movle	r3, #5
 80165ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80165f2:	bfb4      	ite	lt
 80165f4:	eef0 7a45 	vmovlt.f32	s15, s10
 80165f8:	eef0 7a65 	vmovge.f32	s15, s11
 80165fc:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8016600:	bf88      	it	hi
 8016602:	eef0 5a45 	vmovhi.f32	s11, s10
 8016606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801660a:	eeb4 6ae5 	vcmpe.f32	s12, s11
 801660e:	bfa8      	it	ge
 8016610:	eef0 7a46 	vmovge.f32	s15, s12
 8016614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016618:	bf88      	it	hi
 801661a:	eeb0 6a65 	vmovhi.f32	s12, s11
 801661e:	eef4 6ae7 	vcmpe.f32	s13, s15
 8016622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016626:	eef4 6ac6 	vcmpe.f32	s13, s12
 801662a:	bfa8      	it	ge
 801662c:	eef0 7a66 	vmovge.f32	s15, s13
 8016630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016634:	bf88      	it	hi
 8016636:	eef0 6a46 	vmovhi.f32	s13, s12
 801663a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801663e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016642:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8016646:	bfa8      	it	ge
 8016648:	eef0 7a47 	vmovge.f32	s15, s14
 801664c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016650:	bf88      	it	hi
 8016652:	eeb0 7a66 	vmovhi.f32	s14, s13
 8016656:	2b05      	cmp	r3, #5
 8016658:	d05b      	beq.n	8016712 <m_kalman_3gyro.isra.6.constprop.36+0x2c62>
 801665a:	f20a 512c 	addw	r1, sl, #1324	; 0x52c
 801665e:	edd1 6a00 	vldr	s13, [r1]
 8016662:	f50a 61aa 	add.w	r1, sl, #1360	; 0x550
 8016666:	eef4 6ae7 	vcmpe.f32	s13, s15
 801666a:	ed91 6a00 	vldr	s12, [r1]
 801666e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016672:	eef4 6ac7 	vcmpe.f32	s13, s14
 8016676:	bfa8      	it	ge
 8016678:	eef0 7a66 	vmovge.f32	s15, s13
 801667c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016680:	bf98      	it	ls
 8016682:	eeb0 7a66 	vmovls.f32	s14, s13
 8016686:	eeb4 6ae7 	vcmpe.f32	s12, s15
 801668a:	f20a 5174 	addw	r1, sl, #1396	; 0x574
 801668e:	edd1 6a00 	vldr	s13, [r1]
 8016692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016696:	eeb4 6ac7 	vcmpe.f32	s12, s14
 801669a:	bfa8      	it	ge
 801669c:	eef0 7a46 	vmovge.f32	s15, s12
 80166a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166a4:	bf88      	it	hi
 80166a6:	eeb0 6a47 	vmovhi.f32	s12, s14
 80166aa:	eef4 6ae7 	vcmpe.f32	s13, s15
 80166ae:	f50a 61b3 	add.w	r1, sl, #1432	; 0x598
 80166b2:	ed91 7a00 	vldr	s14, [r1]
 80166b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166ba:	eef4 6ac6 	vcmpe.f32	s13, s12
 80166be:	bfa8      	it	ge
 80166c0:	eef0 7a66 	vmovge.f32	s15, s13
 80166c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166c8:	bf88      	it	hi
 80166ca:	eef0 6a46 	vmovhi.f32	s13, s12
 80166ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80166d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166d6:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80166da:	bfa8      	it	ge
 80166dc:	eef0 7a47 	vmovge.f32	s15, s14
 80166e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166e4:	bf88      	it	hi
 80166e6:	eeb0 7a66 	vmovhi.f32	s14, s13
 80166ea:	2b0a      	cmp	r3, #10
 80166ec:	d111      	bne.n	8016712 <m_kalman_3gyro.isra.6.constprop.36+0x2c62>
 80166ee:	f20a 51bc 	addw	r1, sl, #1468	; 0x5bc
 80166f2:	edd1 6a00 	vldr	s13, [r1]
 80166f6:	eef4 7ae6 	vcmpe.f32	s15, s13
 80166fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166fe:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8016702:	bfb8      	it	lt
 8016704:	eef0 7a66 	vmovlt.f32	s15, s13
 8016708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801670c:	bf88      	it	hi
 801670e:	eeb0 7a66 	vmovhi.f32	s14, s13
 8016712:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016716:	ed9f 7a09 	vldr	s14, [pc, #36]	; 801673c <m_kalman_3gyro.isra.6.constprop.36+0x2c8c>
 801671a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801671e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016722:	f73e ad9d 	bgt.w	8015260 <m_kalman_3gyro.isra.6.constprop.36+0x17b0>
 8016726:	e00b      	b.n	8016740 <m_kalman_3gyro.isra.6.constprop.36+0x2c90>
 8016728:	20001bf4 	.word	0x20001bf4
 801672c:	00000000 	.word	0x00000000
 8016730:	3d088889 	.word	0x3d088889
 8016734:	3e4ccccd 	.word	0x3e4ccccd
 8016738:	3f99999a 	.word	0x3f99999a
 801673c:	3be56042 	.word	0x3be56042
 8016740:	9921      	ldr	r1, [sp, #132]	; 0x84
 8016742:	ed91 5a00 	vldr	s10, [r1]
 8016746:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8016748:	edd1 5a00 	vldr	s11, [r1]
 801674c:	9930      	ldr	r1, [sp, #192]	; 0xc0
 801674e:	edd1 6a00 	vldr	s13, [r1]
 8016752:	9933      	ldr	r1, [sp, #204]	; 0xcc
 8016754:	eef4 5ac5 	vcmpe.f32	s11, s10
 8016758:	ed91 7a00 	vldr	s14, [r1]
 801675c:	f20a 41c4 	addw	r1, sl, #1220	; 0x4c4
 8016760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016764:	ed91 6a00 	vldr	s12, [r1]
 8016768:	bfb4      	ite	lt
 801676a:	eef0 7a45 	vmovlt.f32	s15, s10
 801676e:	eef0 7a65 	vmovge.f32	s15, s11
 8016772:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8016776:	bf88      	it	hi
 8016778:	eef0 5a45 	vmovhi.f32	s11, s10
 801677c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016780:	eeb4 6ae5 	vcmpe.f32	s12, s11
 8016784:	bfa8      	it	ge
 8016786:	eef0 7a46 	vmovge.f32	s15, s12
 801678a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801678e:	bf88      	it	hi
 8016790:	eeb0 6a65 	vmovhi.f32	s12, s11
 8016794:	eef4 6ae7 	vcmpe.f32	s13, s15
 8016798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801679c:	eef4 6ac6 	vcmpe.f32	s13, s12
 80167a0:	bfa8      	it	ge
 80167a2:	eef0 7a66 	vmovge.f32	s15, s13
 80167a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80167aa:	bf88      	it	hi
 80167ac:	eef0 6a46 	vmovhi.f32	s13, s12
 80167b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80167b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80167b8:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80167bc:	bfa8      	it	ge
 80167be:	eef0 7a47 	vmovge.f32	s15, s14
 80167c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80167c6:	bf88      	it	hi
 80167c8:	eeb0 7a66 	vmovhi.f32	s14, s13
 80167cc:	2b05      	cmp	r3, #5
 80167ce:	d05b      	beq.n	8016888 <m_kalman_3gyro.isra.6.constprop.36+0x2dd8>
 80167d0:	f50a 61a6 	add.w	r1, sl, #1328	; 0x530
 80167d4:	edd1 6a00 	vldr	s13, [r1]
 80167d8:	f20a 5154 	addw	r1, sl, #1364	; 0x554
 80167dc:	eef4 6ae7 	vcmpe.f32	s13, s15
 80167e0:	ed91 6a00 	vldr	s12, [r1]
 80167e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80167e8:	eef4 6ac7 	vcmpe.f32	s13, s14
 80167ec:	bfa8      	it	ge
 80167ee:	eef0 7a66 	vmovge.f32	s15, s13
 80167f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80167f6:	bf98      	it	ls
 80167f8:	eeb0 7a66 	vmovls.f32	s14, s13
 80167fc:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8016800:	f50a 61af 	add.w	r1, sl, #1400	; 0x578
 8016804:	edd1 6a00 	vldr	s13, [r1]
 8016808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801680c:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8016810:	bfa8      	it	ge
 8016812:	eef0 7a46 	vmovge.f32	s15, s12
 8016816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801681a:	bf88      	it	hi
 801681c:	eeb0 6a47 	vmovhi.f32	s12, s14
 8016820:	eef4 6ae7 	vcmpe.f32	s13, s15
 8016824:	f20a 519c 	addw	r1, sl, #1436	; 0x59c
 8016828:	ed91 7a00 	vldr	s14, [r1]
 801682c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016830:	eef4 6ac6 	vcmpe.f32	s13, s12
 8016834:	bfa8      	it	ge
 8016836:	eef0 7a66 	vmovge.f32	s15, s13
 801683a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801683e:	bf88      	it	hi
 8016840:	eef0 6a46 	vmovhi.f32	s13, s12
 8016844:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801684c:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8016850:	bfa8      	it	ge
 8016852:	eef0 7a47 	vmovge.f32	s15, s14
 8016856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801685a:	bf88      	it	hi
 801685c:	eeb0 7a66 	vmovhi.f32	s14, s13
 8016860:	2b0a      	cmp	r3, #10
 8016862:	d111      	bne.n	8016888 <m_kalman_3gyro.isra.6.constprop.36+0x2dd8>
 8016864:	f50a 61b8 	add.w	r1, sl, #1472	; 0x5c0
 8016868:	edd1 6a00 	vldr	s13, [r1]
 801686c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8016870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016874:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8016878:	bfb8      	it	lt
 801687a:	eef0 7a66 	vmovlt.f32	s15, s13
 801687e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016882:	bf88      	it	hi
 8016884:	eeb0 7a66 	vmovhi.f32	s14, s13
 8016888:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801688c:	ed1f 7a55 	vldr	s14, [pc, #-340]	; 801673c <m_kalman_3gyro.isra.6.constprop.36+0x2c8c>
 8016890:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016898:	f73e ace2 	bgt.w	8015260 <m_kalman_3gyro.isra.6.constprop.36+0x17b0>
 801689c:	9922      	ldr	r1, [sp, #136]	; 0x88
 801689e:	edd1 6a00 	vldr	s13, [r1]
 80168a2:	992e      	ldr	r1, [sp, #184]	; 0xb8
 80168a4:	ed91 5a00 	vldr	s10, [r1]
 80168a8:	9931      	ldr	r1, [sp, #196]	; 0xc4
 80168aa:	edd1 5a00 	vldr	s11, [r1]
 80168ae:	9934      	ldr	r1, [sp, #208]	; 0xd0
 80168b0:	eef4 6ac5 	vcmpe.f32	s13, s10
 80168b4:	ed91 6a00 	vldr	s12, [r1]
 80168b8:	f50a 6199 	add.w	r1, sl, #1224	; 0x4c8
 80168bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168c0:	ed91 7a00 	vldr	s14, [r1]
 80168c4:	bfb4      	ite	lt
 80168c6:	eef0 7a45 	vmovlt.f32	s15, s10
 80168ca:	eef0 7a66 	vmovge.f32	s15, s13
 80168ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80168d2:	bf88      	it	hi
 80168d4:	eef0 6a45 	vmovhi.f32	s13, s10
 80168d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168dc:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80168e0:	bfa8      	it	ge
 80168e2:	eef0 7a47 	vmovge.f32	s15, s14
 80168e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168ea:	bf88      	it	hi
 80168ec:	eeb0 7a66 	vmovhi.f32	s14, s13
 80168f0:	eef4 7ae5 	vcmpe.f32	s15, s11
 80168f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168f8:	eeb4 7ae5 	vcmpe.f32	s14, s11
 80168fc:	bfb8      	it	lt
 80168fe:	eef0 7a65 	vmovlt.f32	s15, s11
 8016902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016906:	bf88      	it	hi
 8016908:	eeb0 7a65 	vmovhi.f32	s14, s11
 801690c:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8016910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016914:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8016918:	bfa8      	it	ge
 801691a:	eef0 7a46 	vmovge.f32	s15, s12
 801691e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016922:	bf88      	it	hi
 8016924:	eeb0 7a46 	vmovhi.f32	s14, s12
 8016928:	2b05      	cmp	r3, #5
 801692a:	d05b      	beq.n	80169e4 <m_kalman_3gyro.isra.6.constprop.36+0x2f34>
 801692c:	f20a 5134 	addw	r1, sl, #1332	; 0x534
 8016930:	ed91 6a00 	vldr	s12, [r1]
 8016934:	f50a 61ab 	add.w	r1, sl, #1368	; 0x558
 8016938:	eeb4 6ae7 	vcmpe.f32	s12, s15
 801693c:	edd1 6a00 	vldr	s13, [r1]
 8016940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016944:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8016948:	bfa8      	it	ge
 801694a:	eef0 7a46 	vmovge.f32	s15, s12
 801694e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016952:	bf88      	it	hi
 8016954:	eeb0 6a47 	vmovhi.f32	s12, s14
 8016958:	eef4 6ae7 	vcmpe.f32	s13, s15
 801695c:	f20a 517c 	addw	r1, sl, #1404	; 0x57c
 8016960:	ed91 7a00 	vldr	s14, [r1]
 8016964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016968:	eef4 6ac6 	vcmpe.f32	s13, s12
 801696c:	bfa8      	it	ge
 801696e:	eef0 7a66 	vmovge.f32	s15, s13
 8016972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016976:	bf88      	it	hi
 8016978:	eef0 6a46 	vmovhi.f32	s13, s12
 801697c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016980:	f50a 61b4 	add.w	r1, sl, #1440	; 0x5a0
 8016984:	ed91 6a00 	vldr	s12, [r1]
 8016988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801698c:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8016990:	bfa8      	it	ge
 8016992:	eef0 7a47 	vmovge.f32	s15, s14
 8016996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801699a:	bf88      	it	hi
 801699c:	eeb0 7a66 	vmovhi.f32	s14, s13
 80169a0:	eef4 7ac6 	vcmpe.f32	s15, s12
 80169a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80169a8:	eeb4 7ac6 	vcmpe.f32	s14, s12
 80169ac:	bfb8      	it	lt
 80169ae:	eef0 7a46 	vmovlt.f32	s15, s12
 80169b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80169b6:	bf88      	it	hi
 80169b8:	eeb0 7a46 	vmovhi.f32	s14, s12
 80169bc:	2b0a      	cmp	r3, #10
 80169be:	d111      	bne.n	80169e4 <m_kalman_3gyro.isra.6.constprop.36+0x2f34>
 80169c0:	f20a 53c4 	addw	r3, sl, #1476	; 0x5c4
 80169c4:	edd3 6a00 	vldr	s13, [r3]
 80169c8:	eef4 7ae6 	vcmpe.f32	s15, s13
 80169cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80169d0:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80169d4:	bfb8      	it	lt
 80169d6:	eef0 7a66 	vmovlt.f32	s15, s13
 80169da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80169de:	bf88      	it	hi
 80169e0:	eeb0 7a66 	vmovhi.f32	s14, s13
 80169e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80169e8:	ed1f 7aac 	vldr	s14, [pc, #-688]	; 801673c <m_kalman_3gyro.isra.6.constprop.36+0x2c8c>
 80169ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80169f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80169f4:	f73e ac34 	bgt.w	8015260 <m_kalman_3gyro.isra.6.constprop.36+0x17b0>
 80169f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80169fa:	2b00      	cmp	r3, #0
 80169fc:	f43e ac34 	beq.w	8015268 <m_kalman_3gyro.isra.6.constprop.36+0x17b8>
 8016a00:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8016a04:	2b01      	cmp	r3, #1
 8016a06:	f040 8268 	bne.w	8016eda <m_kalman_3gyro.isra.6.constprop.36+0x342a>
 8016a0a:	2a0a      	cmp	r2, #10
 8016a0c:	f000 85dc 	beq.w	80175c8 <m_kalman_3gyro.isra.6.constprop.36+0x3b18>
 8016a10:	2300      	movs	r3, #0
 8016a12:	2a00      	cmp	r2, #0
 8016a14:	f8aa 3202 	strh.w	r3, [sl, #514]	; 0x202
 8016a18:	f88a 3204 	strb.w	r3, [sl, #516]	; 0x204
 8016a1c:	f102 0301 	add.w	r3, r2, #1
 8016a20:	dd03      	ble.n	8016a2a <m_kalman_3gyro.isra.6.constprop.36+0x2f7a>
 8016a22:	2b00      	cmp	r3, #0
 8016a24:	bfd8      	it	le
 8016a26:	f06f 4300 	mvnle.w	r3, #2147483648	; 0x80000000
 8016a2a:	2200      	movs	r2, #0
 8016a2c:	f8ca 3450 	str.w	r3, [sl, #1104]	; 0x450
 8016a30:	f8ca 245c 	str.w	r2, [sl, #1116]	; 0x45c
 8016a34:	ac86      	add	r4, sp, #536	; 0x218
 8016a36:	f7fe bc32 	b.w	801529e <m_kalman_3gyro.isra.6.constprop.36+0x17ee>
 8016a3a:	eef5 8a40 	vcmp.f32	s17, #0.0
 8016a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a42:	eef0 aa48 	vmov.f32	s21, s16
 8016a46:	ed85 8a07 	vstr	s16, [r5, #28]
 8016a4a:	f47f ab41 	bne.w	80160d0 <m_kalman_3gyro.isra.6.constprop.36+0x2620>
 8016a4e:	eef0 9a48 	vmov.f32	s19, s16
 8016a52:	eef0 7a48 	vmov.f32	s15, s16
 8016a56:	f7ff baa7 	b.w	8015fa8 <m_kalman_3gyro.isra.6.constprop.36+0x24f8>
 8016a5a:	eeb0 ca48 	vmov.f32	s24, s16
 8016a5e:	ee27 9a89 	vmul.f32	s18, s15, s18
 8016a62:	eef5 ba40 	vcmp.f32	s23, #0.0
 8016a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a6a:	ed85 9a01 	vstr	s18, [r5, #4]
 8016a6e:	f47f aa5d 	bne.w	8015f2c <m_kalman_3gyro.isra.6.constprop.36+0x247c>
 8016a72:	f7ff baeb 	b.w	801604c <m_kalman_3gyro.isra.6.constprop.36+0x259c>
 8016a76:	eeb0 ba48 	vmov.f32	s22, s16
 8016a7a:	f7ff bb09 	b.w	8016090 <m_kalman_3gyro.isra.6.constprop.36+0x25e0>
 8016a7e:	eea9 aaa9 	vfma.f32	s20, s19, s19
 8016a82:	eeb1 9a49 	vneg.f32	s18, s18
 8016a86:	ee1a 0a10 	vmov	r0, s20
 8016a8a:	f7e9 fd65 	bl	8000558 <__aeabi_f2d>
 8016a8e:	f004 fbe9 	bl	801b264 <sqrt>
 8016a92:	f7ea f891 	bl	8000bb8 <__aeabi_d2f>
 8016a96:	ee07 0a90 	vmov	s15, r0
 8016a9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016a9e:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8016aa2:	f8dd 36a8 	ldr.w	r3, [sp, #1704]	; 0x6a8
 8016aa6:	789c      	ldrb	r4, [r3, #2]
 8016aa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016aaa:	6818      	ldr	r0, [r3, #0]
 8016aac:	685a      	ldr	r2, [r3, #4]
 8016aae:	6899      	ldr	r1, [r3, #8]
 8016ab0:	904b      	str	r0, [sp, #300]	; 0x12c
 8016ab2:	461d      	mov	r5, r3
 8016ab4:	a853      	add	r0, sp, #332	; 0x14c
 8016ab6:	68db      	ldr	r3, [r3, #12]
 8016ab8:	924c      	str	r2, [sp, #304]	; 0x130
 8016aba:	eeb1 0a48 	vneg.f32	s0, s16
 8016abe:	eef1 8a68 	vneg.f32	s17, s17
 8016ac2:	ee29 ba27 	vmul.f32	s22, s18, s15
 8016ac6:	ee68 aaa7 	vmul.f32	s21, s17, s15
 8016aca:	ee20 aa27 	vmul.f32	s20, s0, s15
 8016ace:	ee29 8aa7 	vmul.f32	s16, s19, s15
 8016ad2:	2c00      	cmp	r4, #0
 8016ad4:	d051      	beq.n	8016b7a <m_kalman_3gyro.isra.6.constprop.36+0x30ca>
 8016ad6:	462a      	mov	r2, r5
 8016ad8:	914d      	str	r1, [sp, #308]	; 0x134
 8016ada:	a94b      	add	r1, sp, #300	; 0x12c
 8016adc:	934e      	str	r3, [sp, #312]	; 0x138
 8016ade:	ed8d 9a53 	vstr	s18, [sp, #332]	; 0x14c
 8016ae2:	edcd 8a54 	vstr	s17, [sp, #336]	; 0x150
 8016ae6:	ed8d 0a55 	vstr	s0, [sp, #340]	; 0x154
 8016aea:	edcd 9a56 	vstr	s19, [sp, #344]	; 0x158
 8016aee:	ac4f      	add	r4, sp, #316	; 0x13c
 8016af0:	f7f8 fcbc 	bl	800f46c <m_qmult_eml>
 8016af4:	ed8d ba4f 	vstr	s22, [sp, #316]	; 0x13c
 8016af8:	edcd aa50 	vstr	s21, [sp, #320]	; 0x140
 8016afc:	ed8d aa51 	vstr	s20, [sp, #324]	; 0x144
 8016b00:	ed8d 8a52 	vstr	s16, [sp, #328]	; 0x148
 8016b04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016b06:	f8dd 46c8 	ldr.w	r4, [sp, #1736]	; 0x6c8
 8016b0a:	ed8d 9a53 	vstr	s18, [sp, #332]	; 0x14c
 8016b0e:	edcd 8a54 	vstr	s17, [sp, #336]	; 0x150
 8016b12:	ed8d 0a55 	vstr	s0, [sp, #340]	; 0x154
 8016b16:	edcd 9a56 	vstr	s19, [sp, #344]	; 0x158
 8016b1a:	ed8d 9a4b 	vstr	s18, [sp, #300]	; 0x12c
 8016b1e:	edcd 8a4c 	vstr	s17, [sp, #304]	; 0x130
 8016b22:	ed8d 0a4d 	vstr	s0, [sp, #308]	; 0x134
 8016b26:	edcd 9a4e 	vstr	s19, [sp, #312]	; 0x138
 8016b2a:	6020      	str	r0, [r4, #0]
 8016b2c:	6061      	str	r1, [r4, #4]
 8016b2e:	60a2      	str	r2, [r4, #8]
 8016b30:	60e3      	str	r3, [r4, #12]
 8016b32:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8016b34:	f7ff bb3a 	b.w	80161ac <m_kalman_3gyro.isra.6.constprop.36+0x26fc>
 8016b38:	f89a 28ae 	ldrb.w	r2, [sl, #2222]	; 0x8ae
 8016b3c:	2a00      	cmp	r2, #0
 8016b3e:	f000 8357 	beq.w	80171f0 <m_kalman_3gyro.isra.6.constprop.36+0x3740>
 8016b42:	2300      	movs	r3, #0
 8016b44:	3a01      	subs	r2, #1
 8016b46:	f88a 28ae 	strb.w	r2, [sl, #2222]	; 0x8ae
 8016b4a:	f8aa 31fc 	strh.w	r3, [sl, #508]	; 0x1fc
 8016b4e:	f88a 31fe 	strb.w	r3, [sl, #510]	; 0x1fe
 8016b52:	f88a 3205 	strb.w	r3, [sl, #517]	; 0x205
 8016b56:	f88a 3207 	strb.w	r3, [sl, #519]	; 0x207
 8016b5a:	f7fe be07 	b.w	801576c <m_kalman_3gyro.isra.6.constprop.36+0x1cbc>
 8016b5e:	ee77 7aca 	vsub.f32	s15, s15, s20
 8016b62:	ee17 0a90 	vmov	r0, s15
 8016b66:	f7e9 fcf7 	bl	8000558 <__aeabi_f2d>
 8016b6a:	f004 fb7b 	bl	801b264 <sqrt>
 8016b6e:	f7ea f823 	bl	8000bb8 <__aeabi_d2f>
 8016b72:	ee09 0a90 	vmov	s19, r0
 8016b76:	f7ff bb01 	b.w	801617c <m_kalman_3gyro.isra.6.constprop.36+0x26cc>
 8016b7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016b7c:	e7ac      	b.n	8016ad8 <m_kalman_3gyro.isra.6.constprop.36+0x3028>
 8016b7e:	2400      	movs	r4, #0
 8016b80:	4dcd      	ldr	r5, [pc, #820]	; (8016eb8 <m_kalman_3gyro.isra.6.constprop.36+0x3408>)
 8016b82:	f7fe b957 	b.w	8014e34 <m_kalman_3gyro.isra.6.constprop.36+0x1384>
 8016b86:	eddd 9a64 	vldr	s19, [sp, #400]	; 0x190
 8016b8a:	f7fe bae7 	b.w	801515c <m_kalman_3gyro.isra.6.constprop.36+0x16ac>
 8016b8e:	2301      	movs	r3, #1
 8016b90:	f88a 3204 	strb.w	r3, [sl, #516]	; 0x204
 8016b94:	f240 1201 	movw	r2, #257	; 0x101
 8016b98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016b9a:	f8aa 2202 	strh.w	r2, [sl, #514]	; 0x202
 8016b9e:	edd3 7a00 	vldr	s15, [r3]
 8016ba2:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8016ba6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016baa:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8016bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016bb2:	f200 844a 	bhi.w	801744a <m_kalman_3gyro.isra.6.constprop.36+0x399a>
 8016bb6:	f8dd 2698 	ldr.w	r2, [sp, #1688]	; 0x698
 8016bba:	f89a 38a4 	ldrb.w	r3, [sl, #2212]	; 0x8a4
 8016bbe:	edd2 6a06 	vldr	s13, [r2, #24]
 8016bc2:	ed92 7a07 	vldr	s14, [r2, #28]
 8016bc6:	edd2 7a08 	vldr	s15, [r2, #32]
 8016bca:	2b00      	cmp	r3, #0
 8016bcc:	f000 86e1 	beq.w	8017992 <m_kalman_3gyro.isra.6.constprop.36+0x3ee2>
 8016bd0:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8016bd4:	ee66 6a86 	vmul.f32	s13, s13, s12
 8016bd8:	ee27 7a06 	vmul.f32	s14, s14, s12
 8016bdc:	ee67 7a86 	vmul.f32	s15, s15, s12
 8016be0:	edc2 6a06 	vstr	s13, [r2, #24]
 8016be4:	ed82 7a07 	vstr	s14, [r2, #28]
 8016be8:	edc2 7a08 	vstr	s15, [r2, #32]
 8016bec:	f8ba 38a6 	ldrh.w	r3, [sl, #2214]	; 0x8a6
 8016bf0:	3301      	adds	r3, #1
 8016bf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016bf6:	f000 859e 	beq.w	8017736 <m_kalman_3gyro.isra.6.constprop.36+0x3c86>
 8016bfa:	2b31      	cmp	r3, #49	; 0x31
 8016bfc:	f8aa 38a6 	strh.w	r3, [sl, #2214]	; 0x8a6
 8016c00:	d918      	bls.n	8016c34 <m_kalman_3gyro.isra.6.constprop.36+0x3184>
 8016c02:	f89a 38a4 	ldrb.w	r3, [sl, #2212]	; 0x8a4
 8016c06:	b9ab      	cbnz	r3, 8016c34 <m_kalman_3gyro.isra.6.constprop.36+0x3184>
 8016c08:	f8dd 3698 	ldr.w	r3, [sp, #1688]	; 0x698
 8016c0c:	ed9f 6aab 	vldr	s12, [pc, #684]	; 8016ebc <m_kalman_3gyro.isra.6.constprop.36+0x340c>
 8016c10:	edd3 6a06 	vldr	s13, [r3, #24]
 8016c14:	ed93 7a07 	vldr	s14, [r3, #28]
 8016c18:	edd3 7a08 	vldr	s15, [r3, #32]
 8016c1c:	ee66 6a86 	vmul.f32	s13, s13, s12
 8016c20:	ee27 7a06 	vmul.f32	s14, s14, s12
 8016c24:	ee67 7a86 	vmul.f32	s15, s15, s12
 8016c28:	edc3 6a06 	vstr	s13, [r3, #24]
 8016c2c:	ed83 7a07 	vstr	s14, [r3, #28]
 8016c30:	edc3 7a08 	vstr	s15, [r3, #32]
 8016c34:	f8da 38a4 	ldr.w	r3, [sl, #2212]	; 0x8a4
 8016c38:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8016c3c:	f5b3 0f8c 	cmp.w	r3, #4587520	; 0x460000
 8016c40:	f000 857f 	beq.w	8017742 <m_kalman_3gyro.isra.6.constprop.36+0x3c92>
 8016c44:	f5b3 0fc8 	cmp.w	r3, #6553600	; 0x640000
 8016c48:	f040 8418 	bne.w	801747c <m_kalman_3gyro.isra.6.constprop.36+0x39cc>
 8016c4c:	2301      	movs	r3, #1
 8016c4e:	f88a 38a4 	strb.w	r3, [sl, #2212]	; 0x8a4
 8016c52:	f60a 0398 	addw	r3, sl, #2200	; 0x898
 8016c56:	f8da 00a0 	ldr.w	r0, [sl, #160]	; 0xa0
 8016c5a:	f8da 10a4 	ldr.w	r1, [sl, #164]	; 0xa4
 8016c5e:	f8da 20a8 	ldr.w	r2, [sl, #168]	; 0xa8
 8016c62:	6018      	str	r0, [r3, #0]
 8016c64:	f60a 039c 	addw	r3, sl, #2204	; 0x89c
 8016c68:	6019      	str	r1, [r3, #0]
 8016c6a:	f50a 630a 	add.w	r3, sl, #2208	; 0x8a0
 8016c6e:	601a      	str	r2, [r3, #0]
 8016c70:	eddd 7a50 	vldr	s15, [sp, #320]	; 0x140
 8016c74:	eddd 6a4f 	vldr	s13, [sp, #316]	; 0x13c
 8016c78:	ed9d 7a51 	vldr	s14, [sp, #324]	; 0x144
 8016c7c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8016c80:	ee76 6aa6 	vadd.f32	s13, s13, s13
 8016c84:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8016c88:	ee37 7a07 	vadd.f32	s14, s14, s14
 8016c8c:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8016c90:	eee7 7a07 	vfma.f32	s15, s14, s14
 8016c94:	ee17 0a90 	vmov	r0, s15
 8016c98:	f7e9 fc5e 	bl	8000558 <__aeabi_f2d>
 8016c9c:	f004 fae2 	bl	801b264 <sqrt>
 8016ca0:	f7e9 ff8a 	bl	8000bb8 <__aeabi_d2f>
 8016ca4:	f7e9 fc58 	bl	8000558 <__aeabi_f2d>
 8016ca8:	a381      	add	r3, pc, #516	; (adr r3, 8016eb0 <m_kalman_3gyro.isra.6.constprop.36+0x3400>)
 8016caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016cae:	f7e9 ff1d 	bl	8000aec <__aeabi_dcmplt>
 8016cb2:	2800      	cmp	r0, #0
 8016cb4:	f000 854e 	beq.w	8017754 <m_kalman_3gyro.isra.6.constprop.36+0x3ca4>
 8016cb8:	f50d 61d6 	add.w	r1, sp, #1712	; 0x6b0
 8016cbc:	2200      	movs	r2, #0
 8016cbe:	2300      	movs	r3, #0
 8016cc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016cc4:	f7e9 ff08 	bl	8000ad8 <__aeabi_dcmpeq>
 8016cc8:	2800      	cmp	r0, #0
 8016cca:	f040 843d 	bne.w	8017548 <m_kalman_3gyro.isra.6.constprop.36+0x3a98>
 8016cce:	f8aa 0202 	strh.w	r0, [sl, #514]	; 0x202
 8016cd2:	f88a 0204 	strb.w	r0, [sl, #516]	; 0x204
 8016cd6:	2301      	movs	r3, #1
 8016cd8:	2200      	movs	r2, #0
 8016cda:	f8ca 3450 	str.w	r3, [sl, #1104]	; 0x450
 8016cde:	f8ca 245c 	str.w	r2, [sl, #1116]	; 0x45c
 8016ce2:	f7fe badc 	b.w	801529e <m_kalman_3gyro.isra.6.constprop.36+0x17ee>
 8016ce6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016cea:	eef4 7ae6 	vcmpe.f32	s15, s13
 8016cee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016cf2:	f77e ad06 	ble.w	8015702 <m_kalman_3gyro.isra.6.constprop.36+0x1c52>
 8016cf6:	ed93 6a04 	vldr	s12, [r3, #16]
 8016cfa:	edd3 6a05 	vldr	s13, [r3, #20]
 8016cfe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016d02:	ee26 6a27 	vmul.f32	s12, s12, s15
 8016d06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8016d0a:	ed83 7a03 	vstr	s14, [r3, #12]
 8016d0e:	ed83 6a04 	vstr	s12, [r3, #16]
 8016d12:	edc3 7a05 	vstr	s15, [r3, #20]
 8016d16:	f7fe bcf4 	b.w	8015702 <m_kalman_3gyro.isra.6.constprop.36+0x1c52>
 8016d1a:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8016d1e:	f7fe bcdd 	b.w	80156dc <m_kalman_3gyro.isra.6.constprop.36+0x1c2c>
 8016d22:	edd3 7a03 	vldr	s15, [r3, #12]
 8016d26:	eef5 7a40 	vcmp.f32	s15, #0.0
 8016d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d2e:	f47e a8ce 	bne.w	8014ece <m_kalman_3gyro.isra.6.constprop.36+0x141e>
 8016d32:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
 8016d36:	9801      	ldr	r0, [sp, #4]
 8016d38:	f8ca 4044 	str.w	r4, [sl, #68]	; 0x44
 8016d3c:	f8ca 4048 	str.w	r4, [sl, #72]	; 0x48
 8016d40:	f8ca 404c 	str.w	r4, [sl, #76]	; 0x4c
 8016d44:	f8ca 4054 	str.w	r4, [sl, #84]	; 0x54
 8016d48:	f8ca 4058 	str.w	r4, [sl, #88]	; 0x58
 8016d4c:	f8ca 405c 	str.w	r4, [sl, #92]	; 0x5c
 8016d50:	f8ca 5040 	str.w	r5, [sl, #64]	; 0x40
 8016d54:	f8ca 5050 	str.w	r5, [sl, #80]	; 0x50
 8016d58:	f8ca 5060 	str.w	r5, [sl, #96]	; 0x60
 8016d5c:	f7f8 fd46 	bl	800f7ec <m_dcm2q_eml>
 8016d60:	f8dd 36c0 	ldr.w	r3, [sp, #1728]	; 0x6c0
 8016d64:	f8ca 4094 	str.w	r4, [sl, #148]	; 0x94
 8016d68:	f8ca 4098 	str.w	r4, [sl, #152]	; 0x98
 8016d6c:	f8ca 409c 	str.w	r4, [sl, #156]	; 0x9c
 8016d70:	681a      	ldr	r2, [r3, #0]
 8016d72:	f8ca 20a0 	str.w	r2, [sl, #160]	; 0xa0
 8016d76:	f8dd 26c0 	ldr.w	r2, [sp, #1728]	; 0x6c0
 8016d7a:	4b51      	ldr	r3, [pc, #324]	; (8016ec0 <m_kalman_3gyro.isra.6.constprop.36+0x3410>)
 8016d7c:	6852      	ldr	r2, [r2, #4]
 8016d7e:	f8ca 20a4 	str.w	r2, [sl, #164]	; 0xa4
 8016d82:	f8dd 26c0 	ldr.w	r2, [sp, #1728]	; 0x6c0
 8016d86:	6892      	ldr	r2, [r2, #8]
 8016d88:	f8ca 20a8 	str.w	r2, [sl, #168]	; 0xa8
 8016d8c:	f8ca 30ac 	str.w	r3, [sl, #172]	; 0xac
 8016d90:	f8ca 50b0 	str.w	r5, [sl, #176]	; 0xb0
 8016d94:	f8ca 50b4 	str.w	r5, [sl, #180]	; 0xb4
 8016d98:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8016d9c:	2100      	movs	r1, #0
 8016d9e:	f10a 00b8 	add.w	r0, sl, #184	; 0xb8
 8016da2:	f003 f93c 	bl	801a01e <memset>
 8016da6:	4b47      	ldr	r3, [pc, #284]	; (8016ec4 <m_kalman_3gyro.isra.6.constprop.36+0x3414>)
 8016da8:	f8ca 30b8 	str.w	r3, [sl, #184]	; 0xb8
 8016dac:	f8ca 30e0 	str.w	r3, [sl, #224]	; 0xe0
 8016db0:	f8ca 3108 	str.w	r3, [sl, #264]	; 0x108
 8016db4:	f8ca 3130 	str.w	r3, [sl, #304]	; 0x130
 8016db8:	f8ca 3158 	str.w	r3, [sl, #344]	; 0x158
 8016dbc:	f8ca 3180 	str.w	r3, [sl, #384]	; 0x180
 8016dc0:	f8ca 31a8 	str.w	r3, [sl, #424]	; 0x1a8
 8016dc4:	f8ca 31d0 	str.w	r3, [sl, #464]	; 0x1d0
 8016dc8:	f8ca 31f8 	str.w	r3, [sl, #504]	; 0x1f8
 8016dcc:	f7fe b87f 	b.w	8014ece <m_kalman_3gyro.isra.6.constprop.36+0x141e>
 8016dd0:	eddd 7a23 	vldr	s15, [sp, #140]	; 0x8c
 8016dd4:	ed8a ba12 	vstr	s22, [sl, #72]	; 0x48
 8016dd8:	edca 7a10 	vstr	s15, [sl, #64]	; 0x40
 8016ddc:	eddd 7a24 	vldr	s15, [sp, #144]	; 0x90
 8016de0:	edca aa15 	vstr	s21, [sl, #84]	; 0x54
 8016de4:	edca 7a13 	vstr	s15, [sl, #76]	; 0x4c
 8016de8:	eddd 7a25 	vldr	s15, [sp, #148]	; 0x94
 8016dec:	ed8a aa18 	vstr	s20, [sl, #96]	; 0x60
 8016df0:	edca 7a16 	vstr	s15, [sl, #88]	; 0x58
 8016df4:	ed8a ca11 	vstr	s24, [sl, #68]	; 0x44
 8016df8:	edca ba14 	vstr	s23, [sl, #80]	; 0x50
 8016dfc:	edca 9a17 	vstr	s19, [sl, #92]	; 0x5c
 8016e00:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016e02:	f7f8 fcf3 	bl	800f7ec <m_dcm2q_eml>
 8016e06:	eddf 7a30 	vldr	s15, [pc, #192]	; 8016ec8 <m_kalman_3gyro.isra.6.constprop.36+0x3418>
 8016e0a:	ed8a da2b 	vstr	s26, [sl, #172]	; 0xac
 8016e0e:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8016e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e16:	d507      	bpl.n	8016e28 <m_kalman_3gyro.isra.6.constprop.36+0x3378>
 8016e18:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8016ecc <m_kalman_3gyro.isra.6.constprop.36+0x341c>
 8016e1c:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8016e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e24:	f300 85ab 	bgt.w	801797e <m_kalman_3gyro.isra.6.constprop.36+0x3ece>
 8016e28:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8016e2c:	f8ca 30b0 	str.w	r3, [sl, #176]	; 0xb0
 8016e30:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8016e34:	2100      	movs	r1, #0
 8016e36:	f10a 00b8 	add.w	r0, sl, #184	; 0xb8
 8016e3a:	f003 f8f0 	bl	801a01e <memset>
 8016e3e:	4b21      	ldr	r3, [pc, #132]	; (8016ec4 <m_kalman_3gyro.isra.6.constprop.36+0x3414>)
 8016e40:	f8ca 30b8 	str.w	r3, [sl, #184]	; 0xb8
 8016e44:	f8ca 30e0 	str.w	r3, [sl, #224]	; 0xe0
 8016e48:	f8ca 3108 	str.w	r3, [sl, #264]	; 0x108
 8016e4c:	f8ca 3130 	str.w	r3, [sl, #304]	; 0x130
 8016e50:	f8ca 3158 	str.w	r3, [sl, #344]	; 0x158
 8016e54:	f8ca 3180 	str.w	r3, [sl, #384]	; 0x180
 8016e58:	f8ca 31a8 	str.w	r3, [sl, #424]	; 0x1a8
 8016e5c:	f8ca 31d0 	str.w	r3, [sl, #464]	; 0x1d0
 8016e60:	f8ca 31f8 	str.w	r3, [sl, #504]	; 0x1f8
 8016e64:	f8dd 36dc 	ldr.w	r3, [sp, #1756]	; 0x6dc
 8016e68:	2100      	movs	r1, #0
 8016e6a:	2201      	movs	r2, #1
 8016e6c:	f88a 1031 	strb.w	r1, [sl, #49]	; 0x31
 8016e70:	701a      	strb	r2, [r3, #0]
 8016e72:	f7fe b812 	b.w	8014e9a <m_kalman_3gyro.isra.6.constprop.36+0x13ea>
 8016e76:	eef4 7ac8 	vcmpe.f32	s15, s16
 8016e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e7e:	f300 840f 	bgt.w	80176a0 <m_kalman_3gyro.isra.6.constprop.36+0x3bf0>
 8016e82:	eddd 7acf 	vldr	s15, [sp, #828]	; 0x33c
 8016e86:	f7fd bf60 	b.w	8014d4a <m_kalman_3gyro.isra.6.constprop.36+0x129a>
 8016e8a:	eddd 7ac2 	vldr	s15, [sp, #776]	; 0x308
 8016e8e:	eef4 7ac8 	vcmpe.f32	s15, s16
 8016e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e96:	f300 84d7 	bgt.w	8017848 <m_kalman_3gyro.isra.6.constprop.36+0x3d98>
 8016e9a:	eddd 7acf 	vldr	s15, [sp, #828]	; 0x33c
 8016e9e:	f7fd bc36 	b.w	801470e <m_kalman_3gyro.isra.6.constprop.36+0xc5e>
 8016ea2:	ed9d 7add 	vldr	s14, [sp, #884]	; 0x374
 8016ea6:	f7fd bf61 	b.w	8014d6c <m_kalman_3gyro.isra.6.constprop.36+0x12bc>
 8016eaa:	bf00      	nop
 8016eac:	f3af 8000 	nop.w
 8016eb0:	47ae147b 	.word	0x47ae147b
 8016eb4:	3f747ae1 	.word	0x3f747ae1
 8016eb8:	40140000 	.word	0x40140000
 8016ebc:	3f19999a 	.word	0x3f19999a
 8016ec0:	3f666666 	.word	0x3f666666
 8016ec4:	40a00000 	.word	0x40a00000
 8016ec8:	3f99999a 	.word	0x3f99999a
 8016ecc:	3f4ccccd 	.word	0x3f4ccccd
 8016ed0:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8016ed4:	2b01      	cmp	r3, #1
 8016ed6:	f43f aa1e 	beq.w	8016316 <m_kalman_3gyro.isra.6.constprop.36+0x2866>
 8016eda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016edc:	2b02      	cmp	r3, #2
 8016ede:	f000 8348 	beq.w	8017572 <m_kalman_3gyro.isra.6.constprop.36+0x3ac2>
 8016ee2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016ee4:	2b04      	cmp	r3, #4
 8016ee6:	f47f aa16 	bne.w	8016316 <m_kalman_3gyro.isra.6.constprop.36+0x2866>
 8016eea:	49cf      	ldr	r1, [pc, #828]	; (8017228 <m_kalman_3gyro.isra.6.constprop.36+0x3778>)
 8016eec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016eee:	f891 0838 	ldrb.w	r0, [r1, #2104]	; 0x838
 8016ef2:	edd3 3a00 	vldr	s7, [r3]
 8016ef6:	edd3 0a01 	vldr	s1, [r3, #4]
 8016efa:	ed93 4a02 	vldr	s8, [r3, #8]
 8016efe:	9b08      	ldr	r3, [sp, #32]
 8016f00:	2804      	cmp	r0, #4
 8016f02:	edd3 4a00 	vldr	s9, [r3]
 8016f06:	ed93 5a01 	vldr	s10, [r3, #4]
 8016f0a:	edd3 5a02 	vldr	s11, [r3, #8]
 8016f0e:	f240 847d 	bls.w	801780c <m_kalman_3gyro.isra.6.constprop.36+0x3d5c>
 8016f12:	f601 023c 	addw	r2, r1, #2108	; 0x83c
 8016f16:	edd2 2a07 	vldr	s5, [r2, #28]
 8016f1a:	ed9f aac4 	vldr	s20, [pc, #784]	; 801722c <m_kalman_3gyro.isra.6.constprop.36+0x377c>
 8016f1e:	ed92 3a04 	vldr	s6, [r2, #16]
 8016f22:	ed9f 1ac3 	vldr	s2, [pc, #780]	; 8017230 <m_kalman_3gyro.isra.6.constprop.36+0x3780>
 8016f26:	ed92 7a06 	vldr	s14, [r2, #24]
 8016f2a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8016f2c:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8016f2e:	6193      	str	r3, [r2, #24]
 8016f30:	ee62 7a8a 	vmul.f32	s15, s5, s20
 8016f34:	f601 0378 	addw	r3, r1, #2168	; 0x878
 8016f38:	eee3 7a01 	vfma.f32	s15, s6, s2
 8016f3c:	61d0      	str	r0, [r2, #28]
 8016f3e:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8016f40:	ed92 6a08 	vldr	s12, [r2, #32]
 8016f44:	ed92 2a03 	vldr	s4, [r2, #12]
 8016f48:	edd3 aa03 	vldr	s21, [r3, #12]
 8016f4c:	edd2 ba05 	vldr	s23, [r2, #20]
 8016f50:	ed93 ba04 	vldr	s22, [r3, #16]
 8016f54:	ed93 0a05 	vldr	s0, [r3, #20]
 8016f58:	ed82 7a03 	vstr	s14, [r2, #12]
 8016f5c:	edc2 2a04 	vstr	s5, [r2, #16]
 8016f60:	eef0 1a67 	vmov.f32	s3, s15
 8016f64:	edd3 2a07 	vldr	s5, [r3, #28]
 8016f68:	edd3 7a08 	vldr	s15, [r3, #32]
 8016f6c:	6210      	str	r0, [r2, #32]
 8016f6e:	ee67 6a0a 	vmul.f32	s13, s14, s20
 8016f72:	ed93 7a06 	vldr	s14, [r3, #24]
 8016f76:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8016f78:	ed82 2a00 	vstr	s4, [r2]
 8016f7c:	ed82 3a01 	vstr	s6, [r2, #4]
 8016f80:	ed82 6a05 	vstr	s12, [r2, #20]
 8016f84:	ed83 7a03 	vstr	s14, [r3, #12]
 8016f88:	edc3 aa00 	vstr	s21, [r3]
 8016f8c:	edc3 2a04 	vstr	s5, [r3, #16]
 8016f90:	edc3 7a05 	vstr	s15, [r3, #20]
 8016f94:	edc2 ba02 	vstr	s23, [r2, #8]
 8016f98:	6198      	str	r0, [r3, #24]
 8016f9a:	ed83 ba01 	vstr	s22, [r3, #4]
 8016f9e:	ed83 0a02 	vstr	s0, [r3, #8]
 8016fa2:	eee2 6a01 	vfma.f32	s13, s4, s2
 8016fa6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8016fa8:	61d8      	str	r0, [r3, #28]
 8016faa:	ed9f 2aa2 	vldr	s4, [pc, #648]	; 8017234 <m_kalman_3gyro.isra.6.constprop.36+0x3784>
 8016fae:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8016fb0:	6218      	str	r0, [r3, #32]
 8016fb2:	ee62 9a8a 	vmul.f32	s19, s5, s20
 8016fb6:	edd2 2a0d 	vldr	s5, [r2, #52]	; 0x34
 8016fba:	edc2 0a0d 	vstr	s1, [r2, #52]	; 0x34
 8016fbe:	ee26 3a0a 	vmul.f32	s6, s12, s20
 8016fc2:	ee27 6a0a 	vmul.f32	s12, s14, s20
 8016fc6:	ee27 aa8a 	vmul.f32	s20, s15, s20
 8016fca:	eef0 7a61 	vmov.f32	s15, s3
 8016fce:	eee2 7a82 	vfma.f32	s15, s5, s4
 8016fd2:	f601 04b4 	addw	r4, r1, #2228	; 0x8b4
 8016fd6:	f501 610c 	add.w	r1, r1, #2240	; 0x8c0
 8016fda:	edc2 2a0a 	vstr	s5, [r2, #40]	; 0x28
 8016fde:	edd2 2a0c 	vldr	s5, [r2, #48]	; 0x30
 8016fe2:	eddf 1a95 	vldr	s3, [pc, #596]	; 8017238 <m_kalman_3gyro.isra.6.constprop.36+0x3788>
 8016fe6:	edc2 2a09 	vstr	s5, [r2, #36]	; 0x24
 8016fea:	eeb0 7a43 	vmov.f32	s14, s6
 8016fee:	eee2 6a82 	vfma.f32	s13, s5, s4
 8016ff2:	eeab 7a81 	vfma.f32	s14, s23, s2
 8016ff6:	eee0 7aa1 	vfma.f32	s15, s1, s3
 8016ffa:	eea0 aa01 	vfma.f32	s20, s0, s2
 8016ffe:	eeaa 6a81 	vfma.f32	s12, s21, s2
 8017002:	eeeb 9a01 	vfma.f32	s19, s22, s2
 8017006:	ed92 1a0e 	vldr	s2, [r2, #56]	; 0x38
 801700a:	edd3 0a0c 	vldr	s1, [r3, #48]	; 0x30
 801700e:	ed93 3a0d 	vldr	s6, [r3, #52]	; 0x34
 8017012:	edc4 7a01 	vstr	s15, [r4, #4]
 8017016:	eee3 6aa1 	vfma.f32	s13, s7, s3
 801701a:	eea1 7a02 	vfma.f32	s14, s2, s4
 801701e:	eef0 aa46 	vmov.f32	s21, s12
 8017022:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8017026:	ed93 6a0e 	vldr	s12, [r3, #56]	; 0x38
 801702a:	edc4 6a00 	vstr	s13, [r4]
 801702e:	eea4 7a21 	vfma.f32	s14, s8, s3
 8017032:	eee0 aa82 	vfma.f32	s21, s1, s4
 8017036:	eee3 9a02 	vfma.f32	s19, s6, s4
 801703a:	eea6 aa02 	vfma.f32	s20, s12, s4
 801703e:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8017042:	eee4 aaa1 	vfma.f32	s21, s9, s3
 8017046:	eee5 9a21 	vfma.f32	s19, s10, s3
 801704a:	eea5 aaa1 	vfma.f32	s20, s11, s3
 801704e:	eee7 7a07 	vfma.f32	s15, s14, s14
 8017052:	ed84 7a02 	vstr	s14, [r4, #8]
 8017056:	edc2 3a0c 	vstr	s7, [r2, #48]	; 0x30
 801705a:	ed82 1a0b 	vstr	s2, [r2, #44]	; 0x2c
 801705e:	ed82 4a0e 	vstr	s8, [r2, #56]	; 0x38
 8017062:	edc3 0a09 	vstr	s1, [r3, #36]	; 0x24
 8017066:	edc3 4a0c 	vstr	s9, [r3, #48]	; 0x30
 801706a:	ed83 3a0a 	vstr	s6, [r3, #40]	; 0x28
 801706e:	ed83 5a0d 	vstr	s10, [r3, #52]	; 0x34
 8017072:	ed83 6a0b 	vstr	s12, [r3, #44]	; 0x2c
 8017076:	edc3 5a0e 	vstr	s11, [r3, #56]	; 0x38
 801707a:	ee17 0a90 	vmov	r0, s15
 801707e:	edc1 9a01 	vstr	s19, [r1, #4]
 8017082:	edc1 aa00 	vstr	s21, [r1]
 8017086:	ee69 9aa9 	vmul.f32	s19, s19, s19
 801708a:	ed81 aa02 	vstr	s20, [r1, #8]
 801708e:	f7e9 fa63 	bl	8000558 <__aeabi_f2d>
 8017092:	f004 f8e7 	bl	801b264 <sqrt>
 8017096:	eef0 7a69 	vmov.f32	s15, s19
 801709a:	eeea 7aaa 	vfma.f32	s15, s21, s21
 801709e:	4604      	mov	r4, r0
 80170a0:	460d      	mov	r5, r1
 80170a2:	eeea 7a0a 	vfma.f32	s15, s20, s20
 80170a6:	ee17 0a90 	vmov	r0, s15
 80170aa:	f7e9 fa55 	bl	8000558 <__aeabi_f2d>
 80170ae:	f004 f8d9 	bl	801b264 <sqrt>
 80170b2:	f7e9 fd81 	bl	8000bb8 <__aeabi_d2f>
 80170b6:	4629      	mov	r1, r5
 80170b8:	ee09 0a90 	vmov	s19, r0
 80170bc:	4620      	mov	r0, r4
 80170be:	f7e9 fd7b 	bl	8000bb8 <__aeabi_d2f>
 80170c2:	ee07 0a90 	vmov	s15, r0
 80170c6:	eef4 eae7 	vcmpe.f32	s29, s15
 80170ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80170ce:	f77f a933 	ble.w	8016338 <m_kalman_3gyro.isra.6.constprop.36+0x2888>
 80170d2:	eeb4 fae9 	vcmpe.f32	s30, s19
 80170d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80170da:	f77f a92d 	ble.w	8016338 <m_kalman_3gyro.isra.6.constprop.36+0x2888>
 80170de:	9b08      	ldr	r3, [sp, #32]
 80170e0:	ed93 7a00 	vldr	s14, [r3]
 80170e4:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
 80170e8:	eeb0 7ac7 	vabs.f32	s14, s14
 80170ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80170f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80170f4:	f57f a920 	bpl.w	8016338 <m_kalman_3gyro.isra.6.constprop.36+0x2888>
 80170f8:	9b08      	ldr	r3, [sp, #32]
 80170fa:	ed93 7a01 	vldr	s14, [r3, #4]
 80170fe:	eeb0 7ac7 	vabs.f32	s14, s14
 8017102:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801710a:	f57f a915 	bpl.w	8016338 <m_kalman_3gyro.isra.6.constprop.36+0x2888>
 801710e:	9b08      	ldr	r3, [sp, #32]
 8017110:	ed93 7a02 	vldr	s14, [r3, #8]
 8017114:	eeb0 7ac7 	vabs.f32	s14, s14
 8017118:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801711c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017120:	f57f a90a 	bpl.w	8016338 <m_kalman_3gyro.isra.6.constprop.36+0x2888>
 8017124:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017126:	edd3 7a00 	vldr	s15, [r3]
 801712a:	eef0 7ae7 	vabs.f32	s15, s15
 801712e:	ee17 0a90 	vmov	r0, s15
 8017132:	f7e9 fa11 	bl	8000558 <__aeabi_f2d>
 8017136:	a338      	add	r3, pc, #224	; (adr r3, 8017218 <m_kalman_3gyro.isra.6.constprop.36+0x3768>)
 8017138:	e9d3 2300 	ldrd	r2, r3, [r3]
 801713c:	f7e9 fcd6 	bl	8000aec <__aeabi_dcmplt>
 8017140:	2800      	cmp	r0, #0
 8017142:	f43f a8f9 	beq.w	8016338 <m_kalman_3gyro.isra.6.constprop.36+0x2888>
 8017146:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017148:	edd3 7a01 	vldr	s15, [r3, #4]
 801714c:	eef0 7ae7 	vabs.f32	s15, s15
 8017150:	ee17 0a90 	vmov	r0, s15
 8017154:	f7e9 fa00 	bl	8000558 <__aeabi_f2d>
 8017158:	a32f      	add	r3, pc, #188	; (adr r3, 8017218 <m_kalman_3gyro.isra.6.constprop.36+0x3768>)
 801715a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801715e:	f7e9 fcc5 	bl	8000aec <__aeabi_dcmplt>
 8017162:	2800      	cmp	r0, #0
 8017164:	f43f a8e8 	beq.w	8016338 <m_kalman_3gyro.isra.6.constprop.36+0x2888>
 8017168:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801716a:	edd3 7a02 	vldr	s15, [r3, #8]
 801716e:	eef0 7ae7 	vabs.f32	s15, s15
 8017172:	ee17 0a90 	vmov	r0, s15
 8017176:	f7e9 f9ef 	bl	8000558 <__aeabi_f2d>
 801717a:	a327      	add	r3, pc, #156	; (adr r3, 8017218 <m_kalman_3gyro.isra.6.constprop.36+0x3768>)
 801717c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017180:	f7e9 fcb4 	bl	8000aec <__aeabi_dcmplt>
 8017184:	2800      	cmp	r0, #0
 8017186:	f43f a8d7 	beq.w	8016338 <m_kalman_3gyro.isra.6.constprop.36+0x2888>
 801718a:	f8da 2450 	ldr.w	r2, [sl, #1104]	; 0x450
 801718e:	2a0a      	cmp	r2, #10
 8017190:	f47f ac3e 	bne.w	8016a10 <m_kalman_3gyro.isra.6.constprop.36+0x2f60>
 8017194:	2301      	movs	r3, #1
 8017196:	9908      	ldr	r1, [sp, #32]
 8017198:	f88a 3204 	strb.w	r3, [sl, #516]	; 0x204
 801719c:	f240 1201 	movw	r2, #257	; 0x101
 80171a0:	f8aa 2202 	strh.w	r2, [sl, #514]	; 0x202
 80171a4:	680a      	ldr	r2, [r1, #0]
 80171a6:	f8ca 207c 	str.w	r2, [sl, #124]	; 0x7c
 80171aa:	684a      	ldr	r2, [r1, #4]
 80171ac:	f8ca 2080 	str.w	r2, [sl, #128]	; 0x80
 80171b0:	688a      	ldr	r2, [r1, #8]
 80171b2:	f8ca 2084 	str.w	r2, [sl, #132]	; 0x84
 80171b6:	f8dd 26d8 	ldr.w	r2, [sp, #1752]	; 0x6d8
 80171ba:	7013      	strb	r3, [r2, #0]
 80171bc:	f8da 345c 	ldr.w	r3, [sl, #1116]	; 0x45c
 80171c0:	f89a 2030 	ldrb.w	r2, [sl, #48]	; 0x30
 80171c4:	3301      	adds	r3, #1
 80171c6:	f8ca 345c 	str.w	r3, [sl, #1116]	; 0x45c
 80171ca:	2a00      	cmp	r2, #0
 80171cc:	f000 8226 	beq.w	801761c <m_kalman_3gyro.isra.6.constprop.36+0x3b6c>
 80171d0:	f8da 1080 	ldr.w	r1, [sl, #128]	; 0x80
 80171d4:	f8da 2084 	ldr.w	r2, [sl, #132]	; 0x84
 80171d8:	f8ca 10a4 	str.w	r1, [sl, #164]	; 0xa4
 80171dc:	f8ca 20a8 	str.w	r2, [sl, #168]	; 0xa8
 80171e0:	f8da 107c 	ldr.w	r1, [sl, #124]	; 0x7c
 80171e4:	f8ca 10a0 	str.w	r1, [sl, #160]	; 0xa0
 80171e8:	2200      	movs	r2, #0
 80171ea:	f88a 2030 	strb.w	r2, [sl, #48]	; 0x30
 80171ee:	e215      	b.n	801761c <m_kalman_3gyro.isra.6.constprop.36+0x3b6c>
 80171f0:	f8da 68b0 	ldr.w	r6, [sl, #2224]	; 0x8b0
 80171f4:	b316      	cbz	r6, 801723c <m_kalman_3gyro.isra.6.constprop.36+0x378c>
 80171f6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80171f8:	6818      	ldr	r0, [r3, #0]
 80171fa:	f7e9 f9ad 	bl	8000558 <__aeabi_f2d>
 80171fe:	a308      	add	r3, pc, #32	; (adr r3, 8017220 <m_kalman_3gyro.isra.6.constprop.36+0x3770>)
 8017200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017204:	f7e9 fc90 	bl	8000b28 <__aeabi_dcmpgt>
 8017208:	b1c0      	cbz	r0, 801723c <m_kalman_3gyro.isra.6.constprop.36+0x378c>
 801720a:	3e01      	subs	r6, #1
 801720c:	f8ca 68b0 	str.w	r6, [sl, #2224]	; 0x8b0
 8017210:	f7fe baac 	b.w	801576c <m_kalman_3gyro.isra.6.constprop.36+0x1cbc>
 8017214:	f3af 8000 	nop.w
 8017218:	66666666 	.word	0x66666666
 801721c:	3ff66666 	.word	0x3ff66666
 8017220:	33333333 	.word	0x33333333
 8017224:	3fd33333 	.word	0x3fd33333
 8017228:	200013d0 	.word	0x200013d0
 801722c:	bdcccccd 	.word	0xbdcccccd
 8017230:	be4ccccd 	.word	0xbe4ccccd
 8017234:	3dcccccd 	.word	0x3dcccccd
 8017238:	3e4ccccd 	.word	0x3e4ccccd
 801723c:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 801723e:	6818      	ldr	r0, [r3, #0]
 8017240:	f7e9 f98a 	bl	8000558 <__aeabi_f2d>
 8017244:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017248:	ee1e 0a90 	vmov	r0, s29
 801724c:	f7e9 f984 	bl	8000558 <__aeabi_f2d>
 8017250:	2200      	movs	r2, #0
 8017252:	4bda      	ldr	r3, [pc, #872]	; (80175bc <m_kalman_3gyro.isra.6.constprop.36+0x3b0c>)
 8017254:	f7e9 f9d8 	bl	8000608 <__aeabi_dmul>
 8017258:	4602      	mov	r2, r0
 801725a:	460b      	mov	r3, r1
 801725c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017260:	f7e9 fc44 	bl	8000aec <__aeabi_dcmplt>
 8017264:	2800      	cmp	r0, #0
 8017266:	f43e aa81 	beq.w	801576c <m_kalman_3gyro.isra.6.constprop.36+0x1cbc>
 801726a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801726c:	6818      	ldr	r0, [r3, #0]
 801726e:	f7e9 f973 	bl	8000558 <__aeabi_f2d>
 8017272:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017276:	ee1f 0a10 	vmov	r0, s30
 801727a:	f7e9 f96d 	bl	8000558 <__aeabi_f2d>
 801727e:	2200      	movs	r2, #0
 8017280:	4bce      	ldr	r3, [pc, #824]	; (80175bc <m_kalman_3gyro.isra.6.constprop.36+0x3b0c>)
 8017282:	f7e9 f9c1 	bl	8000608 <__aeabi_dmul>
 8017286:	4602      	mov	r2, r0
 8017288:	460b      	mov	r3, r1
 801728a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801728e:	f7e9 fc2d 	bl	8000aec <__aeabi_dcmplt>
 8017292:	2800      	cmp	r0, #0
 8017294:	f43e aa6a 	beq.w	801576c <m_kalman_3gyro.isra.6.constprop.36+0x1cbc>
 8017298:	4bc9      	ldr	r3, [pc, #804]	; (80175c0 <m_kalman_3gyro.isra.6.constprop.36+0x3b10>)
 801729a:	f89a 58ad 	ldrb.w	r5, [sl, #2221]	; 0x8ad
 801729e:	6818      	ldr	r0, [r3, #0]
 80172a0:	f7e9 f95a 	bl	8000558 <__aeabi_f2d>
 80172a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80172a8:	ee1e 0a10 	vmov	r0, s28
 80172ac:	f7e9 f954 	bl	8000558 <__aeabi_f2d>
 80172b0:	4602      	mov	r2, r0
 80172b2:	460b      	mov	r3, r1
 80172b4:	f7e8 fff2 	bl	800029c <__adddf3>
 80172b8:	4602      	mov	r2, r0
 80172ba:	460b      	mov	r3, r1
 80172bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80172c0:	f7e9 fc32 	bl	8000b28 <__aeabi_dcmpgt>
 80172c4:	2800      	cmp	r0, #0
 80172c6:	f000 8376 	beq.w	80179b6 <m_kalman_3gyro.isra.6.constprop.36+0x3f06>
 80172ca:	2300      	movs	r3, #0
 80172cc:	2d0e      	cmp	r5, #14
 80172ce:	f8aa 31fc 	strh.w	r3, [sl, #508]	; 0x1fc
 80172d2:	f88a 31fe 	strb.w	r3, [sl, #510]	; 0x1fe
 80172d6:	f88a 3205 	strb.w	r3, [sl, #517]	; 0x205
 80172da:	f88a 3207 	strb.w	r3, [sl, #519]	; 0x207
 80172de:	bf95      	itete	ls
 80172e0:	3503      	addls	r5, #3
 80172e2:	2364      	movhi	r3, #100	; 0x64
 80172e4:	f88a 58ad 	strbls.w	r5, [sl, #2221]	; 0x8ad
 80172e8:	f8ca 38b0 	strhi.w	r3, [sl, #2224]	; 0x8b0
 80172ec:	f7fe ba3e 	b.w	801576c <m_kalman_3gyro.isra.6.constprop.36+0x1cbc>
 80172f0:	eeb0 aa48 	vmov.f32	s20, s16
 80172f4:	f7fe be42 	b.w	8015f7c <m_kalman_3gyro.isra.6.constprop.36+0x24cc>
 80172f8:	eef0 ca48 	vmov.f32	s25, s16
 80172fc:	f7fe be2a 	b.w	8015f54 <m_kalman_3gyro.isra.6.constprop.36+0x24a4>
 8017300:	1c54      	adds	r4, r2, #1
 8017302:	4611      	mov	r1, r2
 8017304:	f7fd bf02 	b.w	801510c <m_kalman_3gyro.isra.6.constprop.36+0x165c>
 8017308:	240a      	movs	r4, #10
 801730a:	2002      	movs	r0, #2
 801730c:	2101      	movs	r1, #1
 801730e:	f06f 4540 	mvn.w	r5, #3221225472	; 0xc0000000
 8017312:	190a      	adds	r2, r1, r4
 8017314:	0852      	lsrs	r2, r2, #1
 8017316:	1953      	adds	r3, r2, r5
 8017318:	f50d 66c6 	add.w	r6, sp, #1584	; 0x630
 801731c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8017320:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 8017324:	ed93 7a00 	vldr	s14, [r3]
 8017328:	eef4 7ac7 	vcmpe.f32	s15, s14
 801732c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017330:	f280 8189 	bge.w	8017646 <m_kalman_3gyro.isra.6.constprop.36+0x3b96>
 8017334:	188b      	adds	r3, r1, r2
 8017336:	085b      	lsrs	r3, r3, #1
 8017338:	195c      	adds	r4, r3, r5
 801733a:	f50d 66c6 	add.w	r6, sp, #1584	; 0x630
 801733e:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8017342:	4290      	cmp	r0, r2
 8017344:	f5a4 7474 	sub.w	r4, r4, #976	; 0x3d0
 8017348:	d212      	bcs.n	8017370 <m_kalman_3gyro.isra.6.constprop.36+0x38c0>
 801734a:	ed94 7a00 	vldr	s14, [r4]
 801734e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8017352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017356:	da05      	bge.n	8017364 <m_kalman_3gyro.isra.6.constprop.36+0x38b4>
 8017358:	461a      	mov	r2, r3
 801735a:	e7eb      	b.n	8017334 <m_kalman_3gyro.isra.6.constprop.36+0x3884>
 801735c:	eddd 9a6a 	vldr	s19, [sp, #424]	; 0x1a8
 8017360:	f7fd befc 	b.w	801515c <m_kalman_3gyro.isra.6.constprop.36+0x16ac>
 8017364:	4614      	mov	r4, r2
 8017366:	1c58      	adds	r0, r3, #1
 8017368:	4284      	cmp	r4, r0
 801736a:	4619      	mov	r1, r3
 801736c:	d8d1      	bhi.n	8017312 <m_kalman_3gyro.isra.6.constprop.36+0x3862>
 801736e:	e000      	b.n	8017372 <m_kalman_3gyro.isra.6.constprop.36+0x38c2>
 8017370:	460b      	mov	r3, r1
 8017372:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
 8017376:	185a      	adds	r2, r3, r1
 8017378:	0092      	lsls	r2, r2, #2
 801737a:	009b      	lsls	r3, r3, #2
 801737c:	a898      	add	r0, sp, #608	; 0x260
 801737e:	1884      	adds	r4, r0, r2
 8017380:	4418      	add	r0, r3
 8017382:	edd4 6a00 	vldr	s13, [r4]
 8017386:	ed90 7a00 	vldr	s14, [r0]
 801738a:	ee37 6ae6 	vsub.f32	s12, s15, s13
 801738e:	ee37 7a66 	vsub.f32	s14, s14, s13
 8017392:	a8a2      	add	r0, sp, #648	; 0x288
 8017394:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8017398:	4402      	add	r2, r0
 801739a:	4403      	add	r3, r0
 801739c:	250a      	movs	r5, #10
 801739e:	2402      	movs	r4, #2
 80173a0:	2001      	movs	r0, #1
 80173a2:	edd2 8a00 	vldr	s17, [r2]
 80173a6:	ed93 7a00 	vldr	s14, [r3]
 80173aa:	ee37 7a68 	vsub.f32	s14, s14, s17
 80173ae:	eee6 8a87 	vfma.f32	s17, s13, s14
 80173b2:	182a      	adds	r2, r5, r0
 80173b4:	0852      	lsrs	r2, r2, #1
 80173b6:	1853      	adds	r3, r2, r1
 80173b8:	f50d 66c6 	add.w	r6, sp, #1584	; 0x630
 80173bc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80173c0:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 80173c4:	ed93 7a00 	vldr	s14, [r3]
 80173c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80173cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80173d0:	f280 81d9 	bge.w	8017786 <m_kalman_3gyro.isra.6.constprop.36+0x3cd6>
 80173d4:	1813      	adds	r3, r2, r0
 80173d6:	085b      	lsrs	r3, r3, #1
 80173d8:	185d      	adds	r5, r3, r1
 80173da:	f50d 66c6 	add.w	r6, sp, #1584	; 0x630
 80173de:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 80173e2:	42a2      	cmp	r2, r4
 80173e4:	f5a5 7574 	sub.w	r5, r5, #976	; 0x3d0
 80173e8:	d908      	bls.n	80173fc <m_kalman_3gyro.isra.6.constprop.36+0x394c>
 80173ea:	ed95 7a00 	vldr	s14, [r5]
 80173ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80173f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80173f6:	da22      	bge.n	801743e <m_kalman_3gyro.isra.6.constprop.36+0x398e>
 80173f8:	461a      	mov	r2, r3
 80173fa:	e7eb      	b.n	80173d4 <m_kalman_3gyro.isra.6.constprop.36+0x3924>
 80173fc:	4603      	mov	r3, r0
 80173fe:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 8017402:	3a01      	subs	r2, #1
 8017404:	0091      	lsls	r1, r2, #2
 8017406:	009b      	lsls	r3, r3, #2
 8017408:	aa98      	add	r2, sp, #608	; 0x260
 801740a:	1850      	adds	r0, r2, r1
 801740c:	441a      	add	r2, r3
 801740e:	edd0 6a00 	vldr	s13, [r0]
 8017412:	ed92 7a00 	vldr	s14, [r2]
 8017416:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801741a:	ee37 7a66 	vsub.f32	s14, s14, s13
 801741e:	aaac      	add	r2, sp, #688	; 0x2b0
 8017420:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8017424:	440a      	add	r2, r1
 8017426:	a9ac      	add	r1, sp, #688	; 0x2b0
 8017428:	440b      	add	r3, r1
 801742a:	ed92 9a00 	vldr	s18, [r2]
 801742e:	edd3 7a00 	vldr	s15, [r3]
 8017432:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8017436:	eea6 9aa7 	vfma.f32	s18, s13, s15
 801743a:	f7fd be2c 	b.w	8015096 <m_kalman_3gyro.isra.6.constprop.36+0x15e6>
 801743e:	4615      	mov	r5, r2
 8017440:	1c5c      	adds	r4, r3, #1
 8017442:	42ac      	cmp	r4, r5
 8017444:	4618      	mov	r0, r3
 8017446:	d3b4      	bcc.n	80173b2 <m_kalman_3gyro.isra.6.constprop.36+0x3902>
 8017448:	e7d9      	b.n	80173fe <m_kalman_3gyro.isra.6.constprop.36+0x394e>
 801744a:	f8dd 3698 	ldr.w	r3, [sp, #1688]	; 0x698
 801744e:	edd3 6a06 	vldr	s13, [r3, #24]
 8017452:	ed93 7a07 	vldr	s14, [r3, #28]
 8017456:	edd3 7a08 	vldr	s15, [r3, #32]
 801745a:	f8dd 2698 	ldr.w	r2, [sp, #1688]	; 0x698
 801745e:	ee69 6aa6 	vmul.f32	s13, s19, s13
 8017462:	ee29 7a87 	vmul.f32	s14, s19, s14
 8017466:	ee69 7aa7 	vmul.f32	s15, s19, s15
 801746a:	2300      	movs	r3, #0
 801746c:	edc2 6a06 	vstr	s13, [r2, #24]
 8017470:	ed82 7a07 	vstr	s14, [r2, #28]
 8017474:	edc2 7a08 	vstr	s15, [r2, #32]
 8017478:	f8aa 38a6 	strh.w	r3, [sl, #2214]	; 0x8a6
 801747c:	f89a 38a4 	ldrb.w	r3, [sl, #2212]	; 0x8a4
 8017480:	2b00      	cmp	r3, #0
 8017482:	f47f abf5 	bne.w	8016c70 <m_kalman_3gyro.isra.6.constprop.36+0x31c0>
 8017486:	f89a 2030 	ldrb.w	r2, [sl, #48]	; 0x30
 801748a:	b32a      	cbz	r2, 80174d8 <m_kalman_3gyro.isra.6.constprop.36+0x3a28>
 801748c:	ed9d 7a02 	vldr	s14, [sp, #8]
 8017490:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8017494:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801749c:	d51c      	bpl.n	80174d8 <m_kalman_3gyro.isra.6.constprop.36+0x3a28>
 801749e:	ed9a 7af1 	vldr	s14, [sl, #964]	; 0x3c4
 80174a2:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 80174a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80174aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80174ae:	d513      	bpl.n	80174d8 <m_kalman_3gyro.isra.6.constprop.36+0x3a28>
 80174b0:	f8da 13d8 	ldr.w	r1, [sl, #984]	; 0x3d8
 80174b4:	f8ca 1080 	str.w	r1, [sl, #128]	; 0x80
 80174b8:	f8da 13d4 	ldr.w	r1, [sl, #980]	; 0x3d4
 80174bc:	f8da 23dc 	ldr.w	r2, [sl, #988]	; 0x3dc
 80174c0:	f8ca 107c 	str.w	r1, [sl, #124]	; 0x7c
 80174c4:	f8dd 16d8 	ldr.w	r1, [sp, #1752]	; 0x6d8
 80174c8:	f8ca 2084 	str.w	r2, [sl, #132]	; 0x84
 80174cc:	2201      	movs	r2, #1
 80174ce:	700a      	strb	r2, [r1, #0]
 80174d0:	f88a 3030 	strb.w	r3, [sl, #48]	; 0x30
 80174d4:	f7fd bee3 	b.w	801529e <m_kalman_3gyro.isra.6.constprop.36+0x17ee>
 80174d8:	f8da 2454 	ldr.w	r2, [sl, #1108]	; 0x454
 80174dc:	2a1e      	cmp	r2, #30
 80174de:	d00e      	beq.n	80174fe <m_kalman_3gyro.isra.6.constprop.36+0x3a4e>
 80174e0:	2a00      	cmp	r2, #0
 80174e2:	f102 0301 	add.w	r3, r2, #1
 80174e6:	dd03      	ble.n	80174f0 <m_kalman_3gyro.isra.6.constprop.36+0x3a40>
 80174e8:	2b00      	cmp	r3, #0
 80174ea:	bfd8      	it	le
 80174ec:	f06f 4300 	mvnle.w	r3, #2147483648	; 0x80000000
 80174f0:	2200      	movs	r2, #0
 80174f2:	f8ca 3454 	str.w	r3, [sl, #1108]	; 0x454
 80174f6:	f8ca 245c 	str.w	r2, [sl, #1116]	; 0x45c
 80174fa:	f7fd bed0 	b.w	801529e <m_kalman_3gyro.isra.6.constprop.36+0x17ee>
 80174fe:	f8ba 38a6 	ldrh.w	r3, [sl, #2214]	; 0x8a6
 8017502:	2b27      	cmp	r3, #39	; 0x27
 8017504:	f200 8130 	bhi.w	8017768 <m_kalman_3gyro.isra.6.constprop.36+0x3cb8>
 8017508:	f8da 23d8 	ldr.w	r2, [sl, #984]	; 0x3d8
 801750c:	f8ca 2080 	str.w	r2, [sl, #128]	; 0x80
 8017510:	f8da 23d4 	ldr.w	r2, [sl, #980]	; 0x3d4
 8017514:	f8da 33dc 	ldr.w	r3, [sl, #988]	; 0x3dc
 8017518:	f8ca 207c 	str.w	r2, [sl, #124]	; 0x7c
 801751c:	f8dd 26d8 	ldr.w	r2, [sp, #1752]	; 0x6d8
 8017520:	f8ca 3084 	str.w	r3, [sl, #132]	; 0x84
 8017524:	2301      	movs	r3, #1
 8017526:	7013      	strb	r3, [r2, #0]
 8017528:	f8ba 38a8 	ldrh.w	r3, [sl, #2216]	; 0x8a8
 801752c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017530:	3301      	adds	r3, #1
 8017532:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017536:	bf08      	it	eq
 8017538:	4613      	moveq	r3, r2
 801753a:	2201      	movs	r2, #1
 801753c:	f8aa 38a8 	strh.w	r3, [sl, #2216]	; 0x8a8
 8017540:	f8ca 245c 	str.w	r2, [sl, #1116]	; 0x45c
 8017544:	f7fd beab 	b.w	801529e <m_kalman_3gyro.isra.6.constprop.36+0x17ee>
 8017548:	f8da 2450 	ldr.w	r2, [sl, #1104]	; 0x450
 801754c:	2a32      	cmp	r2, #50	; 0x32
 801754e:	f000 81a5 	beq.w	801789c <m_kalman_3gyro.isra.6.constprop.36+0x3dec>
 8017552:	2300      	movs	r3, #0
 8017554:	2a00      	cmp	r2, #0
 8017556:	f8aa 3202 	strh.w	r3, [sl, #514]	; 0x202
 801755a:	f88a 3204 	strb.w	r3, [sl, #516]	; 0x204
 801755e:	f102 0301 	add.w	r3, r2, #1
 8017562:	f77f abb9 	ble.w	8016cd8 <m_kalman_3gyro.isra.6.constprop.36+0x3228>
 8017566:	2b00      	cmp	r3, #0
 8017568:	bfd8      	it	le
 801756a:	f06f 4300 	mvnle.w	r3, #2147483648	; 0x80000000
 801756e:	f7ff bbb3 	b.w	8016cd8 <m_kalman_3gyro.isra.6.constprop.36+0x3228>
 8017572:	2301      	movs	r3, #1
 8017574:	f88a 3204 	strb.w	r3, [sl, #516]	; 0x204
 8017578:	f240 1201 	movw	r2, #257	; 0x101
 801757c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801757e:	f8aa 2202 	strh.w	r2, [sl, #514]	; 0x202
 8017582:	edd3 7a00 	vldr	s15, [r3]
 8017586:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 801758a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801758e:	eef4 7ac8 	vcmpe.f32	s15, s16
 8017592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017596:	f280 8136 	bge.w	8017806 <m_kalman_3gyro.isra.6.constprop.36+0x3d56>
 801759a:	f8dd 3698 	ldr.w	r3, [sp, #1688]	; 0x698
 801759e:	eeb4 eaed 	vcmpe.f32	s28, s27
 80175a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175a6:	edd3 6a06 	vldr	s13, [r3, #24]
 80175aa:	ed93 7a07 	vldr	s14, [r3, #28]
 80175ae:	edd3 7a08 	vldr	s15, [r3, #32]
 80175b2:	f300 80ea 	bgt.w	801778a <m_kalman_3gyro.isra.6.constprop.36+0x3cda>
 80175b6:	ac86      	add	r4, sp, #536	; 0x218
 80175b8:	e74f      	b.n	801745a <m_kalman_3gyro.isra.6.constprop.36+0x39aa>
 80175ba:	bf00      	nop
 80175bc:	3ff80000 	.word	0x3ff80000
 80175c0:	20001bf8 	.word	0x20001bf8
 80175c4:	3e4ccccd 	.word	0x3e4ccccd
 80175c8:	9908      	ldr	r1, [sp, #32]
 80175ca:	f88a 3204 	strb.w	r3, [sl, #516]	; 0x204
 80175ce:	f240 1201 	movw	r2, #257	; 0x101
 80175d2:	f8aa 2202 	strh.w	r2, [sl, #514]	; 0x202
 80175d6:	680a      	ldr	r2, [r1, #0]
 80175d8:	f8ca 207c 	str.w	r2, [sl, #124]	; 0x7c
 80175dc:	684a      	ldr	r2, [r1, #4]
 80175de:	f8ca 2080 	str.w	r2, [sl, #128]	; 0x80
 80175e2:	688a      	ldr	r2, [r1, #8]
 80175e4:	f8ca 2084 	str.w	r2, [sl, #132]	; 0x84
 80175e8:	f8dd 26d8 	ldr.w	r2, [sp, #1752]	; 0x6d8
 80175ec:	7013      	strb	r3, [r2, #0]
 80175ee:	f8da 345c 	ldr.w	r3, [sl, #1116]	; 0x45c
 80175f2:	f89a 2030 	ldrb.w	r2, [sl, #48]	; 0x30
 80175f6:	3301      	adds	r3, #1
 80175f8:	f8ca 345c 	str.w	r3, [sl, #1116]	; 0x45c
 80175fc:	b172      	cbz	r2, 801761c <m_kalman_3gyro.isra.6.constprop.36+0x3b6c>
 80175fe:	f8da 107c 	ldr.w	r1, [sl, #124]	; 0x7c
 8017602:	f8da 2080 	ldr.w	r2, [sl, #128]	; 0x80
 8017606:	f8ca 10a0 	str.w	r1, [sl, #160]	; 0xa0
 801760a:	f8ca 20a4 	str.w	r2, [sl, #164]	; 0xa4
 801760e:	f8da 1084 	ldr.w	r1, [sl, #132]	; 0x84
 8017612:	f8ca 10a8 	str.w	r1, [sl, #168]	; 0xa8
 8017616:	2200      	movs	r2, #0
 8017618:	f88a 2030 	strb.w	r2, [sl, #48]	; 0x30
 801761c:	2b1e      	cmp	r3, #30
 801761e:	f47e ae8b 	bne.w	8016338 <m_kalman_3gyro.isra.6.constprop.36+0x2888>
 8017622:	f60a 0398 	addw	r3, sl, #2200	; 0x898
 8017626:	f8da 00a0 	ldr.w	r0, [sl, #160]	; 0xa0
 801762a:	f8da 10a4 	ldr.w	r1, [sl, #164]	; 0xa4
 801762e:	f8da 20a8 	ldr.w	r2, [sl, #168]	; 0xa8
 8017632:	6018      	str	r0, [r3, #0]
 8017634:	f60a 039c 	addw	r3, sl, #2204	; 0x89c
 8017638:	ac86      	add	r4, sp, #536	; 0x218
 801763a:	6019      	str	r1, [r3, #0]
 801763c:	f50a 630a 	add.w	r3, sl, #2208	; 0x8a0
 8017640:	601a      	str	r2, [r3, #0]
 8017642:	f7fd be2c 	b.w	801529e <m_kalman_3gyro.isra.6.constprop.36+0x17ee>
 8017646:	4613      	mov	r3, r2
 8017648:	e68d      	b.n	8017366 <m_kalman_3gyro.isra.6.constprop.36+0x38b6>
 801764a:	200d      	movs	r0, #13
 801764c:	2402      	movs	r4, #2
 801764e:	2101      	movs	r1, #1
 8017650:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
 8017654:	1843      	adds	r3, r0, r1
 8017656:	085b      	lsrs	r3, r3, #1
 8017658:	199a      	adds	r2, r3, r6
 801765a:	f50d 65c6 	add.w	r5, sp, #1584	; 0x630
 801765e:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 8017662:	f5a5 753c 	sub.w	r5, r5, #752	; 0x2f0
 8017666:	e00e      	b.n	8017686 <m_kalman_3gyro.isra.6.constprop.36+0x3bd6>
 8017668:	18ca      	adds	r2, r1, r3
 801766a:	4618      	mov	r0, r3
 801766c:	429c      	cmp	r4, r3
 801766e:	ea4f 0352 	mov.w	r3, r2, lsr #1
 8017672:	eb03 0206 	add.w	r2, r3, r6
 8017676:	f50d 65c6 	add.w	r5, sp, #1584	; 0x630
 801767a:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 801767e:	f5a5 753c 	sub.w	r5, r5, #752	; 0x2f0
 8017682:	f080 8180 	bcs.w	8017986 <m_kalman_3gyro.isra.6.constprop.36+0x3ed6>
 8017686:	ed95 7a00 	vldr	s14, [r5]
 801768a:	eeb4 8ac7 	vcmpe.f32	s16, s14
 801768e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017692:	dbe9      	blt.n	8017668 <m_kalman_3gyro.isra.6.constprop.36+0x3bb8>
 8017694:	1c5c      	adds	r4, r3, #1
 8017696:	42a0      	cmp	r0, r4
 8017698:	4619      	mov	r1, r3
 801769a:	d8db      	bhi.n	8017654 <m_kalman_3gyro.isra.6.constprop.36+0x3ba4>
 801769c:	f7fd b873 	b.w	8014786 <m_kalman_3gyro.isra.6.constprop.36+0xcd6>
 80176a0:	200d      	movs	r0, #13
 80176a2:	2402      	movs	r4, #2
 80176a4:	2101      	movs	r1, #1
 80176a6:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
 80176aa:	180b      	adds	r3, r1, r0
 80176ac:	085b      	lsrs	r3, r3, #1
 80176ae:	199a      	adds	r2, r3, r6
 80176b0:	f50d 65c6 	add.w	r5, sp, #1584	; 0x630
 80176b4:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 80176b8:	f5a5 7556 	sub.w	r5, r5, #856	; 0x358
 80176bc:	edd5 7a00 	vldr	s15, [r5]
 80176c0:	eef4 7ac8 	vcmpe.f32	s15, s16
 80176c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80176c8:	d915      	bls.n	80176f6 <m_kalman_3gyro.isra.6.constprop.36+0x3c46>
 80176ca:	18ca      	adds	r2, r1, r3
 80176cc:	4618      	mov	r0, r3
 80176ce:	429c      	cmp	r4, r3
 80176d0:	ea4f 0352 	mov.w	r3, r2, lsr #1
 80176d4:	eb03 0206 	add.w	r2, r3, r6
 80176d8:	f50d 65c6 	add.w	r5, sp, #1584	; 0x630
 80176dc:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 80176e0:	f5a5 7556 	sub.w	r5, r5, #856	; 0x358
 80176e4:	f080 8177 	bcs.w	80179d6 <m_kalman_3gyro.isra.6.constprop.36+0x3f26>
 80176e8:	edd5 7a00 	vldr	s15, [r5]
 80176ec:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80176f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80176f4:	dbe9      	blt.n	80176ca <m_kalman_3gyro.isra.6.constprop.36+0x3c1a>
 80176f6:	1c5c      	adds	r4, r3, #1
 80176f8:	42a0      	cmp	r0, r4
 80176fa:	4619      	mov	r1, r3
 80176fc:	d8d5      	bhi.n	80176aa <m_kalman_3gyro.isra.6.constprop.36+0x3bfa>
 80176fe:	0092      	lsls	r2, r2, #2
 8017700:	009b      	lsls	r3, r3, #2
 8017702:	a9b6      	add	r1, sp, #728	; 0x2d8
 8017704:	1888      	adds	r0, r1, r2
 8017706:	4419      	add	r1, r3
 8017708:	edd0 6a00 	vldr	s13, [r0]
 801770c:	edd1 7a00 	vldr	s15, [r1]
 8017710:	ee78 5a66 	vsub.f32	s11, s16, s13
 8017714:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8017718:	a9c3      	add	r1, sp, #780	; 0x30c
 801771a:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 801771e:	440a      	add	r2, r1
 8017720:	440b      	add	r3, r1
 8017722:	edd2 7a00 	vldr	s15, [r2]
 8017726:	edd3 6a00 	vldr	s13, [r3]
 801772a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 801772e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8017732:	f7fd bb0a 	b.w	8014d4a <m_kalman_3gyro.isra.6.constprop.36+0x129a>
 8017736:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801773a:	f8aa 38a6 	strh.w	r3, [sl, #2214]	; 0x8a6
 801773e:	f7ff ba60 	b.w	8016c02 <m_kalman_3gyro.isra.6.constprop.36+0x3152>
 8017742:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8017746:	f8ca 3130 	str.w	r3, [sl, #304]	; 0x130
 801774a:	f8ca 3158 	str.w	r3, [sl, #344]	; 0x158
 801774e:	f8ca 3180 	str.w	r3, [sl, #384]	; 0x180
 8017752:	e693      	b.n	801747c <m_kalman_3gyro.isra.6.constprop.36+0x39cc>
 8017754:	f8ca 0450 	str.w	r0, [sl, #1104]	; 0x450
 8017758:	f8aa 0202 	strh.w	r0, [sl, #514]	; 0x202
 801775c:	f88a 0204 	strb.w	r0, [sl, #516]	; 0x204
 8017760:	f8ca 045c 	str.w	r0, [sl, #1116]	; 0x45c
 8017764:	f7fd bd9b 	b.w	801529e <m_kalman_3gyro.isra.6.constprop.36+0x17ee>
 8017768:	9a08      	ldr	r2, [sp, #32]
 801776a:	6813      	ldr	r3, [r2, #0]
 801776c:	f8ca 307c 	str.w	r3, [sl, #124]	; 0x7c
 8017770:	6853      	ldr	r3, [r2, #4]
 8017772:	f8ca 3080 	str.w	r3, [sl, #128]	; 0x80
 8017776:	6892      	ldr	r2, [r2, #8]
 8017778:	f8ca 2084 	str.w	r2, [sl, #132]	; 0x84
 801777c:	f8dd 26d8 	ldr.w	r2, [sp, #1752]	; 0x6d8
 8017780:	2301      	movs	r3, #1
 8017782:	7013      	strb	r3, [r2, #0]
 8017784:	e6d0      	b.n	8017528 <m_kalman_3gyro.isra.6.constprop.36+0x3a78>
 8017786:	4613      	mov	r3, r2
 8017788:	e65a      	b.n	8017440 <m_kalman_3gyro.isra.6.constprop.36+0x3990>
 801778a:	eef4 eaec 	vcmpe.f32	s29, s25
 801778e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017792:	f77f af10 	ble.w	80175b6 <m_kalman_3gyro.isra.6.constprop.36+0x3b06>
 8017796:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8017798:	ed93 5a00 	vldr	s10, [r3]
 801779c:	eeb4 fac5 	vcmpe.f32	s30, s10
 80177a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177a4:	f77f af07 	ble.w	80175b6 <m_kalman_3gyro.isra.6.constprop.36+0x3b06>
 80177a8:	ed9d 6a02 	vldr	s12, [sp, #8]
 80177ac:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 80177b0:	eeb4 6ae5 	vcmpe.f32	s12, s11
 80177b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177b8:	f57f aefd 	bpl.w	80175b6 <m_kalman_3gyro.isra.6.constprop.36+0x3b06>
 80177bc:	ee8d 6a8e 	vdiv.f32	s12, s27, s28
 80177c0:	ee8c 4aae 	vdiv.f32	s8, s25, s29
 80177c4:	eec5 4a0f 	vdiv.f32	s9, s10, s30
 80177c8:	ee36 6a04 	vadd.f32	s12, s12, s8
 80177cc:	eeb7 5a08 	vmov.f32	s10, #120	; 0x3fc00000  1.5
 80177d0:	ee36 6a24 	vadd.f32	s12, s12, s9
 80177d4:	eeb4 6ac5 	vcmpe.f32	s12, s10
 80177d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177dc:	f57f aeeb 	bpl.w	80175b6 <m_kalman_3gyro.isra.6.constprop.36+0x3b06>
 80177e0:	f8dd 2698 	ldr.w	r2, [sp, #1688]	; 0x698
 80177e4:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80177e8:	ee27 7a25 	vmul.f32	s14, s14, s11
 80177ec:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80177f0:	2300      	movs	r3, #0
 80177f2:	edc2 6a06 	vstr	s13, [r2, #24]
 80177f6:	ed82 7a07 	vstr	s14, [r2, #28]
 80177fa:	edc2 7a08 	vstr	s15, [r2, #32]
 80177fe:	ac86      	add	r4, sp, #536	; 0x218
 8017800:	f8aa 38a6 	strh.w	r3, [sl, #2214]	; 0x8a6
 8017804:	e63a      	b.n	801747c <m_kalman_3gyro.isra.6.constprop.36+0x39cc>
 8017806:	ac86      	add	r4, sp, #536	; 0x218
 8017808:	f7ff b9d5 	b.w	8016bb6 <m_kalman_3gyro.isra.6.constprop.36+0x3106>
 801780c:	230c      	movs	r3, #12
 801780e:	fb03 f400 	mul.w	r4, r3, r0
 8017812:	f601 0378 	addw	r3, r1, #2168	; 0x878
 8017816:	4423      	add	r3, r4
 8017818:	edc3 4a00 	vstr	s9, [r3]
 801781c:	f601 023c 	addw	r2, r1, #2108	; 0x83c
 8017820:	ed83 5a01 	vstr	s10, [r3, #4]
 8017824:	edc3 5a02 	vstr	s11, [r3, #8]
 8017828:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 801782c:	4422      	add	r2, r4
 801782e:	3001      	adds	r0, #1
 8017830:	2400      	movs	r4, #0
 8017832:	f881 0838 	strb.w	r0, [r1, #2104]	; 0x838
 8017836:	edc2 3a00 	vstr	s7, [r2]
 801783a:	edc2 0a01 	vstr	s1, [r2, #4]
 801783e:	ed82 4a02 	vstr	s8, [r2, #8]
 8017842:	701c      	strb	r4, [r3, #0]
 8017844:	f7fe bd1f 	b.w	8016286 <m_kalman_3gyro.isra.6.constprop.36+0x27d6>
 8017848:	240d      	movs	r4, #13
 801784a:	2002      	movs	r0, #2
 801784c:	2101      	movs	r1, #1
 801784e:	f06f 4540 	mvn.w	r5, #3221225472	; 0xc0000000
 8017852:	1862      	adds	r2, r4, r1
 8017854:	0852      	lsrs	r2, r2, #1
 8017856:	1953      	adds	r3, r2, r5
 8017858:	f50d 66c6 	add.w	r6, sp, #1584	; 0x630
 801785c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8017860:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 8017864:	edd3 7a00 	vldr	s15, [r3]
 8017868:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801786c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017870:	f280 80af 	bge.w	80179d2 <m_kalman_3gyro.isra.6.constprop.36+0x3f22>
 8017874:	188b      	adds	r3, r1, r2
 8017876:	085b      	lsrs	r3, r3, #1
 8017878:	195c      	adds	r4, r3, r5
 801787a:	f50d 66c6 	add.w	r6, sp, #1584	; 0x630
 801787e:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8017882:	4290      	cmp	r0, r2
 8017884:	f5a4 7456 	sub.w	r4, r4, #856	; 0x358
 8017888:	d259      	bcs.n	801793e <m_kalman_3gyro.isra.6.constprop.36+0x3e8e>
 801788a:	edd4 7a00 	vldr	s15, [r4]
 801788e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8017892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017896:	da4c      	bge.n	8017932 <m_kalman_3gyro.isra.6.constprop.36+0x3e82>
 8017898:	461a      	mov	r2, r3
 801789a:	e7eb      	b.n	8017874 <m_kalman_3gyro.isra.6.constprop.36+0x3dc4>
 801789c:	f8dd 3698 	ldr.w	r3, [sp, #1688]	; 0x698
 80178a0:	ed1f 7ab8 	vldr	s14, [pc, #-736]	; 80175c4 <m_kalman_3gyro.isra.6.constprop.36+0x3b14>
 80178a4:	edd3 7a06 	vldr	s15, [r3, #24]
 80178a8:	f8dd 1698 	ldr.w	r1, [sp, #1688]	; 0x698
 80178ac:	f8da 245c 	ldr.w	r2, [sl, #1116]	; 0x45c
 80178b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80178b4:	2301      	movs	r3, #1
 80178b6:	edc1 7a06 	vstr	s15, [r1, #24]
 80178ba:	f88a 3202 	strb.w	r3, [sl, #514]	; 0x202
 80178be:	edd1 7a07 	vldr	s15, [r1, #28]
 80178c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80178c6:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 80178ca:	edc1 7a07 	vstr	s15, [r1, #28]
 80178ce:	f88a 3203 	strb.w	r3, [sl, #515]	; 0x203
 80178d2:	edd1 7a08 	vldr	s15, [r1, #32]
 80178d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80178da:	edc1 7a08 	vstr	s15, [r1, #32]
 80178de:	f88a 3204 	strb.w	r3, [sl, #516]	; 0x204
 80178e2:	d014      	beq.n	801790e <m_kalman_3gyro.isra.6.constprop.36+0x3e5e>
 80178e4:	2a00      	cmp	r2, #0
 80178e6:	f102 0301 	add.w	r3, r2, #1
 80178ea:	dd03      	ble.n	80178f4 <m_kalman_3gyro.isra.6.constprop.36+0x3e44>
 80178ec:	2b00      	cmp	r3, #0
 80178ee:	bfd8      	it	le
 80178f0:	f06f 4300 	mvnle.w	r3, #2147483648	; 0x80000000
 80178f4:	993e      	ldr	r1, [sp, #248]	; 0xf8
 80178f6:	f8ca 345c 	str.w	r3, [sl, #1116]	; 0x45c
 80178fa:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 80178fc:	9b40      	ldr	r3, [sp, #256]	; 0x100
 80178fe:	f8ca 10a0 	str.w	r1, [sl, #160]	; 0xa0
 8017902:	f8ca 20a4 	str.w	r2, [sl, #164]	; 0xa4
 8017906:	f8ca 30a8 	str.w	r3, [sl, #168]	; 0xa8
 801790a:	f7fd bcc8 	b.w	801529e <m_kalman_3gyro.isra.6.constprop.36+0x17ee>
 801790e:	f60a 0398 	addw	r3, sl, #2200	; 0x898
 8017912:	f8da 00a0 	ldr.w	r0, [sl, #160]	; 0xa0
 8017916:	f8da 10a4 	ldr.w	r1, [sl, #164]	; 0xa4
 801791a:	f8da 20a8 	ldr.w	r2, [sl, #168]	; 0xa8
 801791e:	6018      	str	r0, [r3, #0]
 8017920:	f60a 039c 	addw	r3, sl, #2204	; 0x89c
 8017924:	6019      	str	r1, [r3, #0]
 8017926:	f50a 630a 	add.w	r3, sl, #2208	; 0x8a0
 801792a:	601a      	str	r2, [r3, #0]
 801792c:	f240 33e9 	movw	r3, #1001	; 0x3e9
 8017930:	e7e0      	b.n	80178f4 <m_kalman_3gyro.isra.6.constprop.36+0x3e44>
 8017932:	4614      	mov	r4, r2
 8017934:	1c58      	adds	r0, r3, #1
 8017936:	42a0      	cmp	r0, r4
 8017938:	4619      	mov	r1, r3
 801793a:	d38a      	bcc.n	8017852 <m_kalman_3gyro.isra.6.constprop.36+0x3da2>
 801793c:	e000      	b.n	8017940 <m_kalman_3gyro.isra.6.constprop.36+0x3e90>
 801793e:	460b      	mov	r3, r1
 8017940:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 8017944:	3a01      	subs	r2, #1
 8017946:	0092      	lsls	r2, r2, #2
 8017948:	009b      	lsls	r3, r3, #2
 801794a:	a9b6      	add	r1, sp, #728	; 0x2d8
 801794c:	1888      	adds	r0, r1, r2
 801794e:	4419      	add	r1, r3
 8017950:	ed90 7a00 	vldr	s14, [r0]
 8017954:	edd1 7a00 	vldr	s15, [r1]
 8017958:	ee38 6a47 	vsub.f32	s12, s16, s14
 801795c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017960:	a9c3      	add	r1, sp, #780	; 0x30c
 8017962:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8017966:	440a      	add	r2, r1
 8017968:	440b      	add	r3, r1
 801796a:	edd2 7a00 	vldr	s15, [r2]
 801796e:	ed93 7a00 	vldr	s14, [r3]
 8017972:	ee37 7a67 	vsub.f32	s14, s14, s15
 8017976:	eee6 7a87 	vfma.f32	s15, s13, s14
 801797a:	f7fc bec8 	b.w	801470e <m_kalman_3gyro.isra.6.constprop.36+0xc5e>
 801797e:	ed8a 9a2c 	vstr	s18, [sl, #176]	; 0xb0
 8017982:	f7ff ba55 	b.w	8016e30 <m_kalman_3gyro.isra.6.constprop.36+0x3380>
 8017986:	f101 4280 	add.w	r2, r1, #1073741824	; 0x40000000
 801798a:	460b      	mov	r3, r1
 801798c:	3a01      	subs	r2, #1
 801798e:	f7fc befa 	b.w	8014786 <m_kalman_3gyro.isra.6.constprop.36+0xcd6>
 8017992:	ed9f 6a25 	vldr	s12, [pc, #148]	; 8017a28 <m_kalman_3gyro.isra.6.constprop.36+0x3f78>
 8017996:	f8dd 3698 	ldr.w	r3, [sp, #1688]	; 0x698
 801799a:	ee66 6a86 	vmul.f32	s13, s13, s12
 801799e:	ee27 7a06 	vmul.f32	s14, s14, s12
 80179a2:	ee67 7a86 	vmul.f32	s15, s15, s12
 80179a6:	edc3 6a06 	vstr	s13, [r3, #24]
 80179aa:	ed83 7a07 	vstr	s14, [r3, #28]
 80179ae:	edc3 7a08 	vstr	s15, [r3, #32]
 80179b2:	f7ff b91b 	b.w	8016bec <m_kalman_3gyro.isra.6.constprop.36+0x313c>
 80179b6:	b19d      	cbz	r5, 80179e0 <m_kalman_3gyro.isra.6.constprop.36+0x3f30>
 80179b8:	3d01      	subs	r5, #1
 80179ba:	f88a 58ad 	strb.w	r5, [sl, #2221]	; 0x8ad
 80179be:	f8aa 01fc 	strh.w	r0, [sl, #508]	; 0x1fc
 80179c2:	f88a 01fe 	strb.w	r0, [sl, #510]	; 0x1fe
 80179c6:	f88a 0205 	strb.w	r0, [sl, #517]	; 0x205
 80179ca:	f88a 0207 	strb.w	r0, [sl, #519]	; 0x207
 80179ce:	f7fd becd 	b.w	801576c <m_kalman_3gyro.isra.6.constprop.36+0x1cbc>
 80179d2:	4613      	mov	r3, r2
 80179d4:	e7ae      	b.n	8017934 <m_kalman_3gyro.isra.6.constprop.36+0x3e84>
 80179d6:	f101 4280 	add.w	r2, r1, #1073741824	; 0x40000000
 80179da:	460b      	mov	r3, r1
 80179dc:	3a01      	subs	r2, #1
 80179de:	e68e      	b.n	80176fe <m_kalman_3gyro.isra.6.constprop.36+0x3c4e>
 80179e0:	b14e      	cbz	r6, 80179f6 <m_kalman_3gyro.isra.6.constprop.36+0x3f46>
 80179e2:	f8aa 51fc 	strh.w	r5, [sl, #508]	; 0x1fc
 80179e6:	f88a 51fe 	strb.w	r5, [sl, #510]	; 0x1fe
 80179ea:	f88a 5205 	strb.w	r5, [sl, #517]	; 0x205
 80179ee:	f88a 5207 	strb.w	r5, [sl, #519]	; 0x207
 80179f2:	f7fd bebb 	b.w	801576c <m_kalman_3gyro.isra.6.constprop.36+0x1cbc>
 80179f6:	f8dd 3698 	ldr.w	r3, [sp, #1688]	; 0x698
 80179fa:	edd3 6a00 	vldr	s13, [r3]
 80179fe:	ed93 7a01 	vldr	s14, [r3, #4]
 8017a02:	edd3 7a02 	vldr	s15, [r3, #8]
 8017a06:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 8017a0a:	ee66 6a86 	vmul.f32	s13, s13, s12
 8017a0e:	ee27 7a06 	vmul.f32	s14, s14, s12
 8017a12:	ee67 7a86 	vmul.f32	s15, s15, s12
 8017a16:	edc3 6a00 	vstr	s13, [r3]
 8017a1a:	ed83 7a01 	vstr	s14, [r3, #4]
 8017a1e:	edc3 7a02 	vstr	s15, [r3, #8]
 8017a22:	f7fd bea3 	b.w	801576c <m_kalman_3gyro.isra.6.constprop.36+0x1cbc>
 8017a26:	bf00      	nop
 8017a28:	3eaaaaab 	.word	0x3eaaaaab

08017a2c <SpacePointAlgorithm.isra.7>:
 8017a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a30:	ed2d 8b10 	vpush	{d8-d15}
 8017a34:	b0bb      	sub	sp, #236	; 0xec
 8017a36:	f8df e3c8 	ldr.w	lr, [pc, #968]	; 8017e00 <SpacePointAlgorithm.isra.7+0x3d4>
 8017a3a:	f89d 5160 	ldrb.w	r5, [sp, #352]	; 0x160
 8017a3e:	9514      	str	r5, [sp, #80]	; 0x50
 8017a40:	f89d 5168 	ldrb.w	r5, [sp, #360]	; 0x168
 8017a44:	9515      	str	r5, [sp, #84]	; 0x54
 8017a46:	f89d 516c 	ldrb.w	r5, [sp, #364]	; 0x16c
 8017a4a:	9516      	str	r5, [sp, #88]	; 0x58
 8017a4c:	f89d 5170 	ldrb.w	r5, [sp, #368]	; 0x170
 8017a50:	9517      	str	r5, [sp, #92]	; 0x5c
 8017a52:	4682      	mov	sl, r0
 8017a54:	4688      	mov	r8, r1
 8017a56:	4693      	mov	fp, r2
 8017a58:	461d      	mov	r5, r3
 8017a5a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017a5e:	f10d 0c7c 	add.w	ip, sp, #124	; 0x7c
 8017a62:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017a66:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8017a6a:	9e69      	ldr	r6, [sp, #420]	; 0x1a4
 8017a6c:	edcd 0a18 	vstr	s1, [sp, #96]	; 0x60
 8017a70:	e88c 0003 	stmia.w	ip, {r0, r1}
 8017a74:	e9dd 0156 	ldrd	r0, r1, [sp, #344]	; 0x158
 8017a78:	eef0 ba40 	vmov.f32	s23, s0
 8017a7c:	ed8d 1a19 	vstr	s2, [sp, #100]	; 0x64
 8017a80:	eeb0 ea61 	vmov.f32	s28, s3
 8017a84:	eeb0 ba42 	vmov.f32	s22, s4
 8017a88:	eef0 9a62 	vmov.f32	s19, s5
 8017a8c:	eeb0 aa43 	vmov.f32	s20, s6
 8017a90:	eef0 aa63 	vmov.f32	s21, s7
 8017a94:	f7e9 f890 	bl	8000bb8 <__aeabi_d2f>
 8017a98:	f896 38cc 	ldrb.w	r3, [r6, #2252]	; 0x8cc
 8017a9c:	9c54      	ldr	r4, [sp, #336]	; 0x150
 8017a9e:	f89d 9164 	ldrb.w	r9, [sp, #356]	; 0x164
 8017aa2:	9f64      	ldr	r7, [sp, #400]	; 0x190
 8017aa4:	ee0c 0a10 	vmov	s24, r0
 8017aa8:	b923      	cbnz	r3, 8017ab4 <SpacePointAlgorithm.isra.7+0x88>
 8017aaa:	2200      	movs	r2, #0
 8017aac:	2301      	movs	r3, #1
 8017aae:	6032      	str	r2, [r6, #0]
 8017ab0:	f886 38cc 	strb.w	r3, [r6, #2252]	; 0x8cc
 8017ab4:	eddf 7ac6 	vldr	s15, [pc, #792]	; 8017dd0 <SpacePointAlgorithm.isra.7+0x3a4>
 8017ab8:	eec7 7aab 	vdiv.f32	s15, s15, s23
 8017abc:	ee17 0a90 	vmov	r0, s15
 8017ac0:	f7e8 fd4a 	bl	8000558 <__aeabi_f2d>
 8017ac4:	f003 fbce 	bl	801b264 <sqrt>
 8017ac8:	f7e9 f876 	bl	8000bb8 <__aeabi_d2f>
 8017acc:	ed9f 5ac1 	vldr	s10, [pc, #772]	; 8017dd4 <SpacePointAlgorithm.isra.7+0x3a8>
 8017ad0:	ed95 6a01 	vldr	s12, [r5, #4]
 8017ad4:	edd5 7a00 	vldr	s15, [r5]
 8017ad8:	edd5 6a02 	vldr	s13, [r5, #8]
 8017adc:	ed9f 4abe 	vldr	s8, [pc, #760]	; 8017dd8 <SpacePointAlgorithm.isra.7+0x3ac>
 8017ae0:	ed9d 1a20 	vldr	s2, [sp, #128]	; 0x80
 8017ae4:	eddd 0a21 	vldr	s1, [sp, #132]	; 0x84
 8017ae8:	eddd 5a22 	vldr	s11, [sp, #136]	; 0x88
 8017aec:	eddd 4a23 	vldr	s9, [sp, #140]	; 0x8c
 8017af0:	ee26 6a05 	vmul.f32	s12, s12, s10
 8017af4:	ee07 0a10 	vmov	s14, r0
 8017af8:	ee67 7a85 	vmul.f32	s15, s15, s10
 8017afc:	ee66 6a85 	vmul.f32	s13, s13, s10
 8017b00:	ed85 6a01 	vstr	s12, [r5, #4]
 8017b04:	ed9d 6a24 	vldr	s12, [sp, #144]	; 0x90
 8017b08:	edc5 7a00 	vstr	s15, [r5]
 8017b0c:	edc5 6a02 	vstr	s13, [r5, #8]
 8017b10:	ee84 8a07 	vdiv.f32	s16, s8, s14
 8017b14:	ee27 fa01 	vmul.f32	s30, s14, s2
 8017b18:	ee67 ea20 	vmul.f32	s29, s14, s1
 8017b1c:	ee67 8a25 	vmul.f32	s17, s14, s11
 8017b20:	ee67 fa24 	vmul.f32	s31, s14, s9
 8017b24:	ee27 da06 	vmul.f32	s26, s14, s12
 8017b28:	f1b9 0f04 	cmp.w	r9, #4
 8017b2c:	d806      	bhi.n	8017b3c <SpacePointAlgorithm.isra.7+0x110>
 8017b2e:	e8df f019 	tbh	[pc, r9, lsl #1]
 8017b32:	0136      	.short	0x0136
 8017b34:	012b0143 	.word	0x012b0143
 8017b38:	010d0005 	.word	0x010d0005
 8017b3c:	eddf 7aa7 	vldr	s15, [pc, #668]	; 8017ddc <SpacePointAlgorithm.isra.7+0x3b0>
 8017b40:	eddf caa7 	vldr	s25, [pc, #668]	; 8017de0 <SpacePointAlgorithm.isra.7+0x3b4>
 8017b44:	ee69 9aa7 	vmul.f32	s19, s19, s15
 8017b48:	ee2a aa27 	vmul.f32	s20, s20, s15
 8017b4c:	ee6a aaa7 	vmul.f32	s21, s21, s15
 8017b50:	ee69 9a8c 	vmul.f32	s19, s19, s24
 8017b54:	ee2a aa0c 	vmul.f32	s20, s20, s24
 8017b58:	ee6a aa8c 	vmul.f32	s21, s21, s24
 8017b5c:	eef6 da00 	vmov.f32	s27, #96	; 0x3f000000  0.5
 8017b60:	2200      	movs	r2, #0
 8017b62:	2300      	movs	r3, #0
 8017b64:	e9dd 015e 	ldrd	r0, r1, [sp, #376]	; 0x178
 8017b68:	ed96 9a00 	vldr	s18, [r6]
 8017b6c:	f7e8 ffb4 	bl	8000ad8 <__aeabi_dcmpeq>
 8017b70:	b168      	cbz	r0, 8017b8e <SpacePointAlgorithm.isra.7+0x162>
 8017b72:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 8017b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b7a:	f340 80ec 	ble.w	8017d56 <SpacePointAlgorithm.isra.7+0x32a>
 8017b7e:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8017b82:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8017b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b8a:	f140 80e4 	bpl.w	8017d56 <SpacePointAlgorithm.isra.7+0x32a>
 8017b8e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8017b92:	ee79 7a27 	vadd.f32	s15, s18, s15
 8017b96:	ed9f 9a93 	vldr	s18, [pc, #588]	; 8017de4 <SpacePointAlgorithm.isra.7+0x3b8>
 8017b9a:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8017de8 <SpacePointAlgorithm.isra.7+0x3bc>
 8017b9e:	edc6 7a00 	vstr	s15, [r6]
 8017ba2:	ee67 7a89 	vmul.f32	s15, s15, s18
 8017ba6:	ee6b 4a2f 	vmul.f32	s9, s22, s31
 8017baa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8017bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017bb2:	bfb8      	it	lt
 8017bb4:	eef0 7a47 	vmovlt.f32	s15, s14
 8017bb8:	ee88 5a27 	vdiv.f32	s10, s16, s15
 8017bbc:	ed9f 6a8b 	vldr	s12, [pc, #556]	; 8017dec <SpacePointAlgorithm.isra.7+0x3c0>
 8017bc0:	ee6d 5aa8 	vmul.f32	s11, s27, s17
 8017bc4:	ee27 1a8f 	vmul.f32	s2, s15, s30
 8017bc8:	ee67 0aae 	vmul.f32	s1, s15, s29
 8017bcc:	ee64 4aa7 	vmul.f32	s9, s9, s15
 8017bd0:	ee2d 6a06 	vmul.f32	s12, s26, s12
 8017bd4:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8017bd8:	edd8 7a01 	vldr	s15, [r8, #4]
 8017bdc:	ed94 3a09 	vldr	s6, [r4, #36]	; 0x24
 8017be0:	ed94 4a05 	vldr	s8, [r4, #20]
 8017be4:	edd4 6a03 	vldr	s13, [r4, #12]
 8017be8:	edd8 3a00 	vldr	s7, [r8]
 8017bec:	edd4 2a02 	vldr	s5, [r4, #8]
 8017bf0:	edcd 4a37 	vstr	s9, [sp, #220]	; 0xdc
 8017bf4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017bf8:	ed94 7a04 	vldr	s14, [r4, #16]
 8017bfc:	edd4 4a07 	vldr	s9, [r4, #28]
 8017c00:	ed8d 6a38 	vstr	s12, [sp, #224]	; 0xe0
 8017c04:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8017c08:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8017c0c:	ed94 3a00 	vldr	s6, [r4]
 8017c10:	edcd 5a34 	vstr	s11, [sp, #208]	; 0xd0
 8017c14:	ee27 7a87 	vmul.f32	s14, s15, s14
 8017c18:	ee67 7a84 	vmul.f32	s15, s15, s8
 8017c1c:	ed94 4a01 	vldr	s8, [r4, #4]
 8017c20:	edcd 5a35 	vstr	s11, [sp, #212]	; 0xd4
 8017c24:	eee3 6a23 	vfma.f32	s13, s6, s7
 8017c28:	462b      	mov	r3, r5
 8017c2a:	ad1a      	add	r5, sp, #104	; 0x68
 8017c2c:	ed94 3a0b 	vldr	s6, [r4, #44]	; 0x2c
 8017c30:	edcd 5a36 	vstr	s11, [sp, #216]	; 0xd8
 8017c34:	eea3 7a84 	vfma.f32	s14, s7, s8
 8017c38:	4650      	mov	r0, sl
 8017c3a:	a92e      	add	r1, sp, #184	; 0xb8
 8017c3c:	ed98 4a02 	vldr	s8, [r8, #8]
 8017c40:	edd4 5a08 	vldr	s11, [r4, #32]
 8017c44:	ed8d 5a25 	vstr	s10, [sp, #148]	; 0x94
 8017c48:	ee34 6a43 	vsub.f32	s12, s8, s6
 8017c4c:	eee2 7aa3 	vfma.f32	s15, s5, s7
 8017c50:	f10d 0a94 	add.w	sl, sp, #148	; 0x94
 8017c54:	f8df e1ac 	ldr.w	lr, [pc, #428]	; 8017e04 <SpacePointAlgorithm.isra.7+0x3d8>
 8017c58:	ed94 4a06 	vldr	s8, [r4, #24]
 8017c5c:	ed8d 5a26 	vstr	s10, [sp, #152]	; 0x98
 8017c60:	eea4 7a86 	vfma.f32	s14, s9, s12
 8017c64:	465a      	mov	r2, fp
 8017c66:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8017e08 <SpacePointAlgorithm.isra.7+0x3dc>
 8017c6a:	ed8d 1a2e 	vstr	s2, [sp, #184]	; 0xb8
 8017c6e:	eee5 7a86 	vfma.f32	s15, s11, s12
 8017c72:	f8df 8198 	ldr.w	r8, [pc, #408]	; 8017e0c <SpacePointAlgorithm.isra.7+0x3e0>
 8017c76:	eee6 6a04 	vfma.f32	s13, s12, s8
 8017c7a:	ed8d 7a1d 	vstr	s14, [sp, #116]	; 0x74
 8017c7e:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8017c82:	ee2b ba07 	vmul.f32	s22, s22, s14
 8017c86:	edcd 6a1c 	vstr	s13, [sp, #112]	; 0x70
 8017c8a:	ed8d 1a2f 	vstr	s2, [sp, #188]	; 0xbc
 8017c8e:	ed8d 1a30 	vstr	s2, [sp, #192]	; 0xc0
 8017c92:	edcd 0a31 	vstr	s1, [sp, #196]	; 0xc4
 8017c96:	edcd 0a32 	vstr	s1, [sp, #200]	; 0xc8
 8017c9a:	edcd 0a33 	vstr	s1, [sp, #204]	; 0xcc
 8017c9e:	edcd 7a1e 	vstr	s15, [sp, #120]	; 0x78
 8017ca2:	ed8d ba39 	vstr	s22, [sp, #228]	; 0xe4
 8017ca6:	ed8d 5a27 	vstr	s10, [sp, #156]	; 0x9c
 8017caa:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8017cac:	9402      	str	r4, [sp, #8]
 8017cae:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8017cb0:	f88d 4068 	strb.w	r4, [sp, #104]	; 0x68
 8017cb4:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8017cb6:	f88d 4069 	strb.w	r4, [sp, #105]	; 0x69
 8017cba:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8017cbc:	f88d 406a 	strb.w	r4, [sp, #106]	; 0x6a
 8017cc0:	9c68      	ldr	r4, [sp, #416]	; 0x1a0
 8017cc2:	9411      	str	r4, [sp, #68]	; 0x44
 8017cc4:	ed9d 7b60 	vldr	d7, [sp, #384]	; 0x180
 8017cc8:	9c67      	ldr	r4, [sp, #412]	; 0x19c
 8017cca:	9410      	str	r4, [sp, #64]	; 0x40
 8017ccc:	9c66      	ldr	r4, [sp, #408]	; 0x198
 8017cce:	9504      	str	r5, [sp, #16]
 8017cd0:	ed8d 7b08 	vstr	d7, [sp, #32]
 8017cd4:	e9cd 740e 	strd	r7, r4, [sp, #56]	; 0x38
 8017cd8:	ed9d 7b5e 	vldr	d7, [sp, #376]	; 0x178
 8017cdc:	9c63      	ldr	r4, [sp, #396]	; 0x18c
 8017cde:	940c      	str	r4, [sp, #48]	; 0x30
 8017ce0:	9c62      	ldr	r4, [sp, #392]	; 0x188
 8017ce2:	940b      	str	r4, [sp, #44]	; 0x2c
 8017ce4:	ad1b      	add	r5, sp, #108	; 0x6c
 8017ce6:	9c55      	ldr	r4, [sp, #340]	; 0x154
 8017ce8:	f8cd 900c 	str.w	r9, [sp, #12]
 8017cec:	ed8d 7b06 	vstr	d7, [sp, #24]
 8017cf0:	eeb0 2a4c 	vmov.f32	s4, s24
 8017cf4:	eef0 1a6b 	vmov.f32	s3, s23
 8017cf8:	eeb0 1a6a 	vmov.f32	s2, s21
 8017cfc:	eef0 0a4a 	vmov.f32	s1, s20
 8017d00:	eeb0 0a69 	vmov.f32	s0, s19
 8017d04:	e9cd 1a00 	strd	r1, sl, [sp]
 8017d08:	edcd ca28 	vstr	s25, [sp, #160]	; 0xa0
 8017d0c:	a91c      	add	r1, sp, #112	; 0x70
 8017d0e:	edcd ca29 	vstr	s25, [sp, #164]	; 0xa4
 8017d12:	edcd ca2a 	vstr	s25, [sp, #168]	; 0xa8
 8017d16:	9612      	str	r6, [sp, #72]	; 0x48
 8017d18:	940a      	str	r4, [sp, #40]	; 0x28
 8017d1a:	950d      	str	r5, [sp, #52]	; 0x34
 8017d1c:	f8cd e0ac 	str.w	lr, [sp, #172]	; 0xac
 8017d20:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
 8017d24:	f8cd 80b0 	str.w	r8, [sp, #176]	; 0xb0
 8017d28:	f7fb fec2 	bl	8013ab0 <m_kalman_3gyro.isra.6.constprop.36>
 8017d2c:	4651      	mov	r1, sl
 8017d2e:	9862      	ldr	r0, [sp, #392]	; 0x188
 8017d30:	f7f7 fbdc 	bl	800f4ec <m_q2dcm_eml>
 8017d34:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8017d36:	68fb      	ldr	r3, [r7, #12]
 8017d38:	6013      	str	r3, [r2, #0]
 8017d3a:	693b      	ldr	r3, [r7, #16]
 8017d3c:	6053      	str	r3, [r2, #4]
 8017d3e:	697b      	ldr	r3, [r7, #20]
 8017d40:	6093      	str	r3, [r2, #8]
 8017d42:	b03b      	add	sp, #236	; 0xec
 8017d44:	ecbd 8b10 	vpop	{d8-d15}
 8017d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d4c:	eddf ca28 	vldr	s25, [pc, #160]	; 8017df0 <SpacePointAlgorithm.isra.7+0x3c4>
 8017d50:	eef7 da00 	vmov.f32	s27, #112	; 0x3f800000  1.0
 8017d54:	e704      	b.n	8017b60 <SpacePointAlgorithm.isra.7+0x134>
 8017d56:	eddf 7a27 	vldr	s15, [pc, #156]	; 8017df4 <SpacePointAlgorithm.isra.7+0x3c8>
 8017d5a:	ed9f 6a24 	vldr	s12, [pc, #144]	; 8017dec <SpacePointAlgorithm.isra.7+0x3c0>
 8017d5e:	ee3e ea27 	vadd.f32	s28, s28, s15
 8017d62:	eddd 7a19 	vldr	s15, [sp, #100]	; 0x64
 8017d66:	ee27 1a8f 	vmul.f32	s2, s15, s30
 8017d6a:	eddd 7a18 	vldr	s15, [sp, #96]	; 0x60
 8017d6e:	2300      	movs	r3, #0
 8017d70:	6033      	str	r3, [r6, #0]
 8017d72:	ee67 0aae 	vmul.f32	s1, s15, s29
 8017d76:	ee6d 5aa8 	vmul.f32	s11, s27, s17
 8017d7a:	ee6b 4a2f 	vmul.f32	s9, s22, s31
 8017d7e:	ee88 5a0e 	vdiv.f32	s10, s16, s28
 8017d82:	ee2d 6a06 	vmul.f32	s12, s26, s12
 8017d86:	e725      	b.n	8017bd4 <SpacePointAlgorithm.isra.7+0x1a8>
 8017d88:	ee69 9a8c 	vmul.f32	s19, s19, s24
 8017d8c:	ee2a aa0c 	vmul.f32	s20, s20, s24
 8017d90:	ee6a aa8c 	vmul.f32	s21, s21, s24
 8017d94:	eddf ca18 	vldr	s25, [pc, #96]	; 8017df8 <SpacePointAlgorithm.isra.7+0x3cc>
 8017d98:	eef1 da04 	vmov.f32	s27, #20	; 0x40a00000  5.0
 8017d9c:	e6e0      	b.n	8017b60 <SpacePointAlgorithm.isra.7+0x134>
 8017d9e:	eddf 7a17 	vldr	s15, [pc, #92]	; 8017dfc <SpacePointAlgorithm.isra.7+0x3d0>
 8017da2:	eddf ca0f 	vldr	s25, [pc, #60]	; 8017de0 <SpacePointAlgorithm.isra.7+0x3b4>
 8017da6:	ee69 9aa7 	vmul.f32	s19, s19, s15
 8017daa:	ee2a aa27 	vmul.f32	s20, s20, s15
 8017dae:	ee6a aaa7 	vmul.f32	s21, s21, s15
 8017db2:	eef7 da00 	vmov.f32	s27, #112	; 0x3f800000  1.0
 8017db6:	e6d3      	b.n	8017b60 <SpacePointAlgorithm.isra.7+0x134>
 8017db8:	ee69 9a8c 	vmul.f32	s19, s19, s24
 8017dbc:	ee2a aa0c 	vmul.f32	s20, s20, s24
 8017dc0:	ee6a aa8c 	vmul.f32	s21, s21, s24
 8017dc4:	eddf ca0a 	vldr	s25, [pc, #40]	; 8017df0 <SpacePointAlgorithm.isra.7+0x3c4>
 8017dc8:	eef7 da00 	vmov.f32	s27, #112	; 0x3f800000  1.0
 8017dcc:	e6c8      	b.n	8017b60 <SpacePointAlgorithm.isra.7+0x134>
 8017dce:	bf00      	nop
 8017dd0:	3c03126f 	.word	0x3c03126f
 8017dd4:	3c8efa35 	.word	0x3c8efa35
 8017dd8:	3b656042 	.word	0x3b656042
 8017ddc:	42c80000 	.word	0x42c80000
 8017de0:	3a83126f 	.word	0x3a83126f
 8017de4:	3d4ccccd 	.word	0x3d4ccccd
 8017de8:	3e4ccccd 	.word	0x3e4ccccd
 8017dec:	3f333333 	.word	0x3f333333
 8017df0:	3ac49ba6 	.word	0x3ac49ba6
 8017df4:	358637bd 	.word	0x358637bd
 8017df8:	3727c5ac 	.word	0x3727c5ac
 8017dfc:	3dcccccd 	.word	0x3dcccccd
 8017e00:	0801d164 	.word	0x0801d164
 8017e04:	3b449ba6 	.word	0x3b449ba6
 8017e08:	3a9d4952 	.word	0x3a9d4952
 8017e0c:	3c23d70a 	.word	0x3c23d70a

08017e10 <iNemo_update_6X.constprop.34>:
 8017e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e14:	4ce6      	ldr	r4, [pc, #920]	; (80181b0 <iNemo_update_6X.constprop.34+0x3a0>)
 8017e16:	4fe7      	ldr	r7, [pc, #924]	; (80181b4 <iNemo_update_6X.constprop.34+0x3a4>)
 8017e18:	f994 343d 	ldrsb.w	r3, [r4, #1085]	; 0x43d
 8017e1c:	ee07 3a90 	vmov	s15, r3
 8017e20:	f994 3440 	ldrsb.w	r3, [r4, #1088]	; 0x440
 8017e24:	ee06 3a90 	vmov	s13, r3
 8017e28:	f994 3458 	ldrsb.w	r3, [r4, #1112]	; 0x458
 8017e2c:	ee07 3a10 	vmov	s14, r3
 8017e30:	f994 3455 	ldrsb.w	r3, [r4, #1109]	; 0x455
 8017e34:	ed2d 8b08 	vpush	{d8-d11}
 8017e38:	ee09 3a90 	vmov	s19, r3
 8017e3c:	f994 343c 	ldrsb.w	r3, [r4, #1084]	; 0x43c
 8017e40:	7b3a      	ldrb	r2, [r7, #12]
 8017e42:	ee01 3a90 	vmov	s3, r3
 8017e46:	f994 343f 	ldrsb.w	r3, [r4, #1087]	; 0x43f
 8017e4a:	ee02 3a10 	vmov	s4, r3
 8017e4e:	f994 3457 	ldrsb.w	r3, [r4, #1111]	; 0x457
 8017e52:	ee02 3a90 	vmov	s5, r3
 8017e56:	f994 3454 	ldrsb.w	r3, [r4, #1108]	; 0x454
 8017e5a:	ee03 3a90 	vmov	s7, r3
 8017e5e:	f994 3443 	ldrsb.w	r3, [r4, #1091]	; 0x443
 8017e62:	ee08 3a10 	vmov	s16, r3
 8017e66:	f994 345b 	ldrsb.w	r3, [r4, #1115]	; 0x45b
 8017e6a:	ee08 3a90 	vmov	s17, r3
 8017e6e:	f994 343e 	ldrsb.w	r3, [r4, #1086]	; 0x43e
 8017e72:	f604 05cc 	addw	r5, r4, #2252	; 0x8cc
 8017e76:	edd5 4a07 	vldr	s9, [r5, #28]
 8017e7a:	ed95 3a06 	vldr	s6, [r5, #24]
 8017e7e:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 8017e82:	ed95 4a09 	vldr	s8, [r5, #36]	; 0x24
 8017e86:	ed95 5a08 	vldr	s10, [r5, #32]
 8017e8a:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 8017e8e:	ee00 3a90 	vmov	s1, r3
 8017e92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017e96:	f994 3441 	ldrsb.w	r3, [r4, #1089]	; 0x441
 8017e9a:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8017e9e:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8017ea2:	ee01 3a10 	vmov	s2, r3
 8017ea6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8017eaa:	f994 3442 	ldrsb.w	r3, [r4, #1090]	; 0x442
 8017eae:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8017eb2:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 8017eb6:	eee1 7a83 	vfma.f32	s15, s3, s6
 8017eba:	b0e5      	sub	sp, #404	; 0x194
 8017ebc:	f10d 0958 	add.w	r9, sp, #88	; 0x58
 8017ec0:	ee01 3a90 	vmov	s3, r3
 8017ec4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017ec8:	f994 3459 	ldrsb.w	r3, [r4, #1113]	; 0x459
 8017ecc:	ee27 7a06 	vmul.f32	s14, s14, s12
 8017ed0:	eef8 2ae2 	vcvt.f32.s32	s5, s5
 8017ed4:	eee3 6a02 	vfma.f32	s13, s6, s4
 8017ed8:	4680      	mov	r8, r0
 8017eda:	ee02 3a10 	vmov	s4, r3
 8017ede:	eef8 9ae9 	vcvt.f32.s32	s19, s19
 8017ee2:	f994 3456 	ldrsb.w	r3, [r4, #1110]	; 0x456
 8017ee6:	ee69 9a86 	vmul.f32	s19, s19, s12
 8017eea:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 8017eee:	eea4 7a22 	vfma.f32	s14, s8, s5
 8017ef2:	ee02 3a90 	vmov	s5, r3
 8017ef6:	f994 345a 	ldrsb.w	r3, [r4, #1114]	; 0x45a
 8017efa:	eee3 9a84 	vfma.f32	s19, s7, s8
 8017efe:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8017f02:	ee03 3a90 	vmov	s7, r3
 8017f06:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 8017f0a:	f994 3444 	ldrsb.w	r3, [r4, #1092]	; 0x444
 8017f0e:	ee28 8a24 	vmul.f32	s16, s16, s9
 8017f12:	ee68 8a86 	vmul.f32	s17, s17, s12
 8017f16:	ee04 3a90 	vmov	s9, r3
 8017f1a:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8017f1e:	f994 345c 	ldrsb.w	r3, [r4, #1116]	; 0x45c
 8017f22:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8017f26:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8017f2a:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 8017f2e:	eef8 2ae2 	vcvt.f32.s32	s5, s5
 8017f32:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 8017f36:	ee06 3a10 	vmov	s12, r3
 8017f3a:	eee0 7a85 	vfma.f32	s15, s1, s10
 8017f3e:	2300      	movs	r3, #0
 8017f40:	e9c9 3300 	strd	r3, r3, [r9]
 8017f44:	eee5 6a01 	vfma.f32	s13, s10, s2
 8017f48:	f8c9 3008 	str.w	r3, [r9, #8]
 8017f4c:	eea3 8a21 	vfma.f32	s16, s6, s3
 8017f50:	eea5 7a82 	vfma.f32	s14, s11, s4
 8017f54:	eee2 9aa5 	vfma.f32	s19, s5, s11
 8017f58:	eee4 8a23 	vfma.f32	s17, s8, s7
 8017f5c:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8017f60:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8017f64:	eef0 ba40 	vmov.f32	s23, s0
 8017f68:	eea5 8a24 	vfma.f32	s16, s10, s9
 8017f6c:	eeb1 ba66 	vneg.f32	s22, s13
 8017f70:	eef1 aa67 	vneg.f32	s21, s15
 8017f74:	eeb1 aa47 	vneg.f32	s20, s14
 8017f78:	eef1 9a69 	vneg.f32	s19, s19
 8017f7c:	eee5 8a86 	vfma.f32	s17, s11, s12
 8017f80:	2a00      	cmp	r2, #0
 8017f82:	f000 8125 	beq.w	80181d0 <iNemo_update_6X.constprop.34+0x3c0>
 8017f86:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8017f8a:	f8df a23c 	ldr.w	sl, [pc, #572]	; 80181c8 <iNemo_update_6X.constprop.34+0x3b8>
 8017f8e:	f8df b23c 	ldr.w	fp, [pc, #572]	; 80181cc <iNemo_update_6X.constprop.34+0x3bc>
 8017f92:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8017f96:	eee8 7a08 	vfma.f32	s15, s16, s16
 8017f9a:	ee17 0a90 	vmov	r0, s15
 8017f9e:	f7e8 fadb 	bl	8000558 <__aeabi_f2d>
 8017fa2:	f003 f95f 	bl	801b264 <sqrt>
 8017fa6:	f7e8 fe07 	bl	8000bb8 <__aeabi_d2f>
 8017faa:	ee07 0a90 	vmov	s15, r0
 8017fae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017fb2:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8017fb6:	ee2b ba27 	vmul.f32	s22, s22, s15
 8017fba:	ee6a aaa7 	vmul.f32	s21, s21, s15
 8017fbe:	ee28 8a27 	vmul.f32	s16, s16, s15
 8017fc2:	f894 29fd 	ldrb.w	r2, [r4, #2557]	; 0x9fd
 8017fc6:	f894 39fc 	ldrb.w	r3, [r4, #2556]	; 0x9fc
 8017fca:	6fa9      	ldr	r1, [r5, #120]	; 0x78
 8017fcc:	f8c5 1088 	str.w	r1, [r5, #136]	; 0x88
 8017fd0:	ee09 2a10 	vmov	s18, r2
 8017fd4:	4978      	ldr	r1, [pc, #480]	; (80181b8 <iNemo_update_6X.constprop.34+0x3a8>)
 8017fd6:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 8017fd8:	f8d5 6080 	ldr.w	r6, [r5, #128]	; 0x80
 8017fdc:	f8c5 208c 	str.w	r2, [r5, #140]	; 0x8c
 8017fe0:	f043 0302 	orr.w	r3, r3, #2
 8017fe4:	22f8      	movs	r2, #248	; 0xf8
 8017fe6:	f8d5 c084 	ldr.w	ip, [r5, #132]	; 0x84
 8017fea:	f8c5 6090 	str.w	r6, [r5, #144]	; 0x90
 8017fee:	f083 0301 	eor.w	r3, r3, #1
 8017ff2:	188e      	adds	r6, r1, r2
 8017ff4:	a826      	add	r0, sp, #152	; 0x98
 8017ff6:	f884 39fc 	strb.w	r3, [r4, #2556]	; 0x9fc
 8017ffa:	f8c5 c094 	str.w	ip, [r5, #148]	; 0x94
 8017ffe:	f002 f803 	bl	801a008 <memcpy>
 8018002:	f506 7c9b 	add.w	ip, r6, #310	; 0x136
 8018006:	6a30      	ldr	r0, [r6, #32]
 8018008:	f8cd c050 	str.w	ip, [sp, #80]	; 0x50
 801800c:	2300      	movs	r3, #0
 801800e:	f506 7e9a 	add.w	lr, r6, #308	; 0x134
 8018012:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
 8018016:	f206 1235 	addw	r2, r6, #309	; 0x135
 801801a:	f8cd e048 	str.w	lr, [sp, #72]	; 0x48
 801801e:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8018022:	9213      	str	r2, [sp, #76]	; 0x4c
 8018024:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
 8018028:	aa1d      	add	r2, sp, #116	; 0x74
 801802a:	632b      	str	r3, [r5, #48]	; 0x30
 801802c:	636b      	str	r3, [r5, #52]	; 0x34
 801802e:	63ab      	str	r3, [r5, #56]	; 0x38
 8018030:	4962      	ldr	r1, [pc, #392]	; (80181bc <iNemo_update_6X.constprop.34+0x3ac>)
 8018032:	f8cd a0ac 	str.w	sl, [sp, #172]	; 0xac
 8018036:	f10d 0a64 	add.w	sl, sp, #100	; 0x64
 801803a:	932a      	str	r3, [sp, #168]	; 0xa8
 801803c:	9210      	str	r2, [sp, #64]	; 0x40
 801803e:	ed8d ba2c 	vstr	s22, [sp, #176]	; 0xb0
 8018042:	edcd aa2d 	vstr	s21, [sp, #180]	; 0xb4
 8018046:	ed8d 8a2e 	vstr	s16, [sp, #184]	; 0xb8
 801804a:	ed8d aa2f 	vstr	s20, [sp, #188]	; 0xbc
 801804e:	edcd 9a30 	vstr	s19, [sp, #192]	; 0xc0
 8018052:	edcd 8a31 	vstr	s17, [sp, #196]	; 0xc4
 8018056:	f8cd b0a4 	str.w	fp, [sp, #164]	; 0xa4
 801805a:	9115      	str	r1, [sp, #84]	; 0x54
 801805c:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8018060:	f7e8 fa7a 	bl	8000558 <__aeabi_f2d>
 8018064:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8018068:	f894 09de 	ldrb.w	r0, [r4, #2526]	; 0x9de
 801806c:	ed96 ba0b 	vldr	s22, [r6, #44]	; 0x2c
 8018070:	edd6 aa0a 	vldr	s21, [r6, #40]	; 0x28
 8018074:	ed96 aa03 	vldr	s20, [r6, #12]
 8018078:	edd6 9a02 	vldr	s19, [r6, #8]
 801807c:	edd6 8a01 	vldr	s17, [r6, #4]
 8018080:	ed96 8a00 	vldr	s16, [r6]
 8018084:	f7e8 fa46 	bl	8000514 <__aeabi_ui2d>
 8018088:	eeb8 9a49 	vcvt.f32.u32	s18, s18
 801808c:	f894 39dc 	ldrb.w	r3, [r4, #2524]	; 0x9dc
 8018090:	f894 c9da 	ldrb.w	ip, [r4, #2522]	; 0x9da
 8018094:	f894 29d9 	ldrb.w	r2, [r4, #2521]	; 0x9d9
 8018098:	f894 e9db 	ldrb.w	lr, [r4, #2523]	; 0x9db
 801809c:	ee29 9a2b 	vmul.f32	s18, s18, s23
 80180a0:	edd6 ba0c 	vldr	s23, [r6, #48]	; 0x30
 80180a4:	9308      	str	r3, [sp, #32]
 80180a6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80180aa:	f894 39d8 	ldrb.w	r3, [r4, #2520]	; 0x9d8
 80180ae:	6930      	ldr	r0, [r6, #16]
 80180b0:	e9cd 3204 	strd	r3, r2, [sp, #16]
 80180b4:	e9cd ce06 	strd	ip, lr, [sp, #24]
 80180b8:	f7e8 fa4e 	bl	8000558 <__aeabi_f2d>
 80180bc:	ae35      	add	r6, sp, #212	; 0xd4
 80180be:	f50d 7c82 	add.w	ip, sp, #260	; 0x104
 80180c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80180c6:	eeb0 0a49 	vmov.f32	s0, s18
 80180ca:	eef0 3a6b 	vmov.f32	s7, s23
 80180ce:	eeb0 3a4b 	vmov.f32	s6, s22
 80180d2:	eef0 2a6a 	vmov.f32	s5, s21
 80180d6:	eeb0 2a4a 	vmov.f32	s4, s20
 80180da:	eef0 1a69 	vmov.f32	s3, s19
 80180de:	eeb0 1a68 	vmov.f32	s2, s17
 80180e2:	eef0 0a48 	vmov.f32	s1, s16
 80180e6:	ab32      	add	r3, sp, #200	; 0xc8
 80180e8:	aa2c      	add	r2, sp, #176	; 0xb0
 80180ea:	a929      	add	r1, sp, #164	; 0xa4
 80180ec:	a848      	add	r0, sp, #288	; 0x120
 80180ee:	e9cd 6c00 	strd	r6, ip, [sp]
 80180f2:	f7ff fc9b 	bl	8017a2c <SpacePointAlgorithm.isra.7>
 80180f6:	f1b8 0f00 	cmp.w	r8, #0
 80180fa:	d00f      	beq.n	801811c <iNemo_update_6X.constprop.34+0x30c>
 80180fc:	f8da 2000 	ldr.w	r2, [sl]
 8018100:	f8da 3004 	ldr.w	r3, [sl, #4]
 8018104:	f8c8 2000 	str.w	r2, [r8]
 8018108:	f8c8 3004 	str.w	r3, [r8, #4]
 801810c:	f8da 2008 	ldr.w	r2, [sl, #8]
 8018110:	f8da 300c 	ldr.w	r3, [sl, #12]
 8018114:	f8c8 2008 	str.w	r2, [r8, #8]
 8018118:	f8c8 300c 	str.w	r3, [r8, #12]
 801811c:	4b28      	ldr	r3, [pc, #160]	; (80181c0 <iNemo_update_6X.constprop.34+0x3b0>)
 801811e:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8018122:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8018126:	f894 2afa 	ldrb.w	r2, [r4, #2810]	; 0xafa
 801812a:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 801812e:	f8c3 10fc 	str.w	r1, [r3, #252]	; 0xfc
 8018132:	2a01      	cmp	r2, #1
 8018134:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8018138:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
 801813c:	d119      	bne.n	8018172 <iNemo_update_6X.constprop.34+0x362>
 801813e:	f8da 2004 	ldr.w	r2, [sl, #4]
 8018142:	f8da 6000 	ldr.w	r6, [sl]
 8018146:	f8da 0008 	ldr.w	r0, [sl, #8]
 801814a:	f8da 100c 	ldr.w	r1, [sl, #12]
 801814e:	67ea      	str	r2, [r5, #124]	; 0x7c
 8018150:	f8c5 208c 	str.w	r2, [r5, #140]	; 0x8c
 8018154:	2200      	movs	r2, #0
 8018156:	67ae      	str	r6, [r5, #120]	; 0x78
 8018158:	f8c5 6088 	str.w	r6, [r5, #136]	; 0x88
 801815c:	f8c5 0080 	str.w	r0, [r5, #128]	; 0x80
 8018160:	f8c5 0090 	str.w	r0, [r5, #144]	; 0x90
 8018164:	f8c5 1084 	str.w	r1, [r5, #132]	; 0x84
 8018168:	f8c5 1094 	str.w	r1, [r5, #148]	; 0x94
 801816c:	f884 29e8 	strb.w	r2, [r4, #2536]	; 0x9e8
 8018170:	733a      	strb	r2, [r7, #12]
 8018172:	eddf 7a14 	vldr	s15, [pc, #80]	; 80181c4 <iNemo_update_6X.constprop.34+0x3b4>
 8018176:	ed99 6a00 	vldr	s12, [r9]
 801817a:	edd9 6a01 	vldr	s13, [r9, #4]
 801817e:	ed99 7a02 	vldr	s14, [r9, #8]
 8018182:	f894 2af9 	ldrb.w	r2, [r4, #2809]	; 0xaf9
 8018186:	ee26 5a27 	vmul.f32	s10, s12, s15
 801818a:	ee66 5aa7 	vmul.f32	s11, s13, s15
 801818e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018192:	ed85 5a1b 	vstr	s10, [r5, #108]	; 0x6c
 8018196:	edc5 5a1c 	vstr	s11, [r5, #112]	; 0x70
 801819a:	edc5 7a1d 	vstr	s15, [r5, #116]	; 0x74
 801819e:	b1e2      	cbz	r2, 80181da <iNemo_update_6X.constprop.34+0x3ca>
 80181a0:	f894 2b08 	ldrb.w	r2, [r4, #2824]	; 0xb08
 80181a4:	2a09      	cmp	r2, #9
 80181a6:	d825      	bhi.n	80181f4 <iNemo_update_6X.constprop.34+0x3e4>
 80181a8:	3201      	adds	r2, #1
 80181aa:	f884 2b08 	strb.w	r2, [r4, #2824]	; 0xb08
 80181ae:	e016      	b.n	80181de <iNemo_update_6X.constprop.34+0x3ce>
 80181b0:	200013d0 	.word	0x200013d0
 80181b4:	20000000 	.word	0x20000000
 80181b8:	20001c9c 	.word	0x20001c9c
 80181bc:	20000010 	.word	0x20000010
 80181c0:	20001dd0 	.word	0x20001dd0
 80181c4:	42652ee1 	.word	0x42652ee1
 80181c8:	bf3504f3 	.word	0xbf3504f3
 80181cc:	3f3504f3 	.word	0x3f3504f3
 80181d0:	f8df a030 	ldr.w	sl, [pc, #48]	; 8018204 <iNemo_update_6X.constprop.34+0x3f4>
 80181d4:	f8df b030 	ldr.w	fp, [pc, #48]	; 8018208 <iNemo_update_6X.constprop.34+0x3f8>
 80181d8:	e6f3      	b.n	8017fc2 <iNemo_update_6X.constprop.34+0x1b2>
 80181da:	f884 2b08 	strb.w	r2, [r4, #2824]	; 0xb08
 80181de:	f894 39fc 	ldrb.w	r3, [r4, #2556]	; 0x9fc
 80181e2:	f083 0302 	eor.w	r3, r3, #2
 80181e6:	f884 39fc 	strb.w	r3, [r4, #2556]	; 0x9fc
 80181ea:	b065      	add	sp, #404	; 0x194
 80181ec:	ecbd 8b08 	vpop	{d8-d11}
 80181f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181f4:	ed83 6a22 	vstr	s12, [r3, #136]	; 0x88
 80181f8:	edc3 6a23 	vstr	s13, [r3, #140]	; 0x8c
 80181fc:	ed83 7a24 	vstr	s14, [r3, #144]	; 0x90
 8018200:	e7ed      	b.n	80181de <iNemo_update_6X.constprop.34+0x3ce>
 8018202:	bf00      	nop
 8018204:	bf333333 	.word	0xbf333333
 8018208:	3f333333 	.word	0x3f333333

0801820c <iNemo_update.constprop.35>:
 801820c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018210:	4cf0      	ldr	r4, [pc, #960]	; (80185d4 <iNemo_update.constprop.35+0x3c8>)
 8018212:	f994 3418 	ldrsb.w	r3, [r4, #1048]	; 0x418
 8018216:	f994 2437 	ldrsb.w	r2, [r4, #1079]	; 0x437
 801821a:	f994 a41a 	ldrsb.w	sl, [r4, #1050]	; 0x41a
 801821e:	f994 7420 	ldrsb.w	r7, [r4, #1056]	; 0x420
 8018222:	f994 9436 	ldrsb.w	r9, [r4, #1078]	; 0x436
 8018226:	f994 6438 	ldrsb.w	r6, [r4, #1080]	; 0x438
 801822a:	f994 1426 	ldrsb.w	r1, [r4, #1062]	; 0x426
 801822e:	f994 e424 	ldrsb.w	lr, [r4, #1060]	; 0x424
 8018232:	f994 c427 	ldrsb.w	ip, [r4, #1063]	; 0x427
 8018236:	ed2d 8b0c 	vpush	{d8-d13}
 801823a:	ee0c 3a10 	vmov	s24, r3
 801823e:	f994 3419 	ldrsb.w	r3, [r4, #1049]	; 0x419
 8018242:	ee07 3a90 	vmov	s15, r3
 8018246:	f994 341b 	ldrsb.w	r3, [r4, #1051]	; 0x41b
 801824a:	ee0b 3a90 	vmov	s23, r3
 801824e:	f994 341c 	ldrsb.w	r3, [r4, #1052]	; 0x41c
 8018252:	ee06 3a10 	vmov	s12, r3
 8018256:	f994 341d 	ldrsb.w	r3, [r4, #1053]	; 0x41d
 801825a:	ee00 3a90 	vmov	s1, r3
 801825e:	f994 341f 	ldrsb.w	r3, [r4, #1055]	; 0x41f
 8018262:	ee0c 3a90 	vmov	s25, r3
 8018266:	f994 341e 	ldrsb.w	r3, [r4, #1054]	; 0x41e
 801826a:	b0e7      	sub	sp, #412	; 0x19c
 801826c:	ee01 3a90 	vmov	s3, r3
 8018270:	f994 3425 	ldrsb.w	r3, [r4, #1061]	; 0x425
 8018274:	f10d 0860 	add.w	r8, sp, #96	; 0x60
 8018278:	ee08 3a10 	vmov	s16, r3
 801827c:	2300      	movs	r3, #0
 801827e:	e9c8 3300 	strd	r3, r3, [r8]
 8018282:	f8c8 3008 	str.w	r3, [r8, #8]
 8018286:	f994 3428 	ldrsb.w	r3, [r4, #1064]	; 0x428
 801828a:	ee08 3a90 	vmov	s17, r3
 801828e:	f994 3429 	ldrsb.w	r3, [r4, #1065]	; 0x429
 8018292:	f604 350c 	addw	r5, r4, #2828	; 0xb0c
 8018296:	edd5 2a09 	vldr	s5, [r5, #36]	; 0x24
 801829a:	ed95 3a03 	vldr	s6, [r5, #12]
 801829e:	ed95 1a06 	vldr	s2, [r5, #24]
 80182a2:	ed95 aa07 	vldr	s20, [r5, #28]
 80182a6:	edd5 3a08 	vldr	s7, [r5, #32]
 80182aa:	edd5 9a0a 	vldr	s19, [r5, #40]	; 0x28
 80182ae:	ed95 4a0b 	vldr	s8, [r5, #44]	; 0x2c
 80182b2:	ed95 9a04 	vldr	s18, [r5, #16]
 80182b6:	edd5 4a05 	vldr	s9, [r5, #20]
 80182ba:	ee06 3a90 	vmov	s13, r3
 80182be:	f994 342b 	ldrsb.w	r3, [r4, #1067]	; 0x42b
 80182c2:	ee05 3a10 	vmov	s10, r3
 80182c6:	f994 342a 	ldrsb.w	r3, [r4, #1066]	; 0x42a
 80182ca:	ee0a 3a90 	vmov	s21, r3
 80182ce:	f994 342c 	ldrsb.w	r3, [r4, #1068]	; 0x42c
 80182d2:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 80182d6:	ee02 3a10 	vmov	s4, r3
 80182da:	f994 3434 	ldrsb.w	r3, [r4, #1076]	; 0x434
 80182de:	eef8 aaea 	vcvt.f32.s32	s21, s21
 80182e2:	ee05 3a90 	vmov	s11, r3
 80182e6:	ee25 5a09 	vmul.f32	s10, s10, s18
 80182ea:	f994 3431 	ldrsb.w	r3, [r4, #1073]	; 0x431
 80182ee:	eea3 5a2a 	vfma.f32	s10, s6, s21
 80182f2:	4683      	mov	fp, r0
 80182f4:	f994 0430 	ldrsb.w	r0, [r4, #1072]	; 0x430
 80182f8:	ee07 3a10 	vmov	s14, r3
 80182fc:	ee0a 0a90 	vmov	s21, r0
 8018300:	f994 3433 	ldrsb.w	r3, [r4, #1075]	; 0x433
 8018304:	48b4      	ldr	r0, [pc, #720]	; (80185d8 <iNemo_update.constprop.35+0x3cc>)
 8018306:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 801830a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801830e:	eea4 5a82 	vfma.f32	s10, s9, s4
 8018312:	f890 08e0 	ldrb.w	r0, [r0, #2272]	; 0x8e0
 8018316:	9017      	str	r0, [sp, #92]	; 0x5c
 8018318:	ee0b 3a10 	vmov	s22, r3
 801831c:	ee27 7a29 	vmul.f32	s14, s14, s19
 8018320:	eef8 aaea 	vcvt.f32.s32	s21, s21
 8018324:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8018328:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 801832c:	eeaa 7aa2 	vfma.f32	s14, s21, s5
 8018330:	f994 3432 	ldrsb.w	r3, [r4, #1074]	; 0x432
 8018334:	ee0a 2a90 	vmov	s21, r2
 8018338:	ee26 6a0a 	vmul.f32	s12, s12, s20
 801833c:	eef8 baeb 	vcvt.f32.s32	s23, s23
 8018340:	ee65 5aa9 	vmul.f32	s11, s11, s19
 8018344:	eeb8 bacb 	vcvt.f32.s32	s22, s22
 8018348:	eea1 6a2b 	vfma.f32	s12, s2, s23
 801834c:	f994 2435 	ldrsb.w	r2, [r4, #1077]	; 0x435
 8018350:	eee2 5a8b 	vfma.f32	s11, s5, s22
 8018354:	eef8 baec 	vcvt.f32.s32	s23, s25
 8018358:	eeb8 baea 	vcvt.f32.s32	s22, s21
 801835c:	eef0 ca45 	vmov.f32	s25, s10
 8018360:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018364:	ee05 9a10 	vmov	s10, r9
 8018368:	ee67 7a8a 	vmul.f32	s15, s15, s20
 801836c:	ee6b 9a29 	vmul.f32	s19, s22, s19
 8018370:	ee2b aa8a 	vmul.f32	s20, s23, s20
 8018374:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8018378:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 801837c:	eea1 aa21 	vfma.f32	s20, s2, s3
 8018380:	eee2 9a85 	vfma.f32	s19, s5, s10
 8018384:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 8018388:	ee01 2a90 	vmov	s3, r2
 801838c:	ee05 ca10 	vmov	s10, ip
 8018390:	eeb8 cacc 	vcvt.f32.s32	s24, s24
 8018394:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8018398:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 801839c:	ee68 8a89 	vmul.f32	s17, s17, s18
 80183a0:	eeec 7a01 	vfma.f32	s15, s24, s2
 80183a4:	eee3 8a05 	vfma.f32	s17, s6, s10
 80183a8:	eee4 5a21 	vfma.f32	s11, s8, s3
 80183ac:	ee05 7a10 	vmov	s10, r7
 80183b0:	ee0a aa90 	vmov	s21, sl
 80183b4:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 80183b8:	ee01 3a90 	vmov	s3, r3
 80183bc:	ee02 ea10 	vmov	s4, lr
 80183c0:	eef8 aaea 	vcvt.f32.s32	s21, s21
 80183c4:	eef8 2ac5 	vcvt.f32.s32	s5, s10
 80183c8:	ee28 8a09 	vmul.f32	s16, s16, s18
 80183cc:	ee05 6a10 	vmov	s10, r6
 80183d0:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 80183d4:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 80183d8:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 80183dc:	eeea 7aa3 	vfma.f32	s15, s21, s7
 80183e0:	eea2 8a03 	vfma.f32	s16, s4, s6
 80183e4:	eea3 6aa0 	vfma.f32	s12, s7, s1
 80183e8:	eeb8 3ac5 	vcvt.f32.s32	s6, s10
 80183ec:	eea1 7a84 	vfma.f32	s14, s3, s8
 80183f0:	ee05 1a10 	vmov	s10, r1
 80183f4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80183f8:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 80183fc:	eef0 da40 	vmov.f32	s27, s0
 8018400:	eea3 aaa2 	vfma.f32	s20, s7, s5
 8018404:	eeb1 ba65 	vneg.f32	s22, s11
 8018408:	eef1 aa47 	vneg.f32	s21, s14
 801840c:	eee4 9a03 	vfma.f32	s19, s8, s6
 8018410:	eea5 8a24 	vfma.f32	s16, s10, s9
 8018414:	eee4 8aa6 	vfma.f32	s17, s9, s13
 8018418:	eeb1 ca46 	vneg.f32	s24, s12
 801841c:	eef1 ba67 	vneg.f32	s23, s15
 8018420:	eeb1 da6c 	vneg.f32	s26, s25
 8018424:	b388      	cbz	r0, 801848a <iNemo_update.constprop.35+0x27e>
 8018426:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801842a:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 801842e:	eee6 7a06 	vfma.f32	s15, s12, s12
 8018432:	eeea 7a0a 	vfma.f32	s15, s20, s20
 8018436:	ee17 0a90 	vmov	r0, s15
 801843a:	f7e8 f88d 	bl	8000558 <__aeabi_f2d>
 801843e:	f002 ff11 	bl	801b264 <sqrt>
 8018442:	f7e8 fbb9 	bl	8000bb8 <__aeabi_d2f>
 8018446:	ee07 0a90 	vmov	s15, r0
 801844a:	eec9 7a27 	vdiv.f32	s15, s18, s15
 801844e:	ee28 7a08 	vmul.f32	s14, s16, s16
 8018452:	ee2c ca27 	vmul.f32	s24, s24, s15
 8018456:	eea8 7aa8 	vfma.f32	s14, s17, s17
 801845a:	ee6b baa7 	vmul.f32	s23, s23, s15
 801845e:	eeac 7aac 	vfma.f32	s14, s25, s25
 8018462:	ee2a aa27 	vmul.f32	s20, s20, s15
 8018466:	ee17 0a10 	vmov	r0, s14
 801846a:	f7e8 f875 	bl	8000558 <__aeabi_f2d>
 801846e:	f002 fef9 	bl	801b264 <sqrt>
 8018472:	f7e8 fba1 	bl	8000bb8 <__aeabi_d2f>
 8018476:	ee07 0a90 	vmov	s15, r0
 801847a:	eec9 7a27 	vdiv.f32	s15, s18, s15
 801847e:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8018482:	ee28 8a27 	vmul.f32	s16, s16, s15
 8018486:	ee2d da27 	vmul.f32	s26, s26, s15
 801848a:	f894 3c3c 	ldrb.w	r3, [r4, #3132]	; 0xc3c
 801848e:	f894 2c3d 	ldrb.w	r2, [r4, #3133]	; 0xc3d
 8018492:	4e52      	ldr	r6, [pc, #328]	; (80185dc <iNemo_update.constprop.35+0x3d0>)
 8018494:	4f52      	ldr	r7, [pc, #328]	; (80185e0 <iNemo_update.constprop.35+0x3d4>)
 8018496:	f8d5 c084 	ldr.w	ip, [r5, #132]	; 0x84
 801849a:	f8d5 907c 	ldr.w	r9, [r5, #124]	; 0x7c
 801849e:	f8d5 e080 	ldr.w	lr, [r5, #128]	; 0x80
 80184a2:	f8c5 c094 	str.w	ip, [r5, #148]	; 0x94
 80184a6:	ee09 2a10 	vmov	s18, r2
 80184aa:	f043 0302 	orr.w	r3, r3, #2
 80184ae:	6faa      	ldr	r2, [r5, #120]	; 0x78
 80184b0:	f8c5 2088 	str.w	r2, [r5, #136]	; 0x88
 80184b4:	f083 0301 	eor.w	r3, r3, #1
 80184b8:	22f8      	movs	r2, #248	; 0xf8
 80184ba:	f5a6 719a 	sub.w	r1, r6, #308	; 0x134
 80184be:	a828      	add	r0, sp, #160	; 0xa0
 80184c0:	f884 3c3c 	strb.w	r3, [r4, #3132]	; 0xc3c
 80184c4:	f8c5 908c 	str.w	r9, [r5, #140]	; 0x8c
 80184c8:	f8c5 e090 	str.w	lr, [r5, #144]	; 0x90
 80184cc:	f001 fd9c 	bl	801a008 <memcpy>
 80184d0:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80184d4:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 80184d8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80184dc:	eddf 7a41 	vldr	s15, [pc, #260]	; 80185e4 <iNemo_update.constprop.35+0x3d8>
 80184e0:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
 80184e4:	9715      	str	r7, [sp, #84]	; 0x54
 80184e6:	f106 0efa 	add.w	lr, r6, #250	; 0xfa
 80184ea:	64f0      	str	r0, [r6, #76]	; 0x4c
 80184ec:	6531      	str	r1, [r6, #80]	; 0x50
 80184ee:	6572      	str	r2, [r6, #84]	; 0x54
 80184f0:	f106 03f9 	add.w	r3, r6, #249	; 0xf9
 80184f4:	aa1f      	add	r2, sp, #124	; 0x7c
 80184f6:	f106 00f8 	add.w	r0, r6, #248	; 0xf8
 80184fa:	f1a6 016c 	sub.w	r1, r6, #108	; 0x6c
 80184fe:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
 8018502:	edcd ba2f 	vstr	s23, [sp, #188]	; 0xbc
 8018506:	ed8d aa30 	vstr	s20, [sp, #192]	; 0xc0
 801850a:	ed56 ba03 	vldr	s23, [r6, #-12]
 801850e:	ed16 aa0c 	vldr	s20, [r6, #-48]	; 0xffffffd0
 8018512:	edcd 8a2b 	vstr	s17, [sp, #172]	; 0xac
 8018516:	ed8d 8a2c 	vstr	s16, [sp, #176]	; 0xb0
 801851a:	ed56 8a0e 	vldr	s17, [r6, #-56]	; 0xffffffc8
 801851e:	ed16 8a0f 	vldr	s16, [r6, #-60]	; 0xffffffc4
 8018522:	ed8d ba31 	vstr	s22, [sp, #196]	; 0xc4
 8018526:	edcd aa32 	vstr	s21, [sp, #200]	; 0xc8
 801852a:	ed16 ba04 	vldr	s22, [r6, #-16]
 801852e:	ed56 aa05 	vldr	s21, [r6, #-20]	; 0xffffffec
 8018532:	edcd 9a33 	vstr	s19, [sp, #204]	; 0xcc
 8018536:	ed8d ca2e 	vstr	s24, [sp, #184]	; 0xb8
 801853a:	ed56 9a0d 	vldr	s19, [r6, #-52]	; 0xffffffcc
 801853e:	ed8d da2d 	vstr	s26, [sp, #180]	; 0xb4
 8018542:	f8cd e050 	str.w	lr, [sp, #80]	; 0x50
 8018546:	e9cd 0312 	strd	r0, r3, [sp, #72]	; 0x48
 801854a:	910f      	str	r1, [sp, #60]	; 0x3c
 801854c:	edc5 7a0c 	vstr	s15, [r5, #48]	; 0x30
 8018550:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8018554:	edc5 7a0e 	vstr	s15, [r5, #56]	; 0x38
 8018558:	9210      	str	r2, [sp, #64]	; 0x40
 801855a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801855e:	f856 0c1c 	ldr.w	r0, [r6, #-28]
 8018562:	f7e7 fff9 	bl	8000558 <__aeabi_f2d>
 8018566:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801856a:	f894 0c1e 	ldrb.w	r0, [r4, #3102]	; 0xc1e
 801856e:	f7e7 ffd1 	bl	8000514 <__aeabi_ui2d>
 8018572:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8018576:	f894 3c1c 	ldrb.w	r3, [r4, #3100]	; 0xc1c
 801857a:	f894 cc1b 	ldrb.w	ip, [r4, #3099]	; 0xc1b
 801857e:	f894 2c1a 	ldrb.w	r2, [r4, #3098]	; 0xc1a
 8018582:	9308      	str	r3, [sp, #32]
 8018584:	f894 1c19 	ldrb.w	r1, [r4, #3097]	; 0xc19
 8018588:	f894 3c18 	ldrb.w	r3, [r4, #3096]	; 0xc18
 801858c:	f856 0c2c 	ldr.w	r0, [r6, #-44]
 8018590:	eeb8 9a49 	vcvt.f32.u32	s18, s18
 8018594:	e9cd 2c06 	strd	r2, ip, [sp, #24]
 8018598:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801859c:	f7e7 ffdc 	bl	8000558 <__aeabi_f2d>
 80185a0:	ee29 9a2d 	vmul.f32	s18, s18, s27
 80185a4:	f50d 7e86 	add.w	lr, sp, #268	; 0x10c
 80185a8:	f10d 0cdc 	add.w	ip, sp, #220	; 0xdc
 80185ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80185b0:	eef0 3a6b 	vmov.f32	s7, s23
 80185b4:	eeb0 3a4b 	vmov.f32	s6, s22
 80185b8:	eef0 2a6a 	vmov.f32	s5, s21
 80185bc:	eeb0 2a4a 	vmov.f32	s4, s20
 80185c0:	eef0 1a69 	vmov.f32	s3, s19
 80185c4:	eeb0 1a68 	vmov.f32	s2, s17
 80185c8:	eef0 0a48 	vmov.f32	s1, s16
 80185cc:	eeb0 0a49 	vmov.f32	s0, s18
 80185d0:	ab34      	add	r3, sp, #208	; 0xd0
 80185d2:	e009      	b.n	80185e8 <iNemo_update.constprop.35+0x3dc>
 80185d4:	200013d0 	.word	0x200013d0
 80185d8:	20000000 	.word	0x20000000
 80185dc:	20002010 	.word	0x20002010
 80185e0:	200008e8 	.word	0x200008e8
 80185e4:	00000000 	.word	0x00000000
 80185e8:	aa2e      	add	r2, sp, #184	; 0xb8
 80185ea:	a92b      	add	r1, sp, #172	; 0xac
 80185ec:	a84a      	add	r0, sp, #296	; 0x128
 80185ee:	e9cd ce00 	strd	ip, lr, [sp]
 80185f2:	f7ff fa1b 	bl	8017a2c <SpacePointAlgorithm.isra.7>
 80185f6:	f1bb 0f00 	cmp.w	fp, #0
 80185fa:	d00f      	beq.n	801861c <iNemo_update.constprop.35+0x410>
 80185fc:	f8d9 2000 	ldr.w	r2, [r9]
 8018600:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8018604:	f8cb 2000 	str.w	r2, [fp]
 8018608:	f8cb 3004 	str.w	r3, [fp, #4]
 801860c:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8018610:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8018614:	f8cb 2008 	str.w	r2, [fp, #8]
 8018618:	f8cb 300c 	str.w	r3, [fp, #12]
 801861c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8018620:	f8c6 3100 	str.w	r3, [r6, #256]	; 0x100
 8018624:	f894 3d3a 	ldrb.w	r3, [r4, #3386]	; 0xd3a
 8018628:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 801862c:	f8c6 20fc 	str.w	r2, [r6, #252]	; 0xfc
 8018630:	2b01      	cmp	r3, #1
 8018632:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8018636:	f8c6 2104 	str.w	r2, [r6, #260]	; 0x104
 801863a:	d055      	beq.n	80186e8 <iNemo_update.constprop.35+0x4dc>
 801863c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801863e:	f103 3aff 	add.w	sl, r3, #4294967295
 8018642:	fa5f fa8a 	uxtb.w	sl, sl
 8018646:	f1ba 0f08 	cmp.w	sl, #8
 801864a:	bf9c      	itt	ls
 801864c:	4b35      	ldrls	r3, [pc, #212]	; (8018724 <iNemo_update.constprop.35+0x518>)
 801864e:	f883 a8e0 	strbls.w	sl, [r3, #2272]	; 0x8e0
 8018652:	eddf 7a35 	vldr	s15, [pc, #212]	; 8018728 <iNemo_update.constprop.35+0x51c>
 8018656:	ed98 6a00 	vldr	s12, [r8]
 801865a:	edd8 6a01 	vldr	s13, [r8, #4]
 801865e:	ed98 7a02 	vldr	s14, [r8, #8]
 8018662:	f894 3d39 	ldrb.w	r3, [r4, #3385]	; 0xd39
 8018666:	ee26 5a27 	vmul.f32	s10, s12, s15
 801866a:	ee66 5aa7 	vmul.f32	s11, s13, s15
 801866e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018672:	ed85 5a1b 	vstr	s10, [r5, #108]	; 0x6c
 8018676:	edc5 5a1c 	vstr	s11, [r5, #112]	; 0x70
 801867a:	edc5 7a1d 	vstr	s15, [r5, #116]	; 0x74
 801867e:	b13b      	cbz	r3, 8018690 <iNemo_update.constprop.35+0x484>
 8018680:	f894 3d48 	ldrb.w	r3, [r4, #3400]	; 0xd48
 8018684:	2b09      	cmp	r3, #9
 8018686:	d828      	bhi.n	80186da <iNemo_update.constprop.35+0x4ce>
 8018688:	3301      	adds	r3, #1
 801868a:	f884 3d48 	strb.w	r3, [r4, #3400]	; 0xd48
 801868e:	e001      	b.n	8018694 <iNemo_update.constprop.35+0x488>
 8018690:	f884 3d48 	strb.w	r3, [r4, #3400]	; 0xd48
 8018694:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8018698:	f894 3c3c 	ldrb.w	r3, [r4, #3132]	; 0xc3c
 801869c:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80186a0:	f8c6 20ac 	str.w	r2, [r6, #172]	; 0xac
 80186a4:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80186a8:	f8c6 10b0 	str.w	r1, [r6, #176]	; 0xb0
 80186ac:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80186b0:	f8c6 20b4 	str.w	r2, [r6, #180]	; 0xb4
 80186b4:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 80186b8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80186bc:	f8c6 00c4 	str.w	r0, [r6, #196]	; 0xc4
 80186c0:	f083 0302 	eor.w	r3, r3, #2
 80186c4:	f884 3c3c 	strb.w	r3, [r4, #3132]	; 0xc3c
 80186c8:	f8c6 10c8 	str.w	r1, [r6, #200]	; 0xc8
 80186cc:	f8c6 20cc 	str.w	r2, [r6, #204]	; 0xcc
 80186d0:	b067      	add	sp, #412	; 0x19c
 80186d2:	ecbd 8b0c 	vpop	{d8-d13}
 80186d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80186da:	ed86 6a22 	vstr	s12, [r6, #136]	; 0x88
 80186de:	edc6 6a23 	vstr	s13, [r6, #140]	; 0x8c
 80186e2:	ed86 7a24 	vstr	s14, [r6, #144]	; 0x90
 80186e6:	e7d5      	b.n	8018694 <iNemo_update.constprop.35+0x488>
 80186e8:	f8d9 200c 	ldr.w	r2, [r9, #12]
 80186ec:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80186f0:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
 80186f4:	f8c5 2094 	str.w	r2, [r5, #148]	; 0x94
 80186f8:	4a0a      	ldr	r2, [pc, #40]	; (8018724 <iNemo_update.constprop.35+0x518>)
 80186fa:	f8d9 0000 	ldr.w	r0, [r9]
 80186fe:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8018702:	67eb      	str	r3, [r5, #124]	; 0x7c
 8018704:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
 8018708:	2300      	movs	r3, #0
 801870a:	67a8      	str	r0, [r5, #120]	; 0x78
 801870c:	f8c5 0088 	str.w	r0, [r5, #136]	; 0x88
 8018710:	f8c5 1080 	str.w	r1, [r5, #128]	; 0x80
 8018714:	f8c5 1090 	str.w	r1, [r5, #144]	; 0x90
 8018718:	f884 3c28 	strb.w	r3, [r4, #3112]	; 0xc28
 801871c:	f882 38e0 	strb.w	r3, [r2, #2272]	; 0x8e0
 8018720:	e797      	b.n	8018652 <iNemo_update.constprop.35+0x446>
 8018722:	bf00      	nop
 8018724:	20000000 	.word	0x20000000
 8018728:	42652ee1 	.word	0x42652ee1
 801872c:	00000000 	.word	0x00000000

08018730 <MotionFX_initialize>:
 8018730:	4a11      	ldr	r2, [pc, #68]	; (8018778 <MotionFX_initialize+0x48>)
 8018732:	4912      	ldr	r1, [pc, #72]	; (801877c <MotionFX_initialize+0x4c>)
 8018734:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018738:	6813      	ldr	r3, [r2, #0]
 801873a:	f023 0301 	bic.w	r3, r3, #1
 801873e:	6013      	str	r3, [r2, #0]
 8018740:	680b      	ldr	r3, [r1, #0]
 8018742:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8018746:	4013      	ands	r3, r2
 8018748:	f24c 2040 	movw	r0, #49728	; 0xc240
 801874c:	4283      	cmp	r3, r0
 801874e:	d01f      	beq.n	8018790 <MotionFX_initialize+0x60>
 8018750:	680b      	ldr	r3, [r1, #0]
 8018752:	f24c 2170 	movw	r1, #49776	; 0xc270
 8018756:	4013      	ands	r3, r2
 8018758:	428b      	cmp	r3, r1
 801875a:	d019      	beq.n	8018790 <MotionFX_initialize+0x60>
 801875c:	4b08      	ldr	r3, [pc, #32]	; (8018780 <MotionFX_initialize+0x50>)
 801875e:	2201      	movs	r2, #1
 8018760:	601a      	str	r2, [r3, #0]
 8018762:	681a      	ldr	r2, [r3, #0]
 8018764:	2a00      	cmp	r2, #0
 8018766:	d1fc      	bne.n	8018762 <MotionFX_initialize+0x32>
 8018768:	4b06      	ldr	r3, [pc, #24]	; (8018784 <MotionFX_initialize+0x54>)
 801876a:	4a07      	ldr	r2, [pc, #28]	; (8018788 <MotionFX_initialize+0x58>)
 801876c:	601a      	str	r2, [r3, #0]
 801876e:	681a      	ldr	r2, [r3, #0]
 8018770:	4b06      	ldr	r3, [pc, #24]	; (801878c <MotionFX_initialize+0x5c>)
 8018772:	429a      	cmp	r2, r3
 8018774:	d02b      	beq.n	80187ce <MotionFX_initialize+0x9e>
 8018776:	e7fe      	b.n	8018776 <MotionFX_initialize+0x46>
 8018778:	e0002000 	.word	0xe0002000
 801877c:	e000ed00 	.word	0xe000ed00
 8018780:	40023008 	.word	0x40023008
 8018784:	40023000 	.word	0x40023000
 8018788:	f407a5c2 	.word	0xf407a5c2
 801878c:	b5e8b5cd 	.word	0xb5e8b5cd
 8018790:	4beb      	ldr	r3, [pc, #940]	; (8018b40 <MotionFX_initialize+0x410>)
 8018792:	681b      	ldr	r3, [r3, #0]
 8018794:	2b00      	cmp	r3, #0
 8018796:	d1e1      	bne.n	801875c <MotionFX_initialize+0x2c>
 8018798:	4aea      	ldr	r2, [pc, #936]	; (8018b44 <MotionFX_initialize+0x414>)
 801879a:	6813      	ldr	r3, [r2, #0]
 801879c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80187a0:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80187a4:	d006      	beq.n	80187b4 <MotionFX_initialize+0x84>
 80187a6:	6813      	ldr	r3, [r2, #0]
 80187a8:	f240 4283 	movw	r2, #1155	; 0x483
 80187ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80187b0:	4293      	cmp	r3, r2
 80187b2:	d1d3      	bne.n	801875c <MotionFX_initialize+0x2c>
 80187b4:	4be4      	ldr	r3, [pc, #912]	; (8018b48 <MotionFX_initialize+0x418>)
 80187b6:	2201      	movs	r2, #1
 80187b8:	601a      	str	r2, [r3, #0]
 80187ba:	681a      	ldr	r2, [r3, #0]
 80187bc:	2a00      	cmp	r2, #0
 80187be:	d1fc      	bne.n	80187ba <MotionFX_initialize+0x8a>
 80187c0:	4be2      	ldr	r3, [pc, #904]	; (8018b4c <MotionFX_initialize+0x41c>)
 80187c2:	4ae3      	ldr	r2, [pc, #908]	; (8018b50 <MotionFX_initialize+0x420>)
 80187c4:	601a      	str	r2, [r3, #0]
 80187c6:	681a      	ldr	r2, [r3, #0]
 80187c8:	4be2      	ldr	r3, [pc, #904]	; (8018b54 <MotionFX_initialize+0x424>)
 80187ca:	429a      	cmp	r2, r3
 80187cc:	d1d3      	bne.n	8018776 <MotionFX_initialize+0x46>
 80187ce:	4ce2      	ldr	r4, [pc, #904]	; (8018b58 <MotionFX_initialize+0x428>)
 80187d0:	eddf 7ae2 	vldr	s15, [pc, #904]	; 8018b5c <MotionFX_initialize+0x42c>
 80187d4:	4ee2      	ldr	r6, [pc, #904]	; (8018b60 <MotionFX_initialize+0x430>)
 80187d6:	eddf 6ae3 	vldr	s13, [pc, #908]	; 8018b64 <MotionFX_initialize+0x434>
 80187da:	2500      	movs	r5, #0
 80187dc:	f04f 0901 	mov.w	r9, #1
 80187e0:	ed9f 5bcd 	vldr	d5, [pc, #820]	; 8018b18 <MotionFX_initialize+0x3e8>
 80187e4:	ed9f 1bce 	vldr	d1, [pc, #824]	; 8018b20 <MotionFX_initialize+0x3f0>
 80187e8:	ed9f 2bcf 	vldr	d2, [pc, #828]	; 8018b28 <MotionFX_initialize+0x3f8>
 80187ec:	ed9f 3bd0 	vldr	d3, [pc, #832]	; 8018b30 <MotionFX_initialize+0x400>
 80187f0:	f20f 3b44 	addw	fp, pc, #836	; 0x344
 80187f4:	e9db ab00 	ldrd	sl, fp, [fp]
 80187f8:	f241 17b6 	movw	r7, #4534	; 0x11b6
 80187fc:	f884 9d49 	strb.w	r9, [r4, #3401]	; 0xd49
 8018800:	f8c4 5d4c 	str.w	r5, [r4, #3404]	; 0xd4c
 8018804:	f8c4 5d50 	str.w	r5, [r4, #3408]	; 0xd50
 8018808:	f7f7 fa4c 	bl	800fca4 <rt_InitInfAndNaN.isra.3>
 801880c:	f241 10b4 	movw	r0, #4532	; 0x11b4
 8018810:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8018814:	f606 08e8 	addw	r8, r6, #2280	; 0x8e8
 8018818:	5235      	strh	r5, [r6, r0]
 801881a:	55f5      	strb	r5, [r6, r7]
 801881c:	200a      	movs	r0, #10
 801881e:	ed88 5b02 	vstr	d5, [r8, #8]
 8018822:	ed88 1b04 	vstr	d1, [r8, #16]
 8018826:	ed88 2b06 	vstr	d2, [r8, #24]
 801882a:	e9c8 ab08 	strd	sl, fp, [r8, #32]
 801882e:	ed88 3b0a 	vstr	d3, [r8, #40]	; 0x28
 8018832:	ed88 7a82 	vstr	s14, [r8, #520]	; 0x208
 8018836:	f886 08e0 	strb.w	r0, [r6, #2272]	; 0x8e0
 801883a:	edc8 7a83 	vstr	s15, [r8, #524]	; 0x20c
 801883e:	edc8 7a84 	vstr	s15, [r8, #528]	; 0x210
 8018842:	f8c4 5418 	str.w	r5, [r4, #1048]	; 0x418
 8018846:	f8c4 5424 	str.w	r5, [r4, #1060]	; 0x424
 801884a:	f8c4 5430 	str.w	r5, [r4, #1072]	; 0x430
 801884e:	f8c4 541c 	str.w	r5, [r4, #1052]	; 0x41c
 8018852:	f884 5420 	strb.w	r5, [r4, #1056]	; 0x420
 8018856:	f8c4 5428 	str.w	r5, [r4, #1064]	; 0x428
 801885a:	f884 542c 	strb.w	r5, [r4, #1068]	; 0x42c
 801885e:	f8c4 5434 	str.w	r5, [r4, #1076]	; 0x434
 8018862:	f884 5438 	strb.w	r5, [r4, #1080]	; 0x438
 8018866:	f7f7 fa1d 	bl	800fca4 <rt_InitInfAndNaN.isra.3>
 801886a:	f604 330c 	addw	r3, r4, #2828	; 0xb0c
 801886e:	ed86 5b06 	vstr	d5, [r6, #24]
 8018872:	eddf 4abd 	vldr	s9, [pc, #756]	; 8018b68 <MotionFX_initialize+0x438>
 8018876:	ed9f 5abd 	vldr	s10, [pc, #756]	; 8018b6c <MotionFX_initialize+0x43c>
 801887a:	eddf 5abd 	vldr	s11, [pc, #756]	; 8018b70 <MotionFX_initialize+0x440>
 801887e:	f8df c30c 	ldr.w	ip, [pc, #780]	; 8018b8c <MotionFX_initialize+0x45c>
 8018882:	48bc      	ldr	r0, [pc, #752]	; (8018b74 <MotionFX_initialize+0x444>)
 8018884:	49bc      	ldr	r1, [pc, #752]	; (8018b78 <MotionFX_initialize+0x448>)
 8018886:	4abd      	ldr	r2, [pc, #756]	; (8018b7c <MotionFX_initialize+0x44c>)
 8018888:	ed86 7a86 	vstr	s14, [r6, #536]	; 0x218
 801888c:	f604 0ecc 	addw	lr, r4, #2252	; 0x8cc
 8018890:	f604 4704 	addw	r7, r4, #3076	; 0xc04
 8018894:	ed86 1b08 	vstr	d1, [r6, #32]
 8018898:	ed86 2b0a 	vstr	d2, [r6, #40]	; 0x28
 801889c:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 80188a0:	e9c6 ab0c 	strd	sl, fp, [r6, #48]	; 0x30
 80188a4:	ed86 3b0e 	vstr	d3, [r6, #56]	; 0x38
 80188a8:	f04f 0a02 	mov.w	sl, #2
 80188ac:	ed83 7a21 	vstr	s14, [r3, #132]	; 0x84
 80188b0:	ed83 7a25 	vstr	s14, [r3, #148]	; 0x94
 80188b4:	ed83 7a29 	vstr	s14, [r3, #164]	; 0xa4
 80188b8:	edc6 7a87 	vstr	s15, [r6, #540]	; 0x21c
 80188bc:	edc6 7a88 	vstr	s15, [r6, #544]	; 0x220
 80188c0:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
 80188c4:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
 80188c8:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
 80188cc:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
 80188d0:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
 80188d4:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
 80188d8:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
 80188dc:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
 80188e0:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
 80188e4:	f8a6 58dc 	strh.w	r5, [r6, #2268]	; 0x8dc
 80188e8:	f886 58de 	strb.w	r5, [r6, #2270]	; 0x8de
 80188ec:	f886 900c 	strb.w	r9, [r6, #12]
 80188f0:	f04f 3b01 	mov.w	fp, #16843009	; 0x1010101
 80188f4:	f8c4 543c 	str.w	r5, [r4, #1084]	; 0x43c
 80188f8:	f8c4 5448 	str.w	r5, [r4, #1096]	; 0x448
 80188fc:	f8c4 5454 	str.w	r5, [r4, #1108]	; 0x454
 8018900:	f8c4 5440 	str.w	r5, [r4, #1088]	; 0x440
 8018904:	f884 5444 	strb.w	r5, [r4, #1092]	; 0x444
 8018908:	f8c4 544c 	str.w	r5, [r4, #1100]	; 0x44c
 801890c:	f884 5450 	strb.w	r5, [r4, #1104]	; 0x450
 8018910:	f8c4 5458 	str.w	r5, [r4, #1112]	; 0x458
 8018914:	f884 545c 	strb.w	r5, [r4, #1116]	; 0x45c
 8018918:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
 801891c:	ed83 7a2d 	vstr	s14, [r3, #180]	; 0xb4
 8018920:	ed83 7a31 	vstr	s14, [r3, #196]	; 0xc4
 8018924:	ed83 7a35 	vstr	s14, [r3, #212]	; 0xd4
 8018928:	ed83 7a39 	vstr	s14, [r3, #228]	; 0xe4
 801892c:	ed83 7a3d 	vstr	s14, [r3, #244]	; 0xf4
 8018930:	ed83 7a0f 	vstr	s14, [r3, #60]	; 0x3c
 8018934:	ed83 7a13 	vstr	s14, [r3, #76]	; 0x4c
 8018938:	ed83 7a17 	vstr	s14, [r3, #92]	; 0x5c
 801893c:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
 8018940:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
 8018944:	edc3 7a2e 	vstr	s15, [r3, #184]	; 0xb8
 8018948:	edc3 7a2f 	vstr	s15, [r3, #188]	; 0xbc
 801894c:	edc3 7a30 	vstr	s15, [r3, #192]	; 0xc0
 8018950:	edc3 7a32 	vstr	s15, [r3, #200]	; 0xc8
 8018954:	edc3 7a33 	vstr	s15, [r3, #204]	; 0xcc
 8018958:	edc3 7a34 	vstr	s15, [r3, #208]	; 0xd0
 801895c:	edc3 7a36 	vstr	s15, [r3, #216]	; 0xd8
 8018960:	edc3 7a37 	vstr	s15, [r3, #220]	; 0xdc
 8018964:	edc3 7a38 	vstr	s15, [r3, #224]	; 0xe0
 8018968:	edc3 7a3a 	vstr	s15, [r3, #232]	; 0xe8
 801896c:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
 8018970:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
 8018974:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
 8018978:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
 801897c:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
 8018980:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
 8018984:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
 8018988:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
 801898c:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
 8018990:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
 8018994:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
 8018998:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
 801899c:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
 80189a0:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
 80189a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80189a8:	f8c4 cc2c 	str.w	ip, [r4, #3116]	; 0xc2c
 80189ac:	f8c4 0c30 	str.w	r0, [r4, #3120]	; 0xc30
 80189b0:	f8c4 1c34 	str.w	r1, [r4, #3124]	; 0xc34
 80189b4:	f8c4 2c38 	str.w	r2, [r4, #3128]	; 0xc38
 80189b8:	edc8 7a28 	vstr	s15, [r8, #160]	; 0xa0
 80189bc:	edc8 7a29 	vstr	s15, [r8, #164]	; 0xa4
 80189c0:	edc8 7a2a 	vstr	s15, [r8, #168]	; 0xa8
 80189c4:	ed87 7a08 	vstr	s14, [r7, #32]
 80189c8:	f604 18c4 	addw	r8, r4, #2500	; 0x9c4
 80189cc:	edc7 4a00 	vstr	s9, [r7]
 80189d0:	ed87 5a01 	vstr	s10, [r7, #4]
 80189d4:	edc7 5a02 	vstr	s11, [r7, #8]
 80189d8:	edc7 6a03 	vstr	s13, [r7, #12]
 80189dc:	ed87 6a04 	vstr	s12, [r7, #16]
 80189e0:	ed8e 7a21 	vstr	s14, [lr, #132]	; 0x84
 80189e4:	ed8e 7a25 	vstr	s14, [lr, #148]	; 0x94
 80189e8:	ed8e 7a29 	vstr	s14, [lr, #164]	; 0xa4
 80189ec:	edce 7a1e 	vstr	s15, [lr, #120]	; 0x78
 80189f0:	edce 7a1f 	vstr	s15, [lr, #124]	; 0x7c
 80189f4:	edce 7a20 	vstr	s15, [lr, #128]	; 0x80
 80189f8:	edce 7a22 	vstr	s15, [lr, #136]	; 0x88
 80189fc:	edce 7a23 	vstr	s15, [lr, #140]	; 0x8c
 8018a00:	edce 7a24 	vstr	s15, [lr, #144]	; 0x90
 8018a04:	edce 7a26 	vstr	s15, [lr, #152]	; 0x98
 8018a08:	edce 7a27 	vstr	s15, [lr, #156]	; 0x9c
 8018a0c:	edce 7a28 	vstr	s15, [lr, #160]	; 0xa0
 8018a10:	f8a4 3c3c 	strh.w	r3, [r4, #3132]	; 0xc3c
 8018a14:	f8c4 9c1c 	str.w	r9, [r4, #3100]	; 0xc1c
 8018a18:	f884 9c28 	strb.w	r9, [r4, #3112]	; 0xc28
 8018a1c:	f884 5c3e 	strb.w	r5, [r4, #3134]	; 0xc3e
 8018a20:	f8c4 bc18 	str.w	fp, [r4, #3096]	; 0xc18
 8018a24:	f884 ac20 	strb.w	sl, [r4, #3104]	; 0xc20
 8018a28:	edce 7a2a 	vstr	s15, [lr, #168]	; 0xa8
 8018a2c:	ed8e 7a2d 	vstr	s14, [lr, #180]	; 0xb4
 8018a30:	ed8e 7a31 	vstr	s14, [lr, #196]	; 0xc4
 8018a34:	ed8e 7a35 	vstr	s14, [lr, #212]	; 0xd4
 8018a38:	ed8e 7a39 	vstr	s14, [lr, #228]	; 0xe4
 8018a3c:	ed8e 7a3d 	vstr	s14, [lr, #244]	; 0xf4
 8018a40:	ed8e 7a0f 	vstr	s14, [lr, #60]	; 0x3c
 8018a44:	ed8e 7a13 	vstr	s14, [lr, #76]	; 0x4c
 8018a48:	ed8e 7a17 	vstr	s14, [lr, #92]	; 0x5c
 8018a4c:	edce 7a2b 	vstr	s15, [lr, #172]	; 0xac
 8018a50:	edce 7a2c 	vstr	s15, [lr, #176]	; 0xb0
 8018a54:	edce 7a2e 	vstr	s15, [lr, #184]	; 0xb8
 8018a58:	edce 7a2f 	vstr	s15, [lr, #188]	; 0xbc
 8018a5c:	edce 7a30 	vstr	s15, [lr, #192]	; 0xc0
 8018a60:	edce 7a32 	vstr	s15, [lr, #200]	; 0xc8
 8018a64:	edce 7a33 	vstr	s15, [lr, #204]	; 0xcc
 8018a68:	edce 7a34 	vstr	s15, [lr, #208]	; 0xd0
 8018a6c:	edce 7a36 	vstr	s15, [lr, #216]	; 0xd8
 8018a70:	edce 7a37 	vstr	s15, [lr, #220]	; 0xdc
 8018a74:	edce 7a38 	vstr	s15, [lr, #224]	; 0xe0
 8018a78:	edce 7a3a 	vstr	s15, [lr, #232]	; 0xe8
 8018a7c:	edce 7a3b 	vstr	s15, [lr, #236]	; 0xec
 8018a80:	edce 7a3c 	vstr	s15, [lr, #240]	; 0xf0
 8018a84:	edce 7a10 	vstr	s15, [lr, #64]	; 0x40
 8018a88:	edce 7a11 	vstr	s15, [lr, #68]	; 0x44
 8018a8c:	edce 7a12 	vstr	s15, [lr, #72]	; 0x48
 8018a90:	edce 7a14 	vstr	s15, [lr, #80]	; 0x50
 8018a94:	edce 7a15 	vstr	s15, [lr, #84]	; 0x54
 8018a98:	edce 7a16 	vstr	s15, [lr, #88]	; 0x58
 8018a9c:	edce 7a18 	vstr	s15, [lr, #96]	; 0x60
 8018aa0:	edce 7a19 	vstr	s15, [lr, #100]	; 0x64
 8018aa4:	edce 7a1a 	vstr	s15, [lr, #104]	; 0x68
 8018aa8:	edce 7a1b 	vstr	s15, [lr, #108]	; 0x6c
 8018aac:	edce 7a1c 	vstr	s15, [lr, #112]	; 0x70
 8018ab0:	f8a4 39fc 	strh.w	r3, [r4, #2556]	; 0x9fc
 8018ab4:	4b32      	ldr	r3, [pc, #200]	; (8018b80 <MotionFX_initialize+0x450>)
 8018ab6:	f8c4 c9ec 	str.w	ip, [r4, #2540]	; 0x9ec
 8018aba:	f8c4 09f0 	str.w	r0, [r4, #2544]	; 0x9f0
 8018abe:	f8c4 19f4 	str.w	r1, [r4, #2548]	; 0x9f4
 8018ac2:	f8c4 29f8 	str.w	r2, [r4, #2552]	; 0x9f8
 8018ac6:	f8c4 39d8 	str.w	r3, [r4, #2520]	; 0x9d8
 8018aca:	edc6 7a2c 	vstr	s15, [r6, #176]	; 0xb0
 8018ace:	edc6 7a2d 	vstr	s15, [r6, #180]	; 0xb4
 8018ad2:	edc6 7a2e 	vstr	s15, [r6, #184]	; 0xb8
 8018ad6:	edc8 4a00 	vstr	s9, [r8]
 8018ada:	ed88 5a01 	vstr	s10, [r8, #4]
 8018ade:	edc8 5a02 	vstr	s11, [r8, #8]
 8018ae2:	edc8 6a03 	vstr	s13, [r8, #12]
 8018ae6:	ed88 6a04 	vstr	s12, [r8, #16]
 8018aea:	ed88 7a08 	vstr	s14, [r8, #32]
 8018aee:	edce 7a1d 	vstr	s15, [lr, #116]	; 0x74
 8018af2:	f8c4 99dc 	str.w	r9, [r4, #2524]	; 0x9dc
 8018af6:	f884 99e8 	strb.w	r9, [r4, #2536]	; 0x9e8
 8018afa:	f884 a9e0 	strb.w	sl, [r4, #2528]	; 0x9e0
 8018afe:	f884 59fe 	strb.w	r5, [r4, #2558]	; 0x9fe
 8018b02:	f7f7 f9a3 	bl	800fe4c <iNemo_setOrientation.constprop.40>
 8018b06:	f7f7 fb79 	bl	80101fc <iNemo_setOrientation_6X.constprop.41>
 8018b0a:	f04f 567f 	mov.w	r6, #1069547520	; 0x3fc00000
 8018b0e:	f8df c080 	ldr.w	ip, [pc, #128]	; 8018b90 <MotionFX_initialize+0x460>
 8018b12:	481c      	ldr	r0, [pc, #112]	; (8018b84 <MotionFX_initialize+0x454>)
 8018b14:	491c      	ldr	r1, [pc, #112]	; (8018b88 <MotionFX_initialize+0x458>)
 8018b16:	e03d      	b.n	8018b94 <MotionFX_initialize+0x464>
 8018b18:	60000000 	.word	0x60000000
 8018b1c:	3fc76cab 	.word	0x3fc76cab
 8018b20:	20000000 	.word	0x20000000
 8018b24:	3fc55a40 	.word	0x3fc55a40
 8018b28:	00000000 	.word	0x00000000
 8018b2c:	3fbfdfb7 	.word	0x3fbfdfb7
 8018b30:	60000000 	.word	0x60000000
 8018b34:	3f9f1fed 	.word	0x3f9f1fed
 8018b38:	c0000000 	.word	0xc0000000
 8018b3c:	3fb2875e 	.word	0x3fb2875e
 8018b40:	e0042000 	.word	0xe0042000
 8018b44:	5c001000 	.word	0x5c001000
 8018b48:	58024c08 	.word	0x58024c08
 8018b4c:	58024c00 	.word	0x58024c00
 8018b50:	f407a5c2 	.word	0xf407a5c2
 8018b54:	b5e8b5cd 	.word	0xb5e8b5cd
 8018b58:	200013d0 	.word	0x200013d0
 8018b5c:	00000000 	.word	0x00000000
 8018b60:	20000000 	.word	0x20000000
 8018b64:	3f2ac083 	.word	0x3f2ac083
 8018b68:	3f639581 	.word	0x3f639581
 8018b6c:	402ab021 	.word	0x402ab021
 8018b70:	3f13f7cf 	.word	0x3f13f7cf
 8018b74:	3a09a027 	.word	0x3a09a027
 8018b78:	39b24207 	.word	0x39b24207
 8018b7c:	3dcccccd 	.word	0x3dcccccd
 8018b80:	01000101 	.word	0x01000101
 8018b84:	3a51b717 	.word	0x3a51b717
 8018b88:	3a378034 	.word	0x3a378034
 8018b8c:	39712c28 	.word	0x39712c28
 8018b90:	3f666666 	.word	0x3f666666
 8018b94:	4a14      	ldr	r2, [pc, #80]	; (8018be8 <MotionFX_initialize+0x4b8>)
 8018b96:	4b15      	ldr	r3, [pc, #84]	; (8018bec <MotionFX_initialize+0x4bc>)
 8018b98:	f8df e054 	ldr.w	lr, [pc, #84]	; 8018bf0 <MotionFX_initialize+0x4c0>
 8018b9c:	edc8 6a03 	vstr	s13, [r8, #12]
 8018ba0:	edc7 6a03 	vstr	s13, [r7, #12]
 8018ba4:	f884 a9fd 	strb.w	sl, [r4, #2557]	; 0x9fd
 8018ba8:	f884 59fe 	strb.w	r5, [r4, #2558]	; 0x9fe
 8018bac:	f884 ac3d 	strb.w	sl, [r4, #3133]	; 0xc3d
 8018bb0:	f884 5c3e 	strb.w	r5, [r4, #3134]	; 0xc3e
 8018bb4:	f8c4 bc19 	str.w	fp, [r4, #3097]	; 0xc19
 8018bb8:	f8c4 e9d9 	str.w	lr, [r4, #2521]	; 0x9d9
 8018bbc:	f8c8 c000 	str.w	ip, [r8]
 8018bc0:	f8c7 c000 	str.w	ip, [r7]
 8018bc4:	f8c8 6004 	str.w	r6, [r8, #4]
 8018bc8:	607e      	str	r6, [r7, #4]
 8018bca:	f8c8 0028 	str.w	r0, [r8, #40]	; 0x28
 8018bce:	62b8      	str	r0, [r7, #40]	; 0x28
 8018bd0:	f8c8 102c 	str.w	r1, [r8, #44]	; 0x2c
 8018bd4:	62f9      	str	r1, [r7, #44]	; 0x2c
 8018bd6:	f8c8 2030 	str.w	r2, [r8, #48]	; 0x30
 8018bda:	633a      	str	r2, [r7, #48]	; 0x30
 8018bdc:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
 8018be0:	637b      	str	r3, [r7, #52]	; 0x34
 8018be2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018be6:	bf00      	nop
 8018be8:	3b378034 	.word	0x3b378034
 8018bec:	3dcccccd 	.word	0x3dcccccd
 8018bf0:	01010001 	.word	0x01010001

08018bf4 <MotionFX_setKnobs>:
 8018bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018bf6:	4b2f      	ldr	r3, [pc, #188]	; (8018cb4 <MotionFX_setKnobs+0xc0>)
 8018bf8:	f893 2d49 	ldrb.w	r2, [r3, #3401]	; 0xd49
 8018bfc:	b902      	cbnz	r2, 8018c00 <MotionFX_setKnobs+0xc>
 8018bfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018c00:	2800      	cmp	r0, #0
 8018c02:	d0fc      	beq.n	8018bfe <MotionFX_setKnobs+0xa>
 8018c04:	f603 12c4 	addw	r2, r3, #2500	; 0x9c4
 8018c08:	6884      	ldr	r4, [r0, #8]
 8018c0a:	6806      	ldr	r6, [r0, #0]
 8018c0c:	6845      	ldr	r5, [r0, #4]
 8018c0e:	60d4      	str	r4, [r2, #12]
 8018c10:	7b01      	ldrb	r1, [r0, #12]
 8018c12:	f883 19d9 	strb.w	r1, [r3, #2521]	; 0x9d9
 8018c16:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8018c1a:	f8d0 c014 	ldr.w	ip, [r0, #20]
 8018c1e:	6987      	ldr	r7, [r0, #24]
 8018c20:	6317      	str	r7, [r2, #48]	; 0x30
 8018c22:	f8c2 e028 	str.w	lr, [r2, #40]	; 0x28
 8018c26:	f8c2 c02c 	str.w	ip, [r2, #44]	; 0x2c
 8018c2a:	f890 7028 	ldrb.w	r7, [r0, #40]	; 0x28
 8018c2e:	f883 79fd 	strb.w	r7, [r3, #2557]	; 0x9fd
 8018c32:	f890 c035 	ldrb.w	ip, [r0, #53]	; 0x35
 8018c36:	f883 c9fe 	strb.w	ip, [r3, #2558]	; 0x9fe
 8018c3a:	f883 1c19 	strb.w	r1, [r3, #3097]	; 0xc19
 8018c3e:	f603 4104 	addw	r1, r3, #3076	; 0xc04
 8018c42:	6016      	str	r6, [r2, #0]
 8018c44:	6055      	str	r5, [r2, #4]
 8018c46:	6a02      	ldr	r2, [r0, #32]
 8018c48:	f8d0 e01c 	ldr.w	lr, [r0, #28]
 8018c4c:	62ca      	str	r2, [r1, #44]	; 0x2c
 8018c4e:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8018c50:	f883 cc3e 	strb.w	ip, [r3, #3134]	; 0xc3e
 8018c54:	f883 7c3d 	strb.w	r7, [r3, #3133]	; 0xc3d
 8018c58:	6b87      	ldr	r7, [r0, #56]	; 0x38
 8018c5a:	f8c1 e028 	str.w	lr, [r1, #40]	; 0x28
 8018c5e:	630a      	str	r2, [r1, #48]	; 0x30
 8018c60:	4a15      	ldr	r2, [pc, #84]	; (8018cb8 <MotionFX_setKnobs+0xc4>)
 8018c62:	600e      	str	r6, [r1, #0]
 8018c64:	604d      	str	r5, [r1, #4]
 8018c66:	60cc      	str	r4, [r1, #12]
 8018c68:	f8c3 7d54 	str.w	r7, [r3, #3412]	; 0xd54
 8018c6c:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8018c70:	7013      	strb	r3, [r2, #0]
 8018c72:	f890 e02d 	ldrb.w	lr, [r0, #45]	; 0x2d
 8018c76:	f890 702a 	ldrb.w	r7, [r0, #42]	; 0x2a
 8018c7a:	f890 602e 	ldrb.w	r6, [r0, #46]	; 0x2e
 8018c7e:	f890 5032 	ldrb.w	r5, [r0, #50]	; 0x32
 8018c82:	f890 402b 	ldrb.w	r4, [r0, #43]	; 0x2b
 8018c86:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
 8018c8a:	f890 c031 	ldrb.w	ip, [r0, #49]	; 0x31
 8018c8e:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
 8018c92:	f882 e004 	strb.w	lr, [r2, #4]
 8018c96:	7057      	strb	r7, [r2, #1]
 8018c98:	7156      	strb	r6, [r2, #5]
 8018c9a:	7255      	strb	r5, [r2, #9]
 8018c9c:	7094      	strb	r4, [r2, #2]
 8018c9e:	7293      	strb	r3, [r2, #10]
 8018ca0:	f882 c008 	strb.w	ip, [r2, #8]
 8018ca4:	7191      	strb	r1, [r2, #6]
 8018ca6:	f7f7 f8d1 	bl	800fe4c <iNemo_setOrientation.constprop.40>
 8018caa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8018cae:	f7f7 baa5 	b.w	80101fc <iNemo_setOrientation_6X.constprop.41>
 8018cb2:	bf00      	nop
 8018cb4:	200013d0 	.word	0x200013d0
 8018cb8:	20000000 	.word	0x20000000

08018cbc <MotionFX_getKnobs>:
 8018cbc:	4b28      	ldr	r3, [pc, #160]	; (8018d60 <MotionFX_getKnobs+0xa4>)
 8018cbe:	f893 2d49 	ldrb.w	r2, [r3, #3401]	; 0xd49
 8018cc2:	b902      	cbnz	r2, 8018cc6 <MotionFX_getKnobs+0xa>
 8018cc4:	4770      	bx	lr
 8018cc6:	2800      	cmp	r0, #0
 8018cc8:	d0fc      	beq.n	8018cc4 <MotionFX_getKnobs+0x8>
 8018cca:	b470      	push	{r4, r5, r6}
 8018ccc:	f603 4204 	addw	r2, r3, #3076	; 0xc04
 8018cd0:	68d1      	ldr	r1, [r2, #12]
 8018cd2:	6854      	ldr	r4, [r2, #4]
 8018cd4:	6815      	ldr	r5, [r2, #0]
 8018cd6:	6005      	str	r5, [r0, #0]
 8018cd8:	6044      	str	r4, [r0, #4]
 8018cda:	6081      	str	r1, [r0, #8]
 8018cdc:	f893 1c19 	ldrb.w	r1, [r3, #3097]	; 0xc19
 8018ce0:	7301      	strb	r1, [r0, #12]
 8018ce2:	f603 11c4 	addw	r1, r3, #2500	; 0x9c4
 8018ce6:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8018ce8:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8018cea:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 8018cec:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8018cee:	6104      	str	r4, [r0, #16]
 8018cf0:	6a94      	ldr	r4, [r2, #40]	; 0x28
 8018cf2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8018cf4:	6242      	str	r2, [r0, #36]	; 0x24
 8018cf6:	6185      	str	r5, [r0, #24]
 8018cf8:	61c4      	str	r4, [r0, #28]
 8018cfa:	6146      	str	r6, [r0, #20]
 8018cfc:	6201      	str	r1, [r0, #32]
 8018cfe:	4a19      	ldr	r2, [pc, #100]	; (8018d64 <MotionFX_getKnobs+0xa8>)
 8018d00:	f893 1c3d 	ldrb.w	r1, [r3, #3133]	; 0xc3d
 8018d04:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
 8018d08:	f893 6c3e 	ldrb.w	r6, [r3, #3134]	; 0xc3e
 8018d0c:	f8d3 5d54 	ldr.w	r5, [r3, #3412]	; 0xd54
 8018d10:	7814      	ldrb	r4, [r2, #0]
 8018d12:	7911      	ldrb	r1, [r2, #4]
 8018d14:	7a13      	ldrb	r3, [r2, #8]
 8018d16:	f880 6035 	strb.w	r6, [r0, #53]	; 0x35
 8018d1a:	6385      	str	r5, [r0, #56]	; 0x38
 8018d1c:	f880 4029 	strb.w	r4, [r0, #41]	; 0x29
 8018d20:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d
 8018d24:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
 8018d28:	7854      	ldrb	r4, [r2, #1]
 8018d2a:	7951      	ldrb	r1, [r2, #5]
 8018d2c:	7a55      	ldrb	r5, [r2, #9]
 8018d2e:	f880 402a 	strb.w	r4, [r0, #42]	; 0x2a
 8018d32:	2300      	movs	r3, #0
 8018d34:	7894      	ldrb	r4, [r2, #2]
 8018d36:	f880 102e 	strb.w	r1, [r0, #46]	; 0x2e
 8018d3a:	7991      	ldrb	r1, [r2, #6]
 8018d3c:	7a92      	ldrb	r2, [r2, #10]
 8018d3e:	f880 5032 	strb.w	r5, [r0, #50]	; 0x32
 8018d42:	f880 402b 	strb.w	r4, [r0, #43]	; 0x2b
 8018d46:	f880 102f 	strb.w	r1, [r0, #47]	; 0x2f
 8018d4a:	f880 2033 	strb.w	r2, [r0, #51]	; 0x33
 8018d4e:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 8018d52:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
 8018d56:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
 8018d5a:	bc70      	pop	{r4, r5, r6}
 8018d5c:	4770      	bx	lr
 8018d5e:	bf00      	nop
 8018d60:	200013d0 	.word	0x200013d0
 8018d64:	20000000 	.word	0x20000000

08018d68 <MotionFX_enable_6X>:
 8018d68:	4b0c      	ldr	r3, [pc, #48]	; (8018d9c <MotionFX_enable_6X+0x34>)
 8018d6a:	f893 2d49 	ldrb.w	r2, [r3, #3401]	; 0xd49
 8018d6e:	b112      	cbz	r2, 8018d76 <MotionFX_enable_6X+0xe>
 8018d70:	f8c3 0d4c 	str.w	r0, [r3, #3404]	; 0xd4c
 8018d74:	b900      	cbnz	r0, 8018d78 <MotionFX_enable_6X+0x10>
 8018d76:	4770      	bx	lr
 8018d78:	b430      	push	{r4, r5}
 8018d7a:	4a09      	ldr	r2, [pc, #36]	; (8018da0 <MotionFX_enable_6X+0x38>)
 8018d7c:	4809      	ldr	r0, [pc, #36]	; (8018da4 <MotionFX_enable_6X+0x3c>)
 8018d7e:	f503 6482 	add.w	r4, r3, #1040	; 0x410
 8018d82:	2100      	movs	r1, #0
 8018d84:	f203 4314 	addw	r3, r3, #1044	; 0x414
 8018d88:	f04f 45ff 	mov.w	r5, #2139095040	; 0x7f800000
 8018d8c:	f8a2 18dc 	strh.w	r1, [r2, #2268]	; 0x8dc
 8018d90:	f882 18de 	strb.w	r1, [r2, #2270]	; 0x8de
 8018d94:	6025      	str	r5, [r4, #0]
 8018d96:	6018      	str	r0, [r3, #0]
 8018d98:	bc30      	pop	{r4, r5}
 8018d9a:	4770      	bx	lr
 8018d9c:	200013d0 	.word	0x200013d0
 8018da0:	20000000 	.word	0x20000000
 8018da4:	ff800000 	.word	0xff800000

08018da8 <MotionFX_enable_9X>:
 8018da8:	4b0d      	ldr	r3, [pc, #52]	; (8018de0 <MotionFX_enable_9X+0x38>)
 8018daa:	f893 2d49 	ldrb.w	r2, [r3, #3401]	; 0xd49
 8018dae:	b112      	cbz	r2, 8018db6 <MotionFX_enable_9X+0xe>
 8018db0:	f8c3 0d50 	str.w	r0, [r3, #3408]	; 0xd50
 8018db4:	b900      	cbnz	r0, 8018db8 <MotionFX_enable_9X+0x10>
 8018db6:	4770      	bx	lr
 8018db8:	b430      	push	{r4, r5}
 8018dba:	4a0a      	ldr	r2, [pc, #40]	; (8018de4 <MotionFX_enable_9X+0x3c>)
 8018dbc:	480a      	ldr	r0, [pc, #40]	; (8018de8 <MotionFX_enable_9X+0x40>)
 8018dbe:	f241 15b4 	movw	r5, #4532	; 0x11b4
 8018dc2:	2100      	movs	r1, #0
 8018dc4:	5351      	strh	r1, [r2, r5]
 8018dc6:	f241 15b6 	movw	r5, #4534	; 0x11b6
 8018dca:	f04f 44ff 	mov.w	r4, #2139095040	; 0x7f800000
 8018dce:	5551      	strb	r1, [r2, r5]
 8018dd0:	f503 6282 	add.w	r2, r3, #1040	; 0x410
 8018dd4:	f203 4314 	addw	r3, r3, #1044	; 0x414
 8018dd8:	6014      	str	r4, [r2, #0]
 8018dda:	6018      	str	r0, [r3, #0]
 8018ddc:	bc30      	pop	{r4, r5}
 8018dde:	4770      	bx	lr
 8018de0:	200013d0 	.word	0x200013d0
 8018de4:	20000000 	.word	0x20000000
 8018de8:	ff800000 	.word	0xff800000

08018dec <MotionFX_update>:
 8018dec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018df0:	4ec1      	ldr	r6, [pc, #772]	; (80190f8 <MotionFX_update+0x30c>)
 8018df2:	ed2d 8b02 	vpush	{d8}
 8018df6:	f896 5d49 	ldrb.w	r5, [r6, #3401]	; 0xd49
 8018dfa:	b08b      	sub	sp, #44	; 0x2c
 8018dfc:	b925      	cbnz	r5, 8018e08 <MotionFX_update+0x1c>
 8018dfe:	b00b      	add	sp, #44	; 0x2c
 8018e00:	ecbd 8b02 	vpop	{d8}
 8018e04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018e08:	4604      	mov	r4, r0
 8018e0a:	ed92 8a00 	vldr	s16, [r2]
 8018e0e:	2b00      	cmp	r3, #0
 8018e10:	f000 80d7 	beq.w	8018fc2 <MotionFX_update+0x1d6>
 8018e14:	4ab9      	ldr	r2, [pc, #740]	; (80190fc <MotionFX_update+0x310>)
 8018e16:	68cf      	ldr	r7, [r1, #12]
 8018e18:	f8d1 e000 	ldr.w	lr, [r1]
 8018e1c:	690d      	ldr	r5, [r1, #16]
 8018e1e:	f8d1 c018 	ldr.w	ip, [r1, #24]
 8018e22:	6197      	str	r7, [r2, #24]
 8018e24:	f5a2 7010 	sub.w	r0, r2, #576	; 0x240
 8018e28:	f8c2 e00c 	str.w	lr, [r2, #12]
 8018e2c:	6187      	str	r7, [r0, #24]
 8018e2e:	684f      	ldr	r7, [r1, #4]
 8018e30:	f8c0 e00c 	str.w	lr, [r0, #12]
 8018e34:	f8d1 e01c 	ldr.w	lr, [r1, #28]
 8018e38:	f8c2 c024 	str.w	ip, [r2, #36]	; 0x24
 8018e3c:	f8c0 c024 	str.w	ip, [r0, #36]	; 0x24
 8018e40:	f8d1 c014 	ldr.w	ip, [r1, #20]
 8018e44:	6117      	str	r7, [r2, #16]
 8018e46:	6107      	str	r7, [r0, #16]
 8018e48:	f8d6 7d54 	ldr.w	r7, [r6, #3412]	; 0xd54
 8018e4c:	61d5      	str	r5, [r2, #28]
 8018e4e:	61c5      	str	r5, [r0, #28]
 8018e50:	688d      	ldr	r5, [r1, #8]
 8018e52:	6a09      	ldr	r1, [r1, #32]
 8018e54:	6155      	str	r5, [r2, #20]
 8018e56:	f8c2 e028 	str.w	lr, [r2, #40]	; 0x28
 8018e5a:	f8c2 c020 	str.w	ip, [r2, #32]
 8018e5e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8018e60:	f8c0 e028 	str.w	lr, [r0, #40]	; 0x28
 8018e64:	f8c0 c020 	str.w	ip, [r0, #32]
 8018e68:	6145      	str	r5, [r0, #20]
 8018e6a:	62c1      	str	r1, [r0, #44]	; 0x2c
 8018e6c:	f8d6 2d4c 	ldr.w	r2, [r6, #3404]	; 0xd4c
 8018e70:	b187      	cbz	r7, 8018e94 <MotionFX_update+0xa8>
 8018e72:	f896 1c3c 	ldrb.w	r1, [r6, #3132]	; 0xc3c
 8018e76:	07cd      	lsls	r5, r1, #31
 8018e78:	d403      	bmi.n	8018e82 <MotionFX_update+0x96>
 8018e7a:	f896 19fc 	ldrb.w	r1, [r6, #2556]	; 0x9fc
 8018e7e:	07c8      	lsls	r0, r1, #31
 8018e80:	d523      	bpl.n	8018eca <MotionFX_update+0xde>
 8018e82:	489f      	ldr	r0, [pc, #636]	; (8019100 <MotionFX_update+0x314>)
 8018e84:	f8d0 10c0 	ldr.w	r1, [r0, #192]	; 0xc0
 8018e88:	2900      	cmp	r1, #0
 8018e8a:	f340 809c 	ble.w	8018fc6 <MotionFX_update+0x1da>
 8018e8e:	3901      	subs	r1, #1
 8018e90:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
 8018e94:	2a00      	cmp	r2, #0
 8018e96:	f000 808e 	beq.w	8018fb6 <MotionFX_update+0x1ca>
 8018e9a:	f896 29fc 	ldrb.w	r2, [r6, #2556]	; 0x9fc
 8018e9e:	07d1      	lsls	r1, r2, #31
 8018ea0:	f140 8089 	bpl.w	8018fb6 <MotionFX_update+0x1ca>
 8018ea4:	4618      	mov	r0, r3
 8018ea6:	eeb0 0a48 	vmov.f32	s0, s16
 8018eaa:	9301      	str	r3, [sp, #4]
 8018eac:	f7fe ffb0 	bl	8017e10 <iNemo_update_6X.constprop.34>
 8018eb0:	f8d6 1d50 	ldr.w	r1, [r6, #3408]	; 0xd50
 8018eb4:	9b01      	ldr	r3, [sp, #4]
 8018eb6:	b141      	cbz	r1, 8018eca <MotionFX_update+0xde>
 8018eb8:	f896 2c3c 	ldrb.w	r2, [r6, #3132]	; 0xc3c
 8018ebc:	07d2      	lsls	r2, r2, #31
 8018ebe:	d504      	bpl.n	8018eca <MotionFX_update+0xde>
 8018ec0:	4618      	mov	r0, r3
 8018ec2:	eeb0 0a48 	vmov.f32	s0, s16
 8018ec6:	f7ff f9a1 	bl	801820c <iNemo_update.constprop.35>
 8018eca:	4d8e      	ldr	r5, [pc, #568]	; (8019104 <MotionFX_update+0x318>)
 8018ecc:	69ea      	ldr	r2, [r5, #28]
 8018ece:	69af      	ldr	r7, [r5, #24]
 8018ed0:	f8d5 025c 	ldr.w	r0, [r5, #604]	; 0x25c
 8018ed4:	f8d5 1258 	ldr.w	r1, [r5, #600]	; 0x258
 8018ed8:	60e1      	str	r1, [r4, #12]
 8018eda:	64a7      	str	r7, [r4, #72]	; 0x48
 8018edc:	f8d5 1260 	ldr.w	r1, [r5, #608]	; 0x260
 8018ee0:	6a2f      	ldr	r7, [r5, #32]
 8018ee2:	64e2      	str	r2, [r4, #76]	; 0x4c
 8018ee4:	6120      	str	r0, [r4, #16]
 8018ee6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8018ee8:	f8d5 0264 	ldr.w	r0, [r5, #612]	; 0x264
 8018eec:	6527      	str	r7, [r4, #80]	; 0x50
 8018eee:	6161      	str	r1, [r4, #20]
 8018ef0:	68ef      	ldr	r7, [r5, #12]
 8018ef2:	f8d5 124c 	ldr.w	r1, [r5, #588]	; 0x24c
 8018ef6:	61a0      	str	r0, [r4, #24]
 8018ef8:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
 8018efc:	6562      	str	r2, [r4, #84]	; 0x54
 8018efe:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
 8018f02:	63e7      	str	r7, [r4, #60]	; 0x3c
 8018f04:	f8d5 72d4 	ldr.w	r7, [r5, #724]	; 0x2d4
 8018f08:	65a0      	str	r0, [r4, #88]	; 0x58
 8018f0a:	f8d5 02e0 	ldr.w	r0, [r5, #736]	; 0x2e0
 8018f0e:	6021      	str	r1, [r4, #0]
 8018f10:	6662      	str	r2, [r4, #100]	; 0x64
 8018f12:	6929      	ldr	r1, [r5, #16]
 8018f14:	f8d5 2098 	ldr.w	r2, [r5, #152]	; 0x98
 8018f18:	65e2      	str	r2, [r4, #92]	; 0x5c
 8018f1a:	61e7      	str	r7, [r4, #28]
 8018f1c:	6421      	str	r1, [r4, #64]	; 0x40
 8018f1e:	62a0      	str	r0, [r4, #40]	; 0x28
 8018f20:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
 8018f24:	f8d5 2250 	ldr.w	r2, [r5, #592]	; 0x250
 8018f28:	f8d5 72d8 	ldr.w	r7, [r5, #728]	; 0x2d8
 8018f2c:	f8d5 12e4 	ldr.w	r1, [r5, #740]	; 0x2e4
 8018f30:	66a0      	str	r0, [r4, #104]	; 0x68
 8018f32:	f8d5 0254 	ldr.w	r0, [r5, #596]	; 0x254
 8018f36:	6062      	str	r2, [r4, #4]
 8018f38:	696a      	ldr	r2, [r5, #20]
 8018f3a:	f8d5 32e8 	ldr.w	r3, [r5, #744]	; 0x2e8
 8018f3e:	6227      	str	r7, [r4, #32]
 8018f40:	f8d5 709c 	ldr.w	r7, [r5, #156]	; 0x9c
 8018f44:	62e1      	str	r1, [r4, #44]	; 0x2c
 8018f46:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
 8018f4a:	6462      	str	r2, [r4, #68]	; 0x44
 8018f4c:	f8d5 22dc 	ldr.w	r2, [r5, #732]	; 0x2dc
 8018f50:	6262      	str	r2, [r4, #36]	; 0x24
 8018f52:	60a0      	str	r0, [r4, #8]
 8018f54:	66e1      	str	r1, [r4, #108]	; 0x6c
 8018f56:	6323      	str	r3, [r4, #48]	; 0x30
 8018f58:	f505 714f 	add.w	r1, r5, #828	; 0x33c
 8018f5c:	f505 7013 	add.w	r0, r5, #588	; 0x24c
 8018f60:	aa03      	add	r2, sp, #12
 8018f62:	6627      	str	r7, [r4, #96]	; 0x60
 8018f64:	f7f6 fda2 	bl	800faac <quatErr2EulerErr>
 8018f68:	9b03      	ldr	r3, [sp, #12]
 8018f6a:	63a3      	str	r3, [r4, #56]	; 0x38
 8018f6c:	aa03      	add	r2, sp, #12
 8018f6e:	f105 01fc 	add.w	r1, r5, #252	; 0xfc
 8018f72:	f105 000c 	add.w	r0, r5, #12
 8018f76:	f7f6 fd99 	bl	800faac <quatErr2EulerErr>
 8018f7a:	9a03      	ldr	r2, [sp, #12]
 8018f7c:	f896 39fe 	ldrb.w	r3, [r6, #2558]	; 0x9fe
 8018f80:	6762      	str	r2, [r4, #116]	; 0x74
 8018f82:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 8018f86:	f104 0258 	add.w	r2, r4, #88	; 0x58
 8018f8a:	f104 0048 	add.w	r0, r4, #72	; 0x48
 8018f8e:	f7f7 fd37 	bl	8010a00 <iNemo_quat2heading>
 8018f92:	f896 3c3e 	ldrb.w	r3, [r6, #3134]	; 0xc3e
 8018f96:	ed84 0a1c 	vstr	s0, [r4, #112]	; 0x70
 8018f9a:	f104 021c 	add.w	r2, r4, #28
 8018f9e:	4621      	mov	r1, r4
 8018fa0:	f104 000c 	add.w	r0, r4, #12
 8018fa4:	f7f7 fd2c 	bl	8010a00 <iNemo_quat2heading>
 8018fa8:	ed84 0a0d 	vstr	s0, [r4, #52]	; 0x34
 8018fac:	b00b      	add	sp, #44	; 0x2c
 8018fae:	ecbd 8b02 	vpop	{d8}
 8018fb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018fb6:	f8d6 1d50 	ldr.w	r1, [r6, #3408]	; 0xd50
 8018fba:	2900      	cmp	r1, #0
 8018fbc:	f47f af7c 	bne.w	8018eb8 <MotionFX_update+0xcc>
 8018fc0:	e783      	b.n	8018eca <MotionFX_update+0xde>
 8018fc2:	ab06      	add	r3, sp, #24
 8018fc4:	e726      	b.n	8018e14 <MotionFX_update+0x28>
 8018fc6:	f8d6 cd58 	ldr.w	ip, [r6, #3416]	; 0xd58
 8018fca:	f8d6 1d50 	ldr.w	r1, [r6, #3408]	; 0xd50
 8018fce:	f10c 0e01 	add.w	lr, ip, #1
 8018fd2:	b369      	cbz	r1, 8019030 <MotionFX_update+0x244>
 8018fd4:	ee07 ea90 	vmov	s15, lr
 8018fd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018fdc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8018fe0:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8018fe4:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8019110 <MotionFX_update+0x324>
 8018fe8:	4847      	ldr	r0, [pc, #284]	; (8019108 <MotionFX_update+0x31c>)
 8018fea:	46c8      	mov	r8, r9
 8018fec:	ecb8 7a01 	vldmia	r8!, {s14}
 8018ff0:	edd0 4a01 	vldr	s9, [r0, #4]
 8018ff4:	ed90 5a02 	vldr	s10, [r0, #8]
 8018ff8:	ed90 4a00 	vldr	s8, [r0]
 8018ffc:	edd8 6a00 	vldr	s13, [r8]
 8019000:	edd9 7a02 	vldr	s15, [r9, #8]
 8019004:	ee05 ca90 	vmov	s11, ip
 8019008:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 801900c:	eea5 7a84 	vfma.f32	s14, s11, s8
 8019010:	eee5 6aa4 	vfma.f32	s13, s11, s9
 8019014:	eee5 7a85 	vfma.f32	s15, s11, s10
 8019018:	ee66 6a86 	vmul.f32	s13, s13, s12
 801901c:	ee27 7a06 	vmul.f32	s14, s14, s12
 8019020:	ee67 7a86 	vmul.f32	s15, s15, s12
 8019024:	edc0 6a01 	vstr	s13, [r0, #4]
 8019028:	ed80 7a00 	vstr	s14, [r0]
 801902c:	edc0 7a02 	vstr	s15, [r0, #8]
 8019030:	2a00      	cmp	r2, #0
 8019032:	d071      	beq.n	8019118 <MotionFX_update+0x32c>
 8019034:	ee07 ea90 	vmov	s15, lr
 8019038:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801903c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019040:	eec7 5a27 	vdiv.f32	s11, s14, s15
 8019044:	4830      	ldr	r0, [pc, #192]	; (8019108 <MotionFX_update+0x31c>)
 8019046:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 8019114 <MotionFX_update+0x328>
 801904a:	f8c6 ed58 	str.w	lr, [r6, #3416]	; 0xd58
 801904e:	4607      	mov	r7, r0
 8019050:	46c8      	mov	r8, r9
 8019052:	4605      	mov	r5, r0
 8019054:	3708      	adds	r7, #8
 8019056:	3504      	adds	r5, #4
 8019058:	f5be 7ffa 	cmp.w	lr, #500	; 0x1f4
 801905c:	ee07 ca90 	vmov	s15, ip
 8019060:	ecf8 6a01 	vldmia	r8!, {s13}
 8019064:	ed97 5a00 	vldr	s10, [r7]
 8019068:	ed99 7a02 	vldr	s14, [r9, #8]
 801906c:	edd5 4a00 	vldr	s9, [r5]
 8019070:	ed90 4a00 	vldr	s8, [r0]
 8019074:	ed98 6a00 	vldr	s12, [r8]
 8019078:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801907c:	eea7 7a85 	vfma.f32	s14, s15, s10
 8019080:	eee7 6a84 	vfma.f32	s13, s15, s8
 8019084:	eea7 6aa4 	vfma.f32	s12, s15, s9
 8019088:	eef0 7a47 	vmov.f32	s15, s14
 801908c:	ee26 6a25 	vmul.f32	s12, s12, s11
 8019090:	ee26 7aa5 	vmul.f32	s14, s13, s11
 8019094:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8019098:	ed85 6a00 	vstr	s12, [r5]
 801909c:	ed80 7a00 	vstr	s14, [r0]
 80190a0:	edc7 7a00 	vstr	s15, [r7]
 80190a4:	f47f aef9 	bne.w	8018e9a <MotionFX_update+0xae>
 80190a8:	2900      	cmp	r1, #0
 80190aa:	d046      	beq.n	801913a <MotionFX_update+0x34e>
 80190ac:	eef0 6a46 	vmov.f32	s13, s12
 80190b0:	eeb0 7a67 	vmov.f32	s14, s15
 80190b4:	edd0 7a00 	vldr	s15, [r0]
 80190b8:	4914      	ldr	r1, [pc, #80]	; (801910c <MotionFX_update+0x320>)
 80190ba:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80190be:	ee66 6a86 	vmul.f32	s13, s13, s12
 80190c2:	ee27 7a06 	vmul.f32	s14, s14, s12
 80190c6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80190ca:	edc1 6a0b 	vstr	s13, [r1, #44]	; 0x2c
 80190ce:	ed81 7a0c 	vstr	s14, [r1, #48]	; 0x30
 80190d2:	edc1 7a0a 	vstr	s15, [r1, #40]	; 0x28
 80190d6:	bb82      	cbnz	r2, 801913a <MotionFX_update+0x34e>
 80190d8:	2100      	movs	r1, #0
 80190da:	f8d6 2d4c 	ldr.w	r2, [r6, #3404]	; 0xd4c
 80190de:	6001      	str	r1, [r0, #0]
 80190e0:	2000      	movs	r0, #0
 80190e2:	6029      	str	r1, [r5, #0]
 80190e4:	6039      	str	r1, [r7, #0]
 80190e6:	f8c6 0d58 	str.w	r0, [r6, #3416]	; 0xd58
 80190ea:	f8c6 0d54 	str.w	r0, [r6, #3412]	; 0xd54
 80190ee:	2a00      	cmp	r2, #0
 80190f0:	f47f aed3 	bne.w	8018e9a <MotionFX_update+0xae>
 80190f4:	e75f      	b.n	8018fb6 <MotionFX_update+0x1ca>
 80190f6:	bf00      	nop
 80190f8:	200013d0 	.word	0x200013d0
 80190fc:	20001edc 	.word	0x20001edc
 8019100:	200010f8 	.word	0x200010f8
 8019104:	20001dd0 	.word	0x20001dd0
 8019108:	2000212c 	.word	0x2000212c
 801910c:	20001fd4 	.word	0x20001fd4
 8019110:	20000cec 	.word	0x20000cec
 8019114:	20000414 	.word	0x20000414
 8019118:	f5be 7ffa 	cmp.w	lr, #500	; 0x1f4
 801911c:	f8c6 ed58 	str.w	lr, [r6, #3416]	; 0xd58
 8019120:	f47f aec9 	bne.w	8018eb6 <MotionFX_update+0xca>
 8019124:	4810      	ldr	r0, [pc, #64]	; (8019168 <MotionFX_update+0x37c>)
 8019126:	1d05      	adds	r5, r0, #4
 8019128:	f100 0708 	add.w	r7, r0, #8
 801912c:	2900      	cmp	r1, #0
 801912e:	d0d3      	beq.n	80190d8 <MotionFX_update+0x2ec>
 8019130:	edd5 6a00 	vldr	s13, [r5]
 8019134:	ed97 7a00 	vldr	s14, [r7]
 8019138:	e7bc      	b.n	80190b4 <MotionFX_update+0x2c8>
 801913a:	edd5 6a00 	vldr	s13, [r5]
 801913e:	ed97 7a00 	vldr	s14, [r7]
 8019142:	edd0 7a00 	vldr	s15, [r0]
 8019146:	4a09      	ldr	r2, [pc, #36]	; (801916c <MotionFX_update+0x380>)
 8019148:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801914c:	ee66 6a86 	vmul.f32	s13, s13, s12
 8019150:	ee27 7a06 	vmul.f32	s14, s14, s12
 8019154:	ee67 7a86 	vmul.f32	s15, s15, s12
 8019158:	edc2 6a0b 	vstr	s13, [r2, #44]	; 0x2c
 801915c:	ed82 7a0c 	vstr	s14, [r2, #48]	; 0x30
 8019160:	edc2 7a0a 	vstr	s15, [r2, #40]	; 0x28
 8019164:	e7b8      	b.n	80190d8 <MotionFX_update+0x2ec>
 8019166:	bf00      	nop
 8019168:	2000212c 	.word	0x2000212c
 801916c:	20001d94 	.word	0x20001d94

08019170 <MotionFX_propagate>:
 8019170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019174:	ed2d 8b0a 	vpush	{d8-d12}
 8019178:	4d48      	ldr	r5, [pc, #288]	; (801929c <MotionFX_propagate+0x12c>)
 801917a:	f895 3d49 	ldrb.w	r3, [r5, #3401]	; 0xd49
 801917e:	b095      	sub	sp, #84	; 0x54
 8019180:	b923      	cbnz	r3, 801918c <MotionFX_propagate+0x1c>
 8019182:	b015      	add	sp, #84	; 0x54
 8019184:	ecbd 8b0a 	vpop	{d8-d12}
 8019188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801918c:	edd1 4a03 	vldr	s9, [r1, #12]
 8019190:	680f      	ldr	r7, [r1, #0]
 8019192:	edd1 7a04 	vldr	s15, [r1, #16]
 8019196:	edd1 5a05 	vldr	s11, [r1, #20]
 801919a:	688b      	ldr	r3, [r1, #8]
 801919c:	ed91 5a06 	vldr	s10, [r1, #24]
 80191a0:	ed91 4a07 	vldr	s8, [r1, #28]
 80191a4:	ed91 6a08 	vldr	s12, [r1, #32]
 80191a8:	ed92 9a00 	vldr	s18, [r2]
 80191ac:	f605 360c 	addw	r6, r5, #2828	; 0xb0c
 80191b0:	f605 08cc 	addw	r8, r5, #2252	; 0x8cc
 80191b4:	4604      	mov	r4, r0
 80191b6:	6848      	ldr	r0, [r1, #4]
 80191b8:	f8d5 1d50 	ldr.w	r1, [r5, #3408]	; 0xd50
 80191bc:	edc6 4a06 	vstr	s9, [r6, #24]
 80191c0:	60f7      	str	r7, [r6, #12]
 80191c2:	f8c8 700c 	str.w	r7, [r8, #12]
 80191c6:	ed86 5a09 	vstr	s10, [r6, #36]	; 0x24
 80191ca:	edc8 4a06 	vstr	s9, [r8, #24]
 80191ce:	ed88 5a09 	vstr	s10, [r8, #36]	; 0x24
 80191d2:	edc6 7a07 	vstr	s15, [r6, #28]
 80191d6:	6130      	str	r0, [r6, #16]
 80191d8:	f8c8 0010 	str.w	r0, [r8, #16]
 80191dc:	ed86 4a0a 	vstr	s8, [r6, #40]	; 0x28
 80191e0:	edc8 7a07 	vstr	s15, [r8, #28]
 80191e4:	ed88 4a0a 	vstr	s8, [r8, #40]	; 0x28
 80191e8:	edc6 5a08 	vstr	s11, [r6, #32]
 80191ec:	6173      	str	r3, [r6, #20]
 80191ee:	f8c8 3014 	str.w	r3, [r8, #20]
 80191f2:	ed86 6a0b 	vstr	s12, [r6, #44]	; 0x2c
 80191f6:	edc8 5a08 	vstr	s11, [r8, #32]
 80191fa:	ed88 6a0b 	vstr	s12, [r8, #44]	; 0x2c
 80191fe:	2900      	cmp	r1, #0
 8019200:	f040 81fa 	bne.w	80195f8 <MotionFX_propagate+0x488>
 8019204:	f505 6744 	add.w	r7, r5, #3136	; 0xc40
 8019208:	f8d5 3d4c 	ldr.w	r3, [r5, #3404]	; 0xd4c
 801920c:	2b00      	cmp	r3, #0
 801920e:	d149      	bne.n	80192a4 <MotionFX_propagate+0x134>
 8019210:	4e23      	ldr	r6, [pc, #140]	; (80192a0 <MotionFX_propagate+0x130>)
 8019212:	69b3      	ldr	r3, [r6, #24]
 8019214:	69f2      	ldr	r2, [r6, #28]
 8019216:	69b9      	ldr	r1, [r7, #24]
 8019218:	64a3      	str	r3, [r4, #72]	; 0x48
 801921a:	69fb      	ldr	r3, [r7, #28]
 801921c:	64e2      	str	r2, [r4, #76]	; 0x4c
 801921e:	60e1      	str	r1, [r4, #12]
 8019220:	6a3a      	ldr	r2, [r7, #32]
 8019222:	6a31      	ldr	r1, [r6, #32]
 8019224:	6123      	str	r3, [r4, #16]
 8019226:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8019228:	6521      	str	r1, [r4, #80]	; 0x50
 801922a:	6563      	str	r3, [r4, #84]	; 0x54
 801922c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801922e:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8019232:	6162      	str	r2, [r4, #20]
 8019234:	68f2      	ldr	r2, [r6, #12]
 8019236:	61a1      	str	r1, [r4, #24]
 8019238:	f8d6 10a0 	ldr.w	r1, [r6, #160]	; 0xa0
 801923c:	63e2      	str	r2, [r4, #60]	; 0x3c
 801923e:	65a3      	str	r3, [r4, #88]	; 0x58
 8019240:	68fa      	ldr	r2, [r7, #12]
 8019242:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8019246:	6661      	str	r1, [r4, #100]	; 0x64
 8019248:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 801924c:	6022      	str	r2, [r4, #0]
 801924e:	61e3      	str	r3, [r4, #28]
 8019250:	6932      	ldr	r2, [r6, #16]
 8019252:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 8019256:	65e3      	str	r3, [r4, #92]	; 0x5c
 8019258:	62a1      	str	r1, [r4, #40]	; 0x28
 801925a:	6422      	str	r2, [r4, #64]	; 0x40
 801925c:	f8d6 20a4 	ldr.w	r2, [r6, #164]	; 0xa4
 8019260:	693b      	ldr	r3, [r7, #16]
 8019262:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8019266:	66a2      	str	r2, [r4, #104]	; 0x68
 8019268:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 801926c:	6063      	str	r3, [r4, #4]
 801926e:	6973      	ldr	r3, [r6, #20]
 8019270:	f8d6 509c 	ldr.w	r5, [r6, #156]	; 0x9c
 8019274:	f8d6 00a8 	ldr.w	r0, [r6, #168]	; 0xa8
 8019278:	6221      	str	r1, [r4, #32]
 801927a:	62e2      	str	r2, [r4, #44]	; 0x2c
 801927c:	6979      	ldr	r1, [r7, #20]
 801927e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8019282:	6463      	str	r3, [r4, #68]	; 0x44
 8019284:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8019288:	6323      	str	r3, [r4, #48]	; 0x30
 801928a:	6625      	str	r5, [r4, #96]	; 0x60
 801928c:	66e0      	str	r0, [r4, #108]	; 0x6c
 801928e:	60a1      	str	r1, [r4, #8]
 8019290:	6262      	str	r2, [r4, #36]	; 0x24
 8019292:	b015      	add	sp, #84	; 0x54
 8019294:	ecbd 8b0a 	vpop	{d8-d12}
 8019298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801929c:	200013d0 	.word	0x200013d0
 80192a0:	20001dd0 	.word	0x20001dd0
 80192a4:	f995 3443 	ldrsb.w	r3, [r5, #1091]	; 0x443
 80192a8:	ed98 0a07 	vldr	s0, [r8, #28]
 80192ac:	f995 245b 	ldrsb.w	r2, [r5, #1115]	; 0x45b
 80192b0:	ed98 3a06 	vldr	s6, [r8, #24]
 80192b4:	ed98 6a08 	vldr	s12, [r8, #32]
 80192b8:	edd8 6a0a 	vldr	s13, [r8, #40]	; 0x28
 80192bc:	ed98 2a09 	vldr	s4, [r8, #36]	; 0x24
 80192c0:	f895 99fd 	ldrb.w	r9, [r5, #2557]	; 0x9fd
 80192c4:	ee0a 3a10 	vmov	s20, r3
 80192c8:	f995 3442 	ldrsb.w	r3, [r5, #1090]	; 0x442
 80192cc:	ee05 3a10 	vmov	s10, r3
 80192d0:	f995 3444 	ldrsb.w	r3, [r5, #1092]	; 0x444
 80192d4:	ee05 3a90 	vmov	s11, r3
 80192d8:	f995 343d 	ldrsb.w	r3, [r5, #1085]	; 0x43d
 80192dc:	eeb8 aaca 	vcvt.f32.s32	s20, s20
 80192e0:	ee07 3a90 	vmov	s15, r3
 80192e4:	f995 3440 	ldrsb.w	r3, [r5, #1088]	; 0x440
 80192e8:	ee09 2a90 	vmov	s19, r2
 80192ec:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 80192f0:	f995 243c 	ldrsb.w	r2, [r5, #1084]	; 0x43c
 80192f4:	ee2a aa00 	vmul.f32	s20, s20, s0
 80192f8:	ee07 3a10 	vmov	s14, r3
 80192fc:	f995 3455 	ldrsb.w	r3, [r5, #1109]	; 0x455
 8019300:	eea3 aa05 	vfma.f32	s20, s6, s10
 8019304:	ee0b 2a10 	vmov	s22, r2
 8019308:	f995 243f 	ldrsb.w	r2, [r5, #1087]	; 0x43f
 801930c:	ee08 3a10 	vmov	s16, r3
 8019310:	f995 3458 	ldrsb.w	r3, [r5, #1112]	; 0x458
 8019314:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8019318:	ee00 2a90 	vmov	s1, r2
 801931c:	f995 2454 	ldrsb.w	r2, [r5, #1108]	; 0x454
 8019320:	ee08 3a90 	vmov	s17, r3
 8019324:	2300      	movs	r3, #0
 8019326:	9308      	str	r3, [sp, #32]
 8019328:	ee01 2a10 	vmov	s2, r2
 801932c:	9309      	str	r3, [sp, #36]	; 0x24
 801932e:	f995 2457 	ldrsb.w	r2, [r5, #1111]	; 0x457
 8019332:	930a      	str	r3, [sp, #40]	; 0x28
 8019334:	eea6 aa25 	vfma.f32	s20, s12, s11
 8019338:	930c      	str	r3, [sp, #48]	; 0x30
 801933a:	930d      	str	r3, [sp, #52]	; 0x34
 801933c:	930e      	str	r3, [sp, #56]	; 0x38
 801933e:	f995 3456 	ldrsb.w	r3, [r5, #1110]	; 0x456
 8019342:	edd8 5a0b 	vldr	s11, [r8, #44]	; 0x2c
 8019346:	ed8d aa04 	vstr	s20, [sp, #16]
 801934a:	ee01 2a90 	vmov	s3, r2
 801934e:	ee04 3a90 	vmov	s9, r3
 8019352:	f995 243e 	ldrsb.w	r2, [r5, #1086]	; 0x43e
 8019356:	f995 3459 	ldrsb.w	r3, [r5, #1113]	; 0x459
 801935a:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 801935e:	ee03 2a90 	vmov	s7, r2
 8019362:	ee05 3a10 	vmov	s10, r3
 8019366:	f995 2441 	ldrsb.w	r2, [r5, #1089]	; 0x441
 801936a:	edcd aa0b 	vstr	s21, [sp, #44]	; 0x2c
 801936e:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 8019372:	f995 345a 	ldrsb.w	r3, [r5, #1114]	; 0x45a
 8019376:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801937a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801937e:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8019382:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 8019386:	ee02 3a90 	vmov	s5, r3
 801938a:	eef8 9ae9 	vcvt.f32.s32	s19, s19
 801938e:	eeb8 bacb 	vcvt.f32.s32	s22, s22
 8019392:	ee28 8a26 	vmul.f32	s16, s16, s13
 8019396:	ee68 8aa6 	vmul.f32	s17, s17, s13
 801939a:	ee67 7a80 	vmul.f32	s15, s15, s0
 801939e:	ee27 7a00 	vmul.f32	s14, s14, s0
 80193a2:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 80193a6:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 80193aa:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 80193ae:	ee69 9aa6 	vmul.f32	s19, s19, s13
 80193b2:	f995 345c 	ldrsb.w	r3, [r5, #1116]	; 0x45c
 80193b6:	eef8 2ae2 	vcvt.f32.s32	s5, s5
 80193ba:	eeeb 7a03 	vfma.f32	s15, s22, s6
 80193be:	ee04 2a10 	vmov	s8, r2
 80193c2:	eea3 7a20 	vfma.f32	s14, s6, s1
 80193c6:	eea1 8a02 	vfma.f32	s16, s2, s4
 80193ca:	eee2 8a21 	vfma.f32	s17, s4, s3
 80193ce:	ee06 3a90 	vmov	s13, r3
 80193d2:	eee2 9a22 	vfma.f32	s19, s4, s5
 80193d6:	4b84      	ldr	r3, [pc, #528]	; (80195e8 <MotionFX_propagate+0x478>)
 80193d8:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 80193dc:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 80193e0:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 80193e4:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 80193e8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80193ec:	eee3 7a86 	vfma.f32	s15, s7, s12
 80193f0:	7b1b      	ldrb	r3, [r3, #12]
 80193f2:	eea6 7a04 	vfma.f32	s14, s12, s8
 80193f6:	eea4 8aa5 	vfma.f32	s16, s9, s11
 80193fa:	eee5 8a85 	vfma.f32	s17, s11, s10
 80193fe:	eee5 9aa6 	vfma.f32	s19, s11, s13
 8019402:	eef1 ba47 	vneg.f32	s23, s14
 8019406:	eeb1 8a48 	vneg.f32	s16, s16
 801940a:	eef1 8a68 	vneg.f32	s17, s17
 801940e:	eeb1 ba67 	vneg.f32	s22, s15
 8019412:	edcd ba02 	vstr	s23, [sp, #8]
 8019416:	ed8d 8a06 	vstr	s16, [sp, #24]
 801941a:	edcd 8a05 	vstr	s17, [sp, #20]
 801941e:	edcd 9a07 	vstr	s19, [sp, #28]
 8019422:	ed8d ba03 	vstr	s22, [sp, #12]
 8019426:	b1fb      	cbz	r3, 8019468 <MotionFX_propagate+0x2f8>
 8019428:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801942c:	eee7 7a07 	vfma.f32	s15, s14, s14
 8019430:	eeea 7a0a 	vfma.f32	s15, s20, s20
 8019434:	ee17 0a90 	vmov	r0, s15
 8019438:	f7e7 f88e 	bl	8000558 <__aeabi_f2d>
 801943c:	f001 ff12 	bl	801b264 <sqrt>
 8019440:	f7e7 fbba 	bl	8000bb8 <__aeabi_d2f>
 8019444:	ee0c 0a10 	vmov	s24, r0
 8019448:	f7e7 f886 	bl	8000558 <__aeabi_f2d>
 801944c:	a364      	add	r3, pc, #400	; (adr r3, 80195e0 <MotionFX_propagate+0x470>)
 801944e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019452:	f7e7 fb4b 	bl	8000aec <__aeabi_dcmplt>
 8019456:	2800      	cmp	r0, #0
 8019458:	f000 8269 	beq.w	801992e <MotionFX_propagate+0x7be>
 801945c:	edcd ba02 	vstr	s23, [sp, #8]
 8019460:	ed8d ba03 	vstr	s22, [sp, #12]
 8019464:	ed8d aa04 	vstr	s20, [sp, #16]
 8019468:	f1b9 0f00 	cmp.w	r9, #0
 801946c:	f000 8257 	beq.w	801991e <MotionFX_propagate+0x7ae>
 8019470:	ee07 9a90 	vmov	s15, r9
 8019474:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8019478:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801947c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8019480:	464a      	mov	r2, r9
 8019482:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8019486:	ee28 8a27 	vmul.f32	s16, s16, s15
 801948a:	ee69 9aa7 	vmul.f32	s19, s19, s15
 801948e:	f895 39e0 	ldrb.w	r3, [r5, #2528]	; 0x9e0
 8019492:	edd8 6a0c 	vldr	s13, [r8, #48]	; 0x30
 8019496:	ed98 7a0d 	vldr	s14, [r8, #52]	; 0x34
 801949a:	edd8 7a0e 	vldr	s15, [r8, #56]	; 0x38
 801949e:	f895 09dc 	ldrb.w	r0, [r5, #2524]	; 0x9dc
 80194a2:	3301      	adds	r3, #1
 80194a4:	b2db      	uxtb	r3, r3
 80194a6:	ee76 8aa8 	vadd.f32	s17, s13, s17
 80194aa:	ee37 8a08 	vadd.f32	s16, s14, s16
 80194ae:	ee77 9aa9 	vadd.f32	s19, s15, s19
 80194b2:	fbb3 f1f2 	udiv	r1, r3, r2
 80194b6:	fb02 3311 	mls	r3, r2, r1, r3
 80194ba:	f885 39e0 	strb.w	r3, [r5, #2528]	; 0x9e0
 80194be:	edc8 8a0c 	vstr	s17, [r8, #48]	; 0x30
 80194c2:	ed88 8a0d 	vstr	s16, [r8, #52]	; 0x34
 80194c6:	edc8 9a0e 	vstr	s19, [r8, #56]	; 0x38
 80194ca:	2800      	cmp	r0, #0
 80194cc:	f040 8238 	bne.w	8019940 <MotionFX_propagate+0x7d0>
 80194d0:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
 80194d4:	4a45      	ldr	r2, [pc, #276]	; (80195ec <MotionFX_propagate+0x47c>)
 80194d6:	f102 064c 	add.w	r6, r2, #76	; 0x4c
 80194da:	4611      	mov	r1, r2
 80194dc:	f1a2 0010 	sub.w	r0, r2, #16
 80194e0:	f7f5 ffc4 	bl	800f46c <m_qmult_eml>
 80194e4:	f1a6 027c 	sub.w	r2, r6, #124	; 0x7c
 80194e8:	4611      	mov	r1, r2
 80194ea:	4650      	mov	r0, sl
 80194ec:	f7f5 ffbe 	bl	800f46c <m_qmult_eml>
 80194f0:	f106 0218 	add.w	r2, r6, #24
 80194f4:	f1a6 019c 	sub.w	r1, r6, #156	; 0x9c
 80194f8:	f1a6 004c 	sub.w	r0, r6, #76	; 0x4c
 80194fc:	f7f5 ffb6 	bl	800f46c <m_qmult_eml>
 8019500:	f106 0218 	add.w	r2, r6, #24
 8019504:	4611      	mov	r1, r2
 8019506:	f1a6 007c 	sub.w	r0, r6, #124	; 0x7c
 801950a:	f7f5 ffaf 	bl	800f46c <m_qmult_eml>
 801950e:	edd6 8a07 	vldr	s17, [r6, #28]
 8019512:	ed96 9a06 	vldr	s18, [r6, #24]
 8019516:	ed96 8a08 	vldr	s16, [r6, #32]
 801951a:	edd6 9a09 	vldr	s19, [r6, #36]	; 0x24
 801951e:	ee28 7aa8 	vmul.f32	s14, s17, s17
 8019522:	eea9 7a09 	vfma.f32	s14, s18, s18
 8019526:	eea8 7a08 	vfma.f32	s14, s16, s16
 801952a:	eea9 7aa9 	vfma.f32	s14, s19, s19
 801952e:	ee17 0a10 	vmov	r0, s14
 8019532:	f7e7 f811 	bl	8000558 <__aeabi_f2d>
 8019536:	f001 fe95 	bl	801b264 <sqrt>
 801953a:	f7e7 fb3d 	bl	8000bb8 <__aeabi_d2f>
 801953e:	ee07 0a90 	vmov	s15, r0
 8019542:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019546:	eec7 7a27 	vdiv.f32	s15, s14, s15
 801954a:	f895 39e8 	ldrb.w	r3, [r5, #2536]	; 0x9e8
 801954e:	2b01      	cmp	r3, #1
 8019550:	ee27 9a89 	vmul.f32	s18, s15, s18
 8019554:	ee67 8aa8 	vmul.f32	s17, s15, s17
 8019558:	ee27 8a88 	vmul.f32	s16, s15, s16
 801955c:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8019560:	ed86 9a06 	vstr	s18, [r6, #24]
 8019564:	edc6 8a07 	vstr	s17, [r6, #28]
 8019568:	ed86 8a08 	vstr	s16, [r6, #32]
 801956c:	edc6 7a09 	vstr	s15, [r6, #36]	; 0x24
 8019570:	f000 82af 	beq.w	8019ad2 <MotionFX_propagate+0x962>
 8019574:	f8df b07c 	ldr.w	fp, [pc, #124]	; 80195f4 <MotionFX_propagate+0x484>
 8019578:	f895 19fe 	ldrb.w	r1, [r5, #2558]	; 0x9fe
 801957c:	9101      	str	r1, [sp, #4]
 801957e:	f1ab 030c 	sub.w	r3, fp, #12
 8019582:	f1ab 0294 	sub.w	r2, fp, #148	; 0x94
 8019586:	f8cd b000 	str.w	fp, [sp]
 801958a:	f1ab 0088 	sub.w	r0, fp, #136	; 0x88
 801958e:	a902      	add	r1, sp, #8
 8019590:	f7f7 fcc6 	bl	8010f20 <output_update>
 8019594:	f895 29fc 	ldrb.w	r2, [r5, #2556]	; 0x9fc
 8019598:	2300      	movs	r3, #0
 801959a:	f885 39de 	strb.w	r3, [r5, #2526]	; 0x9de
 801959e:	0793      	lsls	r3, r2, #30
 80195a0:	d409      	bmi.n	80195b6 <MotionFX_propagate+0x446>
 80195a2:	f895 19e0 	ldrb.w	r1, [r5, #2528]	; 0x9e0
 80195a6:	fbb1 f3f9 	udiv	r3, r1, r9
 80195aa:	fb09 1913 	mls	r9, r9, r3, r1
 80195ae:	f019 0fff 	tst.w	r9, #255	; 0xff
 80195b2:	f000 81ed 	beq.w	8019990 <MotionFX_propagate+0x820>
 80195b6:	4a0e      	ldr	r2, [pc, #56]	; (80195f0 <MotionFX_propagate+0x480>)
 80195b8:	4650      	mov	r0, sl
 80195ba:	4611      	mov	r1, r2
 80195bc:	f7f5 ff56 	bl	800f46c <m_qmult_eml>
 80195c0:	f895 39fe 	ldrb.w	r3, [r5, #2558]	; 0x9fe
 80195c4:	69b2      	ldr	r2, [r6, #24]
 80195c6:	2b01      	cmp	r3, #1
 80195c8:	f47f ae23 	bne.w	8019212 <MotionFX_propagate+0xa2>
 80195cc:	edd6 7a08 	vldr	s15, [r6, #32]
 80195d0:	69f3      	ldr	r3, [r6, #28]
 80195d2:	61b3      	str	r3, [r6, #24]
 80195d4:	eef1 7a67 	vneg.f32	s15, s15
 80195d8:	61f2      	str	r2, [r6, #28]
 80195da:	edc6 7a08 	vstr	s15, [r6, #32]
 80195de:	e618      	b.n	8019212 <MotionFX_propagate+0xa2>
 80195e0:	a0b5ed8d 	.word	0xa0b5ed8d
 80195e4:	3eb0c6f7 	.word	0x3eb0c6f7
 80195e8:	20000000 	.word	0x20000000
 80195ec:	20001d84 	.word	0x20001d84
 80195f0:	20001d44 	.word	0x20001d44
 80195f4:	20001e70 	.word	0x20001e70
 80195f8:	f995 3419 	ldrsb.w	r3, [r5, #1049]	; 0x419
 80195fc:	f995 2420 	ldrsb.w	r2, [r5, #1056]	; 0x420
 8019600:	f895 9c3d 	ldrb.w	r9, [r5, #3133]	; 0xc3d
 8019604:	ee06 3a90 	vmov	s13, r3
 8019608:	f995 341c 	ldrsb.w	r3, [r5, #1052]	; 0x41c
 801960c:	ee07 3a10 	vmov	s14, r3
 8019610:	f995 3434 	ldrsb.w	r3, [r5, #1076]	; 0x434
 8019614:	ee08 3a90 	vmov	s17, r3
 8019618:	f995 3431 	ldrsb.w	r3, [r5, #1073]	; 0x431
 801961c:	ee08 3a10 	vmov	s16, r3
 8019620:	f995 3418 	ldrsb.w	r3, [r5, #1048]	; 0x418
 8019624:	ee03 3a90 	vmov	s7, r3
 8019628:	f995 341f 	ldrsb.w	r3, [r5, #1055]	; 0x41f
 801962c:	ee09 3a90 	vmov	s19, r3
 8019630:	f995 3437 	ldrsb.w	r3, [r5, #1079]	; 0x437
 8019634:	ee0a 3a10 	vmov	s20, r3
 8019638:	f995 341b 	ldrsb.w	r3, [r5, #1051]	; 0x41b
 801963c:	ee00 3a90 	vmov	s1, r3
 8019640:	f995 3433 	ldrsb.w	r3, [r5, #1075]	; 0x433
 8019644:	ee01 3a10 	vmov	s2, r3
 8019648:	f995 3430 	ldrsb.w	r3, [r5, #1072]	; 0x430
 801964c:	ee01 3a90 	vmov	s3, r3
 8019650:	f995 341a 	ldrsb.w	r3, [r5, #1050]	; 0x41a
 8019654:	ee03 3a10 	vmov	s6, r3
 8019658:	f995 341e 	ldrsb.w	r3, [r5, #1054]	; 0x41e
 801965c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8019660:	ee02 3a10 	vmov	s4, r3
 8019664:	f995 3436 	ldrsb.w	r3, [r5, #1078]	; 0x436
 8019668:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801966c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019670:	eef8 9ae9 	vcvt.f32.s32	s19, s19
 8019674:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 8019678:	ee02 3a90 	vmov	s5, r3
 801967c:	f995 341d 	ldrsb.w	r3, [r5, #1053]	; 0x41d
 8019680:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019684:	ee69 9aa7 	vmul.f32	s19, s19, s15
 8019688:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 801968c:	eef0 7a66 	vmov.f32	s15, s13
 8019690:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8019694:	eeb8 aaca 	vcvt.f32.s32	s20, s20
 8019698:	eee3 7aa4 	vfma.f32	s15, s7, s9
 801969c:	ee03 3a90 	vmov	s7, r3
 80196a0:	f995 3435 	ldrsb.w	r3, [r5, #1077]	; 0x435
 80196a4:	ee68 8a84 	vmul.f32	s17, s17, s8
 80196a8:	ee28 8a04 	vmul.f32	s16, s16, s8
 80196ac:	ee2a aa04 	vmul.f32	s20, s20, s8
 80196b0:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 80196b4:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 80196b8:	eef8 2ae2 	vcvt.f32.s32	s5, s5
 80196bc:	ee04 3a10 	vmov	s8, r3
 80196c0:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 80196c4:	f995 3432 	ldrsb.w	r3, [r5, #1074]	; 0x432
 80196c8:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 80196cc:	eee1 8a05 	vfma.f32	s17, s2, s10
 80196d0:	eea1 8a85 	vfma.f32	s16, s3, s10
 80196d4:	eea2 aa85 	vfma.f32	s20, s5, s10
 80196d8:	ee05 2a10 	vmov	s10, r2
 80196dc:	f995 2438 	ldrsb.w	r2, [r5, #1080]	; 0x438
 80196e0:	eea0 7aa4 	vfma.f32	s14, s1, s9
 80196e4:	eee2 9a24 	vfma.f32	s19, s4, s9
 80196e8:	ee04 3a90 	vmov	s9, r3
 80196ec:	ee06 2a90 	vmov	s13, r2
 80196f0:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 80196f4:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 80196f8:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 80196fc:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8019700:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8019704:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8019708:	eee5 7a83 	vfma.f32	s15, s11, s6
 801970c:	4a9a      	ldr	r2, [pc, #616]	; (8019978 <MotionFX_propagate+0x808>)
 801970e:	eea5 7aa3 	vfma.f32	s14, s11, s7
 8019712:	2300      	movs	r3, #0
 8019714:	9308      	str	r3, [sp, #32]
 8019716:	eee6 8a04 	vfma.f32	s17, s12, s8
 801971a:	9309      	str	r3, [sp, #36]	; 0x24
 801971c:	930a      	str	r3, [sp, #40]	; 0x28
 801971e:	eea6 8a24 	vfma.f32	s16, s12, s9
 8019722:	930c      	str	r3, [sp, #48]	; 0x30
 8019724:	930d      	str	r3, [sp, #52]	; 0x34
 8019726:	eee5 9a85 	vfma.f32	s19, s11, s10
 801972a:	930e      	str	r3, [sp, #56]	; 0x38
 801972c:	eea6 aa26 	vfma.f32	s20, s12, s13
 8019730:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
 8019734:	eef1 aa67 	vneg.f32	s21, s15
 8019738:	eeb1 ba47 	vneg.f32	s22, s14
 801973c:	eef1 8a68 	vneg.f32	s17, s17
 8019740:	eeb1 8a48 	vneg.f32	s16, s16
 8019744:	edcd 9a04 	vstr	s19, [sp, #16]
 8019748:	edcd aa03 	vstr	s21, [sp, #12]
 801974c:	ed8d ba02 	vstr	s22, [sp, #8]
 8019750:	edcd 8a05 	vstr	s17, [sp, #20]
 8019754:	ed8d aa07 	vstr	s20, [sp, #28]
 8019758:	edcd ba0b 	vstr	s23, [sp, #44]	; 0x2c
 801975c:	edcd ba0f 	vstr	s23, [sp, #60]	; 0x3c
 8019760:	ed8d 8a06 	vstr	s16, [sp, #24]
 8019764:	f892 38e0 	ldrb.w	r3, [r2, #2272]	; 0x8e0
 8019768:	b1eb      	cbz	r3, 80197a6 <MotionFX_propagate+0x636>
 801976a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801976e:	eee7 7a07 	vfma.f32	s15, s14, s14
 8019772:	eee9 7aa9 	vfma.f32	s15, s19, s19
 8019776:	ee17 0a90 	vmov	r0, s15
 801977a:	f7e6 feed 	bl	8000558 <__aeabi_f2d>
 801977e:	f001 fd71 	bl	801b264 <sqrt>
 8019782:	f7e7 fa19 	bl	8000bb8 <__aeabi_d2f>
 8019786:	ee07 0a90 	vmov	s15, r0
 801978a:	eecb 7aa7 	vdiv.f32	s15, s23, s15
 801978e:	ee2b ba27 	vmul.f32	s22, s22, s15
 8019792:	ee6a aaa7 	vmul.f32	s21, s21, s15
 8019796:	ee69 9aa7 	vmul.f32	s19, s19, s15
 801979a:	ed8d ba02 	vstr	s22, [sp, #8]
 801979e:	edcd aa03 	vstr	s21, [sp, #12]
 80197a2:	edcd 9a04 	vstr	s19, [sp, #16]
 80197a6:	f1b9 0f00 	cmp.w	r9, #0
 80197aa:	f000 80bc 	beq.w	8019926 <MotionFX_propagate+0x7b6>
 80197ae:	ee07 9a90 	vmov	s15, r9
 80197b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80197b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80197ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80197be:	464a      	mov	r2, r9
 80197c0:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80197c4:	ee28 8a27 	vmul.f32	s16, s16, s15
 80197c8:	ee2a aa27 	vmul.f32	s20, s20, s15
 80197cc:	f895 3c20 	ldrb.w	r3, [r5, #3104]	; 0xc20
 80197d0:	edd6 6a0c 	vldr	s13, [r6, #48]	; 0x30
 80197d4:	ed96 7a0d 	vldr	s14, [r6, #52]	; 0x34
 80197d8:	edd6 7a0e 	vldr	s15, [r6, #56]	; 0x38
 80197dc:	f895 0c1c 	ldrb.w	r0, [r5, #3100]	; 0xc1c
 80197e0:	3301      	adds	r3, #1
 80197e2:	b2db      	uxtb	r3, r3
 80197e4:	ee76 8aa8 	vadd.f32	s17, s13, s17
 80197e8:	ee37 8a08 	vadd.f32	s16, s14, s16
 80197ec:	ee37 aa8a 	vadd.f32	s20, s15, s20
 80197f0:	fbb3 f1f2 	udiv	r1, r3, r2
 80197f4:	fb02 3311 	mls	r3, r2, r1, r3
 80197f8:	f885 3c20 	strb.w	r3, [r5, #3104]	; 0xc20
 80197fc:	edc6 8a0c 	vstr	s17, [r6, #48]	; 0x30
 8019800:	ed86 8a0d 	vstr	s16, [r6, #52]	; 0x34
 8019804:	ed86 aa0e 	vstr	s20, [r6, #56]	; 0x38
 8019808:	2800      	cmp	r0, #0
 801980a:	f040 80a7 	bne.w	801995c <MotionFX_propagate+0x7ec>
 801980e:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
 8019812:	4a5a      	ldr	r2, [pc, #360]	; (801997c <MotionFX_propagate+0x80c>)
 8019814:	f102 074c 	add.w	r7, r2, #76	; 0x4c
 8019818:	4611      	mov	r1, r2
 801981a:	f1a2 0010 	sub.w	r0, r2, #16
 801981e:	f7f5 fe25 	bl	800f46c <m_qmult_eml>
 8019822:	f1a7 027c 	sub.w	r2, r7, #124	; 0x7c
 8019826:	4611      	mov	r1, r2
 8019828:	4650      	mov	r0, sl
 801982a:	f7f5 fe1f 	bl	800f46c <m_qmult_eml>
 801982e:	f107 0218 	add.w	r2, r7, #24
 8019832:	f1a7 019c 	sub.w	r1, r7, #156	; 0x9c
 8019836:	f1a7 004c 	sub.w	r0, r7, #76	; 0x4c
 801983a:	f7f5 fe17 	bl	800f46c <m_qmult_eml>
 801983e:	f107 0218 	add.w	r2, r7, #24
 8019842:	4611      	mov	r1, r2
 8019844:	f1a7 007c 	sub.w	r0, r7, #124	; 0x7c
 8019848:	f7f5 fe10 	bl	800f46c <m_qmult_eml>
 801984c:	edd7 8a07 	vldr	s17, [r7, #28]
 8019850:	edd7 9a06 	vldr	s19, [r7, #24]
 8019854:	ed97 8a08 	vldr	s16, [r7, #32]
 8019858:	ed97 aa09 	vldr	s20, [r7, #36]	; 0x24
 801985c:	ee28 7aa8 	vmul.f32	s14, s17, s17
 8019860:	eea9 7aa9 	vfma.f32	s14, s19, s19
 8019864:	eea8 7a08 	vfma.f32	s14, s16, s16
 8019868:	eeaa 7a0a 	vfma.f32	s14, s20, s20
 801986c:	ee17 0a10 	vmov	r0, s14
 8019870:	f7e6 fe72 	bl	8000558 <__aeabi_f2d>
 8019874:	f001 fcf6 	bl	801b264 <sqrt>
 8019878:	f7e7 f99e 	bl	8000bb8 <__aeabi_d2f>
 801987c:	ee07 0a90 	vmov	s15, r0
 8019880:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019884:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8019888:	f895 3c28 	ldrb.w	r3, [r5, #3112]	; 0xc28
 801988c:	2b01      	cmp	r3, #1
 801988e:	ee67 9aa9 	vmul.f32	s19, s15, s19
 8019892:	ee67 8aa8 	vmul.f32	s17, s15, s17
 8019896:	ee27 8a88 	vmul.f32	s16, s15, s16
 801989a:	ee67 7a8a 	vmul.f32	s15, s15, s20
 801989e:	edc7 9a06 	vstr	s19, [r7, #24]
 80198a2:	edc7 8a07 	vstr	s17, [r7, #28]
 80198a6:	ed87 8a08 	vstr	s16, [r7, #32]
 80198aa:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 80198ae:	f000 81b7 	beq.w	8019c20 <MotionFX_propagate+0xab0>
 80198b2:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 801998c <MotionFX_propagate+0x81c>
 80198b6:	f895 1c3e 	ldrb.w	r1, [r5, #3134]	; 0xc3e
 80198ba:	9101      	str	r1, [sp, #4]
 80198bc:	f1ab 030c 	sub.w	r3, fp, #12
 80198c0:	f1ab 0294 	sub.w	r2, fp, #148	; 0x94
 80198c4:	a902      	add	r1, sp, #8
 80198c6:	f8cd b000 	str.w	fp, [sp]
 80198ca:	f1ab 0088 	sub.w	r0, fp, #136	; 0x88
 80198ce:	f7f7 fb27 	bl	8010f20 <output_update>
 80198d2:	f895 2c3c 	ldrb.w	r2, [r5, #3132]	; 0xc3c
 80198d6:	2300      	movs	r3, #0
 80198d8:	0791      	lsls	r1, r2, #30
 80198da:	f885 3c1e 	strb.w	r3, [r5, #3102]	; 0xc1e
 80198de:	d409      	bmi.n	80198f4 <MotionFX_propagate+0x784>
 80198e0:	f895 1c20 	ldrb.w	r1, [r5, #3104]	; 0xc20
 80198e4:	fbb1 f3f9 	udiv	r3, r1, r9
 80198e8:	fb09 1913 	mls	r9, r9, r3, r1
 80198ec:	f019 0fff 	tst.w	r9, #255	; 0xff
 80198f0:	f000 80f6 	beq.w	8019ae0 <MotionFX_propagate+0x970>
 80198f4:	4a22      	ldr	r2, [pc, #136]	; (8019980 <MotionFX_propagate+0x810>)
 80198f6:	4650      	mov	r0, sl
 80198f8:	4611      	mov	r1, r2
 80198fa:	f7f5 fdb7 	bl	800f46c <m_qmult_eml>
 80198fe:	f895 3c3e 	ldrb.w	r3, [r5, #3134]	; 0xc3e
 8019902:	2b01      	cmp	r3, #1
 8019904:	f47f ac80 	bne.w	8019208 <MotionFX_propagate+0x98>
 8019908:	edd7 7a08 	vldr	s15, [r7, #32]
 801990c:	69ba      	ldr	r2, [r7, #24]
 801990e:	69fb      	ldr	r3, [r7, #28]
 8019910:	61bb      	str	r3, [r7, #24]
 8019912:	eef1 7a67 	vneg.f32	s15, s15
 8019916:	61fa      	str	r2, [r7, #28]
 8019918:	edc7 7a08 	vstr	s15, [r7, #32]
 801991c:	e474      	b.n	8019208 <MotionFX_propagate+0x98>
 801991e:	2201      	movs	r2, #1
 8019920:	f885 29fd 	strb.w	r2, [r5, #2557]	; 0x9fd
 8019924:	e5b3      	b.n	801948e <MotionFX_propagate+0x31e>
 8019926:	2201      	movs	r2, #1
 8019928:	f885 2c3d 	strb.w	r2, [r5, #3133]	; 0xc3d
 801992c:	e74e      	b.n	80197cc <MotionFX_propagate+0x65c>
 801992e:	eeca 7a8c 	vdiv.f32	s15, s21, s24
 8019932:	ee6b baa7 	vmul.f32	s23, s23, s15
 8019936:	ee2b ba27 	vmul.f32	s22, s22, s15
 801993a:	ee2a aa27 	vmul.f32	s20, s20, s15
 801993e:	e58d      	b.n	801945c <MotionFX_propagate+0x2ec>
 8019940:	4b10      	ldr	r3, [pc, #64]	; (8019984 <MotionFX_propagate+0x814>)
 8019942:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
 8019946:	eeb0 0a49 	vmov.f32	s0, s18
 801994a:	f1a3 020c 	sub.w	r2, r3, #12
 801994e:	4618      	mov	r0, r3
 8019950:	f8cd a000 	str.w	sl, [sp]
 8019954:	a905      	add	r1, sp, #20
 8019956:	f7f6 f821 	bl	800f99c <SpacePointGyroProp>
 801995a:	e5bb      	b.n	80194d4 <MotionFX_propagate+0x364>
 801995c:	4b0a      	ldr	r3, [pc, #40]	; (8019988 <MotionFX_propagate+0x818>)
 801995e:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
 8019962:	f1a3 020c 	sub.w	r2, r3, #12
 8019966:	4618      	mov	r0, r3
 8019968:	f8cd a000 	str.w	sl, [sp]
 801996c:	eeb0 0a49 	vmov.f32	s0, s18
 8019970:	a905      	add	r1, sp, #20
 8019972:	f7f6 f813 	bl	800f99c <SpacePointGyroProp>
 8019976:	e74c      	b.n	8019812 <MotionFX_propagate+0x6a2>
 8019978:	20000000 	.word	0x20000000
 801997c:	20001fc4 	.word	0x20001fc4
 8019980:	20001f84 	.word	0x20001f84
 8019984:	20001d14 	.word	0x20001d14
 8019988:	20001f54 	.word	0x20001f54
 801998c:	200020b0 	.word	0x200020b0
 8019990:	f8d8 3088 	ldr.w	r3, [r8, #136]	; 0x88
 8019994:	f8d8 008c 	ldr.w	r0, [r8, #140]	; 0x8c
 8019998:	f8d8 1090 	ldr.w	r1, [r8, #144]	; 0x90
 801999c:	f8c8 3098 	str.w	r3, [r8, #152]	; 0x98
 80199a0:	f042 0201 	orr.w	r2, r2, #1
 80199a4:	f8d8 3094 	ldr.w	r3, [r8, #148]	; 0x94
 80199a8:	f8c8 009c 	str.w	r0, [r8, #156]	; 0x9c
 80199ac:	f885 29fc 	strb.w	r2, [r5, #2556]	; 0x9fc
 80199b0:	4650      	mov	r0, sl
 80199b2:	aa10      	add	r2, sp, #64	; 0x40
 80199b4:	f8c8 10a0 	str.w	r1, [r8, #160]	; 0xa0
 80199b8:	f5ab 7196 	sub.w	r1, fp, #300	; 0x12c
 80199bc:	f8c8 30a4 	str.w	r3, [r8, #164]	; 0xa4
 80199c0:	f7f5 fd54 	bl	800f46c <m_qmult_eml>
 80199c4:	aa08      	add	r2, sp, #32
 80199c6:	f5ab 71a6 	sub.w	r1, fp, #332	; 0x14c
 80199ca:	f5ab 7086 	sub.w	r0, fp, #268	; 0x10c
 80199ce:	f7f5 fd4d 	bl	800f46c <m_qmult_eml>
 80199d2:	aa08      	add	r2, sp, #32
 80199d4:	4611      	mov	r1, r2
 80199d6:	a810      	add	r0, sp, #64	; 0x40
 80199d8:	f7f5 fd48 	bl	800f46c <m_qmult_eml>
 80199dc:	ed9d 9a09 	vldr	s18, [sp, #36]	; 0x24
 80199e0:	eddd 9a08 	vldr	s19, [sp, #32]
 80199e4:	eddd 8a0a 	vldr	s17, [sp, #40]	; 0x28
 80199e8:	ed9d 8a0b 	vldr	s16, [sp, #44]	; 0x2c
 80199ec:	ee69 7a09 	vmul.f32	s15, s18, s18
 80199f0:	eee9 7aa9 	vfma.f32	s15, s19, s19
 80199f4:	eee8 7aa8 	vfma.f32	s15, s17, s17
 80199f8:	eee8 7a08 	vfma.f32	s15, s16, s16
 80199fc:	ee17 0a90 	vmov	r0, s15
 8019a00:	f7e6 fdaa 	bl	8000558 <__aeabi_f2d>
 8019a04:	f001 fc2e 	bl	801b264 <sqrt>
 8019a08:	f7e7 f8d6 	bl	8000bb8 <__aeabi_d2f>
 8019a0c:	f895 39fd 	ldrb.w	r3, [r5, #2557]	; 0x9fd
 8019a10:	ed98 6a33 	vldr	s12, [r8, #204]	; 0xcc
 8019a14:	edd8 6a32 	vldr	s13, [r8, #200]	; 0xc8
 8019a18:	edd8 4a34 	vldr	s9, [r8, #208]	; 0xd0
 8019a1c:	f8d8 10ac 	ldr.w	r1, [r8, #172]	; 0xac
 8019a20:	f8d8 20b0 	ldr.w	r2, [r8, #176]	; 0xb0
 8019a24:	f8c8 10bc 	str.w	r1, [r8, #188]	; 0xbc
 8019a28:	ee07 3a10 	vmov	s14, r3
 8019a2c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8019a30:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8019a34:	eec5 7a07 	vdiv.f32	s15, s10, s14
 8019a38:	f8d8 30a8 	ldr.w	r3, [r8, #168]	; 0xa8
 8019a3c:	f8c8 30b8 	str.w	r3, [r8, #184]	; 0xb8
 8019a40:	f8d8 30b4 	ldr.w	r3, [r8, #180]	; 0xb4
 8019a44:	f8c8 20c0 	str.w	r2, [r8, #192]	; 0xc0
 8019a48:	f8c8 30c4 	str.w	r3, [r8, #196]	; 0xc4
 8019a4c:	ee07 0a10 	vmov	s14, r0
 8019a50:	eec5 5a07 	vdiv.f32	s11, s10, s14
 8019a54:	ee27 6a86 	vmul.f32	s12, s15, s12
 8019a58:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8019a5c:	ee26 7a06 	vmul.f32	s14, s12, s12
 8019a60:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8019a64:	eea6 7aa6 	vfma.f32	s14, s13, s13
 8019a68:	ee69 9aa5 	vmul.f32	s19, s19, s11
 8019a6c:	eea7 7aa7 	vfma.f32	s14, s15, s15
 8019a70:	ee29 9a25 	vmul.f32	s18, s18, s11
 8019a74:	ee68 8aa5 	vmul.f32	s17, s17, s11
 8019a78:	ee28 8a25 	vmul.f32	s16, s16, s11
 8019a7c:	eeb4 7ac5 	vcmpe.f32	s14, s10
 8019a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a84:	edc8 9a1e 	vstr	s19, [r8, #120]	; 0x78
 8019a88:	ed88 9a1f 	vstr	s18, [r8, #124]	; 0x7c
 8019a8c:	edc8 8a20 	vstr	s17, [r8, #128]	; 0x80
 8019a90:	ed88 8a21 	vstr	s16, [r8, #132]	; 0x84
 8019a94:	ed88 6a37 	vstr	s12, [r8, #220]	; 0xdc
 8019a98:	edc8 6a36 	vstr	s13, [r8, #216]	; 0xd8
 8019a9c:	edc8 7a38 	vstr	s15, [r8, #224]	; 0xe0
 8019aa0:	f100 80c5 	bmi.w	8019c2e <MotionFX_propagate+0xabe>
 8019aa4:	2000      	movs	r0, #0
 8019aa6:	2300      	movs	r3, #0
 8019aa8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8019aac:	f8c8 00e4 	str.w	r0, [r8, #228]	; 0xe4
 8019ab0:	f8c8 30a8 	str.w	r3, [r8, #168]	; 0xa8
 8019ab4:	f8c8 30ac 	str.w	r3, [r8, #172]	; 0xac
 8019ab8:	f8c8 30b0 	str.w	r3, [r8, #176]	; 0xb0
 8019abc:	f8c8 30e8 	str.w	r3, [r8, #232]	; 0xe8
 8019ac0:	f8c8 30ec 	str.w	r3, [r8, #236]	; 0xec
 8019ac4:	f8c8 30f0 	str.w	r3, [r8, #240]	; 0xf0
 8019ac8:	f8c8 20b4 	str.w	r2, [r8, #180]	; 0xb4
 8019acc:	f8c8 20f4 	str.w	r2, [r8, #244]	; 0xf4
 8019ad0:	e576      	b.n	80195c0 <MotionFX_propagate+0x450>
 8019ad2:	2300      	movs	r3, #0
 8019ad4:	ed86 7a09 	vstr	s14, [r6, #36]	; 0x24
 8019ad8:	61b3      	str	r3, [r6, #24]
 8019ada:	61f3      	str	r3, [r6, #28]
 8019adc:	6233      	str	r3, [r6, #32]
 8019ade:	e549      	b.n	8019574 <MotionFX_propagate+0x404>
 8019ae0:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
 8019ae4:	f8d6 008c 	ldr.w	r0, [r6, #140]	; 0x8c
 8019ae8:	f8d6 1090 	ldr.w	r1, [r6, #144]	; 0x90
 8019aec:	f8c6 3098 	str.w	r3, [r6, #152]	; 0x98
 8019af0:	f042 0201 	orr.w	r2, r2, #1
 8019af4:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8019af8:	f8c6 009c 	str.w	r0, [r6, #156]	; 0x9c
 8019afc:	f885 2c3c 	strb.w	r2, [r5, #3132]	; 0xc3c
 8019b00:	4650      	mov	r0, sl
 8019b02:	aa10      	add	r2, sp, #64	; 0x40
 8019b04:	f8c6 10a0 	str.w	r1, [r6, #160]	; 0xa0
 8019b08:	f5ab 7196 	sub.w	r1, fp, #300	; 0x12c
 8019b0c:	f8c6 30a4 	str.w	r3, [r6, #164]	; 0xa4
 8019b10:	f7f5 fcac 	bl	800f46c <m_qmult_eml>
 8019b14:	aa08      	add	r2, sp, #32
 8019b16:	f5ab 71a6 	sub.w	r1, fp, #332	; 0x14c
 8019b1a:	f5ab 7086 	sub.w	r0, fp, #268	; 0x10c
 8019b1e:	f7f5 fca5 	bl	800f46c <m_qmult_eml>
 8019b22:	aa08      	add	r2, sp, #32
 8019b24:	4611      	mov	r1, r2
 8019b26:	a810      	add	r0, sp, #64	; 0x40
 8019b28:	f7f5 fca0 	bl	800f46c <m_qmult_eml>
 8019b2c:	eddd 8a09 	vldr	s17, [sp, #36]	; 0x24
 8019b30:	eddd 9a08 	vldr	s19, [sp, #32]
 8019b34:	ed9d 8a0a 	vldr	s16, [sp, #40]	; 0x28
 8019b38:	ed9d aa0b 	vldr	s20, [sp, #44]	; 0x2c
 8019b3c:	ee68 7aa8 	vmul.f32	s15, s17, s17
 8019b40:	eee9 7aa9 	vfma.f32	s15, s19, s19
 8019b44:	eee8 7a08 	vfma.f32	s15, s16, s16
 8019b48:	eeea 7a0a 	vfma.f32	s15, s20, s20
 8019b4c:	ee17 0a90 	vmov	r0, s15
 8019b50:	f7e6 fd02 	bl	8000558 <__aeabi_f2d>
 8019b54:	f001 fb86 	bl	801b264 <sqrt>
 8019b58:	f7e7 f82e 	bl	8000bb8 <__aeabi_d2f>
 8019b5c:	f895 3c3d 	ldrb.w	r3, [r5, #3133]	; 0xc3d
 8019b60:	edd6 5a33 	vldr	s11, [r6, #204]	; 0xcc
 8019b64:	ed96 6a32 	vldr	s12, [r6, #200]	; 0xc8
 8019b68:	edd6 4a34 	vldr	s9, [r6, #208]	; 0xd0
 8019b6c:	f8d6 10ac 	ldr.w	r1, [r6, #172]	; 0xac
 8019b70:	f8d6 20b0 	ldr.w	r2, [r6, #176]	; 0xb0
 8019b74:	f8c6 10bc 	str.w	r1, [r6, #188]	; 0xbc
 8019b78:	ee07 3a10 	vmov	s14, r3
 8019b7c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8019b80:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8019b84:	eec5 7a07 	vdiv.f32	s15, s10, s14
 8019b88:	f8d6 30a8 	ldr.w	r3, [r6, #168]	; 0xa8
 8019b8c:	f8c6 30b8 	str.w	r3, [r6, #184]	; 0xb8
 8019b90:	f8d6 30b4 	ldr.w	r3, [r6, #180]	; 0xb4
 8019b94:	f8c6 20c0 	str.w	r2, [r6, #192]	; 0xc0
 8019b98:	f8c6 30c4 	str.w	r3, [r6, #196]	; 0xc4
 8019b9c:	ee07 0a10 	vmov	s14, r0
 8019ba0:	ee85 7a07 	vdiv.f32	s14, s10, s14
 8019ba4:	ee67 5aa5 	vmul.f32	s11, s15, s11
 8019ba8:	ee27 6a86 	vmul.f32	s12, s15, s12
 8019bac:	ee65 6aa5 	vmul.f32	s13, s11, s11
 8019bb0:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8019bb4:	eee6 6a06 	vfma.f32	s13, s12, s12
 8019bb8:	ee67 9a29 	vmul.f32	s19, s14, s19
 8019bbc:	eee7 6aa7 	vfma.f32	s13, s15, s15
 8019bc0:	ee67 8a28 	vmul.f32	s17, s14, s17
 8019bc4:	ee27 8a08 	vmul.f32	s16, s14, s16
 8019bc8:	eef4 6ac5 	vcmpe.f32	s13, s10
 8019bcc:	ee27 7a0a 	vmul.f32	s14, s14, s20
 8019bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019bd4:	edc6 9a1e 	vstr	s19, [r6, #120]	; 0x78
 8019bd8:	edc6 8a1f 	vstr	s17, [r6, #124]	; 0x7c
 8019bdc:	ed86 8a20 	vstr	s16, [r6, #128]	; 0x80
 8019be0:	ed86 7a21 	vstr	s14, [r6, #132]	; 0x84
 8019be4:	edc6 5a37 	vstr	s11, [r6, #220]	; 0xdc
 8019be8:	ed86 6a36 	vstr	s12, [r6, #216]	; 0xd8
 8019bec:	edc6 7a38 	vstr	s15, [r6, #224]	; 0xe0
 8019bf0:	d428      	bmi.n	8019c44 <MotionFX_propagate+0xad4>
 8019bf2:	2000      	movs	r0, #0
 8019bf4:	2300      	movs	r3, #0
 8019bf6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8019bfa:	f8c6 00e4 	str.w	r0, [r6, #228]	; 0xe4
 8019bfe:	f8c6 30a8 	str.w	r3, [r6, #168]	; 0xa8
 8019c02:	f8c6 30ac 	str.w	r3, [r6, #172]	; 0xac
 8019c06:	f8c6 30b0 	str.w	r3, [r6, #176]	; 0xb0
 8019c0a:	f8c6 30e8 	str.w	r3, [r6, #232]	; 0xe8
 8019c0e:	f8c6 30ec 	str.w	r3, [r6, #236]	; 0xec
 8019c12:	f8c6 30f0 	str.w	r3, [r6, #240]	; 0xf0
 8019c16:	f8c6 20b4 	str.w	r2, [r6, #180]	; 0xb4
 8019c1a:	f8c6 20f4 	str.w	r2, [r6, #244]	; 0xf4
 8019c1e:	e66e      	b.n	80198fe <MotionFX_propagate+0x78e>
 8019c20:	2300      	movs	r3, #0
 8019c22:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 8019c26:	61bb      	str	r3, [r7, #24]
 8019c28:	61fb      	str	r3, [r7, #28]
 8019c2a:	623b      	str	r3, [r7, #32]
 8019c2c:	e641      	b.n	80198b2 <MotionFX_propagate+0x742>
 8019c2e:	ee75 7a47 	vsub.f32	s15, s10, s14
 8019c32:	ee17 0a90 	vmov	r0, s15
 8019c36:	f7e6 fc8f 	bl	8000558 <__aeabi_f2d>
 8019c3a:	f001 fb13 	bl	801b264 <sqrt>
 8019c3e:	f7e6 ffbb 	bl	8000bb8 <__aeabi_d2f>
 8019c42:	e730      	b.n	8019aa6 <MotionFX_propagate+0x936>
 8019c44:	ee75 7a66 	vsub.f32	s15, s10, s13
 8019c48:	ee17 0a90 	vmov	r0, s15
 8019c4c:	f7e6 fc84 	bl	8000558 <__aeabi_f2d>
 8019c50:	f001 fb08 	bl	801b264 <sqrt>
 8019c54:	f7e6 ffb0 	bl	8000bb8 <__aeabi_d2f>
 8019c58:	e7cc      	b.n	8019bf4 <MotionFX_propagate+0xa84>
 8019c5a:	bf00      	nop

08019c5c <MotionFX_MagCal_init>:
 8019c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019c60:	4c50      	ldr	r4, [pc, #320]	; (8019da4 <MotionFX_MagCal_init+0x148>)
 8019c62:	f894 3d49 	ldrb.w	r3, [r4, #3401]	; 0xd49
 8019c66:	b90b      	cbnz	r3, 8019c6c <MotionFX_MagCal_init+0x10>
 8019c68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019c6c:	1e43      	subs	r3, r0, #1
 8019c6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8019c72:	d2f9      	bcs.n	8019c68 <MotionFX_MagCal_init+0xc>
 8019c74:	460e      	mov	r6, r1
 8019c76:	4605      	mov	r5, r0
 8019c78:	b207      	sxth	r7, r0
 8019c7a:	2900      	cmp	r1, #0
 8019c7c:	f000 8089 	beq.w	8019d92 <MotionFX_MagCal_init+0x136>
 8019c80:	f504 688c 	add.w	r8, r4, #1120	; 0x460
 8019c84:	2600      	movs	r6, #0
 8019c86:	4640      	mov	r0, r8
 8019c88:	f7f5 fc9e 	bl	800f5c8 <MEMS_DataBuffInit>
 8019c8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8019c90:	4631      	mov	r1, r6
 8019c92:	f44f 7248 	mov.w	r2, #800	; 0x320
 8019c96:	f504 60a0 	add.w	r0, r4, #1280	; 0x500
 8019c9a:	f8a4 34b0 	strh.w	r3, [r4, #1200]	; 0x4b0
 8019c9e:	f884 64a8 	strb.w	r6, [r4, #1192]	; 0x4a8
 8019ca2:	f8c4 64ac 	str.w	r6, [r4, #1196]	; 0x4ac
 8019ca6:	f884 6474 	strb.w	r6, [r4, #1140]	; 0x474
 8019caa:	f884 6475 	strb.w	r6, [r4, #1141]	; 0x475
 8019cae:	f000 f9b6 	bl	801a01e <memset>
 8019cb2:	225f      	movs	r2, #95	; 0x5f
 8019cb4:	f44f 7080 	mov.w	r0, #256	; 0x100
 8019cb8:	23ff      	movs	r3, #255	; 0xff
 8019cba:	4631      	mov	r1, r6
 8019cbc:	f884 2501 	strb.w	r2, [r4, #1281]	; 0x501
 8019cc0:	f44f 6c70 	mov.w	ip, #3840	; 0xf00
 8019cc4:	222e      	movs	r2, #46	; 0x2e
 8019cc6:	f8a4 04b4 	strh.w	r0, [r4, #1204]	; 0x4b4
 8019cca:	f204 40ce 	addw	r0, r4, #1230	; 0x4ce
 8019cce:	f884 3502 	strb.w	r3, [r4, #1282]	; 0x502
 8019cd2:	f884 3486 	strb.w	r3, [r4, #1158]	; 0x486
 8019cd6:	f8c4 6478 	str.w	r6, [r4, #1144]	; 0x478
 8019cda:	f8c4 647c 	str.w	r6, [r4, #1148]	; 0x47c
 8019cde:	f8c4 6480 	str.w	r6, [r4, #1152]	; 0x480
 8019ce2:	f8a4 c484 	strh.w	ip, [r4, #1156]	; 0x484
 8019ce6:	f000 f99a 	bl	801a01e <memset>
 8019cea:	f1a5 030a 	sub.w	r3, r5, #10
 8019cee:	b29b      	uxth	r3, r3
 8019cf0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8019cf4:	2101      	movs	r1, #1
 8019cf6:	2b32      	cmp	r3, #50	; 0x32
 8019cf8:	f884 64cc 	strb.w	r6, [r4, #1228]	; 0x4cc
 8019cfc:	f8c8 207c 	str.w	r2, [r8, #124]	; 0x7c
 8019d00:	f8c8 208c 	str.w	r2, [r8, #140]	; 0x8c
 8019d04:	f8c8 209c 	str.w	r2, [r8, #156]	; 0x9c
 8019d08:	f884 14cd 	strb.w	r1, [r4, #1229]	; 0x4cd
 8019d0c:	d801      	bhi.n	8019d12 <MotionFX_MagCal_init+0xb6>
 8019d0e:	f884 14a8 	strb.w	r1, [r4, #1192]	; 0x4a8
 8019d12:	2100      	movs	r1, #0
 8019d14:	4824      	ldr	r0, [pc, #144]	; (8019da8 <MotionFX_MagCal_init+0x14c>)
 8019d16:	f7f5 ffd7 	bl	800fcc8 <MEMSLoadMagCalNVM>
 8019d1a:	f9b4 3462 	ldrsh.w	r3, [r4, #1122]	; 0x462
 8019d1e:	4a23      	ldr	r2, [pc, #140]	; (8019dac <MotionFX_MagCal_init+0x150>)
 8019d20:	1b5b      	subs	r3, r3, r5
 8019d22:	ee07 3a90 	vmov	s15, r3
 8019d26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019d2a:	23c8      	movs	r3, #200	; 0xc8
 8019d2c:	eef0 7ae7 	vabs.f32	s15, s15
 8019d30:	fb93 f3f5 	sdiv	r3, r3, r5
 8019d34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019d38:	b2db      	uxtb	r3, r3
 8019d3a:	2b0f      	cmp	r3, #15
 8019d3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8019d40:	bf28      	it	cs
 8019d42:	230f      	movcs	r3, #15
 8019d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d48:	f884 3d6e 	strb.w	r3, [r4, #3438]	; 0xd6e
 8019d4c:	f8c2 50c4 	str.w	r5, [r2, #196]	; 0xc4
 8019d50:	dc0e      	bgt.n	8019d70 <MotionFX_MagCal_init+0x114>
 8019d52:	edd8 7a01 	vldr	s15, [r8, #4]
 8019d56:	eddf 6a16 	vldr	s13, [pc, #88]	; 8019db0 <MotionFX_MagCal_init+0x154>
 8019d5a:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8019db4 <MotionFX_MagCal_init+0x158>
 8019d5e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8019d62:	eef0 7ae7 	vabs.f32	s15, s15
 8019d66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8019d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d6e:	dd0b      	ble.n	8019d88 <MotionFX_MagCal_init+0x12c>
 8019d70:	480d      	ldr	r0, [pc, #52]	; (8019da8 <MotionFX_MagCal_init+0x14c>)
 8019d72:	f7f5 fc25 	bl	800f5c0 <MEMS_EmptyDataFrame>
 8019d76:	4a10      	ldr	r2, [pc, #64]	; (8019db8 <MotionFX_MagCal_init+0x15c>)
 8019d78:	f8a4 7462 	strh.w	r7, [r4, #1122]	; 0x462
 8019d7c:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8019d80:	f8c8 2004 	str.w	r2, [r8, #4]
 8019d84:	f8a4 3460 	strh.w	r3, [r4, #1120]	; 0x460
 8019d88:	2300      	movs	r3, #0
 8019d8a:	f884 3de8 	strb.w	r3, [r4, #3560]	; 0xde8
 8019d8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019d92:	f204 4074 	addw	r0, r4, #1140	; 0x474
 8019d96:	f7f5 ffd9 	bl	800fd4c <MEMSSaveMagCalNVM>
 8019d9a:	f504 688c 	add.w	r8, r4, #1120	; 0x460
 8019d9e:	f884 64a8 	strb.w	r6, [r4, #1192]	; 0x4a8
 8019da2:	e7ba      	b.n	8019d1a <MotionFX_MagCal_init+0xbe>
 8019da4:	200013d0 	.word	0x200013d0
 8019da8:	20001830 	.word	0x20001830
 8019dac:	200010f8 	.word	0x200010f8
 8019db0:	3dcccccd 	.word	0x3dcccccd
 8019db4:	3c23d70a 	.word	0x3c23d70a
 8019db8:	3dcccccd 	.word	0x3dcccccd

08019dbc <MotionFX_MagCal_run>:
 8019dbc:	4b4c      	ldr	r3, [pc, #304]	; (8019ef0 <MotionFX_MagCal_run+0x134>)
 8019dbe:	f893 2d49 	ldrb.w	r2, [r3, #3401]	; 0xd49
 8019dc2:	2a00      	cmp	r2, #0
 8019dc4:	d07f      	beq.n	8019ec6 <MotionFX_MagCal_run+0x10a>
 8019dc6:	ed90 7a00 	vldr	s14, [r0]
 8019dca:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8019ef4 <MotionFX_MagCal_run+0x138>
 8019dce:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019dd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019dd4:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8019dd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019ddc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8019de0:	bfac      	ite	ge
 8019de2:	ee77 7a87 	vaddge.f32	s15, s15, s14
 8019de6:	ee77 7ac7 	vsublt.f32	s15, s15, s14
 8019dea:	b085      	sub	sp, #20
 8019dec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019df0:	ed90 7a01 	vldr	s14, [r0, #4]
 8019df4:	edcd 7a01 	vstr	s15, [sp, #4]
 8019df8:	eddf 7a3e 	vldr	s15, [pc, #248]	; 8019ef4 <MotionFX_MagCal_run+0x138>
 8019dfc:	f893 2de8 	ldrb.w	r2, [r3, #3560]	; 0xde8
 8019e00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019e04:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8019e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019e0c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8019e10:	bfac      	ite	ge
 8019e12:	ee77 7a87 	vaddge.f32	s15, s15, s14
 8019e16:	ee77 7ac7 	vsublt.f32	s15, s15, s14
 8019e1a:	ed90 7a02 	vldr	s14, [r0, #8]
 8019e1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019e22:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8019e26:	edcd 7a02 	vstr	s15, [sp, #8]
 8019e2a:	eddf 7a32 	vldr	s15, [pc, #200]	; 8019ef4 <MotionFX_MagCal_run+0x138>
 8019e2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019e32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019e36:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8019e3a:	bfac      	ite	ge
 8019e3c:	ee77 7a87 	vaddge.f32	s15, s15, s14
 8019e40:	ee77 7ac7 	vsublt.f32	s15, s15, s14
 8019e44:	e9dd 4601 	ldrd	r4, r6, [sp, #4]
 8019e48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019e4c:	edcd 7a03 	vstr	s15, [sp, #12]
 8019e50:	ee17 5a90 	vmov	r5, s15
 8019e54:	b37a      	cbz	r2, 8019eb6 <MotionFX_MagCal_run+0xfa>
 8019e56:	4828      	ldr	r0, [pc, #160]	; (8019ef8 <MotionFX_MagCal_run+0x13c>)
 8019e58:	00d1      	lsls	r1, r2, #3
 8019e5a:	f8d0 00c4 	ldr.w	r0, [r0, #196]	; 0xc4
 8019e5e:	185f      	adds	r7, r3, r1
 8019e60:	fb10 f002 	smulbb	r0, r0, r2
 8019e64:	f8a7 0d70 	strh.w	r0, [r7, #3440]	; 0xd70
 8019e68:	f647 70fe 	movw	r0, #32766	; 0x7ffe
 8019e6c:	4f23      	ldr	r7, [pc, #140]	; (8019efc <MotionFX_MagCal_run+0x140>)
 8019e6e:	4284      	cmp	r4, r0
 8019e70:	bfa8      	it	ge
 8019e72:	4604      	movge	r4, r0
 8019e74:	4285      	cmp	r5, r0
 8019e76:	bfa8      	it	ge
 8019e78:	4605      	movge	r5, r0
 8019e7a:	42bc      	cmp	r4, r7
 8019e7c:	bfb8      	it	lt
 8019e7e:	463c      	movlt	r4, r7
 8019e80:	42be      	cmp	r6, r7
 8019e82:	db03      	blt.n	8019e8c <MotionFX_MagCal_run+0xd0>
 8019e84:	42b0      	cmp	r0, r6
 8019e86:	bfa8      	it	ge
 8019e88:	4630      	movge	r0, r6
 8019e8a:	b200      	sxth	r0, r0
 8019e8c:	4f1b      	ldr	r7, [pc, #108]	; (8019efc <MotionFX_MagCal_run+0x140>)
 8019e8e:	f893 6d6e 	ldrb.w	r6, [r3, #3438]	; 0xd6e
 8019e92:	3201      	adds	r2, #1
 8019e94:	4419      	add	r1, r3
 8019e96:	b2d2      	uxtb	r2, r2
 8019e98:	42bd      	cmp	r5, r7
 8019e9a:	bfb8      	it	lt
 8019e9c:	463d      	movlt	r5, r7
 8019e9e:	4296      	cmp	r6, r2
 8019ea0:	f883 2de8 	strb.w	r2, [r3, #3560]	; 0xde8
 8019ea4:	f8a1 4d72 	strh.w	r4, [r1, #3442]	; 0xd72
 8019ea8:	f8a1 0d74 	strh.w	r0, [r1, #3444]	; 0xd74
 8019eac:	f8a1 5d76 	strh.w	r5, [r1, #3446]	; 0xd76
 8019eb0:	d00a      	beq.n	8019ec8 <MotionFX_MagCal_run+0x10c>
 8019eb2:	b005      	add	sp, #20
 8019eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019eb6:	68c1      	ldr	r1, [r0, #12]
 8019eb8:	f8c3 1d68 	str.w	r1, [r3, #3432]	; 0xd68
 8019ebc:	2101      	movs	r1, #1
 8019ebe:	f883 1d6c 	strb.w	r1, [r3, #3436]	; 0xd6c
 8019ec2:	4611      	mov	r1, r2
 8019ec4:	e7d0      	b.n	8019e68 <MotionFX_MagCal_run+0xac>
 8019ec6:	4770      	bx	lr
 8019ec8:	490d      	ldr	r1, [pc, #52]	; (8019f00 <MotionFX_MagCal_run+0x144>)
 8019eca:	2200      	movs	r2, #0
 8019ecc:	f6a1 1008 	subw	r0, r1, #2312	; 0x908
 8019ed0:	f883 2de8 	strb.w	r2, [r3, #3560]	; 0xde8
 8019ed4:	f7f5 fbbe 	bl	800f654 <updateProcBuffer_Temp>
 8019ed8:	490a      	ldr	r1, [pc, #40]	; (8019f04 <MotionFX_MagCal_run+0x148>)
 8019eda:	f101 0048 	add.w	r0, r1, #72	; 0x48
 8019ede:	f7f5 fb7f 	bl	800f5e0 <MEMS_checkTimeToRun>
 8019ee2:	2801      	cmp	r0, #1
 8019ee4:	d1e5      	bne.n	8019eb2 <MotionFX_MagCal_run+0xf6>
 8019ee6:	b005      	add	sp, #20
 8019ee8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019eec:	f7f7 ba8c 	b.w	8011408 <MEMS_runMagCal.constprop.14>
 8019ef0:	200013d0 	.word	0x200013d0
 8019ef4:	43fa0000 	.word	0x43fa0000
 8019ef8:	200010f8 	.word	0x200010f8
 8019efc:	ffff8002 	.word	0xffff8002
 8019f00:	20002138 	.word	0x20002138
 8019f04:	20001830 	.word	0x20001830

08019f08 <MotionFX_MagCal_getParams>:
 8019f08:	4b15      	ldr	r3, [pc, #84]	; (8019f60 <MotionFX_MagCal_getParams+0x58>)
 8019f0a:	f893 2d49 	ldrb.w	r2, [r3, #3401]	; 0xd49
 8019f0e:	b902      	cbnz	r2, 8019f12 <MotionFX_MagCal_getParams+0xa>
 8019f10:	4770      	bx	lr
 8019f12:	f503 628c 	add.w	r2, r3, #1120	; 0x460
 8019f16:	edd2 6a1c 	vldr	s13, [r2, #112]	; 0x70
 8019f1a:	ed92 7a1d 	vldr	s14, [r2, #116]	; 0x74
 8019f1e:	edd2 7a1e 	vldr	s15, [r2, #120]	; 0x78
 8019f22:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8019f64 <MotionFX_MagCal_getParams+0x5c>
 8019f26:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8019f2a:	7303      	strb	r3, [r0, #12]
 8019f2c:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8019f30:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8019f34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019f38:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8019f3c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019f40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019f44:	ee66 6a86 	vmul.f32	s13, s13, s12
 8019f48:	ee27 7a06 	vmul.f32	s14, s14, s12
 8019f4c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8019f50:	edc0 6a00 	vstr	s13, [r0]
 8019f54:	ed80 7a01 	vstr	s14, [r0, #4]
 8019f58:	edc0 7a02 	vstr	s15, [r0, #8]
 8019f5c:	4770      	bx	lr
 8019f5e:	bf00      	nop
 8019f60:	200013d0 	.word	0x200013d0
 8019f64:	3b03126f 	.word	0x3b03126f

08019f68 <MotionFX_GetLibVersion>:
 8019f68:	4b10      	ldr	r3, [pc, #64]	; (8019fac <MotionFX_GetLibVersion+0x44>)
 8019f6a:	f893 3d49 	ldrb.w	r3, [r3, #3401]	; 0xd49
 8019f6e:	b90b      	cbnz	r3, 8019f74 <MotionFX_GetLibVersion+0xc>
 8019f70:	4618      	mov	r0, r3
 8019f72:	4770      	bx	lr
 8019f74:	b470      	push	{r4, r5, r6}
 8019f76:	4e0e      	ldr	r6, [pc, #56]	; (8019fb0 <MotionFX_GetLibVersion+0x48>)
 8019f78:	4605      	mov	r5, r0
 8019f7a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8019f7c:	b08b      	sub	sp, #44	; 0x2c
 8019f7e:	ac01      	add	r4, sp, #4
 8019f80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019f82:	6833      	ldr	r3, [r6, #0]
 8019f84:	f824 3b02 	strh.w	r3, [r4], #2
 8019f88:	0c1b      	lsrs	r3, r3, #16
 8019f8a:	7023      	strb	r3, [r4, #0]
 8019f8c:	ac01      	add	r4, sp, #4
 8019f8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019f90:	8826      	ldrh	r6, [r4, #0]
 8019f92:	60eb      	str	r3, [r5, #12]
 8019f94:	78a4      	ldrb	r4, [r4, #2]
 8019f96:	6028      	str	r0, [r5, #0]
 8019f98:	2312      	movs	r3, #18
 8019f9a:	4618      	mov	r0, r3
 8019f9c:	6069      	str	r1, [r5, #4]
 8019f9e:	60aa      	str	r2, [r5, #8]
 8019fa0:	822e      	strh	r6, [r5, #16]
 8019fa2:	74ac      	strb	r4, [r5, #18]
 8019fa4:	b00b      	add	sp, #44	; 0x2c
 8019fa6:	bc70      	pop	{r4, r5, r6}
 8019fa8:	4770      	bx	lr
 8019faa:	bf00      	nop
 8019fac:	200013d0 	.word	0x200013d0
 8019fb0:	0801d17c 	.word	0x0801d17c

08019fb4 <__errno>:
 8019fb4:	4b01      	ldr	r3, [pc, #4]	; (8019fbc <__errno+0x8>)
 8019fb6:	6818      	ldr	r0, [r3, #0]
 8019fb8:	4770      	bx	lr
 8019fba:	bf00      	nop
 8019fbc:	2000134c 	.word	0x2000134c

08019fc0 <__libc_init_array>:
 8019fc0:	b570      	push	{r4, r5, r6, lr}
 8019fc2:	4e0d      	ldr	r6, [pc, #52]	; (8019ff8 <__libc_init_array+0x38>)
 8019fc4:	4c0d      	ldr	r4, [pc, #52]	; (8019ffc <__libc_init_array+0x3c>)
 8019fc6:	1ba4      	subs	r4, r4, r6
 8019fc8:	10a4      	asrs	r4, r4, #2
 8019fca:	2500      	movs	r5, #0
 8019fcc:	42a5      	cmp	r5, r4
 8019fce:	d109      	bne.n	8019fe4 <__libc_init_array+0x24>
 8019fd0:	4e0b      	ldr	r6, [pc, #44]	; (801a000 <__libc_init_array+0x40>)
 8019fd2:	4c0c      	ldr	r4, [pc, #48]	; (801a004 <__libc_init_array+0x44>)
 8019fd4:	f002 fe12 	bl	801cbfc <_init>
 8019fd8:	1ba4      	subs	r4, r4, r6
 8019fda:	10a4      	asrs	r4, r4, #2
 8019fdc:	2500      	movs	r5, #0
 8019fde:	42a5      	cmp	r5, r4
 8019fe0:	d105      	bne.n	8019fee <__libc_init_array+0x2e>
 8019fe2:	bd70      	pop	{r4, r5, r6, pc}
 8019fe4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8019fe8:	4798      	blx	r3
 8019fea:	3501      	adds	r5, #1
 8019fec:	e7ee      	b.n	8019fcc <__libc_init_array+0xc>
 8019fee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8019ff2:	4798      	blx	r3
 8019ff4:	3501      	adds	r5, #1
 8019ff6:	e7f2      	b.n	8019fde <__libc_init_array+0x1e>
 8019ff8:	0801d690 	.word	0x0801d690
 8019ffc:	0801d690 	.word	0x0801d690
 801a000:	0801d690 	.word	0x0801d690
 801a004:	0801d694 	.word	0x0801d694

0801a008 <memcpy>:
 801a008:	b510      	push	{r4, lr}
 801a00a:	1e43      	subs	r3, r0, #1
 801a00c:	440a      	add	r2, r1
 801a00e:	4291      	cmp	r1, r2
 801a010:	d100      	bne.n	801a014 <memcpy+0xc>
 801a012:	bd10      	pop	{r4, pc}
 801a014:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a018:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a01c:	e7f7      	b.n	801a00e <memcpy+0x6>

0801a01e <memset>:
 801a01e:	4402      	add	r2, r0
 801a020:	4603      	mov	r3, r0
 801a022:	4293      	cmp	r3, r2
 801a024:	d100      	bne.n	801a028 <memset+0xa>
 801a026:	4770      	bx	lr
 801a028:	f803 1b01 	strb.w	r1, [r3], #1
 801a02c:	e7f9      	b.n	801a022 <memset+0x4>
	...

0801a030 <iprintf>:
 801a030:	b40f      	push	{r0, r1, r2, r3}
 801a032:	4b0a      	ldr	r3, [pc, #40]	; (801a05c <iprintf+0x2c>)
 801a034:	b513      	push	{r0, r1, r4, lr}
 801a036:	681c      	ldr	r4, [r3, #0]
 801a038:	b124      	cbz	r4, 801a044 <iprintf+0x14>
 801a03a:	69a3      	ldr	r3, [r4, #24]
 801a03c:	b913      	cbnz	r3, 801a044 <iprintf+0x14>
 801a03e:	4620      	mov	r0, r4
 801a040:	f000 fa56 	bl	801a4f0 <__sinit>
 801a044:	ab05      	add	r3, sp, #20
 801a046:	9a04      	ldr	r2, [sp, #16]
 801a048:	68a1      	ldr	r1, [r4, #8]
 801a04a:	9301      	str	r3, [sp, #4]
 801a04c:	4620      	mov	r0, r4
 801a04e:	f000 fc17 	bl	801a880 <_vfiprintf_r>
 801a052:	b002      	add	sp, #8
 801a054:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a058:	b004      	add	sp, #16
 801a05a:	4770      	bx	lr
 801a05c:	2000134c 	.word	0x2000134c

0801a060 <_puts_r>:
 801a060:	b570      	push	{r4, r5, r6, lr}
 801a062:	460e      	mov	r6, r1
 801a064:	4605      	mov	r5, r0
 801a066:	b118      	cbz	r0, 801a070 <_puts_r+0x10>
 801a068:	6983      	ldr	r3, [r0, #24]
 801a06a:	b90b      	cbnz	r3, 801a070 <_puts_r+0x10>
 801a06c:	f000 fa40 	bl	801a4f0 <__sinit>
 801a070:	69ab      	ldr	r3, [r5, #24]
 801a072:	68ac      	ldr	r4, [r5, #8]
 801a074:	b913      	cbnz	r3, 801a07c <_puts_r+0x1c>
 801a076:	4628      	mov	r0, r5
 801a078:	f000 fa3a 	bl	801a4f0 <__sinit>
 801a07c:	4b23      	ldr	r3, [pc, #140]	; (801a10c <_puts_r+0xac>)
 801a07e:	429c      	cmp	r4, r3
 801a080:	d117      	bne.n	801a0b2 <_puts_r+0x52>
 801a082:	686c      	ldr	r4, [r5, #4]
 801a084:	89a3      	ldrh	r3, [r4, #12]
 801a086:	071b      	lsls	r3, r3, #28
 801a088:	d51d      	bpl.n	801a0c6 <_puts_r+0x66>
 801a08a:	6923      	ldr	r3, [r4, #16]
 801a08c:	b1db      	cbz	r3, 801a0c6 <_puts_r+0x66>
 801a08e:	3e01      	subs	r6, #1
 801a090:	68a3      	ldr	r3, [r4, #8]
 801a092:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801a096:	3b01      	subs	r3, #1
 801a098:	60a3      	str	r3, [r4, #8]
 801a09a:	b9e9      	cbnz	r1, 801a0d8 <_puts_r+0x78>
 801a09c:	2b00      	cmp	r3, #0
 801a09e:	da2e      	bge.n	801a0fe <_puts_r+0x9e>
 801a0a0:	4622      	mov	r2, r4
 801a0a2:	210a      	movs	r1, #10
 801a0a4:	4628      	mov	r0, r5
 801a0a6:	f000 f873 	bl	801a190 <__swbuf_r>
 801a0aa:	3001      	adds	r0, #1
 801a0ac:	d011      	beq.n	801a0d2 <_puts_r+0x72>
 801a0ae:	200a      	movs	r0, #10
 801a0b0:	e011      	b.n	801a0d6 <_puts_r+0x76>
 801a0b2:	4b17      	ldr	r3, [pc, #92]	; (801a110 <_puts_r+0xb0>)
 801a0b4:	429c      	cmp	r4, r3
 801a0b6:	d101      	bne.n	801a0bc <_puts_r+0x5c>
 801a0b8:	68ac      	ldr	r4, [r5, #8]
 801a0ba:	e7e3      	b.n	801a084 <_puts_r+0x24>
 801a0bc:	4b15      	ldr	r3, [pc, #84]	; (801a114 <_puts_r+0xb4>)
 801a0be:	429c      	cmp	r4, r3
 801a0c0:	bf08      	it	eq
 801a0c2:	68ec      	ldreq	r4, [r5, #12]
 801a0c4:	e7de      	b.n	801a084 <_puts_r+0x24>
 801a0c6:	4621      	mov	r1, r4
 801a0c8:	4628      	mov	r0, r5
 801a0ca:	f000 f8b3 	bl	801a234 <__swsetup_r>
 801a0ce:	2800      	cmp	r0, #0
 801a0d0:	d0dd      	beq.n	801a08e <_puts_r+0x2e>
 801a0d2:	f04f 30ff 	mov.w	r0, #4294967295
 801a0d6:	bd70      	pop	{r4, r5, r6, pc}
 801a0d8:	2b00      	cmp	r3, #0
 801a0da:	da04      	bge.n	801a0e6 <_puts_r+0x86>
 801a0dc:	69a2      	ldr	r2, [r4, #24]
 801a0de:	429a      	cmp	r2, r3
 801a0e0:	dc06      	bgt.n	801a0f0 <_puts_r+0x90>
 801a0e2:	290a      	cmp	r1, #10
 801a0e4:	d004      	beq.n	801a0f0 <_puts_r+0x90>
 801a0e6:	6823      	ldr	r3, [r4, #0]
 801a0e8:	1c5a      	adds	r2, r3, #1
 801a0ea:	6022      	str	r2, [r4, #0]
 801a0ec:	7019      	strb	r1, [r3, #0]
 801a0ee:	e7cf      	b.n	801a090 <_puts_r+0x30>
 801a0f0:	4622      	mov	r2, r4
 801a0f2:	4628      	mov	r0, r5
 801a0f4:	f000 f84c 	bl	801a190 <__swbuf_r>
 801a0f8:	3001      	adds	r0, #1
 801a0fa:	d1c9      	bne.n	801a090 <_puts_r+0x30>
 801a0fc:	e7e9      	b.n	801a0d2 <_puts_r+0x72>
 801a0fe:	6823      	ldr	r3, [r4, #0]
 801a100:	200a      	movs	r0, #10
 801a102:	1c5a      	adds	r2, r3, #1
 801a104:	6022      	str	r2, [r4, #0]
 801a106:	7018      	strb	r0, [r3, #0]
 801a108:	e7e5      	b.n	801a0d6 <_puts_r+0x76>
 801a10a:	bf00      	nop
 801a10c:	0801d1f0 	.word	0x0801d1f0
 801a110:	0801d210 	.word	0x0801d210
 801a114:	0801d1d0 	.word	0x0801d1d0

0801a118 <puts>:
 801a118:	4b02      	ldr	r3, [pc, #8]	; (801a124 <puts+0xc>)
 801a11a:	4601      	mov	r1, r0
 801a11c:	6818      	ldr	r0, [r3, #0]
 801a11e:	f7ff bf9f 	b.w	801a060 <_puts_r>
 801a122:	bf00      	nop
 801a124:	2000134c 	.word	0x2000134c

0801a128 <rand>:
 801a128:	b538      	push	{r3, r4, r5, lr}
 801a12a:	4b13      	ldr	r3, [pc, #76]	; (801a178 <rand+0x50>)
 801a12c:	681c      	ldr	r4, [r3, #0]
 801a12e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801a130:	b97b      	cbnz	r3, 801a152 <rand+0x2a>
 801a132:	2018      	movs	r0, #24
 801a134:	f000 faca 	bl	801a6cc <malloc>
 801a138:	4a10      	ldr	r2, [pc, #64]	; (801a17c <rand+0x54>)
 801a13a:	4b11      	ldr	r3, [pc, #68]	; (801a180 <rand+0x58>)
 801a13c:	63a0      	str	r0, [r4, #56]	; 0x38
 801a13e:	e9c0 2300 	strd	r2, r3, [r0]
 801a142:	4b10      	ldr	r3, [pc, #64]	; (801a184 <rand+0x5c>)
 801a144:	6083      	str	r3, [r0, #8]
 801a146:	230b      	movs	r3, #11
 801a148:	8183      	strh	r3, [r0, #12]
 801a14a:	2201      	movs	r2, #1
 801a14c:	2300      	movs	r3, #0
 801a14e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801a152:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801a154:	480c      	ldr	r0, [pc, #48]	; (801a188 <rand+0x60>)
 801a156:	690a      	ldr	r2, [r1, #16]
 801a158:	694b      	ldr	r3, [r1, #20]
 801a15a:	4c0c      	ldr	r4, [pc, #48]	; (801a18c <rand+0x64>)
 801a15c:	4350      	muls	r0, r2
 801a15e:	fb04 0003 	mla	r0, r4, r3, r0
 801a162:	fba2 2304 	umull	r2, r3, r2, r4
 801a166:	4403      	add	r3, r0
 801a168:	1c54      	adds	r4, r2, #1
 801a16a:	f143 0500 	adc.w	r5, r3, #0
 801a16e:	e9c1 4504 	strd	r4, r5, [r1, #16]
 801a172:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 801a176:	bd38      	pop	{r3, r4, r5, pc}
 801a178:	2000134c 	.word	0x2000134c
 801a17c:	abcd330e 	.word	0xabcd330e
 801a180:	e66d1234 	.word	0xe66d1234
 801a184:	0005deec 	.word	0x0005deec
 801a188:	5851f42d 	.word	0x5851f42d
 801a18c:	4c957f2d 	.word	0x4c957f2d

0801a190 <__swbuf_r>:
 801a190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a192:	460e      	mov	r6, r1
 801a194:	4614      	mov	r4, r2
 801a196:	4605      	mov	r5, r0
 801a198:	b118      	cbz	r0, 801a1a2 <__swbuf_r+0x12>
 801a19a:	6983      	ldr	r3, [r0, #24]
 801a19c:	b90b      	cbnz	r3, 801a1a2 <__swbuf_r+0x12>
 801a19e:	f000 f9a7 	bl	801a4f0 <__sinit>
 801a1a2:	4b21      	ldr	r3, [pc, #132]	; (801a228 <__swbuf_r+0x98>)
 801a1a4:	429c      	cmp	r4, r3
 801a1a6:	d12a      	bne.n	801a1fe <__swbuf_r+0x6e>
 801a1a8:	686c      	ldr	r4, [r5, #4]
 801a1aa:	69a3      	ldr	r3, [r4, #24]
 801a1ac:	60a3      	str	r3, [r4, #8]
 801a1ae:	89a3      	ldrh	r3, [r4, #12]
 801a1b0:	071a      	lsls	r2, r3, #28
 801a1b2:	d52e      	bpl.n	801a212 <__swbuf_r+0x82>
 801a1b4:	6923      	ldr	r3, [r4, #16]
 801a1b6:	b363      	cbz	r3, 801a212 <__swbuf_r+0x82>
 801a1b8:	6923      	ldr	r3, [r4, #16]
 801a1ba:	6820      	ldr	r0, [r4, #0]
 801a1bc:	1ac0      	subs	r0, r0, r3
 801a1be:	6963      	ldr	r3, [r4, #20]
 801a1c0:	b2f6      	uxtb	r6, r6
 801a1c2:	4283      	cmp	r3, r0
 801a1c4:	4637      	mov	r7, r6
 801a1c6:	dc04      	bgt.n	801a1d2 <__swbuf_r+0x42>
 801a1c8:	4621      	mov	r1, r4
 801a1ca:	4628      	mov	r0, r5
 801a1cc:	f000 f926 	bl	801a41c <_fflush_r>
 801a1d0:	bb28      	cbnz	r0, 801a21e <__swbuf_r+0x8e>
 801a1d2:	68a3      	ldr	r3, [r4, #8]
 801a1d4:	3b01      	subs	r3, #1
 801a1d6:	60a3      	str	r3, [r4, #8]
 801a1d8:	6823      	ldr	r3, [r4, #0]
 801a1da:	1c5a      	adds	r2, r3, #1
 801a1dc:	6022      	str	r2, [r4, #0]
 801a1de:	701e      	strb	r6, [r3, #0]
 801a1e0:	6963      	ldr	r3, [r4, #20]
 801a1e2:	3001      	adds	r0, #1
 801a1e4:	4283      	cmp	r3, r0
 801a1e6:	d004      	beq.n	801a1f2 <__swbuf_r+0x62>
 801a1e8:	89a3      	ldrh	r3, [r4, #12]
 801a1ea:	07db      	lsls	r3, r3, #31
 801a1ec:	d519      	bpl.n	801a222 <__swbuf_r+0x92>
 801a1ee:	2e0a      	cmp	r6, #10
 801a1f0:	d117      	bne.n	801a222 <__swbuf_r+0x92>
 801a1f2:	4621      	mov	r1, r4
 801a1f4:	4628      	mov	r0, r5
 801a1f6:	f000 f911 	bl	801a41c <_fflush_r>
 801a1fa:	b190      	cbz	r0, 801a222 <__swbuf_r+0x92>
 801a1fc:	e00f      	b.n	801a21e <__swbuf_r+0x8e>
 801a1fe:	4b0b      	ldr	r3, [pc, #44]	; (801a22c <__swbuf_r+0x9c>)
 801a200:	429c      	cmp	r4, r3
 801a202:	d101      	bne.n	801a208 <__swbuf_r+0x78>
 801a204:	68ac      	ldr	r4, [r5, #8]
 801a206:	e7d0      	b.n	801a1aa <__swbuf_r+0x1a>
 801a208:	4b09      	ldr	r3, [pc, #36]	; (801a230 <__swbuf_r+0xa0>)
 801a20a:	429c      	cmp	r4, r3
 801a20c:	bf08      	it	eq
 801a20e:	68ec      	ldreq	r4, [r5, #12]
 801a210:	e7cb      	b.n	801a1aa <__swbuf_r+0x1a>
 801a212:	4621      	mov	r1, r4
 801a214:	4628      	mov	r0, r5
 801a216:	f000 f80d 	bl	801a234 <__swsetup_r>
 801a21a:	2800      	cmp	r0, #0
 801a21c:	d0cc      	beq.n	801a1b8 <__swbuf_r+0x28>
 801a21e:	f04f 37ff 	mov.w	r7, #4294967295
 801a222:	4638      	mov	r0, r7
 801a224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a226:	bf00      	nop
 801a228:	0801d1f0 	.word	0x0801d1f0
 801a22c:	0801d210 	.word	0x0801d210
 801a230:	0801d1d0 	.word	0x0801d1d0

0801a234 <__swsetup_r>:
 801a234:	4b32      	ldr	r3, [pc, #200]	; (801a300 <__swsetup_r+0xcc>)
 801a236:	b570      	push	{r4, r5, r6, lr}
 801a238:	681d      	ldr	r5, [r3, #0]
 801a23a:	4606      	mov	r6, r0
 801a23c:	460c      	mov	r4, r1
 801a23e:	b125      	cbz	r5, 801a24a <__swsetup_r+0x16>
 801a240:	69ab      	ldr	r3, [r5, #24]
 801a242:	b913      	cbnz	r3, 801a24a <__swsetup_r+0x16>
 801a244:	4628      	mov	r0, r5
 801a246:	f000 f953 	bl	801a4f0 <__sinit>
 801a24a:	4b2e      	ldr	r3, [pc, #184]	; (801a304 <__swsetup_r+0xd0>)
 801a24c:	429c      	cmp	r4, r3
 801a24e:	d10f      	bne.n	801a270 <__swsetup_r+0x3c>
 801a250:	686c      	ldr	r4, [r5, #4]
 801a252:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a256:	b29a      	uxth	r2, r3
 801a258:	0715      	lsls	r5, r2, #28
 801a25a:	d42c      	bmi.n	801a2b6 <__swsetup_r+0x82>
 801a25c:	06d0      	lsls	r0, r2, #27
 801a25e:	d411      	bmi.n	801a284 <__swsetup_r+0x50>
 801a260:	2209      	movs	r2, #9
 801a262:	6032      	str	r2, [r6, #0]
 801a264:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a268:	81a3      	strh	r3, [r4, #12]
 801a26a:	f04f 30ff 	mov.w	r0, #4294967295
 801a26e:	e03e      	b.n	801a2ee <__swsetup_r+0xba>
 801a270:	4b25      	ldr	r3, [pc, #148]	; (801a308 <__swsetup_r+0xd4>)
 801a272:	429c      	cmp	r4, r3
 801a274:	d101      	bne.n	801a27a <__swsetup_r+0x46>
 801a276:	68ac      	ldr	r4, [r5, #8]
 801a278:	e7eb      	b.n	801a252 <__swsetup_r+0x1e>
 801a27a:	4b24      	ldr	r3, [pc, #144]	; (801a30c <__swsetup_r+0xd8>)
 801a27c:	429c      	cmp	r4, r3
 801a27e:	bf08      	it	eq
 801a280:	68ec      	ldreq	r4, [r5, #12]
 801a282:	e7e6      	b.n	801a252 <__swsetup_r+0x1e>
 801a284:	0751      	lsls	r1, r2, #29
 801a286:	d512      	bpl.n	801a2ae <__swsetup_r+0x7a>
 801a288:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a28a:	b141      	cbz	r1, 801a29e <__swsetup_r+0x6a>
 801a28c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a290:	4299      	cmp	r1, r3
 801a292:	d002      	beq.n	801a29a <__swsetup_r+0x66>
 801a294:	4630      	mov	r0, r6
 801a296:	f000 fa21 	bl	801a6dc <_free_r>
 801a29a:	2300      	movs	r3, #0
 801a29c:	6363      	str	r3, [r4, #52]	; 0x34
 801a29e:	89a3      	ldrh	r3, [r4, #12]
 801a2a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a2a4:	81a3      	strh	r3, [r4, #12]
 801a2a6:	2300      	movs	r3, #0
 801a2a8:	6063      	str	r3, [r4, #4]
 801a2aa:	6923      	ldr	r3, [r4, #16]
 801a2ac:	6023      	str	r3, [r4, #0]
 801a2ae:	89a3      	ldrh	r3, [r4, #12]
 801a2b0:	f043 0308 	orr.w	r3, r3, #8
 801a2b4:	81a3      	strh	r3, [r4, #12]
 801a2b6:	6923      	ldr	r3, [r4, #16]
 801a2b8:	b94b      	cbnz	r3, 801a2ce <__swsetup_r+0x9a>
 801a2ba:	89a3      	ldrh	r3, [r4, #12]
 801a2bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a2c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a2c4:	d003      	beq.n	801a2ce <__swsetup_r+0x9a>
 801a2c6:	4621      	mov	r1, r4
 801a2c8:	4630      	mov	r0, r6
 801a2ca:	f000 f9bf 	bl	801a64c <__smakebuf_r>
 801a2ce:	89a2      	ldrh	r2, [r4, #12]
 801a2d0:	f012 0301 	ands.w	r3, r2, #1
 801a2d4:	d00c      	beq.n	801a2f0 <__swsetup_r+0xbc>
 801a2d6:	2300      	movs	r3, #0
 801a2d8:	60a3      	str	r3, [r4, #8]
 801a2da:	6963      	ldr	r3, [r4, #20]
 801a2dc:	425b      	negs	r3, r3
 801a2de:	61a3      	str	r3, [r4, #24]
 801a2e0:	6923      	ldr	r3, [r4, #16]
 801a2e2:	b953      	cbnz	r3, 801a2fa <__swsetup_r+0xc6>
 801a2e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a2e8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801a2ec:	d1ba      	bne.n	801a264 <__swsetup_r+0x30>
 801a2ee:	bd70      	pop	{r4, r5, r6, pc}
 801a2f0:	0792      	lsls	r2, r2, #30
 801a2f2:	bf58      	it	pl
 801a2f4:	6963      	ldrpl	r3, [r4, #20]
 801a2f6:	60a3      	str	r3, [r4, #8]
 801a2f8:	e7f2      	b.n	801a2e0 <__swsetup_r+0xac>
 801a2fa:	2000      	movs	r0, #0
 801a2fc:	e7f7      	b.n	801a2ee <__swsetup_r+0xba>
 801a2fe:	bf00      	nop
 801a300:	2000134c 	.word	0x2000134c
 801a304:	0801d1f0 	.word	0x0801d1f0
 801a308:	0801d210 	.word	0x0801d210
 801a30c:	0801d1d0 	.word	0x0801d1d0

0801a310 <__sflush_r>:
 801a310:	898a      	ldrh	r2, [r1, #12]
 801a312:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a316:	4605      	mov	r5, r0
 801a318:	0710      	lsls	r0, r2, #28
 801a31a:	460c      	mov	r4, r1
 801a31c:	d458      	bmi.n	801a3d0 <__sflush_r+0xc0>
 801a31e:	684b      	ldr	r3, [r1, #4]
 801a320:	2b00      	cmp	r3, #0
 801a322:	dc05      	bgt.n	801a330 <__sflush_r+0x20>
 801a324:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a326:	2b00      	cmp	r3, #0
 801a328:	dc02      	bgt.n	801a330 <__sflush_r+0x20>
 801a32a:	2000      	movs	r0, #0
 801a32c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a330:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a332:	2e00      	cmp	r6, #0
 801a334:	d0f9      	beq.n	801a32a <__sflush_r+0x1a>
 801a336:	2300      	movs	r3, #0
 801a338:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a33c:	682f      	ldr	r7, [r5, #0]
 801a33e:	6a21      	ldr	r1, [r4, #32]
 801a340:	602b      	str	r3, [r5, #0]
 801a342:	d032      	beq.n	801a3aa <__sflush_r+0x9a>
 801a344:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a346:	89a3      	ldrh	r3, [r4, #12]
 801a348:	075a      	lsls	r2, r3, #29
 801a34a:	d505      	bpl.n	801a358 <__sflush_r+0x48>
 801a34c:	6863      	ldr	r3, [r4, #4]
 801a34e:	1ac0      	subs	r0, r0, r3
 801a350:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a352:	b10b      	cbz	r3, 801a358 <__sflush_r+0x48>
 801a354:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a356:	1ac0      	subs	r0, r0, r3
 801a358:	2300      	movs	r3, #0
 801a35a:	4602      	mov	r2, r0
 801a35c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a35e:	6a21      	ldr	r1, [r4, #32]
 801a360:	4628      	mov	r0, r5
 801a362:	47b0      	blx	r6
 801a364:	1c43      	adds	r3, r0, #1
 801a366:	89a3      	ldrh	r3, [r4, #12]
 801a368:	d106      	bne.n	801a378 <__sflush_r+0x68>
 801a36a:	6829      	ldr	r1, [r5, #0]
 801a36c:	291d      	cmp	r1, #29
 801a36e:	d848      	bhi.n	801a402 <__sflush_r+0xf2>
 801a370:	4a29      	ldr	r2, [pc, #164]	; (801a418 <__sflush_r+0x108>)
 801a372:	40ca      	lsrs	r2, r1
 801a374:	07d6      	lsls	r6, r2, #31
 801a376:	d544      	bpl.n	801a402 <__sflush_r+0xf2>
 801a378:	2200      	movs	r2, #0
 801a37a:	6062      	str	r2, [r4, #4]
 801a37c:	04d9      	lsls	r1, r3, #19
 801a37e:	6922      	ldr	r2, [r4, #16]
 801a380:	6022      	str	r2, [r4, #0]
 801a382:	d504      	bpl.n	801a38e <__sflush_r+0x7e>
 801a384:	1c42      	adds	r2, r0, #1
 801a386:	d101      	bne.n	801a38c <__sflush_r+0x7c>
 801a388:	682b      	ldr	r3, [r5, #0]
 801a38a:	b903      	cbnz	r3, 801a38e <__sflush_r+0x7e>
 801a38c:	6560      	str	r0, [r4, #84]	; 0x54
 801a38e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a390:	602f      	str	r7, [r5, #0]
 801a392:	2900      	cmp	r1, #0
 801a394:	d0c9      	beq.n	801a32a <__sflush_r+0x1a>
 801a396:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a39a:	4299      	cmp	r1, r3
 801a39c:	d002      	beq.n	801a3a4 <__sflush_r+0x94>
 801a39e:	4628      	mov	r0, r5
 801a3a0:	f000 f99c 	bl	801a6dc <_free_r>
 801a3a4:	2000      	movs	r0, #0
 801a3a6:	6360      	str	r0, [r4, #52]	; 0x34
 801a3a8:	e7c0      	b.n	801a32c <__sflush_r+0x1c>
 801a3aa:	2301      	movs	r3, #1
 801a3ac:	4628      	mov	r0, r5
 801a3ae:	47b0      	blx	r6
 801a3b0:	1c41      	adds	r1, r0, #1
 801a3b2:	d1c8      	bne.n	801a346 <__sflush_r+0x36>
 801a3b4:	682b      	ldr	r3, [r5, #0]
 801a3b6:	2b00      	cmp	r3, #0
 801a3b8:	d0c5      	beq.n	801a346 <__sflush_r+0x36>
 801a3ba:	2b1d      	cmp	r3, #29
 801a3bc:	d001      	beq.n	801a3c2 <__sflush_r+0xb2>
 801a3be:	2b16      	cmp	r3, #22
 801a3c0:	d101      	bne.n	801a3c6 <__sflush_r+0xb6>
 801a3c2:	602f      	str	r7, [r5, #0]
 801a3c4:	e7b1      	b.n	801a32a <__sflush_r+0x1a>
 801a3c6:	89a3      	ldrh	r3, [r4, #12]
 801a3c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a3cc:	81a3      	strh	r3, [r4, #12]
 801a3ce:	e7ad      	b.n	801a32c <__sflush_r+0x1c>
 801a3d0:	690f      	ldr	r7, [r1, #16]
 801a3d2:	2f00      	cmp	r7, #0
 801a3d4:	d0a9      	beq.n	801a32a <__sflush_r+0x1a>
 801a3d6:	0793      	lsls	r3, r2, #30
 801a3d8:	680e      	ldr	r6, [r1, #0]
 801a3da:	bf08      	it	eq
 801a3dc:	694b      	ldreq	r3, [r1, #20]
 801a3de:	600f      	str	r7, [r1, #0]
 801a3e0:	bf18      	it	ne
 801a3e2:	2300      	movne	r3, #0
 801a3e4:	eba6 0807 	sub.w	r8, r6, r7
 801a3e8:	608b      	str	r3, [r1, #8]
 801a3ea:	f1b8 0f00 	cmp.w	r8, #0
 801a3ee:	dd9c      	ble.n	801a32a <__sflush_r+0x1a>
 801a3f0:	4643      	mov	r3, r8
 801a3f2:	463a      	mov	r2, r7
 801a3f4:	6a21      	ldr	r1, [r4, #32]
 801a3f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801a3f8:	4628      	mov	r0, r5
 801a3fa:	47b0      	blx	r6
 801a3fc:	2800      	cmp	r0, #0
 801a3fe:	dc06      	bgt.n	801a40e <__sflush_r+0xfe>
 801a400:	89a3      	ldrh	r3, [r4, #12]
 801a402:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a406:	81a3      	strh	r3, [r4, #12]
 801a408:	f04f 30ff 	mov.w	r0, #4294967295
 801a40c:	e78e      	b.n	801a32c <__sflush_r+0x1c>
 801a40e:	4407      	add	r7, r0
 801a410:	eba8 0800 	sub.w	r8, r8, r0
 801a414:	e7e9      	b.n	801a3ea <__sflush_r+0xda>
 801a416:	bf00      	nop
 801a418:	20400001 	.word	0x20400001

0801a41c <_fflush_r>:
 801a41c:	b538      	push	{r3, r4, r5, lr}
 801a41e:	690b      	ldr	r3, [r1, #16]
 801a420:	4605      	mov	r5, r0
 801a422:	460c      	mov	r4, r1
 801a424:	b1db      	cbz	r3, 801a45e <_fflush_r+0x42>
 801a426:	b118      	cbz	r0, 801a430 <_fflush_r+0x14>
 801a428:	6983      	ldr	r3, [r0, #24]
 801a42a:	b90b      	cbnz	r3, 801a430 <_fflush_r+0x14>
 801a42c:	f000 f860 	bl	801a4f0 <__sinit>
 801a430:	4b0c      	ldr	r3, [pc, #48]	; (801a464 <_fflush_r+0x48>)
 801a432:	429c      	cmp	r4, r3
 801a434:	d109      	bne.n	801a44a <_fflush_r+0x2e>
 801a436:	686c      	ldr	r4, [r5, #4]
 801a438:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a43c:	b17b      	cbz	r3, 801a45e <_fflush_r+0x42>
 801a43e:	4621      	mov	r1, r4
 801a440:	4628      	mov	r0, r5
 801a442:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a446:	f7ff bf63 	b.w	801a310 <__sflush_r>
 801a44a:	4b07      	ldr	r3, [pc, #28]	; (801a468 <_fflush_r+0x4c>)
 801a44c:	429c      	cmp	r4, r3
 801a44e:	d101      	bne.n	801a454 <_fflush_r+0x38>
 801a450:	68ac      	ldr	r4, [r5, #8]
 801a452:	e7f1      	b.n	801a438 <_fflush_r+0x1c>
 801a454:	4b05      	ldr	r3, [pc, #20]	; (801a46c <_fflush_r+0x50>)
 801a456:	429c      	cmp	r4, r3
 801a458:	bf08      	it	eq
 801a45a:	68ec      	ldreq	r4, [r5, #12]
 801a45c:	e7ec      	b.n	801a438 <_fflush_r+0x1c>
 801a45e:	2000      	movs	r0, #0
 801a460:	bd38      	pop	{r3, r4, r5, pc}
 801a462:	bf00      	nop
 801a464:	0801d1f0 	.word	0x0801d1f0
 801a468:	0801d210 	.word	0x0801d210
 801a46c:	0801d1d0 	.word	0x0801d1d0

0801a470 <std>:
 801a470:	2300      	movs	r3, #0
 801a472:	b510      	push	{r4, lr}
 801a474:	4604      	mov	r4, r0
 801a476:	e9c0 3300 	strd	r3, r3, [r0]
 801a47a:	6083      	str	r3, [r0, #8]
 801a47c:	8181      	strh	r1, [r0, #12]
 801a47e:	6643      	str	r3, [r0, #100]	; 0x64
 801a480:	81c2      	strh	r2, [r0, #14]
 801a482:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a486:	6183      	str	r3, [r0, #24]
 801a488:	4619      	mov	r1, r3
 801a48a:	2208      	movs	r2, #8
 801a48c:	305c      	adds	r0, #92	; 0x5c
 801a48e:	f7ff fdc6 	bl	801a01e <memset>
 801a492:	4b05      	ldr	r3, [pc, #20]	; (801a4a8 <std+0x38>)
 801a494:	6263      	str	r3, [r4, #36]	; 0x24
 801a496:	4b05      	ldr	r3, [pc, #20]	; (801a4ac <std+0x3c>)
 801a498:	62a3      	str	r3, [r4, #40]	; 0x28
 801a49a:	4b05      	ldr	r3, [pc, #20]	; (801a4b0 <std+0x40>)
 801a49c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801a49e:	4b05      	ldr	r3, [pc, #20]	; (801a4b4 <std+0x44>)
 801a4a0:	6224      	str	r4, [r4, #32]
 801a4a2:	6323      	str	r3, [r4, #48]	; 0x30
 801a4a4:	bd10      	pop	{r4, pc}
 801a4a6:	bf00      	nop
 801a4a8:	0801addd 	.word	0x0801addd
 801a4ac:	0801adff 	.word	0x0801adff
 801a4b0:	0801ae37 	.word	0x0801ae37
 801a4b4:	0801ae5b 	.word	0x0801ae5b

0801a4b8 <_cleanup_r>:
 801a4b8:	4901      	ldr	r1, [pc, #4]	; (801a4c0 <_cleanup_r+0x8>)
 801a4ba:	f000 b885 	b.w	801a5c8 <_fwalk_reent>
 801a4be:	bf00      	nop
 801a4c0:	0801a41d 	.word	0x0801a41d

0801a4c4 <__sfmoreglue>:
 801a4c4:	b570      	push	{r4, r5, r6, lr}
 801a4c6:	1e4a      	subs	r2, r1, #1
 801a4c8:	2568      	movs	r5, #104	; 0x68
 801a4ca:	4355      	muls	r5, r2
 801a4cc:	460e      	mov	r6, r1
 801a4ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801a4d2:	f000 f951 	bl	801a778 <_malloc_r>
 801a4d6:	4604      	mov	r4, r0
 801a4d8:	b140      	cbz	r0, 801a4ec <__sfmoreglue+0x28>
 801a4da:	2100      	movs	r1, #0
 801a4dc:	e9c0 1600 	strd	r1, r6, [r0]
 801a4e0:	300c      	adds	r0, #12
 801a4e2:	60a0      	str	r0, [r4, #8]
 801a4e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801a4e8:	f7ff fd99 	bl	801a01e <memset>
 801a4ec:	4620      	mov	r0, r4
 801a4ee:	bd70      	pop	{r4, r5, r6, pc}

0801a4f0 <__sinit>:
 801a4f0:	6983      	ldr	r3, [r0, #24]
 801a4f2:	b510      	push	{r4, lr}
 801a4f4:	4604      	mov	r4, r0
 801a4f6:	bb33      	cbnz	r3, 801a546 <__sinit+0x56>
 801a4f8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801a4fc:	6503      	str	r3, [r0, #80]	; 0x50
 801a4fe:	4b12      	ldr	r3, [pc, #72]	; (801a548 <__sinit+0x58>)
 801a500:	4a12      	ldr	r2, [pc, #72]	; (801a54c <__sinit+0x5c>)
 801a502:	681b      	ldr	r3, [r3, #0]
 801a504:	6282      	str	r2, [r0, #40]	; 0x28
 801a506:	4298      	cmp	r0, r3
 801a508:	bf04      	itt	eq
 801a50a:	2301      	moveq	r3, #1
 801a50c:	6183      	streq	r3, [r0, #24]
 801a50e:	f000 f81f 	bl	801a550 <__sfp>
 801a512:	6060      	str	r0, [r4, #4]
 801a514:	4620      	mov	r0, r4
 801a516:	f000 f81b 	bl	801a550 <__sfp>
 801a51a:	60a0      	str	r0, [r4, #8]
 801a51c:	4620      	mov	r0, r4
 801a51e:	f000 f817 	bl	801a550 <__sfp>
 801a522:	2200      	movs	r2, #0
 801a524:	60e0      	str	r0, [r4, #12]
 801a526:	2104      	movs	r1, #4
 801a528:	6860      	ldr	r0, [r4, #4]
 801a52a:	f7ff ffa1 	bl	801a470 <std>
 801a52e:	2201      	movs	r2, #1
 801a530:	2109      	movs	r1, #9
 801a532:	68a0      	ldr	r0, [r4, #8]
 801a534:	f7ff ff9c 	bl	801a470 <std>
 801a538:	2202      	movs	r2, #2
 801a53a:	2112      	movs	r1, #18
 801a53c:	68e0      	ldr	r0, [r4, #12]
 801a53e:	f7ff ff97 	bl	801a470 <std>
 801a542:	2301      	movs	r3, #1
 801a544:	61a3      	str	r3, [r4, #24]
 801a546:	bd10      	pop	{r4, pc}
 801a548:	0801d1cc 	.word	0x0801d1cc
 801a54c:	0801a4b9 	.word	0x0801a4b9

0801a550 <__sfp>:
 801a550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a552:	4b1b      	ldr	r3, [pc, #108]	; (801a5c0 <__sfp+0x70>)
 801a554:	681e      	ldr	r6, [r3, #0]
 801a556:	69b3      	ldr	r3, [r6, #24]
 801a558:	4607      	mov	r7, r0
 801a55a:	b913      	cbnz	r3, 801a562 <__sfp+0x12>
 801a55c:	4630      	mov	r0, r6
 801a55e:	f7ff ffc7 	bl	801a4f0 <__sinit>
 801a562:	3648      	adds	r6, #72	; 0x48
 801a564:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801a568:	3b01      	subs	r3, #1
 801a56a:	d503      	bpl.n	801a574 <__sfp+0x24>
 801a56c:	6833      	ldr	r3, [r6, #0]
 801a56e:	b133      	cbz	r3, 801a57e <__sfp+0x2e>
 801a570:	6836      	ldr	r6, [r6, #0]
 801a572:	e7f7      	b.n	801a564 <__sfp+0x14>
 801a574:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801a578:	b16d      	cbz	r5, 801a596 <__sfp+0x46>
 801a57a:	3468      	adds	r4, #104	; 0x68
 801a57c:	e7f4      	b.n	801a568 <__sfp+0x18>
 801a57e:	2104      	movs	r1, #4
 801a580:	4638      	mov	r0, r7
 801a582:	f7ff ff9f 	bl	801a4c4 <__sfmoreglue>
 801a586:	6030      	str	r0, [r6, #0]
 801a588:	2800      	cmp	r0, #0
 801a58a:	d1f1      	bne.n	801a570 <__sfp+0x20>
 801a58c:	230c      	movs	r3, #12
 801a58e:	603b      	str	r3, [r7, #0]
 801a590:	4604      	mov	r4, r0
 801a592:	4620      	mov	r0, r4
 801a594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a596:	4b0b      	ldr	r3, [pc, #44]	; (801a5c4 <__sfp+0x74>)
 801a598:	6665      	str	r5, [r4, #100]	; 0x64
 801a59a:	e9c4 5500 	strd	r5, r5, [r4]
 801a59e:	60a5      	str	r5, [r4, #8]
 801a5a0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801a5a4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 801a5a8:	2208      	movs	r2, #8
 801a5aa:	4629      	mov	r1, r5
 801a5ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801a5b0:	f7ff fd35 	bl	801a01e <memset>
 801a5b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801a5b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801a5bc:	e7e9      	b.n	801a592 <__sfp+0x42>
 801a5be:	bf00      	nop
 801a5c0:	0801d1cc 	.word	0x0801d1cc
 801a5c4:	ffff0001 	.word	0xffff0001

0801a5c8 <_fwalk_reent>:
 801a5c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a5cc:	4680      	mov	r8, r0
 801a5ce:	4689      	mov	r9, r1
 801a5d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801a5d4:	2600      	movs	r6, #0
 801a5d6:	b914      	cbnz	r4, 801a5de <_fwalk_reent+0x16>
 801a5d8:	4630      	mov	r0, r6
 801a5da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a5de:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801a5e2:	3f01      	subs	r7, #1
 801a5e4:	d501      	bpl.n	801a5ea <_fwalk_reent+0x22>
 801a5e6:	6824      	ldr	r4, [r4, #0]
 801a5e8:	e7f5      	b.n	801a5d6 <_fwalk_reent+0xe>
 801a5ea:	89ab      	ldrh	r3, [r5, #12]
 801a5ec:	2b01      	cmp	r3, #1
 801a5ee:	d907      	bls.n	801a600 <_fwalk_reent+0x38>
 801a5f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a5f4:	3301      	adds	r3, #1
 801a5f6:	d003      	beq.n	801a600 <_fwalk_reent+0x38>
 801a5f8:	4629      	mov	r1, r5
 801a5fa:	4640      	mov	r0, r8
 801a5fc:	47c8      	blx	r9
 801a5fe:	4306      	orrs	r6, r0
 801a600:	3568      	adds	r5, #104	; 0x68
 801a602:	e7ee      	b.n	801a5e2 <_fwalk_reent+0x1a>

0801a604 <__swhatbuf_r>:
 801a604:	b570      	push	{r4, r5, r6, lr}
 801a606:	460e      	mov	r6, r1
 801a608:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a60c:	2900      	cmp	r1, #0
 801a60e:	b096      	sub	sp, #88	; 0x58
 801a610:	4614      	mov	r4, r2
 801a612:	461d      	mov	r5, r3
 801a614:	da07      	bge.n	801a626 <__swhatbuf_r+0x22>
 801a616:	2300      	movs	r3, #0
 801a618:	602b      	str	r3, [r5, #0]
 801a61a:	89b3      	ldrh	r3, [r6, #12]
 801a61c:	061a      	lsls	r2, r3, #24
 801a61e:	d410      	bmi.n	801a642 <__swhatbuf_r+0x3e>
 801a620:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a624:	e00e      	b.n	801a644 <__swhatbuf_r+0x40>
 801a626:	466a      	mov	r2, sp
 801a628:	f000 fc3e 	bl	801aea8 <_fstat_r>
 801a62c:	2800      	cmp	r0, #0
 801a62e:	dbf2      	blt.n	801a616 <__swhatbuf_r+0x12>
 801a630:	9a01      	ldr	r2, [sp, #4]
 801a632:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801a636:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801a63a:	425a      	negs	r2, r3
 801a63c:	415a      	adcs	r2, r3
 801a63e:	602a      	str	r2, [r5, #0]
 801a640:	e7ee      	b.n	801a620 <__swhatbuf_r+0x1c>
 801a642:	2340      	movs	r3, #64	; 0x40
 801a644:	2000      	movs	r0, #0
 801a646:	6023      	str	r3, [r4, #0]
 801a648:	b016      	add	sp, #88	; 0x58
 801a64a:	bd70      	pop	{r4, r5, r6, pc}

0801a64c <__smakebuf_r>:
 801a64c:	898b      	ldrh	r3, [r1, #12]
 801a64e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a650:	079d      	lsls	r5, r3, #30
 801a652:	4606      	mov	r6, r0
 801a654:	460c      	mov	r4, r1
 801a656:	d507      	bpl.n	801a668 <__smakebuf_r+0x1c>
 801a658:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a65c:	6023      	str	r3, [r4, #0]
 801a65e:	6123      	str	r3, [r4, #16]
 801a660:	2301      	movs	r3, #1
 801a662:	6163      	str	r3, [r4, #20]
 801a664:	b002      	add	sp, #8
 801a666:	bd70      	pop	{r4, r5, r6, pc}
 801a668:	ab01      	add	r3, sp, #4
 801a66a:	466a      	mov	r2, sp
 801a66c:	f7ff ffca 	bl	801a604 <__swhatbuf_r>
 801a670:	9900      	ldr	r1, [sp, #0]
 801a672:	4605      	mov	r5, r0
 801a674:	4630      	mov	r0, r6
 801a676:	f000 f87f 	bl	801a778 <_malloc_r>
 801a67a:	b948      	cbnz	r0, 801a690 <__smakebuf_r+0x44>
 801a67c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a680:	059a      	lsls	r2, r3, #22
 801a682:	d4ef      	bmi.n	801a664 <__smakebuf_r+0x18>
 801a684:	f023 0303 	bic.w	r3, r3, #3
 801a688:	f043 0302 	orr.w	r3, r3, #2
 801a68c:	81a3      	strh	r3, [r4, #12]
 801a68e:	e7e3      	b.n	801a658 <__smakebuf_r+0xc>
 801a690:	4b0d      	ldr	r3, [pc, #52]	; (801a6c8 <__smakebuf_r+0x7c>)
 801a692:	62b3      	str	r3, [r6, #40]	; 0x28
 801a694:	89a3      	ldrh	r3, [r4, #12]
 801a696:	6020      	str	r0, [r4, #0]
 801a698:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a69c:	81a3      	strh	r3, [r4, #12]
 801a69e:	9b00      	ldr	r3, [sp, #0]
 801a6a0:	6163      	str	r3, [r4, #20]
 801a6a2:	9b01      	ldr	r3, [sp, #4]
 801a6a4:	6120      	str	r0, [r4, #16]
 801a6a6:	b15b      	cbz	r3, 801a6c0 <__smakebuf_r+0x74>
 801a6a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a6ac:	4630      	mov	r0, r6
 801a6ae:	f000 fc0d 	bl	801aecc <_isatty_r>
 801a6b2:	b128      	cbz	r0, 801a6c0 <__smakebuf_r+0x74>
 801a6b4:	89a3      	ldrh	r3, [r4, #12]
 801a6b6:	f023 0303 	bic.w	r3, r3, #3
 801a6ba:	f043 0301 	orr.w	r3, r3, #1
 801a6be:	81a3      	strh	r3, [r4, #12]
 801a6c0:	89a3      	ldrh	r3, [r4, #12]
 801a6c2:	431d      	orrs	r5, r3
 801a6c4:	81a5      	strh	r5, [r4, #12]
 801a6c6:	e7cd      	b.n	801a664 <__smakebuf_r+0x18>
 801a6c8:	0801a4b9 	.word	0x0801a4b9

0801a6cc <malloc>:
 801a6cc:	4b02      	ldr	r3, [pc, #8]	; (801a6d8 <malloc+0xc>)
 801a6ce:	4601      	mov	r1, r0
 801a6d0:	6818      	ldr	r0, [r3, #0]
 801a6d2:	f000 b851 	b.w	801a778 <_malloc_r>
 801a6d6:	bf00      	nop
 801a6d8:	2000134c 	.word	0x2000134c

0801a6dc <_free_r>:
 801a6dc:	b538      	push	{r3, r4, r5, lr}
 801a6de:	4605      	mov	r5, r0
 801a6e0:	2900      	cmp	r1, #0
 801a6e2:	d045      	beq.n	801a770 <_free_r+0x94>
 801a6e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a6e8:	1f0c      	subs	r4, r1, #4
 801a6ea:	2b00      	cmp	r3, #0
 801a6ec:	bfb8      	it	lt
 801a6ee:	18e4      	addlt	r4, r4, r3
 801a6f0:	f000 fc0e 	bl	801af10 <__malloc_lock>
 801a6f4:	4a1f      	ldr	r2, [pc, #124]	; (801a774 <_free_r+0x98>)
 801a6f6:	6813      	ldr	r3, [r2, #0]
 801a6f8:	4610      	mov	r0, r2
 801a6fa:	b933      	cbnz	r3, 801a70a <_free_r+0x2e>
 801a6fc:	6063      	str	r3, [r4, #4]
 801a6fe:	6014      	str	r4, [r2, #0]
 801a700:	4628      	mov	r0, r5
 801a702:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a706:	f000 bc04 	b.w	801af12 <__malloc_unlock>
 801a70a:	42a3      	cmp	r3, r4
 801a70c:	d90c      	bls.n	801a728 <_free_r+0x4c>
 801a70e:	6821      	ldr	r1, [r4, #0]
 801a710:	1862      	adds	r2, r4, r1
 801a712:	4293      	cmp	r3, r2
 801a714:	bf04      	itt	eq
 801a716:	681a      	ldreq	r2, [r3, #0]
 801a718:	685b      	ldreq	r3, [r3, #4]
 801a71a:	6063      	str	r3, [r4, #4]
 801a71c:	bf04      	itt	eq
 801a71e:	1852      	addeq	r2, r2, r1
 801a720:	6022      	streq	r2, [r4, #0]
 801a722:	6004      	str	r4, [r0, #0]
 801a724:	e7ec      	b.n	801a700 <_free_r+0x24>
 801a726:	4613      	mov	r3, r2
 801a728:	685a      	ldr	r2, [r3, #4]
 801a72a:	b10a      	cbz	r2, 801a730 <_free_r+0x54>
 801a72c:	42a2      	cmp	r2, r4
 801a72e:	d9fa      	bls.n	801a726 <_free_r+0x4a>
 801a730:	6819      	ldr	r1, [r3, #0]
 801a732:	1858      	adds	r0, r3, r1
 801a734:	42a0      	cmp	r0, r4
 801a736:	d10b      	bne.n	801a750 <_free_r+0x74>
 801a738:	6820      	ldr	r0, [r4, #0]
 801a73a:	4401      	add	r1, r0
 801a73c:	1858      	adds	r0, r3, r1
 801a73e:	4282      	cmp	r2, r0
 801a740:	6019      	str	r1, [r3, #0]
 801a742:	d1dd      	bne.n	801a700 <_free_r+0x24>
 801a744:	6810      	ldr	r0, [r2, #0]
 801a746:	6852      	ldr	r2, [r2, #4]
 801a748:	605a      	str	r2, [r3, #4]
 801a74a:	4401      	add	r1, r0
 801a74c:	6019      	str	r1, [r3, #0]
 801a74e:	e7d7      	b.n	801a700 <_free_r+0x24>
 801a750:	d902      	bls.n	801a758 <_free_r+0x7c>
 801a752:	230c      	movs	r3, #12
 801a754:	602b      	str	r3, [r5, #0]
 801a756:	e7d3      	b.n	801a700 <_free_r+0x24>
 801a758:	6820      	ldr	r0, [r4, #0]
 801a75a:	1821      	adds	r1, r4, r0
 801a75c:	428a      	cmp	r2, r1
 801a75e:	bf04      	itt	eq
 801a760:	6811      	ldreq	r1, [r2, #0]
 801a762:	6852      	ldreq	r2, [r2, #4]
 801a764:	6062      	str	r2, [r4, #4]
 801a766:	bf04      	itt	eq
 801a768:	1809      	addeq	r1, r1, r0
 801a76a:	6021      	streq	r1, [r4, #0]
 801a76c:	605c      	str	r4, [r3, #4]
 801a76e:	e7c7      	b.n	801a700 <_free_r+0x24>
 801a770:	bd38      	pop	{r3, r4, r5, pc}
 801a772:	bf00      	nop
 801a774:	200027a4 	.word	0x200027a4

0801a778 <_malloc_r>:
 801a778:	b570      	push	{r4, r5, r6, lr}
 801a77a:	1ccd      	adds	r5, r1, #3
 801a77c:	f025 0503 	bic.w	r5, r5, #3
 801a780:	3508      	adds	r5, #8
 801a782:	2d0c      	cmp	r5, #12
 801a784:	bf38      	it	cc
 801a786:	250c      	movcc	r5, #12
 801a788:	2d00      	cmp	r5, #0
 801a78a:	4606      	mov	r6, r0
 801a78c:	db01      	blt.n	801a792 <_malloc_r+0x1a>
 801a78e:	42a9      	cmp	r1, r5
 801a790:	d903      	bls.n	801a79a <_malloc_r+0x22>
 801a792:	230c      	movs	r3, #12
 801a794:	6033      	str	r3, [r6, #0]
 801a796:	2000      	movs	r0, #0
 801a798:	bd70      	pop	{r4, r5, r6, pc}
 801a79a:	f000 fbb9 	bl	801af10 <__malloc_lock>
 801a79e:	4a21      	ldr	r2, [pc, #132]	; (801a824 <_malloc_r+0xac>)
 801a7a0:	6814      	ldr	r4, [r2, #0]
 801a7a2:	4621      	mov	r1, r4
 801a7a4:	b991      	cbnz	r1, 801a7cc <_malloc_r+0x54>
 801a7a6:	4c20      	ldr	r4, [pc, #128]	; (801a828 <_malloc_r+0xb0>)
 801a7a8:	6823      	ldr	r3, [r4, #0]
 801a7aa:	b91b      	cbnz	r3, 801a7b4 <_malloc_r+0x3c>
 801a7ac:	4630      	mov	r0, r6
 801a7ae:	f000 fb05 	bl	801adbc <_sbrk_r>
 801a7b2:	6020      	str	r0, [r4, #0]
 801a7b4:	4629      	mov	r1, r5
 801a7b6:	4630      	mov	r0, r6
 801a7b8:	f000 fb00 	bl	801adbc <_sbrk_r>
 801a7bc:	1c43      	adds	r3, r0, #1
 801a7be:	d124      	bne.n	801a80a <_malloc_r+0x92>
 801a7c0:	230c      	movs	r3, #12
 801a7c2:	6033      	str	r3, [r6, #0]
 801a7c4:	4630      	mov	r0, r6
 801a7c6:	f000 fba4 	bl	801af12 <__malloc_unlock>
 801a7ca:	e7e4      	b.n	801a796 <_malloc_r+0x1e>
 801a7cc:	680b      	ldr	r3, [r1, #0]
 801a7ce:	1b5b      	subs	r3, r3, r5
 801a7d0:	d418      	bmi.n	801a804 <_malloc_r+0x8c>
 801a7d2:	2b0b      	cmp	r3, #11
 801a7d4:	d90f      	bls.n	801a7f6 <_malloc_r+0x7e>
 801a7d6:	600b      	str	r3, [r1, #0]
 801a7d8:	50cd      	str	r5, [r1, r3]
 801a7da:	18cc      	adds	r4, r1, r3
 801a7dc:	4630      	mov	r0, r6
 801a7de:	f000 fb98 	bl	801af12 <__malloc_unlock>
 801a7e2:	f104 000b 	add.w	r0, r4, #11
 801a7e6:	1d23      	adds	r3, r4, #4
 801a7e8:	f020 0007 	bic.w	r0, r0, #7
 801a7ec:	1ac3      	subs	r3, r0, r3
 801a7ee:	d0d3      	beq.n	801a798 <_malloc_r+0x20>
 801a7f0:	425a      	negs	r2, r3
 801a7f2:	50e2      	str	r2, [r4, r3]
 801a7f4:	e7d0      	b.n	801a798 <_malloc_r+0x20>
 801a7f6:	428c      	cmp	r4, r1
 801a7f8:	684b      	ldr	r3, [r1, #4]
 801a7fa:	bf16      	itet	ne
 801a7fc:	6063      	strne	r3, [r4, #4]
 801a7fe:	6013      	streq	r3, [r2, #0]
 801a800:	460c      	movne	r4, r1
 801a802:	e7eb      	b.n	801a7dc <_malloc_r+0x64>
 801a804:	460c      	mov	r4, r1
 801a806:	6849      	ldr	r1, [r1, #4]
 801a808:	e7cc      	b.n	801a7a4 <_malloc_r+0x2c>
 801a80a:	1cc4      	adds	r4, r0, #3
 801a80c:	f024 0403 	bic.w	r4, r4, #3
 801a810:	42a0      	cmp	r0, r4
 801a812:	d005      	beq.n	801a820 <_malloc_r+0xa8>
 801a814:	1a21      	subs	r1, r4, r0
 801a816:	4630      	mov	r0, r6
 801a818:	f000 fad0 	bl	801adbc <_sbrk_r>
 801a81c:	3001      	adds	r0, #1
 801a81e:	d0cf      	beq.n	801a7c0 <_malloc_r+0x48>
 801a820:	6025      	str	r5, [r4, #0]
 801a822:	e7db      	b.n	801a7dc <_malloc_r+0x64>
 801a824:	200027a4 	.word	0x200027a4
 801a828:	200027a8 	.word	0x200027a8

0801a82c <__sfputc_r>:
 801a82c:	6893      	ldr	r3, [r2, #8]
 801a82e:	3b01      	subs	r3, #1
 801a830:	2b00      	cmp	r3, #0
 801a832:	b410      	push	{r4}
 801a834:	6093      	str	r3, [r2, #8]
 801a836:	da08      	bge.n	801a84a <__sfputc_r+0x1e>
 801a838:	6994      	ldr	r4, [r2, #24]
 801a83a:	42a3      	cmp	r3, r4
 801a83c:	db01      	blt.n	801a842 <__sfputc_r+0x16>
 801a83e:	290a      	cmp	r1, #10
 801a840:	d103      	bne.n	801a84a <__sfputc_r+0x1e>
 801a842:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a846:	f7ff bca3 	b.w	801a190 <__swbuf_r>
 801a84a:	6813      	ldr	r3, [r2, #0]
 801a84c:	1c58      	adds	r0, r3, #1
 801a84e:	6010      	str	r0, [r2, #0]
 801a850:	7019      	strb	r1, [r3, #0]
 801a852:	4608      	mov	r0, r1
 801a854:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a858:	4770      	bx	lr

0801a85a <__sfputs_r>:
 801a85a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a85c:	4606      	mov	r6, r0
 801a85e:	460f      	mov	r7, r1
 801a860:	4614      	mov	r4, r2
 801a862:	18d5      	adds	r5, r2, r3
 801a864:	42ac      	cmp	r4, r5
 801a866:	d101      	bne.n	801a86c <__sfputs_r+0x12>
 801a868:	2000      	movs	r0, #0
 801a86a:	e007      	b.n	801a87c <__sfputs_r+0x22>
 801a86c:	463a      	mov	r2, r7
 801a86e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a872:	4630      	mov	r0, r6
 801a874:	f7ff ffda 	bl	801a82c <__sfputc_r>
 801a878:	1c43      	adds	r3, r0, #1
 801a87a:	d1f3      	bne.n	801a864 <__sfputs_r+0xa>
 801a87c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a880 <_vfiprintf_r>:
 801a880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a884:	460c      	mov	r4, r1
 801a886:	b09d      	sub	sp, #116	; 0x74
 801a888:	4617      	mov	r7, r2
 801a88a:	461d      	mov	r5, r3
 801a88c:	4606      	mov	r6, r0
 801a88e:	b118      	cbz	r0, 801a898 <_vfiprintf_r+0x18>
 801a890:	6983      	ldr	r3, [r0, #24]
 801a892:	b90b      	cbnz	r3, 801a898 <_vfiprintf_r+0x18>
 801a894:	f7ff fe2c 	bl	801a4f0 <__sinit>
 801a898:	4b7c      	ldr	r3, [pc, #496]	; (801aa8c <_vfiprintf_r+0x20c>)
 801a89a:	429c      	cmp	r4, r3
 801a89c:	d158      	bne.n	801a950 <_vfiprintf_r+0xd0>
 801a89e:	6874      	ldr	r4, [r6, #4]
 801a8a0:	89a3      	ldrh	r3, [r4, #12]
 801a8a2:	0718      	lsls	r0, r3, #28
 801a8a4:	d55e      	bpl.n	801a964 <_vfiprintf_r+0xe4>
 801a8a6:	6923      	ldr	r3, [r4, #16]
 801a8a8:	2b00      	cmp	r3, #0
 801a8aa:	d05b      	beq.n	801a964 <_vfiprintf_r+0xe4>
 801a8ac:	2300      	movs	r3, #0
 801a8ae:	9309      	str	r3, [sp, #36]	; 0x24
 801a8b0:	2320      	movs	r3, #32
 801a8b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a8b6:	2330      	movs	r3, #48	; 0x30
 801a8b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a8bc:	9503      	str	r5, [sp, #12]
 801a8be:	f04f 0b01 	mov.w	fp, #1
 801a8c2:	46b8      	mov	r8, r7
 801a8c4:	4645      	mov	r5, r8
 801a8c6:	f815 3b01 	ldrb.w	r3, [r5], #1
 801a8ca:	b10b      	cbz	r3, 801a8d0 <_vfiprintf_r+0x50>
 801a8cc:	2b25      	cmp	r3, #37	; 0x25
 801a8ce:	d154      	bne.n	801a97a <_vfiprintf_r+0xfa>
 801a8d0:	ebb8 0a07 	subs.w	sl, r8, r7
 801a8d4:	d00b      	beq.n	801a8ee <_vfiprintf_r+0x6e>
 801a8d6:	4653      	mov	r3, sl
 801a8d8:	463a      	mov	r2, r7
 801a8da:	4621      	mov	r1, r4
 801a8dc:	4630      	mov	r0, r6
 801a8de:	f7ff ffbc 	bl	801a85a <__sfputs_r>
 801a8e2:	3001      	adds	r0, #1
 801a8e4:	f000 80c2 	beq.w	801aa6c <_vfiprintf_r+0x1ec>
 801a8e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a8ea:	4453      	add	r3, sl
 801a8ec:	9309      	str	r3, [sp, #36]	; 0x24
 801a8ee:	f898 3000 	ldrb.w	r3, [r8]
 801a8f2:	2b00      	cmp	r3, #0
 801a8f4:	f000 80ba 	beq.w	801aa6c <_vfiprintf_r+0x1ec>
 801a8f8:	2300      	movs	r3, #0
 801a8fa:	f04f 32ff 	mov.w	r2, #4294967295
 801a8fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a902:	9304      	str	r3, [sp, #16]
 801a904:	9307      	str	r3, [sp, #28]
 801a906:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a90a:	931a      	str	r3, [sp, #104]	; 0x68
 801a90c:	46a8      	mov	r8, r5
 801a90e:	2205      	movs	r2, #5
 801a910:	f818 1b01 	ldrb.w	r1, [r8], #1
 801a914:	485e      	ldr	r0, [pc, #376]	; (801aa90 <_vfiprintf_r+0x210>)
 801a916:	f7e5 fc6b 	bl	80001f0 <memchr>
 801a91a:	9b04      	ldr	r3, [sp, #16]
 801a91c:	bb78      	cbnz	r0, 801a97e <_vfiprintf_r+0xfe>
 801a91e:	06d9      	lsls	r1, r3, #27
 801a920:	bf44      	itt	mi
 801a922:	2220      	movmi	r2, #32
 801a924:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801a928:	071a      	lsls	r2, r3, #28
 801a92a:	bf44      	itt	mi
 801a92c:	222b      	movmi	r2, #43	; 0x2b
 801a92e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801a932:	782a      	ldrb	r2, [r5, #0]
 801a934:	2a2a      	cmp	r2, #42	; 0x2a
 801a936:	d02a      	beq.n	801a98e <_vfiprintf_r+0x10e>
 801a938:	9a07      	ldr	r2, [sp, #28]
 801a93a:	46a8      	mov	r8, r5
 801a93c:	2000      	movs	r0, #0
 801a93e:	250a      	movs	r5, #10
 801a940:	4641      	mov	r1, r8
 801a942:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a946:	3b30      	subs	r3, #48	; 0x30
 801a948:	2b09      	cmp	r3, #9
 801a94a:	d969      	bls.n	801aa20 <_vfiprintf_r+0x1a0>
 801a94c:	b360      	cbz	r0, 801a9a8 <_vfiprintf_r+0x128>
 801a94e:	e024      	b.n	801a99a <_vfiprintf_r+0x11a>
 801a950:	4b50      	ldr	r3, [pc, #320]	; (801aa94 <_vfiprintf_r+0x214>)
 801a952:	429c      	cmp	r4, r3
 801a954:	d101      	bne.n	801a95a <_vfiprintf_r+0xda>
 801a956:	68b4      	ldr	r4, [r6, #8]
 801a958:	e7a2      	b.n	801a8a0 <_vfiprintf_r+0x20>
 801a95a:	4b4f      	ldr	r3, [pc, #316]	; (801aa98 <_vfiprintf_r+0x218>)
 801a95c:	429c      	cmp	r4, r3
 801a95e:	bf08      	it	eq
 801a960:	68f4      	ldreq	r4, [r6, #12]
 801a962:	e79d      	b.n	801a8a0 <_vfiprintf_r+0x20>
 801a964:	4621      	mov	r1, r4
 801a966:	4630      	mov	r0, r6
 801a968:	f7ff fc64 	bl	801a234 <__swsetup_r>
 801a96c:	2800      	cmp	r0, #0
 801a96e:	d09d      	beq.n	801a8ac <_vfiprintf_r+0x2c>
 801a970:	f04f 30ff 	mov.w	r0, #4294967295
 801a974:	b01d      	add	sp, #116	; 0x74
 801a976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a97a:	46a8      	mov	r8, r5
 801a97c:	e7a2      	b.n	801a8c4 <_vfiprintf_r+0x44>
 801a97e:	4a44      	ldr	r2, [pc, #272]	; (801aa90 <_vfiprintf_r+0x210>)
 801a980:	1a80      	subs	r0, r0, r2
 801a982:	fa0b f000 	lsl.w	r0, fp, r0
 801a986:	4318      	orrs	r0, r3
 801a988:	9004      	str	r0, [sp, #16]
 801a98a:	4645      	mov	r5, r8
 801a98c:	e7be      	b.n	801a90c <_vfiprintf_r+0x8c>
 801a98e:	9a03      	ldr	r2, [sp, #12]
 801a990:	1d11      	adds	r1, r2, #4
 801a992:	6812      	ldr	r2, [r2, #0]
 801a994:	9103      	str	r1, [sp, #12]
 801a996:	2a00      	cmp	r2, #0
 801a998:	db01      	blt.n	801a99e <_vfiprintf_r+0x11e>
 801a99a:	9207      	str	r2, [sp, #28]
 801a99c:	e004      	b.n	801a9a8 <_vfiprintf_r+0x128>
 801a99e:	4252      	negs	r2, r2
 801a9a0:	f043 0302 	orr.w	r3, r3, #2
 801a9a4:	9207      	str	r2, [sp, #28]
 801a9a6:	9304      	str	r3, [sp, #16]
 801a9a8:	f898 3000 	ldrb.w	r3, [r8]
 801a9ac:	2b2e      	cmp	r3, #46	; 0x2e
 801a9ae:	d10e      	bne.n	801a9ce <_vfiprintf_r+0x14e>
 801a9b0:	f898 3001 	ldrb.w	r3, [r8, #1]
 801a9b4:	2b2a      	cmp	r3, #42	; 0x2a
 801a9b6:	d138      	bne.n	801aa2a <_vfiprintf_r+0x1aa>
 801a9b8:	9b03      	ldr	r3, [sp, #12]
 801a9ba:	1d1a      	adds	r2, r3, #4
 801a9bc:	681b      	ldr	r3, [r3, #0]
 801a9be:	9203      	str	r2, [sp, #12]
 801a9c0:	2b00      	cmp	r3, #0
 801a9c2:	bfb8      	it	lt
 801a9c4:	f04f 33ff 	movlt.w	r3, #4294967295
 801a9c8:	f108 0802 	add.w	r8, r8, #2
 801a9cc:	9305      	str	r3, [sp, #20]
 801a9ce:	4d33      	ldr	r5, [pc, #204]	; (801aa9c <_vfiprintf_r+0x21c>)
 801a9d0:	f898 1000 	ldrb.w	r1, [r8]
 801a9d4:	2203      	movs	r2, #3
 801a9d6:	4628      	mov	r0, r5
 801a9d8:	f7e5 fc0a 	bl	80001f0 <memchr>
 801a9dc:	b140      	cbz	r0, 801a9f0 <_vfiprintf_r+0x170>
 801a9de:	2340      	movs	r3, #64	; 0x40
 801a9e0:	1b40      	subs	r0, r0, r5
 801a9e2:	fa03 f000 	lsl.w	r0, r3, r0
 801a9e6:	9b04      	ldr	r3, [sp, #16]
 801a9e8:	4303      	orrs	r3, r0
 801a9ea:	f108 0801 	add.w	r8, r8, #1
 801a9ee:	9304      	str	r3, [sp, #16]
 801a9f0:	f898 1000 	ldrb.w	r1, [r8]
 801a9f4:	482a      	ldr	r0, [pc, #168]	; (801aaa0 <_vfiprintf_r+0x220>)
 801a9f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a9fa:	2206      	movs	r2, #6
 801a9fc:	f108 0701 	add.w	r7, r8, #1
 801aa00:	f7e5 fbf6 	bl	80001f0 <memchr>
 801aa04:	2800      	cmp	r0, #0
 801aa06:	d037      	beq.n	801aa78 <_vfiprintf_r+0x1f8>
 801aa08:	4b26      	ldr	r3, [pc, #152]	; (801aaa4 <_vfiprintf_r+0x224>)
 801aa0a:	bb1b      	cbnz	r3, 801aa54 <_vfiprintf_r+0x1d4>
 801aa0c:	9b03      	ldr	r3, [sp, #12]
 801aa0e:	3307      	adds	r3, #7
 801aa10:	f023 0307 	bic.w	r3, r3, #7
 801aa14:	3308      	adds	r3, #8
 801aa16:	9303      	str	r3, [sp, #12]
 801aa18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aa1a:	444b      	add	r3, r9
 801aa1c:	9309      	str	r3, [sp, #36]	; 0x24
 801aa1e:	e750      	b.n	801a8c2 <_vfiprintf_r+0x42>
 801aa20:	fb05 3202 	mla	r2, r5, r2, r3
 801aa24:	2001      	movs	r0, #1
 801aa26:	4688      	mov	r8, r1
 801aa28:	e78a      	b.n	801a940 <_vfiprintf_r+0xc0>
 801aa2a:	2300      	movs	r3, #0
 801aa2c:	f108 0801 	add.w	r8, r8, #1
 801aa30:	9305      	str	r3, [sp, #20]
 801aa32:	4619      	mov	r1, r3
 801aa34:	250a      	movs	r5, #10
 801aa36:	4640      	mov	r0, r8
 801aa38:	f810 2b01 	ldrb.w	r2, [r0], #1
 801aa3c:	3a30      	subs	r2, #48	; 0x30
 801aa3e:	2a09      	cmp	r2, #9
 801aa40:	d903      	bls.n	801aa4a <_vfiprintf_r+0x1ca>
 801aa42:	2b00      	cmp	r3, #0
 801aa44:	d0c3      	beq.n	801a9ce <_vfiprintf_r+0x14e>
 801aa46:	9105      	str	r1, [sp, #20]
 801aa48:	e7c1      	b.n	801a9ce <_vfiprintf_r+0x14e>
 801aa4a:	fb05 2101 	mla	r1, r5, r1, r2
 801aa4e:	2301      	movs	r3, #1
 801aa50:	4680      	mov	r8, r0
 801aa52:	e7f0      	b.n	801aa36 <_vfiprintf_r+0x1b6>
 801aa54:	ab03      	add	r3, sp, #12
 801aa56:	9300      	str	r3, [sp, #0]
 801aa58:	4622      	mov	r2, r4
 801aa5a:	4b13      	ldr	r3, [pc, #76]	; (801aaa8 <_vfiprintf_r+0x228>)
 801aa5c:	a904      	add	r1, sp, #16
 801aa5e:	4630      	mov	r0, r6
 801aa60:	f3af 8000 	nop.w
 801aa64:	f1b0 3fff 	cmp.w	r0, #4294967295
 801aa68:	4681      	mov	r9, r0
 801aa6a:	d1d5      	bne.n	801aa18 <_vfiprintf_r+0x198>
 801aa6c:	89a3      	ldrh	r3, [r4, #12]
 801aa6e:	065b      	lsls	r3, r3, #25
 801aa70:	f53f af7e 	bmi.w	801a970 <_vfiprintf_r+0xf0>
 801aa74:	9809      	ldr	r0, [sp, #36]	; 0x24
 801aa76:	e77d      	b.n	801a974 <_vfiprintf_r+0xf4>
 801aa78:	ab03      	add	r3, sp, #12
 801aa7a:	9300      	str	r3, [sp, #0]
 801aa7c:	4622      	mov	r2, r4
 801aa7e:	4b0a      	ldr	r3, [pc, #40]	; (801aaa8 <_vfiprintf_r+0x228>)
 801aa80:	a904      	add	r1, sp, #16
 801aa82:	4630      	mov	r0, r6
 801aa84:	f000 f888 	bl	801ab98 <_printf_i>
 801aa88:	e7ec      	b.n	801aa64 <_vfiprintf_r+0x1e4>
 801aa8a:	bf00      	nop
 801aa8c:	0801d1f0 	.word	0x0801d1f0
 801aa90:	0801d230 	.word	0x0801d230
 801aa94:	0801d210 	.word	0x0801d210
 801aa98:	0801d1d0 	.word	0x0801d1d0
 801aa9c:	0801d236 	.word	0x0801d236
 801aaa0:	0801d23a 	.word	0x0801d23a
 801aaa4:	00000000 	.word	0x00000000
 801aaa8:	0801a85b 	.word	0x0801a85b

0801aaac <_printf_common>:
 801aaac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801aab0:	4691      	mov	r9, r2
 801aab2:	461f      	mov	r7, r3
 801aab4:	688a      	ldr	r2, [r1, #8]
 801aab6:	690b      	ldr	r3, [r1, #16]
 801aab8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801aabc:	4293      	cmp	r3, r2
 801aabe:	bfb8      	it	lt
 801aac0:	4613      	movlt	r3, r2
 801aac2:	f8c9 3000 	str.w	r3, [r9]
 801aac6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801aaca:	4606      	mov	r6, r0
 801aacc:	460c      	mov	r4, r1
 801aace:	b112      	cbz	r2, 801aad6 <_printf_common+0x2a>
 801aad0:	3301      	adds	r3, #1
 801aad2:	f8c9 3000 	str.w	r3, [r9]
 801aad6:	6823      	ldr	r3, [r4, #0]
 801aad8:	0699      	lsls	r1, r3, #26
 801aada:	bf42      	ittt	mi
 801aadc:	f8d9 3000 	ldrmi.w	r3, [r9]
 801aae0:	3302      	addmi	r3, #2
 801aae2:	f8c9 3000 	strmi.w	r3, [r9]
 801aae6:	6825      	ldr	r5, [r4, #0]
 801aae8:	f015 0506 	ands.w	r5, r5, #6
 801aaec:	d107      	bne.n	801aafe <_printf_common+0x52>
 801aaee:	f104 0a19 	add.w	sl, r4, #25
 801aaf2:	68e3      	ldr	r3, [r4, #12]
 801aaf4:	f8d9 2000 	ldr.w	r2, [r9]
 801aaf8:	1a9b      	subs	r3, r3, r2
 801aafa:	42ab      	cmp	r3, r5
 801aafc:	dc28      	bgt.n	801ab50 <_printf_common+0xa4>
 801aafe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801ab02:	6822      	ldr	r2, [r4, #0]
 801ab04:	3300      	adds	r3, #0
 801ab06:	bf18      	it	ne
 801ab08:	2301      	movne	r3, #1
 801ab0a:	0692      	lsls	r2, r2, #26
 801ab0c:	d42d      	bmi.n	801ab6a <_printf_common+0xbe>
 801ab0e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801ab12:	4639      	mov	r1, r7
 801ab14:	4630      	mov	r0, r6
 801ab16:	47c0      	blx	r8
 801ab18:	3001      	adds	r0, #1
 801ab1a:	d020      	beq.n	801ab5e <_printf_common+0xb2>
 801ab1c:	6823      	ldr	r3, [r4, #0]
 801ab1e:	68e5      	ldr	r5, [r4, #12]
 801ab20:	f8d9 2000 	ldr.w	r2, [r9]
 801ab24:	f003 0306 	and.w	r3, r3, #6
 801ab28:	2b04      	cmp	r3, #4
 801ab2a:	bf08      	it	eq
 801ab2c:	1aad      	subeq	r5, r5, r2
 801ab2e:	68a3      	ldr	r3, [r4, #8]
 801ab30:	6922      	ldr	r2, [r4, #16]
 801ab32:	bf0c      	ite	eq
 801ab34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801ab38:	2500      	movne	r5, #0
 801ab3a:	4293      	cmp	r3, r2
 801ab3c:	bfc4      	itt	gt
 801ab3e:	1a9b      	subgt	r3, r3, r2
 801ab40:	18ed      	addgt	r5, r5, r3
 801ab42:	f04f 0900 	mov.w	r9, #0
 801ab46:	341a      	adds	r4, #26
 801ab48:	454d      	cmp	r5, r9
 801ab4a:	d11a      	bne.n	801ab82 <_printf_common+0xd6>
 801ab4c:	2000      	movs	r0, #0
 801ab4e:	e008      	b.n	801ab62 <_printf_common+0xb6>
 801ab50:	2301      	movs	r3, #1
 801ab52:	4652      	mov	r2, sl
 801ab54:	4639      	mov	r1, r7
 801ab56:	4630      	mov	r0, r6
 801ab58:	47c0      	blx	r8
 801ab5a:	3001      	adds	r0, #1
 801ab5c:	d103      	bne.n	801ab66 <_printf_common+0xba>
 801ab5e:	f04f 30ff 	mov.w	r0, #4294967295
 801ab62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ab66:	3501      	adds	r5, #1
 801ab68:	e7c3      	b.n	801aaf2 <_printf_common+0x46>
 801ab6a:	18e1      	adds	r1, r4, r3
 801ab6c:	1c5a      	adds	r2, r3, #1
 801ab6e:	2030      	movs	r0, #48	; 0x30
 801ab70:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801ab74:	4422      	add	r2, r4
 801ab76:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801ab7a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801ab7e:	3302      	adds	r3, #2
 801ab80:	e7c5      	b.n	801ab0e <_printf_common+0x62>
 801ab82:	2301      	movs	r3, #1
 801ab84:	4622      	mov	r2, r4
 801ab86:	4639      	mov	r1, r7
 801ab88:	4630      	mov	r0, r6
 801ab8a:	47c0      	blx	r8
 801ab8c:	3001      	adds	r0, #1
 801ab8e:	d0e6      	beq.n	801ab5e <_printf_common+0xb2>
 801ab90:	f109 0901 	add.w	r9, r9, #1
 801ab94:	e7d8      	b.n	801ab48 <_printf_common+0x9c>
	...

0801ab98 <_printf_i>:
 801ab98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ab9c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801aba0:	460c      	mov	r4, r1
 801aba2:	7e09      	ldrb	r1, [r1, #24]
 801aba4:	b085      	sub	sp, #20
 801aba6:	296e      	cmp	r1, #110	; 0x6e
 801aba8:	4617      	mov	r7, r2
 801abaa:	4606      	mov	r6, r0
 801abac:	4698      	mov	r8, r3
 801abae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801abb0:	f000 80b3 	beq.w	801ad1a <_printf_i+0x182>
 801abb4:	d822      	bhi.n	801abfc <_printf_i+0x64>
 801abb6:	2963      	cmp	r1, #99	; 0x63
 801abb8:	d036      	beq.n	801ac28 <_printf_i+0x90>
 801abba:	d80a      	bhi.n	801abd2 <_printf_i+0x3a>
 801abbc:	2900      	cmp	r1, #0
 801abbe:	f000 80b9 	beq.w	801ad34 <_printf_i+0x19c>
 801abc2:	2958      	cmp	r1, #88	; 0x58
 801abc4:	f000 8083 	beq.w	801acce <_printf_i+0x136>
 801abc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801abcc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801abd0:	e032      	b.n	801ac38 <_printf_i+0xa0>
 801abd2:	2964      	cmp	r1, #100	; 0x64
 801abd4:	d001      	beq.n	801abda <_printf_i+0x42>
 801abd6:	2969      	cmp	r1, #105	; 0x69
 801abd8:	d1f6      	bne.n	801abc8 <_printf_i+0x30>
 801abda:	6820      	ldr	r0, [r4, #0]
 801abdc:	6813      	ldr	r3, [r2, #0]
 801abde:	0605      	lsls	r5, r0, #24
 801abe0:	f103 0104 	add.w	r1, r3, #4
 801abe4:	d52a      	bpl.n	801ac3c <_printf_i+0xa4>
 801abe6:	681b      	ldr	r3, [r3, #0]
 801abe8:	6011      	str	r1, [r2, #0]
 801abea:	2b00      	cmp	r3, #0
 801abec:	da03      	bge.n	801abf6 <_printf_i+0x5e>
 801abee:	222d      	movs	r2, #45	; 0x2d
 801abf0:	425b      	negs	r3, r3
 801abf2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801abf6:	486f      	ldr	r0, [pc, #444]	; (801adb4 <_printf_i+0x21c>)
 801abf8:	220a      	movs	r2, #10
 801abfa:	e039      	b.n	801ac70 <_printf_i+0xd8>
 801abfc:	2973      	cmp	r1, #115	; 0x73
 801abfe:	f000 809d 	beq.w	801ad3c <_printf_i+0x1a4>
 801ac02:	d808      	bhi.n	801ac16 <_printf_i+0x7e>
 801ac04:	296f      	cmp	r1, #111	; 0x6f
 801ac06:	d020      	beq.n	801ac4a <_printf_i+0xb2>
 801ac08:	2970      	cmp	r1, #112	; 0x70
 801ac0a:	d1dd      	bne.n	801abc8 <_printf_i+0x30>
 801ac0c:	6823      	ldr	r3, [r4, #0]
 801ac0e:	f043 0320 	orr.w	r3, r3, #32
 801ac12:	6023      	str	r3, [r4, #0]
 801ac14:	e003      	b.n	801ac1e <_printf_i+0x86>
 801ac16:	2975      	cmp	r1, #117	; 0x75
 801ac18:	d017      	beq.n	801ac4a <_printf_i+0xb2>
 801ac1a:	2978      	cmp	r1, #120	; 0x78
 801ac1c:	d1d4      	bne.n	801abc8 <_printf_i+0x30>
 801ac1e:	2378      	movs	r3, #120	; 0x78
 801ac20:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801ac24:	4864      	ldr	r0, [pc, #400]	; (801adb8 <_printf_i+0x220>)
 801ac26:	e055      	b.n	801acd4 <_printf_i+0x13c>
 801ac28:	6813      	ldr	r3, [r2, #0]
 801ac2a:	1d19      	adds	r1, r3, #4
 801ac2c:	681b      	ldr	r3, [r3, #0]
 801ac2e:	6011      	str	r1, [r2, #0]
 801ac30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801ac34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801ac38:	2301      	movs	r3, #1
 801ac3a:	e08c      	b.n	801ad56 <_printf_i+0x1be>
 801ac3c:	681b      	ldr	r3, [r3, #0]
 801ac3e:	6011      	str	r1, [r2, #0]
 801ac40:	f010 0f40 	tst.w	r0, #64	; 0x40
 801ac44:	bf18      	it	ne
 801ac46:	b21b      	sxthne	r3, r3
 801ac48:	e7cf      	b.n	801abea <_printf_i+0x52>
 801ac4a:	6813      	ldr	r3, [r2, #0]
 801ac4c:	6825      	ldr	r5, [r4, #0]
 801ac4e:	1d18      	adds	r0, r3, #4
 801ac50:	6010      	str	r0, [r2, #0]
 801ac52:	0628      	lsls	r0, r5, #24
 801ac54:	d501      	bpl.n	801ac5a <_printf_i+0xc2>
 801ac56:	681b      	ldr	r3, [r3, #0]
 801ac58:	e002      	b.n	801ac60 <_printf_i+0xc8>
 801ac5a:	0668      	lsls	r0, r5, #25
 801ac5c:	d5fb      	bpl.n	801ac56 <_printf_i+0xbe>
 801ac5e:	881b      	ldrh	r3, [r3, #0]
 801ac60:	4854      	ldr	r0, [pc, #336]	; (801adb4 <_printf_i+0x21c>)
 801ac62:	296f      	cmp	r1, #111	; 0x6f
 801ac64:	bf14      	ite	ne
 801ac66:	220a      	movne	r2, #10
 801ac68:	2208      	moveq	r2, #8
 801ac6a:	2100      	movs	r1, #0
 801ac6c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801ac70:	6865      	ldr	r5, [r4, #4]
 801ac72:	60a5      	str	r5, [r4, #8]
 801ac74:	2d00      	cmp	r5, #0
 801ac76:	f2c0 8095 	blt.w	801ada4 <_printf_i+0x20c>
 801ac7a:	6821      	ldr	r1, [r4, #0]
 801ac7c:	f021 0104 	bic.w	r1, r1, #4
 801ac80:	6021      	str	r1, [r4, #0]
 801ac82:	2b00      	cmp	r3, #0
 801ac84:	d13d      	bne.n	801ad02 <_printf_i+0x16a>
 801ac86:	2d00      	cmp	r5, #0
 801ac88:	f040 808e 	bne.w	801ada8 <_printf_i+0x210>
 801ac8c:	4665      	mov	r5, ip
 801ac8e:	2a08      	cmp	r2, #8
 801ac90:	d10b      	bne.n	801acaa <_printf_i+0x112>
 801ac92:	6823      	ldr	r3, [r4, #0]
 801ac94:	07db      	lsls	r3, r3, #31
 801ac96:	d508      	bpl.n	801acaa <_printf_i+0x112>
 801ac98:	6923      	ldr	r3, [r4, #16]
 801ac9a:	6862      	ldr	r2, [r4, #4]
 801ac9c:	429a      	cmp	r2, r3
 801ac9e:	bfde      	ittt	le
 801aca0:	2330      	movle	r3, #48	; 0x30
 801aca2:	f805 3c01 	strble.w	r3, [r5, #-1]
 801aca6:	f105 35ff 	addle.w	r5, r5, #4294967295
 801acaa:	ebac 0305 	sub.w	r3, ip, r5
 801acae:	6123      	str	r3, [r4, #16]
 801acb0:	f8cd 8000 	str.w	r8, [sp]
 801acb4:	463b      	mov	r3, r7
 801acb6:	aa03      	add	r2, sp, #12
 801acb8:	4621      	mov	r1, r4
 801acba:	4630      	mov	r0, r6
 801acbc:	f7ff fef6 	bl	801aaac <_printf_common>
 801acc0:	3001      	adds	r0, #1
 801acc2:	d14d      	bne.n	801ad60 <_printf_i+0x1c8>
 801acc4:	f04f 30ff 	mov.w	r0, #4294967295
 801acc8:	b005      	add	sp, #20
 801acca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801acce:	4839      	ldr	r0, [pc, #228]	; (801adb4 <_printf_i+0x21c>)
 801acd0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801acd4:	6813      	ldr	r3, [r2, #0]
 801acd6:	6821      	ldr	r1, [r4, #0]
 801acd8:	1d1d      	adds	r5, r3, #4
 801acda:	681b      	ldr	r3, [r3, #0]
 801acdc:	6015      	str	r5, [r2, #0]
 801acde:	060a      	lsls	r2, r1, #24
 801ace0:	d50b      	bpl.n	801acfa <_printf_i+0x162>
 801ace2:	07ca      	lsls	r2, r1, #31
 801ace4:	bf44      	itt	mi
 801ace6:	f041 0120 	orrmi.w	r1, r1, #32
 801acea:	6021      	strmi	r1, [r4, #0]
 801acec:	b91b      	cbnz	r3, 801acf6 <_printf_i+0x15e>
 801acee:	6822      	ldr	r2, [r4, #0]
 801acf0:	f022 0220 	bic.w	r2, r2, #32
 801acf4:	6022      	str	r2, [r4, #0]
 801acf6:	2210      	movs	r2, #16
 801acf8:	e7b7      	b.n	801ac6a <_printf_i+0xd2>
 801acfa:	064d      	lsls	r5, r1, #25
 801acfc:	bf48      	it	mi
 801acfe:	b29b      	uxthmi	r3, r3
 801ad00:	e7ef      	b.n	801ace2 <_printf_i+0x14a>
 801ad02:	4665      	mov	r5, ip
 801ad04:	fbb3 f1f2 	udiv	r1, r3, r2
 801ad08:	fb02 3311 	mls	r3, r2, r1, r3
 801ad0c:	5cc3      	ldrb	r3, [r0, r3]
 801ad0e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801ad12:	460b      	mov	r3, r1
 801ad14:	2900      	cmp	r1, #0
 801ad16:	d1f5      	bne.n	801ad04 <_printf_i+0x16c>
 801ad18:	e7b9      	b.n	801ac8e <_printf_i+0xf6>
 801ad1a:	6813      	ldr	r3, [r2, #0]
 801ad1c:	6825      	ldr	r5, [r4, #0]
 801ad1e:	6961      	ldr	r1, [r4, #20]
 801ad20:	1d18      	adds	r0, r3, #4
 801ad22:	6010      	str	r0, [r2, #0]
 801ad24:	0628      	lsls	r0, r5, #24
 801ad26:	681b      	ldr	r3, [r3, #0]
 801ad28:	d501      	bpl.n	801ad2e <_printf_i+0x196>
 801ad2a:	6019      	str	r1, [r3, #0]
 801ad2c:	e002      	b.n	801ad34 <_printf_i+0x19c>
 801ad2e:	066a      	lsls	r2, r5, #25
 801ad30:	d5fb      	bpl.n	801ad2a <_printf_i+0x192>
 801ad32:	8019      	strh	r1, [r3, #0]
 801ad34:	2300      	movs	r3, #0
 801ad36:	6123      	str	r3, [r4, #16]
 801ad38:	4665      	mov	r5, ip
 801ad3a:	e7b9      	b.n	801acb0 <_printf_i+0x118>
 801ad3c:	6813      	ldr	r3, [r2, #0]
 801ad3e:	1d19      	adds	r1, r3, #4
 801ad40:	6011      	str	r1, [r2, #0]
 801ad42:	681d      	ldr	r5, [r3, #0]
 801ad44:	6862      	ldr	r2, [r4, #4]
 801ad46:	2100      	movs	r1, #0
 801ad48:	4628      	mov	r0, r5
 801ad4a:	f7e5 fa51 	bl	80001f0 <memchr>
 801ad4e:	b108      	cbz	r0, 801ad54 <_printf_i+0x1bc>
 801ad50:	1b40      	subs	r0, r0, r5
 801ad52:	6060      	str	r0, [r4, #4]
 801ad54:	6863      	ldr	r3, [r4, #4]
 801ad56:	6123      	str	r3, [r4, #16]
 801ad58:	2300      	movs	r3, #0
 801ad5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ad5e:	e7a7      	b.n	801acb0 <_printf_i+0x118>
 801ad60:	6923      	ldr	r3, [r4, #16]
 801ad62:	462a      	mov	r2, r5
 801ad64:	4639      	mov	r1, r7
 801ad66:	4630      	mov	r0, r6
 801ad68:	47c0      	blx	r8
 801ad6a:	3001      	adds	r0, #1
 801ad6c:	d0aa      	beq.n	801acc4 <_printf_i+0x12c>
 801ad6e:	6823      	ldr	r3, [r4, #0]
 801ad70:	079b      	lsls	r3, r3, #30
 801ad72:	d413      	bmi.n	801ad9c <_printf_i+0x204>
 801ad74:	68e0      	ldr	r0, [r4, #12]
 801ad76:	9b03      	ldr	r3, [sp, #12]
 801ad78:	4298      	cmp	r0, r3
 801ad7a:	bfb8      	it	lt
 801ad7c:	4618      	movlt	r0, r3
 801ad7e:	e7a3      	b.n	801acc8 <_printf_i+0x130>
 801ad80:	2301      	movs	r3, #1
 801ad82:	464a      	mov	r2, r9
 801ad84:	4639      	mov	r1, r7
 801ad86:	4630      	mov	r0, r6
 801ad88:	47c0      	blx	r8
 801ad8a:	3001      	adds	r0, #1
 801ad8c:	d09a      	beq.n	801acc4 <_printf_i+0x12c>
 801ad8e:	3501      	adds	r5, #1
 801ad90:	68e3      	ldr	r3, [r4, #12]
 801ad92:	9a03      	ldr	r2, [sp, #12]
 801ad94:	1a9b      	subs	r3, r3, r2
 801ad96:	42ab      	cmp	r3, r5
 801ad98:	dcf2      	bgt.n	801ad80 <_printf_i+0x1e8>
 801ad9a:	e7eb      	b.n	801ad74 <_printf_i+0x1dc>
 801ad9c:	2500      	movs	r5, #0
 801ad9e:	f104 0919 	add.w	r9, r4, #25
 801ada2:	e7f5      	b.n	801ad90 <_printf_i+0x1f8>
 801ada4:	2b00      	cmp	r3, #0
 801ada6:	d1ac      	bne.n	801ad02 <_printf_i+0x16a>
 801ada8:	7803      	ldrb	r3, [r0, #0]
 801adaa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801adae:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801adb2:	e76c      	b.n	801ac8e <_printf_i+0xf6>
 801adb4:	0801d241 	.word	0x0801d241
 801adb8:	0801d252 	.word	0x0801d252

0801adbc <_sbrk_r>:
 801adbc:	b538      	push	{r3, r4, r5, lr}
 801adbe:	4c06      	ldr	r4, [pc, #24]	; (801add8 <_sbrk_r+0x1c>)
 801adc0:	2300      	movs	r3, #0
 801adc2:	4605      	mov	r5, r0
 801adc4:	4608      	mov	r0, r1
 801adc6:	6023      	str	r3, [r4, #0]
 801adc8:	f7e8 f89a 	bl	8002f00 <_sbrk>
 801adcc:	1c43      	adds	r3, r0, #1
 801adce:	d102      	bne.n	801add6 <_sbrk_r+0x1a>
 801add0:	6823      	ldr	r3, [r4, #0]
 801add2:	b103      	cbz	r3, 801add6 <_sbrk_r+0x1a>
 801add4:	602b      	str	r3, [r5, #0]
 801add6:	bd38      	pop	{r3, r4, r5, pc}
 801add8:	2000d668 	.word	0x2000d668

0801addc <__sread>:
 801addc:	b510      	push	{r4, lr}
 801adde:	460c      	mov	r4, r1
 801ade0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ade4:	f000 f896 	bl	801af14 <_read_r>
 801ade8:	2800      	cmp	r0, #0
 801adea:	bfab      	itete	ge
 801adec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801adee:	89a3      	ldrhlt	r3, [r4, #12]
 801adf0:	181b      	addge	r3, r3, r0
 801adf2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801adf6:	bfac      	ite	ge
 801adf8:	6563      	strge	r3, [r4, #84]	; 0x54
 801adfa:	81a3      	strhlt	r3, [r4, #12]
 801adfc:	bd10      	pop	{r4, pc}

0801adfe <__swrite>:
 801adfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ae02:	461f      	mov	r7, r3
 801ae04:	898b      	ldrh	r3, [r1, #12]
 801ae06:	05db      	lsls	r3, r3, #23
 801ae08:	4605      	mov	r5, r0
 801ae0a:	460c      	mov	r4, r1
 801ae0c:	4616      	mov	r6, r2
 801ae0e:	d505      	bpl.n	801ae1c <__swrite+0x1e>
 801ae10:	2302      	movs	r3, #2
 801ae12:	2200      	movs	r2, #0
 801ae14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ae18:	f000 f868 	bl	801aeec <_lseek_r>
 801ae1c:	89a3      	ldrh	r3, [r4, #12]
 801ae1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ae22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801ae26:	81a3      	strh	r3, [r4, #12]
 801ae28:	4632      	mov	r2, r6
 801ae2a:	463b      	mov	r3, r7
 801ae2c:	4628      	mov	r0, r5
 801ae2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ae32:	f000 b817 	b.w	801ae64 <_write_r>

0801ae36 <__sseek>:
 801ae36:	b510      	push	{r4, lr}
 801ae38:	460c      	mov	r4, r1
 801ae3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ae3e:	f000 f855 	bl	801aeec <_lseek_r>
 801ae42:	1c43      	adds	r3, r0, #1
 801ae44:	89a3      	ldrh	r3, [r4, #12]
 801ae46:	bf15      	itete	ne
 801ae48:	6560      	strne	r0, [r4, #84]	; 0x54
 801ae4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801ae4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801ae52:	81a3      	strheq	r3, [r4, #12]
 801ae54:	bf18      	it	ne
 801ae56:	81a3      	strhne	r3, [r4, #12]
 801ae58:	bd10      	pop	{r4, pc}

0801ae5a <__sclose>:
 801ae5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ae5e:	f000 b813 	b.w	801ae88 <_close_r>
	...

0801ae64 <_write_r>:
 801ae64:	b538      	push	{r3, r4, r5, lr}
 801ae66:	4c07      	ldr	r4, [pc, #28]	; (801ae84 <_write_r+0x20>)
 801ae68:	4605      	mov	r5, r0
 801ae6a:	4608      	mov	r0, r1
 801ae6c:	4611      	mov	r1, r2
 801ae6e:	2200      	movs	r2, #0
 801ae70:	6022      	str	r2, [r4, #0]
 801ae72:	461a      	mov	r2, r3
 801ae74:	f7e7 fff3 	bl	8002e5e <_write>
 801ae78:	1c43      	adds	r3, r0, #1
 801ae7a:	d102      	bne.n	801ae82 <_write_r+0x1e>
 801ae7c:	6823      	ldr	r3, [r4, #0]
 801ae7e:	b103      	cbz	r3, 801ae82 <_write_r+0x1e>
 801ae80:	602b      	str	r3, [r5, #0]
 801ae82:	bd38      	pop	{r3, r4, r5, pc}
 801ae84:	2000d668 	.word	0x2000d668

0801ae88 <_close_r>:
 801ae88:	b538      	push	{r3, r4, r5, lr}
 801ae8a:	4c06      	ldr	r4, [pc, #24]	; (801aea4 <_close_r+0x1c>)
 801ae8c:	2300      	movs	r3, #0
 801ae8e:	4605      	mov	r5, r0
 801ae90:	4608      	mov	r0, r1
 801ae92:	6023      	str	r3, [r4, #0]
 801ae94:	f7e7 ffff 	bl	8002e96 <_close>
 801ae98:	1c43      	adds	r3, r0, #1
 801ae9a:	d102      	bne.n	801aea2 <_close_r+0x1a>
 801ae9c:	6823      	ldr	r3, [r4, #0]
 801ae9e:	b103      	cbz	r3, 801aea2 <_close_r+0x1a>
 801aea0:	602b      	str	r3, [r5, #0]
 801aea2:	bd38      	pop	{r3, r4, r5, pc}
 801aea4:	2000d668 	.word	0x2000d668

0801aea8 <_fstat_r>:
 801aea8:	b538      	push	{r3, r4, r5, lr}
 801aeaa:	4c07      	ldr	r4, [pc, #28]	; (801aec8 <_fstat_r+0x20>)
 801aeac:	2300      	movs	r3, #0
 801aeae:	4605      	mov	r5, r0
 801aeb0:	4608      	mov	r0, r1
 801aeb2:	4611      	mov	r1, r2
 801aeb4:	6023      	str	r3, [r4, #0]
 801aeb6:	f7e7 fffa 	bl	8002eae <_fstat>
 801aeba:	1c43      	adds	r3, r0, #1
 801aebc:	d102      	bne.n	801aec4 <_fstat_r+0x1c>
 801aebe:	6823      	ldr	r3, [r4, #0]
 801aec0:	b103      	cbz	r3, 801aec4 <_fstat_r+0x1c>
 801aec2:	602b      	str	r3, [r5, #0]
 801aec4:	bd38      	pop	{r3, r4, r5, pc}
 801aec6:	bf00      	nop
 801aec8:	2000d668 	.word	0x2000d668

0801aecc <_isatty_r>:
 801aecc:	b538      	push	{r3, r4, r5, lr}
 801aece:	4c06      	ldr	r4, [pc, #24]	; (801aee8 <_isatty_r+0x1c>)
 801aed0:	2300      	movs	r3, #0
 801aed2:	4605      	mov	r5, r0
 801aed4:	4608      	mov	r0, r1
 801aed6:	6023      	str	r3, [r4, #0]
 801aed8:	f7e7 fff9 	bl	8002ece <_isatty>
 801aedc:	1c43      	adds	r3, r0, #1
 801aede:	d102      	bne.n	801aee6 <_isatty_r+0x1a>
 801aee0:	6823      	ldr	r3, [r4, #0]
 801aee2:	b103      	cbz	r3, 801aee6 <_isatty_r+0x1a>
 801aee4:	602b      	str	r3, [r5, #0]
 801aee6:	bd38      	pop	{r3, r4, r5, pc}
 801aee8:	2000d668 	.word	0x2000d668

0801aeec <_lseek_r>:
 801aeec:	b538      	push	{r3, r4, r5, lr}
 801aeee:	4c07      	ldr	r4, [pc, #28]	; (801af0c <_lseek_r+0x20>)
 801aef0:	4605      	mov	r5, r0
 801aef2:	4608      	mov	r0, r1
 801aef4:	4611      	mov	r1, r2
 801aef6:	2200      	movs	r2, #0
 801aef8:	6022      	str	r2, [r4, #0]
 801aefa:	461a      	mov	r2, r3
 801aefc:	f7e7 fff2 	bl	8002ee4 <_lseek>
 801af00:	1c43      	adds	r3, r0, #1
 801af02:	d102      	bne.n	801af0a <_lseek_r+0x1e>
 801af04:	6823      	ldr	r3, [r4, #0]
 801af06:	b103      	cbz	r3, 801af0a <_lseek_r+0x1e>
 801af08:	602b      	str	r3, [r5, #0]
 801af0a:	bd38      	pop	{r3, r4, r5, pc}
 801af0c:	2000d668 	.word	0x2000d668

0801af10 <__malloc_lock>:
 801af10:	4770      	bx	lr

0801af12 <__malloc_unlock>:
 801af12:	4770      	bx	lr

0801af14 <_read_r>:
 801af14:	b538      	push	{r3, r4, r5, lr}
 801af16:	4c07      	ldr	r4, [pc, #28]	; (801af34 <_read_r+0x20>)
 801af18:	4605      	mov	r5, r0
 801af1a:	4608      	mov	r0, r1
 801af1c:	4611      	mov	r1, r2
 801af1e:	2200      	movs	r2, #0
 801af20:	6022      	str	r2, [r4, #0]
 801af22:	461a      	mov	r2, r3
 801af24:	f7e7 ff7e 	bl	8002e24 <_read>
 801af28:	1c43      	adds	r3, r0, #1
 801af2a:	d102      	bne.n	801af32 <_read_r+0x1e>
 801af2c:	6823      	ldr	r3, [r4, #0]
 801af2e:	b103      	cbz	r3, 801af32 <_read_r+0x1e>
 801af30:	602b      	str	r3, [r5, #0]
 801af32:	bd38      	pop	{r3, r4, r5, pc}
 801af34:	2000d668 	.word	0x2000d668

0801af38 <floor>:
 801af38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801af3c:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801af40:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801af44:	2e13      	cmp	r6, #19
 801af46:	4602      	mov	r2, r0
 801af48:	460b      	mov	r3, r1
 801af4a:	460c      	mov	r4, r1
 801af4c:	4605      	mov	r5, r0
 801af4e:	4680      	mov	r8, r0
 801af50:	dc35      	bgt.n	801afbe <floor+0x86>
 801af52:	2e00      	cmp	r6, #0
 801af54:	da16      	bge.n	801af84 <floor+0x4c>
 801af56:	a334      	add	r3, pc, #208	; (adr r3, 801b028 <floor+0xf0>)
 801af58:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af5c:	f7e5 f99e 	bl	800029c <__adddf3>
 801af60:	2200      	movs	r2, #0
 801af62:	2300      	movs	r3, #0
 801af64:	f7e5 fde0 	bl	8000b28 <__aeabi_dcmpgt>
 801af68:	b148      	cbz	r0, 801af7e <floor+0x46>
 801af6a:	2c00      	cmp	r4, #0
 801af6c:	da59      	bge.n	801b022 <floor+0xea>
 801af6e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801af72:	4a2f      	ldr	r2, [pc, #188]	; (801b030 <floor+0xf8>)
 801af74:	432b      	orrs	r3, r5
 801af76:	2500      	movs	r5, #0
 801af78:	42ab      	cmp	r3, r5
 801af7a:	bf18      	it	ne
 801af7c:	4614      	movne	r4, r2
 801af7e:	4623      	mov	r3, r4
 801af80:	462a      	mov	r2, r5
 801af82:	e025      	b.n	801afd0 <floor+0x98>
 801af84:	4f2b      	ldr	r7, [pc, #172]	; (801b034 <floor+0xfc>)
 801af86:	4137      	asrs	r7, r6
 801af88:	ea01 0c07 	and.w	ip, r1, r7
 801af8c:	ea5c 0c00 	orrs.w	ip, ip, r0
 801af90:	d01e      	beq.n	801afd0 <floor+0x98>
 801af92:	a325      	add	r3, pc, #148	; (adr r3, 801b028 <floor+0xf0>)
 801af94:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af98:	f7e5 f980 	bl	800029c <__adddf3>
 801af9c:	2200      	movs	r2, #0
 801af9e:	2300      	movs	r3, #0
 801afa0:	f7e5 fdc2 	bl	8000b28 <__aeabi_dcmpgt>
 801afa4:	2800      	cmp	r0, #0
 801afa6:	d0ea      	beq.n	801af7e <floor+0x46>
 801afa8:	2c00      	cmp	r4, #0
 801afaa:	bfbe      	ittt	lt
 801afac:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801afb0:	fa43 f606 	asrlt.w	r6, r3, r6
 801afb4:	19a4      	addlt	r4, r4, r6
 801afb6:	ea24 0407 	bic.w	r4, r4, r7
 801afba:	2500      	movs	r5, #0
 801afbc:	e7df      	b.n	801af7e <floor+0x46>
 801afbe:	2e33      	cmp	r6, #51	; 0x33
 801afc0:	dd0a      	ble.n	801afd8 <floor+0xa0>
 801afc2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801afc6:	d103      	bne.n	801afd0 <floor+0x98>
 801afc8:	f7e5 f968 	bl	800029c <__adddf3>
 801afcc:	4602      	mov	r2, r0
 801afce:	460b      	mov	r3, r1
 801afd0:	4610      	mov	r0, r2
 801afd2:	4619      	mov	r1, r3
 801afd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801afd8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801afdc:	f04f 3cff 	mov.w	ip, #4294967295
 801afe0:	fa2c f707 	lsr.w	r7, ip, r7
 801afe4:	4207      	tst	r7, r0
 801afe6:	d0f3      	beq.n	801afd0 <floor+0x98>
 801afe8:	a30f      	add	r3, pc, #60	; (adr r3, 801b028 <floor+0xf0>)
 801afea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801afee:	f7e5 f955 	bl	800029c <__adddf3>
 801aff2:	2200      	movs	r2, #0
 801aff4:	2300      	movs	r3, #0
 801aff6:	f7e5 fd97 	bl	8000b28 <__aeabi_dcmpgt>
 801affa:	2800      	cmp	r0, #0
 801affc:	d0bf      	beq.n	801af7e <floor+0x46>
 801affe:	2c00      	cmp	r4, #0
 801b000:	da02      	bge.n	801b008 <floor+0xd0>
 801b002:	2e14      	cmp	r6, #20
 801b004:	d103      	bne.n	801b00e <floor+0xd6>
 801b006:	3401      	adds	r4, #1
 801b008:	ea25 0507 	bic.w	r5, r5, r7
 801b00c:	e7b7      	b.n	801af7e <floor+0x46>
 801b00e:	2301      	movs	r3, #1
 801b010:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801b014:	fa03 f606 	lsl.w	r6, r3, r6
 801b018:	4435      	add	r5, r6
 801b01a:	4545      	cmp	r5, r8
 801b01c:	bf38      	it	cc
 801b01e:	18e4      	addcc	r4, r4, r3
 801b020:	e7f2      	b.n	801b008 <floor+0xd0>
 801b022:	2500      	movs	r5, #0
 801b024:	462c      	mov	r4, r5
 801b026:	e7aa      	b.n	801af7e <floor+0x46>
 801b028:	8800759c 	.word	0x8800759c
 801b02c:	7e37e43c 	.word	0x7e37e43c
 801b030:	bff00000 	.word	0xbff00000
 801b034:	000fffff 	.word	0x000fffff

0801b038 <cosf>:
 801b038:	b507      	push	{r0, r1, r2, lr}
 801b03a:	4a1a      	ldr	r2, [pc, #104]	; (801b0a4 <cosf+0x6c>)
 801b03c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 801b040:	4293      	cmp	r3, r2
 801b042:	ee07 0a90 	vmov	s15, r0
 801b046:	dc03      	bgt.n	801b050 <cosf+0x18>
 801b048:	2100      	movs	r1, #0
 801b04a:	f000 ff79 	bl	801bf40 <__kernel_cosf>
 801b04e:	e006      	b.n	801b05e <cosf+0x26>
 801b050:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801b054:	db06      	blt.n	801b064 <cosf+0x2c>
 801b056:	ee77 7ae7 	vsub.f32	s15, s15, s15
 801b05a:	ee17 0a90 	vmov	r0, s15
 801b05e:	b003      	add	sp, #12
 801b060:	f85d fb04 	ldr.w	pc, [sp], #4
 801b064:	4669      	mov	r1, sp
 801b066:	f000 fe39 	bl	801bcdc <__ieee754_rem_pio2f>
 801b06a:	f000 0203 	and.w	r2, r0, #3
 801b06e:	2a01      	cmp	r2, #1
 801b070:	d005      	beq.n	801b07e <cosf+0x46>
 801b072:	2a02      	cmp	r2, #2
 801b074:	d00a      	beq.n	801b08c <cosf+0x54>
 801b076:	b972      	cbnz	r2, 801b096 <cosf+0x5e>
 801b078:	9901      	ldr	r1, [sp, #4]
 801b07a:	9800      	ldr	r0, [sp, #0]
 801b07c:	e7e5      	b.n	801b04a <cosf+0x12>
 801b07e:	9901      	ldr	r1, [sp, #4]
 801b080:	9800      	ldr	r0, [sp, #0]
 801b082:	f001 fa3f 	bl	801c504 <__kernel_sinf>
 801b086:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 801b08a:	e7e8      	b.n	801b05e <cosf+0x26>
 801b08c:	9901      	ldr	r1, [sp, #4]
 801b08e:	9800      	ldr	r0, [sp, #0]
 801b090:	f000 ff56 	bl	801bf40 <__kernel_cosf>
 801b094:	e7f7      	b.n	801b086 <cosf+0x4e>
 801b096:	2201      	movs	r2, #1
 801b098:	9901      	ldr	r1, [sp, #4]
 801b09a:	9800      	ldr	r0, [sp, #0]
 801b09c:	f001 fa32 	bl	801c504 <__kernel_sinf>
 801b0a0:	e7dd      	b.n	801b05e <cosf+0x26>
 801b0a2:	bf00      	nop
 801b0a4:	3f490fd8 	.word	0x3f490fd8

0801b0a8 <roundf>:
 801b0a8:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 801b0ac:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 801b0b0:	2a16      	cmp	r2, #22
 801b0b2:	ee07 0a90 	vmov	s15, r0
 801b0b6:	dc15      	bgt.n	801b0e4 <roundf+0x3c>
 801b0b8:	2a00      	cmp	r2, #0
 801b0ba:	da08      	bge.n	801b0ce <roundf+0x26>
 801b0bc:	3201      	adds	r2, #1
 801b0be:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 801b0c2:	d101      	bne.n	801b0c8 <roundf+0x20>
 801b0c4:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 801b0c8:	ee07 3a90 	vmov	s15, r3
 801b0cc:	e00e      	b.n	801b0ec <roundf+0x44>
 801b0ce:	4909      	ldr	r1, [pc, #36]	; (801b0f4 <roundf+0x4c>)
 801b0d0:	4111      	asrs	r1, r2
 801b0d2:	4208      	tst	r0, r1
 801b0d4:	d00a      	beq.n	801b0ec <roundf+0x44>
 801b0d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801b0da:	4113      	asrs	r3, r2
 801b0dc:	4403      	add	r3, r0
 801b0de:	ea23 0301 	bic.w	r3, r3, r1
 801b0e2:	e7f1      	b.n	801b0c8 <roundf+0x20>
 801b0e4:	2a80      	cmp	r2, #128	; 0x80
 801b0e6:	d101      	bne.n	801b0ec <roundf+0x44>
 801b0e8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801b0ec:	ee17 0a90 	vmov	r0, s15
 801b0f0:	4770      	bx	lr
 801b0f2:	bf00      	nop
 801b0f4:	007fffff 	.word	0x007fffff

0801b0f8 <sinf>:
 801b0f8:	b507      	push	{r0, r1, r2, lr}
 801b0fa:	4a1b      	ldr	r2, [pc, #108]	; (801b168 <sinf+0x70>)
 801b0fc:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 801b100:	4293      	cmp	r3, r2
 801b102:	ee07 0a90 	vmov	s15, r0
 801b106:	dc04      	bgt.n	801b112 <sinf+0x1a>
 801b108:	2200      	movs	r2, #0
 801b10a:	2100      	movs	r1, #0
 801b10c:	f001 f9fa 	bl	801c504 <__kernel_sinf>
 801b110:	e006      	b.n	801b120 <sinf+0x28>
 801b112:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801b116:	db06      	blt.n	801b126 <sinf+0x2e>
 801b118:	ee77 7ae7 	vsub.f32	s15, s15, s15
 801b11c:	ee17 0a90 	vmov	r0, s15
 801b120:	b003      	add	sp, #12
 801b122:	f85d fb04 	ldr.w	pc, [sp], #4
 801b126:	4669      	mov	r1, sp
 801b128:	f000 fdd8 	bl	801bcdc <__ieee754_rem_pio2f>
 801b12c:	f000 0003 	and.w	r0, r0, #3
 801b130:	2801      	cmp	r0, #1
 801b132:	d006      	beq.n	801b142 <sinf+0x4a>
 801b134:	2802      	cmp	r0, #2
 801b136:	d009      	beq.n	801b14c <sinf+0x54>
 801b138:	b980      	cbnz	r0, 801b15c <sinf+0x64>
 801b13a:	2201      	movs	r2, #1
 801b13c:	9901      	ldr	r1, [sp, #4]
 801b13e:	9800      	ldr	r0, [sp, #0]
 801b140:	e7e4      	b.n	801b10c <sinf+0x14>
 801b142:	9901      	ldr	r1, [sp, #4]
 801b144:	9800      	ldr	r0, [sp, #0]
 801b146:	f000 fefb 	bl	801bf40 <__kernel_cosf>
 801b14a:	e7e9      	b.n	801b120 <sinf+0x28>
 801b14c:	2201      	movs	r2, #1
 801b14e:	9901      	ldr	r1, [sp, #4]
 801b150:	9800      	ldr	r0, [sp, #0]
 801b152:	f001 f9d7 	bl	801c504 <__kernel_sinf>
 801b156:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 801b15a:	e7e1      	b.n	801b120 <sinf+0x28>
 801b15c:	9901      	ldr	r1, [sp, #4]
 801b15e:	9800      	ldr	r0, [sp, #0]
 801b160:	f000 feee 	bl	801bf40 <__kernel_cosf>
 801b164:	e7f7      	b.n	801b156 <sinf+0x5e>
 801b166:	bf00      	nop
 801b168:	3f490fd8 	.word	0x3f490fd8

0801b16c <tanf>:
 801b16c:	b507      	push	{r0, r1, r2, lr}
 801b16e:	4a11      	ldr	r2, [pc, #68]	; (801b1b4 <tanf+0x48>)
 801b170:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 801b174:	4293      	cmp	r3, r2
 801b176:	ee07 0a90 	vmov	s15, r0
 801b17a:	dc06      	bgt.n	801b18a <tanf+0x1e>
 801b17c:	2201      	movs	r2, #1
 801b17e:	2100      	movs	r1, #0
 801b180:	f001 fa0c 	bl	801c59c <__kernel_tanf>
 801b184:	ee07 0a90 	vmov	s15, r0
 801b188:	e004      	b.n	801b194 <tanf+0x28>
 801b18a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801b18e:	db06      	blt.n	801b19e <tanf+0x32>
 801b190:	ee77 7ae7 	vsub.f32	s15, s15, s15
 801b194:	ee17 0a90 	vmov	r0, s15
 801b198:	b003      	add	sp, #12
 801b19a:	f85d fb04 	ldr.w	pc, [sp], #4
 801b19e:	4669      	mov	r1, sp
 801b1a0:	f000 fd9c 	bl	801bcdc <__ieee754_rem_pio2f>
 801b1a4:	0042      	lsls	r2, r0, #1
 801b1a6:	f002 0202 	and.w	r2, r2, #2
 801b1aa:	f1c2 0201 	rsb	r2, r2, #1
 801b1ae:	9901      	ldr	r1, [sp, #4]
 801b1b0:	9800      	ldr	r0, [sp, #0]
 801b1b2:	e7e5      	b.n	801b180 <tanf+0x14>
 801b1b4:	3f490fda 	.word	0x3f490fda

0801b1b8 <asin>:
 801b1b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b1bc:	f8df 809c 	ldr.w	r8, [pc, #156]	; 801b25c <asin+0xa4>
 801b1c0:	b08b      	sub	sp, #44	; 0x2c
 801b1c2:	4604      	mov	r4, r0
 801b1c4:	460d      	mov	r5, r1
 801b1c6:	f000 f8fb 	bl	801b3c0 <__ieee754_asin>
 801b1ca:	f998 3000 	ldrsb.w	r3, [r8]
 801b1ce:	3301      	adds	r3, #1
 801b1d0:	4606      	mov	r6, r0
 801b1d2:	460f      	mov	r7, r1
 801b1d4:	d036      	beq.n	801b244 <asin+0x8c>
 801b1d6:	4622      	mov	r2, r4
 801b1d8:	462b      	mov	r3, r5
 801b1da:	4620      	mov	r0, r4
 801b1dc:	4629      	mov	r1, r5
 801b1de:	f7e5 fcad 	bl	8000b3c <__aeabi_dcmpun>
 801b1e2:	4681      	mov	r9, r0
 801b1e4:	2800      	cmp	r0, #0
 801b1e6:	d12d      	bne.n	801b244 <asin+0x8c>
 801b1e8:	4620      	mov	r0, r4
 801b1ea:	4629      	mov	r1, r5
 801b1ec:	f001 fc4c 	bl	801ca88 <fabs>
 801b1f0:	2200      	movs	r2, #0
 801b1f2:	4b17      	ldr	r3, [pc, #92]	; (801b250 <asin+0x98>)
 801b1f4:	f7e5 fc98 	bl	8000b28 <__aeabi_dcmpgt>
 801b1f8:	b320      	cbz	r0, 801b244 <asin+0x8c>
 801b1fa:	2301      	movs	r3, #1
 801b1fc:	9300      	str	r3, [sp, #0]
 801b1fe:	4815      	ldr	r0, [pc, #84]	; (801b254 <asin+0x9c>)
 801b200:	4b15      	ldr	r3, [pc, #84]	; (801b258 <asin+0xa0>)
 801b202:	9301      	str	r3, [sp, #4]
 801b204:	f8cd 9020 	str.w	r9, [sp, #32]
 801b208:	e9cd 4504 	strd	r4, r5, [sp, #16]
 801b20c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 801b210:	f001 fc40 	bl	801ca94 <nan>
 801b214:	f998 3000 	ldrsb.w	r3, [r8]
 801b218:	2b02      	cmp	r3, #2
 801b21a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801b21e:	d104      	bne.n	801b22a <asin+0x72>
 801b220:	f7fe fec8 	bl	8019fb4 <__errno>
 801b224:	2321      	movs	r3, #33	; 0x21
 801b226:	6003      	str	r3, [r0, #0]
 801b228:	e004      	b.n	801b234 <asin+0x7c>
 801b22a:	4668      	mov	r0, sp
 801b22c:	f001 fc30 	bl	801ca90 <matherr>
 801b230:	2800      	cmp	r0, #0
 801b232:	d0f5      	beq.n	801b220 <asin+0x68>
 801b234:	9b08      	ldr	r3, [sp, #32]
 801b236:	b11b      	cbz	r3, 801b240 <asin+0x88>
 801b238:	f7fe febc 	bl	8019fb4 <__errno>
 801b23c:	9b08      	ldr	r3, [sp, #32]
 801b23e:	6003      	str	r3, [r0, #0]
 801b240:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 801b244:	4630      	mov	r0, r6
 801b246:	4639      	mov	r1, r7
 801b248:	b00b      	add	sp, #44	; 0x2c
 801b24a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b24e:	bf00      	nop
 801b250:	3ff00000 	.word	0x3ff00000
 801b254:	0801d235 	.word	0x0801d235
 801b258:	0801d263 	.word	0x0801d263
 801b25c:	200013b0 	.word	0x200013b0

0801b260 <atan2>:
 801b260:	f000 baaa 	b.w	801b7b8 <__ieee754_atan2>

0801b264 <sqrt>:
 801b264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b268:	b08b      	sub	sp, #44	; 0x2c
 801b26a:	4604      	mov	r4, r0
 801b26c:	460d      	mov	r5, r1
 801b26e:	f000 fb89 	bl	801b984 <__ieee754_sqrt>
 801b272:	4b24      	ldr	r3, [pc, #144]	; (801b304 <sqrt+0xa0>)
 801b274:	f993 a000 	ldrsb.w	sl, [r3]
 801b278:	f1ba 3fff 	cmp.w	sl, #4294967295
 801b27c:	4680      	mov	r8, r0
 801b27e:	4689      	mov	r9, r1
 801b280:	d02b      	beq.n	801b2da <sqrt+0x76>
 801b282:	4622      	mov	r2, r4
 801b284:	462b      	mov	r3, r5
 801b286:	4620      	mov	r0, r4
 801b288:	4629      	mov	r1, r5
 801b28a:	f7e5 fc57 	bl	8000b3c <__aeabi_dcmpun>
 801b28e:	4683      	mov	fp, r0
 801b290:	bb18      	cbnz	r0, 801b2da <sqrt+0x76>
 801b292:	2600      	movs	r6, #0
 801b294:	2700      	movs	r7, #0
 801b296:	4632      	mov	r2, r6
 801b298:	463b      	mov	r3, r7
 801b29a:	4620      	mov	r0, r4
 801b29c:	4629      	mov	r1, r5
 801b29e:	f7e5 fc25 	bl	8000aec <__aeabi_dcmplt>
 801b2a2:	b1d0      	cbz	r0, 801b2da <sqrt+0x76>
 801b2a4:	2301      	movs	r3, #1
 801b2a6:	9300      	str	r3, [sp, #0]
 801b2a8:	4b17      	ldr	r3, [pc, #92]	; (801b308 <sqrt+0xa4>)
 801b2aa:	9301      	str	r3, [sp, #4]
 801b2ac:	f8cd b020 	str.w	fp, [sp, #32]
 801b2b0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 801b2b4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 801b2b8:	f1ba 0f00 	cmp.w	sl, #0
 801b2bc:	d112      	bne.n	801b2e4 <sqrt+0x80>
 801b2be:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801b2c2:	4668      	mov	r0, sp
 801b2c4:	f001 fbe4 	bl	801ca90 <matherr>
 801b2c8:	b1b8      	cbz	r0, 801b2fa <sqrt+0x96>
 801b2ca:	9b08      	ldr	r3, [sp, #32]
 801b2cc:	b11b      	cbz	r3, 801b2d6 <sqrt+0x72>
 801b2ce:	f7fe fe71 	bl	8019fb4 <__errno>
 801b2d2:	9b08      	ldr	r3, [sp, #32]
 801b2d4:	6003      	str	r3, [r0, #0]
 801b2d6:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 801b2da:	4640      	mov	r0, r8
 801b2dc:	4649      	mov	r1, r9
 801b2de:	b00b      	add	sp, #44	; 0x2c
 801b2e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b2e4:	4632      	mov	r2, r6
 801b2e6:	463b      	mov	r3, r7
 801b2e8:	4630      	mov	r0, r6
 801b2ea:	4639      	mov	r1, r7
 801b2ec:	f7e5 fab6 	bl	800085c <__aeabi_ddiv>
 801b2f0:	f1ba 0f02 	cmp.w	sl, #2
 801b2f4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801b2f8:	d1e3      	bne.n	801b2c2 <sqrt+0x5e>
 801b2fa:	f7fe fe5b 	bl	8019fb4 <__errno>
 801b2fe:	2321      	movs	r3, #33	; 0x21
 801b300:	6003      	str	r3, [r0, #0]
 801b302:	e7e2      	b.n	801b2ca <sqrt+0x66>
 801b304:	200013b0 	.word	0x200013b0
 801b308:	0801d268 	.word	0x0801d268

0801b30c <acosf>:
 801b30c:	b530      	push	{r4, r5, lr}
 801b30e:	ed2d 8b02 	vpush	{d8}
 801b312:	4d27      	ldr	r5, [pc, #156]	; (801b3b0 <acosf+0xa4>)
 801b314:	b08b      	sub	sp, #44	; 0x2c
 801b316:	ee08 0a10 	vmov	s16, r0
 801b31a:	f000 fbdf 	bl	801badc <__ieee754_acosf>
 801b31e:	f995 3000 	ldrsb.w	r3, [r5]
 801b322:	3301      	adds	r3, #1
 801b324:	4604      	mov	r4, r0
 801b326:	d03d      	beq.n	801b3a4 <acosf+0x98>
 801b328:	eeb4 8a48 	vcmp.f32	s16, s16
 801b32c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b330:	d638      	bvs.n	801b3a4 <acosf+0x98>
 801b332:	ee18 0a10 	vmov	r0, s16
 801b336:	f001 fbb3 	bl	801caa0 <fabsf>
 801b33a:	ee07 0a10 	vmov	s14, r0
 801b33e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801b342:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b34a:	dd2b      	ble.n	801b3a4 <acosf+0x98>
 801b34c:	2301      	movs	r3, #1
 801b34e:	9300      	str	r3, [sp, #0]
 801b350:	4b18      	ldr	r3, [pc, #96]	; (801b3b4 <acosf+0xa8>)
 801b352:	9301      	str	r3, [sp, #4]
 801b354:	ee18 0a10 	vmov	r0, s16
 801b358:	2300      	movs	r3, #0
 801b35a:	9308      	str	r3, [sp, #32]
 801b35c:	f7e5 f8fc 	bl	8000558 <__aeabi_f2d>
 801b360:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b364:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b368:	4813      	ldr	r0, [pc, #76]	; (801b3b8 <acosf+0xac>)
 801b36a:	f001 fb93 	bl	801ca94 <nan>
 801b36e:	f995 3000 	ldrsb.w	r3, [r5]
 801b372:	2b02      	cmp	r3, #2
 801b374:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801b378:	d104      	bne.n	801b384 <acosf+0x78>
 801b37a:	f7fe fe1b 	bl	8019fb4 <__errno>
 801b37e:	2321      	movs	r3, #33	; 0x21
 801b380:	6003      	str	r3, [r0, #0]
 801b382:	e004      	b.n	801b38e <acosf+0x82>
 801b384:	4668      	mov	r0, sp
 801b386:	f001 fb83 	bl	801ca90 <matherr>
 801b38a:	2800      	cmp	r0, #0
 801b38c:	d0f5      	beq.n	801b37a <acosf+0x6e>
 801b38e:	9b08      	ldr	r3, [sp, #32]
 801b390:	b11b      	cbz	r3, 801b39a <acosf+0x8e>
 801b392:	f7fe fe0f 	bl	8019fb4 <__errno>
 801b396:	9b08      	ldr	r3, [sp, #32]
 801b398:	6003      	str	r3, [r0, #0]
 801b39a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801b39e:	f7e5 fc0b 	bl	8000bb8 <__aeabi_d2f>
 801b3a2:	4604      	mov	r4, r0
 801b3a4:	4620      	mov	r0, r4
 801b3a6:	b00b      	add	sp, #44	; 0x2c
 801b3a8:	ecbd 8b02 	vpop	{d8}
 801b3ac:	bd30      	pop	{r4, r5, pc}
 801b3ae:	bf00      	nop
 801b3b0:	200013b0 	.word	0x200013b0
 801b3b4:	0801d26d 	.word	0x0801d26d
 801b3b8:	0801d235 	.word	0x0801d235
 801b3bc:	00000000 	.word	0x00000000

0801b3c0 <__ieee754_asin>:
 801b3c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b3c4:	4bc4      	ldr	r3, [pc, #784]	; (801b6d8 <__ieee754_asin+0x318>)
 801b3c6:	b087      	sub	sp, #28
 801b3c8:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 801b3cc:	429f      	cmp	r7, r3
 801b3ce:	4604      	mov	r4, r0
 801b3d0:	460d      	mov	r5, r1
 801b3d2:	9101      	str	r1, [sp, #4]
 801b3d4:	dd2a      	ble.n	801b42c <__ieee754_asin+0x6c>
 801b3d6:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 801b3da:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 801b3de:	4603      	mov	r3, r0
 801b3e0:	433b      	orrs	r3, r7
 801b3e2:	d114      	bne.n	801b40e <__ieee754_asin+0x4e>
 801b3e4:	a3a2      	add	r3, pc, #648	; (adr r3, 801b670 <__ieee754_asin+0x2b0>)
 801b3e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b3ea:	f7e5 f90d 	bl	8000608 <__aeabi_dmul>
 801b3ee:	a3a2      	add	r3, pc, #648	; (adr r3, 801b678 <__ieee754_asin+0x2b8>)
 801b3f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b3f4:	4606      	mov	r6, r0
 801b3f6:	460f      	mov	r7, r1
 801b3f8:	4620      	mov	r0, r4
 801b3fa:	4629      	mov	r1, r5
 801b3fc:	f7e5 f904 	bl	8000608 <__aeabi_dmul>
 801b400:	4602      	mov	r2, r0
 801b402:	460b      	mov	r3, r1
 801b404:	4630      	mov	r0, r6
 801b406:	4639      	mov	r1, r7
 801b408:	f7e4 ff48 	bl	800029c <__adddf3>
 801b40c:	e007      	b.n	801b41e <__ieee754_asin+0x5e>
 801b40e:	4602      	mov	r2, r0
 801b410:	460b      	mov	r3, r1
 801b412:	f7e4 ff41 	bl	8000298 <__aeabi_dsub>
 801b416:	4602      	mov	r2, r0
 801b418:	460b      	mov	r3, r1
 801b41a:	f7e5 fa1f 	bl	800085c <__aeabi_ddiv>
 801b41e:	4604      	mov	r4, r0
 801b420:	460d      	mov	r5, r1
 801b422:	4620      	mov	r0, r4
 801b424:	4629      	mov	r1, r5
 801b426:	b007      	add	sp, #28
 801b428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b42c:	4bab      	ldr	r3, [pc, #684]	; (801b6dc <__ieee754_asin+0x31c>)
 801b42e:	429f      	cmp	r7, r3
 801b430:	dc0e      	bgt.n	801b450 <__ieee754_asin+0x90>
 801b432:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 801b436:	f280 80ab 	bge.w	801b590 <__ieee754_asin+0x1d0>
 801b43a:	a391      	add	r3, pc, #580	; (adr r3, 801b680 <__ieee754_asin+0x2c0>)
 801b43c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b440:	f7e4 ff2c 	bl	800029c <__adddf3>
 801b444:	2200      	movs	r2, #0
 801b446:	4ba6      	ldr	r3, [pc, #664]	; (801b6e0 <__ieee754_asin+0x320>)
 801b448:	f7e5 fb6e 	bl	8000b28 <__aeabi_dcmpgt>
 801b44c:	2800      	cmp	r0, #0
 801b44e:	d1e8      	bne.n	801b422 <__ieee754_asin+0x62>
 801b450:	4620      	mov	r0, r4
 801b452:	4629      	mov	r1, r5
 801b454:	f001 fb18 	bl	801ca88 <fabs>
 801b458:	4602      	mov	r2, r0
 801b45a:	460b      	mov	r3, r1
 801b45c:	2000      	movs	r0, #0
 801b45e:	49a0      	ldr	r1, [pc, #640]	; (801b6e0 <__ieee754_asin+0x320>)
 801b460:	f7e4 ff1a 	bl	8000298 <__aeabi_dsub>
 801b464:	2200      	movs	r2, #0
 801b466:	4b9f      	ldr	r3, [pc, #636]	; (801b6e4 <__ieee754_asin+0x324>)
 801b468:	f7e5 f8ce 	bl	8000608 <__aeabi_dmul>
 801b46c:	a386      	add	r3, pc, #536	; (adr r3, 801b688 <__ieee754_asin+0x2c8>)
 801b46e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b472:	4604      	mov	r4, r0
 801b474:	460d      	mov	r5, r1
 801b476:	f7e5 f8c7 	bl	8000608 <__aeabi_dmul>
 801b47a:	a385      	add	r3, pc, #532	; (adr r3, 801b690 <__ieee754_asin+0x2d0>)
 801b47c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b480:	f7e4 ff0c 	bl	800029c <__adddf3>
 801b484:	4622      	mov	r2, r4
 801b486:	462b      	mov	r3, r5
 801b488:	f7e5 f8be 	bl	8000608 <__aeabi_dmul>
 801b48c:	a382      	add	r3, pc, #520	; (adr r3, 801b698 <__ieee754_asin+0x2d8>)
 801b48e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b492:	f7e4 ff01 	bl	8000298 <__aeabi_dsub>
 801b496:	4622      	mov	r2, r4
 801b498:	462b      	mov	r3, r5
 801b49a:	f7e5 f8b5 	bl	8000608 <__aeabi_dmul>
 801b49e:	a380      	add	r3, pc, #512	; (adr r3, 801b6a0 <__ieee754_asin+0x2e0>)
 801b4a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b4a4:	f7e4 fefa 	bl	800029c <__adddf3>
 801b4a8:	4622      	mov	r2, r4
 801b4aa:	462b      	mov	r3, r5
 801b4ac:	f7e5 f8ac 	bl	8000608 <__aeabi_dmul>
 801b4b0:	a37d      	add	r3, pc, #500	; (adr r3, 801b6a8 <__ieee754_asin+0x2e8>)
 801b4b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b4b6:	f7e4 feef 	bl	8000298 <__aeabi_dsub>
 801b4ba:	4622      	mov	r2, r4
 801b4bc:	462b      	mov	r3, r5
 801b4be:	f7e5 f8a3 	bl	8000608 <__aeabi_dmul>
 801b4c2:	a37b      	add	r3, pc, #492	; (adr r3, 801b6b0 <__ieee754_asin+0x2f0>)
 801b4c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b4c8:	f7e4 fee8 	bl	800029c <__adddf3>
 801b4cc:	4622      	mov	r2, r4
 801b4ce:	462b      	mov	r3, r5
 801b4d0:	f7e5 f89a 	bl	8000608 <__aeabi_dmul>
 801b4d4:	a378      	add	r3, pc, #480	; (adr r3, 801b6b8 <__ieee754_asin+0x2f8>)
 801b4d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b4da:	4680      	mov	r8, r0
 801b4dc:	4689      	mov	r9, r1
 801b4de:	4620      	mov	r0, r4
 801b4e0:	4629      	mov	r1, r5
 801b4e2:	f7e5 f891 	bl	8000608 <__aeabi_dmul>
 801b4e6:	a376      	add	r3, pc, #472	; (adr r3, 801b6c0 <__ieee754_asin+0x300>)
 801b4e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b4ec:	f7e4 fed4 	bl	8000298 <__aeabi_dsub>
 801b4f0:	4622      	mov	r2, r4
 801b4f2:	462b      	mov	r3, r5
 801b4f4:	f7e5 f888 	bl	8000608 <__aeabi_dmul>
 801b4f8:	a373      	add	r3, pc, #460	; (adr r3, 801b6c8 <__ieee754_asin+0x308>)
 801b4fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b4fe:	f7e4 fecd 	bl	800029c <__adddf3>
 801b502:	4622      	mov	r2, r4
 801b504:	462b      	mov	r3, r5
 801b506:	f7e5 f87f 	bl	8000608 <__aeabi_dmul>
 801b50a:	a371      	add	r3, pc, #452	; (adr r3, 801b6d0 <__ieee754_asin+0x310>)
 801b50c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b510:	f7e4 fec2 	bl	8000298 <__aeabi_dsub>
 801b514:	4622      	mov	r2, r4
 801b516:	462b      	mov	r3, r5
 801b518:	f7e5 f876 	bl	8000608 <__aeabi_dmul>
 801b51c:	4b70      	ldr	r3, [pc, #448]	; (801b6e0 <__ieee754_asin+0x320>)
 801b51e:	2200      	movs	r2, #0
 801b520:	f7e4 febc 	bl	800029c <__adddf3>
 801b524:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b528:	4620      	mov	r0, r4
 801b52a:	4629      	mov	r1, r5
 801b52c:	f000 fa2a 	bl	801b984 <__ieee754_sqrt>
 801b530:	4b6d      	ldr	r3, [pc, #436]	; (801b6e8 <__ieee754_asin+0x328>)
 801b532:	429f      	cmp	r7, r3
 801b534:	4682      	mov	sl, r0
 801b536:	468b      	mov	fp, r1
 801b538:	f340 80d8 	ble.w	801b6ec <__ieee754_asin+0x32c>
 801b53c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801b540:	4640      	mov	r0, r8
 801b542:	4649      	mov	r1, r9
 801b544:	f7e5 f98a 	bl	800085c <__aeabi_ddiv>
 801b548:	4652      	mov	r2, sl
 801b54a:	465b      	mov	r3, fp
 801b54c:	f7e5 f85c 	bl	8000608 <__aeabi_dmul>
 801b550:	4652      	mov	r2, sl
 801b552:	465b      	mov	r3, fp
 801b554:	f7e4 fea2 	bl	800029c <__adddf3>
 801b558:	4602      	mov	r2, r0
 801b55a:	460b      	mov	r3, r1
 801b55c:	f7e4 fe9e 	bl	800029c <__adddf3>
 801b560:	a345      	add	r3, pc, #276	; (adr r3, 801b678 <__ieee754_asin+0x2b8>)
 801b562:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b566:	f7e4 fe97 	bl	8000298 <__aeabi_dsub>
 801b56a:	4602      	mov	r2, r0
 801b56c:	460b      	mov	r3, r1
 801b56e:	a140      	add	r1, pc, #256	; (adr r1, 801b670 <__ieee754_asin+0x2b0>)
 801b570:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b574:	f7e4 fe90 	bl	8000298 <__aeabi_dsub>
 801b578:	9b01      	ldr	r3, [sp, #4]
 801b57a:	2b00      	cmp	r3, #0
 801b57c:	bfdc      	itt	le
 801b57e:	4602      	movle	r2, r0
 801b580:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 801b584:	4604      	mov	r4, r0
 801b586:	460d      	mov	r5, r1
 801b588:	bfdc      	itt	le
 801b58a:	4614      	movle	r4, r2
 801b58c:	461d      	movle	r5, r3
 801b58e:	e748      	b.n	801b422 <__ieee754_asin+0x62>
 801b590:	4602      	mov	r2, r0
 801b592:	460b      	mov	r3, r1
 801b594:	f7e5 f838 	bl	8000608 <__aeabi_dmul>
 801b598:	a33b      	add	r3, pc, #236	; (adr r3, 801b688 <__ieee754_asin+0x2c8>)
 801b59a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b59e:	4606      	mov	r6, r0
 801b5a0:	460f      	mov	r7, r1
 801b5a2:	f7e5 f831 	bl	8000608 <__aeabi_dmul>
 801b5a6:	a33a      	add	r3, pc, #232	; (adr r3, 801b690 <__ieee754_asin+0x2d0>)
 801b5a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b5ac:	f7e4 fe76 	bl	800029c <__adddf3>
 801b5b0:	4632      	mov	r2, r6
 801b5b2:	463b      	mov	r3, r7
 801b5b4:	f7e5 f828 	bl	8000608 <__aeabi_dmul>
 801b5b8:	a337      	add	r3, pc, #220	; (adr r3, 801b698 <__ieee754_asin+0x2d8>)
 801b5ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b5be:	f7e4 fe6b 	bl	8000298 <__aeabi_dsub>
 801b5c2:	4632      	mov	r2, r6
 801b5c4:	463b      	mov	r3, r7
 801b5c6:	f7e5 f81f 	bl	8000608 <__aeabi_dmul>
 801b5ca:	a335      	add	r3, pc, #212	; (adr r3, 801b6a0 <__ieee754_asin+0x2e0>)
 801b5cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b5d0:	f7e4 fe64 	bl	800029c <__adddf3>
 801b5d4:	4632      	mov	r2, r6
 801b5d6:	463b      	mov	r3, r7
 801b5d8:	f7e5 f816 	bl	8000608 <__aeabi_dmul>
 801b5dc:	a332      	add	r3, pc, #200	; (adr r3, 801b6a8 <__ieee754_asin+0x2e8>)
 801b5de:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b5e2:	f7e4 fe59 	bl	8000298 <__aeabi_dsub>
 801b5e6:	4632      	mov	r2, r6
 801b5e8:	463b      	mov	r3, r7
 801b5ea:	f7e5 f80d 	bl	8000608 <__aeabi_dmul>
 801b5ee:	a330      	add	r3, pc, #192	; (adr r3, 801b6b0 <__ieee754_asin+0x2f0>)
 801b5f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b5f4:	f7e4 fe52 	bl	800029c <__adddf3>
 801b5f8:	4632      	mov	r2, r6
 801b5fa:	463b      	mov	r3, r7
 801b5fc:	f7e5 f804 	bl	8000608 <__aeabi_dmul>
 801b600:	a32d      	add	r3, pc, #180	; (adr r3, 801b6b8 <__ieee754_asin+0x2f8>)
 801b602:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b606:	4680      	mov	r8, r0
 801b608:	4689      	mov	r9, r1
 801b60a:	4630      	mov	r0, r6
 801b60c:	4639      	mov	r1, r7
 801b60e:	f7e4 fffb 	bl	8000608 <__aeabi_dmul>
 801b612:	a32b      	add	r3, pc, #172	; (adr r3, 801b6c0 <__ieee754_asin+0x300>)
 801b614:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b618:	f7e4 fe3e 	bl	8000298 <__aeabi_dsub>
 801b61c:	4632      	mov	r2, r6
 801b61e:	463b      	mov	r3, r7
 801b620:	f7e4 fff2 	bl	8000608 <__aeabi_dmul>
 801b624:	a328      	add	r3, pc, #160	; (adr r3, 801b6c8 <__ieee754_asin+0x308>)
 801b626:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b62a:	f7e4 fe37 	bl	800029c <__adddf3>
 801b62e:	4632      	mov	r2, r6
 801b630:	463b      	mov	r3, r7
 801b632:	f7e4 ffe9 	bl	8000608 <__aeabi_dmul>
 801b636:	a326      	add	r3, pc, #152	; (adr r3, 801b6d0 <__ieee754_asin+0x310>)
 801b638:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b63c:	f7e4 fe2c 	bl	8000298 <__aeabi_dsub>
 801b640:	4632      	mov	r2, r6
 801b642:	463b      	mov	r3, r7
 801b644:	f7e4 ffe0 	bl	8000608 <__aeabi_dmul>
 801b648:	2200      	movs	r2, #0
 801b64a:	4b25      	ldr	r3, [pc, #148]	; (801b6e0 <__ieee754_asin+0x320>)
 801b64c:	f7e4 fe26 	bl	800029c <__adddf3>
 801b650:	4602      	mov	r2, r0
 801b652:	460b      	mov	r3, r1
 801b654:	4640      	mov	r0, r8
 801b656:	4649      	mov	r1, r9
 801b658:	f7e5 f900 	bl	800085c <__aeabi_ddiv>
 801b65c:	4622      	mov	r2, r4
 801b65e:	462b      	mov	r3, r5
 801b660:	f7e4 ffd2 	bl	8000608 <__aeabi_dmul>
 801b664:	4602      	mov	r2, r0
 801b666:	460b      	mov	r3, r1
 801b668:	4620      	mov	r0, r4
 801b66a:	4629      	mov	r1, r5
 801b66c:	e6cc      	b.n	801b408 <__ieee754_asin+0x48>
 801b66e:	bf00      	nop
 801b670:	54442d18 	.word	0x54442d18
 801b674:	3ff921fb 	.word	0x3ff921fb
 801b678:	33145c07 	.word	0x33145c07
 801b67c:	3c91a626 	.word	0x3c91a626
 801b680:	8800759c 	.word	0x8800759c
 801b684:	7e37e43c 	.word	0x7e37e43c
 801b688:	0dfdf709 	.word	0x0dfdf709
 801b68c:	3f023de1 	.word	0x3f023de1
 801b690:	7501b288 	.word	0x7501b288
 801b694:	3f49efe0 	.word	0x3f49efe0
 801b698:	b5688f3b 	.word	0xb5688f3b
 801b69c:	3fa48228 	.word	0x3fa48228
 801b6a0:	0e884455 	.word	0x0e884455
 801b6a4:	3fc9c155 	.word	0x3fc9c155
 801b6a8:	03eb6f7d 	.word	0x03eb6f7d
 801b6ac:	3fd4d612 	.word	0x3fd4d612
 801b6b0:	55555555 	.word	0x55555555
 801b6b4:	3fc55555 	.word	0x3fc55555
 801b6b8:	b12e9282 	.word	0xb12e9282
 801b6bc:	3fb3b8c5 	.word	0x3fb3b8c5
 801b6c0:	1b8d0159 	.word	0x1b8d0159
 801b6c4:	3fe6066c 	.word	0x3fe6066c
 801b6c8:	9c598ac8 	.word	0x9c598ac8
 801b6cc:	40002ae5 	.word	0x40002ae5
 801b6d0:	1c8a2d4b 	.word	0x1c8a2d4b
 801b6d4:	40033a27 	.word	0x40033a27
 801b6d8:	3fefffff 	.word	0x3fefffff
 801b6dc:	3fdfffff 	.word	0x3fdfffff
 801b6e0:	3ff00000 	.word	0x3ff00000
 801b6e4:	3fe00000 	.word	0x3fe00000
 801b6e8:	3fef3332 	.word	0x3fef3332
 801b6ec:	4602      	mov	r2, r0
 801b6ee:	460b      	mov	r3, r1
 801b6f0:	460f      	mov	r7, r1
 801b6f2:	f7e4 fdd3 	bl	800029c <__adddf3>
 801b6f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801b6fa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b6fe:	4640      	mov	r0, r8
 801b700:	4649      	mov	r1, r9
 801b702:	f7e5 f8ab 	bl	800085c <__aeabi_ddiv>
 801b706:	4602      	mov	r2, r0
 801b708:	460b      	mov	r3, r1
 801b70a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801b70e:	f7e4 ff7b 	bl	8000608 <__aeabi_dmul>
 801b712:	2600      	movs	r6, #0
 801b714:	4680      	mov	r8, r0
 801b716:	4689      	mov	r9, r1
 801b718:	4632      	mov	r2, r6
 801b71a:	465b      	mov	r3, fp
 801b71c:	4630      	mov	r0, r6
 801b71e:	4659      	mov	r1, fp
 801b720:	f7e4 ff72 	bl	8000608 <__aeabi_dmul>
 801b724:	4602      	mov	r2, r0
 801b726:	460b      	mov	r3, r1
 801b728:	4620      	mov	r0, r4
 801b72a:	4629      	mov	r1, r5
 801b72c:	f7e4 fdb4 	bl	8000298 <__aeabi_dsub>
 801b730:	4632      	mov	r2, r6
 801b732:	4604      	mov	r4, r0
 801b734:	460d      	mov	r5, r1
 801b736:	465b      	mov	r3, fp
 801b738:	4650      	mov	r0, sl
 801b73a:	4659      	mov	r1, fp
 801b73c:	f7e4 fdae 	bl	800029c <__adddf3>
 801b740:	4602      	mov	r2, r0
 801b742:	460b      	mov	r3, r1
 801b744:	4620      	mov	r0, r4
 801b746:	4629      	mov	r1, r5
 801b748:	f7e5 f888 	bl	800085c <__aeabi_ddiv>
 801b74c:	4602      	mov	r2, r0
 801b74e:	460b      	mov	r3, r1
 801b750:	f7e4 fda4 	bl	800029c <__adddf3>
 801b754:	4602      	mov	r2, r0
 801b756:	460b      	mov	r3, r1
 801b758:	a113      	add	r1, pc, #76	; (adr r1, 801b7a8 <__ieee754_asin+0x3e8>)
 801b75a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b75e:	f7e4 fd9b 	bl	8000298 <__aeabi_dsub>
 801b762:	4602      	mov	r2, r0
 801b764:	460b      	mov	r3, r1
 801b766:	4640      	mov	r0, r8
 801b768:	4649      	mov	r1, r9
 801b76a:	f7e4 fd95 	bl	8000298 <__aeabi_dsub>
 801b76e:	4632      	mov	r2, r6
 801b770:	4604      	mov	r4, r0
 801b772:	460d      	mov	r5, r1
 801b774:	465b      	mov	r3, fp
 801b776:	4630      	mov	r0, r6
 801b778:	4639      	mov	r1, r7
 801b77a:	f7e4 fd8f 	bl	800029c <__adddf3>
 801b77e:	4602      	mov	r2, r0
 801b780:	460b      	mov	r3, r1
 801b782:	a10b      	add	r1, pc, #44	; (adr r1, 801b7b0 <__ieee754_asin+0x3f0>)
 801b784:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b788:	f7e4 fd86 	bl	8000298 <__aeabi_dsub>
 801b78c:	4602      	mov	r2, r0
 801b78e:	460b      	mov	r3, r1
 801b790:	4620      	mov	r0, r4
 801b792:	4629      	mov	r1, r5
 801b794:	f7e4 fd80 	bl	8000298 <__aeabi_dsub>
 801b798:	4602      	mov	r2, r0
 801b79a:	460b      	mov	r3, r1
 801b79c:	a104      	add	r1, pc, #16	; (adr r1, 801b7b0 <__ieee754_asin+0x3f0>)
 801b79e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b7a2:	e6e7      	b.n	801b574 <__ieee754_asin+0x1b4>
 801b7a4:	f3af 8000 	nop.w
 801b7a8:	33145c07 	.word	0x33145c07
 801b7ac:	3c91a626 	.word	0x3c91a626
 801b7b0:	54442d18 	.word	0x54442d18
 801b7b4:	3fe921fb 	.word	0x3fe921fb

0801b7b8 <__ieee754_atan2>:
 801b7b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b7bc:	4690      	mov	r8, r2
 801b7be:	4699      	mov	r9, r3
 801b7c0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801b7c4:	461f      	mov	r7, r3
 801b7c6:	f1c8 0300 	rsb	r3, r8, #0
 801b7ca:	ea43 0308 	orr.w	r3, r3, r8
 801b7ce:	f8df e1b0 	ldr.w	lr, [pc, #432]	; 801b980 <__ieee754_atan2+0x1c8>
 801b7d2:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801b7d6:	4573      	cmp	r3, lr
 801b7d8:	4604      	mov	r4, r0
 801b7da:	460d      	mov	r5, r1
 801b7dc:	d808      	bhi.n	801b7f0 <__ieee754_atan2+0x38>
 801b7de:	4246      	negs	r6, r0
 801b7e0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801b7e4:	4306      	orrs	r6, r0
 801b7e6:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 801b7ea:	4576      	cmp	r6, lr
 801b7ec:	468c      	mov	ip, r1
 801b7ee:	d908      	bls.n	801b802 <__ieee754_atan2+0x4a>
 801b7f0:	4642      	mov	r2, r8
 801b7f2:	464b      	mov	r3, r9
 801b7f4:	4620      	mov	r0, r4
 801b7f6:	4629      	mov	r1, r5
 801b7f8:	f7e4 fd50 	bl	800029c <__adddf3>
 801b7fc:	4604      	mov	r4, r0
 801b7fe:	460d      	mov	r5, r1
 801b800:	e031      	b.n	801b866 <__ieee754_atan2+0xae>
 801b802:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 801b806:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 801b80a:	ea56 0608 	orrs.w	r6, r6, r8
 801b80e:	d103      	bne.n	801b818 <__ieee754_atan2+0x60>
 801b810:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b814:	f000 bfa8 	b.w	801c768 <atan>
 801b818:	17be      	asrs	r6, r7, #30
 801b81a:	f006 0602 	and.w	r6, r6, #2
 801b81e:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 801b822:	ea53 0100 	orrs.w	r1, r3, r0
 801b826:	d107      	bne.n	801b838 <__ieee754_atan2+0x80>
 801b828:	2e02      	cmp	r6, #2
 801b82a:	d07a      	beq.n	801b922 <__ieee754_atan2+0x16a>
 801b82c:	2e03      	cmp	r6, #3
 801b82e:	d11a      	bne.n	801b866 <__ieee754_atan2+0xae>
 801b830:	a541      	add	r5, pc, #260	; (adr r5, 801b938 <__ieee754_atan2+0x180>)
 801b832:	e9d5 4500 	ldrd	r4, r5, [r5]
 801b836:	e016      	b.n	801b866 <__ieee754_atan2+0xae>
 801b838:	ea52 0108 	orrs.w	r1, r2, r8
 801b83c:	d106      	bne.n	801b84c <__ieee754_atan2+0x94>
 801b83e:	f1bc 0f00 	cmp.w	ip, #0
 801b842:	da72      	bge.n	801b92a <__ieee754_atan2+0x172>
 801b844:	a53e      	add	r5, pc, #248	; (adr r5, 801b940 <__ieee754_atan2+0x188>)
 801b846:	e9d5 4500 	ldrd	r4, r5, [r5]
 801b84a:	e00c      	b.n	801b866 <__ieee754_atan2+0xae>
 801b84c:	4572      	cmp	r2, lr
 801b84e:	d123      	bne.n	801b898 <__ieee754_atan2+0xe0>
 801b850:	4293      	cmp	r3, r2
 801b852:	d114      	bne.n	801b87e <__ieee754_atan2+0xc6>
 801b854:	2e02      	cmp	r6, #2
 801b856:	d00a      	beq.n	801b86e <__ieee754_atan2+0xb6>
 801b858:	2e03      	cmp	r6, #3
 801b85a:	d00c      	beq.n	801b876 <__ieee754_atan2+0xbe>
 801b85c:	2e01      	cmp	r6, #1
 801b85e:	d15c      	bne.n	801b91a <__ieee754_atan2+0x162>
 801b860:	a539      	add	r5, pc, #228	; (adr r5, 801b948 <__ieee754_atan2+0x190>)
 801b862:	e9d5 4500 	ldrd	r4, r5, [r5]
 801b866:	4620      	mov	r0, r4
 801b868:	4629      	mov	r1, r5
 801b86a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b86e:	a538      	add	r5, pc, #224	; (adr r5, 801b950 <__ieee754_atan2+0x198>)
 801b870:	e9d5 4500 	ldrd	r4, r5, [r5]
 801b874:	e7f7      	b.n	801b866 <__ieee754_atan2+0xae>
 801b876:	a538      	add	r5, pc, #224	; (adr r5, 801b958 <__ieee754_atan2+0x1a0>)
 801b878:	e9d5 4500 	ldrd	r4, r5, [r5]
 801b87c:	e7f3      	b.n	801b866 <__ieee754_atan2+0xae>
 801b87e:	2e02      	cmp	r6, #2
 801b880:	d04f      	beq.n	801b922 <__ieee754_atan2+0x16a>
 801b882:	2e03      	cmp	r6, #3
 801b884:	d0d4      	beq.n	801b830 <__ieee754_atan2+0x78>
 801b886:	2e01      	cmp	r6, #1
 801b888:	f04f 0400 	mov.w	r4, #0
 801b88c:	d102      	bne.n	801b894 <__ieee754_atan2+0xdc>
 801b88e:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 801b892:	e7e8      	b.n	801b866 <__ieee754_atan2+0xae>
 801b894:	2500      	movs	r5, #0
 801b896:	e7e6      	b.n	801b866 <__ieee754_atan2+0xae>
 801b898:	4573      	cmp	r3, lr
 801b89a:	d0d0      	beq.n	801b83e <__ieee754_atan2+0x86>
 801b89c:	1a9b      	subs	r3, r3, r2
 801b89e:	151b      	asrs	r3, r3, #20
 801b8a0:	2b3c      	cmp	r3, #60	; 0x3c
 801b8a2:	dc20      	bgt.n	801b8e6 <__ieee754_atan2+0x12e>
 801b8a4:	2f00      	cmp	r7, #0
 801b8a6:	da01      	bge.n	801b8ac <__ieee754_atan2+0xf4>
 801b8a8:	333c      	adds	r3, #60	; 0x3c
 801b8aa:	db20      	blt.n	801b8ee <__ieee754_atan2+0x136>
 801b8ac:	4642      	mov	r2, r8
 801b8ae:	464b      	mov	r3, r9
 801b8b0:	4620      	mov	r0, r4
 801b8b2:	4629      	mov	r1, r5
 801b8b4:	f7e4 ffd2 	bl	800085c <__aeabi_ddiv>
 801b8b8:	f001 f8e6 	bl	801ca88 <fabs>
 801b8bc:	f000 ff54 	bl	801c768 <atan>
 801b8c0:	4604      	mov	r4, r0
 801b8c2:	460d      	mov	r5, r1
 801b8c4:	2e01      	cmp	r6, #1
 801b8c6:	d015      	beq.n	801b8f4 <__ieee754_atan2+0x13c>
 801b8c8:	2e02      	cmp	r6, #2
 801b8ca:	d017      	beq.n	801b8fc <__ieee754_atan2+0x144>
 801b8cc:	2e00      	cmp	r6, #0
 801b8ce:	d0ca      	beq.n	801b866 <__ieee754_atan2+0xae>
 801b8d0:	a323      	add	r3, pc, #140	; (adr r3, 801b960 <__ieee754_atan2+0x1a8>)
 801b8d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b8d6:	4620      	mov	r0, r4
 801b8d8:	4629      	mov	r1, r5
 801b8da:	f7e4 fcdd 	bl	8000298 <__aeabi_dsub>
 801b8de:	a322      	add	r3, pc, #136	; (adr r3, 801b968 <__ieee754_atan2+0x1b0>)
 801b8e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b8e4:	e016      	b.n	801b914 <__ieee754_atan2+0x15c>
 801b8e6:	a522      	add	r5, pc, #136	; (adr r5, 801b970 <__ieee754_atan2+0x1b8>)
 801b8e8:	e9d5 4500 	ldrd	r4, r5, [r5]
 801b8ec:	e7ea      	b.n	801b8c4 <__ieee754_atan2+0x10c>
 801b8ee:	2400      	movs	r4, #0
 801b8f0:	2500      	movs	r5, #0
 801b8f2:	e7e7      	b.n	801b8c4 <__ieee754_atan2+0x10c>
 801b8f4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 801b8f8:	461d      	mov	r5, r3
 801b8fa:	e7b4      	b.n	801b866 <__ieee754_atan2+0xae>
 801b8fc:	a318      	add	r3, pc, #96	; (adr r3, 801b960 <__ieee754_atan2+0x1a8>)
 801b8fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b902:	4620      	mov	r0, r4
 801b904:	4629      	mov	r1, r5
 801b906:	f7e4 fcc7 	bl	8000298 <__aeabi_dsub>
 801b90a:	4602      	mov	r2, r0
 801b90c:	460b      	mov	r3, r1
 801b90e:	a116      	add	r1, pc, #88	; (adr r1, 801b968 <__ieee754_atan2+0x1b0>)
 801b910:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b914:	f7e4 fcc0 	bl	8000298 <__aeabi_dsub>
 801b918:	e770      	b.n	801b7fc <__ieee754_atan2+0x44>
 801b91a:	a517      	add	r5, pc, #92	; (adr r5, 801b978 <__ieee754_atan2+0x1c0>)
 801b91c:	e9d5 4500 	ldrd	r4, r5, [r5]
 801b920:	e7a1      	b.n	801b866 <__ieee754_atan2+0xae>
 801b922:	a511      	add	r5, pc, #68	; (adr r5, 801b968 <__ieee754_atan2+0x1b0>)
 801b924:	e9d5 4500 	ldrd	r4, r5, [r5]
 801b928:	e79d      	b.n	801b866 <__ieee754_atan2+0xae>
 801b92a:	a511      	add	r5, pc, #68	; (adr r5, 801b970 <__ieee754_atan2+0x1b8>)
 801b92c:	e9d5 4500 	ldrd	r4, r5, [r5]
 801b930:	e799      	b.n	801b866 <__ieee754_atan2+0xae>
 801b932:	bf00      	nop
 801b934:	f3af 8000 	nop.w
 801b938:	54442d18 	.word	0x54442d18
 801b93c:	c00921fb 	.word	0xc00921fb
 801b940:	54442d18 	.word	0x54442d18
 801b944:	bff921fb 	.word	0xbff921fb
 801b948:	54442d18 	.word	0x54442d18
 801b94c:	bfe921fb 	.word	0xbfe921fb
 801b950:	7f3321d2 	.word	0x7f3321d2
 801b954:	4002d97c 	.word	0x4002d97c
 801b958:	7f3321d2 	.word	0x7f3321d2
 801b95c:	c002d97c 	.word	0xc002d97c
 801b960:	33145c07 	.word	0x33145c07
 801b964:	3ca1a626 	.word	0x3ca1a626
 801b968:	54442d18 	.word	0x54442d18
 801b96c:	400921fb 	.word	0x400921fb
 801b970:	54442d18 	.word	0x54442d18
 801b974:	3ff921fb 	.word	0x3ff921fb
 801b978:	54442d18 	.word	0x54442d18
 801b97c:	3fe921fb 	.word	0x3fe921fb
 801b980:	7ff00000 	.word	0x7ff00000

0801b984 <__ieee754_sqrt>:
 801b984:	4b54      	ldr	r3, [pc, #336]	; (801bad8 <__ieee754_sqrt+0x154>)
 801b986:	438b      	bics	r3, r1
 801b988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b98c:	460a      	mov	r2, r1
 801b98e:	4606      	mov	r6, r0
 801b990:	460f      	mov	r7, r1
 801b992:	460c      	mov	r4, r1
 801b994:	d10f      	bne.n	801b9b6 <__ieee754_sqrt+0x32>
 801b996:	4602      	mov	r2, r0
 801b998:	460b      	mov	r3, r1
 801b99a:	f7e4 fe35 	bl	8000608 <__aeabi_dmul>
 801b99e:	4602      	mov	r2, r0
 801b9a0:	460b      	mov	r3, r1
 801b9a2:	4630      	mov	r0, r6
 801b9a4:	4639      	mov	r1, r7
 801b9a6:	f7e4 fc79 	bl	800029c <__adddf3>
 801b9aa:	4606      	mov	r6, r0
 801b9ac:	460f      	mov	r7, r1
 801b9ae:	4630      	mov	r0, r6
 801b9b0:	4639      	mov	r1, r7
 801b9b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b9b6:	2900      	cmp	r1, #0
 801b9b8:	4605      	mov	r5, r0
 801b9ba:	4603      	mov	r3, r0
 801b9bc:	dc0e      	bgt.n	801b9dc <__ieee754_sqrt+0x58>
 801b9be:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 801b9c2:	ea5c 0505 	orrs.w	r5, ip, r5
 801b9c6:	d0f2      	beq.n	801b9ae <__ieee754_sqrt+0x2a>
 801b9c8:	b141      	cbz	r1, 801b9dc <__ieee754_sqrt+0x58>
 801b9ca:	4602      	mov	r2, r0
 801b9cc:	460b      	mov	r3, r1
 801b9ce:	f7e4 fc63 	bl	8000298 <__aeabi_dsub>
 801b9d2:	4602      	mov	r2, r0
 801b9d4:	460b      	mov	r3, r1
 801b9d6:	f7e4 ff41 	bl	800085c <__aeabi_ddiv>
 801b9da:	e7e6      	b.n	801b9aa <__ieee754_sqrt+0x26>
 801b9dc:	1512      	asrs	r2, r2, #20
 801b9de:	d073      	beq.n	801bac8 <__ieee754_sqrt+0x144>
 801b9e0:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801b9e4:	07d5      	lsls	r5, r2, #31
 801b9e6:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801b9ea:	bf48      	it	mi
 801b9ec:	0fd9      	lsrmi	r1, r3, #31
 801b9ee:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 801b9f2:	bf44      	itt	mi
 801b9f4:	005b      	lslmi	r3, r3, #1
 801b9f6:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 801b9fa:	2500      	movs	r5, #0
 801b9fc:	1051      	asrs	r1, r2, #1
 801b9fe:	0fda      	lsrs	r2, r3, #31
 801ba00:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801ba04:	005b      	lsls	r3, r3, #1
 801ba06:	2216      	movs	r2, #22
 801ba08:	4628      	mov	r0, r5
 801ba0a:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 801ba0e:	1987      	adds	r7, r0, r6
 801ba10:	42a7      	cmp	r7, r4
 801ba12:	bfde      	ittt	le
 801ba14:	19b8      	addle	r0, r7, r6
 801ba16:	1be4      	suble	r4, r4, r7
 801ba18:	19ad      	addle	r5, r5, r6
 801ba1a:	0fdf      	lsrs	r7, r3, #31
 801ba1c:	3a01      	subs	r2, #1
 801ba1e:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 801ba22:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801ba26:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801ba2a:	d1f0      	bne.n	801ba0e <__ieee754_sqrt+0x8a>
 801ba2c:	f04f 0c20 	mov.w	ip, #32
 801ba30:	4696      	mov	lr, r2
 801ba32:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801ba36:	4284      	cmp	r4, r0
 801ba38:	eb06 070e 	add.w	r7, r6, lr
 801ba3c:	dc02      	bgt.n	801ba44 <__ieee754_sqrt+0xc0>
 801ba3e:	d112      	bne.n	801ba66 <__ieee754_sqrt+0xe2>
 801ba40:	429f      	cmp	r7, r3
 801ba42:	d810      	bhi.n	801ba66 <__ieee754_sqrt+0xe2>
 801ba44:	2f00      	cmp	r7, #0
 801ba46:	eb07 0e06 	add.w	lr, r7, r6
 801ba4a:	da42      	bge.n	801bad2 <__ieee754_sqrt+0x14e>
 801ba4c:	f1be 0f00 	cmp.w	lr, #0
 801ba50:	db3f      	blt.n	801bad2 <__ieee754_sqrt+0x14e>
 801ba52:	f100 0801 	add.w	r8, r0, #1
 801ba56:	1a24      	subs	r4, r4, r0
 801ba58:	429f      	cmp	r7, r3
 801ba5a:	bf88      	it	hi
 801ba5c:	f104 34ff 	addhi.w	r4, r4, #4294967295
 801ba60:	1bdb      	subs	r3, r3, r7
 801ba62:	4432      	add	r2, r6
 801ba64:	4640      	mov	r0, r8
 801ba66:	0064      	lsls	r4, r4, #1
 801ba68:	f1bc 0c01 	subs.w	ip, ip, #1
 801ba6c:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 801ba70:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801ba74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801ba78:	d1dd      	bne.n	801ba36 <__ieee754_sqrt+0xb2>
 801ba7a:	4323      	orrs	r3, r4
 801ba7c:	d006      	beq.n	801ba8c <__ieee754_sqrt+0x108>
 801ba7e:	1c54      	adds	r4, r2, #1
 801ba80:	bf13      	iteet	ne
 801ba82:	3201      	addne	r2, #1
 801ba84:	3501      	addeq	r5, #1
 801ba86:	4662      	moveq	r2, ip
 801ba88:	f022 0201 	bicne.w	r2, r2, #1
 801ba8c:	106b      	asrs	r3, r5, #1
 801ba8e:	0852      	lsrs	r2, r2, #1
 801ba90:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801ba94:	07e8      	lsls	r0, r5, #31
 801ba96:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801ba9a:	bf48      	it	mi
 801ba9c:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 801baa0:	eb03 5701 	add.w	r7, r3, r1, lsl #20
 801baa4:	4616      	mov	r6, r2
 801baa6:	e782      	b.n	801b9ae <__ieee754_sqrt+0x2a>
 801baa8:	0adc      	lsrs	r4, r3, #11
 801baaa:	3915      	subs	r1, #21
 801baac:	055b      	lsls	r3, r3, #21
 801baae:	2c00      	cmp	r4, #0
 801bab0:	d0fa      	beq.n	801baa8 <__ieee754_sqrt+0x124>
 801bab2:	02e6      	lsls	r6, r4, #11
 801bab4:	d50a      	bpl.n	801bacc <__ieee754_sqrt+0x148>
 801bab6:	f1c2 0020 	rsb	r0, r2, #32
 801baba:	fa23 f000 	lsr.w	r0, r3, r0
 801babe:	1e55      	subs	r5, r2, #1
 801bac0:	4093      	lsls	r3, r2
 801bac2:	4304      	orrs	r4, r0
 801bac4:	1b4a      	subs	r2, r1, r5
 801bac6:	e78b      	b.n	801b9e0 <__ieee754_sqrt+0x5c>
 801bac8:	4611      	mov	r1, r2
 801baca:	e7f0      	b.n	801baae <__ieee754_sqrt+0x12a>
 801bacc:	0064      	lsls	r4, r4, #1
 801bace:	3201      	adds	r2, #1
 801bad0:	e7ef      	b.n	801bab2 <__ieee754_sqrt+0x12e>
 801bad2:	4680      	mov	r8, r0
 801bad4:	e7bf      	b.n	801ba56 <__ieee754_sqrt+0xd2>
 801bad6:	bf00      	nop
 801bad8:	7ff00000 	.word	0x7ff00000

0801badc <__ieee754_acosf>:
 801badc:	b508      	push	{r3, lr}
 801bade:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 801bae2:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 801bae6:	ed2d 8b0c 	vpush	{d8-d13}
 801baea:	ee08 0a10 	vmov	s16, r0
 801baee:	d10c      	bne.n	801bb0a <__ieee754_acosf+0x2e>
 801baf0:	eddf 7a69 	vldr	s15, [pc, #420]	; 801bc98 <__ieee754_acosf+0x1bc>
 801baf4:	ed9f 8a69 	vldr	s16, [pc, #420]	; 801bc9c <__ieee754_acosf+0x1c0>
 801baf8:	2800      	cmp	r0, #0
 801bafa:	bfd8      	it	le
 801bafc:	eef0 7a48 	vmovle.f32	s15, s16
 801bb00:	ecbd 8b0c 	vpop	{d8-d13}
 801bb04:	ee17 0a90 	vmov	r0, s15
 801bb08:	bd08      	pop	{r3, pc}
 801bb0a:	dd04      	ble.n	801bb16 <__ieee754_acosf+0x3a>
 801bb0c:	ee38 8a48 	vsub.f32	s16, s16, s16
 801bb10:	eec8 7a08 	vdiv.f32	s15, s16, s16
 801bb14:	e7f4      	b.n	801bb00 <__ieee754_acosf+0x24>
 801bb16:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 801bb1a:	da3e      	bge.n	801bb9a <__ieee754_acosf+0xbe>
 801bb1c:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 801bb20:	f340 80b7 	ble.w	801bc92 <__ieee754_acosf+0x1b6>
 801bb24:	ee68 7a08 	vmul.f32	s15, s16, s16
 801bb28:	eddf 6a5d 	vldr	s13, [pc, #372]	; 801bca0 <__ieee754_acosf+0x1c4>
 801bb2c:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 801bca4 <__ieee754_acosf+0x1c8>
 801bb30:	ed9f 6a5d 	vldr	s12, [pc, #372]	; 801bca8 <__ieee754_acosf+0x1cc>
 801bb34:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801bb38:	eddf 6a5c 	vldr	s13, [pc, #368]	; 801bcac <__ieee754_acosf+0x1d0>
 801bb3c:	eee7 6a27 	vfma.f32	s13, s14, s15
 801bb40:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 801bcb0 <__ieee754_acosf+0x1d4>
 801bb44:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801bb48:	eddf 6a5a 	vldr	s13, [pc, #360]	; 801bcb4 <__ieee754_acosf+0x1d8>
 801bb4c:	eee7 6a27 	vfma.f32	s13, s14, s15
 801bb50:	ed9f 7a59 	vldr	s14, [pc, #356]	; 801bcb8 <__ieee754_acosf+0x1dc>
 801bb54:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801bb58:	eddf 6a58 	vldr	s13, [pc, #352]	; 801bcbc <__ieee754_acosf+0x1e0>
 801bb5c:	eea7 6aa6 	vfma.f32	s12, s15, s13
 801bb60:	eddf 6a57 	vldr	s13, [pc, #348]	; 801bcc0 <__ieee754_acosf+0x1e4>
 801bb64:	eee6 6a27 	vfma.f32	s13, s12, s15
 801bb68:	ed9f 6a56 	vldr	s12, [pc, #344]	; 801bcc4 <__ieee754_acosf+0x1e8>
 801bb6c:	eea6 6aa7 	vfma.f32	s12, s13, s15
 801bb70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bb74:	eee6 6a27 	vfma.f32	s13, s12, s15
 801bb78:	ee27 7a27 	vmul.f32	s14, s14, s15
 801bb7c:	eef0 7a66 	vmov.f32	s15, s13
 801bb80:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801bb84:	eddf 7a50 	vldr	s15, [pc, #320]	; 801bcc8 <__ieee754_acosf+0x1ec>
 801bb88:	eee8 7a66 	vfms.f32	s15, s16, s13
 801bb8c:	ee38 8a67 	vsub.f32	s16, s16, s15
 801bb90:	eddf 7a4e 	vldr	s15, [pc, #312]	; 801bccc <__ieee754_acosf+0x1f0>
 801bb94:	ee77 7ac8 	vsub.f32	s15, s15, s16
 801bb98:	e7b2      	b.n	801bb00 <__ieee754_acosf+0x24>
 801bb9a:	2800      	cmp	r0, #0
 801bb9c:	eddf da40 	vldr	s27, [pc, #256]	; 801bca0 <__ieee754_acosf+0x1c4>
 801bba0:	eddf ca40 	vldr	s25, [pc, #256]	; 801bca4 <__ieee754_acosf+0x1c8>
 801bba4:	ed9f ca41 	vldr	s24, [pc, #260]	; 801bcac <__ieee754_acosf+0x1d0>
 801bba8:	eddf ba41 	vldr	s23, [pc, #260]	; 801bcb0 <__ieee754_acosf+0x1d4>
 801bbac:	ed9f ba41 	vldr	s22, [pc, #260]	; 801bcb4 <__ieee754_acosf+0x1d8>
 801bbb0:	eddf 8a41 	vldr	s17, [pc, #260]	; 801bcb8 <__ieee754_acosf+0x1dc>
 801bbb4:	ed9f da41 	vldr	s26, [pc, #260]	; 801bcbc <__ieee754_acosf+0x1e0>
 801bbb8:	eddf aa3b 	vldr	s21, [pc, #236]	; 801bca8 <__ieee754_acosf+0x1cc>
 801bbbc:	ed9f aa40 	vldr	s20, [pc, #256]	; 801bcc0 <__ieee754_acosf+0x1e4>
 801bbc0:	eddf 9a40 	vldr	s19, [pc, #256]	; 801bcc4 <__ieee754_acosf+0x1e8>
 801bbc4:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 801bbc8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801bbcc:	da2c      	bge.n	801bc28 <__ieee754_acosf+0x14c>
 801bbce:	ee38 8a09 	vadd.f32	s16, s16, s18
 801bbd2:	ee28 8a27 	vmul.f32	s16, s16, s15
 801bbd6:	eee8 ca2d 	vfma.f32	s25, s16, s27
 801bbda:	eee8 aa0d 	vfma.f32	s21, s16, s26
 801bbde:	eeac ca88 	vfma.f32	s24, s25, s16
 801bbe2:	eeaa aa88 	vfma.f32	s20, s21, s16
 801bbe6:	eeec ba08 	vfma.f32	s23, s24, s16
 801bbea:	eeea 9a08 	vfma.f32	s19, s20, s16
 801bbee:	eeab ba88 	vfma.f32	s22, s23, s16
 801bbf2:	eea9 9a88 	vfma.f32	s18, s19, s16
 801bbf6:	eeeb 8a08 	vfma.f32	s17, s22, s16
 801bbfa:	ee18 0a10 	vmov	r0, s16
 801bbfe:	ee68 8a88 	vmul.f32	s17, s17, s16
 801bc02:	f000 f995 	bl	801bf30 <__ieee754_sqrtf>
 801bc06:	eec8 7a89 	vdiv.f32	s15, s17, s18
 801bc0a:	ee06 0a90 	vmov	s13, r0
 801bc0e:	ed9f 7a30 	vldr	s14, [pc, #192]	; 801bcd0 <__ieee754_acosf+0x1f4>
 801bc12:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801bc16:	eddf 7a2f 	vldr	s15, [pc, #188]	; 801bcd4 <__ieee754_acosf+0x1f8>
 801bc1a:	ee37 7a26 	vadd.f32	s14, s14, s13
 801bc1e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801bc22:	eee7 7a66 	vfms.f32	s15, s14, s13
 801bc26:	e76b      	b.n	801bb00 <__ieee754_acosf+0x24>
 801bc28:	ee39 8a48 	vsub.f32	s16, s18, s16
 801bc2c:	ee28 8a27 	vmul.f32	s16, s16, s15
 801bc30:	ee18 0a10 	vmov	r0, s16
 801bc34:	f000 f97c 	bl	801bf30 <__ieee754_sqrtf>
 801bc38:	eee8 ca2d 	vfma.f32	s25, s16, s27
 801bc3c:	f420 637f 	bic.w	r3, r0, #4080	; 0xff0
 801bc40:	f023 030f 	bic.w	r3, r3, #15
 801bc44:	eee8 aa0d 	vfma.f32	s21, s16, s26
 801bc48:	eeac ca88 	vfma.f32	s24, s25, s16
 801bc4c:	eeaa aa88 	vfma.f32	s20, s21, s16
 801bc50:	eeec ba08 	vfma.f32	s23, s24, s16
 801bc54:	eeea 9a08 	vfma.f32	s19, s20, s16
 801bc58:	eeab ba88 	vfma.f32	s22, s23, s16
 801bc5c:	ee07 3a10 	vmov	s14, r3
 801bc60:	eeeb 8a08 	vfma.f32	s17, s22, s16
 801bc64:	eef0 5a48 	vmov.f32	s11, s16
 801bc68:	ee06 0a90 	vmov	s13, r0
 801bc6c:	eee7 5a47 	vfms.f32	s11, s14, s14
 801bc70:	eea9 9a88 	vfma.f32	s18, s19, s16
 801bc74:	ee36 6a87 	vadd.f32	s12, s13, s14
 801bc78:	ee68 8a88 	vmul.f32	s17, s17, s16
 801bc7c:	eec5 7a86 	vdiv.f32	s15, s11, s12
 801bc80:	ee88 6a89 	vdiv.f32	s12, s17, s18
 801bc84:	eee6 7a86 	vfma.f32	s15, s13, s12
 801bc88:	ee77 7a87 	vadd.f32	s15, s15, s14
 801bc8c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801bc90:	e736      	b.n	801bb00 <__ieee754_acosf+0x24>
 801bc92:	eddf 7a11 	vldr	s15, [pc, #68]	; 801bcd8 <__ieee754_acosf+0x1fc>
 801bc96:	e733      	b.n	801bb00 <__ieee754_acosf+0x24>
 801bc98:	00000000 	.word	0x00000000
 801bc9c:	40490fdb 	.word	0x40490fdb
 801bca0:	3811ef08 	.word	0x3811ef08
 801bca4:	3a4f7f04 	.word	0x3a4f7f04
 801bca8:	bf303361 	.word	0xbf303361
 801bcac:	bd241146 	.word	0xbd241146
 801bcb0:	3e4e0aa8 	.word	0x3e4e0aa8
 801bcb4:	bea6b090 	.word	0xbea6b090
 801bcb8:	3e2aaaab 	.word	0x3e2aaaab
 801bcbc:	3d9dc62e 	.word	0x3d9dc62e
 801bcc0:	4001572d 	.word	0x4001572d
 801bcc4:	c019d139 	.word	0xc019d139
 801bcc8:	33a22168 	.word	0x33a22168
 801bccc:	3fc90fda 	.word	0x3fc90fda
 801bcd0:	b3a22168 	.word	0xb3a22168
 801bcd4:	40490fda 	.word	0x40490fda
 801bcd8:	3fc90fdb 	.word	0x3fc90fdb

0801bcdc <__ieee754_rem_pio2f>:
 801bcdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bcde:	4b86      	ldr	r3, [pc, #536]	; (801bef8 <__ieee754_rem_pio2f+0x21c>)
 801bce0:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 801bce4:	429c      	cmp	r4, r3
 801bce6:	b087      	sub	sp, #28
 801bce8:	ee07 0a90 	vmov	s15, r0
 801bcec:	460d      	mov	r5, r1
 801bcee:	4606      	mov	r6, r0
 801bcf0:	dc04      	bgt.n	801bcfc <__ieee754_rem_pio2f+0x20>
 801bcf2:	2300      	movs	r3, #0
 801bcf4:	6028      	str	r0, [r5, #0]
 801bcf6:	604b      	str	r3, [r1, #4]
 801bcf8:	2000      	movs	r0, #0
 801bcfa:	e020      	b.n	801bd3e <__ieee754_rem_pio2f+0x62>
 801bcfc:	4b7f      	ldr	r3, [pc, #508]	; (801befc <__ieee754_rem_pio2f+0x220>)
 801bcfe:	429c      	cmp	r4, r3
 801bd00:	dc38      	bgt.n	801bd74 <__ieee754_rem_pio2f+0x98>
 801bd02:	2800      	cmp	r0, #0
 801bd04:	f024 040f 	bic.w	r4, r4, #15
 801bd08:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 801bf00 <__ieee754_rem_pio2f+0x224>
 801bd0c:	4b7d      	ldr	r3, [pc, #500]	; (801bf04 <__ieee754_rem_pio2f+0x228>)
 801bd0e:	dd18      	ble.n	801bd42 <__ieee754_rem_pio2f+0x66>
 801bd10:	429c      	cmp	r4, r3
 801bd12:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801bd16:	bf09      	itett	eq
 801bd18:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 801bf08 <__ieee754_rem_pio2f+0x22c>
 801bd1c:	ed9f 7a7b 	vldrne	s14, [pc, #492]	; 801bf0c <__ieee754_rem_pio2f+0x230>
 801bd20:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 801bd24:	ed9f 7a7a 	vldreq	s14, [pc, #488]	; 801bf10 <__ieee754_rem_pio2f+0x234>
 801bd28:	ee77 6ac7 	vsub.f32	s13, s15, s14
 801bd2c:	2001      	movs	r0, #1
 801bd2e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801bd32:	edc1 6a00 	vstr	s13, [r1]
 801bd36:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801bd3a:	edc1 7a01 	vstr	s15, [r1, #4]
 801bd3e:	b007      	add	sp, #28
 801bd40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bd42:	429c      	cmp	r4, r3
 801bd44:	ee77 7a87 	vadd.f32	s15, s15, s14
 801bd48:	bf09      	itett	eq
 801bd4a:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 801bf08 <__ieee754_rem_pio2f+0x22c>
 801bd4e:	ed9f 7a6f 	vldrne	s14, [pc, #444]	; 801bf0c <__ieee754_rem_pio2f+0x230>
 801bd52:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 801bd56:	ed9f 7a6e 	vldreq	s14, [pc, #440]	; 801bf10 <__ieee754_rem_pio2f+0x234>
 801bd5a:	ee77 6a87 	vadd.f32	s13, s15, s14
 801bd5e:	f04f 30ff 	mov.w	r0, #4294967295
 801bd62:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801bd66:	edc1 6a00 	vstr	s13, [r1]
 801bd6a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801bd6e:	edc1 7a01 	vstr	s15, [r1, #4]
 801bd72:	e7e4      	b.n	801bd3e <__ieee754_rem_pio2f+0x62>
 801bd74:	4b67      	ldr	r3, [pc, #412]	; (801bf14 <__ieee754_rem_pio2f+0x238>)
 801bd76:	429c      	cmp	r4, r3
 801bd78:	dc73      	bgt.n	801be62 <__ieee754_rem_pio2f+0x186>
 801bd7a:	f000 fe91 	bl	801caa0 <fabsf>
 801bd7e:	eddf 6a66 	vldr	s13, [pc, #408]	; 801bf18 <__ieee754_rem_pio2f+0x23c>
 801bd82:	ee07 0a90 	vmov	s15, r0
 801bd86:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801bd8a:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801bd8e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801bd92:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 801bd96:	ee17 0a10 	vmov	r0, s14
 801bd9a:	ed9f 7a59 	vldr	s14, [pc, #356]	; 801bf00 <__ieee754_rem_pio2f+0x224>
 801bd9e:	eef1 6a65 	vneg.f32	s13, s11
 801bda2:	eee6 7a87 	vfma.f32	s15, s13, s14
 801bda6:	281f      	cmp	r0, #31
 801bda8:	ed9f 7a58 	vldr	s14, [pc, #352]	; 801bf0c <__ieee754_rem_pio2f+0x230>
 801bdac:	ee25 7a87 	vmul.f32	s14, s11, s14
 801bdb0:	ee37 6ac7 	vsub.f32	s12, s15, s14
 801bdb4:	ee16 3a10 	vmov	r3, s12
 801bdb8:	dc1c      	bgt.n	801bdf4 <__ieee754_rem_pio2f+0x118>
 801bdba:	1e47      	subs	r7, r0, #1
 801bdbc:	4957      	ldr	r1, [pc, #348]	; (801bf1c <__ieee754_rem_pio2f+0x240>)
 801bdbe:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 801bdc2:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 801bdc6:	428a      	cmp	r2, r1
 801bdc8:	d014      	beq.n	801bdf4 <__ieee754_rem_pio2f+0x118>
 801bdca:	602b      	str	r3, [r5, #0]
 801bdcc:	edd5 6a00 	vldr	s13, [r5]
 801bdd0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801bdd4:	2e00      	cmp	r6, #0
 801bdd6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801bdda:	edc5 7a01 	vstr	s15, [r5, #4]
 801bdde:	daae      	bge.n	801bd3e <__ieee754_rem_pio2f+0x62>
 801bde0:	eef1 6a66 	vneg.f32	s13, s13
 801bde4:	edc5 6a00 	vstr	s13, [r5]
 801bde8:	eef1 7a67 	vneg.f32	s15, s15
 801bdec:	edc5 7a01 	vstr	s15, [r5, #4]
 801bdf0:	4240      	negs	r0, r0
 801bdf2:	e7a4      	b.n	801bd3e <__ieee754_rem_pio2f+0x62>
 801bdf4:	15e4      	asrs	r4, r4, #23
 801bdf6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801bdfa:	1aa2      	subs	r2, r4, r2
 801bdfc:	2a08      	cmp	r2, #8
 801bdfe:	dde4      	ble.n	801bdca <__ieee754_rem_pio2f+0xee>
 801be00:	ed9f 7a41 	vldr	s14, [pc, #260]	; 801bf08 <__ieee754_rem_pio2f+0x22c>
 801be04:	eeb0 6a67 	vmov.f32	s12, s15
 801be08:	eea6 6a87 	vfma.f32	s12, s13, s14
 801be0c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801be10:	eee6 7a87 	vfma.f32	s15, s13, s14
 801be14:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 801bf10 <__ieee754_rem_pio2f+0x234>
 801be18:	eed5 7a87 	vfnms.f32	s15, s11, s14
 801be1c:	eeb0 7a67 	vmov.f32	s14, s15
 801be20:	ee76 7a67 	vsub.f32	s15, s12, s15
 801be24:	ee17 3a90 	vmov	r3, s15
 801be28:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801be2c:	1aa4      	subs	r4, r4, r2
 801be2e:	2c19      	cmp	r4, #25
 801be30:	dc04      	bgt.n	801be3c <__ieee754_rem_pio2f+0x160>
 801be32:	edc5 7a00 	vstr	s15, [r5]
 801be36:	eef0 7a46 	vmov.f32	s15, s12
 801be3a:	e7c7      	b.n	801bdcc <__ieee754_rem_pio2f+0xf0>
 801be3c:	ed9f 5a38 	vldr	s10, [pc, #224]	; 801bf20 <__ieee754_rem_pio2f+0x244>
 801be40:	eef0 7a46 	vmov.f32	s15, s12
 801be44:	eee6 7a85 	vfma.f32	s15, s13, s10
 801be48:	ee36 7a67 	vsub.f32	s14, s12, s15
 801be4c:	eea6 7a85 	vfma.f32	s14, s13, s10
 801be50:	eddf 6a34 	vldr	s13, [pc, #208]	; 801bf24 <__ieee754_rem_pio2f+0x248>
 801be54:	ee95 7aa6 	vfnms.f32	s14, s11, s13
 801be58:	ee77 6ac7 	vsub.f32	s13, s15, s14
 801be5c:	edc5 6a00 	vstr	s13, [r5]
 801be60:	e7b4      	b.n	801bdcc <__ieee754_rem_pio2f+0xf0>
 801be62:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801be66:	db06      	blt.n	801be76 <__ieee754_rem_pio2f+0x19a>
 801be68:	ee77 7ae7 	vsub.f32	s15, s15, s15
 801be6c:	edc1 7a01 	vstr	s15, [r1, #4]
 801be70:	edc1 7a00 	vstr	s15, [r1]
 801be74:	e740      	b.n	801bcf8 <__ieee754_rem_pio2f+0x1c>
 801be76:	15e2      	asrs	r2, r4, #23
 801be78:	3a86      	subs	r2, #134	; 0x86
 801be7a:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 801be7e:	ee07 3a90 	vmov	s15, r3
 801be82:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801be86:	eddf 6a28 	vldr	s13, [pc, #160]	; 801bf28 <__ieee754_rem_pio2f+0x24c>
 801be8a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801be8e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801be92:	ed8d 7a03 	vstr	s14, [sp, #12]
 801be96:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801be9a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801be9e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801bea2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801bea6:	ed8d 7a04 	vstr	s14, [sp, #16]
 801beaa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801beae:	eef5 7a40 	vcmp.f32	s15, #0.0
 801beb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801beb6:	edcd 7a05 	vstr	s15, [sp, #20]
 801beba:	d11a      	bne.n	801bef2 <__ieee754_rem_pio2f+0x216>
 801bebc:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801bec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bec4:	bf0c      	ite	eq
 801bec6:	2301      	moveq	r3, #1
 801bec8:	2302      	movne	r3, #2
 801beca:	4918      	ldr	r1, [pc, #96]	; (801bf2c <__ieee754_rem_pio2f+0x250>)
 801becc:	9101      	str	r1, [sp, #4]
 801bece:	2102      	movs	r1, #2
 801bed0:	9100      	str	r1, [sp, #0]
 801bed2:	a803      	add	r0, sp, #12
 801bed4:	4629      	mov	r1, r5
 801bed6:	f000 f897 	bl	801c008 <__kernel_rem_pio2f>
 801beda:	2e00      	cmp	r6, #0
 801bedc:	f6bf af2f 	bge.w	801bd3e <__ieee754_rem_pio2f+0x62>
 801bee0:	edd5 7a00 	vldr	s15, [r5]
 801bee4:	eef1 7a67 	vneg.f32	s15, s15
 801bee8:	edc5 7a00 	vstr	s15, [r5]
 801beec:	edd5 7a01 	vldr	s15, [r5, #4]
 801bef0:	e77a      	b.n	801bde8 <__ieee754_rem_pio2f+0x10c>
 801bef2:	2303      	movs	r3, #3
 801bef4:	e7e9      	b.n	801beca <__ieee754_rem_pio2f+0x1ee>
 801bef6:	bf00      	nop
 801bef8:	3f490fd8 	.word	0x3f490fd8
 801befc:	4016cbe3 	.word	0x4016cbe3
 801bf00:	3fc90f80 	.word	0x3fc90f80
 801bf04:	3fc90fd0 	.word	0x3fc90fd0
 801bf08:	37354400 	.word	0x37354400
 801bf0c:	37354443 	.word	0x37354443
 801bf10:	2e85a308 	.word	0x2e85a308
 801bf14:	43490f80 	.word	0x43490f80
 801bf18:	3f22f984 	.word	0x3f22f984
 801bf1c:	0801d274 	.word	0x0801d274
 801bf20:	2e85a300 	.word	0x2e85a300
 801bf24:	248d3132 	.word	0x248d3132
 801bf28:	43800000 	.word	0x43800000
 801bf2c:	0801d2f4 	.word	0x0801d2f4

0801bf30 <__ieee754_sqrtf>:
 801bf30:	ee07 0a90 	vmov	s15, r0
 801bf34:	eef1 7ae7 	vsqrt.f32	s15, s15
 801bf38:	ee17 0a90 	vmov	r0, s15
 801bf3c:	4770      	bx	lr
	...

0801bf40 <__kernel_cosf>:
 801bf40:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 801bf44:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801bf48:	ee05 0a10 	vmov	s10, r0
 801bf4c:	ee07 1a10 	vmov	s14, r1
 801bf50:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801bf54:	da05      	bge.n	801bf62 <__kernel_cosf+0x22>
 801bf56:	eefd 7ac5 	vcvt.s32.f32	s15, s10
 801bf5a:	ee17 2a90 	vmov	r2, s15
 801bf5e:	2a00      	cmp	r2, #0
 801bf60:	d03f      	beq.n	801bfe2 <__kernel_cosf+0xa2>
 801bf62:	ee65 5a05 	vmul.f32	s11, s10, s10
 801bf66:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801bf6a:	ee65 7aa6 	vmul.f32	s15, s11, s13
 801bf6e:	ee27 7a45 	vnmul.f32	s14, s14, s10
 801bf72:	eddf 6a1d 	vldr	s13, [pc, #116]	; 801bfe8 <__kernel_cosf+0xa8>
 801bf76:	ed9f 5a1d 	vldr	s10, [pc, #116]	; 801bfec <__kernel_cosf+0xac>
 801bf7a:	4a1d      	ldr	r2, [pc, #116]	; (801bff0 <__kernel_cosf+0xb0>)
 801bf7c:	eee5 6a85 	vfma.f32	s13, s11, s10
 801bf80:	4293      	cmp	r3, r2
 801bf82:	ed9f 5a1c 	vldr	s10, [pc, #112]	; 801bff4 <__kernel_cosf+0xb4>
 801bf86:	eea6 5aa5 	vfma.f32	s10, s13, s11
 801bf8a:	eddf 6a1b 	vldr	s13, [pc, #108]	; 801bff8 <__kernel_cosf+0xb8>
 801bf8e:	eee5 6a25 	vfma.f32	s13, s10, s11
 801bf92:	ed9f 5a1a 	vldr	s10, [pc, #104]	; 801bffc <__kernel_cosf+0xbc>
 801bf96:	eea6 5aa5 	vfma.f32	s10, s13, s11
 801bf9a:	eddf 6a19 	vldr	s13, [pc, #100]	; 801c000 <__kernel_cosf+0xc0>
 801bf9e:	eee5 6a25 	vfma.f32	s13, s10, s11
 801bfa2:	ee66 6aa5 	vmul.f32	s13, s13, s11
 801bfa6:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801bfaa:	eef0 5a47 	vmov.f32	s11, s14
 801bfae:	dc06      	bgt.n	801bfbe <__kernel_cosf+0x7e>
 801bfb0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 801bfb4:	ee76 7a47 	vsub.f32	s15, s12, s14
 801bfb8:	ee17 0a90 	vmov	r0, s15
 801bfbc:	4770      	bx	lr
 801bfbe:	4a11      	ldr	r2, [pc, #68]	; (801c004 <__kernel_cosf+0xc4>)
 801bfc0:	4293      	cmp	r3, r2
 801bfc2:	bfda      	itte	le
 801bfc4:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 801bfc8:	ee06 3a90 	vmovle	s13, r3
 801bfcc:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 801bfd0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801bfd4:	ee36 7a66 	vsub.f32	s14, s12, s13
 801bfd8:	ee77 7ae5 	vsub.f32	s15, s15, s11
 801bfdc:	ee77 7a67 	vsub.f32	s15, s14, s15
 801bfe0:	e7ea      	b.n	801bfb8 <__kernel_cosf+0x78>
 801bfe2:	eef0 7a46 	vmov.f32	s15, s12
 801bfe6:	e7e7      	b.n	801bfb8 <__kernel_cosf+0x78>
 801bfe8:	310f74f6 	.word	0x310f74f6
 801bfec:	ad47d74e 	.word	0xad47d74e
 801bff0:	3e999999 	.word	0x3e999999
 801bff4:	b493f27c 	.word	0xb493f27c
 801bff8:	37d00d01 	.word	0x37d00d01
 801bffc:	bab60b61 	.word	0xbab60b61
 801c000:	3d2aaaab 	.word	0x3d2aaaab
 801c004:	3f480000 	.word	0x3f480000

0801c008 <__kernel_rem_pio2f>:
 801c008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c00c:	ed2d 8b04 	vpush	{d8-d9}
 801c010:	b0d7      	sub	sp, #348	; 0x15c
 801c012:	4688      	mov	r8, r1
 801c014:	9301      	str	r3, [sp, #4]
 801c016:	9964      	ldr	r1, [sp, #400]	; 0x190
 801c018:	4bd2      	ldr	r3, [pc, #840]	; (801c364 <__kernel_rem_pio2f+0x35c>)
 801c01a:	9002      	str	r0, [sp, #8]
 801c01c:	f853 b021 	ldr.w	fp, [r3, r1, lsl #2]
 801c020:	9b01      	ldr	r3, [sp, #4]
 801c022:	9c65      	ldr	r4, [sp, #404]	; 0x194
 801c024:	ed9f 7ad3 	vldr	s14, [pc, #844]	; 801c374 <__kernel_rem_pio2f+0x36c>
 801c028:	3b01      	subs	r3, #1
 801c02a:	1ed1      	subs	r1, r2, #3
 801c02c:	2008      	movs	r0, #8
 801c02e:	fb91 f1f0 	sdiv	r1, r1, r0
 801c032:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 801c036:	1c4d      	adds	r5, r1, #1
 801c038:	1ace      	subs	r6, r1, r3
 801c03a:	a81a      	add	r0, sp, #104	; 0x68
 801c03c:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 801c040:	eb0b 0703 	add.w	r7, fp, r3
 801c044:	eb04 0c86 	add.w	ip, r4, r6, lsl #2
 801c048:	4686      	mov	lr, r0
 801c04a:	2200      	movs	r2, #0
 801c04c:	42ba      	cmp	r2, r7
 801c04e:	dd0f      	ble.n	801c070 <__kernel_rem_pio2f+0x68>
 801c050:	af42      	add	r7, sp, #264	; 0x108
 801c052:	2000      	movs	r0, #0
 801c054:	4558      	cmp	r0, fp
 801c056:	dc27      	bgt.n	801c0a8 <__kernel_rem_pio2f+0xa0>
 801c058:	e9dd 2601 	ldrd	r2, r6, [sp, #4]
 801c05c:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 801c060:	4402      	add	r2, r0
 801c062:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
 801c066:	eddf 7ac3 	vldr	s15, [pc, #780]	; 801c374 <__kernel_rem_pio2f+0x36c>
 801c06a:	f04f 0c00 	mov.w	ip, #0
 801c06e:	e015      	b.n	801c09c <__kernel_rem_pio2f+0x94>
 801c070:	42d6      	cmn	r6, r2
 801c072:	bf5d      	ittte	pl
 801c074:	f85c 0022 	ldrpl.w	r0, [ip, r2, lsl #2]
 801c078:	ee07 0a90 	vmovpl	s15, r0
 801c07c:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801c080:	eef0 7a47 	vmovmi.f32	s15, s14
 801c084:	ecee 7a01 	vstmia	lr!, {s15}
 801c088:	3201      	adds	r2, #1
 801c08a:	e7df      	b.n	801c04c <__kernel_rem_pio2f+0x44>
 801c08c:	ecf6 6a01 	vldmia	r6!, {s13}
 801c090:	ed32 7a01 	vldmdb	r2!, {s14}
 801c094:	eee6 7a87 	vfma.f32	s15, s13, s14
 801c098:	f10c 0c01 	add.w	ip, ip, #1
 801c09c:	459c      	cmp	ip, r3
 801c09e:	ddf5      	ble.n	801c08c <__kernel_rem_pio2f+0x84>
 801c0a0:	ece7 7a01 	vstmia	r7!, {s15}
 801c0a4:	3001      	adds	r0, #1
 801c0a6:	e7d5      	b.n	801c054 <__kernel_rem_pio2f+0x4c>
 801c0a8:	aa06      	add	r2, sp, #24
 801c0aa:	eb02 028b 	add.w	r2, r2, fp, lsl #2
 801c0ae:	9204      	str	r2, [sp, #16]
 801c0b0:	eddf 8aad 	vldr	s17, [pc, #692]	; 801c368 <__kernel_rem_pio2f+0x360>
 801c0b4:	ed9f 9aad 	vldr	s18, [pc, #692]	; 801c36c <__kernel_rem_pio2f+0x364>
 801c0b8:	eb04 0281 	add.w	r2, r4, r1, lsl #2
 801c0bc:	9203      	str	r2, [sp, #12]
 801c0be:	465f      	mov	r7, fp
 801c0c0:	aa56      	add	r2, sp, #344	; 0x158
 801c0c2:	f107 4980 	add.w	r9, r7, #1073741824	; 0x40000000
 801c0c6:	eb02 0287 	add.w	r2, r2, r7, lsl #2
 801c0ca:	f109 39ff 	add.w	r9, r9, #4294967295
 801c0ce:	ed52 7a14 	vldr	s15, [r2, #-80]	; 0xffffffb0
 801c0d2:	ea4f 0989 	mov.w	r9, r9, lsl #2
 801c0d6:	aa56      	add	r2, sp, #344	; 0x158
 801c0d8:	eb02 0109 	add.w	r1, r2, r9
 801c0dc:	394c      	subs	r1, #76	; 0x4c
 801c0de:	2200      	movs	r2, #0
 801c0e0:	1ab8      	subs	r0, r7, r2
 801c0e2:	2800      	cmp	r0, #0
 801c0e4:	dc54      	bgt.n	801c190 <__kernel_rem_pio2f+0x188>
 801c0e6:	4629      	mov	r1, r5
 801c0e8:	ee17 0a90 	vmov	r0, s15
 801c0ec:	9305      	str	r3, [sp, #20]
 801c0ee:	f000 fd1f 	bl	801cb30 <scalbnf>
 801c0f2:	ee08 0a10 	vmov	s16, r0
 801c0f6:	eef4 7a00 	vmov.f32	s15, #64	; 0x3e000000  0.125
 801c0fa:	ee68 7a27 	vmul.f32	s15, s16, s15
 801c0fe:	ee17 0a90 	vmov	r0, s15
 801c102:	f000 fcd1 	bl	801caa8 <floorf>
 801c106:	ee07 0a10 	vmov	s14, r0
 801c10a:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 801c10e:	eea7 8a67 	vfms.f32	s16, s14, s15
 801c112:	2d00      	cmp	r5, #0
 801c114:	9b05      	ldr	r3, [sp, #20]
 801c116:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801c11a:	ee17 aa90 	vmov	sl, s15
 801c11e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c122:	ee38 8a67 	vsub.f32	s16, s16, s15
 801c126:	dd48      	ble.n	801c1ba <__kernel_rem_pio2f+0x1b2>
 801c128:	1e79      	subs	r1, r7, #1
 801c12a:	aa06      	add	r2, sp, #24
 801c12c:	f1c5 0008 	rsb	r0, r5, #8
 801c130:	f852 6021 	ldr.w	r6, [r2, r1, lsl #2]
 801c134:	fa46 f200 	asr.w	r2, r6, r0
 801c138:	4492      	add	sl, r2
 801c13a:	4082      	lsls	r2, r0
 801c13c:	1ab6      	subs	r6, r6, r2
 801c13e:	aa06      	add	r2, sp, #24
 801c140:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
 801c144:	f1c5 0207 	rsb	r2, r5, #7
 801c148:	4116      	asrs	r6, r2
 801c14a:	2e00      	cmp	r6, #0
 801c14c:	dd44      	ble.n	801c1d8 <__kernel_rem_pio2f+0x1d0>
 801c14e:	2100      	movs	r1, #0
 801c150:	f10a 0a01 	add.w	sl, sl, #1
 801c154:	4608      	mov	r0, r1
 801c156:	428f      	cmp	r7, r1
 801c158:	dc70      	bgt.n	801c23c <__kernel_rem_pio2f+0x234>
 801c15a:	2d00      	cmp	r5, #0
 801c15c:	dd05      	ble.n	801c16a <__kernel_rem_pio2f+0x162>
 801c15e:	2d01      	cmp	r5, #1
 801c160:	f000 8081 	beq.w	801c266 <__kernel_rem_pio2f+0x25e>
 801c164:	2d02      	cmp	r5, #2
 801c166:	f000 8088 	beq.w	801c27a <__kernel_rem_pio2f+0x272>
 801c16a:	2e02      	cmp	r6, #2
 801c16c:	d134      	bne.n	801c1d8 <__kernel_rem_pio2f+0x1d0>
 801c16e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801c172:	ee37 8ac8 	vsub.f32	s16, s15, s16
 801c176:	b378      	cbz	r0, 801c1d8 <__kernel_rem_pio2f+0x1d0>
 801c178:	ee17 0a90 	vmov	r0, s15
 801c17c:	4629      	mov	r1, r5
 801c17e:	9305      	str	r3, [sp, #20]
 801c180:	f000 fcd6 	bl	801cb30 <scalbnf>
 801c184:	ee07 0a90 	vmov	s15, r0
 801c188:	9b05      	ldr	r3, [sp, #20]
 801c18a:	ee38 8a67 	vsub.f32	s16, s16, s15
 801c18e:	e023      	b.n	801c1d8 <__kernel_rem_pio2f+0x1d0>
 801c190:	ee27 7aa8 	vmul.f32	s14, s15, s17
 801c194:	ac06      	add	r4, sp, #24
 801c196:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801c19a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c19e:	eee7 7a49 	vfms.f32	s15, s14, s18
 801c1a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c1a6:	ee17 0a90 	vmov	r0, s15
 801c1aa:	ed71 7a01 	vldmdb	r1!, {s15}
 801c1ae:	f844 0022 	str.w	r0, [r4, r2, lsl #2]
 801c1b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 801c1b6:	3201      	adds	r2, #1
 801c1b8:	e792      	b.n	801c0e0 <__kernel_rem_pio2f+0xd8>
 801c1ba:	d105      	bne.n	801c1c8 <__kernel_rem_pio2f+0x1c0>
 801c1bc:	1e7a      	subs	r2, r7, #1
 801c1be:	a906      	add	r1, sp, #24
 801c1c0:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801c1c4:	1236      	asrs	r6, r6, #8
 801c1c6:	e7c0      	b.n	801c14a <__kernel_rem_pio2f+0x142>
 801c1c8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801c1cc:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801c1d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c1d4:	da30      	bge.n	801c238 <__kernel_rem_pio2f+0x230>
 801c1d6:	2600      	movs	r6, #0
 801c1d8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801c1dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c1e0:	f040 8098 	bne.w	801c314 <__kernel_rem_pio2f+0x30c>
 801c1e4:	1e7c      	subs	r4, r7, #1
 801c1e6:	4622      	mov	r2, r4
 801c1e8:	2000      	movs	r0, #0
 801c1ea:	455a      	cmp	r2, fp
 801c1ec:	da4c      	bge.n	801c288 <__kernel_rem_pio2f+0x280>
 801c1ee:	2800      	cmp	r0, #0
 801c1f0:	f000 8083 	beq.w	801c2fa <__kernel_rem_pio2f+0x2f2>
 801c1f4:	ab06      	add	r3, sp, #24
 801c1f6:	3d08      	subs	r5, #8
 801c1f8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801c1fc:	2b00      	cmp	r3, #0
 801c1fe:	f000 8087 	beq.w	801c310 <__kernel_rem_pio2f+0x308>
 801c202:	4629      	mov	r1, r5
 801c204:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 801c208:	f000 fc92 	bl	801cb30 <scalbnf>
 801c20c:	00a3      	lsls	r3, r4, #2
 801c20e:	aa42      	add	r2, sp, #264	; 0x108
 801c210:	441a      	add	r2, r3
 801c212:	eddf 6a55 	vldr	s13, [pc, #340]	; 801c368 <__kernel_rem_pio2f+0x360>
 801c216:	ee07 0a10 	vmov	s14, r0
 801c21a:	4621      	mov	r1, r4
 801c21c:	1d10      	adds	r0, r2, #4
 801c21e:	2900      	cmp	r1, #0
 801c220:	f280 80b3 	bge.w	801c38a <__kernel_rem_pio2f+0x382>
 801c224:	2000      	movs	r0, #0
 801c226:	1a21      	subs	r1, r4, r0
 801c228:	2900      	cmp	r1, #0
 801c22a:	f2c0 80d3 	blt.w	801c3d4 <__kernel_rem_pio2f+0x3cc>
 801c22e:	4d50      	ldr	r5, [pc, #320]	; (801c370 <__kernel_rem_pio2f+0x368>)
 801c230:	eddf 7a50 	vldr	s15, [pc, #320]	; 801c374 <__kernel_rem_pio2f+0x36c>
 801c234:	2100      	movs	r1, #0
 801c236:	e0c1      	b.n	801c3bc <__kernel_rem_pio2f+0x3b4>
 801c238:	2602      	movs	r6, #2
 801c23a:	e788      	b.n	801c14e <__kernel_rem_pio2f+0x146>
 801c23c:	aa06      	add	r2, sp, #24
 801c23e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 801c242:	b948      	cbnz	r0, 801c258 <__kernel_rem_pio2f+0x250>
 801c244:	b12a      	cbz	r2, 801c252 <__kernel_rem_pio2f+0x24a>
 801c246:	a806      	add	r0, sp, #24
 801c248:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801c24c:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
 801c250:	2201      	movs	r2, #1
 801c252:	3101      	adds	r1, #1
 801c254:	4610      	mov	r0, r2
 801c256:	e77e      	b.n	801c156 <__kernel_rem_pio2f+0x14e>
 801c258:	ac06      	add	r4, sp, #24
 801c25a:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 801c25e:	f844 2021 	str.w	r2, [r4, r1, lsl #2]
 801c262:	4602      	mov	r2, r0
 801c264:	e7f5      	b.n	801c252 <__kernel_rem_pio2f+0x24a>
 801c266:	1e79      	subs	r1, r7, #1
 801c268:	aa06      	add	r2, sp, #24
 801c26a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 801c26e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801c272:	ac06      	add	r4, sp, #24
 801c274:	f844 2021 	str.w	r2, [r4, r1, lsl #2]
 801c278:	e777      	b.n	801c16a <__kernel_rem_pio2f+0x162>
 801c27a:	1e79      	subs	r1, r7, #1
 801c27c:	aa06      	add	r2, sp, #24
 801c27e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 801c282:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 801c286:	e7f4      	b.n	801c272 <__kernel_rem_pio2f+0x26a>
 801c288:	a906      	add	r1, sp, #24
 801c28a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801c28e:	3a01      	subs	r2, #1
 801c290:	4308      	orrs	r0, r1
 801c292:	e7aa      	b.n	801c1ea <__kernel_rem_pio2f+0x1e2>
 801c294:	3601      	adds	r6, #1
 801c296:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801c29a:	2900      	cmp	r1, #0
 801c29c:	d0fa      	beq.n	801c294 <__kernel_rem_pio2f+0x28c>
 801c29e:	9a01      	ldr	r2, [sp, #4]
 801c2a0:	19d0      	adds	r0, r2, r7
 801c2a2:	0080      	lsls	r0, r0, #2
 801c2a4:	aa1a      	add	r2, sp, #104	; 0x68
 801c2a6:	1884      	adds	r4, r0, r2
 801c2a8:	1c79      	adds	r1, r7, #1
 801c2aa:	f109 0904 	add.w	r9, r9, #4
 801c2ae:	2200      	movs	r2, #0
 801c2b0:	4437      	add	r7, r6
 801c2b2:	f104 0a04 	add.w	sl, r4, #4
 801c2b6:	428f      	cmp	r7, r1
 801c2b8:	f6ff af02 	blt.w	801c0c0 <__kernel_rem_pio2f+0xb8>
 801c2bc:	ac1a      	add	r4, sp, #104	; 0x68
 801c2be:	1816      	adds	r6, r2, r0
 801c2c0:	4426      	add	r6, r4
 801c2c2:	9c03      	ldr	r4, [sp, #12]
 801c2c4:	f8dd c008 	ldr.w	ip, [sp, #8]
 801c2c8:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 801c2cc:	9405      	str	r4, [sp, #20]
 801c2ce:	ee07 4a90 	vmov	s15, r4
 801c2d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c2d6:	eb0a 0e02 	add.w	lr, sl, r2
 801c2da:	edc6 7a00 	vstr	s15, [r6]
 801c2de:	eddf 7a25 	vldr	s15, [pc, #148]	; 801c374 <__kernel_rem_pio2f+0x36c>
 801c2e2:	2600      	movs	r6, #0
 801c2e4:	429e      	cmp	r6, r3
 801c2e6:	dd0b      	ble.n	801c300 <__kernel_rem_pio2f+0x2f8>
 801c2e8:	eb02 0609 	add.w	r6, r2, r9
 801c2ec:	ac42      	add	r4, sp, #264	; 0x108
 801c2ee:	4426      	add	r6, r4
 801c2f0:	edc6 7a01 	vstr	s15, [r6, #4]
 801c2f4:	3101      	adds	r1, #1
 801c2f6:	3204      	adds	r2, #4
 801c2f8:	e7dd      	b.n	801c2b6 <__kernel_rem_pio2f+0x2ae>
 801c2fa:	9a04      	ldr	r2, [sp, #16]
 801c2fc:	2601      	movs	r6, #1
 801c2fe:	e7ca      	b.n	801c296 <__kernel_rem_pio2f+0x28e>
 801c300:	ecfc 6a01 	vldmia	ip!, {s13}
 801c304:	ed3e 7a01 	vldmdb	lr!, {s14}
 801c308:	3601      	adds	r6, #1
 801c30a:	eee6 7a87 	vfma.f32	s15, s13, s14
 801c30e:	e7e9      	b.n	801c2e4 <__kernel_rem_pio2f+0x2dc>
 801c310:	3c01      	subs	r4, #1
 801c312:	e76f      	b.n	801c1f4 <__kernel_rem_pio2f+0x1ec>
 801c314:	4269      	negs	r1, r5
 801c316:	ee18 0a10 	vmov	r0, s16
 801c31a:	f000 fc09 	bl	801cb30 <scalbnf>
 801c31e:	eddf 6a13 	vldr	s13, [pc, #76]	; 801c36c <__kernel_rem_pio2f+0x364>
 801c322:	ee07 0a10 	vmov	s14, r0
 801c326:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801c32a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c32e:	db23      	blt.n	801c378 <__kernel_rem_pio2f+0x370>
 801c330:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801c368 <__kernel_rem_pio2f+0x360>
 801c334:	ee67 7a27 	vmul.f32	s15, s14, s15
 801c338:	aa06      	add	r2, sp, #24
 801c33a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c33e:	1c7c      	adds	r4, r7, #1
 801c340:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c344:	3508      	adds	r5, #8
 801c346:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801c34a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c34e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801c352:	ee17 3a10 	vmov	r3, s14
 801c356:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 801c35a:	ee17 3a90 	vmov	r3, s15
 801c35e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801c362:	e74e      	b.n	801c202 <__kernel_rem_pio2f+0x1fa>
 801c364:	0801d638 	.word	0x0801d638
 801c368:	3b800000 	.word	0x3b800000
 801c36c:	43800000 	.word	0x43800000
 801c370:	0801d60c 	.word	0x0801d60c
 801c374:	00000000 	.word	0x00000000
 801c378:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801c37c:	aa06      	add	r2, sp, #24
 801c37e:	ee17 3a10 	vmov	r3, s14
 801c382:	463c      	mov	r4, r7
 801c384:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 801c388:	e73b      	b.n	801c202 <__kernel_rem_pio2f+0x1fa>
 801c38a:	ad06      	add	r5, sp, #24
 801c38c:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 801c390:	9501      	str	r5, [sp, #4]
 801c392:	ee07 5a90 	vmov	s15, r5
 801c396:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c39a:	3901      	subs	r1, #1
 801c39c:	ee67 7a87 	vmul.f32	s15, s15, s14
 801c3a0:	ee27 7a26 	vmul.f32	s14, s14, s13
 801c3a4:	ed60 7a01 	vstmdb	r0!, {s15}
 801c3a8:	e739      	b.n	801c21e <__kernel_rem_pio2f+0x216>
 801c3aa:	eb02 0781 	add.w	r7, r2, r1, lsl #2
 801c3ae:	ecf5 6a01 	vldmia	r5!, {s13}
 801c3b2:	ed97 7a00 	vldr	s14, [r7]
 801c3b6:	eee6 7a87 	vfma.f32	s15, s13, s14
 801c3ba:	3101      	adds	r1, #1
 801c3bc:	4559      	cmp	r1, fp
 801c3be:	dc01      	bgt.n	801c3c4 <__kernel_rem_pio2f+0x3bc>
 801c3c0:	4288      	cmp	r0, r1
 801c3c2:	daf2      	bge.n	801c3aa <__kernel_rem_pio2f+0x3a2>
 801c3c4:	a956      	add	r1, sp, #344	; 0x158
 801c3c6:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 801c3ca:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 801c3ce:	3001      	adds	r0, #1
 801c3d0:	3a04      	subs	r2, #4
 801c3d2:	e728      	b.n	801c226 <__kernel_rem_pio2f+0x21e>
 801c3d4:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801c3d6:	2a03      	cmp	r2, #3
 801c3d8:	d846      	bhi.n	801c468 <__kernel_rem_pio2f+0x460>
 801c3da:	e8df f002 	tbb	[pc, r2]
 801c3de:	1e39      	.short	0x1e39
 801c3e0:	021e      	.short	0x021e
 801c3e2:	aa56      	add	r2, sp, #344	; 0x158
 801c3e4:	4413      	add	r3, r2
 801c3e6:	3b9c      	subs	r3, #156	; 0x9c
 801c3e8:	461a      	mov	r2, r3
 801c3ea:	4621      	mov	r1, r4
 801c3ec:	2900      	cmp	r1, #0
 801c3ee:	dc57      	bgt.n	801c4a0 <__kernel_rem_pio2f+0x498>
 801c3f0:	461a      	mov	r2, r3
 801c3f2:	4621      	mov	r1, r4
 801c3f4:	2901      	cmp	r1, #1
 801c3f6:	dc63      	bgt.n	801c4c0 <__kernel_rem_pio2f+0x4b8>
 801c3f8:	ed5f 7a22 	vldr	s15, [pc, #-136]	; 801c374 <__kernel_rem_pio2f+0x36c>
 801c3fc:	2c01      	cmp	r4, #1
 801c3fe:	dc6f      	bgt.n	801c4e0 <__kernel_rem_pio2f+0x4d8>
 801c400:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 801c404:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 801c408:	2e00      	cmp	r6, #0
 801c40a:	d16f      	bne.n	801c4ec <__kernel_rem_pio2f+0x4e4>
 801c40c:	edc8 6a00 	vstr	s13, [r8]
 801c410:	ed88 7a01 	vstr	s14, [r8, #4]
 801c414:	edc8 7a02 	vstr	s15, [r8, #8]
 801c418:	e026      	b.n	801c468 <__kernel_rem_pio2f+0x460>
 801c41a:	aa56      	add	r2, sp, #344	; 0x158
 801c41c:	4413      	add	r3, r2
 801c41e:	ed1f 7a2b 	vldr	s14, [pc, #-172]	; 801c374 <__kernel_rem_pio2f+0x36c>
 801c422:	3b9c      	subs	r3, #156	; 0x9c
 801c424:	4622      	mov	r2, r4
 801c426:	2a00      	cmp	r2, #0
 801c428:	da2b      	bge.n	801c482 <__kernel_rem_pio2f+0x47a>
 801c42a:	b386      	cbz	r6, 801c48e <__kernel_rem_pio2f+0x486>
 801c42c:	eef1 7a47 	vneg.f32	s15, s14
 801c430:	edc8 7a00 	vstr	s15, [r8]
 801c434:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 801c438:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801c43c:	aa2f      	add	r2, sp, #188	; 0xbc
 801c43e:	2301      	movs	r3, #1
 801c440:	429c      	cmp	r4, r3
 801c442:	da27      	bge.n	801c494 <__kernel_rem_pio2f+0x48c>
 801c444:	b10e      	cbz	r6, 801c44a <__kernel_rem_pio2f+0x442>
 801c446:	eef1 7a67 	vneg.f32	s15, s15
 801c44a:	edc8 7a01 	vstr	s15, [r8, #4]
 801c44e:	e00b      	b.n	801c468 <__kernel_rem_pio2f+0x460>
 801c450:	aa56      	add	r2, sp, #344	; 0x158
 801c452:	4413      	add	r3, r2
 801c454:	ed5f 7a39 	vldr	s15, [pc, #-228]	; 801c374 <__kernel_rem_pio2f+0x36c>
 801c458:	3b9c      	subs	r3, #156	; 0x9c
 801c45a:	2c00      	cmp	r4, #0
 801c45c:	da0b      	bge.n	801c476 <__kernel_rem_pio2f+0x46e>
 801c45e:	b10e      	cbz	r6, 801c464 <__kernel_rem_pio2f+0x45c>
 801c460:	eef1 7a67 	vneg.f32	s15, s15
 801c464:	edc8 7a00 	vstr	s15, [r8]
 801c468:	f00a 0007 	and.w	r0, sl, #7
 801c46c:	b057      	add	sp, #348	; 0x15c
 801c46e:	ecbd 8b04 	vpop	{d8-d9}
 801c472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c476:	ed33 7a01 	vldmdb	r3!, {s14}
 801c47a:	3c01      	subs	r4, #1
 801c47c:	ee77 7a87 	vadd.f32	s15, s15, s14
 801c480:	e7eb      	b.n	801c45a <__kernel_rem_pio2f+0x452>
 801c482:	ed73 7a01 	vldmdb	r3!, {s15}
 801c486:	3a01      	subs	r2, #1
 801c488:	ee37 7a27 	vadd.f32	s14, s14, s15
 801c48c:	e7cb      	b.n	801c426 <__kernel_rem_pio2f+0x41e>
 801c48e:	eef0 7a47 	vmov.f32	s15, s14
 801c492:	e7cd      	b.n	801c430 <__kernel_rem_pio2f+0x428>
 801c494:	ecb2 7a01 	vldmia	r2!, {s14}
 801c498:	3301      	adds	r3, #1
 801c49a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801c49e:	e7cf      	b.n	801c440 <__kernel_rem_pio2f+0x438>
 801c4a0:	ed52 7a02 	vldr	s15, [r2, #-8]
 801c4a4:	ed72 6a01 	vldmdb	r2!, {s13}
 801c4a8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801c4ac:	3901      	subs	r1, #1
 801c4ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801c4b2:	ed02 7a01 	vstr	s14, [r2, #-4]
 801c4b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801c4ba:	edc2 7a00 	vstr	s15, [r2]
 801c4be:	e795      	b.n	801c3ec <__kernel_rem_pio2f+0x3e4>
 801c4c0:	ed52 7a02 	vldr	s15, [r2, #-8]
 801c4c4:	ed72 6a01 	vldmdb	r2!, {s13}
 801c4c8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801c4cc:	3901      	subs	r1, #1
 801c4ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801c4d2:	ed02 7a01 	vstr	s14, [r2, #-4]
 801c4d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801c4da:	edc2 7a00 	vstr	s15, [r2]
 801c4de:	e789      	b.n	801c3f4 <__kernel_rem_pio2f+0x3ec>
 801c4e0:	ed33 7a01 	vldmdb	r3!, {s14}
 801c4e4:	3c01      	subs	r4, #1
 801c4e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 801c4ea:	e787      	b.n	801c3fc <__kernel_rem_pio2f+0x3f4>
 801c4ec:	eef1 6a66 	vneg.f32	s13, s13
 801c4f0:	eeb1 7a47 	vneg.f32	s14, s14
 801c4f4:	edc8 6a00 	vstr	s13, [r8]
 801c4f8:	ed88 7a01 	vstr	s14, [r8, #4]
 801c4fc:	eef1 7a67 	vneg.f32	s15, s15
 801c500:	e788      	b.n	801c414 <__kernel_rem_pio2f+0x40c>
 801c502:	bf00      	nop

0801c504 <__kernel_sinf>:
 801c504:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 801c508:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801c50c:	ee07 0a90 	vmov	s15, r0
 801c510:	ee06 1a10 	vmov	s12, r1
 801c514:	da04      	bge.n	801c520 <__kernel_sinf+0x1c>
 801c516:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801c51a:	ee17 3a10 	vmov	r3, s14
 801c51e:	b1e3      	cbz	r3, 801c55a <__kernel_sinf+0x56>
 801c520:	ee67 6aa7 	vmul.f32	s13, s15, s15
 801c524:	ed9f 7a16 	vldr	s14, [pc, #88]	; 801c580 <__kernel_sinf+0x7c>
 801c528:	ed9f 5a16 	vldr	s10, [pc, #88]	; 801c584 <__kernel_sinf+0x80>
 801c52c:	eea6 5a87 	vfma.f32	s10, s13, s14
 801c530:	ed9f 7a15 	vldr	s14, [pc, #84]	; 801c588 <__kernel_sinf+0x84>
 801c534:	eea5 7a26 	vfma.f32	s14, s10, s13
 801c538:	ed9f 5a14 	vldr	s10, [pc, #80]	; 801c58c <__kernel_sinf+0x88>
 801c53c:	eea7 5a26 	vfma.f32	s10, s14, s13
 801c540:	ed9f 7a13 	vldr	s14, [pc, #76]	; 801c590 <__kernel_sinf+0x8c>
 801c544:	ee67 5aa6 	vmul.f32	s11, s15, s13
 801c548:	eea5 7a26 	vfma.f32	s14, s10, s13
 801c54c:	b942      	cbnz	r2, 801c560 <__kernel_sinf+0x5c>
 801c54e:	ed9f 6a11 	vldr	s12, [pc, #68]	; 801c594 <__kernel_sinf+0x90>
 801c552:	eea6 6a87 	vfma.f32	s12, s13, s14
 801c556:	eee6 7a25 	vfma.f32	s15, s12, s11
 801c55a:	ee17 0a90 	vmov	r0, s15
 801c55e:	4770      	bx	lr
 801c560:	ee27 7a65 	vnmul.f32	s14, s14, s11
 801c564:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 801c568:	eea6 7a05 	vfma.f32	s14, s12, s10
 801c56c:	ee97 6a26 	vfnms.f32	s12, s14, s13
 801c570:	ed9f 7a09 	vldr	s14, [pc, #36]	; 801c598 <__kernel_sinf+0x94>
 801c574:	eea5 6a87 	vfma.f32	s12, s11, s14
 801c578:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801c57c:	e7ed      	b.n	801c55a <__kernel_sinf+0x56>
 801c57e:	bf00      	nop
 801c580:	2f2ec9d3 	.word	0x2f2ec9d3
 801c584:	b2d72f34 	.word	0xb2d72f34
 801c588:	3638ef1b 	.word	0x3638ef1b
 801c58c:	b9500d01 	.word	0xb9500d01
 801c590:	3c088889 	.word	0x3c088889
 801c594:	be2aaaab 	.word	0xbe2aaaab
 801c598:	3e2aaaab 	.word	0x3e2aaaab

0801c59c <__kernel_tanf>:
 801c59c:	ee07 1a10 	vmov	s14, r1
 801c5a0:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
 801c5a4:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 801c5a8:	b510      	push	{r4, lr}
 801c5aa:	ee07 0a90 	vmov	s15, r0
 801c5ae:	4603      	mov	r3, r0
 801c5b0:	da17      	bge.n	801c5e2 <__kernel_tanf+0x46>
 801c5b2:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 801c5b6:	ee16 4a90 	vmov	r4, s13
 801c5ba:	bb44      	cbnz	r4, 801c60e <__kernel_tanf+0x72>
 801c5bc:	1c53      	adds	r3, r2, #1
 801c5be:	430b      	orrs	r3, r1
 801c5c0:	d10a      	bne.n	801c5d8 <__kernel_tanf+0x3c>
 801c5c2:	f000 fa6d 	bl	801caa0 <fabsf>
 801c5c6:	ee07 0a90 	vmov	s15, r0
 801c5ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c5ce:	eec7 7a27 	vdiv.f32	s15, s14, s15
 801c5d2:	ee17 0a90 	vmov	r0, s15
 801c5d6:	bd10      	pop	{r4, pc}
 801c5d8:	2a01      	cmp	r2, #1
 801c5da:	d0fa      	beq.n	801c5d2 <__kernel_tanf+0x36>
 801c5dc:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801c5e0:	e7f5      	b.n	801c5ce <__kernel_tanf+0x32>
 801c5e2:	484f      	ldr	r0, [pc, #316]	; (801c720 <__kernel_tanf+0x184>)
 801c5e4:	4281      	cmp	r1, r0
 801c5e6:	dd12      	ble.n	801c60e <__kernel_tanf+0x72>
 801c5e8:	2b00      	cmp	r3, #0
 801c5ea:	eddf 6a4e 	vldr	s13, [pc, #312]	; 801c724 <__kernel_tanf+0x188>
 801c5ee:	bfb8      	it	lt
 801c5f0:	eef1 7a67 	vneglt.f32	s15, s15
 801c5f4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801c5f8:	eddf 6a4b 	vldr	s13, [pc, #300]	; 801c728 <__kernel_tanf+0x18c>
 801c5fc:	bfb8      	it	lt
 801c5fe:	eeb1 7a47 	vneglt.f32	s14, s14
 801c602:	ee36 7ac7 	vsub.f32	s14, s13, s14
 801c606:	ee77 7a27 	vadd.f32	s15, s14, s15
 801c60a:	ed9f 7a48 	vldr	s14, [pc, #288]	; 801c72c <__kernel_tanf+0x190>
 801c60e:	eddf 5a48 	vldr	s11, [pc, #288]	; 801c730 <__kernel_tanf+0x194>
 801c612:	ed9f 5a48 	vldr	s10, [pc, #288]	; 801c734 <__kernel_tanf+0x198>
 801c616:	eddf 4a48 	vldr	s9, [pc, #288]	; 801c738 <__kernel_tanf+0x19c>
 801c61a:	4841      	ldr	r0, [pc, #260]	; (801c720 <__kernel_tanf+0x184>)
 801c61c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 801c620:	4281      	cmp	r1, r0
 801c622:	ee66 6a06 	vmul.f32	s13, s12, s12
 801c626:	ee27 4a86 	vmul.f32	s8, s15, s12
 801c62a:	eea6 5aa5 	vfma.f32	s10, s13, s11
 801c62e:	eddf 5a43 	vldr	s11, [pc, #268]	; 801c73c <__kernel_tanf+0x1a0>
 801c632:	eee5 5a26 	vfma.f32	s11, s10, s13
 801c636:	ed9f 5a42 	vldr	s10, [pc, #264]	; 801c740 <__kernel_tanf+0x1a4>
 801c63a:	eea5 5aa6 	vfma.f32	s10, s11, s13
 801c63e:	eddf 5a41 	vldr	s11, [pc, #260]	; 801c744 <__kernel_tanf+0x1a8>
 801c642:	eee5 5a26 	vfma.f32	s11, s10, s13
 801c646:	ed9f 5a40 	vldr	s10, [pc, #256]	; 801c748 <__kernel_tanf+0x1ac>
 801c64a:	eea5 5aa6 	vfma.f32	s10, s11, s13
 801c64e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 801c74c <__kernel_tanf+0x1b0>
 801c652:	eee6 5aa4 	vfma.f32	s11, s13, s9
 801c656:	eddf 4a3e 	vldr	s9, [pc, #248]	; 801c750 <__kernel_tanf+0x1b4>
 801c65a:	eee5 4aa6 	vfma.f32	s9, s11, s13
 801c65e:	eddf 5a3d 	vldr	s11, [pc, #244]	; 801c754 <__kernel_tanf+0x1b8>
 801c662:	eee4 5aa6 	vfma.f32	s11, s9, s13
 801c666:	eddf 4a3c 	vldr	s9, [pc, #240]	; 801c758 <__kernel_tanf+0x1bc>
 801c66a:	eee5 4aa6 	vfma.f32	s9, s11, s13
 801c66e:	eddf 5a3b 	vldr	s11, [pc, #236]	; 801c75c <__kernel_tanf+0x1c0>
 801c672:	eee4 5aa6 	vfma.f32	s11, s9, s13
 801c676:	eef0 6a65 	vmov.f32	s13, s11
 801c67a:	eee5 6a06 	vfma.f32	s13, s10, s12
 801c67e:	eef0 5a47 	vmov.f32	s11, s14
 801c682:	eee6 5a84 	vfma.f32	s11, s13, s8
 801c686:	eddf 6a36 	vldr	s13, [pc, #216]	; 801c760 <__kernel_tanf+0x1c4>
 801c68a:	eea5 7a86 	vfma.f32	s14, s11, s12
 801c68e:	eea4 7a26 	vfma.f32	s14, s8, s13
 801c692:	ee37 6a87 	vadd.f32	s12, s15, s14
 801c696:	dd1d      	ble.n	801c6d4 <__kernel_tanf+0x138>
 801c698:	ee06 2a90 	vmov	s13, r2
 801c69c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801c6a0:	ee26 5a06 	vmul.f32	s10, s12, s12
 801c6a4:	ee36 6a26 	vadd.f32	s12, s12, s13
 801c6a8:	179b      	asrs	r3, r3, #30
 801c6aa:	eec5 5a06 	vdiv.f32	s11, s10, s12
 801c6ae:	f003 0302 	and.w	r3, r3, #2
 801c6b2:	f1c3 0301 	rsb	r3, r3, #1
 801c6b6:	ee35 7ac7 	vsub.f32	s14, s11, s14
 801c6ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801c6be:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 801c6c2:	eee7 6ac7 	vfms.f32	s13, s15, s14
 801c6c6:	ee07 3a90 	vmov	s15, r3
 801c6ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c6ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801c6d2:	e77e      	b.n	801c5d2 <__kernel_tanf+0x36>
 801c6d4:	2a01      	cmp	r2, #1
 801c6d6:	d01f      	beq.n	801c718 <__kernel_tanf+0x17c>
 801c6d8:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 801c6dc:	ee86 5a86 	vdiv.f32	s10, s13, s12
 801c6e0:	4b20      	ldr	r3, [pc, #128]	; (801c764 <__kernel_tanf+0x1c8>)
 801c6e2:	ee16 2a10 	vmov	r2, s12
 801c6e6:	401a      	ands	r2, r3
 801c6e8:	ee05 2a90 	vmov	s11, r2
 801c6ec:	ee15 2a10 	vmov	r2, s10
 801c6f0:	4013      	ands	r3, r2
 801c6f2:	ee06 3a90 	vmov	s13, r3
 801c6f6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801c6fa:	eea5 6aa6 	vfma.f32	s12, s11, s13
 801c6fe:	ee75 7ae7 	vsub.f32	s15, s11, s15
 801c702:	ee37 7a67 	vsub.f32	s14, s14, s15
 801c706:	eef0 7a46 	vmov.f32	s15, s12
 801c70a:	eee6 7a87 	vfma.f32	s15, s13, s14
 801c70e:	eee7 6a85 	vfma.f32	s13, s15, s10
 801c712:	eef0 7a66 	vmov.f32	s15, s13
 801c716:	e75c      	b.n	801c5d2 <__kernel_tanf+0x36>
 801c718:	eef0 7a46 	vmov.f32	s15, s12
 801c71c:	e759      	b.n	801c5d2 <__kernel_tanf+0x36>
 801c71e:	bf00      	nop
 801c720:	3f2ca13f 	.word	0x3f2ca13f
 801c724:	3f490fda 	.word	0x3f490fda
 801c728:	33222168 	.word	0x33222168
 801c72c:	00000000 	.word	0x00000000
 801c730:	37d95384 	.word	0x37d95384
 801c734:	3895c07a 	.word	0x3895c07a
 801c738:	b79bae5f 	.word	0xb79bae5f
 801c73c:	398137b9 	.word	0x398137b9
 801c740:	3abede48 	.word	0x3abede48
 801c744:	3c11371f 	.word	0x3c11371f
 801c748:	3d5d0dd1 	.word	0x3d5d0dd1
 801c74c:	38a3f445 	.word	0x38a3f445
 801c750:	3a1a26c8 	.word	0x3a1a26c8
 801c754:	3b6b6916 	.word	0x3b6b6916
 801c758:	3cb327a4 	.word	0x3cb327a4
 801c75c:	3e088889 	.word	0x3e088889
 801c760:	3eaaaaab 	.word	0x3eaaaaab
 801c764:	fffff000 	.word	0xfffff000

0801c768 <atan>:
 801c768:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c76c:	4bbc      	ldr	r3, [pc, #752]	; (801ca60 <atan+0x2f8>)
 801c76e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801c772:	429e      	cmp	r6, r3
 801c774:	4604      	mov	r4, r0
 801c776:	460d      	mov	r5, r1
 801c778:	468b      	mov	fp, r1
 801c77a:	dd18      	ble.n	801c7ae <atan+0x46>
 801c77c:	4bb9      	ldr	r3, [pc, #740]	; (801ca64 <atan+0x2fc>)
 801c77e:	429e      	cmp	r6, r3
 801c780:	dc01      	bgt.n	801c786 <atan+0x1e>
 801c782:	d109      	bne.n	801c798 <atan+0x30>
 801c784:	b140      	cbz	r0, 801c798 <atan+0x30>
 801c786:	4622      	mov	r2, r4
 801c788:	462b      	mov	r3, r5
 801c78a:	4620      	mov	r0, r4
 801c78c:	4629      	mov	r1, r5
 801c78e:	f7e3 fd85 	bl	800029c <__adddf3>
 801c792:	4604      	mov	r4, r0
 801c794:	460d      	mov	r5, r1
 801c796:	e006      	b.n	801c7a6 <atan+0x3e>
 801c798:	f1bb 0f00 	cmp.w	fp, #0
 801c79c:	f340 8123 	ble.w	801c9e6 <atan+0x27e>
 801c7a0:	a593      	add	r5, pc, #588	; (adr r5, 801c9f0 <atan+0x288>)
 801c7a2:	e9d5 4500 	ldrd	r4, r5, [r5]
 801c7a6:	4620      	mov	r0, r4
 801c7a8:	4629      	mov	r1, r5
 801c7aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c7ae:	4bae      	ldr	r3, [pc, #696]	; (801ca68 <atan+0x300>)
 801c7b0:	429e      	cmp	r6, r3
 801c7b2:	dc11      	bgt.n	801c7d8 <atan+0x70>
 801c7b4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 801c7b8:	429e      	cmp	r6, r3
 801c7ba:	dc0a      	bgt.n	801c7d2 <atan+0x6a>
 801c7bc:	a38e      	add	r3, pc, #568	; (adr r3, 801c9f8 <atan+0x290>)
 801c7be:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c7c2:	f7e3 fd6b 	bl	800029c <__adddf3>
 801c7c6:	2200      	movs	r2, #0
 801c7c8:	4ba8      	ldr	r3, [pc, #672]	; (801ca6c <atan+0x304>)
 801c7ca:	f7e4 f9ad 	bl	8000b28 <__aeabi_dcmpgt>
 801c7ce:	2800      	cmp	r0, #0
 801c7d0:	d1e9      	bne.n	801c7a6 <atan+0x3e>
 801c7d2:	f04f 3aff 	mov.w	sl, #4294967295
 801c7d6:	e027      	b.n	801c828 <atan+0xc0>
 801c7d8:	f000 f956 	bl	801ca88 <fabs>
 801c7dc:	4ba4      	ldr	r3, [pc, #656]	; (801ca70 <atan+0x308>)
 801c7de:	429e      	cmp	r6, r3
 801c7e0:	4604      	mov	r4, r0
 801c7e2:	460d      	mov	r5, r1
 801c7e4:	f300 80b8 	bgt.w	801c958 <atan+0x1f0>
 801c7e8:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801c7ec:	429e      	cmp	r6, r3
 801c7ee:	f300 809c 	bgt.w	801c92a <atan+0x1c2>
 801c7f2:	4602      	mov	r2, r0
 801c7f4:	460b      	mov	r3, r1
 801c7f6:	f7e3 fd51 	bl	800029c <__adddf3>
 801c7fa:	2200      	movs	r2, #0
 801c7fc:	4b9b      	ldr	r3, [pc, #620]	; (801ca6c <atan+0x304>)
 801c7fe:	f7e3 fd4b 	bl	8000298 <__aeabi_dsub>
 801c802:	2200      	movs	r2, #0
 801c804:	4606      	mov	r6, r0
 801c806:	460f      	mov	r7, r1
 801c808:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801c80c:	4620      	mov	r0, r4
 801c80e:	4629      	mov	r1, r5
 801c810:	f7e3 fd44 	bl	800029c <__adddf3>
 801c814:	4602      	mov	r2, r0
 801c816:	460b      	mov	r3, r1
 801c818:	4630      	mov	r0, r6
 801c81a:	4639      	mov	r1, r7
 801c81c:	f7e4 f81e 	bl	800085c <__aeabi_ddiv>
 801c820:	f04f 0a00 	mov.w	sl, #0
 801c824:	4604      	mov	r4, r0
 801c826:	460d      	mov	r5, r1
 801c828:	4622      	mov	r2, r4
 801c82a:	462b      	mov	r3, r5
 801c82c:	4620      	mov	r0, r4
 801c82e:	4629      	mov	r1, r5
 801c830:	f7e3 feea 	bl	8000608 <__aeabi_dmul>
 801c834:	4602      	mov	r2, r0
 801c836:	460b      	mov	r3, r1
 801c838:	4680      	mov	r8, r0
 801c83a:	4689      	mov	r9, r1
 801c83c:	f7e3 fee4 	bl	8000608 <__aeabi_dmul>
 801c840:	a36f      	add	r3, pc, #444	; (adr r3, 801ca00 <atan+0x298>)
 801c842:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c846:	4606      	mov	r6, r0
 801c848:	460f      	mov	r7, r1
 801c84a:	f7e3 fedd 	bl	8000608 <__aeabi_dmul>
 801c84e:	a36e      	add	r3, pc, #440	; (adr r3, 801ca08 <atan+0x2a0>)
 801c850:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c854:	f7e3 fd22 	bl	800029c <__adddf3>
 801c858:	4632      	mov	r2, r6
 801c85a:	463b      	mov	r3, r7
 801c85c:	f7e3 fed4 	bl	8000608 <__aeabi_dmul>
 801c860:	a36b      	add	r3, pc, #428	; (adr r3, 801ca10 <atan+0x2a8>)
 801c862:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c866:	f7e3 fd19 	bl	800029c <__adddf3>
 801c86a:	4632      	mov	r2, r6
 801c86c:	463b      	mov	r3, r7
 801c86e:	f7e3 fecb 	bl	8000608 <__aeabi_dmul>
 801c872:	a369      	add	r3, pc, #420	; (adr r3, 801ca18 <atan+0x2b0>)
 801c874:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c878:	f7e3 fd10 	bl	800029c <__adddf3>
 801c87c:	4632      	mov	r2, r6
 801c87e:	463b      	mov	r3, r7
 801c880:	f7e3 fec2 	bl	8000608 <__aeabi_dmul>
 801c884:	a366      	add	r3, pc, #408	; (adr r3, 801ca20 <atan+0x2b8>)
 801c886:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c88a:	f7e3 fd07 	bl	800029c <__adddf3>
 801c88e:	4632      	mov	r2, r6
 801c890:	463b      	mov	r3, r7
 801c892:	f7e3 feb9 	bl	8000608 <__aeabi_dmul>
 801c896:	a364      	add	r3, pc, #400	; (adr r3, 801ca28 <atan+0x2c0>)
 801c898:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c89c:	f7e3 fcfe 	bl	800029c <__adddf3>
 801c8a0:	4642      	mov	r2, r8
 801c8a2:	464b      	mov	r3, r9
 801c8a4:	f7e3 feb0 	bl	8000608 <__aeabi_dmul>
 801c8a8:	a361      	add	r3, pc, #388	; (adr r3, 801ca30 <atan+0x2c8>)
 801c8aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c8ae:	4680      	mov	r8, r0
 801c8b0:	4689      	mov	r9, r1
 801c8b2:	4630      	mov	r0, r6
 801c8b4:	4639      	mov	r1, r7
 801c8b6:	f7e3 fea7 	bl	8000608 <__aeabi_dmul>
 801c8ba:	a35f      	add	r3, pc, #380	; (adr r3, 801ca38 <atan+0x2d0>)
 801c8bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c8c0:	f7e3 fcea 	bl	8000298 <__aeabi_dsub>
 801c8c4:	4632      	mov	r2, r6
 801c8c6:	463b      	mov	r3, r7
 801c8c8:	f7e3 fe9e 	bl	8000608 <__aeabi_dmul>
 801c8cc:	a35c      	add	r3, pc, #368	; (adr r3, 801ca40 <atan+0x2d8>)
 801c8ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c8d2:	f7e3 fce1 	bl	8000298 <__aeabi_dsub>
 801c8d6:	4632      	mov	r2, r6
 801c8d8:	463b      	mov	r3, r7
 801c8da:	f7e3 fe95 	bl	8000608 <__aeabi_dmul>
 801c8de:	a35a      	add	r3, pc, #360	; (adr r3, 801ca48 <atan+0x2e0>)
 801c8e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c8e4:	f7e3 fcd8 	bl	8000298 <__aeabi_dsub>
 801c8e8:	4632      	mov	r2, r6
 801c8ea:	463b      	mov	r3, r7
 801c8ec:	f7e3 fe8c 	bl	8000608 <__aeabi_dmul>
 801c8f0:	a357      	add	r3, pc, #348	; (adr r3, 801ca50 <atan+0x2e8>)
 801c8f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c8f6:	f7e3 fccf 	bl	8000298 <__aeabi_dsub>
 801c8fa:	4632      	mov	r2, r6
 801c8fc:	463b      	mov	r3, r7
 801c8fe:	f7e3 fe83 	bl	8000608 <__aeabi_dmul>
 801c902:	4602      	mov	r2, r0
 801c904:	460b      	mov	r3, r1
 801c906:	4640      	mov	r0, r8
 801c908:	4649      	mov	r1, r9
 801c90a:	f7e3 fcc7 	bl	800029c <__adddf3>
 801c90e:	4622      	mov	r2, r4
 801c910:	462b      	mov	r3, r5
 801c912:	f7e3 fe79 	bl	8000608 <__aeabi_dmul>
 801c916:	f1ba 3fff 	cmp.w	sl, #4294967295
 801c91a:	4602      	mov	r2, r0
 801c91c:	460b      	mov	r3, r1
 801c91e:	d144      	bne.n	801c9aa <atan+0x242>
 801c920:	4620      	mov	r0, r4
 801c922:	4629      	mov	r1, r5
 801c924:	f7e3 fcb8 	bl	8000298 <__aeabi_dsub>
 801c928:	e733      	b.n	801c792 <atan+0x2a>
 801c92a:	2200      	movs	r2, #0
 801c92c:	4b4f      	ldr	r3, [pc, #316]	; (801ca6c <atan+0x304>)
 801c92e:	f7e3 fcb3 	bl	8000298 <__aeabi_dsub>
 801c932:	2200      	movs	r2, #0
 801c934:	4606      	mov	r6, r0
 801c936:	460f      	mov	r7, r1
 801c938:	4b4c      	ldr	r3, [pc, #304]	; (801ca6c <atan+0x304>)
 801c93a:	4620      	mov	r0, r4
 801c93c:	4629      	mov	r1, r5
 801c93e:	f7e3 fcad 	bl	800029c <__adddf3>
 801c942:	4602      	mov	r2, r0
 801c944:	460b      	mov	r3, r1
 801c946:	4630      	mov	r0, r6
 801c948:	4639      	mov	r1, r7
 801c94a:	f7e3 ff87 	bl	800085c <__aeabi_ddiv>
 801c94e:	f04f 0a01 	mov.w	sl, #1
 801c952:	4604      	mov	r4, r0
 801c954:	460d      	mov	r5, r1
 801c956:	e767      	b.n	801c828 <atan+0xc0>
 801c958:	4b46      	ldr	r3, [pc, #280]	; (801ca74 <atan+0x30c>)
 801c95a:	429e      	cmp	r6, r3
 801c95c:	dc1a      	bgt.n	801c994 <atan+0x22c>
 801c95e:	2200      	movs	r2, #0
 801c960:	4b45      	ldr	r3, [pc, #276]	; (801ca78 <atan+0x310>)
 801c962:	f7e3 fc99 	bl	8000298 <__aeabi_dsub>
 801c966:	2200      	movs	r2, #0
 801c968:	4606      	mov	r6, r0
 801c96a:	460f      	mov	r7, r1
 801c96c:	4b42      	ldr	r3, [pc, #264]	; (801ca78 <atan+0x310>)
 801c96e:	4620      	mov	r0, r4
 801c970:	4629      	mov	r1, r5
 801c972:	f7e3 fe49 	bl	8000608 <__aeabi_dmul>
 801c976:	2200      	movs	r2, #0
 801c978:	4b3c      	ldr	r3, [pc, #240]	; (801ca6c <atan+0x304>)
 801c97a:	f7e3 fc8f 	bl	800029c <__adddf3>
 801c97e:	4602      	mov	r2, r0
 801c980:	460b      	mov	r3, r1
 801c982:	4630      	mov	r0, r6
 801c984:	4639      	mov	r1, r7
 801c986:	f7e3 ff69 	bl	800085c <__aeabi_ddiv>
 801c98a:	f04f 0a02 	mov.w	sl, #2
 801c98e:	4604      	mov	r4, r0
 801c990:	460d      	mov	r5, r1
 801c992:	e749      	b.n	801c828 <atan+0xc0>
 801c994:	4602      	mov	r2, r0
 801c996:	460b      	mov	r3, r1
 801c998:	2000      	movs	r0, #0
 801c99a:	4938      	ldr	r1, [pc, #224]	; (801ca7c <atan+0x314>)
 801c99c:	f7e3 ff5e 	bl	800085c <__aeabi_ddiv>
 801c9a0:	f04f 0a03 	mov.w	sl, #3
 801c9a4:	4604      	mov	r4, r0
 801c9a6:	460d      	mov	r5, r1
 801c9a8:	e73e      	b.n	801c828 <atan+0xc0>
 801c9aa:	4b35      	ldr	r3, [pc, #212]	; (801ca80 <atan+0x318>)
 801c9ac:	4e35      	ldr	r6, [pc, #212]	; (801ca84 <atan+0x31c>)
 801c9ae:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 801c9b2:	4456      	add	r6, sl
 801c9b4:	449a      	add	sl, r3
 801c9b6:	e9da 2300 	ldrd	r2, r3, [sl]
 801c9ba:	f7e3 fc6d 	bl	8000298 <__aeabi_dsub>
 801c9be:	4622      	mov	r2, r4
 801c9c0:	462b      	mov	r3, r5
 801c9c2:	f7e3 fc69 	bl	8000298 <__aeabi_dsub>
 801c9c6:	4602      	mov	r2, r0
 801c9c8:	460b      	mov	r3, r1
 801c9ca:	e9d6 0100 	ldrd	r0, r1, [r6]
 801c9ce:	f7e3 fc63 	bl	8000298 <__aeabi_dsub>
 801c9d2:	f1bb 0f00 	cmp.w	fp, #0
 801c9d6:	4604      	mov	r4, r0
 801c9d8:	460d      	mov	r5, r1
 801c9da:	f6bf aee4 	bge.w	801c7a6 <atan+0x3e>
 801c9de:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801c9e2:	461d      	mov	r5, r3
 801c9e4:	e6df      	b.n	801c7a6 <atan+0x3e>
 801c9e6:	a51c      	add	r5, pc, #112	; (adr r5, 801ca58 <atan+0x2f0>)
 801c9e8:	e9d5 4500 	ldrd	r4, r5, [r5]
 801c9ec:	e6db      	b.n	801c7a6 <atan+0x3e>
 801c9ee:	bf00      	nop
 801c9f0:	54442d18 	.word	0x54442d18
 801c9f4:	3ff921fb 	.word	0x3ff921fb
 801c9f8:	8800759c 	.word	0x8800759c
 801c9fc:	7e37e43c 	.word	0x7e37e43c
 801ca00:	e322da11 	.word	0xe322da11
 801ca04:	3f90ad3a 	.word	0x3f90ad3a
 801ca08:	24760deb 	.word	0x24760deb
 801ca0c:	3fa97b4b 	.word	0x3fa97b4b
 801ca10:	a0d03d51 	.word	0xa0d03d51
 801ca14:	3fb10d66 	.word	0x3fb10d66
 801ca18:	c54c206e 	.word	0xc54c206e
 801ca1c:	3fb745cd 	.word	0x3fb745cd
 801ca20:	920083ff 	.word	0x920083ff
 801ca24:	3fc24924 	.word	0x3fc24924
 801ca28:	5555550d 	.word	0x5555550d
 801ca2c:	3fd55555 	.word	0x3fd55555
 801ca30:	2c6a6c2f 	.word	0x2c6a6c2f
 801ca34:	bfa2b444 	.word	0xbfa2b444
 801ca38:	52defd9a 	.word	0x52defd9a
 801ca3c:	3fadde2d 	.word	0x3fadde2d
 801ca40:	af749a6d 	.word	0xaf749a6d
 801ca44:	3fb3b0f2 	.word	0x3fb3b0f2
 801ca48:	fe231671 	.word	0xfe231671
 801ca4c:	3fbc71c6 	.word	0x3fbc71c6
 801ca50:	9998ebc4 	.word	0x9998ebc4
 801ca54:	3fc99999 	.word	0x3fc99999
 801ca58:	54442d18 	.word	0x54442d18
 801ca5c:	bff921fb 	.word	0xbff921fb
 801ca60:	440fffff 	.word	0x440fffff
 801ca64:	7ff00000 	.word	0x7ff00000
 801ca68:	3fdbffff 	.word	0x3fdbffff
 801ca6c:	3ff00000 	.word	0x3ff00000
 801ca70:	3ff2ffff 	.word	0x3ff2ffff
 801ca74:	40037fff 	.word	0x40037fff
 801ca78:	3ff80000 	.word	0x3ff80000
 801ca7c:	bff00000 	.word	0xbff00000
 801ca80:	0801d668 	.word	0x0801d668
 801ca84:	0801d648 	.word	0x0801d648

0801ca88 <fabs>:
 801ca88:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801ca8c:	4619      	mov	r1, r3
 801ca8e:	4770      	bx	lr

0801ca90 <matherr>:
 801ca90:	2000      	movs	r0, #0
 801ca92:	4770      	bx	lr

0801ca94 <nan>:
 801ca94:	2000      	movs	r0, #0
 801ca96:	4901      	ldr	r1, [pc, #4]	; (801ca9c <nan+0x8>)
 801ca98:	4770      	bx	lr
 801ca9a:	bf00      	nop
 801ca9c:	7ff80000 	.word	0x7ff80000

0801caa0 <fabsf>:
 801caa0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801caa4:	4770      	bx	lr
	...

0801caa8 <floorf>:
 801caa8:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
 801caac:	0dca      	lsrs	r2, r1, #23
 801caae:	3a7f      	subs	r2, #127	; 0x7f
 801cab0:	2a16      	cmp	r2, #22
 801cab2:	ee07 0a90 	vmov	s15, r0
 801cab6:	4603      	mov	r3, r0
 801cab8:	dc2a      	bgt.n	801cb10 <floorf+0x68>
 801caba:	2a00      	cmp	r2, #0
 801cabc:	da11      	bge.n	801cae2 <floorf+0x3a>
 801cabe:	ed9f 7a19 	vldr	s14, [pc, #100]	; 801cb24 <floorf+0x7c>
 801cac2:	ee77 7a87 	vadd.f32	s15, s15, s14
 801cac6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801caca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cace:	dd05      	ble.n	801cadc <floorf+0x34>
 801cad0:	2800      	cmp	r0, #0
 801cad2:	da25      	bge.n	801cb20 <floorf+0x78>
 801cad4:	4a14      	ldr	r2, [pc, #80]	; (801cb28 <floorf+0x80>)
 801cad6:	2900      	cmp	r1, #0
 801cad8:	bf18      	it	ne
 801cada:	4613      	movne	r3, r2
 801cadc:	ee07 3a90 	vmov	s15, r3
 801cae0:	e01b      	b.n	801cb1a <floorf+0x72>
 801cae2:	4912      	ldr	r1, [pc, #72]	; (801cb2c <floorf+0x84>)
 801cae4:	4111      	asrs	r1, r2
 801cae6:	4208      	tst	r0, r1
 801cae8:	d017      	beq.n	801cb1a <floorf+0x72>
 801caea:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 801cb24 <floorf+0x7c>
 801caee:	ee77 7a87 	vadd.f32	s15, s15, s14
 801caf2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801caf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cafa:	ddef      	ble.n	801cadc <floorf+0x34>
 801cafc:	2800      	cmp	r0, #0
 801cafe:	bfbe      	ittt	lt
 801cb00:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 801cb04:	fa40 f202 	asrlt.w	r2, r0, r2
 801cb08:	189b      	addlt	r3, r3, r2
 801cb0a:	ea23 0301 	bic.w	r3, r3, r1
 801cb0e:	e7e5      	b.n	801cadc <floorf+0x34>
 801cb10:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801cb14:	d301      	bcc.n	801cb1a <floorf+0x72>
 801cb16:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801cb1a:	ee17 0a90 	vmov	r0, s15
 801cb1e:	4770      	bx	lr
 801cb20:	2300      	movs	r3, #0
 801cb22:	e7db      	b.n	801cadc <floorf+0x34>
 801cb24:	7149f2ca 	.word	0x7149f2ca
 801cb28:	bf800000 	.word	0xbf800000
 801cb2c:	007fffff 	.word	0x007fffff

0801cb30 <scalbnf>:
 801cb30:	b508      	push	{r3, lr}
 801cb32:	f030 4300 	bics.w	r3, r0, #2147483648	; 0x80000000
 801cb36:	ed2d 8b02 	vpush	{d8}
 801cb3a:	ee07 0a90 	vmov	s15, r0
 801cb3e:	4602      	mov	r2, r0
 801cb40:	d004      	beq.n	801cb4c <scalbnf+0x1c>
 801cb42:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801cb46:	d306      	bcc.n	801cb56 <scalbnf+0x26>
 801cb48:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801cb4c:	ecbd 8b02 	vpop	{d8}
 801cb50:	ee17 0a90 	vmov	r0, s15
 801cb54:	bd08      	pop	{r3, pc}
 801cb56:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801cb5a:	d220      	bcs.n	801cb9e <scalbnf+0x6e>
 801cb5c:	4b1f      	ldr	r3, [pc, #124]	; (801cbdc <scalbnf+0xac>)
 801cb5e:	ed9f 7a20 	vldr	s14, [pc, #128]	; 801cbe0 <scalbnf+0xb0>
 801cb62:	4299      	cmp	r1, r3
 801cb64:	ee67 7a87 	vmul.f32	s15, s15, s14
 801cb68:	db14      	blt.n	801cb94 <scalbnf+0x64>
 801cb6a:	ee17 2a90 	vmov	r2, s15
 801cb6e:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 801cb72:	3b19      	subs	r3, #25
 801cb74:	440b      	add	r3, r1
 801cb76:	2bfe      	cmp	r3, #254	; 0xfe
 801cb78:	dd13      	ble.n	801cba2 <scalbnf+0x72>
 801cb7a:	ed9f 8a1a 	vldr	s16, [pc, #104]	; 801cbe4 <scalbnf+0xb4>
 801cb7e:	ee17 1a90 	vmov	r1, s15
 801cb82:	ee18 0a10 	vmov	r0, s16
 801cb86:	f000 f833 	bl	801cbf0 <copysignf>
 801cb8a:	ee07 0a90 	vmov	s15, r0
 801cb8e:	ee67 7a88 	vmul.f32	s15, s15, s16
 801cb92:	e7db      	b.n	801cb4c <scalbnf+0x1c>
 801cb94:	ed9f 7a14 	vldr	s14, [pc, #80]	; 801cbe8 <scalbnf+0xb8>
 801cb98:	ee67 7a87 	vmul.f32	s15, s15, s14
 801cb9c:	e7d6      	b.n	801cb4c <scalbnf+0x1c>
 801cb9e:	0ddb      	lsrs	r3, r3, #23
 801cba0:	e7e8      	b.n	801cb74 <scalbnf+0x44>
 801cba2:	2b00      	cmp	r3, #0
 801cba4:	dd06      	ble.n	801cbb4 <scalbnf+0x84>
 801cba6:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 801cbaa:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 801cbae:	ee07 3a90 	vmov	s15, r3
 801cbb2:	e7cb      	b.n	801cb4c <scalbnf+0x1c>
 801cbb4:	f113 0f16 	cmn.w	r3, #22
 801cbb8:	da06      	bge.n	801cbc8 <scalbnf+0x98>
 801cbba:	f24c 3350 	movw	r3, #50000	; 0xc350
 801cbbe:	4299      	cmp	r1, r3
 801cbc0:	dcdb      	bgt.n	801cb7a <scalbnf+0x4a>
 801cbc2:	ed9f 8a09 	vldr	s16, [pc, #36]	; 801cbe8 <scalbnf+0xb8>
 801cbc6:	e7da      	b.n	801cb7e <scalbnf+0x4e>
 801cbc8:	3319      	adds	r3, #25
 801cbca:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 801cbce:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 801cbd2:	ed9f 7a06 	vldr	s14, [pc, #24]	; 801cbec <scalbnf+0xbc>
 801cbd6:	ee07 3a90 	vmov	s15, r3
 801cbda:	e7dd      	b.n	801cb98 <scalbnf+0x68>
 801cbdc:	ffff3cb0 	.word	0xffff3cb0
 801cbe0:	4c000000 	.word	0x4c000000
 801cbe4:	7149f2ca 	.word	0x7149f2ca
 801cbe8:	0da24260 	.word	0x0da24260
 801cbec:	33000000 	.word	0x33000000

0801cbf0 <copysignf>:
 801cbf0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 801cbf4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801cbf8:	4308      	orrs	r0, r1
 801cbfa:	4770      	bx	lr

0801cbfc <_init>:
 801cbfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cbfe:	bf00      	nop
 801cc00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cc02:	bc08      	pop	{r3}
 801cc04:	469e      	mov	lr, r3
 801cc06:	4770      	bx	lr

0801cc08 <_fini>:
 801cc08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cc0a:	bf00      	nop
 801cc0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cc0e:	bc08      	pop	{r3}
 801cc10:	469e      	mov	lr, r3
 801cc12:	4770      	bx	lr
