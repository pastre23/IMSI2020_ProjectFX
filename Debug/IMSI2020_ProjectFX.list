
IMSI2020_ProjectFX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001cea4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a48  0801d048  0801d048  0002d048  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801da90  0801da90  000313ac  2**0
                  CONTENTS
  4 .ARM          00000008  0801da90  0801da90  0002da90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801da98  0801da98  000313ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801da98  0801da98  0002da98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801da9c  0801da9c  0002da9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000013ac  20000000  0801daa0  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000016d4  200013ac  0801ee4c  000313ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002a80  0801ee4c  00032a80  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000313ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   000571db  00000000  00000000  000313da  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000071e3  00000000  00000000  000885b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00003858  00000000  00000000  0008f798  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00003598  00000000  00000000  00092ff0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022a9f  00000000  00000000  00096588  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002738d  00000000  00000000  000b9027  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b5355  00000000  00000000  000e03b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000fa  00000000  00000000  00195709  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000fee0  00000000  00000000  00195804  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200013ac 	.word	0x200013ac
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801d02c 	.word	0x0801d02c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200013b0 	.word	0x200013b0
 80001dc:	0801d02c 	.word	0x0801d02c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b972 	b.w	8000f54 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	4688      	mov	r8, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14b      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4615      	mov	r5, r2
 8000c9a:	d967      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0720 	rsb	r7, r2, #32
 8000ca6:	fa01 f302 	lsl.w	r3, r1, r2
 8000caa:	fa20 f707 	lsr.w	r7, r0, r7
 8000cae:	4095      	lsls	r5, r2
 8000cb0:	ea47 0803 	orr.w	r8, r7, r3
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cc0:	fa1f fc85 	uxth.w	ip, r5
 8000cc4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cc8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ccc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18eb      	adds	r3, r5, r3
 8000cd6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cda:	f080 811b 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8118 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000ce4:	3f02      	subs	r7, #2
 8000ce6:	442b      	add	r3, r5
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cf0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cfc:	45a4      	cmp	ip, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	192c      	adds	r4, r5, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d06:	f080 8107 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000d0a:	45a4      	cmp	ip, r4
 8000d0c:	f240 8104 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000d10:	3802      	subs	r0, #2
 8000d12:	442c      	add	r4, r5
 8000d14:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d18:	eba4 040c 	sub.w	r4, r4, ip
 8000d1c:	2700      	movs	r7, #0
 8000d1e:	b11e      	cbz	r6, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c6 4300 	strd	r4, r3, [r6]
 8000d28:	4639      	mov	r1, r7
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0xbe>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80eb 	beq.w	8000f0e <__udivmoddi4+0x286>
 8000d38:	2700      	movs	r7, #0
 8000d3a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d3e:	4638      	mov	r0, r7
 8000d40:	4639      	mov	r1, r7
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f783 	clz	r7, r3
 8000d4a:	2f00      	cmp	r7, #0
 8000d4c:	d147      	bne.n	8000dde <__udivmoddi4+0x156>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0xd0>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80fa 	bhi.w	8000f4c <__udivmoddi4+0x2c4>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	4698      	mov	r8, r3
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	d0e0      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000d66:	e9c6 4800 	strd	r4, r8, [r6]
 8000d6a:	e7dd      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000d6c:	b902      	cbnz	r2, 8000d70 <__udivmoddi4+0xe8>
 8000d6e:	deff      	udf	#255	; 0xff
 8000d70:	fab2 f282 	clz	r2, r2
 8000d74:	2a00      	cmp	r2, #0
 8000d76:	f040 808f 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d7a:	1b49      	subs	r1, r1, r5
 8000d7c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d80:	fa1f f885 	uxth.w	r8, r5
 8000d84:	2701      	movs	r7, #1
 8000d86:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d8a:	0c23      	lsrs	r3, r4, #16
 8000d8c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb08 f10c 	mul.w	r1, r8, ip
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9c:	18eb      	adds	r3, r5, r3
 8000d9e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4299      	cmp	r1, r3
 8000da6:	f200 80cd 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000daa:	4684      	mov	ip, r0
 8000dac:	1a59      	subs	r1, r3, r1
 8000dae:	b2a3      	uxth	r3, r4
 8000db0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000db8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dbc:	fb08 f800 	mul.w	r8, r8, r0
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x14c>
 8000dc4:	192c      	adds	r4, r5, r4
 8000dc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x14a>
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	f200 80b6 	bhi.w	8000f3e <__udivmoddi4+0x2b6>
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	eba4 0408 	sub.w	r4, r4, r8
 8000dd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ddc:	e79f      	b.n	8000d1e <__udivmoddi4+0x96>
 8000dde:	f1c7 0c20 	rsb	ip, r7, #32
 8000de2:	40bb      	lsls	r3, r7
 8000de4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000de8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dec:	fa01 f407 	lsl.w	r4, r1, r7
 8000df0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000df4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000df8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dfc:	4325      	orrs	r5, r4
 8000dfe:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e02:	0c2c      	lsrs	r4, r5, #16
 8000e04:	fb08 3319 	mls	r3, r8, r9, r3
 8000e08:	fa1f fa8e 	uxth.w	sl, lr
 8000e0c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e10:	fb09 f40a 	mul.w	r4, r9, sl
 8000e14:	429c      	cmp	r4, r3
 8000e16:	fa02 f207 	lsl.w	r2, r2, r7
 8000e1a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1e 0303 	adds.w	r3, lr, r3
 8000e24:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e28:	f080 8087 	bcs.w	8000f3a <__udivmoddi4+0x2b2>
 8000e2c:	429c      	cmp	r4, r3
 8000e2e:	f240 8084 	bls.w	8000f3a <__udivmoddi4+0x2b2>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4473      	add	r3, lr
 8000e38:	1b1b      	subs	r3, r3, r4
 8000e3a:	b2ad      	uxth	r5, r5
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3310 	mls	r3, r8, r0, r3
 8000e44:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e48:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e4c:	45a2      	cmp	sl, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1e 0404 	adds.w	r4, lr, r4
 8000e54:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e58:	d26b      	bcs.n	8000f32 <__udivmoddi4+0x2aa>
 8000e5a:	45a2      	cmp	sl, r4
 8000e5c:	d969      	bls.n	8000f32 <__udivmoddi4+0x2aa>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4474      	add	r4, lr
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6a:	eba4 040a 	sub.w	r4, r4, sl
 8000e6e:	454c      	cmp	r4, r9
 8000e70:	46c2      	mov	sl, r8
 8000e72:	464b      	mov	r3, r9
 8000e74:	d354      	bcc.n	8000f20 <__udivmoddi4+0x298>
 8000e76:	d051      	beq.n	8000f1c <__udivmoddi4+0x294>
 8000e78:	2e00      	cmp	r6, #0
 8000e7a:	d069      	beq.n	8000f50 <__udivmoddi4+0x2c8>
 8000e7c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e80:	eb64 0403 	sbc.w	r4, r4, r3
 8000e84:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e88:	40fd      	lsrs	r5, r7
 8000e8a:	40fc      	lsrs	r4, r7
 8000e8c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e90:	e9c6 5400 	strd	r5, r4, [r6]
 8000e94:	2700      	movs	r7, #0
 8000e96:	e747      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f703 	lsr.w	r7, r0, r3
 8000ea0:	4095      	lsls	r5, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eaa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eae:	4338      	orrs	r0, r7
 8000eb0:	0c01      	lsrs	r1, r0, #16
 8000eb2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000eb6:	fa1f f885 	uxth.w	r8, r5
 8000eba:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ebe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec2:	fb07 f308 	mul.w	r3, r7, r8
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ecc:	d907      	bls.n	8000ede <__udivmoddi4+0x256>
 8000ece:	1869      	adds	r1, r5, r1
 8000ed0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ed4:	d22f      	bcs.n	8000f36 <__udivmoddi4+0x2ae>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	d92d      	bls.n	8000f36 <__udivmoddi4+0x2ae>
 8000eda:	3f02      	subs	r7, #2
 8000edc:	4429      	add	r1, r5
 8000ede:	1acb      	subs	r3, r1, r3
 8000ee0:	b281      	uxth	r1, r0
 8000ee2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eee:	fb00 f308 	mul.w	r3, r0, r8
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x27e>
 8000ef6:	1869      	adds	r1, r5, r1
 8000ef8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000efc:	d217      	bcs.n	8000f2e <__udivmoddi4+0x2a6>
 8000efe:	428b      	cmp	r3, r1
 8000f00:	d915      	bls.n	8000f2e <__udivmoddi4+0x2a6>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4429      	add	r1, r5
 8000f06:	1ac9      	subs	r1, r1, r3
 8000f08:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f0c:	e73b      	b.n	8000d86 <__udivmoddi4+0xfe>
 8000f0e:	4637      	mov	r7, r6
 8000f10:	4630      	mov	r0, r6
 8000f12:	e709      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f14:	4607      	mov	r7, r0
 8000f16:	e6e7      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f18:	4618      	mov	r0, r3
 8000f1a:	e6fb      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f1c:	4541      	cmp	r1, r8
 8000f1e:	d2ab      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f20:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f24:	eb69 020e 	sbc.w	r2, r9, lr
 8000f28:	3801      	subs	r0, #1
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	e7a4      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f2e:	4660      	mov	r0, ip
 8000f30:	e7e9      	b.n	8000f06 <__udivmoddi4+0x27e>
 8000f32:	4618      	mov	r0, r3
 8000f34:	e795      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f36:	4667      	mov	r7, ip
 8000f38:	e7d1      	b.n	8000ede <__udivmoddi4+0x256>
 8000f3a:	4681      	mov	r9, r0
 8000f3c:	e77c      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f3e:	3802      	subs	r0, #2
 8000f40:	442c      	add	r4, r5
 8000f42:	e747      	b.n	8000dd4 <__udivmoddi4+0x14c>
 8000f44:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f48:	442b      	add	r3, r5
 8000f4a:	e72f      	b.n	8000dac <__udivmoddi4+0x124>
 8000f4c:	4638      	mov	r0, r7
 8000f4e:	e708      	b.n	8000d62 <__udivmoddi4+0xda>
 8000f50:	4637      	mov	r7, r6
 8000f52:	e6e9      	b.n	8000d28 <__udivmoddi4+0xa0>

08000f54 <__aeabi_idiv0>:
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <MX_BlueNRG_MS_Init>:
  PRINT_CSV("%02ld:%02ld:%02ld.%03ld", ms/(60*60*1000)%24, ms/(60*1000)%60, (ms/1000)%60, ms%1000);
}
#endif

void MX_BlueNRG_MS_Init(void)
{
 8000f58:	b5b0      	push	{r4, r5, r7, lr}
 8000f5a:	b08a      	sub	sp, #40	; 0x28
 8000f5c:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN BlueNRG_MS_Init_PreTreatment */
  
  /* USER CODE END BlueNRG_MS_Init_PreTreatment */

  /* Initialize the peripherals and the BLE Stack */
  const char *name = "BlueNRG";    
 8000f5e:	4b66      	ldr	r3, [pc, #408]	; (80010f8 <MX_BlueNRG_MS_Init+0x1a0>)
 8000f60:	613b      	str	r3, [r7, #16]
  uint8_t  bdaddr_len_out;
  uint8_t  hwVersion;
  uint16_t fwVersion;
  int ret;  
  
  User_Init();
 8000f62:	f000 f8f3 	bl	800114c <User_Init>
  
  /* Get the User Button initial state */
  user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 8000f66:	2000      	movs	r0, #0
 8000f68:	f007 fd80 	bl	8008a6c <BSP_PB_GetState>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	b2da      	uxtb	r2, r3
 8000f70:	4b62      	ldr	r3, [pc, #392]	; (80010fc <MX_BlueNRG_MS_Init+0x1a4>)
 8000f72:	701a      	strb	r2, [r3, #0]
    
  hci_init(user_notify, NULL);
 8000f74:	2100      	movs	r1, #0
 8000f76:	4862      	ldr	r0, [pc, #392]	; (8001100 <MX_BlueNRG_MS_Init+0x1a8>)
 8000f78:	f00d ffb6 	bl	800eee8 <hci_init>
  
  /* get the BlueNRG HW and FW versions */
  getBlueNRGVersion(&hwVersion, &fwVersion);
 8000f7c:	1dba      	adds	r2, r7, #6
 8000f7e:	f107 0308 	add.w	r3, r7, #8
 8000f82:	4611      	mov	r1, r2
 8000f84:	4618      	mov	r0, r3
 8000f86:	f00d fe25 	bl	800ebd4 <getBlueNRGVersion>
   * Reset BlueNRG again otherwise we won't
   * be able to change its MAC address.
   * aci_hal_write_config_data() must be the first
   * command after reset otherwise it will fail.
   */
  hci_reset(); 
 8000f8a:	f00d fe67 	bl	800ec5c <hci_reset>
  HAL_Delay(100);
 8000f8e:	2064      	movs	r0, #100	; 0x64
 8000f90:	f007 feb4 	bl	8008cfc <HAL_Delay>
 
  PRINTF("HWver %d\nFWver %d\n", hwVersion, fwVersion);
 8000f94:	7a3b      	ldrb	r3, [r7, #8]
 8000f96:	4619      	mov	r1, r3
 8000f98:	88fb      	ldrh	r3, [r7, #6]
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	4859      	ldr	r0, [pc, #356]	; (8001104 <MX_BlueNRG_MS_Init+0x1ac>)
 8000f9e:	f019 fa3b 	bl	801a418 <iprintf>
  if (hwVersion > 0x30) { /* X-NUCLEO-IDB05A1 expansion board is used */
 8000fa2:	7a3b      	ldrb	r3, [r7, #8]
 8000fa4:	2b30      	cmp	r3, #48	; 0x30
 8000fa6:	d902      	bls.n	8000fae <MX_BlueNRG_MS_Init+0x56>
    bnrg_expansion_board = IDB05A1;    
 8000fa8:	4b57      	ldr	r3, [pc, #348]	; (8001108 <MX_BlueNRG_MS_Init+0x1b0>)
 8000faa:	2201      	movs	r2, #1
 8000fac:	701a      	strb	r2, [r3, #0]
  }
  
  ret = aci_hal_read_config_data(CONFIG_DATA_RANDOM_ADDRESS, BDADDR_SIZE, &bdaddr_len_out, bdaddr);
 8000fae:	f107 0209 	add.w	r2, r7, #9
 8000fb2:	4b56      	ldr	r3, [pc, #344]	; (800110c <MX_BlueNRG_MS_Init+0x1b4>)
 8000fb4:	2106      	movs	r1, #6
 8000fb6:	2080      	movs	r0, #128	; 0x80
 8000fb8:	f00d fd88 	bl	800eacc <aci_hal_read_config_data>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	617b      	str	r3, [r7, #20]
  
  if (ret) {
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d002      	beq.n	8000fcc <MX_BlueNRG_MS_Init+0x74>
    PRINTF("Read Static Random address failed.\n");
 8000fc6:	4852      	ldr	r0, [pc, #328]	; (8001110 <MX_BlueNRG_MS_Init+0x1b8>)
 8000fc8:	f019 fa9a 	bl	801a500 <puts>
  }

  if ((bdaddr[5] & 0xC0) != 0xC0) {
 8000fcc:	4b4f      	ldr	r3, [pc, #316]	; (800110c <MX_BlueNRG_MS_Init+0x1b4>)
 8000fce:	795b      	ldrb	r3, [r3, #5]
 8000fd0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8000fd4:	2bc0      	cmp	r3, #192	; 0xc0
 8000fd6:	d003      	beq.n	8000fe0 <MX_BlueNRG_MS_Init+0x88>
    PRINTF("Static Random address not well formed.\n");
 8000fd8:	484e      	ldr	r0, [pc, #312]	; (8001114 <MX_BlueNRG_MS_Init+0x1bc>)
 8000fda:	f019 fa91 	bl	801a500 <puts>
    while(1);
 8000fde:	e7fe      	b.n	8000fde <MX_BlueNRG_MS_Init+0x86>
  }
  
  /* GATT Init */
  ret = aci_gatt_init();    
 8000fe0:	f00d fb33 	bl	800e64a <aci_gatt_init>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	617b      	str	r3, [r7, #20]
  if(ret){
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d002      	beq.n	8000ff4 <MX_BlueNRG_MS_Init+0x9c>
    PRINTF("GATT_Init failed.\n");
 8000fee:	484a      	ldr	r0, [pc, #296]	; (8001118 <MX_BlueNRG_MS_Init+0x1c0>)
 8000ff0:	f019 fa86 	bl	801a500 <puts>
  }

  /* GAP Init */
  if (bnrg_expansion_board == IDB05A1) {
 8000ff4:	4b44      	ldr	r3, [pc, #272]	; (8001108 <MX_BlueNRG_MS_Init+0x1b0>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d110      	bne.n	800101e <MX_BlueNRG_MS_Init+0xc6>
    ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8000ffc:	f107 020e 	add.w	r2, r7, #14
 8001000:	f107 030a 	add.w	r3, r7, #10
 8001004:	9301      	str	r3, [sp, #4]
 8001006:	f107 030c 	add.w	r3, r7, #12
 800100a:	9300      	str	r3, [sp, #0]
 800100c:	4613      	mov	r3, r2
 800100e:	2207      	movs	r2, #7
 8001010:	2100      	movs	r1, #0
 8001012:	2001      	movs	r0, #1
 8001014:	f00d f8ea 	bl	800e1ec <aci_gap_init_IDB05A1>
 8001018:	4603      	mov	r3, r0
 800101a:	617b      	str	r3, [r7, #20]
 800101c:	e00a      	b.n	8001034 <MX_BlueNRG_MS_Init+0xdc>
  }
  else {
    ret = aci_gap_init_IDB04A1(GAP_PERIPHERAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 800101e:	f107 030a 	add.w	r3, r7, #10
 8001022:	f107 020c 	add.w	r2, r7, #12
 8001026:	f107 010e 	add.w	r1, r7, #14
 800102a:	2001      	movs	r0, #1
 800102c:	f00d f92e 	bl	800e28c <aci_gap_init_IDB04A1>
 8001030:	4603      	mov	r3, r0
 8001032:	617b      	str	r3, [r7, #20]
  }
  if (ret != BLE_STATUS_SUCCESS) {
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d002      	beq.n	8001040 <MX_BlueNRG_MS_Init+0xe8>
    PRINTF("GAP_Init failed.\n");
 800103a:	4838      	ldr	r0, [pc, #224]	; (800111c <MX_BlueNRG_MS_Init+0x1c4>)
 800103c:	f019 fa60 	bl	801a500 <puts>
  }

  /* Update device name */
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 8001040:	89fc      	ldrh	r4, [r7, #14]
 8001042:	89bd      	ldrh	r5, [r7, #12]
                                   strlen(name), (uint8_t *)name);
 8001044:	6938      	ldr	r0, [r7, #16]
 8001046:	f7ff f8cb 	bl	80001e0 <strlen>
 800104a:	4603      	mov	r3, r0
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 800104c:	b2da      	uxtb	r2, r3
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	9300      	str	r3, [sp, #0]
 8001052:	4613      	mov	r3, r2
 8001054:	2200      	movs	r2, #0
 8001056:	4629      	mov	r1, r5
 8001058:	4620      	mov	r0, r4
 800105a:	f00d fc77 	bl	800e94c <aci_gatt_update_char_value>
 800105e:	4603      	mov	r3, r0
 8001060:	617b      	str	r3, [r7, #20]
  if (ret) {
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d003      	beq.n	8001070 <MX_BlueNRG_MS_Init+0x118>
    PRINTF("aci_gatt_update_char_value failed.\n");            
 8001068:	482d      	ldr	r0, [pc, #180]	; (8001120 <MX_BlueNRG_MS_Init+0x1c8>)
 800106a:	f019 fa49 	bl	801a500 <puts>
    while(1);
 800106e:	e7fe      	b.n	800106e <MX_BlueNRG_MS_Init+0x116>
  }
  
  ret = aci_gap_set_auth_requirement(MITM_PROTECTION_REQUIRED,
 8001070:	2301      	movs	r3, #1
 8001072:	9303      	str	r3, [sp, #12]
 8001074:	4b2b      	ldr	r3, [pc, #172]	; (8001124 <MX_BlueNRG_MS_Init+0x1cc>)
 8001076:	9302      	str	r3, [sp, #8]
 8001078:	2300      	movs	r3, #0
 800107a:	9301      	str	r3, [sp, #4]
 800107c:	2310      	movs	r3, #16
 800107e:	9300      	str	r3, [sp, #0]
 8001080:	2307      	movs	r3, #7
 8001082:	2200      	movs	r2, #0
 8001084:	2100      	movs	r1, #0
 8001086:	2001      	movs	r0, #1
 8001088:	f00d fa39 	bl	800e4fe <aci_gap_set_auth_requirement>
 800108c:	4603      	mov	r3, r0
 800108e:	617b      	str	r3, [r7, #20]
                                     7,
                                     16,
                                     USE_FIXED_PIN_FOR_PAIRING,
                                     123456,
                                     BONDING);
  if (ret) {
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d003      	beq.n	800109e <MX_BlueNRG_MS_Init+0x146>
    PRINTF("aci_gap_set_authentication_requirement failed.\n");
 8001096:	4824      	ldr	r0, [pc, #144]	; (8001128 <MX_BlueNRG_MS_Init+0x1d0>)
 8001098:	f019 fa32 	bl	801a500 <puts>
    while(1);
 800109c:	e7fe      	b.n	800109c <MX_BlueNRG_MS_Init+0x144>
  }
  
  PRINTF("BLE Stack Initialized\n");
 800109e:	4823      	ldr	r0, [pc, #140]	; (800112c <MX_BlueNRG_MS_Init+0x1d4>)
 80010a0:	f019 fa2e 	bl	801a500 <puts>
  
  ret = Add_HWServW2ST_Service();
 80010a4:	f000 ff5e 	bl	8001f64 <Add_HWServW2ST_Service>
 80010a8:	4603      	mov	r3, r0
 80010aa:	617b      	str	r3, [r7, #20]
  if(ret == BLE_STATUS_SUCCESS) {
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d10a      	bne.n	80010c8 <MX_BlueNRG_MS_Init+0x170>
    PRINTF("BlueMS HW service added successfully.\n");
 80010b2:	481f      	ldr	r0, [pc, #124]	; (8001130 <MX_BlueNRG_MS_Init+0x1d8>)
 80010b4:	f019 fa24 	bl	801a500 <puts>
  } else {
    PRINTF("Error while adding BlueMS HW service: 0x%02x\r\n", ret);
    while(1);
  }
  
  ret = Add_SWServW2ST_Service();
 80010b8:	f001 f82c 	bl	8002114 <Add_SWServW2ST_Service>
 80010bc:	4603      	mov	r3, r0
 80010be:	617b      	str	r3, [r7, #20]
  if(ret == BLE_STATUS_SUCCESS) {
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d109      	bne.n	80010da <MX_BlueNRG_MS_Init+0x182>
 80010c6:	e004      	b.n	80010d2 <MX_BlueNRG_MS_Init+0x17a>
    PRINTF("Error while adding BlueMS HW service: 0x%02x\r\n", ret);
 80010c8:	6979      	ldr	r1, [r7, #20]
 80010ca:	481a      	ldr	r0, [pc, #104]	; (8001134 <MX_BlueNRG_MS_Init+0x1dc>)
 80010cc:	f019 f9a4 	bl	801a418 <iprintf>
    while(1);
 80010d0:	e7fe      	b.n	80010d0 <MX_BlueNRG_MS_Init+0x178>
     PRINTF("BlueMS SW service added successfully.\n");
 80010d2:	4819      	ldr	r0, [pc, #100]	; (8001138 <MX_BlueNRG_MS_Init+0x1e0>)
 80010d4:	f019 fa14 	bl	801a500 <puts>
 80010d8:	e004      	b.n	80010e4 <MX_BlueNRG_MS_Init+0x18c>
  } else {
     PRINTF("Error while adding BlueMS HW service: 0x%02x\r\n", ret);
 80010da:	6979      	ldr	r1, [r7, #20]
 80010dc:	4815      	ldr	r0, [pc, #84]	; (8001134 <MX_BlueNRG_MS_Init+0x1dc>)
 80010de:	f019 f99b 	bl	801a418 <iprintf>
     while(1);
 80010e2:	e7fe      	b.n	80010e2 <MX_BlueNRG_MS_Init+0x18a>
  }

  /* Set output power level */
  ret = aci_hal_set_tx_power_level(1,4);
 80010e4:	2104      	movs	r1, #4
 80010e6:	2001      	movs	r0, #1
 80010e8:	f00d fd43 	bl	800eb72 <aci_hal_set_tx_power_level>
 80010ec:	4603      	mov	r3, r0
 80010ee:	617b      	str	r3, [r7, #20]
  
  /* USER CODE BEGIN BlueNRG_MS_Init_PostTreatment */
  
  /* USER CODE END BlueNRG_MS_Init_PostTreatment */
}
 80010f0:	bf00      	nop
 80010f2:	3718      	adds	r7, #24
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bdb0      	pop	{r4, r5, r7, pc}
 80010f8:	0801d048 	.word	0x0801d048
 80010fc:	200011c0 	.word	0x200011c0
 8001100:	08002741 	.word	0x08002741
 8001104:	0801d050 	.word	0x0801d050
 8001108:	200021b1 	.word	0x200021b1
 800110c:	200027a8 	.word	0x200027a8
 8001110:	0801d064 	.word	0x0801d064
 8001114:	0801d088 	.word	0x0801d088
 8001118:	0801d0b0 	.word	0x0801d0b0
 800111c:	0801d0c4 	.word	0x0801d0c4
 8001120:	0801d0d8 	.word	0x0801d0d8
 8001124:	0001e240 	.word	0x0001e240
 8001128:	0801d0fc 	.word	0x0801d0fc
 800112c:	0801d12c 	.word	0x0801d12c
 8001130:	0801d144 	.word	0x0801d144
 8001134:	0801d16c 	.word	0x0801d16c
 8001138:	0801d19c 	.word	0x0801d19c

0800113c <MX_BlueNRG_MS_Process>:

/*
 * BlueNRG-MS background task
 */
void MX_BlueNRG_MS_Process(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BlueNRG_MS_Process_PreTreatment */
  
  /* USER CODE END BlueNRG_MS_Process_PreTreatment */
  
  User_Process();  
 8001140:	f000 f812 	bl	8001168 <User_Process>
  hci_user_evt_proc();
 8001144:	f00e f84a 	bl	800f1dc <hci_user_evt_proc>

  /* USER CODE BEGIN BlueNRG_MS_Process_PostTreatment */
  
  /* USER CODE END BlueNRG_MS_Process_PostTreatment */
}
 8001148:	bf00      	nop
 800114a:	bd80      	pop	{r7, pc}

0800114c <User_Init>:
 *
 * @param  None
 * @retval None
 */
static void User_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8001150:	2101      	movs	r1, #1
 8001152:	2000      	movs	r0, #0
 8001154:	f007 fc0a 	bl	800896c <BSP_PB_Init>
  BSP_LED_Init(LED2);
 8001158:	2000      	movs	r0, #0
 800115a:	f007 fb8d 	bl	8008878 <BSP_LED_Init>
  
  BSP_COM_Init(COM1);
 800115e:	2000      	movs	r0, #0
 8001160:	f007 fca8 	bl	8008ab4 <BSP_COM_Init>
}
 8001164:	bf00      	nop
 8001166:	bd80      	pop	{r7, pc}

08001168 <User_Process>:
 *
 * @param  None
 * @retval None
 */
static void User_Process(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
  float data_t;
  float data_p;
  static uint32_t counter = 0;
  
  if (set_connectable)
 800116e:	4b2c      	ldr	r3, [pc, #176]	; (8001220 <User_Process+0xb8>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	b2db      	uxtb	r3, r3
 8001174:	2b00      	cmp	r3, #0
 8001176:	d004      	beq.n	8001182 <User_Process+0x1a>
  {
    Set_DeviceConnectable();
 8001178:	f001 fa56 	bl	8002628 <Set_DeviceConnectable>
    set_connectable = FALSE;
 800117c:	4b28      	ldr	r3, [pc, #160]	; (8001220 <User_Process+0xb8>)
 800117e:	2200      	movs	r2, #0
 8001180:	701a      	strb	r2, [r3, #0]
    while (BSP_PB_GetState(BUTTON_KEY) == !user_button_init_state);
    
    /* Debouncing */
    HAL_Delay(50);
#endif
    BSP_LED_Toggle(LED2);
 8001182:	2000      	movs	r0, #0
 8001184:	f007 fbdc 	bl	8008940 <BSP_LED_Toggle>
    
    if (connected)
 8001188:	4b26      	ldr	r3, [pc, #152]	; (8001224 <User_Process+0xbc>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d042      	beq.n	8001216 <User_Process+0xae>
    {
      /* Set a random seed */
      srand(HAL_GetTick());
 8001190:	f007 fda8 	bl	8008ce4 <HAL_GetTick>
 8001194:	4603      	mov	r3, r0
 8001196:	4618      	mov	r0, r3
 8001198:	f019 f9ba 	bl	801a510 <srand>
	  
      /* Update emulated Environmental data */
      Set_Random_Environmental_Values(&data_t, &data_p);
 800119c:	463a      	mov	r2, r7
 800119e:	1d3b      	adds	r3, r7, #4
 80011a0:	4611      	mov	r1, r2
 80011a2:	4618      	mov	r0, r3
 80011a4:	f000 f84c 	bl	8001240 <Set_Random_Environmental_Values>
      BlueMS_Environmental_Update((int32_t)(data_p *100), (int16_t)(data_t * 10));
 80011a8:	edd7 7a00 	vldr	s15, [r7]
 80011ac:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001228 <User_Process+0xc0>
 80011b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011b4:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 80011b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80011bc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80011c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011c8:	ee17 3a90 	vmov	r3, s15
 80011cc:	b21b      	sxth	r3, r3
 80011ce:	4619      	mov	r1, r3
 80011d0:	ee16 0a90 	vmov	r0, s13
 80011d4:	f001 f9dc 	bl	8002590 <BlueMS_Environmental_Update>
	              
      /* Update emulated Acceleration, Gyroscope and Sensor Fusion data */
      Set_Random_Motion_Values(counter);
 80011d8:	4b14      	ldr	r3, [pc, #80]	; (800122c <User_Process+0xc4>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4618      	mov	r0, r3
 80011de:	f000 f8a9 	bl	8001334 <Set_Random_Motion_Values>
      Acc_Update(&x_axes, &g_axes, &m_axes);      
 80011e2:	4a13      	ldr	r2, [pc, #76]	; (8001230 <User_Process+0xc8>)
 80011e4:	4913      	ldr	r1, [pc, #76]	; (8001234 <User_Process+0xcc>)
 80011e6:	4814      	ldr	r0, [pc, #80]	; (8001238 <User_Process+0xd0>)
 80011e8:	f001 f828 	bl	800223c <Acc_Update>
      Quat_Update(&q_axes);
 80011ec:	4813      	ldr	r0, [pc, #76]	; (800123c <User_Process+0xd4>)
 80011ee:	f001 f8b7 	bl	8002360 <Quat_Update>
      
      counter ++;
 80011f2:	4b0e      	ldr	r3, [pc, #56]	; (800122c <User_Process+0xc4>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	3301      	adds	r3, #1
 80011f8:	4a0c      	ldr	r2, [pc, #48]	; (800122c <User_Process+0xc4>)
 80011fa:	6013      	str	r3, [r2, #0]
      if (counter == 40) {
 80011fc:	4b0b      	ldr	r3, [pc, #44]	; (800122c <User_Process+0xc4>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2b28      	cmp	r3, #40	; 0x28
 8001202:	d104      	bne.n	800120e <User_Process+0xa6>
        counter = 0;
 8001204:	4b09      	ldr	r3, [pc, #36]	; (800122c <User_Process+0xc4>)
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
        Reset_Motion_Values();
 800120a:	f000 fdb1 	bl	8001d70 <Reset_Motion_Values>
      }
#if !USE_BUTTON      
      HAL_Delay(1000); /* wait 1 sec before sending new data */
 800120e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001212:	f007 fd73 	bl	8008cfc <HAL_Delay>
#if USE_BUTTON
    /* Reset the User Button flag */
    user_button_pressed = 0;
  }
#endif  
}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	200011c1 	.word	0x200011c1
 8001224:	200021bc 	.word	0x200021bc
 8001228:	42c80000 	.word	0x42c80000
 800122c:	200021b4 	.word	0x200021b4
 8001230:	200021d8 	.word	0x200021d8
 8001234:	200021cc 	.word	0x200021cc
 8001238:	200021c0 	.word	0x200021c0
 800123c:	200021e4 	.word	0x200021e4

08001240 <Set_Random_Environmental_Values>:
 * @param  float pointer to temperature data
 * @param  float pointer to pressure data
 * @retval None
 */
static void Set_Random_Environmental_Values(float *data_t, float *data_p)
{ 
 8001240:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]
  *data_t = 27.0 + ((uint64_t)rand()*5)/RAND_MAX;     /* T sensor emulation */
 800124a:	f019 f985 	bl	801a558 <rand>
 800124e:	4603      	mov	r3, r0
 8001250:	461d      	mov	r5, r3
 8001252:	ea4f 76e5 	mov.w	r6, r5, asr #31
 8001256:	4629      	mov	r1, r5
 8001258:	4632      	mov	r2, r6
 800125a:	f04f 0300 	mov.w	r3, #0
 800125e:	f04f 0400 	mov.w	r4, #0
 8001262:	0094      	lsls	r4, r2, #2
 8001264:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8001268:	008b      	lsls	r3, r1, #2
 800126a:	4619      	mov	r1, r3
 800126c:	4622      	mov	r2, r4
 800126e:	194b      	adds	r3, r1, r5
 8001270:	eb42 0406 	adc.w	r4, r2, r6
 8001274:	4618      	mov	r0, r3
 8001276:	4621      	mov	r1, r4
 8001278:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800127c:	f04f 0300 	mov.w	r3, #0
 8001280:	f7ff fcea 	bl	8000c58 <__aeabi_uldivmod>
 8001284:	4603      	mov	r3, r0
 8001286:	460c      	mov	r4, r1
 8001288:	4618      	mov	r0, r3
 800128a:	4621      	mov	r1, r4
 800128c:	f7ff f986 	bl	800059c <__aeabi_ul2d>
 8001290:	f04f 0200 	mov.w	r2, #0
 8001294:	4b25      	ldr	r3, [pc, #148]	; (800132c <Set_Random_Environmental_Values+0xec>)
 8001296:	f7ff f801 	bl	800029c <__adddf3>
 800129a:	4603      	mov	r3, r0
 800129c:	460c      	mov	r4, r1
 800129e:	4618      	mov	r0, r3
 80012a0:	4621      	mov	r1, r4
 80012a2:	f7ff fc89 	bl	8000bb8 <__aeabi_d2f>
 80012a6:	4602      	mov	r2, r0
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	601a      	str	r2, [r3, #0]
  *data_p = 1000.0 + ((uint64_t)rand()*80)/RAND_MAX; /* P sensor emulation */
 80012ac:	f019 f954 	bl	801a558 <rand>
 80012b0:	4603      	mov	r3, r0
 80012b2:	461d      	mov	r5, r3
 80012b4:	ea4f 76e5 	mov.w	r6, r5, asr #31
 80012b8:	462b      	mov	r3, r5
 80012ba:	4634      	mov	r4, r6
 80012bc:	f04f 0100 	mov.w	r1, #0
 80012c0:	f04f 0200 	mov.w	r2, #0
 80012c4:	00a2      	lsls	r2, r4, #2
 80012c6:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 80012ca:	0099      	lsls	r1, r3, #2
 80012cc:	460b      	mov	r3, r1
 80012ce:	4614      	mov	r4, r2
 80012d0:	195b      	adds	r3, r3, r5
 80012d2:	eb44 0406 	adc.w	r4, r4, r6
 80012d6:	f04f 0100 	mov.w	r1, #0
 80012da:	f04f 0200 	mov.w	r2, #0
 80012de:	0122      	lsls	r2, r4, #4
 80012e0:	ea42 7213 	orr.w	r2, r2, r3, lsr #28
 80012e4:	0119      	lsls	r1, r3, #4
 80012e6:	460b      	mov	r3, r1
 80012e8:	4614      	mov	r4, r2
 80012ea:	4618      	mov	r0, r3
 80012ec:	4621      	mov	r1, r4
 80012ee:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80012f2:	f04f 0300 	mov.w	r3, #0
 80012f6:	f7ff fcaf 	bl	8000c58 <__aeabi_uldivmod>
 80012fa:	4603      	mov	r3, r0
 80012fc:	460c      	mov	r4, r1
 80012fe:	4618      	mov	r0, r3
 8001300:	4621      	mov	r1, r4
 8001302:	f7ff f94b 	bl	800059c <__aeabi_ul2d>
 8001306:	f04f 0200 	mov.w	r2, #0
 800130a:	4b09      	ldr	r3, [pc, #36]	; (8001330 <Set_Random_Environmental_Values+0xf0>)
 800130c:	f7fe ffc6 	bl	800029c <__adddf3>
 8001310:	4603      	mov	r3, r0
 8001312:	460c      	mov	r4, r1
 8001314:	4618      	mov	r0, r3
 8001316:	4621      	mov	r1, r4
 8001318:	f7ff fc4e 	bl	8000bb8 <__aeabi_d2f>
 800131c:	4602      	mov	r2, r0
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	601a      	str	r2, [r3, #0]
}
 8001322:	bf00      	nop
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800132a:	bf00      	nop
 800132c:	403b0000 	.word	0x403b0000
 8001330:	408f4000 	.word	0x408f4000

08001334 <Set_Random_Motion_Values>:
 * @brief  Set random values for all motion sensor data
 * @param  uint32_t counter for changing the rotation direction
 * @retval None
 */
static void Set_Random_Motion_Values(uint32_t cnt)
{ 
 8001334:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  /* Update Acceleration, Gyroscope and Sensor Fusion data */
  if (cnt < 20) {
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2b13      	cmp	r3, #19
 8001340:	f200 827c 	bhi.w	800183c <Set_Random_Motion_Values+0x508>
    x_axes.AXIS_X +=  (10  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8001344:	f019 f908 	bl	801a558 <rand>
 8001348:	4603      	mov	r3, r0
 800134a:	4619      	mov	r1, r3
 800134c:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f04f 0400 	mov.w	r4, #0
 8001356:	fb03 f502 	mul.w	r5, r3, r2
 800135a:	fb01 f004 	mul.w	r0, r1, r4
 800135e:	4428      	add	r0, r5
 8001360:	fba1 3403 	umull	r3, r4, r1, r3
 8001364:	1902      	adds	r2, r0, r4
 8001366:	4614      	mov	r4, r2
 8001368:	461d      	mov	r5, r3
 800136a:	4626      	mov	r6, r4
 800136c:	1969      	adds	r1, r5, r5
 800136e:	eb46 0206 	adc.w	r2, r6, r6
 8001372:	460d      	mov	r5, r1
 8001374:	4616      	mov	r6, r2
 8001376:	18e8      	adds	r0, r5, r3
 8001378:	eb46 0104 	adc.w	r1, r6, r4
 800137c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001380:	f04f 0300 	mov.w	r3, #0
 8001384:	f7ff fc68 	bl	8000c58 <__aeabi_uldivmod>
 8001388:	4603      	mov	r3, r0
 800138a:	460c      	mov	r4, r1
 800138c:	4619      	mov	r1, r3
 800138e:	4622      	mov	r2, r4
 8001390:	f111 030a 	adds.w	r3, r1, #10
 8001394:	f142 0400 	adc.w	r4, r2, #0
 8001398:	4ae0      	ldr	r2, [pc, #896]	; (800171c <Set_Random_Motion_Values+0x3e8>)
 800139a:	6812      	ldr	r2, [r2, #0]
 800139c:	4413      	add	r3, r2
 800139e:	461a      	mov	r2, r3
 80013a0:	4bde      	ldr	r3, [pc, #888]	; (800171c <Set_Random_Motion_Values+0x3e8>)
 80013a2:	601a      	str	r2, [r3, #0]
    x_axes.AXIS_Y += -(10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 80013a4:	f019 f8d8 	bl	801a558 <rand>
 80013a8:	4603      	mov	r3, r0
 80013aa:	4619      	mov	r1, r3
 80013ac:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f04f 0400 	mov.w	r4, #0
 80013b6:	fb03 f502 	mul.w	r5, r3, r2
 80013ba:	fb01 f004 	mul.w	r0, r1, r4
 80013be:	4428      	add	r0, r5
 80013c0:	fba1 5603 	umull	r5, r6, r1, r3
 80013c4:	1983      	adds	r3, r0, r6
 80013c6:	461e      	mov	r6, r3
 80013c8:	4629      	mov	r1, r5
 80013ca:	4632      	mov	r2, r6
 80013cc:	f04f 0300 	mov.w	r3, #0
 80013d0:	f04f 0400 	mov.w	r4, #0
 80013d4:	0094      	lsls	r4, r2, #2
 80013d6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80013da:	008b      	lsls	r3, r1, #2
 80013dc:	4619      	mov	r1, r3
 80013de:	4622      	mov	r2, r4
 80013e0:	194b      	adds	r3, r1, r5
 80013e2:	eb42 0406 	adc.w	r4, r2, r6
 80013e6:	4618      	mov	r0, r3
 80013e8:	4621      	mov	r1, r4
 80013ea:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80013ee:	f04f 0300 	mov.w	r3, #0
 80013f2:	f7ff fc31 	bl	8000c58 <__aeabi_uldivmod>
 80013f6:	4603      	mov	r3, r0
 80013f8:	460c      	mov	r4, r1
 80013fa:	4619      	mov	r1, r3
 80013fc:	4622      	mov	r2, r4
 80013fe:	f06f 0309 	mvn.w	r3, #9
 8001402:	f04f 34ff 	mov.w	r4, #4294967295
 8001406:	1a5b      	subs	r3, r3, r1
 8001408:	eb64 0402 	sbc.w	r4, r4, r2
 800140c:	461d      	mov	r5, r3
 800140e:	4626      	mov	r6, r4
 8001410:	4ac2      	ldr	r2, [pc, #776]	; (800171c <Set_Random_Motion_Values+0x3e8>)
 8001412:	6852      	ldr	r2, [r2, #4]
 8001414:	462b      	mov	r3, r5
 8001416:	4413      	add	r3, r2
 8001418:	461a      	mov	r2, r3
 800141a:	4bc0      	ldr	r3, [pc, #768]	; (800171c <Set_Random_Motion_Values+0x3e8>)
 800141c:	605a      	str	r2, [r3, #4]
    x_axes.AXIS_Z +=  (10  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 800141e:	f019 f89b 	bl	801a558 <rand>
 8001422:	4603      	mov	r3, r0
 8001424:	4619      	mov	r1, r3
 8001426:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	f04f 0400 	mov.w	r4, #0
 8001430:	fb03 f502 	mul.w	r5, r3, r2
 8001434:	fb01 f004 	mul.w	r0, r1, r4
 8001438:	4428      	add	r0, r5
 800143a:	fba1 5603 	umull	r5, r6, r1, r3
 800143e:	1983      	adds	r3, r0, r6
 8001440:	461e      	mov	r6, r3
 8001442:	4629      	mov	r1, r5
 8001444:	4632      	mov	r2, r6
 8001446:	f04f 0300 	mov.w	r3, #0
 800144a:	f04f 0400 	mov.w	r4, #0
 800144e:	00d4      	lsls	r4, r2, #3
 8001450:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001454:	00cb      	lsls	r3, r1, #3
 8001456:	4619      	mov	r1, r3
 8001458:	4622      	mov	r2, r4
 800145a:	1b49      	subs	r1, r1, r5
 800145c:	eb62 0206 	sbc.w	r2, r2, r6
 8001460:	4608      	mov	r0, r1
 8001462:	4611      	mov	r1, r2
 8001464:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001468:	f04f 0300 	mov.w	r3, #0
 800146c:	f7ff fbf4 	bl	8000c58 <__aeabi_uldivmod>
 8001470:	4603      	mov	r3, r0
 8001472:	460c      	mov	r4, r1
 8001474:	4619      	mov	r1, r3
 8001476:	4622      	mov	r2, r4
 8001478:	f111 030a 	adds.w	r3, r1, #10
 800147c:	f142 0400 	adc.w	r4, r2, #0
 8001480:	4aa6      	ldr	r2, [pc, #664]	; (800171c <Set_Random_Motion_Values+0x3e8>)
 8001482:	6892      	ldr	r2, [r2, #8]
 8001484:	4413      	add	r3, r2
 8001486:	461a      	mov	r2, r3
 8001488:	4ba4      	ldr	r3, [pc, #656]	; (800171c <Set_Random_Motion_Values+0x3e8>)
 800148a:	609a      	str	r2, [r3, #8]
    g_axes.AXIS_X +=  (100 + ((uint64_t)rand()*2*cnt)/RAND_MAX);
 800148c:	f019 f864 	bl	801a558 <rand>
 8001490:	4603      	mov	r3, r0
 8001492:	4619      	mov	r1, r3
 8001494:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f04f 0400 	mov.w	r4, #0
 800149e:	fb03 f502 	mul.w	r5, r3, r2
 80014a2:	fb01 f004 	mul.w	r0, r1, r4
 80014a6:	4428      	add	r0, r5
 80014a8:	fba1 5603 	umull	r5, r6, r1, r3
 80014ac:	1982      	adds	r2, r0, r6
 80014ae:	4616      	mov	r6, r2
 80014b0:	196b      	adds	r3, r5, r5
 80014b2:	eb46 0406 	adc.w	r4, r6, r6
 80014b6:	4618      	mov	r0, r3
 80014b8:	4621      	mov	r1, r4
 80014ba:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80014be:	f04f 0300 	mov.w	r3, #0
 80014c2:	f7ff fbc9 	bl	8000c58 <__aeabi_uldivmod>
 80014c6:	4603      	mov	r3, r0
 80014c8:	460c      	mov	r4, r1
 80014ca:	4619      	mov	r1, r3
 80014cc:	4622      	mov	r2, r4
 80014ce:	f111 0364 	adds.w	r3, r1, #100	; 0x64
 80014d2:	f142 0400 	adc.w	r4, r2, #0
 80014d6:	4a92      	ldr	r2, [pc, #584]	; (8001720 <Set_Random_Motion_Values+0x3ec>)
 80014d8:	6812      	ldr	r2, [r2, #0]
 80014da:	4413      	add	r3, r2
 80014dc:	461a      	mov	r2, r3
 80014de:	4b90      	ldr	r3, [pc, #576]	; (8001720 <Set_Random_Motion_Values+0x3ec>)
 80014e0:	601a      	str	r2, [r3, #0]
    g_axes.AXIS_Y += -(100 + ((uint64_t)rand()*4*cnt)/RAND_MAX);
 80014e2:	f019 f839 	bl	801a558 <rand>
 80014e6:	4603      	mov	r3, r0
 80014e8:	4619      	mov	r1, r3
 80014ea:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f04f 0400 	mov.w	r4, #0
 80014f4:	fb03 f502 	mul.w	r5, r3, r2
 80014f8:	fb01 f004 	mul.w	r0, r1, r4
 80014fc:	4428      	add	r0, r5
 80014fe:	fba1 3403 	umull	r3, r4, r1, r3
 8001502:	1902      	adds	r2, r0, r4
 8001504:	4614      	mov	r4, r2
 8001506:	f04f 0000 	mov.w	r0, #0
 800150a:	f04f 0100 	mov.w	r1, #0
 800150e:	00a1      	lsls	r1, r4, #2
 8001510:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 8001514:	0098      	lsls	r0, r3, #2
 8001516:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800151a:	f04f 0300 	mov.w	r3, #0
 800151e:	f7ff fb9b 	bl	8000c58 <__aeabi_uldivmod>
 8001522:	4603      	mov	r3, r0
 8001524:	460c      	mov	r4, r1
 8001526:	4619      	mov	r1, r3
 8001528:	4622      	mov	r2, r4
 800152a:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800152e:	f04f 34ff 	mov.w	r4, #4294967295
 8001532:	1a5b      	subs	r3, r3, r1
 8001534:	eb64 0402 	sbc.w	r4, r4, r2
 8001538:	461d      	mov	r5, r3
 800153a:	4626      	mov	r6, r4
 800153c:	4a78      	ldr	r2, [pc, #480]	; (8001720 <Set_Random_Motion_Values+0x3ec>)
 800153e:	6852      	ldr	r2, [r2, #4]
 8001540:	462b      	mov	r3, r5
 8001542:	4413      	add	r3, r2
 8001544:	461a      	mov	r2, r3
 8001546:	4b76      	ldr	r3, [pc, #472]	; (8001720 <Set_Random_Motion_Values+0x3ec>)
 8001548:	605a      	str	r2, [r3, #4]
    g_axes.AXIS_Z +=  (100 + ((uint64_t)rand()*6*cnt)/RAND_MAX);
 800154a:	f019 f805 	bl	801a558 <rand>
 800154e:	4603      	mov	r3, r0
 8001550:	4619      	mov	r1, r3
 8001552:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f04f 0400 	mov.w	r4, #0
 800155c:	fb03 f502 	mul.w	r5, r3, r2
 8001560:	fb01 f004 	mul.w	r0, r1, r4
 8001564:	4428      	add	r0, r5
 8001566:	fba1 1203 	umull	r1, r2, r1, r3
 800156a:	1883      	adds	r3, r0, r2
 800156c:	461a      	mov	r2, r3
 800156e:	460d      	mov	r5, r1
 8001570:	4616      	mov	r6, r2
 8001572:	196b      	adds	r3, r5, r5
 8001574:	eb46 0406 	adc.w	r4, r6, r6
 8001578:	461d      	mov	r5, r3
 800157a:	4626      	mov	r6, r4
 800157c:	186d      	adds	r5, r5, r1
 800157e:	eb46 0602 	adc.w	r6, r6, r2
 8001582:	196b      	adds	r3, r5, r5
 8001584:	eb46 0406 	adc.w	r4, r6, r6
 8001588:	461d      	mov	r5, r3
 800158a:	4626      	mov	r6, r4
 800158c:	4628      	mov	r0, r5
 800158e:	4631      	mov	r1, r6
 8001590:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001594:	f04f 0300 	mov.w	r3, #0
 8001598:	f7ff fb5e 	bl	8000c58 <__aeabi_uldivmod>
 800159c:	4603      	mov	r3, r0
 800159e:	460c      	mov	r4, r1
 80015a0:	4619      	mov	r1, r3
 80015a2:	4622      	mov	r2, r4
 80015a4:	f111 0364 	adds.w	r3, r1, #100	; 0x64
 80015a8:	f142 0400 	adc.w	r4, r2, #0
 80015ac:	4a5c      	ldr	r2, [pc, #368]	; (8001720 <Set_Random_Motion_Values+0x3ec>)
 80015ae:	6892      	ldr	r2, [r2, #8]
 80015b0:	4413      	add	r3, r2
 80015b2:	461a      	mov	r2, r3
 80015b4:	4b5a      	ldr	r3, [pc, #360]	; (8001720 <Set_Random_Motion_Values+0x3ec>)
 80015b6:	609a      	str	r2, [r3, #8]
    m_axes.AXIS_X +=  (3  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 80015b8:	f018 ffce 	bl	801a558 <rand>
 80015bc:	4603      	mov	r3, r0
 80015be:	4619      	mov	r1, r3
 80015c0:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f04f 0400 	mov.w	r4, #0
 80015ca:	fb03 f502 	mul.w	r5, r3, r2
 80015ce:	fb01 f004 	mul.w	r0, r1, r4
 80015d2:	4428      	add	r0, r5
 80015d4:	fba1 3403 	umull	r3, r4, r1, r3
 80015d8:	1902      	adds	r2, r0, r4
 80015da:	4614      	mov	r4, r2
 80015dc:	461d      	mov	r5, r3
 80015de:	4626      	mov	r6, r4
 80015e0:	1969      	adds	r1, r5, r5
 80015e2:	eb46 0206 	adc.w	r2, r6, r6
 80015e6:	460d      	mov	r5, r1
 80015e8:	4616      	mov	r6, r2
 80015ea:	18e8      	adds	r0, r5, r3
 80015ec:	eb46 0104 	adc.w	r1, r6, r4
 80015f0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80015f4:	f04f 0300 	mov.w	r3, #0
 80015f8:	f7ff fb2e 	bl	8000c58 <__aeabi_uldivmod>
 80015fc:	4603      	mov	r3, r0
 80015fe:	460c      	mov	r4, r1
 8001600:	4619      	mov	r1, r3
 8001602:	4622      	mov	r2, r4
 8001604:	1ccb      	adds	r3, r1, #3
 8001606:	f142 0400 	adc.w	r4, r2, #0
 800160a:	4a46      	ldr	r2, [pc, #280]	; (8001724 <Set_Random_Motion_Values+0x3f0>)
 800160c:	6812      	ldr	r2, [r2, #0]
 800160e:	4413      	add	r3, r2
 8001610:	461a      	mov	r2, r3
 8001612:	4b44      	ldr	r3, [pc, #272]	; (8001724 <Set_Random_Motion_Values+0x3f0>)
 8001614:	601a      	str	r2, [r3, #0]
    m_axes.AXIS_Y += -(3  + ((uint64_t)rand()*4*cnt)/RAND_MAX);
 8001616:	f018 ff9f 	bl	801a558 <rand>
 800161a:	4603      	mov	r3, r0
 800161c:	4619      	mov	r1, r3
 800161e:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f04f 0400 	mov.w	r4, #0
 8001628:	fb03 f502 	mul.w	r5, r3, r2
 800162c:	fb01 f004 	mul.w	r0, r1, r4
 8001630:	4428      	add	r0, r5
 8001632:	fba1 3403 	umull	r3, r4, r1, r3
 8001636:	1902      	adds	r2, r0, r4
 8001638:	4614      	mov	r4, r2
 800163a:	f04f 0000 	mov.w	r0, #0
 800163e:	f04f 0100 	mov.w	r1, #0
 8001642:	00a1      	lsls	r1, r4, #2
 8001644:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 8001648:	0098      	lsls	r0, r3, #2
 800164a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800164e:	f04f 0300 	mov.w	r3, #0
 8001652:	f7ff fb01 	bl	8000c58 <__aeabi_uldivmod>
 8001656:	4603      	mov	r3, r0
 8001658:	460c      	mov	r4, r1
 800165a:	4619      	mov	r1, r3
 800165c:	4622      	mov	r2, r4
 800165e:	f06f 0302 	mvn.w	r3, #2
 8001662:	f04f 34ff 	mov.w	r4, #4294967295
 8001666:	1a5b      	subs	r3, r3, r1
 8001668:	eb64 0402 	sbc.w	r4, r4, r2
 800166c:	461d      	mov	r5, r3
 800166e:	4626      	mov	r6, r4
 8001670:	4a2c      	ldr	r2, [pc, #176]	; (8001724 <Set_Random_Motion_Values+0x3f0>)
 8001672:	6852      	ldr	r2, [r2, #4]
 8001674:	462b      	mov	r3, r5
 8001676:	4413      	add	r3, r2
 8001678:	461a      	mov	r2, r3
 800167a:	4b2a      	ldr	r3, [pc, #168]	; (8001724 <Set_Random_Motion_Values+0x3f0>)
 800167c:	605a      	str	r2, [r3, #4]
    m_axes.AXIS_Z +=  (3  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 800167e:	f018 ff6b 	bl	801a558 <rand>
 8001682:	4603      	mov	r3, r0
 8001684:	4619      	mov	r1, r3
 8001686:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	f04f 0400 	mov.w	r4, #0
 8001690:	fb03 f502 	mul.w	r5, r3, r2
 8001694:	fb01 f004 	mul.w	r0, r1, r4
 8001698:	4428      	add	r0, r5
 800169a:	fba1 5603 	umull	r5, r6, r1, r3
 800169e:	1983      	adds	r3, r0, r6
 80016a0:	461e      	mov	r6, r3
 80016a2:	4629      	mov	r1, r5
 80016a4:	4632      	mov	r2, r6
 80016a6:	f04f 0300 	mov.w	r3, #0
 80016aa:	f04f 0400 	mov.w	r4, #0
 80016ae:	0094      	lsls	r4, r2, #2
 80016b0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80016b4:	008b      	lsls	r3, r1, #2
 80016b6:	4619      	mov	r1, r3
 80016b8:	4622      	mov	r2, r4
 80016ba:	194b      	adds	r3, r1, r5
 80016bc:	eb42 0406 	adc.w	r4, r2, r6
 80016c0:	4618      	mov	r0, r3
 80016c2:	4621      	mov	r1, r4
 80016c4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80016c8:	f04f 0300 	mov.w	r3, #0
 80016cc:	f7ff fac4 	bl	8000c58 <__aeabi_uldivmod>
 80016d0:	4603      	mov	r3, r0
 80016d2:	460c      	mov	r4, r1
 80016d4:	4619      	mov	r1, r3
 80016d6:	4622      	mov	r2, r4
 80016d8:	1ccb      	adds	r3, r1, #3
 80016da:	f142 0400 	adc.w	r4, r2, #0
 80016de:	4a11      	ldr	r2, [pc, #68]	; (8001724 <Set_Random_Motion_Values+0x3f0>)
 80016e0:	6892      	ldr	r2, [r2, #8]
 80016e2:	4413      	add	r3, r2
 80016e4:	461a      	mov	r2, r3
 80016e6:	4b0f      	ldr	r3, [pc, #60]	; (8001724 <Set_Random_Motion_Values+0x3f0>)
 80016e8:	609a      	str	r2, [r3, #8]
    
    q_axes.AXIS_X -= (100  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 80016ea:	f018 ff35 	bl	801a558 <rand>
 80016ee:	4603      	mov	r3, r0
 80016f0:	4619      	mov	r1, r3
 80016f2:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	f04f 0400 	mov.w	r4, #0
 80016fc:	fb03 f502 	mul.w	r5, r3, r2
 8001700:	fb01 f004 	mul.w	r0, r1, r4
 8001704:	4428      	add	r0, r5
 8001706:	fba1 3403 	umull	r3, r4, r1, r3
 800170a:	1902      	adds	r2, r0, r4
 800170c:	4614      	mov	r4, r2
 800170e:	461d      	mov	r5, r3
 8001710:	4626      	mov	r6, r4
 8001712:	1969      	adds	r1, r5, r5
 8001714:	eb46 0206 	adc.w	r2, r6, r6
 8001718:	e006      	b.n	8001728 <Set_Random_Motion_Values+0x3f4>
 800171a:	bf00      	nop
 800171c:	200021c0 	.word	0x200021c0
 8001720:	200021cc 	.word	0x200021cc
 8001724:	200021d8 	.word	0x200021d8
 8001728:	460d      	mov	r5, r1
 800172a:	4616      	mov	r6, r2
 800172c:	18e8      	adds	r0, r5, r3
 800172e:	eb46 0104 	adc.w	r1, r6, r4
 8001732:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001736:	f04f 0300 	mov.w	r3, #0
 800173a:	f7ff fa8d 	bl	8000c58 <__aeabi_uldivmod>
 800173e:	4603      	mov	r3, r0
 8001740:	460c      	mov	r4, r1
 8001742:	4619      	mov	r1, r3
 8001744:	4622      	mov	r2, r4
 8001746:	f111 0364 	adds.w	r3, r1, #100	; 0x64
 800174a:	f142 0400 	adc.w	r4, r2, #0
 800174e:	4a3a      	ldr	r2, [pc, #232]	; (8001838 <Set_Random_Motion_Values+0x504>)
 8001750:	6812      	ldr	r2, [r2, #0]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	461a      	mov	r2, r3
 8001756:	4b38      	ldr	r3, [pc, #224]	; (8001838 <Set_Random_Motion_Values+0x504>)
 8001758:	601a      	str	r2, [r3, #0]
    q_axes.AXIS_Y += (100  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 800175a:	f018 fefd 	bl	801a558 <rand>
 800175e:	4603      	mov	r3, r0
 8001760:	4619      	mov	r1, r3
 8001762:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	f04f 0400 	mov.w	r4, #0
 800176c:	fb03 f502 	mul.w	r5, r3, r2
 8001770:	fb01 f004 	mul.w	r0, r1, r4
 8001774:	4428      	add	r0, r5
 8001776:	fba1 5603 	umull	r5, r6, r1, r3
 800177a:	1983      	adds	r3, r0, r6
 800177c:	461e      	mov	r6, r3
 800177e:	4629      	mov	r1, r5
 8001780:	4632      	mov	r2, r6
 8001782:	f04f 0300 	mov.w	r3, #0
 8001786:	f04f 0400 	mov.w	r4, #0
 800178a:	0094      	lsls	r4, r2, #2
 800178c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8001790:	008b      	lsls	r3, r1, #2
 8001792:	4619      	mov	r1, r3
 8001794:	4622      	mov	r2, r4
 8001796:	194b      	adds	r3, r1, r5
 8001798:	eb42 0406 	adc.w	r4, r2, r6
 800179c:	4618      	mov	r0, r3
 800179e:	4621      	mov	r1, r4
 80017a0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80017a4:	f04f 0300 	mov.w	r3, #0
 80017a8:	f7ff fa56 	bl	8000c58 <__aeabi_uldivmod>
 80017ac:	4603      	mov	r3, r0
 80017ae:	460c      	mov	r4, r1
 80017b0:	4619      	mov	r1, r3
 80017b2:	4622      	mov	r2, r4
 80017b4:	f111 0364 	adds.w	r3, r1, #100	; 0x64
 80017b8:	f142 0400 	adc.w	r4, r2, #0
 80017bc:	4a1e      	ldr	r2, [pc, #120]	; (8001838 <Set_Random_Motion_Values+0x504>)
 80017be:	6852      	ldr	r2, [r2, #4]
 80017c0:	4413      	add	r3, r2
 80017c2:	461a      	mov	r2, r3
 80017c4:	4b1c      	ldr	r3, [pc, #112]	; (8001838 <Set_Random_Motion_Values+0x504>)
 80017c6:	605a      	str	r2, [r3, #4]
    q_axes.AXIS_Z -= (100  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 80017c8:	f018 fec6 	bl	801a558 <rand>
 80017cc:	4603      	mov	r3, r0
 80017ce:	4619      	mov	r1, r3
 80017d0:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f04f 0400 	mov.w	r4, #0
 80017da:	fb03 f502 	mul.w	r5, r3, r2
 80017de:	fb01 f004 	mul.w	r0, r1, r4
 80017e2:	4428      	add	r0, r5
 80017e4:	fba1 5603 	umull	r5, r6, r1, r3
 80017e8:	1983      	adds	r3, r0, r6
 80017ea:	461e      	mov	r6, r3
 80017ec:	4629      	mov	r1, r5
 80017ee:	4632      	mov	r2, r6
 80017f0:	f04f 0300 	mov.w	r3, #0
 80017f4:	f04f 0400 	mov.w	r4, #0
 80017f8:	00d4      	lsls	r4, r2, #3
 80017fa:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80017fe:	00cb      	lsls	r3, r1, #3
 8001800:	4619      	mov	r1, r3
 8001802:	4622      	mov	r2, r4
 8001804:	1b49      	subs	r1, r1, r5
 8001806:	eb62 0206 	sbc.w	r2, r2, r6
 800180a:	4608      	mov	r0, r1
 800180c:	4611      	mov	r1, r2
 800180e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001812:	f04f 0300 	mov.w	r3, #0
 8001816:	f7ff fa1f 	bl	8000c58 <__aeabi_uldivmod>
 800181a:	4603      	mov	r3, r0
 800181c:	460c      	mov	r4, r1
 800181e:	4619      	mov	r1, r3
 8001820:	4622      	mov	r2, r4
 8001822:	f111 0364 	adds.w	r3, r1, #100	; 0x64
 8001826:	f142 0400 	adc.w	r4, r2, #0
 800182a:	4a03      	ldr	r2, [pc, #12]	; (8001838 <Set_Random_Motion_Values+0x504>)
 800182c:	6892      	ldr	r2, [r2, #8]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	461a      	mov	r2, r3
 8001832:	4b01      	ldr	r3, [pc, #4]	; (8001838 <Set_Random_Motion_Values+0x504>)
 8001834:	609a      	str	r2, [r3, #8]
    q_axes.AXIS_X += (200 + ((uint64_t)rand()*7*cnt)/RAND_MAX);
    q_axes.AXIS_Y -= (150 + ((uint64_t)rand()*3*cnt)/RAND_MAX);
    q_axes.AXIS_Z += (10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
  }
  
}
 8001836:	e295      	b.n	8001d64 <Set_Random_Motion_Values+0xa30>
 8001838:	200021e4 	.word	0x200021e4
    x_axes.AXIS_X += -(10  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 800183c:	f018 fe8c 	bl	801a558 <rand>
 8001840:	4603      	mov	r3, r0
 8001842:	4619      	mov	r1, r3
 8001844:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f04f 0400 	mov.w	r4, #0
 800184e:	fb03 f502 	mul.w	r5, r3, r2
 8001852:	fb01 f004 	mul.w	r0, r1, r4
 8001856:	4428      	add	r0, r5
 8001858:	fba1 3403 	umull	r3, r4, r1, r3
 800185c:	1902      	adds	r2, r0, r4
 800185e:	4614      	mov	r4, r2
 8001860:	461d      	mov	r5, r3
 8001862:	4626      	mov	r6, r4
 8001864:	1969      	adds	r1, r5, r5
 8001866:	eb46 0206 	adc.w	r2, r6, r6
 800186a:	460d      	mov	r5, r1
 800186c:	4616      	mov	r6, r2
 800186e:	18e8      	adds	r0, r5, r3
 8001870:	eb46 0104 	adc.w	r1, r6, r4
 8001874:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001878:	f04f 0300 	mov.w	r3, #0
 800187c:	f7ff f9ec 	bl	8000c58 <__aeabi_uldivmod>
 8001880:	4603      	mov	r3, r0
 8001882:	460c      	mov	r4, r1
 8001884:	4619      	mov	r1, r3
 8001886:	4622      	mov	r2, r4
 8001888:	f06f 0309 	mvn.w	r3, #9
 800188c:	f04f 34ff 	mov.w	r4, #4294967295
 8001890:	1a5b      	subs	r3, r3, r1
 8001892:	eb64 0402 	sbc.w	r4, r4, r2
 8001896:	461d      	mov	r5, r3
 8001898:	4626      	mov	r6, r4
 800189a:	4ae0      	ldr	r2, [pc, #896]	; (8001c1c <Set_Random_Motion_Values+0x8e8>)
 800189c:	6812      	ldr	r2, [r2, #0]
 800189e:	462b      	mov	r3, r5
 80018a0:	4413      	add	r3, r2
 80018a2:	461a      	mov	r2, r3
 80018a4:	4bdd      	ldr	r3, [pc, #884]	; (8001c1c <Set_Random_Motion_Values+0x8e8>)
 80018a6:	601a      	str	r2, [r3, #0]
    x_axes.AXIS_Y +=  (10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 80018a8:	f018 fe56 	bl	801a558 <rand>
 80018ac:	4603      	mov	r3, r0
 80018ae:	4619      	mov	r1, r3
 80018b0:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f04f 0400 	mov.w	r4, #0
 80018ba:	fb03 f502 	mul.w	r5, r3, r2
 80018be:	fb01 f004 	mul.w	r0, r1, r4
 80018c2:	4428      	add	r0, r5
 80018c4:	fba1 5603 	umull	r5, r6, r1, r3
 80018c8:	1983      	adds	r3, r0, r6
 80018ca:	461e      	mov	r6, r3
 80018cc:	4629      	mov	r1, r5
 80018ce:	4632      	mov	r2, r6
 80018d0:	f04f 0300 	mov.w	r3, #0
 80018d4:	f04f 0400 	mov.w	r4, #0
 80018d8:	0094      	lsls	r4, r2, #2
 80018da:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80018de:	008b      	lsls	r3, r1, #2
 80018e0:	4619      	mov	r1, r3
 80018e2:	4622      	mov	r2, r4
 80018e4:	194b      	adds	r3, r1, r5
 80018e6:	eb42 0406 	adc.w	r4, r2, r6
 80018ea:	4618      	mov	r0, r3
 80018ec:	4621      	mov	r1, r4
 80018ee:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80018f2:	f04f 0300 	mov.w	r3, #0
 80018f6:	f7ff f9af 	bl	8000c58 <__aeabi_uldivmod>
 80018fa:	4603      	mov	r3, r0
 80018fc:	460c      	mov	r4, r1
 80018fe:	4619      	mov	r1, r3
 8001900:	4622      	mov	r2, r4
 8001902:	f111 030a 	adds.w	r3, r1, #10
 8001906:	f142 0400 	adc.w	r4, r2, #0
 800190a:	4ac4      	ldr	r2, [pc, #784]	; (8001c1c <Set_Random_Motion_Values+0x8e8>)
 800190c:	6852      	ldr	r2, [r2, #4]
 800190e:	4413      	add	r3, r2
 8001910:	461a      	mov	r2, r3
 8001912:	4bc2      	ldr	r3, [pc, #776]	; (8001c1c <Set_Random_Motion_Values+0x8e8>)
 8001914:	605a      	str	r2, [r3, #4]
    x_axes.AXIS_Z += -(10  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8001916:	f018 fe1f 	bl	801a558 <rand>
 800191a:	4603      	mov	r3, r0
 800191c:	4619      	mov	r1, r3
 800191e:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f04f 0400 	mov.w	r4, #0
 8001928:	fb03 f502 	mul.w	r5, r3, r2
 800192c:	fb01 f004 	mul.w	r0, r1, r4
 8001930:	4428      	add	r0, r5
 8001932:	fba1 5603 	umull	r5, r6, r1, r3
 8001936:	1983      	adds	r3, r0, r6
 8001938:	461e      	mov	r6, r3
 800193a:	4629      	mov	r1, r5
 800193c:	4632      	mov	r2, r6
 800193e:	f04f 0300 	mov.w	r3, #0
 8001942:	f04f 0400 	mov.w	r4, #0
 8001946:	00d4      	lsls	r4, r2, #3
 8001948:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800194c:	00cb      	lsls	r3, r1, #3
 800194e:	4619      	mov	r1, r3
 8001950:	4622      	mov	r2, r4
 8001952:	1b49      	subs	r1, r1, r5
 8001954:	eb62 0206 	sbc.w	r2, r2, r6
 8001958:	4608      	mov	r0, r1
 800195a:	4611      	mov	r1, r2
 800195c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001960:	f04f 0300 	mov.w	r3, #0
 8001964:	f7ff f978 	bl	8000c58 <__aeabi_uldivmod>
 8001968:	4603      	mov	r3, r0
 800196a:	460c      	mov	r4, r1
 800196c:	4619      	mov	r1, r3
 800196e:	4622      	mov	r2, r4
 8001970:	f06f 0309 	mvn.w	r3, #9
 8001974:	f04f 34ff 	mov.w	r4, #4294967295
 8001978:	1a5b      	subs	r3, r3, r1
 800197a:	eb64 0402 	sbc.w	r4, r4, r2
 800197e:	461d      	mov	r5, r3
 8001980:	4626      	mov	r6, r4
 8001982:	4aa6      	ldr	r2, [pc, #664]	; (8001c1c <Set_Random_Motion_Values+0x8e8>)
 8001984:	6892      	ldr	r2, [r2, #8]
 8001986:	462b      	mov	r3, r5
 8001988:	4413      	add	r3, r2
 800198a:	461a      	mov	r2, r3
 800198c:	4ba3      	ldr	r3, [pc, #652]	; (8001c1c <Set_Random_Motion_Values+0x8e8>)
 800198e:	609a      	str	r2, [r3, #8]
    g_axes.AXIS_X += -(100 + ((uint64_t)rand()*2*cnt)/RAND_MAX);
 8001990:	f018 fde2 	bl	801a558 <rand>
 8001994:	4603      	mov	r3, r0
 8001996:	4619      	mov	r1, r3
 8001998:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f04f 0400 	mov.w	r4, #0
 80019a2:	fb03 f502 	mul.w	r5, r3, r2
 80019a6:	fb01 f004 	mul.w	r0, r1, r4
 80019aa:	4428      	add	r0, r5
 80019ac:	fba1 5603 	umull	r5, r6, r1, r3
 80019b0:	1982      	adds	r2, r0, r6
 80019b2:	4616      	mov	r6, r2
 80019b4:	196b      	adds	r3, r5, r5
 80019b6:	eb46 0406 	adc.w	r4, r6, r6
 80019ba:	4618      	mov	r0, r3
 80019bc:	4621      	mov	r1, r4
 80019be:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80019c2:	f04f 0300 	mov.w	r3, #0
 80019c6:	f7ff f947 	bl	8000c58 <__aeabi_uldivmod>
 80019ca:	4603      	mov	r3, r0
 80019cc:	460c      	mov	r4, r1
 80019ce:	4619      	mov	r1, r3
 80019d0:	4622      	mov	r2, r4
 80019d2:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80019d6:	f04f 34ff 	mov.w	r4, #4294967295
 80019da:	1a5b      	subs	r3, r3, r1
 80019dc:	eb64 0402 	sbc.w	r4, r4, r2
 80019e0:	461d      	mov	r5, r3
 80019e2:	4626      	mov	r6, r4
 80019e4:	4a8e      	ldr	r2, [pc, #568]	; (8001c20 <Set_Random_Motion_Values+0x8ec>)
 80019e6:	6812      	ldr	r2, [r2, #0]
 80019e8:	462b      	mov	r3, r5
 80019ea:	4413      	add	r3, r2
 80019ec:	461a      	mov	r2, r3
 80019ee:	4b8c      	ldr	r3, [pc, #560]	; (8001c20 <Set_Random_Motion_Values+0x8ec>)
 80019f0:	601a      	str	r2, [r3, #0]
    g_axes.AXIS_Y +=  (100 + ((uint64_t)rand()*4*cnt)/RAND_MAX);
 80019f2:	f018 fdb1 	bl	801a558 <rand>
 80019f6:	4603      	mov	r3, r0
 80019f8:	4619      	mov	r1, r3
 80019fa:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f04f 0400 	mov.w	r4, #0
 8001a04:	fb03 f502 	mul.w	r5, r3, r2
 8001a08:	fb01 f004 	mul.w	r0, r1, r4
 8001a0c:	4428      	add	r0, r5
 8001a0e:	fba1 3403 	umull	r3, r4, r1, r3
 8001a12:	1902      	adds	r2, r0, r4
 8001a14:	4614      	mov	r4, r2
 8001a16:	f04f 0000 	mov.w	r0, #0
 8001a1a:	f04f 0100 	mov.w	r1, #0
 8001a1e:	00a1      	lsls	r1, r4, #2
 8001a20:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 8001a24:	0098      	lsls	r0, r3, #2
 8001a26:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001a2a:	f04f 0300 	mov.w	r3, #0
 8001a2e:	f7ff f913 	bl	8000c58 <__aeabi_uldivmod>
 8001a32:	4603      	mov	r3, r0
 8001a34:	460c      	mov	r4, r1
 8001a36:	4619      	mov	r1, r3
 8001a38:	4622      	mov	r2, r4
 8001a3a:	f111 0364 	adds.w	r3, r1, #100	; 0x64
 8001a3e:	f142 0400 	adc.w	r4, r2, #0
 8001a42:	4a77      	ldr	r2, [pc, #476]	; (8001c20 <Set_Random_Motion_Values+0x8ec>)
 8001a44:	6852      	ldr	r2, [r2, #4]
 8001a46:	4413      	add	r3, r2
 8001a48:	461a      	mov	r2, r3
 8001a4a:	4b75      	ldr	r3, [pc, #468]	; (8001c20 <Set_Random_Motion_Values+0x8ec>)
 8001a4c:	605a      	str	r2, [r3, #4]
    g_axes.AXIS_Z += -(100 + ((uint64_t)rand()*6*cnt)/RAND_MAX);
 8001a4e:	f018 fd83 	bl	801a558 <rand>
 8001a52:	4603      	mov	r3, r0
 8001a54:	4619      	mov	r1, r3
 8001a56:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	f04f 0400 	mov.w	r4, #0
 8001a60:	fb03 f502 	mul.w	r5, r3, r2
 8001a64:	fb01 f004 	mul.w	r0, r1, r4
 8001a68:	4428      	add	r0, r5
 8001a6a:	fba1 1203 	umull	r1, r2, r1, r3
 8001a6e:	1883      	adds	r3, r0, r2
 8001a70:	461a      	mov	r2, r3
 8001a72:	460d      	mov	r5, r1
 8001a74:	4616      	mov	r6, r2
 8001a76:	196b      	adds	r3, r5, r5
 8001a78:	eb46 0406 	adc.w	r4, r6, r6
 8001a7c:	461d      	mov	r5, r3
 8001a7e:	4626      	mov	r6, r4
 8001a80:	186d      	adds	r5, r5, r1
 8001a82:	eb46 0602 	adc.w	r6, r6, r2
 8001a86:	196b      	adds	r3, r5, r5
 8001a88:	eb46 0406 	adc.w	r4, r6, r6
 8001a8c:	461d      	mov	r5, r3
 8001a8e:	4626      	mov	r6, r4
 8001a90:	4628      	mov	r0, r5
 8001a92:	4631      	mov	r1, r6
 8001a94:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001a98:	f04f 0300 	mov.w	r3, #0
 8001a9c:	f7ff f8dc 	bl	8000c58 <__aeabi_uldivmod>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	460c      	mov	r4, r1
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4622      	mov	r2, r4
 8001aa8:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8001aac:	f04f 34ff 	mov.w	r4, #4294967295
 8001ab0:	1a5b      	subs	r3, r3, r1
 8001ab2:	eb64 0402 	sbc.w	r4, r4, r2
 8001ab6:	461d      	mov	r5, r3
 8001ab8:	4626      	mov	r6, r4
 8001aba:	4a59      	ldr	r2, [pc, #356]	; (8001c20 <Set_Random_Motion_Values+0x8ec>)
 8001abc:	6892      	ldr	r2, [r2, #8]
 8001abe:	462b      	mov	r3, r5
 8001ac0:	4413      	add	r3, r2
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	4b56      	ldr	r3, [pc, #344]	; (8001c20 <Set_Random_Motion_Values+0x8ec>)
 8001ac6:	609a      	str	r2, [r3, #8]
    m_axes.AXIS_X += -(3  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8001ac8:	f018 fd46 	bl	801a558 <rand>
 8001acc:	4603      	mov	r3, r0
 8001ace:	4619      	mov	r1, r3
 8001ad0:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f04f 0400 	mov.w	r4, #0
 8001ada:	fb03 f502 	mul.w	r5, r3, r2
 8001ade:	fb01 f004 	mul.w	r0, r1, r4
 8001ae2:	4428      	add	r0, r5
 8001ae4:	fba1 5603 	umull	r5, r6, r1, r3
 8001ae8:	1983      	adds	r3, r0, r6
 8001aea:	461e      	mov	r6, r3
 8001aec:	4629      	mov	r1, r5
 8001aee:	4632      	mov	r2, r6
 8001af0:	f04f 0300 	mov.w	r3, #0
 8001af4:	f04f 0400 	mov.w	r4, #0
 8001af8:	00d4      	lsls	r4, r2, #3
 8001afa:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001afe:	00cb      	lsls	r3, r1, #3
 8001b00:	4619      	mov	r1, r3
 8001b02:	4622      	mov	r2, r4
 8001b04:	1b49      	subs	r1, r1, r5
 8001b06:	eb62 0206 	sbc.w	r2, r2, r6
 8001b0a:	4608      	mov	r0, r1
 8001b0c:	4611      	mov	r1, r2
 8001b0e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001b12:	f04f 0300 	mov.w	r3, #0
 8001b16:	f7ff f89f 	bl	8000c58 <__aeabi_uldivmod>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	460c      	mov	r4, r1
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4622      	mov	r2, r4
 8001b22:	f06f 0302 	mvn.w	r3, #2
 8001b26:	f04f 34ff 	mov.w	r4, #4294967295
 8001b2a:	1a5b      	subs	r3, r3, r1
 8001b2c:	eb64 0402 	sbc.w	r4, r4, r2
 8001b30:	461d      	mov	r5, r3
 8001b32:	4626      	mov	r6, r4
 8001b34:	4a3b      	ldr	r2, [pc, #236]	; (8001c24 <Set_Random_Motion_Values+0x8f0>)
 8001b36:	6812      	ldr	r2, [r2, #0]
 8001b38:	462b      	mov	r3, r5
 8001b3a:	4413      	add	r3, r2
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	4b39      	ldr	r3, [pc, #228]	; (8001c24 <Set_Random_Motion_Values+0x8f0>)
 8001b40:	601a      	str	r2, [r3, #0]
    m_axes.AXIS_Y +=  (3  + ((uint64_t)rand()*9*cnt)/RAND_MAX);
 8001b42:	f018 fd09 	bl	801a558 <rand>
 8001b46:	4603      	mov	r3, r0
 8001b48:	4619      	mov	r1, r3
 8001b4a:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f04f 0400 	mov.w	r4, #0
 8001b54:	fb03 f502 	mul.w	r5, r3, r2
 8001b58:	fb01 f004 	mul.w	r0, r1, r4
 8001b5c:	4428      	add	r0, r5
 8001b5e:	fba1 5603 	umull	r5, r6, r1, r3
 8001b62:	1983      	adds	r3, r0, r6
 8001b64:	461e      	mov	r6, r3
 8001b66:	4629      	mov	r1, r5
 8001b68:	4632      	mov	r2, r6
 8001b6a:	f04f 0300 	mov.w	r3, #0
 8001b6e:	f04f 0400 	mov.w	r4, #0
 8001b72:	00d4      	lsls	r4, r2, #3
 8001b74:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001b78:	00cb      	lsls	r3, r1, #3
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4622      	mov	r2, r4
 8001b7e:	194b      	adds	r3, r1, r5
 8001b80:	eb42 0406 	adc.w	r4, r2, r6
 8001b84:	4618      	mov	r0, r3
 8001b86:	4621      	mov	r1, r4
 8001b88:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001b8c:	f04f 0300 	mov.w	r3, #0
 8001b90:	f7ff f862 	bl	8000c58 <__aeabi_uldivmod>
 8001b94:	4603      	mov	r3, r0
 8001b96:	460c      	mov	r4, r1
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4622      	mov	r2, r4
 8001b9c:	1ccb      	adds	r3, r1, #3
 8001b9e:	f142 0400 	adc.w	r4, r2, #0
 8001ba2:	4a20      	ldr	r2, [pc, #128]	; (8001c24 <Set_Random_Motion_Values+0x8f0>)
 8001ba4:	6852      	ldr	r2, [r2, #4]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	461a      	mov	r2, r3
 8001baa:	4b1e      	ldr	r3, [pc, #120]	; (8001c24 <Set_Random_Motion_Values+0x8f0>)
 8001bac:	605a      	str	r2, [r3, #4]
    m_axes.AXIS_Z += -(3  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8001bae:	f018 fcd3 	bl	801a558 <rand>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f04f 0400 	mov.w	r4, #0
 8001bc0:	fb03 f502 	mul.w	r5, r3, r2
 8001bc4:	fb01 f004 	mul.w	r0, r1, r4
 8001bc8:	4428      	add	r0, r5
 8001bca:	fba1 3403 	umull	r3, r4, r1, r3
 8001bce:	1902      	adds	r2, r0, r4
 8001bd0:	4614      	mov	r4, r2
 8001bd2:	461d      	mov	r5, r3
 8001bd4:	4626      	mov	r6, r4
 8001bd6:	1969      	adds	r1, r5, r5
 8001bd8:	eb46 0206 	adc.w	r2, r6, r6
 8001bdc:	460d      	mov	r5, r1
 8001bde:	4616      	mov	r6, r2
 8001be0:	18e8      	adds	r0, r5, r3
 8001be2:	eb46 0104 	adc.w	r1, r6, r4
 8001be6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001bea:	f04f 0300 	mov.w	r3, #0
 8001bee:	f7ff f833 	bl	8000c58 <__aeabi_uldivmod>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	460c      	mov	r4, r1
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4622      	mov	r2, r4
 8001bfa:	f06f 0302 	mvn.w	r3, #2
 8001bfe:	f04f 34ff 	mov.w	r4, #4294967295
 8001c02:	1a5b      	subs	r3, r3, r1
 8001c04:	eb64 0402 	sbc.w	r4, r4, r2
 8001c08:	461d      	mov	r5, r3
 8001c0a:	4626      	mov	r6, r4
 8001c0c:	4a05      	ldr	r2, [pc, #20]	; (8001c24 <Set_Random_Motion_Values+0x8f0>)
 8001c0e:	6892      	ldr	r2, [r2, #8]
 8001c10:	462b      	mov	r3, r5
 8001c12:	4413      	add	r3, r2
 8001c14:	461a      	mov	r2, r3
 8001c16:	4b03      	ldr	r3, [pc, #12]	; (8001c24 <Set_Random_Motion_Values+0x8f0>)
 8001c18:	609a      	str	r2, [r3, #8]
 8001c1a:	e005      	b.n	8001c28 <Set_Random_Motion_Values+0x8f4>
 8001c1c:	200021c0 	.word	0x200021c0
 8001c20:	200021cc 	.word	0x200021cc
 8001c24:	200021d8 	.word	0x200021d8
    q_axes.AXIS_X += (200 + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8001c28:	f018 fc96 	bl	801a558 <rand>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	4619      	mov	r1, r3
 8001c30:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f04f 0400 	mov.w	r4, #0
 8001c3a:	fb03 f502 	mul.w	r5, r3, r2
 8001c3e:	fb01 f004 	mul.w	r0, r1, r4
 8001c42:	4428      	add	r0, r5
 8001c44:	fba1 5603 	umull	r5, r6, r1, r3
 8001c48:	1983      	adds	r3, r0, r6
 8001c4a:	461e      	mov	r6, r3
 8001c4c:	4629      	mov	r1, r5
 8001c4e:	4632      	mov	r2, r6
 8001c50:	f04f 0300 	mov.w	r3, #0
 8001c54:	f04f 0400 	mov.w	r4, #0
 8001c58:	00d4      	lsls	r4, r2, #3
 8001c5a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001c5e:	00cb      	lsls	r3, r1, #3
 8001c60:	4619      	mov	r1, r3
 8001c62:	4622      	mov	r2, r4
 8001c64:	1b49      	subs	r1, r1, r5
 8001c66:	eb62 0206 	sbc.w	r2, r2, r6
 8001c6a:	4608      	mov	r0, r1
 8001c6c:	4611      	mov	r1, r2
 8001c6e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001c72:	f04f 0300 	mov.w	r3, #0
 8001c76:	f7fe ffef 	bl	8000c58 <__aeabi_uldivmod>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	460c      	mov	r4, r1
 8001c7e:	4619      	mov	r1, r3
 8001c80:	4622      	mov	r2, r4
 8001c82:	f111 03c8 	adds.w	r3, r1, #200	; 0xc8
 8001c86:	f142 0400 	adc.w	r4, r2, #0
 8001c8a:	4a38      	ldr	r2, [pc, #224]	; (8001d6c <Set_Random_Motion_Values+0xa38>)
 8001c8c:	6812      	ldr	r2, [r2, #0]
 8001c8e:	4413      	add	r3, r2
 8001c90:	461a      	mov	r2, r3
 8001c92:	4b36      	ldr	r3, [pc, #216]	; (8001d6c <Set_Random_Motion_Values+0xa38>)
 8001c94:	601a      	str	r2, [r3, #0]
    q_axes.AXIS_Y -= (150 + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8001c96:	f018 fc5f 	bl	801a558 <rand>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f04f 0400 	mov.w	r4, #0
 8001ca8:	fb03 f502 	mul.w	r5, r3, r2
 8001cac:	fb01 f004 	mul.w	r0, r1, r4
 8001cb0:	4428      	add	r0, r5
 8001cb2:	fba1 3403 	umull	r3, r4, r1, r3
 8001cb6:	1902      	adds	r2, r0, r4
 8001cb8:	4614      	mov	r4, r2
 8001cba:	461d      	mov	r5, r3
 8001cbc:	4626      	mov	r6, r4
 8001cbe:	1969      	adds	r1, r5, r5
 8001cc0:	eb46 0206 	adc.w	r2, r6, r6
 8001cc4:	460d      	mov	r5, r1
 8001cc6:	4616      	mov	r6, r2
 8001cc8:	18e8      	adds	r0, r5, r3
 8001cca:	eb46 0104 	adc.w	r1, r6, r4
 8001cce:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001cd2:	f04f 0300 	mov.w	r3, #0
 8001cd6:	f7fe ffbf 	bl	8000c58 <__aeabi_uldivmod>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	460c      	mov	r4, r1
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4622      	mov	r2, r4
 8001ce2:	f111 0396 	adds.w	r3, r1, #150	; 0x96
 8001ce6:	f142 0400 	adc.w	r4, r2, #0
 8001cea:	4a20      	ldr	r2, [pc, #128]	; (8001d6c <Set_Random_Motion_Values+0xa38>)
 8001cec:	6852      	ldr	r2, [r2, #4]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	4b1e      	ldr	r3, [pc, #120]	; (8001d6c <Set_Random_Motion_Values+0xa38>)
 8001cf4:	605a      	str	r2, [r3, #4]
    q_axes.AXIS_Z += (10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 8001cf6:	f018 fc2f 	bl	801a558 <rand>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f04f 0400 	mov.w	r4, #0
 8001d08:	fb03 f502 	mul.w	r5, r3, r2
 8001d0c:	fb01 f004 	mul.w	r0, r1, r4
 8001d10:	4428      	add	r0, r5
 8001d12:	fba1 5603 	umull	r5, r6, r1, r3
 8001d16:	1983      	adds	r3, r0, r6
 8001d18:	461e      	mov	r6, r3
 8001d1a:	4629      	mov	r1, r5
 8001d1c:	4632      	mov	r2, r6
 8001d1e:	f04f 0300 	mov.w	r3, #0
 8001d22:	f04f 0400 	mov.w	r4, #0
 8001d26:	0094      	lsls	r4, r2, #2
 8001d28:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8001d2c:	008b      	lsls	r3, r1, #2
 8001d2e:	4619      	mov	r1, r3
 8001d30:	4622      	mov	r2, r4
 8001d32:	194b      	adds	r3, r1, r5
 8001d34:	eb42 0406 	adc.w	r4, r2, r6
 8001d38:	4618      	mov	r0, r3
 8001d3a:	4621      	mov	r1, r4
 8001d3c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001d40:	f04f 0300 	mov.w	r3, #0
 8001d44:	f7fe ff88 	bl	8000c58 <__aeabi_uldivmod>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	460c      	mov	r4, r1
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4622      	mov	r2, r4
 8001d50:	f111 030a 	adds.w	r3, r1, #10
 8001d54:	f142 0400 	adc.w	r4, r2, #0
 8001d58:	4a04      	ldr	r2, [pc, #16]	; (8001d6c <Set_Random_Motion_Values+0xa38>)
 8001d5a:	6892      	ldr	r2, [r2, #8]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	461a      	mov	r2, r3
 8001d60:	4b02      	ldr	r3, [pc, #8]	; (8001d6c <Set_Random_Motion_Values+0xa38>)
 8001d62:	609a      	str	r2, [r3, #8]
}
 8001d64:	bf00      	nop
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d6c:	200021e4 	.word	0x200021e4

08001d70 <Reset_Motion_Values>:
 * @brief  Reset values for all motion sensor data
 * @param  None
 * @retval None
 */
static void Reset_Motion_Values(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  x_axes.AXIS_X = (x_axes.AXIS_X)%2000 == 0 ? -x_axes.AXIS_X : 10;
 8001d74:	4b6e      	ldr	r3, [pc, #440]	; (8001f30 <Reset_Motion_Values+0x1c0>)
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	4b6e      	ldr	r3, [pc, #440]	; (8001f34 <Reset_Motion_Values+0x1c4>)
 8001d7a:	fb83 1302 	smull	r1, r3, r3, r2
 8001d7e:	11d9      	asrs	r1, r3, #7
 8001d80:	17d3      	asrs	r3, r2, #31
 8001d82:	1acb      	subs	r3, r1, r3
 8001d84:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001d88:	fb01 f303 	mul.w	r3, r1, r3
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d103      	bne.n	8001d9a <Reset_Motion_Values+0x2a>
 8001d92:	4b67      	ldr	r3, [pc, #412]	; (8001f30 <Reset_Motion_Values+0x1c0>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	425b      	negs	r3, r3
 8001d98:	e000      	b.n	8001d9c <Reset_Motion_Values+0x2c>
 8001d9a:	230a      	movs	r3, #10
 8001d9c:	4a64      	ldr	r2, [pc, #400]	; (8001f30 <Reset_Motion_Values+0x1c0>)
 8001d9e:	6013      	str	r3, [r2, #0]
  x_axes.AXIS_Y = (x_axes.AXIS_Y)%2000 == 0 ? -x_axes.AXIS_Y : -10;
 8001da0:	4b63      	ldr	r3, [pc, #396]	; (8001f30 <Reset_Motion_Values+0x1c0>)
 8001da2:	685a      	ldr	r2, [r3, #4]
 8001da4:	4b63      	ldr	r3, [pc, #396]	; (8001f34 <Reset_Motion_Values+0x1c4>)
 8001da6:	fb83 1302 	smull	r1, r3, r3, r2
 8001daa:	11d9      	asrs	r1, r3, #7
 8001dac:	17d3      	asrs	r3, r2, #31
 8001dae:	1acb      	subs	r3, r1, r3
 8001db0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001db4:	fb01 f303 	mul.w	r3, r1, r3
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d103      	bne.n	8001dc6 <Reset_Motion_Values+0x56>
 8001dbe:	4b5c      	ldr	r3, [pc, #368]	; (8001f30 <Reset_Motion_Values+0x1c0>)
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	425b      	negs	r3, r3
 8001dc4:	e001      	b.n	8001dca <Reset_Motion_Values+0x5a>
 8001dc6:	f06f 0309 	mvn.w	r3, #9
 8001dca:	4a59      	ldr	r2, [pc, #356]	; (8001f30 <Reset_Motion_Values+0x1c0>)
 8001dcc:	6053      	str	r3, [r2, #4]
  x_axes.AXIS_Z = (x_axes.AXIS_Z)%2000 == 0 ? -x_axes.AXIS_Z : 10;
 8001dce:	4b58      	ldr	r3, [pc, #352]	; (8001f30 <Reset_Motion_Values+0x1c0>)
 8001dd0:	689a      	ldr	r2, [r3, #8]
 8001dd2:	4b58      	ldr	r3, [pc, #352]	; (8001f34 <Reset_Motion_Values+0x1c4>)
 8001dd4:	fb83 1302 	smull	r1, r3, r3, r2
 8001dd8:	11d9      	asrs	r1, r3, #7
 8001dda:	17d3      	asrs	r3, r2, #31
 8001ddc:	1acb      	subs	r3, r1, r3
 8001dde:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001de2:	fb01 f303 	mul.w	r3, r1, r3
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d103      	bne.n	8001df4 <Reset_Motion_Values+0x84>
 8001dec:	4b50      	ldr	r3, [pc, #320]	; (8001f30 <Reset_Motion_Values+0x1c0>)
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	425b      	negs	r3, r3
 8001df2:	e000      	b.n	8001df6 <Reset_Motion_Values+0x86>
 8001df4:	230a      	movs	r3, #10
 8001df6:	4a4e      	ldr	r2, [pc, #312]	; (8001f30 <Reset_Motion_Values+0x1c0>)
 8001df8:	6093      	str	r3, [r2, #8]
  g_axes.AXIS_X = (g_axes.AXIS_X)%2000 == 0 ? -g_axes.AXIS_X : 100;
 8001dfa:	4b4f      	ldr	r3, [pc, #316]	; (8001f38 <Reset_Motion_Values+0x1c8>)
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	4b4d      	ldr	r3, [pc, #308]	; (8001f34 <Reset_Motion_Values+0x1c4>)
 8001e00:	fb83 1302 	smull	r1, r3, r3, r2
 8001e04:	11d9      	asrs	r1, r3, #7
 8001e06:	17d3      	asrs	r3, r2, #31
 8001e08:	1acb      	subs	r3, r1, r3
 8001e0a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001e0e:	fb01 f303 	mul.w	r3, r1, r3
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d103      	bne.n	8001e20 <Reset_Motion_Values+0xb0>
 8001e18:	4b47      	ldr	r3, [pc, #284]	; (8001f38 <Reset_Motion_Values+0x1c8>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	425b      	negs	r3, r3
 8001e1e:	e000      	b.n	8001e22 <Reset_Motion_Values+0xb2>
 8001e20:	2364      	movs	r3, #100	; 0x64
 8001e22:	4a45      	ldr	r2, [pc, #276]	; (8001f38 <Reset_Motion_Values+0x1c8>)
 8001e24:	6013      	str	r3, [r2, #0]
  g_axes.AXIS_Y = (g_axes.AXIS_Y)%2000 == 0 ? -g_axes.AXIS_Y : -100;
 8001e26:	4b44      	ldr	r3, [pc, #272]	; (8001f38 <Reset_Motion_Values+0x1c8>)
 8001e28:	685a      	ldr	r2, [r3, #4]
 8001e2a:	4b42      	ldr	r3, [pc, #264]	; (8001f34 <Reset_Motion_Values+0x1c4>)
 8001e2c:	fb83 1302 	smull	r1, r3, r3, r2
 8001e30:	11d9      	asrs	r1, r3, #7
 8001e32:	17d3      	asrs	r3, r2, #31
 8001e34:	1acb      	subs	r3, r1, r3
 8001e36:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001e3a:	fb01 f303 	mul.w	r3, r1, r3
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d103      	bne.n	8001e4c <Reset_Motion_Values+0xdc>
 8001e44:	4b3c      	ldr	r3, [pc, #240]	; (8001f38 <Reset_Motion_Values+0x1c8>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	425b      	negs	r3, r3
 8001e4a:	e001      	b.n	8001e50 <Reset_Motion_Values+0xe0>
 8001e4c:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8001e50:	4a39      	ldr	r2, [pc, #228]	; (8001f38 <Reset_Motion_Values+0x1c8>)
 8001e52:	6053      	str	r3, [r2, #4]
  g_axes.AXIS_Z = (g_axes.AXIS_Z)%2000 == 0 ? -g_axes.AXIS_Z : 100;
 8001e54:	4b38      	ldr	r3, [pc, #224]	; (8001f38 <Reset_Motion_Values+0x1c8>)
 8001e56:	689a      	ldr	r2, [r3, #8]
 8001e58:	4b36      	ldr	r3, [pc, #216]	; (8001f34 <Reset_Motion_Values+0x1c4>)
 8001e5a:	fb83 1302 	smull	r1, r3, r3, r2
 8001e5e:	11d9      	asrs	r1, r3, #7
 8001e60:	17d3      	asrs	r3, r2, #31
 8001e62:	1acb      	subs	r3, r1, r3
 8001e64:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001e68:	fb01 f303 	mul.w	r3, r1, r3
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d103      	bne.n	8001e7a <Reset_Motion_Values+0x10a>
 8001e72:	4b31      	ldr	r3, [pc, #196]	; (8001f38 <Reset_Motion_Values+0x1c8>)
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	425b      	negs	r3, r3
 8001e78:	e000      	b.n	8001e7c <Reset_Motion_Values+0x10c>
 8001e7a:	2364      	movs	r3, #100	; 0x64
 8001e7c:	4a2e      	ldr	r2, [pc, #184]	; (8001f38 <Reset_Motion_Values+0x1c8>)
 8001e7e:	6093      	str	r3, [r2, #8]
  m_axes.AXIS_X = (g_axes.AXIS_X)%2000 == 0 ? -m_axes.AXIS_X : 3;
 8001e80:	4b2d      	ldr	r3, [pc, #180]	; (8001f38 <Reset_Motion_Values+0x1c8>)
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	4b2b      	ldr	r3, [pc, #172]	; (8001f34 <Reset_Motion_Values+0x1c4>)
 8001e86:	fb83 1302 	smull	r1, r3, r3, r2
 8001e8a:	11d9      	asrs	r1, r3, #7
 8001e8c:	17d3      	asrs	r3, r2, #31
 8001e8e:	1acb      	subs	r3, r1, r3
 8001e90:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001e94:	fb01 f303 	mul.w	r3, r1, r3
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d103      	bne.n	8001ea6 <Reset_Motion_Values+0x136>
 8001e9e:	4b27      	ldr	r3, [pc, #156]	; (8001f3c <Reset_Motion_Values+0x1cc>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	425b      	negs	r3, r3
 8001ea4:	e000      	b.n	8001ea8 <Reset_Motion_Values+0x138>
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	4a24      	ldr	r2, [pc, #144]	; (8001f3c <Reset_Motion_Values+0x1cc>)
 8001eaa:	6013      	str	r3, [r2, #0]
  m_axes.AXIS_Y = (g_axes.AXIS_Y)%2000 == 0 ? -m_axes.AXIS_Y : -3;
 8001eac:	4b22      	ldr	r3, [pc, #136]	; (8001f38 <Reset_Motion_Values+0x1c8>)
 8001eae:	685a      	ldr	r2, [r3, #4]
 8001eb0:	4b20      	ldr	r3, [pc, #128]	; (8001f34 <Reset_Motion_Values+0x1c4>)
 8001eb2:	fb83 1302 	smull	r1, r3, r3, r2
 8001eb6:	11d9      	asrs	r1, r3, #7
 8001eb8:	17d3      	asrs	r3, r2, #31
 8001eba:	1acb      	subs	r3, r1, r3
 8001ebc:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001ec0:	fb01 f303 	mul.w	r3, r1, r3
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d103      	bne.n	8001ed2 <Reset_Motion_Values+0x162>
 8001eca:	4b1c      	ldr	r3, [pc, #112]	; (8001f3c <Reset_Motion_Values+0x1cc>)
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	425b      	negs	r3, r3
 8001ed0:	e001      	b.n	8001ed6 <Reset_Motion_Values+0x166>
 8001ed2:	f06f 0302 	mvn.w	r3, #2
 8001ed6:	4a19      	ldr	r2, [pc, #100]	; (8001f3c <Reset_Motion_Values+0x1cc>)
 8001ed8:	6053      	str	r3, [r2, #4]
  m_axes.AXIS_Z = (g_axes.AXIS_Z)%2000 == 0 ? -m_axes.AXIS_Z : 3;
 8001eda:	4b17      	ldr	r3, [pc, #92]	; (8001f38 <Reset_Motion_Values+0x1c8>)
 8001edc:	689a      	ldr	r2, [r3, #8]
 8001ede:	4b15      	ldr	r3, [pc, #84]	; (8001f34 <Reset_Motion_Values+0x1c4>)
 8001ee0:	fb83 1302 	smull	r1, r3, r3, r2
 8001ee4:	11d9      	asrs	r1, r3, #7
 8001ee6:	17d3      	asrs	r3, r2, #31
 8001ee8:	1acb      	subs	r3, r1, r3
 8001eea:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001eee:	fb01 f303 	mul.w	r3, r1, r3
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d103      	bne.n	8001f00 <Reset_Motion_Values+0x190>
 8001ef8:	4b10      	ldr	r3, [pc, #64]	; (8001f3c <Reset_Motion_Values+0x1cc>)
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	425b      	negs	r3, r3
 8001efe:	e000      	b.n	8001f02 <Reset_Motion_Values+0x192>
 8001f00:	2303      	movs	r3, #3
 8001f02:	4a0e      	ldr	r2, [pc, #56]	; (8001f3c <Reset_Motion_Values+0x1cc>)
 8001f04:	6093      	str	r3, [r2, #8]
  q_axes.AXIS_X = -q_axes.AXIS_X;
 8001f06:	4b0e      	ldr	r3, [pc, #56]	; (8001f40 <Reset_Motion_Values+0x1d0>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	425b      	negs	r3, r3
 8001f0c:	4a0c      	ldr	r2, [pc, #48]	; (8001f40 <Reset_Motion_Values+0x1d0>)
 8001f0e:	6013      	str	r3, [r2, #0]
  q_axes.AXIS_Y = -q_axes.AXIS_Y;
 8001f10:	4b0b      	ldr	r3, [pc, #44]	; (8001f40 <Reset_Motion_Values+0x1d0>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	425b      	negs	r3, r3
 8001f16:	4a0a      	ldr	r2, [pc, #40]	; (8001f40 <Reset_Motion_Values+0x1d0>)
 8001f18:	6053      	str	r3, [r2, #4]
  q_axes.AXIS_Z = -q_axes.AXIS_Z;
 8001f1a:	4b09      	ldr	r3, [pc, #36]	; (8001f40 <Reset_Motion_Values+0x1d0>)
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	425b      	negs	r3, r3
 8001f20:	4a07      	ldr	r2, [pc, #28]	; (8001f40 <Reset_Motion_Values+0x1d0>)
 8001f22:	6093      	str	r3, [r2, #8]
}
 8001f24:	bf00      	nop
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	200021c0 	.word	0x200021c0
 8001f34:	10624dd3 	.word	0x10624dd3
 8001f38:	200021cc 	.word	0x200021cc
 8001f3c:	200021d8 	.word	0x200021d8
 8001f40:	200021e4 	.word	0x200021e4

08001f44 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	71fb      	strb	r3, [r7, #7]
  /* Set the User Button flag */
  user_button_pressed = 1;
 8001f4e:	4b04      	ldr	r3, [pc, #16]	; (8001f60 <BSP_PB_Callback+0x1c>)
 8001f50:	2201      	movs	r2, #1
 8001f52:	701a      	strb	r2, [r3, #0]
}
 8001f54:	bf00      	nop
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr
 8001f60:	200021b2 	.word	0x200021b2

08001f64 <Add_HWServW2ST_Service>:
 * @brief  Add the 'HW' service (and the Environmental and AccGyr characteristics).
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_HWServW2ST_Service(void)
{
 8001f64:	b5b0      	push	{r4, r5, r7, lr}
 8001f66:	b08c      	sub	sp, #48	; 0x30
 8001f68:	af06      	add	r7, sp, #24
  tBleStatus ret;
  uint8_t uuid[16];
  
  /* Add_HWServW2ST_Service */
  COPY_HW_SENS_W2ST_SERVICE_UUID(uuid);  
 8001f6a:	231b      	movs	r3, #27
 8001f6c:	713b      	strb	r3, [r7, #4]
 8001f6e:	23c5      	movs	r3, #197	; 0xc5
 8001f70:	717b      	strb	r3, [r7, #5]
 8001f72:	23d5      	movs	r3, #213	; 0xd5
 8001f74:	71bb      	strb	r3, [r7, #6]
 8001f76:	23a5      	movs	r3, #165	; 0xa5
 8001f78:	71fb      	strb	r3, [r7, #7]
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	723b      	strb	r3, [r7, #8]
 8001f7e:	2300      	movs	r3, #0
 8001f80:	727b      	strb	r3, [r7, #9]
 8001f82:	23b4      	movs	r3, #180	; 0xb4
 8001f84:	72bb      	strb	r3, [r7, #10]
 8001f86:	239a      	movs	r3, #154	; 0x9a
 8001f88:	72fb      	strb	r3, [r7, #11]
 8001f8a:	23e1      	movs	r3, #225	; 0xe1
 8001f8c:	733b      	strb	r3, [r7, #12]
 8001f8e:	2311      	movs	r3, #17
 8001f90:	737b      	strb	r3, [r7, #13]
 8001f92:	2301      	movs	r3, #1
 8001f94:	73bb      	strb	r3, [r7, #14]
 8001f96:	2300      	movs	r3, #0
 8001f98:	73fb      	strb	r3, [r7, #15]
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	743b      	strb	r3, [r7, #16]
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	747b      	strb	r3, [r7, #17]
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	74bb      	strb	r3, [r7, #18]
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 8001faa:	4b55      	ldr	r3, [pc, #340]	; (8002100 <Add_HWServW2ST_Service+0x19c>)
 8001fac:	461d      	mov	r5, r3
 8001fae:	1d3c      	adds	r4, r7, #4
 8001fb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fb2:	6028      	str	r0, [r5, #0]
 8001fb4:	6069      	str	r1, [r5, #4]
 8001fb6:	60aa      	str	r2, [r5, #8]
 8001fb8:	60eb      	str	r3, [r5, #12]
  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid.Service_UUID_128, PRIMARY_SERVICE, 
 8001fba:	4b52      	ldr	r3, [pc, #328]	; (8002104 <Add_HWServW2ST_Service+0x1a0>)
 8001fbc:	9300      	str	r3, [sp, #0]
 8001fbe:	2310      	movs	r3, #16
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	494f      	ldr	r1, [pc, #316]	; (8002100 <Add_HWServW2ST_Service+0x19c>)
 8001fc4:	2002      	movs	r0, #2
 8001fc6:	f00c fb63 	bl	800e690 <aci_gatt_add_serv>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	75fb      	strb	r3, [r7, #23]
                          1+3*5, &HWServW2STHandle); 
  if (ret != BLE_STATUS_SUCCESS) 
 8001fce:	7dfb      	ldrb	r3, [r7, #23]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <Add_HWServW2ST_Service+0x74>
    return BLE_STATUS_ERROR;    
 8001fd4:	2347      	movs	r3, #71	; 0x47
 8001fd6:	e08e      	b.n	80020f6 <Add_HWServW2ST_Service+0x192>
  
  /* Fill the Environmental BLE Characteristc */
  COPY_ENVIRONMENTAL_W2ST_CHAR_UUID(uuid);
 8001fd8:	231b      	movs	r3, #27
 8001fda:	713b      	strb	r3, [r7, #4]
 8001fdc:	23c5      	movs	r3, #197	; 0xc5
 8001fde:	717b      	strb	r3, [r7, #5]
 8001fe0:	23d5      	movs	r3, #213	; 0xd5
 8001fe2:	71bb      	strb	r3, [r7, #6]
 8001fe4:	23a5      	movs	r3, #165	; 0xa5
 8001fe6:	71fb      	strb	r3, [r7, #7]
 8001fe8:	2302      	movs	r3, #2
 8001fea:	723b      	strb	r3, [r7, #8]
 8001fec:	2300      	movs	r3, #0
 8001fee:	727b      	strb	r3, [r7, #9]
 8001ff0:	2336      	movs	r3, #54	; 0x36
 8001ff2:	72bb      	strb	r3, [r7, #10]
 8001ff4:	23ac      	movs	r3, #172	; 0xac
 8001ff6:	72fb      	strb	r3, [r7, #11]
 8001ff8:	23e1      	movs	r3, #225	; 0xe1
 8001ffa:	733b      	strb	r3, [r7, #12]
 8001ffc:	2311      	movs	r3, #17
 8001ffe:	737b      	strb	r3, [r7, #13]
 8002000:	2301      	movs	r3, #1
 8002002:	73bb      	strb	r3, [r7, #14]
 8002004:	2300      	movs	r3, #0
 8002006:	73fb      	strb	r3, [r7, #15]
 8002008:	2300      	movs	r3, #0
 800200a:	743b      	strb	r3, [r7, #16]
 800200c:	2300      	movs	r3, #0
 800200e:	747b      	strb	r3, [r7, #17]
 8002010:	2300      	movs	r3, #0
 8002012:	74bb      	strb	r3, [r7, #18]
 8002014:	2300      	movs	r3, #0
 8002016:	74fb      	strb	r3, [r7, #19]
  uuid[14] |= 0x04; /* One Temperature value*/
 8002018:	7cbb      	ldrb	r3, [r7, #18]
 800201a:	f043 0304 	orr.w	r3, r3, #4
 800201e:	b2db      	uxtb	r3, r3
 8002020:	74bb      	strb	r3, [r7, #18]
  uuid[14] |= 0x10; /* Pressure value*/
 8002022:	7cbb      	ldrb	r3, [r7, #18]
 8002024:	f043 0310 	orr.w	r3, r3, #16
 8002028:	b2db      	uxtb	r3, r3
 800202a:	74bb      	strb	r3, [r7, #18]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);  
 800202c:	4b36      	ldr	r3, [pc, #216]	; (8002108 <Add_HWServW2ST_Service+0x1a4>)
 800202e:	461d      	mov	r5, r3
 8002030:	1d3c      	adds	r4, r7, #4
 8002032:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002034:	6028      	str	r0, [r5, #0]
 8002036:	6069      	str	r1, [r5, #4]
 8002038:	60aa      	str	r2, [r5, #8]
 800203a:	60eb      	str	r3, [r5, #12]
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128, 
 800203c:	4b31      	ldr	r3, [pc, #196]	; (8002104 <Add_HWServW2ST_Service+0x1a0>)
 800203e:	8818      	ldrh	r0, [r3, #0]
 8002040:	4b32      	ldr	r3, [pc, #200]	; (800210c <Add_HWServW2ST_Service+0x1a8>)
 8002042:	9305      	str	r3, [sp, #20]
 8002044:	2300      	movs	r3, #0
 8002046:	9304      	str	r3, [sp, #16]
 8002048:	2310      	movs	r3, #16
 800204a:	9303      	str	r3, [sp, #12]
 800204c:	2304      	movs	r3, #4
 800204e:	9302      	str	r3, [sp, #8]
 8002050:	2300      	movs	r3, #0
 8002052:	9301      	str	r3, [sp, #4]
 8002054:	2312      	movs	r3, #18
 8002056:	9300      	str	r3, [sp, #0]
 8002058:	2308      	movs	r3, #8
 800205a:	4a2b      	ldr	r2, [pc, #172]	; (8002108 <Add_HWServW2ST_Service+0x1a4>)
 800205c:	2102      	movs	r1, #2
 800205e:	f00c fba3 	bl	800e7a8 <aci_gatt_add_char>
 8002062:	4603      	mov	r3, r0
 8002064:	75fb      	strb	r3, [r7, #23]
                           2+2+4, 
                           CHAR_PROP_NOTIFY|CHAR_PROP_READ, 
                           ATTR_PERMISSION_NONE, 
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &EnvironmentalCharHandle);
  if (ret != BLE_STATUS_SUCCESS) 
 8002066:	7dfb      	ldrb	r3, [r7, #23]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <Add_HWServW2ST_Service+0x10c>
    return BLE_STATUS_ERROR;
 800206c:	2347      	movs	r3, #71	; 0x47
 800206e:	e042      	b.n	80020f6 <Add_HWServW2ST_Service+0x192>
  
  
  /* Fill the AccGyroMag BLE Characteristc */
  COPY_ACC_GYRO_MAG_W2ST_CHAR_UUID(uuid);
 8002070:	231b      	movs	r3, #27
 8002072:	713b      	strb	r3, [r7, #4]
 8002074:	23c5      	movs	r3, #197	; 0xc5
 8002076:	717b      	strb	r3, [r7, #5]
 8002078:	23d5      	movs	r3, #213	; 0xd5
 800207a:	71bb      	strb	r3, [r7, #6]
 800207c:	23a5      	movs	r3, #165	; 0xa5
 800207e:	71fb      	strb	r3, [r7, #7]
 8002080:	2302      	movs	r3, #2
 8002082:	723b      	strb	r3, [r7, #8]
 8002084:	2300      	movs	r3, #0
 8002086:	727b      	strb	r3, [r7, #9]
 8002088:	2336      	movs	r3, #54	; 0x36
 800208a:	72bb      	strb	r3, [r7, #10]
 800208c:	23ac      	movs	r3, #172	; 0xac
 800208e:	72fb      	strb	r3, [r7, #11]
 8002090:	23e1      	movs	r3, #225	; 0xe1
 8002092:	733b      	strb	r3, [r7, #12]
 8002094:	2311      	movs	r3, #17
 8002096:	737b      	strb	r3, [r7, #13]
 8002098:	2301      	movs	r3, #1
 800209a:	73bb      	strb	r3, [r7, #14]
 800209c:	2300      	movs	r3, #0
 800209e:	73fb      	strb	r3, [r7, #15]
 80020a0:	2300      	movs	r3, #0
 80020a2:	743b      	strb	r3, [r7, #16]
 80020a4:	2300      	movs	r3, #0
 80020a6:	747b      	strb	r3, [r7, #17]
 80020a8:	23e0      	movs	r3, #224	; 0xe0
 80020aa:	74bb      	strb	r3, [r7, #18]
 80020ac:	2300      	movs	r3, #0
 80020ae:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);  
 80020b0:	4b15      	ldr	r3, [pc, #84]	; (8002108 <Add_HWServW2ST_Service+0x1a4>)
 80020b2:	461d      	mov	r5, r3
 80020b4:	1d3c      	adds	r4, r7, #4
 80020b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020b8:	6028      	str	r0, [r5, #0]
 80020ba:	6069      	str	r1, [r5, #4]
 80020bc:	60aa      	str	r2, [r5, #8]
 80020be:	60eb      	str	r3, [r5, #12]
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128, 
 80020c0:	4b10      	ldr	r3, [pc, #64]	; (8002104 <Add_HWServW2ST_Service+0x1a0>)
 80020c2:	8818      	ldrh	r0, [r3, #0]
 80020c4:	4b12      	ldr	r3, [pc, #72]	; (8002110 <Add_HWServW2ST_Service+0x1ac>)
 80020c6:	9305      	str	r3, [sp, #20]
 80020c8:	2300      	movs	r3, #0
 80020ca:	9304      	str	r3, [sp, #16]
 80020cc:	2310      	movs	r3, #16
 80020ce:	9303      	str	r3, [sp, #12]
 80020d0:	2304      	movs	r3, #4
 80020d2:	9302      	str	r3, [sp, #8]
 80020d4:	2300      	movs	r3, #0
 80020d6:	9301      	str	r3, [sp, #4]
 80020d8:	2310      	movs	r3, #16
 80020da:	9300      	str	r3, [sp, #0]
 80020dc:	2314      	movs	r3, #20
 80020de:	4a0a      	ldr	r2, [pc, #40]	; (8002108 <Add_HWServW2ST_Service+0x1a4>)
 80020e0:	2102      	movs	r1, #2
 80020e2:	f00c fb61 	bl	800e7a8 <aci_gatt_add_char>
 80020e6:	4603      	mov	r3, r0
 80020e8:	75fb      	strb	r3, [r7, #23]
                           2+3*3*2, 
                           CHAR_PROP_NOTIFY, 
                           ATTR_PERMISSION_NONE, 
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &AccGyroMagCharHandle);
  if (ret != BLE_STATUS_SUCCESS) 
 80020ea:	7dfb      	ldrb	r3, [r7, #23]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <Add_HWServW2ST_Service+0x190>
    return BLE_STATUS_ERROR;
 80020f0:	2347      	movs	r3, #71	; 0x47
 80020f2:	e000      	b.n	80020f6 <Add_HWServW2ST_Service+0x192>
  
  return BLE_STATUS_SUCCESS;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3718      	adds	r7, #24
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bdb0      	pop	{r4, r5, r7, pc}
 80020fe:	bf00      	nop
 8002100:	200027cc 	.word	0x200027cc
 8002104:	200027c6 	.word	0x200027c6
 8002108:	200027b4 	.word	0x200027b4
 800210c:	200027b0 	.word	0x200027b0
 8002110:	200027c8 	.word	0x200027c8

08002114 <Add_SWServW2ST_Service>:
 * @brief  Add the SW Feature service using a vendor specific profile
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_SWServW2ST_Service(void)
{
 8002114:	b5b0      	push	{r4, r5, r7, lr}
 8002116:	b08c      	sub	sp, #48	; 0x30
 8002118:	af06      	add	r7, sp, #24
  tBleStatus ret;
  int32_t NumberOfRecords=1;
 800211a:	2301      	movs	r3, #1
 800211c:	617b      	str	r3, [r7, #20]
  uint8_t uuid[16];

  COPY_SW_SENS_W2ST_SERVICE_UUID(uuid);
 800211e:	231b      	movs	r3, #27
 8002120:	703b      	strb	r3, [r7, #0]
 8002122:	23c5      	movs	r3, #197	; 0xc5
 8002124:	707b      	strb	r3, [r7, #1]
 8002126:	23d5      	movs	r3, #213	; 0xd5
 8002128:	70bb      	strb	r3, [r7, #2]
 800212a:	23a5      	movs	r3, #165	; 0xa5
 800212c:	70fb      	strb	r3, [r7, #3]
 800212e:	2302      	movs	r3, #2
 8002130:	713b      	strb	r3, [r7, #4]
 8002132:	2300      	movs	r3, #0
 8002134:	717b      	strb	r3, [r7, #5]
 8002136:	23b4      	movs	r3, #180	; 0xb4
 8002138:	71bb      	strb	r3, [r7, #6]
 800213a:	239a      	movs	r3, #154	; 0x9a
 800213c:	71fb      	strb	r3, [r7, #7]
 800213e:	23e1      	movs	r3, #225	; 0xe1
 8002140:	723b      	strb	r3, [r7, #8]
 8002142:	2311      	movs	r3, #17
 8002144:	727b      	strb	r3, [r7, #9]
 8002146:	2302      	movs	r3, #2
 8002148:	72bb      	strb	r3, [r7, #10]
 800214a:	2300      	movs	r3, #0
 800214c:	72fb      	strb	r3, [r7, #11]
 800214e:	2300      	movs	r3, #0
 8002150:	733b      	strb	r3, [r7, #12]
 8002152:	2300      	movs	r3, #0
 8002154:	737b      	strb	r3, [r7, #13]
 8002156:	2300      	movs	r3, #0
 8002158:	73bb      	strb	r3, [r7, #14]
 800215a:	2300      	movs	r3, #0
 800215c:	73fb      	strb	r3, [r7, #15]
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 800215e:	4b33      	ldr	r3, [pc, #204]	; (800222c <Add_SWServW2ST_Service+0x118>)
 8002160:	461d      	mov	r5, r3
 8002162:	463c      	mov	r4, r7
 8002164:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002166:	6028      	str	r0, [r5, #0]
 8002168:	6069      	str	r1, [r5, #4]
 800216a:	60aa      	str	r2, [r5, #8]
 800216c:	60eb      	str	r3, [r5, #12]
  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid.Service_UUID_128, PRIMARY_SERVICE, 
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	b2db      	uxtb	r3, r3
 8002172:	461a      	mov	r2, r3
 8002174:	0052      	lsls	r2, r2, #1
 8002176:	4413      	add	r3, r2
 8002178:	b2db      	uxtb	r3, r3
 800217a:	3301      	adds	r3, #1
 800217c:	b2da      	uxtb	r2, r3
 800217e:	4b2c      	ldr	r3, [pc, #176]	; (8002230 <Add_SWServW2ST_Service+0x11c>)
 8002180:	9300      	str	r3, [sp, #0]
 8002182:	4613      	mov	r3, r2
 8002184:	2201      	movs	r2, #1
 8002186:	4929      	ldr	r1, [pc, #164]	; (800222c <Add_SWServW2ST_Service+0x118>)
 8002188:	2002      	movs	r0, #2
 800218a:	f00c fa81 	bl	800e690 <aci_gatt_add_serv>
 800218e:	4603      	mov	r3, r0
 8002190:	74fb      	strb	r3, [r7, #19]
                          1+3*NumberOfRecords, &SWServW2STHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 8002192:	7cfb      	ldrb	r3, [r7, #19]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d141      	bne.n	800221c <Add_SWServW2ST_Service+0x108>
    goto fail;
  }

  COPY_QUATERNIONS_W2ST_CHAR_UUID(uuid);
 8002198:	231b      	movs	r3, #27
 800219a:	703b      	strb	r3, [r7, #0]
 800219c:	23c5      	movs	r3, #197	; 0xc5
 800219e:	707b      	strb	r3, [r7, #1]
 80021a0:	23d5      	movs	r3, #213	; 0xd5
 80021a2:	70bb      	strb	r3, [r7, #2]
 80021a4:	23a5      	movs	r3, #165	; 0xa5
 80021a6:	70fb      	strb	r3, [r7, #3]
 80021a8:	2302      	movs	r3, #2
 80021aa:	713b      	strb	r3, [r7, #4]
 80021ac:	2300      	movs	r3, #0
 80021ae:	717b      	strb	r3, [r7, #5]
 80021b0:	2336      	movs	r3, #54	; 0x36
 80021b2:	71bb      	strb	r3, [r7, #6]
 80021b4:	23ac      	movs	r3, #172	; 0xac
 80021b6:	71fb      	strb	r3, [r7, #7]
 80021b8:	23e1      	movs	r3, #225	; 0xe1
 80021ba:	723b      	strb	r3, [r7, #8]
 80021bc:	2311      	movs	r3, #17
 80021be:	727b      	strb	r3, [r7, #9]
 80021c0:	2301      	movs	r3, #1
 80021c2:	72bb      	strb	r3, [r7, #10]
 80021c4:	2300      	movs	r3, #0
 80021c6:	72fb      	strb	r3, [r7, #11]
 80021c8:	2300      	movs	r3, #0
 80021ca:	733b      	strb	r3, [r7, #12]
 80021cc:	2301      	movs	r3, #1
 80021ce:	737b      	strb	r3, [r7, #13]
 80021d0:	2300      	movs	r3, #0
 80021d2:	73bb      	strb	r3, [r7, #14]
 80021d4:	2300      	movs	r3, #0
 80021d6:	73fb      	strb	r3, [r7, #15]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 80021d8:	4b16      	ldr	r3, [pc, #88]	; (8002234 <Add_SWServW2ST_Service+0x120>)
 80021da:	461d      	mov	r5, r3
 80021dc:	463c      	mov	r4, r7
 80021de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021e0:	6028      	str	r0, [r5, #0]
 80021e2:	6069      	str	r1, [r5, #4]
 80021e4:	60aa      	str	r2, [r5, #8]
 80021e6:	60eb      	str	r3, [r5, #12]
  ret =  aci_gatt_add_char(SWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128, 
 80021e8:	4b11      	ldr	r3, [pc, #68]	; (8002230 <Add_SWServW2ST_Service+0x11c>)
 80021ea:	8818      	ldrh	r0, [r3, #0]
 80021ec:	4b12      	ldr	r3, [pc, #72]	; (8002238 <Add_SWServW2ST_Service+0x124>)
 80021ee:	9305      	str	r3, [sp, #20]
 80021f0:	2300      	movs	r3, #0
 80021f2:	9304      	str	r3, [sp, #16]
 80021f4:	2310      	movs	r3, #16
 80021f6:	9303      	str	r3, [sp, #12]
 80021f8:	2304      	movs	r3, #4
 80021fa:	9302      	str	r3, [sp, #8]
 80021fc:	2300      	movs	r3, #0
 80021fe:	9301      	str	r3, [sp, #4]
 8002200:	2310      	movs	r3, #16
 8002202:	9300      	str	r3, [sp, #0]
 8002204:	2308      	movs	r3, #8
 8002206:	4a0b      	ldr	r2, [pc, #44]	; (8002234 <Add_SWServW2ST_Service+0x120>)
 8002208:	2102      	movs	r1, #2
 800220a:	f00c facd 	bl	800e7a8 <aci_gatt_add_char>
 800220e:	4603      	mov	r3, r0
 8002210:	74fb      	strb	r3, [r7, #19]
                           CHAR_PROP_NOTIFY,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &QuaternionsCharHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 8002212:	7cfb      	ldrb	r3, [r7, #19]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d103      	bne.n	8002220 <Add_SWServW2ST_Service+0x10c>
    goto fail;
  }

  return BLE_STATUS_SUCCESS;
 8002218:	2300      	movs	r3, #0
 800221a:	e003      	b.n	8002224 <Add_SWServW2ST_Service+0x110>
    goto fail;
 800221c:	bf00      	nop
 800221e:	e000      	b.n	8002222 <Add_SWServW2ST_Service+0x10e>
    goto fail;
 8002220:	bf00      	nop

fail:  
  return BLE_STATUS_ERROR;
 8002222:	2347      	movs	r3, #71	; 0x47
}
 8002224:	4618      	mov	r0, r3
 8002226:	3718      	adds	r7, #24
 8002228:	46bd      	mov	sp, r7
 800222a:	bdb0      	pop	{r4, r5, r7, pc}
 800222c:	200027cc 	.word	0x200027cc
 8002230:	200027c4 	.word	0x200027c4
 8002234:	200027b4 	.word	0x200027b4
 8002238:	200027b2 	.word	0x200027b2

0800223c <Acc_Update>:
 * @brief  Update acceleration characteristic value
 * @param  AxesRaw_t structure containing acceleration value in mg.
 * @retval tBleStatus Status
 */
tBleStatus Acc_Update(AxesRaw_t *x_axes, AxesRaw_t *g_axes, AxesRaw_t *m_axes)
{  
 800223c:	b580      	push	{r7, lr}
 800223e:	b08c      	sub	sp, #48	; 0x30
 8002240:	af02      	add	r7, sp, #8
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	607a      	str	r2, [r7, #4]
  uint8_t buff[2+2*3*3];
  tBleStatus ret;
  
  HOST_TO_LE_16(buff,(HAL_GetTick()>>3));
 8002248:	f006 fd4c 	bl	8008ce4 <HAL_GetTick>
 800224c:	4603      	mov	r3, r0
 800224e:	08db      	lsrs	r3, r3, #3
 8002250:	b2db      	uxtb	r3, r3
 8002252:	743b      	strb	r3, [r7, #16]
 8002254:	f006 fd46 	bl	8008ce4 <HAL_GetTick>
 8002258:	4603      	mov	r3, r0
 800225a:	0adb      	lsrs	r3, r3, #11
 800225c:	b2db      	uxtb	r3, r3
 800225e:	747b      	strb	r3, [r7, #17]
  
  HOST_TO_LE_16(buff+2,-x_axes->AXIS_Y);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	b2db      	uxtb	r3, r3
 8002266:	425b      	negs	r3, r3
 8002268:	b2db      	uxtb	r3, r3
 800226a:	74bb      	strb	r3, [r7, #18]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	425b      	negs	r3, r3
 8002272:	121b      	asrs	r3, r3, #8
 8002274:	b2db      	uxtb	r3, r3
 8002276:	74fb      	strb	r3, [r7, #19]
  HOST_TO_LE_16(buff+4, x_axes->AXIS_X);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	b2db      	uxtb	r3, r3
 800227e:	753b      	strb	r3, [r7, #20]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	121b      	asrs	r3, r3, #8
 8002286:	b2db      	uxtb	r3, r3
 8002288:	757b      	strb	r3, [r7, #21]
  HOST_TO_LE_16(buff+6,-x_axes->AXIS_Z);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	b2db      	uxtb	r3, r3
 8002290:	425b      	negs	r3, r3
 8002292:	b2db      	uxtb	r3, r3
 8002294:	75bb      	strb	r3, [r7, #22]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	425b      	negs	r3, r3
 800229c:	121b      	asrs	r3, r3, #8
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	75fb      	strb	r3, [r7, #23]
    
  HOST_TO_LE_16(buff+8,g_axes->AXIS_Y);
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	763b      	strb	r3, [r7, #24]
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	121b      	asrs	r3, r3, #8
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	767b      	strb	r3, [r7, #25]
  HOST_TO_LE_16(buff+10,g_axes->AXIS_X);
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	76bb      	strb	r3, [r7, #26]
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	121b      	asrs	r3, r3, #8
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	76fb      	strb	r3, [r7, #27]
  HOST_TO_LE_16(buff+12,g_axes->AXIS_Z);
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	773b      	strb	r3, [r7, #28]
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	121b      	asrs	r3, r3, #8
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	777b      	strb	r3, [r7, #29]
  
  HOST_TO_LE_16(buff+14,m_axes->AXIS_Y);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	77bb      	strb	r3, [r7, #30]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	121b      	asrs	r3, r3, #8
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	77fb      	strb	r3, [r7, #31]
  HOST_TO_LE_16(buff+16,m_axes->AXIS_X);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	f887 3020 	strb.w	r3, [r7, #32]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	121b      	asrs	r3, r3, #8
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  HOST_TO_LE_16(buff+18,m_axes->AXIS_Z);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	b2db      	uxtb	r3, r3
 8002306:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	121b      	asrs	r3, r3, #8
 8002310:	b2db      	uxtb	r3, r3
 8002312:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    
  ret = aci_gatt_update_char_value(HWServW2STHandle, AccGyroMagCharHandle,
 8002316:	4b0f      	ldr	r3, [pc, #60]	; (8002354 <Acc_Update+0x118>)
 8002318:	8818      	ldrh	r0, [r3, #0]
 800231a:	4b0f      	ldr	r3, [pc, #60]	; (8002358 <Acc_Update+0x11c>)
 800231c:	8819      	ldrh	r1, [r3, #0]
 800231e:	f107 0310 	add.w	r3, r7, #16
 8002322:	9300      	str	r3, [sp, #0]
 8002324:	2314      	movs	r3, #20
 8002326:	2200      	movs	r2, #0
 8002328:	f00c fb10 	bl	800e94c <aci_gatt_update_char_value>
 800232c:	4603      	mov	r3, r0
 800232e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				   0, 2+2*3*3, buff);
  if (ret != BLE_STATUS_SUCCESS){
 8002332:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002336:	2b00      	cmp	r3, #0
 8002338:	d007      	beq.n	800234a <Acc_Update+0x10e>
    PRINTF("Error while updating Acceleration characteristic: 0x%02X\n",ret) ;
 800233a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800233e:	4619      	mov	r1, r3
 8002340:	4806      	ldr	r0, [pc, #24]	; (800235c <Acc_Update+0x120>)
 8002342:	f018 f869 	bl	801a418 <iprintf>
    return BLE_STATUS_ERROR ;
 8002346:	2347      	movs	r3, #71	; 0x47
 8002348:	e000      	b.n	800234c <Acc_Update+0x110>
  }

  return BLE_STATUS_SUCCESS;  
 800234a:	2300      	movs	r3, #0
}
 800234c:	4618      	mov	r0, r3
 800234e:	3728      	adds	r7, #40	; 0x28
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	200027c6 	.word	0x200027c6
 8002358:	200027c8 	.word	0x200027c8
 800235c:	0801d1c4 	.word	0x0801d1c4

08002360 <Quat_Update>:
 * @brief  Update quaternions characteristic value
 * @param  SensorAxes_t *data Structure containing the quaterions
 * @retval tBleStatus      Status
 */
tBleStatus Quat_Update(AxesRaw_t *data)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b088      	sub	sp, #32
 8002364:	af02      	add	r7, sp, #8
 8002366:	6078      	str	r0, [r7, #4]
  tBleStatus ret;
  uint8_t buff[2+6*SEND_N_QUATERNIONS];

  HOST_TO_LE_16(buff,(HAL_GetTick()>>3));
 8002368:	f006 fcbc 	bl	8008ce4 <HAL_GetTick>
 800236c:	4603      	mov	r3, r0
 800236e:	08db      	lsrs	r3, r3, #3
 8002370:	b2db      	uxtb	r3, r3
 8002372:	733b      	strb	r3, [r7, #12]
 8002374:	f006 fcb6 	bl	8008ce4 <HAL_GetTick>
 8002378:	4603      	mov	r3, r0
 800237a:	0adb      	lsrs	r3, r3, #11
 800237c:	b2db      	uxtb	r3, r3
 800237e:	737b      	strb	r3, [r7, #13]

#if SEND_N_QUATERNIONS == 1
  HOST_TO_LE_16(buff+2,data[0].AXIS_X);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	b2db      	uxtb	r3, r3
 8002386:	73bb      	strb	r3, [r7, #14]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	121b      	asrs	r3, r3, #8
 800238e:	b2db      	uxtb	r3, r3
 8002390:	73fb      	strb	r3, [r7, #15]
  HOST_TO_LE_16(buff+4,data[0].AXIS_Y);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	b2db      	uxtb	r3, r3
 8002398:	743b      	strb	r3, [r7, #16]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	121b      	asrs	r3, r3, #8
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	747b      	strb	r3, [r7, #17]
  HOST_TO_LE_16(buff+6,data[0].AXIS_Z);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	74bb      	strb	r3, [r7, #18]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	121b      	asrs	r3, r3, #8
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	74fb      	strb	r3, [r7, #19]
  HOST_TO_LE_16(buff+18,data[2].AXIS_Z);
#else
#error SEND_N_QUATERNIONS could be only 1,2,3
#endif
  
  ret = aci_gatt_update_char_value(SWServW2STHandle, QuaternionsCharHandle,
 80023b6:	4b0e      	ldr	r3, [pc, #56]	; (80023f0 <Quat_Update+0x90>)
 80023b8:	8818      	ldrh	r0, [r3, #0]
 80023ba:	4b0e      	ldr	r3, [pc, #56]	; (80023f4 <Quat_Update+0x94>)
 80023bc:	8819      	ldrh	r1, [r3, #0]
 80023be:	f107 030c 	add.w	r3, r7, #12
 80023c2:	9300      	str	r3, [sp, #0]
 80023c4:	2308      	movs	r3, #8
 80023c6:	2200      	movs	r2, #0
 80023c8:	f00c fac0 	bl	800e94c <aci_gatt_update_char_value>
 80023cc:	4603      	mov	r3, r0
 80023ce:	75fb      	strb	r3, [r7, #23]
				   0, 2+6*SEND_N_QUATERNIONS, buff);
  if (ret != BLE_STATUS_SUCCESS){
 80023d0:	7dfb      	ldrb	r3, [r7, #23]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d006      	beq.n	80023e4 <Quat_Update+0x84>
    PRINTF("Error while updating Sensor Fusion characteristic: 0x%02X\n",ret) ;
 80023d6:	7dfb      	ldrb	r3, [r7, #23]
 80023d8:	4619      	mov	r1, r3
 80023da:	4807      	ldr	r0, [pc, #28]	; (80023f8 <Quat_Update+0x98>)
 80023dc:	f018 f81c 	bl	801a418 <iprintf>
    return BLE_STATUS_ERROR ;
 80023e0:	2347      	movs	r3, #71	; 0x47
 80023e2:	e000      	b.n	80023e6 <Quat_Update+0x86>
  }
  
  return BLE_STATUS_SUCCESS;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3718      	adds	r7, #24
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	200027c4 	.word	0x200027c4
 80023f4:	200027b2 	.word	0x200027b2
 80023f8:	0801d200 	.word	0x0801d200

080023fc <Read_Request_CB>:
* Description    : Update the sensor valuse.
* Input          : Handle of the characteristic to update.
* Return         : None.
*******************************************************************************/
void Read_Request_CB(uint16_t handle)
{
 80023fc:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8002400:	b086      	sub	sp, #24
 8002402:	af00      	add	r7, sp, #0
 8002404:	4603      	mov	r3, r0
 8002406:	80fb      	strh	r3, [r7, #6]
  tBleStatus ret;
  
  if(handle == AccGyroMagCharHandle + 1)
 8002408:	88fa      	ldrh	r2, [r7, #6]
 800240a:	4b57      	ldr	r3, [pc, #348]	; (8002568 <Read_Request_CB+0x16c>)
 800240c:	881b      	ldrh	r3, [r3, #0]
 800240e:	3301      	adds	r3, #1
 8002410:	429a      	cmp	r2, r3
 8002412:	d105      	bne.n	8002420 <Read_Request_CB+0x24>
  {    
    Acc_Update(&x_axes, &g_axes, &m_axes);
 8002414:	4a55      	ldr	r2, [pc, #340]	; (800256c <Read_Request_CB+0x170>)
 8002416:	4956      	ldr	r1, [pc, #344]	; (8002570 <Read_Request_CB+0x174>)
 8002418:	4856      	ldr	r0, [pc, #344]	; (8002574 <Read_Request_CB+0x178>)
 800241a:	f7ff ff0f 	bl	800223c <Acc_Update>
 800241e:	e08b      	b.n	8002538 <Read_Request_CB+0x13c>
  }
  else if (handle == EnvironmentalCharHandle + 1)
 8002420:	88fa      	ldrh	r2, [r7, #6]
 8002422:	4b55      	ldr	r3, [pc, #340]	; (8002578 <Read_Request_CB+0x17c>)
 8002424:	881b      	ldrh	r3, [r3, #0]
 8002426:	3301      	adds	r3, #1
 8002428:	429a      	cmp	r2, r3
 800242a:	f040 8085 	bne.w	8002538 <Read_Request_CB+0x13c>
  {
    float data_t, data_p;
    data_t = 27.0 + ((uint64_t)rand()*5)/RAND_MAX; //T sensor emulation        
 800242e:	f018 f893 	bl	801a558 <rand>
 8002432:	4603      	mov	r3, r0
 8002434:	461d      	mov	r5, r3
 8002436:	ea4f 76e5 	mov.w	r6, r5, asr #31
 800243a:	4629      	mov	r1, r5
 800243c:	4632      	mov	r2, r6
 800243e:	f04f 0300 	mov.w	r3, #0
 8002442:	f04f 0400 	mov.w	r4, #0
 8002446:	0094      	lsls	r4, r2, #2
 8002448:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800244c:	008b      	lsls	r3, r1, #2
 800244e:	4619      	mov	r1, r3
 8002450:	4622      	mov	r2, r4
 8002452:	194b      	adds	r3, r1, r5
 8002454:	eb42 0406 	adc.w	r4, r2, r6
 8002458:	4618      	mov	r0, r3
 800245a:	4621      	mov	r1, r4
 800245c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002460:	f04f 0300 	mov.w	r3, #0
 8002464:	f7fe fbf8 	bl	8000c58 <__aeabi_uldivmod>
 8002468:	4603      	mov	r3, r0
 800246a:	460c      	mov	r4, r1
 800246c:	4618      	mov	r0, r3
 800246e:	4621      	mov	r1, r4
 8002470:	f7fe f894 	bl	800059c <__aeabi_ul2d>
 8002474:	f04f 0200 	mov.w	r2, #0
 8002478:	4b40      	ldr	r3, [pc, #256]	; (800257c <Read_Request_CB+0x180>)
 800247a:	f7fd ff0f 	bl	800029c <__adddf3>
 800247e:	4603      	mov	r3, r0
 8002480:	460c      	mov	r4, r1
 8002482:	4618      	mov	r0, r3
 8002484:	4621      	mov	r1, r4
 8002486:	f7fe fb97 	bl	8000bb8 <__aeabi_d2f>
 800248a:	4603      	mov	r3, r0
 800248c:	617b      	str	r3, [r7, #20]
    data_p = 1000.0 + ((uint64_t)rand()*100)/RAND_MAX; //P sensor emulation        
 800248e:	f018 f863 	bl	801a558 <rand>
 8002492:	4603      	mov	r3, r0
 8002494:	461d      	mov	r5, r3
 8002496:	ea4f 76e5 	mov.w	r6, r5, asr #31
 800249a:	46ab      	mov	fp, r5
 800249c:	46b4      	mov	ip, r6
 800249e:	eb1b 030b 	adds.w	r3, fp, fp
 80024a2:	eb4c 040c 	adc.w	r4, ip, ip
 80024a6:	469b      	mov	fp, r3
 80024a8:	46a4      	mov	ip, r4
 80024aa:	eb1b 0b05 	adds.w	fp, fp, r5
 80024ae:	eb4c 0c06 	adc.w	ip, ip, r6
 80024b2:	f04f 0100 	mov.w	r1, #0
 80024b6:	f04f 0200 	mov.w	r2, #0
 80024ba:	ea4f 124c 	mov.w	r2, ip, lsl #5
 80024be:	ea42 62db 	orr.w	r2, r2, fp, lsr #27
 80024c2:	ea4f 114b 	mov.w	r1, fp, lsl #5
 80024c6:	eb1b 0b01 	adds.w	fp, fp, r1
 80024ca:	eb4c 0c02 	adc.w	ip, ip, r2
 80024ce:	eb1b 0005 	adds.w	r0, fp, r5
 80024d2:	eb4c 0106 	adc.w	r1, ip, r6
 80024d6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80024da:	f04f 0300 	mov.w	r3, #0
 80024de:	f7fe fbbb 	bl	8000c58 <__aeabi_uldivmod>
 80024e2:	4603      	mov	r3, r0
 80024e4:	460c      	mov	r4, r1
 80024e6:	4618      	mov	r0, r3
 80024e8:	4621      	mov	r1, r4
 80024ea:	f7fe f857 	bl	800059c <__aeabi_ul2d>
 80024ee:	f04f 0200 	mov.w	r2, #0
 80024f2:	4b23      	ldr	r3, [pc, #140]	; (8002580 <Read_Request_CB+0x184>)
 80024f4:	f7fd fed2 	bl	800029c <__adddf3>
 80024f8:	4603      	mov	r3, r0
 80024fa:	460c      	mov	r4, r1
 80024fc:	4618      	mov	r0, r3
 80024fe:	4621      	mov	r1, r4
 8002500:	f7fe fb5a 	bl	8000bb8 <__aeabi_d2f>
 8002504:	4603      	mov	r3, r0
 8002506:	613b      	str	r3, [r7, #16]
    BlueMS_Environmental_Update((int32_t)(data_p *100), (int16_t)(data_t * 10)); 
 8002508:	edd7 7a04 	vldr	s15, [r7, #16]
 800250c:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8002584 <Read_Request_CB+0x188>
 8002510:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002514:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8002518:	edd7 7a05 	vldr	s15, [r7, #20]
 800251c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002520:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002524:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002528:	ee17 3a90 	vmov	r3, s15
 800252c:	b21b      	sxth	r3, r3
 800252e:	4619      	mov	r1, r3
 8002530:	ee16 0a90 	vmov	r0, s13
 8002534:	f000 f82c 	bl	8002590 <BlueMS_Environmental_Update>
  }

  if(connection_handle !=0)
 8002538:	4b13      	ldr	r3, [pc, #76]	; (8002588 <Read_Request_CB+0x18c>)
 800253a:	881b      	ldrh	r3, [r3, #0]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d00e      	beq.n	800255e <Read_Request_CB+0x162>
  { 
    ret = aci_gatt_allow_read(connection_handle);
 8002540:	4b11      	ldr	r3, [pc, #68]	; (8002588 <Read_Request_CB+0x18c>)
 8002542:	881b      	ldrh	r3, [r3, #0]
 8002544:	4618      	mov	r0, r3
 8002546:	f00c fa94 	bl	800ea72 <aci_gatt_allow_read>
 800254a:	4603      	mov	r3, r0
 800254c:	73fb      	strb	r3, [r7, #15]
    if (ret != BLE_STATUS_SUCCESS)
 800254e:	7bfb      	ldrb	r3, [r7, #15]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d004      	beq.n	800255e <Read_Request_CB+0x162>
    {
      PRINTF("aci_gatt_allow_read() failed: 0x%02x\r\n", ret); 
 8002554:	7bfb      	ldrb	r3, [r7, #15]
 8002556:	4619      	mov	r1, r3
 8002558:	480c      	ldr	r0, [pc, #48]	; (800258c <Read_Request_CB+0x190>)
 800255a:	f017 ff5d 	bl	801a418 <iprintf>
    }
  }
}
 800255e:	bf00      	nop
 8002560:	3718      	adds	r7, #24
 8002562:	46bd      	mov	sp, r7
 8002564:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8002568:	200027c8 	.word	0x200027c8
 800256c:	200021d8 	.word	0x200021d8
 8002570:	200021cc 	.word	0x200021cc
 8002574:	200021c0 	.word	0x200021c0
 8002578:	200027b0 	.word	0x200027b0
 800257c:	403b0000 	.word	0x403b0000
 8002580:	408f4000 	.word	0x408f4000
 8002584:	42c80000 	.word	0x42c80000
 8002588:	200021b8 	.word	0x200021b8
 800258c:	0801d23c 	.word	0x0801d23c

08002590 <BlueMS_Environmental_Update>:

tBleStatus BlueMS_Environmental_Update(int32_t press, int16_t temp)
{  
 8002590:	b580      	push	{r7, lr}
 8002592:	b088      	sub	sp, #32
 8002594:	af02      	add	r7, sp, #8
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	460b      	mov	r3, r1
 800259a:	807b      	strh	r3, [r7, #2]
  tBleStatus ret;
  uint8_t buff[8];
  HOST_TO_LE_16(buff, HAL_GetTick()>>3);
 800259c:	f006 fba2 	bl	8008ce4 <HAL_GetTick>
 80025a0:	4603      	mov	r3, r0
 80025a2:	08db      	lsrs	r3, r3, #3
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	733b      	strb	r3, [r7, #12]
 80025a8:	f006 fb9c 	bl	8008ce4 <HAL_GetTick>
 80025ac:	4603      	mov	r3, r0
 80025ae:	0adb      	lsrs	r3, r3, #11
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	737b      	strb	r3, [r7, #13]
  
  HOST_TO_LE_32(buff+2,press);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	73bb      	strb	r3, [r7, #14]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	121b      	asrs	r3, r3, #8
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	73fb      	strb	r3, [r7, #15]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	141b      	asrs	r3, r3, #16
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	743b      	strb	r3, [r7, #16]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	161b      	asrs	r3, r3, #24
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	747b      	strb	r3, [r7, #17]
  HOST_TO_LE_16(buff+6,temp);
 80025d2:	887b      	ldrh	r3, [r7, #2]
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	74bb      	strb	r3, [r7, #18]
 80025d8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80025dc:	121b      	asrs	r3, r3, #8
 80025de:	b21b      	sxth	r3, r3
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	74fb      	strb	r3, [r7, #19]
  
  ret = aci_gatt_update_char_value(HWServW2STHandle, EnvironmentalCharHandle, 
 80025e4:	4b0d      	ldr	r3, [pc, #52]	; (800261c <BlueMS_Environmental_Update+0x8c>)
 80025e6:	8818      	ldrh	r0, [r3, #0]
 80025e8:	4b0d      	ldr	r3, [pc, #52]	; (8002620 <BlueMS_Environmental_Update+0x90>)
 80025ea:	8819      	ldrh	r1, [r3, #0]
 80025ec:	f107 030c 	add.w	r3, r7, #12
 80025f0:	9300      	str	r3, [sp, #0]
 80025f2:	2308      	movs	r3, #8
 80025f4:	2200      	movs	r2, #0
 80025f6:	f00c f9a9 	bl	800e94c <aci_gatt_update_char_value>
 80025fa:	4603      	mov	r3, r0
 80025fc:	75fb      	strb	r3, [r7, #23]
                                   0, 8, buff);
  
  if (ret != BLE_STATUS_SUCCESS){
 80025fe:	7dfb      	ldrb	r3, [r7, #23]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d006      	beq.n	8002612 <BlueMS_Environmental_Update+0x82>
    PRINTF("Error while updating TEMP characteristic: 0x%04X\n",ret) ;
 8002604:	7dfb      	ldrb	r3, [r7, #23]
 8002606:	4619      	mov	r1, r3
 8002608:	4806      	ldr	r0, [pc, #24]	; (8002624 <BlueMS_Environmental_Update+0x94>)
 800260a:	f017 ff05 	bl	801a418 <iprintf>
    return BLE_STATUS_ERROR ;
 800260e:	2347      	movs	r3, #71	; 0x47
 8002610:	e000      	b.n	8002614 <BlueMS_Environmental_Update+0x84>
  }
  
  return BLE_STATUS_SUCCESS;	
 8002612:	2300      	movs	r3, #0
}
 8002614:	4618      	mov	r0, r3
 8002616:	3718      	adds	r7, #24
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	200027c6 	.word	0x200027c6
 8002620:	200027b0 	.word	0x200027b0
 8002624:	0801d264 	.word	0x0801d264

08002628 <Set_DeviceConnectable>:
 * Input          : None.
 * Output         : None.
 * Return         : None.
 *******************************************************************************/
void Set_DeviceConnectable(void)
{  
 8002628:	b580      	push	{r7, lr}
 800262a:	b092      	sub	sp, #72	; 0x48
 800262c:	af08      	add	r7, sp, #32
  uint8_t ret;
  const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,SENSOR_DEMO_NAME}; 
 800262e:	4a3f      	ldr	r2, [pc, #252]	; (800272c <Set_DeviceConnectable+0x104>)
 8002630:	f107 031c 	add.w	r3, r7, #28
 8002634:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002638:	e883 0003 	stmia.w	r3, {r0, r1}
    
  uint8_t manuf_data[26] = {
 800263c:	2302      	movs	r3, #2
 800263e:	703b      	strb	r3, [r7, #0]
 8002640:	230a      	movs	r3, #10
 8002642:	707b      	strb	r3, [r7, #1]
 8002644:	2300      	movs	r3, #0
 8002646:	70bb      	strb	r3, [r7, #2]
 8002648:	2308      	movs	r3, #8
 800264a:	70fb      	strb	r3, [r7, #3]
 800264c:	2309      	movs	r3, #9
 800264e:	713b      	strb	r3, [r7, #4]
 8002650:	2342      	movs	r3, #66	; 0x42
 8002652:	717b      	strb	r3, [r7, #5]
 8002654:	236c      	movs	r3, #108	; 0x6c
 8002656:	71bb      	strb	r3, [r7, #6]
 8002658:	2375      	movs	r3, #117	; 0x75
 800265a:	71fb      	strb	r3, [r7, #7]
 800265c:	2365      	movs	r3, #101	; 0x65
 800265e:	723b      	strb	r3, [r7, #8]
 8002660:	234e      	movs	r3, #78	; 0x4e
 8002662:	727b      	strb	r3, [r7, #9]
 8002664:	2352      	movs	r3, #82	; 0x52
 8002666:	72bb      	strb	r3, [r7, #10]
 8002668:	2347      	movs	r3, #71	; 0x47
 800266a:	72fb      	strb	r3, [r7, #11]
 800266c:	230d      	movs	r3, #13
 800266e:	733b      	strb	r3, [r7, #12]
 8002670:	23ff      	movs	r3, #255	; 0xff
 8002672:	737b      	strb	r3, [r7, #13]
 8002674:	2301      	movs	r3, #1
 8002676:	73bb      	strb	r3, [r7, #14]
 8002678:	2302      	movs	r3, #2
 800267a:	73fb      	strb	r3, [r7, #15]
 800267c:	2300      	movs	r3, #0
 800267e:	743b      	strb	r3, [r7, #16]
 8002680:	23f4      	movs	r3, #244	; 0xf4
 8002682:	747b      	strb	r3, [r7, #17]
 8002684:	2300      	movs	r3, #0
 8002686:	74bb      	strb	r3, [r7, #18]
 8002688:	2300      	movs	r3, #0
 800268a:	74fb      	strb	r3, [r7, #19]
    0x02,
    0x00,
    0xF4, /* ACC+Gyro+Mag 0xE0 | 0x04 Temp | 0x10 Pressure */
    0x00, /*  */
    0x00, /*  */
    bdaddr[5], /* BLE MAC start -MSB first- */
 800268c:	4b28      	ldr	r3, [pc, #160]	; (8002730 <Set_DeviceConnectable+0x108>)
 800268e:	795b      	ldrb	r3, [r3, #5]
  uint8_t manuf_data[26] = {
 8002690:	753b      	strb	r3, [r7, #20]
    bdaddr[4],
 8002692:	4b27      	ldr	r3, [pc, #156]	; (8002730 <Set_DeviceConnectable+0x108>)
 8002694:	791b      	ldrb	r3, [r3, #4]
  uint8_t manuf_data[26] = {
 8002696:	757b      	strb	r3, [r7, #21]
    bdaddr[3],
 8002698:	4b25      	ldr	r3, [pc, #148]	; (8002730 <Set_DeviceConnectable+0x108>)
 800269a:	78db      	ldrb	r3, [r3, #3]
  uint8_t manuf_data[26] = {
 800269c:	75bb      	strb	r3, [r7, #22]
    bdaddr[2],
 800269e:	4b24      	ldr	r3, [pc, #144]	; (8002730 <Set_DeviceConnectable+0x108>)
 80026a0:	789b      	ldrb	r3, [r3, #2]
  uint8_t manuf_data[26] = {
 80026a2:	75fb      	strb	r3, [r7, #23]
    bdaddr[1],
 80026a4:	4b22      	ldr	r3, [pc, #136]	; (8002730 <Set_DeviceConnectable+0x108>)
 80026a6:	785b      	ldrb	r3, [r3, #1]
  uint8_t manuf_data[26] = {
 80026a8:	763b      	strb	r3, [r7, #24]
    bdaddr[0]  /* BLE MAC stop */
 80026aa:	4b21      	ldr	r3, [pc, #132]	; (8002730 <Set_DeviceConnectable+0x108>)
 80026ac:	781b      	ldrb	r3, [r3, #0]
  uint8_t manuf_data[26] = {
 80026ae:	767b      	strb	r3, [r7, #25]
  };
  
  manuf_data[18] |= 0x01; /* Sensor Fusion */
 80026b0:	7cbb      	ldrb	r3, [r7, #18]
 80026b2:	f043 0301 	orr.w	r3, r3, #1
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	74bb      	strb	r3, [r7, #18]
  
  hci_le_set_scan_resp_data(0, NULL);
 80026ba:	2100      	movs	r1, #0
 80026bc:	2000      	movs	r0, #0
 80026be:	f00c fb39 	bl	800ed34 <hci_le_set_scan_resp_data>
  
  PRINTF("Set General Discoverable Mode.\n");
 80026c2:	481c      	ldr	r0, [pc, #112]	; (8002734 <Set_DeviceConnectable+0x10c>)
 80026c4:	f017 ff1c 	bl	801a500 <puts>
  
  ret = aci_gap_set_discoverable(ADV_DATA_TYPE,
 80026c8:	2300      	movs	r3, #0
 80026ca:	9306      	str	r3, [sp, #24]
 80026cc:	2300      	movs	r3, #0
 80026ce:	9305      	str	r3, [sp, #20]
 80026d0:	2300      	movs	r3, #0
 80026d2:	9304      	str	r3, [sp, #16]
 80026d4:	2300      	movs	r3, #0
 80026d6:	9303      	str	r3, [sp, #12]
 80026d8:	f107 031c 	add.w	r3, r7, #28
 80026dc:	9302      	str	r3, [sp, #8]
 80026de:	2308      	movs	r3, #8
 80026e0:	9301      	str	r3, [sp, #4]
 80026e2:	2300      	movs	r3, #0
 80026e4:	9300      	str	r3, [sp, #0]
 80026e6:	2301      	movs	r3, #1
 80026e8:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 80026ec:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 80026f0:	2000      	movs	r0, #0
 80026f2:	f00b fe15 	bl	800e320 <aci_gap_set_discoverable>
 80026f6:	4603      	mov	r3, r0
 80026f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                (ADV_INTERVAL_MIN_MS*1000)/625,(ADV_INTERVAL_MAX_MS*1000)/625,
                                 STATIC_RANDOM_ADDR, NO_WHITE_LIST_USE,
                                 sizeof(local_name), local_name, 0, NULL, 0, 0); 
  
  aci_gap_update_adv_data(26, manuf_data);
 80026fc:	463b      	mov	r3, r7
 80026fe:	4619      	mov	r1, r3
 8002700:	201a      	movs	r0, #26
 8002702:	f00b ff50 	bl	800e5a6 <aci_gap_update_adv_data>
  
  if(ret != BLE_STATUS_SUCCESS)
 8002706:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800270a:	2b00      	cmp	r3, #0
 800270c:	d006      	beq.n	800271c <Set_DeviceConnectable+0xf4>
  {
    PRINTF("aci_gap_set_discoverable() failed: 0x%02x\r\n", ret);
 800270e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002712:	4619      	mov	r1, r3
 8002714:	4808      	ldr	r0, [pc, #32]	; (8002738 <Set_DeviceConnectable+0x110>)
 8002716:	f017 fe7f 	bl	801a418 <iprintf>
  }
  else
    PRINTF("aci_gap_set_discoverable() --> SUCCESS\r\n");
}
 800271a:	e002      	b.n	8002722 <Set_DeviceConnectable+0xfa>
    PRINTF("aci_gap_set_discoverable() --> SUCCESS\r\n");
 800271c:	4807      	ldr	r0, [pc, #28]	; (800273c <Set_DeviceConnectable+0x114>)
 800271e:	f017 feef 	bl	801a500 <puts>
}
 8002722:	bf00      	nop
 8002724:	3728      	adds	r7, #40	; 0x28
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	0801d30c 	.word	0x0801d30c
 8002730:	200027a8 	.word	0x200027a8
 8002734:	0801d298 	.word	0x0801d298
 8002738:	0801d2b8 	.word	0x0801d2b8
 800273c:	0801d2e4 	.word	0x0801d2e4

08002740 <user_notify>:
 *         parsed.
 * @param  void* Pointer to the ACI packet
 * @retval None
 */
void user_notify(void * pData)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b088      	sub	sp, #32
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  hci_uart_pckt *hci_pckt = pData;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	61fb      	str	r3, [r7, #28]
  /* obtain event packet */
  hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	3301      	adds	r3, #1
 8002750:	61bb      	str	r3, [r7, #24]
  
  if(hci_pckt->type != HCI_EVENT_PKT)
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	2b04      	cmp	r3, #4
 8002758:	d139      	bne.n	80027ce <user_notify+0x8e>
    return;
  
  switch(event_pckt->evt){
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	2b3e      	cmp	r3, #62	; 0x3e
 8002760:	d006      	beq.n	8002770 <user_notify+0x30>
 8002762:	2bff      	cmp	r3, #255	; 0xff
 8002764:	d01b      	beq.n	800279e <user_notify+0x5e>
 8002766:	2b05      	cmp	r3, #5
 8002768:	d132      	bne.n	80027d0 <user_notify+0x90>
    
  case EVT_DISCONN_COMPLETE:
    {
      GAP_DisconnectionComplete_CB();
 800276a:	f000 f835 	bl	80027d8 <GAP_DisconnectionComplete_CB>
    }
    break;
 800276e:	e02f      	b.n	80027d0 <user_notify+0x90>
    
  case EVT_LE_META_EVENT:
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	3302      	adds	r3, #2
 8002774:	60fb      	str	r3, [r7, #12]
      
      switch(evt->subevent){
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d000      	beq.n	8002780 <user_notify+0x40>
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
        }
        break;
      }
    }
    break;
 800277e:	e027      	b.n	80027d0 <user_notify+0x90>
          evt_le_connection_complete *cc = (void *)evt->data;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	3301      	adds	r3, #1
 8002784:	60bb      	str	r3, [r7, #8]
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	1d5a      	adds	r2, r3, #5
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8002790:	b29b      	uxth	r3, r3
 8002792:	4619      	mov	r1, r3
 8002794:	4610      	mov	r0, r2
 8002796:	f000 f837 	bl	8002808 <GAP_ConnectionComplete_CB>
        break;
 800279a:	bf00      	nop
    break;
 800279c:	e018      	b.n	80027d0 <user_notify+0x90>
    
  case EVT_VENDOR:
    {
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	3302      	adds	r3, #2
 80027a2:	617b      	str	r3, [r7, #20]
      switch(blue_evt->ecode){
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	881b      	ldrh	r3, [r3, #0]
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	461a      	mov	r2, r3
 80027ac:	f640 4314 	movw	r3, #3092	; 0xc14
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d000      	beq.n	80027b6 <user_notify+0x76>
        }
        break;        
      }
      
    }
    break;
 80027b4:	e00c      	b.n	80027d0 <user_notify+0x90>
          evt_gatt_read_permit_req *pr = (void*)blue_evt->data;                    
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	3302      	adds	r3, #2
 80027ba:	613b      	str	r3, [r7, #16]
          Read_Request_CB(pr->attr_handle);                    
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	885b      	ldrh	r3, [r3, #2]
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7ff fe1a 	bl	80023fc <Read_Request_CB>
        break;        
 80027c8:	bf00      	nop
    break;
 80027ca:	bf00      	nop
 80027cc:	e000      	b.n	80027d0 <user_notify+0x90>
    return;
 80027ce:	bf00      	nop
  }    
}
 80027d0:	3720      	adds	r7, #32
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
	...

080027d8 <GAP_DisconnectionComplete_CB>:
 * @brief  This function is called when the peer device gets disconnected.
 * @param  None 
 * @retval None
 */
void GAP_DisconnectionComplete_CB(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
  connected = FALSE;
 80027dc:	4b06      	ldr	r3, [pc, #24]	; (80027f8 <GAP_DisconnectionComplete_CB+0x20>)
 80027de:	2200      	movs	r2, #0
 80027e0:	601a      	str	r2, [r3, #0]
  PRINTF("Disconnected\n");
 80027e2:	4806      	ldr	r0, [pc, #24]	; (80027fc <GAP_DisconnectionComplete_CB+0x24>)
 80027e4:	f017 fe8c 	bl	801a500 <puts>
  /* Make the device connectable again. */
  set_connectable = TRUE;
 80027e8:	4b05      	ldr	r3, [pc, #20]	; (8002800 <GAP_DisconnectionComplete_CB+0x28>)
 80027ea:	2201      	movs	r2, #1
 80027ec:	701a      	strb	r2, [r3, #0]
  notification_enabled = FALSE;
 80027ee:	4b05      	ldr	r3, [pc, #20]	; (8002804 <GAP_DisconnectionComplete_CB+0x2c>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	701a      	strb	r2, [r3, #0]
}
 80027f4:	bf00      	nop
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	200021bc 	.word	0x200021bc
 80027fc:	0801d314 	.word	0x0801d314
 8002800:	200011c1 	.word	0x200011c1
 8002804:	200021ba 	.word	0x200021ba

08002808 <GAP_ConnectionComplete_CB>:
 * @param  uint8_t Address of peer device
 * @param  uint16_t Connection handle
 * @retval None
 */
void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle)
{  
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	460b      	mov	r3, r1
 8002812:	807b      	strh	r3, [r7, #2]
  connected = TRUE;
 8002814:	4b11      	ldr	r3, [pc, #68]	; (800285c <GAP_ConnectionComplete_CB+0x54>)
 8002816:	2201      	movs	r2, #1
 8002818:	601a      	str	r2, [r3, #0]
  connection_handle = handle;
 800281a:	4a11      	ldr	r2, [pc, #68]	; (8002860 <GAP_ConnectionComplete_CB+0x58>)
 800281c:	887b      	ldrh	r3, [r7, #2]
 800281e:	8013      	strh	r3, [r2, #0]
  
  PRINTF("Connected to device:");
 8002820:	4810      	ldr	r0, [pc, #64]	; (8002864 <GAP_ConnectionComplete_CB+0x5c>)
 8002822:	f017 fdf9 	bl	801a418 <iprintf>
  for(uint32_t i = 5; i > 0; i--){
 8002826:	2305      	movs	r3, #5
 8002828:	60fb      	str	r3, [r7, #12]
 800282a:	e00a      	b.n	8002842 <GAP_ConnectionComplete_CB+0x3a>
    PRINTF("%02X-", addr[i]);
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	4413      	add	r3, r2
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	4619      	mov	r1, r3
 8002836:	480c      	ldr	r0, [pc, #48]	; (8002868 <GAP_ConnectionComplete_CB+0x60>)
 8002838:	f017 fdee 	bl	801a418 <iprintf>
  for(uint32_t i = 5; i > 0; i--){
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	3b01      	subs	r3, #1
 8002840:	60fb      	str	r3, [r7, #12]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d1f1      	bne.n	800282c <GAP_ConnectionComplete_CB+0x24>
  }
  PRINTF("%02X\n", addr[0]);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	4619      	mov	r1, r3
 800284e:	4807      	ldr	r0, [pc, #28]	; (800286c <GAP_ConnectionComplete_CB+0x64>)
 8002850:	f017 fde2 	bl	801a418 <iprintf>
}
 8002854:	bf00      	nop
 8002856:	3710      	adds	r7, #16
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	200021bc 	.word	0x200021bc
 8002860:	200021b8 	.word	0x200021b8
 8002864:	0801d324 	.word	0x0801d324
 8002868:	0801d33c 	.word	0x0801d33c
 800286c:	0801d344 	.word	0x0801d344

08002870 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct 
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b088      	sub	sp, #32
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002878:	2300      	movs	r3, #0
 800287a:	60bb      	str	r3, [r7, #8]
 800287c:	4b1d      	ldr	r3, [pc, #116]	; (80028f4 <HCI_TL_SPI_Init+0x84>)
 800287e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002880:	4a1c      	ldr	r2, [pc, #112]	; (80028f4 <HCI_TL_SPI_Init+0x84>)
 8002882:	f043 0301 	orr.w	r3, r3, #1
 8002886:	6313      	str	r3, [r2, #48]	; 0x30
 8002888:	4b1a      	ldr	r3, [pc, #104]	; (80028f4 <HCI_TL_SPI_Init+0x84>)
 800288a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288c:	f003 0301 	and.w	r3, r3, #1
 8002890:	60bb      	str	r3, [r7, #8]
 8002892:	68bb      	ldr	r3, [r7, #8]
  
  /*Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8002894:	2301      	movs	r3, #1
 8002896:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002898:	4b17      	ldr	r3, [pc, #92]	; (80028f8 <HCI_TL_SPI_Init+0x88>)
 800289a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289c:	2300      	movs	r3, #0
 800289e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 80028a0:	f107 030c 	add.w	r3, r7, #12
 80028a4:	4619      	mov	r1, r3
 80028a6:	4815      	ldr	r0, [pc, #84]	; (80028fc <HCI_TL_SPI_Init+0x8c>)
 80028a8:	f007 fa58 	bl	8009d5c <HAL_GPIO_Init>
   
  /*Configure CS & RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 80028ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028b2:	2301      	movs	r3, #1
 80028b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b6:	2300      	movs	r3, #0
 80028b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ba:	2300      	movs	r3, #0
 80028bc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 80028be:	f107 030c 	add.w	r3, r7, #12
 80028c2:	4619      	mov	r1, r3
 80028c4:	480d      	ldr	r0, [pc, #52]	; (80028fc <HCI_TL_SPI_Init+0x8c>)
 80028c6:	f007 fa49 	bl	8009d5c <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 80028ca:	2302      	movs	r3, #2
 80028cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028ce:	2301      	movs	r3, #1
 80028d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d2:	2300      	movs	r3, #0
 80028d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d6:	2300      	movs	r3, #0
 80028d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct); 
 80028da:	f107 030c 	add.w	r3, r7, #12
 80028de:	4619      	mov	r1, r3
 80028e0:	4806      	ldr	r0, [pc, #24]	; (80028fc <HCI_TL_SPI_Init+0x8c>)
 80028e2:	f007 fa3b 	bl	8009d5c <HAL_GPIO_Init>
    
  return BSP_SPI1_Init();
 80028e6:	f000 fd47 	bl	8003378 <BSP_SPI1_Init>
 80028ea:	4603      	mov	r3, r0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3720      	adds	r7, #32
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	40023800 	.word	0x40023800
 80028f8:	10110000 	.word	0x10110000
 80028fc:	40020000 	.word	0x40020000

08002900 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN); 
 8002904:	2101      	movs	r1, #1
 8002906:	4807      	ldr	r0, [pc, #28]	; (8002924 <HCI_TL_SPI_DeInit+0x24>)
 8002908:	f007 fbaa 	bl	800a060 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN); 
 800290c:	2102      	movs	r1, #2
 800290e:	4805      	ldr	r0, [pc, #20]	; (8002924 <HCI_TL_SPI_DeInit+0x24>)
 8002910:	f007 fba6 	bl	800a060 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);   
 8002914:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002918:	4802      	ldr	r0, [pc, #8]	; (8002924 <HCI_TL_SPI_DeInit+0x24>)
 800291a:	f007 fba1 	bl	800a060 <HAL_GPIO_DeInit>
  return 0;
 800291e:	2300      	movs	r3, #0
}
 8002920:	4618      	mov	r0, r3
 8002922:	bd80      	pop	{r7, pc}
 8002924:	40020000 	.word	0x40020000

08002928 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 800292c:	2200      	movs	r2, #0
 800292e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002932:	4809      	ldr	r0, [pc, #36]	; (8002958 <HCI_TL_SPI_Reset+0x30>)
 8002934:	f007 fc8e 	bl	800a254 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8002938:	2005      	movs	r0, #5
 800293a:	f006 f9df 	bl	8008cfc <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 800293e:	2201      	movs	r2, #1
 8002940:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002944:	4804      	ldr	r0, [pc, #16]	; (8002958 <HCI_TL_SPI_Reset+0x30>)
 8002946:	f007 fc85 	bl	800a254 <HAL_GPIO_WritePin>
  HAL_Delay(5);    
 800294a:	2005      	movs	r0, #5
 800294c:	f006 f9d6 	bl	8008cfc <HAL_Delay>
  return 0;
 8002950:	2300      	movs	r3, #0
}  
 8002952:	4618      	mov	r0, r3
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	40020000 	.word	0x40020000

0800295c <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b088      	sub	sp, #32
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	460b      	mov	r3, r1
 8002966:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 8002968:	2300      	movs	r3, #0
 800296a:	777b      	strb	r3, [r7, #29]
  uint8_t char_ff = 0xff;
 800296c:	23ff      	movs	r3, #255	; 0xff
 800296e:	773b      	strb	r3, [r7, #28]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8002970:	230b      	movs	r3, #11
 8002972:	753b      	strb	r3, [r7, #20]
 8002974:	2300      	movs	r3, #0
 8002976:	757b      	strb	r3, [r7, #21]
 8002978:	2300      	movs	r3, #0
 800297a:	75bb      	strb	r3, [r7, #22]
 800297c:	2300      	movs	r3, #0
 800297e:	75fb      	strb	r3, [r7, #23]
 8002980:	2300      	movs	r3, #0
 8002982:	763b      	strb	r3, [r7, #24]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8002984:	2200      	movs	r2, #0
 8002986:	2102      	movs	r1, #2
 8002988:	4820      	ldr	r0, [pc, #128]	; (8002a0c <HCI_TL_SPI_Receive+0xb0>)
 800298a:	f007 fc63 	bl	800a254 <HAL_GPIO_WritePin>

  /* Read the header */  
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 800298e:	f107 010c 	add.w	r1, r7, #12
 8002992:	f107 0314 	add.w	r3, r7, #20
 8002996:	2205      	movs	r2, #5
 8002998:	4618      	mov	r0, r3
 800299a:	f000 fd1d 	bl	80033d8 <BSP_SPI1_SendRecv>
  	
  if(header_slave[0] == 0x02) 
 800299e:	7b3b      	ldrb	r3, [r7, #12]
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d129      	bne.n	80029f8 <HCI_TL_SPI_Receive+0x9c>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 80029a4:	7c3b      	ldrb	r3, [r7, #16]
 80029a6:	021b      	lsls	r3, r3, #8
 80029a8:	b21a      	sxth	r2, r3
 80029aa:	7bfb      	ldrb	r3, [r7, #15]
 80029ac:	b21b      	sxth	r3, r3
 80029ae:	4313      	orrs	r3, r2
 80029b0:	b21b      	sxth	r3, r3
 80029b2:	83fb      	strh	r3, [r7, #30]
  
    if(byte_count > 0) {
 80029b4:	8bfb      	ldrh	r3, [r7, #30]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d01e      	beq.n	80029f8 <HCI_TL_SPI_Receive+0x9c>
  
      /* avoid to read more data that size of the buffer */

      if (byte_count > size){
 80029ba:	8bfa      	ldrh	r2, [r7, #30]
 80029bc:	887b      	ldrh	r3, [r7, #2]
 80029be:	429a      	cmp	r2, r3
 80029c0:	d901      	bls.n	80029c6 <HCI_TL_SPI_Receive+0x6a>
        byte_count = size;
 80029c2:	887b      	ldrh	r3, [r7, #2]
 80029c4:	83fb      	strh	r3, [r7, #30]
      }        
  
      for(len = 0; len < byte_count; len++)
 80029c6:	2300      	movs	r3, #0
 80029c8:	777b      	strb	r3, [r7, #29]
 80029ca:	e010      	b.n	80029ee <HCI_TL_SPI_Receive+0x92>
      {                                               
        BSP_SPI1_SendRecv(&char_ff, (uint8_t*)&read_char, 1);  
 80029cc:	f107 011b 	add.w	r1, r7, #27
 80029d0:	f107 031c 	add.w	r3, r7, #28
 80029d4:	2201      	movs	r2, #1
 80029d6:	4618      	mov	r0, r3
 80029d8:	f000 fcfe 	bl	80033d8 <BSP_SPI1_SendRecv>
        buffer[len] = read_char;
 80029dc:	7f7b      	ldrb	r3, [r7, #29]
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	4413      	add	r3, r2
 80029e2:	7efa      	ldrb	r2, [r7, #27]
 80029e4:	b2d2      	uxtb	r2, r2
 80029e6:	701a      	strb	r2, [r3, #0]
      for(len = 0; len < byte_count; len++)
 80029e8:	7f7b      	ldrb	r3, [r7, #29]
 80029ea:	3301      	adds	r3, #1
 80029ec:	777b      	strb	r3, [r7, #29]
 80029ee:	7f7b      	ldrb	r3, [r7, #29]
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	8bfa      	ldrh	r2, [r7, #30]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d8e9      	bhi.n	80029cc <HCI_TL_SPI_Receive+0x70>
      }      
    }    
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80029f8:	2201      	movs	r2, #1
 80029fa:	2102      	movs	r1, #2
 80029fc:	4803      	ldr	r0, [pc, #12]	; (8002a0c <HCI_TL_SPI_Receive+0xb0>)
 80029fe:	f007 fc29 	bl	800a254 <HAL_GPIO_WritePin>
    }
    PRINT_CSV("\n");
  }
#endif
  
  return len;  
 8002a02:	7f7b      	ldrb	r3, [r7, #29]
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3720      	adds	r7, #32
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	40020000 	.word	0x40020000

08002a10 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{  
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b088      	sub	sp, #32
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	460b      	mov	r3, r1
 8002a1a:	807b      	strh	r3, [r7, #2]
  int32_t result;  
  
  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8002a1c:	230a      	movs	r3, #10
 8002a1e:	743b      	strb	r3, [r7, #16]
 8002a20:	2300      	movs	r3, #0
 8002a22:	747b      	strb	r3, [r7, #17]
 8002a24:	2300      	movs	r3, #0
 8002a26:	74bb      	strb	r3, [r7, #18]
 8002a28:	2300      	movs	r3, #0
 8002a2a:	74fb      	strb	r3, [r7, #19]
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	753b      	strb	r3, [r7, #20]
  uint8_t header_slave[HEADER_SIZE];
  
  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 8002a30:	f006 f958 	bl	8008ce4 <HAL_GetTick>
 8002a34:	61b8      	str	r0, [r7, #24]
  
  do
  {
    result = 0;
 8002a36:	2300      	movs	r3, #0
 8002a38:	61fb      	str	r3, [r7, #28]
    
    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	2102      	movs	r1, #2
 8002a3e:	481c      	ldr	r0, [pc, #112]	; (8002ab0 <HCI_TL_SPI_Send+0xa0>)
 8002a40:	f007 fc08 	bl	800a254 <HAL_GPIO_WritePin>
    
    /* Read header */  
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 8002a44:	f107 0108 	add.w	r1, r7, #8
 8002a48:	f107 0310 	add.w	r3, r7, #16
 8002a4c:	2205      	movs	r2, #5
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f000 fcc2 	bl	80033d8 <BSP_SPI1_SendRecv>
    
    if(header_slave[0] == 0x02) 
 8002a54:	7a3b      	ldrb	r3, [r7, #8]
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d10f      	bne.n	8002a7a <HCI_TL_SPI_Send+0x6a>
    {
      /* SPI is ready */
      if(header_slave[1] >= size) 
 8002a5a:	7a7b      	ldrb	r3, [r7, #9]
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	887a      	ldrh	r2, [r7, #2]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d806      	bhi.n	8002a72 <HCI_TL_SPI_Send+0x62>
      {
        BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 8002a64:	887b      	ldrh	r3, [r7, #2]
 8002a66:	461a      	mov	r2, r3
 8002a68:	4912      	ldr	r1, [pc, #72]	; (8002ab4 <HCI_TL_SPI_Send+0xa4>)
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f000 fcb4 	bl	80033d8 <BSP_SPI1_SendRecv>
 8002a70:	e006      	b.n	8002a80 <HCI_TL_SPI_Send+0x70>
      } 
      else 
      {
        /* Buffer is too small */
        result = -2;
 8002a72:	f06f 0301 	mvn.w	r3, #1
 8002a76:	61fb      	str	r3, [r7, #28]
 8002a78:	e002      	b.n	8002a80 <HCI_TL_SPI_Send+0x70>
      }
    } else {
      /* SPI is not ready */
      result = -1;
 8002a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a7e:	61fb      	str	r3, [r7, #28]
    }
    
    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8002a80:	2201      	movs	r2, #1
 8002a82:	2102      	movs	r1, #2
 8002a84:	480a      	ldr	r0, [pc, #40]	; (8002ab0 <HCI_TL_SPI_Send+0xa0>)
 8002a86:	f007 fbe5 	bl	800a254 <HAL_GPIO_WritePin>
    
    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 8002a8a:	f006 f92b 	bl	8008ce4 <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	2b0f      	cmp	r3, #15
 8002a96:	d903      	bls.n	8002aa0 <HCI_TL_SPI_Send+0x90>
    {
      result = -3;
 8002a98:	f06f 0302 	mvn.w	r3, #2
 8002a9c:	61fb      	str	r3, [r7, #28]
      break;
 8002a9e:	e002      	b.n	8002aa6 <HCI_TL_SPI_Send+0x96>
    }
  } while(result < 0);
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	dbc7      	blt.n	8002a36 <HCI_TL_SPI_Send+0x26>
  
  return result;
 8002aa6:	69fb      	ldr	r3, [r7, #28]
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3720      	adds	r7, #32
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	40020000 	.word	0x40020000
 8002ab4:	200021f0 	.word	0x200021f0

08002ab8 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8002abc:	2101      	movs	r1, #1
 8002abe:	4805      	ldr	r0, [pc, #20]	; (8002ad4 <IsDataAvailable+0x1c>)
 8002ac0:	f007 fbb0 	bl	800a224 <HAL_GPIO_ReadPin>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	bf0c      	ite	eq
 8002aca:	2301      	moveq	r3, #1
 8002acc:	2300      	movne	r3, #0
 8002ace:	b2db      	uxtb	r3, r3
} 
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	40020000 	.word	0x40020000

08002ad8 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */ 
void hci_tl_lowlevel_init(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b088      	sub	sp, #32
 8002adc:	af00      	add	r7, sp, #0
  
  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;  
  
  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 8002ade:	4b13      	ldr	r3, [pc, #76]	; (8002b2c <hci_tl_lowlevel_init+0x54>)
 8002ae0:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 8002ae2:	4b13      	ldr	r3, [pc, #76]	; (8002b30 <hci_tl_lowlevel_init+0x58>)
 8002ae4:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 8002ae6:	4b13      	ldr	r3, [pc, #76]	; (8002b34 <hci_tl_lowlevel_init+0x5c>)
 8002ae8:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 8002aea:	4b13      	ldr	r3, [pc, #76]	; (8002b38 <hci_tl_lowlevel_init+0x60>)
 8002aec:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 8002aee:	4b13      	ldr	r3, [pc, #76]	; (8002b3c <hci_tl_lowlevel_init+0x64>)
 8002af0:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 8002af2:	4b13      	ldr	r3, [pc, #76]	; (8002b40 <hci_tl_lowlevel_init+0x68>)
 8002af4:	61fb      	str	r3, [r7, #28]
  
  hci_register_io_bus (&fops);
 8002af6:	1d3b      	adds	r3, r7, #4
 8002af8:	4618      	mov	r0, r3
 8002afa:	f00c fa37 	bl	800ef6c <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */
  
  /* USER CODE END hci_tl_lowlevel_init 2 */
  
  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 8002afe:	f04f 61c0 	mov.w	r1, #100663296	; 0x6000000
 8002b02:	4810      	ldr	r0, [pc, #64]	; (8002b44 <hci_tl_lowlevel_init+0x6c>)
 8002b04:	f007 f916 	bl	8009d34 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti0, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 8002b08:	4a0f      	ldr	r2, [pc, #60]	; (8002b48 <hci_tl_lowlevel_init+0x70>)
 8002b0a:	2100      	movs	r1, #0
 8002b0c:	480d      	ldr	r0, [pc, #52]	; (8002b44 <hci_tl_lowlevel_init+0x6c>)
 8002b0e:	f007 f8f7 	bl	8009d00 <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002b12:	2200      	movs	r2, #0
 8002b14:	2100      	movs	r1, #0
 8002b16:	2006      	movs	r0, #6
 8002b18:	f006 fdb7 	bl	800968a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002b1c:	2006      	movs	r0, #6
 8002b1e:	f006 fdd0 	bl	80096c2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */
  
  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 8002b22:	bf00      	nop
 8002b24:	3720      	adds	r7, #32
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	08002871 	.word	0x08002871
 8002b30:	08002901 	.word	0x08002901
 8002b34:	08002a11 	.word	0x08002a11
 8002b38:	0800295d 	.word	0x0800295d
 8002b3c:	08002929 	.word	0x08002929
 8002b40:	08003595 	.word	0x08003595
 8002b44:	200027dc 	.word	0x200027dc
 8002b48:	08002b4d 	.word	0x08002b4d

08002b4c <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 8002b50:	e005      	b.n	8002b5e <hci_tl_lowlevel_isr+0x12>
  {        
    if (hci_notify_asynch_evt(NULL))
 8002b52:	2000      	movs	r0, #0
 8002b54:	f00c fb6c 	bl	800f230 <hci_notify_asynch_evt>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d105      	bne.n	8002b6a <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 8002b5e:	f7ff ffab 	bl	8002ab8 <IsDataAvailable>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d1f4      	bne.n	8002b52 <hci_tl_lowlevel_isr+0x6>
 8002b68:	e000      	b.n	8002b6c <hci_tl_lowlevel_isr+0x20>
    {
      return;
 8002b6a:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */ 
}
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b72:	f006 f851 	bl	8008c18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b76:	f000 f815 	bl	8002ba4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b7a:	f000 fa1d 	bl	8002fb8 <MX_GPIO_Init>
  MX_DMA_Init();
 8002b7e:	f000 f9fb 	bl	8002f78 <MX_DMA_Init>
  MX_ADC1_Init();
 8002b82:	f000 f893 	bl	8002cac <MX_ADC1_Init>
  MX_CRC_Init();
 8002b86:	f000 f8f1 	bl	8002d6c <MX_CRC_Init>
  MX_RTC_Init();
 8002b8a:	f000 f903 	bl	8002d94 <MX_RTC_Init>
  MX_TIM2_Init();
 8002b8e:	f000 f95b 	bl	8002e48 <MX_TIM2_Init>
  MX_BlueNRG_MS_Init();
 8002b92:	f7fe f9e1 	bl	8000f58 <MX_BlueNRG_MS_Init>
  MX_MEMS_Init();
 8002b96:	f00a fe0b 	bl	800d7b0 <MX_MEMS_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_BlueNRG_MS_Process();
 8002b9a:	f7fe facf 	bl	800113c <MX_BlueNRG_MS_Process>
  MX_MEMS_Process();
 8002b9e:	f00a fe0d 	bl	800d7bc <MX_MEMS_Process>
  MX_BlueNRG_MS_Process();
 8002ba2:	e7fa      	b.n	8002b9a <main+0x2c>

08002ba4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b098      	sub	sp, #96	; 0x60
 8002ba8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002baa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002bae:	2230      	movs	r2, #48	; 0x30
 8002bb0:	2100      	movs	r1, #0
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f017 fc27 	bl	801a406 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002bb8:	f107 031c 	add.w	r3, r7, #28
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	601a      	str	r2, [r3, #0]
 8002bc0:	605a      	str	r2, [r3, #4]
 8002bc2:	609a      	str	r2, [r3, #8]
 8002bc4:	60da      	str	r2, [r3, #12]
 8002bc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002bc8:	f107 0308 	add.w	r3, r7, #8
 8002bcc:	2200      	movs	r2, #0
 8002bce:	601a      	str	r2, [r3, #0]
 8002bd0:	605a      	str	r2, [r3, #4]
 8002bd2:	609a      	str	r2, [r3, #8]
 8002bd4:	60da      	str	r2, [r3, #12]
 8002bd6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bd8:	2300      	movs	r3, #0
 8002bda:	607b      	str	r3, [r7, #4]
 8002bdc:	4b31      	ldr	r3, [pc, #196]	; (8002ca4 <SystemClock_Config+0x100>)
 8002bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be0:	4a30      	ldr	r2, [pc, #192]	; (8002ca4 <SystemClock_Config+0x100>)
 8002be2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002be6:	6413      	str	r3, [r2, #64]	; 0x40
 8002be8:	4b2e      	ldr	r3, [pc, #184]	; (8002ca4 <SystemClock_Config+0x100>)
 8002bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf0:	607b      	str	r3, [r7, #4]
 8002bf2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	603b      	str	r3, [r7, #0]
 8002bf8:	4b2b      	ldr	r3, [pc, #172]	; (8002ca8 <SystemClock_Config+0x104>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002c00:	4a29      	ldr	r2, [pc, #164]	; (8002ca8 <SystemClock_Config+0x104>)
 8002c02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c06:	6013      	str	r3, [r2, #0]
 8002c08:	4b27      	ldr	r3, [pc, #156]	; (8002ca8 <SystemClock_Config+0x104>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002c10:	603b      	str	r3, [r7, #0]
 8002c12:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8002c14:	230a      	movs	r3, #10
 8002c16:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002c1c:	2310      	movs	r3, #16
 8002c1e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002c20:	2301      	movs	r3, #1
 8002c22:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c24:	2302      	movs	r3, #2
 8002c26:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002c2c:	2308      	movs	r3, #8
 8002c2e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 72;
 8002c30:	2348      	movs	r3, #72	; 0x48
 8002c32:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002c34:	2302      	movs	r3, #2
 8002c36:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002c38:	2307      	movs	r3, #7
 8002c3a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c3c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002c40:	4618      	mov	r0, r3
 8002c42:	f008 fb49 	bl	800b2d8 <HAL_RCC_OscConfig>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d001      	beq.n	8002c50 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8002c4c:	f000 fa34 	bl	80030b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c50:	230f      	movs	r3, #15
 8002c52:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c54:	2302      	movs	r3, #2
 8002c56:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002c5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c60:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002c62:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002c66:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002c68:	f107 031c 	add.w	r3, r7, #28
 8002c6c:	2102      	movs	r1, #2
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f008 fda2 	bl	800b7b8 <HAL_RCC_ClockConfig>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <SystemClock_Config+0xda>
  {
    Error_Handler();
 8002c7a:	f000 fa1d 	bl	80030b8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002c7e:	2302      	movs	r3, #2
 8002c80:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002c82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c86:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c88:	f107 0308 	add.w	r3, r7, #8
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f008 ff85 	bl	800bb9c <HAL_RCCEx_PeriphCLKConfig>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d001      	beq.n	8002c9c <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8002c98:	f000 fa0e 	bl	80030b8 <Error_Handler>
  }
}
 8002c9c:	bf00      	nop
 8002c9e:	3760      	adds	r7, #96	; 0x60
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	40023800 	.word	0x40023800
 8002ca8:	40007000 	.word	0x40007000

08002cac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002cb2:	463b      	mov	r3, r7
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	601a      	str	r2, [r3, #0]
 8002cb8:	605a      	str	r2, [r3, #4]
 8002cba:	609a      	str	r2, [r3, #8]
 8002cbc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8002cbe:	4b28      	ldr	r3, [pc, #160]	; (8002d60 <MX_ADC1_Init+0xb4>)
 8002cc0:	4a28      	ldr	r2, [pc, #160]	; (8002d64 <MX_ADC1_Init+0xb8>)
 8002cc2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002cc4:	4b26      	ldr	r3, [pc, #152]	; (8002d60 <MX_ADC1_Init+0xb4>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002cca:	4b25      	ldr	r3, [pc, #148]	; (8002d60 <MX_ADC1_Init+0xb4>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002cd0:	4b23      	ldr	r3, [pc, #140]	; (8002d60 <MX_ADC1_Init+0xb4>)
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002cd6:	4b22      	ldr	r3, [pc, #136]	; (8002d60 <MX_ADC1_Init+0xb4>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002cdc:	4b20      	ldr	r3, [pc, #128]	; (8002d60 <MX_ADC1_Init+0xb4>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002ce4:	4b1e      	ldr	r3, [pc, #120]	; (8002d60 <MX_ADC1_Init+0xb4>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002cea:	4b1d      	ldr	r3, [pc, #116]	; (8002d60 <MX_ADC1_Init+0xb4>)
 8002cec:	4a1e      	ldr	r2, [pc, #120]	; (8002d68 <MX_ADC1_Init+0xbc>)
 8002cee:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002cf0:	4b1b      	ldr	r3, [pc, #108]	; (8002d60 <MX_ADC1_Init+0xb4>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8002cf6:	4b1a      	ldr	r3, [pc, #104]	; (8002d60 <MX_ADC1_Init+0xb4>)
 8002cf8:	2202      	movs	r2, #2
 8002cfa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002cfc:	4b18      	ldr	r3, [pc, #96]	; (8002d60 <MX_ADC1_Init+0xb4>)
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002d04:	4b16      	ldr	r3, [pc, #88]	; (8002d60 <MX_ADC1_Init+0xb4>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002d0a:	4815      	ldr	r0, [pc, #84]	; (8002d60 <MX_ADC1_Init+0xb4>)
 8002d0c:	f006 f818 	bl	8008d40 <HAL_ADC_Init>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d001      	beq.n	8002d1a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8002d16:	f000 f9cf 	bl	80030b8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002d1a:	230a      	movs	r3, #10
 8002d1c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8002d22:	2301      	movs	r3, #1
 8002d24:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d26:	463b      	mov	r3, r7
 8002d28:	4619      	mov	r1, r3
 8002d2a:	480d      	ldr	r0, [pc, #52]	; (8002d60 <MX_ADC1_Init+0xb4>)
 8002d2c:	f006 f9aa 	bl	8009084 <HAL_ADC_ConfigChannel>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8002d36:	f000 f9bf 	bl	80030b8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8002d3a:	230b      	movs	r3, #11
 8002d3c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002d3e:	2302      	movs	r3, #2
 8002d40:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d42:	463b      	mov	r3, r7
 8002d44:	4619      	mov	r1, r3
 8002d46:	4806      	ldr	r0, [pc, #24]	; (8002d60 <MX_ADC1_Init+0xb4>)
 8002d48:	f006 f99c 	bl	8009084 <HAL_ADC_ConfigChannel>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d001      	beq.n	8002d56 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8002d52:	f000 f9b1 	bl	80030b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002d56:	bf00      	nop
 8002d58:	3710      	adds	r7, #16
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	2000282c 	.word	0x2000282c
 8002d64:	40012000 	.word	0x40012000
 8002d68:	0f000001 	.word	0x0f000001

08002d6c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002d70:	4b06      	ldr	r3, [pc, #24]	; (8002d8c <MX_CRC_Init+0x20>)
 8002d72:	4a07      	ldr	r2, [pc, #28]	; (8002d90 <MX_CRC_Init+0x24>)
 8002d74:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002d76:	4805      	ldr	r0, [pc, #20]	; (8002d8c <MX_CRC_Init+0x20>)
 8002d78:	f006 fcbd 	bl	80096f6 <HAL_CRC_Init>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8002d82:	f000 f999 	bl	80030b8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8002d86:	bf00      	nop
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	200027e4 	.word	0x200027e4
 8002d90:	40023000 	.word	0x40023000

08002d94 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b086      	sub	sp, #24
 8002d98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002d9a:	1d3b      	adds	r3, r7, #4
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	601a      	str	r2, [r3, #0]
 8002da0:	605a      	str	r2, [r3, #4]
 8002da2:	609a      	str	r2, [r3, #8]
 8002da4:	60da      	str	r2, [r3, #12]
 8002da6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002da8:	2300      	movs	r3, #0
 8002daa:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8002dac:	4b24      	ldr	r3, [pc, #144]	; (8002e40 <MX_RTC_Init+0xac>)
 8002dae:	4a25      	ldr	r2, [pc, #148]	; (8002e44 <MX_RTC_Init+0xb0>)
 8002db0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002db2:	4b23      	ldr	r3, [pc, #140]	; (8002e40 <MX_RTC_Init+0xac>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002db8:	4b21      	ldr	r3, [pc, #132]	; (8002e40 <MX_RTC_Init+0xac>)
 8002dba:	227f      	movs	r2, #127	; 0x7f
 8002dbc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002dbe:	4b20      	ldr	r3, [pc, #128]	; (8002e40 <MX_RTC_Init+0xac>)
 8002dc0:	22ff      	movs	r2, #255	; 0xff
 8002dc2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002dc4:	4b1e      	ldr	r3, [pc, #120]	; (8002e40 <MX_RTC_Init+0xac>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002dca:	4b1d      	ldr	r3, [pc, #116]	; (8002e40 <MX_RTC_Init+0xac>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002dd0:	4b1b      	ldr	r3, [pc, #108]	; (8002e40 <MX_RTC_Init+0xac>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002dd6:	481a      	ldr	r0, [pc, #104]	; (8002e40 <MX_RTC_Init+0xac>)
 8002dd8:	f008 ffce 	bl	800bd78 <HAL_RTC_Init>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8002de2:	f000 f969 	bl	80030b8 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 8002de6:	2300      	movs	r3, #0
 8002de8:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8002dea:	2300      	movs	r3, #0
 8002dec:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8002dee:	2300      	movs	r3, #0
 8002df0:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002df2:	2300      	movs	r3, #0
 8002df4:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002df6:	2300      	movs	r3, #0
 8002df8:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002dfa:	1d3b      	adds	r3, r7, #4
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	4619      	mov	r1, r3
 8002e00:	480f      	ldr	r0, [pc, #60]	; (8002e40 <MX_RTC_Init+0xac>)
 8002e02:	f009 f84a 	bl	800be9a <HAL_RTC_SetTime>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d001      	beq.n	8002e10 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8002e0c:	f000 f954 	bl	80030b8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002e10:	2301      	movs	r3, #1
 8002e12:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002e14:	2301      	movs	r3, #1
 8002e16:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002e20:	463b      	mov	r3, r7
 8002e22:	2201      	movs	r2, #1
 8002e24:	4619      	mov	r1, r3
 8002e26:	4806      	ldr	r0, [pc, #24]	; (8002e40 <MX_RTC_Init+0xac>)
 8002e28:	f009 f952 	bl	800c0d0 <HAL_RTC_SetDate>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8002e32:	f000 f941 	bl	80030b8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002e36:	bf00      	nop
 8002e38:	3718      	adds	r7, #24
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	200028d4 	.word	0x200028d4
 8002e44:	40002800 	.word	0x40002800

08002e48 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b086      	sub	sp, #24
 8002e4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e4e:	f107 0308 	add.w	r3, r7, #8
 8002e52:	2200      	movs	r2, #0
 8002e54:	601a      	str	r2, [r3, #0]
 8002e56:	605a      	str	r2, [r3, #4]
 8002e58:	609a      	str	r2, [r3, #8]
 8002e5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e5c:	463b      	mov	r3, r7
 8002e5e:	2200      	movs	r2, #0
 8002e60:	601a      	str	r2, [r3, #0]
 8002e62:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002e64:	4b1d      	ldr	r3, [pc, #116]	; (8002edc <MX_TIM2_Init+0x94>)
 8002e66:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002e6a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200;
 8002e6c:	4b1b      	ldr	r3, [pc, #108]	; (8002edc <MX_TIM2_Init+0x94>)
 8002e6e:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8002e72:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e74:	4b19      	ldr	r3, [pc, #100]	; (8002edc <MX_TIM2_Init+0x94>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8002e7a:	4b18      	ldr	r3, [pc, #96]	; (8002edc <MX_TIM2_Init+0x94>)
 8002e7c:	2264      	movs	r2, #100	; 0x64
 8002e7e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e80:	4b16      	ldr	r3, [pc, #88]	; (8002edc <MX_TIM2_Init+0x94>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e86:	4b15      	ldr	r3, [pc, #84]	; (8002edc <MX_TIM2_Init+0x94>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002e8c:	4813      	ldr	r0, [pc, #76]	; (8002edc <MX_TIM2_Init+0x94>)
 8002e8e:	f009 fd6f 	bl	800c970 <HAL_TIM_Base_Init>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d001      	beq.n	8002e9c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002e98:	f000 f90e 	bl	80030b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ea0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002ea2:	f107 0308 	add.w	r3, r7, #8
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	480c      	ldr	r0, [pc, #48]	; (8002edc <MX_TIM2_Init+0x94>)
 8002eaa:	f009 fd8c 	bl	800c9c6 <HAL_TIM_ConfigClockSource>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d001      	beq.n	8002eb8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002eb4:	f000 f900 	bl	80030b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002eb8:	2320      	movs	r3, #32
 8002eba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002ec0:	463b      	mov	r3, r7
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	4805      	ldr	r0, [pc, #20]	; (8002edc <MX_TIM2_Init+0x94>)
 8002ec6:	f009 ff4f 	bl	800cd68 <HAL_TIMEx_MasterConfigSynchronization>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d001      	beq.n	8002ed4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002ed0:	f000 f8f2 	bl	80030b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002ed4:	bf00      	nop
 8002ed6:	3718      	adds	r7, #24
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	200028f4 	.word	0x200028f4

08002ee0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM3_Init(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b086      	sub	sp, #24
 8002ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ee6:	f107 0308 	add.w	r3, r7, #8
 8002eea:	2200      	movs	r2, #0
 8002eec:	601a      	str	r2, [r3, #0]
 8002eee:	605a      	str	r2, [r3, #4]
 8002ef0:	609a      	str	r2, [r3, #8]
 8002ef2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ef4:	463b      	mov	r3, r7
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	601a      	str	r2, [r3, #0]
 8002efa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002efc:	4b1c      	ldr	r3, [pc, #112]	; (8002f70 <MX_TIM3_Init+0x90>)
 8002efe:	4a1d      	ldr	r2, [pc, #116]	; (8002f74 <MX_TIM3_Init+0x94>)
 8002f00:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002f02:	4b1b      	ldr	r3, [pc, #108]	; (8002f70 <MX_TIM3_Init+0x90>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f08:	4b19      	ldr	r3, [pc, #100]	; (8002f70 <MX_TIM3_Init+0x90>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8002f0e:	4b18      	ldr	r3, [pc, #96]	; (8002f70 <MX_TIM3_Init+0x90>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f14:	4b16      	ldr	r3, [pc, #88]	; (8002f70 <MX_TIM3_Init+0x90>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f1a:	4b15      	ldr	r3, [pc, #84]	; (8002f70 <MX_TIM3_Init+0x90>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002f20:	4813      	ldr	r0, [pc, #76]	; (8002f70 <MX_TIM3_Init+0x90>)
 8002f22:	f009 fd25 	bl	800c970 <HAL_TIM_Base_Init>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d001      	beq.n	8002f30 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8002f2c:	f000 f8c4 	bl	80030b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f34:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002f36:	f107 0308 	add.w	r3, r7, #8
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	480c      	ldr	r0, [pc, #48]	; (8002f70 <MX_TIM3_Init+0x90>)
 8002f3e:	f009 fd42 	bl	800c9c6 <HAL_TIM_ConfigClockSource>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d001      	beq.n	8002f4c <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8002f48:	f000 f8b6 	bl	80030b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f50:	2300      	movs	r3, #0
 8002f52:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002f54:	463b      	mov	r3, r7
 8002f56:	4619      	mov	r1, r3
 8002f58:	4805      	ldr	r0, [pc, #20]	; (8002f70 <MX_TIM3_Init+0x90>)
 8002f5a:	f009 ff05 	bl	800cd68 <HAL_TIMEx_MasterConfigSynchronization>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d001      	beq.n	8002f68 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8002f64:	f000 f8a8 	bl	80030b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002f68:	bf00      	nop
 8002f6a:	3718      	adds	r7, #24
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	200027ec 	.word	0x200027ec
 8002f74:	40000400 	.word	0x40000400

08002f78 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002f7e:	2300      	movs	r3, #0
 8002f80:	607b      	str	r3, [r7, #4]
 8002f82:	4b0c      	ldr	r3, [pc, #48]	; (8002fb4 <MX_DMA_Init+0x3c>)
 8002f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f86:	4a0b      	ldr	r2, [pc, #44]	; (8002fb4 <MX_DMA_Init+0x3c>)
 8002f88:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f8e:	4b09      	ldr	r3, [pc, #36]	; (8002fb4 <MX_DMA_Init+0x3c>)
 8002f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f96:	607b      	str	r3, [r7, #4]
 8002f98:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	2100      	movs	r1, #0
 8002f9e:	2038      	movs	r0, #56	; 0x38
 8002fa0:	f006 fb73 	bl	800968a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002fa4:	2038      	movs	r0, #56	; 0x38
 8002fa6:	f006 fb8c 	bl	80096c2 <HAL_NVIC_EnableIRQ>

}
 8002faa:	bf00      	nop
 8002fac:	3708      	adds	r7, #8
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	40023800 	.word	0x40023800

08002fb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b08a      	sub	sp, #40	; 0x28
 8002fbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fbe:	f107 0314 	add.w	r3, r7, #20
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	601a      	str	r2, [r3, #0]
 8002fc6:	605a      	str	r2, [r3, #4]
 8002fc8:	609a      	str	r2, [r3, #8]
 8002fca:	60da      	str	r2, [r3, #12]
 8002fcc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fce:	2300      	movs	r3, #0
 8002fd0:	613b      	str	r3, [r7, #16]
 8002fd2:	4b34      	ldr	r3, [pc, #208]	; (80030a4 <MX_GPIO_Init+0xec>)
 8002fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd6:	4a33      	ldr	r2, [pc, #204]	; (80030a4 <MX_GPIO_Init+0xec>)
 8002fd8:	f043 0304 	orr.w	r3, r3, #4
 8002fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8002fde:	4b31      	ldr	r3, [pc, #196]	; (80030a4 <MX_GPIO_Init+0xec>)
 8002fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe2:	f003 0304 	and.w	r3, r3, #4
 8002fe6:	613b      	str	r3, [r7, #16]
 8002fe8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002fea:	2300      	movs	r3, #0
 8002fec:	60fb      	str	r3, [r7, #12]
 8002fee:	4b2d      	ldr	r3, [pc, #180]	; (80030a4 <MX_GPIO_Init+0xec>)
 8002ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff2:	4a2c      	ldr	r2, [pc, #176]	; (80030a4 <MX_GPIO_Init+0xec>)
 8002ff4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8002ffa:	4b2a      	ldr	r3, [pc, #168]	; (80030a4 <MX_GPIO_Init+0xec>)
 8002ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003002:	60fb      	str	r3, [r7, #12]
 8003004:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003006:	2300      	movs	r3, #0
 8003008:	60bb      	str	r3, [r7, #8]
 800300a:	4b26      	ldr	r3, [pc, #152]	; (80030a4 <MX_GPIO_Init+0xec>)
 800300c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300e:	4a25      	ldr	r2, [pc, #148]	; (80030a4 <MX_GPIO_Init+0xec>)
 8003010:	f043 0301 	orr.w	r3, r3, #1
 8003014:	6313      	str	r3, [r2, #48]	; 0x30
 8003016:	4b23      	ldr	r3, [pc, #140]	; (80030a4 <MX_GPIO_Init+0xec>)
 8003018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301a:	f003 0301 	and.w	r3, r3, #1
 800301e:	60bb      	str	r3, [r7, #8]
 8003020:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003022:	2300      	movs	r3, #0
 8003024:	607b      	str	r3, [r7, #4]
 8003026:	4b1f      	ldr	r3, [pc, #124]	; (80030a4 <MX_GPIO_Init+0xec>)
 8003028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302a:	4a1e      	ldr	r2, [pc, #120]	; (80030a4 <MX_GPIO_Init+0xec>)
 800302c:	f043 0302 	orr.w	r3, r3, #2
 8003030:	6313      	str	r3, [r2, #48]	; 0x30
 8003032:	4b1c      	ldr	r3, [pc, #112]	; (80030a4 <MX_GPIO_Init+0xec>)
 8003034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	607b      	str	r3, [r7, #4]
 800303c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 800303e:	2200      	movs	r2, #0
 8003040:	f44f 7191 	mov.w	r1, #290	; 0x122
 8003044:	4818      	ldr	r0, [pc, #96]	; (80030a8 <MX_GPIO_Init+0xf0>)
 8003046:	f007 f905 	bl	800a254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800304a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800304e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003050:	4b16      	ldr	r3, [pc, #88]	; (80030ac <MX_GPIO_Init+0xf4>)
 8003052:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003054:	2300      	movs	r3, #0
 8003056:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003058:	f107 0314 	add.w	r3, r7, #20
 800305c:	4619      	mov	r1, r3
 800305e:	4814      	ldr	r0, [pc, #80]	; (80030b0 <MX_GPIO_Init+0xf8>)
 8003060:	f006 fe7c 	bl	8009d5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003064:	2301      	movs	r3, #1
 8003066:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003068:	4b12      	ldr	r3, [pc, #72]	; (80030b4 <MX_GPIO_Init+0xfc>)
 800306a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800306c:	2300      	movs	r3, #0
 800306e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003070:	f107 0314 	add.w	r3, r7, #20
 8003074:	4619      	mov	r1, r3
 8003076:	480c      	ldr	r0, [pc, #48]	; (80030a8 <MX_GPIO_Init+0xf0>)
 8003078:	f006 fe70 	bl	8009d5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 LD2_Pin PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|LD2_Pin|GPIO_PIN_8;
 800307c:	f44f 7391 	mov.w	r3, #290	; 0x122
 8003080:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003082:	2301      	movs	r3, #1
 8003084:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003086:	2300      	movs	r3, #0
 8003088:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800308a:	2300      	movs	r3, #0
 800308c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800308e:	f107 0314 	add.w	r3, r7, #20
 8003092:	4619      	mov	r1, r3
 8003094:	4804      	ldr	r0, [pc, #16]	; (80030a8 <MX_GPIO_Init+0xf0>)
 8003096:	f006 fe61 	bl	8009d5c <HAL_GPIO_Init>

}
 800309a:	bf00      	nop
 800309c:	3728      	adds	r7, #40	; 0x28
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	40023800 	.word	0x40023800
 80030a8:	40020000 	.word	0x40020000
 80030ac:	10210000 	.word	0x10210000
 80030b0:	40020800 	.word	0x40020800
 80030b4:	10110000 	.word	0x10110000

080030b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80030b8:	b480      	push	{r7}
 80030ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80030bc:	bf00      	nop
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
	...

080030c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030ce:	2300      	movs	r3, #0
 80030d0:	607b      	str	r3, [r7, #4]
 80030d2:	4b10      	ldr	r3, [pc, #64]	; (8003114 <HAL_MspInit+0x4c>)
 80030d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d6:	4a0f      	ldr	r2, [pc, #60]	; (8003114 <HAL_MspInit+0x4c>)
 80030d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030dc:	6453      	str	r3, [r2, #68]	; 0x44
 80030de:	4b0d      	ldr	r3, [pc, #52]	; (8003114 <HAL_MspInit+0x4c>)
 80030e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030e6:	607b      	str	r3, [r7, #4]
 80030e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030ea:	2300      	movs	r3, #0
 80030ec:	603b      	str	r3, [r7, #0]
 80030ee:	4b09      	ldr	r3, [pc, #36]	; (8003114 <HAL_MspInit+0x4c>)
 80030f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f2:	4a08      	ldr	r2, [pc, #32]	; (8003114 <HAL_MspInit+0x4c>)
 80030f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030f8:	6413      	str	r3, [r2, #64]	; 0x40
 80030fa:	4b06      	ldr	r3, [pc, #24]	; (8003114 <HAL_MspInit+0x4c>)
 80030fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003102:	603b      	str	r3, [r7, #0]
 8003104:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003106:	2007      	movs	r0, #7
 8003108:	f006 fab4 	bl	8009674 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800310c:	bf00      	nop
 800310e:	3708      	adds	r7, #8
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	40023800 	.word	0x40023800

08003118 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b08a      	sub	sp, #40	; 0x28
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003120:	f107 0314 	add.w	r3, r7, #20
 8003124:	2200      	movs	r2, #0
 8003126:	601a      	str	r2, [r3, #0]
 8003128:	605a      	str	r2, [r3, #4]
 800312a:	609a      	str	r2, [r3, #8]
 800312c:	60da      	str	r2, [r3, #12]
 800312e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a33      	ldr	r2, [pc, #204]	; (8003204 <HAL_ADC_MspInit+0xec>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d15f      	bne.n	80031fa <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800313a:	2300      	movs	r3, #0
 800313c:	613b      	str	r3, [r7, #16]
 800313e:	4b32      	ldr	r3, [pc, #200]	; (8003208 <HAL_ADC_MspInit+0xf0>)
 8003140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003142:	4a31      	ldr	r2, [pc, #196]	; (8003208 <HAL_ADC_MspInit+0xf0>)
 8003144:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003148:	6453      	str	r3, [r2, #68]	; 0x44
 800314a:	4b2f      	ldr	r3, [pc, #188]	; (8003208 <HAL_ADC_MspInit+0xf0>)
 800314c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800314e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003152:	613b      	str	r3, [r7, #16]
 8003154:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003156:	2300      	movs	r3, #0
 8003158:	60fb      	str	r3, [r7, #12]
 800315a:	4b2b      	ldr	r3, [pc, #172]	; (8003208 <HAL_ADC_MspInit+0xf0>)
 800315c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315e:	4a2a      	ldr	r2, [pc, #168]	; (8003208 <HAL_ADC_MspInit+0xf0>)
 8003160:	f043 0304 	orr.w	r3, r3, #4
 8003164:	6313      	str	r3, [r2, #48]	; 0x30
 8003166:	4b28      	ldr	r3, [pc, #160]	; (8003208 <HAL_ADC_MspInit+0xf0>)
 8003168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316a:	f003 0304 	and.w	r3, r3, #4
 800316e:	60fb      	str	r3, [r7, #12]
 8003170:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003172:	2303      	movs	r3, #3
 8003174:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003176:	2303      	movs	r3, #3
 8003178:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800317a:	2300      	movs	r3, #0
 800317c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800317e:	f107 0314 	add.w	r3, r7, #20
 8003182:	4619      	mov	r1, r3
 8003184:	4821      	ldr	r0, [pc, #132]	; (800320c <HAL_ADC_MspInit+0xf4>)
 8003186:	f006 fde9 	bl	8009d5c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800318a:	4b21      	ldr	r3, [pc, #132]	; (8003210 <HAL_ADC_MspInit+0xf8>)
 800318c:	4a21      	ldr	r2, [pc, #132]	; (8003214 <HAL_ADC_MspInit+0xfc>)
 800318e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003190:	4b1f      	ldr	r3, [pc, #124]	; (8003210 <HAL_ADC_MspInit+0xf8>)
 8003192:	2200      	movs	r2, #0
 8003194:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003196:	4b1e      	ldr	r3, [pc, #120]	; (8003210 <HAL_ADC_MspInit+0xf8>)
 8003198:	2200      	movs	r2, #0
 800319a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800319c:	4b1c      	ldr	r3, [pc, #112]	; (8003210 <HAL_ADC_MspInit+0xf8>)
 800319e:	2200      	movs	r2, #0
 80031a0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80031a2:	4b1b      	ldr	r3, [pc, #108]	; (8003210 <HAL_ADC_MspInit+0xf8>)
 80031a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031a8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80031aa:	4b19      	ldr	r3, [pc, #100]	; (8003210 <HAL_ADC_MspInit+0xf8>)
 80031ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80031b0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80031b2:	4b17      	ldr	r3, [pc, #92]	; (8003210 <HAL_ADC_MspInit+0xf8>)
 80031b4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80031b8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80031ba:	4b15      	ldr	r3, [pc, #84]	; (8003210 <HAL_ADC_MspInit+0xf8>)
 80031bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80031c0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80031c2:	4b13      	ldr	r3, [pc, #76]	; (8003210 <HAL_ADC_MspInit+0xf8>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80031c8:	4b11      	ldr	r3, [pc, #68]	; (8003210 <HAL_ADC_MspInit+0xf8>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80031ce:	4810      	ldr	r0, [pc, #64]	; (8003210 <HAL_ADC_MspInit+0xf8>)
 80031d0:	f006 faae 	bl	8009730 <HAL_DMA_Init>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d001      	beq.n	80031de <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80031da:	f7ff ff6d 	bl	80030b8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a0b      	ldr	r2, [pc, #44]	; (8003210 <HAL_ADC_MspInit+0xf8>)
 80031e2:	639a      	str	r2, [r3, #56]	; 0x38
 80031e4:	4a0a      	ldr	r2, [pc, #40]	; (8003210 <HAL_ADC_MspInit+0xf8>)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80031ea:	2200      	movs	r2, #0
 80031ec:	2100      	movs	r1, #0
 80031ee:	2012      	movs	r0, #18
 80031f0:	f006 fa4b 	bl	800968a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80031f4:	2012      	movs	r0, #18
 80031f6:	f006 fa64 	bl	80096c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80031fa:	bf00      	nop
 80031fc:	3728      	adds	r7, #40	; 0x28
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	40012000 	.word	0x40012000
 8003208:	40023800 	.word	0x40023800
 800320c:	40020800 	.word	0x40020800
 8003210:	20002874 	.word	0x20002874
 8003214:	40026410 	.word	0x40026410

08003218 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8003218:	b480      	push	{r7}
 800321a:	b085      	sub	sp, #20
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a0b      	ldr	r2, [pc, #44]	; (8003254 <HAL_CRC_MspInit+0x3c>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d10d      	bne.n	8003246 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800322a:	2300      	movs	r3, #0
 800322c:	60fb      	str	r3, [r7, #12]
 800322e:	4b0a      	ldr	r3, [pc, #40]	; (8003258 <HAL_CRC_MspInit+0x40>)
 8003230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003232:	4a09      	ldr	r2, [pc, #36]	; (8003258 <HAL_CRC_MspInit+0x40>)
 8003234:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003238:	6313      	str	r3, [r2, #48]	; 0x30
 800323a:	4b07      	ldr	r3, [pc, #28]	; (8003258 <HAL_CRC_MspInit+0x40>)
 800323c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003242:	60fb      	str	r3, [r7, #12]
 8003244:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8003246:	bf00      	nop
 8003248:	3714      	adds	r7, #20
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	40023000 	.word	0x40023000
 8003258:	40023800 	.word	0x40023800

0800325c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a05      	ldr	r2, [pc, #20]	; (8003280 <HAL_RTC_MspInit+0x24>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d102      	bne.n	8003274 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800326e:	4b05      	ldr	r3, [pc, #20]	; (8003284 <HAL_RTC_MspInit+0x28>)
 8003270:	2201      	movs	r2, #1
 8003272:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003274:	bf00      	nop
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr
 8003280:	40002800 	.word	0x40002800
 8003284:	42470e3c 	.word	0x42470e3c

08003288 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003288:	b480      	push	{r7}
 800328a:	b085      	sub	sp, #20
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003298:	d10e      	bne.n	80032b8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800329a:	2300      	movs	r3, #0
 800329c:	60fb      	str	r3, [r7, #12]
 800329e:	4b13      	ldr	r3, [pc, #76]	; (80032ec <HAL_TIM_Base_MspInit+0x64>)
 80032a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a2:	4a12      	ldr	r2, [pc, #72]	; (80032ec <HAL_TIM_Base_MspInit+0x64>)
 80032a4:	f043 0301 	orr.w	r3, r3, #1
 80032a8:	6413      	str	r3, [r2, #64]	; 0x40
 80032aa:	4b10      	ldr	r3, [pc, #64]	; (80032ec <HAL_TIM_Base_MspInit+0x64>)
 80032ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	60fb      	str	r3, [r7, #12]
 80032b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80032b6:	e012      	b.n	80032de <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a0c      	ldr	r2, [pc, #48]	; (80032f0 <HAL_TIM_Base_MspInit+0x68>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d10d      	bne.n	80032de <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80032c2:	2300      	movs	r3, #0
 80032c4:	60bb      	str	r3, [r7, #8]
 80032c6:	4b09      	ldr	r3, [pc, #36]	; (80032ec <HAL_TIM_Base_MspInit+0x64>)
 80032c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ca:	4a08      	ldr	r2, [pc, #32]	; (80032ec <HAL_TIM_Base_MspInit+0x64>)
 80032cc:	f043 0302 	orr.w	r3, r3, #2
 80032d0:	6413      	str	r3, [r2, #64]	; 0x40
 80032d2:	4b06      	ldr	r3, [pc, #24]	; (80032ec <HAL_TIM_Base_MspInit+0x64>)
 80032d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d6:	f003 0302 	and.w	r3, r3, #2
 80032da:	60bb      	str	r3, [r7, #8]
 80032dc:	68bb      	ldr	r3, [r7, #8]
}
 80032de:	bf00      	nop
 80032e0:	3714      	adds	r7, #20
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	40023800 	.word	0x40023800
 80032f0:	40000400 	.word	0x40000400

080032f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032f4:	b480      	push	{r7}
 80032f6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80032f8:	bf00      	nop
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr

08003302 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003302:	b480      	push	{r7}
 8003304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003306:	e7fe      	b.n	8003306 <HardFault_Handler+0x4>

08003308 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003308:	b480      	push	{r7}
 800330a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800330c:	e7fe      	b.n	800330c <MemManage_Handler+0x4>

0800330e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800330e:	b480      	push	{r7}
 8003310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003312:	e7fe      	b.n	8003312 <BusFault_Handler+0x4>

08003314 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003314:	b480      	push	{r7}
 8003316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003318:	e7fe      	b.n	8003318 <UsageFault_Handler+0x4>

0800331a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800331a:	b480      	push	{r7}
 800331c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800331e:	bf00      	nop
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003328:	b480      	push	{r7}
 800332a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800332c:	bf00      	nop
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr

08003336 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003336:	b480      	push	{r7}
 8003338:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800333a:	bf00      	nop
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003348:	f005 fcb8 	bl	8008cbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800334c:	bf00      	nop
 800334e:	bd80      	pop	{r7, pc}

08003350 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003354:	4802      	ldr	r0, [pc, #8]	; (8003360 <ADC_IRQHandler+0x10>)
 8003356:	f005 fd36 	bl	8008dc6 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800335a:	bf00      	nop
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	2000282c 	.word	0x2000282c

08003364 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003368:	4802      	ldr	r0, [pc, #8]	; (8003374 <DMA2_Stream0_IRQHandler+0x10>)
 800336a:	f006 fa8f 	bl	800988c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800336e:	bf00      	nop
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	20002874 	.word	0x20002874

08003378 <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL. 
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void) 
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800337e:	2300      	movs	r3, #0
 8003380:	607b      	str	r3, [r7, #4]
  
  hspi1.Instance  = SPI1;
 8003382:	4b12      	ldr	r3, [pc, #72]	; (80033cc <BSP_SPI1_Init+0x54>)
 8003384:	4a12      	ldr	r2, [pc, #72]	; (80033d0 <BSP_SPI1_Init+0x58>)
 8003386:	601a      	str	r2, [r3, #0]
  
  if(SPI1InitCounter++ == 0)
 8003388:	4b12      	ldr	r3, [pc, #72]	; (80033d4 <BSP_SPI1_Init+0x5c>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	1c5a      	adds	r2, r3, #1
 800338e:	4911      	ldr	r1, [pc, #68]	; (80033d4 <BSP_SPI1_Init+0x5c>)
 8003390:	600a      	str	r2, [r1, #0]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d114      	bne.n	80033c0 <BSP_SPI1_Init+0x48>
  {    
	if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET) 
 8003396:	480d      	ldr	r0, [pc, #52]	; (80033cc <BSP_SPI1_Init+0x54>)
 8003398:	f009 fa30 	bl	800c7fc <HAL_SPI_GetState>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d10e      	bne.n	80033c0 <BSP_SPI1_Init+0x48>
	{ 
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
		/* Init the SPI Msp */
		SPI1_MspInit(&hspi1);
 80033a2:	480a      	ldr	r0, [pc, #40]	; (80033cc <BSP_SPI1_Init+0x54>)
 80033a4:	f000 f93a 	bl	800361c <SPI1_MspInit>
			{
				return BSP_ERROR_MSP_FAILURE;
			}
		}	
#endif   
		if(ret == BSP_ERROR_NONE)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d108      	bne.n	80033c0 <BSP_SPI1_Init+0x48>
		{
			/* Init the SPI */
			if (MX_SPI1_Init(&hspi1) != HAL_OK)
 80033ae:	4807      	ldr	r0, [pc, #28]	; (80033cc <BSP_SPI1_Init+0x54>)
 80033b0:	f000 f8f8 	bl	80035a4 <MX_SPI1_Init>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d002      	beq.n	80033c0 <BSP_SPI1_Init+0x48>
			{
				ret = BSP_ERROR_BUS_FAILURE;
 80033ba:	f06f 0307 	mvn.w	r3, #7
 80033be:	607b      	str	r3, [r7, #4]
			}
		}
	}
  }	

  return ret;
 80033c0:	687b      	ldr	r3, [r7, #4]
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3708      	adds	r7, #8
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	20002988 	.word	0x20002988
 80033d0:	40013000 	.word	0x40013000
 80033d4:	200022f0 	.word	0x200022f0

080033d8 <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b088      	sub	sp, #32
 80033dc:	af02      	add	r7, sp, #8
 80033de:	60f8      	str	r0, [r7, #12]
 80033e0:	60b9      	str	r1, [r7, #8]
 80033e2:	4613      	mov	r3, r2
 80033e4:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80033e6:	2300      	movs	r3, #0
 80033e8:	617b      	str	r3, [r7, #20]
  
  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 80033ea:	88fa      	ldrh	r2, [r7, #6]
 80033ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033f0:	9300      	str	r3, [sp, #0]
 80033f2:	4613      	mov	r3, r2
 80033f4:	68ba      	ldr	r2, [r7, #8]
 80033f6:	68f9      	ldr	r1, [r7, #12]
 80033f8:	4806      	ldr	r0, [pc, #24]	; (8003414 <BSP_SPI1_SendRecv+0x3c>)
 80033fa:	f009 f85d 	bl	800c4b8 <HAL_SPI_TransmitReceive>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d002      	beq.n	800340a <BSP_SPI1_SendRecv+0x32>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8003404:	f06f 0305 	mvn.w	r3, #5
 8003408:	617b      	str	r3, [r7, #20]
  }
  return ret;
 800340a:	697b      	ldr	r3, [r7, #20]
}
 800340c:	4618      	mov	r0, r3
 800340e:	3718      	adds	r7, #24
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}
 8003414:	20002988 	.word	0x20002988

08003418 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void) 
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 800341e:	2300      	movs	r3, #0
 8003420:	607b      	str	r3, [r7, #4]
  
  hi2c1.Instance  = I2C1;
 8003422:	4b13      	ldr	r3, [pc, #76]	; (8003470 <BSP_I2C1_Init+0x58>)
 8003424:	4a13      	ldr	r2, [pc, #76]	; (8003474 <BSP_I2C1_Init+0x5c>)
 8003426:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8003428:	4b13      	ldr	r3, [pc, #76]	; (8003478 <BSP_I2C1_Init+0x60>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	1c5a      	adds	r2, r3, #1
 800342e:	4912      	ldr	r1, [pc, #72]	; (8003478 <BSP_I2C1_Init+0x60>)
 8003430:	600a      	str	r2, [r1, #0]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d117      	bne.n	8003466 <BSP_I2C1_Init+0x4e>
  {     
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8003436:	480e      	ldr	r0, [pc, #56]	; (8003470 <BSP_I2C1_Init+0x58>)
 8003438:	f007 fbdc 	bl	800abf4 <HAL_I2C_GetState>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d111      	bne.n	8003466 <BSP_I2C1_Init+0x4e>
    {  
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8003442:	480b      	ldr	r0, [pc, #44]	; (8003470 <BSP_I2C1_Init+0x58>)
 8003444:	f000 f976 	bl	8003734 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d10b      	bne.n	8003466 <BSP_I2C1_Init+0x4e>
	  {
    	/* Init the I2C */
    	if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 800344e:	4808      	ldr	r0, [pc, #32]	; (8003470 <BSP_I2C1_Init+0x58>)
 8003450:	f000 f93c 	bl	80036cc <MX_I2C1_Init>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d003      	beq.n	8003462 <BSP_I2C1_Init+0x4a>
    	{
      	  ret = BSP_ERROR_BUS_FAILURE;
 800345a:	f06f 0307 	mvn.w	r3, #7
 800345e:	607b      	str	r3, [r7, #4]
 8003460:	e001      	b.n	8003466 <BSP_I2C1_Init+0x4e>
    	}
        else
        {
      	  ret = BSP_ERROR_NONE;
 8003462:	2300      	movs	r3, #0
 8003464:	607b      	str	r3, [r7, #4]
        }
      }	
    }
  }
  return ret;
 8003466:	687b      	ldr	r3, [r7, #4]
}
 8003468:	4618      	mov	r0, r3
 800346a:	3708      	adds	r7, #8
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	20002934 	.word	0x20002934
 8003474:	40005400 	.word	0x40005400
 8003478:	200022f4 	.word	0x200022f4

0800347c <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void) 
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8003482:	2300      	movs	r3, #0
 8003484:	607b      	str	r3, [r7, #4]
  
  if (I2C1InitCounter > 0)
 8003486:	4b0f      	ldr	r3, [pc, #60]	; (80034c4 <BSP_I2C1_DeInit+0x48>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d014      	beq.n	80034b8 <BSP_I2C1_DeInit+0x3c>
  {       
    if (--I2C1InitCounter == 0)
 800348e:	4b0d      	ldr	r3, [pc, #52]	; (80034c4 <BSP_I2C1_DeInit+0x48>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	3b01      	subs	r3, #1
 8003494:	4a0b      	ldr	r2, [pc, #44]	; (80034c4 <BSP_I2C1_DeInit+0x48>)
 8003496:	6013      	str	r3, [r2, #0]
 8003498:	4b0a      	ldr	r3, [pc, #40]	; (80034c4 <BSP_I2C1_DeInit+0x48>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d10b      	bne.n	80034b8 <BSP_I2C1_DeInit+0x3c>
    {    
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */ 
      I2C1_MspDeInit(&hi2c1);
 80034a0:	4809      	ldr	r0, [pc, #36]	; (80034c8 <BSP_I2C1_DeInit+0x4c>)
 80034a2:	f000 f981 	bl	80037a8 <I2C1_MspDeInit>
  #endif  
      /* DeInit the I2C */ 
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 80034a6:	4808      	ldr	r0, [pc, #32]	; (80034c8 <BSP_I2C1_DeInit+0x4c>)
 80034a8:	f007 f840 	bl	800a52c <HAL_I2C_DeInit>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d002      	beq.n	80034b8 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 80034b2:	f06f 0307 	mvn.w	r3, #7
 80034b6:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 80034b8:	687b      	ldr	r3, [r7, #4]
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3708      	adds	r7, #8
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	200022f4 	.word	0x200022f4
 80034c8:	20002934 	.word	0x20002934

080034cc <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b08a      	sub	sp, #40	; 0x28
 80034d0:	af04      	add	r7, sp, #16
 80034d2:	60ba      	str	r2, [r7, #8]
 80034d4:	461a      	mov	r2, r3
 80034d6:	4603      	mov	r3, r0
 80034d8:	81fb      	strh	r3, [r7, #14]
 80034da:	460b      	mov	r3, r1
 80034dc:	81bb      	strh	r3, [r7, #12]
 80034de:	4613      	mov	r3, r2
 80034e0:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;  
 80034e2:	2300      	movs	r3, #0
 80034e4:	617b      	str	r3, [r7, #20]
  
  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80034e6:	89ba      	ldrh	r2, [r7, #12]
 80034e8:	89f9      	ldrh	r1, [r7, #14]
 80034ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034ee:	9302      	str	r3, [sp, #8]
 80034f0:	88fb      	ldrh	r3, [r7, #6]
 80034f2:	9301      	str	r3, [sp, #4]
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	9300      	str	r3, [sp, #0]
 80034f8:	2301      	movs	r3, #1
 80034fa:	480c      	ldr	r0, [pc, #48]	; (800352c <BSP_I2C1_WriteReg+0x60>)
 80034fc:	f007 f85a 	bl	800a5b4 <HAL_I2C_Mem_Write>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d00c      	beq.n	8003520 <BSP_I2C1_WriteReg+0x54>
  {    
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8003506:	4809      	ldr	r0, [pc, #36]	; (800352c <BSP_I2C1_WriteReg+0x60>)
 8003508:	f007 fb82 	bl	800ac10 <HAL_I2C_GetError>
 800350c:	4603      	mov	r3, r0
 800350e:	2b04      	cmp	r3, #4
 8003510:	d103      	bne.n	800351a <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8003512:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8003516:	617b      	str	r3, [r7, #20]
 8003518:	e002      	b.n	8003520 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800351a:	f06f 0303 	mvn.w	r3, #3
 800351e:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8003520:	697b      	ldr	r3, [r7, #20]
}
 8003522:	4618      	mov	r0, r3
 8003524:	3718      	adds	r7, #24
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	20002934 	.word	0x20002934

08003530 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length) 
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b08a      	sub	sp, #40	; 0x28
 8003534:	af04      	add	r7, sp, #16
 8003536:	60ba      	str	r2, [r7, #8]
 8003538:	461a      	mov	r2, r3
 800353a:	4603      	mov	r3, r0
 800353c:	81fb      	strh	r3, [r7, #14]
 800353e:	460b      	mov	r3, r1
 8003540:	81bb      	strh	r3, [r7, #12]
 8003542:	4613      	mov	r3, r2
 8003544:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8003546:	2300      	movs	r3, #0
 8003548:	617b      	str	r3, [r7, #20]
  
  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 800354a:	89ba      	ldrh	r2, [r7, #12]
 800354c:	89f9      	ldrh	r1, [r7, #14]
 800354e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003552:	9302      	str	r3, [sp, #8]
 8003554:	88fb      	ldrh	r3, [r7, #6]
 8003556:	9301      	str	r3, [sp, #4]
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	9300      	str	r3, [sp, #0]
 800355c:	2301      	movs	r3, #1
 800355e:	480c      	ldr	r0, [pc, #48]	; (8003590 <BSP_I2C1_ReadReg+0x60>)
 8003560:	f007 f922 	bl	800a7a8 <HAL_I2C_Mem_Read>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00c      	beq.n	8003584 <BSP_I2C1_ReadReg+0x54>
  { 
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 800356a:	4809      	ldr	r0, [pc, #36]	; (8003590 <BSP_I2C1_ReadReg+0x60>)
 800356c:	f007 fb50 	bl	800ac10 <HAL_I2C_GetError>
 8003570:	4603      	mov	r3, r0
 8003572:	2b04      	cmp	r3, #4
 8003574:	d103      	bne.n	800357e <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8003576:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800357a:	617b      	str	r3, [r7, #20]
 800357c:	e002      	b.n	8003584 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800357e:	f06f 0303 	mvn.w	r3, #3
 8003582:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8003584:	697b      	ldr	r3, [r7, #20]
}
 8003586:	4618      	mov	r0, r3
 8003588:	3718      	adds	r7, #24
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	20002934 	.word	0x20002934

08003594 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8003594:	b580      	push	{r7, lr}
 8003596:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003598:	f005 fba4 	bl	8008ce4 <HAL_GetTick>
 800359c:	4603      	mov	r3, r0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	bd80      	pop	{r7, pc}
	...

080035a4 <MX_SPI1_Init>:

/* SPI1 init function */ 

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80035ac:	2300      	movs	r3, #0
 80035ae:	73fb      	strb	r3, [r7, #15]
  hspi->Instance = SPI1;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4a19      	ldr	r2, [pc, #100]	; (8003618 <MX_SPI1_Init+0x74>)
 80035b4:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80035bc:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035dc:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 10;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	220a      	movs	r2, #10
 80035fa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f008 feed 	bl	800c3dc <HAL_SPI_Init>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d001      	beq.n	800360c <MX_SPI1_Init+0x68>
  {
    ret = HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800360c:	7bfb      	ldrb	r3, [r7, #15]
}
 800360e:	4618      	mov	r0, r3
 8003610:	3710      	adds	r7, #16
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	40013000 	.word	0x40013000

0800361c <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b08a      	sub	sp, #40	; 0x28
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003624:	2300      	movs	r3, #0
 8003626:	613b      	str	r3, [r7, #16]
 8003628:	4b25      	ldr	r3, [pc, #148]	; (80036c0 <SPI1_MspInit+0xa4>)
 800362a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800362c:	4a24      	ldr	r2, [pc, #144]	; (80036c0 <SPI1_MspInit+0xa4>)
 800362e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003632:	6453      	str	r3, [r2, #68]	; 0x44
 8003634:	4b22      	ldr	r3, [pc, #136]	; (80036c0 <SPI1_MspInit+0xa4>)
 8003636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003638:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800363c:	613b      	str	r3, [r7, #16]
 800363e:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003640:	2300      	movs	r3, #0
 8003642:	60fb      	str	r3, [r7, #12]
 8003644:	4b1e      	ldr	r3, [pc, #120]	; (80036c0 <SPI1_MspInit+0xa4>)
 8003646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003648:	4a1d      	ldr	r2, [pc, #116]	; (80036c0 <SPI1_MspInit+0xa4>)
 800364a:	f043 0301 	orr.w	r3, r3, #1
 800364e:	6313      	str	r3, [r2, #48]	; 0x30
 8003650:	4b1b      	ldr	r3, [pc, #108]	; (80036c0 <SPI1_MspInit+0xa4>)
 8003652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003654:	f003 0301 	and.w	r3, r3, #1
 8003658:	60fb      	str	r3, [r7, #12]
 800365a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800365c:	2300      	movs	r3, #0
 800365e:	60bb      	str	r3, [r7, #8]
 8003660:	4b17      	ldr	r3, [pc, #92]	; (80036c0 <SPI1_MspInit+0xa4>)
 8003662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003664:	4a16      	ldr	r2, [pc, #88]	; (80036c0 <SPI1_MspInit+0xa4>)
 8003666:	f043 0302 	orr.w	r3, r3, #2
 800366a:	6313      	str	r3, [r2, #48]	; 0x30
 800366c:	4b14      	ldr	r3, [pc, #80]	; (80036c0 <SPI1_MspInit+0xa4>)
 800366e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003670:	f003 0302 	and.w	r3, r3, #2
 8003674:	60bb      	str	r3, [r7, #8]
 8003676:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003678:	23c0      	movs	r3, #192	; 0xc0
 800367a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800367c:	2302      	movs	r3, #2
 800367e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003680:	2300      	movs	r3, #0
 8003682:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003684:	2303      	movs	r3, #3
 8003686:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003688:	2305      	movs	r3, #5
 800368a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800368c:	f107 0314 	add.w	r3, r7, #20
 8003690:	4619      	mov	r1, r3
 8003692:	480c      	ldr	r0, [pc, #48]	; (80036c4 <SPI1_MspInit+0xa8>)
 8003694:	f006 fb62 	bl	8009d5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003698:	2308      	movs	r3, #8
 800369a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800369c:	2302      	movs	r3, #2
 800369e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a0:	2300      	movs	r3, #0
 80036a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036a4:	2303      	movs	r3, #3
 80036a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80036a8:	2305      	movs	r3, #5
 80036aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036ac:	f107 0314 	add.w	r3, r7, #20
 80036b0:	4619      	mov	r1, r3
 80036b2:	4805      	ldr	r0, [pc, #20]	; (80036c8 <SPI1_MspInit+0xac>)
 80036b4:	f006 fb52 	bl	8009d5c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 80036b8:	bf00      	nop
 80036ba:	3728      	adds	r7, #40	; 0x28
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	40023800 	.word	0x40023800
 80036c4:	40020000 	.word	0x40020000
 80036c8:	40020400 	.word	0x40020400

080036cc <MX_I2C1_Init>:
}

/* I2C1 init function */ 

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80036d4:	2300      	movs	r3, #0
 80036d6:	73fb      	strb	r3, [r7, #15]
  hi2c->Instance = I2C1;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	4a14      	ldr	r2, [pc, #80]	; (800372c <MX_I2C1_Init+0x60>)
 80036dc:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 100000;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a13      	ldr	r2, [pc, #76]	; (8003730 <MX_I2C1_Init+0x64>)
 80036e2:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80036f6:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f006 fdd3 	bl	800a2bc <HAL_I2C_Init>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d001      	beq.n	8003720 <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8003720:	7bfb      	ldrb	r3, [r7, #15]
}
 8003722:	4618      	mov	r0, r3
 8003724:	3710      	adds	r7, #16
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	40005400 	.word	0x40005400
 8003730:	000186a0 	.word	0x000186a0

08003734 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b08a      	sub	sp, #40	; 0x28
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800373c:	2300      	movs	r3, #0
 800373e:	613b      	str	r3, [r7, #16]
 8003740:	4b17      	ldr	r3, [pc, #92]	; (80037a0 <I2C1_MspInit+0x6c>)
 8003742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003744:	4a16      	ldr	r2, [pc, #88]	; (80037a0 <I2C1_MspInit+0x6c>)
 8003746:	f043 0302 	orr.w	r3, r3, #2
 800374a:	6313      	str	r3, [r2, #48]	; 0x30
 800374c:	4b14      	ldr	r3, [pc, #80]	; (80037a0 <I2C1_MspInit+0x6c>)
 800374e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003750:	f003 0302 	and.w	r3, r3, #2
 8003754:	613b      	str	r3, [r7, #16]
 8003756:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003758:	f44f 7340 	mov.w	r3, #768	; 0x300
 800375c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800375e:	2312      	movs	r3, #18
 8003760:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003762:	2301      	movs	r3, #1
 8003764:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003766:	2303      	movs	r3, #3
 8003768:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800376a:	2304      	movs	r3, #4
 800376c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800376e:	f107 0314 	add.w	r3, r7, #20
 8003772:	4619      	mov	r1, r3
 8003774:	480b      	ldr	r0, [pc, #44]	; (80037a4 <I2C1_MspInit+0x70>)
 8003776:	f006 faf1 	bl	8009d5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800377a:	2300      	movs	r3, #0
 800377c:	60fb      	str	r3, [r7, #12]
 800377e:	4b08      	ldr	r3, [pc, #32]	; (80037a0 <I2C1_MspInit+0x6c>)
 8003780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003782:	4a07      	ldr	r2, [pc, #28]	; (80037a0 <I2C1_MspInit+0x6c>)
 8003784:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003788:	6413      	str	r3, [r2, #64]	; 0x40
 800378a:	4b05      	ldr	r3, [pc, #20]	; (80037a0 <I2C1_MspInit+0x6c>)
 800378c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003792:	60fb      	str	r3, [r7, #12]
 8003794:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8003796:	bf00      	nop
 8003798:	3728      	adds	r7, #40	; 0x28
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	40023800 	.word	0x40023800
 80037a4:	40020400 	.word	0x40020400

080037a8 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80037b0:	4b07      	ldr	r3, [pc, #28]	; (80037d0 <I2C1_MspDeInit+0x28>)
 80037b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b4:	4a06      	ldr	r2, [pc, #24]	; (80037d0 <I2C1_MspDeInit+0x28>)
 80037b6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80037ba:	6413      	str	r3, [r2, #64]	; 0x40
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8|GPIO_PIN_9);
 80037bc:	f44f 7140 	mov.w	r1, #768	; 0x300
 80037c0:	4804      	ldr	r0, [pc, #16]	; (80037d4 <I2C1_MspDeInit+0x2c>)
 80037c2:	f006 fc4d 	bl	800a060 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 80037c6:	bf00      	nop
 80037c8:	3708      	adds	r7, #8
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	40023800 	.word	0x40023800
 80037d4:	40020400 	.word	0x40020400

080037d8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b086      	sub	sp, #24
 80037dc:	af00      	add	r7, sp, #0
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037e4:	2300      	movs	r3, #0
 80037e6:	617b      	str	r3, [r7, #20]
 80037e8:	e00a      	b.n	8003800 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80037ea:	f3af 8000 	nop.w
 80037ee:	4601      	mov	r1, r0
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	1c5a      	adds	r2, r3, #1
 80037f4:	60ba      	str	r2, [r7, #8]
 80037f6:	b2ca      	uxtb	r2, r1
 80037f8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	3301      	adds	r3, #1
 80037fe:	617b      	str	r3, [r7, #20]
 8003800:	697a      	ldr	r2, [r7, #20]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	429a      	cmp	r2, r3
 8003806:	dbf0      	blt.n	80037ea <_read+0x12>
	}

return len;
 8003808:	687b      	ldr	r3, [r7, #4]
}
 800380a:	4618      	mov	r0, r3
 800380c:	3718      	adds	r7, #24
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}

08003812 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003812:	b580      	push	{r7, lr}
 8003814:	b086      	sub	sp, #24
 8003816:	af00      	add	r7, sp, #0
 8003818:	60f8      	str	r0, [r7, #12]
 800381a:	60b9      	str	r1, [r7, #8]
 800381c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800381e:	2300      	movs	r3, #0
 8003820:	617b      	str	r3, [r7, #20]
 8003822:	e009      	b.n	8003838 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	1c5a      	adds	r2, r3, #1
 8003828:	60ba      	str	r2, [r7, #8]
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	4618      	mov	r0, r3
 800382e:	f005 f9a3 	bl	8008b78 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	3301      	adds	r3, #1
 8003836:	617b      	str	r3, [r7, #20]
 8003838:	697a      	ldr	r2, [r7, #20]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	429a      	cmp	r2, r3
 800383e:	dbf1      	blt.n	8003824 <_write+0x12>
	}
	return len;
 8003840:	687b      	ldr	r3, [r7, #4]
}
 8003842:	4618      	mov	r0, r3
 8003844:	3718      	adds	r7, #24
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}

0800384a <_close>:

int _close(int file)
{
 800384a:	b480      	push	{r7}
 800384c:	b083      	sub	sp, #12
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
	return -1;
 8003852:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003856:	4618      	mov	r0, r3
 8003858:	370c      	adds	r7, #12
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr

08003862 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003862:	b480      	push	{r7}
 8003864:	b083      	sub	sp, #12
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
 800386a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003872:	605a      	str	r2, [r3, #4]
	return 0;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	370c      	adds	r7, #12
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr

08003882 <_isatty>:

int _isatty(int file)
{
 8003882:	b480      	push	{r7}
 8003884:	b083      	sub	sp, #12
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
	return 1;
 800388a:	2301      	movs	r3, #1
}
 800388c:	4618      	mov	r0, r3
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003898:	b480      	push	{r7}
 800389a:	b085      	sub	sp, #20
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	607a      	str	r2, [r7, #4]
	return 0;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3714      	adds	r7, #20
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
	...

080038b4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80038bc:	4b11      	ldr	r3, [pc, #68]	; (8003904 <_sbrk+0x50>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d102      	bne.n	80038ca <_sbrk+0x16>
		heap_end = &end;
 80038c4:	4b0f      	ldr	r3, [pc, #60]	; (8003904 <_sbrk+0x50>)
 80038c6:	4a10      	ldr	r2, [pc, #64]	; (8003908 <_sbrk+0x54>)
 80038c8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80038ca:	4b0e      	ldr	r3, [pc, #56]	; (8003904 <_sbrk+0x50>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80038d0:	4b0c      	ldr	r3, [pc, #48]	; (8003904 <_sbrk+0x50>)
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4413      	add	r3, r2
 80038d8:	466a      	mov	r2, sp
 80038da:	4293      	cmp	r3, r2
 80038dc:	d907      	bls.n	80038ee <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80038de:	f016 fd5d 	bl	801a39c <__errno>
 80038e2:	4602      	mov	r2, r0
 80038e4:	230c      	movs	r3, #12
 80038e6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80038e8:	f04f 33ff 	mov.w	r3, #4294967295
 80038ec:	e006      	b.n	80038fc <_sbrk+0x48>
	}

	heap_end += incr;
 80038ee:	4b05      	ldr	r3, [pc, #20]	; (8003904 <_sbrk+0x50>)
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4413      	add	r3, r2
 80038f6:	4a03      	ldr	r2, [pc, #12]	; (8003904 <_sbrk+0x50>)
 80038f8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80038fa:	68fb      	ldr	r3, [r7, #12]
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3710      	adds	r7, #16
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}
 8003904:	200022f8 	.word	0x200022f8
 8003908:	20002a80 	.word	0x20002a80

0800390c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800390c:	b480      	push	{r7}
 800390e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003910:	4b08      	ldr	r3, [pc, #32]	; (8003934 <SystemInit+0x28>)
 8003912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003916:	4a07      	ldr	r2, [pc, #28]	; (8003934 <SystemInit+0x28>)
 8003918:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800391c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003920:	4b04      	ldr	r3, [pc, #16]	; (8003934 <SystemInit+0x28>)
 8003922:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003926:	609a      	str	r2, [r3, #8]
#endif
}
 8003928:	bf00      	nop
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	e000ed00 	.word	0xe000ed00

08003938 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003938:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003970 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800393c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800393e:	e003      	b.n	8003948 <LoopCopyDataInit>

08003940 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003940:	4b0c      	ldr	r3, [pc, #48]	; (8003974 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003942:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003944:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003946:	3104      	adds	r1, #4

08003948 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003948:	480b      	ldr	r0, [pc, #44]	; (8003978 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800394a:	4b0c      	ldr	r3, [pc, #48]	; (800397c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800394c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800394e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003950:	d3f6      	bcc.n	8003940 <CopyDataInit>
  ldr  r2, =_sbss
 8003952:	4a0b      	ldr	r2, [pc, #44]	; (8003980 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003954:	e002      	b.n	800395c <LoopFillZerobss>

08003956 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003956:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003958:	f842 3b04 	str.w	r3, [r2], #4

0800395c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800395c:	4b09      	ldr	r3, [pc, #36]	; (8003984 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800395e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003960:	d3f9      	bcc.n	8003956 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003962:	f7ff ffd3 	bl	800390c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003966:	f016 fd1f 	bl	801a3a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800396a:	f7ff f900 	bl	8002b6e <main>
  bx  lr    
 800396e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003970:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8003974:	0801daa0 	.word	0x0801daa0
  ldr  r0, =_sdata
 8003978:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800397c:	200013ac 	.word	0x200013ac
  ldr  r2, =_sbss
 8003980:	200013ac 	.word	0x200013ac
  ldr  r3, = _ebss
 8003984:	20002a80 	.word	0x20002a80

08003988 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003988:	e7fe      	b.n	8003988 <DMA1_Stream0_IRQHandler>
	...

0800398c <HTS221_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_RegisterBusIO(HTS221_Object_t *pObj, HTS221_IO_t *pIO)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d103      	bne.n	80039a4 <HTS221_RegisterBusIO+0x18>
  {
    ret = HTS221_ERROR;
 800399c:	f04f 33ff 	mov.w	r3, #4294967295
 80039a0:	60fb      	str	r3, [r7, #12]
 80039a2:	e030      	b.n	8003a06 <HTS221_RegisterBusIO+0x7a>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	685a      	ldr	r2, [r3, #4]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	689a      	ldr	r2, [r3, #8]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	7b1a      	ldrb	r2, [r3, #12]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	691a      	ldr	r2, [r3, #16]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	695a      	ldr	r2, [r3, #20]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	699a      	ldr	r2, [r3, #24]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4a0c      	ldr	r2, [pc, #48]	; (8003a10 <HTS221_RegisterBusIO+0x84>)
 80039e0:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a0b      	ldr	r2, [pc, #44]	; (8003a14 <HTS221_RegisterBusIO+0x88>)
 80039e6:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init != NULL)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d004      	beq.n	8003a00 <HTS221_RegisterBusIO+0x74>
    {
      ret = pObj->IO.Init();
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4798      	blx	r3
 80039fc:	60f8      	str	r0, [r7, #12]
 80039fe:	e002      	b.n	8003a06 <HTS221_RegisterBusIO+0x7a>
    }
    else
    {
      ret = HTS221_ERROR;
 8003a00:	f04f 33ff 	mov.w	r3, #4294967295
 8003a04:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8003a06:	68fb      	ldr	r3, [r7, #12]
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3710      	adds	r7, #16
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	080040a1 	.word	0x080040a1
 8003a14:	08004103 	.word	0x08004103

08003a18 <HTS221_Init>:
 * @brief  Initialize the HTS221 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_Init(HTS221_Object_t *pObj)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d108      	bne.n	8003a3c <HTS221_Init+0x24>
  {
    if (HTS221_Initialize(pObj) != HTS221_OK)
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 fad5 	bl	8003fda <HTS221_Initialize>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d002      	beq.n	8003a3c <HTS221_Init+0x24>
    {
      return HTS221_ERROR;
 8003a36:	f04f 33ff 	mov.w	r3, #4294967295
 8003a3a:	e004      	b.n	8003a46 <HTS221_Init+0x2e>
    }
  }

  pObj->is_initialized = 1;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return HTS221_OK;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3708      	adds	r7, #8
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}

08003a4e <HTS221_DeInit>:
 * @brief  Deinitialize the HTS221 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_DeInit(HTS221_Object_t *pObj)
{
 8003a4e:	b580      	push	{r7, lr}
 8003a50:	b082      	sub	sp, #8
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d111      	bne.n	8003a84 <HTS221_DeInit+0x36>
  {
    if (HTS221_HUM_Disable(pObj) != HTS221_OK)
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f000 f878 	bl	8003b56 <HTS221_HUM_Disable>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d002      	beq.n	8003a72 <HTS221_DeInit+0x24>
    {
      return HTS221_ERROR;
 8003a6c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a70:	e00d      	b.n	8003a8e <HTS221_DeInit+0x40>
    }

    if (HTS221_TEMP_Disable(pObj) != HTS221_OK)
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 f977 	bl	8003d66 <HTS221_TEMP_Disable>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d002      	beq.n	8003a84 <HTS221_DeInit+0x36>
    {
      return HTS221_ERROR;
 8003a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a82:	e004      	b.n	8003a8e <HTS221_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return HTS221_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3708      	adds	r7, #8
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <HTS221_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_ReadID(HTS221_Object_t *pObj, uint8_t *Id)
{
 8003a96:	b580      	push	{r7, lr}
 8003a98:	b082      	sub	sp, #8
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
 8003a9e:	6039      	str	r1, [r7, #0]
  if (hts221_device_id_get(&(pObj->Ctx), Id) != HTS221_OK)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	331c      	adds	r3, #28
 8003aa4:	6839      	ldr	r1, [r7, #0]
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f000 fc32 	bl	8004310 <hts221_device_id_get>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d002      	beq.n	8003ab8 <HTS221_ReadID+0x22>
  {
    return HTS221_ERROR;
 8003ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ab6:	e000      	b.n	8003aba <HTS221_ReadID+0x24>
  }

  return HTS221_OK;
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3708      	adds	r7, #8
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
	...

08003ac4 <HTS221_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to HTS221 sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_GetCapabilities(HTS221_Object_t *pObj, HTS221_Capabilities_t *Capabilities)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 1;
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	2201      	movs	r2, #1
 8003ade:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 12.5f;
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	4a07      	ldr	r2, [pc, #28]	; (8003b08 <HTS221_GetCapabilities+0x44>)
 8003aea:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 12.5f;
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	4a06      	ldr	r2, [pc, #24]	; (8003b08 <HTS221_GetCapabilities+0x44>)
 8003af0:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 0.0f;
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	f04f 0200 	mov.w	r2, #0
 8003af8:	60da      	str	r2, [r3, #12]
  return HTS221_OK;
 8003afa:	2300      	movs	r3, #0
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr
 8003b08:	41480000 	.word	0x41480000

08003b0c <HTS221_HUM_Enable>:
 * @brief  Enable the HTS221 humidity sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_Enable(HTS221_Object_t *pObj)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b082      	sub	sp, #8
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d101      	bne.n	8003b22 <HTS221_HUM_Enable+0x16>
  {
    return HTS221_OK;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	e015      	b.n	8003b4e <HTS221_HUM_Enable+0x42>
  }

  /* Check if the HTS221 temperature sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->temp_is_enabled == 0U)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d10b      	bne.n	8003b44 <HTS221_HUM_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	331c      	adds	r3, #28
 8003b30:	2101      	movs	r1, #1
 8003b32:	4618      	mov	r0, r3
 8003b34:	f000 fbfd 	bl	8004332 <hts221_power_on_set>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d002      	beq.n	8003b44 <HTS221_HUM_Enable+0x38>
    {
      return HTS221_ERROR;
 8003b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b42:	e004      	b.n	8003b4e <HTS221_HUM_Enable+0x42>
    }
  }

  pObj->hum_is_enabled = 1;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return HTS221_OK;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3708      	adds	r7, #8
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}

08003b56 <HTS221_HUM_Disable>:
 * @brief  Disable the HTS221 humidity sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_Disable(HTS221_Object_t *pObj)
{
 8003b56:	b580      	push	{r7, lr}
 8003b58:	b082      	sub	sp, #8
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->hum_is_enabled == 0U)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d101      	bne.n	8003b6c <HTS221_HUM_Disable+0x16>
  {
    return HTS221_OK;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	e015      	b.n	8003b98 <HTS221_HUM_Disable+0x42>
  }

  /* Check if the HTS221 temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d10b      	bne.n	8003b8e <HTS221_HUM_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	331c      	adds	r3, #28
 8003b7a:	2100      	movs	r1, #0
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f000 fbd8 	bl	8004332 <hts221_power_on_set>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d002      	beq.n	8003b8e <HTS221_HUM_Disable+0x38>
    {
      return HTS221_ERROR;
 8003b88:	f04f 33ff 	mov.w	r3, #4294967295
 8003b8c:	e004      	b.n	8003b98 <HTS221_HUM_Disable+0x42>
    }
  }

  pObj->hum_is_enabled = 0;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return HTS221_OK;
 8003b96:	2300      	movs	r3, #0
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3708      	adds	r7, #8
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <HTS221_HUM_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b082      	sub	sp, #8
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 8003baa:	6839      	ldr	r1, [r7, #0]
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f000 f9a1 	bl	8003ef4 <HTS221_GetOutputDataRate>
 8003bb2:	4603      	mov	r3, r0
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3708      	adds	r7, #8
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <HTS221_HUM_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8003bc6:	6839      	ldr	r1, [r7, #0]
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 f9d7 	bl	8003f7c <HTS221_SetOutputDataRate>
 8003bce:	4603      	mov	r3, r0
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3708      	adds	r7, #8
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <HTS221_HUM_GetHumidity>:
 * @param  pObj the device pObj
 * @param  Value pointer where the humidity value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_GetHumidity(HTS221_Object_t *pObj, float *Value)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b088      	sub	sp, #32
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_humidity;
  hts221_axis1bit16_t coeff;
  lin_t lin_hum;

  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	331c      	adds	r3, #28
 8003be6:	f107 0218 	add.w	r2, r7, #24
 8003bea:	4611      	mov	r1, r2
 8003bec:	4618      	mov	r0, r3
 8003bee:	f000 fc48 	bl	8004482 <hts221_hum_adc_point_0_get>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d002      	beq.n	8003bfe <HTS221_HUM_GetHumidity+0x26>
  {
    return HTS221_ERROR;
 8003bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8003bfc:	e086      	b.n	8003d0c <HTS221_HUM_GetHumidity+0x134>
  }

  lin_hum.x0 = (float)coeff.i16bit;
 8003bfe:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003c02:	ee07 3a90 	vmov	s15, r3
 8003c06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c0a:	edc7 7a02 	vstr	s15, [r7, #8]

  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	331c      	adds	r3, #28
 8003c12:	f107 0218 	add.w	r2, r7, #24
 8003c16:	4611      	mov	r1, r2
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f000 fbb0 	bl	800437e <hts221_hum_rh_point_0_get>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d002      	beq.n	8003c2a <HTS221_HUM_GetHumidity+0x52>
  {
    return HTS221_ERROR;
 8003c24:	f04f 33ff 	mov.w	r3, #4294967295
 8003c28:	e070      	b.n	8003d0c <HTS221_HUM_GetHumidity+0x134>
  }

  lin_hum.y0 = (float)coeff.u8bit[0];
 8003c2a:	7e3b      	ldrb	r3, [r7, #24]
 8003c2c:	ee07 3a90 	vmov	s15, r3
 8003c30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c34:	edc7 7a03 	vstr	s15, [r7, #12]

  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	331c      	adds	r3, #28
 8003c3c:	f107 0218 	add.w	r2, r7, #24
 8003c40:	4611      	mov	r1, r2
 8003c42:	4618      	mov	r0, r3
 8003c44:	f000 fc2e 	bl	80044a4 <hts221_hum_adc_point_1_get>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d002      	beq.n	8003c54 <HTS221_HUM_GetHumidity+0x7c>
  {
    return HTS221_ERROR;
 8003c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8003c52:	e05b      	b.n	8003d0c <HTS221_HUM_GetHumidity+0x134>
  }

  lin_hum.x1 = (float)coeff.i16bit;
 8003c54:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003c58:	ee07 3a90 	vmov	s15, r3
 8003c5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c60:	edc7 7a04 	vstr	s15, [r7, #16]

  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	331c      	adds	r3, #28
 8003c68:	f107 0218 	add.w	r2, r7, #24
 8003c6c:	4611      	mov	r1, r2
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f000 fb9c 	bl	80043ac <hts221_hum_rh_point_1_get>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d002      	beq.n	8003c80 <HTS221_HUM_GetHumidity+0xa8>
  {
    return HTS221_ERROR;
 8003c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c7e:	e045      	b.n	8003d0c <HTS221_HUM_GetHumidity+0x134>
  }

  lin_hum.y1 = (float)coeff.u8bit[0];
 8003c80:	7e3b      	ldrb	r3, [r7, #24]
 8003c82:	ee07 3a90 	vmov	s15, r3
 8003c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c8a:	edc7 7a05 	vstr	s15, [r7, #20]

  (void)memset(data_raw_humidity.u8bit, 0x00, sizeof(int16_t));
 8003c8e:	f107 031c 	add.w	r3, r7, #28
 8003c92:	2202      	movs	r2, #2
 8003c94:	2100      	movs	r1, #0
 8003c96:	4618      	mov	r0, r3
 8003c98:	f016 fbb5 	bl	801a406 <memset>
  if (hts221_humidity_raw_get(&(pObj->Ctx), data_raw_humidity.u8bit) != HTS221_OK)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	331c      	adds	r3, #28
 8003ca0:	f107 021c 	add.w	r2, r7, #28
 8003ca4:	4611      	mov	r1, r2
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f000 fb10 	bl	80042cc <hts221_humidity_raw_get>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d002      	beq.n	8003cb8 <HTS221_HUM_GetHumidity+0xe0>
  {
    return HTS221_ERROR;
 8003cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8003cb6:	e029      	b.n	8003d0c <HTS221_HUM_GetHumidity+0x134>
  }

  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 8003cb8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003cbc:	ee07 3a90 	vmov	s15, r3
 8003cc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cc4:	f107 0308 	add.w	r3, r7, #8
 8003cc8:	ee17 1a90 	vmov	r1, s15
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f000 f9b0 	bl	8004032 <Linear_Interpolation>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	601a      	str	r2, [r3, #0]

  if (*Value < 0.0f)
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	edd3 7a00 	vldr	s15, [r3]
 8003cde:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ce6:	d503      	bpl.n	8003cf0 <HTS221_HUM_GetHumidity+0x118>
  {
    *Value = 0.0f;
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	f04f 0200 	mov.w	r2, #0
 8003cee:	601a      	str	r2, [r3, #0]
  }

  if (*Value > 100.0f)
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	edd3 7a00 	vldr	s15, [r3]
 8003cf6:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8003d14 <HTS221_HUM_GetHumidity+0x13c>
 8003cfa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d02:	dd02      	ble.n	8003d0a <HTS221_HUM_GetHumidity+0x132>
  {
    *Value = 100.0f;
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	4a04      	ldr	r2, [pc, #16]	; (8003d18 <HTS221_HUM_GetHumidity+0x140>)
 8003d08:	601a      	str	r2, [r3, #0]
  }

  return HTS221_OK;
 8003d0a:	2300      	movs	r3, #0
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3720      	adds	r7, #32
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	42c80000 	.word	0x42c80000
 8003d18:	42c80000 	.word	0x42c80000

08003d1c <HTS221_TEMP_Enable>:
 * @brief  Enable the HTS221 temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_Enable(HTS221_Object_t *pObj)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d101      	bne.n	8003d32 <HTS221_TEMP_Enable+0x16>
  {
    return HTS221_OK;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	e015      	b.n	8003d5e <HTS221_TEMP_Enable+0x42>
  }

  /* Check if the HTS221 humidity sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->hum_is_enabled == 0U)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d10b      	bne.n	8003d54 <HTS221_TEMP_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	331c      	adds	r3, #28
 8003d40:	2101      	movs	r1, #1
 8003d42:	4618      	mov	r0, r3
 8003d44:	f000 faf5 	bl	8004332 <hts221_power_on_set>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d002      	beq.n	8003d54 <HTS221_TEMP_Enable+0x38>
    {
      return HTS221_ERROR;
 8003d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8003d52:	e004      	b.n	8003d5e <HTS221_TEMP_Enable+0x42>
    }
  }

  pObj->temp_is_enabled = 1;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HTS221_OK;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3708      	adds	r7, #8
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}

08003d66 <HTS221_TEMP_Disable>:
 * @brief  Disable the HTS221 temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_Disable(HTS221_Object_t *pObj)
{
 8003d66:	b580      	push	{r7, lr}
 8003d68:	b082      	sub	sp, #8
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d101      	bne.n	8003d7c <HTS221_TEMP_Disable+0x16>
  {
    return HTS221_OK;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	e015      	b.n	8003da8 <HTS221_TEMP_Disable+0x42>
  }

  /* Check if the HTS221 humidity sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->hum_is_enabled == 0U)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d10b      	bne.n	8003d9e <HTS221_TEMP_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	331c      	adds	r3, #28
 8003d8a:	2100      	movs	r1, #0
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f000 fad0 	bl	8004332 <hts221_power_on_set>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d002      	beq.n	8003d9e <HTS221_TEMP_Disable+0x38>
    {
      return HTS221_ERROR;
 8003d98:	f04f 33ff 	mov.w	r3, #4294967295
 8003d9c:	e004      	b.n	8003da8 <HTS221_TEMP_Disable+0x42>
    }
  }

  pObj->temp_is_enabled = 0;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HTS221_OK;
 8003da6:	2300      	movs	r3, #0
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3708      	adds	r7, #8
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <HTS221_TEMP_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b082      	sub	sp, #8
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 8003dba:	6839      	ldr	r1, [r7, #0]
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f000 f899 	bl	8003ef4 <HTS221_GetOutputDataRate>
 8003dc2:	4603      	mov	r3, r0
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3708      	adds	r7, #8
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <HTS221_TEMP_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8003dd6:	6839      	ldr	r1, [r7, #0]
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f000 f8cf 	bl	8003f7c <HTS221_SetOutputDataRate>
 8003dde:	4603      	mov	r3, r0
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3708      	adds	r7, #8
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <HTS221_TEMP_GetTemperature>:
 * @param  pObj the device pObj
 * @param  Value pointer where the temperature value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_GetTemperature(HTS221_Object_t *pObj, float *Value)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b088      	sub	sp, #32
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_temperature;
  hts221_axis1bit16_t coeff;
  lin_t lin_temp;

  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	331c      	adds	r3, #28
 8003df6:	f107 0218 	add.w	r2, r7, #24
 8003dfa:	4611      	mov	r1, r2
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f000 fb62 	bl	80044c6 <hts221_temp_adc_point_0_get>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d002      	beq.n	8003e0e <HTS221_TEMP_GetTemperature+0x26>
  {
    return HTS221_ERROR;
 8003e08:	f04f 33ff 	mov.w	r3, #4294967295
 8003e0c:	e06d      	b.n	8003eea <HTS221_TEMP_GetTemperature+0x102>
  }

  lin_temp.x0 = (float)coeff.i16bit;
 8003e0e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003e12:	ee07 3a90 	vmov	s15, r3
 8003e16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e1a:	edc7 7a02 	vstr	s15, [r7, #8]

  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	331c      	adds	r3, #28
 8003e22:	f107 0218 	add.w	r2, r7, #24
 8003e26:	4611      	mov	r1, r2
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f000 fad6 	bl	80043da <hts221_temp_deg_point_0_get>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d002      	beq.n	8003e3a <HTS221_TEMP_GetTemperature+0x52>
  {
    return HTS221_ERROR;
 8003e34:	f04f 33ff 	mov.w	r3, #4294967295
 8003e38:	e057      	b.n	8003eea <HTS221_TEMP_GetTemperature+0x102>
  }

  lin_temp.y0 = (float)coeff.u8bit[0];
 8003e3a:	7e3b      	ldrb	r3, [r7, #24]
 8003e3c:	ee07 3a90 	vmov	s15, r3
 8003e40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e44:	edc7 7a03 	vstr	s15, [r7, #12]

  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	331c      	adds	r3, #28
 8003e4c:	f107 0218 	add.w	r2, r7, #24
 8003e50:	4611      	mov	r1, r2
 8003e52:	4618      	mov	r0, r3
 8003e54:	f000 fb48 	bl	80044e8 <hts221_temp_adc_point_1_get>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d002      	beq.n	8003e64 <HTS221_TEMP_GetTemperature+0x7c>
  {
    return HTS221_ERROR;
 8003e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e62:	e042      	b.n	8003eea <HTS221_TEMP_GetTemperature+0x102>
  }

  lin_temp.x1 = (float)coeff.i16bit;
 8003e64:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003e68:	ee07 3a90 	vmov	s15, r3
 8003e6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e70:	edc7 7a04 	vstr	s15, [r7, #16]

  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	331c      	adds	r3, #28
 8003e78:	f107 0218 	add.w	r2, r7, #24
 8003e7c:	4611      	mov	r1, r2
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f000 fad5 	bl	800442e <hts221_temp_deg_point_1_get>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d002      	beq.n	8003e90 <HTS221_TEMP_GetTemperature+0xa8>
  {
    return HTS221_ERROR;
 8003e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e8e:	e02c      	b.n	8003eea <HTS221_TEMP_GetTemperature+0x102>
  }

  lin_temp.y1 = (float)coeff.u8bit[0];
 8003e90:	7e3b      	ldrb	r3, [r7, #24]
 8003e92:	ee07 3a90 	vmov	s15, r3
 8003e96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e9a:	edc7 7a05 	vstr	s15, [r7, #20]

  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 8003e9e:	f107 031c 	add.w	r3, r7, #28
 8003ea2:	2202      	movs	r2, #2
 8003ea4:	2100      	movs	r1, #0
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f016 faad 	bl	801a406 <memset>
  if (hts221_temperature_raw_get(&(pObj->Ctx), data_raw_temperature.u8bit) != HTS221_OK)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	331c      	adds	r3, #28
 8003eb0:	f107 021c 	add.w	r2, r7, #28
 8003eb4:	4611      	mov	r1, r2
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f000 fa19 	bl	80042ee <hts221_temperature_raw_get>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d002      	beq.n	8003ec8 <HTS221_TEMP_GetTemperature+0xe0>
  {
    return HTS221_ERROR;
 8003ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ec6:	e010      	b.n	8003eea <HTS221_TEMP_GetTemperature+0x102>
  }

  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 8003ec8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003ecc:	ee07 3a90 	vmov	s15, r3
 8003ed0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ed4:	f107 0308 	add.w	r3, r7, #8
 8003ed8:	ee17 1a90 	vmov	r1, s15
 8003edc:	4618      	mov	r0, r3
 8003ede:	f000 f8a8 	bl	8004032 <Linear_Interpolation>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	601a      	str	r2, [r3, #0]

  return HTS221_OK;
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3720      	adds	r7, #32
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
	...

08003ef4 <HTS221_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
  int32_t ret = HTS221_OK;
 8003efe:	2300      	movs	r3, #0
 8003f00:	60fb      	str	r3, [r7, #12]
  hts221_odr_t odr_low_level;

  if (hts221_data_rate_get(&(pObj->Ctx), &odr_low_level) != HTS221_OK)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	331c      	adds	r3, #28
 8003f06:	f107 020b 	add.w	r2, r7, #11
 8003f0a:	4611      	mov	r1, r2
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f000 f97f 	bl	8004210 <hts221_data_rate_get>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d002      	beq.n	8003f1e <HTS221_GetOutputDataRate+0x2a>
  {
    return HTS221_ERROR;
 8003f18:	f04f 33ff 	mov.w	r3, #4294967295
 8003f1c:	e025      	b.n	8003f6a <HTS221_GetOutputDataRate+0x76>
  }

  switch (odr_low_level)
 8003f1e:	7afb      	ldrb	r3, [r7, #11]
 8003f20:	2b03      	cmp	r3, #3
 8003f22:	d81d      	bhi.n	8003f60 <HTS221_GetOutputDataRate+0x6c>
 8003f24:	a201      	add	r2, pc, #4	; (adr r2, 8003f2c <HTS221_GetOutputDataRate+0x38>)
 8003f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f2a:	bf00      	nop
 8003f2c:	08003f3d 	.word	0x08003f3d
 8003f30:	08003f47 	.word	0x08003f47
 8003f34:	08003f51 	.word	0x08003f51
 8003f38:	08003f59 	.word	0x08003f59
  {
    case HTS221_ONE_SHOT:
      *Odr = 0.0f;
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	f04f 0200 	mov.w	r2, #0
 8003f42:	601a      	str	r2, [r3, #0]
      break;
 8003f44:	e010      	b.n	8003f68 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_1Hz:
      *Odr = 1.0f;
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003f4c:	601a      	str	r2, [r3, #0]
      break;
 8003f4e:	e00b      	b.n	8003f68 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_7Hz:
      *Odr = 7.0f;
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	4a08      	ldr	r2, [pc, #32]	; (8003f74 <HTS221_GetOutputDataRate+0x80>)
 8003f54:	601a      	str	r2, [r3, #0]
      break;
 8003f56:	e007      	b.n	8003f68 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_12Hz5:
      *Odr = 12.5f;
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	4a07      	ldr	r2, [pc, #28]	; (8003f78 <HTS221_GetOutputDataRate+0x84>)
 8003f5c:	601a      	str	r2, [r3, #0]
      break;
 8003f5e:	e003      	b.n	8003f68 <HTS221_GetOutputDataRate+0x74>

    default:
      ret = HTS221_ERROR;
 8003f60:	f04f 33ff 	mov.w	r3, #4294967295
 8003f64:	60fb      	str	r3, [r7, #12]
      break;
 8003f66:	bf00      	nop
  }

  return ret;
 8003f68:	68fb      	ldr	r3, [r7, #12]
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3710      	adds	r7, #16
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	40e00000 	.word	0x40e00000
 8003f78:	41480000 	.word	0x41480000

08003f7c <HTS221_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
  hts221_odr_t new_odr;

  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 8003f86:	edd7 7a00 	vldr	s15, [r7]
 8003f8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003f8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f96:	d801      	bhi.n	8003f9c <HTS221_SetOutputDataRate+0x20>
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e00b      	b.n	8003fb4 <HTS221_SetOutputDataRate+0x38>
 8003f9c:	edd7 7a00 	vldr	s15, [r7]
 8003fa0:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8003fa4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fac:	d801      	bhi.n	8003fb2 <HTS221_SetOutputDataRate+0x36>
 8003fae:	2302      	movs	r3, #2
 8003fb0:	e000      	b.n	8003fb4 <HTS221_SetOutputDataRate+0x38>
 8003fb2:	2303      	movs	r3, #3
  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
 8003fb4:	73fb      	strb	r3, [r7, #15]
            :                 HTS221_ODR_12Hz5;

  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	331c      	adds	r3, #28
 8003fba:	7bfa      	ldrb	r2, [r7, #15]
 8003fbc:	4611      	mov	r1, r2
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f000 f900 	bl	80041c4 <hts221_data_rate_set>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d002      	beq.n	8003fd0 <HTS221_SetOutputDataRate+0x54>
  {
    return HTS221_ERROR;
 8003fca:	f04f 33ff 	mov.w	r3, #4294967295
 8003fce:	e000      	b.n	8003fd2 <HTS221_SetOutputDataRate+0x56>
  }

  return HTS221_OK;
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3710      	adds	r7, #16
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}

08003fda <HTS221_Initialize>:
 * @brief  Initialize the HTS221 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_Initialize(HTS221_Object_t *pObj)
{
 8003fda:	b580      	push	{r7, lr}
 8003fdc:	b082      	sub	sp, #8
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
  /* Power off the component. */
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	331c      	adds	r3, #28
 8003fe6:	2100      	movs	r1, #0
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f000 f9a2 	bl	8004332 <hts221_power_on_set>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d002      	beq.n	8003ffa <HTS221_Initialize+0x20>
  {
    return HTS221_ERROR;
 8003ff4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ff8:	e017      	b.n	800402a <HTS221_Initialize+0x50>
  }

  /* Enable BDU */
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	331c      	adds	r3, #28
 8003ffe:	2101      	movs	r1, #1
 8004000:	4618      	mov	r0, r3
 8004002:	f000 f93d 	bl	8004280 <hts221_block_data_update_set>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d002      	beq.n	8004012 <HTS221_Initialize+0x38>
  {
    return HTS221_ERROR;
 800400c:	f04f 33ff 	mov.w	r3, #4294967295
 8004010:	e00b      	b.n	800402a <HTS221_Initialize+0x50>
  }

  /* Set default ODR */
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 8004012:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f7ff ffb0 	bl	8003f7c <HTS221_SetOutputDataRate>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d002      	beq.n	8004028 <HTS221_Initialize+0x4e>
  {
    return HTS221_ERROR;
 8004022:	f04f 33ff 	mov.w	r3, #4294967295
 8004026:	e000      	b.n	800402a <HTS221_Initialize+0x50>
  }

  return HTS221_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3708      	adds	r7, #8
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}

08004032 <Linear_Interpolation>:
 * @param  Lin the line
 * @param  Coeff the coefficient
 * @retval Calculation result
 */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
 8004032:	b480      	push	{r7}
 8004034:	b083      	sub	sp, #12
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]
 800403a:	6039      	str	r1, [r7, #0]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	ed93 7a03 	vldr	s14, [r3, #12]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	edd3 7a01 	vldr	s15, [r3, #4]
 8004048:	ee37 7a67 	vsub.f32	s14, s14, s15
 800404c:	edd7 7a00 	vldr	s15, [r7]
 8004050:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	edd3 6a02 	vldr	s13, [r3, #8]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	edd3 7a01 	vldr	s15, [r3, #4]
 8004060:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	ed93 6a00 	vldr	s12, [r3]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	edd3 7a03 	vldr	s15, [r3, #12]
 8004070:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004074:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004078:	ee37 7a27 	vadd.f32	s14, s14, s15
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	edd3 6a02 	vldr	s13, [r3, #8]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	edd3 7a00 	vldr	s15, [r3]
 8004088:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800408c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004090:	ee16 3a90 	vmov	r3, s13
}
 8004094:	4618      	mov	r0, r3
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80040a0:	b590      	push	{r4, r7, lr}
 80040a2:	b087      	sub	sp, #28
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	607a      	str	r2, [r7, #4]
 80040aa:	461a      	mov	r2, r3
 80040ac:	460b      	mov	r3, r1
 80040ae:	72fb      	strb	r3, [r7, #11]
 80040b0:	4613      	mov	r3, r2
 80040b2:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d10e      	bne.n	80040de <ReadRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	695c      	ldr	r4, [r3, #20]
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	7b1b      	ldrb	r3, [r3, #12]
 80040c8:	b298      	uxth	r0, r3
 80040ca:	7afb      	ldrb	r3, [r7, #11]
 80040cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	b299      	uxth	r1, r3
 80040d4:	893b      	ldrh	r3, [r7, #8]
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	47a0      	blx	r4
 80040da:	4603      	mov	r3, r0
 80040dc:	e00d      	b.n	80040fa <ReadRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	695c      	ldr	r4, [r3, #20]
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	7b1b      	ldrb	r3, [r3, #12]
 80040e6:	b298      	uxth	r0, r3
 80040e8:	7afb      	ldrb	r3, [r7, #11]
 80040ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	b299      	uxth	r1, r3
 80040f2:	893b      	ldrh	r3, [r7, #8]
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	47a0      	blx	r4
 80040f8:	4603      	mov	r3, r0
  }
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	371c      	adds	r7, #28
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd90      	pop	{r4, r7, pc}

08004102 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004102:	b590      	push	{r4, r7, lr}
 8004104:	b087      	sub	sp, #28
 8004106:	af00      	add	r7, sp, #0
 8004108:	60f8      	str	r0, [r7, #12]
 800410a:	607a      	str	r2, [r7, #4]
 800410c:	461a      	mov	r2, r3
 800410e:	460b      	mov	r3, r1
 8004110:	72fb      	strb	r3, [r7, #11]
 8004112:	4613      	mov	r3, r2
 8004114:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d10e      	bne.n	8004140 <WriteRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	691c      	ldr	r4, [r3, #16]
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	7b1b      	ldrb	r3, [r3, #12]
 800412a:	b298      	uxth	r0, r3
 800412c:	7afb      	ldrb	r3, [r7, #11]
 800412e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004132:	b2db      	uxtb	r3, r3
 8004134:	b299      	uxth	r1, r3
 8004136:	893b      	ldrh	r3, [r7, #8]
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	47a0      	blx	r4
 800413c:	4603      	mov	r3, r0
 800413e:	e00d      	b.n	800415c <WriteRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	691c      	ldr	r4, [r3, #16]
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	7b1b      	ldrb	r3, [r3, #12]
 8004148:	b298      	uxth	r0, r3
 800414a:	7afb      	ldrb	r3, [r7, #11]
 800414c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004150:	b2db      	uxtb	r3, r3
 8004152:	b299      	uxth	r1, r3
 8004154:	893b      	ldrh	r3, [r7, #8]
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	47a0      	blx	r4
 800415a:	4603      	mov	r3, r0
  }
}
 800415c:	4618      	mov	r0, r3
 800415e:	371c      	adds	r7, #28
 8004160:	46bd      	mov	sp, r7
 8004162:	bd90      	pop	{r4, r7, pc}

08004164 <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                        uint16_t len)
{
 8004164:	b590      	push	{r4, r7, lr}
 8004166:	b087      	sub	sp, #28
 8004168:	af00      	add	r7, sp, #0
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	607a      	str	r2, [r7, #4]
 800416e:	461a      	mov	r2, r3
 8004170:	460b      	mov	r3, r1
 8004172:	72fb      	strb	r3, [r7, #11]
 8004174:	4613      	mov	r3, r2
 8004176:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	685c      	ldr	r4, [r3, #4]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6898      	ldr	r0, [r3, #8]
 8004180:	893b      	ldrh	r3, [r7, #8]
 8004182:	7af9      	ldrb	r1, [r7, #11]
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	47a0      	blx	r4
 8004188:	6178      	str	r0, [r7, #20]
  return ret;
 800418a:	697b      	ldr	r3, [r7, #20]
}
 800418c:	4618      	mov	r0, r3
 800418e:	371c      	adds	r7, #28
 8004190:	46bd      	mov	sp, r7
 8004192:	bd90      	pop	{r4, r7, pc}

08004194 <hts221_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 8004194:	b590      	push	{r4, r7, lr}
 8004196:	b087      	sub	sp, #28
 8004198:	af00      	add	r7, sp, #0
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	607a      	str	r2, [r7, #4]
 800419e:	461a      	mov	r2, r3
 80041a0:	460b      	mov	r3, r1
 80041a2:	72fb      	strb	r3, [r7, #11]
 80041a4:	4613      	mov	r3, r2
 80041a6:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681c      	ldr	r4, [r3, #0]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6898      	ldr	r0, [r3, #8]
 80041b0:	893b      	ldrh	r3, [r7, #8]
 80041b2:	7af9      	ldrb	r1, [r7, #11]
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	47a0      	blx	r4
 80041b8:	6178      	str	r0, [r7, #20]
  return ret;
 80041ba:	697b      	ldr	r3, [r7, #20]
}
 80041bc:	4618      	mov	r0, r3
 80041be:	371c      	adds	r7, #28
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd90      	pop	{r4, r7, pc}

080041c4 <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	460b      	mov	r3, r1
 80041ce:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 80041d0:	f107 0208 	add.w	r2, r7, #8
 80041d4:	2301      	movs	r3, #1
 80041d6:	2120      	movs	r1, #32
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f7ff ffc3 	bl	8004164 <hts221_read_reg>
 80041de:	60f8      	str	r0, [r7, #12]

  if(ret == 0){
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d10f      	bne.n	8004206 <hts221_data_rate_set+0x42>
    reg.odr = (uint8_t)val;
 80041e6:	78fb      	ldrb	r3, [r7, #3]
 80041e8:	f003 0303 	and.w	r3, r3, #3
 80041ec:	b2da      	uxtb	r2, r3
 80041ee:	7a3b      	ldrb	r3, [r7, #8]
 80041f0:	f362 0301 	bfi	r3, r2, #0, #2
 80041f4:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 80041f6:	f107 0208 	add.w	r2, r7, #8
 80041fa:	2301      	movs	r3, #1
 80041fc:	2120      	movs	r1, #32
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f7ff ffc8 	bl	8004194 <hts221_write_reg>
 8004204:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004206:	68fb      	ldr	r3, [r7, #12]
}
 8004208:	4618      	mov	r0, r3
 800420a:	3710      	adds	r7, #16
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}

08004210 <hts221_data_rate_get>:
  * @param  val     Get the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_get(stmdev_ctx_t *ctx, hts221_odr_t *val)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 800421a:	f107 0208 	add.w	r2, r7, #8
 800421e:	2301      	movs	r3, #1
 8004220:	2120      	movs	r1, #32
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f7ff ff9e 	bl	8004164 <hts221_read_reg>
 8004228:	60f8      	str	r0, [r7, #12]

  switch (reg.odr) {
 800422a:	7a3b      	ldrb	r3, [r7, #8]
 800422c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8004230:	b2db      	uxtb	r3, r3
 8004232:	2b03      	cmp	r3, #3
 8004234:	d81a      	bhi.n	800426c <hts221_data_rate_get+0x5c>
 8004236:	a201      	add	r2, pc, #4	; (adr r2, 800423c <hts221_data_rate_get+0x2c>)
 8004238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800423c:	0800424d 	.word	0x0800424d
 8004240:	08004255 	.word	0x08004255
 8004244:	0800425d 	.word	0x0800425d
 8004248:	08004265 	.word	0x08004265
    case HTS221_ONE_SHOT:
      *val = HTS221_ONE_SHOT;
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	2200      	movs	r2, #0
 8004250:	701a      	strb	r2, [r3, #0]
      break;
 8004252:	e00f      	b.n	8004274 <hts221_data_rate_get+0x64>
    case HTS221_ODR_1Hz:
      *val = HTS221_ODR_1Hz;
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	2201      	movs	r2, #1
 8004258:	701a      	strb	r2, [r3, #0]
      break;
 800425a:	e00b      	b.n	8004274 <hts221_data_rate_get+0x64>
    case HTS221_ODR_7Hz:
      *val = HTS221_ODR_7Hz;
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	2202      	movs	r2, #2
 8004260:	701a      	strb	r2, [r3, #0]
      break;
 8004262:	e007      	b.n	8004274 <hts221_data_rate_get+0x64>
    case HTS221_ODR_12Hz5:
      *val = HTS221_ODR_12Hz5;
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	2203      	movs	r2, #3
 8004268:	701a      	strb	r2, [r3, #0]
      break;
 800426a:	e003      	b.n	8004274 <hts221_data_rate_get+0x64>
    default:
      *val = HTS221_ODR_ND;
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	2204      	movs	r2, #4
 8004270:	701a      	strb	r2, [r3, #0]
      break;
 8004272:	bf00      	nop
  }

  return ret;
 8004274:	68fb      	ldr	r3, [r7, #12]
}
 8004276:	4618      	mov	r0, r3
 8004278:	3710      	adds	r7, #16
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop

08004280 <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	460b      	mov	r3, r1
 800428a:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 800428c:	f107 0208 	add.w	r2, r7, #8
 8004290:	2301      	movs	r3, #1
 8004292:	2120      	movs	r1, #32
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f7ff ff65 	bl	8004164 <hts221_read_reg>
 800429a:	60f8      	str	r0, [r7, #12]

  if(ret == 0){
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d10f      	bne.n	80042c2 <hts221_block_data_update_set+0x42>
    reg.bdu = val;
 80042a2:	78fb      	ldrb	r3, [r7, #3]
 80042a4:	f003 0301 	and.w	r3, r3, #1
 80042a8:	b2da      	uxtb	r2, r3
 80042aa:	7a3b      	ldrb	r3, [r7, #8]
 80042ac:	f362 0382 	bfi	r3, r2, #2, #1
 80042b0:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 80042b2:	f107 0208 	add.w	r2, r7, #8
 80042b6:	2301      	movs	r3, #1
 80042b8:	2120      	movs	r1, #32
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f7ff ff6a 	bl	8004194 <hts221_write_reg>
 80042c0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80042c2:	68fb      	ldr	r3, [r7, #12]
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3710      	adds	r7, #16
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}

080042cc <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b084      	sub	sp, #16
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 80042d6:	2302      	movs	r3, #2
 80042d8:	683a      	ldr	r2, [r7, #0]
 80042da:	2128      	movs	r1, #40	; 0x28
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f7ff ff41 	bl	8004164 <hts221_read_reg>
 80042e2:	60f8      	str	r0, [r7, #12]
  return ret;
 80042e4:	68fb      	ldr	r3, [r7, #12]
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3710      	adds	r7, #16
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}

080042ee <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80042ee:	b580      	push	{r7, lr}
 80042f0:	b084      	sub	sp, #16
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
 80042f6:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 80042f8:	2302      	movs	r3, #2
 80042fa:	683a      	ldr	r2, [r7, #0]
 80042fc:	212a      	movs	r1, #42	; 0x2a
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f7ff ff30 	bl	8004164 <hts221_read_reg>
 8004304:	60f8      	str	r0, [r7, #12]
  return ret;
 8004306:	68fb      	ldr	r3, [r7, #12]
}
 8004308:	4618      	mov	r0, r3
 800430a:	3710      	adds	r7, #16
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}

08004310 <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 800431a:	2301      	movs	r3, #1
 800431c:	683a      	ldr	r2, [r7, #0]
 800431e:	210f      	movs	r1, #15
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f7ff ff1f 	bl	8004164 <hts221_read_reg>
 8004326:	60f8      	str	r0, [r7, #12]
  return ret;
 8004328:	68fb      	ldr	r3, [r7, #12]
}
 800432a:	4618      	mov	r0, r3
 800432c:	3710      	adds	r7, #16
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}

08004332 <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004332:	b580      	push	{r7, lr}
 8004334:	b084      	sub	sp, #16
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
 800433a:	460b      	mov	r3, r1
 800433c:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 800433e:	f107 0208 	add.w	r2, r7, #8
 8004342:	2301      	movs	r3, #1
 8004344:	2120      	movs	r1, #32
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f7ff ff0c 	bl	8004164 <hts221_read_reg>
 800434c:	60f8      	str	r0, [r7, #12]

  if(ret == 0){
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d10f      	bne.n	8004374 <hts221_power_on_set+0x42>
    reg.pd = val;
 8004354:	78fb      	ldrb	r3, [r7, #3]
 8004356:	f003 0301 	and.w	r3, r3, #1
 800435a:	b2da      	uxtb	r2, r3
 800435c:	7a3b      	ldrb	r3, [r7, #8]
 800435e:	f362 13c7 	bfi	r3, r2, #7, #1
 8004362:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 8004364:	f107 0208 	add.w	r2, r7, #8
 8004368:	2301      	movs	r3, #1
 800436a:	2120      	movs	r1, #32
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f7ff ff11 	bl	8004194 <hts221_write_reg>
 8004372:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8004374:	68fb      	ldr	r3, [r7, #12]
}
 8004376:	4618      	mov	r0, r3
 8004378:	3710      	adds	r7, #16
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}

0800437e <hts221_hum_rh_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800437e:	b580      	push	{r7, lr}
 8004380:	b084      	sub	sp, #16
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
 8004386:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, buff, 1);
 8004388:	2301      	movs	r3, #1
 800438a:	683a      	ldr	r2, [r7, #0]
 800438c:	2130      	movs	r1, #48	; 0x30
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f7ff fee8 	bl	8004164 <hts221_read_reg>
 8004394:	60f8      	str	r0, [r7, #12]
  *buff = (uint8_t)(((uint16_t)(*buff) >> 1) & 0x7FFFu);
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	085b      	lsrs	r3, r3, #1
 800439c:	b2da      	uxtb	r2, r3
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	701a      	strb	r2, [r3, #0]

  return ret;
 80043a2:	68fb      	ldr	r3, [r7, #12]
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3710      	adds	r7, #16
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <hts221_hum_rh_point_1_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, buff, 1);
 80043b6:	2301      	movs	r3, #1
 80043b8:	683a      	ldr	r2, [r7, #0]
 80043ba:	2131      	movs	r1, #49	; 0x31
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f7ff fed1 	bl	8004164 <hts221_read_reg>
 80043c2:	60f8      	str	r0, [r7, #12]
  *buff = (uint8_t)(((uint16_t)(*buff) >> 1) & 0x7FFFu);
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	781b      	ldrb	r3, [r3, #0]
 80043c8:	085b      	lsrs	r3, r3, #1
 80043ca:	b2da      	uxtb	r2, r3
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	701a      	strb	r2, [r3, #0]

  return ret;
 80043d0:	68fb      	ldr	r3, [r7, #12]
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3710      	adds	r7, #16
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}

080043da <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80043da:	b580      	push	{r7, lr}
 80043dc:	b086      	sub	sp, #24
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
 80043e2:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 80043e4:	f107 020f 	add.w	r2, r7, #15
 80043e8:	2301      	movs	r3, #1
 80043ea:	2132      	movs	r1, #50	; 0x32
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f7ff feb9 	bl	8004164 <hts221_read_reg>
 80043f2:	6178      	str	r0, [r7, #20]

  if(ret == 0){
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d114      	bne.n	8004424 <hts221_temp_deg_point_0_get+0x4a>
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t*) &reg, 1);
 80043fa:	f107 0210 	add.w	r2, r7, #16
 80043fe:	2301      	movs	r3, #1
 8004400:	2135      	movs	r1, #53	; 0x35
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f7ff feae 	bl	8004164 <hts221_read_reg>
 8004408:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t0_msb;
 800440a:	7c3b      	ldrb	r3, [r7, #16]
 800440c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8004410:	b2db      	uxtb	r3, r3
 8004412:	74fb      	strb	r3, [r7, #19]
    *(buff) = (uint8_t)(((coeff_h << 8) + coeff_l) >> 3);
 8004414:	7cfb      	ldrb	r3, [r7, #19]
 8004416:	021b      	lsls	r3, r3, #8
 8004418:	7bfa      	ldrb	r2, [r7, #15]
 800441a:	4413      	add	r3, r2
 800441c:	10db      	asrs	r3, r3, #3
 800441e:	b2da      	uxtb	r2, r3
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8004424:	697b      	ldr	r3, [r7, #20]
}
 8004426:	4618      	mov	r0, r3
 8004428:	3718      	adds	r7, #24
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}

0800442e <hts221_temp_deg_point_1_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800442e:	b580      	push	{r7, lr}
 8004430:	b086      	sub	sp, #24
 8004432:	af00      	add	r7, sp, #0
 8004434:	6078      	str	r0, [r7, #4]
 8004436:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 8004438:	f107 020f 	add.w	r2, r7, #15
 800443c:	2301      	movs	r3, #1
 800443e:	2133      	movs	r1, #51	; 0x33
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f7ff fe8f 	bl	8004164 <hts221_read_reg>
 8004446:	6178      	str	r0, [r7, #20]

  if(ret == 0){
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d114      	bne.n	8004478 <hts221_temp_deg_point_1_get+0x4a>
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t*) &reg, 1);
 800444e:	f107 0210 	add.w	r2, r7, #16
 8004452:	2301      	movs	r3, #1
 8004454:	2135      	movs	r1, #53	; 0x35
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f7ff fe84 	bl	8004164 <hts221_read_reg>
 800445c:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t1_msb;
 800445e:	7c3b      	ldrb	r3, [r7, #16]
 8004460:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8004464:	b2db      	uxtb	r3, r3
 8004466:	74fb      	strb	r3, [r7, #19]
    *(buff) = (uint8_t)(((coeff_h << 8) + coeff_l) >> 3);
 8004468:	7cfb      	ldrb	r3, [r7, #19]
 800446a:	021b      	lsls	r3, r3, #8
 800446c:	7bfa      	ldrb	r2, [r7, #15]
 800446e:	4413      	add	r3, r2
 8004470:	10db      	asrs	r3, r3, #3
 8004472:	b2da      	uxtb	r2, r3
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8004478:	697b      	ldr	r3, [r7, #20]
}
 800447a:	4618      	mov	r0, r3
 800447c:	3718      	adds	r7, #24
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}

08004482 <hts221_hum_adc_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004482:	b580      	push	{r7, lr}
 8004484:	b084      	sub	sp, #16
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]
 800448a:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, buff, 2);
 800448c:	2302      	movs	r3, #2
 800448e:	683a      	ldr	r2, [r7, #0]
 8004490:	2136      	movs	r1, #54	; 0x36
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f7ff fe66 	bl	8004164 <hts221_read_reg>
 8004498:	60f8      	str	r0, [r7, #12]
  return ret;
 800449a:	68fb      	ldr	r3, [r7, #12]
}
 800449c:	4618      	mov	r0, r3
 800449e:	3710      	adds	r7, #16
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <hts221_hum_adc_point_1_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, buff, 2);
 80044ae:	2302      	movs	r3, #2
 80044b0:	683a      	ldr	r2, [r7, #0]
 80044b2:	213a      	movs	r1, #58	; 0x3a
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f7ff fe55 	bl	8004164 <hts221_read_reg>
 80044ba:	60f8      	str	r0, [r7, #12]
  return ret;
 80044bc:	68fb      	ldr	r3, [r7, #12]
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3710      	adds	r7, #16
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}

080044c6 <hts221_temp_adc_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80044c6:	b580      	push	{r7, lr}
 80044c8:	b084      	sub	sp, #16
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
 80044ce:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, buff, 2);
 80044d0:	2302      	movs	r3, #2
 80044d2:	683a      	ldr	r2, [r7, #0]
 80044d4:	213c      	movs	r1, #60	; 0x3c
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f7ff fe44 	bl	8004164 <hts221_read_reg>
 80044dc:	60f8      	str	r0, [r7, #12]
  return ret;
 80044de:	68fb      	ldr	r3, [r7, #12]
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3710      	adds	r7, #16
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <hts221_temp_adc_point_1_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, buff, 2);
 80044f2:	2302      	movs	r3, #2
 80044f4:	683a      	ldr	r2, [r7, #0]
 80044f6:	213e      	movs	r1, #62	; 0x3e
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f7ff fe33 	bl	8004164 <hts221_read_reg>
 80044fe:	60f8      	str	r0, [r7, #12]
  return ret;
 8004500:	68fb      	ldr	r3, [r7, #12]
}
 8004502:	4618      	mov	r0, r3
 8004504:	3710      	adds	r7, #16
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
	...

0800450c <LPS22HB_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_RegisterBusIO(LPS22HB_Object_t *pObj, LPS22HB_IO_t *pIO)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HB_OK;
 8004516:	2300      	movs	r3, #0
 8004518:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d103      	bne.n	8004528 <LPS22HB_RegisterBusIO+0x1c>
  {
    ret = LPS22HB_ERROR;
 8004520:	f04f 33ff 	mov.w	r3, #4294967295
 8004524:	60fb      	str	r3, [r7, #12]
 8004526:	e04d      	b.n	80045c4 <LPS22HB_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	685a      	ldr	r2, [r3, #4]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	689a      	ldr	r2, [r3, #8]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	7b1a      	ldrb	r2, [r3, #12]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	691a      	ldr	r2, [r3, #16]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	695a      	ldr	r2, [r3, #20]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	699a      	ldr	r2, [r3, #24]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	4a1b      	ldr	r2, [pc, #108]	; (80045d0 <LPS22HB_RegisterBusIO+0xc4>)
 8004564:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a1a      	ldr	r2, [pc, #104]	; (80045d4 <LPS22HB_RegisterBusIO+0xc8>)
 800456a:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d103      	bne.n	8004582 <LPS22HB_RegisterBusIO+0x76>
    {
      ret = LPS22HB_ERROR;
 800457a:	f04f 33ff 	mov.w	r3, #4294967295
 800457e:	60fb      	str	r3, [r7, #12]
 8004580:	e020      	b.n	80045c4 <LPS22HB_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LPS22HB_OK)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4798      	blx	r3
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	d003      	beq.n	8004596 <LPS22HB_RegisterBusIO+0x8a>
    {
      ret = LPS22HB_ERROR;
 800458e:	f04f 33ff 	mov.w	r3, #4294967295
 8004592:	60fb      	str	r3, [r7, #12]
 8004594:	e016      	b.n	80045c4 <LPS22HB_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LPS22HB_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	2b02      	cmp	r3, #2
 800459c:	d112      	bne.n	80045c4 <LPS22HB_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d10d      	bne.n	80045c4 <LPS22HB_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 80045a8:	2301      	movs	r3, #1
 80045aa:	72fb      	strb	r3, [r7, #11]

          if (LPS22HB_Write_Reg(pObj, LPS22HB_CTRL_REG1, data) != LPS22HB_OK)
 80045ac:	7afb      	ldrb	r3, [r7, #11]
 80045ae:	461a      	mov	r2, r3
 80045b0:	2110      	movs	r1, #16
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 f9d5 	bl	8004962 <LPS22HB_Write_Reg>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d002      	beq.n	80045c4 <LPS22HB_RegisterBusIO+0xb8>
          {
            ret = LPS22HB_ERROR;
 80045be:	f04f 33ff 	mov.w	r3, #4294967295
 80045c2:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80045c4:	68fb      	ldr	r3, [r7, #12]
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3710      	adds	r7, #16
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	08004c1b 	.word	0x08004c1b
 80045d4:	08004ca1 	.word	0x08004ca1

080045d8 <LPS22HB_Init>:
 * @brief  Initialize the LPS22HB sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_Init(LPS22HB_Object_t *pObj)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b082      	sub	sp, #8
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d108      	bne.n	80045fc <LPS22HB_Init+0x24>
  {
    if (LPS22HB_Initialize(pObj) != LPS22HB_OK)
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 fabc 	bl	8004b68 <LPS22HB_Initialize>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d002      	beq.n	80045fc <LPS22HB_Init+0x24>
    {
      return LPS22HB_ERROR;
 80045f6:	f04f 33ff 	mov.w	r3, #4294967295
 80045fa:	e004      	b.n	8004606 <LPS22HB_Init+0x2e>
    }
  }

  pObj->is_initialized = 1U;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LPS22HB_OK;
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	3708      	adds	r7, #8
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}

0800460e <LPS22HB_DeInit>:
 * @brief  Deinitialize the LPS22HB sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_DeInit(LPS22HB_Object_t *pObj)
{
 800460e:	b580      	push	{r7, lr}
 8004610:	b082      	sub	sp, #8
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800461c:	2b01      	cmp	r3, #1
 800461e:	d111      	bne.n	8004644 <LPS22HB_DeInit+0x36>
  {
    if (LPS22HB_PRESS_Disable(pObj) != LPS22HB_OK)
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f000 f877 	bl	8004714 <LPS22HB_PRESS_Disable>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d002      	beq.n	8004632 <LPS22HB_DeInit+0x24>
    {
      return LPS22HB_ERROR;
 800462c:	f04f 33ff 	mov.w	r3, #4294967295
 8004630:	e00d      	b.n	800464e <LPS22HB_DeInit+0x40>
    }

    if (LPS22HB_TEMP_Disable(pObj) != LPS22HB_OK)
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f000 f913 	bl	800485e <LPS22HB_TEMP_Disable>
 8004638:	4603      	mov	r3, r0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d002      	beq.n	8004644 <LPS22HB_DeInit+0x36>
    {
      return LPS22HB_ERROR;
 800463e:	f04f 33ff 	mov.w	r3, #4294967295
 8004642:	e004      	b.n	800464e <LPS22HB_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LPS22HB_OK;
 800464c:	2300      	movs	r3, #0
}
 800464e:	4618      	mov	r0, r3
 8004650:	3708      	adds	r7, #8
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}

08004656 <LPS22HB_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_ReadID(LPS22HB_Object_t *pObj, uint8_t *Id)
{
 8004656:	b580      	push	{r7, lr}
 8004658:	b082      	sub	sp, #8
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
 800465e:	6039      	str	r1, [r7, #0]
  if (lps22hb_device_id_get(&(pObj->Ctx), Id) != LPS22HB_OK)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	331c      	adds	r3, #28
 8004664:	6839      	ldr	r1, [r7, #0]
 8004666:	4618      	mov	r0, r3
 8004668:	f000 fc98 	bl	8004f9c <lps22hb_device_id_get>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d002      	beq.n	8004678 <LPS22HB_ReadID+0x22>
  {
    return LPS22HB_ERROR;
 8004672:	f04f 33ff 	mov.w	r3, #4294967295
 8004676:	e000      	b.n	800467a <LPS22HB_ReadID+0x24>
  }

  return LPS22HB_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3708      	adds	r7, #8
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
	...

08004684 <LPS22HB_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LPS22HB sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_GetCapabilities(LPS22HB_Object_t *pObj, LPS22HB_Capabilities_t *Capabilities)
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	2200      	movs	r2, #0
 8004692:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 1;
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	2201      	movs	r2, #1
 8004698:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	2201      	movs	r2, #1
 800469e:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	2200      	movs	r2, #0
 80046a4:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 0.0f;
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	f04f 0200 	mov.w	r2, #0
 80046ac:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 75.0f;
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	4a05      	ldr	r2, [pc, #20]	; (80046c8 <LPS22HB_GetCapabilities+0x44>)
 80046b2:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 75.0f;
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	4a04      	ldr	r2, [pc, #16]	; (80046c8 <LPS22HB_GetCapabilities+0x44>)
 80046b8:	60da      	str	r2, [r3, #12]
  return LPS22HB_OK;
 80046ba:	2300      	movs	r3, #0
}
 80046bc:	4618      	mov	r0, r3
 80046be:	370c      	adds	r7, #12
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr
 80046c8:	42960000 	.word	0x42960000

080046cc <LPS22HB_PRESS_Enable>:
 * @brief  Enable the LPS22HB pressure sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_Enable(LPS22HB_Object_t *pObj)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b082      	sub	sp, #8
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d101      	bne.n	80046e2 <LPS22HB_PRESS_Enable+0x16>
  {
    return LPS22HB_OK;
 80046de:	2300      	movs	r3, #0
 80046e0:	e014      	b.n	800470c <LPS22HB_PRESS_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hb_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HB_OK)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f103 021c 	add.w	r2, r3, #28
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80046ee:	4619      	mov	r1, r3
 80046f0:	4610      	mov	r0, r2
 80046f2:	f000 fbc7 	bl	8004e84 <lps22hb_data_rate_set>
 80046f6:	4603      	mov	r3, r0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d002      	beq.n	8004702 <LPS22HB_PRESS_Enable+0x36>
  {
    return LPS22HB_ERROR;
 80046fc:	f04f 33ff 	mov.w	r3, #4294967295
 8004700:	e004      	b.n	800470c <LPS22HB_PRESS_Enable+0x40>
  }

  pObj->press_is_enabled = 1;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2201      	movs	r2, #1
 8004706:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LPS22HB_OK;
 800470a:	2300      	movs	r3, #0
}
 800470c:	4618      	mov	r0, r3
 800470e:	3708      	adds	r7, #8
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}

08004714 <LPS22HB_PRESS_Disable>:
 * @brief  Disable the LPS22HB pressure sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_Disable(LPS22HB_Object_t *pObj)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b082      	sub	sp, #8
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->press_is_enabled == 0U)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004722:	2b00      	cmp	r3, #0
 8004724:	d101      	bne.n	800472a <LPS22HB_PRESS_Disable+0x16>
  {
    return LPS22HB_OK;
 8004726:	2300      	movs	r3, #0
 8004728:	e024      	b.n	8004774 <LPS22HB_PRESS_Disable+0x60>
  }

  /* Check if the LPS22HB temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004730:	2b00      	cmp	r3, #0
 8004732:	d11a      	bne.n	800476a <LPS22HB_PRESS_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f103 021c 	add.w	r2, r3, #28
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	332b      	adds	r3, #43	; 0x2b
 800473e:	4619      	mov	r1, r3
 8004740:	4610      	mov	r0, r2
 8004742:	f000 fbc5 	bl	8004ed0 <lps22hb_data_rate_get>
 8004746:	4603      	mov	r3, r0
 8004748:	2b00      	cmp	r3, #0
 800474a:	d002      	beq.n	8004752 <LPS22HB_PRESS_Disable+0x3e>
    {
      return LPS22HB_ERROR;
 800474c:	f04f 33ff 	mov.w	r3, #4294967295
 8004750:	e010      	b.n	8004774 <LPS22HB_PRESS_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	331c      	adds	r3, #28
 8004756:	2100      	movs	r1, #0
 8004758:	4618      	mov	r0, r3
 800475a:	f000 fb93 	bl	8004e84 <lps22hb_data_rate_set>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d002      	beq.n	800476a <LPS22HB_PRESS_Disable+0x56>
    {
      return LPS22HB_ERROR;
 8004764:	f04f 33ff 	mov.w	r3, #4294967295
 8004768:	e004      	b.n	8004774 <LPS22HB_PRESS_Disable+0x60>
    }
  }

  pObj->press_is_enabled = 0;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LPS22HB_OK;
 8004772:	2300      	movs	r3, #0
}
 8004774:	4618      	mov	r0, r3
 8004776:	3708      	adds	r7, #8
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}

0800477c <LPS22HB_PRESS_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_GetOutputDataRate(LPS22HB_Object_t *pObj, float *Odr)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b082      	sub	sp, #8
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
  return LPS22HB_GetOutputDataRate(pObj, Odr);
 8004786:	6839      	ldr	r1, [r7, #0]
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f000 f905 	bl	8004998 <LPS22HB_GetOutputDataRate>
 800478e:	4603      	mov	r3, r0
}
 8004790:	4618      	mov	r0, r3
 8004792:	3708      	adds	r7, #8
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}

08004798 <LPS22HB_PRESS_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_SetOutputDataRate(LPS22HB_Object_t *pObj, float Odr)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b082      	sub	sp, #8
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	6039      	str	r1, [r7, #0]
  /* Check if the component is enabled */
  if (pObj->press_is_enabled == 1U)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d105      	bne.n	80047b8 <LPS22HB_PRESS_SetOutputDataRate+0x20>
  {
    return LPS22HB_SetOutputDataRate_When_Enabled(pObj, Odr);
 80047ac:	6839      	ldr	r1, [r7, #0]
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f000 f946 	bl	8004a40 <LPS22HB_SetOutputDataRate_When_Enabled>
 80047b4:	4603      	mov	r3, r0
 80047b6:	e004      	b.n	80047c2 <LPS22HB_PRESS_SetOutputDataRate+0x2a>
  }
  else
  {
    return LPS22HB_SetOutputDataRate_When_Disabled(pObj, Odr);
 80047b8:	6839      	ldr	r1, [r7, #0]
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 f996 	bl	8004aec <LPS22HB_SetOutputDataRate_When_Disabled>
 80047c0:	4603      	mov	r3, r0
  }
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3708      	adds	r7, #8
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}

080047ca <LPS22HB_PRESS_GetPressure>:
 * @param  pObj the device pObj
 * @param  Value pointer where the pressure value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_GetPressure(LPS22HB_Object_t *pObj, float *Value)
{
 80047ca:	b580      	push	{r7, lr}
 80047cc:	b084      	sub	sp, #16
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	6078      	str	r0, [r7, #4]
 80047d2:	6039      	str	r1, [r7, #0]
  lps22hb_axis1bit32_t data_raw_pressure;

  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 80047d4:	f107 030c 	add.w	r3, r7, #12
 80047d8:	2204      	movs	r2, #4
 80047da:	2100      	movs	r1, #0
 80047dc:	4618      	mov	r0, r3
 80047de:	f015 fe12 	bl	801a406 <memset>
  if (lps22hb_pressure_raw_get(&(pObj->Ctx), data_raw_pressure.u8bit) != LPS22HB_OK)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	331c      	adds	r3, #28
 80047e6:	f107 020c 	add.w	r2, r7, #12
 80047ea:	4611      	mov	r1, r2
 80047ec:	4618      	mov	r0, r3
 80047ee:	f000 fbb3 	bl	8004f58 <lps22hb_pressure_raw_get>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d002      	beq.n	80047fe <LPS22HB_PRESS_GetPressure+0x34>
  {
    return LPS22HB_ERROR;
 80047f8:	f04f 33ff 	mov.w	r3, #4294967295
 80047fc:	e007      	b.n	800480e <LPS22HB_PRESS_GetPressure+0x44>
  }

  *Value = lps22hb_from_lsb_to_hpa(data_raw_pressure.i32bit);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	4618      	mov	r0, r3
 8004802:	f000 fac1 	bl	8004d88 <lps22hb_from_lsb_to_hpa>
 8004806:	4602      	mov	r2, r0
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	601a      	str	r2, [r3, #0]

  return LPS22HB_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3710      	adds	r7, #16
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}

08004816 <LPS22HB_TEMP_Enable>:
 * @brief  Enable the LPS22HB temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_Enable(LPS22HB_Object_t *pObj)
{
 8004816:	b580      	push	{r7, lr}
 8004818:	b082      	sub	sp, #8
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004824:	2b01      	cmp	r3, #1
 8004826:	d101      	bne.n	800482c <LPS22HB_TEMP_Enable+0x16>
  {
    return LPS22HB_OK;
 8004828:	2300      	movs	r3, #0
 800482a:	e014      	b.n	8004856 <LPS22HB_TEMP_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hb_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HB_OK)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f103 021c 	add.w	r2, r3, #28
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004838:	4619      	mov	r1, r3
 800483a:	4610      	mov	r0, r2
 800483c:	f000 fb22 	bl	8004e84 <lps22hb_data_rate_set>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d002      	beq.n	800484c <LPS22HB_TEMP_Enable+0x36>
  {
    return LPS22HB_ERROR;
 8004846:	f04f 33ff 	mov.w	r3, #4294967295
 800484a:	e004      	b.n	8004856 <LPS22HB_TEMP_Enable+0x40>
  }

  pObj->temp_is_enabled = 1;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LPS22HB_OK;
 8004854:	2300      	movs	r3, #0
}
 8004856:	4618      	mov	r0, r3
 8004858:	3708      	adds	r7, #8
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}

0800485e <LPS22HB_TEMP_Disable>:
 * @brief  Disable the LPS22HB temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_Disable(LPS22HB_Object_t *pObj)
{
 800485e:	b580      	push	{r7, lr}
 8004860:	b082      	sub	sp, #8
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800486c:	2b00      	cmp	r3, #0
 800486e:	d101      	bne.n	8004874 <LPS22HB_TEMP_Disable+0x16>
  {
    return LPS22HB_OK;
 8004870:	2300      	movs	r3, #0
 8004872:	e024      	b.n	80048be <LPS22HB_TEMP_Disable+0x60>
  }

  /* Check if the LPS22HB pressure sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->press_is_enabled == 0U)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800487a:	2b00      	cmp	r3, #0
 800487c:	d11a      	bne.n	80048b4 <LPS22HB_TEMP_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f103 021c 	add.w	r2, r3, #28
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	332b      	adds	r3, #43	; 0x2b
 8004888:	4619      	mov	r1, r3
 800488a:	4610      	mov	r0, r2
 800488c:	f000 fb20 	bl	8004ed0 <lps22hb_data_rate_get>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d002      	beq.n	800489c <LPS22HB_TEMP_Disable+0x3e>
    {
      return LPS22HB_ERROR;
 8004896:	f04f 33ff 	mov.w	r3, #4294967295
 800489a:	e010      	b.n	80048be <LPS22HB_TEMP_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	331c      	adds	r3, #28
 80048a0:	2100      	movs	r1, #0
 80048a2:	4618      	mov	r0, r3
 80048a4:	f000 faee 	bl	8004e84 <lps22hb_data_rate_set>
 80048a8:	4603      	mov	r3, r0
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d002      	beq.n	80048b4 <LPS22HB_TEMP_Disable+0x56>
    {
      return LPS22HB_ERROR;
 80048ae:	f04f 33ff 	mov.w	r3, #4294967295
 80048b2:	e004      	b.n	80048be <LPS22HB_TEMP_Disable+0x60>
    }
  }

  pObj->temp_is_enabled = 0;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LPS22HB_OK;
 80048bc:	2300      	movs	r3, #0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3708      	adds	r7, #8
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}

080048c6 <LPS22HB_TEMP_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_GetOutputDataRate(LPS22HB_Object_t *pObj, float *Odr)
{
 80048c6:	b580      	push	{r7, lr}
 80048c8:	b082      	sub	sp, #8
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
 80048ce:	6039      	str	r1, [r7, #0]
  return LPS22HB_GetOutputDataRate(pObj, Odr);
 80048d0:	6839      	ldr	r1, [r7, #0]
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 f860 	bl	8004998 <LPS22HB_GetOutputDataRate>
 80048d8:	4603      	mov	r3, r0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3708      	adds	r7, #8
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}

080048e2 <LPS22HB_TEMP_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_SetOutputDataRate(LPS22HB_Object_t *pObj, float Odr)
{
 80048e2:	b580      	push	{r7, lr}
 80048e4:	b082      	sub	sp, #8
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
 80048ea:	6039      	str	r1, [r7, #0]
  /* Check if the component is enabled */
  if (pObj->temp_is_enabled == 1U)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d105      	bne.n	8004902 <LPS22HB_TEMP_SetOutputDataRate+0x20>
  {
    return LPS22HB_SetOutputDataRate_When_Enabled(pObj, Odr);
 80048f6:	6839      	ldr	r1, [r7, #0]
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f000 f8a1 	bl	8004a40 <LPS22HB_SetOutputDataRate_When_Enabled>
 80048fe:	4603      	mov	r3, r0
 8004900:	e004      	b.n	800490c <LPS22HB_TEMP_SetOutputDataRate+0x2a>
  }
  else
  {
    return LPS22HB_SetOutputDataRate_When_Disabled(pObj, Odr);
 8004902:	6839      	ldr	r1, [r7, #0]
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f000 f8f1 	bl	8004aec <LPS22HB_SetOutputDataRate_When_Disabled>
 800490a:	4603      	mov	r3, r0
  }
}
 800490c:	4618      	mov	r0, r3
 800490e:	3708      	adds	r7, #8
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <LPS22HB_TEMP_GetTemperature>:
 * @param  pObj the device pObj
 * @param  Value pointer where the temperature value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_GetTemperature(LPS22HB_Object_t *pObj, float *Value)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  lps22hb_axis1bit16_t data_raw_temperature;

  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 800491e:	f107 030c 	add.w	r3, r7, #12
 8004922:	2202      	movs	r2, #2
 8004924:	2100      	movs	r1, #0
 8004926:	4618      	mov	r0, r3
 8004928:	f015 fd6d 	bl	801a406 <memset>
  if (lps22hb_temperature_raw_get(&(pObj->Ctx), data_raw_temperature.u8bit) != LPS22HB_OK)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	331c      	adds	r3, #28
 8004930:	f107 020c 	add.w	r2, r7, #12
 8004934:	4611      	mov	r1, r2
 8004936:	4618      	mov	r0, r3
 8004938:	f000 fb1f 	bl	8004f7a <lps22hb_temperature_raw_get>
 800493c:	4603      	mov	r3, r0
 800493e:	2b00      	cmp	r3, #0
 8004940:	d002      	beq.n	8004948 <LPS22HB_TEMP_GetTemperature+0x34>
  {
    return LPS22HB_ERROR;
 8004942:	f04f 33ff 	mov.w	r3, #4294967295
 8004946:	e008      	b.n	800495a <LPS22HB_TEMP_GetTemperature+0x46>
  }

  *Value = lps22hb_from_lsb_to_degc(data_raw_temperature.i16bit);
 8004948:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800494c:	4618      	mov	r0, r3
 800494e:	f000 fa33 	bl	8004db8 <lps22hb_from_lsb_to_degc>
 8004952:	4602      	mov	r2, r0
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	601a      	str	r2, [r3, #0]

  return LPS22HB_OK;
 8004958:	2300      	movs	r3, #0
}
 800495a:	4618      	mov	r0, r3
 800495c:	3710      	adds	r7, #16
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}

08004962 <LPS22HB_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_Write_Reg(LPS22HB_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8004962:	b580      	push	{r7, lr}
 8004964:	b082      	sub	sp, #8
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
 800496a:	460b      	mov	r3, r1
 800496c:	70fb      	strb	r3, [r7, #3]
 800496e:	4613      	mov	r3, r2
 8004970:	70bb      	strb	r3, [r7, #2]
  if (lps22hb_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HB_OK)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f103 001c 	add.w	r0, r3, #28
 8004978:	1cba      	adds	r2, r7, #2
 800497a:	78f9      	ldrb	r1, [r7, #3]
 800497c:	2301      	movs	r3, #1
 800497e:	f000 f9ea 	bl	8004d56 <lps22hb_write_reg>
 8004982:	4603      	mov	r3, r0
 8004984:	2b00      	cmp	r3, #0
 8004986:	d002      	beq.n	800498e <LPS22HB_Write_Reg+0x2c>
  {
    return LPS22HB_ERROR;
 8004988:	f04f 33ff 	mov.w	r3, #4294967295
 800498c:	e000      	b.n	8004990 <LPS22HB_Write_Reg+0x2e>
  }

  return LPS22HB_OK;
 800498e:	2300      	movs	r3, #0
}
 8004990:	4618      	mov	r0, r3
 8004992:	3708      	adds	r7, #8
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}

08004998 <LPS22HB_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_GetOutputDataRate(LPS22HB_Object_t *pObj, float *Odr)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HB_OK;
 80049a2:	2300      	movs	r3, #0
 80049a4:	60fb      	str	r3, [r7, #12]
  lps22hb_odr_t odr_low_level;

  if (lps22hb_data_rate_get(&(pObj->Ctx), &odr_low_level) != LPS22HB_OK)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	331c      	adds	r3, #28
 80049aa:	f107 020b 	add.w	r2, r7, #11
 80049ae:	4611      	mov	r1, r2
 80049b0:	4618      	mov	r0, r3
 80049b2:	f000 fa8d 	bl	8004ed0 <lps22hb_data_rate_get>
 80049b6:	4603      	mov	r3, r0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d002      	beq.n	80049c2 <LPS22HB_GetOutputDataRate+0x2a>
  {
    return LPS22HB_ERROR;
 80049bc:	f04f 33ff 	mov.w	r3, #4294967295
 80049c0:	e031      	b.n	8004a26 <LPS22HB_GetOutputDataRate+0x8e>
  }

  switch (odr_low_level)
 80049c2:	7afb      	ldrb	r3, [r7, #11]
 80049c4:	2b05      	cmp	r3, #5
 80049c6:	d829      	bhi.n	8004a1c <LPS22HB_GetOutputDataRate+0x84>
 80049c8:	a201      	add	r2, pc, #4	; (adr r2, 80049d0 <LPS22HB_GetOutputDataRate+0x38>)
 80049ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ce:	bf00      	nop
 80049d0:	080049e9 	.word	0x080049e9
 80049d4:	080049f3 	.word	0x080049f3
 80049d8:	080049fd 	.word	0x080049fd
 80049dc:	08004a05 	.word	0x08004a05
 80049e0:	08004a0d 	.word	0x08004a0d
 80049e4:	08004a15 	.word	0x08004a15
  {
    case LPS22HB_POWER_DOWN:
      *Odr = 0.0f;
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	f04f 0200 	mov.w	r2, #0
 80049ee:	601a      	str	r2, [r3, #0]
      break;
 80049f0:	e018      	b.n	8004a24 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_1_Hz:
      *Odr = 1.0f;
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80049f8:	601a      	str	r2, [r3, #0]
      break;
 80049fa:	e013      	b.n	8004a24 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_10_Hz:
      *Odr = 10.0f;
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	4a0c      	ldr	r2, [pc, #48]	; (8004a30 <LPS22HB_GetOutputDataRate+0x98>)
 8004a00:	601a      	str	r2, [r3, #0]
      break;
 8004a02:	e00f      	b.n	8004a24 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_25_Hz:
      *Odr = 25.0f;
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	4a0b      	ldr	r2, [pc, #44]	; (8004a34 <LPS22HB_GetOutputDataRate+0x9c>)
 8004a08:	601a      	str	r2, [r3, #0]
      break;
 8004a0a:	e00b      	b.n	8004a24 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_50_Hz:
      *Odr = 50.0f;
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	4a0a      	ldr	r2, [pc, #40]	; (8004a38 <LPS22HB_GetOutputDataRate+0xa0>)
 8004a10:	601a      	str	r2, [r3, #0]
      break;
 8004a12:	e007      	b.n	8004a24 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_75_Hz:
      *Odr = 75.0f;
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	4a09      	ldr	r2, [pc, #36]	; (8004a3c <LPS22HB_GetOutputDataRate+0xa4>)
 8004a18:	601a      	str	r2, [r3, #0]
      break;
 8004a1a:	e003      	b.n	8004a24 <LPS22HB_GetOutputDataRate+0x8c>

    default:
      ret = LPS22HB_ERROR;
 8004a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8004a20:	60fb      	str	r3, [r7, #12]
      break;
 8004a22:	bf00      	nop
  }

  return ret;
 8004a24:	68fb      	ldr	r3, [r7, #12]
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3710      	adds	r7, #16
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	41200000 	.word	0x41200000
 8004a34:	41c80000 	.word	0x41c80000
 8004a38:	42480000 	.word	0x42480000
 8004a3c:	42960000 	.word	0x42960000

08004a40 <LPS22HB_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_SetOutputDataRate_When_Enabled(LPS22HB_Object_t *pObj, float Odr)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]
  lps22hb_odr_t new_odr;

  new_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
            : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 8004a4a:	edd7 7a00 	vldr	s15, [r7]
 8004a4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a5a:	d801      	bhi.n	8004a60 <LPS22HB_SetOutputDataRate_When_Enabled+0x20>
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e021      	b.n	8004aa4 <LPS22HB_SetOutputDataRate_When_Enabled+0x64>
 8004a60:	edd7 7a00 	vldr	s15, [r7]
 8004a64:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004a68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a70:	d801      	bhi.n	8004a76 <LPS22HB_SetOutputDataRate_When_Enabled+0x36>
 8004a72:	2302      	movs	r3, #2
 8004a74:	e016      	b.n	8004aa4 <LPS22HB_SetOutputDataRate_When_Enabled+0x64>
 8004a76:	edd7 7a00 	vldr	s15, [r7]
 8004a7a:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8004a7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a86:	d801      	bhi.n	8004a8c <LPS22HB_SetOutputDataRate_When_Enabled+0x4c>
 8004a88:	2303      	movs	r3, #3
 8004a8a:	e00b      	b.n	8004aa4 <LPS22HB_SetOutputDataRate_When_Enabled+0x64>
 8004a8c:	edd7 7a00 	vldr	s15, [r7]
 8004a90:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8004ae8 <LPS22HB_SetOutputDataRate_When_Enabled+0xa8>
 8004a94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a9c:	d801      	bhi.n	8004aa2 <LPS22HB_SetOutputDataRate_When_Enabled+0x62>
 8004a9e:	2304      	movs	r3, #4
 8004aa0:	e000      	b.n	8004aa4 <LPS22HB_SetOutputDataRate_When_Enabled+0x64>
 8004aa2:	2305      	movs	r3, #5
  new_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
 8004aa4:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 25.0f) ? LPS22HB_ODR_25_Hz
            : (Odr <= 50.0f) ? LPS22HB_ODR_50_Hz
            :                  LPS22HB_ODR_75_Hz;

  if (lps22hb_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HB_OK)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	331c      	adds	r3, #28
 8004aaa:	7bfa      	ldrb	r2, [r7, #15]
 8004aac:	4611      	mov	r1, r2
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f000 f9e8 	bl	8004e84 <lps22hb_data_rate_set>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d002      	beq.n	8004ac0 <LPS22HB_SetOutputDataRate_When_Enabled+0x80>
  {
    return LPS22HB_ERROR;
 8004aba:	f04f 33ff 	mov.w	r3, #4294967295
 8004abe:	e00f      	b.n	8004ae0 <LPS22HB_SetOutputDataRate_When_Enabled+0xa0>
  }

  if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f103 021c 	add.w	r2, r3, #28
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	332b      	adds	r3, #43	; 0x2b
 8004aca:	4619      	mov	r1, r3
 8004acc:	4610      	mov	r0, r2
 8004ace:	f000 f9ff 	bl	8004ed0 <lps22hb_data_rate_get>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d002      	beq.n	8004ade <LPS22HB_SetOutputDataRate_When_Enabled+0x9e>
  {
    return LPS22HB_ERROR;
 8004ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8004adc:	e000      	b.n	8004ae0 <LPS22HB_SetOutputDataRate_When_Enabled+0xa0>
  }

  return LPS22HB_OK;
 8004ade:	2300      	movs	r3, #0
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3710      	adds	r7, #16
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	42480000 	.word	0x42480000

08004aec <LPS22HB_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_SetOutputDataRate_When_Disabled(LPS22HB_Object_t *pObj, float Odr)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
  pObj->last_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
                   : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 8004af6:	edd7 7a00 	vldr	s15, [r7]
 8004afa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004afe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b06:	d801      	bhi.n	8004b0c <LPS22HB_SetOutputDataRate_When_Disabled+0x20>
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e021      	b.n	8004b50 <LPS22HB_SetOutputDataRate_When_Disabled+0x64>
 8004b0c:	edd7 7a00 	vldr	s15, [r7]
 8004b10:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004b14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b1c:	d801      	bhi.n	8004b22 <LPS22HB_SetOutputDataRate_When_Disabled+0x36>
 8004b1e:	2302      	movs	r3, #2
 8004b20:	e016      	b.n	8004b50 <LPS22HB_SetOutputDataRate_When_Disabled+0x64>
 8004b22:	edd7 7a00 	vldr	s15, [r7]
 8004b26:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8004b2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b32:	d801      	bhi.n	8004b38 <LPS22HB_SetOutputDataRate_When_Disabled+0x4c>
 8004b34:	2303      	movs	r3, #3
 8004b36:	e00b      	b.n	8004b50 <LPS22HB_SetOutputDataRate_When_Disabled+0x64>
 8004b38:	edd7 7a00 	vldr	s15, [r7]
 8004b3c:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8004b64 <LPS22HB_SetOutputDataRate_When_Disabled+0x78>
 8004b40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b48:	d801      	bhi.n	8004b4e <LPS22HB_SetOutputDataRate_When_Disabled+0x62>
 8004b4a:	2304      	movs	r3, #4
 8004b4c:	e000      	b.n	8004b50 <LPS22HB_SetOutputDataRate_When_Disabled+0x64>
 8004b4e:	2305      	movs	r3, #5
  pObj->last_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                   : (Odr <= 25.0f) ? LPS22HB_ODR_25_Hz
                   : (Odr <= 50.0f) ? LPS22HB_ODR_50_Hz
                   :                  LPS22HB_ODR_75_Hz;

  return LPS22HB_OK;
 8004b56:	2300      	movs	r3, #0
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	370c      	adds	r7, #12
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr
 8004b64:	42480000 	.word	0x42480000

08004b68 <LPS22HB_Initialize>:
 * @brief  Initialize the LPS22HB sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_Initialize(LPS22HB_Object_t *pObj)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b082      	sub	sp, #8
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  /* Set Power mode */
  if (lps22hb_low_power_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	331c      	adds	r3, #28
 8004b74:	2101      	movs	r1, #1
 8004b76:	4618      	mov	r0, r3
 8004b78:	f000 fa21 	bl	8004fbe <lps22hb_low_power_set>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d002      	beq.n	8004b88 <LPS22HB_Initialize+0x20>
  {
    return LPS22HB_ERROR;
 8004b82:	f04f 33ff 	mov.w	r3, #4294967295
 8004b86:	e044      	b.n	8004c12 <LPS22HB_Initialize+0xaa>
  }

  /* Power down the device */
  if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	331c      	adds	r3, #28
 8004b8c:	2100      	movs	r1, #0
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f000 f978 	bl	8004e84 <lps22hb_data_rate_set>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d002      	beq.n	8004ba0 <LPS22HB_Initialize+0x38>
  {
    return LPS22HB_ERROR;
 8004b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8004b9e:	e038      	b.n	8004c12 <LPS22HB_Initialize+0xaa>
  }

  /* Disable low-pass filter on LPS22HB pressure data */
  if (lps22hb_low_pass_filter_mode_set(&(pObj->Ctx), LPS22HB_LPF_ODR_DIV_9) != LPS22HB_OK)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	331c      	adds	r3, #28
 8004ba4:	2102      	movs	r1, #2
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f000 f946 	bl	8004e38 <lps22hb_low_pass_filter_mode_set>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d002      	beq.n	8004bb8 <LPS22HB_Initialize+0x50>
  {
    return LPS22HB_ERROR;
 8004bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8004bb6:	e02c      	b.n	8004c12 <LPS22HB_Initialize+0xaa>
  }

  if (lps22hb_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	331c      	adds	r3, #28
 8004bbc:	2101      	movs	r1, #1
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f000 f914 	bl	8004dec <lps22hb_block_data_update_set>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d002      	beq.n	8004bd0 <LPS22HB_Initialize+0x68>
  {
    return LPS22HB_ERROR;
 8004bca:	f04f 33ff 	mov.w	r3, #4294967295
 8004bce:	e020      	b.n	8004c12 <LPS22HB_Initialize+0xaa>
  }

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d10b      	bne.n	8004bf0 <LPS22HB_Initialize+0x88>
  {
    if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_DISABLE) != LPS22HB_OK)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	331c      	adds	r3, #28
 8004bdc:	2100      	movs	r1, #0
 8004bde:	4618      	mov	r0, r3
 8004be0:	f000 fa13 	bl	800500a <lps22hb_auto_add_inc_set>
 8004be4:	4603      	mov	r3, r0
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d00e      	beq.n	8004c08 <LPS22HB_Initialize+0xa0>
    {
      return LPS22HB_ERROR;
 8004bea:	f04f 33ff 	mov.w	r3, #4294967295
 8004bee:	e010      	b.n	8004c12 <LPS22HB_Initialize+0xaa>
    }
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	331c      	adds	r3, #28
 8004bf4:	2101      	movs	r1, #1
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f000 fa07 	bl	800500a <lps22hb_auto_add_inc_set>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d002      	beq.n	8004c08 <LPS22HB_Initialize+0xa0>
    {
      return LPS22HB_ERROR;
 8004c02:	f04f 33ff 	mov.w	r3, #4294967295
 8004c06:	e004      	b.n	8004c12 <LPS22HB_Initialize+0xaa>
    }
  }

  pObj->last_odr = LPS22HB_ODR_25_Hz;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2203      	movs	r2, #3
 8004c0c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  return LPS22HB_OK;
 8004c10:	2300      	movs	r3, #0
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3708      	adds	r7, #8
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}

08004c1a <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004c1a:	b590      	push	{r4, r7, lr}
 8004c1c:	b089      	sub	sp, #36	; 0x24
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	60f8      	str	r0, [r7, #12]
 8004c22:	607a      	str	r2, [r7, #4]
 8004c24:	461a      	mov	r2, r3
 8004c26:	460b      	mov	r3, r1
 8004c28:	72fb      	strb	r3, [r7, #11]
 8004c2a:	4613      	mov	r3, r2
 8004c2c:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = LPS22HB_OK;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	61bb      	str	r3, [r7, #24]
  LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d121      	bne.n	8004c82 <ReadRegWrap+0x68>
  {
    for (i = 0; i < Length; i++)
 8004c3e:	2300      	movs	r3, #0
 8004c40:	83fb      	strh	r3, [r7, #30]
 8004c42:	e018      	b.n	8004c76 <ReadRegWrap+0x5c>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	695c      	ldr	r4, [r3, #20]
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	7b1b      	ldrb	r3, [r3, #12]
 8004c4c:	b298      	uxth	r0, r3
 8004c4e:	7afb      	ldrb	r3, [r7, #11]
 8004c50:	b29a      	uxth	r2, r3
 8004c52:	8bfb      	ldrh	r3, [r7, #30]
 8004c54:	4413      	add	r3, r2
 8004c56:	b299      	uxth	r1, r3
 8004c58:	8bfb      	ldrh	r3, [r7, #30]
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	441a      	add	r2, r3
 8004c5e:	2301      	movs	r3, #1
 8004c60:	47a0      	blx	r4
 8004c62:	61b8      	str	r0, [r7, #24]
      if (ret != LPS22HB_OK)
 8004c64:	69bb      	ldr	r3, [r7, #24]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d002      	beq.n	8004c70 <ReadRegWrap+0x56>
      {
        return LPS22HB_ERROR;
 8004c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c6e:	e013      	b.n	8004c98 <ReadRegWrap+0x7e>
    for (i = 0; i < Length; i++)
 8004c70:	8bfb      	ldrh	r3, [r7, #30]
 8004c72:	3301      	adds	r3, #1
 8004c74:	83fb      	strh	r3, [r7, #30]
 8004c76:	8bfa      	ldrh	r2, [r7, #30]
 8004c78:	893b      	ldrh	r3, [r7, #8]
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d3e2      	bcc.n	8004c44 <ReadRegWrap+0x2a>
      }
    }

    return ret;
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	e00a      	b.n	8004c98 <ReadRegWrap+0x7e>
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	695c      	ldr	r4, [r3, #20]
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	7b1b      	ldrb	r3, [r3, #12]
 8004c8a:	b298      	uxth	r0, r3
 8004c8c:	7afb      	ldrb	r3, [r7, #11]
 8004c8e:	b299      	uxth	r1, r3
 8004c90:	893b      	ldrh	r3, [r7, #8]
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	47a0      	blx	r4
 8004c96:	4603      	mov	r3, r0
  }
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3724      	adds	r7, #36	; 0x24
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd90      	pop	{r4, r7, pc}

08004ca0 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004ca0:	b590      	push	{r4, r7, lr}
 8004ca2:	b089      	sub	sp, #36	; 0x24
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	607a      	str	r2, [r7, #4]
 8004caa:	461a      	mov	r2, r3
 8004cac:	460b      	mov	r3, r1
 8004cae:	72fb      	strb	r3, [r7, #11]
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = LPS22HB_OK;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	61bb      	str	r3, [r7, #24]
  LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d121      	bne.n	8004d08 <WriteRegWrap+0x68>
  {
    for (i = 0; i < Length; i++)
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	83fb      	strh	r3, [r7, #30]
 8004cc8:	e018      	b.n	8004cfc <WriteRegWrap+0x5c>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	691c      	ldr	r4, [r3, #16]
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	7b1b      	ldrb	r3, [r3, #12]
 8004cd2:	b298      	uxth	r0, r3
 8004cd4:	7afb      	ldrb	r3, [r7, #11]
 8004cd6:	b29a      	uxth	r2, r3
 8004cd8:	8bfb      	ldrh	r3, [r7, #30]
 8004cda:	4413      	add	r3, r2
 8004cdc:	b299      	uxth	r1, r3
 8004cde:	8bfb      	ldrh	r3, [r7, #30]
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	441a      	add	r2, r3
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	47a0      	blx	r4
 8004ce8:	61b8      	str	r0, [r7, #24]
      if (ret != LPS22HB_OK)
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d002      	beq.n	8004cf6 <WriteRegWrap+0x56>
      {
        return LPS22HB_ERROR;
 8004cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8004cf4:	e013      	b.n	8004d1e <WriteRegWrap+0x7e>
    for (i = 0; i < Length; i++)
 8004cf6:	8bfb      	ldrh	r3, [r7, #30]
 8004cf8:	3301      	adds	r3, #1
 8004cfa:	83fb      	strh	r3, [r7, #30]
 8004cfc:	8bfa      	ldrh	r2, [r7, #30]
 8004cfe:	893b      	ldrh	r3, [r7, #8]
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d3e2      	bcc.n	8004cca <WriteRegWrap+0x2a>
      }
    }

    return ret;
 8004d04:	69bb      	ldr	r3, [r7, #24]
 8004d06:	e00a      	b.n	8004d1e <WriteRegWrap+0x7e>
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	691c      	ldr	r4, [r3, #16]
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	7b1b      	ldrb	r3, [r3, #12]
 8004d10:	b298      	uxth	r0, r3
 8004d12:	7afb      	ldrb	r3, [r7, #11]
 8004d14:	b299      	uxth	r1, r3
 8004d16:	893b      	ldrh	r3, [r7, #8]
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	47a0      	blx	r4
 8004d1c:	4603      	mov	r3, r0
  }
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3724      	adds	r7, #36	; 0x24
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd90      	pop	{r4, r7, pc}

08004d26 <lps22hb_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hb_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 8004d26:	b590      	push	{r4, r7, lr}
 8004d28:	b087      	sub	sp, #28
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	60f8      	str	r0, [r7, #12]
 8004d2e:	607a      	str	r2, [r7, #4]
 8004d30:	461a      	mov	r2, r3
 8004d32:	460b      	mov	r3, r1
 8004d34:	72fb      	strb	r3, [r7, #11]
 8004d36:	4613      	mov	r3, r2
 8004d38:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	685c      	ldr	r4, [r3, #4]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6898      	ldr	r0, [r3, #8]
 8004d42:	893b      	ldrh	r3, [r7, #8]
 8004d44:	7af9      	ldrb	r1, [r7, #11]
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	47a0      	blx	r4
 8004d4a:	6178      	str	r0, [r7, #20]
  return ret;
 8004d4c:	697b      	ldr	r3, [r7, #20]
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	371c      	adds	r7, #28
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd90      	pop	{r4, r7, pc}

08004d56 <lps22hb_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hb_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 8004d56:	b590      	push	{r4, r7, lr}
 8004d58:	b087      	sub	sp, #28
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	60f8      	str	r0, [r7, #12]
 8004d5e:	607a      	str	r2, [r7, #4]
 8004d60:	461a      	mov	r2, r3
 8004d62:	460b      	mov	r3, r1
 8004d64:	72fb      	strb	r3, [r7, #11]
 8004d66:	4613      	mov	r3, r2
 8004d68:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681c      	ldr	r4, [r3, #0]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6898      	ldr	r0, [r3, #8]
 8004d72:	893b      	ldrh	r3, [r7, #8]
 8004d74:	7af9      	ldrb	r1, [r7, #11]
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	47a0      	blx	r4
 8004d7a:	6178      	str	r0, [r7, #20]
  return ret;
 8004d7c:	697b      	ldr	r3, [r7, #20]
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	371c      	adds	r7, #28
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd90      	pop	{r4, r7, pc}
	...

08004d88 <lps22hb_from_lsb_to_hpa>:
  * @{
  *
  */

float_t lps22hb_from_lsb_to_hpa(int32_t lsb)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  return ( (float_t)lsb / 4096.0f );
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	ee07 3a90 	vmov	s15, r3
 8004d96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d9a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004db4 <lps22hb_from_lsb_to_hpa+0x2c>
 8004d9e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004da2:	ee16 3a90 	vmov	r3, s13
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	370c      	adds	r7, #12
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr
 8004db2:	bf00      	nop
 8004db4:	45800000 	.word	0x45800000

08004db8 <lps22hb_from_lsb_to_degc>:

float_t lps22hb_from_lsb_to_degc(int16_t lsb)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	80fb      	strh	r3, [r7, #6]
  return ( (float_t)lsb / 100.0f );
 8004dc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004dc6:	ee07 3a90 	vmov	s15, r3
 8004dca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004dce:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004de8 <lps22hb_from_lsb_to_degc+0x30>
 8004dd2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004dd6:	ee16 3a90 	vmov	r3, s13
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	370c      	adds	r7, #12
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr
 8004de6:	bf00      	nop
 8004de8:	42c80000 	.word	0x42c80000

08004dec <lps22hb_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	460b      	mov	r3, r1
 8004df6:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8004df8:	f107 0208 	add.w	r2, r7, #8
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	2110      	movs	r1, #16
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f7ff ff90 	bl	8004d26 <lps22hb_read_reg>
 8004e06:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d10f      	bne.n	8004e2e <lps22hb_block_data_update_set+0x42>
    ctrl_reg1.bdu = val;
 8004e0e:	78fb      	ldrb	r3, [r7, #3]
 8004e10:	f003 0301 	and.w	r3, r3, #1
 8004e14:	b2da      	uxtb	r2, r3
 8004e16:	7a3b      	ldrb	r3, [r7, #8]
 8004e18:	f362 0341 	bfi	r3, r2, #1, #1
 8004e1c:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8004e1e:	f107 0208 	add.w	r2, r7, #8
 8004e22:	2301      	movs	r3, #1
 8004e24:	2110      	movs	r1, #16
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f7ff ff95 	bl	8004d56 <lps22hb_write_reg>
 8004e2c:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3710      	adds	r7, #16
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}

08004e38 <lps22hb_low_pass_filter_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_low_pass_filter_mode_set(stmdev_ctx_t *ctx,
                                          lps22hb_lpfp_t val)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b084      	sub	sp, #16
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	460b      	mov	r3, r1
 8004e42:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8004e44:	f107 0208 	add.w	r2, r7, #8
 8004e48:	2301      	movs	r3, #1
 8004e4a:	2110      	movs	r1, #16
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f7ff ff6a 	bl	8004d26 <lps22hb_read_reg>
 8004e52:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d10f      	bne.n	8004e7a <lps22hb_low_pass_filter_mode_set+0x42>
    ctrl_reg1.lpfp = (uint8_t)val;
 8004e5a:	78fb      	ldrb	r3, [r7, #3]
 8004e5c:	f003 0303 	and.w	r3, r3, #3
 8004e60:	b2da      	uxtb	r2, r3
 8004e62:	7a3b      	ldrb	r3, [r7, #8]
 8004e64:	f362 0383 	bfi	r3, r2, #2, #2
 8004e68:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8004e6a:	f107 0208 	add.w	r2, r7, #8
 8004e6e:	2301      	movs	r3, #1
 8004e70:	2110      	movs	r1, #16
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f7ff ff6f 	bl	8004d56 <lps22hb_write_reg>
 8004e78:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3710      	adds	r7, #16
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <lps22hb_data_rate_set>:
  * @param  val    Change the values of odr in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_data_rate_set(stmdev_ctx_t *ctx, lps22hb_odr_t val)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	460b      	mov	r3, r1
 8004e8e:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8004e90:	f107 0208 	add.w	r2, r7, #8
 8004e94:	2301      	movs	r3, #1
 8004e96:	2110      	movs	r1, #16
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f7ff ff44 	bl	8004d26 <lps22hb_read_reg>
 8004e9e:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d10f      	bne.n	8004ec6 <lps22hb_data_rate_set+0x42>
    ctrl_reg1.odr = (uint8_t)val;
 8004ea6:	78fb      	ldrb	r3, [r7, #3]
 8004ea8:	f003 0307 	and.w	r3, r3, #7
 8004eac:	b2da      	uxtb	r2, r3
 8004eae:	7a3b      	ldrb	r3, [r7, #8]
 8004eb0:	f362 1306 	bfi	r3, r2, #4, #3
 8004eb4:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8004eb6:	f107 0208 	add.w	r2, r7, #8
 8004eba:	2301      	movs	r3, #1
 8004ebc:	2110      	movs	r1, #16
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f7ff ff49 	bl	8004d56 <lps22hb_write_reg>
 8004ec4:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3710      	adds	r7, #16
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <lps22hb_data_rate_get>:
  * @param  val    Get the values of odr in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_data_rate_get(stmdev_ctx_t *ctx, lps22hb_odr_t *val)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8004eda:	f107 0208 	add.w	r2, r7, #8
 8004ede:	2301      	movs	r3, #1
 8004ee0:	2110      	movs	r1, #16
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f7ff ff1f 	bl	8004d26 <lps22hb_read_reg>
 8004ee8:	60f8      	str	r0, [r7, #12]
  switch (ctrl_reg1.odr){
 8004eea:	7a3b      	ldrb	r3, [r7, #8]
 8004eec:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	2b05      	cmp	r3, #5
 8004ef4:	d826      	bhi.n	8004f44 <lps22hb_data_rate_get+0x74>
 8004ef6:	a201      	add	r2, pc, #4	; (adr r2, 8004efc <lps22hb_data_rate_get+0x2c>)
 8004ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004efc:	08004f15 	.word	0x08004f15
 8004f00:	08004f1d 	.word	0x08004f1d
 8004f04:	08004f25 	.word	0x08004f25
 8004f08:	08004f2d 	.word	0x08004f2d
 8004f0c:	08004f35 	.word	0x08004f35
 8004f10:	08004f3d 	.word	0x08004f3d
    case LPS22HB_POWER_DOWN:
      *val = LPS22HB_POWER_DOWN;
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	2200      	movs	r2, #0
 8004f18:	701a      	strb	r2, [r3, #0]
      break;
 8004f1a:	e017      	b.n	8004f4c <lps22hb_data_rate_get+0x7c>
    case LPS22HB_ODR_1_Hz:
      *val = LPS22HB_ODR_1_Hz;
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	701a      	strb	r2, [r3, #0]
      break;
 8004f22:	e013      	b.n	8004f4c <lps22hb_data_rate_get+0x7c>
    case LPS22HB_ODR_10_Hz:
      *val = LPS22HB_ODR_10_Hz;
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	2202      	movs	r2, #2
 8004f28:	701a      	strb	r2, [r3, #0]
      break;
 8004f2a:	e00f      	b.n	8004f4c <lps22hb_data_rate_get+0x7c>
    case LPS22HB_ODR_25_Hz:
      *val = LPS22HB_ODR_25_Hz;
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	2203      	movs	r2, #3
 8004f30:	701a      	strb	r2, [r3, #0]
      break;
 8004f32:	e00b      	b.n	8004f4c <lps22hb_data_rate_get+0x7c>
    case LPS22HB_ODR_50_Hz:
      *val = LPS22HB_ODR_50_Hz;
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	2204      	movs	r2, #4
 8004f38:	701a      	strb	r2, [r3, #0]
      break;
 8004f3a:	e007      	b.n	8004f4c <lps22hb_data_rate_get+0x7c>
    case LPS22HB_ODR_75_Hz:
      *val = LPS22HB_ODR_75_Hz;
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	2205      	movs	r2, #5
 8004f40:	701a      	strb	r2, [r3, #0]
      break;
 8004f42:	e003      	b.n	8004f4c <lps22hb_data_rate_get+0x7c>
    default:
      *val = LPS22HB_ODR_1_Hz;
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	2201      	movs	r2, #1
 8004f48:	701a      	strb	r2, [r3, #0]
      break;
 8004f4a:	bf00      	nop
  }

  return ret;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3710      	adds	r7, #16
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop

08004f58 <lps22hb_pressure_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_pressure_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret =  lps22hb_read_reg(ctx, LPS22HB_PRESS_OUT_XL, buff, 3);
 8004f62:	2303      	movs	r3, #3
 8004f64:	683a      	ldr	r2, [r7, #0]
 8004f66:	2128      	movs	r1, #40	; 0x28
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f7ff fedc 	bl	8004d26 <lps22hb_read_reg>
 8004f6e:	60f8      	str	r0, [r7, #12]
  return ret;
 8004f70:	68fb      	ldr	r3, [r7, #12]
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3710      	adds	r7, #16
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}

08004f7a <lps22hb_temperature_raw_get>:
  * @param  buff   Buffer that stores data read.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_temperature_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004f7a:	b580      	push	{r7, lr}
 8004f7c:	b084      	sub	sp, #16
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
 8004f82:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret =  lps22hb_read_reg(ctx, LPS22HB_TEMP_OUT_L, (uint8_t*) buff, 2);
 8004f84:	2302      	movs	r3, #2
 8004f86:	683a      	ldr	r2, [r7, #0]
 8004f88:	212b      	movs	r1, #43	; 0x2b
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f7ff fecb 	bl	8004d26 <lps22hb_read_reg>
 8004f90:	60f8      	str	r0, [r7, #12]
  return ret;
 8004f92:	68fb      	ldr	r3, [r7, #12]
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3710      	adds	r7, #16
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <lps22hb_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret =  lps22hb_read_reg(ctx, LPS22HB_WHO_AM_I, (uint8_t*) buff, 1);
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	683a      	ldr	r2, [r7, #0]
 8004faa:	210f      	movs	r1, #15
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f7ff feba 	bl	8004d26 <lps22hb_read_reg>
 8004fb2:	60f8      	str	r0, [r7, #12]
  return ret;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3710      	adds	r7, #16
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}

08004fbe <lps22hb_low_power_set>:
  * @param  val    Change the values of lc_en in reg RES_CONF
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_low_power_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004fbe:	b580      	push	{r7, lr}
 8004fc0:	b084      	sub	sp, #16
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
 8004fc6:	460b      	mov	r3, r1
 8004fc8:	70fb      	strb	r3, [r7, #3]
  lps22hb_res_conf_t res_conf;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_RES_CONF, (uint8_t*)&res_conf, 1);
 8004fca:	f107 0208 	add.w	r2, r7, #8
 8004fce:	2301      	movs	r3, #1
 8004fd0:	211a      	movs	r1, #26
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f7ff fea7 	bl	8004d26 <lps22hb_read_reg>
 8004fd8:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d10f      	bne.n	8005000 <lps22hb_low_power_set+0x42>
    res_conf.lc_en = val;
 8004fe0:	78fb      	ldrb	r3, [r7, #3]
 8004fe2:	f003 0301 	and.w	r3, r3, #1
 8004fe6:	b2da      	uxtb	r2, r3
 8004fe8:	7a3b      	ldrb	r3, [r7, #8]
 8004fea:	f362 0300 	bfi	r3, r2, #0, #1
 8004fee:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_RES_CONF, (uint8_t*)&res_conf, 1);
 8004ff0:	f107 0208 	add.w	r2, r7, #8
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	211a      	movs	r1, #26
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f7ff feac 	bl	8004d56 <lps22hb_write_reg>
 8004ffe:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8005000:	68fb      	ldr	r3, [r7, #12]
}
 8005002:	4618      	mov	r0, r3
 8005004:	3710      	adds	r7, #16
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}

0800500a <lps22hb_auto_add_inc_set>:
  * @param  val    Change the values of if_add_inc in reg CTRL_REG2
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_auto_add_inc_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800500a:	b580      	push	{r7, lr}
 800500c:	b084      	sub	sp, #16
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
 8005012:	460b      	mov	r3, r1
 8005014:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
 8005016:	f107 0208 	add.w	r2, r7, #8
 800501a:	2301      	movs	r3, #1
 800501c:	2111      	movs	r1, #17
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f7ff fe81 	bl	8004d26 <lps22hb_read_reg>
 8005024:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d10f      	bne.n	800504c <lps22hb_auto_add_inc_set+0x42>
    ctrl_reg2.if_add_inc = val;
 800502c:	78fb      	ldrb	r3, [r7, #3]
 800502e:	f003 0301 	and.w	r3, r3, #1
 8005032:	b2da      	uxtb	r2, r3
 8005034:	7a3b      	ldrb	r3, [r7, #8]
 8005036:	f362 1304 	bfi	r3, r2, #4, #1
 800503a:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
 800503c:	f107 0208 	add.w	r2, r7, #8
 8005040:	2301      	movs	r3, #1
 8005042:	2111      	movs	r1, #17
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f7ff fe86 	bl	8004d56 <lps22hb_write_reg>
 800504a:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800504c:	68fb      	ldr	r3, [r7, #12]
}
 800504e:	4618      	mov	r0, r3
 8005050:	3710      	adds	r7, #16
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
	...

08005058 <LSM303AGR_ACC_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_RegisterBusIO(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b084      	sub	sp, #16
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8005062:	2300      	movs	r3, #0
 8005064:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d103      	bne.n	8005074 <LSM303AGR_ACC_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 800506c:	f04f 33ff 	mov.w	r3, #4294967295
 8005070:	60fb      	str	r3, [r7, #12]
 8005072:	e04d      	b.n	8005110 <LSM303AGR_ACC_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	685a      	ldr	r2, [r3, #4]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	689a      	ldr	r2, [r3, #8]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	7b1a      	ldrb	r2, [r3, #12]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	691a      	ldr	r2, [r3, #16]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	695a      	ldr	r2, [r3, #20]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	699a      	ldr	r2, [r3, #24]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadAccRegWrap;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4a1b      	ldr	r2, [pc, #108]	; (800511c <LSM303AGR_ACC_RegisterBusIO+0xc4>)
 80050b0:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteAccRegWrap;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4a1a      	ldr	r2, [pc, #104]	; (8005120 <LSM303AGR_ACC_RegisterBusIO+0xc8>)
 80050b6:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d103      	bne.n	80050ce <LSM303AGR_ACC_RegisterBusIO+0x76>
    {
      ret = LSM303AGR_ERROR;
 80050c6:	f04f 33ff 	mov.w	r3, #4294967295
 80050ca:	60fb      	str	r3, [r7, #12]
 80050cc:	e020      	b.n	8005110 <LSM303AGR_ACC_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4798      	blx	r3
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d003      	beq.n	80050e2 <LSM303AGR_ACC_RegisterBusIO+0x8a>
    {
      ret = LSM303AGR_ERROR;
 80050da:	f04f 33ff 	mov.w	r3, #4294967295
 80050de:	60fb      	str	r3, [r7, #12]
 80050e0:	e016      	b.n	8005110 <LSM303AGR_ACC_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM303AGR_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d112      	bne.n	8005110 <LSM303AGR_ACC_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d10d      	bne.n	8005110 <LSM303AGR_ACC_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 80050f4:	2301      	movs	r3, #1
 80050f6:	72fb      	strb	r3, [r7, #11]

          if (LSM303AGR_ACC_Write_Reg(pObj, LSM303AGR_CTRL_REG4_A, data) != LSM303AGR_OK)
 80050f8:	7afb      	ldrb	r3, [r7, #11]
 80050fa:	461a      	mov	r2, r3
 80050fc:	2123      	movs	r1, #35	; 0x23
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f000 fb50 	bl	80057a4 <LSM303AGR_ACC_Write_Reg>
 8005104:	4603      	mov	r3, r0
 8005106:	2b00      	cmp	r3, #0
 8005108:	d002      	beq.n	8005110 <LSM303AGR_ACC_RegisterBusIO+0xb8>
          {
            return LSM303AGR_ERROR;
 800510a:	f04f 33ff 	mov.w	r3, #4294967295
 800510e:	e000      	b.n	8005112 <LSM303AGR_ACC_RegisterBusIO+0xba>
        }
      }
    }
  }

  return ret;
 8005110:	68fb      	ldr	r3, [r7, #12]
}
 8005112:	4618      	mov	r0, r3
 8005114:	3710      	adds	r7, #16
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
 800511a:	bf00      	nop
 800511c:	08005fad 	.word	0x08005fad
 8005120:	0800600f 	.word	0x0800600f

08005124 <LSM303AGR_ACC_Init>:
 * @brief  Initialize the LSM303AGR sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Init(LSM303AGR_ACC_Object_t *pObj)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b082      	sub	sp, #8
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_xl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	331c      	adds	r3, #28
 8005130:	2101      	movs	r1, #1
 8005132:	4618      	mov	r0, r3
 8005134:	f001 f942 	bl	80063bc <lsm303agr_xl_block_data_update_set>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d002      	beq.n	8005144 <LSM303AGR_ACC_Init+0x20>
  {
    return LSM303AGR_ERROR;
 800513e:	f04f 33ff 	mov.w	r3, #4294967295
 8005142:	e02c      	b.n	800519e <LSM303AGR_ACC_Init+0x7a>
  }

  /* FIFO mode selection */
  if (lsm303agr_xl_fifo_mode_set(&(pObj->Ctx), LSM303AGR_BYPASS_MODE) != LSM303AGR_OK)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	331c      	adds	r3, #28
 8005148:	2100      	movs	r1, #0
 800514a:	4618      	mov	r0, r3
 800514c:	f001 fa71 	bl	8006632 <lsm303agr_xl_fifo_mode_set>
 8005150:	4603      	mov	r3, r0
 8005152:	2b00      	cmp	r3, #0
 8005154:	d002      	beq.n	800515c <LSM303AGR_ACC_Init+0x38>
  {
    return LSM303AGR_ERROR;
 8005156:	f04f 33ff 	mov.w	r3, #4294967295
 800515a:	e020      	b.n	800519e <LSM303AGR_ACC_Init+0x7a>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM303AGR_XL_ODR_100Hz;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2205      	movs	r2, #5
 8005160:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	331c      	adds	r3, #28
 8005168:	2100      	movs	r1, #0
 800516a:	4618      	mov	r0, r3
 800516c:	f001 f846 	bl	80061fc <lsm303agr_xl_data_rate_set>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d002      	beq.n	800517c <LSM303AGR_ACC_Init+0x58>
  {
    return LSM303AGR_ERROR;
 8005176:	f04f 33ff 	mov.w	r3, #4294967295
 800517a:	e010      	b.n	800519e <LSM303AGR_ACC_Init+0x7a>
  }

  /* Full scale selection. */
  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), LSM303AGR_2g) != LSM303AGR_OK)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	331c      	adds	r3, #28
 8005180:	2100      	movs	r1, #0
 8005182:	4618      	mov	r0, r3
 8005184:	f001 f8bc 	bl	8006300 <lsm303agr_xl_full_scale_set>
 8005188:	4603      	mov	r3, r0
 800518a:	2b00      	cmp	r3, #0
 800518c:	d002      	beq.n	8005194 <LSM303AGR_ACC_Init+0x70>
  {
    return LSM303AGR_ERROR;
 800518e:	f04f 33ff 	mov.w	r3, #4294967295
 8005192:	e004      	b.n	800519e <LSM303AGR_ACC_Init+0x7a>
  }

  pObj->is_initialized = 1;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 800519c:	2300      	movs	r3, #0
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3708      	adds	r7, #8
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}

080051a6 <LSM303AGR_ACC_DeInit>:
 * @brief  Deinitialize the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_DeInit(LSM303AGR_ACC_Object_t *pObj)
{
 80051a6:	b580      	push	{r7, lr}
 80051a8:	b082      	sub	sp, #8
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM303AGR_ACC_Disable(pObj) != LSM303AGR_OK)
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f000 f87c 	bl	80052ac <LSM303AGR_ACC_Disable>
 80051b4:	4603      	mov	r3, r0
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d002      	beq.n	80051c0 <LSM303AGR_ACC_DeInit+0x1a>
  {
    return LSM303AGR_ERROR;
 80051ba:	f04f 33ff 	mov.w	r3, #4294967295
 80051be:	e008      	b.n	80051d2 <LSM303AGR_ACC_DeInit+0x2c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM303AGR_XL_POWER_DOWN;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  pObj->is_initialized = 0;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2200      	movs	r2, #0
 80051cc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 80051d0:	2300      	movs	r3, #0
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3708      	adds	r7, #8
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}

080051da <LSM303AGR_ACC_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_ReadID(LSM303AGR_ACC_Object_t *pObj, uint8_t *Id)
{
 80051da:	b580      	push	{r7, lr}
 80051dc:	b082      	sub	sp, #8
 80051de:	af00      	add	r7, sp, #0
 80051e0:	6078      	str	r0, [r7, #4]
 80051e2:	6039      	str	r1, [r7, #0]
  if (lsm303agr_xl_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	331c      	adds	r3, #28
 80051e8:	6839      	ldr	r1, [r7, #0]
 80051ea:	4618      	mov	r0, r3
 80051ec:	f001 f9d9 	bl	80065a2 <lsm303agr_xl_device_id_get>
 80051f0:	4603      	mov	r3, r0
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d002      	beq.n	80051fc <LSM303AGR_ACC_ReadID+0x22>
  {
    return LSM303AGR_ERROR;
 80051f6:	f04f 33ff 	mov.w	r3, #4294967295
 80051fa:	e000      	b.n	80051fe <LSM303AGR_ACC_ReadID+0x24>
  }

  return LSM303AGR_OK;
 80051fc:	2300      	movs	r3, #0
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3708      	adds	r7, #8
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
	...

08005208 <LSM303AGR_ACC_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM303AGR accelerometer sensor capabilities
 * @retval Component status
 */
int32_t LSM303AGR_ACC_GetCapabilities(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	2201      	movs	r2, #1
 8005216:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	2200      	movs	r2, #0
 800521c:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	2200      	movs	r2, #0
 8005222:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	2200      	movs	r2, #0
 8005228:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	2200      	movs	r2, #0
 800522e:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	2210      	movs	r2, #16
 8005234:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	2200      	movs	r2, #0
 800523a:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	f04f 0200 	mov.w	r2, #0
 8005242:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 400.0f;
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	4a06      	ldr	r2, [pc, #24]	; (8005260 <LSM303AGR_ACC_GetCapabilities+0x58>)
 8005248:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	f04f 0200 	mov.w	r2, #0
 8005250:	619a      	str	r2, [r3, #24]
  return LSM303AGR_OK;
 8005252:	2300      	movs	r3, #0
}
 8005254:	4618      	mov	r0, r3
 8005256:	370c      	adds	r7, #12
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr
 8005260:	43c80000 	.word	0x43c80000

08005264 <LSM303AGR_ACC_Enable>:
 * @brief  Enable the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Enable(LSM303AGR_ACC_Object_t *pObj)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b082      	sub	sp, #8
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005272:	2b01      	cmp	r3, #1
 8005274:	d101      	bne.n	800527a <LSM303AGR_ACC_Enable+0x16>
  {
    return LSM303AGR_OK;
 8005276:	2300      	movs	r3, #0
 8005278:	e014      	b.n	80052a4 <LSM303AGR_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM303AGR_OK)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f103 021c 	add.w	r2, r3, #28
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8005286:	4619      	mov	r1, r3
 8005288:	4610      	mov	r0, r2
 800528a:	f000 ffb7 	bl	80061fc <lsm303agr_xl_data_rate_set>
 800528e:	4603      	mov	r3, r0
 8005290:	2b00      	cmp	r3, #0
 8005292:	d002      	beq.n	800529a <LSM303AGR_ACC_Enable+0x36>
  {
    return LSM303AGR_ERROR;
 8005294:	f04f 33ff 	mov.w	r3, #4294967295
 8005298:	e004      	b.n	80052a4 <LSM303AGR_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2201      	movs	r2, #1
 800529e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 80052a2:	2300      	movs	r3, #0
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3708      	adds	r7, #8
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <LSM303AGR_ACC_Disable>:
 * @brief  Disable the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Disable(LSM303AGR_ACC_Object_t *pObj)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b082      	sub	sp, #8
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d101      	bne.n	80052c2 <LSM303AGR_ACC_Disable+0x16>
  {
    return LSM303AGR_OK;
 80052be:	2300      	movs	r3, #0
 80052c0:	e01f      	b.n	8005302 <LSM303AGR_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM303AGR_OK)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f103 021c 	add.w	r2, r3, #28
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	332a      	adds	r3, #42	; 0x2a
 80052cc:	4619      	mov	r1, r3
 80052ce:	4610      	mov	r0, r2
 80052d0:	f000 ffba 	bl	8006248 <lsm303agr_xl_data_rate_get>
 80052d4:	4603      	mov	r3, r0
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d002      	beq.n	80052e0 <LSM303AGR_ACC_Disable+0x34>
  {
    return LSM303AGR_ERROR;
 80052da:	f04f 33ff 	mov.w	r3, #4294967295
 80052de:	e010      	b.n	8005302 <LSM303AGR_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	331c      	adds	r3, #28
 80052e4:	2100      	movs	r1, #0
 80052e6:	4618      	mov	r0, r3
 80052e8:	f000 ff88 	bl	80061fc <lsm303agr_xl_data_rate_set>
 80052ec:	4603      	mov	r3, r0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d002      	beq.n	80052f8 <LSM303AGR_ACC_Disable+0x4c>
  {
    return LSM303AGR_ERROR;
 80052f2:	f04f 33ff 	mov.w	r3, #4294967295
 80052f6:	e004      	b.n	8005302 <LSM303AGR_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2200      	movs	r2, #0
 80052fc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8005300:	2300      	movs	r3, #0
}
 8005302:	4618      	mov	r0, r3
 8005304:	3708      	adds	r7, #8
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}

0800530a <LSM303AGR_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetSensitivity(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 800530a:	b580      	push	{r7, lr}
 800530c:	b084      	sub	sp, #16
 800530e:	af00      	add	r7, sp, #0
 8005310:	6078      	str	r0, [r7, #4]
 8005312:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8005314:	2300      	movs	r3, #0
 8005316:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	331c      	adds	r3, #28
 800531c:	f107 020b 	add.w	r2, r7, #11
 8005320:	4611      	mov	r1, r2
 8005322:	4618      	mov	r0, r3
 8005324:	f000 ff36 	bl	8006194 <lsm303agr_xl_operating_mode_get>
 8005328:	4603      	mov	r3, r0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d002      	beq.n	8005334 <LSM303AGR_ACC_GetSensitivity+0x2a>
  {
    return LSM303AGR_ERROR;
 800532e:	f04f 33ff 	mov.w	r3, #4294967295
 8005332:	e02e      	b.n	8005392 <LSM303AGR_ACC_GetSensitivity+0x88>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (op_mode)
 8005334:	7afb      	ldrb	r3, [r7, #11]
 8005336:	2b01      	cmp	r3, #1
 8005338:	d00d      	beq.n	8005356 <LSM303AGR_ACC_GetSensitivity+0x4c>
 800533a:	2b02      	cmp	r3, #2
 800533c:	d015      	beq.n	800536a <LSM303AGR_ACC_GetSensitivity+0x60>
 800533e:	2b00      	cmp	r3, #0
 8005340:	d11d      	bne.n	800537e <LSM303AGR_ACC_GetSensitivity+0x74>
  {
    case LSM303AGR_HR_12bit:
      if (LSM303AGR_ACC_GetSensitivityHR(pObj, Sensitivity) != LSM303AGR_OK)
 8005342:	6839      	ldr	r1, [r7, #0]
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f000 fca5 	bl	8005c94 <LSM303AGR_ACC_GetSensitivityHR>
 800534a:	4603      	mov	r3, r0
 800534c:	2b00      	cmp	r3, #0
 800534e:	d01a      	beq.n	8005386 <LSM303AGR_ACC_GetSensitivity+0x7c>
      {
        return LSM303AGR_ERROR;
 8005350:	f04f 33ff 	mov.w	r3, #4294967295
 8005354:	e01d      	b.n	8005392 <LSM303AGR_ACC_GetSensitivity+0x88>
      }
      break;

    case LSM303AGR_NM_10bit:
      if (LSM303AGR_ACC_GetSensitivityNM(pObj, Sensitivity) != LSM303AGR_OK)
 8005356:	6839      	ldr	r1, [r7, #0]
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f000 fce1 	bl	8005d20 <LSM303AGR_ACC_GetSensitivityNM>
 800535e:	4603      	mov	r3, r0
 8005360:	2b00      	cmp	r3, #0
 8005362:	d012      	beq.n	800538a <LSM303AGR_ACC_GetSensitivity+0x80>
      {
        return LSM303AGR_ERROR;
 8005364:	f04f 33ff 	mov.w	r3, #4294967295
 8005368:	e013      	b.n	8005392 <LSM303AGR_ACC_GetSensitivity+0x88>
      }
      break;

    case LSM303AGR_LP_8bit:
      if (LSM303AGR_ACC_GetSensitivityLP(pObj, Sensitivity) != LSM303AGR_OK)
 800536a:	6839      	ldr	r1, [r7, #0]
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f000 fd1d 	bl	8005dac <LSM303AGR_ACC_GetSensitivityLP>
 8005372:	4603      	mov	r3, r0
 8005374:	2b00      	cmp	r3, #0
 8005376:	d00a      	beq.n	800538e <LSM303AGR_ACC_GetSensitivity+0x84>
      {
        return LSM303AGR_ERROR;
 8005378:	f04f 33ff 	mov.w	r3, #4294967295
 800537c:	e009      	b.n	8005392 <LSM303AGR_ACC_GetSensitivity+0x88>
      }
      break;

    default:
      ret = LSM303AGR_ERROR;
 800537e:	f04f 33ff 	mov.w	r3, #4294967295
 8005382:	60fb      	str	r3, [r7, #12]
      break;
 8005384:	e004      	b.n	8005390 <LSM303AGR_ACC_GetSensitivity+0x86>
      break;
 8005386:	bf00      	nop
 8005388:	e002      	b.n	8005390 <LSM303AGR_ACC_GetSensitivity+0x86>
      break;
 800538a:	bf00      	nop
 800538c:	e000      	b.n	8005390 <LSM303AGR_ACC_GetSensitivity+0x86>
      break;
 800538e:	bf00      	nop
  }

  return ret;
 8005390:	68fb      	ldr	r3, [r7, #12]
}
 8005392:	4618      	mov	r0, r3
 8005394:	3710      	adds	r7, #16
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
	...

0800539c <LSM303AGR_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetOutputDataRate(LSM303AGR_ACC_Object_t *pObj, float *Odr)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80053a6:	2300      	movs	r3, #0
 80053a8:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;
  lsm303agr_odr_a_t odr_low_level;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	331c      	adds	r3, #28
 80053ae:	f107 020b 	add.w	r2, r7, #11
 80053b2:	4611      	mov	r1, r2
 80053b4:	4618      	mov	r0, r3
 80053b6:	f000 feed 	bl	8006194 <lsm303agr_xl_operating_mode_get>
 80053ba:	4603      	mov	r3, r0
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d002      	beq.n	80053c6 <LSM303AGR_ACC_GetOutputDataRate+0x2a>
  {
    return LSM303AGR_ERROR;
 80053c0:	f04f 33ff 	mov.w	r3, #4294967295
 80053c4:	e09f      	b.n	8005506 <LSM303AGR_ACC_GetOutputDataRate+0x16a>
  }

  /* Get current output data rate. */
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	331c      	adds	r3, #28
 80053ca:	f107 020a 	add.w	r2, r7, #10
 80053ce:	4611      	mov	r1, r2
 80053d0:	4618      	mov	r0, r3
 80053d2:	f000 ff39 	bl	8006248 <lsm303agr_xl_data_rate_get>
 80053d6:	4603      	mov	r3, r0
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d002      	beq.n	80053e2 <LSM303AGR_ACC_GetOutputDataRate+0x46>
  {
    return LSM303AGR_ERROR;
 80053dc:	f04f 33ff 	mov.w	r3, #4294967295
 80053e0:	e091      	b.n	8005506 <LSM303AGR_ACC_GetOutputDataRate+0x16a>
  }

  if (op_mode == LSM303AGR_LP_8bit) /* LP mode */
 80053e2:	7afb      	ldrb	r3, [r7, #11]
 80053e4:	2b02      	cmp	r3, #2
 80053e6:	d148      	bne.n	800547a <LSM303AGR_ACC_GetOutputDataRate+0xde>
  {
    switch (odr_low_level)
 80053e8:	7abb      	ldrb	r3, [r7, #10]
 80053ea:	2b09      	cmp	r3, #9
 80053ec:	d840      	bhi.n	8005470 <LSM303AGR_ACC_GetOutputDataRate+0xd4>
 80053ee:	a201      	add	r2, pc, #4	; (adr r2, 80053f4 <LSM303AGR_ACC_GetOutputDataRate+0x58>)
 80053f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053f4:	0800541d 	.word	0x0800541d
 80053f8:	08005427 	.word	0x08005427
 80053fc:	08005431 	.word	0x08005431
 8005400:	08005439 	.word	0x08005439
 8005404:	08005441 	.word	0x08005441
 8005408:	08005449 	.word	0x08005449
 800540c:	08005451 	.word	0x08005451
 8005410:	08005459 	.word	0x08005459
 8005414:	08005461 	.word	0x08005461
 8005418:	08005469 	.word	0x08005469
    {
      case LSM303AGR_XL_POWER_DOWN:
        *Odr = 0.0f;
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	f04f 0200 	mov.w	r2, #0
 8005422:	601a      	str	r2, [r3, #0]
        break;
 8005424:	e06e      	b.n	8005504 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_1Hz:
        *Odr = 1.0f;
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800542c:	601a      	str	r2, [r3, #0]
        break;
 800542e:	e069      	b.n	8005504 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_10Hz:
        *Odr = 10.0f;
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	4a37      	ldr	r2, [pc, #220]	; (8005510 <LSM303AGR_ACC_GetOutputDataRate+0x174>)
 8005434:	601a      	str	r2, [r3, #0]
        break;
 8005436:	e065      	b.n	8005504 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_25Hz:
        *Odr = 25.0f;
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	4a36      	ldr	r2, [pc, #216]	; (8005514 <LSM303AGR_ACC_GetOutputDataRate+0x178>)
 800543c:	601a      	str	r2, [r3, #0]
        break;
 800543e:	e061      	b.n	8005504 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_50Hz:
        *Odr = 50.0f;
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	4a35      	ldr	r2, [pc, #212]	; (8005518 <LSM303AGR_ACC_GetOutputDataRate+0x17c>)
 8005444:	601a      	str	r2, [r3, #0]
        break;
 8005446:	e05d      	b.n	8005504 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_100Hz:
        *Odr = 100.0f;
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	4a34      	ldr	r2, [pc, #208]	; (800551c <LSM303AGR_ACC_GetOutputDataRate+0x180>)
 800544c:	601a      	str	r2, [r3, #0]
        break;
 800544e:	e059      	b.n	8005504 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_200Hz:
        *Odr = 200.0f;
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	4a33      	ldr	r2, [pc, #204]	; (8005520 <LSM303AGR_ACC_GetOutputDataRate+0x184>)
 8005454:	601a      	str	r2, [r3, #0]
        break;
 8005456:	e055      	b.n	8005504 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_400Hz:
        *Odr = 400.0f;
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	4a32      	ldr	r2, [pc, #200]	; (8005524 <LSM303AGR_ACC_GetOutputDataRate+0x188>)
 800545c:	601a      	str	r2, [r3, #0]
        break;
 800545e:	e051      	b.n	8005504 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_1kHz620_LP:
        *Odr = 1620.0f;
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	4a31      	ldr	r2, [pc, #196]	; (8005528 <LSM303AGR_ACC_GetOutputDataRate+0x18c>)
 8005464:	601a      	str	r2, [r3, #0]
        break;
 8005466:	e04d      	b.n	8005504 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
        *Odr = 5376.0f;
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	4a30      	ldr	r2, [pc, #192]	; (800552c <LSM303AGR_ACC_GetOutputDataRate+0x190>)
 800546c:	601a      	str	r2, [r3, #0]
        break;
 800546e:	e049      	b.n	8005504 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      default:
        ret = LSM303AGR_ERROR;
 8005470:	f04f 33ff 	mov.w	r3, #4294967295
 8005474:	60fb      	str	r3, [r7, #12]
        break;
 8005476:	bf00      	nop
 8005478:	e044      	b.n	8005504 <LSM303AGR_ACC_GetOutputDataRate+0x168>
    }
  }
  else /* HR and NM modes */
  {
    switch (odr_low_level)
 800547a:	7abb      	ldrb	r3, [r7, #10]
 800547c:	2b09      	cmp	r3, #9
 800547e:	d83d      	bhi.n	80054fc <LSM303AGR_ACC_GetOutputDataRate+0x160>
 8005480:	a201      	add	r2, pc, #4	; (adr r2, 8005488 <LSM303AGR_ACC_GetOutputDataRate+0xec>)
 8005482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005486:	bf00      	nop
 8005488:	080054b1 	.word	0x080054b1
 800548c:	080054bb 	.word	0x080054bb
 8005490:	080054c5 	.word	0x080054c5
 8005494:	080054cd 	.word	0x080054cd
 8005498:	080054d5 	.word	0x080054d5
 800549c:	080054dd 	.word	0x080054dd
 80054a0:	080054e5 	.word	0x080054e5
 80054a4:	080054ed 	.word	0x080054ed
 80054a8:	080054fd 	.word	0x080054fd
 80054ac:	080054f5 	.word	0x080054f5
    {
      case LSM303AGR_XL_POWER_DOWN:
        *Odr = 0.0f;
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	f04f 0200 	mov.w	r2, #0
 80054b6:	601a      	str	r2, [r3, #0]
        break;
 80054b8:	e024      	b.n	8005504 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_1Hz:
        *Odr = 1.0f;
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80054c0:	601a      	str	r2, [r3, #0]
        break;
 80054c2:	e01f      	b.n	8005504 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_10Hz:
        *Odr = 10.0f;
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	4a12      	ldr	r2, [pc, #72]	; (8005510 <LSM303AGR_ACC_GetOutputDataRate+0x174>)
 80054c8:	601a      	str	r2, [r3, #0]
        break;
 80054ca:	e01b      	b.n	8005504 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_25Hz:
        *Odr = 25.0f;
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	4a11      	ldr	r2, [pc, #68]	; (8005514 <LSM303AGR_ACC_GetOutputDataRate+0x178>)
 80054d0:	601a      	str	r2, [r3, #0]
        break;
 80054d2:	e017      	b.n	8005504 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_50Hz:
        *Odr = 50.0f;
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	4a10      	ldr	r2, [pc, #64]	; (8005518 <LSM303AGR_ACC_GetOutputDataRate+0x17c>)
 80054d8:	601a      	str	r2, [r3, #0]
        break;
 80054da:	e013      	b.n	8005504 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_100Hz:
        *Odr = 100.0f;
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	4a0f      	ldr	r2, [pc, #60]	; (800551c <LSM303AGR_ACC_GetOutputDataRate+0x180>)
 80054e0:	601a      	str	r2, [r3, #0]
        break;
 80054e2:	e00f      	b.n	8005504 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_200Hz:
        *Odr = 200.0f;
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	4a0e      	ldr	r2, [pc, #56]	; (8005520 <LSM303AGR_ACC_GetOutputDataRate+0x184>)
 80054e8:	601a      	str	r2, [r3, #0]
        break;
 80054ea:	e00b      	b.n	8005504 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_400Hz:
        *Odr = 400.0f;
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	4a0d      	ldr	r2, [pc, #52]	; (8005524 <LSM303AGR_ACC_GetOutputDataRate+0x188>)
 80054f0:	601a      	str	r2, [r3, #0]
        break;
 80054f2:	e007      	b.n	8005504 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
        *Odr = 1344.0f;
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	4a0e      	ldr	r2, [pc, #56]	; (8005530 <LSM303AGR_ACC_GetOutputDataRate+0x194>)
 80054f8:	601a      	str	r2, [r3, #0]
        break;
 80054fa:	e003      	b.n	8005504 <LSM303AGR_ACC_GetOutputDataRate+0x168>

      default:
        ret = LSM303AGR_ERROR;
 80054fc:	f04f 33ff 	mov.w	r3, #4294967295
 8005500:	60fb      	str	r3, [r7, #12]
        break;
 8005502:	bf00      	nop
    }
  }

  return ret;
 8005504:	68fb      	ldr	r3, [r7, #12]
}
 8005506:	4618      	mov	r0, r3
 8005508:	3710      	adds	r7, #16
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
 800550e:	bf00      	nop
 8005510:	41200000 	.word	0x41200000
 8005514:	41c80000 	.word	0x41c80000
 8005518:	42480000 	.word	0x42480000
 800551c:	42c80000 	.word	0x42c80000
 8005520:	43480000 	.word	0x43480000
 8005524:	43c80000 	.word	0x43c80000
 8005528:	44ca8000 	.word	0x44ca8000
 800552c:	45a80000 	.word	0x45a80000
 8005530:	44a80000 	.word	0x44a80000

08005534 <LSM303AGR_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_SetOutputDataRate(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b082      	sub	sp, #8
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005544:	2b01      	cmp	r3, #1
 8005546:	d105      	bne.n	8005554 <LSM303AGR_ACC_SetOutputDataRate+0x20>
  {
    return LSM303AGR_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8005548:	6839      	ldr	r1, [r7, #0]
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 fc74 	bl	8005e38 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>
 8005550:	4603      	mov	r3, r0
 8005552:	e004      	b.n	800555e <LSM303AGR_ACC_SetOutputDataRate+0x2a>
  }
  else
  {
    return LSM303AGR_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8005554:	6839      	ldr	r1, [r7, #0]
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f000 fcd0 	bl	8005efc <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>
 800555c:	4603      	mov	r3, r0
  }
}
 800555e:	4618      	mov	r0, r3
 8005560:	3708      	adds	r7, #8
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
	...

08005568 <LSM303AGR_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetFullScale(LSM303AGR_ACC_Object_t *pObj, int32_t *FullScale)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8005572:	2300      	movs	r3, #0
 8005574:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM303AGR_OK)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	331c      	adds	r3, #28
 800557a:	f107 020b 	add.w	r2, r7, #11
 800557e:	4611      	mov	r1, r2
 8005580:	4618      	mov	r0, r3
 8005582:	f000 fee3 	bl	800634c <lsm303agr_xl_full_scale_get>
 8005586:	4603      	mov	r3, r0
 8005588:	2b00      	cmp	r3, #0
 800558a:	d002      	beq.n	8005592 <LSM303AGR_ACC_GetFullScale+0x2a>
  {
    return LSM303AGR_ERROR;
 800558c:	f04f 33ff 	mov.w	r3, #4294967295
 8005590:	e023      	b.n	80055da <LSM303AGR_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8005592:	7afb      	ldrb	r3, [r7, #11]
 8005594:	2b03      	cmp	r3, #3
 8005596:	d81b      	bhi.n	80055d0 <LSM303AGR_ACC_GetFullScale+0x68>
 8005598:	a201      	add	r2, pc, #4	; (adr r2, 80055a0 <LSM303AGR_ACC_GetFullScale+0x38>)
 800559a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800559e:	bf00      	nop
 80055a0:	080055b1 	.word	0x080055b1
 80055a4:	080055b9 	.word	0x080055b9
 80055a8:	080055c1 	.word	0x080055c1
 80055ac:	080055c9 	.word	0x080055c9
  {
    case LSM303AGR_2g:
      *FullScale =  2;
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	2202      	movs	r2, #2
 80055b4:	601a      	str	r2, [r3, #0]
      break;
 80055b6:	e00f      	b.n	80055d8 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_4g:
      *FullScale =  4;
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	2204      	movs	r2, #4
 80055bc:	601a      	str	r2, [r3, #0]
      break;
 80055be:	e00b      	b.n	80055d8 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_8g:
      *FullScale =  8;
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	2208      	movs	r2, #8
 80055c4:	601a      	str	r2, [r3, #0]
      break;
 80055c6:	e007      	b.n	80055d8 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_16g:
      *FullScale = 16;
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	2210      	movs	r2, #16
 80055cc:	601a      	str	r2, [r3, #0]
      break;
 80055ce:	e003      	b.n	80055d8 <LSM303AGR_ACC_GetFullScale+0x70>

    default:
      ret = LSM303AGR_ERROR;
 80055d0:	f04f 33ff 	mov.w	r3, #4294967295
 80055d4:	60fb      	str	r3, [r7, #12]
      break;
 80055d6:	bf00      	nop
  }

  return ret;
 80055d8:	68fb      	ldr	r3, [r7, #12]
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3710      	adds	r7, #16
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop

080055e4 <LSM303AGR_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_SetFullScale(LSM303AGR_ACC_Object_t *pObj, int32_t FullScale)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	6039      	str	r1, [r7, #0]
  lsm303agr_fs_a_t new_fs;

  new_fs = (FullScale <= 2) ? LSM303AGR_2g
           : (FullScale <= 4) ? LSM303AGR_4g
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	2b02      	cmp	r3, #2
 80055f2:	dd0b      	ble.n	800560c <LSM303AGR_ACC_SetFullScale+0x28>
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	2b04      	cmp	r3, #4
 80055f8:	dd06      	ble.n	8005608 <LSM303AGR_ACC_SetFullScale+0x24>
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	2b08      	cmp	r3, #8
 80055fe:	dc01      	bgt.n	8005604 <LSM303AGR_ACC_SetFullScale+0x20>
 8005600:	2302      	movs	r3, #2
 8005602:	e004      	b.n	800560e <LSM303AGR_ACC_SetFullScale+0x2a>
 8005604:	2303      	movs	r3, #3
 8005606:	e002      	b.n	800560e <LSM303AGR_ACC_SetFullScale+0x2a>
 8005608:	2301      	movs	r3, #1
 800560a:	e000      	b.n	800560e <LSM303AGR_ACC_SetFullScale+0x2a>
 800560c:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM303AGR_2g
 800560e:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM303AGR_8g
           :                    LSM303AGR_16g;

  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM303AGR_OK)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	331c      	adds	r3, #28
 8005614:	7bfa      	ldrb	r2, [r7, #15]
 8005616:	4611      	mov	r1, r2
 8005618:	4618      	mov	r0, r3
 800561a:	f000 fe71 	bl	8006300 <lsm303agr_xl_full_scale_set>
 800561e:	4603      	mov	r3, r0
 8005620:	2b00      	cmp	r3, #0
 8005622:	d002      	beq.n	800562a <LSM303AGR_ACC_SetFullScale+0x46>
  {
    return LSM303AGR_ERROR;
 8005624:	f04f 33ff 	mov.w	r3, #4294967295
 8005628:	e000      	b.n	800562c <LSM303AGR_ACC_SetFullScale+0x48>
  }

  return LSM303AGR_OK;
 800562a:	2300      	movs	r3, #0
}
 800562c:	4618      	mov	r0, r3
 800562e:	3710      	adds	r7, #16
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}

08005634 <LSM303AGR_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetAxesRaw(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b088      	sub	sp, #32
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	6039      	str	r1, [r7, #0]
  int16_t divisor = 1;
 800563e:	2301      	movs	r3, #1
 8005640:	83fb      	strh	r3, [r7, #30]
  lsm303agr_axis3bit16_t data_raw;
  int32_t ret = LSM303AGR_OK;
 8005642:	2300      	movs	r3, #0
 8005644:	61bb      	str	r3, [r7, #24]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	331c      	adds	r3, #28
 800564a:	f107 020f 	add.w	r2, r7, #15
 800564e:	4611      	mov	r1, r2
 8005650:	4618      	mov	r0, r3
 8005652:	f000 fd9f 	bl	8006194 <lsm303agr_xl_operating_mode_get>
 8005656:	4603      	mov	r3, r0
 8005658:	2b00      	cmp	r3, #0
 800565a:	d002      	beq.n	8005662 <LSM303AGR_ACC_GetAxesRaw+0x2e>
  {
    return LSM303AGR_ERROR;
 800565c:	f04f 33ff 	mov.w	r3, #4294967295
 8005660:	e047      	b.n	80056f2 <LSM303AGR_ACC_GetAxesRaw+0xbe>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (op_mode)
 8005662:	7bfb      	ldrb	r3, [r7, #15]
 8005664:	2b01      	cmp	r3, #1
 8005666:	d006      	beq.n	8005676 <LSM303AGR_ACC_GetAxesRaw+0x42>
 8005668:	2b02      	cmp	r3, #2
 800566a:	d007      	beq.n	800567c <LSM303AGR_ACC_GetAxesRaw+0x48>
 800566c:	2b00      	cmp	r3, #0
 800566e:	d109      	bne.n	8005684 <LSM303AGR_ACC_GetAxesRaw+0x50>
  {
    case LSM303AGR_HR_12bit:
      divisor = 16;
 8005670:	2310      	movs	r3, #16
 8005672:	83fb      	strh	r3, [r7, #30]
      break;
 8005674:	e00a      	b.n	800568c <LSM303AGR_ACC_GetAxesRaw+0x58>

    case LSM303AGR_NM_10bit:
      divisor = 64;
 8005676:	2340      	movs	r3, #64	; 0x40
 8005678:	83fb      	strh	r3, [r7, #30]
      break;
 800567a:	e007      	b.n	800568c <LSM303AGR_ACC_GetAxesRaw+0x58>

    case LSM303AGR_LP_8bit:
      divisor = 256;
 800567c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005680:	83fb      	strh	r3, [r7, #30]
      break;
 8005682:	e003      	b.n	800568c <LSM303AGR_ACC_GetAxesRaw+0x58>

    default:
      ret = LSM303AGR_ERROR;
 8005684:	f04f 33ff 	mov.w	r3, #4294967295
 8005688:	61bb      	str	r3, [r7, #24]
      break;
 800568a:	bf00      	nop
  }

  if (ret == LSM303AGR_ERROR)
 800568c:	69bb      	ldr	r3, [r7, #24]
 800568e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005692:	d101      	bne.n	8005698 <LSM303AGR_ACC_GetAxesRaw+0x64>
  {
    return ret;
 8005694:	69bb      	ldr	r3, [r7, #24]
 8005696:	e02c      	b.n	80056f2 <LSM303AGR_ACC_GetAxesRaw+0xbe>
  }

  /* Read raw data values. */
  if (lsm303agr_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM303AGR_OK)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	331c      	adds	r3, #28
 800569c:	f107 0210 	add.w	r2, r7, #16
 80056a0:	4611      	mov	r1, r2
 80056a2:	4618      	mov	r0, r3
 80056a4:	f000 feb0 	bl	8006408 <lsm303agr_acceleration_raw_get>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d002      	beq.n	80056b4 <LSM303AGR_ACC_GetAxesRaw+0x80>
  {
    return LSM303AGR_ERROR;
 80056ae:	f04f 33ff 	mov.w	r3, #4294967295
 80056b2:	e01e      	b.n	80056f2 <LSM303AGR_ACC_GetAxesRaw+0xbe>
  }

  /* Format the data. */
  Value->x = (data_raw.i16bit[0] / divisor);
 80056b4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80056b8:	461a      	mov	r2, r3
 80056ba:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80056be:	fb92 f3f3 	sdiv	r3, r2, r3
 80056c2:	b21a      	sxth	r2, r3
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	801a      	strh	r2, [r3, #0]
  Value->y = (data_raw.i16bit[1] / divisor);
 80056c8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80056cc:	461a      	mov	r2, r3
 80056ce:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80056d2:	fb92 f3f3 	sdiv	r3, r2, r3
 80056d6:	b21a      	sxth	r2, r3
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	805a      	strh	r2, [r3, #2]
  Value->z = (data_raw.i16bit[2] / divisor);
 80056dc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80056e0:	461a      	mov	r2, r3
 80056e2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80056e6:	fb92 f3f3 	sdiv	r3, r2, r3
 80056ea:	b21a      	sxth	r2, r3
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	809a      	strh	r2, [r3, #4]

  return ret;
 80056f0:	69bb      	ldr	r3, [r7, #24]
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3720      	adds	r7, #32
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}

080056fa <LSM303AGR_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetAxes(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Axes_t *Acceleration)
{
 80056fa:	b580      	push	{r7, lr}
 80056fc:	b086      	sub	sp, #24
 80056fe:	af00      	add	r7, sp, #0
 8005700:	6078      	str	r0, [r7, #4]
 8005702:	6039      	str	r1, [r7, #0]
  LSM303AGR_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 8005704:	f04f 0300 	mov.w	r3, #0
 8005708:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LSM303AGR_ACC_GetAxesRaw(pObj, &data_raw) != LSM303AGR_OK)
 800570a:	f107 0310 	add.w	r3, r7, #16
 800570e:	4619      	mov	r1, r3
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f7ff ff8f 	bl	8005634 <LSM303AGR_ACC_GetAxesRaw>
 8005716:	4603      	mov	r3, r0
 8005718:	2b00      	cmp	r3, #0
 800571a:	d002      	beq.n	8005722 <LSM303AGR_ACC_GetAxes+0x28>
  {
    return LSM303AGR_ERROR;
 800571c:	f04f 33ff 	mov.w	r3, #4294967295
 8005720:	e03c      	b.n	800579c <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Get LSM303AGR actual sensitivity. */
  if (LSM303AGR_ACC_GetSensitivity(pObj, &sensitivity) != LSM303AGR_OK)
 8005722:	f107 030c 	add.w	r3, r7, #12
 8005726:	4619      	mov	r1, r3
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f7ff fdee 	bl	800530a <LSM303AGR_ACC_GetSensitivity>
 800572e:	4603      	mov	r3, r0
 8005730:	2b00      	cmp	r3, #0
 8005732:	d002      	beq.n	800573a <LSM303AGR_ACC_GetAxes+0x40>
  {
    return LSM303AGR_ERROR;
 8005734:	f04f 33ff 	mov.w	r3, #4294967295
 8005738:	e030      	b.n	800579c <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 800573a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800573e:	ee07 3a90 	vmov	s15, r3
 8005742:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005746:	edd7 7a03 	vldr	s15, [r7, #12]
 800574a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800574e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005752:	ee17 2a90 	vmov	r2, s15
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 800575a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800575e:	ee07 3a90 	vmov	s15, r3
 8005762:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005766:	edd7 7a03 	vldr	s15, [r7, #12]
 800576a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800576e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005772:	ee17 2a90 	vmov	r2, s15
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 800577a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800577e:	ee07 3a90 	vmov	s15, r3
 8005782:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005786:	edd7 7a03 	vldr	s15, [r7, #12]
 800578a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800578e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005792:	ee17 2a90 	vmov	r2, s15
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 800579a:	2300      	movs	r3, #0
}
 800579c:	4618      	mov	r0, r3
 800579e:	3718      	adds	r7, #24
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}

080057a4 <LSM303AGR_ACC_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Write_Reg(LSM303AGR_ACC_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b082      	sub	sp, #8
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	460b      	mov	r3, r1
 80057ae:	70fb      	strb	r3, [r7, #3]
 80057b0:	4613      	mov	r3, r2
 80057b2:	70bb      	strb	r3, [r7, #2]
  if (lsm303agr_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM303AGR_OK)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f103 001c 	add.w	r0, r3, #28
 80057ba:	1cba      	adds	r2, r7, #2
 80057bc:	78f9      	ldrb	r1, [r7, #3]
 80057be:	2301      	movs	r3, #1
 80057c0:	f000 fcd0 	bl	8006164 <lsm303agr_write_reg>
 80057c4:	4603      	mov	r3, r0
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d002      	beq.n	80057d0 <LSM303AGR_ACC_Write_Reg+0x2c>
  {
    return LSM303AGR_ERROR;
 80057ca:	f04f 33ff 	mov.w	r3, #4294967295
 80057ce:	e000      	b.n	80057d2 <LSM303AGR_ACC_Write_Reg+0x2e>
  }

  return LSM303AGR_OK;
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3708      	adds	r7, #8
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
	...

080057dc <LSM303AGR_MAG_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_RegisterBusIO(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b084      	sub	sp, #16
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80057e6:	2300      	movs	r3, #0
 80057e8:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d103      	bne.n	80057f8 <LSM303AGR_MAG_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 80057f0:	f04f 33ff 	mov.w	r3, #4294967295
 80057f4:	60fb      	str	r3, [r7, #12]
 80057f6:	e04b      	b.n	8005890 <LSM303AGR_MAG_RegisterBusIO+0xb4>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	685a      	ldr	r2, [r3, #4]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	689a      	ldr	r2, [r3, #8]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	7b1a      	ldrb	r2, [r3, #12]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	691a      	ldr	r2, [r3, #16]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	695a      	ldr	r2, [r3, #20]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	699a      	ldr	r2, [r3, #24]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	4a1a      	ldr	r2, [pc, #104]	; (800589c <LSM303AGR_MAG_RegisterBusIO+0xc0>)
 8005834:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4a19      	ldr	r2, [pc, #100]	; (80058a0 <LSM303AGR_MAG_RegisterBusIO+0xc4>)
 800583a:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d103      	bne.n	8005852 <LSM303AGR_MAG_RegisterBusIO+0x76>
    {
      ret = LSM303AGR_ERROR;
 800584a:	f04f 33ff 	mov.w	r3, #4294967295
 800584e:	60fb      	str	r3, [r7, #12]
 8005850:	e01e      	b.n	8005890 <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4798      	blx	r3
 8005858:	4603      	mov	r3, r0
 800585a:	2b00      	cmp	r3, #0
 800585c:	d003      	beq.n	8005866 <LSM303AGR_MAG_RegisterBusIO+0x8a>
    {
      ret = LSM303AGR_ERROR;
 800585e:	f04f 33ff 	mov.w	r3, #4294967295
 8005862:	60fb      	str	r3, [r7, #12]
 8005864:	e014      	b.n	8005890 <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else
    {
      if (pObj->IO.BusType != LSM303AGR_I2C_BUS) /* If the bus type is not I2C */
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d010      	beq.n	8005890 <LSM303AGR_MAG_RegisterBusIO+0xb4>
      {
        /* Disable I2C interface support only the first time */
        if (pObj->is_initialized == 0U)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005874:	2b00      	cmp	r3, #0
 8005876:	d10b      	bne.n	8005890 <LSM303AGR_MAG_RegisterBusIO+0xb4>
        {
          /* Disable I2C interface on the component */
          if (lsm303agr_mag_i2c_interface_set(&(pObj->Ctx), LSM303AGR_I2C_DISABLE) != LSM303AGR_OK)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	331c      	adds	r3, #28
 800587c:	2101      	movs	r1, #1
 800587e:	4618      	mov	r0, r3
 8005880:	f000 fefd 	bl	800667e <lsm303agr_mag_i2c_interface_set>
 8005884:	4603      	mov	r3, r0
 8005886:	2b00      	cmp	r3, #0
 8005888:	d002      	beq.n	8005890 <LSM303AGR_MAG_RegisterBusIO+0xb4>
          {
            return LSM303AGR_ERROR;
 800588a:	f04f 33ff 	mov.w	r3, #4294967295
 800588e:	e000      	b.n	8005892 <LSM303AGR_MAG_RegisterBusIO+0xb6>
        }
      }
    }
  }

  return ret;
 8005890:	68fb      	ldr	r3, [r7, #12]
}
 8005892:	4618      	mov	r0, r3
 8005894:	3710      	adds	r7, #16
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop
 800589c:	08006071 	.word	0x08006071
 80058a0:	080060d3 	.word	0x080060d3

080058a4 <LSM303AGR_MAG_Init>:
 * @brief  Initialize the LSM303AGR sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Init(LSM303AGR_MAG_Object_t *pObj)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b082      	sub	sp, #8
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_mag_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	331c      	adds	r3, #28
 80058b0:	2101      	movs	r1, #1
 80058b2:	4618      	mov	r0, r3
 80058b4:	f000 fe3e 	bl	8006534 <lsm303agr_mag_block_data_update_set>
 80058b8:	4603      	mov	r3, r0
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d002      	beq.n	80058c4 <LSM303AGR_MAG_Init+0x20>
  {
    return LSM303AGR_ERROR;
 80058be:	f04f 33ff 	mov.w	r3, #4294967295
 80058c2:	e028      	b.n	8005916 <LSM303AGR_MAG_Init+0x72>
  }

  /* Operating mode selection - power down */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	331c      	adds	r3, #28
 80058c8:	2102      	movs	r1, #2
 80058ca:	4618      	mov	r0, r3
 80058cc:	f000 fdad 	bl	800642a <lsm303agr_mag_operating_mode_set>
 80058d0:	4603      	mov	r3, r0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d002      	beq.n	80058dc <LSM303AGR_MAG_Init+0x38>
  {
    return LSM303AGR_ERROR;
 80058d6:	f04f 33ff 	mov.w	r3, #4294967295
 80058da:	e01c      	b.n	8005916 <LSM303AGR_MAG_Init+0x72>
  }

  /* Output data rate selection */
  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), LSM303AGR_MG_ODR_100Hz) != LSM303AGR_OK)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	331c      	adds	r3, #28
 80058e0:	2103      	movs	r1, #3
 80058e2:	4618      	mov	r0, r3
 80058e4:	f000 fdc7 	bl	8006476 <lsm303agr_mag_data_rate_set>
 80058e8:	4603      	mov	r3, r0
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d002      	beq.n	80058f4 <LSM303AGR_MAG_Init+0x50>
  {
    return LSM303AGR_ERROR;
 80058ee:	f04f 33ff 	mov.w	r3, #4294967295
 80058f2:	e010      	b.n	8005916 <LSM303AGR_MAG_Init+0x72>
  }

  /* Self Test disabled. */
  if (lsm303agr_mag_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LSM303AGR_OK)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	331c      	adds	r3, #28
 80058f8:	2100      	movs	r1, #0
 80058fa:	4618      	mov	r0, r3
 80058fc:	f000 fe73 	bl	80065e6 <lsm303agr_mag_self_test_set>
 8005900:	4603      	mov	r3, r0
 8005902:	2b00      	cmp	r3, #0
 8005904:	d002      	beq.n	800590c <LSM303AGR_MAG_Init+0x68>
  {
    return LSM303AGR_ERROR;
 8005906:	f04f 33ff 	mov.w	r3, #4294967295
 800590a:	e004      	b.n	8005916 <LSM303AGR_MAG_Init+0x72>
  }

  pObj->is_initialized = 1;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8005914:	2300      	movs	r3, #0
}
 8005916:	4618      	mov	r0, r3
 8005918:	3708      	adds	r7, #8
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}

0800591e <LSM303AGR_MAG_DeInit>:
 * @brief  Deinitialize the LSM303AGR magnetometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_DeInit(LSM303AGR_MAG_Object_t *pObj)
{
 800591e:	b580      	push	{r7, lr}
 8005920:	b082      	sub	sp, #8
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM303AGR_MAG_Disable(pObj) != LSM303AGR_OK)
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f000 f874 	bl	8005a14 <LSM303AGR_MAG_Disable>
 800592c:	4603      	mov	r3, r0
 800592e:	2b00      	cmp	r3, #0
 8005930:	d002      	beq.n	8005938 <LSM303AGR_MAG_DeInit+0x1a>
  {
    return LSM303AGR_ERROR;
 8005932:	f04f 33ff 	mov.w	r3, #4294967295
 8005936:	e004      	b.n	8005942 <LSM303AGR_MAG_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8005940:	2300      	movs	r3, #0
}
 8005942:	4618      	mov	r0, r3
 8005944:	3708      	adds	r7, #8
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}

0800594a <LSM303AGR_MAG_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_ReadID(LSM303AGR_MAG_Object_t *pObj, uint8_t *Id)
{
 800594a:	b580      	push	{r7, lr}
 800594c:	b082      	sub	sp, #8
 800594e:	af00      	add	r7, sp, #0
 8005950:	6078      	str	r0, [r7, #4]
 8005952:	6039      	str	r1, [r7, #0]
  if (lsm303agr_mag_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	331c      	adds	r3, #28
 8005958:	6839      	ldr	r1, [r7, #0]
 800595a:	4618      	mov	r0, r3
 800595c:	f000 fe32 	bl	80065c4 <lsm303agr_mag_device_id_get>
 8005960:	4603      	mov	r3, r0
 8005962:	2b00      	cmp	r3, #0
 8005964:	d002      	beq.n	800596c <LSM303AGR_MAG_ReadID+0x22>
  {
    return LSM303AGR_ERROR;
 8005966:	f04f 33ff 	mov.w	r3, #4294967295
 800596a:	e000      	b.n	800596e <LSM303AGR_MAG_ReadID+0x24>
  }

  return LSM303AGR_OK;
 800596c:	2300      	movs	r3, #0
}
 800596e:	4618      	mov	r0, r3
 8005970:	3708      	adds	r7, #8
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
	...

08005978 <LSM303AGR_MAG_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM303AGR magnetometer sensor capabilities
 * @retval Component status
 */
int32_t LSM303AGR_MAG_GetCapabilities(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
 8005978:	b480      	push	{r7}
 800597a:	b083      	sub	sp, #12
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	2200      	movs	r2, #0
 8005986:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	2200      	movs	r2, #0
 800598c:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	2201      	movs	r2, #1
 8005992:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	2200      	movs	r2, #0
 8005998:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	2200      	movs	r2, #0
 800599e:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	2200      	movs	r2, #0
 80059a4:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	2232      	movs	r2, #50	; 0x32
 80059aa:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	f04f 0200 	mov.w	r2, #0
 80059b2:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	f04f 0200 	mov.w	r2, #0
 80059ba:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	4a04      	ldr	r2, [pc, #16]	; (80059d0 <LSM303AGR_MAG_GetCapabilities+0x58>)
 80059c0:	619a      	str	r2, [r3, #24]
  return LSM303AGR_OK;
 80059c2:	2300      	movs	r3, #0
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	370c      	adds	r7, #12
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr
 80059d0:	42c80000 	.word	0x42c80000

080059d4 <LSM303AGR_MAG_Enable>:
 * @brief Enable the LSM303AGR magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Enable(LSM303AGR_MAG_Object_t *pObj)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b082      	sub	sp, #8
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d101      	bne.n	80059ea <LSM303AGR_MAG_Enable+0x16>
  {
    return LSM303AGR_OK;
 80059e6:	2300      	movs	r3, #0
 80059e8:	e010      	b.n	8005a0c <LSM303AGR_MAG_Enable+0x38>
  }

  /* Output data rate selection. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_CONTINUOUS_MODE) != LSM303AGR_OK)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	331c      	adds	r3, #28
 80059ee:	2100      	movs	r1, #0
 80059f0:	4618      	mov	r0, r3
 80059f2:	f000 fd1a 	bl	800642a <lsm303agr_mag_operating_mode_set>
 80059f6:	4603      	mov	r3, r0
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d002      	beq.n	8005a02 <LSM303AGR_MAG_Enable+0x2e>
  {
    return LSM303AGR_ERROR;
 80059fc:	f04f 33ff 	mov.w	r3, #4294967295
 8005a00:	e004      	b.n	8005a0c <LSM303AGR_MAG_Enable+0x38>
  }

  pObj->mag_is_enabled = 1;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2201      	movs	r2, #1
 8005a06:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8005a0a:	2300      	movs	r3, #0
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3708      	adds	r7, #8
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}

08005a14 <LSM303AGR_MAG_Disable>:
 * @brief Disable the LSM303AGR magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Disable(LSM303AGR_MAG_Object_t *pObj)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b082      	sub	sp, #8
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d101      	bne.n	8005a2a <LSM303AGR_MAG_Disable+0x16>
  {
    return LSM303AGR_OK;
 8005a26:	2300      	movs	r3, #0
 8005a28:	e010      	b.n	8005a4c <LSM303AGR_MAG_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	331c      	adds	r3, #28
 8005a2e:	2102      	movs	r1, #2
 8005a30:	4618      	mov	r0, r3
 8005a32:	f000 fcfa 	bl	800642a <lsm303agr_mag_operating_mode_set>
 8005a36:	4603      	mov	r3, r0
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d002      	beq.n	8005a42 <LSM303AGR_MAG_Disable+0x2e>
  {
    return LSM303AGR_ERROR;
 8005a3c:	f04f 33ff 	mov.w	r3, #4294967295
 8005a40:	e004      	b.n	8005a4c <LSM303AGR_MAG_Disable+0x38>
  }

  pObj->mag_is_enabled = 0;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2200      	movs	r2, #0
 8005a46:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8005a4a:	2300      	movs	r3, #0
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3708      	adds	r7, #8
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}

08005a54 <LSM303AGR_MAG_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetSensitivity(LSM303AGR_MAG_Object_t *pObj, float *Sensitivity)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
  *Sensitivity = LSM303AGR_MAG_SENSITIVITY_FS_50GAUSS;
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8005a64:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 8005a66:	2300      	movs	r3, #0
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	370c      	adds	r7, #12
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr

08005a74 <LSM303AGR_MAG_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetOutputDataRate(LSM303AGR_MAG_Object_t *pObj, float *Odr)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b084      	sub	sp, #16
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	60fb      	str	r3, [r7, #12]
  lsm303agr_mg_odr_m_t odr_low_level;

  /* Get current output data rate. */
  if (lsm303agr_mag_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	331c      	adds	r3, #28
 8005a86:	f107 020b 	add.w	r2, r7, #11
 8005a8a:	4611      	mov	r1, r2
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f000 fd19 	bl	80064c4 <lsm303agr_mag_data_rate_get>
 8005a92:	4603      	mov	r3, r0
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d002      	beq.n	8005a9e <LSM303AGR_MAG_GetOutputDataRate+0x2a>
  {
    return LSM303AGR_ERROR;
 8005a98:	f04f 33ff 	mov.w	r3, #4294967295
 8005a9c:	e023      	b.n	8005ae6 <LSM303AGR_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 8005a9e:	7afb      	ldrb	r3, [r7, #11]
 8005aa0:	2b03      	cmp	r3, #3
 8005aa2:	d81b      	bhi.n	8005adc <LSM303AGR_MAG_GetOutputDataRate+0x68>
 8005aa4:	a201      	add	r2, pc, #4	; (adr r2, 8005aac <LSM303AGR_MAG_GetOutputDataRate+0x38>)
 8005aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aaa:	bf00      	nop
 8005aac:	08005abd 	.word	0x08005abd
 8005ab0:	08005ac5 	.word	0x08005ac5
 8005ab4:	08005acd 	.word	0x08005acd
 8005ab8:	08005ad5 	.word	0x08005ad5
  {
    case LSM303AGR_MG_ODR_10Hz:
      *Odr = 10.0f;
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	4a0c      	ldr	r2, [pc, #48]	; (8005af0 <LSM303AGR_MAG_GetOutputDataRate+0x7c>)
 8005ac0:	601a      	str	r2, [r3, #0]
      break;
 8005ac2:	e00f      	b.n	8005ae4 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_20Hz:
      *Odr = 20.0f;
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	4a0b      	ldr	r2, [pc, #44]	; (8005af4 <LSM303AGR_MAG_GetOutputDataRate+0x80>)
 8005ac8:	601a      	str	r2, [r3, #0]
      break;
 8005aca:	e00b      	b.n	8005ae4 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_50Hz:
      *Odr = 50.0f;
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	4a0a      	ldr	r2, [pc, #40]	; (8005af8 <LSM303AGR_MAG_GetOutputDataRate+0x84>)
 8005ad0:	601a      	str	r2, [r3, #0]
      break;
 8005ad2:	e007      	b.n	8005ae4 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_100Hz:
      *Odr = 100.0f;
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	4a09      	ldr	r2, [pc, #36]	; (8005afc <LSM303AGR_MAG_GetOutputDataRate+0x88>)
 8005ad8:	601a      	str	r2, [r3, #0]
      break;
 8005ada:	e003      	b.n	8005ae4 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8005adc:	f04f 33ff 	mov.w	r3, #4294967295
 8005ae0:	60fb      	str	r3, [r7, #12]
      break;
 8005ae2:	bf00      	nop
  }

  return ret;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3710      	adds	r7, #16
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
 8005aee:	bf00      	nop
 8005af0:	41200000 	.word	0x41200000
 8005af4:	41a00000 	.word	0x41a00000
 8005af8:	42480000 	.word	0x42480000
 8005afc:	42c80000 	.word	0x42c80000

08005b00 <LSM303AGR_MAG_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_SetOutputDataRate(LSM303AGR_MAG_Object_t *pObj, float Odr)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b084      	sub	sp, #16
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
  lsm303agr_mg_odr_m_t new_odr;

  new_odr = (Odr <= 10.000f) ? LSM303AGR_MG_ODR_10Hz
            : (Odr <= 20.000f) ? LSM303AGR_MG_ODR_20Hz
 8005b0a:	edd7 7a00 	vldr	s15, [r7]
 8005b0e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005b12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b1a:	d801      	bhi.n	8005b20 <LSM303AGR_MAG_SetOutputDataRate+0x20>
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	e016      	b.n	8005b4e <LSM303AGR_MAG_SetOutputDataRate+0x4e>
 8005b20:	edd7 7a00 	vldr	s15, [r7]
 8005b24:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8005b28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b30:	d801      	bhi.n	8005b36 <LSM303AGR_MAG_SetOutputDataRate+0x36>
 8005b32:	2301      	movs	r3, #1
 8005b34:	e00b      	b.n	8005b4e <LSM303AGR_MAG_SetOutputDataRate+0x4e>
 8005b36:	edd7 7a00 	vldr	s15, [r7]
 8005b3a:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8005b74 <LSM303AGR_MAG_SetOutputDataRate+0x74>
 8005b3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b46:	d801      	bhi.n	8005b4c <LSM303AGR_MAG_SetOutputDataRate+0x4c>
 8005b48:	2302      	movs	r3, #2
 8005b4a:	e000      	b.n	8005b4e <LSM303AGR_MAG_SetOutputDataRate+0x4e>
 8005b4c:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LSM303AGR_MG_ODR_10Hz
 8005b4e:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LSM303AGR_MG_ODR_50Hz
            :                    LSM303AGR_MG_ODR_100Hz;

  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	331c      	adds	r3, #28
 8005b54:	7bfa      	ldrb	r2, [r7, #15]
 8005b56:	4611      	mov	r1, r2
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f000 fc8c 	bl	8006476 <lsm303agr_mag_data_rate_set>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d002      	beq.n	8005b6a <LSM303AGR_MAG_SetOutputDataRate+0x6a>
  {
    return LSM303AGR_ERROR;
 8005b64:	f04f 33ff 	mov.w	r3, #4294967295
 8005b68:	e000      	b.n	8005b6c <LSM303AGR_MAG_SetOutputDataRate+0x6c>
  }

  return LSM303AGR_OK;
 8005b6a:	2300      	movs	r3, #0
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3710      	adds	r7, #16
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}
 8005b74:	42480000 	.word	0x42480000

08005b78 <LSM303AGR_MAG_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t *FullScale)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b083      	sub	sp, #12
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	2232      	movs	r2, #50	; 0x32
 8005b86:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	370c      	adds	r7, #12
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr

08005b96 <LSM303AGR_MAG_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_SetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t FullScale)
{
 8005b96:	b480      	push	{r7}
 8005b98:	b083      	sub	sp, #12
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	6078      	str	r0, [r7, #4]
 8005b9e:	6039      	str	r1, [r7, #0]
  return LSM303AGR_OK;
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	370c      	adds	r7, #12
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr

08005bae <LSM303AGR_MAG_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetAxesRaw(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 8005bae:	b580      	push	{r7, lr}
 8005bb0:	b084      	sub	sp, #16
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	6078      	str	r0, [r7, #4]
 8005bb6:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM303AGR_OK)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	331c      	adds	r3, #28
 8005bbc:	f107 0208 	add.w	r2, r7, #8
 8005bc0:	4611      	mov	r1, r2
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f000 fcdc 	bl	8006580 <lsm303agr_magnetic_raw_get>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d002      	beq.n	8005bd4 <LSM303AGR_MAG_GetAxesRaw+0x26>
  {
    return LSM303AGR_ERROR;
 8005bce:	f04f 33ff 	mov.w	r3, #4294967295
 8005bd2:	e00c      	b.n	8005bee <LSM303AGR_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8005bd4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8005bdc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8005be4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	809a      	strh	r2, [r3, #4]

  return LSM303AGR_OK;
 8005bec:	2300      	movs	r3, #0
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3710      	adds	r7, #16
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}

08005bf6 <LSM303AGR_MAG_GetAxes>:
 * @param  pObj the device pObj
 * @param  MagneticField pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetAxes(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Axes_t *MagneticField)
{
 8005bf6:	b580      	push	{r7, lr}
 8005bf8:	b086      	sub	sp, #24
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]
 8005bfe:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM303AGR_OK)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	331c      	adds	r3, #28
 8005c04:	f107 0210 	add.w	r2, r7, #16
 8005c08:	4611      	mov	r1, r2
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f000 fcb8 	bl	8006580 <lsm303agr_magnetic_raw_get>
 8005c10:	4603      	mov	r3, r0
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d002      	beq.n	8005c1c <LSM303AGR_MAG_GetAxes+0x26>
  {
    return LSM303AGR_ERROR;
 8005c16:	f04f 33ff 	mov.w	r3, #4294967295
 8005c1a:	e036      	b.n	8005c8a <LSM303AGR_MAG_GetAxes+0x94>
  }

  /* Get LSM303AGR actual sensitivity. */
  (void)LSM303AGR_MAG_GetSensitivity(pObj, &sensitivity);
 8005c1c:	f107 030c 	add.w	r3, r7, #12
 8005c20:	4619      	mov	r1, r3
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f7ff ff16 	bl	8005a54 <LSM303AGR_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8005c28:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005c2c:	ee07 3a90 	vmov	s15, r3
 8005c30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005c34:	edd7 7a03 	vldr	s15, [r7, #12]
 8005c38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c40:	ee17 2a90 	vmov	r2, s15
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8005c48:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005c4c:	ee07 3a90 	vmov	s15, r3
 8005c50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005c54:	edd7 7a03 	vldr	s15, [r7, #12]
 8005c58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c60:	ee17 2a90 	vmov	r2, s15
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8005c68:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005c6c:	ee07 3a90 	vmov	s15, r3
 8005c70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005c74:	edd7 7a03 	vldr	s15, [r7, #12]
 8005c78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c80:	ee17 2a90 	vmov	r2, s15
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 8005c88:	2300      	movs	r3, #0
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3718      	adds	r7, #24
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}
	...

08005c94 <LSM303AGR_ACC_GetSensitivityHR>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityHR(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b084      	sub	sp, #16
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	331c      	adds	r3, #28
 8005ca6:	f107 020b 	add.w	r2, r7, #11
 8005caa:	4611      	mov	r1, r2
 8005cac:	4618      	mov	r0, r3
 8005cae:	f000 fb4d 	bl	800634c <lsm303agr_xl_full_scale_get>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d002      	beq.n	8005cbe <LSM303AGR_ACC_GetSensitivityHR+0x2a>
  {
    return LSM303AGR_ERROR;
 8005cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8005cbc:	e023      	b.n	8005d06 <LSM303AGR_ACC_GetSensitivityHR+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 8005cbe:	7afb      	ldrb	r3, [r7, #11]
 8005cc0:	2b03      	cmp	r3, #3
 8005cc2:	d81b      	bhi.n	8005cfc <LSM303AGR_ACC_GetSensitivityHR+0x68>
 8005cc4:	a201      	add	r2, pc, #4	; (adr r2, 8005ccc <LSM303AGR_ACC_GetSensitivityHR+0x38>)
 8005cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cca:	bf00      	nop
 8005ccc:	08005cdd 	.word	0x08005cdd
 8005cd0:	08005ce5 	.word	0x08005ce5
 8005cd4:	08005ced 	.word	0x08005ced
 8005cd8:	08005cf5 	.word	0x08005cf5
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_HIGH_RESOLUTION_MODE;
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	4a0c      	ldr	r2, [pc, #48]	; (8005d10 <LSM303AGR_ACC_GetSensitivityHR+0x7c>)
 8005ce0:	601a      	str	r2, [r3, #0]
      break;
 8005ce2:	e00f      	b.n	8005d04 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_HIGH_RESOLUTION_MODE;
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	4a0b      	ldr	r2, [pc, #44]	; (8005d14 <LSM303AGR_ACC_GetSensitivityHR+0x80>)
 8005ce8:	601a      	str	r2, [r3, #0]
      break;
 8005cea:	e00b      	b.n	8005d04 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_HIGH_RESOLUTION_MODE;
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	4a0a      	ldr	r2, [pc, #40]	; (8005d18 <LSM303AGR_ACC_GetSensitivityHR+0x84>)
 8005cf0:	601a      	str	r2, [r3, #0]
      break;
 8005cf2:	e007      	b.n	8005d04 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_HIGH_RESOLUTION_MODE;
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	4a09      	ldr	r2, [pc, #36]	; (8005d1c <LSM303AGR_ACC_GetSensitivityHR+0x88>)
 8005cf8:	601a      	str	r2, [r3, #0]
      break;
 8005cfa:	e003      	b.n	8005d04 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8005cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8005d00:	60fb      	str	r3, [r7, #12]
      break;
 8005d02:	bf00      	nop
  }

  return ret;
 8005d04:	68fb      	ldr	r3, [r7, #12]
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3710      	adds	r7, #16
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}
 8005d0e:	bf00      	nop
 8005d10:	3f7ae148 	.word	0x3f7ae148
 8005d14:	3ff9999a 	.word	0x3ff9999a
 8005d18:	4079999a 	.word	0x4079999a
 8005d1c:	413b851f 	.word	0x413b851f

08005d20 <LSM303AGR_ACC_GetSensitivityNM>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityNM(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b084      	sub	sp, #16
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	331c      	adds	r3, #28
 8005d32:	f107 020b 	add.w	r2, r7, #11
 8005d36:	4611      	mov	r1, r2
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f000 fb07 	bl	800634c <lsm303agr_xl_full_scale_get>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d002      	beq.n	8005d4a <LSM303AGR_ACC_GetSensitivityNM+0x2a>
  {
    return LSM303AGR_ERROR;
 8005d44:	f04f 33ff 	mov.w	r3, #4294967295
 8005d48:	e023      	b.n	8005d92 <LSM303AGR_ACC_GetSensitivityNM+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 8005d4a:	7afb      	ldrb	r3, [r7, #11]
 8005d4c:	2b03      	cmp	r3, #3
 8005d4e:	d81b      	bhi.n	8005d88 <LSM303AGR_ACC_GetSensitivityNM+0x68>
 8005d50:	a201      	add	r2, pc, #4	; (adr r2, 8005d58 <LSM303AGR_ACC_GetSensitivityNM+0x38>)
 8005d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d56:	bf00      	nop
 8005d58:	08005d69 	.word	0x08005d69
 8005d5c:	08005d71 	.word	0x08005d71
 8005d60:	08005d79 	.word	0x08005d79
 8005d64:	08005d81 	.word	0x08005d81
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_NORMAL_MODE;
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	4a0c      	ldr	r2, [pc, #48]	; (8005d9c <LSM303AGR_ACC_GetSensitivityNM+0x7c>)
 8005d6c:	601a      	str	r2, [r3, #0]
      break;
 8005d6e:	e00f      	b.n	8005d90 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_NORMAL_MODE;
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	4a0b      	ldr	r2, [pc, #44]	; (8005da0 <LSM303AGR_ACC_GetSensitivityNM+0x80>)
 8005d74:	601a      	str	r2, [r3, #0]
      break;
 8005d76:	e00b      	b.n	8005d90 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_NORMAL_MODE;
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	4a0a      	ldr	r2, [pc, #40]	; (8005da4 <LSM303AGR_ACC_GetSensitivityNM+0x84>)
 8005d7c:	601a      	str	r2, [r3, #0]
      break;
 8005d7e:	e007      	b.n	8005d90 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_NORMAL_MODE;
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	4a09      	ldr	r2, [pc, #36]	; (8005da8 <LSM303AGR_ACC_GetSensitivityNM+0x88>)
 8005d84:	601a      	str	r2, [r3, #0]
      break;
 8005d86:	e003      	b.n	8005d90 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8005d88:	f04f 33ff 	mov.w	r3, #4294967295
 8005d8c:	60fb      	str	r3, [r7, #12]
      break;
 8005d8e:	bf00      	nop
  }

  return ret;
 8005d90:	68fb      	ldr	r3, [r7, #12]
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3710      	adds	r7, #16
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}
 8005d9a:	bf00      	nop
 8005d9c:	4079999a 	.word	0x4079999a
 8005da0:	40fa3d71 	.word	0x40fa3d71
 8005da4:	417a147b 	.word	0x417a147b
 8005da8:	423b999a 	.word	0x423b999a

08005dac <LSM303AGR_ACC_GetSensitivityLP>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityLP(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b084      	sub	sp, #16
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8005db6:	2300      	movs	r3, #0
 8005db8:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	331c      	adds	r3, #28
 8005dbe:	f107 020b 	add.w	r2, r7, #11
 8005dc2:	4611      	mov	r1, r2
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f000 fac1 	bl	800634c <lsm303agr_xl_full_scale_get>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d002      	beq.n	8005dd6 <LSM303AGR_ACC_GetSensitivityLP+0x2a>
  {
    return LSM303AGR_ERROR;
 8005dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8005dd4:	e023      	b.n	8005e1e <LSM303AGR_ACC_GetSensitivityLP+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 8005dd6:	7afb      	ldrb	r3, [r7, #11]
 8005dd8:	2b03      	cmp	r3, #3
 8005dda:	d81b      	bhi.n	8005e14 <LSM303AGR_ACC_GetSensitivityLP+0x68>
 8005ddc:	a201      	add	r2, pc, #4	; (adr r2, 8005de4 <LSM303AGR_ACC_GetSensitivityLP+0x38>)
 8005dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005de2:	bf00      	nop
 8005de4:	08005df5 	.word	0x08005df5
 8005de8:	08005dfd 	.word	0x08005dfd
 8005dec:	08005e05 	.word	0x08005e05
 8005df0:	08005e0d 	.word	0x08005e0d
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_LOW_POWER_MODE;
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	4a0c      	ldr	r2, [pc, #48]	; (8005e28 <LSM303AGR_ACC_GetSensitivityLP+0x7c>)
 8005df8:	601a      	str	r2, [r3, #0]
      break;
 8005dfa:	e00f      	b.n	8005e1c <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_LOW_POWER_MODE;
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	4a0b      	ldr	r2, [pc, #44]	; (8005e2c <LSM303AGR_ACC_GetSensitivityLP+0x80>)
 8005e00:	601a      	str	r2, [r3, #0]
      break;
 8005e02:	e00b      	b.n	8005e1c <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_LOW_POWER_MODE;
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	4a0a      	ldr	r2, [pc, #40]	; (8005e30 <LSM303AGR_ACC_GetSensitivityLP+0x84>)
 8005e08:	601a      	str	r2, [r3, #0]
      break;
 8005e0a:	e007      	b.n	8005e1c <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_LOW_POWER_MODE;
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	4a09      	ldr	r2, [pc, #36]	; (8005e34 <LSM303AGR_ACC_GetSensitivityLP+0x88>)
 8005e10:	601a      	str	r2, [r3, #0]
      break;
 8005e12:	e003      	b.n	8005e1c <LSM303AGR_ACC_GetSensitivityLP+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8005e14:	f04f 33ff 	mov.w	r3, #4294967295
 8005e18:	60fb      	str	r3, [r7, #12]
      break;
 8005e1a:	bf00      	nop
  }

  return ret;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3710      	adds	r7, #16
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}
 8005e26:	bf00      	nop
 8005e28:	417a147b 	.word	0x417a147b
 8005e2c:	41fa147b 	.word	0x41fa147b
 8005e30:	427a147b 	.word	0x427a147b
 8005e34:	433b947b 	.word	0x433b947b

08005e38 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Enabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b084      	sub	sp, #16
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	6039      	str	r1, [r7, #0]
  lsm303agr_odr_a_t new_odr;

  new_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
            : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 8005e42:	edd7 7a00 	vldr	s15, [r7]
 8005e46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e52:	d801      	bhi.n	8005e58 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x20>
 8005e54:	2301      	movs	r3, #1
 8005e56:	e037      	b.n	8005ec8 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x90>
 8005e58:	edd7 7a00 	vldr	s15, [r7]
 8005e5c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005e60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e68:	d801      	bhi.n	8005e6e <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x36>
 8005e6a:	2302      	movs	r3, #2
 8005e6c:	e02c      	b.n	8005ec8 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x90>
 8005e6e:	edd7 7a00 	vldr	s15, [r7]
 8005e72:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8005e76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e7e:	d801      	bhi.n	8005e84 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x4c>
 8005e80:	2303      	movs	r3, #3
 8005e82:	e021      	b.n	8005ec8 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x90>
 8005e84:	edd7 7a00 	vldr	s15, [r7]
 8005e88:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8005ef0 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xb8>
 8005e8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e94:	d801      	bhi.n	8005e9a <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x62>
 8005e96:	2304      	movs	r3, #4
 8005e98:	e016      	b.n	8005ec8 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x90>
 8005e9a:	edd7 7a00 	vldr	s15, [r7]
 8005e9e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8005ef4 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8005ea2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005eaa:	d801      	bhi.n	8005eb0 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x78>
 8005eac:	2305      	movs	r3, #5
 8005eae:	e00b      	b.n	8005ec8 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x90>
 8005eb0:	edd7 7a00 	vldr	s15, [r7]
 8005eb4:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8005ef8 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8005eb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ec0:	d801      	bhi.n	8005ec6 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x8e>
 8005ec2:	2306      	movs	r3, #6
 8005ec4:	e000      	b.n	8005ec8 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x90>
 8005ec6:	2307      	movs	r3, #7
  new_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 8005ec8:	73fb      	strb	r3, [r7, #15]
            : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
            : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
            :                    LSM303AGR_XL_ODR_400Hz;

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	331c      	adds	r3, #28
 8005ece:	7bfa      	ldrb	r2, [r7, #15]
 8005ed0:	4611      	mov	r1, r2
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f000 f992 	bl	80061fc <lsm303agr_xl_data_rate_set>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d002      	beq.n	8005ee4 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xac>
  {
    return LSM303AGR_ERROR;
 8005ede:	f04f 33ff 	mov.w	r3, #4294967295
 8005ee2:	e000      	b.n	8005ee6 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xae>
  }

  return LSM303AGR_OK;
 8005ee4:	2300      	movs	r3, #0
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3710      	adds	r7, #16
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	42480000 	.word	0x42480000
 8005ef4:	42c80000 	.word	0x42c80000
 8005ef8:	43480000 	.word	0x43480000

08005efc <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Disabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b083      	sub	sp, #12
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
                  : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 8005f06:	edd7 7a00 	vldr	s15, [r7]
 8005f0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f16:	d801      	bhi.n	8005f1c <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x20>
 8005f18:	2301      	movs	r3, #1
 8005f1a:	e037      	b.n	8005f8c <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x90>
 8005f1c:	edd7 7a00 	vldr	s15, [r7]
 8005f20:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005f24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f2c:	d801      	bhi.n	8005f32 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x36>
 8005f2e:	2302      	movs	r3, #2
 8005f30:	e02c      	b.n	8005f8c <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x90>
 8005f32:	edd7 7a00 	vldr	s15, [r7]
 8005f36:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8005f3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f42:	d801      	bhi.n	8005f48 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x4c>
 8005f44:	2303      	movs	r3, #3
 8005f46:	e021      	b.n	8005f8c <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x90>
 8005f48:	edd7 7a00 	vldr	s15, [r7]
 8005f4c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005fa0 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xa4>
 8005f50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f58:	d801      	bhi.n	8005f5e <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x62>
 8005f5a:	2304      	movs	r3, #4
 8005f5c:	e016      	b.n	8005f8c <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x90>
 8005f5e:	edd7 7a00 	vldr	s15, [r7]
 8005f62:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8005fa4 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xa8>
 8005f66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f6e:	d801      	bhi.n	8005f74 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x78>
 8005f70:	2305      	movs	r3, #5
 8005f72:	e00b      	b.n	8005f8c <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x90>
 8005f74:	edd7 7a00 	vldr	s15, [r7]
 8005f78:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8005fa8 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xac>
 8005f7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f84:	d801      	bhi.n	8005f8a <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x8e>
 8005f86:	2306      	movs	r3, #6
 8005f88:	e000      	b.n	8005f8c <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x90>
 8005f8a:	2307      	movs	r3, #7
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 8005f8c:	687a      	ldr	r2, [r7, #4]
 8005f8e:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
                  : (Odr <=   50.0f) ? LSM303AGR_XL_ODR_50Hz
                  : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
                  : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
                  :                    LSM303AGR_XL_ODR_400Hz;

  return LSM303AGR_OK;
 8005f92:	2300      	movs	r3, #0
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	370c      	adds	r7, #12
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr
 8005fa0:	42480000 	.word	0x42480000
 8005fa4:	42c80000 	.word	0x42c80000
 8005fa8:	43480000 	.word	0x43480000

08005fac <ReadAccRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005fac:	b590      	push	{r4, r7, lr}
 8005fae:	b087      	sub	sp, #28
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	60f8      	str	r0, [r7, #12]
 8005fb4:	607a      	str	r2, [r7, #4]
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	460b      	mov	r3, r1
 8005fba:	72fb      	strb	r3, [r7, #11]
 8005fbc:	4613      	mov	r3, r2
 8005fbe:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d10e      	bne.n	8005fea <ReadAccRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	695c      	ldr	r4, [r3, #20]
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	7b1b      	ldrb	r3, [r3, #12]
 8005fd4:	b298      	uxth	r0, r3
 8005fd6:	7afb      	ldrb	r3, [r7, #11]
 8005fd8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	b299      	uxth	r1, r3
 8005fe0:	893b      	ldrh	r3, [r7, #8]
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	47a0      	blx	r4
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	e00d      	b.n	8006006 <ReadAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	695c      	ldr	r4, [r3, #20]
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	7b1b      	ldrb	r3, [r3, #12]
 8005ff2:	b298      	uxth	r0, r3
 8005ff4:	7afb      	ldrb	r3, [r7, #11]
 8005ff6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ffa:	b2db      	uxtb	r3, r3
 8005ffc:	b299      	uxth	r1, r3
 8005ffe:	893b      	ldrh	r3, [r7, #8]
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	47a0      	blx	r4
 8006004:	4603      	mov	r3, r0
  }
}
 8006006:	4618      	mov	r0, r3
 8006008:	371c      	adds	r7, #28
 800600a:	46bd      	mov	sp, r7
 800600c:	bd90      	pop	{r4, r7, pc}

0800600e <WriteAccRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800600e:	b590      	push	{r4, r7, lr}
 8006010:	b087      	sub	sp, #28
 8006012:	af00      	add	r7, sp, #0
 8006014:	60f8      	str	r0, [r7, #12]
 8006016:	607a      	str	r2, [r7, #4]
 8006018:	461a      	mov	r2, r3
 800601a:	460b      	mov	r3, r1
 800601c:	72fb      	strb	r3, [r7, #11]
 800601e:	4613      	mov	r3, r2
 8006020:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d10e      	bne.n	800604c <WriteAccRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	691c      	ldr	r4, [r3, #16]
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	7b1b      	ldrb	r3, [r3, #12]
 8006036:	b298      	uxth	r0, r3
 8006038:	7afb      	ldrb	r3, [r7, #11]
 800603a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800603e:	b2db      	uxtb	r3, r3
 8006040:	b299      	uxth	r1, r3
 8006042:	893b      	ldrh	r3, [r7, #8]
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	47a0      	blx	r4
 8006048:	4603      	mov	r3, r0
 800604a:	e00d      	b.n	8006068 <WriteAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	691c      	ldr	r4, [r3, #16]
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	7b1b      	ldrb	r3, [r3, #12]
 8006054:	b298      	uxth	r0, r3
 8006056:	7afb      	ldrb	r3, [r7, #11]
 8006058:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800605c:	b2db      	uxtb	r3, r3
 800605e:	b299      	uxth	r1, r3
 8006060:	893b      	ldrh	r3, [r7, #8]
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	47a0      	blx	r4
 8006066:	4603      	mov	r3, r0
  }
}
 8006068:	4618      	mov	r0, r3
 800606a:	371c      	adds	r7, #28
 800606c:	46bd      	mov	sp, r7
 800606e:	bd90      	pop	{r4, r7, pc}

08006070 <ReadMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8006070:	b590      	push	{r4, r7, lr}
 8006072:	b087      	sub	sp, #28
 8006074:	af00      	add	r7, sp, #0
 8006076:	60f8      	str	r0, [r7, #12]
 8006078:	607a      	str	r2, [r7, #4]
 800607a:	461a      	mov	r2, r3
 800607c:	460b      	mov	r3, r1
 800607e:	72fb      	strb	r3, [r7, #11]
 8006080:	4613      	mov	r3, r2
 8006082:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d10e      	bne.n	80060ae <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	695c      	ldr	r4, [r3, #20]
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	7b1b      	ldrb	r3, [r3, #12]
 8006098:	b298      	uxth	r0, r3
 800609a:	7afb      	ldrb	r3, [r7, #11]
 800609c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	b299      	uxth	r1, r3
 80060a4:	893b      	ldrh	r3, [r7, #8]
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	47a0      	blx	r4
 80060aa:	4603      	mov	r3, r0
 80060ac:	e00d      	b.n	80060ca <ReadMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	695c      	ldr	r4, [r3, #20]
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	7b1b      	ldrb	r3, [r3, #12]
 80060b6:	b298      	uxth	r0, r3
 80060b8:	7afb      	ldrb	r3, [r7, #11]
 80060ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060be:	b2db      	uxtb	r3, r3
 80060c0:	b299      	uxth	r1, r3
 80060c2:	893b      	ldrh	r3, [r7, #8]
 80060c4:	687a      	ldr	r2, [r7, #4]
 80060c6:	47a0      	blx	r4
 80060c8:	4603      	mov	r3, r0
  }
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	371c      	adds	r7, #28
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd90      	pop	{r4, r7, pc}

080060d2 <WriteMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80060d2:	b590      	push	{r4, r7, lr}
 80060d4:	b087      	sub	sp, #28
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	60f8      	str	r0, [r7, #12]
 80060da:	607a      	str	r2, [r7, #4]
 80060dc:	461a      	mov	r2, r3
 80060de:	460b      	mov	r3, r1
 80060e0:	72fb      	strb	r3, [r7, #11]
 80060e2:	4613      	mov	r3, r2
 80060e4:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d10e      	bne.n	8006110 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	691c      	ldr	r4, [r3, #16]
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	7b1b      	ldrb	r3, [r3, #12]
 80060fa:	b298      	uxth	r0, r3
 80060fc:	7afb      	ldrb	r3, [r7, #11]
 80060fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006102:	b2db      	uxtb	r3, r3
 8006104:	b299      	uxth	r1, r3
 8006106:	893b      	ldrh	r3, [r7, #8]
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	47a0      	blx	r4
 800610c:	4603      	mov	r3, r0
 800610e:	e00d      	b.n	800612c <WriteMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	691c      	ldr	r4, [r3, #16]
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	7b1b      	ldrb	r3, [r3, #12]
 8006118:	b298      	uxth	r0, r3
 800611a:	7afb      	ldrb	r3, [r7, #11]
 800611c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006120:	b2db      	uxtb	r3, r3
 8006122:	b299      	uxth	r1, r3
 8006124:	893b      	ldrh	r3, [r7, #8]
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	47a0      	blx	r4
 800612a:	4603      	mov	r3, r0
  }
}
 800612c:	4618      	mov	r0, r3
 800612e:	371c      	adds	r7, #28
 8006130:	46bd      	mov	sp, r7
 8006132:	bd90      	pop	{r4, r7, pc}

08006134 <lsm303agr_read_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm303agr_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 8006134:	b590      	push	{r4, r7, lr}
 8006136:	b087      	sub	sp, #28
 8006138:	af00      	add	r7, sp, #0
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	607a      	str	r2, [r7, #4]
 800613e:	461a      	mov	r2, r3
 8006140:	460b      	mov	r3, r1
 8006142:	72fb      	strb	r3, [r7, #11]
 8006144:	4613      	mov	r3, r2
 8006146:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	685c      	ldr	r4, [r3, #4]
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	6898      	ldr	r0, [r3, #8]
 8006150:	893b      	ldrh	r3, [r7, #8]
 8006152:	7af9      	ldrb	r1, [r7, #11]
 8006154:	687a      	ldr	r2, [r7, #4]
 8006156:	47a0      	blx	r4
 8006158:	6178      	str	r0, [r7, #20]
  return ret;
 800615a:	697b      	ldr	r3, [r7, #20]
}
 800615c:	4618      	mov	r0, r3
 800615e:	371c      	adds	r7, #28
 8006160:	46bd      	mov	sp, r7
 8006162:	bd90      	pop	{r4, r7, pc}

08006164 <lsm303agr_write_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm303agr_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 8006164:	b590      	push	{r4, r7, lr}
 8006166:	b087      	sub	sp, #28
 8006168:	af00      	add	r7, sp, #0
 800616a:	60f8      	str	r0, [r7, #12]
 800616c:	607a      	str	r2, [r7, #4]
 800616e:	461a      	mov	r2, r3
 8006170:	460b      	mov	r3, r1
 8006172:	72fb      	strb	r3, [r7, #11]
 8006174:	4613      	mov	r3, r2
 8006176:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681c      	ldr	r4, [r3, #0]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6898      	ldr	r0, [r3, #8]
 8006180:	893b      	ldrh	r3, [r7, #8]
 8006182:	7af9      	ldrb	r1, [r7, #11]
 8006184:	687a      	ldr	r2, [r7, #4]
 8006186:	47a0      	blx	r4
 8006188:	6178      	str	r0, [r7, #20]
  return ret;
 800618a:	697b      	ldr	r3, [r7, #20]
}
 800618c:	4618      	mov	r0, r3
 800618e:	371c      	adds	r7, #28
 8006190:	46bd      	mov	sp, r7
 8006192:	bd90      	pop	{r4, r7, pc}

08006194 <lsm303agr_xl_operating_mode_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_operating_mode_get(stmdev_ctx_t *ctx,
                                        lsm303agr_op_md_a_t *val)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b086      	sub	sp, #24
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;
  
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 800619e:	f107 020c 	add.w	r2, r7, #12
 80061a2:	2301      	movs	r3, #1
 80061a4:	2120      	movs	r1, #32
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f7ff ffc4 	bl	8006134 <lsm303agr_read_reg>
 80061ac:	6178      	str	r0, [r7, #20]
                           (uint8_t*)&ctrl_reg1_a, 1);
  if(ret == 0){
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d107      	bne.n	80061c4 <lsm303agr_xl_operating_mode_get+0x30>
    ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 80061b4:	f107 0210 	add.w	r2, r7, #16
 80061b8:	2301      	movs	r3, #1
 80061ba:	2123      	movs	r1, #35	; 0x23
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f7ff ffb9 	bl	8006134 <lsm303agr_read_reg>
 80061c2:	6178      	str	r0, [r7, #20]
                             (uint8_t*)&ctrl_reg4_a, 1);
  }

  if ( ctrl_reg1_a.lpen != PROPERTY_DISABLE ){
 80061c4:	7b3b      	ldrb	r3, [r7, #12]
 80061c6:	f003 0308 	and.w	r3, r3, #8
 80061ca:	b2db      	uxtb	r3, r3
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d003      	beq.n	80061d8 <lsm303agr_xl_operating_mode_get+0x44>
    *val = LSM303AGR_LP_8bit;
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	2202      	movs	r2, #2
 80061d4:	701a      	strb	r2, [r3, #0]
 80061d6:	e00c      	b.n	80061f2 <lsm303agr_xl_operating_mode_get+0x5e>
  } else if (ctrl_reg4_a.hr  != PROPERTY_DISABLE ) {
 80061d8:	7c3b      	ldrb	r3, [r7, #16]
 80061da:	f003 0308 	and.w	r3, r3, #8
 80061de:	b2db      	uxtb	r3, r3
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d003      	beq.n	80061ec <lsm303agr_xl_operating_mode_get+0x58>
    *val = LSM303AGR_HR_12bit;
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	2200      	movs	r2, #0
 80061e8:	701a      	strb	r2, [r3, #0]
 80061ea:	e002      	b.n	80061f2 <lsm303agr_xl_operating_mode_get+0x5e>
  } else{
    *val = LSM303AGR_NM_10bit;
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	2201      	movs	r2, #1
 80061f0:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 80061f2:	697b      	ldr	r3, [r7, #20]
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3718      	adds	r7, #24
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}

080061fc <lsm303agr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t val)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	460b      	mov	r3, r1
 8006206:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8006208:	f107 0208 	add.w	r2, r7, #8
 800620c:	2301      	movs	r3, #1
 800620e:	2120      	movs	r1, #32
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f7ff ff8f 	bl	8006134 <lsm303agr_read_reg>
 8006216:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&ctrl_reg1_a, 1);
  if(ret == 0){
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d10f      	bne.n	800623e <lsm303agr_xl_data_rate_set+0x42>
    ctrl_reg1_a.odr = (uint8_t)val;
 800621e:	78fb      	ldrb	r3, [r7, #3]
 8006220:	f003 030f 	and.w	r3, r3, #15
 8006224:	b2da      	uxtb	r2, r3
 8006226:	7a3b      	ldrb	r3, [r7, #8]
 8006228:	f362 1307 	bfi	r3, r2, #4, #4
 800622c:	723b      	strb	r3, [r7, #8]
   ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG1_A,
 800622e:	f107 0208 	add.w	r2, r7, #8
 8006232:	2301      	movs	r3, #1
 8006234:	2120      	movs	r1, #32
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f7ff ff94 	bl	8006164 <lsm303agr_write_reg>
 800623c:	60f8      	str	r0, [r7, #12]
                             (uint8_t*)&ctrl_reg1_a, 1);
  }

  return ret;
 800623e:	68fb      	ldr	r3, [r7, #12]
}
 8006240:	4618      	mov	r0, r3
 8006242:	3710      	adds	r7, #16
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}

08006248 <lsm303agr_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_get(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t *val)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b084      	sub	sp, #16
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8006252:	f107 0208 	add.w	r2, r7, #8
 8006256:	2301      	movs	r3, #1
 8006258:	2120      	movs	r1, #32
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f7ff ff6a 	bl	8006134 <lsm303agr_read_reg>
 8006260:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&ctrl_reg1_a, 1);

  switch (ctrl_reg1_a.odr){
 8006262:	7a3b      	ldrb	r3, [r7, #8]
 8006264:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006268:	b2db      	uxtb	r3, r3
 800626a:	2b09      	cmp	r3, #9
 800626c:	d83e      	bhi.n	80062ec <lsm303agr_xl_data_rate_get+0xa4>
 800626e:	a201      	add	r2, pc, #4	; (adr r2, 8006274 <lsm303agr_xl_data_rate_get+0x2c>)
 8006270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006274:	0800629d 	.word	0x0800629d
 8006278:	080062a5 	.word	0x080062a5
 800627c:	080062ad 	.word	0x080062ad
 8006280:	080062b5 	.word	0x080062b5
 8006284:	080062bd 	.word	0x080062bd
 8006288:	080062c5 	.word	0x080062c5
 800628c:	080062cd 	.word	0x080062cd
 8006290:	080062d5 	.word	0x080062d5
 8006294:	080062dd 	.word	0x080062dd
 8006298:	080062e5 	.word	0x080062e5
    case LSM303AGR_XL_POWER_DOWN:
      *val = LSM303AGR_XL_POWER_DOWN;
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	2200      	movs	r2, #0
 80062a0:	701a      	strb	r2, [r3, #0]
      break;
 80062a2:	e027      	b.n	80062f4 <lsm303agr_xl_data_rate_get+0xac>
    case LSM303AGR_XL_ODR_1Hz:
      *val = LSM303AGR_XL_ODR_1Hz;
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	2201      	movs	r2, #1
 80062a8:	701a      	strb	r2, [r3, #0]
      break;
 80062aa:	e023      	b.n	80062f4 <lsm303agr_xl_data_rate_get+0xac>
    case LSM303AGR_XL_ODR_10Hz:
      *val = LSM303AGR_XL_ODR_10Hz;
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	2202      	movs	r2, #2
 80062b0:	701a      	strb	r2, [r3, #0]
      break;
 80062b2:	e01f      	b.n	80062f4 <lsm303agr_xl_data_rate_get+0xac>
    case LSM303AGR_XL_ODR_25Hz:
      *val = LSM303AGR_XL_ODR_25Hz;
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	2203      	movs	r2, #3
 80062b8:	701a      	strb	r2, [r3, #0]
      break;
 80062ba:	e01b      	b.n	80062f4 <lsm303agr_xl_data_rate_get+0xac>
    case LSM303AGR_XL_ODR_50Hz:
      *val = LSM303AGR_XL_ODR_50Hz;
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	2204      	movs	r2, #4
 80062c0:	701a      	strb	r2, [r3, #0]
      break;
 80062c2:	e017      	b.n	80062f4 <lsm303agr_xl_data_rate_get+0xac>
    case LSM303AGR_XL_ODR_100Hz:
      *val = LSM303AGR_XL_ODR_100Hz;
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	2205      	movs	r2, #5
 80062c8:	701a      	strb	r2, [r3, #0]
      break;
 80062ca:	e013      	b.n	80062f4 <lsm303agr_xl_data_rate_get+0xac>
    case LSM303AGR_XL_ODR_200Hz:
      *val = LSM303AGR_XL_ODR_200Hz;
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	2206      	movs	r2, #6
 80062d0:	701a      	strb	r2, [r3, #0]
      break;
 80062d2:	e00f      	b.n	80062f4 <lsm303agr_xl_data_rate_get+0xac>
    case LSM303AGR_XL_ODR_400Hz:
      *val = LSM303AGR_XL_ODR_400Hz;
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	2207      	movs	r2, #7
 80062d8:	701a      	strb	r2, [r3, #0]
      break;
 80062da:	e00b      	b.n	80062f4 <lsm303agr_xl_data_rate_get+0xac>
    case LSM303AGR_XL_ODR_1kHz620_LP:
      *val = LSM303AGR_XL_ODR_1kHz620_LP;
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	2208      	movs	r2, #8
 80062e0:	701a      	strb	r2, [r3, #0]
      break;
 80062e2:	e007      	b.n	80062f4 <lsm303agr_xl_data_rate_get+0xac>
    case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
      *val = LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP;
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	2209      	movs	r2, #9
 80062e8:	701a      	strb	r2, [r3, #0]
      break;
 80062ea:	e003      	b.n	80062f4 <lsm303agr_xl_data_rate_get+0xac>
    default:
      *val = LSM303AGR_XL_POWER_DOWN;
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	2200      	movs	r2, #0
 80062f0:	701a      	strb	r2, [r3, #0]
      break;
 80062f2:	bf00      	nop
  }

  return ret;
 80062f4:	68fb      	ldr	r3, [r7, #12]
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3710      	adds	r7, #16
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}
 80062fe:	bf00      	nop

08006300 <lsm303agr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t val)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b084      	sub	sp, #16
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	460b      	mov	r3, r1
 800630a:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 800630c:	f107 0208 	add.w	r2, r7, #8
 8006310:	2301      	movs	r3, #1
 8006312:	2123      	movs	r1, #35	; 0x23
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f7ff ff0d 	bl	8006134 <lsm303agr_read_reg>
 800631a:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&ctrl_reg4_a, 1);
  if(ret == 0){
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d10f      	bne.n	8006342 <lsm303agr_xl_full_scale_set+0x42>
    ctrl_reg4_a.fs = (uint8_t)val;
 8006322:	78fb      	ldrb	r3, [r7, #3]
 8006324:	f003 0303 	and.w	r3, r3, #3
 8006328:	b2da      	uxtb	r2, r3
 800632a:	7a3b      	ldrb	r3, [r7, #8]
 800632c:	f362 1305 	bfi	r3, r2, #4, #2
 8006330:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8006332:	f107 0208 	add.w	r2, r7, #8
 8006336:	2301      	movs	r3, #1
 8006338:	2123      	movs	r1, #35	; 0x23
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f7ff ff12 	bl	8006164 <lsm303agr_write_reg>
 8006340:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&ctrl_reg4_a, 1);
  }

  return ret;
 8006342:	68fb      	ldr	r3, [r7, #12]
}
 8006344:	4618      	mov	r0, r3
 8006346:	3710      	adds	r7, #16
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}

0800634c <lsm303agr_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_get(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t *val)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b084      	sub	sp, #16
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8006356:	f107 0208 	add.w	r2, r7, #8
 800635a:	2301      	movs	r3, #1
 800635c:	2123      	movs	r1, #35	; 0x23
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f7ff fee8 	bl	8006134 <lsm303agr_read_reg>
 8006364:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&ctrl_reg4_a, 1);

  switch (ctrl_reg4_a.fs){
 8006366:	7a3b      	ldrb	r3, [r7, #8]
 8006368:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800636c:	b2db      	uxtb	r3, r3
 800636e:	2b03      	cmp	r3, #3
 8006370:	d81a      	bhi.n	80063a8 <lsm303agr_xl_full_scale_get+0x5c>
 8006372:	a201      	add	r2, pc, #4	; (adr r2, 8006378 <lsm303agr_xl_full_scale_get+0x2c>)
 8006374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006378:	08006389 	.word	0x08006389
 800637c:	08006391 	.word	0x08006391
 8006380:	08006399 	.word	0x08006399
 8006384:	080063a1 	.word	0x080063a1
    case LSM303AGR_2g:
      *val = LSM303AGR_2g;
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	2200      	movs	r2, #0
 800638c:	701a      	strb	r2, [r3, #0]
      break;
 800638e:	e00f      	b.n	80063b0 <lsm303agr_xl_full_scale_get+0x64>
    case LSM303AGR_4g:
      *val = LSM303AGR_4g;
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	2201      	movs	r2, #1
 8006394:	701a      	strb	r2, [r3, #0]
      break;
 8006396:	e00b      	b.n	80063b0 <lsm303agr_xl_full_scale_get+0x64>
    case LSM303AGR_8g:
      *val = LSM303AGR_8g;
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	2202      	movs	r2, #2
 800639c:	701a      	strb	r2, [r3, #0]
      break;
 800639e:	e007      	b.n	80063b0 <lsm303agr_xl_full_scale_get+0x64>
    case LSM303AGR_16g:
      *val = LSM303AGR_16g;
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	2203      	movs	r2, #3
 80063a4:	701a      	strb	r2, [r3, #0]
      break;
 80063a6:	e003      	b.n	80063b0 <lsm303agr_xl_full_scale_get+0x64>
    default:
      *val = LSM303AGR_2g;
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	2200      	movs	r2, #0
 80063ac:	701a      	strb	r2, [r3, #0]
      break;
 80063ae:	bf00      	nop
  }
  return ret;
 80063b0:	68fb      	ldr	r3, [r7, #12]
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3710      	adds	r7, #16
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
 80063ba:	bf00      	nop

080063bc <lsm303agr_xl_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_block_data_update_set(stmdev_ctx_t *ctx,
                                           uint8_t val)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b084      	sub	sp, #16
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	460b      	mov	r3, r1
 80063c6:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 80063c8:	f107 0208 	add.w	r2, r7, #8
 80063cc:	2301      	movs	r3, #1
 80063ce:	2123      	movs	r1, #35	; 0x23
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f7ff feaf 	bl	8006134 <lsm303agr_read_reg>
 80063d6:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&ctrl_reg4_a, 1);
  if(ret == 0){
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d10f      	bne.n	80063fe <lsm303agr_xl_block_data_update_set+0x42>
    ctrl_reg4_a.bdu = (uint8_t)val;
 80063de:	78fb      	ldrb	r3, [r7, #3]
 80063e0:	f003 0301 	and.w	r3, r3, #1
 80063e4:	b2da      	uxtb	r2, r3
 80063e6:	7a3b      	ldrb	r3, [r7, #8]
 80063e8:	f362 13c7 	bfi	r3, r2, #7, #1
 80063ec:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 80063ee:	f107 0208 	add.w	r2, r7, #8
 80063f2:	2301      	movs	r3, #1
 80063f4:	2123      	movs	r1, #35	; 0x23
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f7ff feb4 	bl	8006164 <lsm303agr_write_reg>
 80063fc:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&ctrl_reg4_a, 1);
  }

  return ret;
 80063fe:	68fb      	ldr	r3, [r7, #12]
}
 8006400:	4618      	mov	r0, r3
 8006402:	3710      	adds	r7, #16
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}

08006408 <lsm303agr_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_acceleration_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b084      	sub	sp, #16
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUT_X_L_A, buff, 6);
 8006412:	2306      	movs	r3, #6
 8006414:	683a      	ldr	r2, [r7, #0]
 8006416:	2128      	movs	r1, #40	; 0x28
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f7ff fe8b 	bl	8006134 <lsm303agr_read_reg>
 800641e:	60f8      	str	r0, [r7, #12]
  return ret;
 8006420:	68fb      	ldr	r3, [r7, #12]
}
 8006422:	4618      	mov	r0, r3
 8006424:	3710      	adds	r7, #16
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}

0800642a <lsm303agr_mag_operating_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_operating_mode_set(stmdev_ctx_t *ctx,
                                         lsm303agr_md_m_t val)
{
 800642a:	b580      	push	{r7, lr}
 800642c:	b084      	sub	sp, #16
 800642e:	af00      	add	r7, sp, #0
 8006430:	6078      	str	r0, [r7, #4]
 8006432:	460b      	mov	r3, r1
 8006434:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8006436:	f107 0208 	add.w	r2, r7, #8
 800643a:	2301      	movs	r3, #1
 800643c:	2160      	movs	r1, #96	; 0x60
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f7ff fe78 	bl	8006134 <lsm303agr_read_reg>
 8006444:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&cfg_reg_a_m, 1);
  if(ret == 0){
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d10f      	bne.n	800646c <lsm303agr_mag_operating_mode_set+0x42>
    cfg_reg_a_m.md = (uint8_t)val;
 800644c:	78fb      	ldrb	r3, [r7, #3]
 800644e:	f003 0303 	and.w	r3, r3, #3
 8006452:	b2da      	uxtb	r2, r3
 8006454:	7a3b      	ldrb	r3, [r7, #8]
 8006456:	f362 0301 	bfi	r3, r2, #0, #2
 800645a:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 800645c:	f107 0208 	add.w	r2, r7, #8
 8006460:	2301      	movs	r3, #1
 8006462:	2160      	movs	r1, #96	; 0x60
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f7ff fe7d 	bl	8006164 <lsm303agr_write_reg>
 800646a:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&cfg_reg_a_m, 1);
  }

  return ret;
 800646c:	68fb      	ldr	r3, [r7, #12]
}
 800646e:	4618      	mov	r0, r3
 8006470:	3710      	adds	r7, #16
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}

08006476 <lsm303agr_mag_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t val)
{
 8006476:	b580      	push	{r7, lr}
 8006478:	b084      	sub	sp, #16
 800647a:	af00      	add	r7, sp, #0
 800647c:	6078      	str	r0, [r7, #4]
 800647e:	460b      	mov	r3, r1
 8006480:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8006482:	f107 0208 	add.w	r2, r7, #8
 8006486:	2301      	movs	r3, #1
 8006488:	2160      	movs	r1, #96	; 0x60
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f7ff fe52 	bl	8006134 <lsm303agr_read_reg>
 8006490:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&cfg_reg_a_m, 1);
  if(ret == 0){
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d10f      	bne.n	80064b8 <lsm303agr_mag_data_rate_set+0x42>
    cfg_reg_a_m.odr = (uint8_t)val;
 8006498:	78fb      	ldrb	r3, [r7, #3]
 800649a:	f003 0303 	and.w	r3, r3, #3
 800649e:	b2da      	uxtb	r2, r3
 80064a0:	7a3b      	ldrb	r3, [r7, #8]
 80064a2:	f362 0383 	bfi	r3, r2, #2, #2
 80064a6:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 80064a8:	f107 0208 	add.w	r2, r7, #8
 80064ac:	2301      	movs	r3, #1
 80064ae:	2160      	movs	r1, #96	; 0x60
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f7ff fe57 	bl	8006164 <lsm303agr_write_reg>
 80064b6:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&cfg_reg_a_m, 1);
  }

  return ret;
 80064b8:	68fb      	ldr	r3, [r7, #12]
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3710      	adds	r7, #16
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}
	...

080064c4 <lsm303agr_mag_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_get(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t *val)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b084      	sub	sp, #16
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	6039      	str	r1, [r7, #0]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 80064ce:	f107 0208 	add.w	r2, r7, #8
 80064d2:	2301      	movs	r3, #1
 80064d4:	2160      	movs	r1, #96	; 0x60
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f7ff fe2c 	bl	8006134 <lsm303agr_read_reg>
 80064dc:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&cfg_reg_a_m, 1);

    switch (cfg_reg_a_m.odr){
 80064de:	7a3b      	ldrb	r3, [r7, #8]
 80064e0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80064e4:	b2db      	uxtb	r3, r3
 80064e6:	2b03      	cmp	r3, #3
 80064e8:	d81a      	bhi.n	8006520 <lsm303agr_mag_data_rate_get+0x5c>
 80064ea:	a201      	add	r2, pc, #4	; (adr r2, 80064f0 <lsm303agr_mag_data_rate_get+0x2c>)
 80064ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064f0:	08006501 	.word	0x08006501
 80064f4:	08006509 	.word	0x08006509
 80064f8:	08006511 	.word	0x08006511
 80064fc:	08006519 	.word	0x08006519
    case LSM303AGR_MG_ODR_10Hz:
      *val = LSM303AGR_MG_ODR_10Hz;
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	2200      	movs	r2, #0
 8006504:	701a      	strb	r2, [r3, #0]
      break;
 8006506:	e00f      	b.n	8006528 <lsm303agr_mag_data_rate_get+0x64>
    case LSM303AGR_MG_ODR_20Hz:
      *val = LSM303AGR_MG_ODR_20Hz;
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	2201      	movs	r2, #1
 800650c:	701a      	strb	r2, [r3, #0]
      break;
 800650e:	e00b      	b.n	8006528 <lsm303agr_mag_data_rate_get+0x64>
    case LSM303AGR_MG_ODR_50Hz:
      *val = LSM303AGR_MG_ODR_50Hz;
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	2202      	movs	r2, #2
 8006514:	701a      	strb	r2, [r3, #0]
      break;
 8006516:	e007      	b.n	8006528 <lsm303agr_mag_data_rate_get+0x64>
    case LSM303AGR_MG_ODR_100Hz:
      *val = LSM303AGR_MG_ODR_100Hz;
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	2203      	movs	r2, #3
 800651c:	701a      	strb	r2, [r3, #0]
      break;
 800651e:	e003      	b.n	8006528 <lsm303agr_mag_data_rate_get+0x64>
    default:
      *val = LSM303AGR_MG_ODR_10Hz;
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	2200      	movs	r2, #0
 8006524:	701a      	strb	r2, [r3, #0]
      break;
 8006526:	bf00      	nop
  }
  return ret;
 8006528:	68fb      	ldr	r3, [r7, #12]
}
 800652a:	4618      	mov	r0, r3
 800652c:	3710      	adds	r7, #16
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop

08006534 <lsm303agr_mag_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_block_data_update_set(stmdev_ctx_t *ctx,
                                            uint8_t val)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b084      	sub	sp, #16
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	460b      	mov	r3, r1
 800653e:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8006540:	f107 0208 	add.w	r2, r7, #8
 8006544:	2301      	movs	r3, #1
 8006546:	2162      	movs	r1, #98	; 0x62
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f7ff fdf3 	bl	8006134 <lsm303agr_read_reg>
 800654e:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&cfg_reg_c_m, 1);
  if(ret == 0){
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d10f      	bne.n	8006576 <lsm303agr_mag_block_data_update_set+0x42>
    cfg_reg_c_m.bdu = (uint8_t)val;
 8006556:	78fb      	ldrb	r3, [r7, #3]
 8006558:	f003 0301 	and.w	r3, r3, #1
 800655c:	b2da      	uxtb	r2, r3
 800655e:	7a3b      	ldrb	r3, [r7, #8]
 8006560:	f362 1304 	bfi	r3, r2, #4, #1
 8006564:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8006566:	f107 0208 	add.w	r2, r7, #8
 800656a:	2301      	movs	r3, #1
 800656c:	2162      	movs	r1, #98	; 0x62
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f7ff fdf8 	bl	8006164 <lsm303agr_write_reg>
 8006574:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&cfg_reg_c_m, 1);
  }

  return ret;
 8006576:	68fb      	ldr	r3, [r7, #12]
}
 8006578:	4618      	mov	r0, r3
 800657a:	3710      	adds	r7, #16
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}

08006580 <lsm303agr_magnetic_raw_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_magnetic_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b084      	sub	sp, #16
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUTX_L_REG_M, buff, 6);
 800658a:	2306      	movs	r3, #6
 800658c:	683a      	ldr	r2, [r7, #0]
 800658e:	2168      	movs	r1, #104	; 0x68
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f7ff fdcf 	bl	8006134 <lsm303agr_read_reg>
 8006596:	60f8      	str	r0, [r7, #12]
  return ret;
 8006598:	68fb      	ldr	r3, [r7, #12]
}
 800659a:	4618      	mov	r0, r3
 800659c:	3710      	adds	r7, #16
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}

080065a2 <lsm303agr_xl_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80065a2:	b580      	push	{r7, lr}
 80065a4:	b084      	sub	sp, #16
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	6078      	str	r0, [r7, #4]
 80065aa:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_A, buff, 1);
 80065ac:	2301      	movs	r3, #1
 80065ae:	683a      	ldr	r2, [r7, #0]
 80065b0:	210f      	movs	r1, #15
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f7ff fdbe 	bl	8006134 <lsm303agr_read_reg>
 80065b8:	60f8      	str	r0, [r7, #12]
  return ret;
 80065ba:	68fb      	ldr	r3, [r7, #12]
}
 80065bc:	4618      	mov	r0, r3
 80065be:	3710      	adds	r7, #16
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}

080065c4 <lsm303agr_mag_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b084      	sub	sp, #16
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_M, buff, 1);
 80065ce:	2301      	movs	r3, #1
 80065d0:	683a      	ldr	r2, [r7, #0]
 80065d2:	214f      	movs	r1, #79	; 0x4f
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f7ff fdad 	bl	8006134 <lsm303agr_read_reg>
 80065da:	60f8      	str	r0, [r7, #12]
  return ret;
 80065dc:	68fb      	ldr	r3, [r7, #12]
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3710      	adds	r7, #16
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}

080065e6 <lsm303agr_mag_self_test_set>:
  * @param  val    Change the values of self_test in reg CFG_REG_C_M
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80065e6:	b580      	push	{r7, lr}
 80065e8:	b084      	sub	sp, #16
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	6078      	str	r0, [r7, #4]
 80065ee:	460b      	mov	r3, r1
 80065f0:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 80065f2:	f107 0208 	add.w	r2, r7, #8
 80065f6:	2301      	movs	r3, #1
 80065f8:	2162      	movs	r1, #98	; 0x62
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f7ff fd9a 	bl	8006134 <lsm303agr_read_reg>
 8006600:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&cfg_reg_c_m, 1);
  if(ret == 0){
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d10f      	bne.n	8006628 <lsm303agr_mag_self_test_set+0x42>
    cfg_reg_c_m.self_test = (uint8_t)val;
 8006608:	78fb      	ldrb	r3, [r7, #3]
 800660a:	f003 0301 	and.w	r3, r3, #1
 800660e:	b2da      	uxtb	r2, r3
 8006610:	7a3b      	ldrb	r3, [r7, #8]
 8006612:	f362 0341 	bfi	r3, r2, #1, #1
 8006616:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8006618:	f107 0208 	add.w	r2, r7, #8
 800661c:	2301      	movs	r3, #1
 800661e:	2162      	movs	r1, #98	; 0x62
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f7ff fd9f 	bl	8006164 <lsm303agr_write_reg>
 8006626:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&cfg_reg_c_m, 1);
  }

  return ret;
 8006628:	68fb      	ldr	r3, [r7, #12]
}
 800662a:	4618      	mov	r0, r3
 800662c:	3710      	adds	r7, #16
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}

08006632 <lsm303agr_xl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_fifo_mode_set(stmdev_ctx_t *ctx,
                                   lsm303agr_fm_a_t val)
{
 8006632:	b580      	push	{r7, lr}
 8006634:	b084      	sub	sp, #16
 8006636:	af00      	add	r7, sp, #0
 8006638:	6078      	str	r0, [r7, #4]
 800663a:	460b      	mov	r3, r1
 800663c:	70fb      	strb	r3, [r7, #3]
  lsm303agr_fifo_ctrl_reg_a_t fifo_ctrl_reg_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 800663e:	f107 0208 	add.w	r2, r7, #8
 8006642:	2301      	movs	r3, #1
 8006644:	212e      	movs	r1, #46	; 0x2e
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f7ff fd74 	bl	8006134 <lsm303agr_read_reg>
 800664c:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&fifo_ctrl_reg_a, 1);
  if(ret == 0){
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d10f      	bne.n	8006674 <lsm303agr_xl_fifo_mode_set+0x42>
    fifo_ctrl_reg_a.fm = (uint8_t)val;
 8006654:	78fb      	ldrb	r3, [r7, #3]
 8006656:	f003 0303 	and.w	r3, r3, #3
 800665a:	b2da      	uxtb	r2, r3
 800665c:	7a3b      	ldrb	r3, [r7, #8]
 800665e:	f362 1387 	bfi	r3, r2, #6, #2
 8006662:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 8006664:	f107 0208 	add.w	r2, r7, #8
 8006668:	2301      	movs	r3, #1
 800666a:	212e      	movs	r1, #46	; 0x2e
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f7ff fd79 	bl	8006164 <lsm303agr_write_reg>
 8006672:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&fifo_ctrl_reg_a, 1);
  }

  return ret;
 8006674:	68fb      	ldr	r3, [r7, #12]
}
 8006676:	4618      	mov	r0, r3
 8006678:	3710      	adds	r7, #16
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}

0800667e <lsm303agr_mag_i2c_interface_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_i2c_interface_set(stmdev_ctx_t *ctx,
                                        lsm303agr_i2c_dis_m_t val)
{
 800667e:	b580      	push	{r7, lr}
 8006680:	b084      	sub	sp, #16
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
 8006686:	460b      	mov	r3, r1
 8006688:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 800668a:	f107 0208 	add.w	r2, r7, #8
 800668e:	2301      	movs	r3, #1
 8006690:	2162      	movs	r1, #98	; 0x62
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f7ff fd4e 	bl	8006134 <lsm303agr_read_reg>
 8006698:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&cfg_reg_c_m, 1);
  if(ret == 0){
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d10f      	bne.n	80066c0 <lsm303agr_mag_i2c_interface_set+0x42>
    cfg_reg_c_m.i2c_dis = (uint8_t)val;
 80066a0:	78fb      	ldrb	r3, [r7, #3]
 80066a2:	f003 0301 	and.w	r3, r3, #1
 80066a6:	b2da      	uxtb	r2, r3
 80066a8:	7a3b      	ldrb	r3, [r7, #8]
 80066aa:	f362 1345 	bfi	r3, r2, #5, #1
 80066ae:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 80066b0:	f107 0208 	add.w	r2, r7, #8
 80066b4:	2301      	movs	r3, #1
 80066b6:	2162      	movs	r1, #98	; 0x62
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f7ff fd53 	bl	8006164 <lsm303agr_write_reg>
 80066be:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&cfg_reg_c_m, 1);
  }

  return ret;
 80066c0:	68fb      	ldr	r3, [r7, #12]
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3710      	adds	r7, #16
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}
	...

080066cc <LSM6DSL_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_RegisterBusIO(LSM6DSL_Object_t *pObj, LSM6DSL_IO_t *pIO)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b084      	sub	sp, #16
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80066d6:	2300      	movs	r3, #0
 80066d8:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d103      	bne.n	80066e8 <LSM6DSL_RegisterBusIO+0x1c>
  {
    ret = LSM6DSL_ERROR;
 80066e0:	f04f 33ff 	mov.w	r3, #4294967295
 80066e4:	60fb      	str	r3, [r7, #12]
 80066e6:	e04d      	b.n	8006784 <LSM6DSL_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	685a      	ldr	r2, [r3, #4]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	689a      	ldr	r2, [r3, #8]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	7b1a      	ldrb	r2, [r3, #12]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	691a      	ldr	r2, [r3, #16]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	695a      	ldr	r2, [r3, #20]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	699a      	ldr	r2, [r3, #24]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	4a1b      	ldr	r2, [pc, #108]	; (8006790 <LSM6DSL_RegisterBusIO+0xc4>)
 8006724:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	4a1a      	ldr	r2, [pc, #104]	; (8006794 <LSM6DSL_RegisterBusIO+0xc8>)
 800672a:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	687a      	ldr	r2, [r7, #4]
 8006730:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d103      	bne.n	8006742 <LSM6DSL_RegisterBusIO+0x76>
    {
      ret = LSM6DSL_ERROR;
 800673a:	f04f 33ff 	mov.w	r3, #4294967295
 800673e:	60fb      	str	r3, [r7, #12]
 8006740:	e020      	b.n	8006784 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSL_OK)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4798      	blx	r3
 8006748:	4603      	mov	r3, r0
 800674a:	2b00      	cmp	r3, #0
 800674c:	d003      	beq.n	8006756 <LSM6DSL_RegisterBusIO+0x8a>
    {
      ret = LSM6DSL_ERROR;
 800674e:	f04f 33ff 	mov.w	r3, #4294967295
 8006752:	60fb      	str	r3, [r7, #12]
 8006754:	e016      	b.n	8006784 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	2b02      	cmp	r3, #2
 800675c:	d112      	bne.n	8006784 <LSM6DSL_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006764:	2b00      	cmp	r3, #0
 8006766:	d10d      	bne.n	8006784 <LSM6DSL_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8006768:	230c      	movs	r3, #12
 800676a:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 800676c:	7afb      	ldrb	r3, [r7, #11]
 800676e:	461a      	mov	r2, r3
 8006770:	2112      	movs	r1, #18
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f000 fd29 	bl	80071ca <LSM6DSL_Write_Reg>
 8006778:	4603      	mov	r3, r0
 800677a:	2b00      	cmp	r3, #0
 800677c:	d002      	beq.n	8006784 <LSM6DSL_RegisterBusIO+0xb8>
          {
            ret = LSM6DSL_ERROR;
 800677e:	f04f 33ff 	mov.w	r3, #4294967295
 8006782:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8006784:	68fb      	ldr	r3, [r7, #12]
}
 8006786:	4618      	mov	r0, r3
 8006788:	3710      	adds	r7, #16
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}
 800678e:	bf00      	nop
 8006790:	08007631 	.word	0x08007631
 8006794:	08007667 	.word	0x08007667

08006798 <LSM6DSL_Init>:
 * @brief  Initialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Init(LSM6DSL_Object_t *pObj)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b082      	sub	sp, #8
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	331c      	adds	r3, #28
 80067a4:	2101      	movs	r1, #1
 80067a6:	4618      	mov	r0, r3
 80067a8:	f001 f9dd 	bl	8007b66 <lsm6dsl_auto_increment_set>
 80067ac:	4603      	mov	r3, r0
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d002      	beq.n	80067b8 <LSM6DSL_Init+0x20>
  {
    return LSM6DSL_ERROR;
 80067b2:	f04f 33ff 	mov.w	r3, #4294967295
 80067b6:	e054      	b.n	8006862 <LSM6DSL_Init+0xca>
  }

  /* Enable BDU */
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	331c      	adds	r3, #28
 80067bc:	2101      	movs	r1, #1
 80067be:	4618      	mov	r0, r3
 80067c0:	f001 f978 	bl	8007ab4 <lsm6dsl_block_data_update_set>
 80067c4:	4603      	mov	r3, r0
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d002      	beq.n	80067d0 <LSM6DSL_Init+0x38>
  {
    return LSM6DSL_ERROR;
 80067ca:	f04f 33ff 	mov.w	r3, #4294967295
 80067ce:	e048      	b.n	8006862 <LSM6DSL_Init+0xca>
  }

  /* FIFO mode selection */
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	331c      	adds	r3, #28
 80067d4:	2100      	movs	r1, #0
 80067d6:	4618      	mov	r0, r3
 80067d8:	f001 f9eb 	bl	8007bb2 <lsm6dsl_fifo_mode_set>
 80067dc:	4603      	mov	r3, r0
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d002      	beq.n	80067e8 <LSM6DSL_Init+0x50>
  {
    return LSM6DSL_ERROR;
 80067e2:	f04f 33ff 	mov.w	r3, #4294967295
 80067e6:	e03c      	b.n	8006862 <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2204      	movs	r2, #4
 80067ec:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	331c      	adds	r3, #28
 80067f4:	2100      	movs	r1, #0
 80067f6:	4618      	mov	r0, r3
 80067f8:	f000 ffde 	bl	80077b8 <lsm6dsl_xl_data_rate_set>
 80067fc:	4603      	mov	r3, r0
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d002      	beq.n	8006808 <LSM6DSL_Init+0x70>
  {
    return LSM6DSL_ERROR;
 8006802:	f04f 33ff 	mov.w	r3, #4294967295
 8006806:	e02c      	b.n	8006862 <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	331c      	adds	r3, #28
 800680c:	2100      	movs	r1, #0
 800680e:	4618      	mov	r0, r3
 8006810:	f000 ff74 	bl	80076fc <lsm6dsl_xl_full_scale_set>
 8006814:	4603      	mov	r3, r0
 8006816:	2b00      	cmp	r3, #0
 8006818:	d002      	beq.n	8006820 <LSM6DSL_Init+0x88>
  {
    return LSM6DSL_ERROR;
 800681a:	f04f 33ff 	mov.w	r3, #4294967295
 800681e:	e020      	b.n	8006862 <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2204      	movs	r2, #4
 8006824:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	331c      	adds	r3, #28
 800682c:	2100      	movs	r1, #0
 800682e:	4618      	mov	r0, r3
 8006830:	f001 f8b8 	bl	80079a4 <lsm6dsl_gy_data_rate_set>
 8006834:	4603      	mov	r3, r0
 8006836:	2b00      	cmp	r3, #0
 8006838:	d002      	beq.n	8006840 <LSM6DSL_Init+0xa8>
  {
    return LSM6DSL_ERROR;
 800683a:	f04f 33ff 	mov.w	r3, #4294967295
 800683e:	e010      	b.n	8006862 <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	331c      	adds	r3, #28
 8006844:	2106      	movs	r1, #6
 8006846:	4618      	mov	r0, r3
 8006848:	f001 f844 	bl	80078d4 <lsm6dsl_gy_full_scale_set>
 800684c:	4603      	mov	r3, r0
 800684e:	2b00      	cmp	r3, #0
 8006850:	d002      	beq.n	8006858 <LSM6DSL_Init+0xc0>
  {
    return LSM6DSL_ERROR;
 8006852:	f04f 33ff 	mov.w	r3, #4294967295
 8006856:	e004      	b.n	8006862 <LSM6DSL_Init+0xca>
  }

  pObj->is_initialized = 1;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2201      	movs	r2, #1
 800685c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 8006860:	2300      	movs	r3, #0
}
 8006862:	4618      	mov	r0, r3
 8006864:	3708      	adds	r7, #8
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}

0800686a <LSM6DSL_DeInit>:
 * @brief  Deinitialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_DeInit(LSM6DSL_Object_t *pObj)
{
 800686a:	b580      	push	{r7, lr}
 800686c:	b082      	sub	sp, #8
 800686e:	af00      	add	r7, sp, #0
 8006870:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSL_ACC_Disable(pObj) != LSM6DSL_OK)
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f000 f888 	bl	8006988 <LSM6DSL_ACC_Disable>
 8006878:	4603      	mov	r3, r0
 800687a:	2b00      	cmp	r3, #0
 800687c:	d002      	beq.n	8006884 <LSM6DSL_DeInit+0x1a>
  {
    return LSM6DSL_ERROR;
 800687e:	f04f 33ff 	mov.w	r3, #4294967295
 8006882:	e015      	b.n	80068b0 <LSM6DSL_DeInit+0x46>
  }

  if (LSM6DSL_GYRO_Disable(pObj) != LSM6DSL_OK)
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f000 fa98 	bl	8006dba <LSM6DSL_GYRO_Disable>
 800688a:	4603      	mov	r3, r0
 800688c:	2b00      	cmp	r3, #0
 800688e:	d002      	beq.n	8006896 <LSM6DSL_DeInit+0x2c>
  {
    return LSM6DSL_ERROR;
 8006890:	f04f 33ff 	mov.w	r3, #4294967295
 8006894:	e00c      	b.n	80068b0 <LSM6DSL_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_OFF;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2200      	movs	r2, #0
 800689a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  pObj->gyro_odr = LSM6DSL_GY_ODR_OFF;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2200      	movs	r2, #0
 80068a2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  pObj->is_initialized = 0;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2200      	movs	r2, #0
 80068aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 80068ae:	2300      	movs	r3, #0
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3708      	adds	r7, #8
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}

080068b8 <LSM6DSL_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ReadID(LSM6DSL_Object_t *pObj, uint8_t *Id)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b082      	sub	sp, #8
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	6039      	str	r1, [r7, #0]
  if (lsm6dsl_device_id_get(&(pObj->Ctx), Id) != LSM6DSL_OK)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	331c      	adds	r3, #28
 80068c6:	6839      	ldr	r1, [r7, #0]
 80068c8:	4618      	mov	r0, r3
 80068ca:	f001 f93b 	bl	8007b44 <lsm6dsl_device_id_get>
 80068ce:	4603      	mov	r3, r0
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d002      	beq.n	80068da <LSM6DSL_ReadID+0x22>
  {
    return LSM6DSL_ERROR;
 80068d4:	f04f 33ff 	mov.w	r3, #4294967295
 80068d8:	e000      	b.n	80068dc <LSM6DSL_ReadID+0x24>
  }

  return LSM6DSL_OK;
 80068da:	2300      	movs	r3, #0
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3708      	adds	r7, #8
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}

080068e4 <LSM6DSL_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM6DSL sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GetCapabilities(LSM6DSL_Object_t *pObj, LSM6DSL_Capabilities_t *Capabilities)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b083      	sub	sp, #12
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	2201      	movs	r2, #1
 80068f2:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	2201      	movs	r2, #1
 80068f8:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	2200      	movs	r2, #0
 80068fe:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	2200      	movs	r2, #0
 8006904:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800690c:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	2210      	movs	r2, #16
 8006912:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	2200      	movs	r2, #0
 8006918:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	4a07      	ldr	r2, [pc, #28]	; (800693c <LSM6DSL_GetCapabilities+0x58>)
 800691e:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	4a06      	ldr	r2, [pc, #24]	; (800693c <LSM6DSL_GetCapabilities+0x58>)
 8006924:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	f04f 0200 	mov.w	r2, #0
 800692c:	619a      	str	r2, [r3, #24]
  return LSM6DSL_OK;
 800692e:	2300      	movs	r3, #0
}
 8006930:	4618      	mov	r0, r3
 8006932:	370c      	adds	r7, #12
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr
 800693c:	45d02000 	.word	0x45d02000

08006940 <LSM6DSL_ACC_Enable>:
 * @brief  Enable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Enable(LSM6DSL_Object_t *pObj)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b082      	sub	sp, #8
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800694e:	2b01      	cmp	r3, #1
 8006950:	d101      	bne.n	8006956 <LSM6DSL_ACC_Enable+0x16>
  {
    return LSM6DSL_OK;
 8006952:	2300      	movs	r3, #0
 8006954:	e014      	b.n	8006980 <LSM6DSL_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f103 021c 	add.w	r2, r3, #28
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8006962:	4619      	mov	r1, r3
 8006964:	4610      	mov	r0, r2
 8006966:	f000 ff27 	bl	80077b8 <lsm6dsl_xl_data_rate_set>
 800696a:	4603      	mov	r3, r0
 800696c:	2b00      	cmp	r3, #0
 800696e:	d002      	beq.n	8006976 <LSM6DSL_ACC_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8006970:	f04f 33ff 	mov.w	r3, #4294967295
 8006974:	e004      	b.n	8006980 <LSM6DSL_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2201      	movs	r2, #1
 800697a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 800697e:	2300      	movs	r3, #0
}
 8006980:	4618      	mov	r0, r3
 8006982:	3708      	adds	r7, #8
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}

08006988 <LSM6DSL_ACC_Disable>:
 * @brief  Disable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Disable(LSM6DSL_Object_t *pObj)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b082      	sub	sp, #8
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8006996:	2b00      	cmp	r3, #0
 8006998:	d101      	bne.n	800699e <LSM6DSL_ACC_Disable+0x16>
  {
    return LSM6DSL_OK;
 800699a:	2300      	movs	r3, #0
 800699c:	e01f      	b.n	80069de <LSM6DSL_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSL_OK)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f103 021c 	add.w	r2, r3, #28
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	332b      	adds	r3, #43	; 0x2b
 80069a8:	4619      	mov	r1, r3
 80069aa:	4610      	mov	r0, r2
 80069ac:	f000 ff2a 	bl	8007804 <lsm6dsl_xl_data_rate_get>
 80069b0:	4603      	mov	r3, r0
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d002      	beq.n	80069bc <LSM6DSL_ACC_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 80069b6:	f04f 33ff 	mov.w	r3, #4294967295
 80069ba:	e010      	b.n	80069de <LSM6DSL_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	331c      	adds	r3, #28
 80069c0:	2100      	movs	r1, #0
 80069c2:	4618      	mov	r0, r3
 80069c4:	f000 fef8 	bl	80077b8 <lsm6dsl_xl_data_rate_set>
 80069c8:	4603      	mov	r3, r0
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d002      	beq.n	80069d4 <LSM6DSL_ACC_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 80069ce:	f04f 33ff 	mov.w	r3, #4294967295
 80069d2:	e004      	b.n	80069de <LSM6DSL_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2200      	movs	r2, #0
 80069d8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 80069dc:	2300      	movs	r3, #0
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3708      	adds	r7, #8
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}
	...

080069e8 <LSM6DSL_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b084      	sub	sp, #16
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80069f2:	2300      	movs	r3, #0
 80069f4:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	331c      	adds	r3, #28
 80069fa:	f107 020b 	add.w	r2, r7, #11
 80069fe:	4611      	mov	r1, r2
 8006a00:	4618      	mov	r0, r3
 8006a02:	f000 fea1 	bl	8007748 <lsm6dsl_xl_full_scale_get>
 8006a06:	4603      	mov	r3, r0
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d002      	beq.n	8006a12 <LSM6DSL_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 8006a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8006a10:	e023      	b.n	8006a5a <LSM6DSL_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8006a12:	7afb      	ldrb	r3, [r7, #11]
 8006a14:	2b03      	cmp	r3, #3
 8006a16:	d81b      	bhi.n	8006a50 <LSM6DSL_ACC_GetSensitivity+0x68>
 8006a18:	a201      	add	r2, pc, #4	; (adr r2, 8006a20 <LSM6DSL_ACC_GetSensitivity+0x38>)
 8006a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a1e:	bf00      	nop
 8006a20:	08006a31 	.word	0x08006a31
 8006a24:	08006a49 	.word	0x08006a49
 8006a28:	08006a39 	.word	0x08006a39
 8006a2c:	08006a41 	.word	0x08006a41
  {
    case LSM6DSL_2g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_2G;
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	4a0c      	ldr	r2, [pc, #48]	; (8006a64 <LSM6DSL_ACC_GetSensitivity+0x7c>)
 8006a34:	601a      	str	r2, [r3, #0]
      break;
 8006a36:	e00f      	b.n	8006a58 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_4g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_4G;
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	4a0b      	ldr	r2, [pc, #44]	; (8006a68 <LSM6DSL_ACC_GetSensitivity+0x80>)
 8006a3c:	601a      	str	r2, [r3, #0]
      break;
 8006a3e:	e00b      	b.n	8006a58 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_8g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_8G;
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	4a0a      	ldr	r2, [pc, #40]	; (8006a6c <LSM6DSL_ACC_GetSensitivity+0x84>)
 8006a44:	601a      	str	r2, [r3, #0]
      break;
 8006a46:	e007      	b.n	8006a58 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_16g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_16G;
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	4a09      	ldr	r2, [pc, #36]	; (8006a70 <LSM6DSL_ACC_GetSensitivity+0x88>)
 8006a4c:	601a      	str	r2, [r3, #0]
      break;
 8006a4e:	e003      	b.n	8006a58 <LSM6DSL_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSL_ERROR;
 8006a50:	f04f 33ff 	mov.w	r3, #4294967295
 8006a54:	60fb      	str	r3, [r7, #12]
      break;
 8006a56:	bf00      	nop
  }

  return ret;
 8006a58:	68fb      	ldr	r3, [r7, #12]
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3710      	adds	r7, #16
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}
 8006a62:	bf00      	nop
 8006a64:	3d79db23 	.word	0x3d79db23
 8006a68:	3df9db23 	.word	0x3df9db23
 8006a6c:	3e79db23 	.word	0x3e79db23
 8006a70:	3ef9db23 	.word	0x3ef9db23

08006a74 <LSM6DSL_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b084      	sub	sp, #16
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	331c      	adds	r3, #28
 8006a86:	f107 020b 	add.w	r2, r7, #11
 8006a8a:	4611      	mov	r1, r2
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f000 feb9 	bl	8007804 <lsm6dsl_xl_data_rate_get>
 8006a92:	4603      	mov	r3, r0
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d002      	beq.n	8006a9e <LSM6DSL_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 8006a98:	f04f 33ff 	mov.w	r3, #4294967295
 8006a9c:	e054      	b.n	8006b48 <LSM6DSL_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 8006a9e:	7afb      	ldrb	r3, [r7, #11]
 8006aa0:	2b0b      	cmp	r3, #11
 8006aa2:	d84c      	bhi.n	8006b3e <LSM6DSL_ACC_GetOutputDataRate+0xca>
 8006aa4:	a201      	add	r2, pc, #4	; (adr r2, 8006aac <LSM6DSL_ACC_GetOutputDataRate+0x38>)
 8006aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aaa:	bf00      	nop
 8006aac:	08006add 	.word	0x08006add
 8006ab0:	08006aef 	.word	0x08006aef
 8006ab4:	08006af7 	.word	0x08006af7
 8006ab8:	08006aff 	.word	0x08006aff
 8006abc:	08006b07 	.word	0x08006b07
 8006ac0:	08006b0f 	.word	0x08006b0f
 8006ac4:	08006b17 	.word	0x08006b17
 8006ac8:	08006b1f 	.word	0x08006b1f
 8006acc:	08006b27 	.word	0x08006b27
 8006ad0:	08006b2f 	.word	0x08006b2f
 8006ad4:	08006b37 	.word	0x08006b37
 8006ad8:	08006ae7 	.word	0x08006ae7
  {
    case LSM6DSL_XL_ODR_OFF:
      *Odr = 0.0f;
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	f04f 0200 	mov.w	r2, #0
 8006ae2:	601a      	str	r2, [r3, #0]
      break;
 8006ae4:	e02f      	b.n	8006b46 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1Hz6:
      *Odr = 1.6f;
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	4a19      	ldr	r2, [pc, #100]	; (8006b50 <LSM6DSL_ACC_GetOutputDataRate+0xdc>)
 8006aea:	601a      	str	r2, [r3, #0]
      break;
 8006aec:	e02b      	b.n	8006b46 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	4a18      	ldr	r2, [pc, #96]	; (8006b54 <LSM6DSL_ACC_GetOutputDataRate+0xe0>)
 8006af2:	601a      	str	r2, [r3, #0]
      break;
 8006af4:	e027      	b.n	8006b46 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_26Hz:
      *Odr = 26.0f;
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	4a17      	ldr	r2, [pc, #92]	; (8006b58 <LSM6DSL_ACC_GetOutputDataRate+0xe4>)
 8006afa:	601a      	str	r2, [r3, #0]
      break;
 8006afc:	e023      	b.n	8006b46 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_52Hz:
      *Odr = 52.0f;
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	4a16      	ldr	r2, [pc, #88]	; (8006b5c <LSM6DSL_ACC_GetOutputDataRate+0xe8>)
 8006b02:	601a      	str	r2, [r3, #0]
      break;
 8006b04:	e01f      	b.n	8006b46 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_104Hz:
      *Odr = 104.0f;
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	4a15      	ldr	r2, [pc, #84]	; (8006b60 <LSM6DSL_ACC_GetOutputDataRate+0xec>)
 8006b0a:	601a      	str	r2, [r3, #0]
      break;
 8006b0c:	e01b      	b.n	8006b46 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_208Hz:
      *Odr = 208.0f;
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	4a14      	ldr	r2, [pc, #80]	; (8006b64 <LSM6DSL_ACC_GetOutputDataRate+0xf0>)
 8006b12:	601a      	str	r2, [r3, #0]
      break;
 8006b14:	e017      	b.n	8006b46 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_416Hz:
      *Odr = 416.0f;
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	4a13      	ldr	r2, [pc, #76]	; (8006b68 <LSM6DSL_ACC_GetOutputDataRate+0xf4>)
 8006b1a:	601a      	str	r2, [r3, #0]
      break;
 8006b1c:	e013      	b.n	8006b46 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_833Hz:
      *Odr = 833.0f;
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	4a12      	ldr	r2, [pc, #72]	; (8006b6c <LSM6DSL_ACC_GetOutputDataRate+0xf8>)
 8006b22:	601a      	str	r2, [r3, #0]
      break;
 8006b24:	e00f      	b.n	8006b46 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1k66Hz:
      *Odr = 1660.0f;
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	4a11      	ldr	r2, [pc, #68]	; (8006b70 <LSM6DSL_ACC_GetOutputDataRate+0xfc>)
 8006b2a:	601a      	str	r2, [r3, #0]
      break;
 8006b2c:	e00b      	b.n	8006b46 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_3k33Hz:
      *Odr = 3330.0f;
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	4a10      	ldr	r2, [pc, #64]	; (8006b74 <LSM6DSL_ACC_GetOutputDataRate+0x100>)
 8006b32:	601a      	str	r2, [r3, #0]
      break;
 8006b34:	e007      	b.n	8006b46 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_6k66Hz:
      *Odr = 6660.0f;
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	4a0f      	ldr	r2, [pc, #60]	; (8006b78 <LSM6DSL_ACC_GetOutputDataRate+0x104>)
 8006b3a:	601a      	str	r2, [r3, #0]
      break;
 8006b3c:	e003      	b.n	8006b46 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSL_ERROR;
 8006b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8006b42:	60fb      	str	r3, [r7, #12]
      break;
 8006b44:	bf00      	nop
  }

  return ret;
 8006b46:	68fb      	ldr	r3, [r7, #12]
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	3710      	adds	r7, #16
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}
 8006b50:	3fcccccd 	.word	0x3fcccccd
 8006b54:	41480000 	.word	0x41480000
 8006b58:	41d00000 	.word	0x41d00000
 8006b5c:	42500000 	.word	0x42500000
 8006b60:	42d00000 	.word	0x42d00000
 8006b64:	43500000 	.word	0x43500000
 8006b68:	43d00000 	.word	0x43d00000
 8006b6c:	44504000 	.word	0x44504000
 8006b70:	44cf8000 	.word	0x44cf8000
 8006b74:	45502000 	.word	0x45502000
 8006b78:	45d02000 	.word	0x45d02000

08006b7c <LSM6DSL_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b082      	sub	sp, #8
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6039      	str	r1, [r7, #0]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d105      	bne.n	8006b9c <LSM6DSL_ACC_SetOutputDataRate+0x20>
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8006b90:	6839      	ldr	r1, [r7, #0]
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f000 fb34 	bl	8007200 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	e004      	b.n	8006ba6 <LSM6DSL_ACC_SetOutputDataRate+0x2a>
  }
  else
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8006b9c:	6839      	ldr	r1, [r7, #0]
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f000 fbb8 	bl	8007314 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>
 8006ba4:	4603      	mov	r3, r0
  }
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3708      	adds	r7, #8
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}
	...

08006bb0 <LSM6DSL_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetFullScale(LSM6DSL_Object_t *pObj, int32_t *FullScale)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b084      	sub	sp, #16
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
 8006bb8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	331c      	adds	r3, #28
 8006bc2:	f107 020b 	add.w	r2, r7, #11
 8006bc6:	4611      	mov	r1, r2
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f000 fdbd 	bl	8007748 <lsm6dsl_xl_full_scale_get>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d002      	beq.n	8006bda <LSM6DSL_ACC_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 8006bd4:	f04f 33ff 	mov.w	r3, #4294967295
 8006bd8:	e023      	b.n	8006c22 <LSM6DSL_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8006bda:	7afb      	ldrb	r3, [r7, #11]
 8006bdc:	2b03      	cmp	r3, #3
 8006bde:	d81b      	bhi.n	8006c18 <LSM6DSL_ACC_GetFullScale+0x68>
 8006be0:	a201      	add	r2, pc, #4	; (adr r2, 8006be8 <LSM6DSL_ACC_GetFullScale+0x38>)
 8006be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006be6:	bf00      	nop
 8006be8:	08006bf9 	.word	0x08006bf9
 8006bec:	08006c11 	.word	0x08006c11
 8006bf0:	08006c01 	.word	0x08006c01
 8006bf4:	08006c09 	.word	0x08006c09
  {
    case LSM6DSL_2g:
      *FullScale =  2;
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	2202      	movs	r2, #2
 8006bfc:	601a      	str	r2, [r3, #0]
      break;
 8006bfe:	e00f      	b.n	8006c20 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_4g:
      *FullScale =  4;
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	2204      	movs	r2, #4
 8006c04:	601a      	str	r2, [r3, #0]
      break;
 8006c06:	e00b      	b.n	8006c20 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_8g:
      *FullScale =  8;
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	2208      	movs	r2, #8
 8006c0c:	601a      	str	r2, [r3, #0]
      break;
 8006c0e:	e007      	b.n	8006c20 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_16g:
      *FullScale = 16;
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	2210      	movs	r2, #16
 8006c14:	601a      	str	r2, [r3, #0]
      break;
 8006c16:	e003      	b.n	8006c20 <LSM6DSL_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSL_ERROR;
 8006c18:	f04f 33ff 	mov.w	r3, #4294967295
 8006c1c:	60fb      	str	r3, [r7, #12]
      break;
 8006c1e:	bf00      	nop
  }

  return ret;
 8006c20:	68fb      	ldr	r3, [r7, #12]
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3710      	adds	r7, #16
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}
 8006c2a:	bf00      	nop

08006c2c <LSM6DSL_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b084      	sub	sp, #16
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
           : (FullScale <= 4) ? LSM6DSL_4g
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	2b02      	cmp	r3, #2
 8006c3a:	dd0b      	ble.n	8006c54 <LSM6DSL_ACC_SetFullScale+0x28>
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	2b04      	cmp	r3, #4
 8006c40:	dd06      	ble.n	8006c50 <LSM6DSL_ACC_SetFullScale+0x24>
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	2b08      	cmp	r3, #8
 8006c46:	dc01      	bgt.n	8006c4c <LSM6DSL_ACC_SetFullScale+0x20>
 8006c48:	2303      	movs	r3, #3
 8006c4a:	e004      	b.n	8006c56 <LSM6DSL_ACC_SetFullScale+0x2a>
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	e002      	b.n	8006c56 <LSM6DSL_ACC_SetFullScale+0x2a>
 8006c50:	2302      	movs	r3, #2
 8006c52:	e000      	b.n	8006c56 <LSM6DSL_ACC_SetFullScale+0x2a>
 8006c54:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
 8006c56:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSL_8g
           :                    LSM6DSL_16g;

  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	331c      	adds	r3, #28
 8006c5c:	7bfa      	ldrb	r2, [r7, #15]
 8006c5e:	4611      	mov	r1, r2
 8006c60:	4618      	mov	r0, r3
 8006c62:	f000 fd4b 	bl	80076fc <lsm6dsl_xl_full_scale_set>
 8006c66:	4603      	mov	r3, r0
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d002      	beq.n	8006c72 <LSM6DSL_ACC_SetFullScale+0x46>
  {
    return LSM6DSL_ERROR;
 8006c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8006c70:	e000      	b.n	8006c74 <LSM6DSL_ACC_SetFullScale+0x48>
  }

  return LSM6DSL_OK;
 8006c72:	2300      	movs	r3, #0
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3710      	adds	r7, #16
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}

08006c7c <LSM6DSL_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b084      	sub	sp, #16
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	331c      	adds	r3, #28
 8006c8a:	f107 0208 	add.w	r2, r7, #8
 8006c8e:	4611      	mov	r1, r2
 8006c90:	4618      	mov	r0, r3
 8006c92:	f000 ff46 	bl	8007b22 <lsm6dsl_acceleration_raw_get>
 8006c96:	4603      	mov	r3, r0
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d002      	beq.n	8006ca2 <LSM6DSL_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 8006c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8006ca0:	e00c      	b.n	8006cbc <LSM6DSL_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8006ca2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8006caa:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8006cb2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 8006cba:	2300      	movs	r3, #0
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	3710      	adds	r7, #16
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}

08006cc4 <LSM6DSL_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *Acceleration)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b086      	sub	sp, #24
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 8006cce:	f04f 0300 	mov.w	r3, #0
 8006cd2:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	331c      	adds	r3, #28
 8006cd8:	f107 0210 	add.w	r2, r7, #16
 8006cdc:	4611      	mov	r1, r2
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f000 ff1f 	bl	8007b22 <lsm6dsl_acceleration_raw_get>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d002      	beq.n	8006cf0 <LSM6DSL_ACC_GetAxes+0x2c>
  {
    return LSM6DSL_ERROR;
 8006cea:	f04f 33ff 	mov.w	r3, #4294967295
 8006cee:	e03c      	b.n	8006d6a <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8006cf0:	f107 030c 	add.w	r3, r7, #12
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f7ff fe76 	bl	80069e8 <LSM6DSL_ACC_GetSensitivity>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d002      	beq.n	8006d08 <LSM6DSL_ACC_GetAxes+0x44>
  {
    return LSM6DSL_ERROR;
 8006d02:	f04f 33ff 	mov.w	r3, #4294967295
 8006d06:	e030      	b.n	8006d6a <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8006d08:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006d0c:	ee07 3a90 	vmov	s15, r3
 8006d10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006d14:	edd7 7a03 	vldr	s15, [r7, #12]
 8006d18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006d20:	ee17 2a90 	vmov	r2, s15
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8006d28:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006d2c:	ee07 3a90 	vmov	s15, r3
 8006d30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006d34:	edd7 7a03 	vldr	s15, [r7, #12]
 8006d38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006d40:	ee17 2a90 	vmov	r2, s15
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8006d48:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006d4c:	ee07 3a90 	vmov	s15, r3
 8006d50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006d54:	edd7 7a03 	vldr	s15, [r7, #12]
 8006d58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006d60:	ee17 2a90 	vmov	r2, s15
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 8006d68:	2300      	movs	r3, #0
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3718      	adds	r7, #24
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}

08006d72 <LSM6DSL_GYRO_Enable>:
 * @brief  Enable the LSM6DSL gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_Enable(LSM6DSL_Object_t *pObj)
{
 8006d72:	b580      	push	{r7, lr}
 8006d74:	b082      	sub	sp, #8
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d101      	bne.n	8006d88 <LSM6DSL_GYRO_Enable+0x16>
  {
    return LSM6DSL_OK;
 8006d84:	2300      	movs	r3, #0
 8006d86:	e014      	b.n	8006db2 <LSM6DSL_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSL_OK)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f103 021c 	add.w	r2, r3, #28
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006d94:	4619      	mov	r1, r3
 8006d96:	4610      	mov	r0, r2
 8006d98:	f000 fe04 	bl	80079a4 <lsm6dsl_gy_data_rate_set>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d002      	beq.n	8006da8 <LSM6DSL_GYRO_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8006da2:	f04f 33ff 	mov.w	r3, #4294967295
 8006da6:	e004      	b.n	8006db2 <LSM6DSL_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2201      	movs	r2, #1
 8006dac:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 8006db0:	2300      	movs	r3, #0
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3708      	adds	r7, #8
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}

08006dba <LSM6DSL_GYRO_Disable>:
 * @brief  Disable the LSM6DSL gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_Disable(LSM6DSL_Object_t *pObj)
{
 8006dba:	b580      	push	{r7, lr}
 8006dbc:	b082      	sub	sp, #8
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d101      	bne.n	8006dd0 <LSM6DSL_GYRO_Disable+0x16>
  {
    return LSM6DSL_OK;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	e01f      	b.n	8006e10 <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSL_OK)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f103 021c 	add.w	r2, r3, #28
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	332c      	adds	r3, #44	; 0x2c
 8006dda:	4619      	mov	r1, r3
 8006ddc:	4610      	mov	r0, r2
 8006dde:	f000 fe07 	bl	80079f0 <lsm6dsl_gy_data_rate_get>
 8006de2:	4603      	mov	r3, r0
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d002      	beq.n	8006dee <LSM6DSL_GYRO_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 8006de8:	f04f 33ff 	mov.w	r3, #4294967295
 8006dec:	e010      	b.n	8006e10 <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	331c      	adds	r3, #28
 8006df2:	2100      	movs	r1, #0
 8006df4:	4618      	mov	r0, r3
 8006df6:	f000 fdd5 	bl	80079a4 <lsm6dsl_gy_data_rate_set>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d002      	beq.n	8006e06 <LSM6DSL_GYRO_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 8006e00:	f04f 33ff 	mov.w	r3, #4294967295
 8006e04:	e004      	b.n	8006e10 <LSM6DSL_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 8006e0e:	2300      	movs	r3, #0
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3708      	adds	r7, #8
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <LSM6DSL_GYRO_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b084      	sub	sp, #16
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8006e22:	2300      	movs	r3, #0
 8006e24:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	331c      	adds	r3, #28
 8006e2a:	f107 020b 	add.w	r2, r7, #11
 8006e2e:	4611      	mov	r1, r2
 8006e30:	4618      	mov	r0, r3
 8006e32:	f000 fd75 	bl	8007920 <lsm6dsl_gy_full_scale_get>
 8006e36:	4603      	mov	r3, r0
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d002      	beq.n	8006e42 <LSM6DSL_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 8006e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8006e40:	e02d      	b.n	8006e9e <LSM6DSL_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8006e42:	7afb      	ldrb	r3, [r7, #11]
 8006e44:	2b06      	cmp	r3, #6
 8006e46:	d825      	bhi.n	8006e94 <LSM6DSL_GYRO_GetSensitivity+0x7c>
 8006e48:	a201      	add	r2, pc, #4	; (adr r2, 8006e50 <LSM6DSL_GYRO_GetSensitivity+0x38>)
 8006e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e4e:	bf00      	nop
 8006e50:	08006e75 	.word	0x08006e75
 8006e54:	08006e6d 	.word	0x08006e6d
 8006e58:	08006e7d 	.word	0x08006e7d
 8006e5c:	08006e95 	.word	0x08006e95
 8006e60:	08006e85 	.word	0x08006e85
 8006e64:	08006e95 	.word	0x08006e95
 8006e68:	08006e8d 	.word	0x08006e8d
  {
    case LSM6DSL_125dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_125DPS;
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	4a0e      	ldr	r2, [pc, #56]	; (8006ea8 <LSM6DSL_GYRO_GetSensitivity+0x90>)
 8006e70:	601a      	str	r2, [r3, #0]
      break;
 8006e72:	e013      	b.n	8006e9c <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_250dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_250DPS;
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	4a0d      	ldr	r2, [pc, #52]	; (8006eac <LSM6DSL_GYRO_GetSensitivity+0x94>)
 8006e78:	601a      	str	r2, [r3, #0]
      break;
 8006e7a:	e00f      	b.n	8006e9c <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_500dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_500DPS;
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	4a0c      	ldr	r2, [pc, #48]	; (8006eb0 <LSM6DSL_GYRO_GetSensitivity+0x98>)
 8006e80:	601a      	str	r2, [r3, #0]
      break;
 8006e82:	e00b      	b.n	8006e9c <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_1000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_1000DPS;
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	4a0b      	ldr	r2, [pc, #44]	; (8006eb4 <LSM6DSL_GYRO_GetSensitivity+0x9c>)
 8006e88:	601a      	str	r2, [r3, #0]
      break;
 8006e8a:	e007      	b.n	8006e9c <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_2000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_2000DPS;
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	4a0a      	ldr	r2, [pc, #40]	; (8006eb8 <LSM6DSL_GYRO_GetSensitivity+0xa0>)
 8006e90:	601a      	str	r2, [r3, #0]
      break;
 8006e92:	e003      	b.n	8006e9c <LSM6DSL_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSL_ERROR;
 8006e94:	f04f 33ff 	mov.w	r3, #4294967295
 8006e98:	60fb      	str	r3, [r7, #12]
      break;
 8006e9a:	bf00      	nop
  }

  return ret;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3710      	adds	r7, #16
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}
 8006ea6:	bf00      	nop
 8006ea8:	408c0000 	.word	0x408c0000
 8006eac:	410c0000 	.word	0x410c0000
 8006eb0:	418c0000 	.word	0x418c0000
 8006eb4:	420c0000 	.word	0x420c0000
 8006eb8:	428c0000 	.word	0x428c0000

08006ebc <LSM6DSL_GYRO_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b084      	sub	sp, #16
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	331c      	adds	r3, #28
 8006ece:	f107 020b 	add.w	r2, r7, #11
 8006ed2:	4611      	mov	r1, r2
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f000 fd8b 	bl	80079f0 <lsm6dsl_gy_data_rate_get>
 8006eda:	4603      	mov	r3, r0
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d002      	beq.n	8006ee6 <LSM6DSL_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 8006ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8006ee4:	e04e      	b.n	8006f84 <LSM6DSL_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8006ee6:	7afb      	ldrb	r3, [r7, #11]
 8006ee8:	2b0a      	cmp	r3, #10
 8006eea:	d846      	bhi.n	8006f7a <LSM6DSL_GYRO_GetOutputDataRate+0xbe>
 8006eec:	a201      	add	r2, pc, #4	; (adr r2, 8006ef4 <LSM6DSL_GYRO_GetOutputDataRate+0x38>)
 8006eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ef2:	bf00      	nop
 8006ef4:	08006f21 	.word	0x08006f21
 8006ef8:	08006f2b 	.word	0x08006f2b
 8006efc:	08006f33 	.word	0x08006f33
 8006f00:	08006f3b 	.word	0x08006f3b
 8006f04:	08006f43 	.word	0x08006f43
 8006f08:	08006f4b 	.word	0x08006f4b
 8006f0c:	08006f53 	.word	0x08006f53
 8006f10:	08006f5b 	.word	0x08006f5b
 8006f14:	08006f63 	.word	0x08006f63
 8006f18:	08006f6b 	.word	0x08006f6b
 8006f1c:	08006f73 	.word	0x08006f73
  {
    case LSM6DSL_GY_ODR_OFF:
      *Odr = 0.0f;
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	f04f 0200 	mov.w	r2, #0
 8006f26:	601a      	str	r2, [r3, #0]
      break;
 8006f28:	e02b      	b.n	8006f82 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_12Hz5:
      *Odr = 12.5f;
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	4a17      	ldr	r2, [pc, #92]	; (8006f8c <LSM6DSL_GYRO_GetOutputDataRate+0xd0>)
 8006f2e:	601a      	str	r2, [r3, #0]
      break;
 8006f30:	e027      	b.n	8006f82 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_26Hz:
      *Odr = 26.0f;
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	4a16      	ldr	r2, [pc, #88]	; (8006f90 <LSM6DSL_GYRO_GetOutputDataRate+0xd4>)
 8006f36:	601a      	str	r2, [r3, #0]
      break;
 8006f38:	e023      	b.n	8006f82 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_52Hz:
      *Odr = 52.0f;
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	4a15      	ldr	r2, [pc, #84]	; (8006f94 <LSM6DSL_GYRO_GetOutputDataRate+0xd8>)
 8006f3e:	601a      	str	r2, [r3, #0]
      break;
 8006f40:	e01f      	b.n	8006f82 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_104Hz:
      *Odr = 104.0f;
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	4a14      	ldr	r2, [pc, #80]	; (8006f98 <LSM6DSL_GYRO_GetOutputDataRate+0xdc>)
 8006f46:	601a      	str	r2, [r3, #0]
      break;
 8006f48:	e01b      	b.n	8006f82 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_208Hz:
      *Odr = 208.0f;
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	4a13      	ldr	r2, [pc, #76]	; (8006f9c <LSM6DSL_GYRO_GetOutputDataRate+0xe0>)
 8006f4e:	601a      	str	r2, [r3, #0]
      break;
 8006f50:	e017      	b.n	8006f82 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_416Hz:
      *Odr = 416.0f;
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	4a12      	ldr	r2, [pc, #72]	; (8006fa0 <LSM6DSL_GYRO_GetOutputDataRate+0xe4>)
 8006f56:	601a      	str	r2, [r3, #0]
      break;
 8006f58:	e013      	b.n	8006f82 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_833Hz:
      *Odr = 833.0f;
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	4a11      	ldr	r2, [pc, #68]	; (8006fa4 <LSM6DSL_GYRO_GetOutputDataRate+0xe8>)
 8006f5e:	601a      	str	r2, [r3, #0]
      break;
 8006f60:	e00f      	b.n	8006f82 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_1k66Hz:
      *Odr =  1660.0f;
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	4a10      	ldr	r2, [pc, #64]	; (8006fa8 <LSM6DSL_GYRO_GetOutputDataRate+0xec>)
 8006f66:	601a      	str	r2, [r3, #0]
      break;
 8006f68:	e00b      	b.n	8006f82 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_3k33Hz:
      *Odr =  3330.0f;
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	4a0f      	ldr	r2, [pc, #60]	; (8006fac <LSM6DSL_GYRO_GetOutputDataRate+0xf0>)
 8006f6e:	601a      	str	r2, [r3, #0]
      break;
 8006f70:	e007      	b.n	8006f82 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_6k66Hz:
      *Odr =  6660.0f;
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	4a0e      	ldr	r2, [pc, #56]	; (8006fb0 <LSM6DSL_GYRO_GetOutputDataRate+0xf4>)
 8006f76:	601a      	str	r2, [r3, #0]
      break;
 8006f78:	e003      	b.n	8006f82 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSL_ERROR;
 8006f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8006f7e:	60fb      	str	r3, [r7, #12]
      break;
 8006f80:	bf00      	nop
  }

  return ret;
 8006f82:	68fb      	ldr	r3, [r7, #12]
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3710      	adds	r7, #16
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}
 8006f8c:	41480000 	.word	0x41480000
 8006f90:	41d00000 	.word	0x41d00000
 8006f94:	42500000 	.word	0x42500000
 8006f98:	42d00000 	.word	0x42d00000
 8006f9c:	43500000 	.word	0x43500000
 8006fa0:	43d00000 	.word	0x43d00000
 8006fa4:	44504000 	.word	0x44504000
 8006fa8:	44cf8000 	.word	0x44cf8000
 8006fac:	45502000 	.word	0x45502000
 8006fb0:	45d02000 	.word	0x45d02000

08006fb4 <LSM6DSL_GYRO_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b082      	sub	sp, #8
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
 8006fbc:	6039      	str	r1, [r7, #0]
  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d105      	bne.n	8006fd4 <LSM6DSL_GYRO_SetOutputDataRate+0x20>
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 8006fc8:	6839      	ldr	r1, [r7, #0]
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f000 fa24 	bl	8007418 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	e004      	b.n	8006fde <LSM6DSL_GYRO_SetOutputDataRate+0x2a>
  }
  else
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8006fd4:	6839      	ldr	r1, [r7, #0]
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 faa8 	bl	800752c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>
 8006fdc:	4603      	mov	r3, r0
  }
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3708      	adds	r7, #8
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}
	...

08006fe8 <LSM6DSL_GYRO_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetFullScale(LSM6DSL_Object_t *pObj, int32_t  *FullScale)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b084      	sub	sp, #16
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
 8006ff0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	331c      	adds	r3, #28
 8006ffa:	f107 020b 	add.w	r2, r7, #11
 8006ffe:	4611      	mov	r1, r2
 8007000:	4618      	mov	r0, r3
 8007002:	f000 fc8d 	bl	8007920 <lsm6dsl_gy_full_scale_get>
 8007006:	4603      	mov	r3, r0
 8007008:	2b00      	cmp	r3, #0
 800700a:	d002      	beq.n	8007012 <LSM6DSL_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 800700c:	f04f 33ff 	mov.w	r3, #4294967295
 8007010:	e030      	b.n	8007074 <LSM6DSL_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 8007012:	7afb      	ldrb	r3, [r7, #11]
 8007014:	2b06      	cmp	r3, #6
 8007016:	d828      	bhi.n	800706a <LSM6DSL_GYRO_GetFullScale+0x82>
 8007018:	a201      	add	r2, pc, #4	; (adr r2, 8007020 <LSM6DSL_GYRO_GetFullScale+0x38>)
 800701a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800701e:	bf00      	nop
 8007020:	08007045 	.word	0x08007045
 8007024:	0800703d 	.word	0x0800703d
 8007028:	0800704d 	.word	0x0800704d
 800702c:	0800706b 	.word	0x0800706b
 8007030:	08007057 	.word	0x08007057
 8007034:	0800706b 	.word	0x0800706b
 8007038:	08007061 	.word	0x08007061
  {
    case LSM6DSL_125dps:
      *FullScale =  125;
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	227d      	movs	r2, #125	; 0x7d
 8007040:	601a      	str	r2, [r3, #0]
      break;
 8007042:	e016      	b.n	8007072 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_250dps:
      *FullScale =  250;
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	22fa      	movs	r2, #250	; 0xfa
 8007048:	601a      	str	r2, [r3, #0]
      break;
 800704a:	e012      	b.n	8007072 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_500dps:
      *FullScale =  500;
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8007052:	601a      	str	r2, [r3, #0]
      break;
 8007054:	e00d      	b.n	8007072 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_1000dps:
      *FullScale = 1000;
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800705c:	601a      	str	r2, [r3, #0]
      break;
 800705e:	e008      	b.n	8007072 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_2000dps:
      *FullScale = 2000;
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8007066:	601a      	str	r2, [r3, #0]
      break;
 8007068:	e003      	b.n	8007072 <LSM6DSL_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSL_ERROR;
 800706a:	f04f 33ff 	mov.w	r3, #4294967295
 800706e:	60fb      	str	r3, [r7, #12]
      break;
 8007070:	bf00      	nop
  }

  return ret;
 8007072:	68fb      	ldr	r3, [r7, #12]
}
 8007074:	4618      	mov	r0, r3
 8007076:	3710      	adds	r7, #16
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}

0800707c <LSM6DSL_GYRO_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b084      	sub	sp, #16
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
           : (FullScale <= 250)  ? LSM6DSL_250dps
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	2b7d      	cmp	r3, #125	; 0x7d
 800708a:	dd12      	ble.n	80070b2 <LSM6DSL_GYRO_SetFullScale+0x36>
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	2bfa      	cmp	r3, #250	; 0xfa
 8007090:	dd0d      	ble.n	80070ae <LSM6DSL_GYRO_SetFullScale+0x32>
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8007098:	dd07      	ble.n	80070aa <LSM6DSL_GYRO_SetFullScale+0x2e>
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80070a0:	dc01      	bgt.n	80070a6 <LSM6DSL_GYRO_SetFullScale+0x2a>
 80070a2:	2304      	movs	r3, #4
 80070a4:	e006      	b.n	80070b4 <LSM6DSL_GYRO_SetFullScale+0x38>
 80070a6:	2306      	movs	r3, #6
 80070a8:	e004      	b.n	80070b4 <LSM6DSL_GYRO_SetFullScale+0x38>
 80070aa:	2302      	movs	r3, #2
 80070ac:	e002      	b.n	80070b4 <LSM6DSL_GYRO_SetFullScale+0x38>
 80070ae:	2300      	movs	r3, #0
 80070b0:	e000      	b.n	80070b4 <LSM6DSL_GYRO_SetFullScale+0x38>
 80070b2:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
 80070b4:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSL_500dps
           : (FullScale <= 1000) ? LSM6DSL_1000dps
           :                       LSM6DSL_2000dps;

  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	331c      	adds	r3, #28
 80070ba:	7bfa      	ldrb	r2, [r7, #15]
 80070bc:	4611      	mov	r1, r2
 80070be:	4618      	mov	r0, r3
 80070c0:	f000 fc08 	bl	80078d4 <lsm6dsl_gy_full_scale_set>
 80070c4:	4603      	mov	r3, r0
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d002      	beq.n	80070d0 <LSM6DSL_GYRO_SetFullScale+0x54>
  {
    return LSM6DSL_ERROR;
 80070ca:	f04f 33ff 	mov.w	r3, #4294967295
 80070ce:	e000      	b.n	80070d2 <LSM6DSL_GYRO_SetFullScale+0x56>
  }

  return LSM6DSL_OK;
 80070d0:	2300      	movs	r3, #0
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3710      	adds	r7, #16
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}

080070da <LSM6DSL_GYRO_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 80070da:	b580      	push	{r7, lr}
 80070dc:	b084      	sub	sp, #16
 80070de:	af00      	add	r7, sp, #0
 80070e0:	6078      	str	r0, [r7, #4]
 80070e2:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	331c      	adds	r3, #28
 80070e8:	f107 0208 	add.w	r2, r7, #8
 80070ec:	4611      	mov	r1, r2
 80070ee:	4618      	mov	r0, r3
 80070f0:	f000 fd06 	bl	8007b00 <lsm6dsl_angular_rate_raw_get>
 80070f4:	4603      	mov	r3, r0
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d002      	beq.n	8007100 <LSM6DSL_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 80070fa:	f04f 33ff 	mov.w	r3, #4294967295
 80070fe:	e00c      	b.n	800711a <LSM6DSL_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8007100:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8007108:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8007110:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 8007118:	2300      	movs	r3, #0
}
 800711a:	4618      	mov	r0, r3
 800711c:	3710      	adds	r7, #16
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}

08007122 <LSM6DSL_GYRO_GetAxes>:
 * @param  pObj the device pObj
 * @param  AngularRate pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *AngularRate)
{
 8007122:	b580      	push	{r7, lr}
 8007124:	b086      	sub	sp, #24
 8007126:	af00      	add	r7, sp, #0
 8007128:	6078      	str	r0, [r7, #4]
 800712a:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	331c      	adds	r3, #28
 8007130:	f107 0210 	add.w	r2, r7, #16
 8007134:	4611      	mov	r1, r2
 8007136:	4618      	mov	r0, r3
 8007138:	f000 fce2 	bl	8007b00 <lsm6dsl_angular_rate_raw_get>
 800713c:	4603      	mov	r3, r0
 800713e:	2b00      	cmp	r3, #0
 8007140:	d002      	beq.n	8007148 <LSM6DSL_GYRO_GetAxes+0x26>
  {
    return LSM6DSL_ERROR;
 8007142:	f04f 33ff 	mov.w	r3, #4294967295
 8007146:	e03c      	b.n	80071c2 <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8007148:	f107 030c 	add.w	r3, r7, #12
 800714c:	4619      	mov	r1, r3
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f7ff fe62 	bl	8006e18 <LSM6DSL_GYRO_GetSensitivity>
 8007154:	4603      	mov	r3, r0
 8007156:	2b00      	cmp	r3, #0
 8007158:	d002      	beq.n	8007160 <LSM6DSL_GYRO_GetAxes+0x3e>
  {
    return LSM6DSL_ERROR;
 800715a:	f04f 33ff 	mov.w	r3, #4294967295
 800715e:	e030      	b.n	80071c2 <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8007160:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007164:	ee07 3a90 	vmov	s15, r3
 8007168:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800716c:	edd7 7a03 	vldr	s15, [r7, #12]
 8007170:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007174:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007178:	ee17 2a90 	vmov	r2, s15
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8007180:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007184:	ee07 3a90 	vmov	s15, r3
 8007188:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800718c:	edd7 7a03 	vldr	s15, [r7, #12]
 8007190:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007194:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007198:	ee17 2a90 	vmov	r2, s15
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80071a0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80071a4:	ee07 3a90 	vmov	s15, r3
 80071a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80071ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80071b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80071b8:	ee17 2a90 	vmov	r2, s15
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 80071c0:	2300      	movs	r3, #0
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3718      	adds	r7, #24
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}

080071ca <LSM6DSL_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Write_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80071ca:	b580      	push	{r7, lr}
 80071cc:	b082      	sub	sp, #8
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	6078      	str	r0, [r7, #4]
 80071d2:	460b      	mov	r3, r1
 80071d4:	70fb      	strb	r3, [r7, #3]
 80071d6:	4613      	mov	r3, r2
 80071d8:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f103 001c 	add.w	r0, r3, #28
 80071e0:	1cba      	adds	r2, r7, #2
 80071e2:	78f9      	ldrb	r1, [r7, #3]
 80071e4:	2301      	movs	r3, #1
 80071e6:	f000 fa71 	bl	80076cc <lsm6dsl_write_reg>
 80071ea:	4603      	mov	r3, r0
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d002      	beq.n	80071f6 <LSM6DSL_Write_Reg+0x2c>
  {
    return LSM6DSL_ERROR;
 80071f0:	f04f 33ff 	mov.w	r3, #4294967295
 80071f4:	e000      	b.n	80071f8 <LSM6DSL_Write_Reg+0x2e>
  }

  return LSM6DSL_OK;
 80071f6:	2300      	movs	r3, #0
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3708      	adds	r7, #8
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}

08007200 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b084      	sub	sp, #16
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	6039      	str	r1, [r7, #0]
  lsm6dsl_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 800720a:	edd7 7a00 	vldr	s15, [r7]
 800720e:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8007212:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800721a:	d801      	bhi.n	8007220 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x20>
 800721c:	2301      	movs	r3, #1
 800721e:	e058      	b.n	80072d2 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8007220:	edd7 7a00 	vldr	s15, [r7]
 8007224:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8007228:	eef4 7ac7 	vcmpe.f32	s15, s14
 800722c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007230:	d801      	bhi.n	8007236 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x36>
 8007232:	2302      	movs	r3, #2
 8007234:	e04d      	b.n	80072d2 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8007236:	edd7 7a00 	vldr	s15, [r7]
 800723a:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80072f8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf8>
 800723e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007246:	d801      	bhi.n	800724c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x4c>
 8007248:	2303      	movs	r3, #3
 800724a:	e042      	b.n	80072d2 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 800724c:	edd7 7a00 	vldr	s15, [r7]
 8007250:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80072fc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xfc>
 8007254:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800725c:	d801      	bhi.n	8007262 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x62>
 800725e:	2304      	movs	r3, #4
 8007260:	e037      	b.n	80072d2 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8007262:	edd7 7a00 	vldr	s15, [r7]
 8007266:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8007300 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x100>
 800726a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800726e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007272:	d801      	bhi.n	8007278 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x78>
 8007274:	2305      	movs	r3, #5
 8007276:	e02c      	b.n	80072d2 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8007278:	edd7 7a00 	vldr	s15, [r7]
 800727c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8007304 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x104>
 8007280:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007288:	d801      	bhi.n	800728e <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x8e>
 800728a:	2306      	movs	r3, #6
 800728c:	e021      	b.n	80072d2 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 800728e:	edd7 7a00 	vldr	s15, [r7]
 8007292:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8007308 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x108>
 8007296:	eef4 7ac7 	vcmpe.f32	s15, s14
 800729a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800729e:	d801      	bhi.n	80072a4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xa4>
 80072a0:	2307      	movs	r3, #7
 80072a2:	e016      	b.n	80072d2 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 80072a4:	edd7 7a00 	vldr	s15, [r7]
 80072a8:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800730c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x10c>
 80072ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80072b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072b4:	d801      	bhi.n	80072ba <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xba>
 80072b6:	2308      	movs	r3, #8
 80072b8:	e00b      	b.n	80072d2 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 80072ba:	edd7 7a00 	vldr	s15, [r7]
 80072be:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8007310 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x110>
 80072c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80072c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072ca:	d801      	bhi.n	80072d0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd0>
 80072cc:	2309      	movs	r3, #9
 80072ce:	e000      	b.n	80072d2 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 80072d0:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 80072d2:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
          :                    LSM6DSL_XL_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	331c      	adds	r3, #28
 80072d8:	7bfa      	ldrb	r2, [r7, #15]
 80072da:	4611      	mov	r1, r2
 80072dc:	4618      	mov	r0, r3
 80072de:	f000 fa6b 	bl	80077b8 <lsm6dsl_xl_data_rate_set>
 80072e2:	4603      	mov	r3, r0
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d002      	beq.n	80072ee <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xee>
  {
    return LSM6DSL_ERROR;
 80072e8:	f04f 33ff 	mov.w	r3, #4294967295
 80072ec:	e000      	b.n	80072f0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf0>
  }

  return LSM6DSL_OK;
 80072ee:	2300      	movs	r3, #0
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3710      	adds	r7, #16
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}
 80072f8:	42500000 	.word	0x42500000
 80072fc:	42d00000 	.word	0x42d00000
 8007300:	43500000 	.word	0x43500000
 8007304:	43d00000 	.word	0x43d00000
 8007308:	44504000 	.word	0x44504000
 800730c:	44cf8000 	.word	0x44cf8000
 8007310:	45502000 	.word	0x45502000

08007314 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8007314:	b480      	push	{r7}
 8007316:	b083      	sub	sp, #12
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	6039      	str	r1, [r7, #0]
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
                : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 800731e:	edd7 7a00 	vldr	s15, [r7]
 8007322:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8007326:	eef4 7ac7 	vcmpe.f32	s15, s14
 800732a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800732e:	d801      	bhi.n	8007334 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x20>
 8007330:	2301      	movs	r3, #1
 8007332:	e058      	b.n	80073e6 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8007334:	edd7 7a00 	vldr	s15, [r7]
 8007338:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800733c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007344:	d801      	bhi.n	800734a <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x36>
 8007346:	2302      	movs	r3, #2
 8007348:	e04d      	b.n	80073e6 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 800734a:	edd7 7a00 	vldr	s15, [r7]
 800734e:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80073fc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8007352:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800735a:	d801      	bhi.n	8007360 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x4c>
 800735c:	2303      	movs	r3, #3
 800735e:	e042      	b.n	80073e6 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8007360:	edd7 7a00 	vldr	s15, [r7]
 8007364:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8007400 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xec>
 8007368:	eef4 7ac7 	vcmpe.f32	s15, s14
 800736c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007370:	d801      	bhi.n	8007376 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x62>
 8007372:	2304      	movs	r3, #4
 8007374:	e037      	b.n	80073e6 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8007376:	edd7 7a00 	vldr	s15, [r7]
 800737a:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8007404 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf0>
 800737e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007386:	d801      	bhi.n	800738c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x78>
 8007388:	2305      	movs	r3, #5
 800738a:	e02c      	b.n	80073e6 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 800738c:	edd7 7a00 	vldr	s15, [r7]
 8007390:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8007408 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf4>
 8007394:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800739c:	d801      	bhi.n	80073a2 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x8e>
 800739e:	2306      	movs	r3, #6
 80073a0:	e021      	b.n	80073e6 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 80073a2:	edd7 7a00 	vldr	s15, [r7]
 80073a6:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800740c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf8>
 80073aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80073ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073b2:	d801      	bhi.n	80073b8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xa4>
 80073b4:	2307      	movs	r3, #7
 80073b6:	e016      	b.n	80073e6 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 80073b8:	edd7 7a00 	vldr	s15, [r7]
 80073bc:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8007410 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xfc>
 80073c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80073c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073c8:	d801      	bhi.n	80073ce <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xba>
 80073ca:	2308      	movs	r3, #8
 80073cc:	e00b      	b.n	80073e6 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 80073ce:	edd7 7a00 	vldr	s15, [r7]
 80073d2:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8007414 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x100>
 80073d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80073da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073de:	d801      	bhi.n	80073e4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd0>
 80073e0:	2309      	movs	r3, #9
 80073e2:	e000      	b.n	80073e6 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 80073e4:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 80073e6:	687a      	ldr	r2, [r7, #4]
 80073e8:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                : (Odr <=  833.0f) ? LSM6DSL_XL_ODR_833Hz
                : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
                : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
                :                    LSM6DSL_XL_ODR_6k66Hz;

  return LSM6DSL_OK;
 80073ec:	2300      	movs	r3, #0
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	370c      	adds	r7, #12
 80073f2:	46bd      	mov	sp, r7
 80073f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f8:	4770      	bx	lr
 80073fa:	bf00      	nop
 80073fc:	42500000 	.word	0x42500000
 8007400:	42d00000 	.word	0x42d00000
 8007404:	43500000 	.word	0x43500000
 8007408:	43d00000 	.word	0x43d00000
 800740c:	44504000 	.word	0x44504000
 8007410:	44cf8000 	.word	0x44cf8000
 8007414:	45502000 	.word	0x45502000

08007418 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b084      	sub	sp, #16
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	6039      	str	r1, [r7, #0]
  lsm6dsl_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 8007422:	edd7 7a00 	vldr	s15, [r7]
 8007426:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800742a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800742e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007432:	d801      	bhi.n	8007438 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x20>
 8007434:	2301      	movs	r3, #1
 8007436:	e058      	b.n	80074ea <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 8007438:	edd7 7a00 	vldr	s15, [r7]
 800743c:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8007440:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007448:	d801      	bhi.n	800744e <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x36>
 800744a:	2302      	movs	r3, #2
 800744c:	e04d      	b.n	80074ea <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 800744e:	edd7 7a00 	vldr	s15, [r7]
 8007452:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8007510 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf8>
 8007456:	eef4 7ac7 	vcmpe.f32	s15, s14
 800745a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800745e:	d801      	bhi.n	8007464 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x4c>
 8007460:	2303      	movs	r3, #3
 8007462:	e042      	b.n	80074ea <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 8007464:	edd7 7a00 	vldr	s15, [r7]
 8007468:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8007514 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 800746c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007474:	d801      	bhi.n	800747a <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x62>
 8007476:	2304      	movs	r3, #4
 8007478:	e037      	b.n	80074ea <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 800747a:	edd7 7a00 	vldr	s15, [r7]
 800747e:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8007518 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x100>
 8007482:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800748a:	d801      	bhi.n	8007490 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x78>
 800748c:	2305      	movs	r3, #5
 800748e:	e02c      	b.n	80074ea <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 8007490:	edd7 7a00 	vldr	s15, [r7]
 8007494:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800751c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8007498:	eef4 7ac7 	vcmpe.f32	s15, s14
 800749c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074a0:	d801      	bhi.n	80074a6 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x8e>
 80074a2:	2306      	movs	r3, #6
 80074a4:	e021      	b.n	80074ea <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 80074a6:	edd7 7a00 	vldr	s15, [r7]
 80074aa:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8007520 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x108>
 80074ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80074b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074b6:	d801      	bhi.n	80074bc <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xa4>
 80074b8:	2307      	movs	r3, #7
 80074ba:	e016      	b.n	80074ea <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 80074bc:	edd7 7a00 	vldr	s15, [r7]
 80074c0:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8007524 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 80074c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80074c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074cc:	d801      	bhi.n	80074d2 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xba>
 80074ce:	2308      	movs	r3, #8
 80074d0:	e00b      	b.n	80074ea <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 80074d2:	edd7 7a00 	vldr	s15, [r7]
 80074d6:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8007528 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x110>
 80074da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80074de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074e2:	d801      	bhi.n	80074e8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd0>
 80074e4:	2309      	movs	r3, #9
 80074e6:	e000      	b.n	80074ea <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 80074e8:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 80074ea:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
          :                    LSM6DSL_GY_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	331c      	adds	r3, #28
 80074f0:	7bfa      	ldrb	r2, [r7, #15]
 80074f2:	4611      	mov	r1, r2
 80074f4:	4618      	mov	r0, r3
 80074f6:	f000 fa55 	bl	80079a4 <lsm6dsl_gy_data_rate_set>
 80074fa:	4603      	mov	r3, r0
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d002      	beq.n	8007506 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xee>
  {
    return LSM6DSL_ERROR;
 8007500:	f04f 33ff 	mov.w	r3, #4294967295
 8007504:	e000      	b.n	8007508 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  }

  return LSM6DSL_OK;
 8007506:	2300      	movs	r3, #0
}
 8007508:	4618      	mov	r0, r3
 800750a:	3710      	adds	r7, #16
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}
 8007510:	42500000 	.word	0x42500000
 8007514:	42d00000 	.word	0x42d00000
 8007518:	43500000 	.word	0x43500000
 800751c:	43d00000 	.word	0x43d00000
 8007520:	44504000 	.word	0x44504000
 8007524:	44cf8000 	.word	0x44cf8000
 8007528:	45502000 	.word	0x45502000

0800752c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 800752c:	b480      	push	{r7}
 800752e:	b083      	sub	sp, #12
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	6039      	str	r1, [r7, #0]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
                 : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 8007536:	edd7 7a00 	vldr	s15, [r7]
 800753a:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800753e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007546:	d801      	bhi.n	800754c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x20>
 8007548:	2301      	movs	r3, #1
 800754a:	e058      	b.n	80075fe <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 800754c:	edd7 7a00 	vldr	s15, [r7]
 8007550:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8007554:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800755c:	d801      	bhi.n	8007562 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x36>
 800755e:	2302      	movs	r3, #2
 8007560:	e04d      	b.n	80075fe <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8007562:	edd7 7a00 	vldr	s15, [r7]
 8007566:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8007614 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 800756a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800756e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007572:	d801      	bhi.n	8007578 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x4c>
 8007574:	2303      	movs	r3, #3
 8007576:	e042      	b.n	80075fe <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8007578:	edd7 7a00 	vldr	s15, [r7]
 800757c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8007618 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xec>
 8007580:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007588:	d801      	bhi.n	800758e <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x62>
 800758a:	2304      	movs	r3, #4
 800758c:	e037      	b.n	80075fe <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 800758e:	edd7 7a00 	vldr	s15, [r7]
 8007592:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800761c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8007596:	eef4 7ac7 	vcmpe.f32	s15, s14
 800759a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800759e:	d801      	bhi.n	80075a4 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x78>
 80075a0:	2305      	movs	r3, #5
 80075a2:	e02c      	b.n	80075fe <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 80075a4:	edd7 7a00 	vldr	s15, [r7]
 80075a8:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8007620 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 80075ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075b4:	d801      	bhi.n	80075ba <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x8e>
 80075b6:	2306      	movs	r3, #6
 80075b8:	e021      	b.n	80075fe <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 80075ba:	edd7 7a00 	vldr	s15, [r7]
 80075be:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8007624 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 80075c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075ca:	d801      	bhi.n	80075d0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xa4>
 80075cc:	2307      	movs	r3, #7
 80075ce:	e016      	b.n	80075fe <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 80075d0:	edd7 7a00 	vldr	s15, [r7]
 80075d4:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8007628 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 80075d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075e0:	d801      	bhi.n	80075e6 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xba>
 80075e2:	2308      	movs	r3, #8
 80075e4:	e00b      	b.n	80075fe <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 80075e6:	edd7 7a00 	vldr	s15, [r7]
 80075ea:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800762c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x100>
 80075ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075f6:	d801      	bhi.n	80075fc <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd0>
 80075f8:	2309      	movs	r3, #9
 80075fa:	e000      	b.n	80075fe <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 80075fc:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 80075fe:	687a      	ldr	r2, [r7, #4]
 8007600:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
                 : (Odr <=  833.0f) ? LSM6DSL_GY_ODR_833Hz
                 : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
                 : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
                 :                    LSM6DSL_GY_ODR_6k66Hz;

  return LSM6DSL_OK;
 8007604:	2300      	movs	r3, #0
}
 8007606:	4618      	mov	r0, r3
 8007608:	370c      	adds	r7, #12
 800760a:	46bd      	mov	sp, r7
 800760c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007610:	4770      	bx	lr
 8007612:	bf00      	nop
 8007614:	42500000 	.word	0x42500000
 8007618:	42d00000 	.word	0x42d00000
 800761c:	43500000 	.word	0x43500000
 8007620:	43d00000 	.word	0x43d00000
 8007624:	44504000 	.word	0x44504000
 8007628:	44cf8000 	.word	0x44cf8000
 800762c:	45502000 	.word	0x45502000

08007630 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8007630:	b590      	push	{r4, r7, lr}
 8007632:	b087      	sub	sp, #28
 8007634:	af00      	add	r7, sp, #0
 8007636:	60f8      	str	r0, [r7, #12]
 8007638:	607a      	str	r2, [r7, #4]
 800763a:	461a      	mov	r2, r3
 800763c:	460b      	mov	r3, r1
 800763e:	72fb      	strb	r3, [r7, #11]
 8007640:	4613      	mov	r3, r2
 8007642:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	695c      	ldr	r4, [r3, #20]
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	7b1b      	ldrb	r3, [r3, #12]
 8007650:	b298      	uxth	r0, r3
 8007652:	7afb      	ldrb	r3, [r7, #11]
 8007654:	b299      	uxth	r1, r3
 8007656:	893b      	ldrh	r3, [r7, #8]
 8007658:	687a      	ldr	r2, [r7, #4]
 800765a:	47a0      	blx	r4
 800765c:	4603      	mov	r3, r0
}
 800765e:	4618      	mov	r0, r3
 8007660:	371c      	adds	r7, #28
 8007662:	46bd      	mov	sp, r7
 8007664:	bd90      	pop	{r4, r7, pc}

08007666 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8007666:	b590      	push	{r4, r7, lr}
 8007668:	b087      	sub	sp, #28
 800766a:	af00      	add	r7, sp, #0
 800766c:	60f8      	str	r0, [r7, #12]
 800766e:	607a      	str	r2, [r7, #4]
 8007670:	461a      	mov	r2, r3
 8007672:	460b      	mov	r3, r1
 8007674:	72fb      	strb	r3, [r7, #11]
 8007676:	4613      	mov	r3, r2
 8007678:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	691c      	ldr	r4, [r3, #16]
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	7b1b      	ldrb	r3, [r3, #12]
 8007686:	b298      	uxth	r0, r3
 8007688:	7afb      	ldrb	r3, [r7, #11]
 800768a:	b299      	uxth	r1, r3
 800768c:	893b      	ldrh	r3, [r7, #8]
 800768e:	687a      	ldr	r2, [r7, #4]
 8007690:	47a0      	blx	r4
 8007692:	4603      	mov	r3, r0
}
 8007694:	4618      	mov	r0, r3
 8007696:	371c      	adds	r7, #28
 8007698:	46bd      	mov	sp, r7
 800769a:	bd90      	pop	{r4, r7, pc}

0800769c <lsm6dsl_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 800769c:	b590      	push	{r4, r7, lr}
 800769e:	b087      	sub	sp, #28
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	60f8      	str	r0, [r7, #12]
 80076a4:	607a      	str	r2, [r7, #4]
 80076a6:	461a      	mov	r2, r3
 80076a8:	460b      	mov	r3, r1
 80076aa:	72fb      	strb	r3, [r7, #11]
 80076ac:	4613      	mov	r3, r2
 80076ae:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	685c      	ldr	r4, [r3, #4]
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	6898      	ldr	r0, [r3, #8]
 80076b8:	893b      	ldrh	r3, [r7, #8]
 80076ba:	7af9      	ldrb	r1, [r7, #11]
 80076bc:	687a      	ldr	r2, [r7, #4]
 80076be:	47a0      	blx	r4
 80076c0:	6178      	str	r0, [r7, #20]
  return ret;
 80076c2:	697b      	ldr	r3, [r7, #20]
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	371c      	adds	r7, #28
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd90      	pop	{r4, r7, pc}

080076cc <lsm6dsl_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 80076cc:	b590      	push	{r4, r7, lr}
 80076ce:	b087      	sub	sp, #28
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	60f8      	str	r0, [r7, #12]
 80076d4:	607a      	str	r2, [r7, #4]
 80076d6:	461a      	mov	r2, r3
 80076d8:	460b      	mov	r3, r1
 80076da:	72fb      	strb	r3, [r7, #11]
 80076dc:	4613      	mov	r3, r2
 80076de:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681c      	ldr	r4, [r3, #0]
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	6898      	ldr	r0, [r3, #8]
 80076e8:	893b      	ldrh	r3, [r7, #8]
 80076ea:	7af9      	ldrb	r1, [r7, #11]
 80076ec:	687a      	ldr	r2, [r7, #4]
 80076ee:	47a0      	blx	r4
 80076f0:	6178      	str	r0, [r7, #20]
  return ret;
 80076f2:	697b      	ldr	r3, [r7, #20]
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	371c      	adds	r7, #28
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd90      	pop	{r4, r7, pc}

080076fc <lsm6dsl_xl_full_scale_set>:
  * @param  val    Change the values of fs_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx, lsm6dsl_fs_xl_t val)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b084      	sub	sp, #16
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
 8007704:	460b      	mov	r3, r1
 8007706:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8007708:	f107 0208 	add.w	r2, r7, #8
 800770c:	2301      	movs	r3, #1
 800770e:	2110      	movs	r1, #16
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f7ff ffc3 	bl	800769c <lsm6dsl_read_reg>
 8007716:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d10f      	bne.n	800773e <lsm6dsl_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t) val;
 800771e:	78fb      	ldrb	r3, [r7, #3]
 8007720:	f003 0303 	and.w	r3, r3, #3
 8007724:	b2da      	uxtb	r2, r3
 8007726:	7a3b      	ldrb	r3, [r7, #8]
 8007728:	f362 0383 	bfi	r3, r2, #2, #2
 800772c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 800772e:	f107 0208 	add.w	r2, r7, #8
 8007732:	2301      	movs	r3, #1
 8007734:	2110      	movs	r1, #16
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f7ff ffc8 	bl	80076cc <lsm6dsl_write_reg>
 800773c:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800773e:	68fb      	ldr	r3, [r7, #12]
}
 8007740:	4618      	mov	r0, r3
 8007742:	3710      	adds	r7, #16
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}

08007748 <lsm6dsl_xl_full_scale_get>:
  * @param  val    Get the values of fs_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_get(stmdev_ctx_t *ctx, lsm6dsl_fs_xl_t *val)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b084      	sub	sp, #16
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
 8007750:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8007752:	f107 0208 	add.w	r2, r7, #8
 8007756:	2301      	movs	r3, #1
 8007758:	2110      	movs	r1, #16
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f7ff ff9e 	bl	800769c <lsm6dsl_read_reg>
 8007760:	60f8      	str	r0, [r7, #12]
  switch (ctrl1_xl.fs_xl) {
 8007762:	7a3b      	ldrb	r3, [r7, #8]
 8007764:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8007768:	b2db      	uxtb	r3, r3
 800776a:	2b03      	cmp	r3, #3
 800776c:	d81a      	bhi.n	80077a4 <lsm6dsl_xl_full_scale_get+0x5c>
 800776e:	a201      	add	r2, pc, #4	; (adr r2, 8007774 <lsm6dsl_xl_full_scale_get+0x2c>)
 8007770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007774:	08007785 	.word	0x08007785
 8007778:	0800778d 	.word	0x0800778d
 800777c:	08007795 	.word	0x08007795
 8007780:	0800779d 	.word	0x0800779d
    case LSM6DSL_2g:
      *val = LSM6DSL_2g;
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	2200      	movs	r2, #0
 8007788:	701a      	strb	r2, [r3, #0]
      break;
 800778a:	e00f      	b.n	80077ac <lsm6dsl_xl_full_scale_get+0x64>
    case LSM6DSL_16g:
      *val = LSM6DSL_16g;
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	2201      	movs	r2, #1
 8007790:	701a      	strb	r2, [r3, #0]
      break;
 8007792:	e00b      	b.n	80077ac <lsm6dsl_xl_full_scale_get+0x64>
    case LSM6DSL_4g:
      *val = LSM6DSL_4g;
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	2202      	movs	r2, #2
 8007798:	701a      	strb	r2, [r3, #0]
      break;
 800779a:	e007      	b.n	80077ac <lsm6dsl_xl_full_scale_get+0x64>
    case LSM6DSL_8g:
      *val = LSM6DSL_8g;
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	2203      	movs	r2, #3
 80077a0:	701a      	strb	r2, [r3, #0]
      break;
 80077a2:	e003      	b.n	80077ac <lsm6dsl_xl_full_scale_get+0x64>
    default:
      *val = LSM6DSL_XL_FS_ND;
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	2204      	movs	r2, #4
 80077a8:	701a      	strb	r2, [r3, #0]
      break;
 80077aa:	bf00      	nop
  }

  return ret;
 80077ac:	68fb      	ldr	r3, [r7, #12]
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3710      	adds	r7, #16
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}
 80077b6:	bf00      	nop

080077b8 <lsm6dsl_xl_data_rate_set>:
  * @param  val    Change the values of odr_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx, lsm6dsl_odr_xl_t val)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b084      	sub	sp, #16
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	460b      	mov	r3, r1
 80077c2:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 80077c4:	f107 0208 	add.w	r2, r7, #8
 80077c8:	2301      	movs	r3, #1
 80077ca:	2110      	movs	r1, #16
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f7ff ff65 	bl	800769c <lsm6dsl_read_reg>
 80077d2:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d10f      	bne.n	80077fa <lsm6dsl_xl_data_rate_set+0x42>
    ctrl1_xl.odr_xl = (uint8_t) val;
 80077da:	78fb      	ldrb	r3, [r7, #3]
 80077dc:	f003 030f 	and.w	r3, r3, #15
 80077e0:	b2da      	uxtb	r2, r3
 80077e2:	7a3b      	ldrb	r3, [r7, #8]
 80077e4:	f362 1307 	bfi	r3, r2, #4, #4
 80077e8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 80077ea:	f107 0208 	add.w	r2, r7, #8
 80077ee:	2301      	movs	r3, #1
 80077f0:	2110      	movs	r1, #16
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f7ff ff6a 	bl	80076cc <lsm6dsl_write_reg>
 80077f8:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80077fa:	68fb      	ldr	r3, [r7, #12]
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3710      	adds	r7, #16
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}

08007804 <lsm6dsl_xl_data_rate_get>:
  * @param  val    Get the values of odr_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_get(stmdev_ctx_t *ctx, lsm6dsl_odr_xl_t *val)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 800780e:	f107 0208 	add.w	r2, r7, #8
 8007812:	2301      	movs	r3, #1
 8007814:	2110      	movs	r1, #16
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f7ff ff40 	bl	800769c <lsm6dsl_read_reg>
 800781c:	60f8      	str	r0, [r7, #12]
  switch (ctrl1_xl.odr_xl) {
 800781e:	7a3b      	ldrb	r3, [r7, #8]
 8007820:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8007824:	b2db      	uxtb	r3, r3
 8007826:	2b0b      	cmp	r3, #11
 8007828:	d84a      	bhi.n	80078c0 <lsm6dsl_xl_data_rate_get+0xbc>
 800782a:	a201      	add	r2, pc, #4	; (adr r2, 8007830 <lsm6dsl_xl_data_rate_get+0x2c>)
 800782c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007830:	08007861 	.word	0x08007861
 8007834:	08007869 	.word	0x08007869
 8007838:	08007871 	.word	0x08007871
 800783c:	08007879 	.word	0x08007879
 8007840:	08007881 	.word	0x08007881
 8007844:	08007889 	.word	0x08007889
 8007848:	08007891 	.word	0x08007891
 800784c:	08007899 	.word	0x08007899
 8007850:	080078a1 	.word	0x080078a1
 8007854:	080078a9 	.word	0x080078a9
 8007858:	080078b1 	.word	0x080078b1
 800785c:	080078b9 	.word	0x080078b9
    case LSM6DSL_XL_ODR_OFF:
      *val = LSM6DSL_XL_ODR_OFF;
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	2200      	movs	r2, #0
 8007864:	701a      	strb	r2, [r3, #0]
      break;
 8007866:	e02f      	b.n	80078c8 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_12Hz5:
      *val = LSM6DSL_XL_ODR_12Hz5;
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	2201      	movs	r2, #1
 800786c:	701a      	strb	r2, [r3, #0]
      break;
 800786e:	e02b      	b.n	80078c8 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_26Hz:
      *val = LSM6DSL_XL_ODR_26Hz;
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	2202      	movs	r2, #2
 8007874:	701a      	strb	r2, [r3, #0]
      break;
 8007876:	e027      	b.n	80078c8 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_52Hz:
      *val = LSM6DSL_XL_ODR_52Hz;
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	2203      	movs	r2, #3
 800787c:	701a      	strb	r2, [r3, #0]
      break;
 800787e:	e023      	b.n	80078c8 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_104Hz:
      *val = LSM6DSL_XL_ODR_104Hz;
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	2204      	movs	r2, #4
 8007884:	701a      	strb	r2, [r3, #0]
      break;
 8007886:	e01f      	b.n	80078c8 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_208Hz:
      *val = LSM6DSL_XL_ODR_208Hz;
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	2205      	movs	r2, #5
 800788c:	701a      	strb	r2, [r3, #0]
      break;
 800788e:	e01b      	b.n	80078c8 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_416Hz:
      *val = LSM6DSL_XL_ODR_416Hz;
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	2206      	movs	r2, #6
 8007894:	701a      	strb	r2, [r3, #0]
      break;
 8007896:	e017      	b.n	80078c8 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_833Hz:
      *val = LSM6DSL_XL_ODR_833Hz;
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	2207      	movs	r2, #7
 800789c:	701a      	strb	r2, [r3, #0]
      break;
 800789e:	e013      	b.n	80078c8 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_1k66Hz:
      *val = LSM6DSL_XL_ODR_1k66Hz;
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	2208      	movs	r2, #8
 80078a4:	701a      	strb	r2, [r3, #0]
      break;
 80078a6:	e00f      	b.n	80078c8 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_3k33Hz:
      *val = LSM6DSL_XL_ODR_3k33Hz;
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	2209      	movs	r2, #9
 80078ac:	701a      	strb	r2, [r3, #0]
      break;
 80078ae:	e00b      	b.n	80078c8 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_6k66Hz:
      *val = LSM6DSL_XL_ODR_6k66Hz;
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	220a      	movs	r2, #10
 80078b4:	701a      	strb	r2, [r3, #0]
      break;
 80078b6:	e007      	b.n	80078c8 <lsm6dsl_xl_data_rate_get+0xc4>
    case LSM6DSL_XL_ODR_1Hz6:
      *val = LSM6DSL_XL_ODR_1Hz6;
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	220b      	movs	r2, #11
 80078bc:	701a      	strb	r2, [r3, #0]
      break;
 80078be:	e003      	b.n	80078c8 <lsm6dsl_xl_data_rate_get+0xc4>
    default:
      *val = LSM6DSL_XL_ODR_ND;
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	220c      	movs	r2, #12
 80078c4:	701a      	strb	r2, [r3, #0]
      break;
 80078c6:	bf00      	nop
  }

  return ret;
 80078c8:	68fb      	ldr	r3, [r7, #12]
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3710      	adds	r7, #16
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}
 80078d2:	bf00      	nop

080078d4 <lsm6dsl_gy_full_scale_set>:
  * @param  val    Change the values of fs_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx, lsm6dsl_fs_g_t val)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b084      	sub	sp, #16
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
 80078dc:	460b      	mov	r3, r1
 80078de:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 80078e0:	f107 0208 	add.w	r2, r7, #8
 80078e4:	2301      	movs	r3, #1
 80078e6:	2111      	movs	r1, #17
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f7ff fed7 	bl	800769c <lsm6dsl_read_reg>
 80078ee:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d10f      	bne.n	8007916 <lsm6dsl_gy_full_scale_set+0x42>
    ctrl2_g.fs_g = (uint8_t) val;
 80078f6:	78fb      	ldrb	r3, [r7, #3]
 80078f8:	f003 0307 	and.w	r3, r3, #7
 80078fc:	b2da      	uxtb	r2, r3
 80078fe:	7a3b      	ldrb	r3, [r7, #8]
 8007900:	f362 0343 	bfi	r3, r2, #1, #3
 8007904:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8007906:	f107 0208 	add.w	r2, r7, #8
 800790a:	2301      	movs	r3, #1
 800790c:	2111      	movs	r1, #17
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f7ff fedc 	bl	80076cc <lsm6dsl_write_reg>
 8007914:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8007916:	68fb      	ldr	r3, [r7, #12]
}
 8007918:	4618      	mov	r0, r3
 800791a:	3710      	adds	r7, #16
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}

08007920 <lsm6dsl_gy_full_scale_get>:
  * @param  val    Get the values of fs_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_get(stmdev_ctx_t *ctx, lsm6dsl_fs_g_t *val)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b084      	sub	sp, #16
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
 8007928:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 800792a:	f107 0208 	add.w	r2, r7, #8
 800792e:	2301      	movs	r3, #1
 8007930:	2111      	movs	r1, #17
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f7ff feb2 	bl	800769c <lsm6dsl_read_reg>
 8007938:	60f8      	str	r0, [r7, #12]
  switch (ctrl2_g.fs_g) {
 800793a:	7a3b      	ldrb	r3, [r7, #8]
 800793c:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8007940:	b2db      	uxtb	r3, r3
 8007942:	2b06      	cmp	r3, #6
 8007944:	d824      	bhi.n	8007990 <lsm6dsl_gy_full_scale_get+0x70>
 8007946:	a201      	add	r2, pc, #4	; (adr r2, 800794c <lsm6dsl_gy_full_scale_get+0x2c>)
 8007948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800794c:	08007969 	.word	0x08007969
 8007950:	08007971 	.word	0x08007971
 8007954:	08007979 	.word	0x08007979
 8007958:	08007991 	.word	0x08007991
 800795c:	08007981 	.word	0x08007981
 8007960:	08007991 	.word	0x08007991
 8007964:	08007989 	.word	0x08007989
    case LSM6DSL_250dps:
      *val = LSM6DSL_250dps;
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	2200      	movs	r2, #0
 800796c:	701a      	strb	r2, [r3, #0]
      break;
 800796e:	e013      	b.n	8007998 <lsm6dsl_gy_full_scale_get+0x78>
    case LSM6DSL_125dps:
      *val = LSM6DSL_125dps;
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	2201      	movs	r2, #1
 8007974:	701a      	strb	r2, [r3, #0]
      break;
 8007976:	e00f      	b.n	8007998 <lsm6dsl_gy_full_scale_get+0x78>
    case LSM6DSL_500dps:
      *val = LSM6DSL_500dps;
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	2202      	movs	r2, #2
 800797c:	701a      	strb	r2, [r3, #0]
      break;
 800797e:	e00b      	b.n	8007998 <lsm6dsl_gy_full_scale_get+0x78>
    case LSM6DSL_1000dps:
      *val = LSM6DSL_1000dps;
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	2204      	movs	r2, #4
 8007984:	701a      	strb	r2, [r3, #0]
      break;
 8007986:	e007      	b.n	8007998 <lsm6dsl_gy_full_scale_get+0x78>
    case LSM6DSL_2000dps:
      *val = LSM6DSL_2000dps;
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	2206      	movs	r2, #6
 800798c:	701a      	strb	r2, [r3, #0]
      break;
 800798e:	e003      	b.n	8007998 <lsm6dsl_gy_full_scale_get+0x78>
    default:
      *val = LSM6DSL_GY_FS_ND;
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	2207      	movs	r2, #7
 8007994:	701a      	strb	r2, [r3, #0]
      break;
 8007996:	bf00      	nop
  }

  return ret;
 8007998:	68fb      	ldr	r3, [r7, #12]
}
 800799a:	4618      	mov	r0, r3
 800799c:	3710      	adds	r7, #16
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}
 80079a2:	bf00      	nop

080079a4 <lsm6dsl_gy_data_rate_set>:
  * @param  val    Change the values of odr_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx, lsm6dsl_odr_g_t val)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b084      	sub	sp, #16
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	460b      	mov	r3, r1
 80079ae:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 80079b0:	f107 0208 	add.w	r2, r7, #8
 80079b4:	2301      	movs	r3, #1
 80079b6:	2111      	movs	r1, #17
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f7ff fe6f 	bl	800769c <lsm6dsl_read_reg>
 80079be:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d10f      	bne.n	80079e6 <lsm6dsl_gy_data_rate_set+0x42>
    ctrl2_g.odr_g = (uint8_t) val;
 80079c6:	78fb      	ldrb	r3, [r7, #3]
 80079c8:	f003 030f 	and.w	r3, r3, #15
 80079cc:	b2da      	uxtb	r2, r3
 80079ce:	7a3b      	ldrb	r3, [r7, #8]
 80079d0:	f362 1307 	bfi	r3, r2, #4, #4
 80079d4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 80079d6:	f107 0208 	add.w	r2, r7, #8
 80079da:	2301      	movs	r3, #1
 80079dc:	2111      	movs	r1, #17
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f7ff fe74 	bl	80076cc <lsm6dsl_write_reg>
 80079e4:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80079e6:	68fb      	ldr	r3, [r7, #12]
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	3710      	adds	r7, #16
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bd80      	pop	{r7, pc}

080079f0 <lsm6dsl_gy_data_rate_get>:
  * @param  val    Get the values of odr_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_get(stmdev_ctx_t *ctx, lsm6dsl_odr_g_t *val)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b084      	sub	sp, #16
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
 80079f8:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 80079fa:	f107 0208 	add.w	r2, r7, #8
 80079fe:	2301      	movs	r3, #1
 8007a00:	2111      	movs	r1, #17
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f7ff fe4a 	bl	800769c <lsm6dsl_read_reg>
 8007a08:	60f8      	str	r0, [r7, #12]
  switch (ctrl2_g.odr_g) {
 8007a0a:	7a3b      	ldrb	r3, [r7, #8]
 8007a0c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8007a10:	b2db      	uxtb	r3, r3
 8007a12:	2b0a      	cmp	r3, #10
 8007a14:	d844      	bhi.n	8007aa0 <lsm6dsl_gy_data_rate_get+0xb0>
 8007a16:	a201      	add	r2, pc, #4	; (adr r2, 8007a1c <lsm6dsl_gy_data_rate_get+0x2c>)
 8007a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a1c:	08007a49 	.word	0x08007a49
 8007a20:	08007a51 	.word	0x08007a51
 8007a24:	08007a59 	.word	0x08007a59
 8007a28:	08007a61 	.word	0x08007a61
 8007a2c:	08007a69 	.word	0x08007a69
 8007a30:	08007a71 	.word	0x08007a71
 8007a34:	08007a79 	.word	0x08007a79
 8007a38:	08007a81 	.word	0x08007a81
 8007a3c:	08007a89 	.word	0x08007a89
 8007a40:	08007a91 	.word	0x08007a91
 8007a44:	08007a99 	.word	0x08007a99
    case LSM6DSL_GY_ODR_OFF:
      *val = LSM6DSL_GY_ODR_OFF;
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	701a      	strb	r2, [r3, #0]
      break;
 8007a4e:	e02b      	b.n	8007aa8 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_12Hz5:
      *val = LSM6DSL_GY_ODR_12Hz5;
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	2201      	movs	r2, #1
 8007a54:	701a      	strb	r2, [r3, #0]
      break;
 8007a56:	e027      	b.n	8007aa8 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_26Hz:
      *val = LSM6DSL_GY_ODR_26Hz;
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	2202      	movs	r2, #2
 8007a5c:	701a      	strb	r2, [r3, #0]
      break;
 8007a5e:	e023      	b.n	8007aa8 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_52Hz:
      *val = LSM6DSL_GY_ODR_52Hz;
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	2203      	movs	r2, #3
 8007a64:	701a      	strb	r2, [r3, #0]
      break;
 8007a66:	e01f      	b.n	8007aa8 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_104Hz:
      *val = LSM6DSL_GY_ODR_104Hz;
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	2204      	movs	r2, #4
 8007a6c:	701a      	strb	r2, [r3, #0]
      break;
 8007a6e:	e01b      	b.n	8007aa8 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_208Hz:
      *val = LSM6DSL_GY_ODR_208Hz;
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	2205      	movs	r2, #5
 8007a74:	701a      	strb	r2, [r3, #0]
      break;
 8007a76:	e017      	b.n	8007aa8 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_416Hz:
      *val = LSM6DSL_GY_ODR_416Hz;
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	2206      	movs	r2, #6
 8007a7c:	701a      	strb	r2, [r3, #0]
      break;
 8007a7e:	e013      	b.n	8007aa8 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_833Hz:
      *val = LSM6DSL_GY_ODR_833Hz;
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	2207      	movs	r2, #7
 8007a84:	701a      	strb	r2, [r3, #0]
      break;
 8007a86:	e00f      	b.n	8007aa8 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_1k66Hz:
      *val = LSM6DSL_GY_ODR_1k66Hz;
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	2208      	movs	r2, #8
 8007a8c:	701a      	strb	r2, [r3, #0]
      break;
 8007a8e:	e00b      	b.n	8007aa8 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_3k33Hz:
      *val = LSM6DSL_GY_ODR_3k33Hz;
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	2209      	movs	r2, #9
 8007a94:	701a      	strb	r2, [r3, #0]
      break;
 8007a96:	e007      	b.n	8007aa8 <lsm6dsl_gy_data_rate_get+0xb8>
    case LSM6DSL_GY_ODR_6k66Hz:
      *val = LSM6DSL_GY_ODR_6k66Hz;
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	220a      	movs	r2, #10
 8007a9c:	701a      	strb	r2, [r3, #0]
      break;
 8007a9e:	e003      	b.n	8007aa8 <lsm6dsl_gy_data_rate_get+0xb8>
    default:
      *val = LSM6DSL_GY_ODR_ND;
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	220b      	movs	r2, #11
 8007aa4:	701a      	strb	r2, [r3, #0]
      break;
 8007aa6:	bf00      	nop
  }

  return ret;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	3710      	adds	r7, #16
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}
 8007ab2:	bf00      	nop

08007ab4 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b084      	sub	sp, #16
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
 8007abc:	460b      	mov	r3, r1
 8007abe:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8007ac0:	f107 0208 	add.w	r2, r7, #8
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	2112      	movs	r1, #18
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f7ff fde7 	bl	800769c <lsm6dsl_read_reg>
 8007ace:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d10f      	bne.n	8007af6 <lsm6dsl_block_data_update_set+0x42>
    ctrl3_c.bdu = val;
 8007ad6:	78fb      	ldrb	r3, [r7, #3]
 8007ad8:	f003 0301 	and.w	r3, r3, #1
 8007adc:	b2da      	uxtb	r2, r3
 8007ade:	7a3b      	ldrb	r3, [r7, #8]
 8007ae0:	f362 1386 	bfi	r3, r2, #6, #1
 8007ae4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8007ae6:	f107 0208 	add.w	r2, r7, #8
 8007aea:	2301      	movs	r3, #1
 8007aec:	2112      	movs	r1, #18
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f7ff fdec 	bl	80076cc <lsm6dsl_write_reg>
 8007af4:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8007af6:	68fb      	ldr	r3, [r7, #12]
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	3710      	adds	r7, #16
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}

08007b00 <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b084      	sub	sp, #16
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 8007b0a:	2306      	movs	r3, #6
 8007b0c:	683a      	ldr	r2, [r7, #0]
 8007b0e:	2122      	movs	r1, #34	; 0x22
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f7ff fdc3 	bl	800769c <lsm6dsl_read_reg>
 8007b16:	60f8      	str	r0, [r7, #12]
  return ret;
 8007b18:	68fb      	ldr	r3, [r7, #12]
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3710      	adds	r7, #16
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}

08007b22 <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8007b22:	b580      	push	{r7, lr}
 8007b24:	b084      	sub	sp, #16
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	6078      	str	r0, [r7, #4]
 8007b2a:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 8007b2c:	2306      	movs	r3, #6
 8007b2e:	683a      	ldr	r2, [r7, #0]
 8007b30:	2128      	movs	r1, #40	; 0x28
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f7ff fdb2 	bl	800769c <lsm6dsl_read_reg>
 8007b38:	60f8      	str	r0, [r7, #12]
  return ret;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3710      	adds	r7, #16
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}

08007b44 <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b084      	sub	sp, #16
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 8007b4e:	2301      	movs	r3, #1
 8007b50:	683a      	ldr	r2, [r7, #0]
 8007b52:	210f      	movs	r1, #15
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f7ff fda1 	bl	800769c <lsm6dsl_read_reg>
 8007b5a:	60f8      	str	r0, [r7, #12]
  return ret;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3710      	adds	r7, #16
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}

08007b66 <lsm6dsl_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8007b66:	b580      	push	{r7, lr}
 8007b68:	b084      	sub	sp, #16
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	6078      	str	r0, [r7, #4]
 8007b6e:	460b      	mov	r3, r1
 8007b70:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8007b72:	f107 0208 	add.w	r2, r7, #8
 8007b76:	2301      	movs	r3, #1
 8007b78:	2112      	movs	r1, #18
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f7ff fd8e 	bl	800769c <lsm6dsl_read_reg>
 8007b80:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d10f      	bne.n	8007ba8 <lsm6dsl_auto_increment_set+0x42>
    ctrl3_c.if_inc = val;
 8007b88:	78fb      	ldrb	r3, [r7, #3]
 8007b8a:	f003 0301 	and.w	r3, r3, #1
 8007b8e:	b2da      	uxtb	r2, r3
 8007b90:	7a3b      	ldrb	r3, [r7, #8]
 8007b92:	f362 0382 	bfi	r3, r2, #2, #1
 8007b96:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8007b98:	f107 0208 	add.w	r2, r7, #8
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	2112      	movs	r1, #18
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f7ff fd93 	bl	80076cc <lsm6dsl_write_reg>
 8007ba6:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3710      	adds	r7, #16
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}

08007bb2 <lsm6dsl_fifo_mode_set>:
  * @param  val    Change the values of fifo_mode in reg FIFO_CTRL5
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx, lsm6dsl_fifo_mode_t val)
{
 8007bb2:	b580      	push	{r7, lr}
 8007bb4:	b084      	sub	sp, #16
 8007bb6:	af00      	add	r7, sp, #0
 8007bb8:	6078      	str	r0, [r7, #4]
 8007bba:	460b      	mov	r3, r1
 8007bbc:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5, (uint8_t*)&fifo_ctrl5, 1);
 8007bbe:	f107 0208 	add.w	r2, r7, #8
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	210a      	movs	r1, #10
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f7ff fd68 	bl	800769c <lsm6dsl_read_reg>
 8007bcc:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d10f      	bne.n	8007bf4 <lsm6dsl_fifo_mode_set+0x42>
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 8007bd4:	78fb      	ldrb	r3, [r7, #3]
 8007bd6:	f003 0307 	and.w	r3, r3, #7
 8007bda:	b2da      	uxtb	r2, r3
 8007bdc:	7a3b      	ldrb	r3, [r7, #8]
 8007bde:	f362 0302 	bfi	r3, r2, #0, #3
 8007be2:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5, (uint8_t*)&fifo_ctrl5, 1);
 8007be4:	f107 0208 	add.w	r2, r7, #8
 8007be8:	2301      	movs	r3, #1
 8007bea:	210a      	movs	r1, #10
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f7ff fd6d 	bl	80076cc <lsm6dsl_write_reg>
 8007bf2:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3710      	adds	r7, #16
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}
	...

08007c00 <IKS01A2_ENV_SENSOR_Init>:
 *         - ENV_TEMPERATURE and/or ENV_HUMIDITY for instance 0
 *         - ENV_TEMPERATURE and/or ENV_PRESSURE for instance 1
 * @retval BSP status
 */
int32_t IKS01A2_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b08a      	sub	sp, #40	; 0x28
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
 8007c08:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t function = ENV_TEMPERATURE;
 8007c0e:	2301      	movs	r3, #1
 8007c10:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t component_functions = 0;
 8007c12:	2300      	movs	r3, #0
 8007c14:	61bb      	str	r3, [r7, #24]
  IKS01A2_ENV_SENSOR_Capabilities_t cap;

  switch (Instance)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d002      	beq.n	8007c22 <IKS01A2_ENV_SENSOR_Init+0x22>
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	d032      	beq.n	8007c86 <IKS01A2_ENV_SENSOR_Init+0x86>
 8007c20:	e063      	b.n	8007cea <IKS01A2_ENV_SENSOR_Init+0xea>
  {
#if (USE_IKS01A2_ENV_SENSOR_HTS221_0 == 1)
    case IKS01A2_HTS221_0:
      if (HTS221_0_Probe(Functions) != BSP_ERROR_NONE)
 8007c22:	6838      	ldr	r0, [r7, #0]
 8007c24:	f000 f932 	bl	8007e8c <HTS221_0_Probe>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d002      	beq.n	8007c34 <IKS01A2_ENV_SENSOR_Init+0x34>
      {
        return BSP_ERROR_NO_INIT;
 8007c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8007c32:	e098      	b.n	8007d66 <IKS01A2_ENV_SENSOR_Init+0x166>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8007c34:	4a4e      	ldr	r2, [pc, #312]	; (8007d70 <IKS01A2_ENV_SENSOR_Init+0x170>)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c3c:	68db      	ldr	r3, [r3, #12]
 8007c3e:	494d      	ldr	r1, [pc, #308]	; (8007d74 <IKS01A2_ENV_SENSOR_Init+0x174>)
 8007c40:	687a      	ldr	r2, [r7, #4]
 8007c42:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007c46:	f107 0108 	add.w	r1, r7, #8
 8007c4a:	4610      	mov	r0, r2
 8007c4c:	4798      	blx	r3
 8007c4e:	4603      	mov	r3, r0
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d002      	beq.n	8007c5a <IKS01A2_ENV_SENSOR_Init+0x5a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8007c54:	f06f 0306 	mvn.w	r3, #6
 8007c58:	e085      	b.n	8007d66 <IKS01A2_ENV_SENSOR_Init+0x166>
      }
      if (cap.Temperature == 1U)
 8007c5a:	7a3b      	ldrb	r3, [r7, #8]
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	d103      	bne.n	8007c68 <IKS01A2_ENV_SENSOR_Init+0x68>
      {
        component_functions |= ENV_TEMPERATURE;
 8007c60:	69bb      	ldr	r3, [r7, #24]
 8007c62:	f043 0301 	orr.w	r3, r3, #1
 8007c66:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 8007c68:	7abb      	ldrb	r3, [r7, #10]
 8007c6a:	2b01      	cmp	r3, #1
 8007c6c:	d103      	bne.n	8007c76 <IKS01A2_ENV_SENSOR_Init+0x76>
      {
        component_functions |= ENV_HUMIDITY;
 8007c6e:	69bb      	ldr	r3, [r7, #24]
 8007c70:	f043 0304 	orr.w	r3, r3, #4
 8007c74:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 8007c76:	7a7b      	ldrb	r3, [r7, #9]
 8007c78:	2b01      	cmp	r3, #1
 8007c7a:	d13a      	bne.n	8007cf2 <IKS01A2_ENV_SENSOR_Init+0xf2>
      {
        component_functions |= ENV_PRESSURE;
 8007c7c:	69bb      	ldr	r3, [r7, #24]
 8007c7e:	f043 0302 	orr.w	r3, r3, #2
 8007c82:	61bb      	str	r3, [r7, #24]
      }
      break;
 8007c84:	e035      	b.n	8007cf2 <IKS01A2_ENV_SENSOR_Init+0xf2>
#endif

#if (USE_IKS01A2_ENV_SENSOR_LPS22HB_0 == 1)
    case IKS01A2_LPS22HB_0:
      if (LPS22HB_0_Probe(Functions) != BSP_ERROR_NONE)
 8007c86:	6838      	ldr	r0, [r7, #0]
 8007c88:	f000 f9ba 	bl	8008000 <LPS22HB_0_Probe>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d002      	beq.n	8007c98 <IKS01A2_ENV_SENSOR_Init+0x98>
      {
        return BSP_ERROR_NO_INIT;
 8007c92:	f04f 33ff 	mov.w	r3, #4294967295
 8007c96:	e066      	b.n	8007d66 <IKS01A2_ENV_SENSOR_Init+0x166>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8007c98:	4a35      	ldr	r2, [pc, #212]	; (8007d70 <IKS01A2_ENV_SENSOR_Init+0x170>)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ca0:	68db      	ldr	r3, [r3, #12]
 8007ca2:	4934      	ldr	r1, [pc, #208]	; (8007d74 <IKS01A2_ENV_SENSOR_Init+0x174>)
 8007ca4:	687a      	ldr	r2, [r7, #4]
 8007ca6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007caa:	f107 0108 	add.w	r1, r7, #8
 8007cae:	4610      	mov	r0, r2
 8007cb0:	4798      	blx	r3
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d002      	beq.n	8007cbe <IKS01A2_ENV_SENSOR_Init+0xbe>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8007cb8:	f06f 0306 	mvn.w	r3, #6
 8007cbc:	e053      	b.n	8007d66 <IKS01A2_ENV_SENSOR_Init+0x166>
      }
      if (cap.Temperature == 1U)
 8007cbe:	7a3b      	ldrb	r3, [r7, #8]
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	d103      	bne.n	8007ccc <IKS01A2_ENV_SENSOR_Init+0xcc>
      {
        component_functions |= ENV_TEMPERATURE;
 8007cc4:	69bb      	ldr	r3, [r7, #24]
 8007cc6:	f043 0301 	orr.w	r3, r3, #1
 8007cca:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 8007ccc:	7abb      	ldrb	r3, [r7, #10]
 8007cce:	2b01      	cmp	r3, #1
 8007cd0:	d103      	bne.n	8007cda <IKS01A2_ENV_SENSOR_Init+0xda>
      {
        component_functions |= ENV_HUMIDITY;
 8007cd2:	69bb      	ldr	r3, [r7, #24]
 8007cd4:	f043 0304 	orr.w	r3, r3, #4
 8007cd8:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 8007cda:	7a7b      	ldrb	r3, [r7, #9]
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	d10a      	bne.n	8007cf6 <IKS01A2_ENV_SENSOR_Init+0xf6>
      {
        component_functions |= ENV_PRESSURE;
 8007ce0:	69bb      	ldr	r3, [r7, #24]
 8007ce2:	f043 0302 	orr.w	r3, r3, #2
 8007ce6:	61bb      	str	r3, [r7, #24]
      }
      break;
 8007ce8:	e005      	b.n	8007cf6 <IKS01A2_ENV_SENSOR_Init+0xf6>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8007cea:	f06f 0301 	mvn.w	r3, #1
 8007cee:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007cf0:	e002      	b.n	8007cf8 <IKS01A2_ENV_SENSOR_Init+0xf8>
      break;
 8007cf2:	bf00      	nop
 8007cf4:	e000      	b.n	8007cf8 <IKS01A2_ENV_SENSOR_Init+0xf8>
      break;
 8007cf6:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8007cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d001      	beq.n	8007d02 <IKS01A2_ENV_SENSOR_Init+0x102>
  {
    return ret;
 8007cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d00:	e031      	b.n	8007d66 <IKS01A2_ENV_SENSOR_Init+0x166>
  }

  for (i = 0; i < IKS01A2_ENV_FUNCTIONS_NBR; i++)
 8007d02:	2300      	movs	r3, #0
 8007d04:	61fb      	str	r3, [r7, #28]
 8007d06:	e02a      	b.n	8007d5e <IKS01A2_ENV_SENSOR_Init+0x15e>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8007d08:	683a      	ldr	r2, [r7, #0]
 8007d0a:	6a3b      	ldr	r3, [r7, #32]
 8007d0c:	4013      	ands	r3, r2
 8007d0e:	6a3a      	ldr	r2, [r7, #32]
 8007d10:	429a      	cmp	r2, r3
 8007d12:	d11e      	bne.n	8007d52 <IKS01A2_ENV_SENSOR_Init+0x152>
 8007d14:	69ba      	ldr	r2, [r7, #24]
 8007d16:	6a3b      	ldr	r3, [r7, #32]
 8007d18:	4013      	ands	r3, r2
 8007d1a:	6a3a      	ldr	r2, [r7, #32]
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	d118      	bne.n	8007d52 <IKS01A2_ENV_SENSOR_Init+0x152>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8007d20:	4a15      	ldr	r2, [pc, #84]	; (8007d78 <IKS01A2_ENV_SENSOR_Init+0x178>)
 8007d22:	6a3b      	ldr	r3, [r7, #32]
 8007d24:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007d28:	4814      	ldr	r0, [pc, #80]	; (8007d7c <IKS01A2_ENV_SENSOR_Init+0x17c>)
 8007d2a:	687a      	ldr	r2, [r7, #4]
 8007d2c:	4613      	mov	r3, r2
 8007d2e:	005b      	lsls	r3, r3, #1
 8007d30:	4413      	add	r3, r2
 8007d32:	440b      	add	r3, r1
 8007d34:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	490e      	ldr	r1, [pc, #56]	; (8007d74 <IKS01A2_ENV_SENSOR_Init+0x174>)
 8007d3c:	687a      	ldr	r2, [r7, #4]
 8007d3e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007d42:	4610      	mov	r0, r2
 8007d44:	4798      	blx	r3
 8007d46:	4603      	mov	r3, r0
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d002      	beq.n	8007d52 <IKS01A2_ENV_SENSOR_Init+0x152>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8007d4c:	f06f 0304 	mvn.w	r3, #4
 8007d50:	e009      	b.n	8007d66 <IKS01A2_ENV_SENSOR_Init+0x166>
      }
    }
    function = function << 1;
 8007d52:	6a3b      	ldr	r3, [r7, #32]
 8007d54:	005b      	lsls	r3, r3, #1
 8007d56:	623b      	str	r3, [r7, #32]
  for (i = 0; i < IKS01A2_ENV_FUNCTIONS_NBR; i++)
 8007d58:	69fb      	ldr	r3, [r7, #28]
 8007d5a:	3301      	adds	r3, #1
 8007d5c:	61fb      	str	r3, [r7, #28]
 8007d5e:	69fb      	ldr	r3, [r7, #28]
 8007d60:	2b02      	cmp	r3, #2
 8007d62:	d9d1      	bls.n	8007d08 <IKS01A2_ENV_SENSOR_Init+0x108>
  }

  return ret;
 8007d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3728      	adds	r7, #40	; 0x28
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}
 8007d6e:	bf00      	nop
 8007d70:	20002314 	.word	0x20002314
 8007d74:	200029e0 	.word	0x200029e0
 8007d78:	200012f8 	.word	0x200012f8
 8007d7c:	200022fc 	.word	0x200022fc

08007d80 <IKS01A2_ENV_SENSOR_Enable>:
 *         - ENV_TEMPERATURE or ENV_HUMIDITY for instance 0
 *         - ENV_TEMPERATURE or ENV_PRESSURE for instance 1
 * @retval BSP status
 */
int32_t IKS01A2_ENV_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b084      	sub	sp, #16
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A2_ENV_INSTANCES_NBR)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	d903      	bls.n	8007d98 <IKS01A2_ENV_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8007d90:	f06f 0301 	mvn.w	r3, #1
 8007d94:	60fb      	str	r3, [r7, #12]
 8007d96:	e028      	b.n	8007dea <IKS01A2_ENV_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 8007d98:	4a16      	ldr	r2, [pc, #88]	; (8007df4 <IKS01A2_ENV_SENSOR_Enable+0x74>)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	4013      	ands	r3, r2
 8007da4:	683a      	ldr	r2, [r7, #0]
 8007da6:	429a      	cmp	r2, r3
 8007da8:	d11c      	bne.n	8007de4 <IKS01A2_ENV_SENSOR_Enable+0x64>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8007daa:	4a13      	ldr	r2, [pc, #76]	; (8007df8 <IKS01A2_ENV_SENSOR_Enable+0x78>)
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007db2:	4812      	ldr	r0, [pc, #72]	; (8007dfc <IKS01A2_ENV_SENSOR_Enable+0x7c>)
 8007db4:	687a      	ldr	r2, [r7, #4]
 8007db6:	4613      	mov	r3, r2
 8007db8:	005b      	lsls	r3, r3, #1
 8007dba:	4413      	add	r3, r2
 8007dbc:	440b      	add	r3, r1
 8007dbe:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	490e      	ldr	r1, [pc, #56]	; (8007e00 <IKS01A2_ENV_SENSOR_Enable+0x80>)
 8007dc6:	687a      	ldr	r2, [r7, #4]
 8007dc8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007dcc:	4610      	mov	r0, r2
 8007dce:	4798      	blx	r3
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d003      	beq.n	8007dde <IKS01A2_ENV_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007dd6:	f06f 0304 	mvn.w	r3, #4
 8007dda:	60fb      	str	r3, [r7, #12]
 8007ddc:	e005      	b.n	8007dea <IKS01A2_ENV_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8007dde:	2300      	movs	r3, #0
 8007de0:	60fb      	str	r3, [r7, #12]
 8007de2:	e002      	b.n	8007dea <IKS01A2_ENV_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8007de4:	f06f 0301 	mvn.w	r3, #1
 8007de8:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8007dea:	68fb      	ldr	r3, [r7, #12]
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	3710      	adds	r7, #16
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}
 8007df4:	2000231c 	.word	0x2000231c
 8007df8:	200012f8 	.word	0x200012f8
 8007dfc:	200022fc 	.word	0x200022fc
 8007e00:	200029e0 	.word	0x200029e0

08007e04 <IKS01A2_ENV_SENSOR_GetValue>:
 *         - ENV_TEMPERATURE or ENV_PRESSURE for instance 1
 * @param  Value pointer to environmental sensor value
 * @retval BSP status
 */
int32_t IKS01A2_ENV_SENSOR_GetValue(uint32_t Instance, uint32_t Function, float *Value)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b086      	sub	sp, #24
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	60f8      	str	r0, [r7, #12]
 8007e0c:	60b9      	str	r1, [r7, #8]
 8007e0e:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_ENV_INSTANCES_NBR)
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	2b01      	cmp	r3, #1
 8007e14:	d903      	bls.n	8007e1e <IKS01A2_ENV_SENSOR_GetValue+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8007e16:	f06f 0301 	mvn.w	r3, #1
 8007e1a:	617b      	str	r3, [r7, #20]
 8007e1c:	e029      	b.n	8007e72 <IKS01A2_ENV_SENSOR_GetValue+0x6e>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 8007e1e:	4a17      	ldr	r2, [pc, #92]	; (8007e7c <IKS01A2_ENV_SENSOR_GetValue+0x78>)
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	4013      	ands	r3, r2
 8007e2a:	68ba      	ldr	r2, [r7, #8]
 8007e2c:	429a      	cmp	r2, r3
 8007e2e:	d11d      	bne.n	8007e6c <IKS01A2_ENV_SENSOR_GetValue+0x68>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetValue(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 8007e30:	4a13      	ldr	r2, [pc, #76]	; (8007e80 <IKS01A2_ENV_SENSOR_GetValue+0x7c>)
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007e38:	4812      	ldr	r0, [pc, #72]	; (8007e84 <IKS01A2_ENV_SENSOR_GetValue+0x80>)
 8007e3a:	68fa      	ldr	r2, [r7, #12]
 8007e3c:	4613      	mov	r3, r2
 8007e3e:	005b      	lsls	r3, r3, #1
 8007e40:	4413      	add	r3, r2
 8007e42:	440b      	add	r3, r1
 8007e44:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8007e48:	691b      	ldr	r3, [r3, #16]
 8007e4a:	490f      	ldr	r1, [pc, #60]	; (8007e88 <IKS01A2_ENV_SENSOR_GetValue+0x84>)
 8007e4c:	68fa      	ldr	r2, [r7, #12]
 8007e4e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007e52:	6879      	ldr	r1, [r7, #4]
 8007e54:	4610      	mov	r0, r2
 8007e56:	4798      	blx	r3
 8007e58:	4603      	mov	r3, r0
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d003      	beq.n	8007e66 <IKS01A2_ENV_SENSOR_GetValue+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007e5e:	f06f 0304 	mvn.w	r3, #4
 8007e62:	617b      	str	r3, [r7, #20]
 8007e64:	e005      	b.n	8007e72 <IKS01A2_ENV_SENSOR_GetValue+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8007e66:	2300      	movs	r3, #0
 8007e68:	617b      	str	r3, [r7, #20]
 8007e6a:	e002      	b.n	8007e72 <IKS01A2_ENV_SENSOR_GetValue+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8007e6c:	f06f 0301 	mvn.w	r3, #1
 8007e70:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8007e72:	697b      	ldr	r3, [r7, #20]
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3718      	adds	r7, #24
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}
 8007e7c:	2000231c 	.word	0x2000231c
 8007e80:	200012f8 	.word	0x200012f8
 8007e84:	200022fc 	.word	0x200022fc
 8007e88:	200029e0 	.word	0x200029e0

08007e8c <HTS221_0_Probe>:
 * @param  Functions Environmental sensor functions. Could be :
 *         - ENV_TEMPERATURE and/or ENV_HUMIDITY
 * @retval BSP status
 */
static int32_t HTS221_0_Probe(uint32_t Functions)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b090      	sub	sp, #64	; 0x40
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  HTS221_IO_t            io_ctx;
  uint8_t                id;
  int32_t                ret = BSP_ERROR_NONE;
 8007e94:	2300      	movs	r3, #0
 8007e96:	63fb      	str	r3, [r7, #60]	; 0x3c
  static HTS221_Object_t hts221_obj_0;
  HTS221_Capabilities_t  cap;

  /* Configure the environmental sensor driver */
  io_ctx.BusType     = HTS221_I2C_BUS; /* I2C */
 8007e98:	2300      	movs	r3, #0
 8007e9a:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.Address     = HTS221_I2C_ADDRESS;
 8007e9c:	23bf      	movs	r3, #191	; 0xbf
 8007e9e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  io_ctx.Init        = IKS01A2_I2C_Init;
 8007ea2:	4b49      	ldr	r3, [pc, #292]	; (8007fc8 <HTS221_0_Probe+0x13c>)
 8007ea4:	623b      	str	r3, [r7, #32]
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8007ea6:	4b49      	ldr	r3, [pc, #292]	; (8007fcc <HTS221_0_Probe+0x140>)
 8007ea8:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8007eaa:	4b49      	ldr	r3, [pc, #292]	; (8007fd0 <HTS221_0_Probe+0x144>)
 8007eac:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8007eae:	4b49      	ldr	r3, [pc, #292]	; (8007fd4 <HTS221_0_Probe+0x148>)
 8007eb0:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.GetTick     = IKS01A2_GetTick;
 8007eb2:	4b49      	ldr	r3, [pc, #292]	; (8007fd8 <HTS221_0_Probe+0x14c>)
 8007eb4:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 8007eb6:	f107 0320 	add.w	r3, r7, #32
 8007eba:	4619      	mov	r1, r3
 8007ebc:	4847      	ldr	r0, [pc, #284]	; (8007fdc <HTS221_0_Probe+0x150>)
 8007ebe:	f7fb fd65 	bl	800398c <HTS221_RegisterBusIO>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d003      	beq.n	8007ed0 <HTS221_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007ec8:	f06f 0306 	mvn.w	r3, #6
 8007ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ece:	e076      	b.n	8007fbe <HTS221_0_Probe+0x132>
  }
  else if (HTS221_ReadID(&hts221_obj_0, &id) != HTS221_OK)
 8007ed0:	f107 031f 	add.w	r3, r7, #31
 8007ed4:	4619      	mov	r1, r3
 8007ed6:	4841      	ldr	r0, [pc, #260]	; (8007fdc <HTS221_0_Probe+0x150>)
 8007ed8:	f7fb fddd 	bl	8003a96 <HTS221_ReadID>
 8007edc:	4603      	mov	r3, r0
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d003      	beq.n	8007eea <HTS221_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007ee2:	f06f 0306 	mvn.w	r3, #6
 8007ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ee8:	e069      	b.n	8007fbe <HTS221_0_Probe+0x132>
  }
  else if (id != HTS221_ID)
 8007eea:	7ffb      	ldrb	r3, [r7, #31]
 8007eec:	2bbc      	cmp	r3, #188	; 0xbc
 8007eee:	d003      	beq.n	8007ef8 <HTS221_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007ef0:	f06f 0306 	mvn.w	r3, #6
 8007ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ef6:	e062      	b.n	8007fbe <HTS221_0_Probe+0x132>
  }
  else
  {
    (void)HTS221_GetCapabilities(&hts221_obj_0, &cap);
 8007ef8:	f107 030c 	add.w	r3, r7, #12
 8007efc:	4619      	mov	r1, r3
 8007efe:	4837      	ldr	r0, [pc, #220]	; (8007fdc <HTS221_0_Probe+0x150>)
 8007f00:	f7fb fde0 	bl	8003ac4 <HTS221_GetCapabilities>
    EnvCtx[IKS01A2_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8007f04:	7b3b      	ldrb	r3, [r7, #12]
 8007f06:	461a      	mov	r2, r3
 8007f08:	7b7b      	ldrb	r3, [r7, #13]
 8007f0a:	005b      	lsls	r3, r3, #1
 8007f0c:	431a      	orrs	r2, r3
                                           uint32_t)cap.Humidity << 2);
 8007f0e:	7bbb      	ldrb	r3, [r7, #14]
 8007f10:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A2_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8007f12:	4313      	orrs	r3, r2
 8007f14:	4a32      	ldr	r2, [pc, #200]	; (8007fe0 <HTS221_0_Probe+0x154>)
 8007f16:	6013      	str	r3, [r2, #0]

    EnvCompObj[IKS01A2_HTS221_0] = &hts221_obj_0;
 8007f18:	4b32      	ldr	r3, [pc, #200]	; (8007fe4 <HTS221_0_Probe+0x158>)
 8007f1a:	4a30      	ldr	r2, [pc, #192]	; (8007fdc <HTS221_0_Probe+0x150>)
 8007f1c:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A2_HTS221_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&HTS221_COMMON_Driver;
 8007f1e:	4b32      	ldr	r3, [pc, #200]	; (8007fe8 <HTS221_0_Probe+0x15c>)
 8007f20:	4a32      	ldr	r2, [pc, #200]	; (8007fec <HTS221_0_Probe+0x160>)
 8007f22:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8007f24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d11d      	bne.n	8007f66 <HTS221_0_Probe+0xda>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f003 0301 	and.w	r3, r3, #1
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d018      	beq.n	8007f66 <HTS221_0_Probe+0xda>
 8007f34:	7b3b      	ldrb	r3, [r7, #12]
 8007f36:	2b01      	cmp	r3, #1
 8007f38:	d115      	bne.n	8007f66 <HTS221_0_Probe+0xda>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_HTS221_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_TEMP_Driver;
 8007f3a:	4b2d      	ldr	r3, [pc, #180]	; (8007ff0 <HTS221_0_Probe+0x164>)
 8007f3c:	685b      	ldr	r3, [r3, #4]
 8007f3e:	4a2d      	ldr	r2, [pc, #180]	; (8007ff4 <HTS221_0_Probe+0x168>)
 8007f40:	492d      	ldr	r1, [pc, #180]	; (8007ff8 <HTS221_0_Probe+0x16c>)
 8007f42:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_HTS221_0]->Init(EnvCompObj[IKS01A2_HTS221_0]) != HTS221_OK)
 8007f46:	4b28      	ldr	r3, [pc, #160]	; (8007fe8 <HTS221_0_Probe+0x15c>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4a25      	ldr	r2, [pc, #148]	; (8007fe4 <HTS221_0_Probe+0x158>)
 8007f4e:	6812      	ldr	r2, [r2, #0]
 8007f50:	4610      	mov	r0, r2
 8007f52:	4798      	blx	r3
 8007f54:	4603      	mov	r3, r0
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d003      	beq.n	8007f62 <HTS221_0_Probe+0xd6>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007f5a:	f06f 0304 	mvn.w	r3, #4
 8007f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f60:	e001      	b.n	8007f66 <HTS221_0_Probe+0xda>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8007f62:	2300      	movs	r3, #0
 8007f64:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 8007f66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d11d      	bne.n	8007fa8 <HTS221_0_Probe+0x11c>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f003 0304 	and.w	r3, r3, #4
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d018      	beq.n	8007fa8 <HTS221_0_Probe+0x11c>
 8007f76:	7bbb      	ldrb	r3, [r7, #14]
 8007f78:	2b01      	cmp	r3, #1
 8007f7a:	d115      	bne.n	8007fa8 <HTS221_0_Probe+0x11c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_HTS221_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_HUM_Driver;
 8007f7c:	4b1c      	ldr	r3, [pc, #112]	; (8007ff0 <HTS221_0_Probe+0x164>)
 8007f7e:	691b      	ldr	r3, [r3, #16]
 8007f80:	4a1c      	ldr	r2, [pc, #112]	; (8007ff4 <HTS221_0_Probe+0x168>)
 8007f82:	491e      	ldr	r1, [pc, #120]	; (8007ffc <HTS221_0_Probe+0x170>)
 8007f84:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_HTS221_0]->Init(EnvCompObj[IKS01A2_HTS221_0]) != HTS221_OK)
 8007f88:	4b17      	ldr	r3, [pc, #92]	; (8007fe8 <HTS221_0_Probe+0x15c>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4a15      	ldr	r2, [pc, #84]	; (8007fe4 <HTS221_0_Probe+0x158>)
 8007f90:	6812      	ldr	r2, [r2, #0]
 8007f92:	4610      	mov	r0, r2
 8007f94:	4798      	blx	r3
 8007f96:	4603      	mov	r3, r0
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d003      	beq.n	8007fa4 <HTS221_0_Probe+0x118>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007f9c:	f06f 0304 	mvn.w	r3, #4
 8007fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fa2:	e001      	b.n	8007fa8 <HTS221_0_Probe+0x11c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 8007fa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d107      	bne.n	8007fbe <HTS221_0_Probe+0x132>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f003 0302 	and.w	r3, r3, #2
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d002      	beq.n	8007fbe <HTS221_0_Probe+0x132>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8007fb8:	f06f 0304 	mvn.w	r3, #4
 8007fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }

  return ret;
 8007fbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3740      	adds	r7, #64	; 0x40
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}
 8007fc8:	08003419 	.word	0x08003419
 8007fcc:	0800347d 	.word	0x0800347d
 8007fd0:	08003531 	.word	0x08003531
 8007fd4:	080034cd 	.word	0x080034cd
 8007fd8:	08003595 	.word	0x08003595
 8007fdc:	20002324 	.word	0x20002324
 8007fe0:	2000231c 	.word	0x2000231c
 8007fe4:	200029e0 	.word	0x200029e0
 8007fe8:	20002314 	.word	0x20002314
 8007fec:	200011c8 	.word	0x200011c8
 8007ff0:	200012f8 	.word	0x200012f8
 8007ff4:	200022fc 	.word	0x200022fc
 8007ff8:	200011ec 	.word	0x200011ec
 8007ffc:	200011d8 	.word	0x200011d8

08008000 <LPS22HB_0_Probe>:
 * @param  Functions Environmental sensor functions. Could be :
 *         - ENV_TEMPERATURE and/or ENV_PRESSURE
 * @retval BSP status
 */
static int32_t LPS22HB_0_Probe(uint32_t Functions)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b090      	sub	sp, #64	; 0x40
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  LPS22HB_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 8008008:	2300      	movs	r3, #0
 800800a:	63fb      	str	r3, [r7, #60]	; 0x3c
  static LPS22HB_Object_t lps22hb_obj_0;
  LPS22HB_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = LPS22HB_I2C_BUS; /* I2C */
 800800c:	2300      	movs	r3, #0
 800800e:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.Address     = LPS22HB_I2C_ADD_H;
 8008010:	23bb      	movs	r3, #187	; 0xbb
 8008012:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  io_ctx.Init        = IKS01A2_I2C_Init;
 8008016:	4b4a      	ldr	r3, [pc, #296]	; (8008140 <LPS22HB_0_Probe+0x140>)
 8008018:	623b      	str	r3, [r7, #32]
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 800801a:	4b4a      	ldr	r3, [pc, #296]	; (8008144 <LPS22HB_0_Probe+0x144>)
 800801c:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 800801e:	4b4a      	ldr	r3, [pc, #296]	; (8008148 <LPS22HB_0_Probe+0x148>)
 8008020:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8008022:	4b4a      	ldr	r3, [pc, #296]	; (800814c <LPS22HB_0_Probe+0x14c>)
 8008024:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.GetTick     = IKS01A2_GetTick;
 8008026:	4b4a      	ldr	r3, [pc, #296]	; (8008150 <LPS22HB_0_Probe+0x150>)
 8008028:	63bb      	str	r3, [r7, #56]	; 0x38

  if (LPS22HB_RegisterBusIO(&lps22hb_obj_0, &io_ctx) != LPS22HB_OK)
 800802a:	f107 0320 	add.w	r3, r7, #32
 800802e:	4619      	mov	r1, r3
 8008030:	4848      	ldr	r0, [pc, #288]	; (8008154 <LPS22HB_0_Probe+0x154>)
 8008032:	f7fc fa6b 	bl	800450c <LPS22HB_RegisterBusIO>
 8008036:	4603      	mov	r3, r0
 8008038:	2b00      	cmp	r3, #0
 800803a:	d003      	beq.n	8008044 <LPS22HB_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800803c:	f06f 0306 	mvn.w	r3, #6
 8008040:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008042:	e078      	b.n	8008136 <LPS22HB_0_Probe+0x136>
  }
  else if (LPS22HB_ReadID(&lps22hb_obj_0, &id) != LPS22HB_OK)
 8008044:	f107 031f 	add.w	r3, r7, #31
 8008048:	4619      	mov	r1, r3
 800804a:	4842      	ldr	r0, [pc, #264]	; (8008154 <LPS22HB_0_Probe+0x154>)
 800804c:	f7fc fb03 	bl	8004656 <LPS22HB_ReadID>
 8008050:	4603      	mov	r3, r0
 8008052:	2b00      	cmp	r3, #0
 8008054:	d003      	beq.n	800805e <LPS22HB_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008056:	f06f 0306 	mvn.w	r3, #6
 800805a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800805c:	e06b      	b.n	8008136 <LPS22HB_0_Probe+0x136>
  }
  else if (id != LPS22HB_ID)
 800805e:	7ffb      	ldrb	r3, [r7, #31]
 8008060:	2bb1      	cmp	r3, #177	; 0xb1
 8008062:	d003      	beq.n	800806c <LPS22HB_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008064:	f06f 0306 	mvn.w	r3, #6
 8008068:	63fb      	str	r3, [r7, #60]	; 0x3c
 800806a:	e064      	b.n	8008136 <LPS22HB_0_Probe+0x136>
  }
  else
  {
    (void)LPS22HB_GetCapabilities(&lps22hb_obj_0, &cap);
 800806c:	f107 030c 	add.w	r3, r7, #12
 8008070:	4619      	mov	r1, r3
 8008072:	4838      	ldr	r0, [pc, #224]	; (8008154 <LPS22HB_0_Probe+0x154>)
 8008074:	f7fc fb06 	bl	8004684 <LPS22HB_GetCapabilities>

    EnvCtx[IKS01A2_LPS22HB_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8008078:	7b3b      	ldrb	r3, [r7, #12]
 800807a:	461a      	mov	r2, r3
 800807c:	7b7b      	ldrb	r3, [r7, #13]
 800807e:	005b      	lsls	r3, r3, #1
 8008080:	431a      	orrs	r2, r3
                                            uint32_t)cap.Humidity << 2);
 8008082:	7bbb      	ldrb	r3, [r7, #14]
 8008084:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A2_LPS22HB_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8008086:	4313      	orrs	r3, r2
 8008088:	4a33      	ldr	r2, [pc, #204]	; (8008158 <LPS22HB_0_Probe+0x158>)
 800808a:	6053      	str	r3, [r2, #4]

    EnvCompObj[IKS01A2_LPS22HB_0] = &lps22hb_obj_0;
 800808c:	4b33      	ldr	r3, [pc, #204]	; (800815c <LPS22HB_0_Probe+0x15c>)
 800808e:	4a31      	ldr	r2, [pc, #196]	; (8008154 <LPS22HB_0_Probe+0x154>)
 8008090:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A2_LPS22HB_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HB_COMMON_Driver;
 8008092:	4b33      	ldr	r3, [pc, #204]	; (8008160 <LPS22HB_0_Probe+0x160>)
 8008094:	4a33      	ldr	r2, [pc, #204]	; (8008164 <LPS22HB_0_Probe+0x164>)
 8008096:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8008098:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800809a:	2b00      	cmp	r3, #0
 800809c:	d11e      	bne.n	80080dc <LPS22HB_0_Probe+0xdc>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f003 0301 	and.w	r3, r3, #1
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d019      	beq.n	80080dc <LPS22HB_0_Probe+0xdc>
 80080a8:	7b3b      	ldrb	r3, [r7, #12]
 80080aa:	2b01      	cmp	r3, #1
 80080ac:	d116      	bne.n	80080dc <LPS22HB_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_LPS22HB_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HB_TEMP_Driver;
 80080ae:	4b2e      	ldr	r3, [pc, #184]	; (8008168 <LPS22HB_0_Probe+0x168>)
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	4a2e      	ldr	r2, [pc, #184]	; (800816c <LPS22HB_0_Probe+0x16c>)
 80080b4:	3303      	adds	r3, #3
 80080b6:	492e      	ldr	r1, [pc, #184]	; (8008170 <LPS22HB_0_Probe+0x170>)
 80080b8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_LPS22HB_0]->Init(EnvCompObj[IKS01A2_LPS22HB_0]) != LPS22HB_OK)
 80080bc:	4b28      	ldr	r3, [pc, #160]	; (8008160 <LPS22HB_0_Probe+0x160>)
 80080be:	685b      	ldr	r3, [r3, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	4a26      	ldr	r2, [pc, #152]	; (800815c <LPS22HB_0_Probe+0x15c>)
 80080c4:	6852      	ldr	r2, [r2, #4]
 80080c6:	4610      	mov	r0, r2
 80080c8:	4798      	blx	r3
 80080ca:	4603      	mov	r3, r0
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d003      	beq.n	80080d8 <LPS22HB_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80080d0:	f06f 0304 	mvn.w	r3, #4
 80080d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080d6:	e001      	b.n	80080dc <LPS22HB_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80080d8:	2300      	movs	r3, #0
 80080da:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 80080dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d11e      	bne.n	8008120 <LPS22HB_0_Probe+0x120>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f003 0302 	and.w	r3, r3, #2
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d019      	beq.n	8008120 <LPS22HB_0_Probe+0x120>
 80080ec:	7b7b      	ldrb	r3, [r7, #13]
 80080ee:	2b01      	cmp	r3, #1
 80080f0:	d116      	bne.n	8008120 <LPS22HB_0_Probe+0x120>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_LPS22HB_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HB_PRESS_Driver;
 80080f2:	4b1d      	ldr	r3, [pc, #116]	; (8008168 <LPS22HB_0_Probe+0x168>)
 80080f4:	689b      	ldr	r3, [r3, #8]
 80080f6:	4a1d      	ldr	r2, [pc, #116]	; (800816c <LPS22HB_0_Probe+0x16c>)
 80080f8:	3303      	adds	r3, #3
 80080fa:	491e      	ldr	r1, [pc, #120]	; (8008174 <LPS22HB_0_Probe+0x174>)
 80080fc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_LPS22HB_0]->Init(EnvCompObj[IKS01A2_LPS22HB_0]) != LPS22HB_OK)
 8008100:	4b17      	ldr	r3, [pc, #92]	; (8008160 <LPS22HB_0_Probe+0x160>)
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4a15      	ldr	r2, [pc, #84]	; (800815c <LPS22HB_0_Probe+0x15c>)
 8008108:	6852      	ldr	r2, [r2, #4]
 800810a:	4610      	mov	r0, r2
 800810c:	4798      	blx	r3
 800810e:	4603      	mov	r3, r0
 8008110:	2b00      	cmp	r3, #0
 8008112:	d003      	beq.n	800811c <LPS22HB_0_Probe+0x11c>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008114:	f06f 0304 	mvn.w	r3, #4
 8008118:	63fb      	str	r3, [r7, #60]	; 0x3c
 800811a:	e001      	b.n	8008120 <LPS22HB_0_Probe+0x120>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800811c:	2300      	movs	r3, #0
 800811e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 8008120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008122:	2b00      	cmp	r3, #0
 8008124:	d107      	bne.n	8008136 <LPS22HB_0_Probe+0x136>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f003 0304 	and.w	r3, r3, #4
 800812c:	2b00      	cmp	r3, #0
 800812e:	d002      	beq.n	8008136 <LPS22HB_0_Probe+0x136>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008130:	f06f 0304 	mvn.w	r3, #4
 8008134:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }
  return ret;
 8008136:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008138:	4618      	mov	r0, r3
 800813a:	3740      	adds	r7, #64	; 0x40
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}
 8008140:	08003419 	.word	0x08003419
 8008144:	0800347d 	.word	0x0800347d
 8008148:	08003531 	.word	0x08003531
 800814c:	080034cd 	.word	0x080034cd
 8008150:	08003595 	.word	0x08003595
 8008154:	20002350 	.word	0x20002350
 8008158:	2000231c 	.word	0x2000231c
 800815c:	200029e0 	.word	0x200029e0
 8008160:	20002314 	.word	0x20002314
 8008164:	20001200 	.word	0x20001200
 8008168:	200012f8 	.word	0x200012f8
 800816c:	200022fc 	.word	0x200022fc
 8008170:	20001224 	.word	0x20001224
 8008174:	20001210 	.word	0x20001210

08008178 <IKS01A2_MOTION_SENSOR_Init>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b08e      	sub	sp, #56	; 0x38
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8008182:	2300      	movs	r3, #0
 8008184:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 8008186:	2301      	movs	r3, #1
 8008188:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 800818a:	2300      	movs	r3, #0
 800818c:	62bb      	str	r3, [r7, #40]	; 0x28
  IKS01A2_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2b01      	cmp	r3, #1
 8008192:	d036      	beq.n	8008202 <IKS01A2_MOTION_SENSOR_Init+0x8a>
 8008194:	2b01      	cmp	r3, #1
 8008196:	d302      	bcc.n	800819e <IKS01A2_MOTION_SENSOR_Init+0x26>
 8008198:	2b02      	cmp	r3, #2
 800819a:	d064      	beq.n	8008266 <IKS01A2_MOTION_SENSOR_Init+0xee>
 800819c:	e095      	b.n	80082ca <IKS01A2_MOTION_SENSOR_Init+0x152>
  {
#if (USE_IKS01A2_MOTION_SENSOR_LSM6DSL_0 == 1)
    case IKS01A2_LSM6DSL_0:
      if (LSM6DSL_0_Probe(Functions) != BSP_ERROR_NONE)
 800819e:	6838      	ldr	r0, [r7, #0]
 80081a0:	f000 f966 	bl	8008470 <LSM6DSL_0_Probe>
 80081a4:	4603      	mov	r3, r0
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d002      	beq.n	80081b0 <IKS01A2_MOTION_SENSOR_Init+0x38>
      {
        return BSP_ERROR_NO_INIT;
 80081aa:	f04f 33ff 	mov.w	r3, #4294967295
 80081ae:	e0cc      	b.n	800834a <IKS01A2_MOTION_SENSOR_Init+0x1d2>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80081b0:	4a68      	ldr	r2, [pc, #416]	; (8008354 <IKS01A2_MOTION_SENSOR_Init+0x1dc>)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081b8:	68db      	ldr	r3, [r3, #12]
 80081ba:	4967      	ldr	r1, [pc, #412]	; (8008358 <IKS01A2_MOTION_SENSOR_Init+0x1e0>)
 80081bc:	687a      	ldr	r2, [r7, #4]
 80081be:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80081c2:	f107 010c 	add.w	r1, r7, #12
 80081c6:	4610      	mov	r0, r2
 80081c8:	4798      	blx	r3
 80081ca:	4603      	mov	r3, r0
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d002      	beq.n	80081d6 <IKS01A2_MOTION_SENSOR_Init+0x5e>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80081d0:	f06f 0306 	mvn.w	r3, #6
 80081d4:	e0b9      	b.n	800834a <IKS01A2_MOTION_SENSOR_Init+0x1d2>
      }
      if (cap.Acc == 1U)
 80081d6:	7b3b      	ldrb	r3, [r7, #12]
 80081d8:	2b01      	cmp	r3, #1
 80081da:	d103      	bne.n	80081e4 <IKS01A2_MOTION_SENSOR_Init+0x6c>
      {
        component_functions |= MOTION_ACCELERO;
 80081dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081de:	f043 0302 	orr.w	r3, r3, #2
 80081e2:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 80081e4:	7b7b      	ldrb	r3, [r7, #13]
 80081e6:	2b01      	cmp	r3, #1
 80081e8:	d103      	bne.n	80081f2 <IKS01A2_MOTION_SENSOR_Init+0x7a>
      {
        component_functions |= MOTION_GYRO;
 80081ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ec:	f043 0301 	orr.w	r3, r3, #1
 80081f0:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 80081f2:	7bbb      	ldrb	r3, [r7, #14]
 80081f4:	2b01      	cmp	r3, #1
 80081f6:	d16c      	bne.n	80082d2 <IKS01A2_MOTION_SENSOR_Init+0x15a>
      {
        component_functions |= MOTION_MAGNETO;
 80081f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081fa:	f043 0304 	orr.w	r3, r3, #4
 80081fe:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8008200:	e067      	b.n	80082d2 <IKS01A2_MOTION_SENSOR_Init+0x15a>
#endif

#if (USE_IKS01A2_MOTION_SENSOR_LSM303AGR_ACC_0 == 1)
    case IKS01A2_LSM303AGR_ACC_0:
      if (LSM303AGR_ACC_0_Probe(Functions) != BSP_ERROR_NONE)
 8008202:	6838      	ldr	r0, [r7, #0]
 8008204:	f000 f9f0 	bl	80085e8 <LSM303AGR_ACC_0_Probe>
 8008208:	4603      	mov	r3, r0
 800820a:	2b00      	cmp	r3, #0
 800820c:	d002      	beq.n	8008214 <IKS01A2_MOTION_SENSOR_Init+0x9c>
      {
        return BSP_ERROR_NO_INIT;
 800820e:	f04f 33ff 	mov.w	r3, #4294967295
 8008212:	e09a      	b.n	800834a <IKS01A2_MOTION_SENSOR_Init+0x1d2>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8008214:	4a4f      	ldr	r2, [pc, #316]	; (8008354 <IKS01A2_MOTION_SENSOR_Init+0x1dc>)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800821c:	68db      	ldr	r3, [r3, #12]
 800821e:	494e      	ldr	r1, [pc, #312]	; (8008358 <IKS01A2_MOTION_SENSOR_Init+0x1e0>)
 8008220:	687a      	ldr	r2, [r7, #4]
 8008222:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008226:	f107 010c 	add.w	r1, r7, #12
 800822a:	4610      	mov	r0, r2
 800822c:	4798      	blx	r3
 800822e:	4603      	mov	r3, r0
 8008230:	2b00      	cmp	r3, #0
 8008232:	d002      	beq.n	800823a <IKS01A2_MOTION_SENSOR_Init+0xc2>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8008234:	f06f 0306 	mvn.w	r3, #6
 8008238:	e087      	b.n	800834a <IKS01A2_MOTION_SENSOR_Init+0x1d2>
      }
      if (cap.Acc == 1U)
 800823a:	7b3b      	ldrb	r3, [r7, #12]
 800823c:	2b01      	cmp	r3, #1
 800823e:	d103      	bne.n	8008248 <IKS01A2_MOTION_SENSOR_Init+0xd0>
      {
        component_functions |= MOTION_ACCELERO;
 8008240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008242:	f043 0302 	orr.w	r3, r3, #2
 8008246:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8008248:	7b7b      	ldrb	r3, [r7, #13]
 800824a:	2b01      	cmp	r3, #1
 800824c:	d103      	bne.n	8008256 <IKS01A2_MOTION_SENSOR_Init+0xde>
      {
        component_functions |= MOTION_GYRO;
 800824e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008250:	f043 0301 	orr.w	r3, r3, #1
 8008254:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8008256:	7bbb      	ldrb	r3, [r7, #14]
 8008258:	2b01      	cmp	r3, #1
 800825a:	d13c      	bne.n	80082d6 <IKS01A2_MOTION_SENSOR_Init+0x15e>
      {
        component_functions |= MOTION_MAGNETO;
 800825c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800825e:	f043 0304 	orr.w	r3, r3, #4
 8008262:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8008264:	e037      	b.n	80082d6 <IKS01A2_MOTION_SENSOR_Init+0x15e>
#endif

#if (USE_IKS01A2_MOTION_SENSOR_LSM303AGR_MAG_0 == 1)
    case IKS01A2_LSM303AGR_MAG_0:
      if (LSM303AGR_MAG_0_Probe(Functions) != BSP_ERROR_NONE)
 8008266:	6838      	ldr	r0, [r7, #0]
 8008268:	f000 fa62 	bl	8008730 <LSM303AGR_MAG_0_Probe>
 800826c:	4603      	mov	r3, r0
 800826e:	2b00      	cmp	r3, #0
 8008270:	d002      	beq.n	8008278 <IKS01A2_MOTION_SENSOR_Init+0x100>
      {
        return BSP_ERROR_NO_INIT;
 8008272:	f04f 33ff 	mov.w	r3, #4294967295
 8008276:	e068      	b.n	800834a <IKS01A2_MOTION_SENSOR_Init+0x1d2>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8008278:	4a36      	ldr	r2, [pc, #216]	; (8008354 <IKS01A2_MOTION_SENSOR_Init+0x1dc>)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008280:	68db      	ldr	r3, [r3, #12]
 8008282:	4935      	ldr	r1, [pc, #212]	; (8008358 <IKS01A2_MOTION_SENSOR_Init+0x1e0>)
 8008284:	687a      	ldr	r2, [r7, #4]
 8008286:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800828a:	f107 010c 	add.w	r1, r7, #12
 800828e:	4610      	mov	r0, r2
 8008290:	4798      	blx	r3
 8008292:	4603      	mov	r3, r0
 8008294:	2b00      	cmp	r3, #0
 8008296:	d002      	beq.n	800829e <IKS01A2_MOTION_SENSOR_Init+0x126>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8008298:	f06f 0306 	mvn.w	r3, #6
 800829c:	e055      	b.n	800834a <IKS01A2_MOTION_SENSOR_Init+0x1d2>
      }
      if (cap.Acc == 1U)
 800829e:	7b3b      	ldrb	r3, [r7, #12]
 80082a0:	2b01      	cmp	r3, #1
 80082a2:	d103      	bne.n	80082ac <IKS01A2_MOTION_SENSOR_Init+0x134>
      {
        component_functions |= MOTION_ACCELERO;
 80082a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a6:	f043 0302 	orr.w	r3, r3, #2
 80082aa:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 80082ac:	7b7b      	ldrb	r3, [r7, #13]
 80082ae:	2b01      	cmp	r3, #1
 80082b0:	d103      	bne.n	80082ba <IKS01A2_MOTION_SENSOR_Init+0x142>
      {
        component_functions |= MOTION_GYRO;
 80082b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b4:	f043 0301 	orr.w	r3, r3, #1
 80082b8:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 80082ba:	7bbb      	ldrb	r3, [r7, #14]
 80082bc:	2b01      	cmp	r3, #1
 80082be:	d10c      	bne.n	80082da <IKS01A2_MOTION_SENSOR_Init+0x162>
      {
        component_functions |= MOTION_MAGNETO;
 80082c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082c2:	f043 0304 	orr.w	r3, r3, #4
 80082c6:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 80082c8:	e007      	b.n	80082da <IKS01A2_MOTION_SENSOR_Init+0x162>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 80082ca:	f06f 0301 	mvn.w	r3, #1
 80082ce:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 80082d0:	e004      	b.n	80082dc <IKS01A2_MOTION_SENSOR_Init+0x164>
      break;
 80082d2:	bf00      	nop
 80082d4:	e002      	b.n	80082dc <IKS01A2_MOTION_SENSOR_Init+0x164>
      break;
 80082d6:	bf00      	nop
 80082d8:	e000      	b.n	80082dc <IKS01A2_MOTION_SENSOR_Init+0x164>
      break;
 80082da:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 80082dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d001      	beq.n	80082e6 <IKS01A2_MOTION_SENSOR_Init+0x16e>
  {
    return ret;
 80082e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082e4:	e031      	b.n	800834a <IKS01A2_MOTION_SENSOR_Init+0x1d2>
  }

  for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++)
 80082e6:	2300      	movs	r3, #0
 80082e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80082ea:	e02a      	b.n	8008342 <IKS01A2_MOTION_SENSOR_Init+0x1ca>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 80082ec:	683a      	ldr	r2, [r7, #0]
 80082ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082f0:	4013      	ands	r3, r2
 80082f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082f4:	429a      	cmp	r2, r3
 80082f6:	d11e      	bne.n	8008336 <IKS01A2_MOTION_SENSOR_Init+0x1be>
 80082f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80082fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082fc:	4013      	ands	r3, r2
 80082fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008300:	429a      	cmp	r2, r3
 8008302:	d118      	bne.n	8008336 <IKS01A2_MOTION_SENSOR_Init+0x1be>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8008304:	4a15      	ldr	r2, [pc, #84]	; (800835c <IKS01A2_MOTION_SENSOR_Init+0x1e4>)
 8008306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008308:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800830c:	4814      	ldr	r0, [pc, #80]	; (8008360 <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 800830e:	687a      	ldr	r2, [r7, #4]
 8008310:	4613      	mov	r3, r2
 8008312:	005b      	lsls	r3, r3, #1
 8008314:	4413      	add	r3, r2
 8008316:	440b      	add	r3, r1
 8008318:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	490e      	ldr	r1, [pc, #56]	; (8008358 <IKS01A2_MOTION_SENSOR_Init+0x1e0>)
 8008320:	687a      	ldr	r2, [r7, #4]
 8008322:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008326:	4610      	mov	r0, r2
 8008328:	4798      	blx	r3
 800832a:	4603      	mov	r3, r0
 800832c:	2b00      	cmp	r3, #0
 800832e:	d002      	beq.n	8008336 <IKS01A2_MOTION_SENSOR_Init+0x1be>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8008330:	f06f 0304 	mvn.w	r3, #4
 8008334:	e009      	b.n	800834a <IKS01A2_MOTION_SENSOR_Init+0x1d2>
      }
    }
    function = function << 1;
 8008336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008338:	005b      	lsls	r3, r3, #1
 800833a:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++)
 800833c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800833e:	3301      	adds	r3, #1
 8008340:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008344:	2b02      	cmp	r3, #2
 8008346:	d9d1      	bls.n	80082ec <IKS01A2_MOTION_SENSOR_Init+0x174>
  }

  return ret;
 8008348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800834a:	4618      	mov	r0, r3
 800834c:	3738      	adds	r7, #56	; 0x38
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}
 8008352:	bf00      	nop
 8008354:	200023a0 	.word	0x200023a0
 8008358:	200029e8 	.word	0x200029e8
 800835c:	2000130c 	.word	0x2000130c
 8008360:	2000237c 	.word	0x2000237c

08008364 <IKS01A2_MOTION_SENSOR_Enable>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b084      	sub	sp, #16
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
 800836c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2b02      	cmp	r3, #2
 8008372:	d903      	bls.n	800837c <IKS01A2_MOTION_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8008374:	f06f 0301 	mvn.w	r3, #1
 8008378:	60fb      	str	r3, [r7, #12]
 800837a:	e028      	b.n	80083ce <IKS01A2_MOTION_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800837c:	4a16      	ldr	r2, [pc, #88]	; (80083d8 <IKS01A2_MOTION_SENSOR_Enable+0x74>)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	4013      	ands	r3, r2
 8008388:	683a      	ldr	r2, [r7, #0]
 800838a:	429a      	cmp	r2, r3
 800838c:	d11c      	bne.n	80083c8 <IKS01A2_MOTION_SENSOR_Enable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800838e:	4a13      	ldr	r2, [pc, #76]	; (80083dc <IKS01A2_MOTION_SENSOR_Enable+0x78>)
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008396:	4812      	ldr	r0, [pc, #72]	; (80083e0 <IKS01A2_MOTION_SENSOR_Enable+0x7c>)
 8008398:	687a      	ldr	r2, [r7, #4]
 800839a:	4613      	mov	r3, r2
 800839c:	005b      	lsls	r3, r3, #1
 800839e:	4413      	add	r3, r2
 80083a0:	440b      	add	r3, r1
 80083a2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	490e      	ldr	r1, [pc, #56]	; (80083e4 <IKS01A2_MOTION_SENSOR_Enable+0x80>)
 80083aa:	687a      	ldr	r2, [r7, #4]
 80083ac:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80083b0:	4610      	mov	r0, r2
 80083b2:	4798      	blx	r3
 80083b4:	4603      	mov	r3, r0
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d003      	beq.n	80083c2 <IKS01A2_MOTION_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80083ba:	f06f 0304 	mvn.w	r3, #4
 80083be:	60fb      	str	r3, [r7, #12]
 80083c0:	e005      	b.n	80083ce <IKS01A2_MOTION_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80083c2:	2300      	movs	r3, #0
 80083c4:	60fb      	str	r3, [r7, #12]
 80083c6:	e002      	b.n	80083ce <IKS01A2_MOTION_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80083c8:	f06f 0301 	mvn.w	r3, #1
 80083cc:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80083ce:	68fb      	ldr	r3, [r7, #12]
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	3710      	adds	r7, #16
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd80      	pop	{r7, pc}
 80083d8:	200023ac 	.word	0x200023ac
 80083dc:	2000130c 	.word	0x2000130c
 80083e0:	2000237c 	.word	0x2000237c
 80083e4:	200029e8 	.word	0x200029e8

080083e8 <IKS01A2_MOTION_SENSOR_GetAxes>:
 *         - MOTION_MAGNETO for instance 2
 * @param  Axes pointer to axes data structure
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b086      	sub	sp, #24
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	60f8      	str	r0, [r7, #12]
 80083f0:	60b9      	str	r1, [r7, #8]
 80083f2:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2b02      	cmp	r3, #2
 80083f8:	d903      	bls.n	8008402 <IKS01A2_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80083fa:	f06f 0301 	mvn.w	r3, #1
 80083fe:	617b      	str	r3, [r7, #20]
 8008400:	e029      	b.n	8008456 <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8008402:	4a17      	ldr	r2, [pc, #92]	; (8008460 <IKS01A2_MOTION_SENSOR_GetAxes+0x78>)
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	4013      	ands	r3, r2
 800840e:	68ba      	ldr	r2, [r7, #8]
 8008410:	429a      	cmp	r2, r3
 8008412:	d11d      	bne.n	8008450 <IKS01A2_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 8008414:	4a13      	ldr	r2, [pc, #76]	; (8008464 <IKS01A2_MOTION_SENSOR_GetAxes+0x7c>)
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800841c:	4812      	ldr	r0, [pc, #72]	; (8008468 <IKS01A2_MOTION_SENSOR_GetAxes+0x80>)
 800841e:	68fa      	ldr	r2, [r7, #12]
 8008420:	4613      	mov	r3, r2
 8008422:	005b      	lsls	r3, r3, #1
 8008424:	4413      	add	r3, r2
 8008426:	440b      	add	r3, r1
 8008428:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800842c:	69db      	ldr	r3, [r3, #28]
 800842e:	490f      	ldr	r1, [pc, #60]	; (800846c <IKS01A2_MOTION_SENSOR_GetAxes+0x84>)
 8008430:	68fa      	ldr	r2, [r7, #12]
 8008432:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008436:	6879      	ldr	r1, [r7, #4]
 8008438:	4610      	mov	r0, r2
 800843a:	4798      	blx	r3
 800843c:	4603      	mov	r3, r0
 800843e:	2b00      	cmp	r3, #0
 8008440:	d003      	beq.n	800844a <IKS01A2_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008442:	f06f 0304 	mvn.w	r3, #4
 8008446:	617b      	str	r3, [r7, #20]
 8008448:	e005      	b.n	8008456 <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800844a:	2300      	movs	r3, #0
 800844c:	617b      	str	r3, [r7, #20]
 800844e:	e002      	b.n	8008456 <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8008450:	f06f 0301 	mvn.w	r3, #1
 8008454:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8008456:	697b      	ldr	r3, [r7, #20]
}
 8008458:	4618      	mov	r0, r3
 800845a:	3718      	adds	r7, #24
 800845c:	46bd      	mov	sp, r7
 800845e:	bd80      	pop	{r7, pc}
 8008460:	200023ac 	.word	0x200023ac
 8008464:	2000130c 	.word	0x2000130c
 8008468:	2000237c 	.word	0x2000237c
 800846c:	200029e8 	.word	0x200029e8

08008470 <LSM6DSL_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 0 if component ID is OK
 * @retval BSP status
 */
static int32_t LSM6DSL_0_Probe(uint32_t Functions)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b092      	sub	sp, #72	; 0x48
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  LSM6DSL_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSL_Object_t lsm6dsl_obj_0;
  LSM6DSL_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8008478:	2300      	movs	r3, #0
 800847a:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSL_I2C_BUS; /* I2C */
 800847c:	2300      	movs	r3, #0
 800847e:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM6DSL_I2C_ADD_H;
 8008480:	23d7      	movs	r3, #215	; 0xd7
 8008482:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 8008486:	4b4a      	ldr	r3, [pc, #296]	; (80085b0 <LSM6DSL_0_Probe+0x140>)
 8008488:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 800848a:	4b4a      	ldr	r3, [pc, #296]	; (80085b4 <LSM6DSL_0_Probe+0x144>)
 800848c:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 800848e:	4b4a      	ldr	r3, [pc, #296]	; (80085b8 <LSM6DSL_0_Probe+0x148>)
 8008490:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8008492:	4b4a      	ldr	r3, [pc, #296]	; (80085bc <LSM6DSL_0_Probe+0x14c>)
 8008494:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 8008496:	4b4a      	ldr	r3, [pc, #296]	; (80085c0 <LSM6DSL_0_Probe+0x150>)
 8008498:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM6DSL_RegisterBusIO(&lsm6dsl_obj_0, &io_ctx) != LSM6DSL_OK)
 800849a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800849e:	4619      	mov	r1, r3
 80084a0:	4848      	ldr	r0, [pc, #288]	; (80085c4 <LSM6DSL_0_Probe+0x154>)
 80084a2:	f7fe f913 	bl	80066cc <LSM6DSL_RegisterBusIO>
 80084a6:	4603      	mov	r3, r0
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d003      	beq.n	80084b4 <LSM6DSL_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80084ac:	f06f 0306 	mvn.w	r3, #6
 80084b0:	647b      	str	r3, [r7, #68]	; 0x44
 80084b2:	e077      	b.n	80085a4 <LSM6DSL_0_Probe+0x134>
  }
  else if (LSM6DSL_ReadID(&lsm6dsl_obj_0, &id) != LSM6DSL_OK)
 80084b4:	f107 0327 	add.w	r3, r7, #39	; 0x27
 80084b8:	4619      	mov	r1, r3
 80084ba:	4842      	ldr	r0, [pc, #264]	; (80085c4 <LSM6DSL_0_Probe+0x154>)
 80084bc:	f7fe f9fc 	bl	80068b8 <LSM6DSL_ReadID>
 80084c0:	4603      	mov	r3, r0
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d003      	beq.n	80084ce <LSM6DSL_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80084c6:	f06f 0306 	mvn.w	r3, #6
 80084ca:	647b      	str	r3, [r7, #68]	; 0x44
 80084cc:	e06a      	b.n	80085a4 <LSM6DSL_0_Probe+0x134>
  }
  else if (id != LSM6DSL_ID)
 80084ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80084d2:	2b6a      	cmp	r3, #106	; 0x6a
 80084d4:	d003      	beq.n	80084de <LSM6DSL_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80084d6:	f06f 0306 	mvn.w	r3, #6
 80084da:	647b      	str	r3, [r7, #68]	; 0x44
 80084dc:	e062      	b.n	80085a4 <LSM6DSL_0_Probe+0x134>
  }
  else
  {
    (void)LSM6DSL_GetCapabilities(&lsm6dsl_obj_0, &cap);
 80084de:	f107 0308 	add.w	r3, r7, #8
 80084e2:	4619      	mov	r1, r3
 80084e4:	4837      	ldr	r0, [pc, #220]	; (80085c4 <LSM6DSL_0_Probe+0x154>)
 80084e6:	f7fe f9fd 	bl	80068e4 <LSM6DSL_GetCapabilities>
    MotionCtx[IKS01A2_LSM6DSL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 80084ea:	7a7b      	ldrb	r3, [r7, #9]
 80084ec:	461a      	mov	r2, r3
 80084ee:	7a3b      	ldrb	r3, [r7, #8]
 80084f0:	005b      	lsls	r3, r3, #1
 80084f2:	431a      	orrs	r2, r3
 80084f4:	7abb      	ldrb	r3, [r7, #10]
 80084f6:	009b      	lsls	r3, r3, #2
 80084f8:	4313      	orrs	r3, r2
 80084fa:	4a33      	ldr	r2, [pc, #204]	; (80085c8 <LSM6DSL_0_Probe+0x158>)
 80084fc:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A2_LSM6DSL_0] = &lsm6dsl_obj_0;
 80084fe:	4b33      	ldr	r3, [pc, #204]	; (80085cc <LSM6DSL_0_Probe+0x15c>)
 8008500:	4a30      	ldr	r2, [pc, #192]	; (80085c4 <LSM6DSL_0_Probe+0x154>)
 8008502:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM6DSL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSL_COMMON_Driver;
 8008504:	4b32      	ldr	r3, [pc, #200]	; (80085d0 <LSM6DSL_0_Probe+0x160>)
 8008506:	4a33      	ldr	r2, [pc, #204]	; (80085d4 <LSM6DSL_0_Probe+0x164>)
 8008508:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800850a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800850c:	2b00      	cmp	r3, #0
 800850e:	d11d      	bne.n	800854c <LSM6DSL_0_Probe+0xdc>
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f003 0301 	and.w	r3, r3, #1
 8008516:	2b00      	cmp	r3, #0
 8008518:	d018      	beq.n	800854c <LSM6DSL_0_Probe+0xdc>
 800851a:	7a7b      	ldrb	r3, [r7, #9]
 800851c:	2b01      	cmp	r3, #1
 800851e:	d115      	bne.n	800854c <LSM6DSL_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSL_GYRO_Driver;
 8008520:	4b2d      	ldr	r3, [pc, #180]	; (80085d8 <LSM6DSL_0_Probe+0x168>)
 8008522:	685b      	ldr	r3, [r3, #4]
 8008524:	4a2d      	ldr	r2, [pc, #180]	; (80085dc <LSM6DSL_0_Probe+0x16c>)
 8008526:	492e      	ldr	r1, [pc, #184]	; (80085e0 <LSM6DSL_0_Probe+0x170>)
 8008528:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 800852c:	4b28      	ldr	r3, [pc, #160]	; (80085d0 <LSM6DSL_0_Probe+0x160>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4a26      	ldr	r2, [pc, #152]	; (80085cc <LSM6DSL_0_Probe+0x15c>)
 8008534:	6812      	ldr	r2, [r2, #0]
 8008536:	4610      	mov	r0, r2
 8008538:	4798      	blx	r3
 800853a:	4603      	mov	r3, r0
 800853c:	2b00      	cmp	r3, #0
 800853e:	d003      	beq.n	8008548 <LSM6DSL_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008540:	f06f 0304 	mvn.w	r3, #4
 8008544:	647b      	str	r3, [r7, #68]	; 0x44
 8008546:	e001      	b.n	800854c <LSM6DSL_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008548:	2300      	movs	r3, #0
 800854a:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800854c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800854e:	2b00      	cmp	r3, #0
 8008550:	d11d      	bne.n	800858e <LSM6DSL_0_Probe+0x11e>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f003 0302 	and.w	r3, r3, #2
 8008558:	2b00      	cmp	r3, #0
 800855a:	d018      	beq.n	800858e <LSM6DSL_0_Probe+0x11e>
 800855c:	7a3b      	ldrb	r3, [r7, #8]
 800855e:	2b01      	cmp	r3, #1
 8008560:	d115      	bne.n	800858e <LSM6DSL_0_Probe+0x11e>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8008562:	4b1d      	ldr	r3, [pc, #116]	; (80085d8 <LSM6DSL_0_Probe+0x168>)
 8008564:	689b      	ldr	r3, [r3, #8]
 8008566:	4a1d      	ldr	r2, [pc, #116]	; (80085dc <LSM6DSL_0_Probe+0x16c>)
 8008568:	491e      	ldr	r1, [pc, #120]	; (80085e4 <LSM6DSL_0_Probe+0x174>)
 800856a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM6DSL_ACC_Driver;

      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 800856e:	4b18      	ldr	r3, [pc, #96]	; (80085d0 <LSM6DSL_0_Probe+0x160>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4a15      	ldr	r2, [pc, #84]	; (80085cc <LSM6DSL_0_Probe+0x15c>)
 8008576:	6812      	ldr	r2, [r2, #0]
 8008578:	4610      	mov	r0, r2
 800857a:	4798      	blx	r3
 800857c:	4603      	mov	r3, r0
 800857e:	2b00      	cmp	r3, #0
 8008580:	d003      	beq.n	800858a <LSM6DSL_0_Probe+0x11a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008582:	f06f 0304 	mvn.w	r3, #4
 8008586:	647b      	str	r3, [r7, #68]	; 0x44
 8008588:	e001      	b.n	800858e <LSM6DSL_0_Probe+0x11e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800858a:	2300      	movs	r3, #0
 800858c:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800858e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008590:	2b00      	cmp	r3, #0
 8008592:	d107      	bne.n	80085a4 <LSM6DSL_0_Probe+0x134>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f003 0304 	and.w	r3, r3, #4
 800859a:	2b00      	cmp	r3, #0
 800859c:	d002      	beq.n	80085a4 <LSM6DSL_0_Probe+0x134>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800859e:	f06f 0304 	mvn.w	r3, #4
 80085a2:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 80085a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	3748      	adds	r7, #72	; 0x48
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}
 80085ae:	bf00      	nop
 80085b0:	08003419 	.word	0x08003419
 80085b4:	0800347d 	.word	0x0800347d
 80085b8:	08003531 	.word	0x08003531
 80085bc:	080034cd 	.word	0x080034cd
 80085c0:	08003595 	.word	0x08003595
 80085c4:	200023b8 	.word	0x200023b8
 80085c8:	200023ac 	.word	0x200023ac
 80085cc:	200029e8 	.word	0x200029e8
 80085d0:	200023a0 	.word	0x200023a0
 80085d4:	200012a0 	.word	0x200012a0
 80085d8:	2000130c 	.word	0x2000130c
 80085dc:	2000237c 	.word	0x2000237c
 80085e0:	200012d4 	.word	0x200012d4
 80085e4:	200012b0 	.word	0x200012b0

080085e8 <LSM303AGR_ACC_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 1 if component ID is OK
 * @retval error status
 */
static int32_t LSM303AGR_ACC_0_Probe(uint32_t Functions)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b092      	sub	sp, #72	; 0x48
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  LSM303AGR_IO_t                io_ctx;
  uint8_t                       id;
  static LSM303AGR_ACC_Object_t lsm303agr_acc_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;
 80085f0:	2300      	movs	r3, #0
 80085f2:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 80085f4:	2300      	movs	r3, #0
 80085f6:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM303AGR_I2C_ADD_XL;
 80085f8:	2333      	movs	r3, #51	; 0x33
 80085fa:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 80085fe:	4b3f      	ldr	r3, [pc, #252]	; (80086fc <LSM303AGR_ACC_0_Probe+0x114>)
 8008600:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8008602:	4b3f      	ldr	r3, [pc, #252]	; (8008700 <LSM303AGR_ACC_0_Probe+0x118>)
 8008604:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8008606:	4b3f      	ldr	r3, [pc, #252]	; (8008704 <LSM303AGR_ACC_0_Probe+0x11c>)
 8008608:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 800860a:	4b3f      	ldr	r3, [pc, #252]	; (8008708 <LSM303AGR_ACC_0_Probe+0x120>)
 800860c:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 800860e:	4b3f      	ldr	r3, [pc, #252]	; (800870c <LSM303AGR_ACC_0_Probe+0x124>)
 8008610:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM303AGR_ACC_RegisterBusIO(&lsm303agr_acc_obj_0, &io_ctx) != LSM303AGR_OK)
 8008612:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008616:	4619      	mov	r1, r3
 8008618:	483d      	ldr	r0, [pc, #244]	; (8008710 <LSM303AGR_ACC_0_Probe+0x128>)
 800861a:	f7fc fd1d 	bl	8005058 <LSM303AGR_ACC_RegisterBusIO>
 800861e:	4603      	mov	r3, r0
 8008620:	2b00      	cmp	r3, #0
 8008622:	d003      	beq.n	800862c <LSM303AGR_ACC_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008624:	f06f 0306 	mvn.w	r3, #6
 8008628:	647b      	str	r3, [r7, #68]	; 0x44
 800862a:	e062      	b.n	80086f2 <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else if (LSM303AGR_ACC_ReadID(&lsm303agr_acc_obj_0, &id) != LSM303AGR_OK)
 800862c:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8008630:	4619      	mov	r1, r3
 8008632:	4837      	ldr	r0, [pc, #220]	; (8008710 <LSM303AGR_ACC_0_Probe+0x128>)
 8008634:	f7fc fdd1 	bl	80051da <LSM303AGR_ACC_ReadID>
 8008638:	4603      	mov	r3, r0
 800863a:	2b00      	cmp	r3, #0
 800863c:	d003      	beq.n	8008646 <LSM303AGR_ACC_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800863e:	f06f 0306 	mvn.w	r3, #6
 8008642:	647b      	str	r3, [r7, #68]	; 0x44
 8008644:	e055      	b.n	80086f2 <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else if (id != (uint8_t)LSM303AGR_ID_XL)
 8008646:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800864a:	2b33      	cmp	r3, #51	; 0x33
 800864c:	d003      	beq.n	8008656 <LSM303AGR_ACC_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800864e:	f06f 0306 	mvn.w	r3, #6
 8008652:	647b      	str	r3, [r7, #68]	; 0x44
 8008654:	e04d      	b.n	80086f2 <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else
  {
    (void)LSM303AGR_ACC_GetCapabilities(&lsm303agr_acc_obj_0, &cap);
 8008656:	f107 0308 	add.w	r3, r7, #8
 800865a:	4619      	mov	r1, r3
 800865c:	482c      	ldr	r0, [pc, #176]	; (8008710 <LSM303AGR_ACC_0_Probe+0x128>)
 800865e:	f7fc fdd3 	bl	8005208 <LSM303AGR_ACC_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8008662:	7a7b      	ldrb	r3, [r7, #9]
 8008664:	461a      	mov	r2, r3
 8008666:	7a3b      	ldrb	r3, [r7, #8]
 8008668:	005b      	lsls	r3, r3, #1
 800866a:	431a      	orrs	r2, r3
                                                     uint32_t)cap.Magneto << 2);
 800866c:	7abb      	ldrb	r3, [r7, #10]
 800866e:	009b      	lsls	r3, r3, #2
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8008670:	4313      	orrs	r3, r2
 8008672:	4a28      	ldr	r2, [pc, #160]	; (8008714 <LSM303AGR_ACC_0_Probe+0x12c>)
 8008674:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A2_LSM303AGR_ACC_0] = &lsm303agr_acc_obj_0;
 8008676:	4b28      	ldr	r3, [pc, #160]	; (8008718 <LSM303AGR_ACC_0_Probe+0x130>)
 8008678:	4a25      	ldr	r2, [pc, #148]	; (8008710 <LSM303AGR_ACC_0_Probe+0x128>)
 800867a:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_ACC_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_ACC_COMMON_Driver;
 800867c:	4b27      	ldr	r3, [pc, #156]	; (800871c <LSM303AGR_ACC_0_Probe+0x134>)
 800867e:	4a28      	ldr	r2, [pc, #160]	; (8008720 <LSM303AGR_ACC_0_Probe+0x138>)
 8008680:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8008682:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008684:	2b00      	cmp	r3, #0
 8008686:	d11e      	bne.n	80086c6 <LSM303AGR_ACC_0_Probe+0xde>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f003 0302 	and.w	r3, r3, #2
 800868e:	2b00      	cmp	r3, #0
 8008690:	d019      	beq.n	80086c6 <LSM303AGR_ACC_0_Probe+0xde>
 8008692:	7a3b      	ldrb	r3, [r7, #8]
 8008694:	2b01      	cmp	r3, #1
 8008696:	d116      	bne.n	80086c6 <LSM303AGR_ACC_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM303AGR_ACC_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8008698:	4b22      	ldr	r3, [pc, #136]	; (8008724 <LSM303AGR_ACC_0_Probe+0x13c>)
 800869a:	689b      	ldr	r3, [r3, #8]
 800869c:	4a22      	ldr	r2, [pc, #136]	; (8008728 <LSM303AGR_ACC_0_Probe+0x140>)
 800869e:	3303      	adds	r3, #3
 80086a0:	4922      	ldr	r1, [pc, #136]	; (800872c <LSM303AGR_ACC_0_Probe+0x144>)
 80086a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM303AGR_ACC_Driver;

      if (MotionDrv[IKS01A2_LSM303AGR_ACC_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_ACC_0]) != LSM303AGR_OK)
 80086a6:	4b1d      	ldr	r3, [pc, #116]	; (800871c <LSM303AGR_ACC_0_Probe+0x134>)
 80086a8:	685b      	ldr	r3, [r3, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4a1a      	ldr	r2, [pc, #104]	; (8008718 <LSM303AGR_ACC_0_Probe+0x130>)
 80086ae:	6852      	ldr	r2, [r2, #4]
 80086b0:	4610      	mov	r0, r2
 80086b2:	4798      	blx	r3
 80086b4:	4603      	mov	r3, r0
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d003      	beq.n	80086c2 <LSM303AGR_ACC_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80086ba:	f06f 0304 	mvn.w	r3, #4
 80086be:	647b      	str	r3, [r7, #68]	; 0x44
 80086c0:	e001      	b.n	80086c6 <LSM303AGR_ACC_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80086c2:	2300      	movs	r3, #0
 80086c4:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 80086c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d107      	bne.n	80086dc <LSM303AGR_ACC_0_Probe+0xf4>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f003 0301 	and.w	r3, r3, #1
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d002      	beq.n	80086dc <LSM303AGR_ACC_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80086d6:	f06f 0304 	mvn.w	r3, #4
 80086da:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 80086dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d107      	bne.n	80086f2 <LSM303AGR_ACC_0_Probe+0x10a>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f003 0304 	and.w	r3, r3, #4
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d002      	beq.n	80086f2 <LSM303AGR_ACC_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80086ec:	f06f 0304 	mvn.w	r3, #4
 80086f0:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 80086f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3748      	adds	r7, #72	; 0x48
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}
 80086fc:	08003419 	.word	0x08003419
 8008700:	0800347d 	.word	0x0800347d
 8008704:	08003531 	.word	0x08003531
 8008708:	080034cd 	.word	0x080034cd
 800870c:	08003595 	.word	0x08003595
 8008710:	200023e8 	.word	0x200023e8
 8008714:	200023ac 	.word	0x200023ac
 8008718:	200029e8 	.word	0x200029e8
 800871c:	200023a0 	.word	0x200023a0
 8008720:	20001238 	.word	0x20001238
 8008724:	2000130c 	.word	0x2000130c
 8008728:	2000237c 	.word	0x2000237c
 800872c:	20001248 	.word	0x20001248

08008730 <LSM303AGR_MAG_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 2 if component ID is OK
 * @retval error status
 */
static int32_t LSM303AGR_MAG_0_Probe(uint32_t Functions)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b092      	sub	sp, #72	; 0x48
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
  LSM303AGR_IO_t                io_ctx;
  uint8_t                       id;
  static LSM303AGR_MAG_Object_t lsm303agr_mag_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;
 8008738:	2300      	movs	r3, #0
 800873a:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the magneto driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 800873c:	2300      	movs	r3, #0
 800873e:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM303AGR_I2C_ADD_MG;
 8008740:	233d      	movs	r3, #61	; 0x3d
 8008742:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 8008746:	4b3f      	ldr	r3, [pc, #252]	; (8008844 <LSM303AGR_MAG_0_Probe+0x114>)
 8008748:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 800874a:	4b3f      	ldr	r3, [pc, #252]	; (8008848 <LSM303AGR_MAG_0_Probe+0x118>)
 800874c:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 800874e:	4b3f      	ldr	r3, [pc, #252]	; (800884c <LSM303AGR_MAG_0_Probe+0x11c>)
 8008750:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8008752:	4b3f      	ldr	r3, [pc, #252]	; (8008850 <LSM303AGR_MAG_0_Probe+0x120>)
 8008754:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 8008756:	4b3f      	ldr	r3, [pc, #252]	; (8008854 <LSM303AGR_MAG_0_Probe+0x124>)
 8008758:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM303AGR_MAG_RegisterBusIO(&lsm303agr_mag_obj_0, &io_ctx) != LSM303AGR_OK)
 800875a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800875e:	4619      	mov	r1, r3
 8008760:	483d      	ldr	r0, [pc, #244]	; (8008858 <LSM303AGR_MAG_0_Probe+0x128>)
 8008762:	f7fd f83b 	bl	80057dc <LSM303AGR_MAG_RegisterBusIO>
 8008766:	4603      	mov	r3, r0
 8008768:	2b00      	cmp	r3, #0
 800876a:	d003      	beq.n	8008774 <LSM303AGR_MAG_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800876c:	f06f 0306 	mvn.w	r3, #6
 8008770:	647b      	str	r3, [r7, #68]	; 0x44
 8008772:	e062      	b.n	800883a <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else if (LSM303AGR_MAG_ReadID(&lsm303agr_mag_obj_0, &id) != LSM303AGR_OK)
 8008774:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8008778:	4619      	mov	r1, r3
 800877a:	4837      	ldr	r0, [pc, #220]	; (8008858 <LSM303AGR_MAG_0_Probe+0x128>)
 800877c:	f7fd f8e5 	bl	800594a <LSM303AGR_MAG_ReadID>
 8008780:	4603      	mov	r3, r0
 8008782:	2b00      	cmp	r3, #0
 8008784:	d003      	beq.n	800878e <LSM303AGR_MAG_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008786:	f06f 0306 	mvn.w	r3, #6
 800878a:	647b      	str	r3, [r7, #68]	; 0x44
 800878c:	e055      	b.n	800883a <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else if (id != (uint8_t)LSM303AGR_ID_MG)
 800878e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008792:	2b40      	cmp	r3, #64	; 0x40
 8008794:	d003      	beq.n	800879e <LSM303AGR_MAG_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008796:	f06f 0306 	mvn.w	r3, #6
 800879a:	647b      	str	r3, [r7, #68]	; 0x44
 800879c:	e04d      	b.n	800883a <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else
  {
    (void)LSM303AGR_MAG_GetCapabilities(&lsm303agr_mag_obj_0, &cap);
 800879e:	f107 0308 	add.w	r3, r7, #8
 80087a2:	4619      	mov	r1, r3
 80087a4:	482c      	ldr	r0, [pc, #176]	; (8008858 <LSM303AGR_MAG_0_Probe+0x128>)
 80087a6:	f7fd f8e7 	bl	8005978 <LSM303AGR_MAG_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 80087aa:	7a7b      	ldrb	r3, [r7, #9]
 80087ac:	461a      	mov	r2, r3
 80087ae:	7a3b      	ldrb	r3, [r7, #8]
 80087b0:	005b      	lsls	r3, r3, #1
 80087b2:	431a      	orrs	r2, r3
                                                     uint32_t)cap.Magneto << 2);
 80087b4:	7abb      	ldrb	r3, [r7, #10]
 80087b6:	009b      	lsls	r3, r3, #2
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 80087b8:	4313      	orrs	r3, r2
 80087ba:	4a28      	ldr	r2, [pc, #160]	; (800885c <LSM303AGR_MAG_0_Probe+0x12c>)
 80087bc:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A2_LSM303AGR_MAG_0] = &lsm303agr_mag_obj_0;
 80087be:	4b28      	ldr	r3, [pc, #160]	; (8008860 <LSM303AGR_MAG_0_Probe+0x130>)
 80087c0:	4a25      	ldr	r2, [pc, #148]	; (8008858 <LSM303AGR_MAG_0_Probe+0x128>)
 80087c2:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_MAG_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_MAG_COMMON_Driver;
 80087c4:	4b27      	ldr	r3, [pc, #156]	; (8008864 <LSM303AGR_MAG_0_Probe+0x134>)
 80087c6:	4a28      	ldr	r2, [pc, #160]	; (8008868 <LSM303AGR_MAG_0_Probe+0x138>)
 80087c8:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 80087ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d11e      	bne.n	800880e <LSM303AGR_MAG_0_Probe+0xde>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f003 0304 	and.w	r3, r3, #4
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d019      	beq.n	800880e <LSM303AGR_MAG_0_Probe+0xde>
 80087da:	7abb      	ldrb	r3, [r7, #10]
 80087dc:	2b01      	cmp	r3, #1
 80087de:	d116      	bne.n	800880e <LSM303AGR_MAG_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM303AGR_MAG_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80087e0:	4b22      	ldr	r3, [pc, #136]	; (800886c <LSM303AGR_MAG_0_Probe+0x13c>)
 80087e2:	691b      	ldr	r3, [r3, #16]
 80087e4:	4a22      	ldr	r2, [pc, #136]	; (8008870 <LSM303AGR_MAG_0_Probe+0x140>)
 80087e6:	3306      	adds	r3, #6
 80087e8:	4922      	ldr	r1, [pc, #136]	; (8008874 <LSM303AGR_MAG_0_Probe+0x144>)
 80087ea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM303AGR_MAG_Driver;

      if (MotionDrv[IKS01A2_LSM303AGR_MAG_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_MAG_0]) != LSM303AGR_OK)
 80087ee:	4b1d      	ldr	r3, [pc, #116]	; (8008864 <LSM303AGR_MAG_0_Probe+0x134>)
 80087f0:	689b      	ldr	r3, [r3, #8]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4a1a      	ldr	r2, [pc, #104]	; (8008860 <LSM303AGR_MAG_0_Probe+0x130>)
 80087f6:	6892      	ldr	r2, [r2, #8]
 80087f8:	4610      	mov	r0, r2
 80087fa:	4798      	blx	r3
 80087fc:	4603      	mov	r3, r0
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d003      	beq.n	800880a <LSM303AGR_MAG_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008802:	f06f 0304 	mvn.w	r3, #4
 8008806:	647b      	str	r3, [r7, #68]	; 0x44
 8008808:	e001      	b.n	800880e <LSM303AGR_MAG_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800880a:	2300      	movs	r3, #0
 800880c:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 800880e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008810:	2b00      	cmp	r3, #0
 8008812:	d107      	bne.n	8008824 <LSM303AGR_MAG_0_Probe+0xf4>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f003 0302 	and.w	r3, r3, #2
 800881a:	2b00      	cmp	r3, #0
 800881c:	d002      	beq.n	8008824 <LSM303AGR_MAG_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800881e:	f06f 0304 	mvn.w	r3, #4
 8008822:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8008824:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008826:	2b00      	cmp	r3, #0
 8008828:	d107      	bne.n	800883a <LSM303AGR_MAG_0_Probe+0x10a>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f003 0301 	and.w	r3, r3, #1
 8008830:	2b00      	cmp	r3, #0
 8008832:	d002      	beq.n	800883a <LSM303AGR_MAG_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008834:	f06f 0304 	mvn.w	r3, #4
 8008838:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 800883a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800883c:	4618      	mov	r0, r3
 800883e:	3748      	adds	r7, #72	; 0x48
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}
 8008844:	08003419 	.word	0x08003419
 8008848:	0800347d 	.word	0x0800347d
 800884c:	08003531 	.word	0x08003531
 8008850:	080034cd 	.word	0x080034cd
 8008854:	08003595 	.word	0x08003595
 8008858:	20002414 	.word	0x20002414
 800885c:	200023ac 	.word	0x200023ac
 8008860:	200029e8 	.word	0x200029e8
 8008864:	200023a0 	.word	0x200023a0
 8008868:	2000126c 	.word	0x2000126c
 800886c:	2000130c 	.word	0x2000130c
 8008870:	2000237c 	.word	0x2000237c
 8008874:	2000127c 	.word	0x2000127c

08008878 <BSP_LED_Init>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b088      	sub	sp, #32
 800887c:	af00      	add	r7, sp, #0
 800887e:	4603      	mov	r3, r0
 8008880:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* LED2 is on the same GPIO Port */
  LED2_GPIO_CLK_ENABLE();    
 8008882:	2300      	movs	r3, #0
 8008884:	60bb      	str	r3, [r7, #8]
 8008886:	4b16      	ldr	r3, [pc, #88]	; (80088e0 <BSP_LED_Init+0x68>)
 8008888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800888a:	4a15      	ldr	r2, [pc, #84]	; (80088e0 <BSP_LED_Init+0x68>)
 800888c:	f043 0301 	orr.w	r3, r3, #1
 8008890:	6313      	str	r3, [r2, #48]	; 0x30
 8008892:	4b13      	ldr	r3, [pc, #76]	; (80088e0 <BSP_LED_Init+0x68>)
 8008894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008896:	f003 0301 	and.w	r3, r3, #1
 800889a:	60bb      	str	r3, [r7, #8]
 800889c:	68bb      	ldr	r3, [r7, #8]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin   = LED_PIN [Led];
 800889e:	2320      	movs	r3, #32
 80088a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 80088a2:	2301      	movs	r3, #1
 80088a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 80088a6:	2301      	movs	r3, #1
 80088a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH; 
 80088aa:	2302      	movs	r3, #2
 80088ac:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(LED_PORT [Led], &GPIO_InitStruct); 
 80088ae:	79fb      	ldrb	r3, [r7, #7]
 80088b0:	4a0c      	ldr	r2, [pc, #48]	; (80088e4 <BSP_LED_Init+0x6c>)
 80088b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088b6:	f107 020c 	add.w	r2, r7, #12
 80088ba:	4611      	mov	r1, r2
 80088bc:	4618      	mov	r0, r3
 80088be:	f001 fa4d 	bl	8009d5c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 80088c2:	79fb      	ldrb	r3, [r7, #7]
 80088c4:	4a07      	ldr	r2, [pc, #28]	; (80088e4 <BSP_LED_Init+0x6c>)
 80088c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088ca:	2120      	movs	r1, #32
 80088cc:	2200      	movs	r2, #0
 80088ce:	4618      	mov	r0, r3
 80088d0:	f001 fcc0 	bl	800a254 <HAL_GPIO_WritePin>
  
  return BSP_ERROR_NONE;
 80088d4:	2300      	movs	r3, #0
}
 80088d6:	4618      	mov	r0, r3
 80088d8:	3720      	adds	r7, #32
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}
 80088de:	bf00      	nop
 80088e0:	40023800 	.word	0x40023800
 80088e4:	20001320 	.word	0x20001320

080088e8 <BSP_LED_On>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b082      	sub	sp, #8
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	4603      	mov	r3, r0
 80088f0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_SET);
 80088f2:	79fb      	ldrb	r3, [r7, #7]
 80088f4:	4a06      	ldr	r2, [pc, #24]	; (8008910 <BSP_LED_On+0x28>)
 80088f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088fa:	2120      	movs	r1, #32
 80088fc:	2201      	movs	r2, #1
 80088fe:	4618      	mov	r0, r3
 8008900:	f001 fca8 	bl	800a254 <HAL_GPIO_WritePin>
  
  return BSP_ERROR_NONE;
 8008904:	2300      	movs	r3, #0
}
 8008906:	4618      	mov	r0, r3
 8008908:	3708      	adds	r7, #8
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}
 800890e:	bf00      	nop
 8008910:	20001320 	.word	0x20001320

08008914 <BSP_LED_Off>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b082      	sub	sp, #8
 8008918:	af00      	add	r7, sp, #0
 800891a:	4603      	mov	r3, r0
 800891c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 800891e:	79fb      	ldrb	r3, [r7, #7]
 8008920:	4a06      	ldr	r2, [pc, #24]	; (800893c <BSP_LED_Off+0x28>)
 8008922:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008926:	2120      	movs	r1, #32
 8008928:	2200      	movs	r2, #0
 800892a:	4618      	mov	r0, r3
 800892c:	f001 fc92 	bl	800a254 <HAL_GPIO_WritePin>
  
  return BSP_ERROR_NONE;
 8008930:	2300      	movs	r3, #0
}
 8008932:	4618      	mov	r0, r3
 8008934:	3708      	adds	r7, #8
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}
 800893a:	bf00      	nop
 800893c:	20001320 	.word	0x20001320

08008940 <BSP_LED_Toggle>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b082      	sub	sp, #8
 8008944:	af00      	add	r7, sp, #0
 8008946:	4603      	mov	r3, r0
 8008948:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 800894a:	79fb      	ldrb	r3, [r7, #7]
 800894c:	4a06      	ldr	r2, [pc, #24]	; (8008968 <BSP_LED_Toggle+0x28>)
 800894e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008952:	2220      	movs	r2, #32
 8008954:	4611      	mov	r1, r2
 8008956:	4618      	mov	r0, r3
 8008958:	f001 fc95 	bl	800a286 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 800895c:	2300      	movs	r3, #0
}
 800895e:	4618      	mov	r0, r3
 8008960:	3708      	adds	r7, #8
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}
 8008966:	bf00      	nop
 8008968:	20001320 	.word	0x20001320

0800896c <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line 
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b08a      	sub	sp, #40	; 0x28
 8008970:	af00      	add	r7, sp, #0
 8008972:	4603      	mov	r3, r0
 8008974:	460a      	mov	r2, r1
 8008976:	71fb      	strb	r3, [r7, #7]
 8008978:	4613      	mov	r3, r2
 800897a:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800897c:	2300      	movs	r3, #0
 800897e:	627b      	str	r3, [r7, #36]	; 0x24
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};                                                
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};  											     
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  
  /* Enable the BUTTON clock*/ 
  USER_BUTTON_GPIO_CLK_ENABLE();
 8008980:	2300      	movs	r3, #0
 8008982:	60fb      	str	r3, [r7, #12]
 8008984:	4b32      	ldr	r3, [pc, #200]	; (8008a50 <BSP_PB_Init+0xe4>)
 8008986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008988:	4a31      	ldr	r2, [pc, #196]	; (8008a50 <BSP_PB_Init+0xe4>)
 800898a:	f043 0304 	orr.w	r3, r3, #4
 800898e:	6313      	str	r3, [r2, #48]	; 0x30
 8008990:	4b2f      	ldr	r3, [pc, #188]	; (8008a50 <BSP_PB_Init+0xe4>)
 8008992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008994:	f003 0304 	and.w	r3, r3, #4
 8008998:	60fb      	str	r3, [r7, #12]
 800899a:	68fb      	ldr	r3, [r7, #12]
  gpio_init_structure.Pin = BUTTON_PIN [Button];
 800899c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80089a0:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 80089a2:	2302      	movs	r3, #2
 80089a4:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80089a6:	2302      	movs	r3, #2
 80089a8:	61fb      	str	r3, [r7, #28]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 80089aa:	79bb      	ldrb	r3, [r7, #6]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d10c      	bne.n	80089ca <BSP_PB_Init+0x5e>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80089b0:	2300      	movs	r3, #0
 80089b2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 80089b4:	79fb      	ldrb	r3, [r7, #7]
 80089b6:	4a27      	ldr	r2, [pc, #156]	; (8008a54 <BSP_PB_Init+0xe8>)
 80089b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089bc:	f107 0210 	add.w	r2, r7, #16
 80089c0:	4611      	mov	r1, r2
 80089c2:	4618      	mov	r0, r3
 80089c4:	f001 f9ca 	bl	8009d5c <HAL_GPIO_Init>
 80089c8:	e03d      	b.n	8008a46 <BSP_PB_Init+0xda>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {      
    /* Configure Button pin as input with External interrupt */    
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80089ca:	4b23      	ldr	r3, [pc, #140]	; (8008a58 <BSP_PB_Init+0xec>)
 80089cc:	617b      	str	r3, [r7, #20]
    
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80089ce:	79fb      	ldrb	r3, [r7, #7]
 80089d0:	4a20      	ldr	r2, [pc, #128]	; (8008a54 <BSP_PB_Init+0xe8>)
 80089d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089d6:	f107 0210 	add.w	r2, r7, #16
 80089da:	4611      	mov	r1, r2
 80089dc:	4618      	mov	r0, r3
 80089de:	f001 f9bd 	bl	8009d5c <HAL_GPIO_Init>
    
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 80089e2:	79fb      	ldrb	r3, [r7, #7]
 80089e4:	00db      	lsls	r3, r3, #3
 80089e6:	4a1d      	ldr	r2, [pc, #116]	; (8008a5c <BSP_PB_Init+0xf0>)
 80089e8:	1898      	adds	r0, r3, r2
 80089ea:	79fb      	ldrb	r3, [r7, #7]
 80089ec:	4a1c      	ldr	r2, [pc, #112]	; (8008a60 <BSP_PB_Init+0xf4>)
 80089ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089f2:	4619      	mov	r1, r3
 80089f4:	f001 f99e 	bl	8009d34 <HAL_EXTI_GetHandle>
 80089f8:	4603      	mov	r3, r0
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d003      	beq.n	8008a06 <BSP_PB_Init+0x9a>
	{
      ret = BSP_ERROR_PERIPH_FAILURE;
 80089fe:	f06f 0303 	mvn.w	r3, #3
 8008a02:	627b      	str	r3, [r7, #36]	; 0x24
 8008a04:	e01f      	b.n	8008a46 <BSP_PB_Init+0xda>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 8008a06:	79fb      	ldrb	r3, [r7, #7]
 8008a08:	00db      	lsls	r3, r3, #3
 8008a0a:	4a14      	ldr	r2, [pc, #80]	; (8008a5c <BSP_PB_Init+0xf0>)
 8008a0c:	1898      	adds	r0, r3, r2
 8008a0e:	79fb      	ldrb	r3, [r7, #7]
 8008a10:	4a14      	ldr	r2, [pc, #80]	; (8008a64 <BSP_PB_Init+0xf8>)
 8008a12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a16:	461a      	mov	r2, r3
 8008a18:	2100      	movs	r1, #0
 8008a1a:	f001 f971 	bl	8009d00 <HAL_EXTI_RegisterCallback>
 8008a1e:	4603      	mov	r3, r0
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d003      	beq.n	8008a2c <BSP_PB_Init+0xc0>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8008a24:	f06f 0303 	mvn.w	r3, #3
 8008a28:	627b      	str	r3, [r7, #36]	; 0x24
 8008a2a:	e00c      	b.n	8008a46 <BSP_PB_Init+0xda>
    }
	else
	{
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8008a2c:	2028      	movs	r0, #40	; 0x28
 8008a2e:	79fb      	ldrb	r3, [r7, #7]
 8008a30:	4a0d      	ldr	r2, [pc, #52]	; (8008a68 <BSP_PB_Init+0xfc>)
 8008a32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a36:	2200      	movs	r2, #0
 8008a38:	4619      	mov	r1, r3
 8008a3a:	f000 fe26 	bl	800968a <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8008a3e:	2328      	movs	r3, #40	; 0x28
 8008a40:	4618      	mov	r0, r3
 8008a42:	f000 fe3e 	bl	80096c2 <HAL_NVIC_EnableIRQ>
	}
  }
  
  return ret;
 8008a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3728      	adds	r7, #40	; 0x28
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}
 8008a50:	40023800 	.word	0x40023800
 8008a54:	20001324 	.word	0x20001324
 8008a58:	10110000 	.word	0x10110000
 8008a5c:	20001328 	.word	0x20001328
 8008a60:	0801d5c0 	.word	0x0801d5c0
 8008a64:	0801d5c4 	.word	0x0801d5c4
 8008a68:	0801d5c8 	.word	0x0801d5c8

08008a6c <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b082      	sub	sp, #8
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	4603      	mov	r3, r0
 8008a74:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 8008a76:	79fb      	ldrb	r3, [r7, #7]
 8008a78:	4a09      	ldr	r2, [pc, #36]	; (8008aa0 <BSP_PB_GetState+0x34>)
 8008a7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008a82:	4611      	mov	r1, r2
 8008a84:	4618      	mov	r0, r3
 8008a86:	f001 fbcd 	bl	800a224 <HAL_GPIO_ReadPin>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	bf0c      	ite	eq
 8008a90:	2301      	moveq	r3, #1
 8008a92:	2300      	movne	r3, #0
 8008a94:	b2db      	uxtb	r3, r3
}
 8008a96:	4618      	mov	r0, r3
 8008a98:	3708      	adds	r7, #8
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}
 8008a9e:	bf00      	nop
 8008aa0:	20001324 	.word	0x20001324

08008aa4 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{   
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8008aa8:	2000      	movs	r0, #0
 8008aaa:	f7f9 fa4b 	bl	8001f44 <BSP_PB_Callback>
}
 8008aae:	bf00      	nop
 8008ab0:	bd80      	pop	{r7, pc}
	...

08008ab4 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM) 
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b084      	sub	sp, #16
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	4603      	mov	r3, r0
 8008abc:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	60fb      	str	r3, [r7, #12]
  
  if(COM > COMn)
 8008ac2:	79fb      	ldrb	r3, [r7, #7]
 8008ac4:	2b01      	cmp	r3, #1
 8008ac6:	d903      	bls.n	8008ad0 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8008ac8:	f06f 0301 	mvn.w	r3, #1
 8008acc:	60fb      	str	r3, [r7, #12]
 8008ace:	e01c      	b.n	8008b0a <BSP_COM_Init+0x56>
  }
  else
  {  
     hcom_uart[COM].Instance = COM_USART[COM];
 8008ad0:	79fa      	ldrb	r2, [r7, #7]
 8008ad2:	79fb      	ldrb	r3, [r7, #7]
 8008ad4:	490f      	ldr	r1, [pc, #60]	; (8008b14 <BSP_COM_Init+0x60>)
 8008ad6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008ada:	490f      	ldr	r1, [pc, #60]	; (8008b18 <BSP_COM_Init+0x64>)
 8008adc:	019b      	lsls	r3, r3, #6
 8008ade:	440b      	add	r3, r1
 8008ae0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 8008ae2:	79fb      	ldrb	r3, [r7, #7]
 8008ae4:	019b      	lsls	r3, r3, #6
 8008ae6:	4a0c      	ldr	r2, [pc, #48]	; (8008b18 <BSP_COM_Init+0x64>)
 8008ae8:	4413      	add	r3, r2
 8008aea:	4618      	mov	r0, r3
 8008aec:	f000 f85c 	bl	8008ba8 <USART2_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
  
    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 8008af0:	79fb      	ldrb	r3, [r7, #7]
 8008af2:	019b      	lsls	r3, r3, #6
 8008af4:	4a08      	ldr	r2, [pc, #32]	; (8008b18 <BSP_COM_Init+0x64>)
 8008af6:	4413      	add	r3, r2
 8008af8:	4618      	mov	r0, r3
 8008afa:	f000 f80f 	bl	8008b1c <MX_USART2_UART_Init>
 8008afe:	4603      	mov	r3, r0
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d002      	beq.n	8008b0a <BSP_COM_Init+0x56>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8008b04:	f06f 0303 	mvn.w	r3, #3
 8008b08:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	3710      	adds	r7, #16
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}
 8008b14:	20001330 	.word	0x20001330
 8008b18:	200029f4 	.word	0x200029f4

08008b1c <MX_USART2_UART_Init>:
 */

/* USART2 init function */ 

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b084      	sub	sp, #16
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008b24:	2300      	movs	r3, #0
 8008b26:	73fb      	strb	r3, [r7, #15]
  huart->Instance = USART2;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	4a12      	ldr	r2, [pc, #72]	; (8008b74 <MX_USART2_UART_Init+0x58>)
 8008b2c:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008b34:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2200      	movs	r2, #0
 8008b46:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	220c      	movs	r2, #12
 8008b4c:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2200      	movs	r2, #0
 8008b52:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2200      	movs	r2, #0
 8008b58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(huart) != HAL_OK)
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f004 f972 	bl	800ce44 <HAL_UART_Init>
 8008b60:	4603      	mov	r3, r0
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d001      	beq.n	8008b6a <MX_USART2_UART_Init+0x4e>
  {
    ret = HAL_ERROR;
 8008b66:	2301      	movs	r3, #1
 8008b68:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	3710      	adds	r7, #16
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}
 8008b74:	40004400 	.word	0x40004400

08008b78 <__io_putchar>:
#ifdef __GNUC__ 
 int __io_putchar (int ch) 
#else 
 int fputc (int ch, FILE *f) 
#endif /* __GNUC__ */ 
{ 
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b082      	sub	sp, #8
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT); 
 8008b80:	4b07      	ldr	r3, [pc, #28]	; (8008ba0 <__io_putchar+0x28>)
 8008b82:	781b      	ldrb	r3, [r3, #0]
 8008b84:	019b      	lsls	r3, r3, #6
 8008b86:	4a07      	ldr	r2, [pc, #28]	; (8008ba4 <__io_putchar+0x2c>)
 8008b88:	1898      	adds	r0, r3, r2
 8008b8a:	1d39      	adds	r1, r7, #4
 8008b8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008b90:	2201      	movs	r2, #1
 8008b92:	f004 f9ae 	bl	800cef2 <HAL_UART_Transmit>
  return ch;
 8008b96:	687b      	ldr	r3, [r7, #4]
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	3708      	adds	r7, #8
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}
 8008ba0:	20002440 	.word	0x20002440
 8008ba4:	200029f4 	.word	0x200029f4

08008ba8 <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b08a      	sub	sp, #40	; 0x28
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	613b      	str	r3, [r7, #16]
 8008bb4:	4b16      	ldr	r3, [pc, #88]	; (8008c10 <USART2_MspInit+0x68>)
 8008bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bb8:	4a15      	ldr	r2, [pc, #84]	; (8008c10 <USART2_MspInit+0x68>)
 8008bba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008bbe:	6413      	str	r3, [r2, #64]	; 0x40
 8008bc0:	4b13      	ldr	r3, [pc, #76]	; (8008c10 <USART2_MspInit+0x68>)
 8008bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bc8:	613b      	str	r3, [r7, #16]
 8008bca:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008bcc:	2300      	movs	r3, #0
 8008bce:	60fb      	str	r3, [r7, #12]
 8008bd0:	4b0f      	ldr	r3, [pc, #60]	; (8008c10 <USART2_MspInit+0x68>)
 8008bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bd4:	4a0e      	ldr	r2, [pc, #56]	; (8008c10 <USART2_MspInit+0x68>)
 8008bd6:	f043 0301 	orr.w	r3, r3, #1
 8008bda:	6313      	str	r3, [r2, #48]	; 0x30
 8008bdc:	4b0c      	ldr	r3, [pc, #48]	; (8008c10 <USART2_MspInit+0x68>)
 8008bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008be0:	f003 0301 	and.w	r3, r3, #1
 8008be4:	60fb      	str	r3, [r7, #12]
 8008be6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8008be8:	230c      	movs	r3, #12
 8008bea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008bec:	2302      	movs	r3, #2
 8008bee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8008bf8:	2307      	movs	r3, #7
 8008bfa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008bfc:	f107 0314 	add.w	r3, r7, #20
 8008c00:	4619      	mov	r1, r3
 8008c02:	4804      	ldr	r0, [pc, #16]	; (8008c14 <USART2_MspInit+0x6c>)
 8008c04:	f001 f8aa 	bl	8009d5c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 8008c08:	bf00      	nop
 8008c0a:	3728      	adds	r7, #40	; 0x28
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}
 8008c10:	40023800 	.word	0x40023800
 8008c14:	40020000 	.word	0x40020000

08008c18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008c1c:	4b0e      	ldr	r3, [pc, #56]	; (8008c58 <HAL_Init+0x40>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	4a0d      	ldr	r2, [pc, #52]	; (8008c58 <HAL_Init+0x40>)
 8008c22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008c26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008c28:	4b0b      	ldr	r3, [pc, #44]	; (8008c58 <HAL_Init+0x40>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	4a0a      	ldr	r2, [pc, #40]	; (8008c58 <HAL_Init+0x40>)
 8008c2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008c32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008c34:	4b08      	ldr	r3, [pc, #32]	; (8008c58 <HAL_Init+0x40>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	4a07      	ldr	r2, [pc, #28]	; (8008c58 <HAL_Init+0x40>)
 8008c3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008c40:	2003      	movs	r0, #3
 8008c42:	f000 fd17 	bl	8009674 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008c46:	2000      	movs	r0, #0
 8008c48:	f000 f808 	bl	8008c5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008c4c:	f7fa fa3c 	bl	80030c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008c50:	2300      	movs	r3, #0
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	bd80      	pop	{r7, pc}
 8008c56:	bf00      	nop
 8008c58:	40023c00 	.word	0x40023c00

08008c5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b082      	sub	sp, #8
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008c64:	4b12      	ldr	r3, [pc, #72]	; (8008cb0 <HAL_InitTick+0x54>)
 8008c66:	681a      	ldr	r2, [r3, #0]
 8008c68:	4b12      	ldr	r3, [pc, #72]	; (8008cb4 <HAL_InitTick+0x58>)
 8008c6a:	781b      	ldrb	r3, [r3, #0]
 8008c6c:	4619      	mov	r1, r3
 8008c6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008c72:	fbb3 f3f1 	udiv	r3, r3, r1
 8008c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f000 fd2f 	bl	80096de <HAL_SYSTICK_Config>
 8008c80:	4603      	mov	r3, r0
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d001      	beq.n	8008c8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008c86:	2301      	movs	r3, #1
 8008c88:	e00e      	b.n	8008ca8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2b0f      	cmp	r3, #15
 8008c8e:	d80a      	bhi.n	8008ca6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008c90:	2200      	movs	r2, #0
 8008c92:	6879      	ldr	r1, [r7, #4]
 8008c94:	f04f 30ff 	mov.w	r0, #4294967295
 8008c98:	f000 fcf7 	bl	800968a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008c9c:	4a06      	ldr	r2, [pc, #24]	; (8008cb8 <HAL_InitTick+0x5c>)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	e000      	b.n	8008ca8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008ca6:	2301      	movs	r3, #1
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3708      	adds	r7, #8
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}
 8008cb0:	200011c4 	.word	0x200011c4
 8008cb4:	20001338 	.word	0x20001338
 8008cb8:	20001334 	.word	0x20001334

08008cbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008cc0:	4b06      	ldr	r3, [pc, #24]	; (8008cdc <HAL_IncTick+0x20>)
 8008cc2:	781b      	ldrb	r3, [r3, #0]
 8008cc4:	461a      	mov	r2, r3
 8008cc6:	4b06      	ldr	r3, [pc, #24]	; (8008ce0 <HAL_IncTick+0x24>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	4413      	add	r3, r2
 8008ccc:	4a04      	ldr	r2, [pc, #16]	; (8008ce0 <HAL_IncTick+0x24>)
 8008cce:	6013      	str	r3, [r2, #0]
}
 8008cd0:	bf00      	nop
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd8:	4770      	bx	lr
 8008cda:	bf00      	nop
 8008cdc:	20001338 	.word	0x20001338
 8008ce0:	20002a34 	.word	0x20002a34

08008ce4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	af00      	add	r7, sp, #0
  return uwTick;
 8008ce8:	4b03      	ldr	r3, [pc, #12]	; (8008cf8 <HAL_GetTick+0x14>)
 8008cea:	681b      	ldr	r3, [r3, #0]
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf4:	4770      	bx	lr
 8008cf6:	bf00      	nop
 8008cf8:	20002a34 	.word	0x20002a34

08008cfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b084      	sub	sp, #16
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008d04:	f7ff ffee 	bl	8008ce4 <HAL_GetTick>
 8008d08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d14:	d005      	beq.n	8008d22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008d16:	4b09      	ldr	r3, [pc, #36]	; (8008d3c <HAL_Delay+0x40>)
 8008d18:	781b      	ldrb	r3, [r3, #0]
 8008d1a:	461a      	mov	r2, r3
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	4413      	add	r3, r2
 8008d20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008d22:	bf00      	nop
 8008d24:	f7ff ffde 	bl	8008ce4 <HAL_GetTick>
 8008d28:	4602      	mov	r2, r0
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	1ad3      	subs	r3, r2, r3
 8008d2e:	68fa      	ldr	r2, [r7, #12]
 8008d30:	429a      	cmp	r2, r3
 8008d32:	d8f7      	bhi.n	8008d24 <HAL_Delay+0x28>
  {
  }
}
 8008d34:	bf00      	nop
 8008d36:	3710      	adds	r7, #16
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}
 8008d3c:	20001338 	.word	0x20001338

08008d40 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b084      	sub	sp, #16
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008d48:	2300      	movs	r3, #0
 8008d4a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d101      	bne.n	8008d56 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8008d52:	2301      	movs	r3, #1
 8008d54:	e033      	b.n	8008dbe <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d109      	bne.n	8008d72 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f7fa f9da 	bl	8003118 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2200      	movs	r2, #0
 8008d68:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d76:	f003 0310 	and.w	r3, r3, #16
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d118      	bne.n	8008db0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d82:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008d86:	f023 0302 	bic.w	r3, r3, #2
 8008d8a:	f043 0202 	orr.w	r2, r3, #2
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f000 fa98 	bl	80092c8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008da2:	f023 0303 	bic.w	r3, r3, #3
 8008da6:	f043 0201 	orr.w	r2, r3, #1
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	641a      	str	r2, [r3, #64]	; 0x40
 8008dae:	e001      	b.n	8008db4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8008db0:	2301      	movs	r3, #1
 8008db2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2200      	movs	r2, #0
 8008db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8008dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	3710      	adds	r7, #16
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}

08008dc6 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8008dc6:	b580      	push	{r7, lr}
 8008dc8:	b084      	sub	sp, #16
 8008dca:	af00      	add	r7, sp, #0
 8008dcc:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	60fb      	str	r3, [r7, #12]
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f003 0302 	and.w	r3, r3, #2
 8008de0:	2b02      	cmp	r3, #2
 8008de2:	bf0c      	ite	eq
 8008de4:	2301      	moveq	r3, #1
 8008de6:	2300      	movne	r3, #0
 8008de8:	b2db      	uxtb	r3, r3
 8008dea:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	685b      	ldr	r3, [r3, #4]
 8008df2:	f003 0320 	and.w	r3, r3, #32
 8008df6:	2b20      	cmp	r3, #32
 8008df8:	bf0c      	ite	eq
 8008dfa:	2301      	moveq	r3, #1
 8008dfc:	2300      	movne	r3, #0
 8008dfe:	b2db      	uxtb	r3, r3
 8008e00:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d049      	beq.n	8008e9c <HAL_ADC_IRQHandler+0xd6>
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d046      	beq.n	8008e9c <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e12:	f003 0310 	and.w	r3, r3, #16
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d105      	bne.n	8008e26 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e1e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	689b      	ldr	r3, [r3, #8]
 8008e2c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d12b      	bne.n	8008e8c <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d127      	bne.n	8008e8c <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e42:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d006      	beq.n	8008e58 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	689b      	ldr	r3, [r3, #8]
 8008e50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d119      	bne.n	8008e8c <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	685a      	ldr	r2, [r3, #4]
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f022 0220 	bic.w	r2, r2, #32
 8008e66:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e6c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d105      	bne.n	8008e8c <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e84:	f043 0201 	orr.w	r2, r3, #1
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f000 f8db 	bl	8009048 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f06f 0212 	mvn.w	r2, #18
 8008e9a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f003 0304 	and.w	r3, r3, #4
 8008ea6:	2b04      	cmp	r3, #4
 8008ea8:	bf0c      	ite	eq
 8008eaa:	2301      	moveq	r3, #1
 8008eac:	2300      	movne	r3, #0
 8008eae:	b2db      	uxtb	r3, r3
 8008eb0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	685b      	ldr	r3, [r3, #4]
 8008eb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ebc:	2b80      	cmp	r3, #128	; 0x80
 8008ebe:	bf0c      	ite	eq
 8008ec0:	2301      	moveq	r3, #1
 8008ec2:	2300      	movne	r3, #0
 8008ec4:	b2db      	uxtb	r3, r3
 8008ec6:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d057      	beq.n	8008f7e <HAL_ADC_IRQHandler+0x1b8>
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d054      	beq.n	8008f7e <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ed8:	f003 0310 	and.w	r3, r3, #16
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d105      	bne.n	8008eec <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ee4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	689b      	ldr	r3, [r3, #8]
 8008ef2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d139      	bne.n	8008f6e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f00:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d006      	beq.n	8008f16 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	689b      	ldr	r3, [r3, #8]
 8008f0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d12b      	bne.n	8008f6e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	685b      	ldr	r3, [r3, #4]
 8008f1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d124      	bne.n	8008f6e <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	689b      	ldr	r3, [r3, #8]
 8008f2a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d11d      	bne.n	8008f6e <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d119      	bne.n	8008f6e <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	685a      	ldr	r2, [r3, #4]
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008f48:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d105      	bne.n	8008f6e <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f66:	f043 0201 	orr.w	r2, r3, #1
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f000 faa6 	bl	80094c0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f06f 020c 	mvn.w	r2, #12
 8008f7c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f003 0301 	and.w	r3, r3, #1
 8008f88:	2b01      	cmp	r3, #1
 8008f8a:	bf0c      	ite	eq
 8008f8c:	2301      	moveq	r3, #1
 8008f8e:	2300      	movne	r3, #0
 8008f90:	b2db      	uxtb	r3, r3
 8008f92:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	685b      	ldr	r3, [r3, #4]
 8008f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f9e:	2b40      	cmp	r3, #64	; 0x40
 8008fa0:	bf0c      	ite	eq
 8008fa2:	2301      	moveq	r3, #1
 8008fa4:	2300      	movne	r3, #0
 8008fa6:	b2db      	uxtb	r3, r3
 8008fa8:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d017      	beq.n	8008fe0 <HAL_ADC_IRQHandler+0x21a>
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d014      	beq.n	8008fe0 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f003 0301 	and.w	r3, r3, #1
 8008fc0:	2b01      	cmp	r3, #1
 8008fc2:	d10d      	bne.n	8008fe0 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fc8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8008fd0:	6878      	ldr	r0, [r7, #4]
 8008fd2:	f000 f843 	bl	800905c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f06f 0201 	mvn.w	r2, #1
 8008fde:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f003 0320 	and.w	r3, r3, #32
 8008fea:	2b20      	cmp	r3, #32
 8008fec:	bf0c      	ite	eq
 8008fee:	2301      	moveq	r3, #1
 8008ff0:	2300      	movne	r3, #0
 8008ff2:	b2db      	uxtb	r3, r3
 8008ff4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	685b      	ldr	r3, [r3, #4]
 8008ffc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009000:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009004:	bf0c      	ite	eq
 8009006:	2301      	moveq	r3, #1
 8009008:	2300      	movne	r3, #0
 800900a:	b2db      	uxtb	r3, r3
 800900c:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d015      	beq.n	8009040 <HAL_ADC_IRQHandler+0x27a>
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d012      	beq.n	8009040 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800901e:	f043 0202 	orr.w	r2, r3, #2
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f06f 0220 	mvn.w	r2, #32
 800902e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f000 f81d 	bl	8009070 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f06f 0220 	mvn.w	r2, #32
 800903e:	601a      	str	r2, [r3, #0]
  }
}
 8009040:	bf00      	nop
 8009042:	3710      	adds	r7, #16
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}

08009048 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8009048:	b480      	push	{r7}
 800904a:	b083      	sub	sp, #12
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8009050:	bf00      	nop
 8009052:	370c      	adds	r7, #12
 8009054:	46bd      	mov	sp, r7
 8009056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905a:	4770      	bx	lr

0800905c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800905c:	b480      	push	{r7}
 800905e:	b083      	sub	sp, #12
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8009064:	bf00      	nop
 8009066:	370c      	adds	r7, #12
 8009068:	46bd      	mov	sp, r7
 800906a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906e:	4770      	bx	lr

08009070 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8009070:	b480      	push	{r7}
 8009072:	b083      	sub	sp, #12
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8009078:	bf00      	nop
 800907a:	370c      	adds	r7, #12
 800907c:	46bd      	mov	sp, r7
 800907e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009082:	4770      	bx	lr

08009084 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8009084:	b480      	push	{r7}
 8009086:	b085      	sub	sp, #20
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
 800908c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800908e:	2300      	movs	r3, #0
 8009090:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009098:	2b01      	cmp	r3, #1
 800909a:	d101      	bne.n	80090a0 <HAL_ADC_ConfigChannel+0x1c>
 800909c:	2302      	movs	r3, #2
 800909e:	e105      	b.n	80092ac <HAL_ADC_ConfigChannel+0x228>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2201      	movs	r2, #1
 80090a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	2b09      	cmp	r3, #9
 80090ae:	d925      	bls.n	80090fc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	68d9      	ldr	r1, [r3, #12]
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	b29b      	uxth	r3, r3
 80090bc:	461a      	mov	r2, r3
 80090be:	4613      	mov	r3, r2
 80090c0:	005b      	lsls	r3, r3, #1
 80090c2:	4413      	add	r3, r2
 80090c4:	3b1e      	subs	r3, #30
 80090c6:	2207      	movs	r2, #7
 80090c8:	fa02 f303 	lsl.w	r3, r2, r3
 80090cc:	43da      	mvns	r2, r3
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	400a      	ands	r2, r1
 80090d4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	68d9      	ldr	r1, [r3, #12]
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	689a      	ldr	r2, [r3, #8]
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	b29b      	uxth	r3, r3
 80090e6:	4618      	mov	r0, r3
 80090e8:	4603      	mov	r3, r0
 80090ea:	005b      	lsls	r3, r3, #1
 80090ec:	4403      	add	r3, r0
 80090ee:	3b1e      	subs	r3, #30
 80090f0:	409a      	lsls	r2, r3
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	430a      	orrs	r2, r1
 80090f8:	60da      	str	r2, [r3, #12]
 80090fa:	e022      	b.n	8009142 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	6919      	ldr	r1, [r3, #16]
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	b29b      	uxth	r3, r3
 8009108:	461a      	mov	r2, r3
 800910a:	4613      	mov	r3, r2
 800910c:	005b      	lsls	r3, r3, #1
 800910e:	4413      	add	r3, r2
 8009110:	2207      	movs	r2, #7
 8009112:	fa02 f303 	lsl.w	r3, r2, r3
 8009116:	43da      	mvns	r2, r3
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	400a      	ands	r2, r1
 800911e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	6919      	ldr	r1, [r3, #16]
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	689a      	ldr	r2, [r3, #8]
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	b29b      	uxth	r3, r3
 8009130:	4618      	mov	r0, r3
 8009132:	4603      	mov	r3, r0
 8009134:	005b      	lsls	r3, r3, #1
 8009136:	4403      	add	r3, r0
 8009138:	409a      	lsls	r2, r3
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	430a      	orrs	r2, r1
 8009140:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	685b      	ldr	r3, [r3, #4]
 8009146:	2b06      	cmp	r3, #6
 8009148:	d824      	bhi.n	8009194 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	685a      	ldr	r2, [r3, #4]
 8009154:	4613      	mov	r3, r2
 8009156:	009b      	lsls	r3, r3, #2
 8009158:	4413      	add	r3, r2
 800915a:	3b05      	subs	r3, #5
 800915c:	221f      	movs	r2, #31
 800915e:	fa02 f303 	lsl.w	r3, r2, r3
 8009162:	43da      	mvns	r2, r3
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	400a      	ands	r2, r1
 800916a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	b29b      	uxth	r3, r3
 8009178:	4618      	mov	r0, r3
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	685a      	ldr	r2, [r3, #4]
 800917e:	4613      	mov	r3, r2
 8009180:	009b      	lsls	r3, r3, #2
 8009182:	4413      	add	r3, r2
 8009184:	3b05      	subs	r3, #5
 8009186:	fa00 f203 	lsl.w	r2, r0, r3
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	430a      	orrs	r2, r1
 8009190:	635a      	str	r2, [r3, #52]	; 0x34
 8009192:	e04c      	b.n	800922e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	685b      	ldr	r3, [r3, #4]
 8009198:	2b0c      	cmp	r3, #12
 800919a:	d824      	bhi.n	80091e6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	685a      	ldr	r2, [r3, #4]
 80091a6:	4613      	mov	r3, r2
 80091a8:	009b      	lsls	r3, r3, #2
 80091aa:	4413      	add	r3, r2
 80091ac:	3b23      	subs	r3, #35	; 0x23
 80091ae:	221f      	movs	r2, #31
 80091b0:	fa02 f303 	lsl.w	r3, r2, r3
 80091b4:	43da      	mvns	r2, r3
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	400a      	ands	r2, r1
 80091bc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	b29b      	uxth	r3, r3
 80091ca:	4618      	mov	r0, r3
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	685a      	ldr	r2, [r3, #4]
 80091d0:	4613      	mov	r3, r2
 80091d2:	009b      	lsls	r3, r3, #2
 80091d4:	4413      	add	r3, r2
 80091d6:	3b23      	subs	r3, #35	; 0x23
 80091d8:	fa00 f203 	lsl.w	r2, r0, r3
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	430a      	orrs	r2, r1
 80091e2:	631a      	str	r2, [r3, #48]	; 0x30
 80091e4:	e023      	b.n	800922e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	685a      	ldr	r2, [r3, #4]
 80091f0:	4613      	mov	r3, r2
 80091f2:	009b      	lsls	r3, r3, #2
 80091f4:	4413      	add	r3, r2
 80091f6:	3b41      	subs	r3, #65	; 0x41
 80091f8:	221f      	movs	r2, #31
 80091fa:	fa02 f303 	lsl.w	r3, r2, r3
 80091fe:	43da      	mvns	r2, r3
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	400a      	ands	r2, r1
 8009206:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	b29b      	uxth	r3, r3
 8009214:	4618      	mov	r0, r3
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	685a      	ldr	r2, [r3, #4]
 800921a:	4613      	mov	r3, r2
 800921c:	009b      	lsls	r3, r3, #2
 800921e:	4413      	add	r3, r2
 8009220:	3b41      	subs	r3, #65	; 0x41
 8009222:	fa00 f203 	lsl.w	r2, r0, r3
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	430a      	orrs	r2, r1
 800922c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800922e:	4b22      	ldr	r3, [pc, #136]	; (80092b8 <HAL_ADC_ConfigChannel+0x234>)
 8009230:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	4a21      	ldr	r2, [pc, #132]	; (80092bc <HAL_ADC_ConfigChannel+0x238>)
 8009238:	4293      	cmp	r3, r2
 800923a:	d109      	bne.n	8009250 <HAL_ADC_ConfigChannel+0x1cc>
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	2b12      	cmp	r3, #18
 8009242:	d105      	bne.n	8009250 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	685b      	ldr	r3, [r3, #4]
 8009248:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	4a19      	ldr	r2, [pc, #100]	; (80092bc <HAL_ADC_ConfigChannel+0x238>)
 8009256:	4293      	cmp	r3, r2
 8009258:	d123      	bne.n	80092a2 <HAL_ADC_ConfigChannel+0x21e>
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	2b10      	cmp	r3, #16
 8009260:	d003      	beq.n	800926a <HAL_ADC_ConfigChannel+0x1e6>
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	2b11      	cmp	r3, #17
 8009268:	d11b      	bne.n	80092a2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	685b      	ldr	r3, [r3, #4]
 800926e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	2b10      	cmp	r3, #16
 800927c:	d111      	bne.n	80092a2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800927e:	4b10      	ldr	r3, [pc, #64]	; (80092c0 <HAL_ADC_ConfigChannel+0x23c>)
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	4a10      	ldr	r2, [pc, #64]	; (80092c4 <HAL_ADC_ConfigChannel+0x240>)
 8009284:	fba2 2303 	umull	r2, r3, r2, r3
 8009288:	0c9a      	lsrs	r2, r3, #18
 800928a:	4613      	mov	r3, r2
 800928c:	009b      	lsls	r3, r3, #2
 800928e:	4413      	add	r3, r2
 8009290:	005b      	lsls	r3, r3, #1
 8009292:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8009294:	e002      	b.n	800929c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8009296:	68bb      	ldr	r3, [r7, #8]
 8009298:	3b01      	subs	r3, #1
 800929a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d1f9      	bne.n	8009296 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2200      	movs	r2, #0
 80092a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80092aa:	2300      	movs	r3, #0
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	3714      	adds	r7, #20
 80092b0:	46bd      	mov	sp, r7
 80092b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b6:	4770      	bx	lr
 80092b8:	40012300 	.word	0x40012300
 80092bc:	40012000 	.word	0x40012000
 80092c0:	200011c4 	.word	0x200011c4
 80092c4:	431bde83 	.word	0x431bde83

080092c8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80092c8:	b480      	push	{r7}
 80092ca:	b085      	sub	sp, #20
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80092d0:	4b79      	ldr	r3, [pc, #484]	; (80094b8 <ADC_Init+0x1f0>)
 80092d2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	685b      	ldr	r3, [r3, #4]
 80092d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	685a      	ldr	r2, [r3, #4]
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	685b      	ldr	r3, [r3, #4]
 80092e8:	431a      	orrs	r2, r3
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	685a      	ldr	r2, [r3, #4]
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80092fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	6859      	ldr	r1, [r3, #4]
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	691b      	ldr	r3, [r3, #16]
 8009308:	021a      	lsls	r2, r3, #8
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	430a      	orrs	r2, r1
 8009310:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	685a      	ldr	r2, [r3, #4]
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8009320:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	6859      	ldr	r1, [r3, #4]
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	689a      	ldr	r2, [r3, #8]
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	430a      	orrs	r2, r1
 8009332:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	689a      	ldr	r2, [r3, #8]
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009342:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	6899      	ldr	r1, [r3, #8]
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	68da      	ldr	r2, [r3, #12]
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	430a      	orrs	r2, r1
 8009354:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800935a:	4a58      	ldr	r2, [pc, #352]	; (80094bc <ADC_Init+0x1f4>)
 800935c:	4293      	cmp	r3, r2
 800935e:	d022      	beq.n	80093a6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	689a      	ldr	r2, [r3, #8]
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800936e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	6899      	ldr	r1, [r3, #8]
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	430a      	orrs	r2, r1
 8009380:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	689a      	ldr	r2, [r3, #8]
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009390:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	6899      	ldr	r1, [r3, #8]
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	430a      	orrs	r2, r1
 80093a2:	609a      	str	r2, [r3, #8]
 80093a4:	e00f      	b.n	80093c6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	689a      	ldr	r2, [r3, #8]
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80093b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	689a      	ldr	r2, [r3, #8]
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80093c4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	689a      	ldr	r2, [r3, #8]
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f022 0202 	bic.w	r2, r2, #2
 80093d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	6899      	ldr	r1, [r3, #8]
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	7e1b      	ldrb	r3, [r3, #24]
 80093e0:	005a      	lsls	r2, r3, #1
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	430a      	orrs	r2, r1
 80093e8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d01b      	beq.n	800942c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	685a      	ldr	r2, [r3, #4]
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009402:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	685a      	ldr	r2, [r3, #4]
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8009412:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	6859      	ldr	r1, [r3, #4]
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800941e:	3b01      	subs	r3, #1
 8009420:	035a      	lsls	r2, r3, #13
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	430a      	orrs	r2, r1
 8009428:	605a      	str	r2, [r3, #4]
 800942a:	e007      	b.n	800943c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	685a      	ldr	r2, [r3, #4]
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800943a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800944a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	69db      	ldr	r3, [r3, #28]
 8009456:	3b01      	subs	r3, #1
 8009458:	051a      	lsls	r2, r3, #20
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	430a      	orrs	r2, r1
 8009460:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	689a      	ldr	r2, [r3, #8]
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009470:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	6899      	ldr	r1, [r3, #8]
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800947e:	025a      	lsls	r2, r3, #9
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	430a      	orrs	r2, r1
 8009486:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	689a      	ldr	r2, [r3, #8]
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009496:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	6899      	ldr	r1, [r3, #8]
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	695b      	ldr	r3, [r3, #20]
 80094a2:	029a      	lsls	r2, r3, #10
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	430a      	orrs	r2, r1
 80094aa:	609a      	str	r2, [r3, #8]
}
 80094ac:	bf00      	nop
 80094ae:	3714      	adds	r7, #20
 80094b0:	46bd      	mov	sp, r7
 80094b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b6:	4770      	bx	lr
 80094b8:	40012300 	.word	0x40012300
 80094bc:	0f000001 	.word	0x0f000001

080094c0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80094c0:	b480      	push	{r7}
 80094c2:	b083      	sub	sp, #12
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80094c8:	bf00      	nop
 80094ca:	370c      	adds	r7, #12
 80094cc:	46bd      	mov	sp, r7
 80094ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d2:	4770      	bx	lr

080094d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80094d4:	b480      	push	{r7}
 80094d6:	b085      	sub	sp, #20
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f003 0307 	and.w	r3, r3, #7
 80094e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80094e4:	4b0c      	ldr	r3, [pc, #48]	; (8009518 <__NVIC_SetPriorityGrouping+0x44>)
 80094e6:	68db      	ldr	r3, [r3, #12]
 80094e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80094ea:	68ba      	ldr	r2, [r7, #8]
 80094ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80094f0:	4013      	ands	r3, r2
 80094f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80094fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009500:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009504:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009506:	4a04      	ldr	r2, [pc, #16]	; (8009518 <__NVIC_SetPriorityGrouping+0x44>)
 8009508:	68bb      	ldr	r3, [r7, #8]
 800950a:	60d3      	str	r3, [r2, #12]
}
 800950c:	bf00      	nop
 800950e:	3714      	adds	r7, #20
 8009510:	46bd      	mov	sp, r7
 8009512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009516:	4770      	bx	lr
 8009518:	e000ed00 	.word	0xe000ed00

0800951c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800951c:	b480      	push	{r7}
 800951e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009520:	4b04      	ldr	r3, [pc, #16]	; (8009534 <__NVIC_GetPriorityGrouping+0x18>)
 8009522:	68db      	ldr	r3, [r3, #12]
 8009524:	0a1b      	lsrs	r3, r3, #8
 8009526:	f003 0307 	and.w	r3, r3, #7
}
 800952a:	4618      	mov	r0, r3
 800952c:	46bd      	mov	sp, r7
 800952e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009532:	4770      	bx	lr
 8009534:	e000ed00 	.word	0xe000ed00

08009538 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009538:	b480      	push	{r7}
 800953a:	b083      	sub	sp, #12
 800953c:	af00      	add	r7, sp, #0
 800953e:	4603      	mov	r3, r0
 8009540:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009546:	2b00      	cmp	r3, #0
 8009548:	db0b      	blt.n	8009562 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800954a:	79fb      	ldrb	r3, [r7, #7]
 800954c:	f003 021f 	and.w	r2, r3, #31
 8009550:	4907      	ldr	r1, [pc, #28]	; (8009570 <__NVIC_EnableIRQ+0x38>)
 8009552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009556:	095b      	lsrs	r3, r3, #5
 8009558:	2001      	movs	r0, #1
 800955a:	fa00 f202 	lsl.w	r2, r0, r2
 800955e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8009562:	bf00      	nop
 8009564:	370c      	adds	r7, #12
 8009566:	46bd      	mov	sp, r7
 8009568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956c:	4770      	bx	lr
 800956e:	bf00      	nop
 8009570:	e000e100 	.word	0xe000e100

08009574 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009574:	b480      	push	{r7}
 8009576:	b083      	sub	sp, #12
 8009578:	af00      	add	r7, sp, #0
 800957a:	4603      	mov	r3, r0
 800957c:	6039      	str	r1, [r7, #0]
 800957e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009580:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009584:	2b00      	cmp	r3, #0
 8009586:	db0a      	blt.n	800959e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	b2da      	uxtb	r2, r3
 800958c:	490c      	ldr	r1, [pc, #48]	; (80095c0 <__NVIC_SetPriority+0x4c>)
 800958e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009592:	0112      	lsls	r2, r2, #4
 8009594:	b2d2      	uxtb	r2, r2
 8009596:	440b      	add	r3, r1
 8009598:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800959c:	e00a      	b.n	80095b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	b2da      	uxtb	r2, r3
 80095a2:	4908      	ldr	r1, [pc, #32]	; (80095c4 <__NVIC_SetPriority+0x50>)
 80095a4:	79fb      	ldrb	r3, [r7, #7]
 80095a6:	f003 030f 	and.w	r3, r3, #15
 80095aa:	3b04      	subs	r3, #4
 80095ac:	0112      	lsls	r2, r2, #4
 80095ae:	b2d2      	uxtb	r2, r2
 80095b0:	440b      	add	r3, r1
 80095b2:	761a      	strb	r2, [r3, #24]
}
 80095b4:	bf00      	nop
 80095b6:	370c      	adds	r7, #12
 80095b8:	46bd      	mov	sp, r7
 80095ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095be:	4770      	bx	lr
 80095c0:	e000e100 	.word	0xe000e100
 80095c4:	e000ed00 	.word	0xe000ed00

080095c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80095c8:	b480      	push	{r7}
 80095ca:	b089      	sub	sp, #36	; 0x24
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	60f8      	str	r0, [r7, #12]
 80095d0:	60b9      	str	r1, [r7, #8]
 80095d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	f003 0307 	and.w	r3, r3, #7
 80095da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80095dc:	69fb      	ldr	r3, [r7, #28]
 80095de:	f1c3 0307 	rsb	r3, r3, #7
 80095e2:	2b04      	cmp	r3, #4
 80095e4:	bf28      	it	cs
 80095e6:	2304      	movcs	r3, #4
 80095e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80095ea:	69fb      	ldr	r3, [r7, #28]
 80095ec:	3304      	adds	r3, #4
 80095ee:	2b06      	cmp	r3, #6
 80095f0:	d902      	bls.n	80095f8 <NVIC_EncodePriority+0x30>
 80095f2:	69fb      	ldr	r3, [r7, #28]
 80095f4:	3b03      	subs	r3, #3
 80095f6:	e000      	b.n	80095fa <NVIC_EncodePriority+0x32>
 80095f8:	2300      	movs	r3, #0
 80095fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80095fc:	f04f 32ff 	mov.w	r2, #4294967295
 8009600:	69bb      	ldr	r3, [r7, #24]
 8009602:	fa02 f303 	lsl.w	r3, r2, r3
 8009606:	43da      	mvns	r2, r3
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	401a      	ands	r2, r3
 800960c:	697b      	ldr	r3, [r7, #20]
 800960e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009610:	f04f 31ff 	mov.w	r1, #4294967295
 8009614:	697b      	ldr	r3, [r7, #20]
 8009616:	fa01 f303 	lsl.w	r3, r1, r3
 800961a:	43d9      	mvns	r1, r3
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009620:	4313      	orrs	r3, r2
         );
}
 8009622:	4618      	mov	r0, r3
 8009624:	3724      	adds	r7, #36	; 0x24
 8009626:	46bd      	mov	sp, r7
 8009628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962c:	4770      	bx	lr
	...

08009630 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b082      	sub	sp, #8
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	3b01      	subs	r3, #1
 800963c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009640:	d301      	bcc.n	8009646 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009642:	2301      	movs	r3, #1
 8009644:	e00f      	b.n	8009666 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009646:	4a0a      	ldr	r2, [pc, #40]	; (8009670 <SysTick_Config+0x40>)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	3b01      	subs	r3, #1
 800964c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800964e:	210f      	movs	r1, #15
 8009650:	f04f 30ff 	mov.w	r0, #4294967295
 8009654:	f7ff ff8e 	bl	8009574 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009658:	4b05      	ldr	r3, [pc, #20]	; (8009670 <SysTick_Config+0x40>)
 800965a:	2200      	movs	r2, #0
 800965c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800965e:	4b04      	ldr	r3, [pc, #16]	; (8009670 <SysTick_Config+0x40>)
 8009660:	2207      	movs	r2, #7
 8009662:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009664:	2300      	movs	r3, #0
}
 8009666:	4618      	mov	r0, r3
 8009668:	3708      	adds	r7, #8
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}
 800966e:	bf00      	nop
 8009670:	e000e010 	.word	0xe000e010

08009674 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b082      	sub	sp, #8
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	f7ff ff29 	bl	80094d4 <__NVIC_SetPriorityGrouping>
}
 8009682:	bf00      	nop
 8009684:	3708      	adds	r7, #8
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}

0800968a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800968a:	b580      	push	{r7, lr}
 800968c:	b086      	sub	sp, #24
 800968e:	af00      	add	r7, sp, #0
 8009690:	4603      	mov	r3, r0
 8009692:	60b9      	str	r1, [r7, #8]
 8009694:	607a      	str	r2, [r7, #4]
 8009696:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009698:	2300      	movs	r3, #0
 800969a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800969c:	f7ff ff3e 	bl	800951c <__NVIC_GetPriorityGrouping>
 80096a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80096a2:	687a      	ldr	r2, [r7, #4]
 80096a4:	68b9      	ldr	r1, [r7, #8]
 80096a6:	6978      	ldr	r0, [r7, #20]
 80096a8:	f7ff ff8e 	bl	80095c8 <NVIC_EncodePriority>
 80096ac:	4602      	mov	r2, r0
 80096ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80096b2:	4611      	mov	r1, r2
 80096b4:	4618      	mov	r0, r3
 80096b6:	f7ff ff5d 	bl	8009574 <__NVIC_SetPriority>
}
 80096ba:	bf00      	nop
 80096bc:	3718      	adds	r7, #24
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}

080096c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80096c2:	b580      	push	{r7, lr}
 80096c4:	b082      	sub	sp, #8
 80096c6:	af00      	add	r7, sp, #0
 80096c8:	4603      	mov	r3, r0
 80096ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80096cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80096d0:	4618      	mov	r0, r3
 80096d2:	f7ff ff31 	bl	8009538 <__NVIC_EnableIRQ>
}
 80096d6:	bf00      	nop
 80096d8:	3708      	adds	r7, #8
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}

080096de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80096de:	b580      	push	{r7, lr}
 80096e0:	b082      	sub	sp, #8
 80096e2:	af00      	add	r7, sp, #0
 80096e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	f7ff ffa2 	bl	8009630 <SysTick_Config>
 80096ec:	4603      	mov	r3, r0
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	3708      	adds	r7, #8
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}

080096f6 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80096f6:	b580      	push	{r7, lr}
 80096f8:	b082      	sub	sp, #8
 80096fa:	af00      	add	r7, sp, #0
 80096fc:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d101      	bne.n	8009708 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8009704:	2301      	movs	r3, #1
 8009706:	e00e      	b.n	8009726 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	795b      	ldrb	r3, [r3, #5]
 800970c:	b2db      	uxtb	r3, r3
 800970e:	2b00      	cmp	r3, #0
 8009710:	d105      	bne.n	800971e <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	2200      	movs	r2, #0
 8009716:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f7f9 fd7d 	bl	8003218 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2201      	movs	r2, #1
 8009722:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8009724:	2300      	movs	r3, #0
}
 8009726:	4618      	mov	r0, r3
 8009728:	3708      	adds	r7, #8
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}
	...

08009730 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b086      	sub	sp, #24
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8009738:	2300      	movs	r3, #0
 800973a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800973c:	f7ff fad2 	bl	8008ce4 <HAL_GetTick>
 8009740:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d101      	bne.n	800974c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8009748:	2301      	movs	r3, #1
 800974a:	e099      	b.n	8009880 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2200      	movs	r2, #0
 8009750:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2202      	movs	r2, #2
 8009758:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	681a      	ldr	r2, [r3, #0]
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	f022 0201 	bic.w	r2, r2, #1
 800976a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800976c:	e00f      	b.n	800978e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800976e:	f7ff fab9 	bl	8008ce4 <HAL_GetTick>
 8009772:	4602      	mov	r2, r0
 8009774:	693b      	ldr	r3, [r7, #16]
 8009776:	1ad3      	subs	r3, r2, r3
 8009778:	2b05      	cmp	r3, #5
 800977a:	d908      	bls.n	800978e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2220      	movs	r2, #32
 8009780:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2203      	movs	r2, #3
 8009786:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800978a:	2303      	movs	r3, #3
 800978c:	e078      	b.n	8009880 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	f003 0301 	and.w	r3, r3, #1
 8009798:	2b00      	cmp	r3, #0
 800979a:	d1e8      	bne.n	800976e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80097a4:	697a      	ldr	r2, [r7, #20]
 80097a6:	4b38      	ldr	r3, [pc, #224]	; (8009888 <HAL_DMA_Init+0x158>)
 80097a8:	4013      	ands	r3, r2
 80097aa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	685a      	ldr	r2, [r3, #4]
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	689b      	ldr	r3, [r3, #8]
 80097b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80097ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	691b      	ldr	r3, [r3, #16]
 80097c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80097c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	699b      	ldr	r3, [r3, #24]
 80097cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80097d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	6a1b      	ldr	r3, [r3, #32]
 80097d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80097da:	697a      	ldr	r2, [r7, #20]
 80097dc:	4313      	orrs	r3, r2
 80097de:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097e4:	2b04      	cmp	r3, #4
 80097e6:	d107      	bne.n	80097f8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097f0:	4313      	orrs	r3, r2
 80097f2:	697a      	ldr	r2, [r7, #20]
 80097f4:	4313      	orrs	r3, r2
 80097f6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	697a      	ldr	r2, [r7, #20]
 80097fe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	695b      	ldr	r3, [r3, #20]
 8009806:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8009808:	697b      	ldr	r3, [r7, #20]
 800980a:	f023 0307 	bic.w	r3, r3, #7
 800980e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009814:	697a      	ldr	r2, [r7, #20]
 8009816:	4313      	orrs	r3, r2
 8009818:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800981e:	2b04      	cmp	r3, #4
 8009820:	d117      	bne.n	8009852 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009826:	697a      	ldr	r2, [r7, #20]
 8009828:	4313      	orrs	r3, r2
 800982a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009830:	2b00      	cmp	r3, #0
 8009832:	d00e      	beq.n	8009852 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f000 f9e9 	bl	8009c0c <DMA_CheckFifoParam>
 800983a:	4603      	mov	r3, r0
 800983c:	2b00      	cmp	r3, #0
 800983e:	d008      	beq.n	8009852 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2240      	movs	r2, #64	; 0x40
 8009844:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	2201      	movs	r2, #1
 800984a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800984e:	2301      	movs	r3, #1
 8009850:	e016      	b.n	8009880 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	697a      	ldr	r2, [r7, #20]
 8009858:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f000 f9a0 	bl	8009ba0 <DMA_CalcBaseAndBitshift>
 8009860:	4603      	mov	r3, r0
 8009862:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009868:	223f      	movs	r2, #63	; 0x3f
 800986a:	409a      	lsls	r2, r3
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2200      	movs	r2, #0
 8009874:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2201      	movs	r2, #1
 800987a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800987e:	2300      	movs	r3, #0
}
 8009880:	4618      	mov	r0, r3
 8009882:	3718      	adds	r7, #24
 8009884:	46bd      	mov	sp, r7
 8009886:	bd80      	pop	{r7, pc}
 8009888:	f010803f 	.word	0xf010803f

0800988c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b086      	sub	sp, #24
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8009894:	2300      	movs	r3, #0
 8009896:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8009898:	4b92      	ldr	r3, [pc, #584]	; (8009ae4 <HAL_DMA_IRQHandler+0x258>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	4a92      	ldr	r2, [pc, #584]	; (8009ae8 <HAL_DMA_IRQHandler+0x25c>)
 800989e:	fba2 2303 	umull	r2, r3, r2, r3
 80098a2:	0a9b      	lsrs	r3, r3, #10
 80098a4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098aa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80098ac:	693b      	ldr	r3, [r7, #16]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098b6:	2208      	movs	r2, #8
 80098b8:	409a      	lsls	r2, r3
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	4013      	ands	r3, r2
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d01a      	beq.n	80098f8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f003 0304 	and.w	r3, r3, #4
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d013      	beq.n	80098f8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	681a      	ldr	r2, [r3, #0]
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f022 0204 	bic.w	r2, r2, #4
 80098de:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098e4:	2208      	movs	r2, #8
 80098e6:	409a      	lsls	r2, r3
 80098e8:	693b      	ldr	r3, [r7, #16]
 80098ea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098f0:	f043 0201 	orr.w	r2, r3, #1
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098fc:	2201      	movs	r2, #1
 80098fe:	409a      	lsls	r2, r3
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	4013      	ands	r3, r2
 8009904:	2b00      	cmp	r3, #0
 8009906:	d012      	beq.n	800992e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	695b      	ldr	r3, [r3, #20]
 800990e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009912:	2b00      	cmp	r3, #0
 8009914:	d00b      	beq.n	800992e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800991a:	2201      	movs	r2, #1
 800991c:	409a      	lsls	r2, r3
 800991e:	693b      	ldr	r3, [r7, #16]
 8009920:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009926:	f043 0202 	orr.w	r2, r3, #2
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009932:	2204      	movs	r2, #4
 8009934:	409a      	lsls	r2, r3
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	4013      	ands	r3, r2
 800993a:	2b00      	cmp	r3, #0
 800993c:	d012      	beq.n	8009964 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f003 0302 	and.w	r3, r3, #2
 8009948:	2b00      	cmp	r3, #0
 800994a:	d00b      	beq.n	8009964 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009950:	2204      	movs	r2, #4
 8009952:	409a      	lsls	r2, r3
 8009954:	693b      	ldr	r3, [r7, #16]
 8009956:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800995c:	f043 0204 	orr.w	r2, r3, #4
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009968:	2210      	movs	r2, #16
 800996a:	409a      	lsls	r2, r3
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	4013      	ands	r3, r2
 8009970:	2b00      	cmp	r3, #0
 8009972:	d043      	beq.n	80099fc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	f003 0308 	and.w	r3, r3, #8
 800997e:	2b00      	cmp	r3, #0
 8009980:	d03c      	beq.n	80099fc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009986:	2210      	movs	r2, #16
 8009988:	409a      	lsls	r2, r3
 800998a:	693b      	ldr	r3, [r7, #16]
 800998c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009998:	2b00      	cmp	r3, #0
 800999a:	d018      	beq.n	80099ce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d108      	bne.n	80099bc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d024      	beq.n	80099fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099b6:	6878      	ldr	r0, [r7, #4]
 80099b8:	4798      	blx	r3
 80099ba:	e01f      	b.n	80099fc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d01b      	beq.n	80099fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	4798      	blx	r3
 80099cc:	e016      	b.n	80099fc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d107      	bne.n	80099ec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	681a      	ldr	r2, [r3, #0]
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f022 0208 	bic.w	r2, r2, #8
 80099ea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d003      	beq.n	80099fc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a00:	2220      	movs	r2, #32
 8009a02:	409a      	lsls	r2, r3
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	4013      	ands	r3, r2
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	f000 808e 	beq.w	8009b2a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	f003 0310 	and.w	r3, r3, #16
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	f000 8086 	beq.w	8009b2a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a22:	2220      	movs	r2, #32
 8009a24:	409a      	lsls	r2, r3
 8009a26:	693b      	ldr	r3, [r7, #16]
 8009a28:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009a30:	b2db      	uxtb	r3, r3
 8009a32:	2b05      	cmp	r3, #5
 8009a34:	d136      	bne.n	8009aa4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	681a      	ldr	r2, [r3, #0]
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f022 0216 	bic.w	r2, r2, #22
 8009a44:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	695a      	ldr	r2, [r3, #20]
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009a54:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d103      	bne.n	8009a66 <HAL_DMA_IRQHandler+0x1da>
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d007      	beq.n	8009a76 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	681a      	ldr	r2, [r3, #0]
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	f022 0208 	bic.w	r2, r2, #8
 8009a74:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a7a:	223f      	movs	r2, #63	; 0x3f
 8009a7c:	409a      	lsls	r2, r3
 8009a7e:	693b      	ldr	r3, [r7, #16]
 8009a80:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2200      	movs	r2, #0
 8009a86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	2201      	movs	r2, #1
 8009a8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d07d      	beq.n	8009b96 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	4798      	blx	r3
        }
        return;
 8009aa2:	e078      	b.n	8009b96 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d01c      	beq.n	8009aec <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d108      	bne.n	8009ad2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d030      	beq.n	8009b2a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	4798      	blx	r3
 8009ad0:	e02b      	b.n	8009b2a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d027      	beq.n	8009b2a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	4798      	blx	r3
 8009ae2:	e022      	b.n	8009b2a <HAL_DMA_IRQHandler+0x29e>
 8009ae4:	200011c4 	.word	0x200011c4
 8009ae8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d10f      	bne.n	8009b1a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	681a      	ldr	r2, [r3, #0]
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	f022 0210 	bic.w	r2, r2, #16
 8009b08:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2201      	movs	r2, #1
 8009b16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d003      	beq.n	8009b2a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d032      	beq.n	8009b98 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b36:	f003 0301 	and.w	r3, r3, #1
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d022      	beq.n	8009b84 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2205      	movs	r2, #5
 8009b42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	681a      	ldr	r2, [r3, #0]
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f022 0201 	bic.w	r2, r2, #1
 8009b54:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8009b56:	68bb      	ldr	r3, [r7, #8]
 8009b58:	3301      	adds	r3, #1
 8009b5a:	60bb      	str	r3, [r7, #8]
 8009b5c:	697a      	ldr	r2, [r7, #20]
 8009b5e:	429a      	cmp	r2, r3
 8009b60:	d307      	bcc.n	8009b72 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f003 0301 	and.w	r3, r3, #1
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d1f2      	bne.n	8009b56 <HAL_DMA_IRQHandler+0x2ca>
 8009b70:	e000      	b.n	8009b74 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8009b72:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2200      	movs	r2, #0
 8009b78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2201      	movs	r2, #1
 8009b80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d005      	beq.n	8009b98 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	4798      	blx	r3
 8009b94:	e000      	b.n	8009b98 <HAL_DMA_IRQHandler+0x30c>
        return;
 8009b96:	bf00      	nop
    }
  }
}
 8009b98:	3718      	adds	r7, #24
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	bd80      	pop	{r7, pc}
 8009b9e:	bf00      	nop

08009ba0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009ba0:	b480      	push	{r7}
 8009ba2:	b085      	sub	sp, #20
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	b2db      	uxtb	r3, r3
 8009bae:	3b10      	subs	r3, #16
 8009bb0:	4a14      	ldr	r2, [pc, #80]	; (8009c04 <DMA_CalcBaseAndBitshift+0x64>)
 8009bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8009bb6:	091b      	lsrs	r3, r3, #4
 8009bb8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8009bba:	4a13      	ldr	r2, [pc, #76]	; (8009c08 <DMA_CalcBaseAndBitshift+0x68>)
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	4413      	add	r3, r2
 8009bc0:	781b      	ldrb	r3, [r3, #0]
 8009bc2:	461a      	mov	r2, r3
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	2b03      	cmp	r3, #3
 8009bcc:	d909      	bls.n	8009be2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8009bd6:	f023 0303 	bic.w	r3, r3, #3
 8009bda:	1d1a      	adds	r2, r3, #4
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	659a      	str	r2, [r3, #88]	; 0x58
 8009be0:	e007      	b.n	8009bf2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8009bea:	f023 0303 	bic.w	r3, r3, #3
 8009bee:	687a      	ldr	r2, [r7, #4]
 8009bf0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	3714      	adds	r7, #20
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c00:	4770      	bx	lr
 8009c02:	bf00      	nop
 8009c04:	aaaaaaab 	.word	0xaaaaaaab
 8009c08:	0801d5cc 	.word	0x0801d5cc

08009c0c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	b085      	sub	sp, #20
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009c14:	2300      	movs	r3, #0
 8009c16:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c1c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	699b      	ldr	r3, [r3, #24]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d11f      	bne.n	8009c66 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8009c26:	68bb      	ldr	r3, [r7, #8]
 8009c28:	2b03      	cmp	r3, #3
 8009c2a:	d855      	bhi.n	8009cd8 <DMA_CheckFifoParam+0xcc>
 8009c2c:	a201      	add	r2, pc, #4	; (adr r2, 8009c34 <DMA_CheckFifoParam+0x28>)
 8009c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c32:	bf00      	nop
 8009c34:	08009c45 	.word	0x08009c45
 8009c38:	08009c57 	.word	0x08009c57
 8009c3c:	08009c45 	.word	0x08009c45
 8009c40:	08009cd9 	.word	0x08009cd9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d045      	beq.n	8009cdc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8009c50:	2301      	movs	r3, #1
 8009c52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009c54:	e042      	b.n	8009cdc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c5a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009c5e:	d13f      	bne.n	8009ce0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8009c60:	2301      	movs	r3, #1
 8009c62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009c64:	e03c      	b.n	8009ce0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	699b      	ldr	r3, [r3, #24]
 8009c6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c6e:	d121      	bne.n	8009cb4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	2b03      	cmp	r3, #3
 8009c74:	d836      	bhi.n	8009ce4 <DMA_CheckFifoParam+0xd8>
 8009c76:	a201      	add	r2, pc, #4	; (adr r2, 8009c7c <DMA_CheckFifoParam+0x70>)
 8009c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c7c:	08009c8d 	.word	0x08009c8d
 8009c80:	08009c93 	.word	0x08009c93
 8009c84:	08009c8d 	.word	0x08009c8d
 8009c88:	08009ca5 	.word	0x08009ca5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	73fb      	strb	r3, [r7, #15]
      break;
 8009c90:	e02f      	b.n	8009cf2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d024      	beq.n	8009ce8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009ca2:	e021      	b.n	8009ce8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ca8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009cac:	d11e      	bne.n	8009cec <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8009cae:	2301      	movs	r3, #1
 8009cb0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8009cb2:	e01b      	b.n	8009cec <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8009cb4:	68bb      	ldr	r3, [r7, #8]
 8009cb6:	2b02      	cmp	r3, #2
 8009cb8:	d902      	bls.n	8009cc0 <DMA_CheckFifoParam+0xb4>
 8009cba:	2b03      	cmp	r3, #3
 8009cbc:	d003      	beq.n	8009cc6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8009cbe:	e018      	b.n	8009cf2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8009cc0:	2301      	movs	r3, #1
 8009cc2:	73fb      	strb	r3, [r7, #15]
      break;
 8009cc4:	e015      	b.n	8009cf2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d00e      	beq.n	8009cf0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8009cd2:	2301      	movs	r3, #1
 8009cd4:	73fb      	strb	r3, [r7, #15]
      break;
 8009cd6:	e00b      	b.n	8009cf0 <DMA_CheckFifoParam+0xe4>
      break;
 8009cd8:	bf00      	nop
 8009cda:	e00a      	b.n	8009cf2 <DMA_CheckFifoParam+0xe6>
      break;
 8009cdc:	bf00      	nop
 8009cde:	e008      	b.n	8009cf2 <DMA_CheckFifoParam+0xe6>
      break;
 8009ce0:	bf00      	nop
 8009ce2:	e006      	b.n	8009cf2 <DMA_CheckFifoParam+0xe6>
      break;
 8009ce4:	bf00      	nop
 8009ce6:	e004      	b.n	8009cf2 <DMA_CheckFifoParam+0xe6>
      break;
 8009ce8:	bf00      	nop
 8009cea:	e002      	b.n	8009cf2 <DMA_CheckFifoParam+0xe6>
      break;   
 8009cec:	bf00      	nop
 8009cee:	e000      	b.n	8009cf2 <DMA_CheckFifoParam+0xe6>
      break;
 8009cf0:	bf00      	nop
    }
  } 
  
  return status; 
 8009cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	3714      	adds	r7, #20
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfe:	4770      	bx	lr

08009d00 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8009d00:	b480      	push	{r7}
 8009d02:	b087      	sub	sp, #28
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	60f8      	str	r0, [r7, #12]
 8009d08:	460b      	mov	r3, r1
 8009d0a:	607a      	str	r2, [r7, #4]
 8009d0c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8009d0e:	2300      	movs	r3, #0
 8009d10:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8009d12:	7afb      	ldrb	r3, [r7, #11]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d103      	bne.n	8009d20 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	687a      	ldr	r2, [r7, #4]
 8009d1c:	605a      	str	r2, [r3, #4]
      break;
 8009d1e:	e002      	b.n	8009d26 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8009d20:	2301      	movs	r3, #1
 8009d22:	75fb      	strb	r3, [r7, #23]
      break;
 8009d24:	bf00      	nop
  }

  return status;
 8009d26:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d28:	4618      	mov	r0, r3
 8009d2a:	371c      	adds	r7, #28
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d32:	4770      	bx	lr

08009d34 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8009d34:	b480      	push	{r7}
 8009d36:	b083      	sub	sp, #12
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
 8009d3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d101      	bne.n	8009d48 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8009d44:	2301      	movs	r3, #1
 8009d46:	e003      	b.n	8009d50 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	683a      	ldr	r2, [r7, #0]
 8009d4c:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8009d4e:	2300      	movs	r3, #0
  }
}
 8009d50:	4618      	mov	r0, r3
 8009d52:	370c      	adds	r7, #12
 8009d54:	46bd      	mov	sp, r7
 8009d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5a:	4770      	bx	lr

08009d5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009d5c:	b480      	push	{r7}
 8009d5e:	b089      	sub	sp, #36	; 0x24
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
 8009d64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8009d66:	2300      	movs	r3, #0
 8009d68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8009d6e:	2300      	movs	r3, #0
 8009d70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009d72:	2300      	movs	r3, #0
 8009d74:	61fb      	str	r3, [r7, #28]
 8009d76:	e159      	b.n	800a02c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009d78:	2201      	movs	r2, #1
 8009d7a:	69fb      	ldr	r3, [r7, #28]
 8009d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8009d80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	697a      	ldr	r2, [r7, #20]
 8009d88:	4013      	ands	r3, r2
 8009d8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8009d8c:	693a      	ldr	r2, [r7, #16]
 8009d8e:	697b      	ldr	r3, [r7, #20]
 8009d90:	429a      	cmp	r2, r3
 8009d92:	f040 8148 	bne.w	800a026 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	685b      	ldr	r3, [r3, #4]
 8009d9a:	2b01      	cmp	r3, #1
 8009d9c:	d00b      	beq.n	8009db6 <HAL_GPIO_Init+0x5a>
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	685b      	ldr	r3, [r3, #4]
 8009da2:	2b02      	cmp	r3, #2
 8009da4:	d007      	beq.n	8009db6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009daa:	2b11      	cmp	r3, #17
 8009dac:	d003      	beq.n	8009db6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	685b      	ldr	r3, [r3, #4]
 8009db2:	2b12      	cmp	r3, #18
 8009db4:	d130      	bne.n	8009e18 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	689b      	ldr	r3, [r3, #8]
 8009dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009dbc:	69fb      	ldr	r3, [r7, #28]
 8009dbe:	005b      	lsls	r3, r3, #1
 8009dc0:	2203      	movs	r2, #3
 8009dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8009dc6:	43db      	mvns	r3, r3
 8009dc8:	69ba      	ldr	r2, [r7, #24]
 8009dca:	4013      	ands	r3, r2
 8009dcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	68da      	ldr	r2, [r3, #12]
 8009dd2:	69fb      	ldr	r3, [r7, #28]
 8009dd4:	005b      	lsls	r3, r3, #1
 8009dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8009dda:	69ba      	ldr	r2, [r7, #24]
 8009ddc:	4313      	orrs	r3, r2
 8009dde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	69ba      	ldr	r2, [r7, #24]
 8009de4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	685b      	ldr	r3, [r3, #4]
 8009dea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009dec:	2201      	movs	r2, #1
 8009dee:	69fb      	ldr	r3, [r7, #28]
 8009df0:	fa02 f303 	lsl.w	r3, r2, r3
 8009df4:	43db      	mvns	r3, r3
 8009df6:	69ba      	ldr	r2, [r7, #24]
 8009df8:	4013      	ands	r3, r2
 8009dfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	685b      	ldr	r3, [r3, #4]
 8009e00:	091b      	lsrs	r3, r3, #4
 8009e02:	f003 0201 	and.w	r2, r3, #1
 8009e06:	69fb      	ldr	r3, [r7, #28]
 8009e08:	fa02 f303 	lsl.w	r3, r2, r3
 8009e0c:	69ba      	ldr	r2, [r7, #24]
 8009e0e:	4313      	orrs	r3, r2
 8009e10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	69ba      	ldr	r2, [r7, #24]
 8009e16:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	68db      	ldr	r3, [r3, #12]
 8009e1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009e1e:	69fb      	ldr	r3, [r7, #28]
 8009e20:	005b      	lsls	r3, r3, #1
 8009e22:	2203      	movs	r2, #3
 8009e24:	fa02 f303 	lsl.w	r3, r2, r3
 8009e28:	43db      	mvns	r3, r3
 8009e2a:	69ba      	ldr	r2, [r7, #24]
 8009e2c:	4013      	ands	r3, r2
 8009e2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	689a      	ldr	r2, [r3, #8]
 8009e34:	69fb      	ldr	r3, [r7, #28]
 8009e36:	005b      	lsls	r3, r3, #1
 8009e38:	fa02 f303 	lsl.w	r3, r2, r3
 8009e3c:	69ba      	ldr	r2, [r7, #24]
 8009e3e:	4313      	orrs	r3, r2
 8009e40:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	69ba      	ldr	r2, [r7, #24]
 8009e46:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	685b      	ldr	r3, [r3, #4]
 8009e4c:	2b02      	cmp	r3, #2
 8009e4e:	d003      	beq.n	8009e58 <HAL_GPIO_Init+0xfc>
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	685b      	ldr	r3, [r3, #4]
 8009e54:	2b12      	cmp	r3, #18
 8009e56:	d123      	bne.n	8009ea0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009e58:	69fb      	ldr	r3, [r7, #28]
 8009e5a:	08da      	lsrs	r2, r3, #3
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	3208      	adds	r2, #8
 8009e60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8009e66:	69fb      	ldr	r3, [r7, #28]
 8009e68:	f003 0307 	and.w	r3, r3, #7
 8009e6c:	009b      	lsls	r3, r3, #2
 8009e6e:	220f      	movs	r2, #15
 8009e70:	fa02 f303 	lsl.w	r3, r2, r3
 8009e74:	43db      	mvns	r3, r3
 8009e76:	69ba      	ldr	r2, [r7, #24]
 8009e78:	4013      	ands	r3, r2
 8009e7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	691a      	ldr	r2, [r3, #16]
 8009e80:	69fb      	ldr	r3, [r7, #28]
 8009e82:	f003 0307 	and.w	r3, r3, #7
 8009e86:	009b      	lsls	r3, r3, #2
 8009e88:	fa02 f303 	lsl.w	r3, r2, r3
 8009e8c:	69ba      	ldr	r2, [r7, #24]
 8009e8e:	4313      	orrs	r3, r2
 8009e90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009e92:	69fb      	ldr	r3, [r7, #28]
 8009e94:	08da      	lsrs	r2, r3, #3
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	3208      	adds	r2, #8
 8009e9a:	69b9      	ldr	r1, [r7, #24]
 8009e9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009ea6:	69fb      	ldr	r3, [r7, #28]
 8009ea8:	005b      	lsls	r3, r3, #1
 8009eaa:	2203      	movs	r2, #3
 8009eac:	fa02 f303 	lsl.w	r3, r2, r3
 8009eb0:	43db      	mvns	r3, r3
 8009eb2:	69ba      	ldr	r2, [r7, #24]
 8009eb4:	4013      	ands	r3, r2
 8009eb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	685b      	ldr	r3, [r3, #4]
 8009ebc:	f003 0203 	and.w	r2, r3, #3
 8009ec0:	69fb      	ldr	r3, [r7, #28]
 8009ec2:	005b      	lsls	r3, r3, #1
 8009ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8009ec8:	69ba      	ldr	r2, [r7, #24]
 8009eca:	4313      	orrs	r3, r2
 8009ecc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	69ba      	ldr	r2, [r7, #24]
 8009ed2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	685b      	ldr	r3, [r3, #4]
 8009ed8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	f000 80a2 	beq.w	800a026 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	60fb      	str	r3, [r7, #12]
 8009ee6:	4b56      	ldr	r3, [pc, #344]	; (800a040 <HAL_GPIO_Init+0x2e4>)
 8009ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009eea:	4a55      	ldr	r2, [pc, #340]	; (800a040 <HAL_GPIO_Init+0x2e4>)
 8009eec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009ef0:	6453      	str	r3, [r2, #68]	; 0x44
 8009ef2:	4b53      	ldr	r3, [pc, #332]	; (800a040 <HAL_GPIO_Init+0x2e4>)
 8009ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ef6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009efa:	60fb      	str	r3, [r7, #12]
 8009efc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009efe:	4a51      	ldr	r2, [pc, #324]	; (800a044 <HAL_GPIO_Init+0x2e8>)
 8009f00:	69fb      	ldr	r3, [r7, #28]
 8009f02:	089b      	lsrs	r3, r3, #2
 8009f04:	3302      	adds	r3, #2
 8009f06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009f0c:	69fb      	ldr	r3, [r7, #28]
 8009f0e:	f003 0303 	and.w	r3, r3, #3
 8009f12:	009b      	lsls	r3, r3, #2
 8009f14:	220f      	movs	r2, #15
 8009f16:	fa02 f303 	lsl.w	r3, r2, r3
 8009f1a:	43db      	mvns	r3, r3
 8009f1c:	69ba      	ldr	r2, [r7, #24]
 8009f1e:	4013      	ands	r3, r2
 8009f20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	4a48      	ldr	r2, [pc, #288]	; (800a048 <HAL_GPIO_Init+0x2ec>)
 8009f26:	4293      	cmp	r3, r2
 8009f28:	d019      	beq.n	8009f5e <HAL_GPIO_Init+0x202>
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	4a47      	ldr	r2, [pc, #284]	; (800a04c <HAL_GPIO_Init+0x2f0>)
 8009f2e:	4293      	cmp	r3, r2
 8009f30:	d013      	beq.n	8009f5a <HAL_GPIO_Init+0x1fe>
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	4a46      	ldr	r2, [pc, #280]	; (800a050 <HAL_GPIO_Init+0x2f4>)
 8009f36:	4293      	cmp	r3, r2
 8009f38:	d00d      	beq.n	8009f56 <HAL_GPIO_Init+0x1fa>
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	4a45      	ldr	r2, [pc, #276]	; (800a054 <HAL_GPIO_Init+0x2f8>)
 8009f3e:	4293      	cmp	r3, r2
 8009f40:	d007      	beq.n	8009f52 <HAL_GPIO_Init+0x1f6>
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	4a44      	ldr	r2, [pc, #272]	; (800a058 <HAL_GPIO_Init+0x2fc>)
 8009f46:	4293      	cmp	r3, r2
 8009f48:	d101      	bne.n	8009f4e <HAL_GPIO_Init+0x1f2>
 8009f4a:	2304      	movs	r3, #4
 8009f4c:	e008      	b.n	8009f60 <HAL_GPIO_Init+0x204>
 8009f4e:	2307      	movs	r3, #7
 8009f50:	e006      	b.n	8009f60 <HAL_GPIO_Init+0x204>
 8009f52:	2303      	movs	r3, #3
 8009f54:	e004      	b.n	8009f60 <HAL_GPIO_Init+0x204>
 8009f56:	2302      	movs	r3, #2
 8009f58:	e002      	b.n	8009f60 <HAL_GPIO_Init+0x204>
 8009f5a:	2301      	movs	r3, #1
 8009f5c:	e000      	b.n	8009f60 <HAL_GPIO_Init+0x204>
 8009f5e:	2300      	movs	r3, #0
 8009f60:	69fa      	ldr	r2, [r7, #28]
 8009f62:	f002 0203 	and.w	r2, r2, #3
 8009f66:	0092      	lsls	r2, r2, #2
 8009f68:	4093      	lsls	r3, r2
 8009f6a:	69ba      	ldr	r2, [r7, #24]
 8009f6c:	4313      	orrs	r3, r2
 8009f6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009f70:	4934      	ldr	r1, [pc, #208]	; (800a044 <HAL_GPIO_Init+0x2e8>)
 8009f72:	69fb      	ldr	r3, [r7, #28]
 8009f74:	089b      	lsrs	r3, r3, #2
 8009f76:	3302      	adds	r3, #2
 8009f78:	69ba      	ldr	r2, [r7, #24]
 8009f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009f7e:	4b37      	ldr	r3, [pc, #220]	; (800a05c <HAL_GPIO_Init+0x300>)
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009f84:	693b      	ldr	r3, [r7, #16]
 8009f86:	43db      	mvns	r3, r3
 8009f88:	69ba      	ldr	r2, [r7, #24]
 8009f8a:	4013      	ands	r3, r2
 8009f8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	685b      	ldr	r3, [r3, #4]
 8009f92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d003      	beq.n	8009fa2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8009f9a:	69ba      	ldr	r2, [r7, #24]
 8009f9c:	693b      	ldr	r3, [r7, #16]
 8009f9e:	4313      	orrs	r3, r2
 8009fa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009fa2:	4a2e      	ldr	r2, [pc, #184]	; (800a05c <HAL_GPIO_Init+0x300>)
 8009fa4:	69bb      	ldr	r3, [r7, #24]
 8009fa6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8009fa8:	4b2c      	ldr	r3, [pc, #176]	; (800a05c <HAL_GPIO_Init+0x300>)
 8009faa:	685b      	ldr	r3, [r3, #4]
 8009fac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009fae:	693b      	ldr	r3, [r7, #16]
 8009fb0:	43db      	mvns	r3, r3
 8009fb2:	69ba      	ldr	r2, [r7, #24]
 8009fb4:	4013      	ands	r3, r2
 8009fb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	685b      	ldr	r3, [r3, #4]
 8009fbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d003      	beq.n	8009fcc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8009fc4:	69ba      	ldr	r2, [r7, #24]
 8009fc6:	693b      	ldr	r3, [r7, #16]
 8009fc8:	4313      	orrs	r3, r2
 8009fca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009fcc:	4a23      	ldr	r2, [pc, #140]	; (800a05c <HAL_GPIO_Init+0x300>)
 8009fce:	69bb      	ldr	r3, [r7, #24]
 8009fd0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009fd2:	4b22      	ldr	r3, [pc, #136]	; (800a05c <HAL_GPIO_Init+0x300>)
 8009fd4:	689b      	ldr	r3, [r3, #8]
 8009fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009fd8:	693b      	ldr	r3, [r7, #16]
 8009fda:	43db      	mvns	r3, r3
 8009fdc:	69ba      	ldr	r2, [r7, #24]
 8009fde:	4013      	ands	r3, r2
 8009fe0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009fe2:	683b      	ldr	r3, [r7, #0]
 8009fe4:	685b      	ldr	r3, [r3, #4]
 8009fe6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d003      	beq.n	8009ff6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8009fee:	69ba      	ldr	r2, [r7, #24]
 8009ff0:	693b      	ldr	r3, [r7, #16]
 8009ff2:	4313      	orrs	r3, r2
 8009ff4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009ff6:	4a19      	ldr	r2, [pc, #100]	; (800a05c <HAL_GPIO_Init+0x300>)
 8009ff8:	69bb      	ldr	r3, [r7, #24]
 8009ffa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009ffc:	4b17      	ldr	r3, [pc, #92]	; (800a05c <HAL_GPIO_Init+0x300>)
 8009ffe:	68db      	ldr	r3, [r3, #12]
 800a000:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a002:	693b      	ldr	r3, [r7, #16]
 800a004:	43db      	mvns	r3, r3
 800a006:	69ba      	ldr	r2, [r7, #24]
 800a008:	4013      	ands	r3, r2
 800a00a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	685b      	ldr	r3, [r3, #4]
 800a010:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a014:	2b00      	cmp	r3, #0
 800a016:	d003      	beq.n	800a020 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800a018:	69ba      	ldr	r2, [r7, #24]
 800a01a:	693b      	ldr	r3, [r7, #16]
 800a01c:	4313      	orrs	r3, r2
 800a01e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800a020:	4a0e      	ldr	r2, [pc, #56]	; (800a05c <HAL_GPIO_Init+0x300>)
 800a022:	69bb      	ldr	r3, [r7, #24]
 800a024:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a026:	69fb      	ldr	r3, [r7, #28]
 800a028:	3301      	adds	r3, #1
 800a02a:	61fb      	str	r3, [r7, #28]
 800a02c:	69fb      	ldr	r3, [r7, #28]
 800a02e:	2b0f      	cmp	r3, #15
 800a030:	f67f aea2 	bls.w	8009d78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800a034:	bf00      	nop
 800a036:	3724      	adds	r7, #36	; 0x24
 800a038:	46bd      	mov	sp, r7
 800a03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03e:	4770      	bx	lr
 800a040:	40023800 	.word	0x40023800
 800a044:	40013800 	.word	0x40013800
 800a048:	40020000 	.word	0x40020000
 800a04c:	40020400 	.word	0x40020400
 800a050:	40020800 	.word	0x40020800
 800a054:	40020c00 	.word	0x40020c00
 800a058:	40021000 	.word	0x40021000
 800a05c:	40013c00 	.word	0x40013c00

0800a060 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800a060:	b480      	push	{r7}
 800a062:	b087      	sub	sp, #28
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
 800a068:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800a06a:	2300      	movs	r3, #0
 800a06c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800a06e:	2300      	movs	r3, #0
 800a070:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800a072:	2300      	movs	r3, #0
 800a074:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a076:	2300      	movs	r3, #0
 800a078:	617b      	str	r3, [r7, #20]
 800a07a:	e0bb      	b.n	800a1f4 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800a07c:	2201      	movs	r2, #1
 800a07e:	697b      	ldr	r3, [r7, #20]
 800a080:	fa02 f303 	lsl.w	r3, r2, r3
 800a084:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800a086:	683a      	ldr	r2, [r7, #0]
 800a088:	693b      	ldr	r3, [r7, #16]
 800a08a:	4013      	ands	r3, r2
 800a08c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800a08e:	68fa      	ldr	r2, [r7, #12]
 800a090:	693b      	ldr	r3, [r7, #16]
 800a092:	429a      	cmp	r2, r3
 800a094:	f040 80ab 	bne.w	800a1ee <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800a098:	4a5b      	ldr	r2, [pc, #364]	; (800a208 <HAL_GPIO_DeInit+0x1a8>)
 800a09a:	697b      	ldr	r3, [r7, #20]
 800a09c:	089b      	lsrs	r3, r3, #2
 800a09e:	3302      	adds	r3, #2
 800a0a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a0a4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800a0a6:	697b      	ldr	r3, [r7, #20]
 800a0a8:	f003 0303 	and.w	r3, r3, #3
 800a0ac:	009b      	lsls	r3, r3, #2
 800a0ae:	220f      	movs	r2, #15
 800a0b0:	fa02 f303 	lsl.w	r3, r2, r3
 800a0b4:	68ba      	ldr	r2, [r7, #8]
 800a0b6:	4013      	ands	r3, r2
 800a0b8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	4a53      	ldr	r2, [pc, #332]	; (800a20c <HAL_GPIO_DeInit+0x1ac>)
 800a0be:	4293      	cmp	r3, r2
 800a0c0:	d019      	beq.n	800a0f6 <HAL_GPIO_DeInit+0x96>
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	4a52      	ldr	r2, [pc, #328]	; (800a210 <HAL_GPIO_DeInit+0x1b0>)
 800a0c6:	4293      	cmp	r3, r2
 800a0c8:	d013      	beq.n	800a0f2 <HAL_GPIO_DeInit+0x92>
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	4a51      	ldr	r2, [pc, #324]	; (800a214 <HAL_GPIO_DeInit+0x1b4>)
 800a0ce:	4293      	cmp	r3, r2
 800a0d0:	d00d      	beq.n	800a0ee <HAL_GPIO_DeInit+0x8e>
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	4a50      	ldr	r2, [pc, #320]	; (800a218 <HAL_GPIO_DeInit+0x1b8>)
 800a0d6:	4293      	cmp	r3, r2
 800a0d8:	d007      	beq.n	800a0ea <HAL_GPIO_DeInit+0x8a>
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	4a4f      	ldr	r2, [pc, #316]	; (800a21c <HAL_GPIO_DeInit+0x1bc>)
 800a0de:	4293      	cmp	r3, r2
 800a0e0:	d101      	bne.n	800a0e6 <HAL_GPIO_DeInit+0x86>
 800a0e2:	2304      	movs	r3, #4
 800a0e4:	e008      	b.n	800a0f8 <HAL_GPIO_DeInit+0x98>
 800a0e6:	2307      	movs	r3, #7
 800a0e8:	e006      	b.n	800a0f8 <HAL_GPIO_DeInit+0x98>
 800a0ea:	2303      	movs	r3, #3
 800a0ec:	e004      	b.n	800a0f8 <HAL_GPIO_DeInit+0x98>
 800a0ee:	2302      	movs	r3, #2
 800a0f0:	e002      	b.n	800a0f8 <HAL_GPIO_DeInit+0x98>
 800a0f2:	2301      	movs	r3, #1
 800a0f4:	e000      	b.n	800a0f8 <HAL_GPIO_DeInit+0x98>
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	697a      	ldr	r2, [r7, #20]
 800a0fa:	f002 0203 	and.w	r2, r2, #3
 800a0fe:	0092      	lsls	r2, r2, #2
 800a100:	4093      	lsls	r3, r2
 800a102:	68ba      	ldr	r2, [r7, #8]
 800a104:	429a      	cmp	r2, r3
 800a106:	d132      	bne.n	800a16e <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800a108:	4b45      	ldr	r3, [pc, #276]	; (800a220 <HAL_GPIO_DeInit+0x1c0>)
 800a10a:	681a      	ldr	r2, [r3, #0]
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	43db      	mvns	r3, r3
 800a110:	4943      	ldr	r1, [pc, #268]	; (800a220 <HAL_GPIO_DeInit+0x1c0>)
 800a112:	4013      	ands	r3, r2
 800a114:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800a116:	4b42      	ldr	r3, [pc, #264]	; (800a220 <HAL_GPIO_DeInit+0x1c0>)
 800a118:	685a      	ldr	r2, [r3, #4]
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	43db      	mvns	r3, r3
 800a11e:	4940      	ldr	r1, [pc, #256]	; (800a220 <HAL_GPIO_DeInit+0x1c0>)
 800a120:	4013      	ands	r3, r2
 800a122:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800a124:	4b3e      	ldr	r3, [pc, #248]	; (800a220 <HAL_GPIO_DeInit+0x1c0>)
 800a126:	689a      	ldr	r2, [r3, #8]
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	43db      	mvns	r3, r3
 800a12c:	493c      	ldr	r1, [pc, #240]	; (800a220 <HAL_GPIO_DeInit+0x1c0>)
 800a12e:	4013      	ands	r3, r2
 800a130:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800a132:	4b3b      	ldr	r3, [pc, #236]	; (800a220 <HAL_GPIO_DeInit+0x1c0>)
 800a134:	68da      	ldr	r2, [r3, #12]
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	43db      	mvns	r3, r3
 800a13a:	4939      	ldr	r1, [pc, #228]	; (800a220 <HAL_GPIO_DeInit+0x1c0>)
 800a13c:	4013      	ands	r3, r2
 800a13e:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800a140:	697b      	ldr	r3, [r7, #20]
 800a142:	f003 0303 	and.w	r3, r3, #3
 800a146:	009b      	lsls	r3, r3, #2
 800a148:	220f      	movs	r2, #15
 800a14a:	fa02 f303 	lsl.w	r3, r2, r3
 800a14e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800a150:	4a2d      	ldr	r2, [pc, #180]	; (800a208 <HAL_GPIO_DeInit+0x1a8>)
 800a152:	697b      	ldr	r3, [r7, #20]
 800a154:	089b      	lsrs	r3, r3, #2
 800a156:	3302      	adds	r3, #2
 800a158:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	43da      	mvns	r2, r3
 800a160:	4829      	ldr	r0, [pc, #164]	; (800a208 <HAL_GPIO_DeInit+0x1a8>)
 800a162:	697b      	ldr	r3, [r7, #20]
 800a164:	089b      	lsrs	r3, r3, #2
 800a166:	400a      	ands	r2, r1
 800a168:	3302      	adds	r3, #2
 800a16a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681a      	ldr	r2, [r3, #0]
 800a172:	697b      	ldr	r3, [r7, #20]
 800a174:	005b      	lsls	r3, r3, #1
 800a176:	2103      	movs	r1, #3
 800a178:	fa01 f303 	lsl.w	r3, r1, r3
 800a17c:	43db      	mvns	r3, r3
 800a17e:	401a      	ands	r2, r3
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800a184:	697b      	ldr	r3, [r7, #20]
 800a186:	08da      	lsrs	r2, r3, #3
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	3208      	adds	r2, #8
 800a18c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a190:	697b      	ldr	r3, [r7, #20]
 800a192:	f003 0307 	and.w	r3, r3, #7
 800a196:	009b      	lsls	r3, r3, #2
 800a198:	220f      	movs	r2, #15
 800a19a:	fa02 f303 	lsl.w	r3, r2, r3
 800a19e:	43db      	mvns	r3, r3
 800a1a0:	697a      	ldr	r2, [r7, #20]
 800a1a2:	08d2      	lsrs	r2, r2, #3
 800a1a4:	4019      	ands	r1, r3
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	3208      	adds	r2, #8
 800a1aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	68da      	ldr	r2, [r3, #12]
 800a1b2:	697b      	ldr	r3, [r7, #20]
 800a1b4:	005b      	lsls	r3, r3, #1
 800a1b6:	2103      	movs	r1, #3
 800a1b8:	fa01 f303 	lsl.w	r3, r1, r3
 800a1bc:	43db      	mvns	r3, r3
 800a1be:	401a      	ands	r2, r3
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	685a      	ldr	r2, [r3, #4]
 800a1c8:	2101      	movs	r1, #1
 800a1ca:	697b      	ldr	r3, [r7, #20]
 800a1cc:	fa01 f303 	lsl.w	r3, r1, r3
 800a1d0:	43db      	mvns	r3, r3
 800a1d2:	401a      	ands	r2, r3
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	689a      	ldr	r2, [r3, #8]
 800a1dc:	697b      	ldr	r3, [r7, #20]
 800a1de:	005b      	lsls	r3, r3, #1
 800a1e0:	2103      	movs	r1, #3
 800a1e2:	fa01 f303 	lsl.w	r3, r1, r3
 800a1e6:	43db      	mvns	r3, r3
 800a1e8:	401a      	ands	r2, r3
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a1ee:	697b      	ldr	r3, [r7, #20]
 800a1f0:	3301      	adds	r3, #1
 800a1f2:	617b      	str	r3, [r7, #20]
 800a1f4:	697b      	ldr	r3, [r7, #20]
 800a1f6:	2b0f      	cmp	r3, #15
 800a1f8:	f67f af40 	bls.w	800a07c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800a1fc:	bf00      	nop
 800a1fe:	371c      	adds	r7, #28
 800a200:	46bd      	mov	sp, r7
 800a202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a206:	4770      	bx	lr
 800a208:	40013800 	.word	0x40013800
 800a20c:	40020000 	.word	0x40020000
 800a210:	40020400 	.word	0x40020400
 800a214:	40020800 	.word	0x40020800
 800a218:	40020c00 	.word	0x40020c00
 800a21c:	40021000 	.word	0x40021000
 800a220:	40013c00 	.word	0x40013c00

0800a224 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a224:	b480      	push	{r7}
 800a226:	b085      	sub	sp, #20
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
 800a22c:	460b      	mov	r3, r1
 800a22e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	691a      	ldr	r2, [r3, #16]
 800a234:	887b      	ldrh	r3, [r7, #2]
 800a236:	4013      	ands	r3, r2
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d002      	beq.n	800a242 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a23c:	2301      	movs	r3, #1
 800a23e:	73fb      	strb	r3, [r7, #15]
 800a240:	e001      	b.n	800a246 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a242:	2300      	movs	r3, #0
 800a244:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a246:	7bfb      	ldrb	r3, [r7, #15]
}
 800a248:	4618      	mov	r0, r3
 800a24a:	3714      	adds	r7, #20
 800a24c:	46bd      	mov	sp, r7
 800a24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a252:	4770      	bx	lr

0800a254 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a254:	b480      	push	{r7}
 800a256:	b083      	sub	sp, #12
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
 800a25c:	460b      	mov	r3, r1
 800a25e:	807b      	strh	r3, [r7, #2]
 800a260:	4613      	mov	r3, r2
 800a262:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800a264:	787b      	ldrb	r3, [r7, #1]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d003      	beq.n	800a272 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a26a:	887a      	ldrh	r2, [r7, #2]
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800a270:	e003      	b.n	800a27a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800a272:	887b      	ldrh	r3, [r7, #2]
 800a274:	041a      	lsls	r2, r3, #16
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	619a      	str	r2, [r3, #24]
}
 800a27a:	bf00      	nop
 800a27c:	370c      	adds	r7, #12
 800a27e:	46bd      	mov	sp, r7
 800a280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a284:	4770      	bx	lr

0800a286 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a286:	b480      	push	{r7}
 800a288:	b083      	sub	sp, #12
 800a28a:	af00      	add	r7, sp, #0
 800a28c:	6078      	str	r0, [r7, #4]
 800a28e:	460b      	mov	r3, r1
 800a290:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	695a      	ldr	r2, [r3, #20]
 800a296:	887b      	ldrh	r3, [r7, #2]
 800a298:	401a      	ands	r2, r3
 800a29a:	887b      	ldrh	r3, [r7, #2]
 800a29c:	429a      	cmp	r2, r3
 800a29e:	d104      	bne.n	800a2aa <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800a2a0:	887b      	ldrh	r3, [r7, #2]
 800a2a2:	041a      	lsls	r2, r3, #16
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800a2a8:	e002      	b.n	800a2b0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800a2aa:	887a      	ldrh	r2, [r7, #2]
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	619a      	str	r2, [r3, #24]
}
 800a2b0:	bf00      	nop
 800a2b2:	370c      	adds	r7, #12
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ba:	4770      	bx	lr

0800a2bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b084      	sub	sp, #16
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d101      	bne.n	800a2ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a2ca:	2301      	movs	r3, #1
 800a2cc:	e11f      	b.n	800a50e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a2d4:	b2db      	uxtb	r3, r3
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d106      	bne.n	800a2e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2200      	movs	r2, #0
 800a2de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800a2e2:	6878      	ldr	r0, [r7, #4]
 800a2e4:	f000 f951 	bl	800a58a <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2224      	movs	r2, #36	; 0x24
 800a2ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	681a      	ldr	r2, [r3, #0]
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	f022 0201 	bic.w	r2, r2, #1
 800a2fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	681a      	ldr	r2, [r3, #0]
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a30e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	681a      	ldr	r2, [r3, #0]
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a31e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800a320:	f001 fc14 	bl	800bb4c <HAL_RCC_GetPCLK1Freq>
 800a324:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	685b      	ldr	r3, [r3, #4]
 800a32a:	4a7b      	ldr	r2, [pc, #492]	; (800a518 <HAL_I2C_Init+0x25c>)
 800a32c:	4293      	cmp	r3, r2
 800a32e:	d807      	bhi.n	800a340 <HAL_I2C_Init+0x84>
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	4a7a      	ldr	r2, [pc, #488]	; (800a51c <HAL_I2C_Init+0x260>)
 800a334:	4293      	cmp	r3, r2
 800a336:	bf94      	ite	ls
 800a338:	2301      	movls	r3, #1
 800a33a:	2300      	movhi	r3, #0
 800a33c:	b2db      	uxtb	r3, r3
 800a33e:	e006      	b.n	800a34e <HAL_I2C_Init+0x92>
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	4a77      	ldr	r2, [pc, #476]	; (800a520 <HAL_I2C_Init+0x264>)
 800a344:	4293      	cmp	r3, r2
 800a346:	bf94      	ite	ls
 800a348:	2301      	movls	r3, #1
 800a34a:	2300      	movhi	r3, #0
 800a34c:	b2db      	uxtb	r3, r3
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d001      	beq.n	800a356 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800a352:	2301      	movs	r3, #1
 800a354:	e0db      	b.n	800a50e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	4a72      	ldr	r2, [pc, #456]	; (800a524 <HAL_I2C_Init+0x268>)
 800a35a:	fba2 2303 	umull	r2, r3, r2, r3
 800a35e:	0c9b      	lsrs	r3, r3, #18
 800a360:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	685b      	ldr	r3, [r3, #4]
 800a368:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	68ba      	ldr	r2, [r7, #8]
 800a372:	430a      	orrs	r2, r1
 800a374:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	6a1b      	ldr	r3, [r3, #32]
 800a37c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	685b      	ldr	r3, [r3, #4]
 800a384:	4a64      	ldr	r2, [pc, #400]	; (800a518 <HAL_I2C_Init+0x25c>)
 800a386:	4293      	cmp	r3, r2
 800a388:	d802      	bhi.n	800a390 <HAL_I2C_Init+0xd4>
 800a38a:	68bb      	ldr	r3, [r7, #8]
 800a38c:	3301      	adds	r3, #1
 800a38e:	e009      	b.n	800a3a4 <HAL_I2C_Init+0xe8>
 800a390:	68bb      	ldr	r3, [r7, #8]
 800a392:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800a396:	fb02 f303 	mul.w	r3, r2, r3
 800a39a:	4a63      	ldr	r2, [pc, #396]	; (800a528 <HAL_I2C_Init+0x26c>)
 800a39c:	fba2 2303 	umull	r2, r3, r2, r3
 800a3a0:	099b      	lsrs	r3, r3, #6
 800a3a2:	3301      	adds	r3, #1
 800a3a4:	687a      	ldr	r2, [r7, #4]
 800a3a6:	6812      	ldr	r2, [r2, #0]
 800a3a8:	430b      	orrs	r3, r1
 800a3aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	69db      	ldr	r3, [r3, #28]
 800a3b2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800a3b6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	685b      	ldr	r3, [r3, #4]
 800a3be:	4956      	ldr	r1, [pc, #344]	; (800a518 <HAL_I2C_Init+0x25c>)
 800a3c0:	428b      	cmp	r3, r1
 800a3c2:	d80d      	bhi.n	800a3e0 <HAL_I2C_Init+0x124>
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	1e59      	subs	r1, r3, #1
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	685b      	ldr	r3, [r3, #4]
 800a3cc:	005b      	lsls	r3, r3, #1
 800a3ce:	fbb1 f3f3 	udiv	r3, r1, r3
 800a3d2:	3301      	adds	r3, #1
 800a3d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a3d8:	2b04      	cmp	r3, #4
 800a3da:	bf38      	it	cc
 800a3dc:	2304      	movcc	r3, #4
 800a3de:	e04f      	b.n	800a480 <HAL_I2C_Init+0x1c4>
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	689b      	ldr	r3, [r3, #8]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d111      	bne.n	800a40c <HAL_I2C_Init+0x150>
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	1e58      	subs	r0, r3, #1
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	6859      	ldr	r1, [r3, #4]
 800a3f0:	460b      	mov	r3, r1
 800a3f2:	005b      	lsls	r3, r3, #1
 800a3f4:	440b      	add	r3, r1
 800a3f6:	fbb0 f3f3 	udiv	r3, r0, r3
 800a3fa:	3301      	adds	r3, #1
 800a3fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a400:	2b00      	cmp	r3, #0
 800a402:	bf0c      	ite	eq
 800a404:	2301      	moveq	r3, #1
 800a406:	2300      	movne	r3, #0
 800a408:	b2db      	uxtb	r3, r3
 800a40a:	e012      	b.n	800a432 <HAL_I2C_Init+0x176>
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	1e58      	subs	r0, r3, #1
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6859      	ldr	r1, [r3, #4]
 800a414:	460b      	mov	r3, r1
 800a416:	009b      	lsls	r3, r3, #2
 800a418:	440b      	add	r3, r1
 800a41a:	0099      	lsls	r1, r3, #2
 800a41c:	440b      	add	r3, r1
 800a41e:	fbb0 f3f3 	udiv	r3, r0, r3
 800a422:	3301      	adds	r3, #1
 800a424:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a428:	2b00      	cmp	r3, #0
 800a42a:	bf0c      	ite	eq
 800a42c:	2301      	moveq	r3, #1
 800a42e:	2300      	movne	r3, #0
 800a430:	b2db      	uxtb	r3, r3
 800a432:	2b00      	cmp	r3, #0
 800a434:	d001      	beq.n	800a43a <HAL_I2C_Init+0x17e>
 800a436:	2301      	movs	r3, #1
 800a438:	e022      	b.n	800a480 <HAL_I2C_Init+0x1c4>
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	689b      	ldr	r3, [r3, #8]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d10e      	bne.n	800a460 <HAL_I2C_Init+0x1a4>
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	1e58      	subs	r0, r3, #1
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	6859      	ldr	r1, [r3, #4]
 800a44a:	460b      	mov	r3, r1
 800a44c:	005b      	lsls	r3, r3, #1
 800a44e:	440b      	add	r3, r1
 800a450:	fbb0 f3f3 	udiv	r3, r0, r3
 800a454:	3301      	adds	r3, #1
 800a456:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a45a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a45e:	e00f      	b.n	800a480 <HAL_I2C_Init+0x1c4>
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	1e58      	subs	r0, r3, #1
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	6859      	ldr	r1, [r3, #4]
 800a468:	460b      	mov	r3, r1
 800a46a:	009b      	lsls	r3, r3, #2
 800a46c:	440b      	add	r3, r1
 800a46e:	0099      	lsls	r1, r3, #2
 800a470:	440b      	add	r3, r1
 800a472:	fbb0 f3f3 	udiv	r3, r0, r3
 800a476:	3301      	adds	r3, #1
 800a478:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a47c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a480:	6879      	ldr	r1, [r7, #4]
 800a482:	6809      	ldr	r1, [r1, #0]
 800a484:	4313      	orrs	r3, r2
 800a486:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	69da      	ldr	r2, [r3, #28]
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	6a1b      	ldr	r3, [r3, #32]
 800a49a:	431a      	orrs	r2, r3
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	430a      	orrs	r2, r1
 800a4a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	689b      	ldr	r3, [r3, #8]
 800a4aa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800a4ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a4b2:	687a      	ldr	r2, [r7, #4]
 800a4b4:	6911      	ldr	r1, [r2, #16]
 800a4b6:	687a      	ldr	r2, [r7, #4]
 800a4b8:	68d2      	ldr	r2, [r2, #12]
 800a4ba:	4311      	orrs	r1, r2
 800a4bc:	687a      	ldr	r2, [r7, #4]
 800a4be:	6812      	ldr	r2, [r2, #0]
 800a4c0:	430b      	orrs	r3, r1
 800a4c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	68db      	ldr	r3, [r3, #12]
 800a4ca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	695a      	ldr	r2, [r3, #20]
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	699b      	ldr	r3, [r3, #24]
 800a4d6:	431a      	orrs	r2, r3
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	430a      	orrs	r2, r1
 800a4de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	681a      	ldr	r2, [r3, #0]
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f042 0201 	orr.w	r2, r2, #1
 800a4ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	2220      	movs	r2, #32
 800a4fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	2200      	movs	r2, #0
 800a502:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2200      	movs	r2, #0
 800a508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a50c:	2300      	movs	r3, #0
}
 800a50e:	4618      	mov	r0, r3
 800a510:	3710      	adds	r7, #16
 800a512:	46bd      	mov	sp, r7
 800a514:	bd80      	pop	{r7, pc}
 800a516:	bf00      	nop
 800a518:	000186a0 	.word	0x000186a0
 800a51c:	001e847f 	.word	0x001e847f
 800a520:	003d08ff 	.word	0x003d08ff
 800a524:	431bde83 	.word	0x431bde83
 800a528:	10624dd3 	.word	0x10624dd3

0800a52c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b082      	sub	sp, #8
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d101      	bne.n	800a53e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800a53a:	2301      	movs	r3, #1
 800a53c:	e021      	b.n	800a582 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	2224      	movs	r2, #36	; 0x24
 800a542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	681a      	ldr	r2, [r3, #0]
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	f022 0201 	bic.w	r2, r2, #1
 800a554:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800a556:	6878      	ldr	r0, [r7, #4]
 800a558:	f000 f821 	bl	800a59e <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2200      	movs	r2, #0
 800a560:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2200      	movs	r2, #0
 800a566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	2200      	movs	r2, #0
 800a56e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2200      	movs	r2, #0
 800a574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2200      	movs	r2, #0
 800a57c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a580:	2300      	movs	r3, #0
}
 800a582:	4618      	mov	r0, r3
 800a584:	3708      	adds	r7, #8
 800a586:	46bd      	mov	sp, r7
 800a588:	bd80      	pop	{r7, pc}

0800a58a <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800a58a:	b480      	push	{r7}
 800a58c:	b083      	sub	sp, #12
 800a58e:	af00      	add	r7, sp, #0
 800a590:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800a592:	bf00      	nop
 800a594:	370c      	adds	r7, #12
 800a596:	46bd      	mov	sp, r7
 800a598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59c:	4770      	bx	lr

0800a59e <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800a59e:	b480      	push	{r7}
 800a5a0:	b083      	sub	sp, #12
 800a5a2:	af00      	add	r7, sp, #0
 800a5a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800a5a6:	bf00      	nop
 800a5a8:	370c      	adds	r7, #12
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b0:	4770      	bx	lr
	...

0800a5b4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b088      	sub	sp, #32
 800a5b8:	af02      	add	r7, sp, #8
 800a5ba:	60f8      	str	r0, [r7, #12]
 800a5bc:	4608      	mov	r0, r1
 800a5be:	4611      	mov	r1, r2
 800a5c0:	461a      	mov	r2, r3
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	817b      	strh	r3, [r7, #10]
 800a5c6:	460b      	mov	r3, r1
 800a5c8:	813b      	strh	r3, [r7, #8]
 800a5ca:	4613      	mov	r3, r2
 800a5cc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a5ce:	f7fe fb89 	bl	8008ce4 <HAL_GetTick>
 800a5d2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a5da:	b2db      	uxtb	r3, r3
 800a5dc:	2b20      	cmp	r3, #32
 800a5de:	f040 80d9 	bne.w	800a794 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a5e2:	697b      	ldr	r3, [r7, #20]
 800a5e4:	9300      	str	r3, [sp, #0]
 800a5e6:	2319      	movs	r3, #25
 800a5e8:	2201      	movs	r2, #1
 800a5ea:	496d      	ldr	r1, [pc, #436]	; (800a7a0 <HAL_I2C_Mem_Write+0x1ec>)
 800a5ec:	68f8      	ldr	r0, [r7, #12]
 800a5ee:	f000 fc95 	bl	800af1c <I2C_WaitOnFlagUntilTimeout>
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d001      	beq.n	800a5fc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800a5f8:	2302      	movs	r3, #2
 800a5fa:	e0cc      	b.n	800a796 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a602:	2b01      	cmp	r3, #1
 800a604:	d101      	bne.n	800a60a <HAL_I2C_Mem_Write+0x56>
 800a606:	2302      	movs	r3, #2
 800a608:	e0c5      	b.n	800a796 <HAL_I2C_Mem_Write+0x1e2>
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	2201      	movs	r2, #1
 800a60e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	f003 0301 	and.w	r3, r3, #1
 800a61c:	2b01      	cmp	r3, #1
 800a61e:	d007      	beq.n	800a630 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	681a      	ldr	r2, [r3, #0]
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f042 0201 	orr.w	r2, r2, #1
 800a62e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	681a      	ldr	r2, [r3, #0]
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a63e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	2221      	movs	r2, #33	; 0x21
 800a644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	2240      	movs	r2, #64	; 0x40
 800a64c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	2200      	movs	r2, #0
 800a654:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	6a3a      	ldr	r2, [r7, #32]
 800a65a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a660:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a666:	b29a      	uxth	r2, r3
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	4a4d      	ldr	r2, [pc, #308]	; (800a7a4 <HAL_I2C_Mem_Write+0x1f0>)
 800a670:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a672:	88f8      	ldrh	r0, [r7, #6]
 800a674:	893a      	ldrh	r2, [r7, #8]
 800a676:	8979      	ldrh	r1, [r7, #10]
 800a678:	697b      	ldr	r3, [r7, #20]
 800a67a:	9301      	str	r3, [sp, #4]
 800a67c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a67e:	9300      	str	r3, [sp, #0]
 800a680:	4603      	mov	r3, r0
 800a682:	68f8      	ldr	r0, [r7, #12]
 800a684:	f000 fad0 	bl	800ac28 <I2C_RequestMemoryWrite>
 800a688:	4603      	mov	r3, r0
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d052      	beq.n	800a734 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800a68e:	2301      	movs	r3, #1
 800a690:	e081      	b.n	800a796 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a692:	697a      	ldr	r2, [r7, #20]
 800a694:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a696:	68f8      	ldr	r0, [r7, #12]
 800a698:	f000 fd16 	bl	800b0c8 <I2C_WaitOnTXEFlagUntilTimeout>
 800a69c:	4603      	mov	r3, r0
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d00d      	beq.n	800a6be <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6a6:	2b04      	cmp	r3, #4
 800a6a8:	d107      	bne.n	800a6ba <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	681a      	ldr	r2, [r3, #0]
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a6b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a6ba:	2301      	movs	r3, #1
 800a6bc:	e06b      	b.n	800a796 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6c2:	781a      	ldrb	r2, [r3, #0]
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ce:	1c5a      	adds	r2, r3, #1
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a6d8:	3b01      	subs	r3, #1
 800a6da:	b29a      	uxth	r2, r3
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6e4:	b29b      	uxth	r3, r3
 800a6e6:	3b01      	subs	r3, #1
 800a6e8:	b29a      	uxth	r2, r3
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	695b      	ldr	r3, [r3, #20]
 800a6f4:	f003 0304 	and.w	r3, r3, #4
 800a6f8:	2b04      	cmp	r3, #4
 800a6fa:	d11b      	bne.n	800a734 <HAL_I2C_Mem_Write+0x180>
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a700:	2b00      	cmp	r3, #0
 800a702:	d017      	beq.n	800a734 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a708:	781a      	ldrb	r2, [r3, #0]
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a714:	1c5a      	adds	r2, r3, #1
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a71e:	3b01      	subs	r3, #1
 800a720:	b29a      	uxth	r2, r3
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a72a:	b29b      	uxth	r3, r3
 800a72c:	3b01      	subs	r3, #1
 800a72e:	b29a      	uxth	r2, r3
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d1aa      	bne.n	800a692 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a73c:	697a      	ldr	r2, [r7, #20]
 800a73e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a740:	68f8      	ldr	r0, [r7, #12]
 800a742:	f000 fd02 	bl	800b14a <I2C_WaitOnBTFFlagUntilTimeout>
 800a746:	4603      	mov	r3, r0
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d00d      	beq.n	800a768 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a750:	2b04      	cmp	r3, #4
 800a752:	d107      	bne.n	800a764 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	681a      	ldr	r2, [r3, #0]
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a762:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a764:	2301      	movs	r3, #1
 800a766:	e016      	b.n	800a796 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	681a      	ldr	r2, [r3, #0]
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a776:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	2220      	movs	r2, #32
 800a77c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	2200      	movs	r2, #0
 800a784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	2200      	movs	r2, #0
 800a78c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a790:	2300      	movs	r3, #0
 800a792:	e000      	b.n	800a796 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800a794:	2302      	movs	r3, #2
  }
}
 800a796:	4618      	mov	r0, r3
 800a798:	3718      	adds	r7, #24
 800a79a:	46bd      	mov	sp, r7
 800a79c:	bd80      	pop	{r7, pc}
 800a79e:	bf00      	nop
 800a7a0:	00100002 	.word	0x00100002
 800a7a4:	ffff0000 	.word	0xffff0000

0800a7a8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b08c      	sub	sp, #48	; 0x30
 800a7ac:	af02      	add	r7, sp, #8
 800a7ae:	60f8      	str	r0, [r7, #12]
 800a7b0:	4608      	mov	r0, r1
 800a7b2:	4611      	mov	r1, r2
 800a7b4:	461a      	mov	r2, r3
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	817b      	strh	r3, [r7, #10]
 800a7ba:	460b      	mov	r3, r1
 800a7bc:	813b      	strh	r3, [r7, #8]
 800a7be:	4613      	mov	r3, r2
 800a7c0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a7c2:	f7fe fa8f 	bl	8008ce4 <HAL_GetTick>
 800a7c6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a7ce:	b2db      	uxtb	r3, r3
 800a7d0:	2b20      	cmp	r3, #32
 800a7d2:	f040 8208 	bne.w	800abe6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a7d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7d8:	9300      	str	r3, [sp, #0]
 800a7da:	2319      	movs	r3, #25
 800a7dc:	2201      	movs	r2, #1
 800a7de:	497b      	ldr	r1, [pc, #492]	; (800a9cc <HAL_I2C_Mem_Read+0x224>)
 800a7e0:	68f8      	ldr	r0, [r7, #12]
 800a7e2:	f000 fb9b 	bl	800af1c <I2C_WaitOnFlagUntilTimeout>
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d001      	beq.n	800a7f0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800a7ec:	2302      	movs	r3, #2
 800a7ee:	e1fb      	b.n	800abe8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a7f6:	2b01      	cmp	r3, #1
 800a7f8:	d101      	bne.n	800a7fe <HAL_I2C_Mem_Read+0x56>
 800a7fa:	2302      	movs	r3, #2
 800a7fc:	e1f4      	b.n	800abe8 <HAL_I2C_Mem_Read+0x440>
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	2201      	movs	r2, #1
 800a802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f003 0301 	and.w	r3, r3, #1
 800a810:	2b01      	cmp	r3, #1
 800a812:	d007      	beq.n	800a824 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	681a      	ldr	r2, [r3, #0]
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	f042 0201 	orr.w	r2, r2, #1
 800a822:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	681a      	ldr	r2, [r3, #0]
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a832:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	2222      	movs	r2, #34	; 0x22
 800a838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	2240      	movs	r2, #64	; 0x40
 800a840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	2200      	movs	r2, #0
 800a848:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a84e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800a854:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a85a:	b29a      	uxth	r2, r3
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	4a5b      	ldr	r2, [pc, #364]	; (800a9d0 <HAL_I2C_Mem_Read+0x228>)
 800a864:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a866:	88f8      	ldrh	r0, [r7, #6]
 800a868:	893a      	ldrh	r2, [r7, #8]
 800a86a:	8979      	ldrh	r1, [r7, #10]
 800a86c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a86e:	9301      	str	r3, [sp, #4]
 800a870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a872:	9300      	str	r3, [sp, #0]
 800a874:	4603      	mov	r3, r0
 800a876:	68f8      	ldr	r0, [r7, #12]
 800a878:	f000 fa6a 	bl	800ad50 <I2C_RequestMemoryRead>
 800a87c:	4603      	mov	r3, r0
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d001      	beq.n	800a886 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800a882:	2301      	movs	r3, #1
 800a884:	e1b0      	b.n	800abe8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d113      	bne.n	800a8b6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a88e:	2300      	movs	r3, #0
 800a890:	623b      	str	r3, [r7, #32]
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	695b      	ldr	r3, [r3, #20]
 800a898:	623b      	str	r3, [r7, #32]
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	699b      	ldr	r3, [r3, #24]
 800a8a0:	623b      	str	r3, [r7, #32]
 800a8a2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	681a      	ldr	r2, [r3, #0]
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a8b2:	601a      	str	r2, [r3, #0]
 800a8b4:	e184      	b.n	800abc0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a8ba:	2b01      	cmp	r3, #1
 800a8bc:	d11b      	bne.n	800a8f6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	681a      	ldr	r2, [r3, #0]
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a8cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	61fb      	str	r3, [r7, #28]
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	695b      	ldr	r3, [r3, #20]
 800a8d8:	61fb      	str	r3, [r7, #28]
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	699b      	ldr	r3, [r3, #24]
 800a8e0:	61fb      	str	r3, [r7, #28]
 800a8e2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	681a      	ldr	r2, [r3, #0]
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a8f2:	601a      	str	r2, [r3, #0]
 800a8f4:	e164      	b.n	800abc0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a8fa:	2b02      	cmp	r3, #2
 800a8fc:	d11b      	bne.n	800a936 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	681a      	ldr	r2, [r3, #0]
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a90c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	681a      	ldr	r2, [r3, #0]
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a91c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a91e:	2300      	movs	r3, #0
 800a920:	61bb      	str	r3, [r7, #24]
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	695b      	ldr	r3, [r3, #20]
 800a928:	61bb      	str	r3, [r7, #24]
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	699b      	ldr	r3, [r3, #24]
 800a930:	61bb      	str	r3, [r7, #24]
 800a932:	69bb      	ldr	r3, [r7, #24]
 800a934:	e144      	b.n	800abc0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a936:	2300      	movs	r3, #0
 800a938:	617b      	str	r3, [r7, #20]
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	695b      	ldr	r3, [r3, #20]
 800a940:	617b      	str	r3, [r7, #20]
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	699b      	ldr	r3, [r3, #24]
 800a948:	617b      	str	r3, [r7, #20]
 800a94a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800a94c:	e138      	b.n	800abc0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a952:	2b03      	cmp	r3, #3
 800a954:	f200 80f1 	bhi.w	800ab3a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a95c:	2b01      	cmp	r3, #1
 800a95e:	d123      	bne.n	800a9a8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a962:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a964:	68f8      	ldr	r0, [r7, #12]
 800a966:	f000 fc31 	bl	800b1cc <I2C_WaitOnRXNEFlagUntilTimeout>
 800a96a:	4603      	mov	r3, r0
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d001      	beq.n	800a974 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800a970:	2301      	movs	r3, #1
 800a972:	e139      	b.n	800abe8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	691a      	ldr	r2, [r3, #16]
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a97e:	b2d2      	uxtb	r2, r2
 800a980:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a986:	1c5a      	adds	r2, r3, #1
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a990:	3b01      	subs	r3, #1
 800a992:	b29a      	uxth	r2, r3
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a99c:	b29b      	uxth	r3, r3
 800a99e:	3b01      	subs	r3, #1
 800a9a0:	b29a      	uxth	r2, r3
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a9a6:	e10b      	b.n	800abc0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a9ac:	2b02      	cmp	r3, #2
 800a9ae:	d14e      	bne.n	800aa4e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9b2:	9300      	str	r3, [sp, #0]
 800a9b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	4906      	ldr	r1, [pc, #24]	; (800a9d4 <HAL_I2C_Mem_Read+0x22c>)
 800a9ba:	68f8      	ldr	r0, [r7, #12]
 800a9bc:	f000 faae 	bl	800af1c <I2C_WaitOnFlagUntilTimeout>
 800a9c0:	4603      	mov	r3, r0
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d008      	beq.n	800a9d8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800a9c6:	2301      	movs	r3, #1
 800a9c8:	e10e      	b.n	800abe8 <HAL_I2C_Mem_Read+0x440>
 800a9ca:	bf00      	nop
 800a9cc:	00100002 	.word	0x00100002
 800a9d0:	ffff0000 	.word	0xffff0000
 800a9d4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	681a      	ldr	r2, [r3, #0]
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a9e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	691a      	ldr	r2, [r3, #16]
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9f2:	b2d2      	uxtb	r2, r2
 800a9f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9fa:	1c5a      	adds	r2, r3, #1
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa04:	3b01      	subs	r3, #1
 800aa06:	b29a      	uxth	r2, r3
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa10:	b29b      	uxth	r3, r3
 800aa12:	3b01      	subs	r3, #1
 800aa14:	b29a      	uxth	r2, r3
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	691a      	ldr	r2, [r3, #16]
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa24:	b2d2      	uxtb	r2, r2
 800aa26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa2c:	1c5a      	adds	r2, r3, #1
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa36:	3b01      	subs	r3, #1
 800aa38:	b29a      	uxth	r2, r3
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa42:	b29b      	uxth	r3, r3
 800aa44:	3b01      	subs	r3, #1
 800aa46:	b29a      	uxth	r2, r3
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800aa4c:	e0b8      	b.n	800abc0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800aa4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa50:	9300      	str	r3, [sp, #0]
 800aa52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa54:	2200      	movs	r2, #0
 800aa56:	4966      	ldr	r1, [pc, #408]	; (800abf0 <HAL_I2C_Mem_Read+0x448>)
 800aa58:	68f8      	ldr	r0, [r7, #12]
 800aa5a:	f000 fa5f 	bl	800af1c <I2C_WaitOnFlagUntilTimeout>
 800aa5e:	4603      	mov	r3, r0
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d001      	beq.n	800aa68 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800aa64:	2301      	movs	r3, #1
 800aa66:	e0bf      	b.n	800abe8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	681a      	ldr	r2, [r3, #0]
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aa76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	691a      	ldr	r2, [r3, #16]
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa82:	b2d2      	uxtb	r2, r2
 800aa84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa8a:	1c5a      	adds	r2, r3, #1
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa94:	3b01      	subs	r3, #1
 800aa96:	b29a      	uxth	r2, r3
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aaa0:	b29b      	uxth	r3, r3
 800aaa2:	3b01      	subs	r3, #1
 800aaa4:	b29a      	uxth	r2, r3
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800aaaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaac:	9300      	str	r3, [sp, #0]
 800aaae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aab0:	2200      	movs	r2, #0
 800aab2:	494f      	ldr	r1, [pc, #316]	; (800abf0 <HAL_I2C_Mem_Read+0x448>)
 800aab4:	68f8      	ldr	r0, [r7, #12]
 800aab6:	f000 fa31 	bl	800af1c <I2C_WaitOnFlagUntilTimeout>
 800aaba:	4603      	mov	r3, r0
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d001      	beq.n	800aac4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800aac0:	2301      	movs	r3, #1
 800aac2:	e091      	b.n	800abe8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	681a      	ldr	r2, [r3, #0]
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aad2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	691a      	ldr	r2, [r3, #16]
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aade:	b2d2      	uxtb	r2, r2
 800aae0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aae6:	1c5a      	adds	r2, r3, #1
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aaf0:	3b01      	subs	r3, #1
 800aaf2:	b29a      	uxth	r2, r3
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aafc:	b29b      	uxth	r3, r3
 800aafe:	3b01      	subs	r3, #1
 800ab00:	b29a      	uxth	r2, r3
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	691a      	ldr	r2, [r3, #16]
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab10:	b2d2      	uxtb	r2, r2
 800ab12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab18:	1c5a      	adds	r2, r3, #1
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab22:	3b01      	subs	r3, #1
 800ab24:	b29a      	uxth	r2, r3
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab2e:	b29b      	uxth	r3, r3
 800ab30:	3b01      	subs	r3, #1
 800ab32:	b29a      	uxth	r2, r3
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ab38:	e042      	b.n	800abc0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ab3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab3c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ab3e:	68f8      	ldr	r0, [r7, #12]
 800ab40:	f000 fb44 	bl	800b1cc <I2C_WaitOnRXNEFlagUntilTimeout>
 800ab44:	4603      	mov	r3, r0
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d001      	beq.n	800ab4e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800ab4a:	2301      	movs	r3, #1
 800ab4c:	e04c      	b.n	800abe8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	691a      	ldr	r2, [r3, #16]
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab58:	b2d2      	uxtb	r2, r2
 800ab5a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab60:	1c5a      	adds	r2, r3, #1
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab6a:	3b01      	subs	r3, #1
 800ab6c:	b29a      	uxth	r2, r3
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab76:	b29b      	uxth	r3, r3
 800ab78:	3b01      	subs	r3, #1
 800ab7a:	b29a      	uxth	r2, r3
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	695b      	ldr	r3, [r3, #20]
 800ab86:	f003 0304 	and.w	r3, r3, #4
 800ab8a:	2b04      	cmp	r3, #4
 800ab8c:	d118      	bne.n	800abc0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	691a      	ldr	r2, [r3, #16]
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab98:	b2d2      	uxtb	r2, r2
 800ab9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aba0:	1c5a      	adds	r2, r3, #1
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800abaa:	3b01      	subs	r3, #1
 800abac:	b29a      	uxth	r2, r3
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800abb6:	b29b      	uxth	r3, r3
 800abb8:	3b01      	subs	r3, #1
 800abba:	b29a      	uxth	r2, r3
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	f47f aec2 	bne.w	800a94e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	2220      	movs	r2, #32
 800abce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	2200      	movs	r2, #0
 800abd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	2200      	movs	r2, #0
 800abde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800abe2:	2300      	movs	r3, #0
 800abe4:	e000      	b.n	800abe8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800abe6:	2302      	movs	r3, #2
  }
}
 800abe8:	4618      	mov	r0, r3
 800abea:	3728      	adds	r7, #40	; 0x28
 800abec:	46bd      	mov	sp, r7
 800abee:	bd80      	pop	{r7, pc}
 800abf0:	00010004 	.word	0x00010004

0800abf4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800abf4:	b480      	push	{r7}
 800abf6:	b083      	sub	sp, #12
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ac02:	b2db      	uxtb	r3, r3
}
 800ac04:	4618      	mov	r0, r3
 800ac06:	370c      	adds	r7, #12
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0e:	4770      	bx	lr

0800ac10 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800ac10:	b480      	push	{r7}
 800ac12:	b083      	sub	sp, #12
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	370c      	adds	r7, #12
 800ac20:	46bd      	mov	sp, r7
 800ac22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac26:	4770      	bx	lr

0800ac28 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b088      	sub	sp, #32
 800ac2c:	af02      	add	r7, sp, #8
 800ac2e:	60f8      	str	r0, [r7, #12]
 800ac30:	4608      	mov	r0, r1
 800ac32:	4611      	mov	r1, r2
 800ac34:	461a      	mov	r2, r3
 800ac36:	4603      	mov	r3, r0
 800ac38:	817b      	strh	r3, [r7, #10]
 800ac3a:	460b      	mov	r3, r1
 800ac3c:	813b      	strh	r3, [r7, #8]
 800ac3e:	4613      	mov	r3, r2
 800ac40:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	681a      	ldr	r2, [r3, #0]
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ac50:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ac52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac54:	9300      	str	r3, [sp, #0]
 800ac56:	6a3b      	ldr	r3, [r7, #32]
 800ac58:	2200      	movs	r2, #0
 800ac5a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800ac5e:	68f8      	ldr	r0, [r7, #12]
 800ac60:	f000 f95c 	bl	800af1c <I2C_WaitOnFlagUntilTimeout>
 800ac64:	4603      	mov	r3, r0
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d00c      	beq.n	800ac84 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d003      	beq.n	800ac80 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ac7e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800ac80:	2303      	movs	r3, #3
 800ac82:	e05f      	b.n	800ad44 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800ac84:	897b      	ldrh	r3, [r7, #10]
 800ac86:	b2db      	uxtb	r3, r3
 800ac88:	461a      	mov	r2, r3
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800ac92:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ac94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac96:	6a3a      	ldr	r2, [r7, #32]
 800ac98:	492c      	ldr	r1, [pc, #176]	; (800ad4c <I2C_RequestMemoryWrite+0x124>)
 800ac9a:	68f8      	ldr	r0, [r7, #12]
 800ac9c:	f000 f995 	bl	800afca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800aca0:	4603      	mov	r3, r0
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d001      	beq.n	800acaa <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 800aca6:	2301      	movs	r3, #1
 800aca8:	e04c      	b.n	800ad44 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800acaa:	2300      	movs	r3, #0
 800acac:	617b      	str	r3, [r7, #20]
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	695b      	ldr	r3, [r3, #20]
 800acb4:	617b      	str	r3, [r7, #20]
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	699b      	ldr	r3, [r3, #24]
 800acbc:	617b      	str	r3, [r7, #20]
 800acbe:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800acc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acc2:	6a39      	ldr	r1, [r7, #32]
 800acc4:	68f8      	ldr	r0, [r7, #12]
 800acc6:	f000 f9ff 	bl	800b0c8 <I2C_WaitOnTXEFlagUntilTimeout>
 800acca:	4603      	mov	r3, r0
 800accc:	2b00      	cmp	r3, #0
 800acce:	d00d      	beq.n	800acec <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acd4:	2b04      	cmp	r3, #4
 800acd6:	d107      	bne.n	800ace8 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	681a      	ldr	r2, [r3, #0]
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ace6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800ace8:	2301      	movs	r3, #1
 800acea:	e02b      	b.n	800ad44 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800acec:	88fb      	ldrh	r3, [r7, #6]
 800acee:	2b01      	cmp	r3, #1
 800acf0:	d105      	bne.n	800acfe <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800acf2:	893b      	ldrh	r3, [r7, #8]
 800acf4:	b2da      	uxtb	r2, r3
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	611a      	str	r2, [r3, #16]
 800acfc:	e021      	b.n	800ad42 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800acfe:	893b      	ldrh	r3, [r7, #8]
 800ad00:	0a1b      	lsrs	r3, r3, #8
 800ad02:	b29b      	uxth	r3, r3
 800ad04:	b2da      	uxtb	r2, r3
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ad0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad0e:	6a39      	ldr	r1, [r7, #32]
 800ad10:	68f8      	ldr	r0, [r7, #12]
 800ad12:	f000 f9d9 	bl	800b0c8 <I2C_WaitOnTXEFlagUntilTimeout>
 800ad16:	4603      	mov	r3, r0
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d00d      	beq.n	800ad38 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad20:	2b04      	cmp	r3, #4
 800ad22:	d107      	bne.n	800ad34 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	681a      	ldr	r2, [r3, #0]
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ad32:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800ad34:	2301      	movs	r3, #1
 800ad36:	e005      	b.n	800ad44 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800ad38:	893b      	ldrh	r3, [r7, #8]
 800ad3a:	b2da      	uxtb	r2, r3
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800ad42:	2300      	movs	r3, #0
}
 800ad44:	4618      	mov	r0, r3
 800ad46:	3718      	adds	r7, #24
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}
 800ad4c:	00010002 	.word	0x00010002

0800ad50 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b088      	sub	sp, #32
 800ad54:	af02      	add	r7, sp, #8
 800ad56:	60f8      	str	r0, [r7, #12]
 800ad58:	4608      	mov	r0, r1
 800ad5a:	4611      	mov	r1, r2
 800ad5c:	461a      	mov	r2, r3
 800ad5e:	4603      	mov	r3, r0
 800ad60:	817b      	strh	r3, [r7, #10]
 800ad62:	460b      	mov	r3, r1
 800ad64:	813b      	strh	r3, [r7, #8]
 800ad66:	4613      	mov	r3, r2
 800ad68:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	681a      	ldr	r2, [r3, #0]
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ad78:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	681a      	ldr	r2, [r3, #0]
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ad88:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ad8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad8c:	9300      	str	r3, [sp, #0]
 800ad8e:	6a3b      	ldr	r3, [r7, #32]
 800ad90:	2200      	movs	r2, #0
 800ad92:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800ad96:	68f8      	ldr	r0, [r7, #12]
 800ad98:	f000 f8c0 	bl	800af1c <I2C_WaitOnFlagUntilTimeout>
 800ad9c:	4603      	mov	r3, r0
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d00c      	beq.n	800adbc <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800adac:	2b00      	cmp	r3, #0
 800adae:	d003      	beq.n	800adb8 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800adb6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800adb8:	2303      	movs	r3, #3
 800adba:	e0a9      	b.n	800af10 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800adbc:	897b      	ldrh	r3, [r7, #10]
 800adbe:	b2db      	uxtb	r3, r3
 800adc0:	461a      	mov	r2, r3
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800adca:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800adcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adce:	6a3a      	ldr	r2, [r7, #32]
 800add0:	4951      	ldr	r1, [pc, #324]	; (800af18 <I2C_RequestMemoryRead+0x1c8>)
 800add2:	68f8      	ldr	r0, [r7, #12]
 800add4:	f000 f8f9 	bl	800afca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800add8:	4603      	mov	r3, r0
 800adda:	2b00      	cmp	r3, #0
 800addc:	d001      	beq.n	800ade2 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 800adde:	2301      	movs	r3, #1
 800ade0:	e096      	b.n	800af10 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ade2:	2300      	movs	r3, #0
 800ade4:	617b      	str	r3, [r7, #20]
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	695b      	ldr	r3, [r3, #20]
 800adec:	617b      	str	r3, [r7, #20]
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	699b      	ldr	r3, [r3, #24]
 800adf4:	617b      	str	r3, [r7, #20]
 800adf6:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800adf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800adfa:	6a39      	ldr	r1, [r7, #32]
 800adfc:	68f8      	ldr	r0, [r7, #12]
 800adfe:	f000 f963 	bl	800b0c8 <I2C_WaitOnTXEFlagUntilTimeout>
 800ae02:	4603      	mov	r3, r0
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d00d      	beq.n	800ae24 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae0c:	2b04      	cmp	r3, #4
 800ae0e:	d107      	bne.n	800ae20 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	681a      	ldr	r2, [r3, #0]
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ae1e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800ae20:	2301      	movs	r3, #1
 800ae22:	e075      	b.n	800af10 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ae24:	88fb      	ldrh	r3, [r7, #6]
 800ae26:	2b01      	cmp	r3, #1
 800ae28:	d105      	bne.n	800ae36 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800ae2a:	893b      	ldrh	r3, [r7, #8]
 800ae2c:	b2da      	uxtb	r2, r3
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	611a      	str	r2, [r3, #16]
 800ae34:	e021      	b.n	800ae7a <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800ae36:	893b      	ldrh	r3, [r7, #8]
 800ae38:	0a1b      	lsrs	r3, r3, #8
 800ae3a:	b29b      	uxth	r3, r3
 800ae3c:	b2da      	uxtb	r2, r3
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ae44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae46:	6a39      	ldr	r1, [r7, #32]
 800ae48:	68f8      	ldr	r0, [r7, #12]
 800ae4a:	f000 f93d 	bl	800b0c8 <I2C_WaitOnTXEFlagUntilTimeout>
 800ae4e:	4603      	mov	r3, r0
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d00d      	beq.n	800ae70 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae58:	2b04      	cmp	r3, #4
 800ae5a:	d107      	bne.n	800ae6c <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	681a      	ldr	r2, [r3, #0]
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ae6a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800ae6c:	2301      	movs	r3, #1
 800ae6e:	e04f      	b.n	800af10 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800ae70:	893b      	ldrh	r3, [r7, #8]
 800ae72:	b2da      	uxtb	r2, r3
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ae7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae7c:	6a39      	ldr	r1, [r7, #32]
 800ae7e:	68f8      	ldr	r0, [r7, #12]
 800ae80:	f000 f922 	bl	800b0c8 <I2C_WaitOnTXEFlagUntilTimeout>
 800ae84:	4603      	mov	r3, r0
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d00d      	beq.n	800aea6 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae8e:	2b04      	cmp	r3, #4
 800ae90:	d107      	bne.n	800aea2 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	681a      	ldr	r2, [r3, #0]
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aea0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800aea2:	2301      	movs	r3, #1
 800aea4:	e034      	b.n	800af10 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	681a      	ldr	r2, [r3, #0]
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800aeb4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800aeb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeb8:	9300      	str	r3, [sp, #0]
 800aeba:	6a3b      	ldr	r3, [r7, #32]
 800aebc:	2200      	movs	r2, #0
 800aebe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800aec2:	68f8      	ldr	r0, [r7, #12]
 800aec4:	f000 f82a 	bl	800af1c <I2C_WaitOnFlagUntilTimeout>
 800aec8:	4603      	mov	r3, r0
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d00c      	beq.n	800aee8 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d003      	beq.n	800aee4 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aee2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800aee4:	2303      	movs	r3, #3
 800aee6:	e013      	b.n	800af10 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800aee8:	897b      	ldrh	r3, [r7, #10]
 800aeea:	b2db      	uxtb	r3, r3
 800aeec:	f043 0301 	orr.w	r3, r3, #1
 800aef0:	b2da      	uxtb	r2, r3
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800aef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aefa:	6a3a      	ldr	r2, [r7, #32]
 800aefc:	4906      	ldr	r1, [pc, #24]	; (800af18 <I2C_RequestMemoryRead+0x1c8>)
 800aefe:	68f8      	ldr	r0, [r7, #12]
 800af00:	f000 f863 	bl	800afca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800af04:	4603      	mov	r3, r0
 800af06:	2b00      	cmp	r3, #0
 800af08:	d001      	beq.n	800af0e <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 800af0a:	2301      	movs	r3, #1
 800af0c:	e000      	b.n	800af10 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 800af0e:	2300      	movs	r3, #0
}
 800af10:	4618      	mov	r0, r3
 800af12:	3718      	adds	r7, #24
 800af14:	46bd      	mov	sp, r7
 800af16:	bd80      	pop	{r7, pc}
 800af18:	00010002 	.word	0x00010002

0800af1c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b084      	sub	sp, #16
 800af20:	af00      	add	r7, sp, #0
 800af22:	60f8      	str	r0, [r7, #12]
 800af24:	60b9      	str	r1, [r7, #8]
 800af26:	603b      	str	r3, [r7, #0]
 800af28:	4613      	mov	r3, r2
 800af2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800af2c:	e025      	b.n	800af7a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800af2e:	683b      	ldr	r3, [r7, #0]
 800af30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af34:	d021      	beq.n	800af7a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800af36:	f7fd fed5 	bl	8008ce4 <HAL_GetTick>
 800af3a:	4602      	mov	r2, r0
 800af3c:	69bb      	ldr	r3, [r7, #24]
 800af3e:	1ad3      	subs	r3, r2, r3
 800af40:	683a      	ldr	r2, [r7, #0]
 800af42:	429a      	cmp	r2, r3
 800af44:	d302      	bcc.n	800af4c <I2C_WaitOnFlagUntilTimeout+0x30>
 800af46:	683b      	ldr	r3, [r7, #0]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d116      	bne.n	800af7a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	2200      	movs	r2, #0
 800af50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	2220      	movs	r2, #32
 800af56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	2200      	movs	r2, #0
 800af5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af66:	f043 0220 	orr.w	r2, r3, #32
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	2200      	movs	r2, #0
 800af72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800af76:	2301      	movs	r3, #1
 800af78:	e023      	b.n	800afc2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800af7a:	68bb      	ldr	r3, [r7, #8]
 800af7c:	0c1b      	lsrs	r3, r3, #16
 800af7e:	b2db      	uxtb	r3, r3
 800af80:	2b01      	cmp	r3, #1
 800af82:	d10d      	bne.n	800afa0 <I2C_WaitOnFlagUntilTimeout+0x84>
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	695b      	ldr	r3, [r3, #20]
 800af8a:	43da      	mvns	r2, r3
 800af8c:	68bb      	ldr	r3, [r7, #8]
 800af8e:	4013      	ands	r3, r2
 800af90:	b29b      	uxth	r3, r3
 800af92:	2b00      	cmp	r3, #0
 800af94:	bf0c      	ite	eq
 800af96:	2301      	moveq	r3, #1
 800af98:	2300      	movne	r3, #0
 800af9a:	b2db      	uxtb	r3, r3
 800af9c:	461a      	mov	r2, r3
 800af9e:	e00c      	b.n	800afba <I2C_WaitOnFlagUntilTimeout+0x9e>
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	699b      	ldr	r3, [r3, #24]
 800afa6:	43da      	mvns	r2, r3
 800afa8:	68bb      	ldr	r3, [r7, #8]
 800afaa:	4013      	ands	r3, r2
 800afac:	b29b      	uxth	r3, r3
 800afae:	2b00      	cmp	r3, #0
 800afb0:	bf0c      	ite	eq
 800afb2:	2301      	moveq	r3, #1
 800afb4:	2300      	movne	r3, #0
 800afb6:	b2db      	uxtb	r3, r3
 800afb8:	461a      	mov	r2, r3
 800afba:	79fb      	ldrb	r3, [r7, #7]
 800afbc:	429a      	cmp	r2, r3
 800afbe:	d0b6      	beq.n	800af2e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800afc0:	2300      	movs	r3, #0
}
 800afc2:	4618      	mov	r0, r3
 800afc4:	3710      	adds	r7, #16
 800afc6:	46bd      	mov	sp, r7
 800afc8:	bd80      	pop	{r7, pc}

0800afca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800afca:	b580      	push	{r7, lr}
 800afcc:	b084      	sub	sp, #16
 800afce:	af00      	add	r7, sp, #0
 800afd0:	60f8      	str	r0, [r7, #12]
 800afd2:	60b9      	str	r1, [r7, #8]
 800afd4:	607a      	str	r2, [r7, #4]
 800afd6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800afd8:	e051      	b.n	800b07e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	695b      	ldr	r3, [r3, #20]
 800afe0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800afe4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800afe8:	d123      	bne.n	800b032 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	681a      	ldr	r2, [r3, #0]
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aff8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b002:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	2200      	movs	r2, #0
 800b008:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	2220      	movs	r2, #32
 800b00e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	2200      	movs	r2, #0
 800b016:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b01e:	f043 0204 	orr.w	r2, r3, #4
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	2200      	movs	r2, #0
 800b02a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b02e:	2301      	movs	r3, #1
 800b030:	e046      	b.n	800b0c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b038:	d021      	beq.n	800b07e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b03a:	f7fd fe53 	bl	8008ce4 <HAL_GetTick>
 800b03e:	4602      	mov	r2, r0
 800b040:	683b      	ldr	r3, [r7, #0]
 800b042:	1ad3      	subs	r3, r2, r3
 800b044:	687a      	ldr	r2, [r7, #4]
 800b046:	429a      	cmp	r2, r3
 800b048:	d302      	bcc.n	800b050 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d116      	bne.n	800b07e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	2200      	movs	r2, #0
 800b054:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	2220      	movs	r2, #32
 800b05a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	2200      	movs	r2, #0
 800b062:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b06a:	f043 0220 	orr.w	r2, r3, #32
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	2200      	movs	r2, #0
 800b076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b07a:	2301      	movs	r3, #1
 800b07c:	e020      	b.n	800b0c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b07e:	68bb      	ldr	r3, [r7, #8]
 800b080:	0c1b      	lsrs	r3, r3, #16
 800b082:	b2db      	uxtb	r3, r3
 800b084:	2b01      	cmp	r3, #1
 800b086:	d10c      	bne.n	800b0a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	695b      	ldr	r3, [r3, #20]
 800b08e:	43da      	mvns	r2, r3
 800b090:	68bb      	ldr	r3, [r7, #8]
 800b092:	4013      	ands	r3, r2
 800b094:	b29b      	uxth	r3, r3
 800b096:	2b00      	cmp	r3, #0
 800b098:	bf14      	ite	ne
 800b09a:	2301      	movne	r3, #1
 800b09c:	2300      	moveq	r3, #0
 800b09e:	b2db      	uxtb	r3, r3
 800b0a0:	e00b      	b.n	800b0ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	699b      	ldr	r3, [r3, #24]
 800b0a8:	43da      	mvns	r2, r3
 800b0aa:	68bb      	ldr	r3, [r7, #8]
 800b0ac:	4013      	ands	r3, r2
 800b0ae:	b29b      	uxth	r3, r3
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	bf14      	ite	ne
 800b0b4:	2301      	movne	r3, #1
 800b0b6:	2300      	moveq	r3, #0
 800b0b8:	b2db      	uxtb	r3, r3
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d18d      	bne.n	800afda <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800b0be:	2300      	movs	r3, #0
}
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	3710      	adds	r7, #16
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	bd80      	pop	{r7, pc}

0800b0c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b084      	sub	sp, #16
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	60f8      	str	r0, [r7, #12]
 800b0d0:	60b9      	str	r1, [r7, #8]
 800b0d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b0d4:	e02d      	b.n	800b132 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b0d6:	68f8      	ldr	r0, [r7, #12]
 800b0d8:	f000 f8ce 	bl	800b278 <I2C_IsAcknowledgeFailed>
 800b0dc:	4603      	mov	r3, r0
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d001      	beq.n	800b0e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b0e2:	2301      	movs	r3, #1
 800b0e4:	e02d      	b.n	800b142 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b0e6:	68bb      	ldr	r3, [r7, #8]
 800b0e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0ec:	d021      	beq.n	800b132 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b0ee:	f7fd fdf9 	bl	8008ce4 <HAL_GetTick>
 800b0f2:	4602      	mov	r2, r0
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	1ad3      	subs	r3, r2, r3
 800b0f8:	68ba      	ldr	r2, [r7, #8]
 800b0fa:	429a      	cmp	r2, r3
 800b0fc:	d302      	bcc.n	800b104 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800b0fe:	68bb      	ldr	r3, [r7, #8]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d116      	bne.n	800b132 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	2200      	movs	r2, #0
 800b108:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	2220      	movs	r2, #32
 800b10e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	2200      	movs	r2, #0
 800b116:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b11e:	f043 0220 	orr.w	r2, r3, #32
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	2200      	movs	r2, #0
 800b12a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b12e:	2301      	movs	r3, #1
 800b130:	e007      	b.n	800b142 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	695b      	ldr	r3, [r3, #20]
 800b138:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b13c:	2b80      	cmp	r3, #128	; 0x80
 800b13e:	d1ca      	bne.n	800b0d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b140:	2300      	movs	r3, #0
}
 800b142:	4618      	mov	r0, r3
 800b144:	3710      	adds	r7, #16
 800b146:	46bd      	mov	sp, r7
 800b148:	bd80      	pop	{r7, pc}

0800b14a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b14a:	b580      	push	{r7, lr}
 800b14c:	b084      	sub	sp, #16
 800b14e:	af00      	add	r7, sp, #0
 800b150:	60f8      	str	r0, [r7, #12]
 800b152:	60b9      	str	r1, [r7, #8]
 800b154:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b156:	e02d      	b.n	800b1b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b158:	68f8      	ldr	r0, [r7, #12]
 800b15a:	f000 f88d 	bl	800b278 <I2C_IsAcknowledgeFailed>
 800b15e:	4603      	mov	r3, r0
 800b160:	2b00      	cmp	r3, #0
 800b162:	d001      	beq.n	800b168 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b164:	2301      	movs	r3, #1
 800b166:	e02d      	b.n	800b1c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b168:	68bb      	ldr	r3, [r7, #8]
 800b16a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b16e:	d021      	beq.n	800b1b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b170:	f7fd fdb8 	bl	8008ce4 <HAL_GetTick>
 800b174:	4602      	mov	r2, r0
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	1ad3      	subs	r3, r2, r3
 800b17a:	68ba      	ldr	r2, [r7, #8]
 800b17c:	429a      	cmp	r2, r3
 800b17e:	d302      	bcc.n	800b186 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800b180:	68bb      	ldr	r3, [r7, #8]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d116      	bne.n	800b1b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	2200      	movs	r2, #0
 800b18a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	2220      	movs	r2, #32
 800b190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	2200      	movs	r2, #0
 800b198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1a0:	f043 0220 	orr.w	r2, r3, #32
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b1b0:	2301      	movs	r3, #1
 800b1b2:	e007      	b.n	800b1c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	695b      	ldr	r3, [r3, #20]
 800b1ba:	f003 0304 	and.w	r3, r3, #4
 800b1be:	2b04      	cmp	r3, #4
 800b1c0:	d1ca      	bne.n	800b158 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b1c2:	2300      	movs	r3, #0
}
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	3710      	adds	r7, #16
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	bd80      	pop	{r7, pc}

0800b1cc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b084      	sub	sp, #16
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	60f8      	str	r0, [r7, #12]
 800b1d4:	60b9      	str	r1, [r7, #8]
 800b1d6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b1d8:	e042      	b.n	800b260 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	695b      	ldr	r3, [r3, #20]
 800b1e0:	f003 0310 	and.w	r3, r3, #16
 800b1e4:	2b10      	cmp	r3, #16
 800b1e6:	d119      	bne.n	800b21c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	f06f 0210 	mvn.w	r2, #16
 800b1f0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	2220      	movs	r2, #32
 800b1fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	2200      	movs	r2, #0
 800b204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	2200      	movs	r2, #0
 800b214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b218:	2301      	movs	r3, #1
 800b21a:	e029      	b.n	800b270 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b21c:	f7fd fd62 	bl	8008ce4 <HAL_GetTick>
 800b220:	4602      	mov	r2, r0
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	1ad3      	subs	r3, r2, r3
 800b226:	68ba      	ldr	r2, [r7, #8]
 800b228:	429a      	cmp	r2, r3
 800b22a:	d302      	bcc.n	800b232 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800b22c:	68bb      	ldr	r3, [r7, #8]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d116      	bne.n	800b260 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	2200      	movs	r2, #0
 800b236:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	2220      	movs	r2, #32
 800b23c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	2200      	movs	r2, #0
 800b244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b24c:	f043 0220 	orr.w	r2, r3, #32
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	2200      	movs	r2, #0
 800b258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b25c:	2301      	movs	r3, #1
 800b25e:	e007      	b.n	800b270 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	695b      	ldr	r3, [r3, #20]
 800b266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b26a:	2b40      	cmp	r3, #64	; 0x40
 800b26c:	d1b5      	bne.n	800b1da <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800b26e:	2300      	movs	r3, #0
}
 800b270:	4618      	mov	r0, r3
 800b272:	3710      	adds	r7, #16
 800b274:	46bd      	mov	sp, r7
 800b276:	bd80      	pop	{r7, pc}

0800b278 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800b278:	b480      	push	{r7}
 800b27a:	b083      	sub	sp, #12
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	695b      	ldr	r3, [r3, #20]
 800b286:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b28a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b28e:	d11b      	bne.n	800b2c8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b298:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	2200      	movs	r2, #0
 800b29e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	2220      	movs	r2, #32
 800b2a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2b4:	f043 0204 	orr.w	r2, r3, #4
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2200      	movs	r2, #0
 800b2c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800b2c4:	2301      	movs	r3, #1
 800b2c6:	e000      	b.n	800b2ca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800b2c8:	2300      	movs	r3, #0
}
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	370c      	adds	r7, #12
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d4:	4770      	bx	lr
	...

0800b2d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b086      	sub	sp, #24
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d101      	bne.n	800b2ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b2e6:	2301      	movs	r3, #1
 800b2e8:	e25b      	b.n	800b7a2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	f003 0301 	and.w	r3, r3, #1
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d075      	beq.n	800b3e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800b2f6:	4ba3      	ldr	r3, [pc, #652]	; (800b584 <HAL_RCC_OscConfig+0x2ac>)
 800b2f8:	689b      	ldr	r3, [r3, #8]
 800b2fa:	f003 030c 	and.w	r3, r3, #12
 800b2fe:	2b04      	cmp	r3, #4
 800b300:	d00c      	beq.n	800b31c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b302:	4ba0      	ldr	r3, [pc, #640]	; (800b584 <HAL_RCC_OscConfig+0x2ac>)
 800b304:	689b      	ldr	r3, [r3, #8]
 800b306:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800b30a:	2b08      	cmp	r3, #8
 800b30c:	d112      	bne.n	800b334 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b30e:	4b9d      	ldr	r3, [pc, #628]	; (800b584 <HAL_RCC_OscConfig+0x2ac>)
 800b310:	685b      	ldr	r3, [r3, #4]
 800b312:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b316:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b31a:	d10b      	bne.n	800b334 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b31c:	4b99      	ldr	r3, [pc, #612]	; (800b584 <HAL_RCC_OscConfig+0x2ac>)
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b324:	2b00      	cmp	r3, #0
 800b326:	d05b      	beq.n	800b3e0 <HAL_RCC_OscConfig+0x108>
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	685b      	ldr	r3, [r3, #4]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d157      	bne.n	800b3e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800b330:	2301      	movs	r3, #1
 800b332:	e236      	b.n	800b7a2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	685b      	ldr	r3, [r3, #4]
 800b338:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b33c:	d106      	bne.n	800b34c <HAL_RCC_OscConfig+0x74>
 800b33e:	4b91      	ldr	r3, [pc, #580]	; (800b584 <HAL_RCC_OscConfig+0x2ac>)
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	4a90      	ldr	r2, [pc, #576]	; (800b584 <HAL_RCC_OscConfig+0x2ac>)
 800b344:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b348:	6013      	str	r3, [r2, #0]
 800b34a:	e01d      	b.n	800b388 <HAL_RCC_OscConfig+0xb0>
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	685b      	ldr	r3, [r3, #4]
 800b350:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b354:	d10c      	bne.n	800b370 <HAL_RCC_OscConfig+0x98>
 800b356:	4b8b      	ldr	r3, [pc, #556]	; (800b584 <HAL_RCC_OscConfig+0x2ac>)
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	4a8a      	ldr	r2, [pc, #552]	; (800b584 <HAL_RCC_OscConfig+0x2ac>)
 800b35c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b360:	6013      	str	r3, [r2, #0]
 800b362:	4b88      	ldr	r3, [pc, #544]	; (800b584 <HAL_RCC_OscConfig+0x2ac>)
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	4a87      	ldr	r2, [pc, #540]	; (800b584 <HAL_RCC_OscConfig+0x2ac>)
 800b368:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b36c:	6013      	str	r3, [r2, #0]
 800b36e:	e00b      	b.n	800b388 <HAL_RCC_OscConfig+0xb0>
 800b370:	4b84      	ldr	r3, [pc, #528]	; (800b584 <HAL_RCC_OscConfig+0x2ac>)
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	4a83      	ldr	r2, [pc, #524]	; (800b584 <HAL_RCC_OscConfig+0x2ac>)
 800b376:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b37a:	6013      	str	r3, [r2, #0]
 800b37c:	4b81      	ldr	r3, [pc, #516]	; (800b584 <HAL_RCC_OscConfig+0x2ac>)
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	4a80      	ldr	r2, [pc, #512]	; (800b584 <HAL_RCC_OscConfig+0x2ac>)
 800b382:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b386:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	685b      	ldr	r3, [r3, #4]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d013      	beq.n	800b3b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b390:	f7fd fca8 	bl	8008ce4 <HAL_GetTick>
 800b394:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b396:	e008      	b.n	800b3aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b398:	f7fd fca4 	bl	8008ce4 <HAL_GetTick>
 800b39c:	4602      	mov	r2, r0
 800b39e:	693b      	ldr	r3, [r7, #16]
 800b3a0:	1ad3      	subs	r3, r2, r3
 800b3a2:	2b64      	cmp	r3, #100	; 0x64
 800b3a4:	d901      	bls.n	800b3aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800b3a6:	2303      	movs	r3, #3
 800b3a8:	e1fb      	b.n	800b7a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b3aa:	4b76      	ldr	r3, [pc, #472]	; (800b584 <HAL_RCC_OscConfig+0x2ac>)
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d0f0      	beq.n	800b398 <HAL_RCC_OscConfig+0xc0>
 800b3b6:	e014      	b.n	800b3e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b3b8:	f7fd fc94 	bl	8008ce4 <HAL_GetTick>
 800b3bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b3be:	e008      	b.n	800b3d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b3c0:	f7fd fc90 	bl	8008ce4 <HAL_GetTick>
 800b3c4:	4602      	mov	r2, r0
 800b3c6:	693b      	ldr	r3, [r7, #16]
 800b3c8:	1ad3      	subs	r3, r2, r3
 800b3ca:	2b64      	cmp	r3, #100	; 0x64
 800b3cc:	d901      	bls.n	800b3d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b3ce:	2303      	movs	r3, #3
 800b3d0:	e1e7      	b.n	800b7a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b3d2:	4b6c      	ldr	r3, [pc, #432]	; (800b584 <HAL_RCC_OscConfig+0x2ac>)
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d1f0      	bne.n	800b3c0 <HAL_RCC_OscConfig+0xe8>
 800b3de:	e000      	b.n	800b3e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b3e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	f003 0302 	and.w	r3, r3, #2
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d063      	beq.n	800b4b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800b3ee:	4b65      	ldr	r3, [pc, #404]	; (800b584 <HAL_RCC_OscConfig+0x2ac>)
 800b3f0:	689b      	ldr	r3, [r3, #8]
 800b3f2:	f003 030c 	and.w	r3, r3, #12
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d00b      	beq.n	800b412 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b3fa:	4b62      	ldr	r3, [pc, #392]	; (800b584 <HAL_RCC_OscConfig+0x2ac>)
 800b3fc:	689b      	ldr	r3, [r3, #8]
 800b3fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800b402:	2b08      	cmp	r3, #8
 800b404:	d11c      	bne.n	800b440 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b406:	4b5f      	ldr	r3, [pc, #380]	; (800b584 <HAL_RCC_OscConfig+0x2ac>)
 800b408:	685b      	ldr	r3, [r3, #4]
 800b40a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d116      	bne.n	800b440 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b412:	4b5c      	ldr	r3, [pc, #368]	; (800b584 <HAL_RCC_OscConfig+0x2ac>)
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	f003 0302 	and.w	r3, r3, #2
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d005      	beq.n	800b42a <HAL_RCC_OscConfig+0x152>
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	68db      	ldr	r3, [r3, #12]
 800b422:	2b01      	cmp	r3, #1
 800b424:	d001      	beq.n	800b42a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800b426:	2301      	movs	r3, #1
 800b428:	e1bb      	b.n	800b7a2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b42a:	4b56      	ldr	r3, [pc, #344]	; (800b584 <HAL_RCC_OscConfig+0x2ac>)
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	691b      	ldr	r3, [r3, #16]
 800b436:	00db      	lsls	r3, r3, #3
 800b438:	4952      	ldr	r1, [pc, #328]	; (800b584 <HAL_RCC_OscConfig+0x2ac>)
 800b43a:	4313      	orrs	r3, r2
 800b43c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b43e:	e03a      	b.n	800b4b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	68db      	ldr	r3, [r3, #12]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d020      	beq.n	800b48a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b448:	4b4f      	ldr	r3, [pc, #316]	; (800b588 <HAL_RCC_OscConfig+0x2b0>)
 800b44a:	2201      	movs	r2, #1
 800b44c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b44e:	f7fd fc49 	bl	8008ce4 <HAL_GetTick>
 800b452:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b454:	e008      	b.n	800b468 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b456:	f7fd fc45 	bl	8008ce4 <HAL_GetTick>
 800b45a:	4602      	mov	r2, r0
 800b45c:	693b      	ldr	r3, [r7, #16]
 800b45e:	1ad3      	subs	r3, r2, r3
 800b460:	2b02      	cmp	r3, #2
 800b462:	d901      	bls.n	800b468 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800b464:	2303      	movs	r3, #3
 800b466:	e19c      	b.n	800b7a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b468:	4b46      	ldr	r3, [pc, #280]	; (800b584 <HAL_RCC_OscConfig+0x2ac>)
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	f003 0302 	and.w	r3, r3, #2
 800b470:	2b00      	cmp	r3, #0
 800b472:	d0f0      	beq.n	800b456 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b474:	4b43      	ldr	r3, [pc, #268]	; (800b584 <HAL_RCC_OscConfig+0x2ac>)
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	691b      	ldr	r3, [r3, #16]
 800b480:	00db      	lsls	r3, r3, #3
 800b482:	4940      	ldr	r1, [pc, #256]	; (800b584 <HAL_RCC_OscConfig+0x2ac>)
 800b484:	4313      	orrs	r3, r2
 800b486:	600b      	str	r3, [r1, #0]
 800b488:	e015      	b.n	800b4b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b48a:	4b3f      	ldr	r3, [pc, #252]	; (800b588 <HAL_RCC_OscConfig+0x2b0>)
 800b48c:	2200      	movs	r2, #0
 800b48e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b490:	f7fd fc28 	bl	8008ce4 <HAL_GetTick>
 800b494:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b496:	e008      	b.n	800b4aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b498:	f7fd fc24 	bl	8008ce4 <HAL_GetTick>
 800b49c:	4602      	mov	r2, r0
 800b49e:	693b      	ldr	r3, [r7, #16]
 800b4a0:	1ad3      	subs	r3, r2, r3
 800b4a2:	2b02      	cmp	r3, #2
 800b4a4:	d901      	bls.n	800b4aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800b4a6:	2303      	movs	r3, #3
 800b4a8:	e17b      	b.n	800b7a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b4aa:	4b36      	ldr	r3, [pc, #216]	; (800b584 <HAL_RCC_OscConfig+0x2ac>)
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	f003 0302 	and.w	r3, r3, #2
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d1f0      	bne.n	800b498 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	f003 0308 	and.w	r3, r3, #8
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d030      	beq.n	800b524 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	695b      	ldr	r3, [r3, #20]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d016      	beq.n	800b4f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b4ca:	4b30      	ldr	r3, [pc, #192]	; (800b58c <HAL_RCC_OscConfig+0x2b4>)
 800b4cc:	2201      	movs	r2, #1
 800b4ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b4d0:	f7fd fc08 	bl	8008ce4 <HAL_GetTick>
 800b4d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b4d6:	e008      	b.n	800b4ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b4d8:	f7fd fc04 	bl	8008ce4 <HAL_GetTick>
 800b4dc:	4602      	mov	r2, r0
 800b4de:	693b      	ldr	r3, [r7, #16]
 800b4e0:	1ad3      	subs	r3, r2, r3
 800b4e2:	2b02      	cmp	r3, #2
 800b4e4:	d901      	bls.n	800b4ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800b4e6:	2303      	movs	r3, #3
 800b4e8:	e15b      	b.n	800b7a2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b4ea:	4b26      	ldr	r3, [pc, #152]	; (800b584 <HAL_RCC_OscConfig+0x2ac>)
 800b4ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b4ee:	f003 0302 	and.w	r3, r3, #2
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d0f0      	beq.n	800b4d8 <HAL_RCC_OscConfig+0x200>
 800b4f6:	e015      	b.n	800b524 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b4f8:	4b24      	ldr	r3, [pc, #144]	; (800b58c <HAL_RCC_OscConfig+0x2b4>)
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b4fe:	f7fd fbf1 	bl	8008ce4 <HAL_GetTick>
 800b502:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b504:	e008      	b.n	800b518 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b506:	f7fd fbed 	bl	8008ce4 <HAL_GetTick>
 800b50a:	4602      	mov	r2, r0
 800b50c:	693b      	ldr	r3, [r7, #16]
 800b50e:	1ad3      	subs	r3, r2, r3
 800b510:	2b02      	cmp	r3, #2
 800b512:	d901      	bls.n	800b518 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800b514:	2303      	movs	r3, #3
 800b516:	e144      	b.n	800b7a2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b518:	4b1a      	ldr	r3, [pc, #104]	; (800b584 <HAL_RCC_OscConfig+0x2ac>)
 800b51a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b51c:	f003 0302 	and.w	r3, r3, #2
 800b520:	2b00      	cmp	r3, #0
 800b522:	d1f0      	bne.n	800b506 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	f003 0304 	and.w	r3, r3, #4
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	f000 80a0 	beq.w	800b672 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b532:	2300      	movs	r3, #0
 800b534:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b536:	4b13      	ldr	r3, [pc, #76]	; (800b584 <HAL_RCC_OscConfig+0x2ac>)
 800b538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b53a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d10f      	bne.n	800b562 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b542:	2300      	movs	r3, #0
 800b544:	60bb      	str	r3, [r7, #8]
 800b546:	4b0f      	ldr	r3, [pc, #60]	; (800b584 <HAL_RCC_OscConfig+0x2ac>)
 800b548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b54a:	4a0e      	ldr	r2, [pc, #56]	; (800b584 <HAL_RCC_OscConfig+0x2ac>)
 800b54c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b550:	6413      	str	r3, [r2, #64]	; 0x40
 800b552:	4b0c      	ldr	r3, [pc, #48]	; (800b584 <HAL_RCC_OscConfig+0x2ac>)
 800b554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b55a:	60bb      	str	r3, [r7, #8]
 800b55c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b55e:	2301      	movs	r3, #1
 800b560:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b562:	4b0b      	ldr	r3, [pc, #44]	; (800b590 <HAL_RCC_OscConfig+0x2b8>)
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d121      	bne.n	800b5b2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b56e:	4b08      	ldr	r3, [pc, #32]	; (800b590 <HAL_RCC_OscConfig+0x2b8>)
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	4a07      	ldr	r2, [pc, #28]	; (800b590 <HAL_RCC_OscConfig+0x2b8>)
 800b574:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b578:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b57a:	f7fd fbb3 	bl	8008ce4 <HAL_GetTick>
 800b57e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b580:	e011      	b.n	800b5a6 <HAL_RCC_OscConfig+0x2ce>
 800b582:	bf00      	nop
 800b584:	40023800 	.word	0x40023800
 800b588:	42470000 	.word	0x42470000
 800b58c:	42470e80 	.word	0x42470e80
 800b590:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b594:	f7fd fba6 	bl	8008ce4 <HAL_GetTick>
 800b598:	4602      	mov	r2, r0
 800b59a:	693b      	ldr	r3, [r7, #16]
 800b59c:	1ad3      	subs	r3, r2, r3
 800b59e:	2b02      	cmp	r3, #2
 800b5a0:	d901      	bls.n	800b5a6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800b5a2:	2303      	movs	r3, #3
 800b5a4:	e0fd      	b.n	800b7a2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b5a6:	4b81      	ldr	r3, [pc, #516]	; (800b7ac <HAL_RCC_OscConfig+0x4d4>)
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d0f0      	beq.n	800b594 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	689b      	ldr	r3, [r3, #8]
 800b5b6:	2b01      	cmp	r3, #1
 800b5b8:	d106      	bne.n	800b5c8 <HAL_RCC_OscConfig+0x2f0>
 800b5ba:	4b7d      	ldr	r3, [pc, #500]	; (800b7b0 <HAL_RCC_OscConfig+0x4d8>)
 800b5bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5be:	4a7c      	ldr	r2, [pc, #496]	; (800b7b0 <HAL_RCC_OscConfig+0x4d8>)
 800b5c0:	f043 0301 	orr.w	r3, r3, #1
 800b5c4:	6713      	str	r3, [r2, #112]	; 0x70
 800b5c6:	e01c      	b.n	800b602 <HAL_RCC_OscConfig+0x32a>
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	689b      	ldr	r3, [r3, #8]
 800b5cc:	2b05      	cmp	r3, #5
 800b5ce:	d10c      	bne.n	800b5ea <HAL_RCC_OscConfig+0x312>
 800b5d0:	4b77      	ldr	r3, [pc, #476]	; (800b7b0 <HAL_RCC_OscConfig+0x4d8>)
 800b5d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5d4:	4a76      	ldr	r2, [pc, #472]	; (800b7b0 <HAL_RCC_OscConfig+0x4d8>)
 800b5d6:	f043 0304 	orr.w	r3, r3, #4
 800b5da:	6713      	str	r3, [r2, #112]	; 0x70
 800b5dc:	4b74      	ldr	r3, [pc, #464]	; (800b7b0 <HAL_RCC_OscConfig+0x4d8>)
 800b5de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5e0:	4a73      	ldr	r2, [pc, #460]	; (800b7b0 <HAL_RCC_OscConfig+0x4d8>)
 800b5e2:	f043 0301 	orr.w	r3, r3, #1
 800b5e6:	6713      	str	r3, [r2, #112]	; 0x70
 800b5e8:	e00b      	b.n	800b602 <HAL_RCC_OscConfig+0x32a>
 800b5ea:	4b71      	ldr	r3, [pc, #452]	; (800b7b0 <HAL_RCC_OscConfig+0x4d8>)
 800b5ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5ee:	4a70      	ldr	r2, [pc, #448]	; (800b7b0 <HAL_RCC_OscConfig+0x4d8>)
 800b5f0:	f023 0301 	bic.w	r3, r3, #1
 800b5f4:	6713      	str	r3, [r2, #112]	; 0x70
 800b5f6:	4b6e      	ldr	r3, [pc, #440]	; (800b7b0 <HAL_RCC_OscConfig+0x4d8>)
 800b5f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5fa:	4a6d      	ldr	r2, [pc, #436]	; (800b7b0 <HAL_RCC_OscConfig+0x4d8>)
 800b5fc:	f023 0304 	bic.w	r3, r3, #4
 800b600:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	689b      	ldr	r3, [r3, #8]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d015      	beq.n	800b636 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b60a:	f7fd fb6b 	bl	8008ce4 <HAL_GetTick>
 800b60e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b610:	e00a      	b.n	800b628 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b612:	f7fd fb67 	bl	8008ce4 <HAL_GetTick>
 800b616:	4602      	mov	r2, r0
 800b618:	693b      	ldr	r3, [r7, #16]
 800b61a:	1ad3      	subs	r3, r2, r3
 800b61c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b620:	4293      	cmp	r3, r2
 800b622:	d901      	bls.n	800b628 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800b624:	2303      	movs	r3, #3
 800b626:	e0bc      	b.n	800b7a2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b628:	4b61      	ldr	r3, [pc, #388]	; (800b7b0 <HAL_RCC_OscConfig+0x4d8>)
 800b62a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b62c:	f003 0302 	and.w	r3, r3, #2
 800b630:	2b00      	cmp	r3, #0
 800b632:	d0ee      	beq.n	800b612 <HAL_RCC_OscConfig+0x33a>
 800b634:	e014      	b.n	800b660 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b636:	f7fd fb55 	bl	8008ce4 <HAL_GetTick>
 800b63a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b63c:	e00a      	b.n	800b654 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b63e:	f7fd fb51 	bl	8008ce4 <HAL_GetTick>
 800b642:	4602      	mov	r2, r0
 800b644:	693b      	ldr	r3, [r7, #16]
 800b646:	1ad3      	subs	r3, r2, r3
 800b648:	f241 3288 	movw	r2, #5000	; 0x1388
 800b64c:	4293      	cmp	r3, r2
 800b64e:	d901      	bls.n	800b654 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800b650:	2303      	movs	r3, #3
 800b652:	e0a6      	b.n	800b7a2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b654:	4b56      	ldr	r3, [pc, #344]	; (800b7b0 <HAL_RCC_OscConfig+0x4d8>)
 800b656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b658:	f003 0302 	and.w	r3, r3, #2
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d1ee      	bne.n	800b63e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b660:	7dfb      	ldrb	r3, [r7, #23]
 800b662:	2b01      	cmp	r3, #1
 800b664:	d105      	bne.n	800b672 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b666:	4b52      	ldr	r3, [pc, #328]	; (800b7b0 <HAL_RCC_OscConfig+0x4d8>)
 800b668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b66a:	4a51      	ldr	r2, [pc, #324]	; (800b7b0 <HAL_RCC_OscConfig+0x4d8>)
 800b66c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b670:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	699b      	ldr	r3, [r3, #24]
 800b676:	2b00      	cmp	r3, #0
 800b678:	f000 8092 	beq.w	800b7a0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b67c:	4b4c      	ldr	r3, [pc, #304]	; (800b7b0 <HAL_RCC_OscConfig+0x4d8>)
 800b67e:	689b      	ldr	r3, [r3, #8]
 800b680:	f003 030c 	and.w	r3, r3, #12
 800b684:	2b08      	cmp	r3, #8
 800b686:	d05c      	beq.n	800b742 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	699b      	ldr	r3, [r3, #24]
 800b68c:	2b02      	cmp	r3, #2
 800b68e:	d141      	bne.n	800b714 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b690:	4b48      	ldr	r3, [pc, #288]	; (800b7b4 <HAL_RCC_OscConfig+0x4dc>)
 800b692:	2200      	movs	r2, #0
 800b694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b696:	f7fd fb25 	bl	8008ce4 <HAL_GetTick>
 800b69a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b69c:	e008      	b.n	800b6b0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b69e:	f7fd fb21 	bl	8008ce4 <HAL_GetTick>
 800b6a2:	4602      	mov	r2, r0
 800b6a4:	693b      	ldr	r3, [r7, #16]
 800b6a6:	1ad3      	subs	r3, r2, r3
 800b6a8:	2b02      	cmp	r3, #2
 800b6aa:	d901      	bls.n	800b6b0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800b6ac:	2303      	movs	r3, #3
 800b6ae:	e078      	b.n	800b7a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b6b0:	4b3f      	ldr	r3, [pc, #252]	; (800b7b0 <HAL_RCC_OscConfig+0x4d8>)
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d1f0      	bne.n	800b69e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	69da      	ldr	r2, [r3, #28]
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	6a1b      	ldr	r3, [r3, #32]
 800b6c4:	431a      	orrs	r2, r3
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6ca:	019b      	lsls	r3, r3, #6
 800b6cc:	431a      	orrs	r2, r3
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6d2:	085b      	lsrs	r3, r3, #1
 800b6d4:	3b01      	subs	r3, #1
 800b6d6:	041b      	lsls	r3, r3, #16
 800b6d8:	431a      	orrs	r2, r3
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6de:	061b      	lsls	r3, r3, #24
 800b6e0:	4933      	ldr	r1, [pc, #204]	; (800b7b0 <HAL_RCC_OscConfig+0x4d8>)
 800b6e2:	4313      	orrs	r3, r2
 800b6e4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b6e6:	4b33      	ldr	r3, [pc, #204]	; (800b7b4 <HAL_RCC_OscConfig+0x4dc>)
 800b6e8:	2201      	movs	r2, #1
 800b6ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b6ec:	f7fd fafa 	bl	8008ce4 <HAL_GetTick>
 800b6f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b6f2:	e008      	b.n	800b706 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b6f4:	f7fd faf6 	bl	8008ce4 <HAL_GetTick>
 800b6f8:	4602      	mov	r2, r0
 800b6fa:	693b      	ldr	r3, [r7, #16]
 800b6fc:	1ad3      	subs	r3, r2, r3
 800b6fe:	2b02      	cmp	r3, #2
 800b700:	d901      	bls.n	800b706 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800b702:	2303      	movs	r3, #3
 800b704:	e04d      	b.n	800b7a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b706:	4b2a      	ldr	r3, [pc, #168]	; (800b7b0 <HAL_RCC_OscConfig+0x4d8>)
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d0f0      	beq.n	800b6f4 <HAL_RCC_OscConfig+0x41c>
 800b712:	e045      	b.n	800b7a0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b714:	4b27      	ldr	r3, [pc, #156]	; (800b7b4 <HAL_RCC_OscConfig+0x4dc>)
 800b716:	2200      	movs	r2, #0
 800b718:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b71a:	f7fd fae3 	bl	8008ce4 <HAL_GetTick>
 800b71e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b720:	e008      	b.n	800b734 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b722:	f7fd fadf 	bl	8008ce4 <HAL_GetTick>
 800b726:	4602      	mov	r2, r0
 800b728:	693b      	ldr	r3, [r7, #16]
 800b72a:	1ad3      	subs	r3, r2, r3
 800b72c:	2b02      	cmp	r3, #2
 800b72e:	d901      	bls.n	800b734 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800b730:	2303      	movs	r3, #3
 800b732:	e036      	b.n	800b7a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b734:	4b1e      	ldr	r3, [pc, #120]	; (800b7b0 <HAL_RCC_OscConfig+0x4d8>)
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d1f0      	bne.n	800b722 <HAL_RCC_OscConfig+0x44a>
 800b740:	e02e      	b.n	800b7a0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	699b      	ldr	r3, [r3, #24]
 800b746:	2b01      	cmp	r3, #1
 800b748:	d101      	bne.n	800b74e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800b74a:	2301      	movs	r3, #1
 800b74c:	e029      	b.n	800b7a2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800b74e:	4b18      	ldr	r3, [pc, #96]	; (800b7b0 <HAL_RCC_OscConfig+0x4d8>)
 800b750:	685b      	ldr	r3, [r3, #4]
 800b752:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	69db      	ldr	r3, [r3, #28]
 800b75e:	429a      	cmp	r2, r3
 800b760:	d11c      	bne.n	800b79c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b76c:	429a      	cmp	r2, r3
 800b76e:	d115      	bne.n	800b79c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800b770:	68fa      	ldr	r2, [r7, #12]
 800b772:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800b776:	4013      	ands	r3, r2
 800b778:	687a      	ldr	r2, [r7, #4]
 800b77a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b77c:	4293      	cmp	r3, r2
 800b77e:	d10d      	bne.n	800b79c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800b78a:	429a      	cmp	r2, r3
 800b78c:	d106      	bne.n	800b79c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800b798:	429a      	cmp	r2, r3
 800b79a:	d001      	beq.n	800b7a0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800b79c:	2301      	movs	r3, #1
 800b79e:	e000      	b.n	800b7a2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800b7a0:	2300      	movs	r3, #0
}
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	3718      	adds	r7, #24
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bd80      	pop	{r7, pc}
 800b7aa:	bf00      	nop
 800b7ac:	40007000 	.word	0x40007000
 800b7b0:	40023800 	.word	0x40023800
 800b7b4:	42470060 	.word	0x42470060

0800b7b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b084      	sub	sp, #16
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
 800b7c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d101      	bne.n	800b7cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b7c8:	2301      	movs	r3, #1
 800b7ca:	e0cc      	b.n	800b966 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b7cc:	4b68      	ldr	r3, [pc, #416]	; (800b970 <HAL_RCC_ClockConfig+0x1b8>)
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	f003 030f 	and.w	r3, r3, #15
 800b7d4:	683a      	ldr	r2, [r7, #0]
 800b7d6:	429a      	cmp	r2, r3
 800b7d8:	d90c      	bls.n	800b7f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b7da:	4b65      	ldr	r3, [pc, #404]	; (800b970 <HAL_RCC_ClockConfig+0x1b8>)
 800b7dc:	683a      	ldr	r2, [r7, #0]
 800b7de:	b2d2      	uxtb	r2, r2
 800b7e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b7e2:	4b63      	ldr	r3, [pc, #396]	; (800b970 <HAL_RCC_ClockConfig+0x1b8>)
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	f003 030f 	and.w	r3, r3, #15
 800b7ea:	683a      	ldr	r2, [r7, #0]
 800b7ec:	429a      	cmp	r2, r3
 800b7ee:	d001      	beq.n	800b7f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800b7f0:	2301      	movs	r3, #1
 800b7f2:	e0b8      	b.n	800b966 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	f003 0302 	and.w	r3, r3, #2
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d020      	beq.n	800b842 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	f003 0304 	and.w	r3, r3, #4
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d005      	beq.n	800b818 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b80c:	4b59      	ldr	r3, [pc, #356]	; (800b974 <HAL_RCC_ClockConfig+0x1bc>)
 800b80e:	689b      	ldr	r3, [r3, #8]
 800b810:	4a58      	ldr	r2, [pc, #352]	; (800b974 <HAL_RCC_ClockConfig+0x1bc>)
 800b812:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b816:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	f003 0308 	and.w	r3, r3, #8
 800b820:	2b00      	cmp	r3, #0
 800b822:	d005      	beq.n	800b830 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b824:	4b53      	ldr	r3, [pc, #332]	; (800b974 <HAL_RCC_ClockConfig+0x1bc>)
 800b826:	689b      	ldr	r3, [r3, #8]
 800b828:	4a52      	ldr	r2, [pc, #328]	; (800b974 <HAL_RCC_ClockConfig+0x1bc>)
 800b82a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b82e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b830:	4b50      	ldr	r3, [pc, #320]	; (800b974 <HAL_RCC_ClockConfig+0x1bc>)
 800b832:	689b      	ldr	r3, [r3, #8]
 800b834:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	689b      	ldr	r3, [r3, #8]
 800b83c:	494d      	ldr	r1, [pc, #308]	; (800b974 <HAL_RCC_ClockConfig+0x1bc>)
 800b83e:	4313      	orrs	r3, r2
 800b840:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	f003 0301 	and.w	r3, r3, #1
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d044      	beq.n	800b8d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	685b      	ldr	r3, [r3, #4]
 800b852:	2b01      	cmp	r3, #1
 800b854:	d107      	bne.n	800b866 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b856:	4b47      	ldr	r3, [pc, #284]	; (800b974 <HAL_RCC_ClockConfig+0x1bc>)
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d119      	bne.n	800b896 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b862:	2301      	movs	r3, #1
 800b864:	e07f      	b.n	800b966 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	685b      	ldr	r3, [r3, #4]
 800b86a:	2b02      	cmp	r3, #2
 800b86c:	d003      	beq.n	800b876 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b872:	2b03      	cmp	r3, #3
 800b874:	d107      	bne.n	800b886 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b876:	4b3f      	ldr	r3, [pc, #252]	; (800b974 <HAL_RCC_ClockConfig+0x1bc>)
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d109      	bne.n	800b896 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b882:	2301      	movs	r3, #1
 800b884:	e06f      	b.n	800b966 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b886:	4b3b      	ldr	r3, [pc, #236]	; (800b974 <HAL_RCC_ClockConfig+0x1bc>)
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	f003 0302 	and.w	r3, r3, #2
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d101      	bne.n	800b896 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b892:	2301      	movs	r3, #1
 800b894:	e067      	b.n	800b966 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b896:	4b37      	ldr	r3, [pc, #220]	; (800b974 <HAL_RCC_ClockConfig+0x1bc>)
 800b898:	689b      	ldr	r3, [r3, #8]
 800b89a:	f023 0203 	bic.w	r2, r3, #3
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	685b      	ldr	r3, [r3, #4]
 800b8a2:	4934      	ldr	r1, [pc, #208]	; (800b974 <HAL_RCC_ClockConfig+0x1bc>)
 800b8a4:	4313      	orrs	r3, r2
 800b8a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b8a8:	f7fd fa1c 	bl	8008ce4 <HAL_GetTick>
 800b8ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b8ae:	e00a      	b.n	800b8c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b8b0:	f7fd fa18 	bl	8008ce4 <HAL_GetTick>
 800b8b4:	4602      	mov	r2, r0
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	1ad3      	subs	r3, r2, r3
 800b8ba:	f241 3288 	movw	r2, #5000	; 0x1388
 800b8be:	4293      	cmp	r3, r2
 800b8c0:	d901      	bls.n	800b8c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b8c2:	2303      	movs	r3, #3
 800b8c4:	e04f      	b.n	800b966 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b8c6:	4b2b      	ldr	r3, [pc, #172]	; (800b974 <HAL_RCC_ClockConfig+0x1bc>)
 800b8c8:	689b      	ldr	r3, [r3, #8]
 800b8ca:	f003 020c 	and.w	r2, r3, #12
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	685b      	ldr	r3, [r3, #4]
 800b8d2:	009b      	lsls	r3, r3, #2
 800b8d4:	429a      	cmp	r2, r3
 800b8d6:	d1eb      	bne.n	800b8b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b8d8:	4b25      	ldr	r3, [pc, #148]	; (800b970 <HAL_RCC_ClockConfig+0x1b8>)
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	f003 030f 	and.w	r3, r3, #15
 800b8e0:	683a      	ldr	r2, [r7, #0]
 800b8e2:	429a      	cmp	r2, r3
 800b8e4:	d20c      	bcs.n	800b900 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b8e6:	4b22      	ldr	r3, [pc, #136]	; (800b970 <HAL_RCC_ClockConfig+0x1b8>)
 800b8e8:	683a      	ldr	r2, [r7, #0]
 800b8ea:	b2d2      	uxtb	r2, r2
 800b8ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b8ee:	4b20      	ldr	r3, [pc, #128]	; (800b970 <HAL_RCC_ClockConfig+0x1b8>)
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	f003 030f 	and.w	r3, r3, #15
 800b8f6:	683a      	ldr	r2, [r7, #0]
 800b8f8:	429a      	cmp	r2, r3
 800b8fa:	d001      	beq.n	800b900 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b8fc:	2301      	movs	r3, #1
 800b8fe:	e032      	b.n	800b966 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	f003 0304 	and.w	r3, r3, #4
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d008      	beq.n	800b91e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b90c:	4b19      	ldr	r3, [pc, #100]	; (800b974 <HAL_RCC_ClockConfig+0x1bc>)
 800b90e:	689b      	ldr	r3, [r3, #8]
 800b910:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	68db      	ldr	r3, [r3, #12]
 800b918:	4916      	ldr	r1, [pc, #88]	; (800b974 <HAL_RCC_ClockConfig+0x1bc>)
 800b91a:	4313      	orrs	r3, r2
 800b91c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	f003 0308 	and.w	r3, r3, #8
 800b926:	2b00      	cmp	r3, #0
 800b928:	d009      	beq.n	800b93e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b92a:	4b12      	ldr	r3, [pc, #72]	; (800b974 <HAL_RCC_ClockConfig+0x1bc>)
 800b92c:	689b      	ldr	r3, [r3, #8]
 800b92e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	691b      	ldr	r3, [r3, #16]
 800b936:	00db      	lsls	r3, r3, #3
 800b938:	490e      	ldr	r1, [pc, #56]	; (800b974 <HAL_RCC_ClockConfig+0x1bc>)
 800b93a:	4313      	orrs	r3, r2
 800b93c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b93e:	f000 f821 	bl	800b984 <HAL_RCC_GetSysClockFreq>
 800b942:	4601      	mov	r1, r0
 800b944:	4b0b      	ldr	r3, [pc, #44]	; (800b974 <HAL_RCC_ClockConfig+0x1bc>)
 800b946:	689b      	ldr	r3, [r3, #8]
 800b948:	091b      	lsrs	r3, r3, #4
 800b94a:	f003 030f 	and.w	r3, r3, #15
 800b94e:	4a0a      	ldr	r2, [pc, #40]	; (800b978 <HAL_RCC_ClockConfig+0x1c0>)
 800b950:	5cd3      	ldrb	r3, [r2, r3]
 800b952:	fa21 f303 	lsr.w	r3, r1, r3
 800b956:	4a09      	ldr	r2, [pc, #36]	; (800b97c <HAL_RCC_ClockConfig+0x1c4>)
 800b958:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800b95a:	4b09      	ldr	r3, [pc, #36]	; (800b980 <HAL_RCC_ClockConfig+0x1c8>)
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	4618      	mov	r0, r3
 800b960:	f7fd f97c 	bl	8008c5c <HAL_InitTick>

  return HAL_OK;
 800b964:	2300      	movs	r3, #0
}
 800b966:	4618      	mov	r0, r3
 800b968:	3710      	adds	r7, #16
 800b96a:	46bd      	mov	sp, r7
 800b96c:	bd80      	pop	{r7, pc}
 800b96e:	bf00      	nop
 800b970:	40023c00 	.word	0x40023c00
 800b974:	40023800 	.word	0x40023800
 800b978:	0801d5a8 	.word	0x0801d5a8
 800b97c:	200011c4 	.word	0x200011c4
 800b980:	20001334 	.word	0x20001334

0800b984 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b984:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b986:	b085      	sub	sp, #20
 800b988:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800b98a:	2300      	movs	r3, #0
 800b98c:	607b      	str	r3, [r7, #4]
 800b98e:	2300      	movs	r3, #0
 800b990:	60fb      	str	r3, [r7, #12]
 800b992:	2300      	movs	r3, #0
 800b994:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800b996:	2300      	movs	r3, #0
 800b998:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b99a:	4b63      	ldr	r3, [pc, #396]	; (800bb28 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b99c:	689b      	ldr	r3, [r3, #8]
 800b99e:	f003 030c 	and.w	r3, r3, #12
 800b9a2:	2b04      	cmp	r3, #4
 800b9a4:	d007      	beq.n	800b9b6 <HAL_RCC_GetSysClockFreq+0x32>
 800b9a6:	2b08      	cmp	r3, #8
 800b9a8:	d008      	beq.n	800b9bc <HAL_RCC_GetSysClockFreq+0x38>
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	f040 80b4 	bne.w	800bb18 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b9b0:	4b5e      	ldr	r3, [pc, #376]	; (800bb2c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800b9b2:	60bb      	str	r3, [r7, #8]
       break;
 800b9b4:	e0b3      	b.n	800bb1e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b9b6:	4b5e      	ldr	r3, [pc, #376]	; (800bb30 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800b9b8:	60bb      	str	r3, [r7, #8]
      break;
 800b9ba:	e0b0      	b.n	800bb1e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b9bc:	4b5a      	ldr	r3, [pc, #360]	; (800bb28 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b9be:	685b      	ldr	r3, [r3, #4]
 800b9c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b9c4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b9c6:	4b58      	ldr	r3, [pc, #352]	; (800bb28 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b9c8:	685b      	ldr	r3, [r3, #4]
 800b9ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d04a      	beq.n	800ba68 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b9d2:	4b55      	ldr	r3, [pc, #340]	; (800bb28 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b9d4:	685b      	ldr	r3, [r3, #4]
 800b9d6:	099b      	lsrs	r3, r3, #6
 800b9d8:	f04f 0400 	mov.w	r4, #0
 800b9dc:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b9e0:	f04f 0200 	mov.w	r2, #0
 800b9e4:	ea03 0501 	and.w	r5, r3, r1
 800b9e8:	ea04 0602 	and.w	r6, r4, r2
 800b9ec:	4629      	mov	r1, r5
 800b9ee:	4632      	mov	r2, r6
 800b9f0:	f04f 0300 	mov.w	r3, #0
 800b9f4:	f04f 0400 	mov.w	r4, #0
 800b9f8:	0154      	lsls	r4, r2, #5
 800b9fa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800b9fe:	014b      	lsls	r3, r1, #5
 800ba00:	4619      	mov	r1, r3
 800ba02:	4622      	mov	r2, r4
 800ba04:	1b49      	subs	r1, r1, r5
 800ba06:	eb62 0206 	sbc.w	r2, r2, r6
 800ba0a:	f04f 0300 	mov.w	r3, #0
 800ba0e:	f04f 0400 	mov.w	r4, #0
 800ba12:	0194      	lsls	r4, r2, #6
 800ba14:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800ba18:	018b      	lsls	r3, r1, #6
 800ba1a:	1a5b      	subs	r3, r3, r1
 800ba1c:	eb64 0402 	sbc.w	r4, r4, r2
 800ba20:	f04f 0100 	mov.w	r1, #0
 800ba24:	f04f 0200 	mov.w	r2, #0
 800ba28:	00e2      	lsls	r2, r4, #3
 800ba2a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800ba2e:	00d9      	lsls	r1, r3, #3
 800ba30:	460b      	mov	r3, r1
 800ba32:	4614      	mov	r4, r2
 800ba34:	195b      	adds	r3, r3, r5
 800ba36:	eb44 0406 	adc.w	r4, r4, r6
 800ba3a:	f04f 0100 	mov.w	r1, #0
 800ba3e:	f04f 0200 	mov.w	r2, #0
 800ba42:	0262      	lsls	r2, r4, #9
 800ba44:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800ba48:	0259      	lsls	r1, r3, #9
 800ba4a:	460b      	mov	r3, r1
 800ba4c:	4614      	mov	r4, r2
 800ba4e:	4618      	mov	r0, r3
 800ba50:	4621      	mov	r1, r4
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	f04f 0400 	mov.w	r4, #0
 800ba58:	461a      	mov	r2, r3
 800ba5a:	4623      	mov	r3, r4
 800ba5c:	f7f5 f8fc 	bl	8000c58 <__aeabi_uldivmod>
 800ba60:	4603      	mov	r3, r0
 800ba62:	460c      	mov	r4, r1
 800ba64:	60fb      	str	r3, [r7, #12]
 800ba66:	e049      	b.n	800bafc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ba68:	4b2f      	ldr	r3, [pc, #188]	; (800bb28 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800ba6a:	685b      	ldr	r3, [r3, #4]
 800ba6c:	099b      	lsrs	r3, r3, #6
 800ba6e:	f04f 0400 	mov.w	r4, #0
 800ba72:	f240 11ff 	movw	r1, #511	; 0x1ff
 800ba76:	f04f 0200 	mov.w	r2, #0
 800ba7a:	ea03 0501 	and.w	r5, r3, r1
 800ba7e:	ea04 0602 	and.w	r6, r4, r2
 800ba82:	4629      	mov	r1, r5
 800ba84:	4632      	mov	r2, r6
 800ba86:	f04f 0300 	mov.w	r3, #0
 800ba8a:	f04f 0400 	mov.w	r4, #0
 800ba8e:	0154      	lsls	r4, r2, #5
 800ba90:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800ba94:	014b      	lsls	r3, r1, #5
 800ba96:	4619      	mov	r1, r3
 800ba98:	4622      	mov	r2, r4
 800ba9a:	1b49      	subs	r1, r1, r5
 800ba9c:	eb62 0206 	sbc.w	r2, r2, r6
 800baa0:	f04f 0300 	mov.w	r3, #0
 800baa4:	f04f 0400 	mov.w	r4, #0
 800baa8:	0194      	lsls	r4, r2, #6
 800baaa:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800baae:	018b      	lsls	r3, r1, #6
 800bab0:	1a5b      	subs	r3, r3, r1
 800bab2:	eb64 0402 	sbc.w	r4, r4, r2
 800bab6:	f04f 0100 	mov.w	r1, #0
 800baba:	f04f 0200 	mov.w	r2, #0
 800babe:	00e2      	lsls	r2, r4, #3
 800bac0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800bac4:	00d9      	lsls	r1, r3, #3
 800bac6:	460b      	mov	r3, r1
 800bac8:	4614      	mov	r4, r2
 800baca:	195b      	adds	r3, r3, r5
 800bacc:	eb44 0406 	adc.w	r4, r4, r6
 800bad0:	f04f 0100 	mov.w	r1, #0
 800bad4:	f04f 0200 	mov.w	r2, #0
 800bad8:	02a2      	lsls	r2, r4, #10
 800bada:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800bade:	0299      	lsls	r1, r3, #10
 800bae0:	460b      	mov	r3, r1
 800bae2:	4614      	mov	r4, r2
 800bae4:	4618      	mov	r0, r3
 800bae6:	4621      	mov	r1, r4
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	f04f 0400 	mov.w	r4, #0
 800baee:	461a      	mov	r2, r3
 800baf0:	4623      	mov	r3, r4
 800baf2:	f7f5 f8b1 	bl	8000c58 <__aeabi_uldivmod>
 800baf6:	4603      	mov	r3, r0
 800baf8:	460c      	mov	r4, r1
 800bafa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800bafc:	4b0a      	ldr	r3, [pc, #40]	; (800bb28 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800bafe:	685b      	ldr	r3, [r3, #4]
 800bb00:	0c1b      	lsrs	r3, r3, #16
 800bb02:	f003 0303 	and.w	r3, r3, #3
 800bb06:	3301      	adds	r3, #1
 800bb08:	005b      	lsls	r3, r3, #1
 800bb0a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800bb0c:	68fa      	ldr	r2, [r7, #12]
 800bb0e:	683b      	ldr	r3, [r7, #0]
 800bb10:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb14:	60bb      	str	r3, [r7, #8]
      break;
 800bb16:	e002      	b.n	800bb1e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800bb18:	4b04      	ldr	r3, [pc, #16]	; (800bb2c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800bb1a:	60bb      	str	r3, [r7, #8]
      break;
 800bb1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800bb1e:	68bb      	ldr	r3, [r7, #8]
}
 800bb20:	4618      	mov	r0, r3
 800bb22:	3714      	adds	r7, #20
 800bb24:	46bd      	mov	sp, r7
 800bb26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb28:	40023800 	.word	0x40023800
 800bb2c:	00f42400 	.word	0x00f42400
 800bb30:	007a1200 	.word	0x007a1200

0800bb34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bb34:	b480      	push	{r7}
 800bb36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800bb38:	4b03      	ldr	r3, [pc, #12]	; (800bb48 <HAL_RCC_GetHCLKFreq+0x14>)
 800bb3a:	681b      	ldr	r3, [r3, #0]
}
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb44:	4770      	bx	lr
 800bb46:	bf00      	nop
 800bb48:	200011c4 	.word	0x200011c4

0800bb4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800bb50:	f7ff fff0 	bl	800bb34 <HAL_RCC_GetHCLKFreq>
 800bb54:	4601      	mov	r1, r0
 800bb56:	4b05      	ldr	r3, [pc, #20]	; (800bb6c <HAL_RCC_GetPCLK1Freq+0x20>)
 800bb58:	689b      	ldr	r3, [r3, #8]
 800bb5a:	0a9b      	lsrs	r3, r3, #10
 800bb5c:	f003 0307 	and.w	r3, r3, #7
 800bb60:	4a03      	ldr	r2, [pc, #12]	; (800bb70 <HAL_RCC_GetPCLK1Freq+0x24>)
 800bb62:	5cd3      	ldrb	r3, [r2, r3]
 800bb64:	fa21 f303 	lsr.w	r3, r1, r3
}
 800bb68:	4618      	mov	r0, r3
 800bb6a:	bd80      	pop	{r7, pc}
 800bb6c:	40023800 	.word	0x40023800
 800bb70:	0801d5b8 	.word	0x0801d5b8

0800bb74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800bb78:	f7ff ffdc 	bl	800bb34 <HAL_RCC_GetHCLKFreq>
 800bb7c:	4601      	mov	r1, r0
 800bb7e:	4b05      	ldr	r3, [pc, #20]	; (800bb94 <HAL_RCC_GetPCLK2Freq+0x20>)
 800bb80:	689b      	ldr	r3, [r3, #8]
 800bb82:	0b5b      	lsrs	r3, r3, #13
 800bb84:	f003 0307 	and.w	r3, r3, #7
 800bb88:	4a03      	ldr	r2, [pc, #12]	; (800bb98 <HAL_RCC_GetPCLK2Freq+0x24>)
 800bb8a:	5cd3      	ldrb	r3, [r2, r3]
 800bb8c:	fa21 f303 	lsr.w	r3, r1, r3
}
 800bb90:	4618      	mov	r0, r3
 800bb92:	bd80      	pop	{r7, pc}
 800bb94:	40023800 	.word	0x40023800
 800bb98:	0801d5b8 	.word	0x0801d5b8

0800bb9c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b086      	sub	sp, #24
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800bba4:	2300      	movs	r3, #0
 800bba6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800bba8:	2300      	movs	r3, #0
 800bbaa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	f003 0301 	and.w	r3, r3, #1
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d105      	bne.n	800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d035      	beq.n	800bc30 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800bbc4:	4b67      	ldr	r3, [pc, #412]	; (800bd64 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800bbca:	f7fd f88b 	bl	8008ce4 <HAL_GetTick>
 800bbce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800bbd0:	e008      	b.n	800bbe4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800bbd2:	f7fd f887 	bl	8008ce4 <HAL_GetTick>
 800bbd6:	4602      	mov	r2, r0
 800bbd8:	697b      	ldr	r3, [r7, #20]
 800bbda:	1ad3      	subs	r3, r2, r3
 800bbdc:	2b02      	cmp	r3, #2
 800bbde:	d901      	bls.n	800bbe4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bbe0:	2303      	movs	r3, #3
 800bbe2:	e0ba      	b.n	800bd5a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800bbe4:	4b60      	ldr	r3, [pc, #384]	; (800bd68 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d1f0      	bne.n	800bbd2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	685b      	ldr	r3, [r3, #4]
 800bbf4:	019a      	lsls	r2, r3, #6
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	689b      	ldr	r3, [r3, #8]
 800bbfa:	071b      	lsls	r3, r3, #28
 800bbfc:	495a      	ldr	r1, [pc, #360]	; (800bd68 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800bbfe:	4313      	orrs	r3, r2
 800bc00:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800bc04:	4b57      	ldr	r3, [pc, #348]	; (800bd64 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800bc06:	2201      	movs	r2, #1
 800bc08:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800bc0a:	f7fd f86b 	bl	8008ce4 <HAL_GetTick>
 800bc0e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800bc10:	e008      	b.n	800bc24 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800bc12:	f7fd f867 	bl	8008ce4 <HAL_GetTick>
 800bc16:	4602      	mov	r2, r0
 800bc18:	697b      	ldr	r3, [r7, #20]
 800bc1a:	1ad3      	subs	r3, r2, r3
 800bc1c:	2b02      	cmp	r3, #2
 800bc1e:	d901      	bls.n	800bc24 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bc20:	2303      	movs	r3, #3
 800bc22:	e09a      	b.n	800bd5a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800bc24:	4b50      	ldr	r3, [pc, #320]	; (800bd68 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d0f0      	beq.n	800bc12 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	f003 0302 	and.w	r3, r3, #2
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	f000 8083 	beq.w	800bd44 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800bc3e:	2300      	movs	r3, #0
 800bc40:	60fb      	str	r3, [r7, #12]
 800bc42:	4b49      	ldr	r3, [pc, #292]	; (800bd68 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800bc44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc46:	4a48      	ldr	r2, [pc, #288]	; (800bd68 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800bc48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bc4c:	6413      	str	r3, [r2, #64]	; 0x40
 800bc4e:	4b46      	ldr	r3, [pc, #280]	; (800bd68 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800bc50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bc56:	60fb      	str	r3, [r7, #12]
 800bc58:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800bc5a:	4b44      	ldr	r3, [pc, #272]	; (800bd6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	4a43      	ldr	r2, [pc, #268]	; (800bd6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bc60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bc64:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800bc66:	f7fd f83d 	bl	8008ce4 <HAL_GetTick>
 800bc6a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800bc6c:	e008      	b.n	800bc80 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800bc6e:	f7fd f839 	bl	8008ce4 <HAL_GetTick>
 800bc72:	4602      	mov	r2, r0
 800bc74:	697b      	ldr	r3, [r7, #20]
 800bc76:	1ad3      	subs	r3, r2, r3
 800bc78:	2b02      	cmp	r3, #2
 800bc7a:	d901      	bls.n	800bc80 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800bc7c:	2303      	movs	r3, #3
 800bc7e:	e06c      	b.n	800bd5a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800bc80:	4b3a      	ldr	r3, [pc, #232]	; (800bd6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d0f0      	beq.n	800bc6e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800bc8c:	4b36      	ldr	r3, [pc, #216]	; (800bd68 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800bc8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bc94:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800bc96:	693b      	ldr	r3, [r7, #16]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d02f      	beq.n	800bcfc <HAL_RCCEx_PeriphCLKConfig+0x160>
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	68db      	ldr	r3, [r3, #12]
 800bca0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bca4:	693a      	ldr	r2, [r7, #16]
 800bca6:	429a      	cmp	r2, r3
 800bca8:	d028      	beq.n	800bcfc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bcaa:	4b2f      	ldr	r3, [pc, #188]	; (800bd68 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800bcac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bcae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bcb2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800bcb4:	4b2e      	ldr	r3, [pc, #184]	; (800bd70 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800bcb6:	2201      	movs	r2, #1
 800bcb8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800bcba:	4b2d      	ldr	r3, [pc, #180]	; (800bd70 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800bcc0:	4a29      	ldr	r2, [pc, #164]	; (800bd68 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800bcc2:	693b      	ldr	r3, [r7, #16]
 800bcc4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800bcc6:	4b28      	ldr	r3, [pc, #160]	; (800bd68 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800bcc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bcca:	f003 0301 	and.w	r3, r3, #1
 800bcce:	2b01      	cmp	r3, #1
 800bcd0:	d114      	bne.n	800bcfc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800bcd2:	f7fd f807 	bl	8008ce4 <HAL_GetTick>
 800bcd6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bcd8:	e00a      	b.n	800bcf0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bcda:	f7fd f803 	bl	8008ce4 <HAL_GetTick>
 800bcde:	4602      	mov	r2, r0
 800bce0:	697b      	ldr	r3, [r7, #20]
 800bce2:	1ad3      	subs	r3, r2, r3
 800bce4:	f241 3288 	movw	r2, #5000	; 0x1388
 800bce8:	4293      	cmp	r3, r2
 800bcea:	d901      	bls.n	800bcf0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800bcec:	2303      	movs	r3, #3
 800bcee:	e034      	b.n	800bd5a <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bcf0:	4b1d      	ldr	r3, [pc, #116]	; (800bd68 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800bcf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bcf4:	f003 0302 	and.w	r3, r3, #2
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d0ee      	beq.n	800bcda <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	68db      	ldr	r3, [r3, #12]
 800bd00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bd04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bd08:	d10d      	bne.n	800bd26 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800bd0a:	4b17      	ldr	r3, [pc, #92]	; (800bd68 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800bd0c:	689b      	ldr	r3, [r3, #8]
 800bd0e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	68db      	ldr	r3, [r3, #12]
 800bd16:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800bd1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bd1e:	4912      	ldr	r1, [pc, #72]	; (800bd68 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800bd20:	4313      	orrs	r3, r2
 800bd22:	608b      	str	r3, [r1, #8]
 800bd24:	e005      	b.n	800bd32 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800bd26:	4b10      	ldr	r3, [pc, #64]	; (800bd68 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800bd28:	689b      	ldr	r3, [r3, #8]
 800bd2a:	4a0f      	ldr	r2, [pc, #60]	; (800bd68 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800bd2c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800bd30:	6093      	str	r3, [r2, #8]
 800bd32:	4b0d      	ldr	r3, [pc, #52]	; (800bd68 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800bd34:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	68db      	ldr	r3, [r3, #12]
 800bd3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bd3e:	490a      	ldr	r1, [pc, #40]	; (800bd68 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800bd40:	4313      	orrs	r3, r2
 800bd42:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	f003 0308 	and.w	r3, r3, #8
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d003      	beq.n	800bd58 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	7c1a      	ldrb	r2, [r3, #16]
 800bd54:	4b07      	ldr	r3, [pc, #28]	; (800bd74 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800bd56:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800bd58:	2300      	movs	r3, #0
}
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	3718      	adds	r7, #24
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	bd80      	pop	{r7, pc}
 800bd62:	bf00      	nop
 800bd64:	42470068 	.word	0x42470068
 800bd68:	40023800 	.word	0x40023800
 800bd6c:	40007000 	.word	0x40007000
 800bd70:	42470e40 	.word	0x42470e40
 800bd74:	424711e0 	.word	0x424711e0

0800bd78 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b082      	sub	sp, #8
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d101      	bne.n	800bd8a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800bd86:	2301      	movs	r3, #1
 800bd88:	e083      	b.n	800be92 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	7f5b      	ldrb	r3, [r3, #29]
 800bd8e:	b2db      	uxtb	r3, r3
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d105      	bne.n	800bda0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	2200      	movs	r2, #0
 800bd98:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800bd9a:	6878      	ldr	r0, [r7, #4]
 800bd9c:	f7f7 fa5e 	bl	800325c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	2202      	movs	r2, #2
 800bda4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	22ca      	movs	r2, #202	; 0xca
 800bdac:	625a      	str	r2, [r3, #36]	; 0x24
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	2253      	movs	r2, #83	; 0x53
 800bdb4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800bdb6:	6878      	ldr	r0, [r7, #4]
 800bdb8:	f000 faa8 	bl	800c30c <RTC_EnterInitMode>
 800bdbc:	4603      	mov	r3, r0
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d008      	beq.n	800bdd4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	22ff      	movs	r2, #255	; 0xff
 800bdc8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	2204      	movs	r2, #4
 800bdce:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800bdd0:	2301      	movs	r3, #1
 800bdd2:	e05e      	b.n	800be92 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	689b      	ldr	r3, [r3, #8]
 800bdda:	687a      	ldr	r2, [r7, #4]
 800bddc:	6812      	ldr	r2, [r2, #0]
 800bdde:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bde2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bde6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	6899      	ldr	r1, [r3, #8]
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	685a      	ldr	r2, [r3, #4]
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	691b      	ldr	r3, [r3, #16]
 800bdf6:	431a      	orrs	r2, r3
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	695b      	ldr	r3, [r3, #20]
 800bdfc:	431a      	orrs	r2, r3
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	430a      	orrs	r2, r1
 800be04:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	687a      	ldr	r2, [r7, #4]
 800be0c:	68d2      	ldr	r2, [r2, #12]
 800be0e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	6919      	ldr	r1, [r3, #16]
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	689b      	ldr	r3, [r3, #8]
 800be1a:	041a      	lsls	r2, r3, #16
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	430a      	orrs	r2, r1
 800be22:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	68da      	ldr	r2, [r3, #12]
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800be32:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	689b      	ldr	r3, [r3, #8]
 800be3a:	f003 0320 	and.w	r3, r3, #32
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d10e      	bne.n	800be60 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800be42:	6878      	ldr	r0, [r7, #4]
 800be44:	f000 fa3a 	bl	800c2bc <HAL_RTC_WaitForSynchro>
 800be48:	4603      	mov	r3, r0
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d008      	beq.n	800be60 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	22ff      	movs	r2, #255	; 0xff
 800be54:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	2204      	movs	r2, #4
 800be5a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800be5c:	2301      	movs	r3, #1
 800be5e:	e018      	b.n	800be92 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800be6e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	699a      	ldr	r2, [r3, #24]
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	430a      	orrs	r2, r1
 800be80:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	22ff      	movs	r2, #255	; 0xff
 800be88:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	2201      	movs	r2, #1
 800be8e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800be90:	2300      	movs	r3, #0
  }
}
 800be92:	4618      	mov	r0, r3
 800be94:	3708      	adds	r7, #8
 800be96:	46bd      	mov	sp, r7
 800be98:	bd80      	pop	{r7, pc}

0800be9a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800be9a:	b590      	push	{r4, r7, lr}
 800be9c:	b087      	sub	sp, #28
 800be9e:	af00      	add	r7, sp, #0
 800bea0:	60f8      	str	r0, [r7, #12]
 800bea2:	60b9      	str	r1, [r7, #8]
 800bea4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800bea6:	2300      	movs	r3, #0
 800bea8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	7f1b      	ldrb	r3, [r3, #28]
 800beae:	2b01      	cmp	r3, #1
 800beb0:	d101      	bne.n	800beb6 <HAL_RTC_SetTime+0x1c>
 800beb2:	2302      	movs	r3, #2
 800beb4:	e0aa      	b.n	800c00c <HAL_RTC_SetTime+0x172>
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	2201      	movs	r2, #1
 800beba:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	2202      	movs	r2, #2
 800bec0:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d126      	bne.n	800bf16 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	689b      	ldr	r3, [r3, #8]
 800bece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d102      	bne.n	800bedc <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800bed6:	68bb      	ldr	r3, [r7, #8]
 800bed8:	2200      	movs	r2, #0
 800beda:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800bedc:	68bb      	ldr	r3, [r7, #8]
 800bede:	781b      	ldrb	r3, [r3, #0]
 800bee0:	4618      	mov	r0, r3
 800bee2:	f000 fa3f 	bl	800c364 <RTC_ByteToBcd2>
 800bee6:	4603      	mov	r3, r0
 800bee8:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800beea:	68bb      	ldr	r3, [r7, #8]
 800beec:	785b      	ldrb	r3, [r3, #1]
 800beee:	4618      	mov	r0, r3
 800bef0:	f000 fa38 	bl	800c364 <RTC_ByteToBcd2>
 800bef4:	4603      	mov	r3, r0
 800bef6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800bef8:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800befa:	68bb      	ldr	r3, [r7, #8]
 800befc:	789b      	ldrb	r3, [r3, #2]
 800befe:	4618      	mov	r0, r3
 800bf00:	f000 fa30 	bl	800c364 <RTC_ByteToBcd2>
 800bf04:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800bf06:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800bf0a:	68bb      	ldr	r3, [r7, #8]
 800bf0c:	78db      	ldrb	r3, [r3, #3]
 800bf0e:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800bf10:	4313      	orrs	r3, r2
 800bf12:	617b      	str	r3, [r7, #20]
 800bf14:	e018      	b.n	800bf48 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	689b      	ldr	r3, [r3, #8]
 800bf1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d102      	bne.n	800bf2a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800bf24:	68bb      	ldr	r3, [r7, #8]
 800bf26:	2200      	movs	r2, #0
 800bf28:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800bf2a:	68bb      	ldr	r3, [r7, #8]
 800bf2c:	781b      	ldrb	r3, [r3, #0]
 800bf2e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800bf30:	68bb      	ldr	r3, [r7, #8]
 800bf32:	785b      	ldrb	r3, [r3, #1]
 800bf34:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800bf36:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800bf38:	68ba      	ldr	r2, [r7, #8]
 800bf3a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800bf3c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800bf3e:	68bb      	ldr	r3, [r7, #8]
 800bf40:	78db      	ldrb	r3, [r3, #3]
 800bf42:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800bf44:	4313      	orrs	r3, r2
 800bf46:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	22ca      	movs	r2, #202	; 0xca
 800bf4e:	625a      	str	r2, [r3, #36]	; 0x24
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	2253      	movs	r2, #83	; 0x53
 800bf56:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800bf58:	68f8      	ldr	r0, [r7, #12]
 800bf5a:	f000 f9d7 	bl	800c30c <RTC_EnterInitMode>
 800bf5e:	4603      	mov	r3, r0
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d00b      	beq.n	800bf7c <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	22ff      	movs	r2, #255	; 0xff
 800bf6a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	2204      	movs	r2, #4
 800bf70:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	2200      	movs	r2, #0
 800bf76:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800bf78:	2301      	movs	r3, #1
 800bf7a:	e047      	b.n	800c00c <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	681a      	ldr	r2, [r3, #0]
 800bf80:	697b      	ldr	r3, [r7, #20]
 800bf82:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800bf86:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800bf8a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	689a      	ldr	r2, [r3, #8]
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800bf9a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	6899      	ldr	r1, [r3, #8]
 800bfa2:	68bb      	ldr	r3, [r7, #8]
 800bfa4:	68da      	ldr	r2, [r3, #12]
 800bfa6:	68bb      	ldr	r3, [r7, #8]
 800bfa8:	691b      	ldr	r3, [r3, #16]
 800bfaa:	431a      	orrs	r2, r3
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	430a      	orrs	r2, r1
 800bfb2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	68da      	ldr	r2, [r3, #12]
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bfc2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	689b      	ldr	r3, [r3, #8]
 800bfca:	f003 0320 	and.w	r3, r3, #32
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d111      	bne.n	800bff6 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800bfd2:	68f8      	ldr	r0, [r7, #12]
 800bfd4:	f000 f972 	bl	800c2bc <HAL_RTC_WaitForSynchro>
 800bfd8:	4603      	mov	r3, r0
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d00b      	beq.n	800bff6 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	22ff      	movs	r2, #255	; 0xff
 800bfe4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	2204      	movs	r2, #4
 800bfea:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	2200      	movs	r2, #0
 800bff0:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800bff2:	2301      	movs	r3, #1
 800bff4:	e00a      	b.n	800c00c <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	22ff      	movs	r2, #255	; 0xff
 800bffc:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	2201      	movs	r2, #1
 800c002:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	2200      	movs	r2, #0
 800c008:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800c00a:	2300      	movs	r3, #0
  }
}
 800c00c:	4618      	mov	r0, r3
 800c00e:	371c      	adds	r7, #28
 800c010:	46bd      	mov	sp, r7
 800c012:	bd90      	pop	{r4, r7, pc}

0800c014 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c014:	b580      	push	{r7, lr}
 800c016:	b086      	sub	sp, #24
 800c018:	af00      	add	r7, sp, #0
 800c01a:	60f8      	str	r0, [r7, #12]
 800c01c:	60b9      	str	r1, [r7, #8]
 800c01e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800c020:	2300      	movs	r3, #0
 800c022:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c02a:	68bb      	ldr	r3, [r7, #8]
 800c02c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	691b      	ldr	r3, [r3, #16]
 800c034:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800c038:	68bb      	ldr	r3, [r7, #8]
 800c03a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800c046:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800c04a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800c04c:	697b      	ldr	r3, [r7, #20]
 800c04e:	0c1b      	lsrs	r3, r3, #16
 800c050:	b2db      	uxtb	r3, r3
 800c052:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c056:	b2da      	uxtb	r2, r3
 800c058:	68bb      	ldr	r3, [r7, #8]
 800c05a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800c05c:	697b      	ldr	r3, [r7, #20]
 800c05e:	0a1b      	lsrs	r3, r3, #8
 800c060:	b2db      	uxtb	r3, r3
 800c062:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c066:	b2da      	uxtb	r2, r3
 800c068:	68bb      	ldr	r3, [r7, #8]
 800c06a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800c06c:	697b      	ldr	r3, [r7, #20]
 800c06e:	b2db      	uxtb	r3, r3
 800c070:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c074:	b2da      	uxtb	r2, r3
 800c076:	68bb      	ldr	r3, [r7, #8]
 800c078:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800c07a:	697b      	ldr	r3, [r7, #20]
 800c07c:	0c1b      	lsrs	r3, r3, #16
 800c07e:	b2db      	uxtb	r3, r3
 800c080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c084:	b2da      	uxtb	r2, r3
 800c086:	68bb      	ldr	r3, [r7, #8]
 800c088:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d11a      	bne.n	800c0c6 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800c090:	68bb      	ldr	r3, [r7, #8]
 800c092:	781b      	ldrb	r3, [r3, #0]
 800c094:	4618      	mov	r0, r3
 800c096:	f000 f983 	bl	800c3a0 <RTC_Bcd2ToByte>
 800c09a:	4603      	mov	r3, r0
 800c09c:	461a      	mov	r2, r3
 800c09e:	68bb      	ldr	r3, [r7, #8]
 800c0a0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800c0a2:	68bb      	ldr	r3, [r7, #8]
 800c0a4:	785b      	ldrb	r3, [r3, #1]
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	f000 f97a 	bl	800c3a0 <RTC_Bcd2ToByte>
 800c0ac:	4603      	mov	r3, r0
 800c0ae:	461a      	mov	r2, r3
 800c0b0:	68bb      	ldr	r3, [r7, #8]
 800c0b2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800c0b4:	68bb      	ldr	r3, [r7, #8]
 800c0b6:	789b      	ldrb	r3, [r3, #2]
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	f000 f971 	bl	800c3a0 <RTC_Bcd2ToByte>
 800c0be:	4603      	mov	r3, r0
 800c0c0:	461a      	mov	r2, r3
 800c0c2:	68bb      	ldr	r3, [r7, #8]
 800c0c4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800c0c6:	2300      	movs	r3, #0
}
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	3718      	adds	r7, #24
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	bd80      	pop	{r7, pc}

0800c0d0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c0d0:	b590      	push	{r4, r7, lr}
 800c0d2:	b087      	sub	sp, #28
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	60f8      	str	r0, [r7, #12]
 800c0d8:	60b9      	str	r1, [r7, #8]
 800c0da:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800c0dc:	2300      	movs	r3, #0
 800c0de:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	7f1b      	ldrb	r3, [r3, #28]
 800c0e4:	2b01      	cmp	r3, #1
 800c0e6:	d101      	bne.n	800c0ec <HAL_RTC_SetDate+0x1c>
 800c0e8:	2302      	movs	r3, #2
 800c0ea:	e094      	b.n	800c216 <HAL_RTC_SetDate+0x146>
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	2201      	movs	r2, #1
 800c0f0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	2202      	movs	r2, #2
 800c0f6:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d10e      	bne.n	800c11c <HAL_RTC_SetDate+0x4c>
 800c0fe:	68bb      	ldr	r3, [r7, #8]
 800c100:	785b      	ldrb	r3, [r3, #1]
 800c102:	f003 0310 	and.w	r3, r3, #16
 800c106:	2b00      	cmp	r3, #0
 800c108:	d008      	beq.n	800c11c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800c10a:	68bb      	ldr	r3, [r7, #8]
 800c10c:	785b      	ldrb	r3, [r3, #1]
 800c10e:	f023 0310 	bic.w	r3, r3, #16
 800c112:	b2db      	uxtb	r3, r3
 800c114:	330a      	adds	r3, #10
 800c116:	b2da      	uxtb	r2, r3
 800c118:	68bb      	ldr	r3, [r7, #8]
 800c11a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d11c      	bne.n	800c15c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800c122:	68bb      	ldr	r3, [r7, #8]
 800c124:	78db      	ldrb	r3, [r3, #3]
 800c126:	4618      	mov	r0, r3
 800c128:	f000 f91c 	bl	800c364 <RTC_ByteToBcd2>
 800c12c:	4603      	mov	r3, r0
 800c12e:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800c130:	68bb      	ldr	r3, [r7, #8]
 800c132:	785b      	ldrb	r3, [r3, #1]
 800c134:	4618      	mov	r0, r3
 800c136:	f000 f915 	bl	800c364 <RTC_ByteToBcd2>
 800c13a:	4603      	mov	r3, r0
 800c13c:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800c13e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800c140:	68bb      	ldr	r3, [r7, #8]
 800c142:	789b      	ldrb	r3, [r3, #2]
 800c144:	4618      	mov	r0, r3
 800c146:	f000 f90d 	bl	800c364 <RTC_ByteToBcd2>
 800c14a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800c14c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800c150:	68bb      	ldr	r3, [r7, #8]
 800c152:	781b      	ldrb	r3, [r3, #0]
 800c154:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800c156:	4313      	orrs	r3, r2
 800c158:	617b      	str	r3, [r7, #20]
 800c15a:	e00e      	b.n	800c17a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800c15c:	68bb      	ldr	r3, [r7, #8]
 800c15e:	78db      	ldrb	r3, [r3, #3]
 800c160:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800c162:	68bb      	ldr	r3, [r7, #8]
 800c164:	785b      	ldrb	r3, [r3, #1]
 800c166:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800c168:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800c16a:	68ba      	ldr	r2, [r7, #8]
 800c16c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800c16e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800c170:	68bb      	ldr	r3, [r7, #8]
 800c172:	781b      	ldrb	r3, [r3, #0]
 800c174:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800c176:	4313      	orrs	r3, r2
 800c178:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	22ca      	movs	r2, #202	; 0xca
 800c180:	625a      	str	r2, [r3, #36]	; 0x24
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	2253      	movs	r2, #83	; 0x53
 800c188:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800c18a:	68f8      	ldr	r0, [r7, #12]
 800c18c:	f000 f8be 	bl	800c30c <RTC_EnterInitMode>
 800c190:	4603      	mov	r3, r0
 800c192:	2b00      	cmp	r3, #0
 800c194:	d00b      	beq.n	800c1ae <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	22ff      	movs	r2, #255	; 0xff
 800c19c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	2204      	movs	r2, #4
 800c1a2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800c1aa:	2301      	movs	r3, #1
 800c1ac:	e033      	b.n	800c216 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	681a      	ldr	r2, [r3, #0]
 800c1b2:	697b      	ldr	r3, [r7, #20]
 800c1b4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c1b8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c1bc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	68da      	ldr	r2, [r3, #12]
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c1cc:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	689b      	ldr	r3, [r3, #8]
 800c1d4:	f003 0320 	and.w	r3, r3, #32
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d111      	bne.n	800c200 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c1dc:	68f8      	ldr	r0, [r7, #12]
 800c1de:	f000 f86d 	bl	800c2bc <HAL_RTC_WaitForSynchro>
 800c1e2:	4603      	mov	r3, r0
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d00b      	beq.n	800c200 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	22ff      	movs	r2, #255	; 0xff
 800c1ee:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	2204      	movs	r2, #4
 800c1f4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	2200      	movs	r2, #0
 800c1fa:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800c1fc:	2301      	movs	r3, #1
 800c1fe:	e00a      	b.n	800c216 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	22ff      	movs	r2, #255	; 0xff
 800c206:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	2201      	movs	r2, #1
 800c20c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	2200      	movs	r2, #0
 800c212:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800c214:	2300      	movs	r3, #0
  }
}
 800c216:	4618      	mov	r0, r3
 800c218:	371c      	adds	r7, #28
 800c21a:	46bd      	mov	sp, r7
 800c21c:	bd90      	pop	{r4, r7, pc}

0800c21e <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c21e:	b580      	push	{r7, lr}
 800c220:	b086      	sub	sp, #24
 800c222:	af00      	add	r7, sp, #0
 800c224:	60f8      	str	r0, [r7, #12]
 800c226:	60b9      	str	r1, [r7, #8]
 800c228:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800c22a:	2300      	movs	r3, #0
 800c22c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	685b      	ldr	r3, [r3, #4]
 800c234:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c238:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c23c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800c23e:	697b      	ldr	r3, [r7, #20]
 800c240:	0c1b      	lsrs	r3, r3, #16
 800c242:	b2da      	uxtb	r2, r3
 800c244:	68bb      	ldr	r3, [r7, #8]
 800c246:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800c248:	697b      	ldr	r3, [r7, #20]
 800c24a:	0a1b      	lsrs	r3, r3, #8
 800c24c:	b2db      	uxtb	r3, r3
 800c24e:	f003 031f 	and.w	r3, r3, #31
 800c252:	b2da      	uxtb	r2, r3
 800c254:	68bb      	ldr	r3, [r7, #8]
 800c256:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800c258:	697b      	ldr	r3, [r7, #20]
 800c25a:	b2db      	uxtb	r3, r3
 800c25c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c260:	b2da      	uxtb	r2, r3
 800c262:	68bb      	ldr	r3, [r7, #8]
 800c264:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800c266:	697b      	ldr	r3, [r7, #20]
 800c268:	0b5b      	lsrs	r3, r3, #13
 800c26a:	b2db      	uxtb	r3, r3
 800c26c:	f003 0307 	and.w	r3, r3, #7
 800c270:	b2da      	uxtb	r2, r3
 800c272:	68bb      	ldr	r3, [r7, #8]
 800c274:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d11a      	bne.n	800c2b2 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800c27c:	68bb      	ldr	r3, [r7, #8]
 800c27e:	78db      	ldrb	r3, [r3, #3]
 800c280:	4618      	mov	r0, r3
 800c282:	f000 f88d 	bl	800c3a0 <RTC_Bcd2ToByte>
 800c286:	4603      	mov	r3, r0
 800c288:	461a      	mov	r2, r3
 800c28a:	68bb      	ldr	r3, [r7, #8]
 800c28c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800c28e:	68bb      	ldr	r3, [r7, #8]
 800c290:	785b      	ldrb	r3, [r3, #1]
 800c292:	4618      	mov	r0, r3
 800c294:	f000 f884 	bl	800c3a0 <RTC_Bcd2ToByte>
 800c298:	4603      	mov	r3, r0
 800c29a:	461a      	mov	r2, r3
 800c29c:	68bb      	ldr	r3, [r7, #8]
 800c29e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800c2a0:	68bb      	ldr	r3, [r7, #8]
 800c2a2:	789b      	ldrb	r3, [r3, #2]
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	f000 f87b 	bl	800c3a0 <RTC_Bcd2ToByte>
 800c2aa:	4603      	mov	r3, r0
 800c2ac:	461a      	mov	r2, r3
 800c2ae:	68bb      	ldr	r3, [r7, #8]
 800c2b0:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800c2b2:	2300      	movs	r3, #0
}
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	3718      	adds	r7, #24
 800c2b8:	46bd      	mov	sp, r7
 800c2ba:	bd80      	pop	{r7, pc}

0800c2bc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	b084      	sub	sp, #16
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	68da      	ldr	r2, [r3, #12]
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800c2d6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c2d8:	f7fc fd04 	bl	8008ce4 <HAL_GetTick>
 800c2dc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800c2de:	e009      	b.n	800c2f4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800c2e0:	f7fc fd00 	bl	8008ce4 <HAL_GetTick>
 800c2e4:	4602      	mov	r2, r0
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	1ad3      	subs	r3, r2, r3
 800c2ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c2ee:	d901      	bls.n	800c2f4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800c2f0:	2303      	movs	r3, #3
 800c2f2:	e007      	b.n	800c304 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	68db      	ldr	r3, [r3, #12]
 800c2fa:	f003 0320 	and.w	r3, r3, #32
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d0ee      	beq.n	800c2e0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800c302:	2300      	movs	r3, #0
}
 800c304:	4618      	mov	r0, r3
 800c306:	3710      	adds	r7, #16
 800c308:	46bd      	mov	sp, r7
 800c30a:	bd80      	pop	{r7, pc}

0800c30c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b084      	sub	sp, #16
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c314:	2300      	movs	r3, #0
 800c316:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	68db      	ldr	r3, [r3, #12]
 800c31e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c322:	2b00      	cmp	r3, #0
 800c324:	d119      	bne.n	800c35a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	f04f 32ff 	mov.w	r2, #4294967295
 800c32e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c330:	f7fc fcd8 	bl	8008ce4 <HAL_GetTick>
 800c334:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800c336:	e009      	b.n	800c34c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800c338:	f7fc fcd4 	bl	8008ce4 <HAL_GetTick>
 800c33c:	4602      	mov	r2, r0
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	1ad3      	subs	r3, r2, r3
 800c342:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c346:	d901      	bls.n	800c34c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800c348:	2303      	movs	r3, #3
 800c34a:	e007      	b.n	800c35c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	68db      	ldr	r3, [r3, #12]
 800c352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c356:	2b00      	cmp	r3, #0
 800c358:	d0ee      	beq.n	800c338 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800c35a:	2300      	movs	r3, #0
}
 800c35c:	4618      	mov	r0, r3
 800c35e:	3710      	adds	r7, #16
 800c360:	46bd      	mov	sp, r7
 800c362:	bd80      	pop	{r7, pc}

0800c364 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800c364:	b480      	push	{r7}
 800c366:	b085      	sub	sp, #20
 800c368:	af00      	add	r7, sp, #0
 800c36a:	4603      	mov	r3, r0
 800c36c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800c36e:	2300      	movs	r3, #0
 800c370:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800c372:	e005      	b.n	800c380 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	3301      	adds	r3, #1
 800c378:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800c37a:	79fb      	ldrb	r3, [r7, #7]
 800c37c:	3b0a      	subs	r3, #10
 800c37e:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 800c380:	79fb      	ldrb	r3, [r7, #7]
 800c382:	2b09      	cmp	r3, #9
 800c384:	d8f6      	bhi.n	800c374 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	b2db      	uxtb	r3, r3
 800c38a:	011b      	lsls	r3, r3, #4
 800c38c:	b2da      	uxtb	r2, r3
 800c38e:	79fb      	ldrb	r3, [r7, #7]
 800c390:	4313      	orrs	r3, r2
 800c392:	b2db      	uxtb	r3, r3
}
 800c394:	4618      	mov	r0, r3
 800c396:	3714      	adds	r7, #20
 800c398:	46bd      	mov	sp, r7
 800c39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39e:	4770      	bx	lr

0800c3a0 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800c3a0:	b480      	push	{r7}
 800c3a2:	b085      	sub	sp, #20
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	4603      	mov	r3, r0
 800c3a8:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800c3ae:	79fb      	ldrb	r3, [r7, #7]
 800c3b0:	091b      	lsrs	r3, r3, #4
 800c3b2:	b2db      	uxtb	r3, r3
 800c3b4:	461a      	mov	r2, r3
 800c3b6:	4613      	mov	r3, r2
 800c3b8:	009b      	lsls	r3, r3, #2
 800c3ba:	4413      	add	r3, r2
 800c3bc:	005b      	lsls	r3, r3, #1
 800c3be:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800c3c0:	79fb      	ldrb	r3, [r7, #7]
 800c3c2:	f003 030f 	and.w	r3, r3, #15
 800c3c6:	b2da      	uxtb	r2, r3
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	b2db      	uxtb	r3, r3
 800c3cc:	4413      	add	r3, r2
 800c3ce:	b2db      	uxtb	r3, r3
}
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	3714      	adds	r7, #20
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3da:	4770      	bx	lr

0800c3dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b082      	sub	sp, #8
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d101      	bne.n	800c3ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c3ea:	2301      	movs	r3, #1
 800c3ec:	e056      	b.n	800c49c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	2200      	movs	r2, #0
 800c3f2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c3fa:	b2db      	uxtb	r3, r3
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d106      	bne.n	800c40e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	2200      	movs	r2, #0
 800c404:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c408:	6878      	ldr	r0, [r7, #4]
 800c40a:	f000 f84b 	bl	800c4a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	2202      	movs	r2, #2
 800c412:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	681a      	ldr	r2, [r3, #0]
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c424:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	685a      	ldr	r2, [r3, #4]
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	689b      	ldr	r3, [r3, #8]
 800c42e:	431a      	orrs	r2, r3
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	68db      	ldr	r3, [r3, #12]
 800c434:	431a      	orrs	r2, r3
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	691b      	ldr	r3, [r3, #16]
 800c43a:	431a      	orrs	r2, r3
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	695b      	ldr	r3, [r3, #20]
 800c440:	431a      	orrs	r2, r3
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	699b      	ldr	r3, [r3, #24]
 800c446:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c44a:	431a      	orrs	r2, r3
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	69db      	ldr	r3, [r3, #28]
 800c450:	431a      	orrs	r2, r3
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	6a1b      	ldr	r3, [r3, #32]
 800c456:	ea42 0103 	orr.w	r1, r2, r3
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	430a      	orrs	r2, r1
 800c464:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	699b      	ldr	r3, [r3, #24]
 800c46a:	0c1b      	lsrs	r3, r3, #16
 800c46c:	f003 0104 	and.w	r1, r3, #4
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	430a      	orrs	r2, r1
 800c47a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	69da      	ldr	r2, [r3, #28]
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c48a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	2200      	movs	r2, #0
 800c490:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	2201      	movs	r2, #1
 800c496:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800c49a:	2300      	movs	r3, #0
}
 800c49c:	4618      	mov	r0, r3
 800c49e:	3708      	adds	r7, #8
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	bd80      	pop	{r7, pc}

0800c4a4 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800c4a4:	b480      	push	{r7}
 800c4a6:	b083      	sub	sp, #12
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 800c4ac:	bf00      	nop
 800c4ae:	370c      	adds	r7, #12
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b6:	4770      	bx	lr

0800c4b8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b08c      	sub	sp, #48	; 0x30
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	60f8      	str	r0, [r7, #12]
 800c4c0:	60b9      	str	r1, [r7, #8]
 800c4c2:	607a      	str	r2, [r7, #4]
 800c4c4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800c4c6:	2301      	movs	r3, #1
 800c4c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c4d6:	2b01      	cmp	r3, #1
 800c4d8:	d101      	bne.n	800c4de <HAL_SPI_TransmitReceive+0x26>
 800c4da:	2302      	movs	r3, #2
 800c4dc:	e18a      	b.n	800c7f4 <HAL_SPI_TransmitReceive+0x33c>
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	2201      	movs	r2, #1
 800c4e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c4e6:	f7fc fbfd 	bl	8008ce4 <HAL_GetTick>
 800c4ea:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c4f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	685b      	ldr	r3, [r3, #4]
 800c4fa:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800c4fc:	887b      	ldrh	r3, [r7, #2]
 800c4fe:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800c500:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c504:	2b01      	cmp	r3, #1
 800c506:	d00f      	beq.n	800c528 <HAL_SPI_TransmitReceive+0x70>
 800c508:	69fb      	ldr	r3, [r7, #28]
 800c50a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c50e:	d107      	bne.n	800c520 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	689b      	ldr	r3, [r3, #8]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d103      	bne.n	800c520 <HAL_SPI_TransmitReceive+0x68>
 800c518:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c51c:	2b04      	cmp	r3, #4
 800c51e:	d003      	beq.n	800c528 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800c520:	2302      	movs	r3, #2
 800c522:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800c526:	e15b      	b.n	800c7e0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800c528:	68bb      	ldr	r3, [r7, #8]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d005      	beq.n	800c53a <HAL_SPI_TransmitReceive+0x82>
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d002      	beq.n	800c53a <HAL_SPI_TransmitReceive+0x82>
 800c534:	887b      	ldrh	r3, [r7, #2]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d103      	bne.n	800c542 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800c53a:	2301      	movs	r3, #1
 800c53c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800c540:	e14e      	b.n	800c7e0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c548:	b2db      	uxtb	r3, r3
 800c54a:	2b04      	cmp	r3, #4
 800c54c:	d003      	beq.n	800c556 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	2205      	movs	r2, #5
 800c552:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	2200      	movs	r2, #0
 800c55a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	687a      	ldr	r2, [r7, #4]
 800c560:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	887a      	ldrh	r2, [r7, #2]
 800c566:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	887a      	ldrh	r2, [r7, #2]
 800c56c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	68ba      	ldr	r2, [r7, #8]
 800c572:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	887a      	ldrh	r2, [r7, #2]
 800c578:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	887a      	ldrh	r2, [r7, #2]
 800c57e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	2200      	movs	r2, #0
 800c584:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	2200      	movs	r2, #0
 800c58a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c596:	2b40      	cmp	r3, #64	; 0x40
 800c598:	d007      	beq.n	800c5aa <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	681a      	ldr	r2, [r3, #0]
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c5a8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	68db      	ldr	r3, [r3, #12]
 800c5ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c5b2:	d178      	bne.n	800c6a6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	685b      	ldr	r3, [r3, #4]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d002      	beq.n	800c5c2 <HAL_SPI_TransmitReceive+0x10a>
 800c5bc:	8b7b      	ldrh	r3, [r7, #26]
 800c5be:	2b01      	cmp	r3, #1
 800c5c0:	d166      	bne.n	800c690 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5c6:	881a      	ldrh	r2, [r3, #0]
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5d2:	1c9a      	adds	r2, r3, #2
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c5dc:	b29b      	uxth	r3, r3
 800c5de:	3b01      	subs	r3, #1
 800c5e0:	b29a      	uxth	r2, r3
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c5e6:	e053      	b.n	800c690 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	689b      	ldr	r3, [r3, #8]
 800c5ee:	f003 0302 	and.w	r3, r3, #2
 800c5f2:	2b02      	cmp	r3, #2
 800c5f4:	d11b      	bne.n	800c62e <HAL_SPI_TransmitReceive+0x176>
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c5fa:	b29b      	uxth	r3, r3
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d016      	beq.n	800c62e <HAL_SPI_TransmitReceive+0x176>
 800c600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c602:	2b01      	cmp	r3, #1
 800c604:	d113      	bne.n	800c62e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c60a:	881a      	ldrh	r2, [r3, #0]
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c616:	1c9a      	adds	r2, r3, #2
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c620:	b29b      	uxth	r3, r3
 800c622:	3b01      	subs	r3, #1
 800c624:	b29a      	uxth	r2, r3
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c62a:	2300      	movs	r3, #0
 800c62c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	689b      	ldr	r3, [r3, #8]
 800c634:	f003 0301 	and.w	r3, r3, #1
 800c638:	2b01      	cmp	r3, #1
 800c63a:	d119      	bne.n	800c670 <HAL_SPI_TransmitReceive+0x1b8>
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c640:	b29b      	uxth	r3, r3
 800c642:	2b00      	cmp	r3, #0
 800c644:	d014      	beq.n	800c670 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	68da      	ldr	r2, [r3, #12]
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c650:	b292      	uxth	r2, r2
 800c652:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c658:	1c9a      	adds	r2, r3, #2
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c662:	b29b      	uxth	r3, r3
 800c664:	3b01      	subs	r3, #1
 800c666:	b29a      	uxth	r2, r3
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c66c:	2301      	movs	r3, #1
 800c66e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800c670:	f7fc fb38 	bl	8008ce4 <HAL_GetTick>
 800c674:	4602      	mov	r2, r0
 800c676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c678:	1ad3      	subs	r3, r2, r3
 800c67a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c67c:	429a      	cmp	r2, r3
 800c67e:	d807      	bhi.n	800c690 <HAL_SPI_TransmitReceive+0x1d8>
 800c680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c682:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c686:	d003      	beq.n	800c690 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800c688:	2303      	movs	r3, #3
 800c68a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800c68e:	e0a7      	b.n	800c7e0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c694:	b29b      	uxth	r3, r3
 800c696:	2b00      	cmp	r3, #0
 800c698:	d1a6      	bne.n	800c5e8 <HAL_SPI_TransmitReceive+0x130>
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c69e:	b29b      	uxth	r3, r3
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d1a1      	bne.n	800c5e8 <HAL_SPI_TransmitReceive+0x130>
 800c6a4:	e07c      	b.n	800c7a0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	685b      	ldr	r3, [r3, #4]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d002      	beq.n	800c6b4 <HAL_SPI_TransmitReceive+0x1fc>
 800c6ae:	8b7b      	ldrh	r3, [r7, #26]
 800c6b0:	2b01      	cmp	r3, #1
 800c6b2:	d16b      	bne.n	800c78c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	330c      	adds	r3, #12
 800c6be:	7812      	ldrb	r2, [r2, #0]
 800c6c0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6c6:	1c5a      	adds	r2, r3, #1
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c6d0:	b29b      	uxth	r3, r3
 800c6d2:	3b01      	subs	r3, #1
 800c6d4:	b29a      	uxth	r2, r3
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c6da:	e057      	b.n	800c78c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	689b      	ldr	r3, [r3, #8]
 800c6e2:	f003 0302 	and.w	r3, r3, #2
 800c6e6:	2b02      	cmp	r3, #2
 800c6e8:	d11c      	bne.n	800c724 <HAL_SPI_TransmitReceive+0x26c>
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c6ee:	b29b      	uxth	r3, r3
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d017      	beq.n	800c724 <HAL_SPI_TransmitReceive+0x26c>
 800c6f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6f6:	2b01      	cmp	r3, #1
 800c6f8:	d114      	bne.n	800c724 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	330c      	adds	r3, #12
 800c704:	7812      	ldrb	r2, [r2, #0]
 800c706:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c70c:	1c5a      	adds	r2, r3, #1
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c716:	b29b      	uxth	r3, r3
 800c718:	3b01      	subs	r3, #1
 800c71a:	b29a      	uxth	r2, r3
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c720:	2300      	movs	r3, #0
 800c722:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	689b      	ldr	r3, [r3, #8]
 800c72a:	f003 0301 	and.w	r3, r3, #1
 800c72e:	2b01      	cmp	r3, #1
 800c730:	d119      	bne.n	800c766 <HAL_SPI_TransmitReceive+0x2ae>
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c736:	b29b      	uxth	r3, r3
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d014      	beq.n	800c766 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	68da      	ldr	r2, [r3, #12]
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c746:	b2d2      	uxtb	r2, r2
 800c748:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c74e:	1c5a      	adds	r2, r3, #1
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c758:	b29b      	uxth	r3, r3
 800c75a:	3b01      	subs	r3, #1
 800c75c:	b29a      	uxth	r2, r3
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c762:	2301      	movs	r3, #1
 800c764:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800c766:	f7fc fabd 	bl	8008ce4 <HAL_GetTick>
 800c76a:	4602      	mov	r2, r0
 800c76c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c76e:	1ad3      	subs	r3, r2, r3
 800c770:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c772:	429a      	cmp	r2, r3
 800c774:	d803      	bhi.n	800c77e <HAL_SPI_TransmitReceive+0x2c6>
 800c776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c77c:	d102      	bne.n	800c784 <HAL_SPI_TransmitReceive+0x2cc>
 800c77e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c780:	2b00      	cmp	r3, #0
 800c782:	d103      	bne.n	800c78c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800c784:	2303      	movs	r3, #3
 800c786:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800c78a:	e029      	b.n	800c7e0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c790:	b29b      	uxth	r3, r3
 800c792:	2b00      	cmp	r3, #0
 800c794:	d1a2      	bne.n	800c6dc <HAL_SPI_TransmitReceive+0x224>
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c79a:	b29b      	uxth	r3, r3
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d19d      	bne.n	800c6dc <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c7a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c7a4:	68f8      	ldr	r0, [r7, #12]
 800c7a6:	f000 f8a1 	bl	800c8ec <SPI_EndRxTxTransaction>
 800c7aa:	4603      	mov	r3, r0
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d006      	beq.n	800c7be <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800c7b0:	2301      	movs	r3, #1
 800c7b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	2220      	movs	r2, #32
 800c7ba:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800c7bc:	e010      	b.n	800c7e0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	689b      	ldr	r3, [r3, #8]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d10b      	bne.n	800c7de <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c7c6:	2300      	movs	r3, #0
 800c7c8:	617b      	str	r3, [r7, #20]
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	68db      	ldr	r3, [r3, #12]
 800c7d0:	617b      	str	r3, [r7, #20]
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	689b      	ldr	r3, [r3, #8]
 800c7d8:	617b      	str	r3, [r7, #20]
 800c7da:	697b      	ldr	r3, [r7, #20]
 800c7dc:	e000      	b.n	800c7e0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800c7de:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	2201      	movs	r2, #1
 800c7e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c7f0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	3730      	adds	r7, #48	; 0x30
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	bd80      	pop	{r7, pc}

0800c7fc <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800c7fc:	b480      	push	{r7}
 800c7fe:	b083      	sub	sp, #12
 800c800:	af00      	add	r7, sp, #0
 800c802:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c80a:	b2db      	uxtb	r3, r3
}
 800c80c:	4618      	mov	r0, r3
 800c80e:	370c      	adds	r7, #12
 800c810:	46bd      	mov	sp, r7
 800c812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c816:	4770      	bx	lr

0800c818 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b084      	sub	sp, #16
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	60f8      	str	r0, [r7, #12]
 800c820:	60b9      	str	r1, [r7, #8]
 800c822:	603b      	str	r3, [r7, #0]
 800c824:	4613      	mov	r3, r2
 800c826:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c828:	e04c      	b.n	800c8c4 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c82a:	683b      	ldr	r3, [r7, #0]
 800c82c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c830:	d048      	beq.n	800c8c4 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800c832:	f7fc fa57 	bl	8008ce4 <HAL_GetTick>
 800c836:	4602      	mov	r2, r0
 800c838:	69bb      	ldr	r3, [r7, #24]
 800c83a:	1ad3      	subs	r3, r2, r3
 800c83c:	683a      	ldr	r2, [r7, #0]
 800c83e:	429a      	cmp	r2, r3
 800c840:	d902      	bls.n	800c848 <SPI_WaitFlagStateUntilTimeout+0x30>
 800c842:	683b      	ldr	r3, [r7, #0]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d13d      	bne.n	800c8c4 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	685a      	ldr	r2, [r3, #4]
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c856:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	685b      	ldr	r3, [r3, #4]
 800c85c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c860:	d111      	bne.n	800c886 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	689b      	ldr	r3, [r3, #8]
 800c866:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c86a:	d004      	beq.n	800c876 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	689b      	ldr	r3, [r3, #8]
 800c870:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c874:	d107      	bne.n	800c886 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	681a      	ldr	r2, [r3, #0]
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c884:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c88a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c88e:	d10f      	bne.n	800c8b0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	681a      	ldr	r2, [r3, #0]
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c89e:	601a      	str	r2, [r3, #0]
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	681a      	ldr	r2, [r3, #0]
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c8ae:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	2201      	movs	r2, #1
 800c8b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800c8c0:	2303      	movs	r3, #3
 800c8c2:	e00f      	b.n	800c8e4 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	689a      	ldr	r2, [r3, #8]
 800c8ca:	68bb      	ldr	r3, [r7, #8]
 800c8cc:	4013      	ands	r3, r2
 800c8ce:	68ba      	ldr	r2, [r7, #8]
 800c8d0:	429a      	cmp	r2, r3
 800c8d2:	bf0c      	ite	eq
 800c8d4:	2301      	moveq	r3, #1
 800c8d6:	2300      	movne	r3, #0
 800c8d8:	b2db      	uxtb	r3, r3
 800c8da:	461a      	mov	r2, r3
 800c8dc:	79fb      	ldrb	r3, [r7, #7]
 800c8de:	429a      	cmp	r2, r3
 800c8e0:	d1a3      	bne.n	800c82a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800c8e2:	2300      	movs	r3, #0
}
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	3710      	adds	r7, #16
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	bd80      	pop	{r7, pc}

0800c8ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b088      	sub	sp, #32
 800c8f0:	af02      	add	r7, sp, #8
 800c8f2:	60f8      	str	r0, [r7, #12]
 800c8f4:	60b9      	str	r1, [r7, #8]
 800c8f6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800c8f8:	4b1b      	ldr	r3, [pc, #108]	; (800c968 <SPI_EndRxTxTransaction+0x7c>)
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	4a1b      	ldr	r2, [pc, #108]	; (800c96c <SPI_EndRxTxTransaction+0x80>)
 800c8fe:	fba2 2303 	umull	r2, r3, r2, r3
 800c902:	0d5b      	lsrs	r3, r3, #21
 800c904:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c908:	fb02 f303 	mul.w	r3, r2, r3
 800c90c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	685b      	ldr	r3, [r3, #4]
 800c912:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c916:	d112      	bne.n	800c93e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	9300      	str	r3, [sp, #0]
 800c91c:	68bb      	ldr	r3, [r7, #8]
 800c91e:	2200      	movs	r2, #0
 800c920:	2180      	movs	r1, #128	; 0x80
 800c922:	68f8      	ldr	r0, [r7, #12]
 800c924:	f7ff ff78 	bl	800c818 <SPI_WaitFlagStateUntilTimeout>
 800c928:	4603      	mov	r3, r0
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d016      	beq.n	800c95c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c932:	f043 0220 	orr.w	r2, r3, #32
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800c93a:	2303      	movs	r3, #3
 800c93c:	e00f      	b.n	800c95e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800c93e:	697b      	ldr	r3, [r7, #20]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d00a      	beq.n	800c95a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800c944:	697b      	ldr	r3, [r7, #20]
 800c946:	3b01      	subs	r3, #1
 800c948:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	689b      	ldr	r3, [r3, #8]
 800c950:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c954:	2b80      	cmp	r3, #128	; 0x80
 800c956:	d0f2      	beq.n	800c93e <SPI_EndRxTxTransaction+0x52>
 800c958:	e000      	b.n	800c95c <SPI_EndRxTxTransaction+0x70>
        break;
 800c95a:	bf00      	nop
  }

  return HAL_OK;
 800c95c:	2300      	movs	r3, #0
}
 800c95e:	4618      	mov	r0, r3
 800c960:	3718      	adds	r7, #24
 800c962:	46bd      	mov	sp, r7
 800c964:	bd80      	pop	{r7, pc}
 800c966:	bf00      	nop
 800c968:	200011c4 	.word	0x200011c4
 800c96c:	165e9f81 	.word	0x165e9f81

0800c970 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c970:	b580      	push	{r7, lr}
 800c972:	b082      	sub	sp, #8
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d101      	bne.n	800c982 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c97e:	2301      	movs	r3, #1
 800c980:	e01d      	b.n	800c9be <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c988:	b2db      	uxtb	r3, r3
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d106      	bne.n	800c99c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	2200      	movs	r2, #0
 800c992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c996:	6878      	ldr	r0, [r7, #4]
 800c998:	f7f6 fc76 	bl	8003288 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	2202      	movs	r2, #2
 800c9a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	681a      	ldr	r2, [r3, #0]
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	3304      	adds	r3, #4
 800c9ac:	4619      	mov	r1, r3
 800c9ae:	4610      	mov	r0, r2
 800c9b0:	f000 f8c0 	bl	800cb34 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	2201      	movs	r2, #1
 800c9b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c9bc:	2300      	movs	r3, #0
}
 800c9be:	4618      	mov	r0, r3
 800c9c0:	3708      	adds	r7, #8
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	bd80      	pop	{r7, pc}

0800c9c6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c9c6:	b580      	push	{r7, lr}
 800c9c8:	b084      	sub	sp, #16
 800c9ca:	af00      	add	r7, sp, #0
 800c9cc:	6078      	str	r0, [r7, #4]
 800c9ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c9d6:	2b01      	cmp	r3, #1
 800c9d8:	d101      	bne.n	800c9de <HAL_TIM_ConfigClockSource+0x18>
 800c9da:	2302      	movs	r3, #2
 800c9dc:	e0a6      	b.n	800cb2c <HAL_TIM_ConfigClockSource+0x166>
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	2201      	movs	r2, #1
 800c9e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	2202      	movs	r2, #2
 800c9ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	689b      	ldr	r3, [r3, #8]
 800c9f4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c9fc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ca04:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	68fa      	ldr	r2, [r7, #12]
 800ca0c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ca0e:	683b      	ldr	r3, [r7, #0]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	2b40      	cmp	r3, #64	; 0x40
 800ca14:	d067      	beq.n	800cae6 <HAL_TIM_ConfigClockSource+0x120>
 800ca16:	2b40      	cmp	r3, #64	; 0x40
 800ca18:	d80b      	bhi.n	800ca32 <HAL_TIM_ConfigClockSource+0x6c>
 800ca1a:	2b10      	cmp	r3, #16
 800ca1c:	d073      	beq.n	800cb06 <HAL_TIM_ConfigClockSource+0x140>
 800ca1e:	2b10      	cmp	r3, #16
 800ca20:	d802      	bhi.n	800ca28 <HAL_TIM_ConfigClockSource+0x62>
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d06f      	beq.n	800cb06 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800ca26:	e078      	b.n	800cb1a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800ca28:	2b20      	cmp	r3, #32
 800ca2a:	d06c      	beq.n	800cb06 <HAL_TIM_ConfigClockSource+0x140>
 800ca2c:	2b30      	cmp	r3, #48	; 0x30
 800ca2e:	d06a      	beq.n	800cb06 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800ca30:	e073      	b.n	800cb1a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800ca32:	2b70      	cmp	r3, #112	; 0x70
 800ca34:	d00d      	beq.n	800ca52 <HAL_TIM_ConfigClockSource+0x8c>
 800ca36:	2b70      	cmp	r3, #112	; 0x70
 800ca38:	d804      	bhi.n	800ca44 <HAL_TIM_ConfigClockSource+0x7e>
 800ca3a:	2b50      	cmp	r3, #80	; 0x50
 800ca3c:	d033      	beq.n	800caa6 <HAL_TIM_ConfigClockSource+0xe0>
 800ca3e:	2b60      	cmp	r3, #96	; 0x60
 800ca40:	d041      	beq.n	800cac6 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800ca42:	e06a      	b.n	800cb1a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800ca44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca48:	d066      	beq.n	800cb18 <HAL_TIM_ConfigClockSource+0x152>
 800ca4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ca4e:	d017      	beq.n	800ca80 <HAL_TIM_ConfigClockSource+0xba>
      break;
 800ca50:	e063      	b.n	800cb1a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	6818      	ldr	r0, [r3, #0]
 800ca56:	683b      	ldr	r3, [r7, #0]
 800ca58:	6899      	ldr	r1, [r3, #8]
 800ca5a:	683b      	ldr	r3, [r7, #0]
 800ca5c:	685a      	ldr	r2, [r3, #4]
 800ca5e:	683b      	ldr	r3, [r7, #0]
 800ca60:	68db      	ldr	r3, [r3, #12]
 800ca62:	f000 f961 	bl	800cd28 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	689b      	ldr	r3, [r3, #8]
 800ca6c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ca74:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	68fa      	ldr	r2, [r7, #12]
 800ca7c:	609a      	str	r2, [r3, #8]
      break;
 800ca7e:	e04c      	b.n	800cb1a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	6818      	ldr	r0, [r3, #0]
 800ca84:	683b      	ldr	r3, [r7, #0]
 800ca86:	6899      	ldr	r1, [r3, #8]
 800ca88:	683b      	ldr	r3, [r7, #0]
 800ca8a:	685a      	ldr	r2, [r3, #4]
 800ca8c:	683b      	ldr	r3, [r7, #0]
 800ca8e:	68db      	ldr	r3, [r3, #12]
 800ca90:	f000 f94a 	bl	800cd28 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	689a      	ldr	r2, [r3, #8]
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800caa2:	609a      	str	r2, [r3, #8]
      break;
 800caa4:	e039      	b.n	800cb1a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	6818      	ldr	r0, [r3, #0]
 800caaa:	683b      	ldr	r3, [r7, #0]
 800caac:	6859      	ldr	r1, [r3, #4]
 800caae:	683b      	ldr	r3, [r7, #0]
 800cab0:	68db      	ldr	r3, [r3, #12]
 800cab2:	461a      	mov	r2, r3
 800cab4:	f000 f8be 	bl	800cc34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	2150      	movs	r1, #80	; 0x50
 800cabe:	4618      	mov	r0, r3
 800cac0:	f000 f917 	bl	800ccf2 <TIM_ITRx_SetConfig>
      break;
 800cac4:	e029      	b.n	800cb1a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	6818      	ldr	r0, [r3, #0]
 800caca:	683b      	ldr	r3, [r7, #0]
 800cacc:	6859      	ldr	r1, [r3, #4]
 800cace:	683b      	ldr	r3, [r7, #0]
 800cad0:	68db      	ldr	r3, [r3, #12]
 800cad2:	461a      	mov	r2, r3
 800cad4:	f000 f8dd 	bl	800cc92 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	2160      	movs	r1, #96	; 0x60
 800cade:	4618      	mov	r0, r3
 800cae0:	f000 f907 	bl	800ccf2 <TIM_ITRx_SetConfig>
      break;
 800cae4:	e019      	b.n	800cb1a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	6818      	ldr	r0, [r3, #0]
 800caea:	683b      	ldr	r3, [r7, #0]
 800caec:	6859      	ldr	r1, [r3, #4]
 800caee:	683b      	ldr	r3, [r7, #0]
 800caf0:	68db      	ldr	r3, [r3, #12]
 800caf2:	461a      	mov	r2, r3
 800caf4:	f000 f89e 	bl	800cc34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	2140      	movs	r1, #64	; 0x40
 800cafe:	4618      	mov	r0, r3
 800cb00:	f000 f8f7 	bl	800ccf2 <TIM_ITRx_SetConfig>
      break;
 800cb04:	e009      	b.n	800cb1a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	681a      	ldr	r2, [r3, #0]
 800cb0a:	683b      	ldr	r3, [r7, #0]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	4619      	mov	r1, r3
 800cb10:	4610      	mov	r0, r2
 800cb12:	f000 f8ee 	bl	800ccf2 <TIM_ITRx_SetConfig>
      break;
 800cb16:	e000      	b.n	800cb1a <HAL_TIM_ConfigClockSource+0x154>
      break;
 800cb18:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	2201      	movs	r2, #1
 800cb1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	2200      	movs	r2, #0
 800cb26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cb2a:	2300      	movs	r3, #0
}
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	3710      	adds	r7, #16
 800cb30:	46bd      	mov	sp, r7
 800cb32:	bd80      	pop	{r7, pc}

0800cb34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800cb34:	b480      	push	{r7}
 800cb36:	b085      	sub	sp, #20
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	6078      	str	r0, [r7, #4]
 800cb3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	4a34      	ldr	r2, [pc, #208]	; (800cc18 <TIM_Base_SetConfig+0xe4>)
 800cb48:	4293      	cmp	r3, r2
 800cb4a:	d00f      	beq.n	800cb6c <TIM_Base_SetConfig+0x38>
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb52:	d00b      	beq.n	800cb6c <TIM_Base_SetConfig+0x38>
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	4a31      	ldr	r2, [pc, #196]	; (800cc1c <TIM_Base_SetConfig+0xe8>)
 800cb58:	4293      	cmp	r3, r2
 800cb5a:	d007      	beq.n	800cb6c <TIM_Base_SetConfig+0x38>
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	4a30      	ldr	r2, [pc, #192]	; (800cc20 <TIM_Base_SetConfig+0xec>)
 800cb60:	4293      	cmp	r3, r2
 800cb62:	d003      	beq.n	800cb6c <TIM_Base_SetConfig+0x38>
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	4a2f      	ldr	r2, [pc, #188]	; (800cc24 <TIM_Base_SetConfig+0xf0>)
 800cb68:	4293      	cmp	r3, r2
 800cb6a:	d108      	bne.n	800cb7e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cb72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cb74:	683b      	ldr	r3, [r7, #0]
 800cb76:	685b      	ldr	r3, [r3, #4]
 800cb78:	68fa      	ldr	r2, [r7, #12]
 800cb7a:	4313      	orrs	r3, r2
 800cb7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	4a25      	ldr	r2, [pc, #148]	; (800cc18 <TIM_Base_SetConfig+0xe4>)
 800cb82:	4293      	cmp	r3, r2
 800cb84:	d01b      	beq.n	800cbbe <TIM_Base_SetConfig+0x8a>
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb8c:	d017      	beq.n	800cbbe <TIM_Base_SetConfig+0x8a>
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	4a22      	ldr	r2, [pc, #136]	; (800cc1c <TIM_Base_SetConfig+0xe8>)
 800cb92:	4293      	cmp	r3, r2
 800cb94:	d013      	beq.n	800cbbe <TIM_Base_SetConfig+0x8a>
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	4a21      	ldr	r2, [pc, #132]	; (800cc20 <TIM_Base_SetConfig+0xec>)
 800cb9a:	4293      	cmp	r3, r2
 800cb9c:	d00f      	beq.n	800cbbe <TIM_Base_SetConfig+0x8a>
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	4a20      	ldr	r2, [pc, #128]	; (800cc24 <TIM_Base_SetConfig+0xf0>)
 800cba2:	4293      	cmp	r3, r2
 800cba4:	d00b      	beq.n	800cbbe <TIM_Base_SetConfig+0x8a>
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	4a1f      	ldr	r2, [pc, #124]	; (800cc28 <TIM_Base_SetConfig+0xf4>)
 800cbaa:	4293      	cmp	r3, r2
 800cbac:	d007      	beq.n	800cbbe <TIM_Base_SetConfig+0x8a>
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	4a1e      	ldr	r2, [pc, #120]	; (800cc2c <TIM_Base_SetConfig+0xf8>)
 800cbb2:	4293      	cmp	r3, r2
 800cbb4:	d003      	beq.n	800cbbe <TIM_Base_SetConfig+0x8a>
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	4a1d      	ldr	r2, [pc, #116]	; (800cc30 <TIM_Base_SetConfig+0xfc>)
 800cbba:	4293      	cmp	r3, r2
 800cbbc:	d108      	bne.n	800cbd0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cbc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cbc6:	683b      	ldr	r3, [r7, #0]
 800cbc8:	68db      	ldr	r3, [r3, #12]
 800cbca:	68fa      	ldr	r2, [r7, #12]
 800cbcc:	4313      	orrs	r3, r2
 800cbce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cbd6:	683b      	ldr	r3, [r7, #0]
 800cbd8:	695b      	ldr	r3, [r3, #20]
 800cbda:	4313      	orrs	r3, r2
 800cbdc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	68fa      	ldr	r2, [r7, #12]
 800cbe2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cbe4:	683b      	ldr	r3, [r7, #0]
 800cbe6:	689a      	ldr	r2, [r3, #8]
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cbec:	683b      	ldr	r3, [r7, #0]
 800cbee:	681a      	ldr	r2, [r3, #0]
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	4a08      	ldr	r2, [pc, #32]	; (800cc18 <TIM_Base_SetConfig+0xe4>)
 800cbf8:	4293      	cmp	r3, r2
 800cbfa:	d103      	bne.n	800cc04 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cbfc:	683b      	ldr	r3, [r7, #0]
 800cbfe:	691a      	ldr	r2, [r3, #16]
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	2201      	movs	r2, #1
 800cc08:	615a      	str	r2, [r3, #20]
}
 800cc0a:	bf00      	nop
 800cc0c:	3714      	adds	r7, #20
 800cc0e:	46bd      	mov	sp, r7
 800cc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc14:	4770      	bx	lr
 800cc16:	bf00      	nop
 800cc18:	40010000 	.word	0x40010000
 800cc1c:	40000400 	.word	0x40000400
 800cc20:	40000800 	.word	0x40000800
 800cc24:	40000c00 	.word	0x40000c00
 800cc28:	40014000 	.word	0x40014000
 800cc2c:	40014400 	.word	0x40014400
 800cc30:	40014800 	.word	0x40014800

0800cc34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cc34:	b480      	push	{r7}
 800cc36:	b087      	sub	sp, #28
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	60f8      	str	r0, [r7, #12]
 800cc3c:	60b9      	str	r1, [r7, #8]
 800cc3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	6a1b      	ldr	r3, [r3, #32]
 800cc44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	6a1b      	ldr	r3, [r3, #32]
 800cc4a:	f023 0201 	bic.w	r2, r3, #1
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	699b      	ldr	r3, [r3, #24]
 800cc56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cc58:	693b      	ldr	r3, [r7, #16]
 800cc5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cc5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	011b      	lsls	r3, r3, #4
 800cc64:	693a      	ldr	r2, [r7, #16]
 800cc66:	4313      	orrs	r3, r2
 800cc68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cc6a:	697b      	ldr	r3, [r7, #20]
 800cc6c:	f023 030a 	bic.w	r3, r3, #10
 800cc70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cc72:	697a      	ldr	r2, [r7, #20]
 800cc74:	68bb      	ldr	r3, [r7, #8]
 800cc76:	4313      	orrs	r3, r2
 800cc78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	693a      	ldr	r2, [r7, #16]
 800cc7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	697a      	ldr	r2, [r7, #20]
 800cc84:	621a      	str	r2, [r3, #32]
}
 800cc86:	bf00      	nop
 800cc88:	371c      	adds	r7, #28
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc90:	4770      	bx	lr

0800cc92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cc92:	b480      	push	{r7}
 800cc94:	b087      	sub	sp, #28
 800cc96:	af00      	add	r7, sp, #0
 800cc98:	60f8      	str	r0, [r7, #12]
 800cc9a:	60b9      	str	r1, [r7, #8]
 800cc9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	6a1b      	ldr	r3, [r3, #32]
 800cca2:	f023 0210 	bic.w	r2, r3, #16
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	699b      	ldr	r3, [r3, #24]
 800ccae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	6a1b      	ldr	r3, [r3, #32]
 800ccb4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ccb6:	697b      	ldr	r3, [r7, #20]
 800ccb8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ccbc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	031b      	lsls	r3, r3, #12
 800ccc2:	697a      	ldr	r2, [r7, #20]
 800ccc4:	4313      	orrs	r3, r2
 800ccc6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ccc8:	693b      	ldr	r3, [r7, #16]
 800ccca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ccce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ccd0:	68bb      	ldr	r3, [r7, #8]
 800ccd2:	011b      	lsls	r3, r3, #4
 800ccd4:	693a      	ldr	r2, [r7, #16]
 800ccd6:	4313      	orrs	r3, r2
 800ccd8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	697a      	ldr	r2, [r7, #20]
 800ccde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	693a      	ldr	r2, [r7, #16]
 800cce4:	621a      	str	r2, [r3, #32]
}
 800cce6:	bf00      	nop
 800cce8:	371c      	adds	r7, #28
 800ccea:	46bd      	mov	sp, r7
 800ccec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf0:	4770      	bx	lr

0800ccf2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ccf2:	b480      	push	{r7}
 800ccf4:	b085      	sub	sp, #20
 800ccf6:	af00      	add	r7, sp, #0
 800ccf8:	6078      	str	r0, [r7, #4]
 800ccfa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	689b      	ldr	r3, [r3, #8]
 800cd00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cd08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cd0a:	683a      	ldr	r2, [r7, #0]
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	4313      	orrs	r3, r2
 800cd10:	f043 0307 	orr.w	r3, r3, #7
 800cd14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	68fa      	ldr	r2, [r7, #12]
 800cd1a:	609a      	str	r2, [r3, #8]
}
 800cd1c:	bf00      	nop
 800cd1e:	3714      	adds	r7, #20
 800cd20:	46bd      	mov	sp, r7
 800cd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd26:	4770      	bx	lr

0800cd28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cd28:	b480      	push	{r7}
 800cd2a:	b087      	sub	sp, #28
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	60f8      	str	r0, [r7, #12]
 800cd30:	60b9      	str	r1, [r7, #8]
 800cd32:	607a      	str	r2, [r7, #4]
 800cd34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	689b      	ldr	r3, [r3, #8]
 800cd3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cd3c:	697b      	ldr	r3, [r7, #20]
 800cd3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cd42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cd44:	683b      	ldr	r3, [r7, #0]
 800cd46:	021a      	lsls	r2, r3, #8
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	431a      	orrs	r2, r3
 800cd4c:	68bb      	ldr	r3, [r7, #8]
 800cd4e:	4313      	orrs	r3, r2
 800cd50:	697a      	ldr	r2, [r7, #20]
 800cd52:	4313      	orrs	r3, r2
 800cd54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	697a      	ldr	r2, [r7, #20]
 800cd5a:	609a      	str	r2, [r3, #8]
}
 800cd5c:	bf00      	nop
 800cd5e:	371c      	adds	r7, #28
 800cd60:	46bd      	mov	sp, r7
 800cd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd66:	4770      	bx	lr

0800cd68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cd68:	b480      	push	{r7}
 800cd6a:	b085      	sub	sp, #20
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	6078      	str	r0, [r7, #4]
 800cd70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cd78:	2b01      	cmp	r3, #1
 800cd7a:	d101      	bne.n	800cd80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cd7c:	2302      	movs	r3, #2
 800cd7e:	e050      	b.n	800ce22 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	2201      	movs	r2, #1
 800cd84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	2202      	movs	r2, #2
 800cd8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	685b      	ldr	r3, [r3, #4]
 800cd96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	689b      	ldr	r3, [r3, #8]
 800cd9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cda6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cda8:	683b      	ldr	r3, [r7, #0]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	68fa      	ldr	r2, [r7, #12]
 800cdae:	4313      	orrs	r3, r2
 800cdb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	68fa      	ldr	r2, [r7, #12]
 800cdb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	4a1c      	ldr	r2, [pc, #112]	; (800ce30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800cdc0:	4293      	cmp	r3, r2
 800cdc2:	d018      	beq.n	800cdf6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cdcc:	d013      	beq.n	800cdf6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	4a18      	ldr	r2, [pc, #96]	; (800ce34 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800cdd4:	4293      	cmp	r3, r2
 800cdd6:	d00e      	beq.n	800cdf6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	4a16      	ldr	r2, [pc, #88]	; (800ce38 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800cdde:	4293      	cmp	r3, r2
 800cde0:	d009      	beq.n	800cdf6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	4a15      	ldr	r2, [pc, #84]	; (800ce3c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800cde8:	4293      	cmp	r3, r2
 800cdea:	d004      	beq.n	800cdf6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	4a13      	ldr	r2, [pc, #76]	; (800ce40 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800cdf2:	4293      	cmp	r3, r2
 800cdf4:	d10c      	bne.n	800ce10 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cdf6:	68bb      	ldr	r3, [r7, #8]
 800cdf8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cdfc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cdfe:	683b      	ldr	r3, [r7, #0]
 800ce00:	685b      	ldr	r3, [r3, #4]
 800ce02:	68ba      	ldr	r2, [r7, #8]
 800ce04:	4313      	orrs	r3, r2
 800ce06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	68ba      	ldr	r2, [r7, #8]
 800ce0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	2201      	movs	r2, #1
 800ce14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ce20:	2300      	movs	r3, #0
}
 800ce22:	4618      	mov	r0, r3
 800ce24:	3714      	adds	r7, #20
 800ce26:	46bd      	mov	sp, r7
 800ce28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2c:	4770      	bx	lr
 800ce2e:	bf00      	nop
 800ce30:	40010000 	.word	0x40010000
 800ce34:	40000400 	.word	0x40000400
 800ce38:	40000800 	.word	0x40000800
 800ce3c:	40000c00 	.word	0x40000c00
 800ce40:	40014000 	.word	0x40014000

0800ce44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ce44:	b580      	push	{r7, lr}
 800ce46:	b082      	sub	sp, #8
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d101      	bne.n	800ce56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ce52:	2301      	movs	r3, #1
 800ce54:	e03f      	b.n	800ced6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ce5c:	b2db      	uxtb	r3, r3
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d106      	bne.n	800ce70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	2200      	movs	r2, #0
 800ce66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ce6a:	6878      	ldr	r0, [r7, #4]
 800ce6c:	f000 f837 	bl	800cede <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	2224      	movs	r2, #36	; 0x24
 800ce74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	68da      	ldr	r2, [r3, #12]
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ce86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ce88:	6878      	ldr	r0, [r7, #4]
 800ce8a:	f000 f915 	bl	800d0b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	691a      	ldr	r2, [r3, #16]
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ce9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	695a      	ldr	r2, [r3, #20]
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ceac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	68da      	ldr	r2, [r3, #12]
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cebc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	2200      	movs	r2, #0
 800cec2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	2220      	movs	r2, #32
 800cec8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	2220      	movs	r2, #32
 800ced0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800ced4:	2300      	movs	r3, #0
}
 800ced6:	4618      	mov	r0, r3
 800ced8:	3708      	adds	r7, #8
 800ceda:	46bd      	mov	sp, r7
 800cedc:	bd80      	pop	{r7, pc}

0800cede <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800cede:	b480      	push	{r7}
 800cee0:	b083      	sub	sp, #12
 800cee2:	af00      	add	r7, sp, #0
 800cee4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 800cee6:	bf00      	nop
 800cee8:	370c      	adds	r7, #12
 800ceea:	46bd      	mov	sp, r7
 800ceec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef0:	4770      	bx	lr

0800cef2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cef2:	b580      	push	{r7, lr}
 800cef4:	b088      	sub	sp, #32
 800cef6:	af02      	add	r7, sp, #8
 800cef8:	60f8      	str	r0, [r7, #12]
 800cefa:	60b9      	str	r1, [r7, #8]
 800cefc:	603b      	str	r3, [r7, #0]
 800cefe:	4613      	mov	r3, r2
 800cf00:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800cf02:	2300      	movs	r3, #0
 800cf04:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800cf0c:	b2db      	uxtb	r3, r3
 800cf0e:	2b20      	cmp	r3, #32
 800cf10:	f040 8083 	bne.w	800d01a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800cf14:	68bb      	ldr	r3, [r7, #8]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d002      	beq.n	800cf20 <HAL_UART_Transmit+0x2e>
 800cf1a:	88fb      	ldrh	r3, [r7, #6]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d101      	bne.n	800cf24 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800cf20:	2301      	movs	r3, #1
 800cf22:	e07b      	b.n	800d01c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800cf2a:	2b01      	cmp	r3, #1
 800cf2c:	d101      	bne.n	800cf32 <HAL_UART_Transmit+0x40>
 800cf2e:	2302      	movs	r3, #2
 800cf30:	e074      	b.n	800d01c <HAL_UART_Transmit+0x12a>
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	2201      	movs	r2, #1
 800cf36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	2200      	movs	r2, #0
 800cf3e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	2221      	movs	r2, #33	; 0x21
 800cf44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800cf48:	f7fb fecc 	bl	8008ce4 <HAL_GetTick>
 800cf4c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	88fa      	ldrh	r2, [r7, #6]
 800cf52:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	88fa      	ldrh	r2, [r7, #6]
 800cf58:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	2200      	movs	r2, #0
 800cf5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800cf62:	e042      	b.n	800cfea <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800cf68:	b29b      	uxth	r3, r3
 800cf6a:	3b01      	subs	r3, #1
 800cf6c:	b29a      	uxth	r2, r3
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	689b      	ldr	r3, [r3, #8]
 800cf76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cf7a:	d122      	bne.n	800cfc2 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cf7c:	683b      	ldr	r3, [r7, #0]
 800cf7e:	9300      	str	r3, [sp, #0]
 800cf80:	697b      	ldr	r3, [r7, #20]
 800cf82:	2200      	movs	r2, #0
 800cf84:	2180      	movs	r1, #128	; 0x80
 800cf86:	68f8      	ldr	r0, [r7, #12]
 800cf88:	f000 f84c 	bl	800d024 <UART_WaitOnFlagUntilTimeout>
 800cf8c:	4603      	mov	r3, r0
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d001      	beq.n	800cf96 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800cf92:	2303      	movs	r3, #3
 800cf94:	e042      	b.n	800d01c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800cf96:	68bb      	ldr	r3, [r7, #8]
 800cf98:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800cf9a:	693b      	ldr	r3, [r7, #16]
 800cf9c:	881b      	ldrh	r3, [r3, #0]
 800cf9e:	461a      	mov	r2, r3
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cfa8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	691b      	ldr	r3, [r3, #16]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d103      	bne.n	800cfba <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800cfb2:	68bb      	ldr	r3, [r7, #8]
 800cfb4:	3302      	adds	r3, #2
 800cfb6:	60bb      	str	r3, [r7, #8]
 800cfb8:	e017      	b.n	800cfea <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800cfba:	68bb      	ldr	r3, [r7, #8]
 800cfbc:	3301      	adds	r3, #1
 800cfbe:	60bb      	str	r3, [r7, #8]
 800cfc0:	e013      	b.n	800cfea <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cfc2:	683b      	ldr	r3, [r7, #0]
 800cfc4:	9300      	str	r3, [sp, #0]
 800cfc6:	697b      	ldr	r3, [r7, #20]
 800cfc8:	2200      	movs	r2, #0
 800cfca:	2180      	movs	r1, #128	; 0x80
 800cfcc:	68f8      	ldr	r0, [r7, #12]
 800cfce:	f000 f829 	bl	800d024 <UART_WaitOnFlagUntilTimeout>
 800cfd2:	4603      	mov	r3, r0
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d001      	beq.n	800cfdc <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800cfd8:	2303      	movs	r3, #3
 800cfda:	e01f      	b.n	800d01c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800cfdc:	68bb      	ldr	r3, [r7, #8]
 800cfde:	1c5a      	adds	r2, r3, #1
 800cfe0:	60ba      	str	r2, [r7, #8]
 800cfe2:	781a      	ldrb	r2, [r3, #0]
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800cfee:	b29b      	uxth	r3, r3
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d1b7      	bne.n	800cf64 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cff4:	683b      	ldr	r3, [r7, #0]
 800cff6:	9300      	str	r3, [sp, #0]
 800cff8:	697b      	ldr	r3, [r7, #20]
 800cffa:	2200      	movs	r2, #0
 800cffc:	2140      	movs	r1, #64	; 0x40
 800cffe:	68f8      	ldr	r0, [r7, #12]
 800d000:	f000 f810 	bl	800d024 <UART_WaitOnFlagUntilTimeout>
 800d004:	4603      	mov	r3, r0
 800d006:	2b00      	cmp	r3, #0
 800d008:	d001      	beq.n	800d00e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800d00a:	2303      	movs	r3, #3
 800d00c:	e006      	b.n	800d01c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	2220      	movs	r2, #32
 800d012:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800d016:	2300      	movs	r3, #0
 800d018:	e000      	b.n	800d01c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800d01a:	2302      	movs	r3, #2
  }
}
 800d01c:	4618      	mov	r0, r3
 800d01e:	3718      	adds	r7, #24
 800d020:	46bd      	mov	sp, r7
 800d022:	bd80      	pop	{r7, pc}

0800d024 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800d024:	b580      	push	{r7, lr}
 800d026:	b084      	sub	sp, #16
 800d028:	af00      	add	r7, sp, #0
 800d02a:	60f8      	str	r0, [r7, #12]
 800d02c:	60b9      	str	r1, [r7, #8]
 800d02e:	603b      	str	r3, [r7, #0]
 800d030:	4613      	mov	r3, r2
 800d032:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d034:	e02c      	b.n	800d090 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d036:	69bb      	ldr	r3, [r7, #24]
 800d038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d03c:	d028      	beq.n	800d090 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800d03e:	69bb      	ldr	r3, [r7, #24]
 800d040:	2b00      	cmp	r3, #0
 800d042:	d007      	beq.n	800d054 <UART_WaitOnFlagUntilTimeout+0x30>
 800d044:	f7fb fe4e 	bl	8008ce4 <HAL_GetTick>
 800d048:	4602      	mov	r2, r0
 800d04a:	683b      	ldr	r3, [r7, #0]
 800d04c:	1ad3      	subs	r3, r2, r3
 800d04e:	69ba      	ldr	r2, [r7, #24]
 800d050:	429a      	cmp	r2, r3
 800d052:	d21d      	bcs.n	800d090 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	68da      	ldr	r2, [r3, #12]
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800d062:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	695a      	ldr	r2, [r3, #20]
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	f022 0201 	bic.w	r2, r2, #1
 800d072:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	2220      	movs	r2, #32
 800d078:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	2220      	movs	r2, #32
 800d080:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	2200      	movs	r2, #0
 800d088:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800d08c:	2303      	movs	r3, #3
 800d08e:	e00f      	b.n	800d0b0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	681a      	ldr	r2, [r3, #0]
 800d096:	68bb      	ldr	r3, [r7, #8]
 800d098:	4013      	ands	r3, r2
 800d09a:	68ba      	ldr	r2, [r7, #8]
 800d09c:	429a      	cmp	r2, r3
 800d09e:	bf0c      	ite	eq
 800d0a0:	2301      	moveq	r3, #1
 800d0a2:	2300      	movne	r3, #0
 800d0a4:	b2db      	uxtb	r3, r3
 800d0a6:	461a      	mov	r2, r3
 800d0a8:	79fb      	ldrb	r3, [r7, #7]
 800d0aa:	429a      	cmp	r2, r3
 800d0ac:	d0c3      	beq.n	800d036 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800d0ae:	2300      	movs	r3, #0
}
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	3710      	adds	r7, #16
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	bd80      	pop	{r7, pc}

0800d0b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d0b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0bc:	b085      	sub	sp, #20
 800d0be:	af00      	add	r7, sp, #0
 800d0c0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	691b      	ldr	r3, [r3, #16]
 800d0c8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	68da      	ldr	r2, [r3, #12]
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	430a      	orrs	r2, r1
 800d0d6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	689a      	ldr	r2, [r3, #8]
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	691b      	ldr	r3, [r3, #16]
 800d0e0:	431a      	orrs	r2, r3
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	695b      	ldr	r3, [r3, #20]
 800d0e6:	431a      	orrs	r2, r3
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	69db      	ldr	r3, [r3, #28]
 800d0ec:	4313      	orrs	r3, r2
 800d0ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	68db      	ldr	r3, [r3, #12]
 800d0f6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800d0fa:	f023 030c 	bic.w	r3, r3, #12
 800d0fe:	687a      	ldr	r2, [r7, #4]
 800d100:	6812      	ldr	r2, [r2, #0]
 800d102:	68f9      	ldr	r1, [r7, #12]
 800d104:	430b      	orrs	r3, r1
 800d106:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	695b      	ldr	r3, [r3, #20]
 800d10e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	699a      	ldr	r2, [r3, #24]
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	430a      	orrs	r2, r1
 800d11c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	69db      	ldr	r3, [r3, #28]
 800d122:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d126:	f040 818b 	bne.w	800d440 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	4ac1      	ldr	r2, [pc, #772]	; (800d434 <UART_SetConfig+0x37c>)
 800d130:	4293      	cmp	r3, r2
 800d132:	d005      	beq.n	800d140 <UART_SetConfig+0x88>
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	4abf      	ldr	r2, [pc, #764]	; (800d438 <UART_SetConfig+0x380>)
 800d13a:	4293      	cmp	r3, r2
 800d13c:	f040 80bd 	bne.w	800d2ba <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800d140:	f7fe fd18 	bl	800bb74 <HAL_RCC_GetPCLK2Freq>
 800d144:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d146:	68bb      	ldr	r3, [r7, #8]
 800d148:	461d      	mov	r5, r3
 800d14a:	f04f 0600 	mov.w	r6, #0
 800d14e:	46a8      	mov	r8, r5
 800d150:	46b1      	mov	r9, r6
 800d152:	eb18 0308 	adds.w	r3, r8, r8
 800d156:	eb49 0409 	adc.w	r4, r9, r9
 800d15a:	4698      	mov	r8, r3
 800d15c:	46a1      	mov	r9, r4
 800d15e:	eb18 0805 	adds.w	r8, r8, r5
 800d162:	eb49 0906 	adc.w	r9, r9, r6
 800d166:	f04f 0100 	mov.w	r1, #0
 800d16a:	f04f 0200 	mov.w	r2, #0
 800d16e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800d172:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800d176:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800d17a:	4688      	mov	r8, r1
 800d17c:	4691      	mov	r9, r2
 800d17e:	eb18 0005 	adds.w	r0, r8, r5
 800d182:	eb49 0106 	adc.w	r1, r9, r6
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	685b      	ldr	r3, [r3, #4]
 800d18a:	461d      	mov	r5, r3
 800d18c:	f04f 0600 	mov.w	r6, #0
 800d190:	196b      	adds	r3, r5, r5
 800d192:	eb46 0406 	adc.w	r4, r6, r6
 800d196:	461a      	mov	r2, r3
 800d198:	4623      	mov	r3, r4
 800d19a:	f7f3 fd5d 	bl	8000c58 <__aeabi_uldivmod>
 800d19e:	4603      	mov	r3, r0
 800d1a0:	460c      	mov	r4, r1
 800d1a2:	461a      	mov	r2, r3
 800d1a4:	4ba5      	ldr	r3, [pc, #660]	; (800d43c <UART_SetConfig+0x384>)
 800d1a6:	fba3 2302 	umull	r2, r3, r3, r2
 800d1aa:	095b      	lsrs	r3, r3, #5
 800d1ac:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800d1b0:	68bb      	ldr	r3, [r7, #8]
 800d1b2:	461d      	mov	r5, r3
 800d1b4:	f04f 0600 	mov.w	r6, #0
 800d1b8:	46a9      	mov	r9, r5
 800d1ba:	46b2      	mov	sl, r6
 800d1bc:	eb19 0309 	adds.w	r3, r9, r9
 800d1c0:	eb4a 040a 	adc.w	r4, sl, sl
 800d1c4:	4699      	mov	r9, r3
 800d1c6:	46a2      	mov	sl, r4
 800d1c8:	eb19 0905 	adds.w	r9, r9, r5
 800d1cc:	eb4a 0a06 	adc.w	sl, sl, r6
 800d1d0:	f04f 0100 	mov.w	r1, #0
 800d1d4:	f04f 0200 	mov.w	r2, #0
 800d1d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d1dc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d1e0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d1e4:	4689      	mov	r9, r1
 800d1e6:	4692      	mov	sl, r2
 800d1e8:	eb19 0005 	adds.w	r0, r9, r5
 800d1ec:	eb4a 0106 	adc.w	r1, sl, r6
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	685b      	ldr	r3, [r3, #4]
 800d1f4:	461d      	mov	r5, r3
 800d1f6:	f04f 0600 	mov.w	r6, #0
 800d1fa:	196b      	adds	r3, r5, r5
 800d1fc:	eb46 0406 	adc.w	r4, r6, r6
 800d200:	461a      	mov	r2, r3
 800d202:	4623      	mov	r3, r4
 800d204:	f7f3 fd28 	bl	8000c58 <__aeabi_uldivmod>
 800d208:	4603      	mov	r3, r0
 800d20a:	460c      	mov	r4, r1
 800d20c:	461a      	mov	r2, r3
 800d20e:	4b8b      	ldr	r3, [pc, #556]	; (800d43c <UART_SetConfig+0x384>)
 800d210:	fba3 1302 	umull	r1, r3, r3, r2
 800d214:	095b      	lsrs	r3, r3, #5
 800d216:	2164      	movs	r1, #100	; 0x64
 800d218:	fb01 f303 	mul.w	r3, r1, r3
 800d21c:	1ad3      	subs	r3, r2, r3
 800d21e:	00db      	lsls	r3, r3, #3
 800d220:	3332      	adds	r3, #50	; 0x32
 800d222:	4a86      	ldr	r2, [pc, #536]	; (800d43c <UART_SetConfig+0x384>)
 800d224:	fba2 2303 	umull	r2, r3, r2, r3
 800d228:	095b      	lsrs	r3, r3, #5
 800d22a:	005b      	lsls	r3, r3, #1
 800d22c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d230:	4498      	add	r8, r3
 800d232:	68bb      	ldr	r3, [r7, #8]
 800d234:	461d      	mov	r5, r3
 800d236:	f04f 0600 	mov.w	r6, #0
 800d23a:	46a9      	mov	r9, r5
 800d23c:	46b2      	mov	sl, r6
 800d23e:	eb19 0309 	adds.w	r3, r9, r9
 800d242:	eb4a 040a 	adc.w	r4, sl, sl
 800d246:	4699      	mov	r9, r3
 800d248:	46a2      	mov	sl, r4
 800d24a:	eb19 0905 	adds.w	r9, r9, r5
 800d24e:	eb4a 0a06 	adc.w	sl, sl, r6
 800d252:	f04f 0100 	mov.w	r1, #0
 800d256:	f04f 0200 	mov.w	r2, #0
 800d25a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d25e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d262:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d266:	4689      	mov	r9, r1
 800d268:	4692      	mov	sl, r2
 800d26a:	eb19 0005 	adds.w	r0, r9, r5
 800d26e:	eb4a 0106 	adc.w	r1, sl, r6
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	685b      	ldr	r3, [r3, #4]
 800d276:	461d      	mov	r5, r3
 800d278:	f04f 0600 	mov.w	r6, #0
 800d27c:	196b      	adds	r3, r5, r5
 800d27e:	eb46 0406 	adc.w	r4, r6, r6
 800d282:	461a      	mov	r2, r3
 800d284:	4623      	mov	r3, r4
 800d286:	f7f3 fce7 	bl	8000c58 <__aeabi_uldivmod>
 800d28a:	4603      	mov	r3, r0
 800d28c:	460c      	mov	r4, r1
 800d28e:	461a      	mov	r2, r3
 800d290:	4b6a      	ldr	r3, [pc, #424]	; (800d43c <UART_SetConfig+0x384>)
 800d292:	fba3 1302 	umull	r1, r3, r3, r2
 800d296:	095b      	lsrs	r3, r3, #5
 800d298:	2164      	movs	r1, #100	; 0x64
 800d29a:	fb01 f303 	mul.w	r3, r1, r3
 800d29e:	1ad3      	subs	r3, r2, r3
 800d2a0:	00db      	lsls	r3, r3, #3
 800d2a2:	3332      	adds	r3, #50	; 0x32
 800d2a4:	4a65      	ldr	r2, [pc, #404]	; (800d43c <UART_SetConfig+0x384>)
 800d2a6:	fba2 2303 	umull	r2, r3, r2, r3
 800d2aa:	095b      	lsrs	r3, r3, #5
 800d2ac:	f003 0207 	and.w	r2, r3, #7
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	4442      	add	r2, r8
 800d2b6:	609a      	str	r2, [r3, #8]
 800d2b8:	e26f      	b.n	800d79a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800d2ba:	f7fe fc47 	bl	800bb4c <HAL_RCC_GetPCLK1Freq>
 800d2be:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d2c0:	68bb      	ldr	r3, [r7, #8]
 800d2c2:	461d      	mov	r5, r3
 800d2c4:	f04f 0600 	mov.w	r6, #0
 800d2c8:	46a8      	mov	r8, r5
 800d2ca:	46b1      	mov	r9, r6
 800d2cc:	eb18 0308 	adds.w	r3, r8, r8
 800d2d0:	eb49 0409 	adc.w	r4, r9, r9
 800d2d4:	4698      	mov	r8, r3
 800d2d6:	46a1      	mov	r9, r4
 800d2d8:	eb18 0805 	adds.w	r8, r8, r5
 800d2dc:	eb49 0906 	adc.w	r9, r9, r6
 800d2e0:	f04f 0100 	mov.w	r1, #0
 800d2e4:	f04f 0200 	mov.w	r2, #0
 800d2e8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800d2ec:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800d2f0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800d2f4:	4688      	mov	r8, r1
 800d2f6:	4691      	mov	r9, r2
 800d2f8:	eb18 0005 	adds.w	r0, r8, r5
 800d2fc:	eb49 0106 	adc.w	r1, r9, r6
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	685b      	ldr	r3, [r3, #4]
 800d304:	461d      	mov	r5, r3
 800d306:	f04f 0600 	mov.w	r6, #0
 800d30a:	196b      	adds	r3, r5, r5
 800d30c:	eb46 0406 	adc.w	r4, r6, r6
 800d310:	461a      	mov	r2, r3
 800d312:	4623      	mov	r3, r4
 800d314:	f7f3 fca0 	bl	8000c58 <__aeabi_uldivmod>
 800d318:	4603      	mov	r3, r0
 800d31a:	460c      	mov	r4, r1
 800d31c:	461a      	mov	r2, r3
 800d31e:	4b47      	ldr	r3, [pc, #284]	; (800d43c <UART_SetConfig+0x384>)
 800d320:	fba3 2302 	umull	r2, r3, r3, r2
 800d324:	095b      	lsrs	r3, r3, #5
 800d326:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800d32a:	68bb      	ldr	r3, [r7, #8]
 800d32c:	461d      	mov	r5, r3
 800d32e:	f04f 0600 	mov.w	r6, #0
 800d332:	46a9      	mov	r9, r5
 800d334:	46b2      	mov	sl, r6
 800d336:	eb19 0309 	adds.w	r3, r9, r9
 800d33a:	eb4a 040a 	adc.w	r4, sl, sl
 800d33e:	4699      	mov	r9, r3
 800d340:	46a2      	mov	sl, r4
 800d342:	eb19 0905 	adds.w	r9, r9, r5
 800d346:	eb4a 0a06 	adc.w	sl, sl, r6
 800d34a:	f04f 0100 	mov.w	r1, #0
 800d34e:	f04f 0200 	mov.w	r2, #0
 800d352:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d356:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d35a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d35e:	4689      	mov	r9, r1
 800d360:	4692      	mov	sl, r2
 800d362:	eb19 0005 	adds.w	r0, r9, r5
 800d366:	eb4a 0106 	adc.w	r1, sl, r6
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	685b      	ldr	r3, [r3, #4]
 800d36e:	461d      	mov	r5, r3
 800d370:	f04f 0600 	mov.w	r6, #0
 800d374:	196b      	adds	r3, r5, r5
 800d376:	eb46 0406 	adc.w	r4, r6, r6
 800d37a:	461a      	mov	r2, r3
 800d37c:	4623      	mov	r3, r4
 800d37e:	f7f3 fc6b 	bl	8000c58 <__aeabi_uldivmod>
 800d382:	4603      	mov	r3, r0
 800d384:	460c      	mov	r4, r1
 800d386:	461a      	mov	r2, r3
 800d388:	4b2c      	ldr	r3, [pc, #176]	; (800d43c <UART_SetConfig+0x384>)
 800d38a:	fba3 1302 	umull	r1, r3, r3, r2
 800d38e:	095b      	lsrs	r3, r3, #5
 800d390:	2164      	movs	r1, #100	; 0x64
 800d392:	fb01 f303 	mul.w	r3, r1, r3
 800d396:	1ad3      	subs	r3, r2, r3
 800d398:	00db      	lsls	r3, r3, #3
 800d39a:	3332      	adds	r3, #50	; 0x32
 800d39c:	4a27      	ldr	r2, [pc, #156]	; (800d43c <UART_SetConfig+0x384>)
 800d39e:	fba2 2303 	umull	r2, r3, r2, r3
 800d3a2:	095b      	lsrs	r3, r3, #5
 800d3a4:	005b      	lsls	r3, r3, #1
 800d3a6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d3aa:	4498      	add	r8, r3
 800d3ac:	68bb      	ldr	r3, [r7, #8]
 800d3ae:	461d      	mov	r5, r3
 800d3b0:	f04f 0600 	mov.w	r6, #0
 800d3b4:	46a9      	mov	r9, r5
 800d3b6:	46b2      	mov	sl, r6
 800d3b8:	eb19 0309 	adds.w	r3, r9, r9
 800d3bc:	eb4a 040a 	adc.w	r4, sl, sl
 800d3c0:	4699      	mov	r9, r3
 800d3c2:	46a2      	mov	sl, r4
 800d3c4:	eb19 0905 	adds.w	r9, r9, r5
 800d3c8:	eb4a 0a06 	adc.w	sl, sl, r6
 800d3cc:	f04f 0100 	mov.w	r1, #0
 800d3d0:	f04f 0200 	mov.w	r2, #0
 800d3d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d3d8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d3dc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d3e0:	4689      	mov	r9, r1
 800d3e2:	4692      	mov	sl, r2
 800d3e4:	eb19 0005 	adds.w	r0, r9, r5
 800d3e8:	eb4a 0106 	adc.w	r1, sl, r6
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	685b      	ldr	r3, [r3, #4]
 800d3f0:	461d      	mov	r5, r3
 800d3f2:	f04f 0600 	mov.w	r6, #0
 800d3f6:	196b      	adds	r3, r5, r5
 800d3f8:	eb46 0406 	adc.w	r4, r6, r6
 800d3fc:	461a      	mov	r2, r3
 800d3fe:	4623      	mov	r3, r4
 800d400:	f7f3 fc2a 	bl	8000c58 <__aeabi_uldivmod>
 800d404:	4603      	mov	r3, r0
 800d406:	460c      	mov	r4, r1
 800d408:	461a      	mov	r2, r3
 800d40a:	4b0c      	ldr	r3, [pc, #48]	; (800d43c <UART_SetConfig+0x384>)
 800d40c:	fba3 1302 	umull	r1, r3, r3, r2
 800d410:	095b      	lsrs	r3, r3, #5
 800d412:	2164      	movs	r1, #100	; 0x64
 800d414:	fb01 f303 	mul.w	r3, r1, r3
 800d418:	1ad3      	subs	r3, r2, r3
 800d41a:	00db      	lsls	r3, r3, #3
 800d41c:	3332      	adds	r3, #50	; 0x32
 800d41e:	4a07      	ldr	r2, [pc, #28]	; (800d43c <UART_SetConfig+0x384>)
 800d420:	fba2 2303 	umull	r2, r3, r2, r3
 800d424:	095b      	lsrs	r3, r3, #5
 800d426:	f003 0207 	and.w	r2, r3, #7
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	4442      	add	r2, r8
 800d430:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800d432:	e1b2      	b.n	800d79a <UART_SetConfig+0x6e2>
 800d434:	40011000 	.word	0x40011000
 800d438:	40011400 	.word	0x40011400
 800d43c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	4ad7      	ldr	r2, [pc, #860]	; (800d7a4 <UART_SetConfig+0x6ec>)
 800d446:	4293      	cmp	r3, r2
 800d448:	d005      	beq.n	800d456 <UART_SetConfig+0x39e>
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	4ad6      	ldr	r2, [pc, #856]	; (800d7a8 <UART_SetConfig+0x6f0>)
 800d450:	4293      	cmp	r3, r2
 800d452:	f040 80d1 	bne.w	800d5f8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800d456:	f7fe fb8d 	bl	800bb74 <HAL_RCC_GetPCLK2Freq>
 800d45a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d45c:	68bb      	ldr	r3, [r7, #8]
 800d45e:	469a      	mov	sl, r3
 800d460:	f04f 0b00 	mov.w	fp, #0
 800d464:	46d0      	mov	r8, sl
 800d466:	46d9      	mov	r9, fp
 800d468:	eb18 0308 	adds.w	r3, r8, r8
 800d46c:	eb49 0409 	adc.w	r4, r9, r9
 800d470:	4698      	mov	r8, r3
 800d472:	46a1      	mov	r9, r4
 800d474:	eb18 080a 	adds.w	r8, r8, sl
 800d478:	eb49 090b 	adc.w	r9, r9, fp
 800d47c:	f04f 0100 	mov.w	r1, #0
 800d480:	f04f 0200 	mov.w	r2, #0
 800d484:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800d488:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800d48c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800d490:	4688      	mov	r8, r1
 800d492:	4691      	mov	r9, r2
 800d494:	eb1a 0508 	adds.w	r5, sl, r8
 800d498:	eb4b 0609 	adc.w	r6, fp, r9
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	685b      	ldr	r3, [r3, #4]
 800d4a0:	4619      	mov	r1, r3
 800d4a2:	f04f 0200 	mov.w	r2, #0
 800d4a6:	f04f 0300 	mov.w	r3, #0
 800d4aa:	f04f 0400 	mov.w	r4, #0
 800d4ae:	0094      	lsls	r4, r2, #2
 800d4b0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d4b4:	008b      	lsls	r3, r1, #2
 800d4b6:	461a      	mov	r2, r3
 800d4b8:	4623      	mov	r3, r4
 800d4ba:	4628      	mov	r0, r5
 800d4bc:	4631      	mov	r1, r6
 800d4be:	f7f3 fbcb 	bl	8000c58 <__aeabi_uldivmod>
 800d4c2:	4603      	mov	r3, r0
 800d4c4:	460c      	mov	r4, r1
 800d4c6:	461a      	mov	r2, r3
 800d4c8:	4bb8      	ldr	r3, [pc, #736]	; (800d7ac <UART_SetConfig+0x6f4>)
 800d4ca:	fba3 2302 	umull	r2, r3, r3, r2
 800d4ce:	095b      	lsrs	r3, r3, #5
 800d4d0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800d4d4:	68bb      	ldr	r3, [r7, #8]
 800d4d6:	469b      	mov	fp, r3
 800d4d8:	f04f 0c00 	mov.w	ip, #0
 800d4dc:	46d9      	mov	r9, fp
 800d4de:	46e2      	mov	sl, ip
 800d4e0:	eb19 0309 	adds.w	r3, r9, r9
 800d4e4:	eb4a 040a 	adc.w	r4, sl, sl
 800d4e8:	4699      	mov	r9, r3
 800d4ea:	46a2      	mov	sl, r4
 800d4ec:	eb19 090b 	adds.w	r9, r9, fp
 800d4f0:	eb4a 0a0c 	adc.w	sl, sl, ip
 800d4f4:	f04f 0100 	mov.w	r1, #0
 800d4f8:	f04f 0200 	mov.w	r2, #0
 800d4fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d500:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d504:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d508:	4689      	mov	r9, r1
 800d50a:	4692      	mov	sl, r2
 800d50c:	eb1b 0509 	adds.w	r5, fp, r9
 800d510:	eb4c 060a 	adc.w	r6, ip, sl
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	685b      	ldr	r3, [r3, #4]
 800d518:	4619      	mov	r1, r3
 800d51a:	f04f 0200 	mov.w	r2, #0
 800d51e:	f04f 0300 	mov.w	r3, #0
 800d522:	f04f 0400 	mov.w	r4, #0
 800d526:	0094      	lsls	r4, r2, #2
 800d528:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d52c:	008b      	lsls	r3, r1, #2
 800d52e:	461a      	mov	r2, r3
 800d530:	4623      	mov	r3, r4
 800d532:	4628      	mov	r0, r5
 800d534:	4631      	mov	r1, r6
 800d536:	f7f3 fb8f 	bl	8000c58 <__aeabi_uldivmod>
 800d53a:	4603      	mov	r3, r0
 800d53c:	460c      	mov	r4, r1
 800d53e:	461a      	mov	r2, r3
 800d540:	4b9a      	ldr	r3, [pc, #616]	; (800d7ac <UART_SetConfig+0x6f4>)
 800d542:	fba3 1302 	umull	r1, r3, r3, r2
 800d546:	095b      	lsrs	r3, r3, #5
 800d548:	2164      	movs	r1, #100	; 0x64
 800d54a:	fb01 f303 	mul.w	r3, r1, r3
 800d54e:	1ad3      	subs	r3, r2, r3
 800d550:	011b      	lsls	r3, r3, #4
 800d552:	3332      	adds	r3, #50	; 0x32
 800d554:	4a95      	ldr	r2, [pc, #596]	; (800d7ac <UART_SetConfig+0x6f4>)
 800d556:	fba2 2303 	umull	r2, r3, r2, r3
 800d55a:	095b      	lsrs	r3, r3, #5
 800d55c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d560:	4498      	add	r8, r3
 800d562:	68bb      	ldr	r3, [r7, #8]
 800d564:	469b      	mov	fp, r3
 800d566:	f04f 0c00 	mov.w	ip, #0
 800d56a:	46d9      	mov	r9, fp
 800d56c:	46e2      	mov	sl, ip
 800d56e:	eb19 0309 	adds.w	r3, r9, r9
 800d572:	eb4a 040a 	adc.w	r4, sl, sl
 800d576:	4699      	mov	r9, r3
 800d578:	46a2      	mov	sl, r4
 800d57a:	eb19 090b 	adds.w	r9, r9, fp
 800d57e:	eb4a 0a0c 	adc.w	sl, sl, ip
 800d582:	f04f 0100 	mov.w	r1, #0
 800d586:	f04f 0200 	mov.w	r2, #0
 800d58a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d58e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d592:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d596:	4689      	mov	r9, r1
 800d598:	4692      	mov	sl, r2
 800d59a:	eb1b 0509 	adds.w	r5, fp, r9
 800d59e:	eb4c 060a 	adc.w	r6, ip, sl
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	685b      	ldr	r3, [r3, #4]
 800d5a6:	4619      	mov	r1, r3
 800d5a8:	f04f 0200 	mov.w	r2, #0
 800d5ac:	f04f 0300 	mov.w	r3, #0
 800d5b0:	f04f 0400 	mov.w	r4, #0
 800d5b4:	0094      	lsls	r4, r2, #2
 800d5b6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d5ba:	008b      	lsls	r3, r1, #2
 800d5bc:	461a      	mov	r2, r3
 800d5be:	4623      	mov	r3, r4
 800d5c0:	4628      	mov	r0, r5
 800d5c2:	4631      	mov	r1, r6
 800d5c4:	f7f3 fb48 	bl	8000c58 <__aeabi_uldivmod>
 800d5c8:	4603      	mov	r3, r0
 800d5ca:	460c      	mov	r4, r1
 800d5cc:	461a      	mov	r2, r3
 800d5ce:	4b77      	ldr	r3, [pc, #476]	; (800d7ac <UART_SetConfig+0x6f4>)
 800d5d0:	fba3 1302 	umull	r1, r3, r3, r2
 800d5d4:	095b      	lsrs	r3, r3, #5
 800d5d6:	2164      	movs	r1, #100	; 0x64
 800d5d8:	fb01 f303 	mul.w	r3, r1, r3
 800d5dc:	1ad3      	subs	r3, r2, r3
 800d5de:	011b      	lsls	r3, r3, #4
 800d5e0:	3332      	adds	r3, #50	; 0x32
 800d5e2:	4a72      	ldr	r2, [pc, #456]	; (800d7ac <UART_SetConfig+0x6f4>)
 800d5e4:	fba2 2303 	umull	r2, r3, r2, r3
 800d5e8:	095b      	lsrs	r3, r3, #5
 800d5ea:	f003 020f 	and.w	r2, r3, #15
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	4442      	add	r2, r8
 800d5f4:	609a      	str	r2, [r3, #8]
 800d5f6:	e0d0      	b.n	800d79a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800d5f8:	f7fe faa8 	bl	800bb4c <HAL_RCC_GetPCLK1Freq>
 800d5fc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d5fe:	68bb      	ldr	r3, [r7, #8]
 800d600:	469a      	mov	sl, r3
 800d602:	f04f 0b00 	mov.w	fp, #0
 800d606:	46d0      	mov	r8, sl
 800d608:	46d9      	mov	r9, fp
 800d60a:	eb18 0308 	adds.w	r3, r8, r8
 800d60e:	eb49 0409 	adc.w	r4, r9, r9
 800d612:	4698      	mov	r8, r3
 800d614:	46a1      	mov	r9, r4
 800d616:	eb18 080a 	adds.w	r8, r8, sl
 800d61a:	eb49 090b 	adc.w	r9, r9, fp
 800d61e:	f04f 0100 	mov.w	r1, #0
 800d622:	f04f 0200 	mov.w	r2, #0
 800d626:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800d62a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800d62e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800d632:	4688      	mov	r8, r1
 800d634:	4691      	mov	r9, r2
 800d636:	eb1a 0508 	adds.w	r5, sl, r8
 800d63a:	eb4b 0609 	adc.w	r6, fp, r9
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	685b      	ldr	r3, [r3, #4]
 800d642:	4619      	mov	r1, r3
 800d644:	f04f 0200 	mov.w	r2, #0
 800d648:	f04f 0300 	mov.w	r3, #0
 800d64c:	f04f 0400 	mov.w	r4, #0
 800d650:	0094      	lsls	r4, r2, #2
 800d652:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d656:	008b      	lsls	r3, r1, #2
 800d658:	461a      	mov	r2, r3
 800d65a:	4623      	mov	r3, r4
 800d65c:	4628      	mov	r0, r5
 800d65e:	4631      	mov	r1, r6
 800d660:	f7f3 fafa 	bl	8000c58 <__aeabi_uldivmod>
 800d664:	4603      	mov	r3, r0
 800d666:	460c      	mov	r4, r1
 800d668:	461a      	mov	r2, r3
 800d66a:	4b50      	ldr	r3, [pc, #320]	; (800d7ac <UART_SetConfig+0x6f4>)
 800d66c:	fba3 2302 	umull	r2, r3, r3, r2
 800d670:	095b      	lsrs	r3, r3, #5
 800d672:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800d676:	68bb      	ldr	r3, [r7, #8]
 800d678:	469b      	mov	fp, r3
 800d67a:	f04f 0c00 	mov.w	ip, #0
 800d67e:	46d9      	mov	r9, fp
 800d680:	46e2      	mov	sl, ip
 800d682:	eb19 0309 	adds.w	r3, r9, r9
 800d686:	eb4a 040a 	adc.w	r4, sl, sl
 800d68a:	4699      	mov	r9, r3
 800d68c:	46a2      	mov	sl, r4
 800d68e:	eb19 090b 	adds.w	r9, r9, fp
 800d692:	eb4a 0a0c 	adc.w	sl, sl, ip
 800d696:	f04f 0100 	mov.w	r1, #0
 800d69a:	f04f 0200 	mov.w	r2, #0
 800d69e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d6a2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d6a6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d6aa:	4689      	mov	r9, r1
 800d6ac:	4692      	mov	sl, r2
 800d6ae:	eb1b 0509 	adds.w	r5, fp, r9
 800d6b2:	eb4c 060a 	adc.w	r6, ip, sl
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	685b      	ldr	r3, [r3, #4]
 800d6ba:	4619      	mov	r1, r3
 800d6bc:	f04f 0200 	mov.w	r2, #0
 800d6c0:	f04f 0300 	mov.w	r3, #0
 800d6c4:	f04f 0400 	mov.w	r4, #0
 800d6c8:	0094      	lsls	r4, r2, #2
 800d6ca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d6ce:	008b      	lsls	r3, r1, #2
 800d6d0:	461a      	mov	r2, r3
 800d6d2:	4623      	mov	r3, r4
 800d6d4:	4628      	mov	r0, r5
 800d6d6:	4631      	mov	r1, r6
 800d6d8:	f7f3 fabe 	bl	8000c58 <__aeabi_uldivmod>
 800d6dc:	4603      	mov	r3, r0
 800d6de:	460c      	mov	r4, r1
 800d6e0:	461a      	mov	r2, r3
 800d6e2:	4b32      	ldr	r3, [pc, #200]	; (800d7ac <UART_SetConfig+0x6f4>)
 800d6e4:	fba3 1302 	umull	r1, r3, r3, r2
 800d6e8:	095b      	lsrs	r3, r3, #5
 800d6ea:	2164      	movs	r1, #100	; 0x64
 800d6ec:	fb01 f303 	mul.w	r3, r1, r3
 800d6f0:	1ad3      	subs	r3, r2, r3
 800d6f2:	011b      	lsls	r3, r3, #4
 800d6f4:	3332      	adds	r3, #50	; 0x32
 800d6f6:	4a2d      	ldr	r2, [pc, #180]	; (800d7ac <UART_SetConfig+0x6f4>)
 800d6f8:	fba2 2303 	umull	r2, r3, r2, r3
 800d6fc:	095b      	lsrs	r3, r3, #5
 800d6fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d702:	4498      	add	r8, r3
 800d704:	68bb      	ldr	r3, [r7, #8]
 800d706:	469b      	mov	fp, r3
 800d708:	f04f 0c00 	mov.w	ip, #0
 800d70c:	46d9      	mov	r9, fp
 800d70e:	46e2      	mov	sl, ip
 800d710:	eb19 0309 	adds.w	r3, r9, r9
 800d714:	eb4a 040a 	adc.w	r4, sl, sl
 800d718:	4699      	mov	r9, r3
 800d71a:	46a2      	mov	sl, r4
 800d71c:	eb19 090b 	adds.w	r9, r9, fp
 800d720:	eb4a 0a0c 	adc.w	sl, sl, ip
 800d724:	f04f 0100 	mov.w	r1, #0
 800d728:	f04f 0200 	mov.w	r2, #0
 800d72c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d730:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d734:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d738:	4689      	mov	r9, r1
 800d73a:	4692      	mov	sl, r2
 800d73c:	eb1b 0509 	adds.w	r5, fp, r9
 800d740:	eb4c 060a 	adc.w	r6, ip, sl
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	685b      	ldr	r3, [r3, #4]
 800d748:	4619      	mov	r1, r3
 800d74a:	f04f 0200 	mov.w	r2, #0
 800d74e:	f04f 0300 	mov.w	r3, #0
 800d752:	f04f 0400 	mov.w	r4, #0
 800d756:	0094      	lsls	r4, r2, #2
 800d758:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d75c:	008b      	lsls	r3, r1, #2
 800d75e:	461a      	mov	r2, r3
 800d760:	4623      	mov	r3, r4
 800d762:	4628      	mov	r0, r5
 800d764:	4631      	mov	r1, r6
 800d766:	f7f3 fa77 	bl	8000c58 <__aeabi_uldivmod>
 800d76a:	4603      	mov	r3, r0
 800d76c:	460c      	mov	r4, r1
 800d76e:	461a      	mov	r2, r3
 800d770:	4b0e      	ldr	r3, [pc, #56]	; (800d7ac <UART_SetConfig+0x6f4>)
 800d772:	fba3 1302 	umull	r1, r3, r3, r2
 800d776:	095b      	lsrs	r3, r3, #5
 800d778:	2164      	movs	r1, #100	; 0x64
 800d77a:	fb01 f303 	mul.w	r3, r1, r3
 800d77e:	1ad3      	subs	r3, r2, r3
 800d780:	011b      	lsls	r3, r3, #4
 800d782:	3332      	adds	r3, #50	; 0x32
 800d784:	4a09      	ldr	r2, [pc, #36]	; (800d7ac <UART_SetConfig+0x6f4>)
 800d786:	fba2 2303 	umull	r2, r3, r2, r3
 800d78a:	095b      	lsrs	r3, r3, #5
 800d78c:	f003 020f 	and.w	r2, r3, #15
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	4442      	add	r2, r8
 800d796:	609a      	str	r2, [r3, #8]
}
 800d798:	e7ff      	b.n	800d79a <UART_SetConfig+0x6e2>
 800d79a:	bf00      	nop
 800d79c:	3714      	adds	r7, #20
 800d79e:	46bd      	mov	sp, r7
 800d7a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7a4:	40011000 	.word	0x40011000
 800d7a8:	40011400 	.word	0x40011400
 800d7ac:	51eb851f 	.word	0x51eb851f

0800d7b0 <MX_MEMS_Init>:
static void MEMS_INT1_Force_Low(void);
static void MEMS_INT1_Init(void);
#endif

void MX_MEMS_Init(void)
{
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	af00      	add	r7, sp, #0

  /* USER CODE END MEMS_Init_PreTreatment */

  /* Initialize the peripherals and the MEMS components */

  MX_DataLogFusion_Init();
 800d7b4:	f000 f808 	bl	800d7c8 <MX_DataLogFusion_Init>

  /* USER CODE BEGIN MEMS_Init_PostTreatment */

  /* USER CODE END MEMS_Init_PostTreatment */
}
 800d7b8:	bf00      	nop
 800d7ba:	bd80      	pop	{r7, pc}

0800d7bc <MX_MEMS_Process>:

/*
 * LM background task
 */
void MX_MEMS_Process(void)
{
 800d7bc:	b580      	push	{r7, lr}
 800d7be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MEMS_Process_PreTreatment */

  /* USER CODE END MEMS_Process_PreTreatment */

  MX_DataLogFusion_Process();
 800d7c0:	f000 f872 	bl	800d8a8 <MX_DataLogFusion_Process>

  /* USER CODE BEGIN MEMS_Process_PostTreatment */

  /* USER CODE END MEMS_Process_PostTreatment */
}
 800d7c4:	bf00      	nop
 800d7c6:	bd80      	pop	{r7, pc}

0800d7c8 <MX_DataLogFusion_Init>:
/**
  * @brief  Initialize the DataLogFusion application
  * @retval None
  */
static void MX_DataLogFusion_Init(void)
{
 800d7c8:	b580      	push	{r7, lr}
 800d7ca:	b086      	sub	sp, #24
 800d7cc:	af00      	add	r7, sp, #0
   */
  MEMS_INT1_Force_Low();
#endif

  /* Initialize LED */
  BSP_LED_Init(LED2);
 800d7ce:	2000      	movs	r0, #0
 800d7d0:	f7fb f852 	bl	8008878 <BSP_LED_Init>

  /* Initialize push button */
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 800d7d4:	2101      	movs	r1, #1
 800d7d6:	2000      	movs	r0, #0
 800d7d8:	f7fb f8c8 	bl	800896c <BSP_PB_Init>

  /* Initialize Virtual COM Port */
  BSP_COM_Init(COM1);
 800d7dc:	2000      	movs	r0, #0
 800d7de:	f7fb f969 	bl	8008ab4 <BSP_COM_Init>

  /* Initialize Timer */
  BSP_IP_TIM_Init();
 800d7e2:	f7f5 fb7d 	bl	8002ee0 <MX_TIM3_Init>

  /* Configure Timer to run with desired algorithm frequency */
  TIM_Config(ALGO_FREQ);
 800d7e6:	2064      	movs	r0, #100	; 0x64
 800d7e8:	f000 faac 	bl	800dd44 <TIM_Config>

  /* Initialize (disabled) Sensors */
  Init_Sensors();
 800d7ec:	f000 f88e 	bl	800d90c <Init_Sensors>
  /* Initialize MEMS INT1 pin back to it's default state after I3C disable / I2C enable */
  MEMS_INT1_Init();
#endif

  /* Sensor Fusion API initialization function */
  MotionFX_manager_init();
 800d7f0:	f000 fc0c 	bl	800e00c <MotionFX_manager_init>

  /* OPTIONAL */
  /* Get library version */
  MotionFX_manager_get_version(lib_version, &lib_version_len);
 800d7f4:	4927      	ldr	r1, [pc, #156]	; (800d894 <MX_DataLogFusion_Init+0xcc>)
 800d7f6:	4828      	ldr	r0, [pc, #160]	; (800d898 <MX_DataLogFusion_Init+0xd0>)
 800d7f8:	f000 fc84 	bl	800e104 <MotionFX_manager_get_version>

  /* LED Blink */
  BSP_LED_On(LED2);
 800d7fc:	2000      	movs	r0, #0
 800d7fe:	f7fb f873 	bl	80088e8 <BSP_LED_On>
  HAL_Delay(500);
 800d802:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800d806:	f7fb fa79 	bl	8008cfc <HAL_Delay>
  BSP_LED_Off(LED2);
 800d80a:	2000      	movs	r0, #0
 800d80c:	f7fb f882 	bl	8008914 <BSP_LED_Off>

  /* Enable magnetometer calibration */
  MotionFX_manager_MagCal_start(ALGO_PERIOD);
 800d810:	200a      	movs	r0, #10
 800d812:	f000 fc96 	bl	800e142 <MotionFX_manager_MagCal_start>

  /* Test if calibration data are available */
  MFX_MagCal_output_t mag_cal_test;
  MotionFX_MagCal_getParams(&mag_cal_test);
 800d816:	1d3b      	adds	r3, r7, #4
 800d818:	4618      	mov	r0, r3
 800d81a:	f00c fd69 	bl	801a2f0 <MotionFX_MagCal_getParams>

  /* If calibration data are available load HI coeficients */
  if (mag_cal_test.cal_quality == MFX_MAGCALGOOD)
 800d81e:	7c3b      	ldrb	r3, [r7, #16]
 800d820:	2b03      	cmp	r3, #3
 800d822:	d132      	bne.n	800d88a <MX_DataLogFusion_Init+0xc2>
  {
    ans_float = (mag_cal_test.hi_bias[0] * FROM_UT50_TO_MGAUSS);
 800d824:	edd7 7a01 	vldr	s15, [r7, #4]
 800d828:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800d89c <MX_DataLogFusion_Init+0xd4>
 800d82c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d830:	edc7 7a05 	vstr	s15, [r7, #20]
    MagOffset.x = (int32_t)ans_float;
 800d834:	edd7 7a05 	vldr	s15, [r7, #20]
 800d838:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d83c:	ee17 2a90 	vmov	r2, s15
 800d840:	4b17      	ldr	r3, [pc, #92]	; (800d8a0 <MX_DataLogFusion_Init+0xd8>)
 800d842:	601a      	str	r2, [r3, #0]
    ans_float = (mag_cal_test.hi_bias[1] * FROM_UT50_TO_MGAUSS);
 800d844:	edd7 7a02 	vldr	s15, [r7, #8]
 800d848:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800d89c <MX_DataLogFusion_Init+0xd4>
 800d84c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d850:	edc7 7a05 	vstr	s15, [r7, #20]
    MagOffset.y = (int32_t)ans_float;
 800d854:	edd7 7a05 	vldr	s15, [r7, #20]
 800d858:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d85c:	ee17 2a90 	vmov	r2, s15
 800d860:	4b0f      	ldr	r3, [pc, #60]	; (800d8a0 <MX_DataLogFusion_Init+0xd8>)
 800d862:	605a      	str	r2, [r3, #4]
    ans_float = (mag_cal_test.hi_bias[2] * FROM_UT50_TO_MGAUSS);
 800d864:	edd7 7a03 	vldr	s15, [r7, #12]
 800d868:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800d89c <MX_DataLogFusion_Init+0xd4>
 800d86c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d870:	edc7 7a05 	vstr	s15, [r7, #20]
    MagOffset.z = (int32_t)ans_float;
 800d874:	edd7 7a05 	vldr	s15, [r7, #20]
 800d878:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d87c:	ee17 2a90 	vmov	r2, s15
 800d880:	4b07      	ldr	r3, [pc, #28]	; (800d8a0 <MX_DataLogFusion_Init+0xd8>)
 800d882:	609a      	str	r2, [r3, #8]

    MagCalStatus = 1;
 800d884:	4b07      	ldr	r3, [pc, #28]	; (800d8a4 <MX_DataLogFusion_Init+0xdc>)
 800d886:	2201      	movs	r2, #1
 800d888:	701a      	strb	r2, [r3, #0]
  }


}
 800d88a:	bf00      	nop
 800d88c:	3718      	adds	r7, #24
 800d88e:	46bd      	mov	sp, r7
 800d890:	bd80      	pop	{r7, pc}
 800d892:	bf00      	nop
 800d894:	20002a40 	.word	0x20002a40
 800d898:	20002a48 	.word	0x20002a48
 800d89c:	43fa0000 	.word	0x43fa0000
 800d8a0:	20002470 	.word	0x20002470
 800d8a4:	20002480 	.word	0x20002480

0800d8a8 <MX_DataLogFusion_Process>:
/**
  * @brief  Process of the DataLogFusion application
  * @retval None
  */
static void MX_DataLogFusion_Process(void)
{
 800d8a8:	b580      	push	{r7, lr}
 800d8aa:	af00      	add	r7, sp, #0

  if (MagCalRequest == 1U)
 800d8ac:	4b14      	ldr	r3, [pc, #80]	; (800d900 <MX_DataLogFusion_Process+0x58>)
 800d8ae:	781b      	ldrb	r3, [r3, #0]
 800d8b0:	b2db      	uxtb	r3, r3
 800d8b2:	2b01      	cmp	r3, #1
 800d8b4:	d111      	bne.n	800d8da <MX_DataLogFusion_Process+0x32>
  {
    MagCalRequest = 0;
 800d8b6:	4b12      	ldr	r3, [pc, #72]	; (800d900 <MX_DataLogFusion_Process+0x58>)
 800d8b8:	2200      	movs	r2, #0
 800d8ba:	701a      	strb	r2, [r3, #0]

    /* Reset magnetometer calibration value*/
    MagCalStatus = 0;
 800d8bc:	4b11      	ldr	r3, [pc, #68]	; (800d904 <MX_DataLogFusion_Process+0x5c>)
 800d8be:	2200      	movs	r2, #0
 800d8c0:	701a      	strb	r2, [r3, #0]
    MagOffset.x = 0;
 800d8c2:	4b11      	ldr	r3, [pc, #68]	; (800d908 <MX_DataLogFusion_Process+0x60>)
 800d8c4:	2200      	movs	r2, #0
 800d8c6:	601a      	str	r2, [r3, #0]
    MagOffset.y = 0;
 800d8c8:	4b0f      	ldr	r3, [pc, #60]	; (800d908 <MX_DataLogFusion_Process+0x60>)
 800d8ca:	2200      	movs	r2, #0
 800d8cc:	605a      	str	r2, [r3, #4]
    MagOffset.z = 0;
 800d8ce:	4b0e      	ldr	r3, [pc, #56]	; (800d908 <MX_DataLogFusion_Process+0x60>)
 800d8d0:	2200      	movs	r2, #0
 800d8d2:	609a      	str	r2, [r3, #8]

    /* Enable magnetometer calibration */
    MotionFX_manager_MagCal_start(ALGO_PERIOD);
 800d8d4:	200a      	movs	r0, #10
 800d8d6:	f000 fc34 	bl	800e142 <MotionFX_manager_MagCal_start>
  }



   /* Acquire data from enabled sensors and fill Msg stream */
   RTC_Handler();
 800d8da:	f000 f833 	bl	800d944 <RTC_Handler>
   Accelero_Sensor_Handler();
 800d8de:	f000 f90d 	bl	800dafc <Accelero_Sensor_Handler>
   Gyro_Sensor_Handler();
 800d8e2:	f000 f92d 	bl	800db40 <Gyro_Sensor_Handler>
   Magneto_Sensor_Handler();
 800d8e6:	f000 f94d 	bl	800db84 <Magneto_Sensor_Handler>
   Humidity_Sensor_Handler();
 800d8ea:	f000 fa21 	bl	800dd30 <Humidity_Sensor_Handler>
   Temperature_Sensor_Handler();
 800d8ee:	f000 fa15 	bl	800dd1c <Temperature_Sensor_Handler>
   Pressure_Sensor_Handler();
 800d8f2:	f000 fa09 	bl	800dd08 <Pressure_Sensor_Handler>

   /* Sensor Fusion specific part */
   FX_Data_Handler();
 800d8f6:	f000 f863 	bl	800d9c0 <FX_Data_Handler>


}
 800d8fa:	bf00      	nop
 800d8fc:	bd80      	pop	{r7, pc}
 800d8fe:	bf00      	nop
 800d900:	20002448 	.word	0x20002448
 800d904:	20002480 	.word	0x20002480
 800d908:	20002470 	.word	0x20002470

0800d90c <Init_Sensors>:
 * @brief  Initialize all sensors
 * @param  None
 * @retval None
 */
static void Init_Sensors(void)
{
 800d90c:	b580      	push	{r7, lr}
 800d90e:	af00      	add	r7, sp, #0
  BSP_SENSOR_ACC_Init();
 800d910:	f000 fa8e 	bl	800de30 <BSP_SENSOR_ACC_Init>
  BSP_SENSOR_GYR_Init();
 800d914:	f000 fa94 	bl	800de40 <BSP_SENSOR_GYR_Init>
  BSP_SENSOR_MAG_Init();
 800d918:	f000 fa9a 	bl	800de50 <BSP_SENSOR_MAG_Init>
  BSP_SENSOR_PRESS_Init();
 800d91c:	f000 faa0 	bl	800de60 <BSP_SENSOR_PRESS_Init>
  BSP_SENSOR_TEMP_Init();
 800d920:	f000 faa6 	bl	800de70 <BSP_SENSOR_TEMP_Init>
  BSP_SENSOR_HUM_Init();
 800d924:	f000 faac 	bl	800de80 <BSP_SENSOR_HUM_Init>

  BSP_SENSOR_ACC_Enable();
 800d928:	f000 fab2 	bl	800de90 <BSP_SENSOR_ACC_Enable>
  BSP_SENSOR_GYR_Enable();
 800d92c:	f000 fab8 	bl	800dea0 <BSP_SENSOR_GYR_Enable>
  BSP_SENSOR_MAG_Enable();
 800d930:	f000 fabe 	bl	800deb0 <BSP_SENSOR_MAG_Enable>
  BSP_SENSOR_PRESS_Enable();
 800d934:	f000 fac4 	bl	800dec0 <BSP_SENSOR_PRESS_Enable>
  BSP_SENSOR_TEMP_Enable();
 800d938:	f000 faca 	bl	800ded0 <BSP_SENSOR_TEMP_Enable>
  BSP_SENSOR_HUM_Enable();
 800d93c:	f000 fad0 	bl	800dee0 <BSP_SENSOR_HUM_Enable>

}
 800d940:	bf00      	nop
 800d942:	bd80      	pop	{r7, pc}

0800d944 <RTC_Handler>:
/**
 * @brief  Handles the time+date getting/sending
 * @retval None
 */
static void RTC_Handler()
{
 800d944:	b580      	push	{r7, lr}
 800d946:	b08c      	sub	sp, #48	; 0x30
 800d948:	af02      	add	r7, sp, #8
  uint8_t sub_sec = 0;
 800d94a:	2300      	movs	r3, #0
 800d94c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  RTC_DateTypeDef sdatestructureget;
  RTC_TimeTypeDef stimestructure;
  uint32_t ans_uint32;
  int32_t ans_int32;
  uint32_t RtcSynchPrediv = hrtc.Init.SynchPrediv;
 800d950:	4b19      	ldr	r3, [pc, #100]	; (800d9b8 <RTC_Handler+0x74>)
 800d952:	68db      	ldr	r3, [r3, #12]
 800d954:	623b      	str	r3, [r7, #32]

  (void)HAL_RTC_GetTime(&hrtc, &stimestructure, FORMAT_BIN);
 800d956:	463b      	mov	r3, r7
 800d958:	2200      	movs	r2, #0
 800d95a:	4619      	mov	r1, r3
 800d95c:	4816      	ldr	r0, [pc, #88]	; (800d9b8 <RTC_Handler+0x74>)
 800d95e:	f7fe fb59 	bl	800c014 <HAL_RTC_GetTime>
  (void)HAL_RTC_GetDate(&hrtc, &sdatestructureget, FORMAT_BIN);
 800d962:	f107 0314 	add.w	r3, r7, #20
 800d966:	2200      	movs	r2, #0
 800d968:	4619      	mov	r1, r3
 800d96a:	4813      	ldr	r0, [pc, #76]	; (800d9b8 <RTC_Handler+0x74>)
 800d96c:	f7fe fc57 	bl	800c21e <HAL_RTC_GetDate>

  /* To be MISRA C-2012 compliant the original calculation:
     sub_sec = ((((((int)RtcSynchPrediv) - ((int)stimestructure.SubSeconds)) * 100) / (RtcSynchPrediv + 1)) & 0xFF);
     has been split to separate expressions */
  ans_int32 = (RtcSynchPrediv - (int32_t)stimestructure.SubSeconds) * 100;
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	6a3a      	ldr	r2, [r7, #32]
 800d974:	1ad3      	subs	r3, r2, r3
 800d976:	2264      	movs	r2, #100	; 0x64
 800d978:	fb02 f303 	mul.w	r3, r2, r3
 800d97c:	61fb      	str	r3, [r7, #28]
  ans_int32 /= RtcSynchPrediv + 1;
 800d97e:	69fa      	ldr	r2, [r7, #28]
 800d980:	6a3b      	ldr	r3, [r7, #32]
 800d982:	3301      	adds	r3, #1
 800d984:	fbb2 f3f3 	udiv	r3, r2, r3
 800d988:	61fb      	str	r3, [r7, #28]
  ans_uint32 = (uint32_t)ans_int32 & 0xFFU;
 800d98a:	69fb      	ldr	r3, [r7, #28]
 800d98c:	b2db      	uxtb	r3, r3
 800d98e:	61bb      	str	r3, [r7, #24]
  sub_sec = (uint8_t)ans_uint32;
 800d990:	69bb      	ldr	r3, [r7, #24]
 800d992:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  printf("Hour: %hu, Minutes: %hu Seconds: %hu, SubSeconds: %hu\r\n",
			(uint8_t) stimestructure.Hours, (uint8_t) stimestructure.Minutes,
 800d996:	783b      	ldrb	r3, [r7, #0]
  printf("Hour: %hu, Minutes: %hu Seconds: %hu, SubSeconds: %hu\r\n",
 800d998:	4619      	mov	r1, r3
			(uint8_t) stimestructure.Hours, (uint8_t) stimestructure.Minutes,
 800d99a:	787b      	ldrb	r3, [r7, #1]
  printf("Hour: %hu, Minutes: %hu Seconds: %hu, SubSeconds: %hu\r\n",
 800d99c:	461a      	mov	r2, r3
			(uint8_t) stimestructure.Seconds, sub_sec);
 800d99e:	78bb      	ldrb	r3, [r7, #2]
  printf("Hour: %hu, Minutes: %hu Seconds: %hu, SubSeconds: %hu\r\n",
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d9a6:	9300      	str	r3, [sp, #0]
 800d9a8:	4603      	mov	r3, r0
 800d9aa:	4804      	ldr	r0, [pc, #16]	; (800d9bc <RTC_Handler+0x78>)
 800d9ac:	f00c fd34 	bl	801a418 <iprintf>
}
 800d9b0:	bf00      	nop
 800d9b2:	3728      	adds	r7, #40	; 0x28
 800d9b4:	46bd      	mov	sp, r7
 800d9b6:	bd80      	pop	{r7, pc}
 800d9b8:	200028d4 	.word	0x200028d4
 800d9bc:	0801d37c 	.word	0x0801d37c

0800d9c0 <FX_Data_Handler>:
 * @brief  Sensor Fusion data handler
 * @param  Msg the Sensor Fusion data part of the stream
 * @retval None
 */
static void FX_Data_Handler(TMsg *Msg)
{
 800d9c0:	b580      	push	{r7, lr}
 800d9c2:	b0ac      	sub	sp, #176	; 0xb0
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	6078      	str	r0, [r7, #4]
  uint32_t elapsed_time_us = 0U;
 800d9c8:	2300      	movs	r3, #0
 800d9ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  MFX_input_t data_in;
  MFX_input_t *pdata_in = &data_in;
 800d9ce:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800d9d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  MFX_output_t data_out;
  MFX_output_t *pdata_out = &data_out;
 800d9d6:	f107 0308 	add.w	r3, r7, #8
 800d9da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4


  /* Convert angular velocity from [mdps] to [dps] */
  data_in.gyro[0] = (float)GyrValue.x * FROM_MDPS_TO_DPS;
 800d9de:	4b41      	ldr	r3, [pc, #260]	; (800dae4 <FX_Data_Handler+0x124>)
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	ee07 3a90 	vmov	s15, r3
 800d9e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d9ea:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 800dae8 <FX_Data_Handler+0x128>
 800d9ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d9f2:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
  data_in.gyro[1] = (float)GyrValue.y * FROM_MDPS_TO_DPS;
 800d9f6:	4b3b      	ldr	r3, [pc, #236]	; (800dae4 <FX_Data_Handler+0x124>)
 800d9f8:	685b      	ldr	r3, [r3, #4]
 800d9fa:	ee07 3a90 	vmov	s15, r3
 800d9fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800da02:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800dae8 <FX_Data_Handler+0x128>
 800da06:	ee67 7a87 	vmul.f32	s15, s15, s14
 800da0a:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
  data_in.gyro[2] = (float)GyrValue.z * FROM_MDPS_TO_DPS;
 800da0e:	4b35      	ldr	r3, [pc, #212]	; (800dae4 <FX_Data_Handler+0x124>)
 800da10:	689b      	ldr	r3, [r3, #8]
 800da12:	ee07 3a90 	vmov	s15, r3
 800da16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800da1a:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800dae8 <FX_Data_Handler+0x128>
 800da1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800da22:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0

  /* Convert acceleration from [mg] to [g] */
  data_in.acc[0] = (float)AccValue.x * FROM_MG_TO_G;
 800da26:	4b31      	ldr	r3, [pc, #196]	; (800daec <FX_Data_Handler+0x12c>)
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	ee07 3a90 	vmov	s15, r3
 800da2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800da32:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 800dae8 <FX_Data_Handler+0x128>
 800da36:	ee67 7a87 	vmul.f32	s15, s15, s14
 800da3a:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
  data_in.acc[1] = (float)AccValue.y * FROM_MG_TO_G;
 800da3e:	4b2b      	ldr	r3, [pc, #172]	; (800daec <FX_Data_Handler+0x12c>)
 800da40:	685b      	ldr	r3, [r3, #4]
 800da42:	ee07 3a90 	vmov	s15, r3
 800da46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800da4a:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800dae8 <FX_Data_Handler+0x128>
 800da4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800da52:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
  data_in.acc[2] = (float)AccValue.z * FROM_MG_TO_G;
 800da56:	4b25      	ldr	r3, [pc, #148]	; (800daec <FX_Data_Handler+0x12c>)
 800da58:	689b      	ldr	r3, [r3, #8]
 800da5a:	ee07 3a90 	vmov	s15, r3
 800da5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800da62:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800dae8 <FX_Data_Handler+0x128>
 800da66:	ee67 7a87 	vmul.f32	s15, s15, s14
 800da6a:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94

  /* Convert magnetic field intensity from [mGauss] to [uT / 50] */
  data_in.mag[0] = (float)MagValue.x * FROM_MGAUSS_TO_UT50;
 800da6e:	4b20      	ldr	r3, [pc, #128]	; (800daf0 <FX_Data_Handler+0x130>)
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	ee07 3a90 	vmov	s15, r3
 800da76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800da7a:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800daf4 <FX_Data_Handler+0x134>
 800da7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800da82:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
  data_in.mag[1] = (float)MagValue.y * FROM_MGAUSS_TO_UT50;
 800da86:	4b1a      	ldr	r3, [pc, #104]	; (800daf0 <FX_Data_Handler+0x130>)
 800da88:	685b      	ldr	r3, [r3, #4]
 800da8a:	ee07 3a90 	vmov	s15, r3
 800da8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800da92:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800daf4 <FX_Data_Handler+0x134>
 800da96:	ee67 7a87 	vmul.f32	s15, s15, s14
 800da9a:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
  data_in.mag[2] = (float)MagValue.z * FROM_MGAUSS_TO_UT50;
 800da9e:	4b14      	ldr	r3, [pc, #80]	; (800daf0 <FX_Data_Handler+0x130>)
 800daa0:	689b      	ldr	r3, [r3, #8]
 800daa2:	ee07 3a90 	vmov	s15, r3
 800daa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800daaa:	ed9f 7a12 	vldr	s14, [pc, #72]	; 800daf4 <FX_Data_Handler+0x134>
 800daae:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dab2:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88

  /* Run Sensor Fusion algorithm */
  BSP_LED_On(LED2);
 800dab6:	2000      	movs	r0, #0
 800dab8:	f7fa ff16 	bl	80088e8 <BSP_LED_On>
  DWT_Start();
 800dabc:	f000 f976 	bl	800ddac <DWT_Start>
  MotionFX_manager_run(pdata_in, pdata_out, MOTION_FX_ENGINE_DELTATIME);
 800dac0:	4a0d      	ldr	r2, [pc, #52]	; (800daf8 <FX_Data_Handler+0x138>)
 800dac2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800dac6:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800daca:	f000 faf5 	bl	800e0b8 <MotionFX_manager_run>
  elapsed_time_us = DWT_Stop();
 800dace:	f000 f987 	bl	800dde0 <DWT_Stop>
 800dad2:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
  BSP_LED_Off(LED2);
 800dad6:	2000      	movs	r0, #0
 800dad8:	f7fa ff1c 	bl	8008914 <BSP_LED_Off>
//    (void)memcpy(&Msg->Data[111], (void *) & (pdata_out->headingErr_9X), sizeof(float));
  }

  UNUSED(elapsed_time_us);

}
 800dadc:	bf00      	nop
 800dade:	37b0      	adds	r7, #176	; 0xb0
 800dae0:	46bd      	mov	sp, r7
 800dae2:	bd80      	pop	{r7, pc}
 800dae4:	20002458 	.word	0x20002458
 800dae8:	3a83126f 	.word	0x3a83126f
 800daec:	2000244c 	.word	0x2000244c
 800daf0:	20002464 	.word	0x20002464
 800daf4:	3b03126f 	.word	0x3b03126f
 800daf8:	3c23d70a 	.word	0x3c23d70a

0800dafc <Accelero_Sensor_Handler>:

/**
 * @brief  Handles the ACC axes data getting/sending
 * @retval None
 */
static void Accelero_Sensor_Handler() {
 800dafc:	b580      	push	{r7, lr}
 800dafe:	af00      	add	r7, sp, #0
	BSP_SENSOR_ACC_GetAxes(&AccValue);
 800db00:	480c      	ldr	r0, [pc, #48]	; (800db34 <Accelero_Sensor_Handler+0x38>)
 800db02:	f000 f9f5 	bl	800def0 <BSP_SENSOR_ACC_GetAxes>

	x_axes.AXIS_X = AccValue.x;
 800db06:	4b0b      	ldr	r3, [pc, #44]	; (800db34 <Accelero_Sensor_Handler+0x38>)
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	4a0b      	ldr	r2, [pc, #44]	; (800db38 <Accelero_Sensor_Handler+0x3c>)
 800db0c:	6013      	str	r3, [r2, #0]
	x_axes.AXIS_Y = AccValue.y;
 800db0e:	4b09      	ldr	r3, [pc, #36]	; (800db34 <Accelero_Sensor_Handler+0x38>)
 800db10:	685b      	ldr	r3, [r3, #4]
 800db12:	4a09      	ldr	r2, [pc, #36]	; (800db38 <Accelero_Sensor_Handler+0x3c>)
 800db14:	6053      	str	r3, [r2, #4]
	x_axes.AXIS_Z = AccValue.z;
 800db16:	4b07      	ldr	r3, [pc, #28]	; (800db34 <Accelero_Sensor_Handler+0x38>)
 800db18:	689b      	ldr	r3, [r3, #8]
 800db1a:	4a07      	ldr	r2, [pc, #28]	; (800db38 <Accelero_Sensor_Handler+0x3c>)
 800db1c:	6093      	str	r3, [r2, #8]
	printf("ax: %ld, ay: %ld, az: %ld\r\n", x_axes.AXIS_X,
 800db1e:	4b06      	ldr	r3, [pc, #24]	; (800db38 <Accelero_Sensor_Handler+0x3c>)
 800db20:	6819      	ldr	r1, [r3, #0]
 800db22:	4b05      	ldr	r3, [pc, #20]	; (800db38 <Accelero_Sensor_Handler+0x3c>)
 800db24:	685a      	ldr	r2, [r3, #4]
 800db26:	4b04      	ldr	r3, [pc, #16]	; (800db38 <Accelero_Sensor_Handler+0x3c>)
 800db28:	689b      	ldr	r3, [r3, #8]
 800db2a:	4804      	ldr	r0, [pc, #16]	; (800db3c <Accelero_Sensor_Handler+0x40>)
 800db2c:	f00c fc74 	bl	801a418 <iprintf>
			x_axes.AXIS_Y, x_axes.AXIS_Z);

}
 800db30:	bf00      	nop
 800db32:	bd80      	pop	{r7, pc}
 800db34:	2000244c 	.word	0x2000244c
 800db38:	200021c0 	.word	0x200021c0
 800db3c:	0801d3b4 	.word	0x0801d3b4

0800db40 <Gyro_Sensor_Handler>:

/**
 * @brief  Handles the GYR axes data getting/sending
 * @retval None
 */
static void Gyro_Sensor_Handler() {
 800db40:	b580      	push	{r7, lr}
 800db42:	af00      	add	r7, sp, #0
	BSP_SENSOR_GYR_GetAxes(&GyrValue);
 800db44:	480c      	ldr	r0, [pc, #48]	; (800db78 <Gyro_Sensor_Handler+0x38>)
 800db46:	f000 f9e0 	bl	800df0a <BSP_SENSOR_GYR_GetAxes>
	g_axes.AXIS_X = GyrValue.x;
 800db4a:	4b0b      	ldr	r3, [pc, #44]	; (800db78 <Gyro_Sensor_Handler+0x38>)
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	4a0b      	ldr	r2, [pc, #44]	; (800db7c <Gyro_Sensor_Handler+0x3c>)
 800db50:	6013      	str	r3, [r2, #0]
	g_axes.AXIS_Y = GyrValue.y;
 800db52:	4b09      	ldr	r3, [pc, #36]	; (800db78 <Gyro_Sensor_Handler+0x38>)
 800db54:	685b      	ldr	r3, [r3, #4]
 800db56:	4a09      	ldr	r2, [pc, #36]	; (800db7c <Gyro_Sensor_Handler+0x3c>)
 800db58:	6053      	str	r3, [r2, #4]
	g_axes.AXIS_Z = GyrValue.z;
 800db5a:	4b07      	ldr	r3, [pc, #28]	; (800db78 <Gyro_Sensor_Handler+0x38>)
 800db5c:	689b      	ldr	r3, [r3, #8]
 800db5e:	4a07      	ldr	r2, [pc, #28]	; (800db7c <Gyro_Sensor_Handler+0x3c>)
 800db60:	6093      	str	r3, [r2, #8]
	printf("gx: %ld, gy: %ld, gz: %ld\r\n", g_axes.AXIS_X, g_axes.AXIS_Y,
 800db62:	4b06      	ldr	r3, [pc, #24]	; (800db7c <Gyro_Sensor_Handler+0x3c>)
 800db64:	6819      	ldr	r1, [r3, #0]
 800db66:	4b05      	ldr	r3, [pc, #20]	; (800db7c <Gyro_Sensor_Handler+0x3c>)
 800db68:	685a      	ldr	r2, [r3, #4]
 800db6a:	4b04      	ldr	r3, [pc, #16]	; (800db7c <Gyro_Sensor_Handler+0x3c>)
 800db6c:	689b      	ldr	r3, [r3, #8]
 800db6e:	4804      	ldr	r0, [pc, #16]	; (800db80 <Gyro_Sensor_Handler+0x40>)
 800db70:	f00c fc52 	bl	801a418 <iprintf>
			g_axes.AXIS_Z);
}
 800db74:	bf00      	nop
 800db76:	bd80      	pop	{r7, pc}
 800db78:	20002458 	.word	0x20002458
 800db7c:	200021cc 	.word	0x200021cc
 800db80:	0801d3d0 	.word	0x0801d3d0

0800db84 <Magneto_Sensor_Handler>:
/**
 * @brief  Handles the MAG axes data getting/sending
 * @retval None
 */
static void Magneto_Sensor_Handler(TMsg *Msg)
{
 800db84:	b580      	push	{r7, lr}
 800db86:	b08c      	sub	sp, #48	; 0x30
 800db88:	af00      	add	r7, sp, #0
 800db8a:	6078      	str	r0, [r7, #4]
  float ans_float;
  MFX_MagCal_input_t mag_data_in;
  MFX_MagCal_output_t mag_data_out;

  if ((SensorsEnabled & MAGNETIC_SENSOR) == MAGNETIC_SENSOR)
 800db8c:	4b57      	ldr	r3, [pc, #348]	; (800dcec <Magneto_Sensor_Handler+0x168>)
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db94:	2b40      	cmp	r3, #64	; 0x40
 800db96:	f040 80a4 	bne.w	800dce2 <Magneto_Sensor_Handler+0x15e>
  {
    BSP_SENSOR_MAG_GetAxes(&MagValue);
 800db9a:	4855      	ldr	r0, [pc, #340]	; (800dcf0 <Magneto_Sensor_Handler+0x16c>)
 800db9c:	f000 f9c2 	bl	800df24 <BSP_SENSOR_MAG_GetAxes>

    if (MagCalStatus == 0U)
 800dba0:	4b54      	ldr	r3, [pc, #336]	; (800dcf4 <Magneto_Sensor_Handler+0x170>)
 800dba2:	781b      	ldrb	r3, [r3, #0]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d16c      	bne.n	800dc82 <Magneto_Sensor_Handler+0xfe>
    {
      mag_data_in.mag[0] = (float)MagValue.x * FROM_MGAUSS_TO_UT50;
 800dba8:	4b51      	ldr	r3, [pc, #324]	; (800dcf0 <Magneto_Sensor_Handler+0x16c>)
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	ee07 3a90 	vmov	s15, r3
 800dbb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dbb4:	ed9f 7a50 	vldr	s14, [pc, #320]	; 800dcf8 <Magneto_Sensor_Handler+0x174>
 800dbb8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dbbc:	edc7 7a07 	vstr	s15, [r7, #28]
      mag_data_in.mag[1] = (float)MagValue.y * FROM_MGAUSS_TO_UT50;
 800dbc0:	4b4b      	ldr	r3, [pc, #300]	; (800dcf0 <Magneto_Sensor_Handler+0x16c>)
 800dbc2:	685b      	ldr	r3, [r3, #4]
 800dbc4:	ee07 3a90 	vmov	s15, r3
 800dbc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dbcc:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800dcf8 <Magneto_Sensor_Handler+0x174>
 800dbd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dbd4:	edc7 7a08 	vstr	s15, [r7, #32]
      mag_data_in.mag[2] = (float)MagValue.z * FROM_MGAUSS_TO_UT50;
 800dbd8:	4b45      	ldr	r3, [pc, #276]	; (800dcf0 <Magneto_Sensor_Handler+0x16c>)
 800dbda:	689b      	ldr	r3, [r3, #8]
 800dbdc:	ee07 3a90 	vmov	s15, r3
 800dbe0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dbe4:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800dcf8 <Magneto_Sensor_Handler+0x174>
 800dbe8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dbec:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

      mag_data_in.time_stamp = (int)MagTimeStamp;
 800dbf0:	4b42      	ldr	r3, [pc, #264]	; (800dcfc <Magneto_Sensor_Handler+0x178>)
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	62bb      	str	r3, [r7, #40]	; 0x28
      MagTimeStamp += (uint32_t)ALGO_PERIOD;
 800dbf6:	4b41      	ldr	r3, [pc, #260]	; (800dcfc <Magneto_Sensor_Handler+0x178>)
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	330a      	adds	r3, #10
 800dbfc:	4a3f      	ldr	r2, [pc, #252]	; (800dcfc <Magneto_Sensor_Handler+0x178>)
 800dbfe:	6013      	str	r3, [r2, #0]

      MotionFX_manager_MagCal_run(&mag_data_in, &mag_data_out);
 800dc00:	f107 020c 	add.w	r2, r7, #12
 800dc04:	f107 031c 	add.w	r3, r7, #28
 800dc08:	4611      	mov	r1, r2
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	f000 fa8a 	bl	800e124 <MotionFX_manager_MagCal_run>

      if (mag_data_out.cal_quality == MFX_MAGCALGOOD)
 800dc10:	7e3b      	ldrb	r3, [r7, #24]
 800dc12:	2b03      	cmp	r3, #3
 800dc14:	d135      	bne.n	800dc82 <Magneto_Sensor_Handler+0xfe>
      {
        MagCalStatus = 1;
 800dc16:	4b37      	ldr	r3, [pc, #220]	; (800dcf4 <Magneto_Sensor_Handler+0x170>)
 800dc18:	2201      	movs	r2, #1
 800dc1a:	701a      	strb	r2, [r3, #0]

        ans_float = (mag_data_out.hi_bias[0] * FROM_UT50_TO_MGAUSS);
 800dc1c:	edd7 7a03 	vldr	s15, [r7, #12]
 800dc20:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800dd00 <Magneto_Sensor_Handler+0x17c>
 800dc24:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dc28:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        MagOffset.x = (int32_t)ans_float;
 800dc2c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800dc30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dc34:	ee17 2a90 	vmov	r2, s15
 800dc38:	4b32      	ldr	r3, [pc, #200]	; (800dd04 <Magneto_Sensor_Handler+0x180>)
 800dc3a:	601a      	str	r2, [r3, #0]
        ans_float = (mag_data_out.hi_bias[1] * FROM_UT50_TO_MGAUSS);
 800dc3c:	edd7 7a04 	vldr	s15, [r7, #16]
 800dc40:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800dd00 <Magneto_Sensor_Handler+0x17c>
 800dc44:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dc48:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        MagOffset.y = (int32_t)ans_float;
 800dc4c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800dc50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dc54:	ee17 2a90 	vmov	r2, s15
 800dc58:	4b2a      	ldr	r3, [pc, #168]	; (800dd04 <Magneto_Sensor_Handler+0x180>)
 800dc5a:	605a      	str	r2, [r3, #4]
        ans_float = (mag_data_out.hi_bias[2] * FROM_UT50_TO_MGAUSS);
 800dc5c:	edd7 7a05 	vldr	s15, [r7, #20]
 800dc60:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800dd00 <Magneto_Sensor_Handler+0x17c>
 800dc64:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dc68:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        MagOffset.z = (int32_t)ans_float;
 800dc6c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800dc70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dc74:	ee17 2a90 	vmov	r2, s15
 800dc78:	4b22      	ldr	r3, [pc, #136]	; (800dd04 <Magneto_Sensor_Handler+0x180>)
 800dc7a:	609a      	str	r2, [r3, #8]

        /* Disable magnetometer calibration */
        MotionFX_manager_MagCal_stop(ALGO_PERIOD);
 800dc7c:	200a      	movs	r0, #10
 800dc7e:	f000 fa6c 	bl	800e15a <MotionFX_manager_MagCal_stop>
      }
    }

    MagValue.x = (int32_t)(MagValue.x - MagOffset.x);
 800dc82:	4b1b      	ldr	r3, [pc, #108]	; (800dcf0 <Magneto_Sensor_Handler+0x16c>)
 800dc84:	681a      	ldr	r2, [r3, #0]
 800dc86:	4b1f      	ldr	r3, [pc, #124]	; (800dd04 <Magneto_Sensor_Handler+0x180>)
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	1ad3      	subs	r3, r2, r3
 800dc8c:	4a18      	ldr	r2, [pc, #96]	; (800dcf0 <Magneto_Sensor_Handler+0x16c>)
 800dc8e:	6013      	str	r3, [r2, #0]
    MagValue.y = (int32_t)(MagValue.y - MagOffset.y);
 800dc90:	4b17      	ldr	r3, [pc, #92]	; (800dcf0 <Magneto_Sensor_Handler+0x16c>)
 800dc92:	685a      	ldr	r2, [r3, #4]
 800dc94:	4b1b      	ldr	r3, [pc, #108]	; (800dd04 <Magneto_Sensor_Handler+0x180>)
 800dc96:	685b      	ldr	r3, [r3, #4]
 800dc98:	1ad3      	subs	r3, r2, r3
 800dc9a:	4a15      	ldr	r2, [pc, #84]	; (800dcf0 <Magneto_Sensor_Handler+0x16c>)
 800dc9c:	6053      	str	r3, [r2, #4]
    MagValue.z = (int32_t)(MagValue.z - MagOffset.z);
 800dc9e:	4b14      	ldr	r3, [pc, #80]	; (800dcf0 <Magneto_Sensor_Handler+0x16c>)
 800dca0:	689a      	ldr	r2, [r3, #8]
 800dca2:	4b18      	ldr	r3, [pc, #96]	; (800dd04 <Magneto_Sensor_Handler+0x180>)
 800dca4:	689b      	ldr	r3, [r3, #8]
 800dca6:	1ad3      	subs	r3, r2, r3
 800dca8:	4a11      	ldr	r2, [pc, #68]	; (800dcf0 <Magneto_Sensor_Handler+0x16c>)
 800dcaa:	6093      	str	r3, [r2, #8]

    Serialize_s32(&Msg->Data[43], MagValue.x, 4);
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	f103 002f 	add.w	r0, r3, #47	; 0x2f
 800dcb2:	4b0f      	ldr	r3, [pc, #60]	; (800dcf0 <Magneto_Sensor_Handler+0x16c>)
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	2204      	movs	r2, #4
 800dcb8:	4619      	mov	r1, r3
 800dcba:	f000 fa74 	bl	800e1a6 <Serialize_s32>
    Serialize_s32(&Msg->Data[47], MagValue.y, 4);
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	f103 0033 	add.w	r0, r3, #51	; 0x33
 800dcc4:	4b0a      	ldr	r3, [pc, #40]	; (800dcf0 <Magneto_Sensor_Handler+0x16c>)
 800dcc6:	685b      	ldr	r3, [r3, #4]
 800dcc8:	2204      	movs	r2, #4
 800dcca:	4619      	mov	r1, r3
 800dccc:	f000 fa6b 	bl	800e1a6 <Serialize_s32>
    Serialize_s32(&Msg->Data[51], MagValue.z, 4);
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	f103 0037 	add.w	r0, r3, #55	; 0x37
 800dcd6:	4b06      	ldr	r3, [pc, #24]	; (800dcf0 <Magneto_Sensor_Handler+0x16c>)
 800dcd8:	689b      	ldr	r3, [r3, #8]
 800dcda:	2204      	movs	r2, #4
 800dcdc:	4619      	mov	r1, r3
 800dcde:	f000 fa62 	bl	800e1a6 <Serialize_s32>
  }
}
 800dce2:	bf00      	nop
 800dce4:	3730      	adds	r7, #48	; 0x30
 800dce6:	46bd      	mov	sp, r7
 800dce8:	bd80      	pop	{r7, pc}
 800dcea:	bf00      	nop
 800dcec:	20002444 	.word	0x20002444
 800dcf0:	20002464 	.word	0x20002464
 800dcf4:	20002480 	.word	0x20002480
 800dcf8:	3b03126f 	.word	0x3b03126f
 800dcfc:	2000247c 	.word	0x2000247c
 800dd00:	43fa0000 	.word	0x43fa0000
 800dd04:	20002470 	.word	0x20002470

0800dd08 <Pressure_Sensor_Handler>:
/**
 * @brief  Handles the PRESS sensor data getting/sending.
 * @retval None
 */
static void Pressure_Sensor_Handler()
{
 800dd08:	b580      	push	{r7, lr}
 800dd0a:	af00      	add	r7, sp, #0
  BSP_SENSOR_PRESS_GetValue(&mems_pressure);
 800dd0c:	4802      	ldr	r0, [pc, #8]	; (800dd18 <Pressure_Sensor_Handler+0x10>)
 800dd0e:	f000 f916 	bl	800df3e <BSP_SENSOR_PRESS_GetValue>
}
 800dd12:	bf00      	nop
 800dd14:	bd80      	pop	{r7, pc}
 800dd16:	bf00      	nop
 800dd18:	20002a44 	.word	0x20002a44

0800dd1c <Temperature_Sensor_Handler>:
/**
 * @brief  Handles the TEMP axes data getting/sending
 * @retval None
 */
static void Temperature_Sensor_Handler()
{
 800dd1c:	b580      	push	{r7, lr}
 800dd1e:	af00      	add	r7, sp, #0
  BSP_SENSOR_TEMP_GetValue(&mems_temperature);
 800dd20:	4802      	ldr	r0, [pc, #8]	; (800dd2c <Temperature_Sensor_Handler+0x10>)
 800dd22:	f000 f919 	bl	800df58 <BSP_SENSOR_TEMP_GetValue>
}
 800dd26:	bf00      	nop
 800dd28:	bd80      	pop	{r7, pc}
 800dd2a:	bf00      	nop
 800dd2c:	20002a3c 	.word	0x20002a3c

0800dd30 <Humidity_Sensor_Handler>:
/**
 * @brief  Handles the HUM axes data getting/sending
 * @retval None
 */
static void Humidity_Sensor_Handler()
{
 800dd30:	b580      	push	{r7, lr}
 800dd32:	af00      	add	r7, sp, #0
  BSP_SENSOR_HUM_GetValue(&mems_humidity);
 800dd34:	4802      	ldr	r0, [pc, #8]	; (800dd40 <Humidity_Sensor_Handler+0x10>)
 800dd36:	f000 f91c 	bl	800df72 <BSP_SENSOR_HUM_GetValue>
}
 800dd3a:	bf00      	nop
 800dd3c:	bd80      	pop	{r7, pc}
 800dd3e:	bf00      	nop
 800dd40:	20002a38 	.word	0x20002a38

0800dd44 <TIM_Config>:
 * @brief  Timer configuration
 * @param  Freq the desired Timer frequency
 * @retval None
 */
static void TIM_Config(uint32_t Freq)
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b086      	sub	sp, #24
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
  const uint32_t tim_counter_clock = 2000; /* TIM counter clock 2 kHz */
 800dd4c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800dd50:	617b      	str	r3, [r7, #20]
  uint32_t prescaler_value = (uint32_t)((SystemCoreClock / tim_counter_clock) - 1);
 800dd52:	4b14      	ldr	r3, [pc, #80]	; (800dda4 <TIM_Config+0x60>)
 800dd54:	681a      	ldr	r2, [r3, #0]
 800dd56:	697b      	ldr	r3, [r7, #20]
 800dd58:	fbb2 f3f3 	udiv	r3, r2, r3
 800dd5c:	3b01      	subs	r3, #1
 800dd5e:	613b      	str	r3, [r7, #16]
  uint32_t period = (tim_counter_clock / Freq) - 1;
 800dd60:	697a      	ldr	r2, [r7, #20]
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	fbb2 f3f3 	udiv	r3, r2, r3
 800dd68:	3b01      	subs	r3, #1
 800dd6a:	60fb      	str	r3, [r7, #12]

  BSP_IP_TIM_Handle.Init.Prescaler         = prescaler_value;
 800dd6c:	4a0e      	ldr	r2, [pc, #56]	; (800dda8 <TIM_Config+0x64>)
 800dd6e:	693b      	ldr	r3, [r7, #16]
 800dd70:	6053      	str	r3, [r2, #4]
  BSP_IP_TIM_Handle.Init.CounterMode       = TIM_COUNTERMODE_UP;
 800dd72:	4b0d      	ldr	r3, [pc, #52]	; (800dda8 <TIM_Config+0x64>)
 800dd74:	2200      	movs	r2, #0
 800dd76:	609a      	str	r2, [r3, #8]
  BSP_IP_TIM_Handle.Init.Period            = period;
 800dd78:	4a0b      	ldr	r2, [pc, #44]	; (800dda8 <TIM_Config+0x64>)
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	60d3      	str	r3, [r2, #12]
  BSP_IP_TIM_Handle.Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
 800dd7e:	4b0a      	ldr	r3, [pc, #40]	; (800dda8 <TIM_Config+0x64>)
 800dd80:	2200      	movs	r2, #0
 800dd82:	611a      	str	r2, [r3, #16]
  BSP_IP_TIM_Handle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800dd84:	4b08      	ldr	r3, [pc, #32]	; (800dda8 <TIM_Config+0x64>)
 800dd86:	2200      	movs	r2, #0
 800dd88:	619a      	str	r2, [r3, #24]

  if (HAL_TIM_Base_Init(&BSP_IP_TIM_Handle) != HAL_OK)
 800dd8a:	4807      	ldr	r0, [pc, #28]	; (800dda8 <TIM_Config+0x64>)
 800dd8c:	f7fe fdf0 	bl	800c970 <HAL_TIM_Base_Init>
 800dd90:	4603      	mov	r3, r0
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d001      	beq.n	800dd9a <TIM_Config+0x56>
  {
    Error_Handler();
 800dd96:	f7f5 f98f 	bl	80030b8 <Error_Handler>
  }
}
 800dd9a:	bf00      	nop
 800dd9c:	3718      	adds	r7, #24
 800dd9e:	46bd      	mov	sp, r7
 800dda0:	bd80      	pop	{r7, pc}
 800dda2:	bf00      	nop
 800dda4:	200011c4 	.word	0x200011c4
 800dda8:	200027ec 	.word	0x200027ec

0800ddac <DWT_Start>:
 * @brief  Start counting clock cycles
 * @param  None
 * @retval None
 */
static void DWT_Start(void)
{
 800ddac:	b480      	push	{r7}
 800ddae:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800ddb0:	4b09      	ldr	r3, [pc, #36]	; (800ddd8 <DWT_Start+0x2c>)
 800ddb2:	68db      	ldr	r3, [r3, #12]
 800ddb4:	4a08      	ldr	r2, [pc, #32]	; (800ddd8 <DWT_Start+0x2c>)
 800ddb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ddba:	60d3      	str	r3, [r2, #12]
  DWT->CYCCNT = 0; /* Clear count of clock cycles */
 800ddbc:	4b07      	ldr	r3, [pc, #28]	; (800dddc <DWT_Start+0x30>)
 800ddbe:	2200      	movs	r2, #0
 800ddc0:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= 1;  /* Enable counter */
 800ddc2:	4b06      	ldr	r3, [pc, #24]	; (800dddc <DWT_Start+0x30>)
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	4a05      	ldr	r2, [pc, #20]	; (800dddc <DWT_Start+0x30>)
 800ddc8:	f043 0301 	orr.w	r3, r3, #1
 800ddcc:	6013      	str	r3, [r2, #0]
}
 800ddce:	bf00      	nop
 800ddd0:	46bd      	mov	sp, r7
 800ddd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd6:	4770      	bx	lr
 800ddd8:	e000edf0 	.word	0xe000edf0
 800dddc:	e0001000 	.word	0xe0001000

0800dde0 <DWT_Stop>:
 * @brief  Stop counting clock cycles and calculate elapsed time in [us]
 * @param  None
 * @retval Elapsed time in [us]
 */
static uint32_t DWT_Stop(void)
{
 800dde0:	b480      	push	{r7}
 800dde2:	b083      	sub	sp, #12
 800dde4:	af00      	add	r7, sp, #0
  volatile uint32_t cycles_count = 0U;
 800dde6:	2300      	movs	r3, #0
 800dde8:	603b      	str	r3, [r7, #0]
  uint32_t system_core_clock_mhz = 0U;
 800ddea:	2300      	movs	r3, #0
 800ddec:	607b      	str	r3, [r7, #4]

  DWT->CTRL = DWT->CTRL ^ 1;  /* Disable counter */
 800ddee:	4b0d      	ldr	r3, [pc, #52]	; (800de24 <DWT_Stop+0x44>)
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	4a0c      	ldr	r2, [pc, #48]	; (800de24 <DWT_Stop+0x44>)
 800ddf4:	f083 0301 	eor.w	r3, r3, #1
 800ddf8:	6013      	str	r3, [r2, #0]
  cycles_count = DWT->CYCCNT; /* Read count of clock cycles */
 800ddfa:	4b0a      	ldr	r3, [pc, #40]	; (800de24 <DWT_Stop+0x44>)
 800ddfc:	685b      	ldr	r3, [r3, #4]
 800ddfe:	603b      	str	r3, [r7, #0]

  /* Calculate elapsed time in [us] */
  system_core_clock_mhz = SystemCoreClock / 1000000U;
 800de00:	4b09      	ldr	r3, [pc, #36]	; (800de28 <DWT_Stop+0x48>)
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	4a09      	ldr	r2, [pc, #36]	; (800de2c <DWT_Stop+0x4c>)
 800de06:	fba2 2303 	umull	r2, r3, r2, r3
 800de0a:	0c9b      	lsrs	r3, r3, #18
 800de0c:	607b      	str	r3, [r7, #4]
  return cycles_count / system_core_clock_mhz;
 800de0e:	683a      	ldr	r2, [r7, #0]
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800de16:	4618      	mov	r0, r3
 800de18:	370c      	adds	r7, #12
 800de1a:	46bd      	mov	sp, r7
 800de1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de20:	4770      	bx	lr
 800de22:	bf00      	nop
 800de24:	e0001000 	.word	0xe0001000
 800de28:	200011c4 	.word	0x200011c4
 800de2c:	431bde83 	.word	0x431bde83

0800de30 <BSP_SENSOR_ACC_Init>:
  * @brief  Initializes accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Init(void)
{
 800de30:	b580      	push	{r7, lr}
 800de32:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM6DSL_0, MOTION_ACCELERO);
 800de34:	2102      	movs	r1, #2
 800de36:	2000      	movs	r0, #0
 800de38:	f7fa f99e 	bl	8008178 <IKS01A2_MOTION_SENSOR_Init>
}
 800de3c:	bf00      	nop
 800de3e:	bd80      	pop	{r7, pc}

0800de40 <BSP_SENSOR_GYR_Init>:
  * @brief  Initializes gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Init(void)
{
 800de40:	b580      	push	{r7, lr}
 800de42:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM6DSL_0, MOTION_GYRO);
 800de44:	2101      	movs	r1, #1
 800de46:	2000      	movs	r0, #0
 800de48:	f7fa f996 	bl	8008178 <IKS01A2_MOTION_SENSOR_Init>
}
 800de4c:	bf00      	nop
 800de4e:	bd80      	pop	{r7, pc}

0800de50 <BSP_SENSOR_MAG_Init>:
  * @brief  Initializes magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Init(void)
{
 800de50:	b580      	push	{r7, lr}
 800de52:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM303AGR_MAG_0, MOTION_MAGNETO);
 800de54:	2104      	movs	r1, #4
 800de56:	2002      	movs	r0, #2
 800de58:	f7fa f98e 	bl	8008178 <IKS01A2_MOTION_SENSOR_Init>
}
 800de5c:	bf00      	nop
 800de5e:	bd80      	pop	{r7, pc}

0800de60 <BSP_SENSOR_PRESS_Init>:
  * @brief  Initializes pressure sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_PRESS_Init(void)
{
 800de60:	b580      	push	{r7, lr}
 800de62:	af00      	add	r7, sp, #0
  (void)IKS01A2_ENV_SENSOR_Init(IKS01A2_LPS22HB_0, ENV_PRESSURE);
 800de64:	2102      	movs	r1, #2
 800de66:	2001      	movs	r0, #1
 800de68:	f7f9 feca 	bl	8007c00 <IKS01A2_ENV_SENSOR_Init>
}
 800de6c:	bf00      	nop
 800de6e:	bd80      	pop	{r7, pc}

0800de70 <BSP_SENSOR_TEMP_Init>:
  * @brief  Initializes temperature sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_TEMP_Init(void)
{
 800de70:	b580      	push	{r7, lr}
 800de72:	af00      	add	r7, sp, #0
  (void)IKS01A2_ENV_SENSOR_Init(IKS01A2_HTS221_0, ENV_TEMPERATURE);
 800de74:	2101      	movs	r1, #1
 800de76:	2000      	movs	r0, #0
 800de78:	f7f9 fec2 	bl	8007c00 <IKS01A2_ENV_SENSOR_Init>
}
 800de7c:	bf00      	nop
 800de7e:	bd80      	pop	{r7, pc}

0800de80 <BSP_SENSOR_HUM_Init>:
  * @brief  Initializes humidity sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_HUM_Init(void)
{
 800de80:	b580      	push	{r7, lr}
 800de82:	af00      	add	r7, sp, #0
  (void)IKS01A2_ENV_SENSOR_Init(IKS01A2_HTS221_0, ENV_HUMIDITY);
 800de84:	2104      	movs	r1, #4
 800de86:	2000      	movs	r0, #0
 800de88:	f7f9 feba 	bl	8007c00 <IKS01A2_ENV_SENSOR_Init>
}
 800de8c:	bf00      	nop
 800de8e:	bd80      	pop	{r7, pc}

0800de90 <BSP_SENSOR_ACC_Enable>:
  * @brief  Enables accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Enable(void)
{
 800de90:	b580      	push	{r7, lr}
 800de92:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM6DSL_0, MOTION_ACCELERO);
 800de94:	2102      	movs	r1, #2
 800de96:	2000      	movs	r0, #0
 800de98:	f7fa fa64 	bl	8008364 <IKS01A2_MOTION_SENSOR_Enable>
}
 800de9c:	bf00      	nop
 800de9e:	bd80      	pop	{r7, pc}

0800dea0 <BSP_SENSOR_GYR_Enable>:
  * @brief  Enables gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Enable(void)
{
 800dea0:	b580      	push	{r7, lr}
 800dea2:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM6DSL_0, MOTION_GYRO);
 800dea4:	2101      	movs	r1, #1
 800dea6:	2000      	movs	r0, #0
 800dea8:	f7fa fa5c 	bl	8008364 <IKS01A2_MOTION_SENSOR_Enable>
}
 800deac:	bf00      	nop
 800deae:	bd80      	pop	{r7, pc}

0800deb0 <BSP_SENSOR_MAG_Enable>:
  * @brief  Enables magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Enable(void)
{
 800deb0:	b580      	push	{r7, lr}
 800deb2:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM303AGR_MAG_0, MOTION_MAGNETO);
 800deb4:	2104      	movs	r1, #4
 800deb6:	2002      	movs	r0, #2
 800deb8:	f7fa fa54 	bl	8008364 <IKS01A2_MOTION_SENSOR_Enable>
}
 800debc:	bf00      	nop
 800debe:	bd80      	pop	{r7, pc}

0800dec0 <BSP_SENSOR_PRESS_Enable>:
  * @brief  Enables pressure sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_PRESS_Enable(void)
{
 800dec0:	b580      	push	{r7, lr}
 800dec2:	af00      	add	r7, sp, #0
  (void)IKS01A2_ENV_SENSOR_Enable(IKS01A2_LPS22HB_0, ENV_PRESSURE);
 800dec4:	2102      	movs	r1, #2
 800dec6:	2001      	movs	r0, #1
 800dec8:	f7f9 ff5a 	bl	8007d80 <IKS01A2_ENV_SENSOR_Enable>
}
 800decc:	bf00      	nop
 800dece:	bd80      	pop	{r7, pc}

0800ded0 <BSP_SENSOR_TEMP_Enable>:
  * @brief  Enables temperature sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_TEMP_Enable(void)
{
 800ded0:	b580      	push	{r7, lr}
 800ded2:	af00      	add	r7, sp, #0
  (void)IKS01A2_ENV_SENSOR_Enable(IKS01A2_HTS221_0, ENV_TEMPERATURE);
 800ded4:	2101      	movs	r1, #1
 800ded6:	2000      	movs	r0, #0
 800ded8:	f7f9 ff52 	bl	8007d80 <IKS01A2_ENV_SENSOR_Enable>
}
 800dedc:	bf00      	nop
 800dede:	bd80      	pop	{r7, pc}

0800dee0 <BSP_SENSOR_HUM_Enable>:
  * @brief  Enables humidity sensors
  * @param  None
  * @retval None
  */
void BSP_SENSOR_HUM_Enable(void)
{
 800dee0:	b580      	push	{r7, lr}
 800dee2:	af00      	add	r7, sp, #0
  (void)IKS01A2_ENV_SENSOR_Enable(IKS01A2_HTS221_0, ENV_HUMIDITY);
 800dee4:	2104      	movs	r1, #4
 800dee6:	2000      	movs	r0, #0
 800dee8:	f7f9 ff4a 	bl	8007d80 <IKS01A2_ENV_SENSOR_Enable>
}
 800deec:	bf00      	nop
 800deee:	bd80      	pop	{r7, pc}

0800def0 <BSP_SENSOR_ACC_GetAxes>:
  * @brief  Get accelerometer data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_ACC_GetAxes(IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 800def0:	b580      	push	{r7, lr}
 800def2:	b082      	sub	sp, #8
 800def4:	af00      	add	r7, sp, #0
 800def6:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM6DSL_0, MOTION_ACCELERO, Axes);
 800def8:	687a      	ldr	r2, [r7, #4]
 800defa:	2102      	movs	r1, #2
 800defc:	2000      	movs	r0, #0
 800defe:	f7fa fa73 	bl	80083e8 <IKS01A2_MOTION_SENSOR_GetAxes>
}
 800df02:	bf00      	nop
 800df04:	3708      	adds	r7, #8
 800df06:	46bd      	mov	sp, r7
 800df08:	bd80      	pop	{r7, pc}

0800df0a <BSP_SENSOR_GYR_GetAxes>:
  * @brief  Get gyroscope data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_GYR_GetAxes(IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 800df0a:	b580      	push	{r7, lr}
 800df0c:	b082      	sub	sp, #8
 800df0e:	af00      	add	r7, sp, #0
 800df10:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM6DSL_0, MOTION_GYRO, Axes);
 800df12:	687a      	ldr	r2, [r7, #4]
 800df14:	2101      	movs	r1, #1
 800df16:	2000      	movs	r0, #0
 800df18:	f7fa fa66 	bl	80083e8 <IKS01A2_MOTION_SENSOR_GetAxes>
}
 800df1c:	bf00      	nop
 800df1e:	3708      	adds	r7, #8
 800df20:	46bd      	mov	sp, r7
 800df22:	bd80      	pop	{r7, pc}

0800df24 <BSP_SENSOR_MAG_GetAxes>:
  * @brief  Get magnetometer data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_MAG_GetAxes(IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 800df24:	b580      	push	{r7, lr}
 800df26:	b082      	sub	sp, #8
 800df28:	af00      	add	r7, sp, #0
 800df2a:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM303AGR_MAG_0, MOTION_MAGNETO, Axes);
 800df2c:	687a      	ldr	r2, [r7, #4]
 800df2e:	2104      	movs	r1, #4
 800df30:	2002      	movs	r0, #2
 800df32:	f7fa fa59 	bl	80083e8 <IKS01A2_MOTION_SENSOR_GetAxes>
}
 800df36:	bf00      	nop
 800df38:	3708      	adds	r7, #8
 800df3a:	46bd      	mov	sp, r7
 800df3c:	bd80      	pop	{r7, pc}

0800df3e <BSP_SENSOR_PRESS_GetValue>:
  * @brief  Get pressure sensor data
  * @param  Value pointer to pressure value
  * @retval None
  */
void BSP_SENSOR_PRESS_GetValue(float *Value)
{
 800df3e:	b580      	push	{r7, lr}
 800df40:	b082      	sub	sp, #8
 800df42:	af00      	add	r7, sp, #0
 800df44:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_ENV_SENSOR_GetValue(IKS01A2_LPS22HB_0, ENV_PRESSURE, Value);
 800df46:	687a      	ldr	r2, [r7, #4]
 800df48:	2102      	movs	r1, #2
 800df4a:	2001      	movs	r0, #1
 800df4c:	f7f9 ff5a 	bl	8007e04 <IKS01A2_ENV_SENSOR_GetValue>
}
 800df50:	bf00      	nop
 800df52:	3708      	adds	r7, #8
 800df54:	46bd      	mov	sp, r7
 800df56:	bd80      	pop	{r7, pc}

0800df58 <BSP_SENSOR_TEMP_GetValue>:
  * @brief  Get temperature sensor data
  * @param  Value pointer to temperature value
  * @retval None
  */
void BSP_SENSOR_TEMP_GetValue(float *Value)
{
 800df58:	b580      	push	{r7, lr}
 800df5a:	b082      	sub	sp, #8
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_ENV_SENSOR_GetValue(IKS01A2_HTS221_0, ENV_TEMPERATURE, Value);
 800df60:	687a      	ldr	r2, [r7, #4]
 800df62:	2101      	movs	r1, #1
 800df64:	2000      	movs	r0, #0
 800df66:	f7f9 ff4d 	bl	8007e04 <IKS01A2_ENV_SENSOR_GetValue>
}
 800df6a:	bf00      	nop
 800df6c:	3708      	adds	r7, #8
 800df6e:	46bd      	mov	sp, r7
 800df70:	bd80      	pop	{r7, pc}

0800df72 <BSP_SENSOR_HUM_GetValue>:
  * @brief  Get humidity sensor data
  * @param  Value pointer to humidity value
  * @retval None
  */
void BSP_SENSOR_HUM_GetValue(float *Value)
{
 800df72:	b580      	push	{r7, lr}
 800df74:	b082      	sub	sp, #8
 800df76:	af00      	add	r7, sp, #0
 800df78:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_ENV_SENSOR_GetValue(IKS01A2_HTS221_0, ENV_HUMIDITY, Value);
 800df7a:	687a      	ldr	r2, [r7, #4]
 800df7c:	2104      	movs	r1, #4
 800df7e:	2000      	movs	r0, #0
 800df80:	f7f9 ff40 	bl	8007e04 <IKS01A2_ENV_SENSOR_GetValue>
}
 800df84:	bf00      	nop
 800df86:	3708      	adds	r7, #8
 800df88:	46bd      	mov	sp, r7
 800df8a:	bd80      	pop	{r7, pc}

0800df8c <BSP_SENSOR_ACC_GetOrientation>:
  * @brief  Get accelerometer sensor orientation
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_ACC_GetOrientation(char *Orientation)
{
 800df8c:	b480      	push	{r7}
 800df8e:	b083      	sub	sp, #12
 800df90:	af00      	add	r7, sp, #0
 800df92:	6078      	str	r0, [r7, #4]
  Orientation[0] = 'n';
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	226e      	movs	r2, #110	; 0x6e
 800df98:	701a      	strb	r2, [r3, #0]
  Orientation[1] = 'w';
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	3301      	adds	r3, #1
 800df9e:	2277      	movs	r2, #119	; 0x77
 800dfa0:	701a      	strb	r2, [r3, #0]
  Orientation[2] = 'u';
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	3302      	adds	r3, #2
 800dfa6:	2275      	movs	r2, #117	; 0x75
 800dfa8:	701a      	strb	r2, [r3, #0]
}
 800dfaa:	bf00      	nop
 800dfac:	370c      	adds	r7, #12
 800dfae:	46bd      	mov	sp, r7
 800dfb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb4:	4770      	bx	lr

0800dfb6 <BSP_SENSOR_GYR_GetOrientation>:
  * @brief  Get gyroscope sensor orientation
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_GYR_GetOrientation(char *Orientation)
{
 800dfb6:	b480      	push	{r7}
 800dfb8:	b083      	sub	sp, #12
 800dfba:	af00      	add	r7, sp, #0
 800dfbc:	6078      	str	r0, [r7, #4]
  Orientation[0] = 'n';
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	226e      	movs	r2, #110	; 0x6e
 800dfc2:	701a      	strb	r2, [r3, #0]
  Orientation[1] = 'w';
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	3301      	adds	r3, #1
 800dfc8:	2277      	movs	r2, #119	; 0x77
 800dfca:	701a      	strb	r2, [r3, #0]
  Orientation[2] = 'u';
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	3302      	adds	r3, #2
 800dfd0:	2275      	movs	r2, #117	; 0x75
 800dfd2:	701a      	strb	r2, [r3, #0]
}
 800dfd4:	bf00      	nop
 800dfd6:	370c      	adds	r7, #12
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfde:	4770      	bx	lr

0800dfe0 <BSP_SENSOR_MAG_GetOrientation>:
  * @brief  Get magnetometer sensor orientation
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_MAG_GetOrientation(char *Orientation)
{
 800dfe0:	b480      	push	{r7}
 800dfe2:	b083      	sub	sp, #12
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	6078      	str	r0, [r7, #4]
  Orientation[0] = 'n';
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	226e      	movs	r2, #110	; 0x6e
 800dfec:	701a      	strb	r2, [r3, #0]
  Orientation[1] = 'e';
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	3301      	adds	r3, #1
 800dff2:	2265      	movs	r2, #101	; 0x65
 800dff4:	701a      	strb	r2, [r3, #0]
  Orientation[2] = 'u';
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	3302      	adds	r3, #2
 800dffa:	2275      	movs	r2, #117	; 0x75
 800dffc:	701a      	strb	r2, [r3, #0]
}
 800dffe:	bf00      	nop
 800e000:	370c      	adds	r7, #12
 800e002:	46bd      	mov	sp, r7
 800e004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e008:	4770      	bx	lr
	...

0800e00c <MotionFX_manager_init>:
 * @brief  Initialize the MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_init(void)
{
 800e00c:	b580      	push	{r7, lr}
 800e00e:	af00      	add	r7, sp, #0
  MotionFX_initialize();
 800e010:	f00a fd82 	bl	8018b18 <MotionFX_initialize>

  MotionFX_getKnobs(ipKnobs);
 800e014:	4b24      	ldr	r3, [pc, #144]	; (800e0a8 <MotionFX_manager_init+0x9c>)
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	4618      	mov	r0, r3
 800e01a:	f00b f843 	bl	80190a4 <MotionFX_getKnobs>

  BSP_SENSOR_ACC_GetOrientation(ipKnobs->acc_orientation);
 800e01e:	4b22      	ldr	r3, [pc, #136]	; (800e0a8 <MotionFX_manager_init+0x9c>)
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	3329      	adds	r3, #41	; 0x29
 800e024:	4618      	mov	r0, r3
 800e026:	f7ff ffb1 	bl	800df8c <BSP_SENSOR_ACC_GetOrientation>
  BSP_SENSOR_GYR_GetOrientation(ipKnobs->gyro_orientation);
 800e02a:	4b1f      	ldr	r3, [pc, #124]	; (800e0a8 <MotionFX_manager_init+0x9c>)
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	332d      	adds	r3, #45	; 0x2d
 800e030:	4618      	mov	r0, r3
 800e032:	f7ff ffc0 	bl	800dfb6 <BSP_SENSOR_GYR_GetOrientation>
  BSP_SENSOR_MAG_GetOrientation(ipKnobs->mag_orientation);
 800e036:	4b1c      	ldr	r3, [pc, #112]	; (800e0a8 <MotionFX_manager_init+0x9c>)
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	3331      	adds	r3, #49	; 0x31
 800e03c:	4618      	mov	r0, r3
 800e03e:	f7ff ffcf 	bl	800dfe0 <BSP_SENSOR_MAG_GetOrientation>

  ipKnobs->gbias_acc_th_sc_6X = GBIAS_ACC_TH_SC_6X;
 800e042:	4b19      	ldr	r3, [pc, #100]	; (800e0a8 <MotionFX_manager_init+0x9c>)
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	4a19      	ldr	r2, [pc, #100]	; (800e0ac <MotionFX_manager_init+0xa0>)
 800e048:	615a      	str	r2, [r3, #20]
  ipKnobs->gbias_gyro_th_sc_6X = GBIAS_GYRO_TH_SC_6X;
 800e04a:	4b17      	ldr	r3, [pc, #92]	; (800e0a8 <MotionFX_manager_init+0x9c>)
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	4a18      	ldr	r2, [pc, #96]	; (800e0b0 <MotionFX_manager_init+0xa4>)
 800e050:	619a      	str	r2, [r3, #24]
  ipKnobs->gbias_mag_th_sc_6X = GBIAS_MAG_TH_SC_6X;
 800e052:	4b15      	ldr	r3, [pc, #84]	; (800e0a8 <MotionFX_manager_init+0x9c>)
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	4a17      	ldr	r2, [pc, #92]	; (800e0b4 <MotionFX_manager_init+0xa8>)
 800e058:	611a      	str	r2, [r3, #16]

  ipKnobs->gbias_acc_th_sc_9X = GBIAS_ACC_TH_SC_9X;
 800e05a:	4b13      	ldr	r3, [pc, #76]	; (800e0a8 <MotionFX_manager_init+0x9c>)
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	4a13      	ldr	r2, [pc, #76]	; (800e0ac <MotionFX_manager_init+0xa0>)
 800e060:	621a      	str	r2, [r3, #32]
  ipKnobs->gbias_gyro_th_sc_9X = GBIAS_GYRO_TH_SC_9X;
 800e062:	4b11      	ldr	r3, [pc, #68]	; (800e0a8 <MotionFX_manager_init+0x9c>)
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	4a12      	ldr	r2, [pc, #72]	; (800e0b0 <MotionFX_manager_init+0xa4>)
 800e068:	625a      	str	r2, [r3, #36]	; 0x24
  ipKnobs->gbias_mag_th_sc_9X = GBIAS_MAG_TH_SC_9X;
 800e06a:	4b0f      	ldr	r3, [pc, #60]	; (800e0a8 <MotionFX_manager_init+0x9c>)
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	4a11      	ldr	r2, [pc, #68]	; (800e0b4 <MotionFX_manager_init+0xa8>)
 800e070:	61da      	str	r2, [r3, #28]

  ipKnobs->output_type = MFX_ENGINE_OUTPUT_ENU;
 800e072:	4b0d      	ldr	r3, [pc, #52]	; (800e0a8 <MotionFX_manager_init+0x9c>)
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	2201      	movs	r2, #1
 800e078:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  ipKnobs->LMode = 1;
 800e07c:	4b0a      	ldr	r3, [pc, #40]	; (800e0a8 <MotionFX_manager_init+0x9c>)
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	2201      	movs	r2, #1
 800e082:	731a      	strb	r2, [r3, #12]
  ipKnobs->modx = DECIMATION;
 800e084:	4b08      	ldr	r3, [pc, #32]	; (800e0a8 <MotionFX_manager_init+0x9c>)
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	2201      	movs	r2, #1
 800e08a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  MotionFX_setKnobs(ipKnobs);
 800e08e:	4b06      	ldr	r3, [pc, #24]	; (800e0a8 <MotionFX_manager_init+0x9c>)
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	4618      	mov	r0, r3
 800e094:	f00a ffa2 	bl	8018fdc <MotionFX_setKnobs>

  MotionFX_enable_6X(MFX_ENGINE_DISABLE);
 800e098:	2000      	movs	r0, #0
 800e09a:	f00b f859 	bl	8019150 <MotionFX_enable_6X>
  MotionFX_enable_9X(MFX_ENGINE_DISABLE);
 800e09e:	2000      	movs	r0, #0
 800e0a0:	f00b f876 	bl	8019190 <MotionFX_enable_9X>
}
 800e0a4:	bf00      	nop
 800e0a6:	bd80      	pop	{r7, pc}
 800e0a8:	2000133c 	.word	0x2000133c
 800e0ac:	3ac88a48 	.word	0x3ac88a48
 800e0b0:	3b83126f 	.word	0x3b83126f
 800e0b4:	3b449ba6 	.word	0x3b449ba6

0800e0b8 <MotionFX_manager_run>:
 * @param  data_out Structure containing output data
 * @param  delta_time Delta time
 * @retval None
 */
void MotionFX_manager_run(MFX_input_t *data_in, MFX_output_t *data_out, float delta_time)
{
 800e0b8:	b580      	push	{r7, lr}
 800e0ba:	b084      	sub	sp, #16
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	60f8      	str	r0, [r7, #12]
 800e0c0:	60b9      	str	r1, [r7, #8]
 800e0c2:	607a      	str	r2, [r7, #4]
  if (discardedCount == sampleToDiscard)
 800e0c4:	4b0d      	ldr	r3, [pc, #52]	; (800e0fc <MotionFX_manager_run+0x44>)
 800e0c6:	681a      	ldr	r2, [r3, #0]
 800e0c8:	4b0d      	ldr	r3, [pc, #52]	; (800e100 <MotionFX_manager_run+0x48>)
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	429a      	cmp	r2, r3
 800e0ce:	d10c      	bne.n	800e0ea <MotionFX_manager_run+0x32>
  {
    MotionFX_propagate(data_out, data_in, &delta_time);
 800e0d0:	1d3b      	adds	r3, r7, #4
 800e0d2:	461a      	mov	r2, r3
 800e0d4:	68f9      	ldr	r1, [r7, #12]
 800e0d6:	68b8      	ldr	r0, [r7, #8]
 800e0d8:	f00b fa3e 	bl	8019558 <MotionFX_propagate>
    MotionFX_update(data_out, data_in, &delta_time, NULL);
 800e0dc:	1d3a      	adds	r2, r7, #4
 800e0de:	2300      	movs	r3, #0
 800e0e0:	68f9      	ldr	r1, [r7, #12]
 800e0e2:	68b8      	ldr	r0, [r7, #8]
 800e0e4:	f00b f876 	bl	80191d4 <MotionFX_update>
  }
  else
  {
    discardedCount++;
  }
}
 800e0e8:	e004      	b.n	800e0f4 <MotionFX_manager_run+0x3c>
    discardedCount++;
 800e0ea:	4b04      	ldr	r3, [pc, #16]	; (800e0fc <MotionFX_manager_run+0x44>)
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	3301      	adds	r3, #1
 800e0f0:	4a02      	ldr	r2, [pc, #8]	; (800e0fc <MotionFX_manager_run+0x44>)
 800e0f2:	6013      	str	r3, [r2, #0]
}
 800e0f4:	bf00      	nop
 800e0f6:	3710      	adds	r7, #16
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	bd80      	pop	{r7, pc}
 800e0fc:	200024c0 	.word	0x200024c0
 800e100:	20001340 	.word	0x20001340

0800e104 <MotionFX_manager_get_version>:
 * @param  version  Library version string (must be array of 35 char)
 * @param  length  Library version string length
 * @retval None
 */
void MotionFX_manager_get_version(char *version, int *length)
{
 800e104:	b580      	push	{r7, lr}
 800e106:	b082      	sub	sp, #8
 800e108:	af00      	add	r7, sp, #0
 800e10a:	6078      	str	r0, [r7, #4]
 800e10c:	6039      	str	r1, [r7, #0]
  *length = (int)MotionFX_GetLibVersion(version);
 800e10e:	6878      	ldr	r0, [r7, #4]
 800e110:	f00c f91e 	bl	801a350 <MotionFX_GetLibVersion>
 800e114:	4603      	mov	r3, r0
 800e116:	461a      	mov	r2, r3
 800e118:	683b      	ldr	r3, [r7, #0]
 800e11a:	601a      	str	r2, [r3, #0]
}
 800e11c:	bf00      	nop
 800e11e:	3708      	adds	r7, #8
 800e120:	46bd      	mov	sp, r7
 800e122:	bd80      	pop	{r7, pc}

0800e124 <MotionFX_manager_MagCal_run>:
 * @brief  Run magnetometer calibration algorithm
 * @param  None
 * @retval None
 */
void MotionFX_manager_MagCal_run(MFX_MagCal_input_t *data_in, MFX_MagCal_output_t *data_out)
{
 800e124:	b580      	push	{r7, lr}
 800e126:	b082      	sub	sp, #8
 800e128:	af00      	add	r7, sp, #0
 800e12a:	6078      	str	r0, [r7, #4]
 800e12c:	6039      	str	r1, [r7, #0]
  MotionFX_MagCal_run(data_in);
 800e12e:	6878      	ldr	r0, [r7, #4]
 800e130:	f00c f838 	bl	801a1a4 <MotionFX_MagCal_run>
  MotionFX_MagCal_getParams(data_out);
 800e134:	6838      	ldr	r0, [r7, #0]
 800e136:	f00c f8db 	bl	801a2f0 <MotionFX_MagCal_getParams>
}
 800e13a:	bf00      	nop
 800e13c:	3708      	adds	r7, #8
 800e13e:	46bd      	mov	sp, r7
 800e140:	bd80      	pop	{r7, pc}

0800e142 <MotionFX_manager_MagCal_start>:
 * @brief  Start magnetometer calibration
 * @param  None
 * @retval None
 */
void MotionFX_manager_MagCal_start(int sampletime)
{
 800e142:	b580      	push	{r7, lr}
 800e144:	b082      	sub	sp, #8
 800e146:	af00      	add	r7, sp, #0
 800e148:	6078      	str	r0, [r7, #4]
  MotionFX_MagCal_init(sampletime, 1);
 800e14a:	2101      	movs	r1, #1
 800e14c:	6878      	ldr	r0, [r7, #4]
 800e14e:	f00b ff79 	bl	801a044 <MotionFX_MagCal_init>
}
 800e152:	bf00      	nop
 800e154:	3708      	adds	r7, #8
 800e156:	46bd      	mov	sp, r7
 800e158:	bd80      	pop	{r7, pc}

0800e15a <MotionFX_manager_MagCal_stop>:
 * @brief  Stop magnetometer calibration
 * @param  None
 * @retval None
 */
void MotionFX_manager_MagCal_stop(int sampletime)
{
 800e15a:	b580      	push	{r7, lr}
 800e15c:	b082      	sub	sp, #8
 800e15e:	af00      	add	r7, sp, #0
 800e160:	6078      	str	r0, [r7, #4]
  MotionFX_MagCal_init(sampletime, 0);
 800e162:	2100      	movs	r1, #0
 800e164:	6878      	ldr	r0, [r7, #4]
 800e166:	f00b ff6d 	bl	801a044 <MotionFX_MagCal_init>
}
 800e16a:	bf00      	nop
 800e16c:	3708      	adds	r7, #8
 800e16e:	46bd      	mov	sp, r7
 800e170:	bd80      	pop	{r7, pc}

0800e172 <MotionFX_LoadMagCalFromNVM>:
 * @param  dataSize length ot the data
 * @param  data pointer to the data
 * @retval (1) fail, (0) success
 */
char MotionFX_LoadMagCalFromNVM(unsigned short int dataSize, unsigned int *data)
{
 800e172:	b480      	push	{r7}
 800e174:	b083      	sub	sp, #12
 800e176:	af00      	add	r7, sp, #0
 800e178:	4603      	mov	r3, r0
 800e17a:	6039      	str	r1, [r7, #0]
 800e17c:	80fb      	strh	r3, [r7, #6]
  return (char)1;
 800e17e:	2301      	movs	r3, #1
}
 800e180:	4618      	mov	r0, r3
 800e182:	370c      	adds	r7, #12
 800e184:	46bd      	mov	sp, r7
 800e186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e18a:	4770      	bx	lr

0800e18c <MotionFX_SaveMagCalInNVM>:
 * @param  dataSize length ot the data
 * @param  data pointer to the data
 * @retval (1) fail, (0) success
 */
char MotionFX_SaveMagCalInNVM(unsigned short int dataSize, unsigned int *data)
{
 800e18c:	b480      	push	{r7}
 800e18e:	b083      	sub	sp, #12
 800e190:	af00      	add	r7, sp, #0
 800e192:	4603      	mov	r3, r0
 800e194:	6039      	str	r1, [r7, #0]
 800e196:	80fb      	strh	r3, [r7, #6]
  return (char)1;
 800e198:	2301      	movs	r3, #1
}
 800e19a:	4618      	mov	r0, r3
 800e19c:	370c      	adds	r7, #12
 800e19e:	46bd      	mov	sp, r7
 800e1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a4:	4770      	bx	lr

0800e1a6 <Serialize_s32>:
 * @param  Source source
 * @param  Len number of bytes
 * @retval None
 */
void Serialize_s32(uint8_t *Dest, int32_t Source, uint32_t Len)
{
 800e1a6:	b480      	push	{r7}
 800e1a8:	b087      	sub	sp, #28
 800e1aa:	af00      	add	r7, sp, #0
 800e1ac:	60f8      	str	r0, [r7, #12]
 800e1ae:	60b9      	str	r1, [r7, #8]
 800e1b0:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t source_uint32;

  for (i = 0; i < Len; i++)
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	617b      	str	r3, [r7, #20]
 800e1b6:	e00f      	b.n	800e1d8 <Serialize_s32+0x32>
  {
    source_uint32 = (uint32_t)Source;
 800e1b8:	68bb      	ldr	r3, [r7, #8]
 800e1ba:	613b      	str	r3, [r7, #16]
    Dest[i] = (uint8_t)(source_uint32 & 0xFFU);
 800e1bc:	68fa      	ldr	r2, [r7, #12]
 800e1be:	697b      	ldr	r3, [r7, #20]
 800e1c0:	4413      	add	r3, r2
 800e1c2:	693a      	ldr	r2, [r7, #16]
 800e1c4:	b2d2      	uxtb	r2, r2
 800e1c6:	701a      	strb	r2, [r3, #0]
    source_uint32 >>= 8;
 800e1c8:	693b      	ldr	r3, [r7, #16]
 800e1ca:	0a1b      	lsrs	r3, r3, #8
 800e1cc:	613b      	str	r3, [r7, #16]
    Source = (int32_t)source_uint32;
 800e1ce:	693b      	ldr	r3, [r7, #16]
 800e1d0:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < Len; i++)
 800e1d2:	697b      	ldr	r3, [r7, #20]
 800e1d4:	3301      	adds	r3, #1
 800e1d6:	617b      	str	r3, [r7, #20]
 800e1d8:	697a      	ldr	r2, [r7, #20]
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	429a      	cmp	r2, r3
 800e1de:	d3eb      	bcc.n	800e1b8 <Serialize_s32+0x12>
  }
}
 800e1e0:	bf00      	nop
 800e1e2:	371c      	adds	r7, #28
 800e1e4:	46bd      	mov	sp, r7
 800e1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ea:	4770      	bx	lr

0800e1ec <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 800e1ec:	b580      	push	{r7, lr}
 800e1ee:	b08c      	sub	sp, #48	; 0x30
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	603b      	str	r3, [r7, #0]
 800e1f4:	4603      	mov	r3, r0
 800e1f6:	71fb      	strb	r3, [r7, #7]
 800e1f8:	460b      	mov	r3, r1
 800e1fa:	71bb      	strb	r3, [r7, #6]
 800e1fc:	4613      	mov	r3, r2
 800e1fe:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 800e200:	79fb      	ldrb	r3, [r7, #7]
 800e202:	753b      	strb	r3, [r7, #20]
  cp.privacy_enabled = privacy_enabled;
 800e204:	79bb      	ldrb	r3, [r7, #6]
 800e206:	757b      	strb	r3, [r7, #21]
  cp.device_name_char_len = device_name_char_len;
 800e208:	797b      	ldrb	r3, [r7, #5]
 800e20a:	75bb      	strb	r3, [r7, #22]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800e20c:	f107 030c 	add.w	r3, r7, #12
 800e210:	2207      	movs	r2, #7
 800e212:	2100      	movs	r1, #0
 800e214:	4618      	mov	r0, r3
 800e216:	f00c f8f6 	bl	801a406 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800e21a:	f107 0318 	add.w	r3, r7, #24
 800e21e:	2218      	movs	r2, #24
 800e220:	2100      	movs	r1, #0
 800e222:	4618      	mov	r0, r3
 800e224:	f00c f8ef 	bl	801a406 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800e228:	233f      	movs	r3, #63	; 0x3f
 800e22a:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_GAP_INIT;
 800e22c:	238a      	movs	r3, #138	; 0x8a
 800e22e:	837b      	strh	r3, [r7, #26]
  rq.cparam = &cp;
 800e230:	f107 0314 	add.w	r3, r7, #20
 800e234:	623b      	str	r3, [r7, #32]
  rq.clen = sizeof(cp);
 800e236:	2303      	movs	r3, #3
 800e238:	627b      	str	r3, [r7, #36]	; 0x24
  rq.rparam = &resp;
 800e23a:	f107 030c 	add.w	r3, r7, #12
 800e23e:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.rlen = GAP_INIT_RP_SIZE;
 800e240:	2307      	movs	r3, #7
 800e242:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if (hci_send_req(&rq, FALSE) < 0)
 800e244:	f107 0318 	add.w	r3, r7, #24
 800e248:	2100      	movs	r1, #0
 800e24a:	4618      	mov	r0, r3
 800e24c:	f000 feae 	bl	800efac <hci_send_req>
 800e250:	4603      	mov	r3, r0
 800e252:	2b00      	cmp	r3, #0
 800e254:	da01      	bge.n	800e25a <aci_gap_init_IDB05A1+0x6e>
    return BLE_STATUS_TIMEOUT;
 800e256:	23ff      	movs	r3, #255	; 0xff
 800e258:	e014      	b.n	800e284 <aci_gap_init_IDB05A1+0x98>
  
  if (resp.status) {
 800e25a:	7b3b      	ldrb	r3, [r7, #12]
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d001      	beq.n	800e264 <aci_gap_init_IDB05A1+0x78>
    return resp.status;
 800e260:	7b3b      	ldrb	r3, [r7, #12]
 800e262:	e00f      	b.n	800e284 <aci_gap_init_IDB05A1+0x98>
  }
  
  *service_handle = btohs(resp.service_handle);
 800e264:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 800e268:	b29a      	uxth	r2, r3
 800e26a:	683b      	ldr	r3, [r7, #0]
 800e26c:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 800e26e:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 800e272:	b29a      	uxth	r2, r3
 800e274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e276:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 800e278:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 800e27c:	b29a      	uxth	r2, r3
 800e27e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e280:	801a      	strh	r2, [r3, #0]
  
  return 0;
 800e282:	2300      	movs	r3, #0
}
 800e284:	4618      	mov	r0, r3
 800e286:	3730      	adds	r7, #48	; 0x30
 800e288:	46bd      	mov	sp, r7
 800e28a:	bd80      	pop	{r7, pc}

0800e28c <aci_gap_init_IDB04A1>:

tBleStatus aci_gap_init_IDB04A1(uint8_t role, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 800e28c:	b580      	push	{r7, lr}
 800e28e:	b08e      	sub	sp, #56	; 0x38
 800e290:	af00      	add	r7, sp, #0
 800e292:	60b9      	str	r1, [r7, #8]
 800e294:	607a      	str	r2, [r7, #4]
 800e296:	603b      	str	r3, [r7, #0]
 800e298:	4603      	mov	r3, r0
 800e29a:	73fb      	strb	r3, [r7, #15]
  struct hci_request rq;
  gap_init_cp_IDB04A1 cp;
  gap_init_rp resp;

  cp.role = role;
 800e29c:	7bfb      	ldrb	r3, [r7, #15]
 800e29e:	773b      	strb	r3, [r7, #28]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800e2a0:	f107 0314 	add.w	r3, r7, #20
 800e2a4:	2207      	movs	r2, #7
 800e2a6:	2100      	movs	r1, #0
 800e2a8:	4618      	mov	r0, r3
 800e2aa:	f00c f8ac 	bl	801a406 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800e2ae:	f107 0320 	add.w	r3, r7, #32
 800e2b2:	2218      	movs	r2, #24
 800e2b4:	2100      	movs	r1, #0
 800e2b6:	4618      	mov	r0, r3
 800e2b8:	f00c f8a5 	bl	801a406 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800e2bc:	233f      	movs	r3, #63	; 0x3f
 800e2be:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_GAP_INIT;
 800e2c0:	238a      	movs	r3, #138	; 0x8a
 800e2c2:	847b      	strh	r3, [r7, #34]	; 0x22
  rq.cparam = &cp;
 800e2c4:	f107 031c 	add.w	r3, r7, #28
 800e2c8:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.clen = sizeof(cp);
 800e2ca:	2301      	movs	r3, #1
 800e2cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.rparam = &resp;
 800e2ce:	f107 0314 	add.w	r3, r7, #20
 800e2d2:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rlen = GAP_INIT_RP_SIZE;
 800e2d4:	2307      	movs	r3, #7
 800e2d6:	637b      	str	r3, [r7, #52]	; 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 800e2d8:	f107 0320 	add.w	r3, r7, #32
 800e2dc:	2100      	movs	r1, #0
 800e2de:	4618      	mov	r0, r3
 800e2e0:	f000 fe64 	bl	800efac <hci_send_req>
 800e2e4:	4603      	mov	r3, r0
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	da01      	bge.n	800e2ee <aci_gap_init_IDB04A1+0x62>
    return BLE_STATUS_TIMEOUT;
 800e2ea:	23ff      	movs	r3, #255	; 0xff
 800e2ec:	e014      	b.n	800e318 <aci_gap_init_IDB04A1+0x8c>
  
  if (resp.status) {
 800e2ee:	7d3b      	ldrb	r3, [r7, #20]
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d001      	beq.n	800e2f8 <aci_gap_init_IDB04A1+0x6c>
    return resp.status;
 800e2f4:	7d3b      	ldrb	r3, [r7, #20]
 800e2f6:	e00f      	b.n	800e318 <aci_gap_init_IDB04A1+0x8c>
  }
  
  *service_handle = btohs(resp.service_handle);
 800e2f8:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 800e2fc:	b29a      	uxth	r2, r3
 800e2fe:	68bb      	ldr	r3, [r7, #8]
 800e300:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 800e302:	f8b7 3017 	ldrh.w	r3, [r7, #23]
 800e306:	b29a      	uxth	r2, r3
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 800e30c:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 800e310:	b29a      	uxth	r2, r3
 800e312:	683b      	ldr	r3, [r7, #0]
 800e314:	801a      	strh	r2, [r3, #0]
  
  return 0;
 800e316:	2300      	movs	r3, #0
}
 800e318:	4618      	mov	r0, r3
 800e31a:	3738      	adds	r7, #56	; 0x38
 800e31c:	46bd      	mov	sp, r7
 800e31e:	bd80      	pop	{r7, pc}

0800e320 <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 800e320:	b590      	push	{r4, r7, lr}
 800e322:	b095      	sub	sp, #84	; 0x54
 800e324:	af00      	add	r7, sp, #0
 800e326:	4604      	mov	r4, r0
 800e328:	4608      	mov	r0, r1
 800e32a:	4611      	mov	r1, r2
 800e32c:	461a      	mov	r2, r3
 800e32e:	4623      	mov	r3, r4
 800e330:	71fb      	strb	r3, [r7, #7]
 800e332:	4603      	mov	r3, r0
 800e334:	80bb      	strh	r3, [r7, #4]
 800e336:	460b      	mov	r3, r1
 800e338:	807b      	strh	r3, [r7, #2]
 800e33a:	4613      	mov	r3, r2
 800e33c:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
 800e33e:	2300      	movs	r3, #0
 800e340:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 800e344:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 800e348:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800e34c:	4413      	add	r3, r2
 800e34e:	330e      	adds	r3, #14
 800e350:	2b28      	cmp	r3, #40	; 0x28
 800e352:	d901      	bls.n	800e358 <aci_gap_set_discoverable+0x38>
    return BLE_STATUS_INVALID_PARAMS;
 800e354:	2342      	movs	r3, #66	; 0x42
 800e356:	e0ce      	b.n	800e4f6 <aci_gap_set_discoverable+0x1d6>

  buffer[indx] = AdvType;
 800e358:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e35c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800e360:	4413      	add	r3, r2
 800e362:	79fa      	ldrb	r2, [r7, #7]
 800e364:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800e368:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e36c:	3301      	adds	r3, #1
 800e36e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  AdvIntervMin = htobs(AdvIntervMin);
 800e372:	88bb      	ldrh	r3, [r7, #4]
 800e374:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 800e376:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e37a:	f107 0208 	add.w	r2, r7, #8
 800e37e:	4413      	add	r3, r2
 800e380:	88ba      	ldrh	r2, [r7, #4]
 800e382:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 800e384:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e388:	3302      	adds	r3, #2
 800e38a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  AdvIntervMax = htobs(AdvIntervMax);
 800e38e:	887b      	ldrh	r3, [r7, #2]
 800e390:	807b      	strh	r3, [r7, #2]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 800e392:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e396:	f107 0208 	add.w	r2, r7, #8
 800e39a:	4413      	add	r3, r2
 800e39c:	887a      	ldrh	r2, [r7, #2]
 800e39e:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 800e3a0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e3a4:	3302      	adds	r3, #2
 800e3a6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = OwnAddrType;
 800e3aa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e3ae:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800e3b2:	4413      	add	r3, r2
 800e3b4:	79ba      	ldrb	r2, [r7, #6]
 800e3b6:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800e3ba:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e3be:	3301      	adds	r3, #1
 800e3c0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = AdvFilterPolicy;
 800e3c4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e3c8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800e3cc:	4413      	add	r3, r2
 800e3ce:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 800e3d2:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800e3d6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e3da:	3301      	adds	r3, #1
 800e3dc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = LocalNameLen;
 800e3e0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e3e4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800e3e8:	4413      	add	r3, r2
 800e3ea:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 800e3ee:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800e3f2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e3f6:	3301      	adds	r3, #1
 800e3f8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 800e3fc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e400:	f107 0208 	add.w	r2, r7, #8
 800e404:	4413      	add	r3, r2
 800e406:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 800e40a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e40c:	4618      	mov	r0, r3
 800e40e:	f00b ffef 	bl	801a3f0 <memcpy>
  indx +=  LocalNameLen;
 800e412:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800e416:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800e41a:	4413      	add	r3, r2
 800e41c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  buffer[indx] = ServiceUUIDLen;
 800e420:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e424:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800e428:	4413      	add	r3, r2
 800e42a:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 800e42e:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800e432:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e436:	3301      	adds	r3, #1
 800e438:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 800e43c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e440:	f107 0208 	add.w	r2, r7, #8
 800e444:	4413      	add	r3, r2
 800e446:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 800e44a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800e44c:	4618      	mov	r0, r3
 800e44e:	f00b ffcf 	bl	801a3f0 <memcpy>
  indx +=  ServiceUUIDLen;  
 800e452:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800e456:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800e45a:	4413      	add	r3, r2
 800e45c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
 800e460:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800e464:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 800e468:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e46c:	f107 0208 	add.w	r2, r7, #8
 800e470:	4413      	add	r3, r2
 800e472:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 800e476:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 800e478:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e47c:	3302      	adds	r3, #2
 800e47e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
 800e482:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800e486:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 800e48a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e48e:	f107 0208 	add.w	r2, r7, #8
 800e492:	4413      	add	r3, r2
 800e494:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 800e498:	801a      	strh	r2, [r3, #0]
  indx +=  2;    
 800e49a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e49e:	3302      	adds	r3, #2
 800e4a0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800e4a4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800e4a8:	2218      	movs	r2, #24
 800e4aa:	2100      	movs	r1, #0
 800e4ac:	4618      	mov	r0, r3
 800e4ae:	f00b ffaa 	bl	801a406 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800e4b2:	233f      	movs	r3, #63	; 0x3f
 800e4b4:	86bb      	strh	r3, [r7, #52]	; 0x34
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 800e4b6:	2383      	movs	r3, #131	; 0x83
 800e4b8:	86fb      	strh	r3, [r7, #54]	; 0x36
  rq.cparam = (void *)buffer;
 800e4ba:	f107 0308 	add.w	r3, r7, #8
 800e4be:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.clen = indx;
 800e4c0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e4c4:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rparam = &status;
 800e4c6:	f107 0333 	add.w	r3, r7, #51	; 0x33
 800e4ca:	647b      	str	r3, [r7, #68]	; 0x44
  rq.rlen = 1;
 800e4cc:	2301      	movs	r3, #1
 800e4ce:	64bb      	str	r3, [r7, #72]	; 0x48

  if (hci_send_req(&rq, FALSE) < 0)
 800e4d0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800e4d4:	2100      	movs	r1, #0
 800e4d6:	4618      	mov	r0, r3
 800e4d8:	f000 fd68 	bl	800efac <hci_send_req>
 800e4dc:	4603      	mov	r3, r0
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	da01      	bge.n	800e4e6 <aci_gap_set_discoverable+0x1c6>
    return BLE_STATUS_TIMEOUT;
 800e4e2:	23ff      	movs	r3, #255	; 0xff
 800e4e4:	e007      	b.n	800e4f6 <aci_gap_set_discoverable+0x1d6>

  if (status) {
 800e4e6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d002      	beq.n	800e4f4 <aci_gap_set_discoverable+0x1d4>
    return status;
 800e4ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e4f2:	e000      	b.n	800e4f6 <aci_gap_set_discoverable+0x1d6>
  }

  return 0;
 800e4f4:	2300      	movs	r3, #0
}
 800e4f6:	4618      	mov	r0, r3
 800e4f8:	3754      	adds	r7, #84	; 0x54
 800e4fa:	46bd      	mov	sp, r7
 800e4fc:	bd90      	pop	{r4, r7, pc}

0800e4fe <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 800e4fe:	b590      	push	{r4, r7, lr}
 800e500:	b091      	sub	sp, #68	; 0x44
 800e502:	af00      	add	r7, sp, #0
 800e504:	603a      	str	r2, [r7, #0]
 800e506:	461a      	mov	r2, r3
 800e508:	4603      	mov	r3, r0
 800e50a:	71fb      	strb	r3, [r7, #7]
 800e50c:	460b      	mov	r3, r1
 800e50e:	71bb      	strb	r3, [r7, #6]
 800e510:	4613      	mov	r3, r2
 800e512:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 800e514:	79fb      	ldrb	r3, [r7, #7]
 800e516:	733b      	strb	r3, [r7, #12]
  cp.oob_enable = oob_enable;
 800e518:	79bb      	ldrb	r3, [r7, #6]
 800e51a:	737b      	strb	r3, [r7, #13]
  BLUENRG_memcpy(cp.oob_data, oob_data, 16);
 800e51c:	683a      	ldr	r2, [r7, #0]
 800e51e:	f107 030e 	add.w	r3, r7, #14
 800e522:	6814      	ldr	r4, [r2, #0]
 800e524:	6850      	ldr	r0, [r2, #4]
 800e526:	6891      	ldr	r1, [r2, #8]
 800e528:	68d2      	ldr	r2, [r2, #12]
 800e52a:	601c      	str	r4, [r3, #0]
 800e52c:	6058      	str	r0, [r3, #4]
 800e52e:	6099      	str	r1, [r3, #8]
 800e530:	60da      	str	r2, [r3, #12]
  cp.min_encryption_key_size = min_encryption_key_size;
 800e532:	797b      	ldrb	r3, [r7, #5]
 800e534:	77bb      	strb	r3, [r7, #30]
  cp.max_encryption_key_size = max_encryption_key_size;
 800e536:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800e53a:	77fb      	strb	r3, [r7, #31]
  cp.use_fixed_pin = use_fixed_pin;
 800e53c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800e540:	f887 3020 	strb.w	r3, [r7, #32]
  cp.fixed_pin = htobl(fixed_pin);
 800e544:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e546:	f8c7 3021 	str.w	r3, [r7, #33]	; 0x21
  cp.bonding_mode = bonding_mode;
 800e54a:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800e54e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800e552:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e556:	2218      	movs	r2, #24
 800e558:	2100      	movs	r1, #0
 800e55a:	4618      	mov	r0, r3
 800e55c:	f00b ff53 	bl	801a406 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800e560:	233f      	movs	r3, #63	; 0x3f
 800e562:	853b      	strh	r3, [r7, #40]	; 0x28
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
 800e564:	2386      	movs	r3, #134	; 0x86
 800e566:	857b      	strh	r3, [r7, #42]	; 0x2a
  rq.cparam = &cp;
 800e568:	f107 030c 	add.w	r3, r7, #12
 800e56c:	633b      	str	r3, [r7, #48]	; 0x30
  rq.clen = sizeof(cp);
 800e56e:	231a      	movs	r3, #26
 800e570:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rparam = &status;
 800e572:	f107 030b 	add.w	r3, r7, #11
 800e576:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rlen = 1;
 800e578:	2301      	movs	r3, #1
 800e57a:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (hci_send_req(&rq, FALSE) < 0)
 800e57c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e580:	2100      	movs	r1, #0
 800e582:	4618      	mov	r0, r3
 800e584:	f000 fd12 	bl	800efac <hci_send_req>
 800e588:	4603      	mov	r3, r0
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	da01      	bge.n	800e592 <aci_gap_set_auth_requirement+0x94>
    return BLE_STATUS_TIMEOUT;
 800e58e:	23ff      	movs	r3, #255	; 0xff
 800e590:	e005      	b.n	800e59e <aci_gap_set_auth_requirement+0xa0>

  if (status) {
 800e592:	7afb      	ldrb	r3, [r7, #11]
 800e594:	2b00      	cmp	r3, #0
 800e596:	d001      	beq.n	800e59c <aci_gap_set_auth_requirement+0x9e>
    return status;
 800e598:	7afb      	ldrb	r3, [r7, #11]
 800e59a:	e000      	b.n	800e59e <aci_gap_set_auth_requirement+0xa0>
  }
    
  return 0;
 800e59c:	2300      	movs	r3, #0
}
 800e59e:	4618      	mov	r0, r3
 800e5a0:	3744      	adds	r7, #68	; 0x44
 800e5a2:	46bd      	mov	sp, r7
 800e5a4:	bd90      	pop	{r4, r7, pc}

0800e5a6 <aci_gap_update_adv_data>:
  return status;

}

tBleStatus aci_gap_update_adv_data(uint8_t AdvLen, const uint8_t *AdvData)
{
 800e5a6:	b580      	push	{r7, lr}
 800e5a8:	b092      	sub	sp, #72	; 0x48
 800e5aa:	af00      	add	r7, sp, #0
 800e5ac:	4603      	mov	r3, r0
 800e5ae:	6039      	str	r1, [r7, #0]
 800e5b0:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[32];
  uint8_t indx = 0;
 800e5b2:	2300      	movs	r3, #0
 800e5b4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  if (AdvLen > (sizeof(buffer)-1))
 800e5b8:	79fb      	ldrb	r3, [r7, #7]
 800e5ba:	2b1f      	cmp	r3, #31
 800e5bc:	d901      	bls.n	800e5c2 <aci_gap_update_adv_data+0x1c>
    return BLE_STATUS_INVALID_PARAMS;
 800e5be:	2342      	movs	r3, #66	; 0x42
 800e5c0:	e03f      	b.n	800e642 <aci_gap_update_adv_data+0x9c>

  buffer[indx] = AdvLen;
 800e5c2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800e5c6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800e5ca:	4413      	add	r3, r2
 800e5cc:	79fa      	ldrb	r2, [r7, #7]
 800e5ce:	f803 2c40 	strb.w	r2, [r3, #-64]
  indx++;
 800e5d2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800e5d6:	3301      	adds	r3, #1
 800e5d8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  BLUENRG_memcpy(buffer + indx, AdvData, AdvLen);
 800e5dc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800e5e0:	f107 0208 	add.w	r2, r7, #8
 800e5e4:	4413      	add	r3, r2
 800e5e6:	79fa      	ldrb	r2, [r7, #7]
 800e5e8:	6839      	ldr	r1, [r7, #0]
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	f00b ff00 	bl	801a3f0 <memcpy>
  indx +=  AdvLen;
 800e5f0:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800e5f4:	79fb      	ldrb	r3, [r7, #7]
 800e5f6:	4413      	add	r3, r2
 800e5f8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800e5fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e600:	2218      	movs	r2, #24
 800e602:	2100      	movs	r1, #0
 800e604:	4618      	mov	r0, r3
 800e606:	f00b fefe 	bl	801a406 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800e60a:	233f      	movs	r3, #63	; 0x3f
 800e60c:	85bb      	strh	r3, [r7, #44]	; 0x2c
  rq.ocf = OCF_GAP_UPDATE_ADV_DATA;
 800e60e:	238e      	movs	r3, #142	; 0x8e
 800e610:	85fb      	strh	r3, [r7, #46]	; 0x2e
  rq.cparam = (void *)buffer;
 800e612:	f107 0308 	add.w	r3, r7, #8
 800e616:	637b      	str	r3, [r7, #52]	; 0x34
  rq.clen = indx;
 800e618:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800e61c:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rparam = &status;
 800e61e:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800e622:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rlen = 1;
 800e624:	2301      	movs	r3, #1
 800e626:	643b      	str	r3, [r7, #64]	; 0x40
    
  if (hci_send_req(&rq, FALSE) < 0)
 800e628:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e62c:	2100      	movs	r1, #0
 800e62e:	4618      	mov	r0, r3
 800e630:	f000 fcbc 	bl	800efac <hci_send_req>
 800e634:	4603      	mov	r3, r0
 800e636:	2b00      	cmp	r3, #0
 800e638:	da01      	bge.n	800e63e <aci_gap_update_adv_data+0x98>
    return BLE_STATUS_TIMEOUT;
 800e63a:	23ff      	movs	r3, #255	; 0xff
 800e63c:	e001      	b.n	800e642 <aci_gap_update_adv_data+0x9c>
    
  return status;
 800e63e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800e642:	4618      	mov	r0, r3
 800e644:	3748      	adds	r7, #72	; 0x48
 800e646:	46bd      	mov	sp, r7
 800e648:	bd80      	pop	{r7, pc}

0800e64a <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 800e64a:	b580      	push	{r7, lr}
 800e64c:	b088      	sub	sp, #32
 800e64e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800e650:	f107 0308 	add.w	r3, r7, #8
 800e654:	2218      	movs	r2, #24
 800e656:	2100      	movs	r1, #0
 800e658:	4618      	mov	r0, r3
 800e65a:	f00b fed4 	bl	801a406 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800e65e:	233f      	movs	r3, #63	; 0x3f
 800e660:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_GATT_INIT;
 800e662:	f240 1301 	movw	r3, #257	; 0x101
 800e666:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800e668:	1dfb      	adds	r3, r7, #7
 800e66a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800e66c:	2301      	movs	r3, #1
 800e66e:	61fb      	str	r3, [r7, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 800e670:	f107 0308 	add.w	r3, r7, #8
 800e674:	2100      	movs	r1, #0
 800e676:	4618      	mov	r0, r3
 800e678:	f000 fc98 	bl	800efac <hci_send_req>
 800e67c:	4603      	mov	r3, r0
 800e67e:	2b00      	cmp	r3, #0
 800e680:	da01      	bge.n	800e686 <aci_gatt_init+0x3c>
    return BLE_STATUS_TIMEOUT;
 800e682:	23ff      	movs	r3, #255	; 0xff
 800e684:	e000      	b.n	800e688 <aci_gatt_init+0x3e>

  return status;
 800e686:	79fb      	ldrb	r3, [r7, #7]
}
 800e688:	4618      	mov	r0, r3
 800e68a:	3720      	adds	r7, #32
 800e68c:	46bd      	mov	sp, r7
 800e68e:	bd80      	pop	{r7, pc}

0800e690 <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 800e690:	b580      	push	{r7, lr}
 800e692:	b090      	sub	sp, #64	; 0x40
 800e694:	af00      	add	r7, sp, #0
 800e696:	6039      	str	r1, [r7, #0]
 800e698:	4611      	mov	r1, r2
 800e69a:	461a      	mov	r2, r3
 800e69c:	4603      	mov	r3, r0
 800e69e:	71fb      	strb	r3, [r7, #7]
 800e6a0:	460b      	mov	r3, r1
 800e6a2:	71bb      	strb	r3, [r7, #6]
 800e6a4:	4613      	mov	r3, r2
 800e6a6:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
 800e6a8:	2300      	movs	r3, #0
 800e6aa:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_uuid_type;
 800e6ae:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800e6b2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800e6b6:	4413      	add	r3, r2
 800e6b8:	79fa      	ldrb	r2, [r7, #7]
 800e6ba:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 800e6be:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800e6c2:	3301      	adds	r3, #1
 800e6c4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  if(service_uuid_type == UUID_TYPE_16){
 800e6c8:	79fb      	ldrb	r3, [r7, #7]
 800e6ca:	2b01      	cmp	r3, #1
 800e6cc:	d103      	bne.n	800e6d6 <aci_gatt_add_serv+0x46>
    uuid_len = 2;
 800e6ce:	2302      	movs	r3, #2
 800e6d0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800e6d4:	e002      	b.n	800e6dc <aci_gatt_add_serv+0x4c>
  }
  else {
    uuid_len = 16;
 800e6d6:	2310      	movs	r3, #16
 800e6d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 800e6dc:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800e6e0:	f107 020c 	add.w	r2, r7, #12
 800e6e4:	4413      	add	r3, r2
 800e6e6:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800e6ea:	6839      	ldr	r1, [r7, #0]
 800e6ec:	4618      	mov	r0, r3
 800e6ee:	f00b fe7f 	bl	801a3f0 <memcpy>
  indx +=  uuid_len;
 800e6f2:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 800e6f6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e6fa:	4413      	add	r3, r2
 800e6fc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_type;
 800e700:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800e704:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800e708:	4413      	add	r3, r2
 800e70a:	79ba      	ldrb	r2, [r7, #6]
 800e70c:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 800e710:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800e714:	3301      	adds	r3, #1
 800e716:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = max_attr_records;
 800e71a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800e71e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800e722:	4413      	add	r3, r2
 800e724:	797a      	ldrb	r2, [r7, #5]
 800e726:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 800e72a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800e72e:	3301      	adds	r3, #1
 800e730:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800e734:	f107 0320 	add.w	r3, r7, #32
 800e738:	2203      	movs	r2, #3
 800e73a:	2100      	movs	r1, #0
 800e73c:	4618      	mov	r0, r3
 800e73e:	f00b fe62 	bl	801a406 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800e742:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e746:	2218      	movs	r2, #24
 800e748:	2100      	movs	r1, #0
 800e74a:	4618      	mov	r0, r3
 800e74c:	f00b fe5b 	bl	801a406 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800e750:	233f      	movs	r3, #63	; 0x3f
 800e752:	84bb      	strh	r3, [r7, #36]	; 0x24
  rq.ocf = OCF_GATT_ADD_SERV;
 800e754:	f44f 7381 	mov.w	r3, #258	; 0x102
 800e758:	84fb      	strh	r3, [r7, #38]	; 0x26
  rq.cparam = (void *)buffer;
 800e75a:	f107 030c 	add.w	r3, r7, #12
 800e75e:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.clen = indx;
 800e760:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800e764:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rparam = &resp;
 800e766:	f107 0320 	add.w	r3, r7, #32
 800e76a:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 800e76c:	2303      	movs	r3, #3
 800e76e:	63bb      	str	r3, [r7, #56]	; 0x38

  if (hci_send_req(&rq, FALSE) < 0)
 800e770:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e774:	2100      	movs	r1, #0
 800e776:	4618      	mov	r0, r3
 800e778:	f000 fc18 	bl	800efac <hci_send_req>
 800e77c:	4603      	mov	r3, r0
 800e77e:	2b00      	cmp	r3, #0
 800e780:	da01      	bge.n	800e786 <aci_gatt_add_serv+0xf6>
    return BLE_STATUS_TIMEOUT;
 800e782:	23ff      	movs	r3, #255	; 0xff
 800e784:	e00c      	b.n	800e7a0 <aci_gatt_add_serv+0x110>

  if (resp.status) {
 800e786:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d002      	beq.n	800e794 <aci_gatt_add_serv+0x104>
    return resp.status;
 800e78e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e792:	e005      	b.n	800e7a0 <aci_gatt_add_serv+0x110>
  }
    
  *serviceHandle = btohs(resp.handle);
 800e794:	f8b7 3021 	ldrh.w	r3, [r7, #33]	; 0x21
 800e798:	b29a      	uxth	r2, r3
 800e79a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e79c:	801a      	strh	r2, [r3, #0]

  return 0;
 800e79e:	2300      	movs	r3, #0
}
 800e7a0:	4618      	mov	r0, r3
 800e7a2:	3740      	adds	r7, #64	; 0x40
 800e7a4:	46bd      	mov	sp, r7
 800e7a6:	bd80      	pop	{r7, pc}

0800e7a8 <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 800e7a8:	b580      	push	{r7, lr}
 800e7aa:	b092      	sub	sp, #72	; 0x48
 800e7ac:	af00      	add	r7, sp, #0
 800e7ae:	603a      	str	r2, [r7, #0]
 800e7b0:	461a      	mov	r2, r3
 800e7b2:	4603      	mov	r3, r0
 800e7b4:	80fb      	strh	r3, [r7, #6]
 800e7b6:	460b      	mov	r3, r1
 800e7b8:	717b      	strb	r3, [r7, #5]
 800e7ba:	4613      	mov	r3, r2
 800e7bc:	713b      	strb	r3, [r7, #4]
  struct hci_request rq;
  gatt_add_serv_rp resp;
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
 800e7be:	2300      	movs	r3, #0
 800e7c0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  serviceHandle = htobs(serviceHandle);
 800e7c4:	88fb      	ldrh	r3, [r7, #6]
 800e7c6:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 800e7c8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800e7cc:	f107 020c 	add.w	r2, r7, #12
 800e7d0:	4413      	add	r3, r2
 800e7d2:	88fa      	ldrh	r2, [r7, #6]
 800e7d4:	801a      	strh	r2, [r3, #0]
  indx += 2;
 800e7d6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800e7da:	3302      	adds	r3, #2
 800e7dc:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charUuidType;
 800e7e0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800e7e4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800e7e8:	4413      	add	r3, r2
 800e7ea:	797a      	ldrb	r2, [r7, #5]
 800e7ec:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800e7f0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800e7f4:	3301      	adds	r3, #1
 800e7f6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  if(charUuidType == UUID_TYPE_16){
 800e7fa:	797b      	ldrb	r3, [r7, #5]
 800e7fc:	2b01      	cmp	r3, #1
 800e7fe:	d103      	bne.n	800e808 <aci_gatt_add_char+0x60>
    uuid_len = 2;
 800e800:	2302      	movs	r3, #2
 800e802:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800e806:	e002      	b.n	800e80e <aci_gatt_add_char+0x66>
  }
  else {
    uuid_len = 16;
 800e808:	2310      	movs	r3, #16
 800e80a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 800e80e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800e812:	f107 020c 	add.w	r2, r7, #12
 800e816:	4413      	add	r3, r2
 800e818:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800e81c:	6839      	ldr	r1, [r7, #0]
 800e81e:	4618      	mov	r0, r3
 800e820:	f00b fde6 	bl	801a3f0 <memcpy>
  indx +=  uuid_len;
 800e824:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 800e828:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800e82c:	4413      	add	r3, r2
 800e82e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charValueLen;
 800e832:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800e836:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800e83a:	4413      	add	r3, r2
 800e83c:	793a      	ldrb	r2, [r7, #4]
 800e83e:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800e842:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800e846:	3301      	adds	r3, #1
 800e848:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charProperties;
 800e84c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800e850:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800e854:	4413      	add	r3, r2
 800e856:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800e85a:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800e85e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800e862:	3301      	adds	r3, #1
 800e864:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = secPermissions;
 800e868:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800e86c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800e870:	4413      	add	r3, r2
 800e872:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 800e876:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800e87a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800e87e:	3301      	adds	r3, #1
 800e880:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = gattEvtMask;
 800e884:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800e888:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800e88c:	4413      	add	r3, r2
 800e88e:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800e892:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800e896:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800e89a:	3301      	adds	r3, #1
 800e89c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = encryKeySize;
 800e8a0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800e8a4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800e8a8:	4413      	add	r3, r2
 800e8aa:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 800e8ae:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800e8b2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800e8b6:	3301      	adds	r3, #1
 800e8b8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = isVariable;
 800e8bc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800e8c0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800e8c4:	4413      	add	r3, r2
 800e8c6:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 800e8ca:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800e8ce:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800e8d2:	3301      	adds	r3, #1
 800e8d4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800e8d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e8dc:	2203      	movs	r2, #3
 800e8de:	2100      	movs	r1, #0
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	f00b fd90 	bl	801a406 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800e8e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e8ea:	2218      	movs	r2, #24
 800e8ec:	2100      	movs	r1, #0
 800e8ee:	4618      	mov	r0, r3
 800e8f0:	f00b fd89 	bl	801a406 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800e8f4:	233f      	movs	r3, #63	; 0x3f
 800e8f6:	85bb      	strh	r3, [r7, #44]	; 0x2c
  rq.ocf = OCF_GATT_ADD_CHAR;
 800e8f8:	f44f 7382 	mov.w	r3, #260	; 0x104
 800e8fc:	85fb      	strh	r3, [r7, #46]	; 0x2e
  rq.cparam = (void *)buffer;
 800e8fe:	f107 030c 	add.w	r3, r7, #12
 800e902:	637b      	str	r3, [r7, #52]	; 0x34
  rq.clen = indx;
 800e904:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800e908:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rparam = &resp;
 800e90a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e90e:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 800e910:	2303      	movs	r3, #3
 800e912:	643b      	str	r3, [r7, #64]	; 0x40

  if (hci_send_req(&rq, FALSE) < 0)
 800e914:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e918:	2100      	movs	r1, #0
 800e91a:	4618      	mov	r0, r3
 800e91c:	f000 fb46 	bl	800efac <hci_send_req>
 800e920:	4603      	mov	r3, r0
 800e922:	2b00      	cmp	r3, #0
 800e924:	da01      	bge.n	800e92a <aci_gatt_add_char+0x182>
    return BLE_STATUS_TIMEOUT;
 800e926:	23ff      	movs	r3, #255	; 0xff
 800e928:	e00c      	b.n	800e944 <aci_gatt_add_char+0x19c>

  if (resp.status) {
 800e92a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d002      	beq.n	800e938 <aci_gatt_add_char+0x190>
    return resp.status;
 800e932:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e936:	e005      	b.n	800e944 <aci_gatt_add_char+0x19c>
  }
    
  *charHandle = btohs(resp.handle);
 800e938:	f8b7 3029 	ldrh.w	r3, [r7, #41]	; 0x29
 800e93c:	b29a      	uxth	r2, r3
 800e93e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e940:	801a      	strh	r2, [r3, #0]

  return 0;
 800e942:	2300      	movs	r3, #0
}
 800e944:	4618      	mov	r0, r3
 800e946:	3748      	adds	r7, #72	; 0x48
 800e948:	46bd      	mov	sp, r7
 800e94a:	bd80      	pop	{r7, pc}

0800e94c <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
                                      const void *charValue)
{
 800e94c:	b590      	push	{r4, r7, lr}
 800e94e:	b0ab      	sub	sp, #172	; 0xac
 800e950:	af00      	add	r7, sp, #0
 800e952:	4604      	mov	r4, r0
 800e954:	4608      	mov	r0, r1
 800e956:	4611      	mov	r1, r2
 800e958:	461a      	mov	r2, r3
 800e95a:	4623      	mov	r3, r4
 800e95c:	80fb      	strh	r3, [r7, #6]
 800e95e:	4603      	mov	r3, r0
 800e960:	80bb      	strh	r3, [r7, #4]
 800e962:	460b      	mov	r3, r1
 800e964:	70fb      	strb	r3, [r7, #3]
 800e966:	4613      	mov	r3, r2
 800e968:	70bb      	strb	r3, [r7, #2]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 800e96a:	2300      	movs	r3, #0
 800e96c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 800e970:	78bb      	ldrb	r3, [r7, #2]
 800e972:	3306      	adds	r3, #6
 800e974:	2b80      	cmp	r3, #128	; 0x80
 800e976:	dd01      	ble.n	800e97c <aci_gatt_update_char_value+0x30>
    return BLE_STATUS_INVALID_PARAMS;
 800e978:	2342      	movs	r3, #66	; 0x42
 800e97a:	e076      	b.n	800ea6a <aci_gatt_update_char_value+0x11e>

  servHandle = htobs(servHandle);
 800e97c:	88fb      	ldrh	r3, [r7, #6]
 800e97e:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 800e980:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800e984:	f107 0208 	add.w	r2, r7, #8
 800e988:	4413      	add	r3, r2
 800e98a:	88fa      	ldrh	r2, [r7, #6]
 800e98c:	801a      	strh	r2, [r3, #0]
  indx += 2;
 800e98e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800e992:	3302      	adds	r3, #2
 800e994:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  charHandle = htobs(charHandle);
 800e998:	88bb      	ldrh	r3, [r7, #4]
 800e99a:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 800e99c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800e9a0:	f107 0208 	add.w	r2, r7, #8
 800e9a4:	4413      	add	r3, r2
 800e9a6:	88ba      	ldrh	r2, [r7, #4]
 800e9a8:	801a      	strh	r2, [r3, #0]
  indx += 2;
 800e9aa:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800e9ae:	3302      	adds	r3, #2
 800e9b0:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = charValOffset;
 800e9b4:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800e9b8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800e9bc:	4413      	add	r3, r2
 800e9be:	78fa      	ldrb	r2, [r7, #3]
 800e9c0:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 800e9c4:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800e9c8:	3301      	adds	r3, #1
 800e9ca:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = charValueLen;
 800e9ce:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800e9d2:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800e9d6:	4413      	add	r3, r2
 800e9d8:	78ba      	ldrb	r2, [r7, #2]
 800e9da:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 800e9de:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800e9e2:	3301      	adds	r3, #1
 800e9e4:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 800e9e8:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800e9ec:	f107 0208 	add.w	r2, r7, #8
 800e9f0:	4413      	add	r3, r2
 800e9f2:	78ba      	ldrb	r2, [r7, #2]
 800e9f4:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800e9f8:	4618      	mov	r0, r3
 800e9fa:	f00b fcf9 	bl	801a3f0 <memcpy>
  indx +=  charValueLen;
 800e9fe:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 800ea02:	78bb      	ldrb	r3, [r7, #2]
 800ea04:	4413      	add	r3, r2
 800ea06:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800ea0a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800ea0e:	2218      	movs	r2, #24
 800ea10:	2100      	movs	r1, #0
 800ea12:	4618      	mov	r0, r3
 800ea14:	f00b fcf7 	bl	801a406 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800ea18:	233f      	movs	r3, #63	; 0x3f
 800ea1a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 800ea1e:	f44f 7383 	mov.w	r3, #262	; 0x106
 800ea22:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  rq.cparam = (void *)buffer;
 800ea26:	f107 0308 	add.w	r3, r7, #8
 800ea2a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  rq.clen = indx;
 800ea2e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800ea32:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  rq.rparam = &status;
 800ea36:	f107 038b 	add.w	r3, r7, #139	; 0x8b
 800ea3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  rq.rlen = 1;
 800ea3e:	2301      	movs	r3, #1
 800ea40:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 800ea44:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800ea48:	2100      	movs	r1, #0
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	f000 faae 	bl	800efac <hci_send_req>
 800ea50:	4603      	mov	r3, r0
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	da01      	bge.n	800ea5a <aci_gatt_update_char_value+0x10e>
    return BLE_STATUS_TIMEOUT;
 800ea56:	23ff      	movs	r3, #255	; 0xff
 800ea58:	e007      	b.n	800ea6a <aci_gatt_update_char_value+0x11e>

  if (status) {
 800ea5a:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d002      	beq.n	800ea68 <aci_gatt_update_char_value+0x11c>
    return status;
 800ea62:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800ea66:	e000      	b.n	800ea6a <aci_gatt_update_char_value+0x11e>
  }

  return 0;
 800ea68:	2300      	movs	r3, #0
}
 800ea6a:	4618      	mov	r0, r3
 800ea6c:	37ac      	adds	r7, #172	; 0xac
 800ea6e:	46bd      	mov	sp, r7
 800ea70:	bd90      	pop	{r4, r7, pc}

0800ea72 <aci_gatt_allow_read>:

  return 0;
}

tBleStatus aci_gatt_allow_read(uint16_t conn_handle)
{
 800ea72:	b580      	push	{r7, lr}
 800ea74:	b08a      	sub	sp, #40	; 0x28
 800ea76:	af00      	add	r7, sp, #0
 800ea78:	4603      	mov	r3, r0
 800ea7a:	80fb      	strh	r3, [r7, #6]
    struct hci_request rq;
    gatt_allow_read_cp cp;
    uint8_t status;
    
    cp.conn_handle = htobs(conn_handle);
 800ea7c:	88fb      	ldrh	r3, [r7, #6]
 800ea7e:	81bb      	strh	r3, [r7, #12]

    BLUENRG_memset(&rq, 0, sizeof(rq));
 800ea80:	f107 0310 	add.w	r3, r7, #16
 800ea84:	2218      	movs	r2, #24
 800ea86:	2100      	movs	r1, #0
 800ea88:	4618      	mov	r0, r3
 800ea8a:	f00b fcbc 	bl	801a406 <memset>
    rq.ogf = OGF_VENDOR_CMD;
 800ea8e:	233f      	movs	r3, #63	; 0x3f
 800ea90:	823b      	strh	r3, [r7, #16]
    rq.ocf = OCF_GATT_ALLOW_READ;
 800ea92:	f240 1327 	movw	r3, #295	; 0x127
 800ea96:	827b      	strh	r3, [r7, #18]
    rq.cparam = &cp;
 800ea98:	f107 030c 	add.w	r3, r7, #12
 800ea9c:	61bb      	str	r3, [r7, #24]
    rq.clen = GATT_ALLOW_READ_CP_SIZE;
 800ea9e:	2302      	movs	r3, #2
 800eaa0:	61fb      	str	r3, [r7, #28]
    rq.rparam = &status;
 800eaa2:	f107 030b 	add.w	r3, r7, #11
 800eaa6:	623b      	str	r3, [r7, #32]
    rq.rlen = 1;
 800eaa8:	2301      	movs	r3, #1
 800eaaa:	627b      	str	r3, [r7, #36]	; 0x24

    if (hci_send_req(&rq, FALSE) < 0)
 800eaac:	f107 0310 	add.w	r3, r7, #16
 800eab0:	2100      	movs	r1, #0
 800eab2:	4618      	mov	r0, r3
 800eab4:	f000 fa7a 	bl	800efac <hci_send_req>
 800eab8:	4603      	mov	r3, r0
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	da01      	bge.n	800eac2 <aci_gatt_allow_read+0x50>
      return BLE_STATUS_TIMEOUT;
 800eabe:	23ff      	movs	r3, #255	; 0xff
 800eac0:	e000      	b.n	800eac4 <aci_gatt_allow_read+0x52>

    return status;
 800eac2:	7afb      	ldrb	r3, [r7, #11]
}
 800eac4:	4618      	mov	r0, r3
 800eac6:	3728      	adds	r7, #40	; 0x28
 800eac8:	46bd      	mov	sp, r7
 800eaca:	bd80      	pop	{r7, pc}

0800eacc <aci_hal_read_config_data>:

  return status;
}

tBleStatus aci_hal_read_config_data(uint8_t offset, uint16_t data_len, uint8_t *data_len_out_p, uint8_t *data)
{
 800eacc:	b580      	push	{r7, lr}
 800eace:	b0ac      	sub	sp, #176	; 0xb0
 800ead0:	af00      	add	r7, sp, #0
 800ead2:	60ba      	str	r2, [r7, #8]
 800ead4:	607b      	str	r3, [r7, #4]
 800ead6:	4603      	mov	r3, r0
 800ead8:	73fb      	strb	r3, [r7, #15]
 800eada:	460b      	mov	r3, r1
 800eadc:	81bb      	strh	r3, [r7, #12]
  struct hci_request rq;
  hal_read_config_data_cp cp;
  hal_read_config_data_rp rp;
  
  cp.offset = offset;
 800eade:	7bfb      	ldrb	r3, [r7, #15]
 800eae0:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800eae4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800eae8:	2218      	movs	r2, #24
 800eaea:	2100      	movs	r1, #0
 800eaec:	4618      	mov	r0, r3
 800eaee:	f00b fc8a 	bl	801a406 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800eaf2:	233f      	movs	r3, #63	; 0x3f
 800eaf4:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
  rq.ocf = OCF_HAL_READ_CONFIG_DATA;
 800eaf8:	230d      	movs	r3, #13
 800eafa:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  rq.cparam = &cp;
 800eafe:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800eb02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  rq.clen = sizeof(cp);
 800eb06:	2301      	movs	r3, #1
 800eb08:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  rq.rparam = &rp;
 800eb0c:	f107 0314 	add.w	r3, r7, #20
 800eb10:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  rq.rlen = sizeof(rp);
 800eb14:	2380      	movs	r3, #128	; 0x80
 800eb16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  
  if (hci_send_req(&rq, FALSE) < 0)
 800eb1a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800eb1e:	2100      	movs	r1, #0
 800eb20:	4618      	mov	r0, r3
 800eb22:	f000 fa43 	bl	800efac <hci_send_req>
 800eb26:	4603      	mov	r3, r0
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	da01      	bge.n	800eb30 <aci_hal_read_config_data+0x64>
    return BLE_STATUS_TIMEOUT;
 800eb2c:	23ff      	movs	r3, #255	; 0xff
 800eb2e:	e01c      	b.n	800eb6a <aci_hal_read_config_data+0x9e>
  
  if(rp.status)
 800eb30:	7d3b      	ldrb	r3, [r7, #20]
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d001      	beq.n	800eb3a <aci_hal_read_config_data+0x6e>
    return rp.status;
 800eb36:	7d3b      	ldrb	r3, [r7, #20]
 800eb38:	e017      	b.n	800eb6a <aci_hal_read_config_data+0x9e>
  
  *data_len_out_p = rq.rlen-1;
 800eb3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800eb3e:	b2db      	uxtb	r3, r3
 800eb40:	3b01      	subs	r3, #1
 800eb42:	b2da      	uxtb	r2, r3
 800eb44:	68bb      	ldr	r3, [r7, #8]
 800eb46:	701a      	strb	r2, [r3, #0]
  
  BLUENRG_memcpy(data, rp.data, MIN(data_len, *data_len_out_p));
 800eb48:	68bb      	ldr	r3, [r7, #8]
 800eb4a:	781b      	ldrb	r3, [r3, #0]
 800eb4c:	b29b      	uxth	r3, r3
 800eb4e:	89ba      	ldrh	r2, [r7, #12]
 800eb50:	4293      	cmp	r3, r2
 800eb52:	bf28      	it	cs
 800eb54:	4613      	movcs	r3, r2
 800eb56:	b29b      	uxth	r3, r3
 800eb58:	461a      	mov	r2, r3
 800eb5a:	f107 0314 	add.w	r3, r7, #20
 800eb5e:	3301      	adds	r3, #1
 800eb60:	4619      	mov	r1, r3
 800eb62:	6878      	ldr	r0, [r7, #4]
 800eb64:	f00b fc44 	bl	801a3f0 <memcpy>
  
  return 0;
 800eb68:	2300      	movs	r3, #0
}
 800eb6a:	4618      	mov	r0, r3
 800eb6c:	37b0      	adds	r7, #176	; 0xb0
 800eb6e:	46bd      	mov	sp, r7
 800eb70:	bd80      	pop	{r7, pc}

0800eb72 <aci_hal_set_tx_power_level>:

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 800eb72:	b580      	push	{r7, lr}
 800eb74:	b08a      	sub	sp, #40	; 0x28
 800eb76:	af00      	add	r7, sp, #0
 800eb78:	4603      	mov	r3, r0
 800eb7a:	460a      	mov	r2, r1
 800eb7c:	71fb      	strb	r3, [r7, #7]
 800eb7e:	4613      	mov	r3, r2
 800eb80:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  hal_set_tx_power_level_cp cp;    
  uint8_t status;
    
  cp.en_high_power = en_high_power;
 800eb82:	79fb      	ldrb	r3, [r7, #7]
 800eb84:	733b      	strb	r3, [r7, #12]
  cp.pa_level = pa_level;
 800eb86:	79bb      	ldrb	r3, [r7, #6]
 800eb88:	737b      	strb	r3, [r7, #13]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800eb8a:	f107 0310 	add.w	r3, r7, #16
 800eb8e:	2218      	movs	r2, #24
 800eb90:	2100      	movs	r1, #0
 800eb92:	4618      	mov	r0, r3
 800eb94:	f00b fc37 	bl	801a406 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800eb98:	233f      	movs	r3, #63	; 0x3f
 800eb9a:	823b      	strh	r3, [r7, #16]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
 800eb9c:	230f      	movs	r3, #15
 800eb9e:	827b      	strh	r3, [r7, #18]
  rq.cparam = &cp;
 800eba0:	f107 030c 	add.w	r3, r7, #12
 800eba4:	61bb      	str	r3, [r7, #24]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 800eba6:	2302      	movs	r3, #2
 800eba8:	61fb      	str	r3, [r7, #28]
  rq.rparam = &status;
 800ebaa:	f107 030b 	add.w	r3, r7, #11
 800ebae:	623b      	str	r3, [r7, #32]
  rq.rlen = 1;
 800ebb0:	2301      	movs	r3, #1
 800ebb2:	627b      	str	r3, [r7, #36]	; 0x24

  if (hci_send_req(&rq, FALSE) < 0)
 800ebb4:	f107 0310 	add.w	r3, r7, #16
 800ebb8:	2100      	movs	r1, #0
 800ebba:	4618      	mov	r0, r3
 800ebbc:	f000 f9f6 	bl	800efac <hci_send_req>
 800ebc0:	4603      	mov	r3, r0
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	da01      	bge.n	800ebca <aci_hal_set_tx_power_level+0x58>
    return BLE_STATUS_TIMEOUT;
 800ebc6:	23ff      	movs	r3, #255	; 0xff
 800ebc8:	e000      	b.n	800ebcc <aci_hal_set_tx_power_level+0x5a>

  return status;
 800ebca:	7afb      	ldrb	r3, [r7, #11]
}
 800ebcc:	4618      	mov	r0, r3
 800ebce:	3728      	adds	r7, #40	; 0x28
 800ebd0:	46bd      	mov	sp, r7
 800ebd2:	bd80      	pop	{r7, pc}

0800ebd4 <getBlueNRGVersion>:
#include "hci.h"
#include "hci_le.h"
#include "string.h"

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 800ebd4:	b590      	push	{r4, r7, lr}
 800ebd6:	b089      	sub	sp, #36	; 0x24
 800ebd8:	af02      	add	r7, sp, #8
 800ebda:	6078      	str	r0, [r7, #4]
 800ebdc:	6039      	str	r1, [r7, #0]
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 800ebde:	f107 0410 	add.w	r4, r7, #16
 800ebe2:	f107 0215 	add.w	r2, r7, #21
 800ebe6:	f107 0112 	add.w	r1, r7, #18
 800ebea:	f107 0016 	add.w	r0, r7, #22
 800ebee:	f107 030e 	add.w	r3, r7, #14
 800ebf2:	9300      	str	r3, [sp, #0]
 800ebf4:	4623      	mov	r3, r4
 800ebf6:	f000 f853 	bl	800eca0 <hci_le_read_local_version>
 800ebfa:	4603      	mov	r3, r0
 800ebfc:	75fb      	strb	r3, [r7, #23]
				     &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 800ebfe:	7dfb      	ldrb	r3, [r7, #23]
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d126      	bne.n	800ec52 <getBlueNRGVersion+0x7e>
    *hwVersion = hci_revision >> 8;
 800ec04:	8a7b      	ldrh	r3, [r7, #18]
 800ec06:	0a1b      	lsrs	r3, r3, #8
 800ec08:	b29b      	uxth	r3, r3
 800ec0a:	b2da      	uxtb	r2, r3
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	701a      	strb	r2, [r3, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
 800ec10:	8a7b      	ldrh	r3, [r7, #18]
 800ec12:	021b      	lsls	r3, r3, #8
 800ec14:	b29a      	uxth	r2, r3
 800ec16:	683b      	ldr	r3, [r7, #0]
 800ec18:	801a      	strh	r2, [r3, #0]
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 800ec1a:	683b      	ldr	r3, [r7, #0]
 800ec1c:	881b      	ldrh	r3, [r3, #0]
 800ec1e:	b21a      	sxth	r2, r3
 800ec20:	89fb      	ldrh	r3, [r7, #14]
 800ec22:	091b      	lsrs	r3, r3, #4
 800ec24:	b29b      	uxth	r3, r3
 800ec26:	011b      	lsls	r3, r3, #4
 800ec28:	b21b      	sxth	r3, r3
 800ec2a:	b2db      	uxtb	r3, r3
 800ec2c:	b21b      	sxth	r3, r3
 800ec2e:	4313      	orrs	r3, r2
 800ec30:	b21b      	sxth	r3, r3
 800ec32:	b29a      	uxth	r2, r3
 800ec34:	683b      	ldr	r3, [r7, #0]
 800ec36:	801a      	strh	r2, [r3, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 800ec38:	683b      	ldr	r3, [r7, #0]
 800ec3a:	881b      	ldrh	r3, [r3, #0]
 800ec3c:	b21a      	sxth	r2, r3
 800ec3e:	89fb      	ldrh	r3, [r7, #14]
 800ec40:	b21b      	sxth	r3, r3
 800ec42:	f003 030f 	and.w	r3, r3, #15
 800ec46:	b21b      	sxth	r3, r3
 800ec48:	4313      	orrs	r3, r2
 800ec4a:	b21b      	sxth	r3, r3
 800ec4c:	b29a      	uxth	r2, r3
 800ec4e:	683b      	ldr	r3, [r7, #0]
 800ec50:	801a      	strh	r2, [r3, #0]
  }
  return status;
 800ec52:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec54:	4618      	mov	r0, r3
 800ec56:	371c      	adds	r7, #28
 800ec58:	46bd      	mov	sp, r7
 800ec5a:	bd90      	pop	{r4, r7, pc}

0800ec5c <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 800ec5c:	b580      	push	{r7, lr}
 800ec5e:	b088      	sub	sp, #32
 800ec60:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800ec62:	f107 0308 	add.w	r3, r7, #8
 800ec66:	2218      	movs	r2, #24
 800ec68:	2100      	movs	r1, #0
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	f00b fbcb 	bl	801a406 <memset>
  rq.ogf = OGF_HOST_CTL;
 800ec70:	2303      	movs	r3, #3
 800ec72:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_RESET;
 800ec74:	2303      	movs	r3, #3
 800ec76:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800ec78:	1dfb      	adds	r3, r7, #7
 800ec7a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800ec7c:	2301      	movs	r3, #1
 800ec7e:	61fb      	str	r3, [r7, #28]
  
  if (hci_send_req(&rq, FALSE) < 0)
 800ec80:	f107 0308 	add.w	r3, r7, #8
 800ec84:	2100      	movs	r1, #0
 800ec86:	4618      	mov	r0, r3
 800ec88:	f000 f990 	bl	800efac <hci_send_req>
 800ec8c:	4603      	mov	r3, r0
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	da01      	bge.n	800ec96 <hci_reset+0x3a>
    return BLE_STATUS_TIMEOUT;
 800ec92:	23ff      	movs	r3, #255	; 0xff
 800ec94:	e000      	b.n	800ec98 <hci_reset+0x3c>
  
  return status;  
 800ec96:	79fb      	ldrb	r3, [r7, #7]
}
 800ec98:	4618      	mov	r0, r3
 800ec9a:	3720      	adds	r7, #32
 800ec9c:	46bd      	mov	sp, r7
 800ec9e:	bd80      	pop	{r7, pc}

0800eca0 <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 800eca0:	b580      	push	{r7, lr}
 800eca2:	b08e      	sub	sp, #56	; 0x38
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	60f8      	str	r0, [r7, #12]
 800eca8:	60b9      	str	r1, [r7, #8]
 800ecaa:	607a      	str	r2, [r7, #4]
 800ecac:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  read_local_version_rp resp;
  
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800ecae:	f107 0314 	add.w	r3, r7, #20
 800ecb2:	2209      	movs	r2, #9
 800ecb4:	2100      	movs	r1, #0
 800ecb6:	4618      	mov	r0, r3
 800ecb8:	f00b fba5 	bl	801a406 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800ecbc:	f107 0320 	add.w	r3, r7, #32
 800ecc0:	2218      	movs	r2, #24
 800ecc2:	2100      	movs	r1, #0
 800ecc4:	4618      	mov	r0, r3
 800ecc6:	f00b fb9e 	bl	801a406 <memset>
  rq.ogf = OGF_INFO_PARAM;
 800ecca:	2304      	movs	r3, #4
 800eccc:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_READ_LOCAL_VERSION;
 800ecce:	2301      	movs	r3, #1
 800ecd0:	847b      	strh	r3, [r7, #34]	; 0x22
  rq.cparam = NULL;
 800ecd2:	2300      	movs	r3, #0
 800ecd4:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.clen = 0;
 800ecd6:	2300      	movs	r3, #0
 800ecd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.rparam = &resp;
 800ecda:	f107 0314 	add.w	r3, r7, #20
 800ecde:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 800ece0:	2309      	movs	r3, #9
 800ece2:	637b      	str	r3, [r7, #52]	; 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 800ece4:	f107 0320 	add.w	r3, r7, #32
 800ece8:	2100      	movs	r1, #0
 800ecea:	4618      	mov	r0, r3
 800ecec:	f000 f95e 	bl	800efac <hci_send_req>
 800ecf0:	4603      	mov	r3, r0
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	da01      	bge.n	800ecfa <hci_le_read_local_version+0x5a>
    return BLE_STATUS_TIMEOUT;
 800ecf6:	23ff      	movs	r3, #255	; 0xff
 800ecf8:	e018      	b.n	800ed2c <hci_le_read_local_version+0x8c>
  
  if (resp.status) {
 800ecfa:	7d3b      	ldrb	r3, [r7, #20]
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d001      	beq.n	800ed04 <hci_le_read_local_version+0x64>
    return resp.status;
 800ed00:	7d3b      	ldrb	r3, [r7, #20]
 800ed02:	e013      	b.n	800ed2c <hci_le_read_local_version+0x8c>
  }
  
  
  *hci_version = resp.hci_version;
 800ed04:	7d7a      	ldrb	r2, [r7, #21]
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	701a      	strb	r2, [r3, #0]
  *hci_revision =  btohs(resp.hci_revision);
 800ed0a:	8afa      	ldrh	r2, [r7, #22]
 800ed0c:	68bb      	ldr	r3, [r7, #8]
 800ed0e:	801a      	strh	r2, [r3, #0]
  *lmp_pal_version = resp.lmp_pal_version;
 800ed10:	7e3a      	ldrb	r2, [r7, #24]
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	701a      	strb	r2, [r3, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 800ed16:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 800ed1a:	b29a      	uxth	r2, r3
 800ed1c:	683b      	ldr	r3, [r7, #0]
 800ed1e:	801a      	strh	r2, [r3, #0]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 800ed20:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 800ed24:	b29a      	uxth	r2, r3
 800ed26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed28:	801a      	strh	r2, [r3, #0]
  
  return 0;
 800ed2a:	2300      	movs	r3, #0
}
 800ed2c:	4618      	mov	r0, r3
 800ed2e:	3738      	adds	r7, #56	; 0x38
 800ed30:	46bd      	mov	sp, r7
 800ed32:	bd80      	pop	{r7, pc}

0800ed34 <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 800ed34:	b580      	push	{r7, lr}
 800ed36:	b092      	sub	sp, #72	; 0x48
 800ed38:	af00      	add	r7, sp, #0
 800ed3a:	4603      	mov	r3, r0
 800ed3c:	6039      	str	r1, [r7, #0]
 800ed3e:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 800ed40:	f107 0310 	add.w	r3, r7, #16
 800ed44:	2220      	movs	r2, #32
 800ed46:	2100      	movs	r1, #0
 800ed48:	4618      	mov	r0, r3
 800ed4a:	f00b fb5c 	bl	801a406 <memset>
  scan_resp_cp.length = length;
 800ed4e:	79fb      	ldrb	r3, [r7, #7]
 800ed50:	743b      	strb	r3, [r7, #16]
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 800ed52:	79fb      	ldrb	r3, [r7, #7]
 800ed54:	2b1f      	cmp	r3, #31
 800ed56:	bf28      	it	cs
 800ed58:	231f      	movcs	r3, #31
 800ed5a:	b2db      	uxtb	r3, r3
 800ed5c:	461a      	mov	r2, r3
 800ed5e:	f107 0310 	add.w	r3, r7, #16
 800ed62:	3301      	adds	r3, #1
 800ed64:	6839      	ldr	r1, [r7, #0]
 800ed66:	4618      	mov	r0, r3
 800ed68:	f00b fb42 	bl	801a3f0 <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800ed6c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ed70:	2218      	movs	r2, #24
 800ed72:	2100      	movs	r1, #0
 800ed74:	4618      	mov	r0, r3
 800ed76:	f00b fb46 	bl	801a406 <memset>
  rq.ogf = OGF_LE_CTL;
 800ed7a:	2308      	movs	r3, #8
 800ed7c:	863b      	strh	r3, [r7, #48]	; 0x30
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
 800ed7e:	2309      	movs	r3, #9
 800ed80:	867b      	strh	r3, [r7, #50]	; 0x32
  rq.cparam = &scan_resp_cp;
 800ed82:	f107 0310 	add.w	r3, r7, #16
 800ed86:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 800ed88:	2320      	movs	r3, #32
 800ed8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rparam = &status;
 800ed8c:	f107 030f 	add.w	r3, r7, #15
 800ed90:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rlen = 1;
 800ed92:	2301      	movs	r3, #1
 800ed94:	647b      	str	r3, [r7, #68]	; 0x44
  
  if (hci_send_req(&rq, FALSE) < 0)
 800ed96:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ed9a:	2100      	movs	r1, #0
 800ed9c:	4618      	mov	r0, r3
 800ed9e:	f000 f905 	bl	800efac <hci_send_req>
 800eda2:	4603      	mov	r3, r0
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	da01      	bge.n	800edac <hci_le_set_scan_resp_data+0x78>
    return BLE_STATUS_TIMEOUT;
 800eda8:	23ff      	movs	r3, #255	; 0xff
 800edaa:	e000      	b.n	800edae <hci_le_set_scan_resp_data+0x7a>
  
  return status;
 800edac:	7bfb      	ldrb	r3, [r7, #15]
}
 800edae:	4618      	mov	r0, r3
 800edb0:	3748      	adds	r7, #72	; 0x48
 800edb2:	46bd      	mov	sp, r7
 800edb4:	bd80      	pop	{r7, pc}

0800edb6 <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 800edb6:	b480      	push	{r7}
 800edb8:	b085      	sub	sp, #20
 800edba:	af00      	add	r7, sp, #0
 800edbc:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	3308      	adds	r3, #8
 800edc2:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	781b      	ldrb	r3, [r3, #0]
 800edc8:	2b04      	cmp	r3, #4
 800edca:	d001      	beq.n	800edd0 <verify_packet+0x1a>
    return 1; /* Incorrect type */
 800edcc:	2301      	movs	r3, #1
 800edce:	e00c      	b.n	800edea <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	3302      	adds	r3, #2
 800edd4:	781b      	ldrb	r3, [r3, #0]
 800edd6:	461a      	mov	r2, r3
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800edde:	3b03      	subs	r3, #3
 800ede0:	429a      	cmp	r2, r3
 800ede2:	d001      	beq.n	800ede8 <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 800ede4:	2302      	movs	r3, #2
 800ede6:	e000      	b.n	800edea <verify_packet+0x34>
  
  return 0;      
 800ede8:	2300      	movs	r3, #0
}
 800edea:	4618      	mov	r0, r3
 800edec:	3714      	adds	r7, #20
 800edee:	46bd      	mov	sp, r7
 800edf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf4:	4770      	bx	lr
	...

0800edf8 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 800edf8:	b580      	push	{r7, lr}
 800edfa:	b0a6      	sub	sp, #152	; 0x98
 800edfc:	af00      	add	r7, sp, #0
 800edfe:	607b      	str	r3, [r7, #4]
 800ee00:	4603      	mov	r3, r0
 800ee02:	81fb      	strh	r3, [r7, #14]
 800ee04:	460b      	mov	r3, r1
 800ee06:	81bb      	strh	r3, [r7, #12]
 800ee08:	4613      	mov	r3, r2
 800ee0a:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 800ee0c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ee10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ee14:	b21a      	sxth	r2, r3
 800ee16:	89fb      	ldrh	r3, [r7, #14]
 800ee18:	029b      	lsls	r3, r3, #10
 800ee1a:	b21b      	sxth	r3, r3
 800ee1c:	4313      	orrs	r3, r2
 800ee1e:	b21b      	sxth	r3, r3
 800ee20:	b29b      	uxth	r3, r3
 800ee22:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 800ee24:	7afb      	ldrb	r3, [r7, #11]
 800ee26:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 800ee28:	2301      	movs	r3, #1
 800ee2a:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 800ee2c:	f107 0318 	add.w	r3, r7, #24
 800ee30:	3301      	adds	r3, #1
 800ee32:	461a      	mov	r2, r3
 800ee34:	f107 0314 	add.w	r3, r7, #20
 800ee38:	8819      	ldrh	r1, [r3, #0]
 800ee3a:	789b      	ldrb	r3, [r3, #2]
 800ee3c:	8011      	strh	r1, [r2, #0]
 800ee3e:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 800ee40:	f107 0318 	add.w	r3, r7, #24
 800ee44:	3304      	adds	r3, #4
 800ee46:	7afa      	ldrb	r2, [r7, #11]
 800ee48:	6879      	ldr	r1, [r7, #4]
 800ee4a:	4618      	mov	r0, r3
 800ee4c:	f00b fad0 	bl	801a3f0 <memcpy>
  
  if (hciContext.io.Send)
 800ee50:	4b08      	ldr	r3, [pc, #32]	; (800ee74 <send_cmd+0x7c>)
 800ee52:	691b      	ldr	r3, [r3, #16]
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d009      	beq.n	800ee6c <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 800ee58:	4b06      	ldr	r3, [pc, #24]	; (800ee74 <send_cmd+0x7c>)
 800ee5a:	691b      	ldr	r3, [r3, #16]
 800ee5c:	7afa      	ldrb	r2, [r7, #11]
 800ee5e:	b292      	uxth	r2, r2
 800ee60:	3204      	adds	r2, #4
 800ee62:	b291      	uxth	r1, r2
 800ee64:	f107 0218 	add.w	r2, r7, #24
 800ee68:	4610      	mov	r0, r2
 800ee6a:	4798      	blx	r3
  }
}
 800ee6c:	bf00      	nop
 800ee6e:	3798      	adds	r7, #152	; 0x98
 800ee70:	46bd      	mov	sp, r7
 800ee72:	bd80      	pop	{r7, pc}
 800ee74:	20002780 	.word	0x20002780

0800ee78 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 800ee78:	b580      	push	{r7, lr}
 800ee7a:	b084      	sub	sp, #16
 800ee7c:	af00      	add	r7, sp, #0
 800ee7e:	6078      	str	r0, [r7, #4]
 800ee80:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 800ee82:	e00a      	b.n	800ee9a <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 800ee84:	f107 030c 	add.w	r3, r7, #12
 800ee88:	4619      	mov	r1, r3
 800ee8a:	6838      	ldr	r0, [r7, #0]
 800ee8c:	f000 fada 	bl	800f444 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	4619      	mov	r1, r3
 800ee94:	6878      	ldr	r0, [r7, #4]
 800ee96:	f000 fa49 	bl	800f32c <list_insert_head>
  while (!list_is_empty(src_list))
 800ee9a:	6838      	ldr	r0, [r7, #0]
 800ee9c:	f000 fa26 	bl	800f2ec <list_is_empty>
 800eea0:	4603      	mov	r3, r0
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d0ee      	beq.n	800ee84 <move_list+0xc>
  }
}
 800eea6:	bf00      	nop
 800eea8:	3710      	adds	r7, #16
 800eeaa:	46bd      	mov	sp, r7
 800eeac:	bd80      	pop	{r7, pc}
	...

0800eeb0 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 800eeb0:	b580      	push	{r7, lr}
 800eeb2:	b082      	sub	sp, #8
 800eeb4:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;
  
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800eeb6:	e009      	b.n	800eecc <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 800eeb8:	1d3b      	adds	r3, r7, #4
 800eeba:	4619      	mov	r1, r3
 800eebc:	4808      	ldr	r0, [pc, #32]	; (800eee0 <free_event_list+0x30>)
 800eebe:	f000 fa9c 	bl	800f3fa <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	4619      	mov	r1, r3
 800eec6:	4807      	ldr	r0, [pc, #28]	; (800eee4 <free_event_list+0x34>)
 800eec8:	f000 fa54 	bl	800f374 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800eecc:	4805      	ldr	r0, [pc, #20]	; (800eee4 <free_event_list+0x34>)
 800eece:	f000 fade 	bl	800f48e <list_get_size>
 800eed2:	4603      	mov	r3, r0
 800eed4:	2b01      	cmp	r3, #1
 800eed6:	ddef      	ble.n	800eeb8 <free_event_list+0x8>
  }
}
 800eed8:	bf00      	nop
 800eeda:	3708      	adds	r7, #8
 800eedc:	46bd      	mov	sp, r7
 800eede:	bd80      	pop	{r7, pc}
 800eee0:	20002a74 	.word	0x20002a74
 800eee4:	20002a6c 	.word	0x20002a6c

0800eee8 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800eee8:	b580      	push	{r7, lr}
 800eeea:	b084      	sub	sp, #16
 800eeec:	af00      	add	r7, sp, #0
 800eeee:	6078      	str	r0, [r7, #4]
 800eef0:	6039      	str	r1, [r7, #0]
  uint8_t index;
  
  if(UserEvtRx != NULL)
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d002      	beq.n	800eefe <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 800eef8:	4a18      	ldr	r2, [pc, #96]	; (800ef5c <hci_init+0x74>)
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 800eefe:	f7f3 fdeb 	bl	8002ad8 <hci_tl_lowlevel_init>
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 800ef02:	4817      	ldr	r0, [pc, #92]	; (800ef60 <hci_init+0x78>)
 800ef04:	f000 f9e2 	bl	800f2cc <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 800ef08:	4816      	ldr	r0, [pc, #88]	; (800ef64 <hci_init+0x7c>)
 800ef0a:	f000 f9df 	bl	800f2cc <list_init_head>
  
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800ef0e:	2300      	movs	r3, #0
 800ef10:	73fb      	strb	r3, [r7, #15]
 800ef12:	e00c      	b.n	800ef2e <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 800ef14:	7bfb      	ldrb	r3, [r7, #15]
 800ef16:	228c      	movs	r2, #140	; 0x8c
 800ef18:	fb02 f303 	mul.w	r3, r2, r3
 800ef1c:	4a12      	ldr	r2, [pc, #72]	; (800ef68 <hci_init+0x80>)
 800ef1e:	4413      	add	r3, r2
 800ef20:	4619      	mov	r1, r3
 800ef22:	480f      	ldr	r0, [pc, #60]	; (800ef60 <hci_init+0x78>)
 800ef24:	f000 fa26 	bl	800f374 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800ef28:	7bfb      	ldrb	r3, [r7, #15]
 800ef2a:	3301      	adds	r3, #1
 800ef2c:	73fb      	strb	r3, [r7, #15]
 800ef2e:	7bfb      	ldrb	r3, [r7, #15]
 800ef30:	2b04      	cmp	r3, #4
 800ef32:	d9ef      	bls.n	800ef14 <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 800ef34:	4b09      	ldr	r3, [pc, #36]	; (800ef5c <hci_init+0x74>)
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d003      	beq.n	800ef44 <hci_init+0x5c>
 800ef3c:	4b07      	ldr	r3, [pc, #28]	; (800ef5c <hci_init+0x74>)
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	2000      	movs	r0, #0
 800ef42:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 800ef44:	4b05      	ldr	r3, [pc, #20]	; (800ef5c <hci_init+0x74>)
 800ef46:	689b      	ldr	r3, [r3, #8]
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d002      	beq.n	800ef52 <hci_init+0x6a>
 800ef4c:	4b03      	ldr	r3, [pc, #12]	; (800ef5c <hci_init+0x74>)
 800ef4e:	689b      	ldr	r3, [r3, #8]
 800ef50:	4798      	blx	r3
}
 800ef52:	bf00      	nop
 800ef54:	3710      	adds	r7, #16
 800ef56:	46bd      	mov	sp, r7
 800ef58:	bd80      	pop	{r7, pc}
 800ef5a:	bf00      	nop
 800ef5c:	20002780 	.word	0x20002780
 800ef60:	20002a6c 	.word	0x20002a6c
 800ef64:	20002a74 	.word	0x20002a74
 800ef68:	200024c4 	.word	0x200024c4

0800ef6c <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 800ef6c:	b480      	push	{r7}
 800ef6e:	b083      	sub	sp, #12
 800ef70:	af00      	add	r7, sp, #0
 800ef72:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	4a0b      	ldr	r2, [pc, #44]	; (800efa8 <hci_register_io_bus+0x3c>)
 800ef7a:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	68db      	ldr	r3, [r3, #12]
 800ef80:	4a09      	ldr	r2, [pc, #36]	; (800efa8 <hci_register_io_bus+0x3c>)
 800ef82:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	691b      	ldr	r3, [r3, #16]
 800ef88:	4a07      	ldr	r2, [pc, #28]	; (800efa8 <hci_register_io_bus+0x3c>)
 800ef8a:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	699b      	ldr	r3, [r3, #24]
 800ef90:	4a05      	ldr	r2, [pc, #20]	; (800efa8 <hci_register_io_bus+0x3c>)
 800ef92:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;    
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	689b      	ldr	r3, [r3, #8]
 800ef98:	4a03      	ldr	r2, [pc, #12]	; (800efa8 <hci_register_io_bus+0x3c>)
 800ef9a:	6093      	str	r3, [r2, #8]
}
 800ef9c:	bf00      	nop
 800ef9e:	370c      	adds	r7, #12
 800efa0:	46bd      	mov	sp, r7
 800efa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa6:	4770      	bx	lr
 800efa8:	20002780 	.word	0x20002780

0800efac <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 800efac:	b580      	push	{r7, lr}
 800efae:	b08e      	sub	sp, #56	; 0x38
 800efb0:	af00      	add	r7, sp, #0
 800efb2:	6078      	str	r0, [r7, #4]
 800efb4:	460b      	mov	r3, r1
 800efb6:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	885b      	ldrh	r3, [r3, #2]
 800efbc:	b21b      	sxth	r3, r3
 800efbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800efc2:	b21a      	sxth	r2, r3
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	881b      	ldrh	r3, [r3, #0]
 800efc8:	029b      	lsls	r3, r3, #10
 800efca:	b21b      	sxth	r3, r3
 800efcc:	4313      	orrs	r3, r2
 800efce:	b21b      	sxth	r3, r3
 800efd0:	86fb      	strh	r3, [r7, #54]	; 0x36
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 800efd2:	2300      	movs	r3, #0
 800efd4:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 800efd6:	f107 0308 	add.w	r3, r7, #8
 800efda:	4618      	mov	r0, r3
 800efdc:	f000 f976 	bl	800f2cc <list_init_head>

  free_event_list();
 800efe0:	f7ff ff66 	bl	800eeb0 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	8818      	ldrh	r0, [r3, #0]
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	8859      	ldrh	r1, [r3, #2]
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	68db      	ldr	r3, [r3, #12]
 800eff0:	b2da      	uxtb	r2, r3
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	689b      	ldr	r3, [r3, #8]
 800eff6:	f7ff feff 	bl	800edf8 <send_cmd>
  
  if (async)
 800effa:	78fb      	ldrb	r3, [r7, #3]
 800effc:	2b00      	cmp	r3, #0
 800effe:	d001      	beq.n	800f004 <hci_send_req+0x58>
  {
    return 0;
 800f000:	2300      	movs	r3, #0
 800f002:	e0e2      	b.n	800f1ca <hci_send_req+0x21e>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 800f004:	f7f9 fe6e 	bl	8008ce4 <HAL_GetTick>
 800f008:	6338      	str	r0, [r7, #48]	; 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800f00a:	f7f9 fe6b 	bl	8008ce4 <HAL_GetTick>
 800f00e:	4602      	mov	r2, r0
 800f010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f012:	1ad3      	subs	r3, r2, r3
 800f014:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f018:	f200 80b3 	bhi.w	800f182 <hci_send_req+0x1d6>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 800f01c:	486d      	ldr	r0, [pc, #436]	; (800f1d4 <hci_send_req+0x228>)
 800f01e:	f000 f965 	bl	800f2ec <list_is_empty>
 800f022:	4603      	mov	r3, r0
 800f024:	2b00      	cmp	r3, #0
 800f026:	d000      	beq.n	800f02a <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800f028:	e7ef      	b.n	800f00a <hci_send_req+0x5e>
      {
        break;
 800f02a:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 800f02c:	f107 0310 	add.w	r3, r7, #16
 800f030:	4619      	mov	r1, r3
 800f032:	4868      	ldr	r0, [pc, #416]	; (800f1d4 <hci_send_req+0x228>)
 800f034:	f000 f9e1 	bl	800f3fa <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 800f038:	693b      	ldr	r3, [r7, #16]
 800f03a:	3308      	adds	r3, #8
 800f03c:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 800f03e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f040:	781b      	ldrb	r3, [r3, #0]
 800f042:	2b04      	cmp	r3, #4
 800f044:	d17a      	bne.n	800f13c <hci_send_req+0x190>
    {
      event_pckt = (void *)(hci_hdr->data);
 800f046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f048:	3301      	adds	r3, #1
 800f04a:	62bb      	str	r3, [r7, #40]	; 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 800f04c:	693b      	ldr	r3, [r7, #16]
 800f04e:	3308      	adds	r3, #8
 800f050:	3303      	adds	r3, #3
 800f052:	627b      	str	r3, [r7, #36]	; 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 800f054:	693b      	ldr	r3, [r7, #16]
 800f056:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800f05a:	3b03      	subs	r3, #3
 800f05c:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 800f05e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f060:	781b      	ldrb	r3, [r3, #0]
 800f062:	2b0f      	cmp	r3, #15
 800f064:	d00a      	beq.n	800f07c <hci_send_req+0xd0>
 800f066:	2b0f      	cmp	r3, #15
 800f068:	dc02      	bgt.n	800f070 <hci_send_req+0xc4>
 800f06a:	2b0e      	cmp	r3, #14
 800f06c:	d028      	beq.n	800f0c0 <hci_send_req+0x114>
      
      case EVT_HARDWARE_ERROR:            
        goto failed;
      
      default:      
        break;
 800f06e:	e06a      	b.n	800f146 <hci_send_req+0x19a>
      switch (event_pckt->evt) 
 800f070:	2b10      	cmp	r3, #16
 800f072:	f000 8088 	beq.w	800f186 <hci_send_req+0x1da>
 800f076:	2b3e      	cmp	r3, #62	; 0x3e
 800f078:	d042      	beq.n	800f100 <hci_send_req+0x154>
        break;
 800f07a:	e064      	b.n	800f146 <hci_send_req+0x19a>
        cs = (void *) ptr;
 800f07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f07e:	61bb      	str	r3, [r7, #24]
        if (cs->opcode != opcode)
 800f080:	69bb      	ldr	r3, [r7, #24]
 800f082:	885b      	ldrh	r3, [r3, #2]
 800f084:	b29b      	uxth	r3, r3
 800f086:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f088:	429a      	cmp	r2, r3
 800f08a:	d17e      	bne.n	800f18a <hci_send_req+0x1de>
        if (r->event != EVT_CMD_STATUS) {
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	685b      	ldr	r3, [r3, #4]
 800f090:	2b0f      	cmp	r3, #15
 800f092:	d004      	beq.n	800f09e <hci_send_req+0xf2>
          if (cs->status) {
 800f094:	69bb      	ldr	r3, [r7, #24]
 800f096:	781b      	ldrb	r3, [r3, #0]
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d051      	beq.n	800f140 <hci_send_req+0x194>
            goto failed;
 800f09c:	e078      	b.n	800f190 <hci_send_req+0x1e4>
        r->rlen = MIN(len, r->rlen);
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	695a      	ldr	r2, [r3, #20]
 800f0a2:	6a3b      	ldr	r3, [r7, #32]
 800f0a4:	429a      	cmp	r2, r3
 800f0a6:	bf28      	it	cs
 800f0a8:	461a      	movcs	r2, r3
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	6918      	ldr	r0, [r3, #16]
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	695b      	ldr	r3, [r3, #20]
 800f0b6:	461a      	mov	r2, r3
 800f0b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f0ba:	f00b f999 	bl	801a3f0 <memcpy>
        goto done;
 800f0be:	e078      	b.n	800f1b2 <hci_send_req+0x206>
        cc = (void *) ptr;
 800f0c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0c2:	617b      	str	r3, [r7, #20]
        if (cc->opcode != opcode)
 800f0c4:	697b      	ldr	r3, [r7, #20]
 800f0c6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800f0ca:	b29b      	uxth	r3, r3
 800f0cc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f0ce:	429a      	cmp	r2, r3
 800f0d0:	d15d      	bne.n	800f18e <hci_send_req+0x1e2>
        ptr += EVT_CMD_COMPLETE_SIZE;
 800f0d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0d4:	3303      	adds	r3, #3
 800f0d6:	627b      	str	r3, [r7, #36]	; 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 800f0d8:	6a3b      	ldr	r3, [r7, #32]
 800f0da:	3b03      	subs	r3, #3
 800f0dc:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	695a      	ldr	r2, [r3, #20]
 800f0e2:	6a3b      	ldr	r3, [r7, #32]
 800f0e4:	429a      	cmp	r2, r3
 800f0e6:	bf28      	it	cs
 800f0e8:	461a      	movcs	r2, r3
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	6918      	ldr	r0, [r3, #16]
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	695b      	ldr	r3, [r3, #20]
 800f0f6:	461a      	mov	r2, r3
 800f0f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f0fa:	f00b f979 	bl	801a3f0 <memcpy>
        goto done;
 800f0fe:	e058      	b.n	800f1b2 <hci_send_req+0x206>
        me = (void *) ptr;
 800f100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f102:	61fb      	str	r3, [r7, #28]
        if (me->subevent != r->event)
 800f104:	69fb      	ldr	r3, [r7, #28]
 800f106:	781b      	ldrb	r3, [r3, #0]
 800f108:	461a      	mov	r2, r3
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	685b      	ldr	r3, [r3, #4]
 800f10e:	429a      	cmp	r2, r3
 800f110:	d118      	bne.n	800f144 <hci_send_req+0x198>
        len -= 1;
 800f112:	6a3b      	ldr	r3, [r7, #32]
 800f114:	3b01      	subs	r3, #1
 800f116:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	695a      	ldr	r2, [r3, #20]
 800f11c:	6a3b      	ldr	r3, [r7, #32]
 800f11e:	429a      	cmp	r2, r3
 800f120:	bf28      	it	cs
 800f122:	461a      	movcs	r2, r3
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	6918      	ldr	r0, [r3, #16]
 800f12c:	69fb      	ldr	r3, [r7, #28]
 800f12e:	1c59      	adds	r1, r3, #1
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	695b      	ldr	r3, [r3, #20]
 800f134:	461a      	mov	r2, r3
 800f136:	f00b f95b 	bl	801a3f0 <memcpy>
        goto done;
 800f13a:	e03a      	b.n	800f1b2 <hci_send_req+0x206>
      }
    }
 800f13c:	bf00      	nop
 800f13e:	e002      	b.n	800f146 <hci_send_req+0x19a>
          break;
 800f140:	bf00      	nop
 800f142:	e000      	b.n	800f146 <hci_send_req+0x19a>
          break;
 800f144:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 800f146:	4824      	ldr	r0, [pc, #144]	; (800f1d8 <hci_send_req+0x22c>)
 800f148:	f000 f8d0 	bl	800f2ec <list_is_empty>
 800f14c:	4603      	mov	r3, r0
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d00d      	beq.n	800f16e <hci_send_req+0x1c2>
 800f152:	4820      	ldr	r0, [pc, #128]	; (800f1d4 <hci_send_req+0x228>)
 800f154:	f000 f8ca 	bl	800f2ec <list_is_empty>
 800f158:	4603      	mov	r3, r0
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d007      	beq.n	800f16e <hci_send_req+0x1c2>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800f15e:	693b      	ldr	r3, [r7, #16]
 800f160:	4619      	mov	r1, r3
 800f162:	481d      	ldr	r0, [pc, #116]	; (800f1d8 <hci_send_req+0x22c>)
 800f164:	f000 f906 	bl	800f374 <list_insert_tail>
      hciReadPacket=NULL;
 800f168:	2300      	movs	r3, #0
 800f16a:	613b      	str	r3, [r7, #16]
 800f16c:	e008      	b.n	800f180 <hci_send_req+0x1d4>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 800f16e:	693a      	ldr	r2, [r7, #16]
 800f170:	f107 0308 	add.w	r3, r7, #8
 800f174:	4611      	mov	r1, r2
 800f176:	4618      	mov	r0, r3
 800f178:	f000 f8fc 	bl	800f374 <list_insert_tail>
      hciReadPacket=NULL;
 800f17c:	2300      	movs	r3, #0
 800f17e:	613b      	str	r3, [r7, #16]
  {
 800f180:	e740      	b.n	800f004 <hci_send_req+0x58>
        goto failed;
 800f182:	bf00      	nop
 800f184:	e004      	b.n	800f190 <hci_send_req+0x1e4>
        goto failed;
 800f186:	bf00      	nop
 800f188:	e002      	b.n	800f190 <hci_send_req+0x1e4>
          goto failed;
 800f18a:	bf00      	nop
 800f18c:	e000      	b.n	800f190 <hci_send_req+0x1e4>
          goto failed;
 800f18e:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 800f190:	693b      	ldr	r3, [r7, #16]
 800f192:	2b00      	cmp	r3, #0
 800f194:	d004      	beq.n	800f1a0 <hci_send_req+0x1f4>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800f196:	693b      	ldr	r3, [r7, #16]
 800f198:	4619      	mov	r1, r3
 800f19a:	480f      	ldr	r0, [pc, #60]	; (800f1d8 <hci_send_req+0x22c>)
 800f19c:	f000 f8c6 	bl	800f32c <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);  
 800f1a0:	f107 0308 	add.w	r3, r7, #8
 800f1a4:	4619      	mov	r1, r3
 800f1a6:	480b      	ldr	r0, [pc, #44]	; (800f1d4 <hci_send_req+0x228>)
 800f1a8:	f7ff fe66 	bl	800ee78 <move_list>
  return -1;
 800f1ac:	f04f 33ff 	mov.w	r3, #4294967295
 800f1b0:	e00b      	b.n	800f1ca <hci_send_req+0x21e>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 800f1b2:	693b      	ldr	r3, [r7, #16]
 800f1b4:	4619      	mov	r1, r3
 800f1b6:	4808      	ldr	r0, [pc, #32]	; (800f1d8 <hci_send_req+0x22c>)
 800f1b8:	f000 f8b8 	bl	800f32c <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800f1bc:	f107 0308 	add.w	r3, r7, #8
 800f1c0:	4619      	mov	r1, r3
 800f1c2:	4804      	ldr	r0, [pc, #16]	; (800f1d4 <hci_send_req+0x228>)
 800f1c4:	f7ff fe58 	bl	800ee78 <move_list>
  return 0;
 800f1c8:	2300      	movs	r3, #0
}
 800f1ca:	4618      	mov	r0, r3
 800f1cc:	3738      	adds	r7, #56	; 0x38
 800f1ce:	46bd      	mov	sp, r7
 800f1d0:	bd80      	pop	{r7, pc}
 800f1d2:	bf00      	nop
 800f1d4:	20002a74 	.word	0x20002a74
 800f1d8:	20002a6c 	.word	0x20002a6c

0800f1dc <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800f1dc:	b580      	push	{r7, lr}
 800f1de:	b082      	sub	sp, #8
 800f1e0:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 800f1e2:	2300      	movs	r3, #0
 800f1e4:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800f1e6:	e013      	b.n	800f210 <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 800f1e8:	1d3b      	adds	r3, r7, #4
 800f1ea:	4619      	mov	r1, r3
 800f1ec:	480d      	ldr	r0, [pc, #52]	; (800f224 <hci_user_evt_proc+0x48>)
 800f1ee:	f000 f904 	bl	800f3fa <list_remove_head>
    if (hciContext.UserEvtRx != NULL)
 800f1f2:	4b0d      	ldr	r3, [pc, #52]	; (800f228 <hci_user_evt_proc+0x4c>)
 800f1f4:	69db      	ldr	r3, [r3, #28]
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d005      	beq.n	800f206 <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 800f1fa:	4b0b      	ldr	r3, [pc, #44]	; (800f228 <hci_user_evt_proc+0x4c>)
 800f1fc:	69db      	ldr	r3, [r3, #28]
 800f1fe:	687a      	ldr	r2, [r7, #4]
 800f200:	3208      	adds	r2, #8
 800f202:	4610      	mov	r0, r2
 800f204:	4798      	blx	r3
    }
    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	4619      	mov	r1, r3
 800f20a:	4808      	ldr	r0, [pc, #32]	; (800f22c <hci_user_evt_proc+0x50>)
 800f20c:	f000 f8b2 	bl	800f374 <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800f210:	4804      	ldr	r0, [pc, #16]	; (800f224 <hci_user_evt_proc+0x48>)
 800f212:	f000 f86b 	bl	800f2ec <list_is_empty>
 800f216:	4603      	mov	r3, r0
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d0e5      	beq.n	800f1e8 <hci_user_evt_proc+0xc>
  }
}
 800f21c:	bf00      	nop
 800f21e:	3708      	adds	r7, #8
 800f220:	46bd      	mov	sp, r7
 800f222:	bd80      	pop	{r7, pc}
 800f224:	20002a74 	.word	0x20002a74
 800f228:	20002780 	.word	0x20002780
 800f22c:	20002a6c 	.word	0x20002a6c

0800f230 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 800f230:	b580      	push	{r7, lr}
 800f232:	b086      	sub	sp, #24
 800f234:	af00      	add	r7, sp, #0
 800f236:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 800f238:	2300      	movs	r3, #0
 800f23a:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 800f23c:	2300      	movs	r3, #0
 800f23e:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 800f240:	481f      	ldr	r0, [pc, #124]	; (800f2c0 <hci_notify_asynch_evt+0x90>)
 800f242:	f000 f853 	bl	800f2ec <list_is_empty>
 800f246:	4603      	mov	r3, r0
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d132      	bne.n	800f2b2 <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 800f24c:	f107 030c 	add.w	r3, r7, #12
 800f250:	4619      	mov	r1, r3
 800f252:	481b      	ldr	r0, [pc, #108]	; (800f2c0 <hci_notify_asynch_evt+0x90>)
 800f254:	f000 f8d1 	bl	800f3fa <list_remove_head>
    
    if (hciContext.io.Receive)
 800f258:	4b1a      	ldr	r3, [pc, #104]	; (800f2c4 <hci_notify_asynch_evt+0x94>)
 800f25a:	68db      	ldr	r3, [r3, #12]
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d02a      	beq.n	800f2b6 <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 800f260:	4b18      	ldr	r3, [pc, #96]	; (800f2c4 <hci_notify_asynch_evt+0x94>)
 800f262:	68db      	ldr	r3, [r3, #12]
 800f264:	68fa      	ldr	r2, [r7, #12]
 800f266:	3208      	adds	r2, #8
 800f268:	2180      	movs	r1, #128	; 0x80
 800f26a:	4610      	mov	r0, r2
 800f26c:	4798      	blx	r3
 800f26e:	4603      	mov	r3, r0
 800f270:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 800f272:	7cfb      	ldrb	r3, [r7, #19]
 800f274:	2b00      	cmp	r3, #0
 800f276:	d016      	beq.n	800f2a6 <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	7cfa      	ldrb	r2, [r7, #19]
 800f27c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
        if (verify_packet(hciReadPacket) == 0)
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	4618      	mov	r0, r3
 800f284:	f7ff fd97 	bl	800edb6 <verify_packet>
 800f288:	4603      	mov	r3, r0
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d105      	bne.n	800f29a <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	4619      	mov	r1, r3
 800f292:	480d      	ldr	r0, [pc, #52]	; (800f2c8 <hci_notify_asynch_evt+0x98>)
 800f294:	f000 f86e 	bl	800f374 <list_insert_tail>
 800f298:	e00d      	b.n	800f2b6 <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	4619      	mov	r1, r3
 800f29e:	4808      	ldr	r0, [pc, #32]	; (800f2c0 <hci_notify_asynch_evt+0x90>)
 800f2a0:	f000 f844 	bl	800f32c <list_insert_head>
 800f2a4:	e007      	b.n	800f2b6 <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	4619      	mov	r1, r3
 800f2aa:	4805      	ldr	r0, [pc, #20]	; (800f2c0 <hci_notify_asynch_evt+0x90>)
 800f2ac:	f000 f83e 	bl	800f32c <list_insert_head>
 800f2b0:	e001      	b.n	800f2b6 <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 800f2b2:	2301      	movs	r3, #1
 800f2b4:	617b      	str	r3, [r7, #20]
  }
  return ret;
 800f2b6:	697b      	ldr	r3, [r7, #20]

}
 800f2b8:	4618      	mov	r0, r3
 800f2ba:	3718      	adds	r7, #24
 800f2bc:	46bd      	mov	sp, r7
 800f2be:	bd80      	pop	{r7, pc}
 800f2c0:	20002a6c 	.word	0x20002a6c
 800f2c4:	20002780 	.word	0x20002780
 800f2c8:	20002a74 	.word	0x20002a74

0800f2cc <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 800f2cc:	b480      	push	{r7}
 800f2ce:	b083      	sub	sp, #12
 800f2d0:	af00      	add	r7, sp, #0
 800f2d2:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	687a      	ldr	r2, [r7, #4]
 800f2d8:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	687a      	ldr	r2, [r7, #4]
 800f2de:	605a      	str	r2, [r3, #4]
}
 800f2e0:	bf00      	nop
 800f2e2:	370c      	adds	r7, #12
 800f2e4:	46bd      	mov	sp, r7
 800f2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ea:	4770      	bx	lr

0800f2ec <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 800f2ec:	b480      	push	{r7}
 800f2ee:	b087      	sub	sp, #28
 800f2f0:	af00      	add	r7, sp, #0
 800f2f2:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f2f4:	f3ef 8310 	mrs	r3, PRIMASK
 800f2f8:	60fb      	str	r3, [r7, #12]
  return(result);
 800f2fa:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800f2fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800f2fe:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	687a      	ldr	r2, [r7, #4]
 800f306:	429a      	cmp	r2, r3
 800f308:	d102      	bne.n	800f310 <list_is_empty+0x24>
  {
    return_value = 1;
 800f30a:	2301      	movs	r3, #1
 800f30c:	75fb      	strb	r3, [r7, #23]
 800f30e:	e001      	b.n	800f314 <list_is_empty+0x28>
  }
  else
  {
    return_value = 0;
 800f310:	2300      	movs	r3, #0
 800f312:	75fb      	strb	r3, [r7, #23]
 800f314:	693b      	ldr	r3, [r7, #16]
 800f316:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f318:	68bb      	ldr	r3, [r7, #8]
 800f31a:	f383 8810 	msr	PRIMASK, r3
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 800f31e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f320:	4618      	mov	r0, r3
 800f322:	371c      	adds	r7, #28
 800f324:	46bd      	mov	sp, r7
 800f326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f32a:	4770      	bx	lr

0800f32c <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 800f32c:	b480      	push	{r7}
 800f32e:	b087      	sub	sp, #28
 800f330:	af00      	add	r7, sp, #0
 800f332:	6078      	str	r0, [r7, #4]
 800f334:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f336:	f3ef 8310 	mrs	r3, PRIMASK
 800f33a:	60fb      	str	r3, [r7, #12]
  return(result);
 800f33c:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800f33e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f340:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	681a      	ldr	r2, [r3, #0]
 800f346:	683b      	ldr	r3, [r7, #0]
 800f348:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800f34a:	683b      	ldr	r3, [r7, #0]
 800f34c:	687a      	ldr	r2, [r7, #4]
 800f34e:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	683a      	ldr	r2, [r7, #0]
 800f354:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800f356:	683b      	ldr	r3, [r7, #0]
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	683a      	ldr	r2, [r7, #0]
 800f35c:	605a      	str	r2, [r3, #4]
 800f35e:	697b      	ldr	r3, [r7, #20]
 800f360:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f362:	693b      	ldr	r3, [r7, #16]
 800f364:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800f368:	bf00      	nop
 800f36a:	371c      	adds	r7, #28
 800f36c:	46bd      	mov	sp, r7
 800f36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f372:	4770      	bx	lr

0800f374 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 800f374:	b480      	push	{r7}
 800f376:	b087      	sub	sp, #28
 800f378:	af00      	add	r7, sp, #0
 800f37a:	6078      	str	r0, [r7, #4]
 800f37c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f37e:	f3ef 8310 	mrs	r3, PRIMASK
 800f382:	60fb      	str	r3, [r7, #12]
  return(result);
 800f384:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800f386:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f388:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 800f38a:	683b      	ldr	r3, [r7, #0]
 800f38c:	687a      	ldr	r2, [r7, #4]
 800f38e:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	685a      	ldr	r2, [r3, #4]
 800f394:	683b      	ldr	r3, [r7, #0]
 800f396:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	683a      	ldr	r2, [r7, #0]
 800f39c:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800f39e:	683b      	ldr	r3, [r7, #0]
 800f3a0:	685b      	ldr	r3, [r3, #4]
 800f3a2:	683a      	ldr	r2, [r7, #0]
 800f3a4:	601a      	str	r2, [r3, #0]
 800f3a6:	697b      	ldr	r3, [r7, #20]
 800f3a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f3aa:	693b      	ldr	r3, [r7, #16]
 800f3ac:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800f3b0:	bf00      	nop
 800f3b2:	371c      	adds	r7, #28
 800f3b4:	46bd      	mov	sp, r7
 800f3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ba:	4770      	bx	lr

0800f3bc <list_remove_node>:

void list_remove_node (tListNode * node)
{
 800f3bc:	b480      	push	{r7}
 800f3be:	b087      	sub	sp, #28
 800f3c0:	af00      	add	r7, sp, #0
 800f3c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f3c4:	f3ef 8310 	mrs	r3, PRIMASK
 800f3c8:	60fb      	str	r3, [r7, #12]
  return(result);
 800f3ca:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800f3cc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f3ce:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	685b      	ldr	r3, [r3, #4]
 800f3d4:	687a      	ldr	r2, [r7, #4]
 800f3d6:	6812      	ldr	r2, [r2, #0]
 800f3d8:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	687a      	ldr	r2, [r7, #4]
 800f3e0:	6852      	ldr	r2, [r2, #4]
 800f3e2:	605a      	str	r2, [r3, #4]
 800f3e4:	697b      	ldr	r3, [r7, #20]
 800f3e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f3e8:	693b      	ldr	r3, [r7, #16]
 800f3ea:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800f3ee:	bf00      	nop
 800f3f0:	371c      	adds	r7, #28
 800f3f2:	46bd      	mov	sp, r7
 800f3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3f8:	4770      	bx	lr

0800f3fa <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 800f3fa:	b580      	push	{r7, lr}
 800f3fc:	b086      	sub	sp, #24
 800f3fe:	af00      	add	r7, sp, #0
 800f400:	6078      	str	r0, [r7, #4]
 800f402:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f404:	f3ef 8310 	mrs	r3, PRIMASK
 800f408:	60fb      	str	r3, [r7, #12]
  return(result);
 800f40a:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800f40c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f40e:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	681a      	ldr	r2, [r3, #0]
 800f414:	683b      	ldr	r3, [r7, #0]
 800f416:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	4618      	mov	r0, r3
 800f41e:	f7ff ffcd 	bl	800f3bc <list_remove_node>
  (*node)->next = NULL;
 800f422:	683b      	ldr	r3, [r7, #0]
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	2200      	movs	r2, #0
 800f428:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800f42a:	683b      	ldr	r3, [r7, #0]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	2200      	movs	r2, #0
 800f430:	605a      	str	r2, [r3, #4]
 800f432:	697b      	ldr	r3, [r7, #20]
 800f434:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f436:	693b      	ldr	r3, [r7, #16]
 800f438:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800f43c:	bf00      	nop
 800f43e:	3718      	adds	r7, #24
 800f440:	46bd      	mov	sp, r7
 800f442:	bd80      	pop	{r7, pc}

0800f444 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 800f444:	b580      	push	{r7, lr}
 800f446:	b086      	sub	sp, #24
 800f448:	af00      	add	r7, sp, #0
 800f44a:	6078      	str	r0, [r7, #4]
 800f44c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f44e:	f3ef 8310 	mrs	r3, PRIMASK
 800f452:	60fb      	str	r3, [r7, #12]
  return(result);
 800f454:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800f456:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f458:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	685a      	ldr	r2, [r3, #4]
 800f45e:	683b      	ldr	r3, [r7, #0]
 800f460:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	685b      	ldr	r3, [r3, #4]
 800f466:	4618      	mov	r0, r3
 800f468:	f7ff ffa8 	bl	800f3bc <list_remove_node>
  (*node)->next = NULL;
 800f46c:	683b      	ldr	r3, [r7, #0]
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	2200      	movs	r2, #0
 800f472:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800f474:	683b      	ldr	r3, [r7, #0]
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	2200      	movs	r2, #0
 800f47a:	605a      	str	r2, [r3, #4]
 800f47c:	697b      	ldr	r3, [r7, #20]
 800f47e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f480:	693b      	ldr	r3, [r7, #16]
 800f482:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800f486:	bf00      	nop
 800f488:	3718      	adds	r7, #24
 800f48a:	46bd      	mov	sp, r7
 800f48c:	bd80      	pop	{r7, pc}

0800f48e <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 800f48e:	b480      	push	{r7}
 800f490:	b089      	sub	sp, #36	; 0x24
 800f492:	af00      	add	r7, sp, #0
 800f494:	6078      	str	r0, [r7, #4]
  int size = 0;
 800f496:	2300      	movs	r3, #0
 800f498:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f49a:	f3ef 8310 	mrs	r3, PRIMASK
 800f49e:	613b      	str	r3, [r7, #16]
  return(result);
 800f4a0:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800f4a2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f4a4:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800f4ac:	e005      	b.n	800f4ba <list_get_size+0x2c>
  {
    size++;
 800f4ae:	69fb      	ldr	r3, [r7, #28]
 800f4b0:	3301      	adds	r3, #1
 800f4b2:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 800f4b4:	69bb      	ldr	r3, [r7, #24]
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800f4ba:	69ba      	ldr	r2, [r7, #24]
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	429a      	cmp	r2, r3
 800f4c0:	d1f5      	bne.n	800f4ae <list_get_size+0x20>
 800f4c2:	697b      	ldr	r3, [r7, #20]
 800f4c4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	f383 8810 	msr	PRIMASK, r3
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 800f4cc:	69fb      	ldr	r3, [r7, #28]
}
 800f4ce:	4618      	mov	r0, r3
 800f4d0:	3724      	adds	r7, #36	; 0x24
 800f4d2:	46bd      	mov	sp, r7
 800f4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4d8:	4770      	bx	lr
	...

0800f4dc <m_mldivide>:
 800f4dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4e0:	ed2d 8b02 	vpush	{d8}
 800f4e4:	b099      	sub	sp, #100	; 0x64
 800f4e6:	4606      	mov	r6, r0
 800f4e8:	460d      	mov	r5, r1
 800f4ea:	4614      	mov	r4, r2
 800f4ec:	4607      	mov	r7, r0
 800f4ee:	f100 0820 	add.w	r8, r0, #32
 800f4f2:	f10d 0e3c 	add.w	lr, sp, #60	; 0x3c
 800f4f6:	6838      	ldr	r0, [r7, #0]
 800f4f8:	6879      	ldr	r1, [r7, #4]
 800f4fa:	68ba      	ldr	r2, [r7, #8]
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	46f4      	mov	ip, lr
 800f500:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f504:	3710      	adds	r7, #16
 800f506:	4547      	cmp	r7, r8
 800f508:	46e6      	mov	lr, ip
 800f50a:	d1f4      	bne.n	800f4f6 <m_mldivide+0x1a>
 800f50c:	edd6 7a00 	vldr	s15, [r6]
 800f510:	ed96 7a01 	vldr	s14, [r6, #4]
 800f514:	6838      	ldr	r0, [r7, #0]
 800f516:	f8cc 0000 	str.w	r0, [ip]
 800f51a:	eef0 7ae7 	vabs.f32	s15, s15
 800f51e:	eeb0 7ac7 	vabs.f32	s14, s14
 800f522:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f52a:	f100 8173 	bmi.w	800f814 <m_mldivide+0x338>
 800f52e:	2307      	movs	r3, #7
 800f530:	2004      	movs	r0, #4
 800f532:	f04f 0b00 	mov.w	fp, #0
 800f536:	9305      	str	r3, [sp, #20]
 800f538:	2301      	movs	r3, #1
 800f53a:	9004      	str	r0, [sp, #16]
 800f53c:	eeb0 7a67 	vmov.f32	s14, s15
 800f540:	46de      	mov	lr, fp
 800f542:	f04f 0806 	mov.w	r8, #6
 800f546:	2703      	movs	r7, #3
 800f548:	9301      	str	r3, [sp, #4]
 800f54a:	edd6 7a02 	vldr	s15, [r6, #8]
 800f54e:	eef0 7ae7 	vabs.f32	s15, s15
 800f552:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f55a:	f300 816a 	bgt.w	800f832 <m_mldivide+0x356>
 800f55e:	2202      	movs	r2, #2
 800f560:	9202      	str	r2, [sp, #8]
 800f562:	9a01      	ldr	r2, [sp, #4]
 800f564:	2308      	movs	r3, #8
 800f566:	f04f 0c05 	mov.w	ip, #5
 800f56a:	4430      	add	r0, r6
 800f56c:	4476      	add	r6, lr
 800f56e:	edd0 6a00 	vldr	s13, [r0]
 800f572:	ed96 7a00 	vldr	s14, [r6]
 800f576:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f57a:	0090      	lsls	r0, r2, #2
 800f57c:	aa18      	add	r2, sp, #96	; 0x60
 800f57e:	eb02 0e00 	add.w	lr, r2, r0
 800f582:	9006      	str	r0, [sp, #24]
 800f584:	9a02      	ldr	r2, [sp, #8]
 800f586:	ea4f 008b 	mov.w	r0, fp, lsl #2
 800f58a:	ae18      	add	r6, sp, #96	; 0x60
 800f58c:	900b      	str	r0, [sp, #44]	; 0x2c
 800f58e:	1830      	adds	r0, r6, r0
 800f590:	9e04      	ldr	r6, [sp, #16]
 800f592:	ea4f 0a82 	mov.w	sl, r2, lsl #2
 800f596:	aa18      	add	r2, sp, #96	; 0x60
 800f598:	00b6      	lsls	r6, r6, #2
 800f59a:	4452      	add	r2, sl
 800f59c:	9208      	str	r2, [sp, #32]
 800f59e:	00bf      	lsls	r7, r7, #2
 800f5a0:	4632      	mov	r2, r6
 800f5a2:	9607      	str	r6, [sp, #28]
 800f5a4:	ae18      	add	r6, sp, #96	; 0x60
 800f5a6:	970c      	str	r7, [sp, #48]	; 0x30
 800f5a8:	19f7      	adds	r7, r6, r7
 800f5aa:	9709      	str	r7, [sp, #36]	; 0x24
 800f5ac:	4637      	mov	r7, r6
 800f5ae:	18b9      	adds	r1, r7, r2
 800f5b0:	9103      	str	r1, [sp, #12]
 800f5b2:	9908      	ldr	r1, [sp, #32]
 800f5b4:	ed4e 7a09 	vstr	s15, [lr, #-36]	; 0xffffffdc
 800f5b8:	ed51 6a09 	vldr	s13, [r1, #-36]	; 0xffffffdc
 800f5bc:	ed10 7a09 	vldr	s14, [r0, #-36]	; 0xffffffdc
 800f5c0:	9805      	ldr	r0, [sp, #20]
 800f5c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f5c6:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800f5ca:	0080      	lsls	r0, r0, #2
 800f5cc:	ea4f 098c 	mov.w	r9, ip, lsl #2
 800f5d0:	eb07 0c09 	add.w	ip, r7, r9
 800f5d4:	4616      	mov	r6, r2
 800f5d6:	4607      	mov	r7, r0
 800f5d8:	920d      	str	r2, [sp, #52]	; 0x34
 800f5da:	aa18      	add	r2, sp, #96	; 0x60
 800f5dc:	9008      	str	r0, [sp, #32]
 800f5de:	1990      	adds	r0, r2, r6
 800f5e0:	19d6      	adds	r6, r2, r7
 800f5e2:	960a      	str	r6, [sp, #40]	; 0x28
 800f5e4:	9f03      	ldr	r7, [sp, #12]
 800f5e6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800f5e8:	ed41 7a09 	vstr	s15, [r1, #-36]	; 0xffffffdc
 800f5ec:	ed5e 6a09 	vldr	s13, [lr, #-36]	; 0xffffffdc
 800f5f0:	ed16 7a09 	vldr	s14, [r6, #-36]	; 0xffffffdc
 800f5f4:	ed57 7a09 	vldr	s15, [r7, #-36]	; 0xffffffdc
 800f5f8:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800f5fc:	009b      	lsls	r3, r3, #2
 800f5fe:	eb02 0803 	add.w	r8, r2, r3
 800f602:	460a      	mov	r2, r1
 800f604:	ed47 7a09 	vstr	s15, [r7, #-36]	; 0xffffffdc
 800f608:	ed52 6a09 	vldr	s13, [r2, #-36]	; 0xffffffdc
 800f60c:	ed16 7a09 	vldr	s14, [r6, #-36]	; 0xffffffdc
 800f610:	ed5c 7a09 	vldr	s15, [ip, #-36]	; 0xffffffdc
 800f614:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800f618:	4611      	mov	r1, r2
 800f61a:	ed4c 7a09 	vstr	s15, [ip, #-36]	; 0xffffffdc
 800f61e:	ed5e 6a09 	vldr	s13, [lr, #-36]	; 0xffffffdc
 800f622:	ed10 7a09 	vldr	s14, [r0, #-36]	; 0xffffffdc
 800f626:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800f628:	9f03      	ldr	r7, [sp, #12]
 800f62a:	ed56 7a09 	vldr	s15, [r6, #-36]	; 0xffffffdc
 800f62e:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800f632:	ed46 7a09 	vstr	s15, [r6, #-36]	; 0xffffffdc
 800f636:	ed51 6a09 	vldr	s13, [r1, #-36]	; 0xffffffdc
 800f63a:	ed10 7a09 	vldr	s14, [r0, #-36]	; 0xffffffdc
 800f63e:	ed58 7a09 	vldr	s15, [r8, #-36]	; 0xffffffdc
 800f642:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800f646:	ed48 7a09 	vstr	s15, [r8, #-36]	; 0xffffffdc
 800f64a:	ed5c 7a09 	vldr	s15, [ip, #-36]	; 0xffffffdc
 800f64e:	ed17 7a09 	vldr	s14, [r7, #-36]	; 0xffffffdc
 800f652:	eeb0 6ae7 	vabs.f32	s12, s15
 800f656:	eef0 6ac7 	vabs.f32	s13, s14
 800f65a:	eeb4 6ae6 	vcmpe.f32	s12, s13
 800f65e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f662:	dc14      	bgt.n	800f68e <m_mldivide+0x1b2>
 800f664:	9802      	ldr	r0, [sp, #8]
 800f666:	9901      	ldr	r1, [sp, #4]
 800f668:	9e04      	ldr	r6, [sp, #16]
 800f66a:	9001      	str	r0, [sp, #4]
 800f66c:	9805      	ldr	r0, [sp, #20]
 800f66e:	f8cd a018 	str.w	sl, [sp, #24]
 800f672:	eef0 6a47 	vmov.f32	s13, s14
 800f676:	e9cd 9307 	strd	r9, r3, [sp, #28]
 800f67a:	eeb0 7a67 	vmov.f32	s14, s15
 800f67e:	9102      	str	r1, [sp, #8]
 800f680:	eef0 7a66 	vmov.f32	s15, s13
 800f684:	ea4f 0986 	mov.w	r9, r6, lsl #2
 800f688:	0083      	lsls	r3, r0, #2
 800f68a:	ea4f 0a81 	mov.w	sl, r1, lsl #2
 800f68e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f692:	9a07      	ldr	r2, [sp, #28]
 800f694:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800f696:	a818      	add	r0, sp, #96	; 0x60
 800f698:	4402      	add	r2, r0
 800f69a:	4616      	mov	r6, r2
 800f69c:	9a08      	ldr	r2, [sp, #32]
 800f69e:	4402      	add	r2, r0
 800f6a0:	4610      	mov	r0, r2
 800f6a2:	aa18      	add	r2, sp, #96	; 0x60
 800f6a4:	1899      	adds	r1, r3, r2
 800f6a6:	eb05 0e07 	add.w	lr, r5, r7
 800f6aa:	ed9e 7a00 	vldr	s14, [lr]
 800f6ae:	ed46 6a09 	vstr	s13, [r6, #-36]	; 0xffffffdc
 800f6b2:	ed11 6a09 	vldr	s12, [r1, #-36]	; 0xffffffdc
 800f6b6:	ed50 7a09 	vldr	s15, [r0, #-36]	; 0xffffffdc
 800f6ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f6bc:	ed84 7a00 	vstr	s14, [r4]
 800f6c0:	eee6 7ac6 	vfms.f32	s15, s13, s12
 800f6c4:	eb02 0e0a 	add.w	lr, r2, sl
 800f6c8:	4413      	add	r3, r2
 800f6ca:	44aa      	add	sl, r5
 800f6cc:	ed40 7a09 	vstr	s15, [r0, #-36]	; 0xffffffdc
 800f6d0:	ed5e 1a09 	vldr	s3, [lr, #-36]	; 0xffffffdc
 800f6d4:	edda 6a00 	vldr	s13, [sl]
 800f6d8:	ed56 2a09 	vldr	s5, [r6, #-36]	; 0xffffffdc
 800f6dc:	ed11 3a09 	vldr	s6, [r1, #-36]	; 0xffffffdc
 800f6e0:	4698      	mov	r8, r3
 800f6e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f6e4:	ed58 3a09 	vldr	s7, [r8, #-36]	; 0xffffffdc
 800f6e8:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800f6ec:	eef1 8a61 	vneg.f32	s17, s3
 800f6f0:	eee8 6a87 	vfma.f32	s13, s17, s14
 800f6f4:	4413      	add	r3, r2
 800f6f6:	eb02 0c07 	add.w	ip, r2, r7
 800f6fa:	eec1 4a27 	vdiv.f32	s9, s2, s15
 800f6fe:	461f      	mov	r7, r3
 800f700:	9b06      	ldr	r3, [sp, #24]
 800f702:	4491      	add	r9, r2
 800f704:	eb02 0e03 	add.w	lr, r2, r3
 800f708:	18e8      	adds	r0, r5, r3
 800f70a:	9a02      	ldr	r2, [sp, #8]
 800f70c:	9b01      	ldr	r3, [sp, #4]
 800f70e:	eb05 0683 	add.w	r6, r5, r3, lsl #2
 800f712:	edc4 6a01 	vstr	s13, [r4, #4]
 800f716:	ed59 5a09 	vldr	s11, [r9, #-36]	; 0xffffffdc
 800f71a:	ed1e 2a09 	vldr	s4, [lr, #-36]	; 0xffffffdc
 800f71e:	ed90 6a00 	vldr	s12, [r0]
 800f722:	ed5c 0a09 	vldr	s1, [ip, #-36]	; 0xffffffdc
 800f726:	ed17 4a09 	vldr	s8, [r7, #-36]	; 0xffffffdc
 800f72a:	ee81 5a25 	vdiv.f32	s10, s2, s11
 800f72e:	eb05 0c8b 	add.w	ip, r5, fp, lsl #2
 800f732:	eb05 0782 	add.w	r7, r5, r2, lsl #2
 800f736:	eeb1 8a42 	vneg.f32	s16, s4
 800f73a:	eea8 6a07 	vfma.f32	s12, s16, s14
 800f73e:	eeb1 0a62 	vneg.f32	s0, s5
 800f742:	eea0 6a26 	vfma.f32	s12, s0, s13
 800f746:	eec1 5a20 	vdiv.f32	s11, s2, s1
 800f74a:	ee26 6a24 	vmul.f32	s12, s12, s9
 800f74e:	eef1 0a43 	vneg.f32	s1, s6
 800f752:	eee0 6a86 	vfma.f32	s13, s1, s12
 800f756:	eeb1 1a63 	vneg.f32	s2, s7
 800f75a:	eea1 7a06 	vfma.f32	s14, s2, s12
 800f75e:	ee66 6a85 	vmul.f32	s13, s13, s10
 800f762:	eef1 7a44 	vneg.f32	s15, s8
 800f766:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800f76a:	ed84 6a02 	vstr	s12, [r4, #8]
 800f76e:	ee27 7a25 	vmul.f32	s14, s14, s11
 800f772:	edc4 6a01 	vstr	s13, [r4, #4]
 800f776:	ed84 7a00 	vstr	s14, [r4]
 800f77a:	ed9c 7a03 	vldr	s14, [ip, #12]
 800f77e:	ed84 7a03 	vstr	s14, [r4, #12]
 800f782:	edd7 6a03 	vldr	s13, [r7, #12]
 800f786:	eee8 6a87 	vfma.f32	s13, s17, s14
 800f78a:	edc4 6a04 	vstr	s13, [r4, #16]
 800f78e:	ed96 6a03 	vldr	s12, [r6, #12]
 800f792:	eea8 6a07 	vfma.f32	s12, s16, s14
 800f796:	eea0 6a26 	vfma.f32	s12, s0, s13
 800f79a:	ee26 6a24 	vmul.f32	s12, s12, s9
 800f79e:	eee0 6a86 	vfma.f32	s13, s1, s12
 800f7a2:	eea1 7a06 	vfma.f32	s14, s2, s12
 800f7a6:	ee66 6a85 	vmul.f32	s13, s13, s10
 800f7aa:	ed84 6a05 	vstr	s12, [r4, #20]
 800f7ae:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800f7b2:	edc4 6a04 	vstr	s13, [r4, #16]
 800f7b6:	ee27 7a25 	vmul.f32	s14, s14, s11
 800f7ba:	ed84 7a03 	vstr	s14, [r4, #12]
 800f7be:	ed9c 7a06 	vldr	s14, [ip, #24]
 800f7c2:	ed84 7a06 	vstr	s14, [r4, #24]
 800f7c6:	edd7 7a06 	vldr	s15, [r7, #24]
 800f7ca:	eeb1 6a47 	vneg.f32	s12, s14
 800f7ce:	eee6 7a21 	vfma.f32	s15, s12, s3
 800f7d2:	edc4 7a07 	vstr	s15, [r4, #28]
 800f7d6:	edd6 6a06 	vldr	s13, [r6, #24]
 800f7da:	eee6 6a02 	vfma.f32	s13, s12, s4
 800f7de:	eee7 6ae2 	vfms.f32	s13, s15, s5
 800f7e2:	ee66 4aa4 	vmul.f32	s9, s13, s9
 800f7e6:	eef1 6a64 	vneg.f32	s13, s9
 800f7ea:	eee6 7a83 	vfma.f32	s15, s13, s6
 800f7ee:	eea6 7aa3 	vfma.f32	s14, s13, s7
 800f7f2:	ee67 7a85 	vmul.f32	s15, s15, s10
 800f7f6:	edc4 4a08 	vstr	s9, [r4, #32]
 800f7fa:	eea7 7ac4 	vfms.f32	s14, s15, s8
 800f7fe:	edc4 7a07 	vstr	s15, [r4, #28]
 800f802:	ee27 7a25 	vmul.f32	s14, s14, s11
 800f806:	ed84 7a06 	vstr	s14, [r4, #24]
 800f80a:	b019      	add	sp, #100	; 0x64
 800f80c:	ecbd 8b02 	vpop	{d8}
 800f810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f814:	2300      	movs	r3, #0
 800f816:	2704      	movs	r7, #4
 800f818:	9301      	str	r3, [sp, #4]
 800f81a:	4618      	mov	r0, r3
 800f81c:	f04f 0c06 	mov.w	ip, #6
 800f820:	2303      	movs	r3, #3
 800f822:	46be      	mov	lr, r7
 800f824:	f04f 0807 	mov.w	r8, #7
 800f828:	e9cd 3c04 	strd	r3, ip, [sp, #16]
 800f82c:	f04f 0b01 	mov.w	fp, #1
 800f830:	e68b      	b.n	800f54a <m_mldivide+0x6e>
 800f832:	2207      	movs	r2, #7
 800f834:	2304      	movs	r3, #4
 800f836:	f04f 0808 	mov.w	r8, #8
 800f83a:	9205      	str	r2, [sp, #20]
 800f83c:	2100      	movs	r1, #0
 800f83e:	2201      	movs	r2, #1
 800f840:	9304      	str	r3, [sp, #16]
 800f842:	4618      	mov	r0, r3
 800f844:	46c6      	mov	lr, r8
 800f846:	2306      	movs	r3, #6
 800f848:	f04f 0c03 	mov.w	ip, #3
 800f84c:	2705      	movs	r7, #5
 800f84e:	f04f 0b02 	mov.w	fp, #2
 800f852:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800f856:	e688      	b.n	800f56a <m_mldivide+0x8e>

0800f858 <m_qmult_eml>:
 800f858:	ed91 3a02 	vldr	s6, [r1, #8]
 800f85c:	edd0 3a01 	vldr	s7, [r0, #4]
 800f860:	ed91 5a03 	vldr	s10, [r1, #12]
 800f864:	ed90 4a02 	vldr	s8, [r0, #8]
 800f868:	ed91 2a00 	vldr	s4, [r1]
 800f86c:	edd1 2a01 	vldr	s5, [r1, #4]
 800f870:	edd0 4a00 	vldr	s9, [r0]
 800f874:	edd0 5a03 	vldr	s11, [r0, #12]
 800f878:	eeb1 1a43 	vneg.f32	s2, s6
 800f87c:	ee23 6a83 	vmul.f32	s12, s7, s6
 800f880:	ee24 7a01 	vmul.f32	s14, s8, s2
 800f884:	ee64 6a02 	vmul.f32	s13, s8, s4
 800f888:	ee64 7a05 	vmul.f32	s15, s8, s10
 800f88c:	eef1 0a62 	vneg.f32	s1, s5
 800f890:	eef1 1a42 	vneg.f32	s3, s4
 800f894:	eea4 6a85 	vfma.f32	s12, s9, s10
 800f898:	eea3 7aa0 	vfma.f32	s14, s7, s1
 800f89c:	eee3 6a85 	vfma.f32	s13, s7, s10
 800f8a0:	eee3 7aa1 	vfma.f32	s15, s7, s3
 800f8a4:	eea4 6a20 	vfma.f32	s12, s8, s1
 800f8a8:	eee4 6a81 	vfma.f32	s13, s9, s2
 800f8ac:	eea4 7aa1 	vfma.f32	s14, s9, s3
 800f8b0:	eee4 7aa2 	vfma.f32	s15, s9, s5
 800f8b4:	eea5 6a82 	vfma.f32	s12, s11, s4
 800f8b8:	eee5 6aa2 	vfma.f32	s13, s11, s5
 800f8bc:	eea5 7a85 	vfma.f32	s14, s11, s10
 800f8c0:	eee5 7a83 	vfma.f32	s15, s11, s6
 800f8c4:	ed82 6a00 	vstr	s12, [r2]
 800f8c8:	edc2 6a01 	vstr	s13, [r2, #4]
 800f8cc:	ed82 7a03 	vstr	s14, [r2, #12]
 800f8d0:	edc2 7a02 	vstr	s15, [r2, #8]
 800f8d4:	4770      	bx	lr
 800f8d6:	bf00      	nop

0800f8d8 <m_q2dcm_eml>:
 800f8d8:	b510      	push	{r4, lr}
 800f8da:	ed2d 8b06 	vpush	{d8-d10}
 800f8de:	edd0 9a01 	vldr	s19, [r0, #4]
 800f8e2:	ed90 9a03 	vldr	s18, [r0, #12]
 800f8e6:	ed90 8a00 	vldr	s16, [r0]
 800f8ea:	edd0 8a02 	vldr	s17, [r0, #8]
 800f8ee:	ee29 aaa9 	vmul.f32	s20, s19, s19
 800f8f2:	ee69 aa09 	vmul.f32	s21, s18, s18
 800f8f6:	460c      	mov	r4, r1
 800f8f8:	1d08      	adds	r0, r1, #4
 800f8fa:	2220      	movs	r2, #32
 800f8fc:	2100      	movs	r1, #0
 800f8fe:	f00a fd82 	bl	801a406 <memset>
 800f902:	eef1 4a48 	vneg.f32	s9, s16
 800f906:	eeb0 5a4a 	vmov.f32	s10, s20
 800f90a:	eef0 5a4a 	vmov.f32	s11, s20
 800f90e:	eeb0 6a6a 	vmov.f32	s12, s21
 800f912:	eee4 5a88 	vfma.f32	s11, s9, s16
 800f916:	ee98 5a08 	vfnms.f32	s10, s16, s16
 800f91a:	eea8 6aa8 	vfma.f32	s12, s17, s17
 800f91e:	eeb1 4a68 	vneg.f32	s8, s17
 800f922:	ee29 7aa8 	vmul.f32	s14, s19, s17
 800f926:	ee68 6a89 	vmul.f32	s13, s17, s18
 800f92a:	ee69 7a89 	vmul.f32	s15, s19, s18
 800f92e:	eea4 5a28 	vfma.f32	s10, s8, s17
 800f932:	eee4 5a28 	vfma.f32	s11, s8, s17
 800f936:	eea4 6a88 	vfma.f32	s12, s9, s16
 800f93a:	eeb0 4a47 	vmov.f32	s8, s14
 800f93e:	eea4 4a89 	vfma.f32	s8, s9, s18
 800f942:	eef0 3a66 	vmov.f32	s7, s13
 800f946:	eef0 4a67 	vmov.f32	s9, s15
 800f94a:	eee8 3a29 	vfma.f32	s7, s16, s19
 800f94e:	eed8 6a29 	vfnms.f32	s13, s16, s19
 800f952:	eea8 7a09 	vfma.f32	s14, s16, s18
 800f956:	eed8 4a28 	vfnms.f32	s9, s16, s17
 800f95a:	eee8 7a28 	vfma.f32	s15, s16, s17
 800f95e:	ee35 5a2a 	vadd.f32	s10, s10, s21
 800f962:	ee75 5aaa 	vadd.f32	s11, s11, s21
 800f966:	ee36 6a4a 	vsub.f32	s12, s12, s20
 800f96a:	ecbd 8b06 	vpop	{d8-d10}
 800f96e:	ee73 3aa3 	vadd.f32	s7, s7, s7
 800f972:	ee76 6aa6 	vadd.f32	s13, s13, s13
 800f976:	ee34 4a04 	vadd.f32	s8, s8, s8
 800f97a:	ee37 7a07 	vadd.f32	s14, s14, s14
 800f97e:	ee74 4aa4 	vadd.f32	s9, s9, s9
 800f982:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800f986:	ed84 5a00 	vstr	s10, [r4]
 800f98a:	edc4 5a04 	vstr	s11, [r4, #16]
 800f98e:	ed84 6a08 	vstr	s12, [r4, #32]
 800f992:	edc4 3a03 	vstr	s7, [r4, #12]
 800f996:	edc4 6a01 	vstr	s13, [r4, #4]
 800f99a:	ed84 4a05 	vstr	s8, [r4, #20]
 800f99e:	ed84 7a07 	vstr	s14, [r4, #28]
 800f9a2:	edc4 4a06 	vstr	s9, [r4, #24]
 800f9a6:	edc4 7a02 	vstr	s15, [r4, #8]
 800f9aa:	bd10      	pop	{r4, pc}

0800f9ac <MEMS_EmptyDataFrame>:
 800f9ac:	2300      	movs	r3, #0
 800f9ae:	8103      	strh	r3, [r0, #8]
 800f9b0:	60c3      	str	r3, [r0, #12]
 800f9b2:	4770      	bx	lr

0800f9b4 <MEMS_DataBuffInit>:
 800f9b4:	b510      	push	{r4, lr}
 800f9b6:	4604      	mov	r4, r0
 800f9b8:	f7ff fff8 	bl	800f9ac <MEMS_EmptyDataFrame>
 800f9bc:	2382      	movs	r3, #130	; 0x82
 800f9be:	8163      	strh	r3, [r4, #10]
 800f9c0:	4b01      	ldr	r3, [pc, #4]	; (800f9c8 <MEMS_DataBuffInit+0x14>)
 800f9c2:	6123      	str	r3, [r4, #16]
 800f9c4:	bd10      	pop	{r4, pc}
 800f9c6:	bf00      	nop
 800f9c8:	200013c8 	.word	0x200013c8

0800f9cc <MEMS_checkTimeToRun>:
 800f9cc:	7803      	ldrb	r3, [r0, #0]
 800f9ce:	b363      	cbz	r3, 800fa2a <MEMS_checkTimeToRun+0x5e>
 800f9d0:	890b      	ldrh	r3, [r1, #8]
 800f9d2:	894a      	ldrh	r2, [r1, #10]
 800f9d4:	429a      	cmp	r2, r3
 800f9d6:	d027      	beq.n	800fa28 <MEMS_checkTimeToRun+0x5c>
 800f9d8:	b430      	push	{r4, r5}
 800f9da:	b373      	cbz	r3, 800fa3a <MEMS_checkTimeToRun+0x6e>
 800f9dc:	68ca      	ldr	r2, [r1, #12]
 800f9de:	3201      	adds	r2, #1
 800f9e0:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800f9e4:	441a      	add	r2, r3
 800f9e6:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f9ea:	bf08      	it	eq
 800f9ec:	2200      	moveq	r2, #0
 800f9ee:	f502 531c 	add.w	r3, r2, #9984	; 0x2700
 800f9f2:	3310      	adds	r3, #16
 800f9f4:	6844      	ldr	r4, [r0, #4]
 800f9f6:	429c      	cmp	r4, r3
 800f9f8:	bf88      	it	hi
 800f9fa:	6042      	strhi	r2, [r0, #4]
 800f9fc:	8905      	ldrh	r5, [r0, #8]
 800f9fe:	6844      	ldr	r4, [r0, #4]
 800fa00:	442c      	add	r4, r5
 800fa02:	4294      	cmp	r4, r2
 800fa04:	d815      	bhi.n	800fa32 <MEMS_checkTimeToRun+0x66>
 800fa06:	890b      	ldrh	r3, [r1, #8]
 800fa08:	b18b      	cbz	r3, 800fa2e <MEMS_checkTimeToRun+0x62>
 800fa0a:	3b01      	subs	r3, #1
 800fa0c:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 800fa10:	68c9      	ldr	r1, [r1, #12]
 800fa12:	fb04 1313 	mls	r3, r4, r3, r1
 800fa16:	1ad3      	subs	r3, r2, r3
 800fa18:	b21b      	sxth	r3, r3
 800fa1a:	42ab      	cmp	r3, r5
 800fa1c:	bfb4      	ite	lt
 800fa1e:	2300      	movlt	r3, #0
 800fa20:	2301      	movge	r3, #1
 800fa22:	4618      	mov	r0, r3
 800fa24:	bc30      	pop	{r4, r5}
 800fa26:	4770      	bx	lr
 800fa28:	2301      	movs	r3, #1
 800fa2a:	4618      	mov	r0, r3
 800fa2c:	4770      	bx	lr
 800fa2e:	2300      	movs	r3, #0
 800fa30:	e7f1      	b.n	800fa16 <MEMS_checkTimeToRun+0x4a>
 800fa32:	2300      	movs	r3, #0
 800fa34:	4618      	mov	r0, r3
 800fa36:	bc30      	pop	{r4, r5}
 800fa38:	4770      	bx	lr
 800fa3a:	2200      	movs	r2, #0
 800fa3c:	e7d7      	b.n	800f9ee <MEMS_checkTimeToRun+0x22>
 800fa3e:	bf00      	nop

0800fa40 <updateProcBuffer_Temp>:
 800fa40:	f8d1 c000 	ldr.w	ip, [r1]
 800fa44:	790b      	ldrb	r3, [r1, #4]
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d05a      	beq.n	800fb00 <updateProcBuffer_Temp+0xc0>
 800fa4a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa4e:	2400      	movs	r4, #0
 800fa50:	f04f 087a 	mov.w	r8, #122	; 0x7a
 800fa54:	f06f 4560 	mvn.w	r5, #3758096384	; 0xe0000000
 800fa58:	f04f 0e01 	mov.w	lr, #1
 800fa5c:	fb08 1604 	mla	r6, r8, r4, r1
 800fa60:	79b3      	ldrb	r3, [r6, #6]
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d045      	beq.n	800faf2 <updateProcBuffer_Temp+0xb2>
 800fa66:	8943      	ldrh	r3, [r0, #10]
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d042      	beq.n	800faf2 <updateProcBuffer_Temp+0xb2>
 800fa6c:	8902      	ldrh	r2, [r0, #8]
 800fa6e:	4293      	cmp	r3, r2
 800fa70:	bf28      	it	cs
 800fa72:	4613      	movcs	r3, r2
 800fa74:	8103      	strh	r3, [r0, #8]
 800fa76:	79b3      	ldrb	r3, [r6, #6]
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d03a      	beq.n	800faf2 <updateProcBuffer_Temp+0xb2>
 800fa7c:	2200      	movs	r2, #0
 800fa7e:	fb08 f704 	mul.w	r7, r8, r4
 800fa82:	8903      	ldrh	r3, [r0, #8]
 800fa84:	3301      	adds	r3, #1
 800fa86:	b29b      	uxth	r3, r3
 800fa88:	f8b0 900a 	ldrh.w	r9, [r0, #10]
 800fa8c:	454b      	cmp	r3, r9
 800fa8e:	bf28      	it	cs
 800fa90:	464b      	movcs	r3, r9
 800fa92:	8103      	strh	r3, [r0, #8]
 800fa94:	eb03 0905 	add.w	r9, r3, r5
 800fa98:	6903      	ldr	r3, [r0, #16]
 800fa9a:	f803 e039 	strb.w	lr, [r3, r9, lsl #3]
 800fa9e:	eb07 09c2 	add.w	r9, r7, r2, lsl #3
 800faa2:	4489      	add	r9, r1
 800faa4:	f9b9 a00a 	ldrsh.w	sl, [r9, #10]
 800faa8:	8903      	ldrh	r3, [r0, #8]
 800faaa:	eb03 0b05 	add.w	fp, r3, r5
 800faae:	6903      	ldr	r3, [r0, #16]
 800fab0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800fab4:	f8a3 a002 	strh.w	sl, [r3, #2]
 800fab8:	f9b9 a00c 	ldrsh.w	sl, [r9, #12]
 800fabc:	8903      	ldrh	r3, [r0, #8]
 800fabe:	eb03 0b05 	add.w	fp, r3, r5
 800fac2:	6903      	ldr	r3, [r0, #16]
 800fac4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800fac8:	f8a3 a004 	strh.w	sl, [r3, #4]
 800facc:	f9b9 a00e 	ldrsh.w	sl, [r9, #14]
 800fad0:	8903      	ldrh	r3, [r0, #8]
 800fad2:	eb03 0b05 	add.w	fp, r3, r5
 800fad6:	6903      	ldr	r3, [r0, #16]
 800fad8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800fadc:	f8a3 a006 	strh.w	sl, [r3, #6]
 800fae0:	f8b9 3008 	ldrh.w	r3, [r9, #8]
 800fae4:	4463      	add	r3, ip
 800fae6:	60c3      	str	r3, [r0, #12]
 800fae8:	3201      	adds	r2, #1
 800faea:	b2d2      	uxtb	r2, r2
 800faec:	79b3      	ldrb	r3, [r6, #6]
 800faee:	4293      	cmp	r3, r2
 800faf0:	d8c7      	bhi.n	800fa82 <updateProcBuffer_Temp+0x42>
 800faf2:	3401      	adds	r4, #1
 800faf4:	b2e4      	uxtb	r4, r4
 800faf6:	790b      	ldrb	r3, [r1, #4]
 800faf8:	42a3      	cmp	r3, r4
 800fafa:	d8af      	bhi.n	800fa5c <updateProcBuffer_Temp+0x1c>
 800fafc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb00:	4770      	bx	lr
 800fb02:	bf00      	nop

0800fb04 <MEMS_getSensorData_I16>:
 800fb04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb08:	8903      	ldrh	r3, [r0, #8]
 800fb0a:	fa1f fe82 	uxth.w	lr, r2
 800fb0e:	4573      	cmp	r3, lr
 800fb10:	d95e      	bls.n	800fbd0 <MEMS_getSensorData_I16+0xcc>
 800fb12:	f8a1 e004 	strh.w	lr, [r1, #4]
 800fb16:	f890 c008 	ldrb.w	ip, [r0, #8]
 800fb1a:	ebac 0c02 	sub.w	ip, ip, r2
 800fb1e:	fa5f fc8c 	uxtb.w	ip, ip
 800fb22:	8903      	ldrh	r3, [r0, #8]
 800fb24:	3b01      	subs	r3, #1
 800fb26:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 800fb2a:	68c5      	ldr	r5, [r0, #12]
 800fb2c:	fb04 5313 	mls	r3, r4, r3, r5
 800fb30:	600b      	str	r3, [r1, #0]
 800fb32:	888b      	ldrh	r3, [r1, #4]
 800fb34:	b1db      	cbz	r3, 800fb6e <MEMS_getSensorData_I16+0x6a>
 800fb36:	2600      	movs	r6, #0
 800fb38:	00f7      	lsls	r7, r6, #3
 800fb3a:	6903      	ldr	r3, [r0, #16]
 800fb3c:	f813 4036 	ldrb.w	r4, [r3, r6, lsl #3]
 800fb40:	688b      	ldr	r3, [r1, #8]
 800fb42:	f803 4036 	strb.w	r4, [r3, r6, lsl #3]
 800fb46:	2500      	movs	r5, #0
 800fb48:	6903      	ldr	r3, [r0, #16]
 800fb4a:	19dc      	adds	r4, r3, r7
 800fb4c:	ea4f 0845 	mov.w	r8, r5, lsl #1
 800fb50:	4444      	add	r4, r8
 800fb52:	f9b4 4002 	ldrsh.w	r4, [r4, #2]
 800fb56:	688b      	ldr	r3, [r1, #8]
 800fb58:	443b      	add	r3, r7
 800fb5a:	4443      	add	r3, r8
 800fb5c:	805c      	strh	r4, [r3, #2]
 800fb5e:	3501      	adds	r5, #1
 800fb60:	2d03      	cmp	r5, #3
 800fb62:	d1f1      	bne.n	800fb48 <MEMS_getSensorData_I16+0x44>
 800fb64:	3601      	adds	r6, #1
 800fb66:	b2f6      	uxtb	r6, r6
 800fb68:	888b      	ldrh	r3, [r1, #4]
 800fb6a:	42b3      	cmp	r3, r6
 800fb6c:	d8e4      	bhi.n	800fb38 <MEMS_getSensorData_I16+0x34>
 800fb6e:	8903      	ldrh	r3, [r0, #8]
 800fb70:	459e      	cmp	lr, r3
 800fb72:	d22a      	bcs.n	800fbca <MEMS_getSensorData_I16+0xc6>
 800fb74:	eba3 0e0e 	sub.w	lr, r3, lr
 800fb78:	f8a0 e008 	strh.w	lr, [r0, #8]
 800fb7c:	f1bc 0f00 	cmp.w	ip, #0
 800fb80:	d021      	beq.n	800fbc6 <MEMS_getSensorData_I16+0xc2>
 800fb82:	f10c 3cff 	add.w	ip, ip, #4294967295
 800fb86:	fa5f fc8c 	uxtb.w	ip, ip
 800fb8a:	f10c 0c01 	add.w	ip, ip, #1
 800fb8e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800fb92:	00d2      	lsls	r2, r2, #3
 800fb94:	2600      	movs	r6, #0
 800fb96:	46b6      	mov	lr, r6
 800fb98:	6903      	ldr	r3, [r0, #16]
 800fb9a:	1997      	adds	r7, r2, r6
 800fb9c:	5dd9      	ldrb	r1, [r3, r7]
 800fb9e:	5599      	strb	r1, [r3, r6]
 800fba0:	2100      	movs	r1, #0
 800fba2:	6903      	ldr	r3, [r0, #16]
 800fba4:	19dc      	adds	r4, r3, r7
 800fba6:	004d      	lsls	r5, r1, #1
 800fba8:	442c      	add	r4, r5
 800fbaa:	f9b4 4002 	ldrsh.w	r4, [r4, #2]
 800fbae:	4433      	add	r3, r6
 800fbb0:	442b      	add	r3, r5
 800fbb2:	805c      	strh	r4, [r3, #2]
 800fbb4:	3101      	adds	r1, #1
 800fbb6:	2903      	cmp	r1, #3
 800fbb8:	d1f3      	bne.n	800fba2 <MEMS_getSensorData_I16+0x9e>
 800fbba:	6903      	ldr	r3, [r0, #16]
 800fbbc:	f803 e007 	strb.w	lr, [r3, r7]
 800fbc0:	3608      	adds	r6, #8
 800fbc2:	4566      	cmp	r6, ip
 800fbc4:	d1e8      	bne.n	800fb98 <MEMS_getSensorData_I16+0x94>
 800fbc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbca:	2300      	movs	r3, #0
 800fbcc:	8103      	strh	r3, [r0, #8]
 800fbce:	e7d5      	b.n	800fb7c <MEMS_getSensorData_I16+0x78>
 800fbd0:	808b      	strh	r3, [r1, #4]
 800fbd2:	f04f 0c00 	mov.w	ip, #0
 800fbd6:	e7a4      	b.n	800fb22 <MEMS_getSensorData_I16+0x1e>

0800fbd8 <m_dcm2q_eml>:
 800fbd8:	ed90 7a04 	vldr	s14, [r0, #16]
 800fbdc:	edd0 7a00 	vldr	s15, [r0]
 800fbe0:	edd0 6a08 	vldr	s13, [r0, #32]
 800fbe4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fbe8:	b538      	push	{r3, r4, r5, lr}
 800fbea:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800fbee:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800fbf2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fbf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbfa:	ed2d 8b02 	vpush	{d8}
 800fbfe:	4604      	mov	r4, r0
 800fc00:	460d      	mov	r5, r1
 800fc02:	f340 80bc 	ble.w	800fd7e <m_dcm2q_eml+0x1a6>
 800fc06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fc0a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fc0e:	ee17 0a90 	vmov	r0, s15
 800fc12:	f7f0 fca1 	bl	8000558 <__aeabi_f2d>
 800fc16:	f00b fd3d 	bl	801b694 <sqrt>
 800fc1a:	f7f0 ffcd 	bl	8000bb8 <__aeabi_d2f>
 800fc1e:	ee07 0a10 	vmov	s14, r0
 800fc22:	edd4 7a05 	vldr	s15, [r4, #20]
 800fc26:	edd4 5a07 	vldr	s11, [r4, #28]
 800fc2a:	ed94 5a06 	vldr	s10, [r4, #24]
 800fc2e:	ed94 6a02 	vldr	s12, [r4, #8]
 800fc32:	edd4 6a03 	vldr	s13, [r4, #12]
 800fc36:	edd4 4a01 	vldr	s9, [r4, #4]
 800fc3a:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800fc3e:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800fc42:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 800fc46:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 800fc4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc4e:	bf54      	ite	pl
 800fc50:	eef0 5a48 	vmovpl.f32	s11, s16
 800fc54:	eef0 5a67 	vmovmi.f32	s11, s15
 800fc58:	ee27 7a25 	vmul.f32	s14, s14, s11
 800fc5c:	ee36 6a45 	vsub.f32	s12, s12, s10
 800fc60:	ed85 7a00 	vstr	s14, [r5]
 800fc64:	ed94 7a04 	vldr	s14, [r4, #16]
 800fc68:	ed94 5a00 	vldr	s10, [r4]
 800fc6c:	edd4 5a08 	vldr	s11, [r4, #32]
 800fc70:	ee37 7a45 	vsub.f32	s14, s14, s10
 800fc74:	ee76 6ae4 	vsub.f32	s13, s13, s9
 800fc78:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 800fc7c:	ee37 7a65 	vsub.f32	s14, s14, s11
 800fc80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc84:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800fc88:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 800fc8c:	bf54      	ite	pl
 800fc8e:	eef0 8a48 	vmovpl.f32	s17, s16
 800fc92:	eef0 8a67 	vmovmi.f32	s17, s15
 800fc96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc9a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800fc9e:	bf48      	it	mi
 800fca0:	eeb0 8a67 	vmovmi.f32	s16, s15
 800fca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fca8:	dd66      	ble.n	800fd78 <m_dcm2q_eml+0x1a0>
 800fcaa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800fcae:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fcb2:	ee17 0a90 	vmov	r0, s15
 800fcb6:	f7f0 fc4f 	bl	8000558 <__aeabi_f2d>
 800fcba:	f00b fceb 	bl	801b694 <sqrt>
 800fcbe:	f7f0 ff7b 	bl	8000bb8 <__aeabi_d2f>
 800fcc2:	ee07 0a90 	vmov	s15, r0
 800fcc6:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800fcca:	edc5 7a01 	vstr	s15, [r5, #4]
 800fcce:	edd4 6a04 	vldr	s13, [r4, #16]
 800fcd2:	ed94 7a00 	vldr	s14, [r4]
 800fcd6:	edd4 7a08 	vldr	s15, [r4, #32]
 800fcda:	ee37 7a26 	vadd.f32	s14, s14, s13
 800fcde:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 800fce2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fce6:	eef4 7ae6 	vcmpe.f32	s15, s13
 800fcea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcee:	dd40      	ble.n	800fd72 <m_dcm2q_eml+0x19a>
 800fcf0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fcf4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fcf8:	ee17 0a90 	vmov	r0, s15
 800fcfc:	f7f0 fc2c 	bl	8000558 <__aeabi_f2d>
 800fd00:	f00b fcc8 	bl	801b694 <sqrt>
 800fd04:	f7f0 ff58 	bl	8000bb8 <__aeabi_d2f>
 800fd08:	ee07 0a90 	vmov	s15, r0
 800fd0c:	ee67 7a88 	vmul.f32	s15, s15, s16
 800fd10:	edc5 7a02 	vstr	s15, [r5, #8]
 800fd14:	ed94 7a04 	vldr	s14, [r4, #16]
 800fd18:	edd4 7a00 	vldr	s15, [r4]
 800fd1c:	edd4 6a08 	vldr	s13, [r4, #32]
 800fd20:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fd24:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800fd28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fd2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fd30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd34:	dd16      	ble.n	800fd64 <m_dcm2q_eml+0x18c>
 800fd36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fd3a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fd3e:	ee17 0a90 	vmov	r0, s15
 800fd42:	f7f0 fc09 	bl	8000558 <__aeabi_f2d>
 800fd46:	f00b fca5 	bl	801b694 <sqrt>
 800fd4a:	f7f0 ff35 	bl	8000bb8 <__aeabi_d2f>
 800fd4e:	ecbd 8b02 	vpop	{d8}
 800fd52:	ee07 0a10 	vmov	s14, r0
 800fd56:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800fd5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fd5e:	edc5 7a03 	vstr	s15, [r5, #12]
 800fd62:	bd38      	pop	{r3, r4, r5, pc}
 800fd64:	ecbd 8b02 	vpop	{d8}
 800fd68:	eddf 7a06 	vldr	s15, [pc, #24]	; 800fd84 <m_dcm2q_eml+0x1ac>
 800fd6c:	edc5 7a03 	vstr	s15, [r5, #12]
 800fd70:	bd38      	pop	{r3, r4, r5, pc}
 800fd72:	eddf 7a04 	vldr	s15, [pc, #16]	; 800fd84 <m_dcm2q_eml+0x1ac>
 800fd76:	e7cb      	b.n	800fd10 <m_dcm2q_eml+0x138>
 800fd78:	eddf 7a02 	vldr	s15, [pc, #8]	; 800fd84 <m_dcm2q_eml+0x1ac>
 800fd7c:	e7a5      	b.n	800fcca <m_dcm2q_eml+0xf2>
 800fd7e:	ed9f 7a01 	vldr	s14, [pc, #4]	; 800fd84 <m_dcm2q_eml+0x1ac>
 800fd82:	e74e      	b.n	800fc22 <m_dcm2q_eml+0x4a>
 800fd84:	00000000 	.word	0x00000000

0800fd88 <SpacePointGyroProp>:
 800fd88:	b570      	push	{r4, r5, r6, lr}
 800fd8a:	ed92 6a01 	vldr	s12, [r2, #4]
 800fd8e:	ed92 7a00 	vldr	s14, [r2]
 800fd92:	edd2 6a02 	vldr	s13, [r2, #8]
 800fd96:	edd1 7a02 	vldr	s15, [r1, #8]
 800fd9a:	ed2d 8b04 	vpush	{d8-d9}
 800fd9e:	edd1 8a01 	vldr	s17, [r1, #4]
 800fda2:	ed9f 8a3c 	vldr	s16, [pc, #240]	; 800fe94 <SpacePointGyroProp+0x10c>
 800fda6:	ed91 9a00 	vldr	s18, [r1]
 800fdaa:	9d08      	ldr	r5, [sp, #32]
 800fdac:	ee20 8a08 	vmul.f32	s16, s0, s16
 800fdb0:	ee78 8ac6 	vsub.f32	s17, s17, s12
 800fdb4:	ee39 9a47 	vsub.f32	s18, s18, s14
 800fdb8:	ee68 8a88 	vmul.f32	s17, s17, s16
 800fdbc:	ee29 9a08 	vmul.f32	s18, s18, s16
 800fdc0:	ee28 7aa8 	vmul.f32	s14, s17, s17
 800fdc4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800fdc8:	eea9 7a09 	vfma.f32	s14, s18, s18
 800fdcc:	4606      	mov	r6, r0
 800fdce:	461c      	mov	r4, r3
 800fdd0:	ee27 8a88 	vmul.f32	s16, s15, s16
 800fdd4:	eef0 7a47 	vmov.f32	s15, s14
 800fdd8:	eee8 7a08 	vfma.f32	s15, s16, s16
 800fddc:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 800fde0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800fde4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fde8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fdec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdf0:	d445      	bmi.n	800fe7e <SpacePointGyroProp+0xf6>
 800fdf2:	2000      	movs	r0, #0
 800fdf4:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800fdf8:	ee29 9a00 	vmul.f32	s18, s18, s0
 800fdfc:	ee68 8a80 	vmul.f32	s17, s17, s0
 800fe00:	ee28 8a00 	vmul.f32	s16, s16, s0
 800fe04:	4622      	mov	r2, r4
 800fe06:	60e8      	str	r0, [r5, #12]
 800fe08:	4631      	mov	r1, r6
 800fe0a:	ed85 9a00 	vstr	s18, [r5]
 800fe0e:	edc5 8a01 	vstr	s17, [r5, #4]
 800fe12:	ed85 8a02 	vstr	s16, [r5, #8]
 800fe16:	4628      	mov	r0, r5
 800fe18:	f7ff fd1e 	bl	800f858 <m_qmult_eml>
 800fe1c:	edd4 8a02 	vldr	s17, [r4, #8]
 800fe20:	ed94 9a01 	vldr	s18, [r4, #4]
 800fe24:	ed94 8a03 	vldr	s16, [r4, #12]
 800fe28:	edd4 9a00 	vldr	s19, [r4]
 800fe2c:	ee68 7aa8 	vmul.f32	s15, s17, s17
 800fe30:	eee9 7a09 	vfma.f32	s15, s18, s18
 800fe34:	eee8 7a08 	vfma.f32	s15, s16, s16
 800fe38:	eee9 7aa9 	vfma.f32	s15, s19, s19
 800fe3c:	ee17 0a90 	vmov	r0, s15
 800fe40:	f7f0 fb8a 	bl	8000558 <__aeabi_f2d>
 800fe44:	f00b fc26 	bl	801b694 <sqrt>
 800fe48:	f7f0 feb6 	bl	8000bb8 <__aeabi_d2f>
 800fe4c:	ee07 0a90 	vmov	s15, r0
 800fe50:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fe54:	eec7 7a27 	vdiv.f32	s15, s14, s15
 800fe58:	ee69 9aa7 	vmul.f32	s19, s19, s15
 800fe5c:	ee29 9a27 	vmul.f32	s18, s18, s15
 800fe60:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800fe64:	ee28 8a27 	vmul.f32	s16, s16, s15
 800fe68:	edc4 9a00 	vstr	s19, [r4]
 800fe6c:	ed84 9a01 	vstr	s18, [r4, #4]
 800fe70:	edc4 8a02 	vstr	s17, [r4, #8]
 800fe74:	ed84 8a03 	vstr	s16, [r4, #12]
 800fe78:	ecbd 8b04 	vpop	{d8-d9}
 800fe7c:	bd70      	pop	{r4, r5, r6, pc}
 800fe7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fe82:	ee17 0a90 	vmov	r0, s15
 800fe86:	f7f0 fb67 	bl	8000558 <__aeabi_f2d>
 800fe8a:	f00b fc03 	bl	801b694 <sqrt>
 800fe8e:	f7f0 fe93 	bl	8000bb8 <__aeabi_d2f>
 800fe92:	e7af      	b.n	800fdf4 <SpacePointGyroProp+0x6c>
 800fe94:	3c8efa35 	.word	0x3c8efa35

0800fe98 <quatErr2EulerErr>:
 800fe98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fe9c:	2300      	movs	r3, #0
 800fe9e:	ed2d 8b04 	vpush	{d8-d9}
 800fea2:	6013      	str	r3, [r2, #0]
 800fea4:	6053      	str	r3, [r2, #4]
 800fea6:	6093      	str	r3, [r2, #8]
 800fea8:	ed9f 8a71 	vldr	s16, [pc, #452]	; 8010070 <quatErr2EulerErr+0x1d8>
 800feac:	edd0 7a01 	vldr	s15, [r0, #4]
 800feb0:	ee67 7a88 	vmul.f32	s15, s15, s16
 800feb4:	4606      	mov	r6, r0
 800feb6:	ee17 0a90 	vmov	r0, s15
 800feba:	460c      	mov	r4, r1
 800febc:	4615      	mov	r5, r2
 800febe:	f00b fad3 	bl	801b468 <cosf>
 800fec2:	edd6 8a02 	vldr	s17, [r6, #8]
 800fec6:	ee68 8a88 	vmul.f32	s17, s17, s16
 800feca:	ee09 0a10 	vmov	s18, r0
 800fece:	ee18 0a90 	vmov	r0, s17
 800fed2:	f00b fb29 	bl	801b528 <sinf>
 800fed6:	ee08 0a10 	vmov	s16, r0
 800feda:	ee18 0a90 	vmov	r0, s17
 800fede:	f00b fac3 	bl	801b468 <cosf>
 800fee2:	ee06 0a10 	vmov	s12, r0
 800fee6:	edd4 7a01 	vldr	s15, [r4, #4]
 800feea:	edd4 6a02 	vldr	s13, [r4, #8]
 800feee:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8010074 <quatErr2EulerErr+0x1dc>
 800fef2:	ee66 8a06 	vmul.f32	s17, s12, s12
 800fef6:	ee28 8a08 	vmul.f32	s16, s16, s16
 800fefa:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800fefe:	eee8 7a26 	vfma.f32	s15, s16, s13
 800ff02:	eef1 6ae7 	vsqrt.f32	s13, s15
 800ff06:	ee66 7a87 	vmul.f32	s15, s13, s14
 800ff0a:	ee17 0a90 	vmov	r0, s15
 800ff0e:	f7f0 fb23 	bl	8000558 <__aeabi_f2d>
 800ff12:	2200      	movs	r2, #0
 800ff14:	4b58      	ldr	r3, [pc, #352]	; (8010078 <quatErr2EulerErr+0x1e0>)
 800ff16:	4680      	mov	r8, r0
 800ff18:	4689      	mov	r9, r1
 800ff1a:	f7f0 fdf1 	bl	8000b00 <__aeabi_dcmple>
 800ff1e:	b918      	cbnz	r0, 800ff28 <quatErr2EulerErr+0x90>
 800ff20:	f8df 9154 	ldr.w	r9, [pc, #340]	; 8010078 <quatErr2EulerErr+0x1e0>
 800ff24:	f04f 0800 	mov.w	r8, #0
 800ff28:	4649      	mov	r1, r9
 800ff2a:	4640      	mov	r0, r8
 800ff2c:	f7f0 fe44 	bl	8000bb8 <__aeabi_d2f>
 800ff30:	f7f0 fb12 	bl	8000558 <__aeabi_f2d>
 800ff34:	2200      	movs	r2, #0
 800ff36:	4b51      	ldr	r3, [pc, #324]	; (801007c <quatErr2EulerErr+0x1e4>)
 800ff38:	4680      	mov	r8, r0
 800ff3a:	4689      	mov	r9, r1
 800ff3c:	f7f0 fdea 	bl	8000b14 <__aeabi_dcmpge>
 800ff40:	b918      	cbnz	r0, 800ff4a <quatErr2EulerErr+0xb2>
 800ff42:	f8df 9138 	ldr.w	r9, [pc, #312]	; 801007c <quatErr2EulerErr+0x1e4>
 800ff46:	f04f 0800 	mov.w	r8, #0
 800ff4a:	4649      	mov	r1, r9
 800ff4c:	4640      	mov	r0, r8
 800ff4e:	f7f0 fe33 	bl	8000bb8 <__aeabi_d2f>
 800ff52:	6068      	str	r0, [r5, #4]
 800ff54:	edd4 7a02 	vldr	s15, [r4, #8]
 800ff58:	ed94 6a01 	vldr	s12, [r4, #4]
 800ff5c:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8010080 <quatErr2EulerErr+0x1e8>
 800ff60:	eddf 6a44 	vldr	s13, [pc, #272]	; 8010074 <quatErr2EulerErr+0x1dc>
 800ff64:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800ff68:	eea9 7a09 	vfma.f32	s14, s18, s18
 800ff6c:	eee8 7a06 	vfma.f32	s15, s16, s12
 800ff70:	ee87 6a87 	vdiv.f32	s12, s15, s14
 800ff74:	eef1 7ac6 	vsqrt.f32	s15, s12
 800ff78:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ff7c:	ee17 0a90 	vmov	r0, s15
 800ff80:	f7f0 faea 	bl	8000558 <__aeabi_f2d>
 800ff84:	2200      	movs	r2, #0
 800ff86:	4b3f      	ldr	r3, [pc, #252]	; (8010084 <quatErr2EulerErr+0x1ec>)
 800ff88:	4680      	mov	r8, r0
 800ff8a:	4689      	mov	r9, r1
 800ff8c:	f7f0 fdb8 	bl	8000b00 <__aeabi_dcmple>
 800ff90:	b918      	cbnz	r0, 800ff9a <quatErr2EulerErr+0x102>
 800ff92:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 8010084 <quatErr2EulerErr+0x1ec>
 800ff96:	f04f 0800 	mov.w	r8, #0
 800ff9a:	4649      	mov	r1, r9
 800ff9c:	4640      	mov	r0, r8
 800ff9e:	f7f0 fe0b 	bl	8000bb8 <__aeabi_d2f>
 800ffa2:	f7f0 fad9 	bl	8000558 <__aeabi_f2d>
 800ffa6:	2200      	movs	r2, #0
 800ffa8:	4b34      	ldr	r3, [pc, #208]	; (801007c <quatErr2EulerErr+0x1e4>)
 800ffaa:	4680      	mov	r8, r0
 800ffac:	4689      	mov	r9, r1
 800ffae:	f7f0 fdb1 	bl	8000b14 <__aeabi_dcmpge>
 800ffb2:	b918      	cbnz	r0, 800ffbc <quatErr2EulerErr+0x124>
 800ffb4:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 801007c <quatErr2EulerErr+0x1e4>
 800ffb8:	f04f 0800 	mov.w	r8, #0
 800ffbc:	4640      	mov	r0, r8
 800ffbe:	4649      	mov	r1, r9
 800ffc0:	f7f0 fdfa 	bl	8000bb8 <__aeabi_d2f>
 800ffc4:	6028      	str	r0, [r5, #0]
 800ffc6:	edd6 7a01 	vldr	s15, [r6, #4]
 800ffca:	eddf 5a29 	vldr	s11, [pc, #164]	; 8010070 <quatErr2EulerErr+0x1d8>
 800ffce:	edd4 6a02 	vldr	s13, [r4, #8]
 800ffd2:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8010088 <quatErr2EulerErr+0x1f0>
 800ffd6:	ed94 6a01 	vldr	s12, [r4, #4]
 800ffda:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800ffde:	ee28 8a26 	vmul.f32	s16, s16, s13
 800ffe2:	eef0 6ae7 	vabs.f32	s13, s15
 800ffe6:	eef4 6ac7 	vcmpe.f32	s13, s14
 800ffea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffee:	eea8 8a86 	vfma.f32	s16, s17, s12
 800fff2:	d430      	bmi.n	8010056 <quatErr2EulerErr+0x1be>
 800fff4:	ed9f 7a25 	vldr	s14, [pc, #148]	; 801008c <quatErr2EulerErr+0x1f4>
 800fff8:	edd4 7a00 	vldr	s15, [r4]
 800fffc:	eee8 7a07 	vfma.f32	s15, s16, s14
 8010000:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8010004:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8010074 <quatErr2EulerErr+0x1dc>
 8010008:	ee67 7a27 	vmul.f32	s15, s14, s15
 801000c:	ee17 0a90 	vmov	r0, s15
 8010010:	f7f0 faa2 	bl	8000558 <__aeabi_f2d>
 8010014:	2200      	movs	r2, #0
 8010016:	4b1b      	ldr	r3, [pc, #108]	; (8010084 <quatErr2EulerErr+0x1ec>)
 8010018:	4606      	mov	r6, r0
 801001a:	460f      	mov	r7, r1
 801001c:	f7f0 fd70 	bl	8000b00 <__aeabi_dcmple>
 8010020:	b908      	cbnz	r0, 8010026 <quatErr2EulerErr+0x18e>
 8010022:	4f18      	ldr	r7, [pc, #96]	; (8010084 <quatErr2EulerErr+0x1ec>)
 8010024:	2600      	movs	r6, #0
 8010026:	4639      	mov	r1, r7
 8010028:	4630      	mov	r0, r6
 801002a:	f7f0 fdc5 	bl	8000bb8 <__aeabi_d2f>
 801002e:	f7f0 fa93 	bl	8000558 <__aeabi_f2d>
 8010032:	2200      	movs	r2, #0
 8010034:	4b11      	ldr	r3, [pc, #68]	; (801007c <quatErr2EulerErr+0x1e4>)
 8010036:	4606      	mov	r6, r0
 8010038:	460f      	mov	r7, r1
 801003a:	f7f0 fd6b 	bl	8000b14 <__aeabi_dcmpge>
 801003e:	b908      	cbnz	r0, 8010044 <quatErr2EulerErr+0x1ac>
 8010040:	4f0e      	ldr	r7, [pc, #56]	; (801007c <quatErr2EulerErr+0x1e4>)
 8010042:	2600      	movs	r6, #0
 8010044:	4630      	mov	r0, r6
 8010046:	4639      	mov	r1, r7
 8010048:	f7f0 fdb6 	bl	8000bb8 <__aeabi_d2f>
 801004c:	ecbd 8b04 	vpop	{d8-d9}
 8010050:	60a8      	str	r0, [r5, #8]
 8010052:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010056:	ee17 0a90 	vmov	r0, s15
 801005a:	f00b fa9f 	bl	801b59c <tanf>
 801005e:	ee07 0a10 	vmov	s14, r0
 8010062:	edd4 7a00 	vldr	s15, [r4]
 8010066:	ee27 7a07 	vmul.f32	s14, s14, s14
 801006a:	eee7 7a08 	vfma.f32	s15, s14, s16
 801006e:	e7c7      	b.n	8010000 <quatErr2EulerErr+0x168>
 8010070:	3c8efa35 	.word	0x3c8efa35
 8010074:	42e52ee1 	.word	0x42e52ee1
 8010078:	40568000 	.word	0x40568000
 801007c:	3ff00000 	.word	0x3ff00000
 8010080:	3a83126f 	.word	0x3a83126f
 8010084:	40668000 	.word	0x40668000
 8010088:	3fbc430e 	.word	0x3fbc430e
 801008c:	42c6ab07 	.word	0x42c6ab07

08010090 <rt_InitInfAndNaN.isra.3>:
 8010090:	4b05      	ldr	r3, [pc, #20]	; (80100a8 <rt_InitInfAndNaN.isra.3+0x18>)
 8010092:	4a06      	ldr	r2, [pc, #24]	; (80100ac <rt_InitInfAndNaN.isra.3+0x1c>)
 8010094:	f503 6182 	add.w	r1, r3, #1040	; 0x410
 8010098:	f203 4314 	addw	r3, r3, #1044	; 0x414
 801009c:	f04f 40ff 	mov.w	r0, #2139095040	; 0x7f800000
 80100a0:	6008      	str	r0, [r1, #0]
 80100a2:	601a      	str	r2, [r3, #0]
 80100a4:	4770      	bx	lr
 80100a6:	bf00      	nop
 80100a8:	200013c8 	.word	0x200013c8
 80100ac:	ff800000 	.word	0xff800000

080100b0 <MEMSloadFromNVM.isra.10>:
 80100b0:	f7fe b85f 	b.w	800e172 <MotionFX_LoadMagCalFromNVM>

080100b4 <MEMSLoadMagCalNVM>:
 80100b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80100b6:	b097      	sub	sp, #92	; 0x5c
 80100b8:	4604      	mov	r4, r0
 80100ba:	2301      	movs	r3, #1
 80100bc:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
 80100c0:	a916      	add	r1, sp, #88	; 0x58
 80100c2:	2300      	movs	r3, #0
 80100c4:	f801 3d54 	strb.w	r3, [r1, #-84]!
 80100c8:	2054      	movs	r0, #84	; 0x54
 80100ca:	f7ff fff1 	bl	80100b0 <MEMSloadFromNVM.isra.10>
 80100ce:	2801      	cmp	r0, #1
 80100d0:	d101      	bne.n	80100d6 <MEMSLoadMagCalNVM+0x22>
 80100d2:	b017      	add	sp, #92	; 0x5c
 80100d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80100d6:	2300      	movs	r3, #0
 80100d8:	f88d 3004 	strb.w	r3, [sp, #4]
 80100dc:	9d02      	ldr	r5, [sp, #8]
 80100de:	2d00      	cmp	r5, #0
 80100e0:	d0f7      	beq.n	80100d2 <MEMSLoadMagCalNVM+0x1e>
 80100e2:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d0f3      	beq.n	80100d2 <MEMSLoadMagCalNVM+0x1e>
 80100ea:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d0ef      	beq.n	80100d2 <MEMSLoadMagCalNVM+0x1e>
 80100f2:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 80100f6:	429a      	cmp	r2, r3
 80100f8:	d3eb      	bcc.n	80100d2 <MEMSLoadMagCalNVM+0x1e>
 80100fa:	f10d 0c0c 	add.w	ip, sp, #12
 80100fe:	f104 066c 	add.w	r6, r4, #108	; 0x6c
 8010102:	f10d 0e3c 	add.w	lr, sp, #60	; 0x3c
 8010106:	4667      	mov	r7, ip
 8010108:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801010a:	6030      	str	r0, [r6, #0]
 801010c:	6071      	str	r1, [r6, #4]
 801010e:	60b2      	str	r2, [r6, #8]
 8010110:	60f3      	str	r3, [r6, #12]
 8010112:	46bc      	mov	ip, r7
 8010114:	3610      	adds	r6, #16
 8010116:	4577      	cmp	r7, lr
 8010118:	d1f5      	bne.n	8010106 <MEMSLoadMagCalNVM+0x52>
 801011a:	6838      	ldr	r0, [r7, #0]
 801011c:	6030      	str	r0, [r6, #0]
 801011e:	61e5      	str	r5, [r4, #28]
 8010120:	ad10      	add	r5, sp, #64	; 0x40
 8010122:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010124:	6560      	str	r0, [r4, #84]	; 0x54
 8010126:	65a1      	str	r1, [r4, #88]	; 0x58
 8010128:	65e2      	str	r2, [r4, #92]	; 0x5c
 801012a:	6623      	str	r3, [r4, #96]	; 0x60
 801012c:	cd03      	ldmia	r5!, {r0, r1}
 801012e:	6660      	str	r0, [r4, #100]	; 0x64
 8010130:	66a1      	str	r1, [r4, #104]	; 0x68
 8010132:	e7ce      	b.n	80100d2 <MEMSLoadMagCalNVM+0x1e>

08010134 <MEMSsaveInNVM.isra.11>:
 8010134:	f7fe b82a 	b.w	800e18c <MotionFX_SaveMagCalInNVM>

08010138 <MEMSSaveMagCalNVM>:
 8010138:	b5f0      	push	{r4, r5, r6, r7, lr}
 801013a:	b097      	sub	sp, #92	; 0x5c
 801013c:	4606      	mov	r6, r0
 801013e:	2301      	movs	r3, #1
 8010140:	f88d 3004 	strb.w	r3, [sp, #4]
 8010144:	f100 0458 	add.w	r4, r0, #88	; 0x58
 8010148:	af03      	add	r7, sp, #12
 801014a:	f100 0c88 	add.w	ip, r0, #136	; 0x88
 801014e:	463d      	mov	r5, r7
 8010150:	6820      	ldr	r0, [r4, #0]
 8010152:	6861      	ldr	r1, [r4, #4]
 8010154:	68a2      	ldr	r2, [r4, #8]
 8010156:	68e3      	ldr	r3, [r4, #12]
 8010158:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801015a:	3410      	adds	r4, #16
 801015c:	462f      	mov	r7, r5
 801015e:	4564      	cmp	r4, ip
 8010160:	d1f5      	bne.n	801014e <MEMSSaveMagCalNVM+0x16>
 8010162:	6820      	ldr	r0, [r4, #0]
 8010164:	6028      	str	r0, [r5, #0]
 8010166:	68b3      	ldr	r3, [r6, #8]
 8010168:	9302      	str	r3, [sp, #8]
 801016a:	ac10      	add	r4, sp, #64	; 0x40
 801016c:	f856 0f40 	ldr.w	r0, [r6, #64]!
 8010170:	6871      	ldr	r1, [r6, #4]
 8010172:	68b2      	ldr	r2, [r6, #8]
 8010174:	68f3      	ldr	r3, [r6, #12]
 8010176:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010178:	6930      	ldr	r0, [r6, #16]
 801017a:	6971      	ldr	r1, [r6, #20]
 801017c:	c403      	stmia	r4!, {r0, r1}
 801017e:	a901      	add	r1, sp, #4
 8010180:	2054      	movs	r0, #84	; 0x54
 8010182:	f7ff ffd7 	bl	8010134 <MEMSsaveInNVM.isra.11>
 8010186:	b017      	add	sp, #92	; 0x5c
 8010188:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801018a:	bf00      	nop

0801018c <llEvaluate.constprop.23>:
 801018c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801018e:	b085      	sub	sp, #20
 8010190:	4606      	mov	r6, r0
 8010192:	f102 0e10 	add.w	lr, r2, #16
 8010196:	4607      	mov	r7, r0
 8010198:	4604      	mov	r4, r0
 801019a:	466b      	mov	r3, sp
 801019c:	f852 5b04 	ldr.w	r5, [r2], #4
 80101a0:	601d      	str	r5, [r3, #0]
 80101a2:	46ec      	mov	ip, sp
 80101a4:	463d      	mov	r5, r7
 80101a6:	42a5      	cmp	r5, r4
 80101a8:	edd3 7a00 	vldr	s15, [r3]
 80101ac:	d008      	beq.n	80101c0 <llEvaluate.constprop.23+0x34>
 80101ae:	ecbc 7a01 	vldmia	ip!, {s14}
 80101b2:	ecf5 6a01 	vldmia	r5!, {s13}
 80101b6:	eee6 7ac7 	vfms.f32	s15, s13, s14
 80101ba:	edc3 7a00 	vstr	s15, [r3]
 80101be:	e7f2      	b.n	80101a6 <llEvaluate.constprop.23+0x1a>
 80101c0:	edd5 6a00 	vldr	s13, [r5]
 80101c4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80101c8:	462c      	mov	r4, r5
 80101ca:	4572      	cmp	r2, lr
 80101cc:	f107 0710 	add.w	r7, r7, #16
 80101d0:	f104 0414 	add.w	r4, r4, #20
 80101d4:	eca3 7a01 	vstmia	r3!, {s14}
 80101d8:	d1e0      	bne.n	801019c <llEvaluate.constprop.23+0x10>
 80101da:	f10d 0c10 	add.w	ip, sp, #16
 80101de:	f101 0410 	add.w	r4, r1, #16
 80101e2:	2203      	movs	r2, #3
 80101e4:	f85c 5d04 	ldr.w	r5, [ip, #-4]!
 80101e8:	f844 5c04 	str.w	r5, [r4, #-4]
 80101ec:	1c53      	adds	r3, r2, #1
 80101ee:	b25b      	sxtb	r3, r3
 80101f0:	ea4f 0e82 	mov.w	lr, r2, lsl #2
 80101f4:	b21d      	sxth	r5, r3
 80101f6:	eb00 1705 	add.w	r7, r0, r5, lsl #4
 80101fa:	2b04      	cmp	r3, #4
 80101fc:	4477      	add	r7, lr
 80101fe:	eb01 0585 	add.w	r5, r1, r5, lsl #2
 8010202:	ed54 7a01 	vldr	s15, [r4, #-4]
 8010206:	d00a      	beq.n	801021e <llEvaluate.constprop.23+0x92>
 8010208:	edd7 6a00 	vldr	s13, [r7]
 801020c:	ed95 7a00 	vldr	s14, [r5]
 8010210:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8010214:	3301      	adds	r3, #1
 8010216:	b25b      	sxtb	r3, r3
 8010218:	ed44 7a01 	vstr	s15, [r4, #-4]
 801021c:	e7ea      	b.n	80101f4 <llEvaluate.constprop.23+0x68>
 801021e:	edd6 6a0f 	vldr	s13, [r6, #60]	; 0x3c
 8010222:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8010226:	3a01      	subs	r2, #1
 8010228:	1c53      	adds	r3, r2, #1
 801022a:	f1a6 0614 	sub.w	r6, r6, #20
 801022e:	ed24 7a01 	vstmdb	r4!, {s14}
 8010232:	d1d7      	bne.n	80101e4 <llEvaluate.constprop.23+0x58>
 8010234:	b005      	add	sp, #20
 8010236:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010238 <iNemo_setOrientation.constprop.40>:
 8010238:	b4f0      	push	{r4, r5, r6, r7}
 801023a:	4973      	ldr	r1, [pc, #460]	; (8010408 <iNemo_setOrientation.constprop.40+0x1d0>)
 801023c:	4b73      	ldr	r3, [pc, #460]	; (801040c <iNemo_setOrientation.constprop.40+0x1d4>)
 801023e:	7808      	ldrb	r0, [r1, #0]
 8010240:	2200      	movs	r2, #0
 8010242:	f1a0 0742 	sub.w	r7, r0, #66	; 0x42
 8010246:	b084      	sub	sp, #16
 8010248:	2f17      	cmp	r7, #23
 801024a:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
 801024e:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
 8010252:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 8010256:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
 801025a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 801025e:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
 8010262:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
 8010266:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
 801026a:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
 801026e:	790a      	ldrb	r2, [r1, #4]
 8010270:	bf98      	it	ls
 8010272:	3020      	addls	r0, #32
 8010274:	f88d 0004 	strb.w	r0, [sp, #4]
 8010278:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 801027c:	2817      	cmp	r0, #23
 801027e:	bf98      	it	ls
 8010280:	3220      	addls	r2, #32
 8010282:	f88d 2008 	strb.w	r2, [sp, #8]
 8010286:	7a0a      	ldrb	r2, [r1, #8]
 8010288:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 801028c:	2817      	cmp	r0, #23
 801028e:	bf98      	it	ls
 8010290:	3220      	addls	r2, #32
 8010292:	f88d 200c 	strb.w	r2, [sp, #12]
 8010296:	784a      	ldrb	r2, [r1, #1]
 8010298:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 801029c:	2817      	cmp	r0, #23
 801029e:	bf98      	it	ls
 80102a0:	3220      	addls	r2, #32
 80102a2:	f88d 2005 	strb.w	r2, [sp, #5]
 80102a6:	794a      	ldrb	r2, [r1, #5]
 80102a8:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 80102ac:	2817      	cmp	r0, #23
 80102ae:	bf98      	it	ls
 80102b0:	3220      	addls	r2, #32
 80102b2:	f88d 2009 	strb.w	r2, [sp, #9]
 80102b6:	7a4a      	ldrb	r2, [r1, #9]
 80102b8:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 80102bc:	2817      	cmp	r0, #23
 80102be:	bf98      	it	ls
 80102c0:	3220      	addls	r2, #32
 80102c2:	f88d 200d 	strb.w	r2, [sp, #13]
 80102c6:	788a      	ldrb	r2, [r1, #2]
 80102c8:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 80102cc:	2817      	cmp	r0, #23
 80102ce:	bf98      	it	ls
 80102d0:	3220      	addls	r2, #32
 80102d2:	f88d 2006 	strb.w	r2, [sp, #6]
 80102d6:	798a      	ldrb	r2, [r1, #6]
 80102d8:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 80102dc:	2817      	cmp	r0, #23
 80102de:	bf98      	it	ls
 80102e0:	3220      	addls	r2, #32
 80102e2:	f88d 200a 	strb.w	r2, [sp, #10]
 80102e6:	7a8a      	ldrb	r2, [r1, #10]
 80102e8:	f1a2 0142 	sub.w	r1, r2, #66	; 0x42
 80102ec:	2917      	cmp	r1, #23
 80102ee:	bf98      	it	ls
 80102f0:	3220      	addls	r2, #32
 80102f2:	f88d 200e 	strb.w	r2, [sp, #14]
 80102f6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80102fa:	3a64      	subs	r2, #100	; 0x64
 80102fc:	2a13      	cmp	r2, #19
 80102fe:	d80e      	bhi.n	801031e <iNemo_setOrientation.constprop.40+0xe6>
 8010300:	e8df f002 	tbb	[pc, r2]
 8010304:	0d0dba0a 	.word	0x0d0dba0a
 8010308:	0d0d0d0d 	.word	0x0d0d0d0d
 801030c:	0dbe0d0d 	.word	0x0dbe0d0d
 8010310:	c20d0d0d 	.word	0xc20d0d0d
 8010314:	ca0dc60d 	.word	0xca0dc60d
 8010318:	22ff      	movs	r2, #255	; 0xff
 801031a:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
 801031e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8010322:	3a64      	subs	r2, #100	; 0x64
 8010324:	2a13      	cmp	r2, #19
 8010326:	d80e      	bhi.n	8010346 <iNemo_setOrientation.constprop.40+0x10e>
 8010328:	e8df f002 	tbb	[pc, r2]
 801032c:	0d0dba0a 	.word	0x0d0dba0a
 8010330:	0d0d0d0d 	.word	0x0d0d0d0d
 8010334:	0dbe0d0d 	.word	0x0dbe0d0d
 8010338:	c20d0d0d 	.word	0xc20d0d0d
 801033c:	ca0dc60d 	.word	0xca0dc60d
 8010340:	22ff      	movs	r2, #255	; 0xff
 8010342:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
 8010346:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801034a:	3a64      	subs	r2, #100	; 0x64
 801034c:	2a13      	cmp	r2, #19
 801034e:	d80e      	bhi.n	801036e <iNemo_setOrientation.constprop.40+0x136>
 8010350:	e8df f002 	tbb	[pc, r2]
 8010354:	0d0dba0a 	.word	0x0d0dba0a
 8010358:	0d0d0d0d 	.word	0x0d0d0d0d
 801035c:	0dbe0d0d 	.word	0x0dbe0d0d
 8010360:	c20d0d0d 	.word	0xc20d0d0d
 8010364:	ca0dc60d 	.word	0xca0dc60d
 8010368:	22ff      	movs	r2, #255	; 0xff
 801036a:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
 801036e:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8010372:	3a64      	subs	r2, #100	; 0x64
 8010374:	2a13      	cmp	r2, #19
 8010376:	d80e      	bhi.n	8010396 <iNemo_setOrientation.constprop.40+0x15e>
 8010378:	e8df f002 	tbb	[pc, r2]
 801037c:	0d0dba0a 	.word	0x0d0dba0a
 8010380:	0d0d0d0d 	.word	0x0d0d0d0d
 8010384:	0dbe0d0d 	.word	0x0dbe0d0d
 8010388:	c20d0d0d 	.word	0xc20d0d0d
 801038c:	ca0dc60d 	.word	0xca0dc60d
 8010390:	22ff      	movs	r2, #255	; 0xff
 8010392:	f883 2436 	strb.w	r2, [r3, #1078]	; 0x436
 8010396:	f89d 2009 	ldrb.w	r2, [sp, #9]
 801039a:	3a64      	subs	r2, #100	; 0x64
 801039c:	2a13      	cmp	r2, #19
 801039e:	d80e      	bhi.n	80103be <iNemo_setOrientation.constprop.40+0x186>
 80103a0:	e8df f002 	tbb	[pc, r2]
 80103a4:	0d0dba0a 	.word	0x0d0dba0a
 80103a8:	0d0d0d0d 	.word	0x0d0d0d0d
 80103ac:	0dbe0d0d 	.word	0x0dbe0d0d
 80103b0:	c20d0d0d 	.word	0xc20d0d0d
 80103b4:	ca0dc60d 	.word	0xca0dc60d
 80103b8:	22ff      	movs	r2, #255	; 0xff
 80103ba:	f883 2437 	strb.w	r2, [r3, #1079]	; 0x437
 80103be:	f89d 200a 	ldrb.w	r2, [sp, #10]
 80103c2:	3a64      	subs	r2, #100	; 0x64
 80103c4:	2a13      	cmp	r2, #19
 80103c6:	d80e      	bhi.n	80103e6 <iNemo_setOrientation.constprop.40+0x1ae>
 80103c8:	e8df f002 	tbb	[pc, r2]
 80103cc:	0d0dba0a 	.word	0x0d0dba0a
 80103d0:	0d0d0d0d 	.word	0x0d0d0d0d
 80103d4:	0dbe0d0d 	.word	0x0dbe0d0d
 80103d8:	c20d0d0d 	.word	0xc20d0d0d
 80103dc:	ca0dc60d 	.word	0xca0dc60d
 80103e0:	22ff      	movs	r2, #255	; 0xff
 80103e2:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
 80103e6:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80103ea:	3a64      	subs	r2, #100	; 0x64
 80103ec:	2a13      	cmp	r2, #19
 80103ee:	d812      	bhi.n	8010416 <iNemo_setOrientation.constprop.40+0x1de>
 80103f0:	e8df f002 	tbb	[pc, r2]
 80103f4:	1111ba0e 	.word	0x1111ba0e
 80103f8:	11111111 	.word	0x11111111
 80103fc:	11be1111 	.word	0x11be1111
 8010400:	c2111111 	.word	0xc2111111
 8010404:	ca11c611 	.word	0xca11c611
 8010408:	20000000 	.word	0x20000000
 801040c:	200013c8 	.word	0x200013c8
 8010410:	22ff      	movs	r2, #255	; 0xff
 8010412:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a
 8010416:	f89d 200d 	ldrb.w	r2, [sp, #13]
 801041a:	3a64      	subs	r2, #100	; 0x64
 801041c:	2a13      	cmp	r2, #19
 801041e:	d80e      	bhi.n	801043e <iNemo_setOrientation.constprop.40+0x206>
 8010420:	e8df f002 	tbb	[pc, r2]
 8010424:	0d0db60a 	.word	0x0d0db60a
 8010428:	0d0d0d0d 	.word	0x0d0d0d0d
 801042c:	0dba0d0d 	.word	0x0dba0d0d
 8010430:	be0d0d0d 	.word	0xbe0d0d0d
 8010434:	c60dc20d 	.word	0xc60dc20d
 8010438:	22ff      	movs	r2, #255	; 0xff
 801043a:	f883 242b 	strb.w	r2, [r3, #1067]	; 0x42b
 801043e:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8010442:	3a64      	subs	r2, #100	; 0x64
 8010444:	2a13      	cmp	r2, #19
 8010446:	d80e      	bhi.n	8010466 <iNemo_setOrientation.constprop.40+0x22e>
 8010448:	e8df f002 	tbb	[pc, r2]
 801044c:	0d0db60a 	.word	0x0d0db60a
 8010450:	0d0d0d0d 	.word	0x0d0d0d0d
 8010454:	0dbc0d0d 	.word	0x0dbc0d0d
 8010458:	c20d0d0d 	.word	0xc20d0d0d
 801045c:	100dc80d 	.word	0x100dc80d
 8010460:	22ff      	movs	r2, #255	; 0xff
 8010462:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
 8010466:	b004      	add	sp, #16
 8010468:	bcf0      	pop	{r4, r5, r6, r7}
 801046a:	4770      	bx	lr
 801046c:	22ff      	movs	r2, #255	; 0xff
 801046e:	f883 2426 	strb.w	r2, [r3, #1062]	; 0x426
 8010472:	b004      	add	sp, #16
 8010474:	bcf0      	pop	{r4, r5, r6, r7}
 8010476:	4770      	bx	lr
 8010478:	2201      	movs	r2, #1
 801047a:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
 801047e:	e74e      	b.n	801031e <iNemo_setOrientation.constprop.40+0xe6>
 8010480:	2201      	movs	r2, #1
 8010482:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
 8010486:	e74a      	b.n	801031e <iNemo_setOrientation.constprop.40+0xe6>
 8010488:	22ff      	movs	r2, #255	; 0xff
 801048a:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
 801048e:	e746      	b.n	801031e <iNemo_setOrientation.constprop.40+0xe6>
 8010490:	2201      	movs	r2, #1
 8010492:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
 8010496:	e742      	b.n	801031e <iNemo_setOrientation.constprop.40+0xe6>
 8010498:	22ff      	movs	r2, #255	; 0xff
 801049a:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
 801049e:	e73e      	b.n	801031e <iNemo_setOrientation.constprop.40+0xe6>
 80104a0:	2201      	movs	r2, #1
 80104a2:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
 80104a6:	e74e      	b.n	8010346 <iNemo_setOrientation.constprop.40+0x10e>
 80104a8:	2201      	movs	r2, #1
 80104aa:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 80104ae:	e74a      	b.n	8010346 <iNemo_setOrientation.constprop.40+0x10e>
 80104b0:	22ff      	movs	r2, #255	; 0xff
 80104b2:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 80104b6:	e746      	b.n	8010346 <iNemo_setOrientation.constprop.40+0x10e>
 80104b8:	2201      	movs	r2, #1
 80104ba:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
 80104be:	e742      	b.n	8010346 <iNemo_setOrientation.constprop.40+0x10e>
 80104c0:	22ff      	movs	r2, #255	; 0xff
 80104c2:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
 80104c6:	e73e      	b.n	8010346 <iNemo_setOrientation.constprop.40+0x10e>
 80104c8:	2201      	movs	r2, #1
 80104ca:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
 80104ce:	e74e      	b.n	801036e <iNemo_setOrientation.constprop.40+0x136>
 80104d0:	2201      	movs	r2, #1
 80104d2:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 80104d6:	e74a      	b.n	801036e <iNemo_setOrientation.constprop.40+0x136>
 80104d8:	22ff      	movs	r2, #255	; 0xff
 80104da:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 80104de:	e746      	b.n	801036e <iNemo_setOrientation.constprop.40+0x136>
 80104e0:	2201      	movs	r2, #1
 80104e2:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
 80104e6:	e742      	b.n	801036e <iNemo_setOrientation.constprop.40+0x136>
 80104e8:	22ff      	movs	r2, #255	; 0xff
 80104ea:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
 80104ee:	e73e      	b.n	801036e <iNemo_setOrientation.constprop.40+0x136>
 80104f0:	2201      	movs	r2, #1
 80104f2:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
 80104f6:	e74e      	b.n	8010396 <iNemo_setOrientation.constprop.40+0x15e>
 80104f8:	2201      	movs	r2, #1
 80104fa:	f883 2433 	strb.w	r2, [r3, #1075]	; 0x433
 80104fe:	e74a      	b.n	8010396 <iNemo_setOrientation.constprop.40+0x15e>
 8010500:	22ff      	movs	r2, #255	; 0xff
 8010502:	f883 2433 	strb.w	r2, [r3, #1075]	; 0x433
 8010506:	e746      	b.n	8010396 <iNemo_setOrientation.constprop.40+0x15e>
 8010508:	2201      	movs	r2, #1
 801050a:	f883 2436 	strb.w	r2, [r3, #1078]	; 0x436
 801050e:	e742      	b.n	8010396 <iNemo_setOrientation.constprop.40+0x15e>
 8010510:	22ff      	movs	r2, #255	; 0xff
 8010512:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
 8010516:	e73e      	b.n	8010396 <iNemo_setOrientation.constprop.40+0x15e>
 8010518:	2201      	movs	r2, #1
 801051a:	f883 2431 	strb.w	r2, [r3, #1073]	; 0x431
 801051e:	e74e      	b.n	80103be <iNemo_setOrientation.constprop.40+0x186>
 8010520:	2201      	movs	r2, #1
 8010522:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
 8010526:	e74a      	b.n	80103be <iNemo_setOrientation.constprop.40+0x186>
 8010528:	22ff      	movs	r2, #255	; 0xff
 801052a:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
 801052e:	e746      	b.n	80103be <iNemo_setOrientation.constprop.40+0x186>
 8010530:	2201      	movs	r2, #1
 8010532:	f883 2437 	strb.w	r2, [r3, #1079]	; 0x437
 8010536:	e742      	b.n	80103be <iNemo_setOrientation.constprop.40+0x186>
 8010538:	22ff      	movs	r2, #255	; 0xff
 801053a:	f883 2431 	strb.w	r2, [r3, #1073]	; 0x431
 801053e:	e73e      	b.n	80103be <iNemo_setOrientation.constprop.40+0x186>
 8010540:	2201      	movs	r2, #1
 8010542:	f883 2432 	strb.w	r2, [r3, #1074]	; 0x432
 8010546:	e74e      	b.n	80103e6 <iNemo_setOrientation.constprop.40+0x1ae>
 8010548:	2201      	movs	r2, #1
 801054a:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435
 801054e:	e74a      	b.n	80103e6 <iNemo_setOrientation.constprop.40+0x1ae>
 8010550:	22ff      	movs	r2, #255	; 0xff
 8010552:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435
 8010556:	e746      	b.n	80103e6 <iNemo_setOrientation.constprop.40+0x1ae>
 8010558:	2201      	movs	r2, #1
 801055a:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
 801055e:	e742      	b.n	80103e6 <iNemo_setOrientation.constprop.40+0x1ae>
 8010560:	22ff      	movs	r2, #255	; 0xff
 8010562:	f883 2432 	strb.w	r2, [r3, #1074]	; 0x432
 8010566:	e73e      	b.n	80103e6 <iNemo_setOrientation.constprop.40+0x1ae>
 8010568:	2201      	movs	r2, #1
 801056a:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
 801056e:	e752      	b.n	8010416 <iNemo_setOrientation.constprop.40+0x1de>
 8010570:	2201      	movs	r2, #1
 8010572:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
 8010576:	e74e      	b.n	8010416 <iNemo_setOrientation.constprop.40+0x1de>
 8010578:	22ff      	movs	r2, #255	; 0xff
 801057a:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
 801057e:	e74a      	b.n	8010416 <iNemo_setOrientation.constprop.40+0x1de>
 8010580:	2201      	movs	r2, #1
 8010582:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a
 8010586:	e746      	b.n	8010416 <iNemo_setOrientation.constprop.40+0x1de>
 8010588:	22ff      	movs	r2, #255	; 0xff
 801058a:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
 801058e:	e742      	b.n	8010416 <iNemo_setOrientation.constprop.40+0x1de>
 8010590:	2201      	movs	r2, #1
 8010592:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
 8010596:	e752      	b.n	801043e <iNemo_setOrientation.constprop.40+0x206>
 8010598:	2201      	movs	r2, #1
 801059a:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
 801059e:	e74e      	b.n	801043e <iNemo_setOrientation.constprop.40+0x206>
 80105a0:	22ff      	movs	r2, #255	; 0xff
 80105a2:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
 80105a6:	e74a      	b.n	801043e <iNemo_setOrientation.constprop.40+0x206>
 80105a8:	2201      	movs	r2, #1
 80105aa:	f883 242b 	strb.w	r2, [r3, #1067]	; 0x42b
 80105ae:	e746      	b.n	801043e <iNemo_setOrientation.constprop.40+0x206>
 80105b0:	22ff      	movs	r2, #255	; 0xff
 80105b2:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
 80105b6:	e742      	b.n	801043e <iNemo_setOrientation.constprop.40+0x206>
 80105b8:	2201      	movs	r2, #1
 80105ba:	f883 2426 	strb.w	r2, [r3, #1062]	; 0x426
 80105be:	b004      	add	sp, #16
 80105c0:	bcf0      	pop	{r4, r5, r6, r7}
 80105c2:	4770      	bx	lr
 80105c4:	2201      	movs	r2, #1
 80105c6:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
 80105ca:	b004      	add	sp, #16
 80105cc:	bcf0      	pop	{r4, r5, r6, r7}
 80105ce:	4770      	bx	lr
 80105d0:	22ff      	movs	r2, #255	; 0xff
 80105d2:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
 80105d6:	b004      	add	sp, #16
 80105d8:	bcf0      	pop	{r4, r5, r6, r7}
 80105da:	4770      	bx	lr
 80105dc:	2201      	movs	r2, #1
 80105de:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
 80105e2:	b004      	add	sp, #16
 80105e4:	bcf0      	pop	{r4, r5, r6, r7}
 80105e6:	4770      	bx	lr

080105e8 <iNemo_setOrientation_6X.constprop.41>:
 80105e8:	b4f0      	push	{r4, r5, r6, r7}
 80105ea:	4973      	ldr	r1, [pc, #460]	; (80107b8 <iNemo_setOrientation_6X.constprop.41+0x1d0>)
 80105ec:	4b73      	ldr	r3, [pc, #460]	; (80107bc <iNemo_setOrientation_6X.constprop.41+0x1d4>)
 80105ee:	7808      	ldrb	r0, [r1, #0]
 80105f0:	2200      	movs	r2, #0
 80105f2:	f1a0 0742 	sub.w	r7, r0, #66	; 0x42
 80105f6:	b084      	sub	sp, #16
 80105f8:	2f17      	cmp	r7, #23
 80105fa:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
 80105fe:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
 8010602:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
 8010606:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
 801060a:	f8c3 2454 	str.w	r2, [r3, #1108]	; 0x454
 801060e:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
 8010612:	f883 2450 	strb.w	r2, [r3, #1104]	; 0x450
 8010616:	f8c3 2458 	str.w	r2, [r3, #1112]	; 0x458
 801061a:	f883 245c 	strb.w	r2, [r3, #1116]	; 0x45c
 801061e:	790a      	ldrb	r2, [r1, #4]
 8010620:	bf98      	it	ls
 8010622:	3020      	addls	r0, #32
 8010624:	f88d 0004 	strb.w	r0, [sp, #4]
 8010628:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 801062c:	2817      	cmp	r0, #23
 801062e:	bf98      	it	ls
 8010630:	3220      	addls	r2, #32
 8010632:	f88d 2008 	strb.w	r2, [sp, #8]
 8010636:	7a0a      	ldrb	r2, [r1, #8]
 8010638:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 801063c:	2817      	cmp	r0, #23
 801063e:	bf98      	it	ls
 8010640:	3220      	addls	r2, #32
 8010642:	f88d 200c 	strb.w	r2, [sp, #12]
 8010646:	784a      	ldrb	r2, [r1, #1]
 8010648:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 801064c:	2817      	cmp	r0, #23
 801064e:	bf98      	it	ls
 8010650:	3220      	addls	r2, #32
 8010652:	f88d 2005 	strb.w	r2, [sp, #5]
 8010656:	794a      	ldrb	r2, [r1, #5]
 8010658:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 801065c:	2817      	cmp	r0, #23
 801065e:	bf98      	it	ls
 8010660:	3220      	addls	r2, #32
 8010662:	f88d 2009 	strb.w	r2, [sp, #9]
 8010666:	7a4a      	ldrb	r2, [r1, #9]
 8010668:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 801066c:	2817      	cmp	r0, #23
 801066e:	bf98      	it	ls
 8010670:	3220      	addls	r2, #32
 8010672:	f88d 200d 	strb.w	r2, [sp, #13]
 8010676:	788a      	ldrb	r2, [r1, #2]
 8010678:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 801067c:	2817      	cmp	r0, #23
 801067e:	bf98      	it	ls
 8010680:	3220      	addls	r2, #32
 8010682:	f88d 2006 	strb.w	r2, [sp, #6]
 8010686:	798a      	ldrb	r2, [r1, #6]
 8010688:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 801068c:	2817      	cmp	r0, #23
 801068e:	bf98      	it	ls
 8010690:	3220      	addls	r2, #32
 8010692:	f88d 200a 	strb.w	r2, [sp, #10]
 8010696:	7a8a      	ldrb	r2, [r1, #10]
 8010698:	f1a2 0142 	sub.w	r1, r2, #66	; 0x42
 801069c:	2917      	cmp	r1, #23
 801069e:	bf98      	it	ls
 80106a0:	3220      	addls	r2, #32
 80106a2:	f88d 200e 	strb.w	r2, [sp, #14]
 80106a6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80106aa:	3a64      	subs	r2, #100	; 0x64
 80106ac:	2a13      	cmp	r2, #19
 80106ae:	d80e      	bhi.n	80106ce <iNemo_setOrientation_6X.constprop.41+0xe6>
 80106b0:	e8df f002 	tbb	[pc, r2]
 80106b4:	0d0dba0a 	.word	0x0d0dba0a
 80106b8:	0d0d0d0d 	.word	0x0d0d0d0d
 80106bc:	0dbe0d0d 	.word	0x0dbe0d0d
 80106c0:	c20d0d0d 	.word	0xc20d0d0d
 80106c4:	ca0dc60d 	.word	0xca0dc60d
 80106c8:	22ff      	movs	r2, #255	; 0xff
 80106ca:	f883 2442 	strb.w	r2, [r3, #1090]	; 0x442
 80106ce:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80106d2:	3a64      	subs	r2, #100	; 0x64
 80106d4:	2a13      	cmp	r2, #19
 80106d6:	d80e      	bhi.n	80106f6 <iNemo_setOrientation_6X.constprop.41+0x10e>
 80106d8:	e8df f002 	tbb	[pc, r2]
 80106dc:	0d0dba0a 	.word	0x0d0dba0a
 80106e0:	0d0d0d0d 	.word	0x0d0d0d0d
 80106e4:	0dbe0d0d 	.word	0x0dbe0d0d
 80106e8:	c20d0d0d 	.word	0xc20d0d0d
 80106ec:	ca0dc60d 	.word	0xca0dc60d
 80106f0:	22ff      	movs	r2, #255	; 0xff
 80106f2:	f883 2443 	strb.w	r2, [r3, #1091]	; 0x443
 80106f6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80106fa:	3a64      	subs	r2, #100	; 0x64
 80106fc:	2a13      	cmp	r2, #19
 80106fe:	d80e      	bhi.n	801071e <iNemo_setOrientation_6X.constprop.41+0x136>
 8010700:	e8df f002 	tbb	[pc, r2]
 8010704:	0d0dba0a 	.word	0x0d0dba0a
 8010708:	0d0d0d0d 	.word	0x0d0d0d0d
 801070c:	0dbe0d0d 	.word	0x0dbe0d0d
 8010710:	c20d0d0d 	.word	0xc20d0d0d
 8010714:	ca0dc60d 	.word	0xca0dc60d
 8010718:	22ff      	movs	r2, #255	; 0xff
 801071a:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
 801071e:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8010722:	3a64      	subs	r2, #100	; 0x64
 8010724:	2a13      	cmp	r2, #19
 8010726:	d80e      	bhi.n	8010746 <iNemo_setOrientation_6X.constprop.41+0x15e>
 8010728:	e8df f002 	tbb	[pc, r2]
 801072c:	0d0dba0a 	.word	0x0d0dba0a
 8010730:	0d0d0d0d 	.word	0x0d0d0d0d
 8010734:	0dbe0d0d 	.word	0x0dbe0d0d
 8010738:	c20d0d0d 	.word	0xc20d0d0d
 801073c:	ca0dc60d 	.word	0xca0dc60d
 8010740:	22ff      	movs	r2, #255	; 0xff
 8010742:	f883 245a 	strb.w	r2, [r3, #1114]	; 0x45a
 8010746:	f89d 2009 	ldrb.w	r2, [sp, #9]
 801074a:	3a64      	subs	r2, #100	; 0x64
 801074c:	2a13      	cmp	r2, #19
 801074e:	d80e      	bhi.n	801076e <iNemo_setOrientation_6X.constprop.41+0x186>
 8010750:	e8df f002 	tbb	[pc, r2]
 8010754:	0d0dba0a 	.word	0x0d0dba0a
 8010758:	0d0d0d0d 	.word	0x0d0d0d0d
 801075c:	0dbe0d0d 	.word	0x0dbe0d0d
 8010760:	c20d0d0d 	.word	0xc20d0d0d
 8010764:	ca0dc60d 	.word	0xca0dc60d
 8010768:	22ff      	movs	r2, #255	; 0xff
 801076a:	f883 245b 	strb.w	r2, [r3, #1115]	; 0x45b
 801076e:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8010772:	3a64      	subs	r2, #100	; 0x64
 8010774:	2a13      	cmp	r2, #19
 8010776:	d80e      	bhi.n	8010796 <iNemo_setOrientation_6X.constprop.41+0x1ae>
 8010778:	e8df f002 	tbb	[pc, r2]
 801077c:	0d0dba0a 	.word	0x0d0dba0a
 8010780:	0d0d0d0d 	.word	0x0d0d0d0d
 8010784:	0dbe0d0d 	.word	0x0dbe0d0d
 8010788:	c20d0d0d 	.word	0xc20d0d0d
 801078c:	ca0dc60d 	.word	0xca0dc60d
 8010790:	22ff      	movs	r2, #255	; 0xff
 8010792:	f883 245c 	strb.w	r2, [r3, #1116]	; 0x45c
 8010796:	f89d 200c 	ldrb.w	r2, [sp, #12]
 801079a:	3a64      	subs	r2, #100	; 0x64
 801079c:	2a13      	cmp	r2, #19
 801079e:	d812      	bhi.n	80107c6 <iNemo_setOrientation_6X.constprop.41+0x1de>
 80107a0:	e8df f002 	tbb	[pc, r2]
 80107a4:	1111ba0e 	.word	0x1111ba0e
 80107a8:	11111111 	.word	0x11111111
 80107ac:	11be1111 	.word	0x11be1111
 80107b0:	c2111111 	.word	0xc2111111
 80107b4:	ca11c611 	.word	0xca11c611
 80107b8:	20000000 	.word	0x20000000
 80107bc:	200013c8 	.word	0x200013c8
 80107c0:	22ff      	movs	r2, #255	; 0xff
 80107c2:	f883 244e 	strb.w	r2, [r3, #1102]	; 0x44e
 80107c6:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80107ca:	3a64      	subs	r2, #100	; 0x64
 80107cc:	2a13      	cmp	r2, #19
 80107ce:	d80e      	bhi.n	80107ee <iNemo_setOrientation_6X.constprop.41+0x206>
 80107d0:	e8df f002 	tbb	[pc, r2]
 80107d4:	0d0db60a 	.word	0x0d0db60a
 80107d8:	0d0d0d0d 	.word	0x0d0d0d0d
 80107dc:	0dba0d0d 	.word	0x0dba0d0d
 80107e0:	be0d0d0d 	.word	0xbe0d0d0d
 80107e4:	c60dc20d 	.word	0xc60dc20d
 80107e8:	22ff      	movs	r2, #255	; 0xff
 80107ea:	f883 244f 	strb.w	r2, [r3, #1103]	; 0x44f
 80107ee:	f89d 200e 	ldrb.w	r2, [sp, #14]
 80107f2:	3a64      	subs	r2, #100	; 0x64
 80107f4:	2a13      	cmp	r2, #19
 80107f6:	d80e      	bhi.n	8010816 <iNemo_setOrientation_6X.constprop.41+0x22e>
 80107f8:	e8df f002 	tbb	[pc, r2]
 80107fc:	0d0db60a 	.word	0x0d0db60a
 8010800:	0d0d0d0d 	.word	0x0d0d0d0d
 8010804:	0dbc0d0d 	.word	0x0dbc0d0d
 8010808:	c20d0d0d 	.word	0xc20d0d0d
 801080c:	100dc80d 	.word	0x100dc80d
 8010810:	22ff      	movs	r2, #255	; 0xff
 8010812:	f883 2450 	strb.w	r2, [r3, #1104]	; 0x450
 8010816:	b004      	add	sp, #16
 8010818:	bcf0      	pop	{r4, r5, r6, r7}
 801081a:	4770      	bx	lr
 801081c:	22ff      	movs	r2, #255	; 0xff
 801081e:	f883 244a 	strb.w	r2, [r3, #1098]	; 0x44a
 8010822:	b004      	add	sp, #16
 8010824:	bcf0      	pop	{r4, r5, r6, r7}
 8010826:	4770      	bx	lr
 8010828:	2201      	movs	r2, #1
 801082a:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
 801082e:	e74e      	b.n	80106ce <iNemo_setOrientation_6X.constprop.41+0xe6>
 8010830:	2201      	movs	r2, #1
 8010832:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
 8010836:	e74a      	b.n	80106ce <iNemo_setOrientation_6X.constprop.41+0xe6>
 8010838:	22ff      	movs	r2, #255	; 0xff
 801083a:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
 801083e:	e746      	b.n	80106ce <iNemo_setOrientation_6X.constprop.41+0xe6>
 8010840:	2201      	movs	r2, #1
 8010842:	f883 2442 	strb.w	r2, [r3, #1090]	; 0x442
 8010846:	e742      	b.n	80106ce <iNemo_setOrientation_6X.constprop.41+0xe6>
 8010848:	22ff      	movs	r2, #255	; 0xff
 801084a:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
 801084e:	e73e      	b.n	80106ce <iNemo_setOrientation_6X.constprop.41+0xe6>
 8010850:	2201      	movs	r2, #1
 8010852:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
 8010856:	e74e      	b.n	80106f6 <iNemo_setOrientation_6X.constprop.41+0x10e>
 8010858:	2201      	movs	r2, #1
 801085a:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
 801085e:	e74a      	b.n	80106f6 <iNemo_setOrientation_6X.constprop.41+0x10e>
 8010860:	22ff      	movs	r2, #255	; 0xff
 8010862:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
 8010866:	e746      	b.n	80106f6 <iNemo_setOrientation_6X.constprop.41+0x10e>
 8010868:	2201      	movs	r2, #1
 801086a:	f883 2443 	strb.w	r2, [r3, #1091]	; 0x443
 801086e:	e742      	b.n	80106f6 <iNemo_setOrientation_6X.constprop.41+0x10e>
 8010870:	22ff      	movs	r2, #255	; 0xff
 8010872:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
 8010876:	e73e      	b.n	80106f6 <iNemo_setOrientation_6X.constprop.41+0x10e>
 8010878:	2201      	movs	r2, #1
 801087a:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
 801087e:	e74e      	b.n	801071e <iNemo_setOrientation_6X.constprop.41+0x136>
 8010880:	2201      	movs	r2, #1
 8010882:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
 8010886:	e74a      	b.n	801071e <iNemo_setOrientation_6X.constprop.41+0x136>
 8010888:	22ff      	movs	r2, #255	; 0xff
 801088a:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
 801088e:	e746      	b.n	801071e <iNemo_setOrientation_6X.constprop.41+0x136>
 8010890:	2201      	movs	r2, #1
 8010892:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
 8010896:	e742      	b.n	801071e <iNemo_setOrientation_6X.constprop.41+0x136>
 8010898:	22ff      	movs	r2, #255	; 0xff
 801089a:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
 801089e:	e73e      	b.n	801071e <iNemo_setOrientation_6X.constprop.41+0x136>
 80108a0:	2201      	movs	r2, #1
 80108a2:	f883 2454 	strb.w	r2, [r3, #1108]	; 0x454
 80108a6:	e74e      	b.n	8010746 <iNemo_setOrientation_6X.constprop.41+0x15e>
 80108a8:	2201      	movs	r2, #1
 80108aa:	f883 2457 	strb.w	r2, [r3, #1111]	; 0x457
 80108ae:	e74a      	b.n	8010746 <iNemo_setOrientation_6X.constprop.41+0x15e>
 80108b0:	22ff      	movs	r2, #255	; 0xff
 80108b2:	f883 2457 	strb.w	r2, [r3, #1111]	; 0x457
 80108b6:	e746      	b.n	8010746 <iNemo_setOrientation_6X.constprop.41+0x15e>
 80108b8:	2201      	movs	r2, #1
 80108ba:	f883 245a 	strb.w	r2, [r3, #1114]	; 0x45a
 80108be:	e742      	b.n	8010746 <iNemo_setOrientation_6X.constprop.41+0x15e>
 80108c0:	22ff      	movs	r2, #255	; 0xff
 80108c2:	f883 2454 	strb.w	r2, [r3, #1108]	; 0x454
 80108c6:	e73e      	b.n	8010746 <iNemo_setOrientation_6X.constprop.41+0x15e>
 80108c8:	2201      	movs	r2, #1
 80108ca:	f883 2455 	strb.w	r2, [r3, #1109]	; 0x455
 80108ce:	e74e      	b.n	801076e <iNemo_setOrientation_6X.constprop.41+0x186>
 80108d0:	2201      	movs	r2, #1
 80108d2:	f883 2458 	strb.w	r2, [r3, #1112]	; 0x458
 80108d6:	e74a      	b.n	801076e <iNemo_setOrientation_6X.constprop.41+0x186>
 80108d8:	22ff      	movs	r2, #255	; 0xff
 80108da:	f883 2458 	strb.w	r2, [r3, #1112]	; 0x458
 80108de:	e746      	b.n	801076e <iNemo_setOrientation_6X.constprop.41+0x186>
 80108e0:	2201      	movs	r2, #1
 80108e2:	f883 245b 	strb.w	r2, [r3, #1115]	; 0x45b
 80108e6:	e742      	b.n	801076e <iNemo_setOrientation_6X.constprop.41+0x186>
 80108e8:	22ff      	movs	r2, #255	; 0xff
 80108ea:	f883 2455 	strb.w	r2, [r3, #1109]	; 0x455
 80108ee:	e73e      	b.n	801076e <iNemo_setOrientation_6X.constprop.41+0x186>
 80108f0:	2201      	movs	r2, #1
 80108f2:	f883 2456 	strb.w	r2, [r3, #1110]	; 0x456
 80108f6:	e74e      	b.n	8010796 <iNemo_setOrientation_6X.constprop.41+0x1ae>
 80108f8:	2201      	movs	r2, #1
 80108fa:	f883 2459 	strb.w	r2, [r3, #1113]	; 0x459
 80108fe:	e74a      	b.n	8010796 <iNemo_setOrientation_6X.constprop.41+0x1ae>
 8010900:	22ff      	movs	r2, #255	; 0xff
 8010902:	f883 2459 	strb.w	r2, [r3, #1113]	; 0x459
 8010906:	e746      	b.n	8010796 <iNemo_setOrientation_6X.constprop.41+0x1ae>
 8010908:	2201      	movs	r2, #1
 801090a:	f883 245c 	strb.w	r2, [r3, #1116]	; 0x45c
 801090e:	e742      	b.n	8010796 <iNemo_setOrientation_6X.constprop.41+0x1ae>
 8010910:	22ff      	movs	r2, #255	; 0xff
 8010912:	f883 2456 	strb.w	r2, [r3, #1110]	; 0x456
 8010916:	e73e      	b.n	8010796 <iNemo_setOrientation_6X.constprop.41+0x1ae>
 8010918:	2201      	movs	r2, #1
 801091a:	f883 2448 	strb.w	r2, [r3, #1096]	; 0x448
 801091e:	e752      	b.n	80107c6 <iNemo_setOrientation_6X.constprop.41+0x1de>
 8010920:	2201      	movs	r2, #1
 8010922:	f883 244b 	strb.w	r2, [r3, #1099]	; 0x44b
 8010926:	e74e      	b.n	80107c6 <iNemo_setOrientation_6X.constprop.41+0x1de>
 8010928:	22ff      	movs	r2, #255	; 0xff
 801092a:	f883 244b 	strb.w	r2, [r3, #1099]	; 0x44b
 801092e:	e74a      	b.n	80107c6 <iNemo_setOrientation_6X.constprop.41+0x1de>
 8010930:	2201      	movs	r2, #1
 8010932:	f883 244e 	strb.w	r2, [r3, #1102]	; 0x44e
 8010936:	e746      	b.n	80107c6 <iNemo_setOrientation_6X.constprop.41+0x1de>
 8010938:	22ff      	movs	r2, #255	; 0xff
 801093a:	f883 2448 	strb.w	r2, [r3, #1096]	; 0x448
 801093e:	e742      	b.n	80107c6 <iNemo_setOrientation_6X.constprop.41+0x1de>
 8010940:	2201      	movs	r2, #1
 8010942:	f883 2449 	strb.w	r2, [r3, #1097]	; 0x449
 8010946:	e752      	b.n	80107ee <iNemo_setOrientation_6X.constprop.41+0x206>
 8010948:	2201      	movs	r2, #1
 801094a:	f883 244c 	strb.w	r2, [r3, #1100]	; 0x44c
 801094e:	e74e      	b.n	80107ee <iNemo_setOrientation_6X.constprop.41+0x206>
 8010950:	22ff      	movs	r2, #255	; 0xff
 8010952:	f883 244c 	strb.w	r2, [r3, #1100]	; 0x44c
 8010956:	e74a      	b.n	80107ee <iNemo_setOrientation_6X.constprop.41+0x206>
 8010958:	2201      	movs	r2, #1
 801095a:	f883 244f 	strb.w	r2, [r3, #1103]	; 0x44f
 801095e:	e746      	b.n	80107ee <iNemo_setOrientation_6X.constprop.41+0x206>
 8010960:	22ff      	movs	r2, #255	; 0xff
 8010962:	f883 2449 	strb.w	r2, [r3, #1097]	; 0x449
 8010966:	e742      	b.n	80107ee <iNemo_setOrientation_6X.constprop.41+0x206>
 8010968:	2201      	movs	r2, #1
 801096a:	f883 244a 	strb.w	r2, [r3, #1098]	; 0x44a
 801096e:	b004      	add	sp, #16
 8010970:	bcf0      	pop	{r4, r5, r6, r7}
 8010972:	4770      	bx	lr
 8010974:	2201      	movs	r2, #1
 8010976:	f883 244d 	strb.w	r2, [r3, #1101]	; 0x44d
 801097a:	b004      	add	sp, #16
 801097c:	bcf0      	pop	{r4, r5, r6, r7}
 801097e:	4770      	bx	lr
 8010980:	22ff      	movs	r2, #255	; 0xff
 8010982:	f883 244d 	strb.w	r2, [r3, #1101]	; 0x44d
 8010986:	b004      	add	sp, #16
 8010988:	bcf0      	pop	{r4, r5, r6, r7}
 801098a:	4770      	bx	lr
 801098c:	2201      	movs	r2, #1
 801098e:	f883 2450 	strb.w	r2, [r3, #1104]	; 0x450
 8010992:	b004      	add	sp, #16
 8010994:	bcf0      	pop	{r4, r5, r6, r7}
 8010996:	4770      	bx	lr

08010998 <getMagStats.constprop.26>:
 8010998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801099c:	2400      	movs	r4, #0
 801099e:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 8010b78 <getMagStats.constprop.26+0x1e0>
 80109a2:	601c      	str	r4, [r3, #0]
 80109a4:	6014      	str	r4, [r2, #0]
 80109a6:	f898 e500 	ldrb.w	lr, [r8, #1280]	; 0x500
 80109aa:	f898 c501 	ldrb.w	ip, [r8, #1281]	; 0x501
 80109ae:	f998 4502 	ldrsb.w	r4, [r8, #1282]	; 0x502
 80109b2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80109b6:	45e6      	cmp	lr, ip
 80109b8:	b083      	sub	sp, #12
 80109ba:	f104 0401 	add.w	r4, r4, #1
 80109be:	ee87 4a80 	vdiv.f32	s8, s15, s0
 80109c2:	f000 80c7 	beq.w	8010b54 <getMagStats.constprop.26+0x1bc>
 80109c6:	eba4 040e 	sub.w	r4, r4, lr
 80109ca:	fb94 f9fc 	sdiv	r9, r4, ip
 80109ce:	fb0c 4419 	mls	r4, ip, r9, r4
 80109d2:	2c00      	cmp	r4, #0
 80109d4:	fa0f f984 	sxth.w	r9, r4
 80109d8:	bfbc      	itt	lt
 80109da:	4464      	addlt	r4, ip
 80109dc:	fa0f f984 	sxthlt.w	r9, r4
 80109e0:	eddf 3a62 	vldr	s7, [pc, #392]	; 8010b6c <getMagStats.constprop.26+0x1d4>
 80109e4:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 80109e8:	ee64 3a23 	vmul.f32	s7, s8, s7
 80109ec:	ee24 4a27 	vmul.f32	s8, s8, s15
 80109f0:	f1be 0f00 	cmp.w	lr, #0
 80109f4:	f000 80b5 	beq.w	8010b62 <getMagStats.constprop.26+0x1ca>
 80109f8:	2700      	movs	r7, #0
 80109fa:	f8b0 b000 	ldrh.w	fp, [r0]
 80109fe:	f8b0 a002 	ldrh.w	sl, [r0, #2]
 8010a02:	8880      	ldrh	r0, [r0, #4]
 8010a04:	9001      	str	r0, [sp, #4]
 8010a06:	eddf 5a5a 	vldr	s11, [pc, #360]	; 8010b70 <getMagStats.constprop.26+0x1d8>
 8010a0a:	9700      	str	r7, [sp, #0]
 8010a0c:	e001      	b.n	8010a12 <getMagStats.constprop.26+0x7a>
 8010a0e:	edd2 5a00 	vldr	s11, [r2]
 8010a12:	9801      	ldr	r0, [sp, #4]
 8010a14:	edd1 4a00 	vldr	s9, [r1]
 8010a18:	ed91 6a04 	vldr	s12, [r1, #16]
 8010a1c:	edd1 6a08 	vldr	s13, [r1, #32]
 8010a20:	eb09 0507 	add.w	r5, r9, r7
 8010a24:	fb95 f4fc 	sdiv	r4, r5, ip
 8010a28:	fb0c 5414 	mls	r4, ip, r4, r5
 8010a2c:	b2e4      	uxtb	r4, r4
 8010a2e:	3404      	adds	r4, #4
 8010a30:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
 8010a34:	3701      	adds	r7, #1
 8010a36:	f8b4 6502 	ldrh.w	r6, [r4, #1282]	; 0x502
 8010a3a:	f8b4 5504 	ldrh.w	r5, [r4, #1284]	; 0x504
 8010a3e:	f8b4 4506 	ldrh.w	r4, [r4, #1286]	; 0x506
 8010a42:	eba6 060b 	sub.w	r6, r6, fp
 8010a46:	b236      	sxth	r6, r6
 8010a48:	ee07 6a90 	vmov	s15, r6
 8010a4c:	eba5 050a 	sub.w	r5, r5, sl
 8010a50:	b22d      	sxth	r5, r5
 8010a52:	1a24      	subs	r4, r4, r0
 8010a54:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8010a58:	ee07 5a90 	vmov	s15, r5
 8010a5c:	b224      	sxth	r4, r4
 8010a5e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8010a62:	ee07 4a90 	vmov	s15, r4
 8010a66:	ee25 5a24 	vmul.f32	s10, s10, s9
 8010a6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010a6e:	ee27 7a06 	vmul.f32	s14, s14, s12
 8010a72:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010a76:	eefd 6ac5 	vcvt.s32.f32	s13, s10
 8010a7a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8010a7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010a82:	ee16 0a90 	vmov	r0, s13
 8010a86:	ee17 4a10 	vmov	r4, s14
 8010a8a:	b205      	sxth	r5, r0
 8010a8c:	ee17 0a90 	vmov	r0, s15
 8010a90:	fb14 f404 	smulbb	r4, r4, r4
 8010a94:	fb05 4505 	mla	r5, r5, r5, r4
 8010a98:	b204      	sxth	r4, r0
 8010a9a:	fb04 5404 	mla	r4, r4, r4, r5
 8010a9e:	ee07 4a90 	vmov	s15, r4
 8010aa2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010aa6:	9800      	ldr	r0, [sp, #0]
 8010aa8:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8010aac:	1c46      	adds	r6, r0, #1
 8010aae:	b2fd      	uxtb	r5, r7
 8010ab0:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8010ab4:	ee17 0a10 	vmov	r0, s14
 8010ab8:	b200      	sxth	r0, r0
 8010aba:	ee07 0a90 	vmov	s15, r0
 8010abe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010ac2:	ee37 7ae3 	vsub.f32	s14, s15, s7
 8010ac6:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8010aca:	eeb0 7ac7 	vabs.f32	s14, s14
 8010ace:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8010ad2:	edc2 7a00 	vstr	s15, [r2]
 8010ad6:	ee17 0a10 	vmov	r0, s14
 8010ada:	b204      	sxth	r4, r0
 8010adc:	ee07 4a10 	vmov	s14, r4
 8010ae0:	fb04 f004 	mul.w	r0, r4, r4
 8010ae4:	ee07 0a90 	vmov	s15, r0
 8010ae8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010aec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010af0:	eeb4 4ac7 	vcmpe.f32	s8, s14
 8010af4:	ed93 7a00 	vldr	s14, [r3]
 8010af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010afc:	bf48      	it	mi
 8010afe:	b2f0      	uxtbmi	r0, r6
 8010b00:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010b04:	bf48      	it	mi
 8010b06:	9000      	strmi	r0, [sp, #0]
 8010b08:	45ae      	cmp	lr, r5
 8010b0a:	edc3 7a00 	vstr	s15, [r3]
 8010b0e:	f63f af7e 	bhi.w	8010a0e <getMagStats.constprop.26+0x76>
 8010b12:	9800      	ldr	r0, [sp, #0]
 8010b14:	eddf 6a17 	vldr	s13, [pc, #92]	; 8010b74 <getMagStats.constprop.26+0x1dc>
 8010b18:	ee07 ea10 	vmov	s14, lr
 8010b1c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010b20:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8010b24:	eef1 7ac6 	vsqrt.f32	s15, s12
 8010b28:	ee60 7a27 	vmul.f32	s15, s0, s15
 8010b2c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010b30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b34:	bfb8      	it	lt
 8010b36:	eef0 7a66 	vmovlt.f32	s15, s13
 8010b3a:	edc3 7a00 	vstr	s15, [r3]
 8010b3e:	edd2 7a00 	vldr	s15, [r2]
 8010b42:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010b46:	eec0 7a07 	vdiv.f32	s15, s0, s14
 8010b4a:	edc2 7a00 	vstr	s15, [r2]
 8010b4e:	b003      	add	sp, #12
 8010b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b54:	fb94 f9fe 	sdiv	r9, r4, lr
 8010b58:	fb0e 4919 	mls	r9, lr, r9, r4
 8010b5c:	fa0f f989 	sxth.w	r9, r9
 8010b60:	e73e      	b.n	80109e0 <getMagStats.constprop.26+0x48>
 8010b62:	edd3 7a00 	vldr	s15, [r3]
 8010b66:	4670      	mov	r0, lr
 8010b68:	e7d4      	b.n	8010b14 <getMagStats.constprop.26+0x17c>
 8010b6a:	bf00      	nop
 8010b6c:	423c0000 	.word	0x423c0000
 8010b70:	00000000 	.word	0x00000000
 8010b74:	3f59999a 	.word	0x3f59999a
 8010b78:	200013c8 	.word	0x200013c8

08010b7c <MEMS_updateMagBufferIndex.constprop.24>:
 8010b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b80:	4e98      	ldr	r6, [pc, #608]	; (8010de4 <MEMS_updateMagBufferIndex.constprop.24+0x268>)
 8010b82:	ed2d 8b02 	vpush	{d8}
 8010b86:	f896 9500 	ldrb.w	r9, [r6, #1280]	; 0x500
 8010b8a:	f896 8501 	ldrb.w	r8, [r6, #1281]	; 0x501
 8010b8e:	f996 1502 	ldrsb.w	r1, [r6, #1282]	; 0x502
 8010b92:	2300      	movs	r3, #0
 8010b94:	45c1      	cmp	r9, r8
 8010b96:	b08f      	sub	sp, #60	; 0x3c
 8010b98:	f101 0101 	add.w	r1, r1, #1
 8010b9c:	f8c6 3508 	str.w	r3, [r6, #1288]	; 0x508
 8010ba0:	f8c6 350c 	str.w	r3, [r6, #1292]	; 0x50c
 8010ba4:	f8c6 3510 	str.w	r3, [r6, #1296]	; 0x510
 8010ba8:	f8c6 3514 	str.w	r3, [r6, #1300]	; 0x514
 8010bac:	f8c6 351c 	str.w	r3, [r6, #1308]	; 0x51c
 8010bb0:	f8c6 3518 	str.w	r3, [r6, #1304]	; 0x518
 8010bb4:	f000 810b 	beq.w	8010dce <MEMS_updateMagBufferIndex.constprop.24+0x252>
 8010bb8:	eba1 0109 	sub.w	r1, r1, r9
 8010bbc:	fb91 f3f8 	sdiv	r3, r1, r8
 8010bc0:	fb08 1113 	mls	r1, r8, r3, r1
 8010bc4:	b20b      	sxth	r3, r1
 8010bc6:	2900      	cmp	r1, #0
 8010bc8:	9301      	str	r3, [sp, #4]
 8010bca:	f2c0 80fc 	blt.w	8010dc6 <MEMS_updateMagBufferIndex.constprop.24+0x24a>
 8010bce:	f1b9 0f00 	cmp.w	r9, #0
 8010bd2:	d107      	bne.n	8010be4 <MEMS_updateMagBufferIndex.constprop.24+0x68>
 8010bd4:	23ff      	movs	r3, #255	; 0xff
 8010bd6:	f886 3502 	strb.w	r3, [r6, #1282]	; 0x502
 8010bda:	b00f      	add	sp, #60	; 0x3c
 8010bdc:	ecbd 8b02 	vpop	{d8}
 8010be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010be4:	2500      	movs	r5, #0
 8010be6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8010bea:	f8cd 9018 	str.w	r9, [sp, #24]
 8010bee:	ee87 8a80 	vdiv.f32	s16, s15, s0
 8010bf2:	9509      	str	r5, [sp, #36]	; 0x24
 8010bf4:	46aa      	mov	sl, r5
 8010bf6:	950d      	str	r5, [sp, #52]	; 0x34
 8010bf8:	9507      	str	r5, [sp, #28]
 8010bfa:	950a      	str	r5, [sp, #40]	; 0x28
 8010bfc:	9502      	str	r5, [sp, #8]
 8010bfe:	950b      	str	r5, [sp, #44]	; 0x2c
 8010c00:	9503      	str	r5, [sp, #12]
 8010c02:	950c      	str	r5, [sp, #48]	; 0x30
 8010c04:	9504      	str	r5, [sp, #16]
 8010c06:	9508      	str	r5, [sp, #32]
 8010c08:	9505      	str	r5, [sp, #20]
 8010c0a:	2701      	movs	r7, #1
 8010c0c:	4681      	mov	r9, r0
 8010c0e:	e02b      	b.n	8010c68 <MEMS_updateMagBufferIndex.constprop.24+0xec>
 8010c10:	9b05      	ldr	r3, [sp, #20]
 8010c12:	3c20      	subs	r4, #32
 8010c14:	fa07 f404 	lsl.w	r4, r7, r4
 8010c18:	ea24 0403 	bic.w	r4, r4, r3
 8010c1c:	4063      	eors	r3, r4
 8010c1e:	9305      	str	r3, [sp, #20]
 8010c20:	f1bb 0f1f 	cmp.w	fp, #31
 8010c24:	f04f 0301 	mov.w	r3, #1
 8010c28:	9308      	str	r3, [sp, #32]
 8010c2a:	f240 8091 	bls.w	8010d50 <MEMS_updateMagBufferIndex.constprop.24+0x1d4>
 8010c2e:	9a03      	ldr	r2, [sp, #12]
 8010c30:	f1ab 0320 	sub.w	r3, fp, #32
 8010c34:	fa07 f303 	lsl.w	r3, r7, r3
 8010c38:	ea23 0302 	bic.w	r3, r3, r2
 8010c3c:	4053      	eors	r3, r2
 8010c3e:	9303      	str	r3, [sp, #12]
 8010c40:	291f      	cmp	r1, #31
 8010c42:	f04f 0301 	mov.w	r3, #1
 8010c46:	930b      	str	r3, [sp, #44]	; 0x2c
 8010c48:	f200 808f 	bhi.w	8010d6a <MEMS_updateMagBufferIndex.constprop.24+0x1ee>
 8010c4c:	2301      	movs	r3, #1
 8010c4e:	3501      	adds	r5, #1
 8010c50:	9a06      	ldr	r2, [sp, #24]
 8010c52:	9309      	str	r3, [sp, #36]	; 0x24
 8010c54:	fa07 f101 	lsl.w	r1, r7, r1
 8010c58:	b2eb      	uxtb	r3, r5
 8010c5a:	ea21 010a 	bic.w	r1, r1, sl
 8010c5e:	429a      	cmp	r2, r3
 8010c60:	ea8a 0a01 	eor.w	sl, sl, r1
 8010c64:	f240 8091 	bls.w	8010d8a <MEMS_updateMagBufferIndex.constprop.24+0x20e>
 8010c68:	9b01      	ldr	r3, [sp, #4]
 8010c6a:	1959      	adds	r1, r3, r5
 8010c6c:	fb91 f3f8 	sdiv	r3, r1, r8
 8010c70:	fb08 1313 	mls	r3, r8, r3, r1
 8010c74:	b2db      	uxtb	r3, r3
 8010c76:	f103 0b04 	add.w	fp, r3, #4
 8010c7a:	eb06 01cb 	add.w	r1, r6, fp, lsl #3
 8010c7e:	f9b1 0502 	ldrsh.w	r0, [r1, #1282]	; 0x502
 8010c82:	fb90 f1f9 	sdiv	r1, r0, r9
 8010c86:	fb09 0111 	mls	r1, r9, r1, r0
 8010c8a:	2900      	cmp	r1, #0
 8010c8c:	bfb8      	it	lt
 8010c8e:	4449      	addlt	r1, r9
 8010c90:	b20b      	sxth	r3, r1
 8010c92:	ee07 3a90 	vmov	s15, r3
 8010c96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010c9a:	ee67 7a88 	vmul.f32	s15, s15, s16
 8010c9e:	ee17 0a90 	vmov	r0, s15
 8010ca2:	f00a fc19 	bl	801b4d8 <roundf>
 8010ca6:	eb06 01cb 	add.w	r1, r6, fp, lsl #3
 8010caa:	ee07 0a90 	vmov	s15, r0
 8010cae:	f9b1 0504 	ldrsh.w	r0, [r1, #1284]	; 0x504
 8010cb2:	fb90 f1f9 	sdiv	r1, r0, r9
 8010cb6:	fb09 0111 	mls	r1, r9, r1, r0
 8010cba:	2900      	cmp	r1, #0
 8010cbc:	bfb8      	it	lt
 8010cbe:	4449      	addlt	r1, r9
 8010cc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010cc4:	b20b      	sxth	r3, r1
 8010cc6:	edcd 7a00 	vstr	s15, [sp]
 8010cca:	ee07 3a90 	vmov	s15, r3
 8010cce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010cd2:	f89d 4000 	ldrb.w	r4, [sp]
 8010cd6:	ee67 7a88 	vmul.f32	s15, s15, s16
 8010cda:	ee17 0a90 	vmov	r0, s15
 8010cde:	f00a fbfb 	bl	801b4d8 <roundf>
 8010ce2:	eb06 03cb 	add.w	r3, r6, fp, lsl #3
 8010ce6:	ee07 0a90 	vmov	s15, r0
 8010cea:	f9b3 3506 	ldrsh.w	r3, [r3, #1286]	; 0x506
 8010cee:	fb93 f1f9 	sdiv	r1, r3, r9
 8010cf2:	fb09 3111 	mls	r1, r9, r1, r3
 8010cf6:	2900      	cmp	r1, #0
 8010cf8:	bfb8      	it	lt
 8010cfa:	4449      	addlt	r1, r9
 8010cfc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010d00:	b20b      	sxth	r3, r1
 8010d02:	edcd 7a00 	vstr	s15, [sp]
 8010d06:	ee07 3a90 	vmov	s15, r3
 8010d0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010d0e:	f89d b000 	ldrb.w	fp, [sp]
 8010d12:	ee67 7a88 	vmul.f32	s15, s15, s16
 8010d16:	ee17 0a90 	vmov	r0, s15
 8010d1a:	f00a fbdd 	bl	801b4d8 <roundf>
 8010d1e:	ee07 0a90 	vmov	s15, r0
 8010d22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010d26:	2c1f      	cmp	r4, #31
 8010d28:	edcd 7a00 	vstr	s15, [sp]
 8010d2c:	f89d 1000 	ldrb.w	r1, [sp]
 8010d30:	f63f af6e 	bhi.w	8010c10 <MEMS_updateMagBufferIndex.constprop.24+0x94>
 8010d34:	9b04      	ldr	r3, [sp, #16]
 8010d36:	fa07 f404 	lsl.w	r4, r7, r4
 8010d3a:	ea24 0403 	bic.w	r4, r4, r3
 8010d3e:	4063      	eors	r3, r4
 8010d40:	9304      	str	r3, [sp, #16]
 8010d42:	f1bb 0f1f 	cmp.w	fp, #31
 8010d46:	f04f 0301 	mov.w	r3, #1
 8010d4a:	930c      	str	r3, [sp, #48]	; 0x30
 8010d4c:	f63f af6f 	bhi.w	8010c2e <MEMS_updateMagBufferIndex.constprop.24+0xb2>
 8010d50:	9a02      	ldr	r2, [sp, #8]
 8010d52:	fa07 f30b 	lsl.w	r3, r7, fp
 8010d56:	ea23 0302 	bic.w	r3, r3, r2
 8010d5a:	4053      	eors	r3, r2
 8010d5c:	9302      	str	r3, [sp, #8]
 8010d5e:	291f      	cmp	r1, #31
 8010d60:	f04f 0301 	mov.w	r3, #1
 8010d64:	930a      	str	r3, [sp, #40]	; 0x28
 8010d66:	f67f af71 	bls.w	8010c4c <MEMS_updateMagBufferIndex.constprop.24+0xd0>
 8010d6a:	9b07      	ldr	r3, [sp, #28]
 8010d6c:	9a06      	ldr	r2, [sp, #24]
 8010d6e:	3920      	subs	r1, #32
 8010d70:	fa07 f101 	lsl.w	r1, r7, r1
 8010d74:	ea21 0103 	bic.w	r1, r1, r3
 8010d78:	404b      	eors	r3, r1
 8010d7a:	9307      	str	r3, [sp, #28]
 8010d7c:	3501      	adds	r5, #1
 8010d7e:	2301      	movs	r3, #1
 8010d80:	930d      	str	r3, [sp, #52]	; 0x34
 8010d82:	b2eb      	uxtb	r3, r5
 8010d84:	429a      	cmp	r2, r3
 8010d86:	f63f af6f 	bhi.w	8010c68 <MEMS_updateMagBufferIndex.constprop.24+0xec>
 8010d8a:	9b08      	ldr	r3, [sp, #32]
 8010d8c:	4652      	mov	r2, sl
 8010d8e:	bb2b      	cbnz	r3, 8010ddc <MEMS_updateMagBufferIndex.constprop.24+0x260>
 8010d90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010d92:	b113      	cbz	r3, 8010d9a <MEMS_updateMagBufferIndex.constprop.24+0x21e>
 8010d94:	9b04      	ldr	r3, [sp, #16]
 8010d96:	f8c6 350c 	str.w	r3, [r6, #1292]	; 0x50c
 8010d9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010d9c:	b113      	cbz	r3, 8010da4 <MEMS_updateMagBufferIndex.constprop.24+0x228>
 8010d9e:	9b03      	ldr	r3, [sp, #12]
 8010da0:	f8c6 3510 	str.w	r3, [r6, #1296]	; 0x510
 8010da4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010da6:	b113      	cbz	r3, 8010dae <MEMS_updateMagBufferIndex.constprop.24+0x232>
 8010da8:	9b02      	ldr	r3, [sp, #8]
 8010daa:	f8c6 3514 	str.w	r3, [r6, #1300]	; 0x514
 8010dae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010db0:	b113      	cbz	r3, 8010db8 <MEMS_updateMagBufferIndex.constprop.24+0x23c>
 8010db2:	9b07      	ldr	r3, [sp, #28]
 8010db4:	f8c6 351c 	str.w	r3, [r6, #1308]	; 0x51c
 8010db8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	f43f af0d 	beq.w	8010bda <MEMS_updateMagBufferIndex.constprop.24+0x5e>
 8010dc0:	f8c6 2518 	str.w	r2, [r6, #1304]	; 0x518
 8010dc4:	e709      	b.n	8010bda <MEMS_updateMagBufferIndex.constprop.24+0x5e>
 8010dc6:	4441      	add	r1, r8
 8010dc8:	b20b      	sxth	r3, r1
 8010dca:	9301      	str	r3, [sp, #4]
 8010dcc:	e6ff      	b.n	8010bce <MEMS_updateMagBufferIndex.constprop.24+0x52>
 8010dce:	fb91 f3f9 	sdiv	r3, r1, r9
 8010dd2:	fb09 1113 	mls	r1, r9, r3, r1
 8010dd6:	b20b      	sxth	r3, r1
 8010dd8:	9301      	str	r3, [sp, #4]
 8010dda:	e6f8      	b.n	8010bce <MEMS_updateMagBufferIndex.constprop.24+0x52>
 8010ddc:	9b05      	ldr	r3, [sp, #20]
 8010dde:	f8c6 3508 	str.w	r3, [r6, #1288]	; 0x508
 8010de2:	e7d5      	b.n	8010d90 <MEMS_updateMagBufferIndex.constprop.24+0x214>
 8010de4:	200013c8 	.word	0x200013c8

08010de8 <iNemo_quat2heading>:
 8010de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010dec:	4ddc      	ldr	r5, [pc, #880]	; (8011160 <iNemo_quat2heading+0x378>)
 8010dee:	ed2d 8b0a 	vpush	{d8-d12}
 8010df2:	ed92 ba01 	vldr	s22, [r2, #4]
 8010df6:	edd2 aa00 	vldr	s21, [r2]
 8010dfa:	ed92 aa02 	vldr	s20, [r2, #8]
 8010dfe:	edd0 ba01 	vldr	s23, [r0, #4]
 8010e02:	ed90 ca00 	vldr	s24, [r0]
 8010e06:	edd0 ca02 	vldr	s25, [r0, #8]
 8010e0a:	ed90 9a03 	vldr	s18, [r0, #12]
 8010e0e:	f8d5 4820 	ldr.w	r4, [r5, #2080]	; 0x820
 8010e12:	468a      	mov	sl, r1
 8010e14:	eeb0 8acb 	vabs.f32	s16, s22
 8010e18:	eef0 8aea 	vabs.f32	s17, s21
 8010e1c:	eef0 9aca 	vabs.f32	s19, s20
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	d145      	bne.n	8010eb0 <iNemo_quat2heading+0xc8>
 8010e24:	ee18 0a10 	vmov	r0, s16
 8010e28:	f7ef fb96 	bl	8000558 <__aeabi_f2d>
 8010e2c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8010e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e34:	4606      	mov	r6, r0
 8010e36:	460f      	mov	r7, r1
 8010e38:	f140 80f6 	bpl.w	8011028 <iNemo_quat2heading+0x240>
 8010e3c:	eef4 8ae9 	vcmpe.f32	s17, s19
 8010e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e44:	f340 80f0 	ble.w	8011028 <iNemo_quat2heading+0x240>
 8010e48:	ee18 0a90 	vmov	r0, s17
 8010e4c:	f7ef fb84 	bl	8000558 <__aeabi_f2d>
 8010e50:	a3bf      	add	r3, pc, #764	; (adr r3, 8011150 <iNemo_quat2heading+0x368>)
 8010e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e56:	4680      	mov	r8, r0
 8010e58:	4689      	mov	r9, r1
 8010e5a:	4630      	mov	r0, r6
 8010e5c:	4639      	mov	r1, r7
 8010e5e:	f7ef fbd3 	bl	8000608 <__aeabi_dmul>
 8010e62:	eef5 aac0 	vcmpe.f32	s21, #0.0
 8010e66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e6a:	4602      	mov	r2, r0
 8010e6c:	460b      	mov	r3, r1
 8010e6e:	4640      	mov	r0, r8
 8010e70:	4649      	mov	r1, r9
 8010e72:	f340 820a 	ble.w	801128a <iNemo_quat2heading+0x4a2>
 8010e76:	f7ef fe57 	bl	8000b28 <__aeabi_dcmpgt>
 8010e7a:	b170      	cbz	r0, 8010e9a <iNemo_quat2heading+0xb2>
 8010e7c:	ee19 0a90 	vmov	r0, s19
 8010e80:	f7ef fb6a 	bl	8000558 <__aeabi_f2d>
 8010e84:	a3b2      	add	r3, pc, #712	; (adr r3, 8011150 <iNemo_quat2heading+0x368>)
 8010e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e8a:	f7ef fbbd 	bl	8000608 <__aeabi_dmul>
 8010e8e:	4642      	mov	r2, r8
 8010e90:	464b      	mov	r3, r9
 8010e92:	f7ef fe2b 	bl	8000aec <__aeabi_dcmplt>
 8010e96:	2800      	cmp	r0, #0
 8010e98:	d148      	bne.n	8010f2c <iNemo_quat2heading+0x144>
 8010e9a:	2c05      	cmp	r4, #5
 8010e9c:	f200 8224 	bhi.w	80112e8 <iNemo_quat2heading+0x500>
 8010ea0:	e8df f014 	tbh	[pc, r4, lsl #1]
 8010ea4:	00980120 	.word	0x00980120
 8010ea8:	017e0047 	.word	0x017e0047
 8010eac:	01200047 	.word	0x01200047
 8010eb0:	ee18 0a90 	vmov	r0, s17
 8010eb4:	f7ef fb50 	bl	8000558 <__aeabi_f2d>
 8010eb8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8010ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ec0:	eef1 ca6c 	vneg.f32	s25, s25
 8010ec4:	4606      	mov	r6, r0
 8010ec6:	460f      	mov	r7, r1
 8010ec8:	dd4f      	ble.n	8010f6a <iNemo_quat2heading+0x182>
 8010eca:	eeb4 8ae9 	vcmpe.f32	s16, s19
 8010ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ed2:	dd4a      	ble.n	8010f6a <iNemo_quat2heading+0x182>
 8010ed4:	ee18 0a10 	vmov	r0, s16
 8010ed8:	f7ef fb3e 	bl	8000558 <__aeabi_f2d>
 8010edc:	a39c      	add	r3, pc, #624	; (adr r3, 8011150 <iNemo_quat2heading+0x368>)
 8010ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ee2:	4680      	mov	r8, r0
 8010ee4:	4689      	mov	r9, r1
 8010ee6:	4630      	mov	r0, r6
 8010ee8:	4639      	mov	r1, r7
 8010eea:	f7ef fb8d 	bl	8000608 <__aeabi_dmul>
 8010eee:	eeb5 bac0 	vcmpe.f32	s22, #0.0
 8010ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ef6:	4602      	mov	r2, r0
 8010ef8:	460b      	mov	r3, r1
 8010efa:	4640      	mov	r0, r8
 8010efc:	4649      	mov	r1, r9
 8010efe:	f340 81dd 	ble.w	80112bc <iNemo_quat2heading+0x4d4>
 8010f02:	f7ef fe11 	bl	8000b28 <__aeabi_dcmpgt>
 8010f06:	2800      	cmp	r0, #0
 8010f08:	f000 8119 	beq.w	801113e <iNemo_quat2heading+0x356>
 8010f0c:	ee19 0a90 	vmov	r0, s19
 8010f10:	f7ef fb22 	bl	8000558 <__aeabi_f2d>
 8010f14:	a38e      	add	r3, pc, #568	; (adr r3, 8011150 <iNemo_quat2heading+0x368>)
 8010f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f1a:	f7ef fb75 	bl	8000608 <__aeabi_dmul>
 8010f1e:	4642      	mov	r2, r8
 8010f20:	464b      	mov	r3, r9
 8010f22:	f7ef fde3 	bl	8000aec <__aeabi_dcmplt>
 8010f26:	2800      	cmp	r0, #0
 8010f28:	f000 8109 	beq.w	801113e <iNemo_quat2heading+0x356>
 8010f2c:	2304      	movs	r3, #4
 8010f2e:	f8c5 3820 	str.w	r3, [r5, #2080]	; 0x820
 8010f32:	ed9a 0a00 	vldr	s0, [sl]
 8010f36:	eddf 7a8b 	vldr	s15, [pc, #556]	; 8011164 <iNemo_quat2heading+0x37c>
 8010f3a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010f3e:	eddf 7a8a 	vldr	s15, [pc, #552]	; 8011168 <iNemo_quat2heading+0x380>
 8010f42:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8010f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f4a:	bfa8      	it	ge
 8010f4c:	ee30 0a67 	vsubge.f32	s0, s0, s15
 8010f50:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8010f54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f58:	d503      	bpl.n	8010f62 <iNemo_quat2heading+0x17a>
 8010f5a:	eddf 7a83 	vldr	s15, [pc, #524]	; 8011168 <iNemo_quat2heading+0x380>
 8010f5e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010f62:	ecbd 8b0a 	vpop	{d8-d12}
 8010f66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f6a:	eef4 8ae9 	vcmpe.f32	s17, s19
 8010f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f72:	f340 80ba 	ble.w	80110ea <iNemo_quat2heading+0x302>
 8010f76:	ee18 0a10 	vmov	r0, s16
 8010f7a:	f7ef faed 	bl	8000558 <__aeabi_f2d>
 8010f7e:	a374      	add	r3, pc, #464	; (adr r3, 8011150 <iNemo_quat2heading+0x368>)
 8010f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f84:	f7ef fb40 	bl	8000608 <__aeabi_dmul>
 8010f88:	eef5 aac0 	vcmpe.f32	s21, #0.0
 8010f8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f90:	4632      	mov	r2, r6
 8010f92:	463b      	mov	r3, r7
 8010f94:	f340 8145 	ble.w	8011222 <iNemo_quat2heading+0x43a>
 8010f98:	f7ef fda8 	bl	8000aec <__aeabi_dcmplt>
 8010f9c:	2800      	cmp	r0, #0
 8010f9e:	f000 80ce 	beq.w	801113e <iNemo_quat2heading+0x356>
 8010fa2:	ee19 0a90 	vmov	r0, s19
 8010fa6:	f7ef fad7 	bl	8000558 <__aeabi_f2d>
 8010faa:	a369      	add	r3, pc, #420	; (adr r3, 8011150 <iNemo_quat2heading+0x368>)
 8010fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fb0:	f7ef fb2a 	bl	8000608 <__aeabi_dmul>
 8010fb4:	4632      	mov	r2, r6
 8010fb6:	463b      	mov	r3, r7
 8010fb8:	f7ef fd98 	bl	8000aec <__aeabi_dcmplt>
 8010fbc:	2800      	cmp	r0, #0
 8010fbe:	f000 80be 	beq.w	801113e <iNemo_quat2heading+0x356>
 8010fc2:	eef0 7a6b 	vmov.f32	s15, s23
 8010fc6:	2301      	movs	r3, #1
 8010fc8:	eef0 ba4c 	vmov.f32	s23, s24
 8010fcc:	f8c5 3820 	str.w	r3, [r5, #2080]	; 0x820
 8010fd0:	eeb0 ca67 	vmov.f32	s24, s15
 8010fd4:	ee6b 7aeb 	vnmul.f32	s15, s23, s23
 8010fd8:	eeec 7a0c 	vfma.f32	s15, s24, s24
 8010fdc:	eeec 7aec 	vfms.f32	s15, s25, s25
 8010fe0:	eee9 7a09 	vfma.f32	s15, s18, s18
 8010fe4:	ee2c 9a89 	vmul.f32	s18, s25, s18
 8010fe8:	ee17 0a90 	vmov	r0, s15
 8010fec:	eeab 9a8c 	vfma.f32	s18, s23, s24
 8010ff0:	f7ef fab2 	bl	8000558 <__aeabi_f2d>
 8010ff4:	ee79 7a09 	vadd.f32	s15, s18, s18
 8010ff8:	4604      	mov	r4, r0
 8010ffa:	460d      	mov	r5, r1
 8010ffc:	ee17 0a90 	vmov	r0, s15
 8011000:	f7ef faaa 	bl	8000558 <__aeabi_f2d>
 8011004:	4622      	mov	r2, r4
 8011006:	462b      	mov	r3, r5
 8011008:	f00a fb42 	bl	801b690 <atan2>
 801100c:	a352      	add	r3, pc, #328	; (adr r3, 8011158 <iNemo_quat2heading+0x370>)
 801100e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011012:	f7ef faf9 	bl	8000608 <__aeabi_dmul>
 8011016:	2200      	movs	r2, #0
 8011018:	4b54      	ldr	r3, [pc, #336]	; (801116c <iNemo_quat2heading+0x384>)
 801101a:	f7ef f93d 	bl	8000298 <__aeabi_dsub>
 801101e:	f7ef fdcb 	bl	8000bb8 <__aeabi_d2f>
 8011022:	ee00 0a10 	vmov	s0, r0
 8011026:	e78a      	b.n	8010f3e <iNemo_quat2heading+0x156>
 8011028:	eeb4 8ae9 	vcmpe.f32	s16, s19
 801102c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011030:	dd29      	ble.n	8011086 <iNemo_quat2heading+0x29e>
 8011032:	ee18 0a90 	vmov	r0, s17
 8011036:	f7ef fa8f 	bl	8000558 <__aeabi_f2d>
 801103a:	a345      	add	r3, pc, #276	; (adr r3, 8011150 <iNemo_quat2heading+0x368>)
 801103c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011040:	f7ef fae2 	bl	8000608 <__aeabi_dmul>
 8011044:	eeb5 bac0 	vcmpe.f32	s22, #0.0
 8011048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801104c:	4632      	mov	r2, r6
 801104e:	463b      	mov	r3, r7
 8011050:	f340 808e 	ble.w	8011170 <iNemo_quat2heading+0x388>
 8011054:	f7ef fd4a 	bl	8000aec <__aeabi_dcmplt>
 8011058:	2800      	cmp	r0, #0
 801105a:	f43f af1e 	beq.w	8010e9a <iNemo_quat2heading+0xb2>
 801105e:	ee19 0a90 	vmov	r0, s19
 8011062:	f7ef fa79 	bl	8000558 <__aeabi_f2d>
 8011066:	a33a      	add	r3, pc, #232	; (adr r3, 8011150 <iNemo_quat2heading+0x368>)
 8011068:	e9d3 2300 	ldrd	r2, r3, [r3]
 801106c:	f7ef facc 	bl	8000608 <__aeabi_dmul>
 8011070:	4632      	mov	r2, r6
 8011072:	463b      	mov	r3, r7
 8011074:	f7ef fd3a 	bl	8000aec <__aeabi_dcmplt>
 8011078:	2800      	cmp	r0, #0
 801107a:	f43f af0e 	beq.w	8010e9a <iNemo_quat2heading+0xb2>
 801107e:	2301      	movs	r3, #1
 8011080:	f8c5 3820 	str.w	r3, [r5, #2080]	; 0x820
 8011084:	e7a6      	b.n	8010fd4 <iNemo_quat2heading+0x1ec>
 8011086:	ee19 0a90 	vmov	r0, s19
 801108a:	f7ef fa65 	bl	8000558 <__aeabi_f2d>
 801108e:	a330      	add	r3, pc, #192	; (adr r3, 8011150 <iNemo_quat2heading+0x368>)
 8011090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011094:	4680      	mov	r8, r0
 8011096:	4689      	mov	r9, r1
 8011098:	4630      	mov	r0, r6
 801109a:	4639      	mov	r1, r7
 801109c:	f7ef fab4 	bl	8000608 <__aeabi_dmul>
 80110a0:	eeb5 aac0 	vcmpe.f32	s20, #0.0
 80110a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110a8:	4602      	mov	r2, r0
 80110aa:	460b      	mov	r3, r1
 80110ac:	4640      	mov	r0, r8
 80110ae:	4649      	mov	r1, r9
 80110b0:	f340 80d5 	ble.w	801125e <iNemo_quat2heading+0x476>
 80110b4:	f7ef fd38 	bl	8000b28 <__aeabi_dcmpgt>
 80110b8:	2800      	cmp	r0, #0
 80110ba:	f43f aeee 	beq.w	8010e9a <iNemo_quat2heading+0xb2>
 80110be:	ee18 0a90 	vmov	r0, s17
 80110c2:	f7ef fa49 	bl	8000558 <__aeabi_f2d>
 80110c6:	a322      	add	r3, pc, #136	; (adr r3, 8011150 <iNemo_quat2heading+0x368>)
 80110c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110cc:	f7ef fa9c 	bl	8000608 <__aeabi_dmul>
 80110d0:	4642      	mov	r2, r8
 80110d2:	464b      	mov	r3, r9
 80110d4:	f7ef fd0a 	bl	8000aec <__aeabi_dcmplt>
 80110d8:	2800      	cmp	r0, #0
 80110da:	f43f aede 	beq.w	8010e9a <iNemo_quat2heading+0xb2>
 80110de:	2300      	movs	r3, #0
 80110e0:	f8c5 3820 	str.w	r3, [r5, #2080]	; 0x820
 80110e4:	ed9a 0a00 	vldr	s0, [sl]
 80110e8:	e729      	b.n	8010f3e <iNemo_quat2heading+0x156>
 80110ea:	a319      	add	r3, pc, #100	; (adr r3, 8011150 <iNemo_quat2heading+0x368>)
 80110ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110f0:	4630      	mov	r0, r6
 80110f2:	4639      	mov	r1, r7
 80110f4:	f7ef fa88 	bl	8000608 <__aeabi_dmul>
 80110f8:	4680      	mov	r8, r0
 80110fa:	ee19 0a90 	vmov	r0, s19
 80110fe:	4689      	mov	r9, r1
 8011100:	f7ef fa2a 	bl	8000558 <__aeabi_f2d>
 8011104:	eeb5 aac0 	vcmpe.f32	s20, #0.0
 8011108:	4606      	mov	r6, r0
 801110a:	460f      	mov	r7, r1
 801110c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011110:	4640      	mov	r0, r8
 8011112:	4649      	mov	r1, r9
 8011114:	4632      	mov	r2, r6
 8011116:	463b      	mov	r3, r7
 8011118:	d56c      	bpl.n	80111f4 <iNemo_quat2heading+0x40c>
 801111a:	f7ef fce7 	bl	8000aec <__aeabi_dcmplt>
 801111e:	b170      	cbz	r0, 801113e <iNemo_quat2heading+0x356>
 8011120:	ee18 0a10 	vmov	r0, s16
 8011124:	f7ef fa18 	bl	8000558 <__aeabi_f2d>
 8011128:	a309      	add	r3, pc, #36	; (adr r3, 8011150 <iNemo_quat2heading+0x368>)
 801112a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801112e:	f7ef fa6b 	bl	8000608 <__aeabi_dmul>
 8011132:	4632      	mov	r2, r6
 8011134:	463b      	mov	r3, r7
 8011136:	f7ef fcd9 	bl	8000aec <__aeabi_dcmplt>
 801113a:	2800      	cmp	r0, #0
 801113c:	d1cf      	bne.n	80110de <iNemo_quat2heading+0x2f6>
 801113e:	eef0 7a4c 	vmov.f32	s15, s24
 8011142:	eeb0 ca6b 	vmov.f32	s24, s23
 8011146:	eef0 ba67 	vmov.f32	s23, s15
 801114a:	e6a6      	b.n	8010e9a <iNemo_quat2heading+0xb2>
 801114c:	f3af 8000 	nop.w
 8011150:	e0000000 	.word	0xe0000000
 8011154:	3ff6b851 	.word	0x3ff6b851
 8011158:	20000000 	.word	0x20000000
 801115c:	404ca5dc 	.word	0x404ca5dc
 8011160:	200013c8 	.word	0x200013c8
 8011164:	43340000 	.word	0x43340000
 8011168:	43b40000 	.word	0x43b40000
 801116c:	40568000 	.word	0x40568000
 8011170:	f7ef fcbc 	bl	8000aec <__aeabi_dcmplt>
 8011174:	2800      	cmp	r0, #0
 8011176:	f43f ae90 	beq.w	8010e9a <iNemo_quat2heading+0xb2>
 801117a:	ee19 0a90 	vmov	r0, s19
 801117e:	f7ef f9eb 	bl	8000558 <__aeabi_f2d>
 8011182:	a35b      	add	r3, pc, #364	; (adr r3, 80112f0 <iNemo_quat2heading+0x508>)
 8011184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011188:	f7ef fa3e 	bl	8000608 <__aeabi_dmul>
 801118c:	4632      	mov	r2, r6
 801118e:	463b      	mov	r3, r7
 8011190:	f7ef fcac 	bl	8000aec <__aeabi_dcmplt>
 8011194:	2800      	cmp	r0, #0
 8011196:	f43f ae80 	beq.w	8010e9a <iNemo_quat2heading+0xb2>
 801119a:	2303      	movs	r3, #3
 801119c:	f8c5 3820 	str.w	r3, [r5, #2080]	; 0x820
 80111a0:	ee6b 7aeb 	vnmul.f32	s15, s23, s23
 80111a4:	eeec 7a0c 	vfma.f32	s15, s24, s24
 80111a8:	eeec 7aec 	vfms.f32	s15, s25, s25
 80111ac:	eee9 7a09 	vfma.f32	s15, s18, s18
 80111b0:	ee2c 9a89 	vmul.f32	s18, s25, s18
 80111b4:	ee17 0a90 	vmov	r0, s15
 80111b8:	eeab 9a8c 	vfma.f32	s18, s23, s24
 80111bc:	f7ef f9cc 	bl	8000558 <__aeabi_f2d>
 80111c0:	ee79 7a09 	vadd.f32	s15, s18, s18
 80111c4:	4604      	mov	r4, r0
 80111c6:	460d      	mov	r5, r1
 80111c8:	ee17 0a90 	vmov	r0, s15
 80111cc:	f7ef f9c4 	bl	8000558 <__aeabi_f2d>
 80111d0:	4622      	mov	r2, r4
 80111d2:	462b      	mov	r3, r5
 80111d4:	f00a fa5c 	bl	801b690 <atan2>
 80111d8:	a349      	add	r3, pc, #292	; (adr r3, 8011300 <iNemo_quat2heading+0x518>)
 80111da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111de:	f7ef fa13 	bl	8000608 <__aeabi_dmul>
 80111e2:	2200      	movs	r2, #0
 80111e4:	4b44      	ldr	r3, [pc, #272]	; (80112f8 <iNemo_quat2heading+0x510>)
 80111e6:	f7ef f859 	bl	800029c <__adddf3>
 80111ea:	f7ef fce5 	bl	8000bb8 <__aeabi_d2f>
 80111ee:	ee00 0a10 	vmov	s0, r0
 80111f2:	e6a4      	b.n	8010f3e <iNemo_quat2heading+0x156>
 80111f4:	f7ef fc7a 	bl	8000aec <__aeabi_dcmplt>
 80111f8:	2800      	cmp	r0, #0
 80111fa:	d0a0      	beq.n	801113e <iNemo_quat2heading+0x356>
 80111fc:	ee18 0a10 	vmov	r0, s16
 8011200:	f7ef f9aa 	bl	8000558 <__aeabi_f2d>
 8011204:	a33a      	add	r3, pc, #232	; (adr r3, 80112f0 <iNemo_quat2heading+0x508>)
 8011206:	e9d3 2300 	ldrd	r2, r3, [r3]
 801120a:	f7ef f9fd 	bl	8000608 <__aeabi_dmul>
 801120e:	4632      	mov	r2, r6
 8011210:	463b      	mov	r3, r7
 8011212:	f7ef fc6b 	bl	8000aec <__aeabi_dcmplt>
 8011216:	2800      	cmp	r0, #0
 8011218:	d091      	beq.n	801113e <iNemo_quat2heading+0x356>
 801121a:	2302      	movs	r3, #2
 801121c:	f8c5 3820 	str.w	r3, [r5, #2080]	; 0x820
 8011220:	e687      	b.n	8010f32 <iNemo_quat2heading+0x14a>
 8011222:	f7ef fc63 	bl	8000aec <__aeabi_dcmplt>
 8011226:	2800      	cmp	r0, #0
 8011228:	d089      	beq.n	801113e <iNemo_quat2heading+0x356>
 801122a:	ee19 0a90 	vmov	r0, s19
 801122e:	f7ef f993 	bl	8000558 <__aeabi_f2d>
 8011232:	a32f      	add	r3, pc, #188	; (adr r3, 80112f0 <iNemo_quat2heading+0x508>)
 8011234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011238:	f7ef f9e6 	bl	8000608 <__aeabi_dmul>
 801123c:	4632      	mov	r2, r6
 801123e:	463b      	mov	r3, r7
 8011240:	f7ef fc54 	bl	8000aec <__aeabi_dcmplt>
 8011244:	2800      	cmp	r0, #0
 8011246:	f43f af7a 	beq.w	801113e <iNemo_quat2heading+0x356>
 801124a:	eef0 7a6b 	vmov.f32	s15, s23
 801124e:	2303      	movs	r3, #3
 8011250:	eef0 ba4c 	vmov.f32	s23, s24
 8011254:	f8c5 3820 	str.w	r3, [r5, #2080]	; 0x820
 8011258:	eeb0 ca67 	vmov.f32	s24, s15
 801125c:	e7a0      	b.n	80111a0 <iNemo_quat2heading+0x3b8>
 801125e:	f7ef fc63 	bl	8000b28 <__aeabi_dcmpgt>
 8011262:	2800      	cmp	r0, #0
 8011264:	f43f ae19 	beq.w	8010e9a <iNemo_quat2heading+0xb2>
 8011268:	ee18 0a90 	vmov	r0, s17
 801126c:	f7ef f974 	bl	8000558 <__aeabi_f2d>
 8011270:	a31f      	add	r3, pc, #124	; (adr r3, 80112f0 <iNemo_quat2heading+0x508>)
 8011272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011276:	f7ef f9c7 	bl	8000608 <__aeabi_dmul>
 801127a:	4642      	mov	r2, r8
 801127c:	464b      	mov	r3, r9
 801127e:	f7ef fc35 	bl	8000aec <__aeabi_dcmplt>
 8011282:	2800      	cmp	r0, #0
 8011284:	f43f ae09 	beq.w	8010e9a <iNemo_quat2heading+0xb2>
 8011288:	e7c7      	b.n	801121a <iNemo_quat2heading+0x432>
 801128a:	f7ef fc4d 	bl	8000b28 <__aeabi_dcmpgt>
 801128e:	2800      	cmp	r0, #0
 8011290:	f43f ae03 	beq.w	8010e9a <iNemo_quat2heading+0xb2>
 8011294:	ee19 0a90 	vmov	r0, s19
 8011298:	f7ef f95e 	bl	8000558 <__aeabi_f2d>
 801129c:	a314      	add	r3, pc, #80	; (adr r3, 80112f0 <iNemo_quat2heading+0x508>)
 801129e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112a2:	f7ef f9b1 	bl	8000608 <__aeabi_dmul>
 80112a6:	4642      	mov	r2, r8
 80112a8:	464b      	mov	r3, r9
 80112aa:	f7ef fc1f 	bl	8000aec <__aeabi_dcmplt>
 80112ae:	2800      	cmp	r0, #0
 80112b0:	f43f adf3 	beq.w	8010e9a <iNemo_quat2heading+0xb2>
 80112b4:	2305      	movs	r3, #5
 80112b6:	f8c5 3820 	str.w	r3, [r5, #2080]	; 0x820
 80112ba:	e713      	b.n	80110e4 <iNemo_quat2heading+0x2fc>
 80112bc:	f7ef fc34 	bl	8000b28 <__aeabi_dcmpgt>
 80112c0:	2800      	cmp	r0, #0
 80112c2:	f43f af3c 	beq.w	801113e <iNemo_quat2heading+0x356>
 80112c6:	ee19 0a90 	vmov	r0, s19
 80112ca:	f7ef f945 	bl	8000558 <__aeabi_f2d>
 80112ce:	a308      	add	r3, pc, #32	; (adr r3, 80112f0 <iNemo_quat2heading+0x508>)
 80112d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112d4:	f7ef f998 	bl	8000608 <__aeabi_dmul>
 80112d8:	4642      	mov	r2, r8
 80112da:	464b      	mov	r3, r9
 80112dc:	f7ef fc06 	bl	8000aec <__aeabi_dcmplt>
 80112e0:	2800      	cmp	r0, #0
 80112e2:	f43f af2c 	beq.w	801113e <iNemo_quat2heading+0x356>
 80112e6:	e7e5      	b.n	80112b4 <iNemo_quat2heading+0x4cc>
 80112e8:	ed9f 0a04 	vldr	s0, [pc, #16]	; 80112fc <iNemo_quat2heading+0x514>
 80112ec:	e639      	b.n	8010f62 <iNemo_quat2heading+0x17a>
 80112ee:	bf00      	nop
 80112f0:	e0000000 	.word	0xe0000000
 80112f4:	3ff6b851 	.word	0x3ff6b851
 80112f8:	40568000 	.word	0x40568000
 80112fc:	00000000 	.word	0x00000000
 8011300:	20000000 	.word	0x20000000
 8011304:	404ca5dc 	.word	0x404ca5dc

08011308 <output_update>:
 8011308:	edd0 5a03 	vldr	s11, [r0, #12]
 801130c:	ed90 7a02 	vldr	s14, [r0, #8]
 8011310:	edd0 4a01 	vldr	s9, [r0, #4]
 8011314:	edd0 3a00 	vldr	s7, [r0]
 8011318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801131c:	ee65 7aa5 	vmul.f32	s15, s11, s11
 8011320:	eeb1 5a64 	vneg.f32	s10, s9
 8011324:	eee7 7a07 	vfma.f32	s15, s14, s14
 8011328:	4682      	mov	sl, r0
 801132a:	460f      	mov	r7, r1
 801132c:	ee24 6a87 	vmul.f32	s12, s9, s14
 8011330:	ee65 6ac5 	vnmul.f32	s13, s11, s10
 8011334:	ed2d 8b0a 	vpush	{d8-d12}
 8011338:	eeb1 4a63 	vneg.f32	s8, s7
 801133c:	eee3 6a87 	vfma.f32	s13, s7, s14
 8011340:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 8011344:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8011346:	ed8a 4a00 	vstr	s8, [sl]
 801134a:	eee4 7a23 	vfma.f32	s15, s8, s7
 801134e:	4614      	mov	r4, r2
 8011350:	461d      	mov	r5, r3
 8011352:	eea4 6a25 	vfma.f32	s12, s8, s11
 8011356:	eeb1 7a47 	vneg.f32	s14, s14
 801135a:	ed8a 7a02 	vstr	s14, [sl, #8]
 801135e:	ee36 6a06 	vadd.f32	s12, s12, s12
 8011362:	ee76 6aa6 	vadd.f32	s13, s13, s13
 8011366:	eee5 7a24 	vfma.f32	s15, s10, s9
 801136a:	ed8a 5a01 	vstr	s10, [sl, #4]
 801136e:	2800      	cmp	r0, #0
 8011370:	d141      	bne.n	80113f6 <output_update+0xee>
 8011372:	edc3 6a00 	vstr	s13, [r3]
 8011376:	edc3 7a02 	vstr	s15, [r3, #8]
 801137a:	ed83 6a01 	vstr	s12, [r3, #4]
 801137e:	ed9a 7a02 	vldr	s14, [sl, #8]
 8011382:	edda 6a03 	vldr	s13, [sl, #12]
 8011386:	edda 5a00 	vldr	s11, [sl]
 801138a:	ed9a 6a01 	vldr	s12, [sl, #4]
 801138e:	4bf2      	ldr	r3, [pc, #968]	; (8011758 <output_update+0x450>)
 8011390:	ee67 7a26 	vmul.f32	s15, s14, s13
 8011394:	ee65 baa5 	vmul.f32	s23, s11, s11
 8011398:	eee5 7a86 	vfma.f32	s15, s11, s12
 801139c:	ee26 aa06 	vmul.f32	s20, s12, s12
 80113a0:	ee67 9a07 	vmul.f32	s19, s14, s14
 80113a4:	ee37 8aa7 	vadd.f32	s16, s15, s15
 80113a8:	ee3b 7aca 	vsub.f32	s14, s23, s20
 80113ac:	edd3 aa00 	vldr	s21, [r3]
 80113b0:	ee26 9aa6 	vmul.f32	s18, s13, s13
 80113b4:	ee37 7a69 	vsub.f32	s14, s14, s19
 80113b8:	eeb4 8a6a 	vcmp.f32	s16, s21
 80113bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113c0:	ee37 7a09 	vadd.f32	s14, s14, s18
 80113c4:	d032      	beq.n	801142c <output_update+0x124>
 80113c6:	edd3 7a01 	vldr	s15, [r3, #4]
 80113ca:	eeb4 8a67 	vcmp.f32	s16, s15
 80113ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113d2:	d02b      	beq.n	801142c <output_update+0x124>
 80113d4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80113d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113dc:	f040 81a4 	bne.w	8011728 <output_update+0x420>
 80113e0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80113e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113e8:	f340 81ef 	ble.w	80117ca <output_update+0x4c2>
 80113ec:	ed9f badb 	vldr	s22, [pc, #876]	; 801175c <output_update+0x454>
 80113f0:	ed9f 7adb 	vldr	s14, [pc, #876]	; 8011760 <output_update+0x458>
 80113f4:	e04c      	b.n	8011490 <output_update+0x188>
 80113f6:	2801      	cmp	r0, #1
 80113f8:	f000 8099 	beq.w	801152e <output_update+0x226>
 80113fc:	ecbd 8b0a 	vpop	{d8-d12}
 8011400:	ed9f 6ae2 	vldr	s12, [pc, #904]	; 801178c <output_update+0x484>
 8011404:	edd2 6a00 	vldr	s13, [r2]
 8011408:	ed92 7a01 	vldr	s14, [r2, #4]
 801140c:	edd2 7a02 	vldr	s15, [r2, #8]
 8011410:	ee66 6a86 	vmul.f32	s13, s13, s12
 8011414:	ee27 7a06 	vmul.f32	s14, s14, s12
 8011418:	ee67 7a86 	vmul.f32	s15, s15, s12
 801141c:	edc2 6a00 	vstr	s13, [r2]
 8011420:	ed82 7a01 	vstr	s14, [r2, #4]
 8011424:	edc2 7a02 	vstr	s15, [r2, #8]
 8011428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801142c:	eeb4 7a6a 	vcmp.f32	s14, s21
 8011430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011434:	f040 811f 	bne.w	8011676 <output_update+0x36e>
 8011438:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801143c:	eddf 5ac9 	vldr	s11, [pc, #804]	; 8011764 <output_update+0x45c>
 8011440:	ed9f 4ac9 	vldr	s8, [pc, #804]	; 8011768 <output_update+0x460>
 8011444:	ed9f 6ac9 	vldr	s12, [pc, #804]	; 801176c <output_update+0x464>
 8011448:	eddf 4ac9 	vldr	s9, [pc, #804]	; 8011770 <output_update+0x468>
 801144c:	ed9f bac9 	vldr	s22, [pc, #804]	; 8011774 <output_update+0x46c>
 8011450:	ed9f 5ac9 	vldr	s10, [pc, #804]	; 8011778 <output_update+0x470>
 8011454:	eddf 6ac9 	vldr	s13, [pc, #804]	; 801177c <output_update+0x474>
 8011458:	eddf 7ac9 	vldr	s15, [pc, #804]	; 8011780 <output_update+0x478>
 801145c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011460:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8011464:	bfd8      	it	le
 8011466:	eef0 5a44 	vmovle.f32	s11, s8
 801146a:	bfd8      	it	le
 801146c:	eeb0 6a64 	vmovle.f32	s12, s9
 8011470:	bfd8      	it	le
 8011472:	eeb0 ba45 	vmovle.f32	s22, s10
 8011476:	bfd4      	ite	le
 8011478:	eeb0 7a67 	vmovle.f32	s14, s15
 801147c:	eeb0 7a66 	vmovgt.f32	s14, s13
 8011480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011484:	bfc8      	it	gt
 8011486:	eeb0 ba65 	vmovgt.f32	s22, s11
 801148a:	bfc8      	it	gt
 801148c:	eeb0 7a46 	vmovgt.f32	s14, s12
 8011490:	ed84 7a00 	vstr	s14, [r4]
 8011494:	edda 7a01 	vldr	s15, [sl, #4]
 8011498:	ed9a 7a03 	vldr	s14, [sl, #12]
 801149c:	edda 6a02 	vldr	s13, [sl, #8]
 80114a0:	ed9a 6a00 	vldr	s12, [sl]
 80114a4:	ee27 7a67 	vnmul.f32	s14, s14, s15
 80114a8:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 80114ac:	eea6 7a26 	vfma.f32	s14, s12, s13
 80114b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80114b4:	ee17 0a90 	vmov	r0, s15
 80114b8:	f7ef f84e 	bl	8000558 <__aeabi_f2d>
 80114bc:	f00a f894 	bl	801b5e8 <asin>
 80114c0:	f7ef fb7a 	bl	8000bb8 <__aeabi_d2f>
 80114c4:	6060      	str	r0, [r4, #4]
 80114c6:	edda 7a03 	vldr	s15, [sl, #12]
 80114ca:	ed9a 8a00 	vldr	s16, [sl]
 80114ce:	edda 6a01 	vldr	s13, [sl, #4]
 80114d2:	ed9a 7a02 	vldr	s14, [sl, #8]
 80114d6:	ee28 8a27 	vmul.f32	s16, s16, s15
 80114da:	ee79 7a89 	vadd.f32	s15, s19, s18
 80114de:	eea6 8a87 	vfma.f32	s16, s13, s14
 80114e2:	ee77 7aeb 	vsub.f32	s15, s15, s23
 80114e6:	ee38 8a08 	vadd.f32	s16, s16, s16
 80114ea:	ee08 0a90 	vmov	s17, r0
 80114ee:	eeb4 8a6a 	vcmp.f32	s16, s21
 80114f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114f6:	ee77 7aca 	vsub.f32	s15, s15, s20
 80114fa:	f000 80c6 	beq.w	801168a <output_update+0x382>
 80114fe:	4ba1      	ldr	r3, [pc, #644]	; (8011784 <output_update+0x47c>)
 8011500:	ed93 7a00 	vldr	s14, [r3]
 8011504:	eeb4 8a47 	vcmp.f32	s16, s14
 8011508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801150c:	f000 80bd 	beq.w	801168a <output_update+0x382>
 8011510:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011518:	f040 8140 	bne.w	801179c <output_update+0x494>
 801151c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8011520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011524:	f340 8157 	ble.w	80117d6 <output_update+0x4ce>
 8011528:	eddf 7a8c 	vldr	s15, [pc, #560]	; 801175c <output_update+0x454>
 801152c:	e0d6      	b.n	80116dc <output_update+0x3d4>
 801152e:	eef1 7a67 	vneg.f32	s15, s15
 8011532:	ed83 6a00 	vstr	s12, [r3]
 8011536:	edc3 6a01 	vstr	s13, [r3, #4]
 801153a:	edc3 7a02 	vstr	s15, [r3, #8]
 801153e:	ed9a aa00 	vldr	s20, [sl]
 8011542:	edda 8a02 	vldr	s17, [sl, #8]
 8011546:	edda aa01 	vldr	s21, [sl, #4]
 801154a:	ed9a 8a03 	vldr	s16, [sl, #12]
 801154e:	ee2a 9a0a 	vmul.f32	s18, s20, s20
 8011552:	ee68 7aa8 	vmul.f32	s15, s17, s17
 8011556:	ee39 9a09 	vadd.f32	s18, s18, s18
 801155a:	eeb0 ca00 	vmov.f32	s24, #0	; 0x40000000  2.0
 801155e:	eeb0 7a49 	vmov.f32	s14, s18
 8011562:	eea7 7a8c 	vfma.f32	s14, s15, s24
 8011566:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
 801156a:	ee7b 7ac7 	vsub.f32	s15, s23, s14
 801156e:	eef1 8a68 	vneg.f32	s17, s17
 8011572:	ee17 0a90 	vmov	r0, s15
 8011576:	f7ee ffef 	bl	8000558 <__aeabi_f2d>
 801157a:	ee6a 7a2a 	vmul.f32	s15, s20, s21
 801157e:	4680      	mov	r8, r0
 8011580:	eee8 7a88 	vfma.f32	s15, s17, s16
 8011584:	4689      	mov	r9, r1
 8011586:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801158a:	ee17 0a90 	vmov	r0, s15
 801158e:	f7ee ffe3 	bl	8000558 <__aeabi_f2d>
 8011592:	4642      	mov	r2, r8
 8011594:	464b      	mov	r3, r9
 8011596:	f00a f87b 	bl	801b690 <atan2>
 801159a:	f7ef fb0d 	bl	8000bb8 <__aeabi_d2f>
 801159e:	ee6a 7aaa 	vmul.f32	s15, s21, s21
 80115a2:	ee0b 0a10 	vmov	s22, r0
 80115a6:	eea7 9a8c 	vfma.f32	s18, s15, s24
 80115aa:	eef1 9a4b 	vneg.f32	s19, s22
 80115ae:	ee7b 7ac9 	vsub.f32	s15, s23, s18
 80115b2:	edc4 9a00 	vstr	s19, [r4]
 80115b6:	ee17 0a90 	vmov	r0, s15
 80115ba:	f7ee ffcd 	bl	8000558 <__aeabi_f2d>
 80115be:	ee6a 7a88 	vmul.f32	s15, s21, s16
 80115c2:	4680      	mov	r8, r0
 80115c4:	eeea 7a28 	vfma.f32	s15, s20, s17
 80115c8:	4689      	mov	r9, r1
 80115ca:	ee28 8a4a 	vnmul.f32	s16, s16, s20
 80115ce:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80115d2:	eea8 8aaa 	vfma.f32	s16, s17, s21
 80115d6:	ee17 0a90 	vmov	r0, s15
 80115da:	f7ee ffbd 	bl	8000558 <__aeabi_f2d>
 80115de:	4642      	mov	r2, r8
 80115e0:	464b      	mov	r3, r9
 80115e2:	f00a f855 	bl	801b690 <atan2>
 80115e6:	f7ef fae7 	bl	8000bb8 <__aeabi_d2f>
 80115ea:	ee07 0a90 	vmov	s15, r0
 80115ee:	eeb1 9a67 	vneg.f32	s18, s15
 80115f2:	ee78 7a08 	vadd.f32	s15, s16, s16
 80115f6:	ed84 9a01 	vstr	s18, [r4, #4]
 80115fa:	ee17 0a90 	vmov	r0, s15
 80115fe:	f7ee ffab 	bl	8000558 <__aeabi_f2d>
 8011602:	f009 fff1 	bl	801b5e8 <asin>
 8011606:	f7ef fad7 	bl	8000bb8 <__aeabi_d2f>
 801160a:	eeb5 bac0 	vcmpe.f32	s22, #0.0
 801160e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011612:	ee07 0a90 	vmov	s15, r0
 8011616:	60a0      	str	r0, [r4, #8]
 8011618:	dd03      	ble.n	8011622 <output_update+0x31a>
 801161a:	eddf 9a5b 	vldr	s19, [pc, #364]	; 8011788 <output_update+0x480>
 801161e:	ee79 9acb 	vsub.f32	s19, s19, s22
 8011622:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 801178c <output_update+0x484>
 8011626:	ee69 9a87 	vmul.f32	s19, s19, s14
 801162a:	ee29 9a07 	vmul.f32	s18, s18, s14
 801162e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011632:	edc4 9a00 	vstr	s19, [r4]
 8011636:	ed84 9a01 	vstr	s18, [r4, #4]
 801163a:	edc4 7a02 	vstr	s15, [r4, #8]
 801163e:	ed97 7a01 	vldr	s14, [r7, #4]
 8011642:	edd5 7a00 	vldr	s15, [r5]
 8011646:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801164a:	ecbd 8b0a 	vpop	{d8-d12}
 801164e:	edc6 7a00 	vstr	s15, [r6]
 8011652:	ed97 7a00 	vldr	s14, [r7]
 8011656:	edd5 7a01 	vldr	s15, [r5, #4]
 801165a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801165e:	edc6 7a01 	vstr	s15, [r6, #4]
 8011662:	edd5 7a02 	vldr	s15, [r5, #8]
 8011666:	ed97 7a02 	vldr	s14, [r7, #8]
 801166a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801166e:	edc6 7a02 	vstr	s15, [r6, #8]
 8011672:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011676:	4b43      	ldr	r3, [pc, #268]	; (8011784 <output_update+0x47c>)
 8011678:	edd3 7a00 	vldr	s15, [r3]
 801167c:	eeb4 7a67 	vcmp.f32	s14, s15
 8011680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011684:	f47f aea6 	bne.w	80113d4 <output_update+0xcc>
 8011688:	e6d6      	b.n	8011438 <output_update+0x130>
 801168a:	eef4 7a6a 	vcmp.f32	s15, s21
 801168e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011692:	d008      	beq.n	80116a6 <output_update+0x39e>
 8011694:	4b3b      	ldr	r3, [pc, #236]	; (8011784 <output_update+0x47c>)
 8011696:	ed93 7a00 	vldr	s14, [r3]
 801169a:	eef4 7a47 	vcmp.f32	s15, s14
 801169e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116a2:	f47f af35 	bne.w	8011510 <output_update+0x208>
 80116a6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80116aa:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8011764 <output_update+0x45c>
 80116ae:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8011768 <output_update+0x460>
 80116b2:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8011774 <output_update+0x46c>
 80116b6:	ed9f 6a30 	vldr	s12, [pc, #192]	; 8011778 <output_update+0x470>
 80116ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116be:	eef5 7a40 	vcmp.f32	s15, #0.0
 80116c2:	bfd8      	it	le
 80116c4:	eef0 6a65 	vmovle.f32	s13, s11
 80116c8:	bfd4      	ite	le
 80116ca:	eef0 7a46 	vmovle.f32	s15, s12
 80116ce:	eef0 7a47 	vmovgt.f32	s15, s14
 80116d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116d6:	bfc8      	it	gt
 80116d8:	eef0 7a66 	vmovgt.f32	s15, s13
 80116dc:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 801178c <output_update+0x484>
 80116e0:	ed84 ba00 	vstr	s22, [r4]
 80116e4:	ee68 8a87 	vmul.f32	s17, s17, s14
 80116e8:	edc4 7a02 	vstr	s15, [r4, #8]
 80116ec:	edc4 8a01 	vstr	s17, [r4, #4]
 80116f0:	ed97 7a00 	vldr	s14, [r7]
 80116f4:	edd5 7a00 	vldr	s15, [r5]
 80116f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80116fc:	ecbd 8b0a 	vpop	{d8-d12}
 8011700:	edc6 7a00 	vstr	s15, [r6]
 8011704:	ed97 7a01 	vldr	s14, [r7, #4]
 8011708:	edd5 7a01 	vldr	s15, [r5, #4]
 801170c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011710:	edc6 7a01 	vstr	s15, [r6, #4]
 8011714:	edd5 7a02 	vldr	s15, [r5, #8]
 8011718:	ed97 7a02 	vldr	s14, [r7, #8]
 801171c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011720:	edc6 7a02 	vstr	s15, [r6, #8]
 8011724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011728:	ee17 0a10 	vmov	r0, s14
 801172c:	f7ee ff14 	bl	8000558 <__aeabi_f2d>
 8011730:	4680      	mov	r8, r0
 8011732:	4689      	mov	r9, r1
 8011734:	ee18 0a10 	vmov	r0, s16
 8011738:	f7ee ff0e 	bl	8000558 <__aeabi_f2d>
 801173c:	4642      	mov	r2, r8
 801173e:	464b      	mov	r3, r9
 8011740:	f009 ffa6 	bl	801b690 <atan2>
 8011744:	f7ef fa38 	bl	8000bb8 <__aeabi_d2f>
 8011748:	ed9f ba10 	vldr	s22, [pc, #64]	; 801178c <output_update+0x484>
 801174c:	ee07 0a10 	vmov	s14, r0
 8011750:	ee27 ba0b 	vmul.f32	s22, s14, s22
 8011754:	e69c      	b.n	8011490 <output_update+0x188>
 8011756:	bf00      	nop
 8011758:	200017d8 	.word	0x200017d8
 801175c:	42b40000 	.word	0x42b40000
 8011760:	3fc90fdb 	.word	0x3fc90fdb
 8011764:	42340000 	.word	0x42340000
 8011768:	c2340000 	.word	0xc2340000
 801176c:	3f490fdb 	.word	0x3f490fdb
 8011770:	bf490fdb 	.word	0xbf490fdb
 8011774:	43070000 	.word	0x43070000
 8011778:	c3070000 	.word	0xc3070000
 801177c:	4016cbe4 	.word	0x4016cbe4
 8011780:	c016cbe4 	.word	0xc016cbe4
 8011784:	200017dc 	.word	0x200017dc
 8011788:	40c90e56 	.word	0x40c90e56
 801178c:	42652ee1 	.word	0x42652ee1
 8011790:	00000000 	.word	0x00000000
 8011794:	bfc90fdb 	.word	0xbfc90fdb
 8011798:	c2b40000 	.word	0xc2b40000
 801179c:	ee17 0a90 	vmov	r0, s15
 80117a0:	f7ee feda 	bl	8000558 <__aeabi_f2d>
 80117a4:	4680      	mov	r8, r0
 80117a6:	4689      	mov	r9, r1
 80117a8:	ee18 0a10 	vmov	r0, s16
 80117ac:	f7ee fed4 	bl	8000558 <__aeabi_f2d>
 80117b0:	4642      	mov	r2, r8
 80117b2:	464b      	mov	r3, r9
 80117b4:	f009 ff6c 	bl	801b690 <atan2>
 80117b8:	f7ef f9fe 	bl	8000bb8 <__aeabi_d2f>
 80117bc:	ed5f 7a0d 	vldr	s15, [pc, #-52]	; 801178c <output_update+0x484>
 80117c0:	ee07 0a10 	vmov	s14, r0
 80117c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80117c8:	e788      	b.n	80116dc <output_update+0x3d4>
 80117ca:	d408      	bmi.n	80117de <output_update+0x4d6>
 80117cc:	ed1f ba10 	vldr	s22, [pc, #-64]	; 8011790 <output_update+0x488>
 80117d0:	eeb0 7a4b 	vmov.f32	s14, s22
 80117d4:	e65c      	b.n	8011490 <output_update+0x188>
 80117d6:	d407      	bmi.n	80117e8 <output_update+0x4e0>
 80117d8:	ed5f 7a13 	vldr	s15, [pc, #-76]	; 8011790 <output_update+0x488>
 80117dc:	e77e      	b.n	80116dc <output_update+0x3d4>
 80117de:	ed1f ba12 	vldr	s22, [pc, #-72]	; 8011798 <output_update+0x490>
 80117e2:	ed1f 7a14 	vldr	s14, [pc, #-80]	; 8011794 <output_update+0x48c>
 80117e6:	e653      	b.n	8011490 <output_update+0x188>
 80117e8:	ed5f 7a15 	vldr	s15, [pc, #-84]	; 8011798 <output_update+0x490>
 80117ec:	e776      	b.n	80116dc <output_update+0x3d4>
 80117ee:	bf00      	nop

080117f0 <MEMS_runMagCal.constprop.14>:
 80117f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117f4:	ed2d 8b0c 	vpush	{d8-d13}
 80117f8:	f8df b408 	ldr.w	fp, [pc, #1032]	; 8011c04 <MEMS_runMagCal.constprop.14+0x414>
 80117fc:	f2ad 5d6c 	subw	sp, sp, #1388	; 0x56c
 8011800:	2382      	movs	r3, #130	; 0x82
 8011802:	461a      	mov	r2, r3
 8011804:	f50b 608c 	add.w	r0, fp, #1120	; 0x460
 8011808:	ac56      	add	r4, sp, #344	; 0x158
 801180a:	a917      	add	r1, sp, #92	; 0x5c
 801180c:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
 8011810:	9419      	str	r4, [sp, #100]	; 0x64
 8011812:	f7fe f977 	bl	800fb04 <MEMS_getSensorData_I16>
 8011816:	f8bd 0060 	ldrh.w	r0, [sp, #96]	; 0x60
 801181a:	f9bb 2462 	ldrsh.w	r2, [fp, #1122]	; 0x462
 801181e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011820:	f100 39ff 	add.w	r9, r0, #4294967295
 8011824:	fb02 3209 	mla	r2, r2, r9, r3
 8011828:	9209      	str	r2, [sp, #36]	; 0x24
 801182a:	f8cb 24ac 	str.w	r2, [fp, #1196]	; 0x4ac
 801182e:	2800      	cmp	r0, #0
 8011830:	f000 8275 	beq.w	8011d1e <MEMS_runMagCal.constprop.14+0x52e>
 8011834:	f8db 347c 	ldr.w	r3, [fp, #1148]	; 0x47c
 8011838:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801183c:	f502 32c3 	add.w	r2, r2, #99840	; 0x18600
 8011840:	fb01 f103 	mul.w	r1, r1, r3
 8011844:	32a0      	adds	r2, #160	; 0xa0
 8011846:	428a      	cmp	r2, r1
 8011848:	f080 826f 	bcs.w	8011d2a <MEMS_runMagCal.constprop.14+0x53a>
 801184c:	2200      	movs	r2, #0
 801184e:	f88b 2500 	strb.w	r2, [fp, #1280]	; 0x500
 8011852:	2b00      	cmp	r3, #0
 8011854:	f040 8274 	bne.w	8011d40 <MEMS_runMagCal.constprop.14+0x550>
 8011858:	f8cb 347c 	str.w	r3, [fp, #1148]	; 0x47c
 801185c:	2200      	movs	r2, #0
 801185e:	f8cb 3478 	str.w	r3, [fp, #1144]	; 0x478
 8011862:	f8cb 2480 	str.w	r2, [fp, #1152]	; 0x480
 8011866:	2300      	movs	r3, #0
 8011868:	22ff      	movs	r2, #255	; 0xff
 801186a:	f8cb 3508 	str.w	r3, [fp, #1288]	; 0x508
 801186e:	f8cb 350c 	str.w	r3, [fp, #1292]	; 0x50c
 8011872:	f8cb 3510 	str.w	r3, [fp, #1296]	; 0x510
 8011876:	f8cb 3514 	str.w	r3, [fp, #1300]	; 0x514
 801187a:	f8cb 351c 	str.w	r3, [fp, #1308]	; 0x51c
 801187e:	f8cb 3518 	str.w	r3, [fp, #1304]	; 0x518
 8011882:	f88b 2502 	strb.w	r2, [fp, #1282]	; 0x502
 8011886:	4bdb      	ldr	r3, [pc, #876]	; (8011bf4 <MEMS_runMagCal.constprop.14+0x404>)
 8011888:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 801188c:	4fda      	ldr	r7, [pc, #872]	; (8011bf8 <MEMS_runMagCal.constprop.14+0x408>)
 801188e:	eddf 7adb 	vldr	s15, [pc, #876]	; 8011bfc <MEMS_runMagCal.constprop.14+0x40c>
 8011892:	edd3 2a01 	vldr	s5, [r3, #4]
 8011896:	edd3 5a1f 	vldr	s11, [r3, #124]	; 0x7c
 801189a:	ed93 5a1c 	vldr	s10, [r3, #112]	; 0x70
 801189e:	edd3 4a23 	vldr	s9, [r3, #140]	; 0x8c
 80118a2:	ed93 4a1d 	vldr	s8, [r3, #116]	; 0x74
 80118a6:	edd3 3a27 	vldr	s7, [r3, #156]	; 0x9c
 80118aa:	ed93 3a1e 	vldr	s6, [r3, #120]	; 0x78
 80118ae:	9002      	str	r0, [sp, #8]
 80118b0:	f04f 0c00 	mov.w	ip, #0
 80118b4:	fa1f f989 	uxth.w	r9, r9
 80118b8:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80118bc:	464d      	mov	r5, r9
 80118be:	e9cd cc04 	strd	ip, ip, [sp, #16]
 80118c2:	e9cd cc06 	strd	ip, ip, [sp, #24]
 80118c6:	f06f 2480 	mvn.w	r4, #2147516416	; 0x80008000
 80118ca:	f04f 2280 	mov.w	r2, #2147516416	; 0x80008000
 80118ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80118d2:	468e      	mov	lr, r1
 80118d4:	2d03      	cmp	r5, #3
 80118d6:	9446      	str	r4, [sp, #280]	; 0x118
 80118d8:	9236      	str	r2, [sp, #216]	; 0xd8
 80118da:	f8ad 30dc 	strh.w	r3, [sp, #220]	; 0xdc
 80118de:	f8cd a020 	str.w	sl, [sp, #32]
 80118e2:	4653      	mov	r3, sl
 80118e4:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 80118e8:	eeb0 7a67 	vmov.f32	s14, s15
 80118ec:	f8ad 111c 	strh.w	r1, [sp, #284]	; 0x11c
 80118f0:	9101      	str	r1, [sp, #4]
 80118f2:	4688      	mov	r8, r1
 80118f4:	bf28      	it	cs
 80118f6:	2503      	movcs	r5, #3
 80118f8:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 80118fc:	9700      	str	r7, [sp, #0]
 80118fe:	f8cd c00c 	str.w	ip, [sp, #12]
 8011902:	4662      	mov	r2, ip
 8011904:	4666      	mov	r6, ip
 8011906:	4664      	mov	r4, ip
 8011908:	4638      	mov	r0, r7
 801190a:	46f1      	mov	r9, lr
 801190c:	46ba      	mov	sl, r7
 801190e:	7819      	ldrb	r1, [r3, #0]
 8011910:	2900      	cmp	r1, #0
 8011912:	d047      	beq.n	80119a4 <MEMS_runMagCal.constprop.14+0x1b4>
 8011914:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8011918:	4297      	cmp	r7, r2
 801191a:	f106 0601 	add.w	r6, r6, #1
 801191e:	bfbc      	itt	lt
 8011920:	4617      	movlt	r7, r2
 8011922:	f04f 0c01 	movlt.w	ip, #1
 8011926:	4596      	cmp	lr, r2
 8011928:	b276      	sxtb	r6, r6
 801192a:	dd02      	ble.n	8011932 <MEMS_runMagCal.constprop.14+0x142>
 801192c:	2101      	movs	r1, #1
 801192e:	4696      	mov	lr, r2
 8011930:	9104      	str	r1, [sp, #16]
 8011932:	ee07 2a90 	vmov	s15, r2
 8011936:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801193a:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801193e:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8011942:	4290      	cmp	r0, r2
 8011944:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8011948:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801194c:	da02      	bge.n	8011954 <MEMS_runMagCal.constprop.14+0x164>
 801194e:	2101      	movs	r1, #1
 8011950:	4610      	mov	r0, r2
 8011952:	9105      	str	r1, [sp, #20]
 8011954:	4591      	cmp	r9, r2
 8011956:	dd02      	ble.n	801195e <MEMS_runMagCal.constprop.14+0x16e>
 8011958:	2101      	movs	r1, #1
 801195a:	4691      	mov	r9, r2
 801195c:	9106      	str	r1, [sp, #24]
 801195e:	ee06 2a90 	vmov	s13, r2
 8011962:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8011966:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801196a:	ee76 6ac4 	vsub.f32	s13, s13, s8
 801196e:	4552      	cmp	r2, sl
 8011970:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8011974:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8011978:	ee37 7a87 	vadd.f32	s14, s15, s14
 801197c:	dd02      	ble.n	8011984 <MEMS_runMagCal.constprop.14+0x194>
 801197e:	2101      	movs	r1, #1
 8011980:	4692      	mov	sl, r2
 8011982:	9107      	str	r1, [sp, #28]
 8011984:	4542      	cmp	r2, r8
 8011986:	da02      	bge.n	801198e <MEMS_runMagCal.constprop.14+0x19e>
 8011988:	2101      	movs	r1, #1
 801198a:	4690      	mov	r8, r2
 801198c:	9103      	str	r1, [sp, #12]
 801198e:	ee07 2a90 	vmov	s15, r2
 8011992:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011996:	2201      	movs	r2, #1
 8011998:	ee77 7ac3 	vsub.f32	s15, s15, s6
 801199c:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80119a0:	eea7 7aa7 	vfma.f32	s14, s15, s15
 80119a4:	3401      	adds	r4, #1
 80119a6:	b2a4      	uxth	r4, r4
 80119a8:	42ac      	cmp	r4, r5
 80119aa:	f103 0308 	add.w	r3, r3, #8
 80119ae:	d9ae      	bls.n	801190e <MEMS_runMagCal.constprop.14+0x11e>
 80119b0:	9000      	str	r0, [sp, #0]
 80119b2:	9802      	ldr	r0, [sp, #8]
 80119b4:	f8cd 9004 	str.w	r9, [sp, #4]
 80119b8:	42a0      	cmp	r0, r4
 80119ba:	f8cd a008 	str.w	sl, [sp, #8]
 80119be:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 80119c2:	f8dd a020 	ldr.w	sl, [sp, #32]
 80119c6:	f240 81bf 	bls.w	8011d48 <MEMS_runMagCal.constprop.14+0x558>
 80119ca:	eba9 0904 	sub.w	r9, r9, r4
 80119ce:	fa14 f989 	uxtah	r9, r4, r9
 80119d2:	eb0a 04c4 	add.w	r4, sl, r4, lsl #3
 80119d6:	f1aa 0a16 	sub.w	sl, sl, #22
 80119da:	eb0a 09c9 	add.w	r9, sl, r9, lsl #3
 80119de:	3c1e      	subs	r4, #30
 80119e0:	f04f 0a00 	mov.w	sl, #0
 80119e4:	f8cd c020 	str.w	ip, [sp, #32]
 80119e8:	7fa3      	ldrb	r3, [r4, #30]
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	f000 8092 	beq.w	8011b14 <MEMS_runMagCal.constprop.14+0x324>
 80119f0:	f9b4 1020 	ldrsh.w	r1, [r4, #32]
 80119f4:	3601      	adds	r6, #1
 80119f6:	42b9      	cmp	r1, r7
 80119f8:	b276      	sxtb	r6, r6
 80119fa:	dd02      	ble.n	8011a02 <MEMS_runMagCal.constprop.14+0x212>
 80119fc:	2301      	movs	r3, #1
 80119fe:	460f      	mov	r7, r1
 8011a00:	9308      	str	r3, [sp, #32]
 8011a02:	4571      	cmp	r1, lr
 8011a04:	da02      	bge.n	8011a0c <MEMS_runMagCal.constprop.14+0x21c>
 8011a06:	2301      	movs	r3, #1
 8011a08:	468e      	mov	lr, r1
 8011a0a:	9304      	str	r3, [sp, #16]
 8011a0c:	ee07 1a90 	vmov	s15, r1
 8011a10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011a14:	f9b4 2022 	ldrsh.w	r2, [r4, #34]	; 0x22
 8011a18:	9b00      	ldr	r3, [sp, #0]
 8011a1a:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8011a1e:	429a      	cmp	r2, r3
 8011a20:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8011a24:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8011a28:	dd02      	ble.n	8011a30 <MEMS_runMagCal.constprop.14+0x240>
 8011a2a:	2301      	movs	r3, #1
 8011a2c:	9200      	str	r2, [sp, #0]
 8011a2e:	9305      	str	r3, [sp, #20]
 8011a30:	9b01      	ldr	r3, [sp, #4]
 8011a32:	429a      	cmp	r2, r3
 8011a34:	da02      	bge.n	8011a3c <MEMS_runMagCal.constprop.14+0x24c>
 8011a36:	2301      	movs	r3, #1
 8011a38:	9201      	str	r2, [sp, #4]
 8011a3a:	9306      	str	r3, [sp, #24]
 8011a3c:	ee06 2a90 	vmov	s13, r2
 8011a40:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8011a44:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	; 0x24
 8011a48:	9802      	ldr	r0, [sp, #8]
 8011a4a:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8011a4e:	4283      	cmp	r3, r0
 8011a50:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8011a54:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8011a58:	ee37 6a87 	vadd.f32	s12, s15, s14
 8011a5c:	dd02      	ble.n	8011a64 <MEMS_runMagCal.constprop.14+0x274>
 8011a5e:	2001      	movs	r0, #1
 8011a60:	9302      	str	r3, [sp, #8]
 8011a62:	9007      	str	r0, [sp, #28]
 8011a64:	4543      	cmp	r3, r8
 8011a66:	da02      	bge.n	8011a6e <MEMS_runMagCal.constprop.14+0x27e>
 8011a68:	2001      	movs	r0, #1
 8011a6a:	4698      	mov	r8, r3
 8011a6c:	9003      	str	r0, [sp, #12]
 8011a6e:	f9b4 c008 	ldrsh.w	ip, [r4, #8]
 8011a72:	f9b4 5000 	ldrsh.w	r5, [r4]
 8011a76:	f9b4 0018 	ldrsh.w	r0, [r4, #24]
 8011a7a:	1b49      	subs	r1, r1, r5
 8011a7c:	eba0 000c 	sub.w	r0, r0, ip
 8011a80:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8011a84:	ee07 0a90 	vmov	s15, r0
 8011a88:	f9b4 101a 	ldrsh.w	r1, [r4, #26]
 8011a8c:	f9b4 c00a 	ldrsh.w	ip, [r4, #10]
 8011a90:	f9b4 5002 	ldrsh.w	r5, [r4, #2]
 8011a94:	f9b4 001c 	ldrsh.w	r0, [r4, #28]
 8011a98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8011a9c:	1b52      	subs	r2, r2, r5
 8011a9e:	eba1 010c 	sub.w	r1, r1, ip
 8011aa2:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8011aa6:	eeb0 7ac7 	vabs.f32	s14, s14
 8011aaa:	ee07 1a90 	vmov	s15, r1
 8011aae:	eefc 6ac7 	vcvt.u32.f32	s13, s14
 8011ab2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011ab6:	eeb8 7a66 	vcvt.f32.u32	s14, s13
 8011aba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011abe:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8011ac2:	eef0 7ae7 	vabs.f32	s15, s15
 8011ac6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011aca:	1a80      	subs	r0, r0, r2
 8011acc:	ee07 3a90 	vmov	s15, r3
 8011ad0:	1a59      	subs	r1, r3, r1
 8011ad2:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8011ad6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8011ada:	ee07 0a90 	vmov	s15, r0
 8011ade:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8011ae2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011ae6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8011aea:	eef0 7ae7 	vabs.f32	s15, s15
 8011aee:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011af2:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8011af6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011afa:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8011afe:	eeb0 7a46 	vmov.f32	s14, s12
 8011b02:	ee17 3a90 	vmov	r3, s15
 8011b06:	eea6 7aa6 	vfma.f32	s14, s13, s13
 8011b0a:	459a      	cmp	sl, r3
 8011b0c:	f04f 0201 	mov.w	r2, #1
 8011b10:	bf38      	it	cc
 8011b12:	469a      	movcc	sl, r3
 8011b14:	3408      	adds	r4, #8
 8011b16:	45a1      	cmp	r9, r4
 8011b18:	f47f af66 	bne.w	80119e8 <MEMS_runMagCal.constprop.14+0x1f8>
 8011b1c:	f8dd c020 	ldr.w	ip, [sp, #32]
 8011b20:	eddf 7a36 	vldr	s15, [pc, #216]	; 8011bfc <MEMS_runMagCal.constprop.14+0x40c>
 8011b24:	9b03      	ldr	r3, [sp, #12]
 8011b26:	2a00      	cmp	r2, #0
 8011b28:	bf08      	it	eq
 8011b2a:	eeb0 7a67 	vmoveq.f32	s14, s15
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	f040 810d 	bne.w	8011d4e <MEMS_runMagCal.constprop.14+0x55e>
 8011b34:	9b07      	ldr	r3, [sp, #28]
 8011b36:	b113      	cbz	r3, 8011b3e <MEMS_runMagCal.constprop.14+0x34e>
 8011b38:	9b02      	ldr	r3, [sp, #8]
 8011b3a:	f8ad 30dc 	strh.w	r3, [sp, #220]	; 0xdc
 8011b3e:	9b06      	ldr	r3, [sp, #24]
 8011b40:	b113      	cbz	r3, 8011b48 <MEMS_runMagCal.constprop.14+0x358>
 8011b42:	9b01      	ldr	r3, [sp, #4]
 8011b44:	f8ad 311a 	strh.w	r3, [sp, #282]	; 0x11a
 8011b48:	9b05      	ldr	r3, [sp, #20]
 8011b4a:	b113      	cbz	r3, 8011b52 <MEMS_runMagCal.constprop.14+0x362>
 8011b4c:	9b00      	ldr	r3, [sp, #0]
 8011b4e:	f8ad 30da 	strh.w	r3, [sp, #218]	; 0xda
 8011b52:	9b04      	ldr	r3, [sp, #16]
 8011b54:	b10b      	cbz	r3, 8011b5a <MEMS_runMagCal.constprop.14+0x36a>
 8011b56:	f8ad e118 	strh.w	lr, [sp, #280]	; 0x118
 8011b5a:	f1bc 0f00 	cmp.w	ip, #0
 8011b5e:	f041 81fb 	bne.w	8012f58 <MEMS_runMagCal.constprop.14+0x1768>
 8011b62:	4f25      	ldr	r7, [pc, #148]	; (8011bf8 <MEMS_runMagCal.constprop.14+0x408>)
 8011b64:	2e00      	cmp	r6, #0
 8011b66:	f000 80f5 	beq.w	8011d54 <MEMS_runMagCal.constprop.14+0x564>
 8011b6a:	f9bd 30d8 	ldrsh.w	r3, [sp, #216]	; 0xd8
 8011b6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011b72:	f280 81b1 	bge.w	8011ed8 <MEMS_runMagCal.constprop.14+0x6e8>
 8011b76:	f9bd 0118 	ldrsh.w	r0, [sp, #280]	; 0x118
 8011b7a:	f510 4f80 	cmn.w	r0, #16384	; 0x4000
 8011b7e:	f2c0 81ab 	blt.w	8011ed8 <MEMS_runMagCal.constprop.14+0x6e8>
 8011b82:	f9bd 30da 	ldrsh.w	r3, [sp, #218]	; 0xda
 8011b86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011b8a:	f280 81a5 	bge.w	8011ed8 <MEMS_runMagCal.constprop.14+0x6e8>
 8011b8e:	f9bd 211a 	ldrsh.w	r2, [sp, #282]	; 0x11a
 8011b92:	f512 4f80 	cmn.w	r2, #16384	; 0x4000
 8011b96:	f2c0 819f 	blt.w	8011ed8 <MEMS_runMagCal.constprop.14+0x6e8>
 8011b9a:	f9bd 10dc 	ldrsh.w	r1, [sp, #220]	; 0xdc
 8011b9e:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8011ba2:	f280 8199 	bge.w	8011ed8 <MEMS_runMagCal.constprop.14+0x6e8>
 8011ba6:	f9bd 411c 	ldrsh.w	r4, [sp, #284]	; 0x11c
 8011baa:	f514 4f80 	cmn.w	r4, #16384	; 0x4000
 8011bae:	f2c0 8193 	blt.w	8011ed8 <MEMS_runMagCal.constprop.14+0x6e8>
 8011bb2:	ee07 6a90 	vmov	s15, r6
 8011bb6:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8011bba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011bbe:	eec7 7a06 	vdiv.f32	s15, s14, s12
 8011bc2:	1a9a      	subs	r2, r3, r2
 8011bc4:	1b09      	subs	r1, r1, r4
 8011bc6:	428a      	cmp	r2, r1
 8011bc8:	4613      	mov	r3, r2
 8011bca:	eba7 0700 	sub.w	r7, r7, r0
 8011bce:	bfb8      	it	lt
 8011bd0:	460b      	movlt	r3, r1
 8011bd2:	42bb      	cmp	r3, r7
 8011bd4:	bfb8      	it	lt
 8011bd6:	463b      	movlt	r3, r7
 8011bd8:	ee86 6aa2 	vdiv.f32	s12, s13, s5
 8011bdc:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8011be0:	ee06 3a90 	vmov	s13, r3
 8011be4:	eddf 7a06 	vldr	s15, [pc, #24]	; 8011c00 <MEMS_runMagCal.constprop.14+0x410>
 8011be8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8011bec:	ee66 7a27 	vmul.f32	s15, s12, s15
 8011bf0:	e010      	b.n	8011c14 <MEMS_runMagCal.constprop.14+0x424>
 8011bf2:	bf00      	nop
 8011bf4:	20001828 	.word	0x20001828
 8011bf8:	ffff8000 	.word	0xffff8000
 8011bfc:	00000000 	.word	0x00000000
 8011c00:	43020000 	.word	0x43020000
 8011c04:	200013c8 	.word	0x200013c8
 8011c08:	447a0000 	.word	0x447a0000
 8011c0c:	42c80000 	.word	0x42c80000
 8011c10:	477fff00 	.word	0x477fff00
 8011c14:	ee22 7a87 	vmul.f32	s14, s5, s14
 8011c18:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c20:	f100 815a 	bmi.w	8011ed8 <MEMS_runMagCal.constprop.14+0x6e8>
 8011c24:	ee07 aa90 	vmov	s15, sl
 8011c28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011c2c:	ed5f 5a0a 	vldr	s11, [pc, #-40]	; 8011c08 <MEMS_runMagCal.constprop.14+0x418>
 8011c30:	ee67 2aa2 	vmul.f32	s5, s15, s5
 8011c34:	eef4 2ae5 	vcmpe.f32	s5, s11
 8011c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c3c:	f300 814c 	bgt.w	8011ed8 <MEMS_runMagCal.constprop.14+0x6e8>
 8011c40:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 8011c44:	ee26 6a27 	vmul.f32	s12, s12, s15
 8011c48:	eeb4 6ae6 	vcmpe.f32	s12, s13
 8011c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c50:	f300 84ff 	bgt.w	8012652 <MEMS_runMagCal.constprop.14+0xe62>
 8011c54:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 8011c58:	ee66 7a27 	vmul.f32	s15, s12, s15
 8011c5c:	eef4 6ae7 	vcmpe.f32	s13, s15
 8011c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c64:	f340 84fb 	ble.w	801265e <MEMS_runMagCal.constprop.14+0xe6e>
 8011c68:	ee07 7a90 	vmov	s15, r7
 8011c6c:	ee36 6a06 	vadd.f32	s12, s12, s12
 8011c70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011c74:	eef4 7ac6 	vcmpe.f32	s15, s12
 8011c78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c7c:	f340 84ef 	ble.w	801265e <MEMS_runMagCal.constprop.14+0xe6e>
 8011c80:	ee07 2a90 	vmov	s15, r2
 8011c84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011c88:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8011c8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c90:	f140 84e5 	bpl.w	801265e <MEMS_runMagCal.constprop.14+0xe6e>
 8011c94:	ee07 1a90 	vmov	s15, r1
 8011c98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011c9c:	f04f 0900 	mov.w	r9, #0
 8011ca0:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8011ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ca8:	bf4c      	ite	mi
 8011caa:	f04f 0a01 	movmi.w	sl, #1
 8011cae:	46ca      	movpl	sl, r9
 8011cb0:	ed5f 6a2a 	vldr	s13, [pc, #-168]	; 8011c0c <MEMS_runMagCal.constprop.14+0x41c>
 8011cb4:	ed5f 7a2a 	vldr	s15, [pc, #-168]	; 8011c10 <MEMS_runMagCal.constprop.14+0x420>
 8011cb8:	f89b 54cc 	ldrb.w	r5, [fp, #1228]	; 0x4cc
 8011cbc:	ee27 7a26 	vmul.f32	s14, s14, s13
 8011cc0:	2300      	movs	r3, #0
 8011cc2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011cca:	bf88      	it	hi
 8011ccc:	eeb0 7a67 	vmovhi.f32	s14, s15
 8011cd0:	2d01      	cmp	r5, #1
 8011cd2:	ed8d 7a0d 	vstr	s14, [sp, #52]	; 0x34
 8011cd6:	9300      	str	r3, [sp, #0]
 8011cd8:	d955      	bls.n	8011d86 <MEMS_runMagCal.constprop.14+0x596>
 8011cda:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8011cde:	edcd 7a01 	vstr	s15, [sp, #4]
 8011ce2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8011ce6:	3bc8      	subs	r3, #200	; 0xc8
 8011ce8:	b29b      	uxth	r3, r3
 8011cea:	f644 422c 	movw	r2, #19500	; 0x4c2c
 8011cee:	4293      	cmp	r3, r2
 8011cf0:	d909      	bls.n	8011d06 <MEMS_runMagCal.constprop.14+0x516>
 8011cf2:	2500      	movs	r5, #0
 8011cf4:	23ff      	movs	r3, #255	; 0xff
 8011cf6:	f88b 54cc 	strb.w	r5, [fp, #1228]	; 0x4cc
 8011cfa:	f88b 5500 	strb.w	r5, [fp, #1280]	; 0x500
 8011cfe:	f88b 54b4 	strb.w	r5, [fp, #1204]	; 0x4b4
 8011d02:	f88b 3502 	strb.w	r3, [fp, #1282]	; 0x502
 8011d06:	9b00      	ldr	r3, [sp, #0]
 8011d08:	2b02      	cmp	r3, #2
 8011d0a:	d13c      	bne.n	8011d86 <MEMS_runMagCal.constprop.14+0x596>
 8011d0c:	2200      	movs	r2, #0
 8011d0e:	23ff      	movs	r3, #255	; 0xff
 8011d10:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011d12:	f8cb 1480 	str.w	r1, [fp, #1152]	; 0x480
 8011d16:	f88b 2500 	strb.w	r2, [fp, #1280]	; 0x500
 8011d1a:	f88b 3502 	strb.w	r3, [fp, #1282]	; 0x502
 8011d1e:	f20d 5d6c 	addw	sp, sp, #1388	; 0x56c
 8011d22:	ecbd 8b0c 	vpop	{d8-d13}
 8011d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d2a:	f8db 1504 	ldr.w	r1, [fp, #1284]	; 0x504
 8011d2e:	428a      	cmp	r2, r1
 8011d30:	f4ff ad8c 	bcc.w	801184c <MEMS_runMagCal.constprop.14+0x5c>
 8011d34:	f89b 3500 	ldrb.w	r3, [fp, #1280]	; 0x500
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	f47f ada4 	bne.w	8011886 <MEMS_runMagCal.constprop.14+0x96>
 8011d3e:	e592      	b.n	8011866 <MEMS_runMagCal.constprop.14+0x76>
 8011d40:	2301      	movs	r3, #1
 8011d42:	f8cb 347c 	str.w	r3, [fp, #1148]	; 0x47c
 8011d46:	e589      	b.n	801185c <MEMS_runMagCal.constprop.14+0x6c>
 8011d48:	f04f 0a00 	mov.w	sl, #0
 8011d4c:	e6e8      	b.n	8011b20 <MEMS_runMagCal.constprop.14+0x330>
 8011d4e:	f8ad 811c 	strh.w	r8, [sp, #284]	; 0x11c
 8011d52:	e6ef      	b.n	8011b34 <MEMS_runMagCal.constprop.14+0x344>
 8011d54:	ed5f 6a53 	vldr	s13, [pc, #-332]	; 8011c0c <MEMS_runMagCal.constprop.14+0x41c>
 8011d58:	ed5f 7a53 	vldr	s15, [pc, #-332]	; 8011c10 <MEMS_runMagCal.constprop.14+0x420>
 8011d5c:	f89b 54cc 	ldrb.w	r5, [fp, #1228]	; 0x4cc
 8011d60:	ee27 7a26 	vmul.f32	s14, s14, s13
 8011d64:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d6c:	bf88      	it	hi
 8011d6e:	eeb0 7a67 	vmovhi.f32	s14, s15
 8011d72:	2d01      	cmp	r5, #1
 8011d74:	ed8d 7a0d 	vstr	s14, [sp, #52]	; 0x34
 8011d78:	bf88      	it	hi
 8011d7a:	9600      	strhi	r6, [sp, #0]
 8011d7c:	f200 80c2 	bhi.w	8011f04 <MEMS_runMagCal.constprop.14+0x714>
 8011d80:	46b1      	mov	r9, r6
 8011d82:	9600      	str	r6, [sp, #0]
 8011d84:	46b2      	mov	sl, r6
 8011d86:	f99b 3486 	ldrsb.w	r3, [fp, #1158]	; 0x486
 8011d8a:	f89b 7485 	ldrb.w	r7, [fp, #1157]	; 0x485
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	f2c0 80c2 	blt.w	8011f18 <MEMS_runMagCal.constprop.14+0x728>
 8011d94:	3301      	adds	r3, #1
 8011d96:	fb93 f4f7 	sdiv	r4, r3, r7
 8011d9a:	fb07 3314 	mls	r3, r7, r4, r3
 8011d9e:	b25c      	sxtb	r4, r3
 8011da0:	f88b 4486 	strb.w	r4, [fp, #1158]	; 0x486
 8011da4:	f89b 6484 	ldrb.w	r6, [fp, #1156]	; 0x484
 8011da8:	3601      	adds	r6, #1
 8011daa:	42be      	cmp	r6, r7
 8011dac:	bfa8      	it	ge
 8011dae:	463e      	movge	r6, r7
 8011db0:	fa5f f886 	uxtb.w	r8, r6
 8011db4:	ee17 0a10 	vmov	r0, s14
 8011db8:	f88b 8484 	strb.w	r8, [fp, #1156]	; 0x484
 8011dbc:	f009 fb8c 	bl	801b4d8 <roundf>
 8011dc0:	ee07 0a90 	vmov	s15, r0
 8011dc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011dc8:	eb0b 0344 	add.w	r3, fp, r4, lsl #1
 8011dcc:	ee17 0a90 	vmov	r0, s15
 8011dd0:	f8a3 0488 	strh.w	r0, [r3, #1160]	; 0x488
 8011dd4:	9b00      	ldr	r3, [sp, #0]
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d198      	bne.n	8011d0c <MEMS_runMagCal.constprop.14+0x51c>
 8011dda:	f8db 3480 	ldr.w	r3, [fp, #1152]	; 0x480
 8011dde:	b123      	cbz	r3, 8011dea <MEMS_runMagCal.constprop.14+0x5fa>
 8011de0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011de2:	f503 6296 	add.w	r2, r3, #1200	; 0x4b0
 8011de6:	4291      	cmp	r1, r2
 8011de8:	d399      	bcc.n	8011d1e <MEMS_runMagCal.constprop.14+0x52e>
 8011dea:	f1b9 0f00 	cmp.w	r9, #0
 8011dee:	d196      	bne.n	8011d1e <MEMS_runMagCal.constprop.14+0x52e>
 8011df0:	1eaa      	subs	r2, r5, #2
 8011df2:	2a01      	cmp	r2, #1
 8011df4:	f240 8363 	bls.w	80124be <MEMS_runMagCal.constprop.14+0xcce>
 8011df8:	4be3      	ldr	r3, [pc, #908]	; (8012188 <MEMS_runMagCal.constprop.14+0x998>)
 8011dfa:	eddf 7ae4 	vldr	s15, [pc, #912]	; 801218c <MEMS_runMagCal.constprop.14+0x99c>
 8011dfe:	ed93 8a01 	vldr	s16, [r3, #4]
 8011e02:	f8bd 4060 	ldrh.w	r4, [sp, #96]	; 0x60
 8011e06:	f8db 3504 	ldr.w	r3, [fp, #1284]	; 0x504
 8011e0a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011e0c:	f9bb 0462 	ldrsh.w	r0, [fp, #1122]	; 0x462
 8011e10:	f89b 5500 	ldrb.w	r5, [fp, #1280]	; 0x500
 8011e14:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011e18:	eec7 8a08 	vdiv.f32	s17, s14, s16
 8011e1c:	f503 511c 	add.w	r1, r3, #9984	; 0x2700
 8011e20:	3c01      	subs	r4, #1
 8011e22:	fb00 2404 	mla	r4, r0, r4, r2
 8011e26:	3110      	adds	r1, #16
 8011e28:	42a1      	cmp	r1, r4
 8011e2a:	eeb0 9a08 	vmov.f32	s18, #8	; 0x40400000  3.0
 8011e2e:	ee28 9a89 	vmul.f32	s18, s17, s18
 8011e32:	ee69 7a27 	vmul.f32	s15, s18, s15
 8011e36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011e3a:	ee17 2a90 	vmov	r2, s15
 8011e3e:	fa1f f982 	uxth.w	r9, r2
 8011e42:	d27f      	bcs.n	8011f44 <MEMS_runMagCal.constprop.14+0x754>
 8011e44:	f242 3228 	movw	r2, #9000	; 0x2328
 8011e48:	4294      	cmp	r4, r2
 8011e4a:	f89b 0501 	ldrb.w	r0, [fp, #1281]	; 0x501
 8011e4e:	f99b 2502 	ldrsb.w	r2, [fp, #1282]	; 0x502
 8011e52:	bf1a      	itte	ne
 8011e54:	f5a4 540c 	subne.w	r4, r4, #8960	; 0x2300
 8011e58:	3c28      	subne	r4, #40	; 0x28
 8011e5a:	2400      	moveq	r4, #0
 8011e5c:	42a8      	cmp	r0, r5
 8011e5e:	f102 0201 	add.w	r2, r2, #1
 8011e62:	f000 869f 	beq.w	8012ba4 <MEMS_runMagCal.constprop.14+0x13b4>
 8011e66:	1b52      	subs	r2, r2, r5
 8011e68:	fb92 f1f0 	sdiv	r1, r2, r0
 8011e6c:	fb00 2211 	mls	r2, r0, r1, r2
 8011e70:	2a00      	cmp	r2, #0
 8011e72:	b216      	sxth	r6, r2
 8011e74:	bfbc      	itt	lt
 8011e76:	1812      	addlt	r2, r2, r0
 8011e78:	b216      	sxthlt	r6, r2
 8011e7a:	b22f      	sxth	r7, r5
 8011e7c:	2f00      	cmp	r7, #0
 8011e7e:	d05e      	beq.n	8011f3e <MEMS_runMagCal.constprop.14+0x74e>
 8011e80:	2200      	movs	r2, #0
 8011e82:	1b1b      	subs	r3, r3, r4
 8011e84:	b299      	uxth	r1, r3
 8011e86:	9201      	str	r2, [sp, #4]
 8011e88:	4696      	mov	lr, r2
 8011e8a:	46ac      	mov	ip, r5
 8011e8c:	9402      	str	r4, [sp, #8]
 8011e8e:	e003      	b.n	8011e98 <MEMS_runMagCal.constprop.14+0x6a8>
 8011e90:	3201      	adds	r2, #1
 8011e92:	b213      	sxth	r3, r2
 8011e94:	429f      	cmp	r7, r3
 8011e96:	dd43      	ble.n	8011f20 <MEMS_runMagCal.constprop.14+0x730>
 8011e98:	eb06 0802 	add.w	r8, r6, r2
 8011e9c:	fb98 f3f0 	sdiv	r3, r8, r0
 8011ea0:	fb00 8313 	mls	r3, r0, r3, r8
 8011ea4:	b2db      	uxtb	r3, r3
 8011ea6:	3304      	adds	r3, #4
 8011ea8:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8011eac:	f8b3 8500 	ldrh.w	r8, [r3, #1280]	; 0x500
 8011eb0:	4488      	add	r8, r1
 8011eb2:	fa0f f888 	sxth.w	r8, r8
 8011eb6:	f1b8 0f00 	cmp.w	r8, #0
 8011eba:	f8a3 8500 	strh.w	r8, [r3, #1280]	; 0x500
 8011ebe:	dae7      	bge.n	8011e90 <MEMS_runMagCal.constprop.14+0x6a0>
 8011ec0:	f10c 33ff 	add.w	r3, ip, #4294967295
 8011ec4:	f1bc 0f00 	cmp.w	ip, #0
 8011ec8:	f000 82f6 	beq.w	80124b8 <MEMS_runMagCal.constprop.14+0xcc8>
 8011ecc:	2401      	movs	r4, #1
 8011ece:	9401      	str	r4, [sp, #4]
 8011ed0:	fa5f fc83 	uxtb.w	ip, r3
 8011ed4:	46a6      	mov	lr, r4
 8011ed6:	e7db      	b.n	8011e90 <MEMS_runMagCal.constprop.14+0x6a0>
 8011ed8:	eddf 6aad 	vldr	s13, [pc, #692]	; 8012190 <MEMS_runMagCal.constprop.14+0x9a0>
 8011edc:	eddf 7aad 	vldr	s15, [pc, #692]	; 8012194 <MEMS_runMagCal.constprop.14+0x9a4>
 8011ee0:	f89b 54cc 	ldrb.w	r5, [fp, #1228]	; 0x4cc
 8011ee4:	ee27 7a26 	vmul.f32	s14, s14, s13
 8011ee8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ef0:	bf88      	it	hi
 8011ef2:	eeb0 7a67 	vmovhi.f32	s14, s15
 8011ef6:	2d01      	cmp	r5, #1
 8011ef8:	ed8d 7a0d 	vstr	s14, [sp, #52]	; 0x34
 8011efc:	f67f af06 	bls.w	8011d0c <MEMS_runMagCal.constprop.14+0x51c>
 8011f00:	2302      	movs	r3, #2
 8011f02:	9300      	str	r3, [sp, #0]
 8011f04:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8011f08:	f04f 0a00 	mov.w	sl, #0
 8011f0c:	edcd 7a01 	vstr	s15, [sp, #4]
 8011f10:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8011f14:	46d1      	mov	r9, sl
 8011f16:	e6e6      	b.n	8011ce6 <MEMS_runMagCal.constprop.14+0x4f6>
 8011f18:	2400      	movs	r4, #0
 8011f1a:	f88b 4486 	strb.w	r4, [fp, #1158]	; 0x486
 8011f1e:	e741      	b.n	8011da4 <MEMS_runMagCal.constprop.14+0x5b4>
 8011f20:	e9dd 3401 	ldrd	r3, r4, [sp, #4]
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	f040 8735 	bne.w	8012d94 <MEMS_runMagCal.constprop.14+0x15a4>
 8011f2a:	f1be 0f00 	cmp.w	lr, #0
 8011f2e:	d006      	beq.n	8011f3e <MEMS_runMagCal.constprop.14+0x74e>
 8011f30:	eeb0 0a49 	vmov.f32	s0, s18
 8011f34:	4648      	mov	r0, r9
 8011f36:	f7fe fe21 	bl	8010b7c <MEMS_updateMagBufferIndex.constprop.24>
 8011f3a:	f89b 5500 	ldrb.w	r5, [fp, #1280]	; 0x500
 8011f3e:	f8cb 4504 	str.w	r4, [fp, #1284]	; 0x504
 8011f42:	4623      	mov	r3, r4
 8011f44:	2d00      	cmp	r5, #0
 8011f46:	f000 82fa 	beq.w	801253e <MEMS_runMagCal.constprop.14+0xd4e>
 8011f4a:	f99b 2502 	ldrsb.w	r2, [fp, #1282]	; 0x502
 8011f4e:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8011f50:	eb0b 02c2 	add.w	r2, fp, r2, lsl #3
 8011f54:	f9b2 2520 	ldrsh.w	r2, [r2, #1312]	; 0x520
 8011f58:	f502 529c 	add.w	r2, r2, #4992	; 0x1380
 8011f5c:	3208      	adds	r2, #8
 8011f5e:	4413      	add	r3, r2
 8011f60:	4299      	cmp	r1, r3
 8011f62:	f200 81e7 	bhi.w	8012334 <MEMS_runMagCal.constprop.14+0xb44>
 8011f66:	f1ba 0f00 	cmp.w	sl, #0
 8011f6a:	d104      	bne.n	8011f76 <MEMS_runMagCal.constprop.14+0x786>
 8011f6c:	f89b 3500 	ldrb.w	r3, [fp, #1280]	; 0x500
 8011f70:	2b0a      	cmp	r3, #10
 8011f72:	f240 82e8 	bls.w	8012546 <MEMS_runMagCal.constprop.14+0xd56>
 8011f76:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 8011f7a:	9301      	str	r3, [sp, #4]
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	f000 82e2 	beq.w	8012546 <MEMS_runMagCal.constprop.14+0xd56>
 8011f82:	eddf 6a85 	vldr	s13, [pc, #532]	; 8012198 <MEMS_runMagCal.constprop.14+0x9a8>
 8011f86:	ed9f 7a85 	vldr	s14, [pc, #532]	; 801219c <MEMS_runMagCal.constprop.14+0x9ac>
 8011f8a:	f8cd a018 	str.w	sl, [sp, #24]
 8011f8e:	ee29 aa09 	vmul.f32	s20, s18, s18
 8011f92:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8011f96:	eef7 9a08 	vmov.f32	s19, #120	; 0x3fc00000  1.5
 8011f9a:	2300      	movs	r3, #0
 8011f9c:	ee28 8a26 	vmul.f32	s16, s16, s13
 8011fa0:	ee2a aa07 	vmul.f32	s20, s20, s14
 8011fa4:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8011fa8:	ee69 9a29 	vmul.f32	s19, s18, s19
 8011fac:	9304      	str	r3, [sp, #16]
 8011fae:	461a      	mov	r2, r3
 8011fb0:	461c      	mov	r4, r3
 8011fb2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011fb4:	f813 1034 	ldrb.w	r1, [r3, r4, lsl #3]
 8011fb8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011fbc:	b2a4      	uxth	r4, r4
 8011fbe:	2900      	cmp	r1, #0
 8011fc0:	f000 8123 	beq.w	801220a <MEMS_runMagCal.constprop.14+0xa1a>
 8011fc4:	f9b3 5002 	ldrsh.w	r5, [r3, #2]
 8011fc8:	f9b3 6004 	ldrsh.w	r6, [r3, #4]
 8011fcc:	f9b3 7006 	ldrsh.w	r7, [r3, #6]
 8011fd0:	ee07 5a90 	vmov	s15, r5
 8011fd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011fd8:	eef0 7ae7 	vabs.f32	s15, s15
 8011fdc:	eef4 7ae8 	vcmpe.f32	s15, s17
 8011fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fe4:	d516      	bpl.n	8012014 <MEMS_runMagCal.constprop.14+0x824>
 8011fe6:	ee07 6a90 	vmov	s15, r6
 8011fea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011fee:	eef0 7ae7 	vabs.f32	s15, s15
 8011ff2:	eef4 8ae7 	vcmpe.f32	s17, s15
 8011ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ffa:	dd0b      	ble.n	8012014 <MEMS_runMagCal.constprop.14+0x824>
 8011ffc:	ee07 7a90 	vmov	s15, r7
 8012000:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012004:	eef0 7ae7 	vabs.f32	s15, s15
 8012008:	eef4 8ae7 	vcmpe.f32	s17, s15
 801200c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012010:	f300 80fb 	bgt.w	801220a <MEMS_runMagCal.constprop.14+0xa1a>
 8012014:	f89b 8500 	ldrb.w	r8, [fp, #1280]	; 0x500
 8012018:	f1b8 0f00 	cmp.w	r8, #0
 801201c:	f000 819a 	beq.w	8012354 <MEMS_runMagCal.constprop.14+0xb64>
 8012020:	f9bb 281a 	ldrsh.w	r2, [fp, #2074]	; 0x81a
 8012024:	f9bb 1818 	ldrsh.w	r1, [fp, #2072]	; 0x818
 8012028:	f9bb 381c 	ldrsh.w	r3, [fp, #2076]	; 0x81c
 801202c:	1b92      	subs	r2, r2, r6
 801202e:	fb02 f002 	mul.w	r0, r2, r2
 8012032:	1b4a      	subs	r2, r1, r5
 8012034:	fb02 0202 	mla	r2, r2, r2, r0
 8012038:	1bdb      	subs	r3, r3, r7
 801203a:	fb03 2303 	mla	r3, r3, r3, r2
 801203e:	ee07 3a90 	vmov	s15, r3
 8012042:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012046:	eeb4 aae7 	vcmpe.f32	s20, s15
 801204a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801204e:	f300 80dc 	bgt.w	801220a <MEMS_runMagCal.constprop.14+0xa1a>
 8012052:	fb95 f3f9 	sdiv	r3, r5, r9
 8012056:	fb09 5313 	mls	r3, r9, r3, r5
 801205a:	2b00      	cmp	r3, #0
 801205c:	bfb8      	it	lt
 801205e:	444b      	addlt	r3, r9
 8012060:	b21b      	sxth	r3, r3
 8012062:	ee07 3a90 	vmov	s15, r3
 8012066:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801206a:	ee67 7a88 	vmul.f32	s15, s15, s16
 801206e:	ee17 0a90 	vmov	r0, s15
 8012072:	f009 fa31 	bl	801b4d8 <roundf>
 8012076:	fb96 f3f9 	sdiv	r3, r6, r9
 801207a:	ee07 0a90 	vmov	s15, r0
 801207e:	fb09 6313 	mls	r3, r9, r3, r6
 8012082:	2b00      	cmp	r3, #0
 8012084:	bfb8      	it	lt
 8012086:	444b      	addlt	r3, r9
 8012088:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801208c:	b21b      	sxth	r3, r3
 801208e:	edcd 7a02 	vstr	s15, [sp, #8]
 8012092:	ee07 3a90 	vmov	s15, r3
 8012096:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801209a:	f89d a008 	ldrb.w	sl, [sp, #8]
 801209e:	ee67 7a88 	vmul.f32	s15, s15, s16
 80120a2:	ee17 0a90 	vmov	r0, s15
 80120a6:	f009 fa17 	bl	801b4d8 <roundf>
 80120aa:	fb97 f3f9 	sdiv	r3, r7, r9
 80120ae:	ee07 0a90 	vmov	s15, r0
 80120b2:	fb09 7313 	mls	r3, r9, r3, r7
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	bfb8      	it	lt
 80120ba:	444b      	addlt	r3, r9
 80120bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80120c0:	b21b      	sxth	r3, r3
 80120c2:	edcd 7a02 	vstr	s15, [sp, #8]
 80120c6:	ee07 3a90 	vmov	s15, r3
 80120ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80120ce:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80120d2:	9202      	str	r2, [sp, #8]
 80120d4:	ee67 7a88 	vmul.f32	s15, s15, s16
 80120d8:	ee17 0a90 	vmov	r0, s15
 80120dc:	f009 f9fc 	bl	801b4d8 <roundf>
 80120e0:	ee07 0a90 	vmov	s15, r0
 80120e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80120e8:	f1ba 0f1f 	cmp.w	sl, #31
 80120ec:	edcd 7a03 	vstr	s15, [sp, #12]
 80120f0:	f89d 100c 	ldrb.w	r1, [sp, #12]
 80120f4:	f8db 2508 	ldr.w	r2, [fp, #1288]	; 0x508
 80120f8:	f8db 350c 	ldr.w	r3, [fp, #1292]	; 0x50c
 80120fc:	9103      	str	r1, [sp, #12]
 80120fe:	f240 81cb 	bls.w	8012498 <MEMS_runMagCal.constprop.14+0xca8>
 8012102:	f1aa 0320 	sub.w	r3, sl, #32
 8012106:	2101      	movs	r1, #1
 8012108:	fa01 f303 	lsl.w	r3, r1, r3
 801210c:	4013      	ands	r3, r2
 801210e:	9802      	ldr	r0, [sp, #8]
 8012110:	f8db 1510 	ldr.w	r1, [fp, #1296]	; 0x510
 8012114:	f8db 2514 	ldr.w	r2, [fp, #1300]	; 0x514
 8012118:	281f      	cmp	r0, #31
 801211a:	f240 81c6 	bls.w	80124aa <MEMS_runMagCal.constprop.14+0xcba>
 801211e:	f1a0 0220 	sub.w	r2, r0, #32
 8012122:	2001      	movs	r0, #1
 8012124:	fa00 f202 	lsl.w	r2, r0, r2
 8012128:	ea02 0e01 	and.w	lr, r2, r1
 801212c:	9a03      	ldr	r2, [sp, #12]
 801212e:	f8db 151c 	ldr.w	r1, [fp, #1308]	; 0x51c
 8012132:	f8db 0518 	ldr.w	r0, [fp, #1304]	; 0x518
 8012136:	2a1f      	cmp	r2, #31
 8012138:	f240 81b3 	bls.w	80124a2 <MEMS_runMagCal.constprop.14+0xcb2>
 801213c:	f1a2 0020 	sub.w	r0, r2, #32
 8012140:	2201      	movs	r2, #1
 8012142:	fa02 f000 	lsl.w	r0, r2, r0
 8012146:	4001      	ands	r1, r0
 8012148:	2900      	cmp	r1, #0
 801214a:	f040 8199 	bne.w	8012480 <MEMS_runMagCal.constprop.14+0xc90>
 801214e:	f99b 1502 	ldrsb.w	r1, [fp, #1282]	; 0x502
 8012152:	f89b c501 	ldrb.w	ip, [fp, #1281]	; 0x501
 8012156:	1c4a      	adds	r2, r1, #1
 8012158:	9205      	str	r2, [sp, #20]
 801215a:	2b00      	cmp	r3, #0
 801215c:	f000 820b 	beq.w	8012576 <MEMS_runMagCal.constprop.14+0xd86>
 8012160:	45e0      	cmp	r8, ip
 8012162:	9b05      	ldr	r3, [sp, #20]
 8012164:	f000 84f9 	beq.w	8012b5a <MEMS_runMagCal.constprop.14+0x136a>
 8012168:	eba3 0208 	sub.w	r2, r3, r8
 801216c:	fb92 f3fc 	sdiv	r3, r2, ip
 8012170:	fb0c 2313 	mls	r3, ip, r3, r2
 8012174:	2b00      	cmp	r3, #0
 8012176:	fa0f fe83 	sxth.w	lr, r3
 801217a:	bfbc      	itt	lt
 801217c:	4463      	addlt	r3, ip
 801217e:	fa0f fe83 	sxthlt.w	lr, r3
 8012182:	2200      	movs	r2, #0
 8012184:	e011      	b.n	80121aa <MEMS_runMagCal.constprop.14+0x9ba>
 8012186:	bf00      	nop
 8012188:	20001828 	.word	0x20001828
 801218c:	427c0000 	.word	0x427c0000
 8012190:	42c80000 	.word	0x42c80000
 8012194:	477fff00 	.word	0x477fff00
 8012198:	3eaaaaab 	.word	0x3eaaaaab
 801219c:	3f666666 	.word	0x3f666666
 80121a0:	3a83126f 	.word	0x3a83126f
 80121a4:	4598      	cmp	r8, r3
 80121a6:	f240 81ea 	bls.w	801257e <MEMS_runMagCal.constprop.14+0xd8e>
 80121aa:	eb0e 0102 	add.w	r1, lr, r2
 80121ae:	fb91 f3fc 	sdiv	r3, r1, ip
 80121b2:	fb0c 1313 	mls	r3, ip, r3, r1
 80121b6:	b2db      	uxtb	r3, r3
 80121b8:	3304      	adds	r3, #4
 80121ba:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 80121be:	3201      	adds	r2, #1
 80121c0:	f9b3 0502 	ldrsh.w	r0, [r3, #1282]	; 0x502
 80121c4:	f9b3 1504 	ldrsh.w	r1, [r3, #1284]	; 0x504
 80121c8:	f9b3 3506 	ldrsh.w	r3, [r3, #1286]	; 0x506
 80121cc:	1a28      	subs	r0, r5, r0
 80121ce:	1a71      	subs	r1, r6, r1
 80121d0:	ee06 0a10 	vmov	s12, r0
 80121d4:	ee07 1a10 	vmov	s14, r1
 80121d8:	1afb      	subs	r3, r7, r3
 80121da:	ee07 3a90 	vmov	s15, r3
 80121de:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80121e2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80121e6:	eeb0 6ac6 	vabs.f32	s12, s12
 80121ea:	eeb0 7ac7 	vabs.f32	s14, s14
 80121ee:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80121f2:	ee36 7a07 	vadd.f32	s14, s12, s14
 80121f6:	eef0 7ae6 	vabs.f32	s15, s13
 80121fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80121fe:	b2d3      	uxtb	r3, r2
 8012200:	eef4 9ae7 	vcmpe.f32	s19, s15
 8012204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012208:	ddcc      	ble.n	80121a4 <MEMS_runMagCal.constprop.14+0x9b4>
 801220a:	3401      	adds	r4, #1
 801220c:	9b01      	ldr	r3, [sp, #4]
 801220e:	b224      	sxth	r4, r4
 8012210:	429c      	cmp	r4, r3
 8012212:	4622      	mov	r2, r4
 8012214:	f6ff aecd 	blt.w	8011fb2 <MEMS_runMagCal.constprop.14+0x7c2>
 8012218:	f8dd a018 	ldr.w	sl, [sp, #24]
 801221c:	9a04      	ldr	r2, [sp, #16]
 801221e:	f89b 3474 	ldrb.w	r3, [fp, #1140]	; 0x474
 8012222:	431a      	orrs	r2, r3
 8012224:	f88b 2474 	strb.w	r2, [fp, #1140]	; 0x474
 8012228:	2a00      	cmp	r2, #0
 801222a:	f43f ad78 	beq.w	8011d1e <MEMS_runMagCal.constprop.14+0x52e>
 801222e:	f89b 3500 	ldrb.w	r3, [fp, #1280]	; 0x500
 8012232:	9301      	str	r3, [sp, #4]
 8012234:	2b19      	cmp	r3, #25
 8012236:	f67f ad72 	bls.w	8011d1e <MEMS_runMagCal.constprop.14+0x52e>
 801223a:	f8db 347c 	ldr.w	r3, [fp, #1148]	; 0x47c
 801223e:	9302      	str	r3, [sp, #8]
 8012240:	2b00      	cmp	r3, #0
 8012242:	f000 8482 	beq.w	8012b4a <MEMS_runMagCal.constprop.14+0x135a>
 8012246:	f8db 3478 	ldr.w	r3, [fp, #1144]	; 0x478
 801224a:	2b00      	cmp	r3, #0
 801224c:	f000 847d 	beq.w	8012b4a <MEMS_runMagCal.constprop.14+0x135a>
 8012250:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 8012254:	ed5f 6a2e 	vldr	s13, [pc, #-184]	; 80121a0 <MEMS_runMagCal.constprop.14+0x9b0>
 8012258:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801225c:	ee07 3a90 	vmov	s15, r3
 8012260:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012264:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8012268:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 801226c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8012270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012274:	f200 8469 	bhi.w	8012b4a <MEMS_runMagCal.constprop.14+0x135a>
 8012278:	f1ba 0f00 	cmp.w	sl, #0
 801227c:	f43f ad4f 	beq.w	8011d1e <MEMS_runMagCal.constprop.14+0x52e>
 8012280:	eddd 7a02 	vldr	s15, [sp, #8]
 8012284:	ed5f 6a3a 	vldr	s13, [pc, #-232]	; 80121a0 <MEMS_runMagCal.constprop.14+0x9b0>
 8012288:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801228c:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8012290:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8012294:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801229c:	bf4c      	ite	mi
 801229e:	2301      	movmi	r3, #1
 80122a0:	2300      	movpl	r3, #0
 80122a2:	9303      	str	r3, [sp, #12]
 80122a4:	49e2      	ldr	r1, [pc, #904]	; (8012630 <MEMS_runMagCal.constprop.14+0xe40>)
 80122a6:	f8db 9508 	ldr.w	r9, [fp, #1288]	; 0x508
 80122aa:	edd1 8a01 	vldr	s17, [r1, #4]
 80122ae:	f8db 850c 	ldr.w	r8, [fp, #1292]	; 0x50c
 80122b2:	f8db e514 	ldr.w	lr, [fp, #1300]	; 0x514
 80122b6:	f8db c518 	ldr.w	ip, [fp, #1304]	; 0x518
 80122ba:	f8db 7510 	ldr.w	r7, [fp, #1296]	; 0x510
 80122be:	f8db 651c 	ldr.w	r6, [fp, #1308]	; 0x51c
 80122c2:	2200      	movs	r2, #0
 80122c4:	9229      	str	r2, [sp, #164]	; 0xa4
 80122c6:	4614      	mov	r4, r2
 80122c8:	4610      	mov	r0, r2
 80122ca:	4611      	mov	r1, r2
 80122cc:	e9cd 222a 	strd	r2, r2, [sp, #168]	; 0xa8
 80122d0:	e9cd 222c 	strd	r2, r2, [sp, #176]	; 0xb0
 80122d4:	2501      	movs	r5, #1
 80122d6:	e019      	b.n	801230c <MEMS_runMagCal.constprop.14+0xb1c>
 80122d8:	f1a1 0320 	sub.w	r3, r1, #32
 80122dc:	fa05 f303 	lsl.w	r3, r5, r3
 80122e0:	ea19 0f03 	tst.w	r9, r3
 80122e4:	ea07 0a03 	and.w	sl, r7, r3
 80122e8:	d030      	beq.n	801234c <MEMS_runMagCal.constprop.14+0xb5c>
 80122ea:	3001      	adds	r0, #1
 80122ec:	b2c0      	uxtb	r0, r0
 80122ee:	f1ba 0f00 	cmp.w	sl, #0
 80122f2:	d001      	beq.n	80122f8 <MEMS_runMagCal.constprop.14+0xb08>
 80122f4:	3401      	adds	r4, #1
 80122f6:	b2e4      	uxtb	r4, r4
 80122f8:	4033      	ands	r3, r6
 80122fa:	3101      	adds	r1, #1
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	bf0c      	ite	eq
 8012300:	4613      	moveq	r3, r2
 8012302:	1c53      	addne	r3, r2, #1
 8012304:	2940      	cmp	r1, #64	; 0x40
 8012306:	b2da      	uxtb	r2, r3
 8012308:	f000 81ae 	beq.w	8012668 <MEMS_runMagCal.constprop.14+0xe78>
 801230c:	291f      	cmp	r1, #31
 801230e:	d8e3      	bhi.n	80122d8 <MEMS_runMagCal.constprop.14+0xae8>
 8012310:	fa05 f301 	lsl.w	r3, r5, r1
 8012314:	ea08 0a03 	and.w	sl, r8, r3
 8012318:	f1ba 0f00 	cmp.w	sl, #0
 801231c:	bf18      	it	ne
 801231e:	3001      	addne	r0, #1
 8012320:	ea1e 0f03 	tst.w	lr, r3
 8012324:	bf18      	it	ne
 8012326:	3401      	addne	r4, #1
 8012328:	b2c0      	uxtb	r0, r0
 801232a:	bf18      	it	ne
 801232c:	b2e4      	uxtbne	r4, r4
 801232e:	ea0c 0303 	and.w	r3, ip, r3
 8012332:	e7e2      	b.n	80122fa <MEMS_runMagCal.constprop.14+0xb0a>
 8012334:	2200      	movs	r2, #0
 8012336:	23ff      	movs	r3, #255	; 0xff
 8012338:	eeb0 0a49 	vmov.f32	s0, s18
 801233c:	4648      	mov	r0, r9
 801233e:	f88b 2500 	strb.w	r2, [fp, #1280]	; 0x500
 8012342:	f88b 3502 	strb.w	r3, [fp, #1282]	; 0x502
 8012346:	f7fe fc19 	bl	8010b7c <MEMS_updateMagBufferIndex.constprop.24>
 801234a:	e60c      	b.n	8011f66 <MEMS_runMagCal.constprop.14+0x776>
 801234c:	f1ba 0f00 	cmp.w	sl, #0
 8012350:	d1d0      	bne.n	80122f4 <MEMS_runMagCal.constprop.14+0xb04>
 8012352:	e7d1      	b.n	80122f8 <MEMS_runMagCal.constprop.14+0xb08>
 8012354:	f9bb 0462 	ldrsh.w	r0, [fp, #1122]	; 0x462
 8012358:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801235a:	fb95 f1f9 	sdiv	r1, r5, r9
 801235e:	fb02 3200 	mla	r2, r2, r0, r3
 8012362:	fb09 5311 	mls	r3, r9, r1, r5
 8012366:	2b00      	cmp	r3, #0
 8012368:	bfb8      	it	lt
 801236a:	444b      	addlt	r3, r9
 801236c:	b21b      	sxth	r3, r3
 801236e:	ee07 3a90 	vmov	s15, r3
 8012372:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012376:	f04f 0c01 	mov.w	ip, #1
 801237a:	ee67 7a88 	vmul.f32	s15, s15, s16
 801237e:	f88b c500 	strb.w	ip, [fp, #1280]	; 0x500
 8012382:	ee17 0a90 	vmov	r0, s15
 8012386:	f8cb 2504 	str.w	r2, [fp, #1284]	; 0x504
 801238a:	f8ab 5522 	strh.w	r5, [fp, #1314]	; 0x522
 801238e:	f8ab 5818 	strh.w	r5, [fp, #2072]	; 0x818
 8012392:	f8ab 6524 	strh.w	r6, [fp, #1316]	; 0x524
 8012396:	f8ab 681a 	strh.w	r6, [fp, #2074]	; 0x81a
 801239a:	f8ab 7526 	strh.w	r7, [fp, #1318]	; 0x526
 801239e:	f8ab 781c 	strh.w	r7, [fp, #2076]	; 0x81c
 80123a2:	f88b 8502 	strb.w	r8, [fp, #1282]	; 0x502
 80123a6:	f8ab 8520 	strh.w	r8, [fp, #1312]	; 0x520
 80123aa:	f009 f895 	bl	801b4d8 <roundf>
 80123ae:	fb96 f3f9 	sdiv	r3, r6, r9
 80123b2:	ee07 0a90 	vmov	s15, r0
 80123b6:	fb09 6613 	mls	r6, r9, r3, r6
 80123ba:	2e00      	cmp	r6, #0
 80123bc:	bfb8      	it	lt
 80123be:	444e      	addlt	r6, r9
 80123c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80123c4:	b233      	sxth	r3, r6
 80123c6:	edcd 7a02 	vstr	s15, [sp, #8]
 80123ca:	ee07 3a90 	vmov	s15, r3
 80123ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80123d2:	f89d 5008 	ldrb.w	r5, [sp, #8]
 80123d6:	ee67 7a88 	vmul.f32	s15, s15, s16
 80123da:	ee17 0a90 	vmov	r0, s15
 80123de:	f009 f87b 	bl	801b4d8 <roundf>
 80123e2:	fb97 f3f9 	sdiv	r3, r7, r9
 80123e6:	ee07 0a90 	vmov	s15, r0
 80123ea:	fb09 7713 	mls	r7, r9, r3, r7
 80123ee:	2f00      	cmp	r7, #0
 80123f0:	bfb8      	it	lt
 80123f2:	444f      	addlt	r7, r9
 80123f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80123f8:	b23b      	sxth	r3, r7
 80123fa:	edcd 7a02 	vstr	s15, [sp, #8]
 80123fe:	ee07 3a90 	vmov	s15, r3
 8012402:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012406:	f89d 6008 	ldrb.w	r6, [sp, #8]
 801240a:	ee67 7a88 	vmul.f32	s15, s15, s16
 801240e:	ee17 0a90 	vmov	r0, s15
 8012412:	f009 f861 	bl	801b4d8 <roundf>
 8012416:	ee07 0a90 	vmov	s15, r0
 801241a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801241e:	2d1f      	cmp	r5, #31
 8012420:	edcd 7a02 	vstr	s15, [sp, #8]
 8012424:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8012428:	f240 809b 	bls.w	8012562 <MEMS_runMagCal.constprop.14+0xd72>
 801242c:	f8db 1508 	ldr.w	r1, [fp, #1288]	; 0x508
 8012430:	f1a5 0220 	sub.w	r2, r5, #32
 8012434:	2001      	movs	r0, #1
 8012436:	fa00 f202 	lsl.w	r2, r0, r2
 801243a:	ea22 0201 	bic.w	r2, r2, r1
 801243e:	404a      	eors	r2, r1
 8012440:	f8cb 2508 	str.w	r2, [fp, #1288]	; 0x508
 8012444:	2e1f      	cmp	r6, #31
 8012446:	f240 8082 	bls.w	801254e <MEMS_runMagCal.constprop.14+0xd5e>
 801244a:	f8db 1510 	ldr.w	r1, [fp, #1296]	; 0x510
 801244e:	f1a6 0220 	sub.w	r2, r6, #32
 8012452:	2001      	movs	r0, #1
 8012454:	fa00 f202 	lsl.w	r2, r0, r2
 8012458:	ea22 0201 	bic.w	r2, r2, r1
 801245c:	404a      	eors	r2, r1
 801245e:	f8cb 2510 	str.w	r2, [fp, #1296]	; 0x510
 8012462:	2b1f      	cmp	r3, #31
 8012464:	f200 80e8 	bhi.w	8012638 <MEMS_runMagCal.constprop.14+0xe48>
 8012468:	f8db 2518 	ldr.w	r2, [fp, #1304]	; 0x518
 801246c:	2101      	movs	r1, #1
 801246e:	fa01 f303 	lsl.w	r3, r1, r3
 8012472:	ea23 0302 	bic.w	r3, r3, r2
 8012476:	4053      	eors	r3, r2
 8012478:	f8cb 3518 	str.w	r3, [fp, #1304]	; 0x518
 801247c:	9104      	str	r1, [sp, #16]
 801247e:	e6c4      	b.n	801220a <MEMS_runMagCal.constprop.14+0xa1a>
 8012480:	b11b      	cbz	r3, 801248a <MEMS_runMagCal.constprop.14+0xc9a>
 8012482:	f1be 0f00 	cmp.w	lr, #0
 8012486:	f47f aec0 	bne.w	801220a <MEMS_runMagCal.constprop.14+0xa1a>
 801248a:	f99b 3502 	ldrsb.w	r3, [fp, #1282]	; 0x502
 801248e:	f89b c501 	ldrb.w	ip, [fp, #1281]	; 0x501
 8012492:	3301      	adds	r3, #1
 8012494:	9305      	str	r3, [sp, #20]
 8012496:	e663      	b.n	8012160 <MEMS_runMagCal.constprop.14+0x970>
 8012498:	2201      	movs	r2, #1
 801249a:	fa02 f20a 	lsl.w	r2, r2, sl
 801249e:	4013      	ands	r3, r2
 80124a0:	e635      	b.n	801210e <MEMS_runMagCal.constprop.14+0x91e>
 80124a2:	2101      	movs	r1, #1
 80124a4:	4091      	lsls	r1, r2
 80124a6:	4001      	ands	r1, r0
 80124a8:	e64e      	b.n	8012148 <MEMS_runMagCal.constprop.14+0x958>
 80124aa:	4601      	mov	r1, r0
 80124ac:	2001      	movs	r0, #1
 80124ae:	fa00 f101 	lsl.w	r1, r0, r1
 80124b2:	ea02 0e01 	and.w	lr, r2, r1
 80124b6:	e639      	b.n	801212c <MEMS_runMagCal.constprop.14+0x93c>
 80124b8:	f04f 0e01 	mov.w	lr, #1
 80124bc:	e4e8      	b.n	8011e90 <MEMS_runMagCal.constprop.14+0x6a0>
 80124be:	45b8      	cmp	r8, r7
 80124c0:	f000 8377 	beq.w	8012bb2 <MEMS_runMagCal.constprop.14+0x13c2>
 80124c4:	f8db 247c 	ldr.w	r2, [fp, #1148]	; 0x47c
 80124c8:	2d03      	cmp	r5, #3
 80124ca:	f47f ac95 	bne.w	8011df8 <MEMS_runMagCal.constprop.14+0x608>
 80124ce:	ee07 3a90 	vmov	s15, r3
 80124d2:	f8db 3478 	ldr.w	r3, [fp, #1144]	; 0x478
 80124d6:	eddf 6a57 	vldr	s13, [pc, #348]	; 8012634 <MEMS_runMagCal.constprop.14+0xe44>
 80124da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80124de:	ee07 3a10 	vmov	s14, r3
 80124e2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80124e6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80124ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80124ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124f2:	f77f ac81 	ble.w	8011df8 <MEMS_runMagCal.constprop.14+0x608>
 80124f6:	2a00      	cmp	r2, #0
 80124f8:	f43f ac7e 	beq.w	8011df8 <MEMS_runMagCal.constprop.14+0x608>
 80124fc:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 8012500:	320a      	adds	r2, #10
 8012502:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8012506:	ee07 2a90 	vmov	s15, r2
 801250a:	ee27 7a26 	vmul.f32	s14, s14, s13
 801250e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012512:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801251a:	f77f ac6d 	ble.w	8011df8 <MEMS_runMagCal.constprop.14+0x608>
 801251e:	f89b 3475 	ldrb.w	r3, [fp, #1141]	; 0x475
 8012522:	2b00      	cmp	r3, #0
 8012524:	f47f ac68 	bne.w	8011df8 <MEMS_runMagCal.constprop.14+0x608>
 8012528:	f89b 34b4 	ldrb.w	r3, [fp, #1204]	; 0x4b4
 801252c:	2b00      	cmp	r3, #0
 801252e:	f43f abf6 	beq.w	8011d1e <MEMS_runMagCal.constprop.14+0x52e>
 8012532:	f89b 34bc 	ldrb.w	r3, [fp, #1212]	; 0x4bc
 8012536:	2bff      	cmp	r3, #255	; 0xff
 8012538:	f47f abf1 	bne.w	8011d1e <MEMS_runMagCal.constprop.14+0x52e>
 801253c:	e45c      	b.n	8011df8 <MEMS_runMagCal.constprop.14+0x608>
 801253e:	f1ba 0f00 	cmp.w	sl, #0
 8012542:	f47f ad18 	bne.w	8011f76 <MEMS_runMagCal.constprop.14+0x786>
 8012546:	2300      	movs	r3, #0
 8012548:	9304      	str	r3, [sp, #16]
 801254a:	461a      	mov	r2, r3
 801254c:	e667      	b.n	801221e <MEMS_runMagCal.constprop.14+0xa2e>
 801254e:	f8db 1514 	ldr.w	r1, [fp, #1300]	; 0x514
 8012552:	2201      	movs	r2, #1
 8012554:	40b2      	lsls	r2, r6
 8012556:	ea22 0201 	bic.w	r2, r2, r1
 801255a:	404a      	eors	r2, r1
 801255c:	f8cb 2514 	str.w	r2, [fp, #1300]	; 0x514
 8012560:	e77f      	b.n	8012462 <MEMS_runMagCal.constprop.14+0xc72>
 8012562:	f8db 150c 	ldr.w	r1, [fp, #1292]	; 0x50c
 8012566:	2201      	movs	r2, #1
 8012568:	40aa      	lsls	r2, r5
 801256a:	ea22 0201 	bic.w	r2, r2, r1
 801256e:	404a      	eors	r2, r1
 8012570:	f8cb 250c 	str.w	r2, [fp, #1292]	; 0x50c
 8012574:	e766      	b.n	8012444 <MEMS_runMagCal.constprop.14+0xc54>
 8012576:	f1be 0f00 	cmp.w	lr, #0
 801257a:	f47f adf1 	bne.w	8012160 <MEMS_runMagCal.constprop.14+0x970>
 801257e:	9b05      	ldr	r3, [sp, #20]
 8012580:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8012582:	fb93 f1fc 	sdiv	r1, r3, ip
 8012586:	f108 0801 	add.w	r8, r8, #1
 801258a:	fb0c 3111 	mls	r1, ip, r1, r3
 801258e:	f8db 3504 	ldr.w	r3, [fp, #1284]	; 0x504
 8012592:	f8bb 0462 	ldrh.w	r0, [fp, #1122]	; 0x462
 8012596:	f8ab 5818 	strh.w	r5, [fp, #2072]	; 0x818
 801259a:	45e0      	cmp	r8, ip
 801259c:	b249      	sxtb	r1, r1
 801259e:	bfa8      	it	ge
 80125a0:	46e0      	movge	r8, ip
 80125a2:	1ad3      	subs	r3, r2, r3
 80125a4:	1d0a      	adds	r2, r1, #4
 80125a6:	eb0b 02c2 	add.w	r2, fp, r2, lsl #3
 80125aa:	fa5f f888 	uxtb.w	r8, r8
 80125ae:	fb10 3304 	smlabb	r3, r0, r4, r3
 80125b2:	45e0      	cmp	r8, ip
 80125b4:	f8ab 681a 	strh.w	r6, [fp, #2074]	; 0x81a
 80125b8:	f88b 8500 	strb.w	r8, [fp, #1280]	; 0x500
 80125bc:	f8ab 781c 	strh.w	r7, [fp, #2076]	; 0x81c
 80125c0:	f88b 1502 	strb.w	r1, [fp, #1282]	; 0x502
 80125c4:	f8a2 5502 	strh.w	r5, [r2, #1282]	; 0x502
 80125c8:	f8a2 6504 	strh.w	r6, [r2, #1284]	; 0x504
 80125cc:	f8a2 7506 	strh.w	r7, [r2, #1286]	; 0x506
 80125d0:	f8a2 3500 	strh.w	r3, [r2, #1280]	; 0x500
 80125d4:	f000 836c 	beq.w	8012cb0 <MEMS_runMagCal.constprop.14+0x14c0>
 80125d8:	f1ba 0f1f 	cmp.w	sl, #31
 80125dc:	f240 82d0 	bls.w	8012b80 <MEMS_runMagCal.constprop.14+0x1390>
 80125e0:	f8db 2508 	ldr.w	r2, [fp, #1288]	; 0x508
 80125e4:	f1aa 0320 	sub.w	r3, sl, #32
 80125e8:	2101      	movs	r1, #1
 80125ea:	fa01 f303 	lsl.w	r3, r1, r3
 80125ee:	ea23 0302 	bic.w	r3, r3, r2
 80125f2:	4053      	eors	r3, r2
 80125f4:	f8cb 3508 	str.w	r3, [fp, #1288]	; 0x508
 80125f8:	9b02      	ldr	r3, [sp, #8]
 80125fa:	2b1f      	cmp	r3, #31
 80125fc:	f240 82b5 	bls.w	8012b6a <MEMS_runMagCal.constprop.14+0x137a>
 8012600:	f8db 2510 	ldr.w	r2, [fp, #1296]	; 0x510
 8012604:	3b20      	subs	r3, #32
 8012606:	2101      	movs	r1, #1
 8012608:	fa01 f303 	lsl.w	r3, r1, r3
 801260c:	ea23 0302 	bic.w	r3, r3, r2
 8012610:	4053      	eors	r3, r2
 8012612:	f8cb 3510 	str.w	r3, [fp, #1296]	; 0x510
 8012616:	9b03      	ldr	r3, [sp, #12]
 8012618:	2b1f      	cmp	r3, #31
 801261a:	f200 82bc 	bhi.w	8012b96 <MEMS_runMagCal.constprop.14+0x13a6>
 801261e:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 8012622:	9301      	str	r3, [sp, #4]
 8012624:	f8db 2518 	ldr.w	r2, [fp, #1304]	; 0x518
 8012628:	9b03      	ldr	r3, [sp, #12]
 801262a:	2101      	movs	r1, #1
 801262c:	e71f      	b.n	801246e <MEMS_runMagCal.constprop.14+0xc7e>
 801262e:	bf00      	nop
 8012630:	20001828 	.word	0x20001828
 8012634:	3a83126f 	.word	0x3a83126f
 8012638:	f8db 251c 	ldr.w	r2, [fp, #1308]	; 0x51c
 801263c:	3b20      	subs	r3, #32
 801263e:	2101      	movs	r1, #1
 8012640:	fa01 f303 	lsl.w	r3, r1, r3
 8012644:	ea23 0302 	bic.w	r3, r3, r2
 8012648:	4053      	eors	r3, r2
 801264a:	f8cb 351c 	str.w	r3, [fp, #1308]	; 0x51c
 801264e:	9104      	str	r1, [sp, #16]
 8012650:	e5db      	b.n	801220a <MEMS_runMagCal.constprop.14+0xa1a>
 8012652:	f04f 0a00 	mov.w	sl, #0
 8012656:	f04f 0901 	mov.w	r9, #1
 801265a:	f7ff bb29 	b.w	8011cb0 <MEMS_runMagCal.constprop.14+0x4c0>
 801265e:	f04f 0a00 	mov.w	sl, #0
 8012662:	46d1      	mov	r9, sl
 8012664:	f7ff bb24 	b.w	8011cb0 <MEMS_runMagCal.constprop.14+0x4c0>
 8012668:	2805      	cmp	r0, #5
 801266a:	f240 8269 	bls.w	8012b40 <MEMS_runMagCal.constprop.14+0x1350>
 801266e:	2c05      	cmp	r4, #5
 8012670:	f240 8266 	bls.w	8012b40 <MEMS_runMagCal.constprop.14+0x1350>
 8012674:	2a05      	cmp	r2, #5
 8012676:	f240 8263 	bls.w	8012b40 <MEMS_runMagCal.constprop.14+0x1350>
 801267a:	f89b 6501 	ldrb.w	r6, [fp, #1281]	; 0x501
 801267e:	9a01      	ldr	r2, [sp, #4]
 8012680:	f99b a502 	ldrsb.w	sl, [fp, #1282]	; 0x502
 8012684:	42b2      	cmp	r2, r6
 8012686:	f10a 0301 	add.w	r3, sl, #1
 801268a:	f000 8367 	beq.w	8012d5c <MEMS_runMagCal.constprop.14+0x156c>
 801268e:	1a9a      	subs	r2, r3, r2
 8012690:	fb92 f3f6 	sdiv	r3, r2, r6
 8012694:	fb06 2313 	mls	r3, r6, r3, r2
 8012698:	2b00      	cmp	r3, #0
 801269a:	b219      	sxth	r1, r3
 801269c:	bfbc      	itt	lt
 801269e:	199b      	addlt	r3, r3, r6
 80126a0:	b219      	sxthlt	r1, r3
 80126a2:	f101 0315 	add.w	r3, r1, #21
 80126a6:	00db      	lsls	r3, r3, #3
 80126a8:	eb0b 0203 	add.w	r2, fp, r3
 80126ac:	489b      	ldr	r0, [pc, #620]	; (801291c <MEMS_runMagCal.constprop.14+0x112c>)
 80126ae:	f9b2 547e 	ldrsh.w	r5, [r2, #1150]	; 0x47e
 80126b2:	f9b2 c47a 	ldrsh.w	ip, [r2, #1146]	; 0x47a
 80126b6:	f9b2 747c 	ldrsh.w	r7, [r2, #1148]	; 0x47c
 80126ba:	f8ad 5048 	strh.w	r5, [sp, #72]	; 0x48
 80126be:	2200      	movs	r2, #0
 80126c0:	4403      	add	r3, r0
 80126c2:	e9cd 2206 	strd	r2, r2, [sp, #24]
 80126c6:	f8d3 301a 	ldr.w	r3, [r3, #26]
 80126ca:	9311      	str	r3, [sp, #68]	; 0x44
 80126cc:	9313      	str	r3, [sp, #76]	; 0x4c
 80126ce:	46e0      	mov	r8, ip
 80126d0:	f8ad 5050 	strh.w	r5, [sp, #80]	; 0x50
 80126d4:	46a9      	mov	r9, r5
 80126d6:	46be      	mov	lr, r7
 80126d8:	920a      	str	r2, [sp, #40]	; 0x28
 80126da:	9208      	str	r2, [sp, #32]
 80126dc:	920b      	str	r2, [sp, #44]	; 0x2c
 80126de:	9205      	str	r2, [sp, #20]
 80126e0:	9104      	str	r1, [sp, #16]
 80126e2:	9b04      	ldr	r3, [sp, #16]
 80126e4:	1898      	adds	r0, r3, r2
 80126e6:	fb90 f3f6 	sdiv	r3, r0, r6
 80126ea:	fb06 0313 	mls	r3, r6, r3, r0
 80126ee:	b2db      	uxtb	r3, r3
 80126f0:	3315      	adds	r3, #21
 80126f2:	eb0b 00c3 	add.w	r0, fp, r3, lsl #3
 80126f6:	f9b0 447a 	ldrsh.w	r4, [r0, #1146]	; 0x47a
 80126fa:	4564      	cmp	r4, ip
 80126fc:	dd02      	ble.n	8012704 <MEMS_runMagCal.constprop.14+0xf14>
 80126fe:	2001      	movs	r0, #1
 8012700:	46a4      	mov	ip, r4
 8012702:	900b      	str	r0, [sp, #44]	; 0x2c
 8012704:	eb0b 00c3 	add.w	r0, fp, r3, lsl #3
 8012708:	f9b0 047c 	ldrsh.w	r0, [r0, #1148]	; 0x47c
 801270c:	42b8      	cmp	r0, r7
 801270e:	dd02      	ble.n	8012716 <MEMS_runMagCal.constprop.14+0xf26>
 8012710:	2101      	movs	r1, #1
 8012712:	4607      	mov	r7, r0
 8012714:	910a      	str	r1, [sp, #40]	; 0x28
 8012716:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 801271a:	f9b3 347e 	ldrsh.w	r3, [r3, #1150]	; 0x47e
 801271e:	42ab      	cmp	r3, r5
 8012720:	dd02      	ble.n	8012728 <MEMS_runMagCal.constprop.14+0xf38>
 8012722:	2101      	movs	r1, #1
 8012724:	461d      	mov	r5, r3
 8012726:	9108      	str	r1, [sp, #32]
 8012728:	4544      	cmp	r4, r8
 801272a:	da02      	bge.n	8012732 <MEMS_runMagCal.constprop.14+0xf42>
 801272c:	2101      	movs	r1, #1
 801272e:	46a0      	mov	r8, r4
 8012730:	9107      	str	r1, [sp, #28]
 8012732:	4570      	cmp	r0, lr
 8012734:	da02      	bge.n	801273c <MEMS_runMagCal.constprop.14+0xf4c>
 8012736:	2101      	movs	r1, #1
 8012738:	4686      	mov	lr, r0
 801273a:	9106      	str	r1, [sp, #24]
 801273c:	454b      	cmp	r3, r9
 801273e:	da02      	bge.n	8012746 <MEMS_runMagCal.constprop.14+0xf56>
 8012740:	4699      	mov	r9, r3
 8012742:	2301      	movs	r3, #1
 8012744:	9305      	str	r3, [sp, #20]
 8012746:	3201      	adds	r2, #1
 8012748:	9801      	ldr	r0, [sp, #4]
 801274a:	b2d3      	uxtb	r3, r2
 801274c:	4298      	cmp	r0, r3
 801274e:	d8c8      	bhi.n	80126e2 <MEMS_runMagCal.constprop.14+0xef2>
 8012750:	9b06      	ldr	r3, [sp, #24]
 8012752:	9904      	ldr	r1, [sp, #16]
 8012754:	2b00      	cmp	r3, #0
 8012756:	f040 8324 	bne.w	8012da2 <MEMS_runMagCal.constprop.14+0x15b2>
 801275a:	9b07      	ldr	r3, [sp, #28]
 801275c:	b10b      	cbz	r3, 8012762 <MEMS_runMagCal.constprop.14+0xf72>
 801275e:	f8ad 804c 	strh.w	r8, [sp, #76]	; 0x4c
 8012762:	9b05      	ldr	r3, [sp, #20]
 8012764:	b10b      	cbz	r3, 801276a <MEMS_runMagCal.constprop.14+0xf7a>
 8012766:	f8ad 9050 	strh.w	r9, [sp, #80]	; 0x50
 801276a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801276c:	b10b      	cbz	r3, 8012772 <MEMS_runMagCal.constprop.14+0xf82>
 801276e:	f8ad c044 	strh.w	ip, [sp, #68]	; 0x44
 8012772:	9b08      	ldr	r3, [sp, #32]
 8012774:	b10b      	cbz	r3, 801277a <MEMS_runMagCal.constprop.14+0xf8a>
 8012776:	f8ad 5048 	strh.w	r5, [sp, #72]	; 0x48
 801277a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801277c:	b10b      	cbz	r3, 8012782 <MEMS_runMagCal.constprop.14+0xf92>
 801277e:	f8ad 7046 	strh.w	r7, [sp, #70]	; 0x46
 8012782:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012786:	ee87 9aa8 	vdiv.f32	s18, s15, s17
 801278a:	f8bd 5046 	ldrh.w	r5, [sp, #70]	; 0x46
 801278e:	f8bd 004e 	ldrh.w	r0, [sp, #78]	; 0x4e
 8012792:	f8bd 7044 	ldrh.w	r7, [sp, #68]	; 0x44
 8012796:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
 801279a:	f8bd 4048 	ldrh.w	r4, [sp, #72]	; 0x48
 801279e:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 80127a2:	1a28      	subs	r0, r5, r0
 80127a4:	f89b 54b4 	ldrb.w	r5, [fp, #1204]	; 0x4b4
 80127a8:	1aba      	subs	r2, r7, r2
 80127aa:	1ae3      	subs	r3, r4, r3
 80127ac:	b212      	sxth	r2, r2
 80127ae:	ed9f 5a5c 	vldr	s10, [pc, #368]	; 8012920 <MEMS_runMagCal.constprop.14+0x1130>
 80127b2:	b200      	sxth	r0, r0
 80127b4:	ee29 5a05 	vmul.f32	s10, s18, s10
 80127b8:	b21b      	sxth	r3, r3
 80127ba:	2d00      	cmp	r5, #0
 80127bc:	f040 82b5 	bne.w	8012d2a <MEMS_runMagCal.constprop.14+0x153a>
 80127c0:	f89b 44cc 	ldrb.w	r4, [fp, #1228]	; 0x4cc
 80127c4:	fab4 f484 	clz	r4, r4
 80127c8:	0964      	lsrs	r4, r4, #5
 80127ca:	9404      	str	r4, [sp, #16]
 80127cc:	ee07 2a10 	vmov	s14, r2
 80127d0:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 80127d4:	ee65 7a27 	vmul.f32	s15, s10, s15
 80127d8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80127dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80127e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127e4:	f300 8285 	bgt.w	8012cf2 <MEMS_runMagCal.constprop.14+0x1502>
 80127e8:	ee06 0a90 	vmov	s13, r0
 80127ec:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80127f0:	eef4 7ae6 	vcmpe.f32	s15, s13
 80127f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127f8:	f100 827b 	bmi.w	8012cf2 <MEMS_runMagCal.constprop.14+0x1502>
 80127fc:	ee06 3a10 	vmov	s12, r3
 8012800:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8012804:	eef4 7ac6 	vcmpe.f32	s15, s12
 8012808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801280c:	f100 8271 	bmi.w	8012cf2 <MEMS_runMagCal.constprop.14+0x1502>
 8012810:	4293      	cmp	r3, r2
 8012812:	461c      	mov	r4, r3
 8012814:	bfa8      	it	ge
 8012816:	4614      	movge	r4, r2
 8012818:	b224      	sxth	r4, r4
 801281a:	4284      	cmp	r4, r0
 801281c:	bfa8      	it	ge
 801281e:	4604      	movge	r4, r0
 8012820:	4290      	cmp	r0, r2
 8012822:	4605      	mov	r5, r0
 8012824:	bfb8      	it	lt
 8012826:	4615      	movlt	r5, r2
 8012828:	429c      	cmp	r4, r3
 801282a:	bfa8      	it	ge
 801282c:	461c      	movge	r4, r3
 801282e:	429d      	cmp	r5, r3
 8012830:	bfb8      	it	lt
 8012832:	461d      	movlt	r5, r3
 8012834:	fa0f fa85 	sxth.w	sl, r5
 8012838:	b224      	sxth	r4, r4
 801283a:	4592      	cmp	sl, r2
 801283c:	f8ad 404e 	strh.w	r4, [sp, #78]	; 0x4e
 8012840:	f340 8276 	ble.w	8012d30 <MEMS_runMagCal.constprop.14+0x1540>
 8012844:	4294      	cmp	r4, r2
 8012846:	f280 8273 	bge.w	8012d30 <MEMS_runMagCal.constprop.14+0x1540>
 801284a:	2501      	movs	r5, #1
 801284c:	4582      	cmp	sl, r0
 801284e:	f300 8299 	bgt.w	8012d84 <MEMS_runMagCal.constprop.14+0x1594>
 8012852:	4553      	cmp	r3, sl
 8012854:	f280 8291 	bge.w	8012d7a <MEMS_runMagCal.constprop.14+0x158a>
 8012858:	42a3      	cmp	r3, r4
 801285a:	f340 828e 	ble.w	8012d7a <MEMS_runMagCal.constprop.14+0x158a>
 801285e:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
 8012862:	9b04      	ldr	r3, [sp, #16]
 8012864:	2b00      	cmp	r3, #0
 8012866:	f000 8142 	beq.w	8012aee <MEMS_runMagCal.constprop.14+0x12fe>
 801286a:	eeb4 5ac7 	vcmpe.f32	s10, s14
 801286e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012872:	dc0c      	bgt.n	801288e <MEMS_runMagCal.constprop.14+0x109e>
 8012874:	eeb4 5ae6 	vcmpe.f32	s10, s13
 8012878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801287c:	dc07      	bgt.n	801288e <MEMS_runMagCal.constprop.14+0x109e>
 801287e:	eeb4 5ac6 	vcmpe.f32	s10, s12
 8012882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012886:	bfcc      	ite	gt
 8012888:	2301      	movgt	r3, #1
 801288a:	2300      	movle	r3, #0
 801288c:	9304      	str	r3, [sp, #16]
 801288e:	eddf 7a25 	vldr	s15, [pc, #148]	; 8012924 <MEMS_runMagCal.constprop.14+0x1134>
 8012892:	ee05 aa90 	vmov	s11, sl
 8012896:	ee65 7a27 	vmul.f32	s15, s10, s15
 801289a:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 801289e:	eef4 5ae7 	vcmpe.f32	s11, s15
 80128a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128a6:	db1e      	blt.n	80128e6 <MEMS_runMagCal.constprop.14+0x10f6>
 80128a8:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 80128ac:	ee05 3a90 	vmov	s11, r3
 80128b0:	eef7 7a02 	vmov.f32	s15, #114	; 0x3f900000  1.125
 80128b4:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80128b8:	ee65 7a27 	vmul.f32	s15, s10, s15
 80128bc:	eef4 5ae7 	vcmpe.f32	s11, s15
 80128c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128c4:	db0f      	blt.n	80128e6 <MEMS_runMagCal.constprop.14+0x10f6>
 80128c6:	ebba 0f44 	cmp.w	sl, r4, lsl #1
 80128ca:	da0c      	bge.n	80128e6 <MEMS_runMagCal.constprop.14+0x10f6>
 80128cc:	ee07 4a90 	vmov	s15, r4
 80128d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80128d4:	eef7 5a04 	vmov.f32	s11, #116	; 0x3fa00000  1.250
 80128d8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80128dc:	eeb4 5ae7 	vcmpe.f32	s10, s15
 80128e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128e4:	d422      	bmi.n	801292c <MEMS_runMagCal.constprop.14+0x113c>
 80128e6:	eef7 7a02 	vmov.f32	s15, #114	; 0x3f900000  1.125
 80128ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80128ee:	eeb4 5ac7 	vcmpe.f32	s10, s14
 80128f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128f6:	f300 8123 	bgt.w	8012b40 <MEMS_runMagCal.constprop.14+0x1350>
 80128fa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80128fe:	eeb4 5ae6 	vcmpe.f32	s10, s13
 8012902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012906:	f300 811b 	bgt.w	8012b40 <MEMS_runMagCal.constprop.14+0x1350>
 801290a:	ee66 7a27 	vmul.f32	s15, s12, s15
 801290e:	eeb4 5ae7 	vcmpe.f32	s10, s15
 8012912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012916:	f300 8113 	bgt.w	8012b40 <MEMS_runMagCal.constprop.14+0x1350>
 801291a:	e007      	b.n	801292c <MEMS_runMagCal.constprop.14+0x113c>
 801291c:	20001828 	.word	0x20001828
 8012920:	42340000 	.word	0x42340000
 8012924:	3faccccd 	.word	0x3faccccd
 8012928:	00000000 	.word	0x00000000
 801292c:	fa4f f981 	sxtb.w	r9, r1
 8012930:	2700      	movs	r7, #0
 8012932:	f109 0301 	add.w	r3, r9, #1
 8012936:	9302      	str	r3, [sp, #8]
 8012938:	46b8      	mov	r8, r7
 801293a:	463b      	mov	r3, r7
 801293c:	f04f 0e01 	mov.w	lr, #1
 8012940:	9a02      	ldr	r2, [sp, #8]
 8012942:	eb09 0103 	add.w	r1, r9, r3
 8012946:	441a      	add	r2, r3
 8012948:	fb91 f3f6 	sdiv	r3, r1, r6
 801294c:	fb06 1313 	mls	r3, r6, r3, r1
 8012950:	b25c      	sxtb	r4, r3
 8012952:	2c00      	cmp	r4, #0
 8012954:	bfb8      	it	lt
 8012956:	199b      	addlt	r3, r3, r6
 8012958:	fb92 f1f6 	sdiv	r1, r2, r6
 801295c:	fb06 2111 	mls	r1, r6, r1, r2
 8012960:	bfb8      	it	lt
 8012962:	b25c      	sxtblt	r4, r3
 8012964:	b249      	sxtb	r1, r1
 8012966:	3104      	adds	r1, #4
 8012968:	3404      	adds	r4, #4
 801296a:	eb0b 02c4 	add.w	r2, fp, r4, lsl #3
 801296e:	eb0b 03c1 	add.w	r3, fp, r1, lsl #3
 8012972:	f9b2 0502 	ldrsh.w	r0, [r2, #1282]	; 0x502
 8012976:	f9b3 3502 	ldrsh.w	r3, [r3, #1282]	; 0x502
 801297a:	1a1a      	subs	r2, r3, r0
 801297c:	2a00      	cmp	r2, #0
 801297e:	b29b      	uxth	r3, r3
 8012980:	b280      	uxth	r0, r0
 8012982:	bfb4      	ite	lt
 8012984:	1ac3      	sublt	r3, r0, r3
 8012986:	1a1b      	subge	r3, r3, r0
 8012988:	eb0b 02c4 	add.w	r2, fp, r4, lsl #3
 801298c:	b218      	sxth	r0, r3
 801298e:	eb0b 03c1 	add.w	r3, fp, r1, lsl #3
 8012992:	f9b2 2504 	ldrsh.w	r2, [r2, #1284]	; 0x504
 8012996:	f9b3 3504 	ldrsh.w	r3, [r3, #1284]	; 0x504
 801299a:	1a9d      	subs	r5, r3, r2
 801299c:	2d00      	cmp	r5, #0
 801299e:	b29b      	uxth	r3, r3
 80129a0:	b292      	uxth	r2, r2
 80129a2:	bfb4      	ite	lt
 80129a4:	1ad3      	sublt	r3, r2, r3
 80129a6:	1a9b      	subge	r3, r3, r2
 80129a8:	eb0b 05c1 	add.w	r5, fp, r1, lsl #3
 80129ac:	eb0b 02c4 	add.w	r2, fp, r4, lsl #3
 80129b0:	eb0b 01c1 	add.w	r1, fp, r1, lsl #3
 80129b4:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 80129b8:	f9b5 5506 	ldrsh.w	r5, [r5, #1286]	; 0x506
 80129bc:	f9b2 2506 	ldrsh.w	r2, [r2, #1286]	; 0x506
 80129c0:	f8b1 1500 	ldrh.w	r1, [r1, #1280]	; 0x500
 80129c4:	f8b4 4500 	ldrh.w	r4, [r4, #1280]	; 0x500
 80129c8:	eba5 0c02 	sub.w	ip, r5, r2
 80129cc:	1b09      	subs	r1, r1, r4
 80129ce:	b292      	uxth	r2, r2
 80129d0:	f1bc 0f00 	cmp.w	ip, #0
 80129d4:	b2ad      	uxth	r5, r5
 80129d6:	b209      	sxth	r1, r1
 80129d8:	bfb4      	ite	lt
 80129da:	1b52      	sublt	r2, r2, r5
 80129dc:	1aaa      	subge	r2, r5, r2
 80129de:	2900      	cmp	r1, #0
 80129e0:	b21b      	sxth	r3, r3
 80129e2:	b212      	sxth	r2, r2
 80129e4:	dd1e      	ble.n	8012a24 <MEMS_runMagCal.constprop.14+0x1234>
 80129e6:	4403      	add	r3, r0
 80129e8:	441a      	add	r2, r3
 80129ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80129ee:	fb03 f202 	mul.w	r2, r3, r2
 80129f2:	ee07 2a90 	vmov	s15, r2
 80129f6:	ee07 1a10 	vmov	s14, r1
 80129fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80129fe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012a02:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8012a06:	f108 0801 	add.w	r8, r8, #1
 8012a0a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8012a0e:	fa5f f888 	uxtb.w	r8, r8
 8012a12:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8012a16:	ee17 3a90 	vmov	r3, s15
 8012a1a:	b21b      	sxth	r3, r3
 8012a1c:	2b96      	cmp	r3, #150	; 0x96
 8012a1e:	bfc4      	itt	gt
 8012a20:	3701      	addgt	r7, #1
 8012a22:	b2ff      	uxtbgt	r7, r7
 8012a24:	4673      	mov	r3, lr
 8012a26:	9901      	ldr	r1, [sp, #4]
 8012a28:	f10e 0e01 	add.w	lr, lr, #1
 8012a2c:	fa5f f28e 	uxtb.w	r2, lr
 8012a30:	4291      	cmp	r1, r2
 8012a32:	d885      	bhi.n	8012940 <MEMS_runMagCal.constprop.14+0x1150>
 8012a34:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8012a38:	4547      	cmp	r7, r8
 8012a3a:	f340 8081 	ble.w	8012b40 <MEMS_runMagCal.constprop.14+0x1350>
 8012a3e:	9b03      	ldr	r3, [sp, #12]
 8012a40:	b92b      	cbnz	r3, 8012a4e <MEMS_runMagCal.constprop.14+0x125e>
 8012a42:	f89b 34cc 	ldrb.w	r3, [fp, #1228]	; 0x4cc
 8012a46:	3b02      	subs	r3, #2
 8012a48:	2b01      	cmp	r3, #1
 8012a4a:	f240 81ad 	bls.w	8012da8 <MEMS_runMagCal.constprop.14+0x15b8>
 8012a4e:	2220      	movs	r2, #32
 8012a50:	2100      	movs	r1, #0
 8012a52:	a82e      	add	r0, sp, #184	; 0xb8
 8012a54:	f007 fcd7 	bl	801a406 <memset>
 8012a58:	f89b 8500 	ldrb.w	r8, [fp, #1280]	; 0x500
 8012a5c:	f89b 2501 	ldrb.w	r2, [fp, #1281]	; 0x501
 8012a60:	f99b 3502 	ldrsb.w	r3, [fp, #1282]	; 0x502
 8012a64:	2100      	movs	r1, #0
 8012a66:	4590      	cmp	r8, r2
 8012a68:	e9cd 111a 	strd	r1, r1, [sp, #104]	; 0x68
 8012a6c:	911c      	str	r1, [sp, #112]	; 0x70
 8012a6e:	f103 0301 	add.w	r3, r3, #1
 8012a72:	f000 824f 	beq.w	8012f14 <MEMS_runMagCal.constprop.14+0x1724>
 8012a76:	eba3 0308 	sub.w	r3, r3, r8
 8012a7a:	fb93 f1f2 	sdiv	r1, r3, r2
 8012a7e:	fb02 3311 	mls	r3, r2, r1, r3
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	b219      	sxth	r1, r3
 8012a86:	bfbc      	itt	lt
 8012a88:	189b      	addlt	r3, r3, r2
 8012a8a:	b219      	sxthlt	r1, r3
 8012a8c:	ed5f 7a5a 	vldr	s15, [pc, #-360]	; 8012928 <MEMS_runMagCal.constprop.14+0x1138>
 8012a90:	2000      	movs	r0, #0
 8012a92:	eeb0 7a67 	vmov.f32	s14, s15
 8012a96:	eef0 6a67 	vmov.f32	s13, s15
 8012a9a:	4604      	mov	r4, r0
 8012a9c:	b2c3      	uxtb	r3, r0
 8012a9e:	4598      	cmp	r8, r3
 8012aa0:	eb01 0500 	add.w	r5, r1, r0
 8012aa4:	f240 81d4 	bls.w	8012e50 <MEMS_runMagCal.constprop.14+0x1660>
 8012aa8:	fb95 f3f2 	sdiv	r3, r5, r2
 8012aac:	fb02 5313 	mls	r3, r2, r3, r5
 8012ab0:	b2db      	uxtb	r3, r3
 8012ab2:	3304      	adds	r3, #4
 8012ab4:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8012ab8:	3001      	adds	r0, #1
 8012aba:	f9b3 4502 	ldrsh.w	r4, [r3, #1282]	; 0x502
 8012abe:	ee05 4a10 	vmov	s10, r4
 8012ac2:	f9b3 4504 	ldrsh.w	r4, [r3, #1284]	; 0x504
 8012ac6:	f9b3 3506 	ldrsh.w	r3, [r3, #1286]	; 0x506
 8012aca:	ee05 4a90 	vmov	s11, r4
 8012ace:	ee06 3a10 	vmov	s12, r3
 8012ad2:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8012ad6:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8012ada:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8012ade:	ee76 6a85 	vadd.f32	s13, s13, s10
 8012ae2:	ee37 7a25 	vadd.f32	s14, s14, s11
 8012ae6:	ee77 7a86 	vadd.f32	s15, s15, s12
 8012aea:	2401      	movs	r4, #1
 8012aec:	e7d6      	b.n	8012a9c <MEMS_runMagCal.constprop.14+0x12ac>
 8012aee:	4bcb      	ldr	r3, [pc, #812]	; (8012e1c <MEMS_runMagCal.constprop.14+0x162c>)
 8012af0:	ed9f 4ad0 	vldr	s8, [pc, #832]	; 8012e34 <MEMS_runMagCal.constprop.14+0x1644>
 8012af4:	edd3 4a23 	vldr	s9, [r3, #140]	; 0x8c
 8012af8:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8012afc:	edd3 5a27 	vldr	s11, [r3, #156]	; 0x9c
 8012b00:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8012b04:	eef7 4a02 	vmov.f32	s9, #114	; 0x3f900000  1.125
 8012b08:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8012b0c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8012b10:	ee67 7a84 	vmul.f32	s15, s15, s8
 8012b14:	eef4 7ae4 	vcmpe.f32	s15, s9
 8012b18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b1c:	bf88      	it	hi
 8012b1e:	eef0 7a64 	vmovhi.f32	s15, s9
 8012b22:	eef4 7ae5 	vcmpe.f32	s15, s11
 8012b26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b2a:	bfb8      	it	lt
 8012b2c:	eef0 7a65 	vmovlt.f32	s15, s11
 8012b30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012b34:	eeb4 5ac7 	vcmpe.f32	s10, s14
 8012b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b3c:	f77f aedd 	ble.w	80128fa <MEMS_runMagCal.constprop.14+0x110a>
 8012b40:	2300      	movs	r3, #0
 8012b42:	f88b 3474 	strb.w	r3, [fp, #1140]	; 0x474
 8012b46:	f7ff b8ea 	b.w	8011d1e <MEMS_runMagCal.constprop.14+0x52e>
 8012b4a:	f1ba 0f00 	cmp.w	sl, #0
 8012b4e:	f040 80b5 	bne.w	8012cbc <MEMS_runMagCal.constprop.14+0x14cc>
 8012b52:	2300      	movs	r3, #0
 8012b54:	9303      	str	r3, [sp, #12]
 8012b56:	f7ff bba5 	b.w	80122a4 <MEMS_runMagCal.constprop.14+0xab4>
 8012b5a:	fb93 fef8 	sdiv	lr, r3, r8
 8012b5e:	fb08 3e1e 	mls	lr, r8, lr, r3
 8012b62:	fa0f fe8e 	sxth.w	lr, lr
 8012b66:	f7ff bb0c 	b.w	8012182 <MEMS_runMagCal.constprop.14+0x992>
 8012b6a:	f8db 2514 	ldr.w	r2, [fp, #1300]	; 0x514
 8012b6e:	2101      	movs	r1, #1
 8012b70:	fa01 f303 	lsl.w	r3, r1, r3
 8012b74:	ea23 0302 	bic.w	r3, r3, r2
 8012b78:	4053      	eors	r3, r2
 8012b7a:	f8cb 3514 	str.w	r3, [fp, #1300]	; 0x514
 8012b7e:	e54a      	b.n	8012616 <MEMS_runMagCal.constprop.14+0xe26>
 8012b80:	f8db 250c 	ldr.w	r2, [fp, #1292]	; 0x50c
 8012b84:	2301      	movs	r3, #1
 8012b86:	fa03 f30a 	lsl.w	r3, r3, sl
 8012b8a:	ea23 0302 	bic.w	r3, r3, r2
 8012b8e:	4053      	eors	r3, r2
 8012b90:	f8cb 350c 	str.w	r3, [fp, #1292]	; 0x50c
 8012b94:	e530      	b.n	80125f8 <MEMS_runMagCal.constprop.14+0xe08>
 8012b96:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
 8012b9a:	f8db 251c 	ldr.w	r2, [fp, #1308]	; 0x51c
 8012b9e:	9101      	str	r1, [sp, #4]
 8012ba0:	3b20      	subs	r3, #32
 8012ba2:	e54c      	b.n	801263e <MEMS_runMagCal.constprop.14+0xe4e>
 8012ba4:	fb92 f6f5 	sdiv	r6, r2, r5
 8012ba8:	fb05 2216 	mls	r2, r5, r6, r2
 8012bac:	b216      	sxth	r6, r2
 8012bae:	f7ff b964 	b.w	8011e7a <MEMS_runMagCal.constprop.14+0x68a>
 8012bb2:	eddf 6aa2 	vldr	s13, [pc, #648]	; 8012e3c <MEMS_runMagCal.constprop.14+0x164c>
 8012bb6:	3401      	adds	r4, #1
 8012bb8:	f10d 0938 	add.w	r9, sp, #56	; 0x38
 8012bbc:	fb94 fef7 	sdiv	lr, r4, r7
 8012bc0:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 8012bc4:	fb07 441e 	mls	r4, r7, lr, r4
 8012bc8:	edc9 6a00 	vstr	s13, [r9]
 8012bcc:	2f00      	cmp	r7, #0
 8012bce:	f000 80cb 	beq.w	8012d68 <MEMS_runMagCal.constprop.14+0x1578>
 8012bd2:	fa1f fe84 	uxth.w	lr, r4
 8012bd6:	1e79      	subs	r1, r7, #1
 8012bd8:	2000      	movs	r0, #0
 8012bda:	1c72      	adds	r2, r6, #1
 8012bdc:	fa12 f881 	uxtah	r8, r2, r1
 8012be0:	9301      	str	r3, [sp, #4]
 8012be2:	eeb0 6a66 	vmov.f32	s12, s13
 8012be6:	ebae 0e06 	sub.w	lr, lr, r6
 8012bea:	4604      	mov	r4, r0
 8012bec:	4631      	mov	r1, r6
 8012bee:	f241 2c5c 	movw	ip, #4700	; 0x125c
 8012bf2:	4603      	mov	r3, r0
 8012bf4:	428e      	cmp	r6, r1
 8012bf6:	eb0e 0201 	add.w	r2, lr, r1
 8012bfa:	dc21      	bgt.n	8012c40 <MEMS_runMagCal.constprop.14+0x1450>
 8012bfc:	fb92 f0f7 	sdiv	r0, r2, r7
 8012c00:	fb07 2210 	mls	r2, r7, r0, r2
 8012c04:	eb0b 0242 	add.w	r2, fp, r2, lsl #1
 8012c08:	2301      	movs	r3, #1
 8012c0a:	f8b2 0488 	ldrh.w	r0, [r2, #1160]	; 0x488
 8012c0e:	f5a0 5292 	sub.w	r2, r0, #4672	; 0x1240
 8012c12:	4560      	cmp	r0, ip
 8012c14:	f1a2 021c 	sub.w	r2, r2, #28
 8012c18:	bf98      	it	ls
 8012c1a:	ebac 0200 	subls.w	r2, ip, r0
 8012c1e:	b292      	uxth	r2, r2
 8012c20:	fb02 f202 	mul.w	r2, r2, r2
 8012c24:	ee07 2a90 	vmov	s15, r2
 8012c28:	ee07 0a10 	vmov	s14, r0
 8012c2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012c30:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012c34:	441c      	add	r4, r3
 8012c36:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8012c3a:	ee36 6a07 	vadd.f32	s12, s12, s14
 8012c3e:	b2a4      	uxth	r4, r4
 8012c40:	3101      	adds	r1, #1
 8012c42:	4588      	cmp	r8, r1
 8012c44:	d1d6      	bne.n	8012bf4 <MEMS_runMagCal.constprop.14+0x1404>
 8012c46:	461a      	mov	r2, r3
 8012c48:	9b01      	ldr	r3, [sp, #4]
 8012c4a:	2a00      	cmp	r2, #0
 8012c4c:	f040 815d 	bne.w	8012f0a <MEMS_runMagCal.constprop.14+0x171a>
 8012c50:	ed99 7a00 	vldr	s14, [r9]
 8012c54:	b1ac      	cbz	r4, 8012c82 <MEMS_runMagCal.constprop.14+0x1492>
 8012c56:	ee07 4a90 	vmov	s15, r4
 8012c5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012c5e:	ed9d 5a0d 	vldr	s10, [sp, #52]	; 0x34
 8012c62:	ed9f 6a6f 	vldr	s12, [pc, #444]	; 8012e20 <MEMS_runMagCal.constprop.14+0x1630>
 8012c66:	eec7 5a27 	vdiv.f32	s11, s14, s15
 8012c6a:	eec5 6a27 	vdiv.f32	s13, s10, s15
 8012c6e:	eeb1 7ae5 	vsqrt.f32	s14, s11
 8012c72:	ee66 7a86 	vmul.f32	s15, s13, s12
 8012c76:	ee27 7a06 	vmul.f32	s14, s14, s12
 8012c7a:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 8012c7e:	ed89 7a00 	vstr	s14, [r9]
 8012c82:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 8012c86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c8e:	dd1b      	ble.n	8012cc8 <MEMS_runMagCal.constprop.14+0x14d8>
 8012c90:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 8012c94:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012c98:	2302      	movs	r3, #2
 8012c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c9e:	f88b 34cc 	strb.w	r3, [fp, #1228]	; 0x4cc
 8012ca2:	f77f a8a9 	ble.w	8011df8 <MEMS_runMagCal.constprop.14+0x608>
 8012ca6:	2301      	movs	r3, #1
 8012ca8:	f88b 3475 	strb.w	r3, [fp, #1141]	; 0x475
 8012cac:	f7ff b8a4 	b.w	8011df8 <MEMS_runMagCal.constprop.14+0x608>
 8012cb0:	eeb0 0a49 	vmov.f32	s0, s18
 8012cb4:	4648      	mov	r0, r9
 8012cb6:	f7fd ff61 	bl	8010b7c <MEMS_updateMagBufferIndex.constprop.24>
 8012cba:	e48d      	b.n	80125d8 <MEMS_runMagCal.constprop.14+0xde8>
 8012cbc:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 8012cc0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8012cc4:	f7ff badc 	b.w	8012280 <MEMS_runMagCal.constprop.14+0xa90>
 8012cc8:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8012ccc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cd4:	f8db 247c 	ldr.w	r2, [fp, #1148]	; 0x47c
 8012cd8:	d42d      	bmi.n	8012d36 <MEMS_runMagCal.constprop.14+0x1546>
 8012cda:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 8012cde:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ce6:	bfc4      	itt	gt
 8012ce8:	2101      	movgt	r1, #1
 8012cea:	f88b 1475 	strbgt.w	r1, [fp, #1141]	; 0x475
 8012cee:	f7ff bbeb 	b.w	80124c8 <MEMS_runMagCal.constprop.14+0xcd8>
 8012cf2:	eb0b 03ca 	add.w	r3, fp, sl, lsl #3
 8012cf6:	f8db 2504 	ldr.w	r2, [fp, #1284]	; 0x504
 8012cfa:	f9b3 3520 	ldrsh.w	r3, [r3, #1312]	; 0x520
 8012cfe:	f8db 1480 	ldr.w	r1, [fp, #1152]	; 0x480
 8012d02:	4413      	add	r3, r2
 8012d04:	4299      	cmp	r1, r3
 8012d06:	f4bf af1b 	bcs.w	8012b40 <MEMS_runMagCal.constprop.14+0x1350>
 8012d0a:	9902      	ldr	r1, [sp, #8]
 8012d0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012d10:	fb03 f301 	mul.w	r3, r3, r1
 8012d14:	3364      	adds	r3, #100	; 0x64
 8012d16:	4293      	cmp	r3, r2
 8012d18:	bf38      	it	cc
 8012d1a:	4613      	movcc	r3, r2
 8012d1c:	2200      	movs	r2, #0
 8012d1e:	f8cb 3480 	str.w	r3, [fp, #1152]	; 0x480
 8012d22:	f88b 2474 	strb.w	r2, [fp, #1140]	; 0x474
 8012d26:	f7fe bffa 	b.w	8011d1e <MEMS_runMagCal.constprop.14+0x52e>
 8012d2a:	2400      	movs	r4, #0
 8012d2c:	9404      	str	r4, [sp, #16]
 8012d2e:	e54d      	b.n	80127cc <MEMS_runMagCal.constprop.14+0xfdc>
 8012d30:	4622      	mov	r2, r4
 8012d32:	2500      	movs	r5, #0
 8012d34:	e58a      	b.n	801284c <MEMS_runMagCal.constprop.14+0x105c>
 8012d36:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 8012d3a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012d3e:	2003      	movs	r0, #3
 8012d40:	2100      	movs	r1, #0
 8012d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d46:	f88b 04cc 	strb.w	r0, [fp, #1228]	; 0x4cc
 8012d4a:	f88b 1475 	strb.w	r1, [fp, #1141]	; 0x475
 8012d4e:	f77f abbe 	ble.w	80124ce <MEMS_runMagCal.constprop.14+0xcde>
 8012d52:	2101      	movs	r1, #1
 8012d54:	f88b 1475 	strb.w	r1, [fp, #1141]	; 0x475
 8012d58:	f7ff bbb9 	b.w	80124ce <MEMS_runMagCal.constprop.14+0xcde>
 8012d5c:	fb93 f1f2 	sdiv	r1, r3, r2
 8012d60:	fb02 3311 	mls	r3, r2, r1, r3
 8012d64:	b219      	sxth	r1, r3
 8012d66:	e49c      	b.n	80126a2 <MEMS_runMagCal.constprop.14+0xeb2>
 8012d68:	2203      	movs	r2, #3
 8012d6a:	f88b 24cc 	strb.w	r2, [fp, #1228]	; 0x4cc
 8012d6e:	f88b 8475 	strb.w	r8, [fp, #1141]	; 0x475
 8012d72:	f8db 247c 	ldr.w	r2, [fp, #1148]	; 0x47c
 8012d76:	f7ff bbaa 	b.w	80124ce <MEMS_runMagCal.constprop.14+0xcde>
 8012d7a:	4613      	mov	r3, r2
 8012d7c:	2d00      	cmp	r5, #0
 8012d7e:	f43f ad70 	beq.w	8012862 <MEMS_runMagCal.constprop.14+0x1072>
 8012d82:	e56c      	b.n	801285e <MEMS_runMagCal.constprop.14+0x106e>
 8012d84:	4284      	cmp	r4, r0
 8012d86:	f6bf ad64 	bge.w	8012852 <MEMS_runMagCal.constprop.14+0x1062>
 8012d8a:	4553      	cmp	r3, sl
 8012d8c:	da07      	bge.n	8012d9e <MEMS_runMagCal.constprop.14+0x15ae>
 8012d8e:	4602      	mov	r2, r0
 8012d90:	2501      	movs	r5, #1
 8012d92:	e561      	b.n	8012858 <MEMS_runMagCal.constprop.14+0x1068>
 8012d94:	f88b c500 	strb.w	ip, [fp, #1280]	; 0x500
 8012d98:	4665      	mov	r5, ip
 8012d9a:	f7ff b8c6 	b.w	8011f2a <MEMS_runMagCal.constprop.14+0x73a>
 8012d9e:	4603      	mov	r3, r0
 8012da0:	e55d      	b.n	801285e <MEMS_runMagCal.constprop.14+0x106e>
 8012da2:	f8ad e04e 	strh.w	lr, [sp, #78]	; 0x4e
 8012da6:	e4d8      	b.n	801275a <MEMS_runMagCal.constprop.14+0xf6a>
 8012da8:	4e1e      	ldr	r6, [pc, #120]	; (8012e24 <MEMS_runMagCal.constprop.14+0x1634>)
 8012daa:	9c03      	ldr	r4, [sp, #12]
 8012dac:	ad15      	add	r5, sp, #84	; 0x54
 8012dae:	f856 0b04 	ldr.w	r0, [r6], #4
 8012db2:	f008 fb91 	bl	801b4d8 <roundf>
 8012db6:	ee07 0a90 	vmov	s15, r0
 8012dba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012dbe:	ee17 0a90 	vmov	r0, s15
 8012dc2:	f825 0014 	strh.w	r0, [r5, r4, lsl #1]
 8012dc6:	3401      	adds	r4, #1
 8012dc8:	2c03      	cmp	r4, #3
 8012dca:	d1f0      	bne.n	8012dae <MEMS_runMagCal.constprop.14+0x15be>
 8012dcc:	ab0f      	add	r3, sp, #60	; 0x3c
 8012dce:	aa10      	add	r2, sp, #64	; 0x40
 8012dd0:	eeb0 0a68 	vmov.f32	s0, s17
 8012dd4:	4914      	ldr	r1, [pc, #80]	; (8012e28 <MEMS_runMagCal.constprop.14+0x1638>)
 8012dd6:	4628      	mov	r0, r5
 8012dd8:	f7fd fdde 	bl	8010998 <getMagStats.constprop.26>
 8012ddc:	ed9d 7a0f 	vldr	s14, [sp, #60]	; 0x3c
 8012de0:	eddf 7a12 	vldr	s15, [pc, #72]	; 8012e2c <MEMS_runMagCal.constprop.14+0x163c>
 8012de4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012dec:	d511      	bpl.n	8012e12 <MEMS_runMagCal.constprop.14+0x1622>
 8012dee:	b980      	cbnz	r0, 8012e12 <MEMS_runMagCal.constprop.14+0x1622>
 8012df0:	f89b 34b4 	ldrb.w	r3, [fp, #1204]	; 0x4b4
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	f000 8093 	beq.w	8012f20 <MEMS_runMagCal.constprop.14+0x1730>
 8012dfa:	f89b 34bd 	ldrb.w	r3, [fp, #1213]	; 0x4bd
 8012dfe:	ee07 3a90 	vmov	s15, r3
 8012e02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012e06:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8012e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e0e:	f300 8087 	bgt.w	8012f20 <MEMS_runMagCal.constprop.14+0x1730>
 8012e12:	2300      	movs	r3, #0
 8012e14:	602b      	str	r3, [r5, #0]
 8012e16:	80ab      	strh	r3, [r5, #4]
 8012e18:	e619      	b.n	8012a4e <MEMS_runMagCal.constprop.14+0x125e>
 8012e1a:	bf00      	nop
 8012e1c:	20001828 	.word	0x20001828
 8012e20:	3c23d70a 	.word	0x3c23d70a
 8012e24:	20001898 	.word	0x20001898
 8012e28:	200018a4 	.word	0x200018a4
 8012e2c:	3ff4cccd 	.word	0x3ff4cccd
 8012e30:	358637bd 	.word	0x358637bd
 8012e34:	3eaaaaab 	.word	0x3eaaaaab
 8012e38:	3e2aaaab 	.word	0x3e2aaaab
 8012e3c:	00000000 	.word	0x00000000
 8012e40:	40060a92 	.word	0x40060a92
 8012e44:	42960000 	.word	0x42960000
 8012e48:	3a83126f 	.word	0x3a83126f
 8012e4c:	430d0000 	.word	0x430d0000
 8012e50:	b12c      	cbz	r4, 8012e5e <MEMS_runMagCal.constprop.14+0x166e>
 8012e52:	edcd 6a1a 	vstr	s13, [sp, #104]	; 0x68
 8012e56:	ed8d 7a1b 	vstr	s14, [sp, #108]	; 0x6c
 8012e5a:	edcd 7a1c 	vstr	s15, [sp, #112]	; 0x70
 8012e5e:	ee07 8a90 	vmov	s15, r8
 8012e62:	eeb8 bae7 	vcvt.f32.s32	s22, s15
 8012e66:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012e6a:	eec7 9a8b 	vdiv.f32	s19, s15, s22
 8012e6e:	2000      	movs	r0, #0
 8012e70:	4604      	mov	r4, r0
 8012e72:	eddd aa1a 	vldr	s21, [sp, #104]	; 0x68
 8012e76:	ed9d aa1b 	vldr	s20, [sp, #108]	; 0x6c
 8012e7a:	ed9d 7a1c 	vldr	s14, [sp, #112]	; 0x70
 8012e7e:	ed5f 7a11 	vldr	s15, [pc, #-68]	; 8012e3c <MEMS_runMagCal.constprop.14+0x164c>
 8012e82:	ee69 aaaa 	vmul.f32	s21, s19, s21
 8012e86:	ee29 aa8a 	vmul.f32	s20, s19, s20
 8012e8a:	ee69 9a87 	vmul.f32	s19, s19, s14
 8012e8e:	eef0 5a67 	vmov.f32	s11, s15
 8012e92:	eeb0 5a67 	vmov.f32	s10, s15
 8012e96:	eef0 4a67 	vmov.f32	s9, s15
 8012e9a:	eeb0 4a67 	vmov.f32	s8, s15
 8012e9e:	eef0 3a67 	vmov.f32	s7, s15
 8012ea2:	b2c3      	uxtb	r3, r0
 8012ea4:	4598      	cmp	r8, r3
 8012ea6:	eb01 0500 	add.w	r5, r1, r0
 8012eaa:	d959      	bls.n	8012f60 <MEMS_runMagCal.constprop.14+0x1770>
 8012eac:	fb95 f3f2 	sdiv	r3, r5, r2
 8012eb0:	fb02 5313 	mls	r3, r2, r3, r5
 8012eb4:	b2db      	uxtb	r3, r3
 8012eb6:	3304      	adds	r3, #4
 8012eb8:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8012ebc:	3001      	adds	r0, #1
 8012ebe:	f9b3 4502 	ldrsh.w	r4, [r3, #1282]	; 0x502
 8012ec2:	ee06 4a10 	vmov	s12, r4
 8012ec6:	f9b3 4504 	ldrsh.w	r4, [r3, #1284]	; 0x504
 8012eca:	f9b3 3506 	ldrsh.w	r3, [r3, #1286]	; 0x506
 8012ece:	ee06 4a90 	vmov	s13, r4
 8012ed2:	ee07 3a10 	vmov	s14, r3
 8012ed6:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8012eda:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8012ede:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012ee2:	ee36 6a6a 	vsub.f32	s12, s12, s21
 8012ee6:	ee76 6aca 	vsub.f32	s13, s13, s20
 8012eea:	ee37 7a69 	vsub.f32	s14, s14, s19
 8012eee:	eea6 4a06 	vfma.f32	s8, s12, s12
 8012ef2:	2401      	movs	r4, #1
 8012ef4:	eee6 4a26 	vfma.f32	s9, s12, s13
 8012ef8:	eee6 3aa6 	vfma.f32	s7, s13, s13
 8012efc:	eea6 5a07 	vfma.f32	s10, s12, s14
 8012f00:	eee6 5a87 	vfma.f32	s11, s13, s14
 8012f04:	eee7 7a07 	vfma.f32	s15, s14, s14
 8012f08:	e7cb      	b.n	8012ea2 <MEMS_runMagCal.constprop.14+0x16b2>
 8012f0a:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8012f0e:	edc9 6a00 	vstr	s13, [r9]
 8012f12:	e69d      	b.n	8012c50 <MEMS_runMagCal.constprop.14+0x1460>
 8012f14:	fb93 f1f8 	sdiv	r1, r3, r8
 8012f18:	fb08 3311 	mls	r3, r8, r1, r3
 8012f1c:	b219      	sxth	r1, r3
 8012f1e:	e5b5      	b.n	8012a8c <MEMS_runMagCal.constprop.14+0x129c>
 8012f20:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 8012f24:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8012f28:	ed5f 7a39 	vldr	s15, [pc, #-228]	; 8012e48 <MEMS_runMagCal.constprop.14+0x1658>
 8012f2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012f30:	2303      	movs	r3, #3
 8012f32:	ee17 0a90 	vmov	r0, s15
 8012f36:	f88b 34cc 	strb.w	r3, [fp, #1228]	; 0x4cc
 8012f3a:	f008 facd 	bl	801b4d8 <roundf>
 8012f3e:	ee07 0a90 	vmov	s15, r0
 8012f42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012f46:	2300      	movs	r3, #0
 8012f48:	ee17 0a90 	vmov	r0, s15
 8012f4c:	f88b 3474 	strb.w	r3, [fp, #1140]	; 0x474
 8012f50:	f8cb 0478 	str.w	r0, [fp, #1144]	; 0x478
 8012f54:	f7fe bee3 	b.w	8011d1e <MEMS_runMagCal.constprop.14+0x52e>
 8012f58:	f8ad 70d8 	strh.w	r7, [sp, #216]	; 0xd8
 8012f5c:	f7fe be02 	b.w	8011b64 <MEMS_runMagCal.constprop.14+0x374>
 8012f60:	b15c      	cbz	r4, 8012f7a <MEMS_runMagCal.constprop.14+0x178a>
 8012f62:	edcd 3a31 	vstr	s7, [sp, #196]	; 0xc4
 8012f66:	ed8d 4a2e 	vstr	s8, [sp, #184]	; 0xb8
 8012f6a:	edcd 4a2f 	vstr	s9, [sp, #188]	; 0xbc
 8012f6e:	ed8d 5a30 	vstr	s10, [sp, #192]	; 0xc0
 8012f72:	edcd 5a32 	vstr	s11, [sp, #200]	; 0xc8
 8012f76:	edcd 7a33 	vstr	s15, [sp, #204]	; 0xcc
 8012f7a:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8012f7e:	eddd 5a2f 	vldr	s11, [sp, #188]	; 0xbc
 8012f82:	ed9d 6a32 	vldr	s12, [sp, #200]	; 0xc8
 8012f86:	ed1f 5a56 	vldr	s10, [pc, #-344]	; 8012e30 <MEMS_runMagCal.constprop.14+0x1640>
 8012f8a:	eddd ba2e 	vldr	s23, [sp, #184]	; 0xb8
 8012f8e:	eddd 7a31 	vldr	s15, [sp, #196]	; 0xc4
 8012f92:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8012f96:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8012f9a:	eee5 6aa5 	vfma.f32	s13, s11, s11
 8012f9e:	eee6 6a06 	vfma.f32	s13, s12, s12
 8012fa2:	eef4 6ac5 	vcmpe.f32	s13, s10
 8012fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012faa:	f100 80be 	bmi.w	801312a <MEMS_runMagCal.constprop.14+0x193a>
 8012fae:	ee3b daa7 	vadd.f32	s26, s23, s15
 8012fb2:	ed1f 6a60 	vldr	s12, [pc, #-384]	; 8012e34 <MEMS_runMagCal.constprop.14+0x1644>
 8012fb6:	ed5f 5a60 	vldr	s11, [pc, #-384]	; 8012e38 <MEMS_runMagCal.constprop.14+0x1648>
 8012fba:	ee3d da07 	vadd.f32	s26, s26, s14
 8012fbe:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 8012fc2:	ee2d da06 	vmul.f32	s26, s26, s12
 8012fc6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8012fca:	ee77 7acd 	vsub.f32	s15, s15, s26
 8012fce:	ee7b bacd 	vsub.f32	s23, s23, s26
 8012fd2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8012fd6:	ee37 7a4d 	vsub.f32	s14, s14, s26
 8012fda:	eeeb 7aab 	vfma.f32	s15, s23, s23
 8012fde:	f04f 0900 	mov.w	r9, #0
 8012fe2:	4649      	mov	r1, r9
 8012fe4:	f04f 0e02 	mov.w	lr, #2
 8012fe8:	eee6 7a85 	vfma.f32	s15, s13, s10
 8012fec:	eee7 7a07 	vfma.f32	s15, s14, s14
 8012ff0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8012ff4:	eeb1 cae7 	vsqrt.f32	s24, s15
 8012ff8:	ee86 7a0c 	vdiv.f32	s14, s12, s24
 8012ffc:	1c4c      	adds	r4, r1, #1
 8012ffe:	fb01 f304 	mul.w	r3, r1, r4
 8013002:	fb93 f3fe 	sdiv	r3, r3, lr
 8013006:	eba9 0303 	sub.w	r3, r9, r3
 801300a:	b2c8      	uxtb	r0, r1
 801300c:	aa46      	add	r2, sp, #280	; 0x118
 801300e:	b2dd      	uxtb	r5, r3
 8013010:	230c      	movs	r3, #12
 8013012:	fb03 2101 	mla	r1, r3, r1, r2
 8013016:	4606      	mov	r6, r0
 8013018:	2200      	movs	r2, #0
 801301a:	9001      	str	r0, [sp, #4]
 801301c:	fa5f fc82 	uxtb.w	ip, r2
 8013020:	9801      	ldr	r0, [sp, #4]
 8013022:	eb05 030c 	add.w	r3, r5, ip
 8013026:	4560      	cmp	r0, ip
 8013028:	b2db      	uxtb	r3, r3
 801302a:	f102 0701 	add.w	r7, r2, #1
 801302e:	a82e      	add	r0, sp, #184	; 0xb8
 8013030:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8013034:	fb02 fc07 	mul.w	ip, r2, r7
 8013038:	f200 80db 	bhi.w	80131f2 <MEMS_runMagCal.constprop.14+0x1a02>
 801303c:	edd0 7a00 	vldr	s15, [r0]
 8013040:	f000 80cf 	beq.w	80131e2 <MEMS_runMagCal.constprop.14+0x19f2>
 8013044:	aa2e      	add	r2, sp, #184	; 0xb8
 8013046:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801304a:	edd3 7a00 	vldr	s15, [r3]
 801304e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013052:	edc1 7a00 	vstr	s15, [r1]
 8013056:	3603      	adds	r6, #3
 8013058:	2f03      	cmp	r7, #3
 801305a:	b2f6      	uxtb	r6, r6
 801305c:	f101 0104 	add.w	r1, r1, #4
 8013060:	463a      	mov	r2, r7
 8013062:	d1db      	bne.n	801301c <MEMS_runMagCal.constprop.14+0x182c>
 8013064:	f109 0903 	add.w	r9, r9, #3
 8013068:	2c03      	cmp	r4, #3
 801306a:	fa5f f989 	uxtb.w	r9, r9
 801306e:	4621      	mov	r1, r4
 8013070:	d1c4      	bne.n	8012ffc <MEMS_runMagCal.constprop.14+0x180c>
 8013072:	eddd 4a4e 	vldr	s9, [sp, #312]	; 0x138
 8013076:	ed9d 6a49 	vldr	s12, [sp, #292]	; 0x124
 801307a:	ed9d 4a4b 	vldr	s8, [sp, #300]	; 0x12c
 801307e:	eddd 5a4d 	vldr	s11, [sp, #308]	; 0x134
 8013082:	ed9d 7a4c 	vldr	s14, [sp, #304]	; 0x130
 8013086:	ed9d 5a4a 	vldr	s10, [sp, #296]	; 0x128
 801308a:	eddd 3a47 	vldr	s7, [sp, #284]	; 0x11c
 801308e:	ee66 7a64 	vnmul.f32	s15, s12, s9
 8013092:	ee65 6ac4 	vnmul.f32	s13, s11, s8
 8013096:	eee4 7a07 	vfma.f32	s15, s8, s14
 801309a:	eee5 6a24 	vfma.f32	s13, s10, s9
 801309e:	ee27 7a45 	vnmul.f32	s14, s14, s10
 80130a2:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80130a6:	eddd 4a46 	vldr	s9, [sp, #280]	; 0x118
 80130aa:	ed9d 5a48 	vldr	s10, [sp, #288]	; 0x120
 80130ae:	eea5 7a86 	vfma.f32	s14, s11, s12
 80130b2:	eee4 7aa6 	vfma.f32	s15, s9, s13
 80130b6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80130ba:	eee5 7a07 	vfma.f32	s15, s10, s14
 80130be:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80130c2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80130c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80130ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130ce:	f240 8172 	bls.w	80133b6 <MEMS_runMagCal.constprop.14+0x1bc6>
 80130d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80130d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80130da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130de:	f2c0 815f 	blt.w	80133a0 <MEMS_runMagCal.constprop.14+0x1bb0>
 80130e2:	ed5f caaa 	vldr	s25, [pc, #-680]	; 8012e3c <MEMS_runMagCal.constprop.14+0x164c>
 80130e6:	ee1c 0a90 	vmov	r0, s25
 80130ea:	f008 f9bd 	bl	801b468 <cosf>
 80130ee:	ed5f 7aac 	vldr	s15, [pc, #-688]	; 8012e40 <MEMS_runMagCal.constprop.14+0x1650>
 80130f2:	ee7c 7aa7 	vadd.f32	s15, s25, s15
 80130f6:	ee07 0a10 	vmov	s14, r0
 80130fa:	ee3c ca0c 	vadd.f32	s24, s24, s24
 80130fe:	ee17 0a90 	vmov	r0, s15
 8013102:	eef0 ba4d 	vmov.f32	s23, s26
 8013106:	eee7 ba0c 	vfma.f32	s23, s14, s24
 801310a:	f008 f9ad 	bl	801b468 <cosf>
 801310e:	ee06 0a90 	vmov	s13, r0
 8013112:	eeb0 7a4d 	vmov.f32	s14, s26
 8013116:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 801311a:	eea6 7a8c 	vfma.f32	s14, s13, s24
 801311e:	eef0 6a6b 	vmov.f32	s13, s23
 8013122:	eedd 6a27 	vfnms.f32	s13, s26, s15
 8013126:	ee76 7ac7 	vsub.f32	s15, s13, s14
 801312a:	ee77 6a27 	vadd.f32	s13, s14, s15
 801312e:	eef0 7ae7 	vabs.f32	s15, s15
 8013132:	ee76 6aab 	vadd.f32	s13, s13, s23
 8013136:	eef0 baeb 	vabs.f32	s23, s23
 801313a:	eec6 5a8b 	vdiv.f32	s11, s13, s22
 801313e:	eef4 7aeb 	vcmpe.f32	s15, s23
 8013142:	eeb1 6ae5 	vsqrt.f32	s12, s11
 8013146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801314a:	eeb0 7ac7 	vabs.f32	s14, s14
 801314e:	bf8c      	ite	hi
 8013150:	eef0 6a6b 	vmovhi.f32	s13, s23
 8013154:	eef0 6a67 	vmovls.f32	s13, s15
 8013158:	eef4 6ac7 	vcmpe.f32	s13, s14
 801315c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013160:	eef4 7aeb 	vcmpe.f32	s15, s23
 8013164:	bf88      	it	hi
 8013166:	eef0 6a47 	vmovhi.f32	s13, s14
 801316a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801316e:	bfb8      	it	lt
 8013170:	eef0 7a6b 	vmovlt.f32	s15, s23
 8013174:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013178:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
 801317c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013180:	ee66 5aa5 	vmul.f32	s11, s13, s11
 8013184:	bfa8      	it	ge
 8013186:	eef0 7a47 	vmovge.f32	s15, s14
 801318a:	eef4 7ae5 	vcmpe.f32	s15, s11
 801318e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013192:	ee28 7a86 	vmul.f32	s14, s17, s12
 8013196:	dc19      	bgt.n	80131cc <MEMS_runMagCal.constprop.14+0x19dc>
 8013198:	eeb3 6a04 	vmov.f32	s12, #52	; 0x41a00000  20.0
 801319c:	ee66 6a86 	vmul.f32	s13, s13, s12
 80131a0:	eef4 7ae6 	vcmpe.f32	s15, s13
 80131a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131a8:	dd02      	ble.n	80131b0 <MEMS_runMagCal.constprop.14+0x19c0>
 80131aa:	f1b8 0f22 	cmp.w	r8, #34	; 0x22
 80131ae:	d90d      	bls.n	80131cc <MEMS_runMagCal.constprop.14+0x19dc>
 80131b0:	ed5f 7adc 	vldr	s15, [pc, #-880]	; 8012e44 <MEMS_runMagCal.constprop.14+0x1654>
 80131b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80131b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131bc:	dc06      	bgt.n	80131cc <MEMS_runMagCal.constprop.14+0x19dc>
 80131be:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 80131c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80131c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131ca:	d517      	bpl.n	80131fc <MEMS_runMagCal.constprop.14+0x1a0c>
 80131cc:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 80131d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80131d4:	ed5f 7ae4 	vldr	s15, [pc, #-912]	; 8012e48 <MEMS_runMagCal.constprop.14+0x1658>
 80131d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80131dc:	ee17 0a90 	vmov	r0, s15
 80131e0:	e6ab      	b.n	8012f3a <MEMS_runMagCal.constprop.14+0x174a>
 80131e2:	ee77 7acd 	vsub.f32	s15, s15, s26
 80131e6:	1c57      	adds	r7, r2, #1
 80131e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80131ec:	edc1 7a00 	vstr	s15, [r1]
 80131f0:	e731      	b.n	8013056 <MEMS_runMagCal.constprop.14+0x1866>
 80131f2:	fb9c f3fe 	sdiv	r3, ip, lr
 80131f6:	1af3      	subs	r3, r6, r3
 80131f8:	b2db      	uxtb	r3, r3
 80131fa:	e723      	b.n	8013044 <MEMS_runMagCal.constprop.14+0x1854>
 80131fc:	ed1f 7aed 	vldr	s14, [pc, #-948]	; 8012e4c <MEMS_runMagCal.constprop.14+0x165c>
 8013200:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8013204:	2300      	movs	r3, #0
 8013206:	e9cd 3332 	strd	r3, r3, [sp, #200]	; 0xc8
 801320a:	9335      	str	r3, [sp, #212]	; 0xd4
 801320c:	ee07 aa10 	vmov	s14, sl
 8013210:	eeb8 8ac7 	vcvt.f32.s32	s16, s14
 8013214:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8013218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801321c:	d409      	bmi.n	8013232 <MEMS_runMagCal.constprop.14+0x1a42>
 801321e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013222:	ee17 3a90 	vmov	r3, s15
 8013226:	fa0f fa83 	sxth.w	sl, r3
 801322a:	ee07 aa90 	vmov	s15, sl
 801322e:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8013232:	ed9f 7ace 	vldr	s14, [pc, #824]	; 801356c <MEMS_runMagCal.constprop.14+0x1d7c>
 8013236:	eec7 7a28 	vdiv.f32	s15, s14, s17
 801323a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801323e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013242:	dc09      	bgt.n	8013258 <MEMS_runMagCal.constprop.14+0x1a68>
 8013244:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013248:	ee17 3a90 	vmov	r3, s15
 801324c:	fa0f fa83 	sxth.w	sl, r3
 8013250:	ee07 aa90 	vmov	s15, sl
 8013254:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8013258:	eddf 7ac5 	vldr	s15, [pc, #788]	; 8013570 <MEMS_runMagCal.constprop.14+0x1d80>
 801325c:	ed9f 7ac5 	vldr	s14, [pc, #788]	; 8013574 <MEMS_runMagCal.constprop.14+0x1d84>
 8013260:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8013264:	ee28 8a27 	vmul.f32	s16, s16, s15
 8013268:	eeb4 8ac7 	vcmpe.f32	s16, s14
 801326c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013270:	f340 850a 	ble.w	8013c88 <MEMS_runMagCal.constprop.14+0x2498>
 8013274:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8013278:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801327c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013280:	f140 8502 	bpl.w	8013c88 <MEMS_runMagCal.constprop.14+0x2498>
 8013284:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8013288:	ee48 7a27 	vmla.f32	s15, s16, s15
 801328c:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 801356c <MEMS_runMagCal.constprop.14+0x1d7c>
 8013290:	ed9f bab9 	vldr	s22, [pc, #740]	; 8013578 <MEMS_runMagCal.constprop.14+0x1d88>
 8013294:	ed9f 8ab9 	vldr	s16, [pc, #740]	; 801357c <MEMS_runMagCal.constprop.14+0x1d8c>
 8013298:	ee67 7a87 	vmul.f32	s15, s15, s14
 801329c:	ee68 aaaa 	vmul.f32	s21, s17, s21
 80132a0:	ee28 aa8a 	vmul.f32	s20, s17, s20
 80132a4:	ee68 9aa9 	vmul.f32	s19, s17, s19
 80132a8:	edcd aa2e 	vstr	s21, [sp, #184]	; 0xb8
 80132ac:	ed8d aa2f 	vstr	s20, [sp, #188]	; 0xbc
 80132b0:	edcd 9a30 	vstr	s19, [sp, #192]	; 0xc0
 80132b4:	edcd 7a31 	vstr	s15, [sp, #196]	; 0xc4
 80132b8:	edcd 7a34 	vstr	s15, [sp, #208]	; 0xd0
 80132bc:	2400      	movs	r4, #0
 80132be:	4621      	mov	r1, r4
 80132c0:	2240      	movs	r2, #64	; 0x40
 80132c2:	a836      	add	r0, sp, #216	; 0xd8
 80132c4:	e9cd 4421 	strd	r4, r4, [sp, #132]	; 0x84
 80132c8:	e9cd 4423 	strd	r4, r4, [sp, #140]	; 0x8c
 80132cc:	e9cd 441d 	strd	r4, r4, [sp, #116]	; 0x74
 80132d0:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
 80132d4:	f007 f897 	bl	801a406 <memset>
 80132d8:	4621      	mov	r1, r4
 80132da:	2240      	movs	r2, #64	; 0x40
 80132dc:	a846      	add	r0, sp, #280	; 0x118
 80132de:	f007 f892 	bl	801a406 <memset>
 80132e2:	eddd 4a31 	vldr	s9, [sp, #196]	; 0xc4
 80132e6:	eddf 7aa6 	vldr	s15, [pc, #664]	; 8013580 <MEMS_runMagCal.constprop.14+0x1d90>
 80132ea:	eef4 4ae7 	vcmpe.f32	s9, s15
 80132ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132f2:	f100 80a6 	bmi.w	8013442 <MEMS_runMagCal.constprop.14+0x1c52>
 80132f6:	f89b 4500 	ldrb.w	r4, [fp, #1280]	; 0x500
 80132fa:	f89b 0501 	ldrb.w	r0, [fp, #1281]	; 0x501
 80132fe:	f99b 3502 	ldrsb.w	r3, [fp, #1282]	; 0x502
 8013302:	4284      	cmp	r4, r0
 8013304:	f103 0301 	add.w	r3, r3, #1
 8013308:	f000 84b7 	beq.w	8013c7a <MEMS_runMagCal.constprop.14+0x248a>
 801330c:	1b1b      	subs	r3, r3, r4
 801330e:	fb93 f2f0 	sdiv	r2, r3, r0
 8013312:	fb00 3312 	mls	r3, r0, r2, r3
 8013316:	2b00      	cmp	r3, #0
 8013318:	b219      	sxth	r1, r3
 801331a:	bfbc      	itt	lt
 801331c:	181b      	addlt	r3, r3, r0
 801331e:	b219      	sxthlt	r1, r3
 8013320:	f8df 928c 	ldr.w	r9, [pc, #652]	; 80135b0 <MEMS_runMagCal.constprop.14+0x1dc0>
 8013324:	2500      	movs	r5, #0
 8013326:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 801332a:	af29      	add	r7, sp, #164	; 0xa4
 801332c:	2614      	movs	r6, #20
 801332e:	b2eb      	uxtb	r3, r5
 8013330:	429c      	cmp	r4, r3
 8013332:	d976      	bls.n	8013422 <MEMS_runMagCal.constprop.14+0x1c32>
 8013334:	194a      	adds	r2, r1, r5
 8013336:	fb92 f3f0 	sdiv	r3, r2, r0
 801333a:	fb00 2313 	mls	r3, r0, r3, r2
 801333e:	b2db      	uxtb	r3, r3
 8013340:	3304      	adds	r3, #4
 8013342:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8013346:	eddd 6a2f 	vldr	s13, [sp, #188]	; 0xbc
 801334a:	f9b3 2504 	ldrsh.w	r2, [r3, #1284]	; 0x504
 801334e:	ed9d 6a2e 	vldr	s12, [sp, #184]	; 0xb8
 8013352:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8013356:	ee05 2a10 	vmov	s10, r2
 801335a:	f9b3 2502 	ldrsh.w	r2, [r3, #1282]	; 0x502
 801335e:	f9b3 3506 	ldrsh.w	r3, [r3, #1286]	; 0x506
 8013362:	ee07 2a10 	vmov	s14, r2
 8013366:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 801336a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801336e:	eed8 6a85 	vfnms.f32	s13, s17, s10
 8013372:	ee98 6a87 	vfnms.f32	s12, s17, s14
 8013376:	ee05 3a90 	vmov	s11, r3
 801337a:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801337e:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8013382:	eea6 7a06 	vfma.f32	s14, s12, s12
 8013386:	eed8 7aa5 	vfnms.f32	s15, s17, s11
 801338a:	eea7 7aa7 	vfma.f32	s14, s15, s15
 801338e:	eeb4 7acb 	vcmpe.f32	s14, s22
 8013392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013396:	eef1 5ac7 	vsqrt.f32	s11, s14
 801339a:	d50f      	bpl.n	80133bc <MEMS_runMagCal.constprop.14+0x1bcc>
 801339c:	3501      	adds	r5, #1
 801339e:	e7c6      	b.n	801332e <MEMS_runMagCal.constprop.14+0x1b3e>
 80133a0:	ee17 0a90 	vmov	r0, s15
 80133a4:	f008 f9ca 	bl	801b73c <acosf>
 80133a8:	eddf ca76 	vldr	s25, [pc, #472]	; 8013584 <MEMS_runMagCal.constprop.14+0x1d94>
 80133ac:	ee07 0a90 	vmov	s15, r0
 80133b0:	ee67 caac 	vmul.f32	s25, s15, s25
 80133b4:	e697      	b.n	80130e6 <MEMS_runMagCal.constprop.14+0x18f6>
 80133b6:	eddf ca74 	vldr	s25, [pc, #464]	; 8013588 <MEMS_runMagCal.constprop.14+0x1d98>
 80133ba:	e694      	b.n	80130e6 <MEMS_runMagCal.constprop.14+0x18f6>
 80133bc:	ee84 7a25 	vdiv.f32	s14, s8, s11
 80133c0:	f10d 0c84 	add.w	ip, sp, #132	; 0x84
 80133c4:	aa25      	add	r2, sp, #148	; 0x94
 80133c6:	2300      	movs	r3, #0
 80133c8:	f8cd 90a0 	str.w	r9, [sp, #160]	; 0xa0
 80133cc:	ee74 5ae5 	vsub.f32	s11, s9, s11
 80133d0:	ee27 6a46 	vnmul.f32	s12, s14, s12
 80133d4:	ee67 6a66 	vnmul.f32	s13, s14, s13
 80133d8:	ee67 7a67 	vnmul.f32	s15, s14, s15
 80133dc:	ed8d 6a25 	vstr	s12, [sp, #148]	; 0x94
 80133e0:	edcd 6a26 	vstr	s13, [sp, #152]	; 0x98
 80133e4:	edcd 7a27 	vstr	s15, [sp, #156]	; 0x9c
 80133e8:	eddc 7a00 	vldr	s15, [ip]
 80133ec:	ed92 7a00 	vldr	s14, [r2]
 80133f0:	eee5 7a87 	vfma.f32	s15, s11, s14
 80133f4:	f10d 0ed8 	add.w	lr, sp, #216	; 0xd8
 80133f8:	fb06 e803 	mla	r8, r6, r3, lr
 80133fc:	4696      	mov	lr, r2
 80133fe:	ecec 7a01 	vstmia	ip!, {s15}
 8013402:	edd8 7a00 	vldr	s15, [r8]
 8013406:	ecfe 6a01 	vldmia	lr!, {s13}
 801340a:	eee7 7a26 	vfma.f32	s15, s14, s13
 801340e:	4577      	cmp	r7, lr
 8013410:	ece8 7a01 	vstmia	r8!, {s15}
 8013414:	d1f5      	bne.n	8013402 <MEMS_runMagCal.constprop.14+0x1c12>
 8013416:	3301      	adds	r3, #1
 8013418:	2b04      	cmp	r3, #4
 801341a:	f102 0204 	add.w	r2, r2, #4
 801341e:	d1e3      	bne.n	80133e8 <MEMS_runMagCal.constprop.14+0x1bf8>
 8013420:	e7bc      	b.n	801339c <MEMS_runMagCal.constprop.14+0x1bac>
 8013422:	aa37      	add	r2, sp, #220	; 0xdc
 8013424:	2103      	movs	r1, #3
 8013426:	2300      	movs	r3, #0
 8013428:	f102 000c 	add.w	r0, r2, #12
 801342c:	428b      	cmp	r3, r1
 801342e:	eb02 0483 	add.w	r4, r2, r3, lsl #2
 8013432:	f000 842d 	beq.w	8013c90 <MEMS_runMagCal.constprop.14+0x24a0>
 8013436:	6825      	ldr	r5, [r4, #0]
 8013438:	eb00 1403 	add.w	r4, r0, r3, lsl #4
 801343c:	3301      	adds	r3, #1
 801343e:	6025      	str	r5, [r4, #0]
 8013440:	e7f4      	b.n	801342c <MEMS_runMagCal.constprop.14+0x1c3c>
 8013442:	eddf 9a52 	vldr	s19, [pc, #328]	; 801358c <MEMS_runMagCal.constprop.14+0x1d9c>
 8013446:	eddf 7a52 	vldr	s15, [pc, #328]	; 8013590 <MEMS_runMagCal.constprop.14+0x1da0>
 801344a:	eeb0 7a69 	vmov.f32	s14, s19
 801344e:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 8013452:	eddd 6a31 	vldr	s13, [sp, #196]	; 0xc4
 8013456:	eddf 5a45 	vldr	s11, [pc, #276]	; 801356c <MEMS_runMagCal.constprop.14+0x1d7c>
 801345a:	eef4 7ac6 	vcmpe.f32	s15, s12
 801345e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013462:	ee85 8aa6 	vdiv.f32	s16, s11, s13
 8013466:	dc0e      	bgt.n	8013486 <MEMS_runMagCal.constprop.14+0x1c96>
 8013468:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8013594 <MEMS_runMagCal.constprop.14+0x1da4>
 801346c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013474:	dc07      	bgt.n	8013486 <MEMS_runMagCal.constprop.14+0x1c96>
 8013476:	eddf 7a42 	vldr	s15, [pc, #264]	; 8013580 <MEMS_runMagCal.constprop.14+0x1d90>
 801347a:	eef4 6ae7 	vcmpe.f32	s13, s15
 801347e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013482:	f200 809f 	bhi.w	80135c4 <MEMS_runMagCal.constprop.14+0x1dd4>
 8013486:	4b44      	ldr	r3, [pc, #272]	; (8013598 <MEMS_runMagCal.constprop.14+0x1da8>)
 8013488:	ed9f 8a41 	vldr	s16, [pc, #260]	; 8013590 <MEMS_runMagCal.constprop.14+0x1da0>
 801348c:	9325      	str	r3, [sp, #148]	; 0x94
 801348e:	9334      	str	r3, [sp, #208]	; 0xd0
 8013490:	ed9f 5a36 	vldr	s10, [pc, #216]	; 801356c <MEMS_runMagCal.constprop.14+0x1d7c>
 8013494:	eddd 5a31 	vldr	s11, [sp, #196]	; 0xc4
 8013498:	ed9d 7a34 	vldr	s14, [sp, #208]	; 0xd0
 801349c:	ed9d 6a2e 	vldr	s12, [sp, #184]	; 0xb8
 80134a0:	eddd aa2f 	vldr	s21, [sp, #188]	; 0xbc
 80134a4:	ed9d aa30 	vldr	s20, [sp, #192]	; 0xc0
 80134a8:	eddd 6a25 	vldr	s13, [sp, #148]	; 0x94
 80134ac:	eec5 7a25 	vdiv.f32	s15, s10, s11
 80134b0:	2300      	movs	r3, #0
 80134b2:	9347      	str	r3, [sp, #284]	; 0x11c
 80134b4:	9348      	str	r3, [sp, #288]	; 0x120
 80134b6:	9349      	str	r3, [sp, #292]	; 0x124
 80134b8:	934b      	str	r3, [sp, #300]	; 0x12c
 80134ba:	934c      	str	r3, [sp, #304]	; 0x130
 80134bc:	934d      	str	r3, [sp, #308]	; 0x134
 80134be:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80134c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134c6:	ee29 6a06 	vmul.f32	s12, s18, s12
 80134ca:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 80134ce:	edcd 7a4a 	vstr	s15, [sp, #296]	; 0x128
 80134d2:	edcd 7a4e 	vstr	s15, [sp, #312]	; 0x138
 80134d6:	ee69 aa2a 	vmul.f32	s21, s18, s21
 80134da:	ee29 aa0a 	vmul.f32	s20, s18, s20
 80134de:	d441      	bmi.n	8013564 <MEMS_runMagCal.constprop.14+0x1d74>
 80134e0:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80134e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134e8:	d43c      	bmi.n	8013564 <MEMS_runMagCal.constprop.14+0x1d74>
 80134ea:	eec6 5a87 	vdiv.f32	s11, s13, s14
 80134ee:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
 80134f2:	ee79 9ae5 	vsub.f32	s19, s19, s11
 80134f6:	eddf 6a29 	vldr	s13, [pc, #164]	; 801359c <MEMS_runMagCal.constprop.14+0x1dac>
 80134fa:	eddf 5a29 	vldr	s11, [pc, #164]	; 80135a0 <MEMS_runMagCal.constprop.14+0x1db0>
 80134fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013502:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8013506:	ee37 7ac7 	vsub.f32	s14, s15, s14
 801350a:	eef4 7ae5 	vcmpe.f32	s15, s11
 801350e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013512:	eef0 6ae6 	vabs.f32	s13, s13
 8013516:	eeb0 7ac7 	vabs.f32	s14, s14
 801351a:	dd06      	ble.n	801352a <MEMS_runMagCal.constprop.14+0x1d3a>
 801351c:	eddf 7a21 	vldr	s15, [pc, #132]	; 80135a4 <MEMS_runMagCal.constprop.14+0x1db4>
 8013520:	eef4 6ae7 	vcmpe.f32	s13, s15
 8013524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013528:	d47d      	bmi.n	8013626 <MEMS_runMagCal.constprop.14+0x1e36>
 801352a:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80135a8 <MEMS_runMagCal.constprop.14+0x1db8>
 801352e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013536:	db76      	blt.n	8013626 <MEMS_runMagCal.constprop.14+0x1e36>
 8013538:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80135ac <MEMS_runMagCal.constprop.14+0x1dbc>
 801353c:	f89b 3500 	ldrb.w	r3, [fp, #1280]	; 0x500
 8013540:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8013544:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8013548:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801354c:	ee87 0a28 	vdiv.f32	s0, s14, s17
 8013550:	ee17 2a90 	vmov	r2, s15
 8013554:	b290      	uxth	r0, r2
 8013556:	b113      	cbz	r3, 801355e <MEMS_runMagCal.constprop.14+0x1d6e>
 8013558:	3b01      	subs	r3, #1
 801355a:	f88b 3500 	strb.w	r3, [fp, #1280]	; 0x500
 801355e:	f7fd fb0d 	bl	8010b7c <MEMS_updateMagBufferIndex.constprop.24>
 8013562:	e633      	b.n	80131cc <MEMS_runMagCal.constprop.14+0x19dc>
 8013564:	eddf 9a09 	vldr	s19, [pc, #36]	; 801358c <MEMS_runMagCal.constprop.14+0x1d9c>
 8013568:	e7c5      	b.n	80134f6 <MEMS_runMagCal.constprop.14+0x1d06>
 801356a:	bf00      	nop
 801356c:	423c0000 	.word	0x423c0000
 8013570:	3c2e4c41 	.word	0x3c2e4c41
 8013574:	3e4ccccd 	.word	0x3e4ccccd
 8013578:	2b8cbccc 	.word	0x2b8cbccc
 801357c:	358637bd 	.word	0x358637bd
 8013580:	3dcccccd 	.word	0x3dcccccd
 8013584:	3eaaaaab 	.word	0x3eaaaaab
 8013588:	3f860a92 	.word	0x3f860a92
 801358c:	00000000 	.word	0x00000000
 8013590:	41f00001 	.word	0x41f00001
 8013594:	400ccccd 	.word	0x400ccccd
 8013598:	423c0000 	.word	0x423c0000
 801359c:	3f8ccccd 	.word	0x3f8ccccd
 80135a0:	3ee66666 	.word	0x3ee66666
 80135a4:	3f266666 	.word	0x3f266666
 80135a8:	3eb33333 	.word	0x3eb33333
 80135ac:	433d0000 	.word	0x433d0000
 80135b0:	bf800000 	.word	0xbf800000
 80135b4:	3f19999a 	.word	0x3f19999a
 80135b8:	3a83126f 	.word	0x3a83126f
 80135bc:	3c23d70a 	.word	0x3c23d70a
 80135c0:	447a0000 	.word	0x447a0000
 80135c4:	2224      	movs	r2, #36	; 0x24
 80135c6:	2100      	movs	r1, #0
 80135c8:	a846      	add	r0, sp, #280	; 0x118
 80135ca:	f006 ff1c 	bl	801a406 <memset>
 80135ce:	ad2e      	add	r5, sp, #184	; 0xb8
 80135d0:	2400      	movs	r4, #0
 80135d2:	ecf5 7a01 	vldmia	r5!, {s15}
 80135d6:	ee69 7a27 	vmul.f32	s15, s18, s15
 80135da:	ee17 0a90 	vmov	r0, s15
 80135de:	f007 ff7b 	bl	801b4d8 <roundf>
 80135e2:	ee07 0a90 	vmov	s15, r0
 80135e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80135ea:	aa36      	add	r2, sp, #216	; 0xd8
 80135ec:	ee17 0a90 	vmov	r0, s15
 80135f0:	ab46      	add	r3, sp, #280	; 0x118
 80135f2:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80135f6:	f822 0014 	strh.w	r0, [r2, r4, lsl #1]
 80135fa:	3401      	adds	r4, #1
 80135fc:	2c03      	cmp	r4, #3
 80135fe:	ed83 8a00 	vstr	s16, [r3]
 8013602:	d1e6      	bne.n	80135d2 <MEMS_runMagCal.constprop.14+0x1de2>
 8013604:	ab25      	add	r3, sp, #148	; 0x94
 8013606:	aa34      	add	r2, sp, #208	; 0xd0
 8013608:	eeb0 0a68 	vmov.f32	s0, s17
 801360c:	a946      	add	r1, sp, #280	; 0x118
 801360e:	a836      	add	r0, sp, #216	; 0xd8
 8013610:	f7fd f9c2 	bl	8010998 <getMagStats.constprop.26>
 8013614:	ed9d 8a25 	vldr	s16, [sp, #148]	; 0x94
 8013618:	ee78 7a08 	vadd.f32	s15, s16, s16
 801361c:	ee28 8a29 	vmul.f32	s16, s16, s19
 8013620:	edcd 7a25 	vstr	s15, [sp, #148]	; 0x94
 8013624:	e734      	b.n	8013490 <MEMS_runMagCal.constprop.14+0x1ca0>
 8013626:	ed5f 7a1d 	vldr	s15, [pc, #-116]	; 80135b4 <MEMS_runMagCal.constprop.14+0x1dc4>
 801362a:	eef4 9ae7 	vcmpe.f32	s19, s15
 801362e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013632:	d481      	bmi.n	8013538 <MEMS_runMagCal.constprop.14+0x1d48>
 8013634:	ee16 0a10 	vmov	r0, s12
 8013638:	f007 ff4e 	bl	801b4d8 <roundf>
 801363c:	ee07 0a90 	vmov	s15, r0
 8013640:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013644:	ad15      	add	r5, sp, #84	; 0x54
 8013646:	ee17 3a90 	vmov	r3, s15
 801364a:	ee1a 0a90 	vmov	r0, s21
 801364e:	802b      	strh	r3, [r5, #0]
 8013650:	f007 ff42 	bl	801b4d8 <roundf>
 8013654:	ee07 0a90 	vmov	s15, r0
 8013658:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801365c:	ee1a 0a10 	vmov	r0, s20
 8013660:	ee17 3a90 	vmov	r3, s15
 8013664:	806b      	strh	r3, [r5, #2]
 8013666:	f007 ff37 	bl	801b4d8 <roundf>
 801366a:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 801366e:	ee06 0a90 	vmov	s13, r0
 8013672:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8013676:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 801367a:	ed5f 7a31 	vldr	s15, [pc, #-196]	; 80135b8 <MEMS_runMagCal.constprop.14+0x1dc8>
 801367e:	ee16 3a90 	vmov	r3, s13
 8013682:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013686:	80ab      	strh	r3, [r5, #4]
 8013688:	ee17 0a90 	vmov	r0, s15
 801368c:	f007 ff24 	bl	801b4d8 <roundf>
 8013690:	ee07 0a90 	vmov	s15, r0
 8013694:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013698:	ab0f      	add	r3, sp, #60	; 0x3c
 801369a:	ee17 4a90 	vmov	r4, s15
 801369e:	eeb0 0a68 	vmov.f32	s0, s17
 80136a2:	4628      	mov	r0, r5
 80136a4:	aa10      	add	r2, sp, #64	; 0x40
 80136a6:	a946      	add	r1, sp, #280	; 0x118
 80136a8:	f8cb 4478 	str.w	r4, [fp, #1144]	; 0x478
 80136ac:	f7fd f974 	bl	8010998 <getMagStats.constprop.26>
 80136b0:	f89b 4500 	ldrb.w	r4, [fp, #1280]	; 0x500
 80136b4:	ed5f 6a3f 	vldr	s13, [pc, #-252]	; 80135bc <MEMS_runMagCal.constprop.14+0x1dcc>
 80136b8:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 80136bc:	005b      	lsls	r3, r3, #1
 80136be:	ee07 3a90 	vmov	s15, r3
 80136c2:	ee07 0a10 	vmov	s14, r0
 80136c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80136ca:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80136ce:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80136d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80136d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136da:	f300 82cb 	bgt.w	8013c74 <MEMS_runMagCal.constprop.14+0x2484>
 80136de:	ed9d 7a0f 	vldr	s14, [sp, #60]	; 0x3c
 80136e2:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80136e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80136ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136ee:	f340 82be 	ble.w	8013c6e <MEMS_runMagCal.constprop.14+0x247e>
 80136f2:	f89b 84b4 	ldrb.w	r8, [fp, #1204]	; 0x4b4
 80136f6:	fab8 f888 	clz	r8, r8
 80136fa:	ea4f 1858 	mov.w	r8, r8, lsr #5
 80136fe:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 8013702:	f8db 7478 	ldr.w	r7, [fp, #1144]	; 0x478
 8013706:	9729      	str	r7, [sp, #164]	; 0xa4
 8013708:	ee69 7a27 	vmul.f32	s15, s18, s15
 801370c:	eec7 7aa9 	vdiv.f32	s15, s15, s19
 8013710:	ee17 0a90 	vmov	r0, s15
 8013714:	f007 fee0 	bl	801b4d8 <roundf>
 8013718:	ee07 0a90 	vmov	s15, r0
 801371c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013720:	ee17 3a90 	vmov	r3, s15
 8013724:	ee69 7a08 	vmul.f32	s15, s18, s16
 8013728:	f88d 30a8 	strb.w	r3, [sp, #168]	; 0xa8
 801372c:	ee17 0a90 	vmov	r0, s15
 8013730:	f007 fed2 	bl	801b4d8 <roundf>
 8013734:	ee07 0a90 	vmov	s15, r0
 8013738:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801373c:	ed1f 7a60 	vldr	s14, [pc, #-384]	; 80135c0 <MEMS_runMagCal.constprop.14+0x1dd0>
 8013740:	ee17 0a90 	vmov	r0, s15
 8013744:	f10d 02ae 	add.w	r2, sp, #174	; 0xae
 8013748:	f88d 00a9 	strb.w	r0, [sp, #169]	; 0xa9
 801374c:	2300      	movs	r3, #0
 801374e:	a946      	add	r1, sp, #280	; 0x118
 8013750:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 8013754:	edd1 7a00 	vldr	s15, [r1]
 8013758:	f835 1013 	ldrh.w	r1, [r5, r3, lsl #1]
 801375c:	f822 1c04 	strh.w	r1, [r2, #-4]
 8013760:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013764:	3301      	adds	r3, #1
 8013766:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801376a:	2b03      	cmp	r3, #3
 801376c:	ee17 1a90 	vmov	r1, s15
 8013770:	f822 1f02 	strh.w	r1, [r2, #2]!
 8013774:	d1eb      	bne.n	801374e <MEMS_runMagCal.constprop.14+0x1f5e>
 8013776:	9b04      	ldr	r3, [sp, #16]
 8013778:	b113      	cbz	r3, 8013780 <MEMS_runMagCal.constprop.14+0x1f90>
 801377a:	23ff      	movs	r3, #255	; 0xff
 801377c:	f88d 30a8 	strb.w	r3, [sp, #168]	; 0xa8
 8013780:	2600      	movs	r6, #0
 8013782:	f88b 6474 	strb.w	r6, [fp, #1140]	; 0x474
 8013786:	f1b8 0f00 	cmp.w	r8, #0
 801378a:	f43e aac8 	beq.w	8011d1e <MEMS_runMagCal.constprop.14+0x52e>
 801378e:	f89b 34b4 	ldrb.w	r3, [fp, #1204]	; 0x4b4
 8013792:	f88b 6475 	strb.w	r6, [fp, #1141]	; 0x475
 8013796:	2b00      	cmp	r3, #0
 8013798:	f040 80f0 	bne.w	801397c <MEMS_runMagCal.constprop.14+0x218c>
 801379c:	4d72      	ldr	r5, [pc, #456]	; (8013968 <MEMS_runMagCal.constprop.14+0x2178>)
 801379e:	f10d 0938 	add.w	r9, sp, #56	; 0x38
 80137a2:	f10d 06aa 	add.w	r6, sp, #170	; 0xaa
 80137a6:	f10d 08a4 	add.w	r8, sp, #164	; 0xa4
 80137aa:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 80137ae:	f8df e1c4 	ldr.w	lr, [pc, #452]	; 8013974 <MEMS_runMagCal.constprop.14+0x2184>
 80137b2:	f8cb 747c 	str.w	r7, [fp, #1148]	; 0x47c
 80137b6:	ed1e 0a15 	vldr	s0, [lr, #-84]	; 0xffffffac
 80137ba:	f8bd a0b0 	ldrh.w	sl, [sp, #176]	; 0xb0
 80137be:	f8bd c0b2 	ldrh.w	ip, [sp, #178]	; 0xb2
 80137c2:	eddf 7a6d 	vldr	s15, [pc, #436]	; 8013978 <MEMS_runMagCal.constprop.14+0x2188>
 80137c6:	f8d8 8000 	ldr.w	r8, [r8]
 80137ca:	f1ae 0758 	sub.w	r7, lr, #88	; 0x58
 80137ce:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80137d2:	f9bd 30aa 	ldrsh.w	r3, [sp, #170]	; 0xaa
 80137d6:	f8bd 20b4 	ldrh.w	r2, [sp, #180]	; 0xb4
 80137da:	f8ce 8000 	str.w	r8, [lr]
 80137de:	ee03 3a90 	vmov	s7, r3
 80137e2:	f9bd 30ac 	ldrsh.w	r3, [sp, #172]	; 0xac
 80137e6:	f89b 0485 	ldrb.w	r0, [fp, #1157]	; 0x485
 80137ea:	ee04 3a10 	vmov	s8, r3
 80137ee:	f9bd 30ae 	ldrsh.w	r3, [sp, #174]	; 0xae
 80137f2:	ee04 3a90 	vmov	s9, r3
 80137f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80137fa:	fb03 f10a 	mul.w	r1, r3, sl
 80137fe:	ee05 1a10 	vmov	s10, r1
 8013802:	fb03 f10c 	mul.w	r1, r3, ip
 8013806:	fb03 f302 	mul.w	r3, r3, r2
 801380a:	ee05 1a90 	vmov	s11, r1
 801380e:	ee06 3a10 	vmov	s12, r3
 8013812:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8013816:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 801381a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 801381e:	ee25 5a27 	vmul.f32	s10, s10, s15
 8013822:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8013826:	ee26 6a27 	vmul.f32	s12, s12, s15
 801382a:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 801382e:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 8013832:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8013836:	2301      	movs	r3, #1
 8013838:	2100      	movs	r1, #0
 801383a:	22ff      	movs	r2, #255	; 0xff
 801383c:	ed87 5a1f 	vstr	s10, [r7, #124]	; 0x7c
 8013840:	edc7 5a23 	vstr	s11, [r7, #140]	; 0x8c
 8013844:	ed87 6a27 	vstr	s12, [r7, #156]	; 0x9c
 8013848:	edc7 3a1c 	vstr	s7, [r7, #112]	; 0x70
 801384c:	ed87 4a1d 	vstr	s8, [r7, #116]	; 0x74
 8013850:	edc7 4a1e 	vstr	s9, [r7, #120]	; 0x78
 8013854:	f88b 34b4 	strb.w	r3, [fp, #1204]	; 0x4b4
 8013858:	f88b 34cd 	strb.w	r3, [fp, #1229]	; 0x4cd
 801385c:	f88b 1484 	strb.w	r1, [fp, #1156]	; 0x484
 8013860:	f88b 2486 	strb.w	r2, [fp, #1158]	; 0x486
 8013864:	2c00      	cmp	r4, #0
 8013866:	d04e      	beq.n	8013906 <MEMS_runMagCal.constprop.14+0x2116>
 8013868:	ed9f 3a40 	vldr	s6, [pc, #256]	; 801396c <MEMS_runMagCal.constprop.14+0x217c>
 801386c:	f89b 7501 	ldrb.w	r7, [fp, #1281]	; 0x501
 8013870:	ee20 3a03 	vmul.f32	s6, s0, s6
 8013874:	f04f 32ff 	mov.w	r2, #4294967295
 8013878:	468c      	mov	ip, r1
 801387a:	fb9c f3f7 	sdiv	r3, ip, r7
 801387e:	fb07 c313 	mls	r3, r7, r3, ip
 8013882:	b2db      	uxtb	r3, r3
 8013884:	3315      	adds	r3, #21
 8013886:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 801388a:	f102 0c01 	add.w	ip, r2, #1
 801388e:	f9b3 247c 	ldrsh.w	r2, [r3, #1148]	; 0x47c
 8013892:	ee07 2a90 	vmov	s15, r2
 8013896:	f9b3 247a 	ldrsh.w	r2, [r3, #1146]	; 0x47a
 801389a:	f9b3 347e 	ldrsh.w	r3, [r3, #1150]	; 0x47e
 801389e:	ee06 2a90 	vmov	s13, r2
 80138a2:	fb9c f2f0 	sdiv	r2, ip, r0
 80138a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80138aa:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80138ae:	ee77 7ac4 	vsub.f32	s15, s15, s8
 80138b2:	ee07 3a10 	vmov	s14, r3
 80138b6:	ee76 6ae3 	vsub.f32	s13, s13, s7
 80138ba:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80138be:	ee66 6a85 	vmul.f32	s13, s13, s10
 80138c2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80138c6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80138ca:	eee6 7aa6 	vfma.f32	s15, s13, s13
 80138ce:	fb00 c212 	mls	r2, r0, r2, ip
 80138d2:	b252      	sxtb	r2, r2
 80138d4:	ee37 7a64 	vsub.f32	s14, s14, s9
 80138d8:	3101      	adds	r1, #1
 80138da:	ee27 7a06 	vmul.f32	s14, s14, s12
 80138de:	b209      	sxth	r1, r1
 80138e0:	eee7 7a07 	vfma.f32	s15, s14, s14
 80138e4:	eb0b 0342 	add.w	r3, fp, r2, lsl #1
 80138e8:	42a1      	cmp	r1, r4
 80138ea:	468c      	mov	ip, r1
 80138ec:	eeb1 7ae7 	vsqrt.f32	s14, s15
 80138f0:	ee67 7a03 	vmul.f32	s15, s14, s6
 80138f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80138f8:	ee17 ea90 	vmov	lr, s15
 80138fc:	f8a3 e488 	strh.w	lr, [r3, #1160]	; 0x488
 8013900:	dbbb      	blt.n	801387a <MEMS_runMagCal.constprop.14+0x208a>
 8013902:	f88b 2486 	strb.w	r2, [fp, #1158]	; 0x486
 8013906:	4284      	cmp	r4, r0
 8013908:	bf28      	it	cs
 801390a:	4604      	movcs	r4, r0
 801390c:	4629      	mov	r1, r5
 801390e:	4630      	mov	r0, r6
 8013910:	464b      	mov	r3, r9
 8013912:	aa0d      	add	r2, sp, #52	; 0x34
 8013914:	f88b 4484 	strb.w	r4, [fp, #1156]	; 0x484
 8013918:	f7fd f83e 	bl	8010998 <getMagStats.constprop.26>
 801391c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8013970 <MEMS_runMagCal.constprop.14+0x2180>
 8013920:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 8013924:	edd9 6a00 	vldr	s13, [r9]
 8013928:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801392c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8013930:	eef0 7ae7 	vabs.f32	s15, s15
 8013934:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801393c:	f140 8175 	bpl.w	8013c2a <MEMS_runMagCal.constprop.14+0x243a>
 8013940:	eef4 6ac7 	vcmpe.f32	s13, s14
 8013944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013948:	f140 816f 	bpl.w	8013c2a <MEMS_runMagCal.constprop.14+0x243a>
 801394c:	2303      	movs	r3, #3
 801394e:	f89d 20a8 	ldrb.w	r2, [sp, #168]	; 0xa8
 8013952:	f88b 34cc 	strb.w	r3, [fp, #1228]	; 0x4cc
 8013956:	2ac8      	cmp	r2, #200	; 0xc8
 8013958:	f67e a9e1 	bls.w	8011d1e <MEMS_runMagCal.constprop.14+0x52e>
 801395c:	2302      	movs	r3, #2
 801395e:	f88b 34cc 	strb.w	r3, [fp, #1228]	; 0x4cc
 8013962:	f7fe b9dc 	b.w	8011d1e <MEMS_runMagCal.constprop.14+0x52e>
 8013966:	bf00      	nop
 8013968:	200018a4 	.word	0x200018a4
 801396c:	42c80000 	.word	0x42c80000
 8013970:	423c0000 	.word	0x423c0000
 8013974:	20001880 	.word	0x20001880
 8013978:	358637bd 	.word	0x358637bd
 801397c:	f8bd 00b4 	ldrh.w	r0, [sp, #180]	; 0xb4
 8013980:	f8bd 10b0 	ldrh.w	r1, [sp, #176]	; 0xb0
 8013984:	f8bd 20b2 	ldrh.w	r2, [sp, #178]	; 0xb2
 8013988:	ed1f 6a05 	vldr	s12, [pc, #-20]	; 8013978 <MEMS_runMagCal.constprop.14+0x2188>
 801398c:	4dd2      	ldr	r5, [pc, #840]	; (8013cd8 <MEMS_runMagCal.constprop.14+0x24e8>)
 801398e:	9647      	str	r6, [sp, #284]	; 0x11c
 8013990:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8013994:	fb03 f101 	mul.w	r1, r3, r1
 8013998:	fb03 f202 	mul.w	r2, r3, r2
 801399c:	fb03 f300 	mul.w	r3, r3, r0
 80139a0:	ee06 1a90 	vmov	s13, r1
 80139a4:	ee07 2a10 	vmov	s14, r2
 80139a8:	ee07 3a90 	vmov	s15, r3
 80139ac:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80139b0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80139b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80139b8:	ee66 6a86 	vmul.f32	s13, s13, s12
 80139bc:	ee27 7a06 	vmul.f32	s14, s14, s12
 80139c0:	ee67 7a86 	vmul.f32	s15, s15, s12
 80139c4:	ed15 0a1e 	vldr	s0, [r5, #-120]	; 0xffffff88
 80139c8:	9648      	str	r6, [sp, #288]	; 0x120
 80139ca:	4629      	mov	r1, r5
 80139cc:	ab36      	add	r3, sp, #216	; 0xd8
 80139ce:	aa0d      	add	r2, sp, #52	; 0x34
 80139d0:	9649      	str	r6, [sp, #292]	; 0x124
 80139d2:	964b      	str	r6, [sp, #300]	; 0x12c
 80139d4:	964c      	str	r6, [sp, #304]	; 0x130
 80139d6:	964d      	str	r6, [sp, #308]	; 0x134
 80139d8:	f10d 0938 	add.w	r9, sp, #56	; 0x38
 80139dc:	f1a5 001e 	sub.w	r0, r5, #30
 80139e0:	f10d 06aa 	add.w	r6, sp, #170	; 0xaa
 80139e4:	edcd 6a46 	vstr	s13, [sp, #280]	; 0x118
 80139e8:	ed8d 7a4a 	vstr	s14, [sp, #296]	; 0x128
 80139ec:	edcd 7a4e 	vstr	s15, [sp, #312]	; 0x138
 80139f0:	f7fc ffd2 	bl	8010998 <getMagStats.constprop.26>
 80139f4:	a946      	add	r1, sp, #280	; 0x118
 80139f6:	464b      	mov	r3, r9
 80139f8:	4630      	mov	r0, r6
 80139fa:	aa0d      	add	r2, sp, #52	; 0x34
 80139fc:	ed15 0a1e 	vldr	s0, [r5, #-120]	; 0xffffff88
 8013a00:	f7fc ffca 	bl	8010998 <getMagStats.constprop.26>
 8013a04:	eddf 6ab5 	vldr	s13, [pc, #724]	; 8013cdc <MEMS_runMagCal.constprop.14+0x24ec>
 8013a08:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 8013a0c:	ed99 7a00 	vldr	s14, [r9]
 8013a10:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013a14:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8013a18:	eef0 7ae7 	vabs.f32	s15, s15
 8013a1c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8013a20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a24:	f140 8110 	bpl.w	8013c48 <MEMS_runMagCal.constprop.14+0x2458>
 8013a28:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8013a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a30:	f140 810a 	bpl.w	8013c48 <MEMS_runMagCal.constprop.14+0x2458>
 8013a34:	2303      	movs	r3, #3
 8013a36:	eddd 6a36 	vldr	s13, [sp, #216]	; 0xd8
 8013a3a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8013a3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013a42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a4a:	f57e a968 	bpl.w	8011d1e <MEMS_runMagCal.constprop.14+0x52e>
 8013a4e:	f89b 24cc 	ldrb.w	r2, [fp, #1228]	; 0x4cc
 8013a52:	429a      	cmp	r2, r3
 8013a54:	f63e a963 	bhi.w	8011d1e <MEMS_runMagCal.constprop.14+0x52e>
 8013a58:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8013a5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013a60:	eef4 6ae7 	vcmpe.f32	s13, s15
 8013a64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a68:	d40e      	bmi.n	8013a88 <MEMS_runMagCal.constprop.14+0x2298>
 8013a6a:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 8013a6e:	eef4 6ae7 	vcmpe.f32	s13, s15
 8013a72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a76:	f140 80d4 	bpl.w	8013c22 <MEMS_runMagCal.constprop.14+0x2432>
 8013a7a:	f89b 24bc 	ldrb.w	r2, [fp, #1212]	; 0x4bc
 8013a7e:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 8013a82:	429a      	cmp	r2, r3
 8013a84:	f080 80cd 	bcs.w	8013c22 <MEMS_runMagCal.constprop.14+0x2432>
 8013a88:	4b95      	ldr	r3, [pc, #596]	; (8013ce0 <MEMS_runMagCal.constprop.14+0x24f0>)
 8013a8a:	f9bb 14c0 	ldrsh.w	r1, [fp, #1216]	; 0x4c0
 8013a8e:	f9bd 70ac 	ldrsh.w	r7, [sp, #172]	; 0xac
 8013a92:	f9bb 04be 	ldrsh.w	r0, [fp, #1214]	; 0x4be
 8013a96:	f9bd e0aa 	ldrsh.w	lr, [sp, #170]	; 0xaa
 8013a9a:	edd3 5a01 	vldr	s11, [r3, #4]
 8013a9e:	f9bb 24c2 	ldrsh.w	r2, [fp, #1218]	; 0x4c2
 8013aa2:	f9bd 40ae 	ldrsh.w	r4, [sp, #174]	; 0xae
 8013aa6:	1bcb      	subs	r3, r1, r7
 8013aa8:	eba0 0c0e 	sub.w	ip, r0, lr
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	bfb8      	it	lt
 8013ab0:	425b      	neglt	r3, r3
 8013ab2:	f1bc 0f00 	cmp.w	ip, #0
 8013ab6:	bfb8      	it	lt
 8013ab8:	f1cc 0c00 	rsblt	ip, ip, #0
 8013abc:	4563      	cmp	r3, ip
 8013abe:	bfb8      	it	lt
 8013ac0:	4663      	movlt	r3, ip
 8013ac2:	eba2 0c04 	sub.w	ip, r2, r4
 8013ac6:	f1bc 0f00 	cmp.w	ip, #0
 8013aca:	b21b      	sxth	r3, r3
 8013acc:	bfb8      	it	lt
 8013ace:	f1cc 0c00 	rsblt	ip, ip, #0
 8013ad2:	4563      	cmp	r3, ip
 8013ad4:	bfb8      	it	lt
 8013ad6:	4663      	movlt	r3, ip
 8013ad8:	b21b      	sxth	r3, r3
 8013ada:	ee07 3a90 	vmov	s15, r3
 8013ade:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013ae2:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 8013ae6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8013aea:	eef4 7ac6 	vcmpe.f32	s15, s12
 8013aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013af2:	f140 8096 	bpl.w	8013c22 <MEMS_runMagCal.constprop.14+0x2432>
 8013af6:	ee37 7a26 	vadd.f32	s14, s14, s13
 8013afa:	f8bb 34c4 	ldrh.w	r3, [fp, #1220]	; 0x4c4
 8013afe:	eec6 3a87 	vdiv.f32	s7, s13, s14
 8013b02:	ee04 3a90 	vmov	s9, r3
 8013b06:	f8bb 34c6 	ldrh.w	r3, [fp, #1222]	; 0x4c6
 8013b0a:	ee05 3a10 	vmov	s10, r3
 8013b0e:	f8bb 34c8 	ldrh.w	r3, [fp, #1224]	; 0x4c8
 8013b12:	ee07 0a90 	vmov	s15, r0
 8013b16:	ee05 3a90 	vmov	s11, r3
 8013b1a:	f89b 34bc 	ldrb.w	r3, [fp, #1212]	; 0x4bc
 8013b1e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8013b22:	ee36 4a63 	vsub.f32	s8, s12, s7
 8013b26:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8013b2a:	ee06 3a10 	vmov	s12, r3
 8013b2e:	ee03 ea10 	vmov	s6, lr
 8013b32:	f8bd 30b0 	ldrh.w	r3, [sp, #176]	; 0xb0
 8013b36:	ee07 1a90 	vmov	s15, r1
 8013b3a:	ee00 3a90 	vmov	s1, r3
 8013b3e:	ee66 6a84 	vmul.f32	s13, s13, s8
 8013b42:	eeb8 2ac3 	vcvt.f32.s32	s4, s6
 8013b46:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8013b4a:	f8bd 30b2 	ldrh.w	r3, [sp, #178]	; 0xb2
 8013b4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013b52:	ee64 4a84 	vmul.f32	s9, s9, s8
 8013b56:	ee03 7a10 	vmov	s6, r7
 8013b5a:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8013b5e:	eee3 6a82 	vfma.f32	s13, s7, s4
 8013b62:	ee07 2a90 	vmov	s15, r2
 8013b66:	ee01 3a10 	vmov	s2, r3
 8013b6a:	ee27 7a04 	vmul.f32	s14, s14, s8
 8013b6e:	f8bd 30b4 	ldrh.w	r3, [sp, #180]	; 0xb4
 8013b72:	eef8 2ac3 	vcvt.f32.s32	s5, s6
 8013b76:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8013b7a:	eee3 4aa0 	vfma.f32	s9, s7, s1
 8013b7e:	ee01 3a90 	vmov	s3, r3
 8013b82:	ee25 5a04 	vmul.f32	s10, s10, s8
 8013b86:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 8013b8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013b8e:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8013b92:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8013b96:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8013b9a:	ee03 4a10 	vmov	s6, r4
 8013b9e:	eea3 7aa2 	vfma.f32	s14, s7, s5
 8013ba2:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8013ba6:	ee67 7a84 	vmul.f32	s15, s15, s8
 8013baa:	ee65 5a84 	vmul.f32	s11, s11, s8
 8013bae:	ee26 6a04 	vmul.f32	s12, s12, s8
 8013bb2:	ee16 2a90 	vmov	r2, s13
 8013bb6:	ee04 3a10 	vmov	s8, r3
 8013bba:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8013bbe:	eea3 5a81 	vfma.f32	s10, s7, s2
 8013bc2:	f8ad 20aa 	strh.w	r2, [sp, #170]	; 0xaa
 8013bc6:	eefc 4ae4 	vcvt.u32.f32	s9, s9
 8013bca:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8013bce:	ee14 2a90 	vmov	r2, s9
 8013bd2:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 8013bd6:	eee3 7a83 	vfma.f32	s15, s7, s6
 8013bda:	f8ad 20b0 	strh.w	r2, [sp, #176]	; 0xb0
 8013bde:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8013be2:	eee3 5aa1 	vfma.f32	s11, s7, s3
 8013be6:	ee17 2a10 	vmov	r2, s14
 8013bea:	eea3 6a84 	vfma.f32	s12, s7, s8
 8013bee:	f8ad 20ac 	strh.w	r2, [sp, #172]	; 0xac
 8013bf2:	eebc 5ac5 	vcvt.u32.f32	s10, s10
 8013bf6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013bfa:	ee15 2a10 	vmov	r2, s10
 8013bfe:	eefc 5ae5 	vcvt.u32.f32	s11, s11
 8013c02:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 8013c06:	f8ad 20b2 	strh.w	r2, [sp, #178]	; 0xb2
 8013c0a:	ee17 2a90 	vmov	r2, s15
 8013c0e:	ee16 3a10 	vmov	r3, s12
 8013c12:	f8ad 20ae 	strh.w	r2, [sp, #174]	; 0xae
 8013c16:	ee15 2a90 	vmov	r2, s11
 8013c1a:	f88d 30a8 	strb.w	r3, [sp, #168]	; 0xa8
 8013c1e:	f8ad 20b4 	strh.w	r2, [sp, #180]	; 0xb4
 8013c22:	9f29      	ldr	r7, [sp, #164]	; 0xa4
 8013c24:	f89b 4500 	ldrb.w	r4, [fp, #1280]	; 0x500
 8013c28:	e5bd      	b.n	80137a6 <MEMS_runMagCal.constprop.14+0x1fb6>
 8013c2a:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8013c2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c36:	d516      	bpl.n	8013c66 <MEMS_runMagCal.constprop.14+0x2476>
 8013c38:	eef4 6ac7 	vcmpe.f32	s13, s14
 8013c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c40:	bf4c      	ite	mi
 8013c42:	2302      	movmi	r3, #2
 8013c44:	2301      	movpl	r3, #1
 8013c46:	e682      	b.n	801394e <MEMS_runMagCal.constprop.14+0x215e>
 8013c48:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8013c4c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8013c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c54:	d509      	bpl.n	8013c6a <MEMS_runMagCal.constprop.14+0x247a>
 8013c56:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8013c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c5e:	bf4c      	ite	mi
 8013c60:	2302      	movmi	r3, #2
 8013c62:	2301      	movpl	r3, #1
 8013c64:	e6e7      	b.n	8013a36 <MEMS_runMagCal.constprop.14+0x2246>
 8013c66:	2301      	movs	r3, #1
 8013c68:	e671      	b.n	801394e <MEMS_runMagCal.constprop.14+0x215e>
 8013c6a:	2301      	movs	r3, #1
 8013c6c:	e6e3      	b.n	8013a36 <MEMS_runMagCal.constprop.14+0x2246>
 8013c6e:	f04f 0801 	mov.w	r8, #1
 8013c72:	e544      	b.n	80136fe <MEMS_runMagCal.constprop.14+0x1f0e>
 8013c74:	f04f 0800 	mov.w	r8, #0
 8013c78:	e541      	b.n	80136fe <MEMS_runMagCal.constprop.14+0x1f0e>
 8013c7a:	fb93 f1f4 	sdiv	r1, r3, r4
 8013c7e:	fb04 3311 	mls	r3, r4, r1, r3
 8013c82:	b219      	sxth	r1, r3
 8013c84:	f7ff bb4c 	b.w	8013320 <MEMS_runMagCal.constprop.14+0x1b30>
 8013c88:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013c8c:	f7ff bafe 	b.w	801328c <MEMS_runMagCal.constprop.14+0x1a9c>
 8013c90:	3214      	adds	r2, #20
 8013c92:	1e59      	subs	r1, r3, #1
 8013c94:	2b00      	cmp	r3, #0
 8013c96:	f47f abc6 	bne.w	8013426 <MEMS_runMagCal.constprop.14+0x1c36>
 8013c9a:	2240      	movs	r2, #64	; 0x40
 8013c9c:	2100      	movs	r1, #0
 8013c9e:	a846      	add	r0, sp, #280	; 0x118
 8013ca0:	f006 fbb1 	bl	801a406 <memset>
 8013ca4:	a946      	add	r1, sp, #280	; 0x118
 8013ca6:	2200      	movs	r2, #0
 8013ca8:	f04f 0e14 	mov.w	lr, #20
 8013cac:	ac36      	add	r4, sp, #216	; 0xd8
 8013cae:	b256      	sxtb	r6, r2
 8013cb0:	2000      	movs	r0, #0
 8013cb2:	eb01 0986 	add.w	r9, r1, r6, lsl #2
 8013cb6:	4603      	mov	r3, r0
 8013cb8:	eb04 1802 	add.w	r8, r4, r2, lsl #4
 8013cbc:	fb0e 4c02 	mla	ip, lr, r2, r4
 8013cc0:	ac46      	add	r4, sp, #280	; 0x118
 8013cc2:	eb04 1503 	add.w	r5, r4, r3, lsl #4
 8013cc6:	b2c4      	uxtb	r4, r0
 8013cc8:	462f      	mov	r7, r5
 8013cca:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8013cce:	468a      	mov	sl, r1
 8013cd0:	eddf 7a05 	vldr	s15, [pc, #20]	; 8013ce8 <MEMS_runMagCal.constprop.14+0x24f8>
 8013cd4:	e014      	b.n	8013d00 <MEMS_runMagCal.constprop.14+0x2510>
 8013cd6:	bf00      	nop
 8013cd8:	200018a4 	.word	0x200018a4
 8013cdc:	423c0000 	.word	0x423c0000
 8013ce0:	20001828 	.word	0x20001828
 8013ce4:	3dcccccd 	.word	0x3dcccccd
 8013ce8:	00000000 	.word	0x00000000
 8013cec:	3e99999a 	.word	0x3e99999a
 8013cf0:	3f666666 	.word	0x3f666666
 8013cf4:	ecfa 6a01 	vldmia	sl!, {s13}
 8013cf8:	ecb7 7a01 	vldmia	r7!, {s14}
 8013cfc:	eee6 7a87 	vfma.f32	s15, s13, s14
 8013d00:	45a2      	cmp	sl, r4
 8013d02:	d1f7      	bne.n	8013cf4 <MEMS_runMagCal.constprop.14+0x2504>
 8013d04:	429e      	cmp	r6, r3
 8013d06:	f000 80b5 	beq.w	8013e74 <MEMS_runMagCal.constprop.14+0x2684>
 8013d0a:	009b      	lsls	r3, r3, #2
 8013d0c:	441d      	add	r5, r3
 8013d0e:	edd5 6a00 	vldr	s13, [r5]
 8013d12:	eeb0 7ae6 	vabs.f32	s14, s13
 8013d16:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8013d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d1e:	f53f ab90 	bmi.w	8013442 <MEMS_runMagCal.constprop.14+0x1c52>
 8013d22:	eb08 0403 	add.w	r4, r8, r3
 8013d26:	ed94 7a00 	vldr	s14, [r4]
 8013d2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013d2e:	440b      	add	r3, r1
 8013d30:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8013d34:	ed83 7a00 	vstr	s14, [r3]
 8013d38:	3001      	adds	r0, #1
 8013d3a:	b243      	sxtb	r3, r0
 8013d3c:	42b3      	cmp	r3, r6
 8013d3e:	ddbf      	ble.n	8013cc0 <MEMS_runMagCal.constprop.14+0x24d0>
 8013d40:	3201      	adds	r2, #1
 8013d42:	2a04      	cmp	r2, #4
 8013d44:	f101 0110 	add.w	r1, r1, #16
 8013d48:	d1b0      	bne.n	8013cac <MEMS_runMagCal.constprop.14+0x24bc>
 8013d4a:	aa21      	add	r2, sp, #132	; 0x84
 8013d4c:	a91d      	add	r1, sp, #116	; 0x74
 8013d4e:	a846      	add	r0, sp, #280	; 0x118
 8013d50:	f7fc fa1c 	bl	801018c <llEvaluate.constprop.23>
 8013d54:	ed5f 9a1d 	vldr	s19, [pc, #-116]	; 8013ce4 <MEMS_runMagCal.constprop.14+0x24f4>
 8013d58:	ad21      	add	r5, sp, #132	; 0x84
 8013d5a:	ae25      	add	r6, sp, #148	; 0x94
 8013d5c:	f10d 0890 	add.w	r8, sp, #144	; 0x90
 8013d60:	2400      	movs	r4, #0
 8013d62:	f04f 577e 	mov.w	r7, #1065353216	; 0x3f800000
 8013d66:	e9cd 4421 	strd	r4, r4, [sp, #132]	; 0x84
 8013d6a:	e9cd 4423 	strd	r4, r4, [sp, #140]	; 0x8c
 8013d6e:	aa21      	add	r2, sp, #132	; 0x84
 8013d70:	a925      	add	r1, sp, #148	; 0x94
 8013d72:	a846      	add	r0, sp, #280	; 0x118
 8013d74:	f845 7b04 	str.w	r7, [r5], #4
 8013d78:	f7fc fa08 	bl	801018c <llEvaluate.constprop.23>
 8013d7c:	ecb6 7a01 	vldmia	r6!, {s14}
 8013d80:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8013d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d88:	f340 8083 	ble.w	8013e92 <MEMS_runMagCal.constprop.14+0x26a2>
 8013d8c:	eef1 7ac7 	vsqrt.f32	s15, s14
 8013d90:	eef4 9ae7 	vcmpe.f32	s19, s15
 8013d94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d98:	bfb8      	it	lt
 8013d9a:	eef0 9a67 	vmovlt.f32	s19, s15
 8013d9e:	45a8      	cmp	r8, r5
 8013da0:	d1e1      	bne.n	8013d66 <MEMS_runMagCal.constprop.14+0x2576>
 8013da2:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8013da6:	eddd 6a20 	vldr	s13, [sp, #128]	; 0x80
 8013daa:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8013dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013db2:	eef4 6ae7 	vcmpe.f32	s13, s15
 8013db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013dba:	d501      	bpl.n	8013dc0 <MEMS_runMagCal.constprop.14+0x25d0>
 8013dbc:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8013dc0:	ed9d 4a1d 	vldr	s8, [sp, #116]	; 0x74
 8013dc4:	ed9d 5a1e 	vldr	s10, [sp, #120]	; 0x78
 8013dc8:	ed1f 2a39 	vldr	s4, [pc, #-228]	; 8013ce8 <MEMS_runMagCal.constprop.14+0x24f8>
 8013dcc:	ed9d 6a1f 	vldr	s12, [sp, #124]	; 0x7c
 8013dd0:	eddd 5a30 	vldr	s11, [sp, #192]	; 0xc0
 8013dd4:	eddd 3a2e 	vldr	s7, [sp, #184]	; 0xb8
 8013dd8:	eddd 4a2f 	vldr	s9, [sp, #188]	; 0xbc
 8013ddc:	eddd 6a20 	vldr	s13, [sp, #128]	; 0x80
 8013de0:	ed9d 3a31 	vldr	s6, [sp, #196]	; 0xc4
 8013de4:	ed5f 2a3f 	vldr	s5, [pc, #-252]	; 8013cec <MEMS_runMagCal.constprop.14+0x24fc>
 8013de8:	eeb0 7ac4 	vabs.f32	s14, s8
 8013dec:	eef0 7ac5 	vabs.f32	s15, s10
 8013df0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013df8:	bfa8      	it	ge
 8013dfa:	eef0 7a47 	vmovge.f32	s15, s14
 8013dfe:	eef4 7ac2 	vcmpe.f32	s15, s4
 8013e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e06:	eeb0 7ac6 	vabs.f32	s14, s12
 8013e0a:	bfb8      	it	lt
 8013e0c:	eef0 7a42 	vmovlt.f32	s15, s4
 8013e10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013e14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e18:	bfa8      	it	ge
 8013e1a:	eef0 7a47 	vmovge.f32	s15, s14
 8013e1e:	ee35 6a86 	vadd.f32	s12, s11, s12
 8013e22:	ee33 4a84 	vadd.f32	s8, s7, s8
 8013e26:	ee34 5a85 	vadd.f32	s10, s9, s10
 8013e2a:	ee73 5a26 	vadd.f32	s11, s6, s13
 8013e2e:	eef4 7ae2 	vcmpe.f32	s15, s5
 8013e32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e36:	ed8d 4a2e 	vstr	s8, [sp, #184]	; 0xb8
 8013e3a:	ed8d 5a2f 	vstr	s10, [sp, #188]	; 0xbc
 8013e3e:	ed8d 6a30 	vstr	s12, [sp, #192]	; 0xc0
 8013e42:	edcd 5a31 	vstr	s11, [sp, #196]	; 0xc4
 8013e46:	eeb0 7ae6 	vabs.f32	s14, s13
 8013e4a:	d50a      	bpl.n	8013e62 <MEMS_runMagCal.constprop.14+0x2672>
 8013e4c:	ed5f 6a58 	vldr	s13, [pc, #-352]	; 8013cf0 <MEMS_runMagCal.constprop.14+0x2500>
 8013e50:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8013e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e58:	d503      	bpl.n	8013e62 <MEMS_runMagCal.constprop.14+0x2672>
 8013e5a:	9b00      	ldr	r3, [sp, #0]
 8013e5c:	2b01      	cmp	r3, #1
 8013e5e:	f63f aaf6 	bhi.w	801344e <MEMS_runMagCal.constprop.14+0x1c5e>
 8013e62:	9b00      	ldr	r3, [sp, #0]
 8013e64:	3301      	adds	r3, #1
 8013e66:	b2db      	uxtb	r3, r3
 8013e68:	2b05      	cmp	r3, #5
 8013e6a:	9300      	str	r3, [sp, #0]
 8013e6c:	f47f aa26 	bne.w	80132bc <MEMS_runMagCal.constprop.14+0x1acc>
 8013e70:	f7ff baed 	b.w	801344e <MEMS_runMagCal.constprop.14+0x1c5e>
 8013e74:	ed9c 7a00 	vldr	s14, [ip]
 8013e78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013e7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e80:	f57f aadf 	bpl.w	8013442 <MEMS_runMagCal.constprop.14+0x1c52>
 8013e84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013e88:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8013e8c:	ed89 7a00 	vstr	s14, [r9]
 8013e90:	e752      	b.n	8013d38 <MEMS_runMagCal.constprop.14+0x2548>
 8013e92:	eef2 9a04 	vmov.f32	s19, #36	; 0x41200000  10.0
 8013e96:	e782      	b.n	8013d9e <MEMS_runMagCal.constprop.14+0x25ae>

08013e98 <m_kalman_3gyro.isra.6.constprop.36>:
 8013e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e9c:	ed2d 8b10 	vpush	{d8-d15}
 8013ea0:	4ccb      	ldr	r4, [pc, #812]	; (80141d0 <m_kalman_3gyro.isra.6.constprop.36+0x338>)
 8013ea2:	f2ad 6d34 	subw	sp, sp, #1588	; 0x634
 8013ea6:	468e      	mov	lr, r1
 8013ea8:	4690      	mov	r8, r2
 8013eaa:	9001      	str	r0, [sp, #4]
 8013eac:	9127      	str	r1, [sp, #156]	; 0x9c
 8013eae:	920b      	str	r2, [sp, #44]	; 0x2c
 8013eb0:	9308      	str	r3, [sp, #32]
 8013eb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013eb4:	aeb6      	add	r6, sp, #728	; 0x2d8
 8013eb6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8013eb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013eba:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8013ebc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013ebe:	f89d 56a0 	ldrb.w	r5, [sp, #1696]	; 0x6a0
 8013ec2:	9528      	str	r5, [sp, #160]	; 0xa0
 8013ec4:	f89d 56a4 	ldrb.w	r5, [sp, #1700]	; 0x6a4
 8013ec8:	f8dd a6e0 	ldr.w	sl, [sp, #1760]	; 0x6e0
 8013ecc:	950c      	str	r5, [sp, #48]	; 0x30
 8013ece:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8013ed0:	4625      	mov	r5, r4
 8013ed2:	afc3      	add	r7, sp, #780	; 0x30c
 8013ed4:	f855 3b04 	ldr.w	r3, [r5], #4
 8013ed8:	6033      	str	r3, [r6, #0]
 8013eda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013edc:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8013ede:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013ee0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8013ee2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013ee4:	f104 0c38 	add.w	ip, r4, #56	; 0x38
 8013ee8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8013eea:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013eee:	aed0      	add	r6, sp, #832	; 0x340
 8013ef0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8013ef2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013ef6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8013ef8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013efc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8013efe:	682a      	ldr	r2, [r5, #0]
 8013f00:	f8dc 3000 	ldr.w	r3, [ip]
 8013f04:	603a      	str	r2, [r7, #0]
 8013f06:	f104 076c 	add.w	r7, r4, #108	; 0x6c
 8013f0a:	6033      	str	r3, [r6, #0]
 8013f0c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8013f0e:	addd      	add	r5, sp, #884	; 0x374
 8013f10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013f12:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8013f14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013f16:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8013f18:	f104 06a0 	add.w	r6, r4, #160	; 0xa0
 8013f1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013f1e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8013f20:	683f      	ldr	r7, [r7, #0]
 8013f22:	602f      	str	r7, [r5, #0]
 8013f24:	ad98      	add	r5, sp, #608	; 0x260
 8013f26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013f28:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8013f2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013f2c:	e896 0003 	ldmia.w	r6, {r0, r1}
 8013f30:	f104 06c8 	add.w	r6, r4, #200	; 0xc8
 8013f34:	e885 0003 	stmia.w	r5, {r0, r1}
 8013f38:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8013f3a:	ada2      	add	r5, sp, #648	; 0x288
 8013f3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013f3e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8013f40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013f42:	e896 0003 	ldmia.w	r6, {r0, r1}
 8013f46:	f104 06f0 	add.w	r6, r4, #240	; 0xf0
 8013f4a:	e885 0003 	stmia.w	r5, {r0, r1}
 8013f4e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8013f50:	adac      	add	r5, sp, #688	; 0x2b0
 8013f52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013f54:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8013f56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013f58:	e896 0003 	ldmia.w	r6, {r0, r1}
 8013f5c:	f504 768c 	add.w	r6, r4, #280	; 0x118
 8013f60:	e885 0003 	stmia.w	r5, {r0, r1}
 8013f64:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8013f66:	ad5d      	add	r5, sp, #372	; 0x174
 8013f68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013f6a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8013f6e:	f8dd 66d4 	ldr.w	r6, [sp, #1748]	; 0x6d4
 8013f72:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8013f76:	f504 749a 	add.w	r4, r4, #308	; 0x134
 8013f7a:	2500      	movs	r5, #0
 8013f7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013f7e:	7035      	strb	r5, [r6, #0]
 8013f80:	f8dd 66d8 	ldr.w	r6, [sp, #1752]	; 0x6d8
 8013f84:	edcd 1a02 	vstr	s3, [sp, #8]
 8013f88:	7035      	strb	r5, [r6, #0]
 8013f8a:	f8dd 66dc 	ldr.w	r6, [sp, #1756]	; 0x6dc
 8013f8e:	7035      	strb	r5, [r6, #0]
 8013f90:	edde da01 	vldr	s27, [lr, #4]
 8013f94:	edde 8a00 	vldr	s17, [lr]
 8013f98:	ed9e 8a02 	vldr	s16, [lr, #8]
 8013f9c:	ee6d 7aad 	vmul.f32	s15, s27, s27
 8013fa0:	ad64      	add	r5, sp, #400	; 0x190
 8013fa2:	eee8 7aa8 	vfma.f32	s15, s17, s17
 8013fa6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013fa8:	eee8 7a08 	vfma.f32	s15, s16, s16
 8013fac:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8013fb0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8013fb4:	ee17 0a90 	vmov	r0, s15
 8013fb8:	eeb0 ea40 	vmov.f32	s28, s0
 8013fbc:	eef0 ea60 	vmov.f32	s29, s1
 8013fc0:	eeb0 fa41 	vmov.f32	s30, s2
 8013fc4:	eef0 fa42 	vmov.f32	s31, s4
 8013fc8:	f7ec fac6 	bl	8000558 <__aeabi_f2d>
 8013fcc:	f007 fb62 	bl	801b694 <sqrt>
 8013fd0:	f7ec fdf2 	bl	8000bb8 <__aeabi_d2f>
 8013fd4:	edd8 aa01 	vldr	s21, [r8, #4]
 8013fd8:	ed98 ba00 	vldr	s22, [r8]
 8013fdc:	ed98 aa02 	vldr	s20, [r8, #8]
 8013fe0:	4b7c      	ldr	r3, [pc, #496]	; (80141d4 <m_kalman_3gyro.isra.6.constprop.36+0x33c>)
 8013fe2:	ee6a 7aaa 	vmul.f32	s15, s21, s21
 8013fe6:	ee09 0a90 	vmov	s19, r0
 8013fea:	eeeb 7a0b 	vfma.f32	s15, s22, s22
 8013fee:	6018      	str	r0, [r3, #0]
 8013ff0:	f50a 7317 	add.w	r3, sl, #604	; 0x25c
 8013ff4:	930a      	str	r3, [sp, #40]	; 0x28
 8013ff6:	eeea 7a0a 	vfma.f32	s15, s20, s20
 8013ffa:	eef7 ca00 	vmov.f32	s25, #112	; 0x3f800000  1.0
 8013ffe:	ee17 0a90 	vmov	r0, s15
 8014002:	f7ec faa9 	bl	8000558 <__aeabi_f2d>
 8014006:	f007 fb45 	bl	801b694 <sqrt>
 801400a:	f7ec fdd5 	bl	8000bb8 <__aeabi_d2f>
 801400e:	ee09 0a10 	vmov	s18, r0
 8014012:	ee8c caa9 	vdiv.f32	s24, s25, s19
 8014016:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 801401a:	ab5a      	add	r3, sp, #360	; 0x168
 801401c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8014020:	f50a 638c 	add.w	r3, sl, #1120	; 0x460
 8014024:	9319      	str	r3, [sp, #100]	; 0x64
 8014026:	f50d 63d7 	add.w	r3, sp, #1720	; 0x6b8
 801402a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801402e:	eecc 7a89 	vdiv.f32	s15, s25, s18
 8014032:	ee6c ba2d 	vmul.f32	s23, s24, s27
 8014036:	ee67 aaaa 	vmul.f32	s21, s15, s21
 801403a:	ee68 9a8c 	vmul.f32	s19, s17, s24
 801403e:	ee27 ba8b 	vmul.f32	s22, s15, s22
 8014042:	ee2c ca08 	vmul.f32	s24, s24, s16
 8014046:	ee2a aa27 	vmul.f32	s20, s20, s15
 801404a:	ee2a daab 	vmul.f32	s26, s21, s23
 801404e:	edcd 8a57 	vstr	s17, [sp, #348]	; 0x15c
 8014052:	ed8d 8a59 	vstr	s16, [sp, #356]	; 0x164
 8014056:	edcd da58 	vstr	s27, [sp, #352]	; 0x160
 801405a:	edcd 9a3e 	vstr	s19, [sp, #248]	; 0xf8
 801405e:	edcd ba3f 	vstr	s23, [sp, #252]	; 0xfc
 8014062:	ed8d ba41 	vstr	s22, [sp, #260]	; 0x104
 8014066:	edcd aa42 	vstr	s21, [sp, #264]	; 0x108
 801406a:	ed8d ca40 	vstr	s24, [sp, #256]	; 0x100
 801406e:	ed8d aa43 	vstr	s20, [sp, #268]	; 0x10c
 8014072:	f7ec fda1 	bl	8000bb8 <__aeabi_d2f>
 8014076:	eeab da29 	vfma.f32	s26, s22, s19
 801407a:	f89a 48cd 	ldrb.w	r4, [sl, #2253]	; 0x8cd
 801407e:	ee08 0a90 	vmov	s17, r0
 8014082:	ed9f 8a55 	vldr	s16, [pc, #340]	; 80141d8 <m_kalman_3gyro.isra.6.constprop.36+0x340>
 8014086:	eeac da0a 	vfma.f32	s26, s24, s20
 801408a:	ee28 8a88 	vmul.f32	s16, s17, s16
 801408e:	2c00      	cmp	r4, #0
 8014090:	f000 85be 	beq.w	8014c10 <m_kalman_3gyro.isra.6.constprop.36+0xd78>
 8014094:	ab47      	add	r3, sp, #284	; 0x11c
 8014096:	9309      	str	r3, [sp, #36]	; 0x24
 8014098:	f50a 7375 	add.w	r3, sl, #980	; 0x3d4
 801409c:	9312      	str	r3, [sp, #72]	; 0x48
 801409e:	f20a 4304 	addw	r3, sl, #1028	; 0x404
 80140a2:	9313      	str	r3, [sp, #76]	; 0x4c
 80140a4:	f50a 6382 	add.w	r3, sl, #1040	; 0x410
 80140a8:	9314      	str	r3, [sp, #80]	; 0x50
 80140aa:	f20a 4314 	addw	r3, sl, #1044	; 0x414
 80140ae:	9315      	str	r3, [sp, #84]	; 0x54
 80140b0:	f50a 6383 	add.w	r3, sl, #1048	; 0x418
 80140b4:	9316      	str	r3, [sp, #88]	; 0x58
 80140b6:	f20a 431c 	addw	r3, sl, #1052	; 0x41c
 80140ba:	931b      	str	r3, [sp, #108]	; 0x6c
 80140bc:	f20a 4324 	addw	r3, sl, #1060	; 0x424
 80140c0:	931c      	str	r3, [sp, #112]	; 0x70
 80140c2:	f50a 6385 	add.w	r3, sl, #1064	; 0x428
 80140c6:	931d      	str	r3, [sp, #116]	; 0x74
 80140c8:	f20a 432c 	addw	r3, sl, #1068	; 0x42c
 80140cc:	931e      	str	r3, [sp, #120]	; 0x78
 80140ce:	f50a 6386 	add.w	r3, sl, #1072	; 0x430
 80140d2:	9317      	str	r3, [sp, #92]	; 0x5c
 80140d4:	f20a 4334 	addw	r3, sl, #1076	; 0x434
 80140d8:	9310      	str	r3, [sp, #64]	; 0x40
 80140da:	f50a 6387 	add.w	r3, sl, #1080	; 0x438
 80140de:	931f      	str	r3, [sp, #124]	; 0x7c
 80140e0:	f20a 433c 	addw	r3, sl, #1084	; 0x43c
 80140e4:	9311      	str	r3, [sp, #68]	; 0x44
 80140e6:	f50a 6388 	add.w	r3, sl, #1088	; 0x440
 80140ea:	930d      	str	r3, [sp, #52]	; 0x34
 80140ec:	f20a 4344 	addw	r3, sl, #1092	; 0x444
 80140f0:	930e      	str	r3, [sp, #56]	; 0x38
 80140f2:	f50a 6389 	add.w	r3, sl, #1096	; 0x448
 80140f6:	9318      	str	r3, [sp, #96]	; 0x60
 80140f8:	f20a 434c 	addw	r3, sl, #1100	; 0x44c
 80140fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80140fe:	f60a 0398 	addw	r3, sl, #2200	; 0x898
 8014102:	f50a 6881 	add.w	r8, sl, #1032	; 0x408
 8014106:	f20a 490c 	addw	r9, sl, #1036	; 0x40c
 801410a:	9335      	str	r3, [sp, #212]	; 0xd4
 801410c:	f20a 4384 	addw	r3, sl, #1156	; 0x484
 8014110:	eddf 4a32 	vldr	s9, [pc, #200]	; 80141dc <m_kalman_3gyro.isra.6.constprop.36+0x344>
 8014114:	edd3 6a00 	vldr	s13, [r3]
 8014118:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801411a:	ed9f 5a31 	vldr	s10, [pc, #196]	; 80141e0 <m_kalman_3gyro.isra.6.constprop.36+0x348>
 801411e:	edd3 7a00 	vldr	s15, [r3]
 8014122:	eddf 5a30 	vldr	s11, [pc, #192]	; 80141e4 <m_kalman_3gyro.isra.6.constprop.36+0x34c>
 8014126:	ed9f 6a30 	vldr	s12, [pc, #192]	; 80141e8 <m_kalman_3gyro.isra.6.constprop.36+0x350>
 801412a:	9b01      	ldr	r3, [sp, #4]
 801412c:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8014130:	f20a 45cc 	addw	r5, sl, #1228	; 0x4cc
 8014134:	eee7 6a85 	vfma.f32	s13, s15, s10
 8014138:	f50a 649e 	add.w	r4, sl, #1264	; 0x4f0
 801413c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801413e:	ed95 7a00 	vldr	s14, [r5]
 8014142:	edd4 7a00 	vldr	s15, [r4]
 8014146:	eee7 6a25 	vfma.f32	s13, s14, s11
 801414a:	f50d 64d7 	add.w	r4, sp, #1720	; 0x6b8
 801414e:	f50a 6691 	add.w	r6, sl, #1160	; 0x488
 8014152:	ed94 3b00 	vldr	d3, [r4]
 8014156:	eee7 6a86 	vfma.f32	s13, s15, s12
 801415a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801415c:	ed8a 3b0e 	vstr	d3, [sl, #56]	; 0x38
 8014160:	ed84 8a00 	vstr	s16, [r4]
 8014164:	edca 6af8 	vstr	s13, [sl, #992]	; 0x3e0
 8014168:	edd6 7a00 	vldr	s15, [r6]
 801416c:	f20a 4764 	addw	r7, sl, #1124	; 0x464
 8014170:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8014174:	edd7 3a00 	vldr	s7, [r7]
 8014178:	973a      	str	r7, [sp, #232]	; 0xe8
 801417a:	eee3 7a85 	vfma.f32	s15, s7, s10
 801417e:	f50a 659a 	add.w	r5, sl, #1232	; 0x4d0
 8014182:	f20a 4cf4 	addw	ip, sl, #1268	; 0x4f4
 8014186:	ed95 4a00 	vldr	s8, [r5]
 801418a:	ed9c 7a00 	vldr	s14, [ip]
 801418e:	eee4 7a25 	vfma.f32	s15, s8, s11
 8014192:	f20a 458c 	addw	r5, sl, #1164	; 0x48c
 8014196:	f50a 678d 	add.w	r7, sl, #1128	; 0x468
 801419a:	f20a 44d4 	addw	r4, sl, #1236	; 0x4d4
 801419e:	eee7 7a06 	vfma.f32	s15, s14, s12
 80141a2:	9401      	str	r4, [sp, #4]
 80141a4:	f20a 446c 	addw	r4, sl, #1132	; 0x46c
 80141a8:	942b      	str	r4, [sp, #172]	; 0xac
 80141aa:	edca 7af9 	vstr	s15, [sl, #996]	; 0x3e4
 80141ae:	ed95 7a00 	vldr	s14, [r5]
 80141b2:	edd7 3a00 	vldr	s7, [r7]
 80141b6:	973b      	str	r7, [sp, #236]	; 0xec
 80141b8:	ee27 7a24 	vmul.f32	s14, s14, s9
 80141bc:	f50a 648e 	add.w	r4, sl, #1136	; 0x470
 80141c0:	eea3 7a85 	vfma.f32	s14, s7, s10
 80141c4:	942c      	str	r4, [sp, #176]	; 0xb0
 80141c6:	9c01      	ldr	r4, [sp, #4]
 80141c8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80141ca:	ed94 4a00 	vldr	s8, [r4]
 80141ce:	e00d      	b.n	80141ec <m_kalman_3gyro.isra.6.constprop.36+0x354>
 80141d0:	0801d3ec 	.word	0x0801d3ec
 80141d4:	20001bec 	.word	0x20001bec
 80141d8:	3ca3d70a 	.word	0x3ca3d70a
 80141dc:	bdcccccd 	.word	0xbdcccccd
 80141e0:	be4ccccd 	.word	0xbe4ccccd
 80141e4:	3dcccccd 	.word	0x3dcccccd
 80141e8:	3e4ccccd 	.word	0x3e4ccccd
 80141ec:	eea4 7a25 	vfma.f32	s14, s8, s11
 80141f0:	f50a 669f 	add.w	r6, sl, #1272	; 0x4f8
 80141f4:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 80141f8:	ed96 4a00 	vldr	s8, [r6]
 80141fc:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 80141fe:	eea4 7a06 	vfma.f32	s14, s8, s12
 8014202:	f50a 6c92 	add.w	ip, sl, #1168	; 0x490
 8014206:	f50a 6e9b 	add.w	lr, sl, #1240	; 0x4d8
 801420a:	f20a 4b94 	addw	fp, sl, #1172	; 0x494
 801420e:	ed8a 7afa 	vstr	s14, [sl, #1000]	; 0x3e8
 8014212:	ed9c 4a00 	vldr	s8, [ip]
 8014216:	edd5 3a00 	vldr	s7, [r5]
 801421a:	ee24 4a24 	vmul.f32	s8, s8, s9
 801421e:	f50a 658f 	add.w	r5, sl, #1144	; 0x478
 8014222:	eea3 4a85 	vfma.f32	s8, s7, s10
 8014226:	9520      	str	r5, [sp, #128]	; 0x80
 8014228:	f20a 45fc 	addw	r5, sl, #1276	; 0x4fc
 801422c:	edde 3a00 	vldr	s7, [lr]
 8014230:	eea3 4aa5 	vfma.f32	s8, s7, s11
 8014234:	f20a 44dc 	addw	r4, sl, #1244	; 0x4dc
 8014238:	f50a 62a0 	add.w	r2, sl, #1280	; 0x500
 801423c:	edd5 3a00 	vldr	s7, [r5]
 8014240:	9d2c      	ldr	r5, [sp, #176]	; 0xb0
 8014242:	eea3 4a86 	vfma.f32	s8, s7, s12
 8014246:	f50a 6393 	add.w	r3, sl, #1176	; 0x498
 801424a:	f20a 4674 	addw	r6, sl, #1140	; 0x474
 801424e:	f20a 4ce4 	addw	ip, sl, #1252	; 0x4e4
 8014252:	ed8a 4afb 	vstr	s8, [sl, #1004]	; 0x3ec
 8014256:	ed9b 4a00 	vldr	s8, [fp]
 801425a:	edd5 3a00 	vldr	s7, [r5]
 801425e:	f8cd c0bc 	str.w	ip, [sp, #188]	; 0xbc
 8014262:	ee24 4a24 	vmul.f32	s8, s8, s9
 8014266:	f50a 6ca1 	add.w	ip, sl, #1288	; 0x508
 801426a:	eea3 4a85 	vfma.f32	s8, s7, s10
 801426e:	f8cd c0c8 	str.w	ip, [sp, #200]	; 0xc8
 8014272:	f50a 6c94 	add.w	ip, sl, #1184	; 0x4a0
 8014276:	edd4 3a00 	vldr	s7, [r4]
 801427a:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
 801427e:	eea3 4aa5 	vfma.f32	s8, s7, s11
 8014282:	f20a 4c7c 	addw	ip, sl, #1148	; 0x47c
 8014286:	f50a 619c 	add.w	r1, sl, #1248	; 0x4e0
 801428a:	edd2 3a00 	vldr	s7, [r2]
 801428e:	f8cd c084 	str.w	ip, [sp, #132]	; 0x84
 8014292:	eea3 4a86 	vfma.f32	s8, s7, s12
 8014296:	f50a 6c9d 	add.w	ip, sl, #1256	; 0x4e8
 801429a:	f8cd c0c0 	str.w	ip, [sp, #192]	; 0xc0
 801429e:	ee67 3aa7 	vmul.f32	s7, s15, s15
 80142a2:	ed8a 4afc 	vstr	s8, [sl, #1008]	; 0x3f0
 80142a6:	edd3 7a00 	vldr	s15, [r3]
 80142aa:	ed96 4a00 	vldr	s8, [r6]
 80142ae:	963c      	str	r6, [sp, #240]	; 0xf0
 80142b0:	ee67 7aa4 	vmul.f32	s15, s15, s9
 80142b4:	eee6 3aa6 	vfma.f32	s7, s13, s13
 80142b8:	f20a 5c0c 	addw	ip, sl, #1292	; 0x50c
 80142bc:	f8cd c0cc 	str.w	ip, [sp, #204]	; 0xcc
 80142c0:	eee4 7a05 	vfma.f32	s15, s8, s10
 80142c4:	f20a 4ca4 	addw	ip, sl, #1188	; 0x4a4
 80142c8:	f8cd c0b8 	str.w	ip, [sp, #184]	; 0xb8
 80142cc:	eef0 6a63 	vmov.f32	s13, s7
 80142d0:	edd1 3a00 	vldr	s7, [r1]
 80142d4:	f50a 6c90 	add.w	ip, sl, #1152	; 0x480
 80142d8:	eee3 7aa5 	vfma.f32	s15, s7, s11
 80142dc:	f20a 479c 	addw	r7, sl, #1180	; 0x49c
 80142e0:	f20a 5004 	addw	r0, sl, #1284	; 0x504
 80142e4:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
 80142e8:	f50a 64a2 	add.w	r4, sl, #1296	; 0x510
 80142ec:	f20a 4cec 	addw	ip, sl, #1260	; 0x4ec
 80142f0:	f50a 760e 	add.w	r6, sl, #568	; 0x238
 80142f4:	f8cd c0c4 	str.w	ip, [sp, #196]	; 0xc4
 80142f8:	973d      	str	r7, [sp, #244]	; 0xf4
 80142fa:	9434      	str	r4, [sp, #208]	; 0xd0
 80142fc:	962a      	str	r6, [sp, #168]	; 0xa8
 80142fe:	ed90 4a00 	vldr	s8, [r0]
 8014302:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8014304:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8014306:	eee4 7a06 	vfma.f32	s15, s8, s12
 801430a:	f50a 6480 	add.w	r4, sl, #1024	; 0x400
 801430e:	f50a 7105 	add.w	r1, sl, #532	; 0x214
 8014312:	eee7 6a07 	vfma.f32	s13, s14, s14
 8014316:	9129      	str	r1, [sp, #164]	; 0xa4
 8014318:	edca 7afd 	vstr	s15, [sl, #1012]	; 0x3f4
 801431c:	edd7 7a00 	vldr	s15, [r7]
 8014320:	ed95 4a00 	vldr	s8, [r5]
 8014324:	9d2f      	ldr	r5, [sp, #188]	; 0xbc
 8014326:	ee67 7aa4 	vmul.f32	s15, s15, s9
 801432a:	ee16 0a90 	vmov	r0, s13
 801432e:	eee4 7a05 	vfma.f32	s15, s8, s10
 8014332:	edd5 6a00 	vldr	s13, [r5]
 8014336:	9d32      	ldr	r5, [sp, #200]	; 0xc8
 8014338:	eee6 7aa5 	vfma.f32	s15, s13, s11
 801433c:	ed95 7a00 	vldr	s14, [r5]
 8014340:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 8014342:	eee7 7a06 	vfma.f32	s15, s14, s12
 8014346:	edca 7afe 	vstr	s15, [sl, #1016]	; 0x3f8
 801434a:	edd5 7a00 	vldr	s15, [r5]
 801434e:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8014350:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8014354:	ed95 4a00 	vldr	s8, [r5]
 8014358:	9d30      	ldr	r5, [sp, #192]	; 0xc0
 801435a:	eee4 7a05 	vfma.f32	s15, s8, s10
 801435e:	edd5 6a00 	vldr	s13, [r5]
 8014362:	9d33      	ldr	r5, [sp, #204]	; 0xcc
 8014364:	eee6 7aa5 	vfma.f32	s15, s13, s11
 8014368:	ed95 7a00 	vldr	s14, [r5]
 801436c:	9d2e      	ldr	r5, [sp, #184]	; 0xb8
 801436e:	eee7 7a06 	vfma.f32	s15, s14, s12
 8014372:	edca 7aff 	vstr	s15, [sl, #1020]	; 0x3fc
 8014376:	ed95 8a00 	vldr	s16, [r5]
 801437a:	9d22      	ldr	r5, [sp, #136]	; 0x88
 801437c:	ed9c 7a00 	vldr	s14, [ip]
 8014380:	edd5 6a00 	vldr	s13, [r5]
 8014384:	edd3 7a00 	vldr	s15, [r3]
 8014388:	ee28 8a24 	vmul.f32	s16, s16, s9
 801438c:	eea6 8a85 	vfma.f32	s16, s13, s10
 8014390:	eea7 8a25 	vfma.f32	s16, s14, s11
 8014394:	eea7 8a86 	vfma.f32	s16, s15, s12
 8014398:	ed84 8a00 	vstr	s16, [r4]
 801439c:	f7ec f8dc 	bl	8000558 <__aeabi_f2d>
 80143a0:	f007 f978 	bl	801b694 <sqrt>
 80143a4:	f7ec fc08 	bl	8000bb8 <__aeabi_d2f>
 80143a8:	edda 7afc 	vldr	s15, [sl, #1008]	; 0x3f0
 80143ac:	edda 6afb 	vldr	s13, [sl, #1004]	; 0x3ec
 80143b0:	ed9a 7afd 	vldr	s14, [sl, #1012]	; 0x3f4
 80143b4:	49a1      	ldr	r1, [pc, #644]	; (801463c <m_kalman_3gyro.isra.6.constprop.36+0x7a4>)
 80143b6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80143ba:	ee0d 0a90 	vmov	s27, r0
 80143be:	eee6 7aa6 	vfma.f32	s15, s13, s13
 80143c2:	6008      	str	r0, [r1, #0]
 80143c4:	eee7 7a07 	vfma.f32	s15, s14, s14
 80143c8:	ee17 0a90 	vmov	r0, s15
 80143cc:	f7ec f8c4 	bl	8000558 <__aeabi_f2d>
 80143d0:	f007 f960 	bl	801b694 <sqrt>
 80143d4:	f7ec fbf0 	bl	8000bb8 <__aeabi_d2f>
 80143d8:	edda 7aff 	vldr	s15, [sl, #1020]	; 0x3fc
 80143dc:	ed9a 7afe 	vldr	s14, [sl, #1016]	; 0x3f8
 80143e0:	4b96      	ldr	r3, [pc, #600]	; (801463c <m_kalman_3gyro.isra.6.constprop.36+0x7a4>)
 80143e2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80143e6:	f843 0f04 	str.w	r0, [r3, #4]!
 80143ea:	eee7 7a07 	vfma.f32	s15, s14, s14
 80143ee:	9339      	str	r3, [sp, #228]	; 0xe4
 80143f0:	ee0c 0a90 	vmov	s25, r0
 80143f4:	eee8 7a08 	vfma.f32	s15, s16, s16
 80143f8:	ee17 0a90 	vmov	r0, s15
 80143fc:	f7ec f8ac 	bl	8000558 <__aeabi_f2d>
 8014400:	f007 f948 	bl	801b694 <sqrt>
 8014404:	f7ec fbd8 	bl	8000bb8 <__aeabi_d2f>
 8014408:	ee6b 7a4c 	vnmul.f32	s15, s22, s24
 801440c:	ee2a 7a6b 	vnmul.f32	s14, s20, s23
 8014410:	eee9 7a8a 	vfma.f32	s15, s19, s20
 8014414:	4b89      	ldr	r3, [pc, #548]	; (801463c <m_kalman_3gyro.isra.6.constprop.36+0x7a4>)
 8014416:	eeac 7a2a 	vfma.f32	s14, s24, s21
 801441a:	f843 0f08 	str.w	r0, [r3, #8]!
 801441e:	ee6a 9ae9 	vnmul.f32	s19, s21, s19
 8014422:	eeb0 ca47 	vmov.f32	s24, s14
 8014426:	ee27 7aa7 	vmul.f32	s14, s15, s15
 801442a:	eeeb 9a8b 	vfma.f32	s19, s23, s22
 801442e:	931a      	str	r3, [sp, #104]	; 0x68
 8014430:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014432:	edcd 7a01 	vstr	s15, [sp, #4]
 8014436:	eeac 7a0c 	vfma.f32	s14, s24, s24
 801443a:	ee08 0a10 	vmov	s16, r0
 801443e:	eea9 7aa9 	vfma.f32	s14, s19, s19
 8014442:	edc3 da00 	vstr	s27, [r3]
 8014446:	ee17 0a10 	vmov	r0, s14
 801444a:	edc8 ca00 	vstr	s25, [r8]
 801444e:	ed89 8a00 	vstr	s16, [r9]
 8014452:	ed8a ba90 	vstr	s22, [sl, #576]	; 0x240
 8014456:	edca aa93 	vstr	s21, [sl, #588]	; 0x24c
 801445a:	ed8a aa96 	vstr	s20, [sl, #600]	; 0x258
 801445e:	f7ec f87b 	bl	8000558 <__aeabi_f2d>
 8014462:	f007 f917 	bl	801b694 <sqrt>
 8014466:	f7ec fba7 	bl	8000bb8 <__aeabi_d2f>
 801446a:	ee07 0a90 	vmov	s15, r0
 801446e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014472:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014476:	ab7d      	add	r3, sp, #500	; 0x1f4
 8014478:	461a      	mov	r2, r3
 801447a:	4631      	mov	r1, r6
 801447c:	9829      	ldr	r0, [sp, #164]	; 0xa4
 801447e:	eddd 7a01 	vldr	s15, [sp, #4]
 8014482:	ee69 9a87 	vmul.f32	s19, s19, s14
 8014486:	ee67 ba87 	vmul.f32	s23, s15, s14
 801448a:	ee2c ca07 	vmul.f32	s24, s24, s14
 801448e:	ee6a 6ae9 	vnmul.f32	s13, s21, s19
 8014492:	ee2a 7a4c 	vnmul.f32	s14, s20, s24
 8014496:	ee6b 7a6b 	vnmul.f32	s15, s22, s23
 801449a:	eeeb 6a8a 	vfma.f32	s13, s23, s20
 801449e:	eea9 7a8b 	vfma.f32	s14, s19, s22
 80144a2:	eeec 7a2a 	vfma.f32	s15, s24, s21
 80144a6:	edca 6a8e 	vstr	s13, [sl, #568]	; 0x238
 80144aa:	ed8a 7a91 	vstr	s14, [sl, #580]	; 0x244
 80144ae:	edca 7a94 	vstr	s15, [sl, #592]	; 0x250
 80144b2:	ed8a ca8f 	vstr	s24, [sl, #572]	; 0x23c
 80144b6:	edca ba92 	vstr	s23, [sl, #584]	; 0x248
 80144ba:	edca 9a95 	vstr	s19, [sl, #596]	; 0x254
 80144be:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 80144c2:	ed8d 7a24 	vstr	s14, [sp, #144]	; 0x90
 80144c6:	edcd 7a25 	vstr	s15, [sp, #148]	; 0x94
 80144ca:	f7fb f807 	bl	800f4dc <m_mldivide>
 80144ce:	a87d      	add	r0, sp, #500	; 0x1f4
 80144d0:	a94b      	add	r1, sp, #300	; 0x12c
 80144d2:	f7fb fb81 	bl	800fbd8 <m_dcm2q_eml>
 80144d6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80144d8:	f5aa 70ae 	sub.w	r0, sl, #348	; 0x15c
 80144dc:	4653      	mov	r3, sl
 80144de:	f8d3 23ac 	ldr.w	r2, [r3, #940]	; 0x3ac
 80144e2:	f8d3 13b0 	ldr.w	r1, [r3, #944]	; 0x3b0
 80144e6:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
 80144ea:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 80144ee:	f8c3 13bc 	str.w	r1, [r3, #956]	; 0x3bc
 80144f2:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
 80144f6:	3b0c      	subs	r3, #12
 80144f8:	4298      	cmp	r0, r3
 80144fa:	d1f0      	bne.n	80144de <m_kalman_3gyro.isra.6.constprop.36+0x646>
 80144fc:	ed9d 7a02 	vldr	s14, [sp, #8]
 8014500:	eddd 6a4b 	vldr	s13, [sp, #300]	; 0x12c
 8014504:	eddf 5a4e 	vldr	s11, [pc, #312]	; 8014640 <m_kalman_3gyro.isra.6.constprop.36+0x7a8>
 8014508:	9738      	str	r7, [sp, #224]	; 0xe0
 801450a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801450e:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8014512:	ac44      	add	r4, sp, #272	; 0x110
 8014514:	f507 71ae 	add.w	r1, r7, #348	; 0x15c
 8014518:	f107 050c 	add.w	r5, r7, #12
 801451c:	4638      	mov	r0, r7
 801451e:	ed9d 7a4c 	vldr	s14, [sp, #304]	; 0x130
 8014522:	eddd 7a4d 	vldr	s15, [sp, #308]	; 0x134
 8014526:	ee76 6aa6 	vadd.f32	s13, s13, s13
 801452a:	ee37 7a07 	vadd.f32	s14, s14, s14
 801452e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8014532:	ee66 6a86 	vmul.f32	s13, s13, s12
 8014536:	ee27 7a06 	vmul.f32	s14, s14, s12
 801453a:	ee67 7a86 	vmul.f32	s15, s15, s12
 801453e:	ed9f 6a41 	vldr	s12, [pc, #260]	; 8014644 <m_kalman_3gyro.isra.6.constprop.36+0x7ac>
 8014542:	edca 6a97 	vstr	s13, [sl, #604]	; 0x25c
 8014546:	ed8a 7a98 	vstr	s14, [sl, #608]	; 0x260
 801454a:	edca 7a99 	vstr	s15, [sl, #612]	; 0x264
 801454e:	edd0 6a00 	vldr	s13, [r0]
 8014552:	4603      	mov	r3, r0
 8014554:	eef0 7a66 	vmov.f32	s15, s13
 8014558:	330c      	adds	r3, #12
 801455a:	ed93 7a00 	vldr	s14, [r3]
 801455e:	428b      	cmp	r3, r1
 8014560:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014564:	d1f8      	bne.n	8014558 <m_kalman_3gyro.isra.6.constprop.36+0x6c0>
 8014566:	ee27 7aa5 	vmul.f32	s14, s15, s11
 801456a:	4602      	mov	r2, r0
 801456c:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8014570:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8014574:	320c      	adds	r2, #12
 8014576:	edd2 7a00 	vldr	s15, [r2]
 801457a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801457e:	4293      	cmp	r3, r2
 8014580:	eee7 6aa7 	vfma.f32	s13, s15, s15
 8014584:	d1f6      	bne.n	8014574 <m_kalman_3gyro.isra.6.constprop.36+0x6dc>
 8014586:	ee66 6a86 	vmul.f32	s13, s13, s12
 801458a:	3004      	adds	r0, #4
 801458c:	42a8      	cmp	r0, r5
 801458e:	ece4 6a01 	vstmia	r4!, {s13}
 8014592:	f101 0104 	add.w	r1, r1, #4
 8014596:	d1da      	bne.n	801454e <m_kalman_3gyro.isra.6.constprop.36+0x6b6>
 8014598:	9844      	ldr	r0, [sp, #272]	; 0x110
 801459a:	970a      	str	r7, [sp, #40]	; 0x28
 801459c:	f7eb ffdc 	bl	8000558 <__aeabi_f2d>
 80145a0:	f007 f878 	bl	801b694 <sqrt>
 80145a4:	f7ec fb08 	bl	8000bb8 <__aeabi_d2f>
 80145a8:	ee06 0a90 	vmov	s13, r0
 80145ac:	9845      	ldr	r0, [sp, #276]	; 0x114
 80145ae:	edcd 6a44 	vstr	s13, [sp, #272]	; 0x110
 80145b2:	edcd 6a02 	vstr	s13, [sp, #8]
 80145b6:	f7eb ffcf 	bl	8000558 <__aeabi_f2d>
 80145ba:	f007 f86b 	bl	801b694 <sqrt>
 80145be:	f7ec fafb 	bl	8000bb8 <__aeabi_d2f>
 80145c2:	ee07 0a90 	vmov	s15, r0
 80145c6:	9846      	ldr	r0, [sp, #280]	; 0x118
 80145c8:	edcd 7a45 	vstr	s15, [sp, #276]	; 0x114
 80145cc:	edcd 7a01 	vstr	s15, [sp, #4]
 80145d0:	f7eb ffc2 	bl	8000558 <__aeabi_f2d>
 80145d4:	f007 f85e 	bl	801b694 <sqrt>
 80145d8:	f7ec faee 	bl	8000bb8 <__aeabi_d2f>
 80145dc:	eddd 7a01 	vldr	s15, [sp, #4]
 80145e0:	eddd 6a02 	vldr	s13, [sp, #8]
 80145e4:	9046      	str	r0, [sp, #280]	; 0x118
 80145e6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80145ea:	ee07 0a10 	vmov	s14, r0
 80145ee:	eee6 7aa6 	vfma.f32	s15, s13, s13
 80145f2:	f50a 7372 	add.w	r3, sl, #968	; 0x3c8
 80145f6:	9326      	str	r3, [sp, #152]	; 0x98
 80145f8:	f20d 48ec 	addw	r8, sp, #1260	; 0x4ec
 80145fc:	eee7 7a07 	vfma.f32	s15, s14, s14
 8014600:	f50d 7b6a 	add.w	fp, sp, #936	; 0x3a8
 8014604:	ee17 0a90 	vmov	r0, s15
 8014608:	f7eb ffa6 	bl	8000558 <__aeabi_f2d>
 801460c:	f007 f842 	bl	801b694 <sqrt>
 8014610:	f7ec fad2 	bl	8000bb8 <__aeabi_d2f>
 8014614:	4b0c      	ldr	r3, [pc, #48]	; (8014648 <m_kalman_3gyro.isra.6.constprop.36+0x7b0>)
 8014616:	f8ca 03c4 	str.w	r0, [sl, #964]	; 0x3c4
 801461a:	ecf3 7a01 	vldmia	r3!, {s15}
 801461e:	f8cd a6e0 	str.w	sl, [sp, #1760]	; 0x6e0
 8014622:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 8014626:	edd3 7a00 	vldr	s15, [r3]
 801462a:	edcd 7a37 	vstr	s15, [sp, #220]	; 0xdc
 801462e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014630:	4640      	mov	r0, r8
 8014632:	f20d 31a7 	addw	r1, sp, #935	; 0x3a7
 8014636:	2301      	movs	r3, #1
 8014638:	e00c      	b.n	8014654 <m_kalman_3gyro.isra.6.constprop.36+0x7bc>
 801463a:	bf00      	nop
 801463c:	20001bf0 	.word	0x20001bf0
 8014640:	3d088889 	.word	0x3d088889
 8014644:	3d0d3dcb 	.word	0x3d0d3dcb
 8014648:	200017d8 	.word	0x200017d8
 801464c:	3f333333 	.word	0x3f333333
 8014650:	3f4ccccd 	.word	0x3f4ccccd
 8014654:	f801 3f01 	strb.w	r3, [r1, #1]!
 8014658:	3301      	adds	r3, #1
 801465a:	f852 4b0c 	ldr.w	r4, [r2], #12
 801465e:	f840 4b04 	str.w	r4, [r0], #4
 8014662:	2b1f      	cmp	r3, #31
 8014664:	d1f6      	bne.n	8014654 <m_kalman_3gyro.isra.6.constprop.36+0x7bc>
 8014666:	221e      	movs	r2, #30
 8014668:	2101      	movs	r1, #1
 801466a:	a88f      	add	r0, sp, #572	; 0x23c
 801466c:	f005 fecb 	bl	801a406 <memset>
 8014670:	ed98 7a00 	vldr	s14, [r8]
 8014674:	edd8 7a01 	vldr	s15, [r8, #4]
 8014678:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801467c:	ed98 7a02 	vldr	s14, [r8, #8]
 8014680:	edd8 7a03 	vldr	s15, [r8, #12]
 8014684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014688:	bf88      	it	hi
 801468a:	f44f 7381 	movhi.w	r3, #258	; 0x102
 801468e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014692:	ed98 7a04 	vldr	s14, [r8, #16]
 8014696:	edd8 7a05 	vldr	s15, [r8, #20]
 801469a:	bf88      	it	hi
 801469c:	f8ab 3000 	strhhi.w	r3, [fp]
 80146a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146a4:	bf88      	it	hi
 80146a6:	f44f 7341 	movhi.w	r3, #772	; 0x304
 80146aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80146ae:	ed98 7a06 	vldr	s14, [r8, #24]
 80146b2:	edd8 7a07 	vldr	s15, [r8, #28]
 80146b6:	bf88      	it	hi
 80146b8:	f8ab 3002 	strhhi.w	r3, [fp, #2]
 80146bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146c0:	bf88      	it	hi
 80146c2:	f240 5306 	movwhi	r3, #1286	; 0x506
 80146c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80146ca:	ed98 7a08 	vldr	s14, [r8, #32]
 80146ce:	edd8 7a09 	vldr	s15, [r8, #36]	; 0x24
 80146d2:	bf88      	it	hi
 80146d4:	f8ab 3004 	strhhi.w	r3, [fp, #4]
 80146d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146dc:	bf88      	it	hi
 80146de:	f44f 63e1 	movhi.w	r3, #1800	; 0x708
 80146e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80146e6:	ed98 7a0a 	vldr	s14, [r8, #40]	; 0x28
 80146ea:	edd8 7a0b 	vldr	s15, [r8, #44]	; 0x2c
 80146ee:	bf88      	it	hi
 80146f0:	f8ab 3006 	strhhi.w	r3, [fp, #6]
 80146f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146f8:	bf88      	it	hi
 80146fa:	f640 130a 	movwhi	r3, #2314	; 0x90a
 80146fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014702:	ed98 7a0c 	vldr	s14, [r8, #48]	; 0x30
 8014706:	edd8 7a0d 	vldr	s15, [r8, #52]	; 0x34
 801470a:	bf88      	it	hi
 801470c:	f8ab 3008 	strhhi.w	r3, [fp, #8]
 8014710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014714:	bf88      	it	hi
 8014716:	f640 330c 	movwhi	r3, #2828	; 0xb0c
 801471a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801471e:	ed98 7a0e 	vldr	s14, [r8, #56]	; 0x38
 8014722:	edd8 7a0f 	vldr	s15, [r8, #60]	; 0x3c
 8014726:	bf88      	it	hi
 8014728:	f8ab 300a 	strhhi.w	r3, [fp, #10]
 801472c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014730:	bf88      	it	hi
 8014732:	f640 530e 	movwhi	r3, #3342	; 0xd0e
 8014736:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801473a:	ed98 7a10 	vldr	s14, [r8, #64]	; 0x40
 801473e:	edd8 7a11 	vldr	s15, [r8, #68]	; 0x44
 8014742:	bf88      	it	hi
 8014744:	f8ab 300c 	strhhi.w	r3, [fp, #12]
 8014748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801474c:	bf88      	it	hi
 801474e:	f44f 6371 	movhi.w	r3, #3856	; 0xf10
 8014752:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014756:	ed98 7a12 	vldr	s14, [r8, #72]	; 0x48
 801475a:	edd8 7a13 	vldr	s15, [r8, #76]	; 0x4c
 801475e:	bf88      	it	hi
 8014760:	f8ab 300e 	strhhi.w	r3, [fp, #14]
 8014764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014768:	bf88      	it	hi
 801476a:	f241 1312 	movwhi	r3, #4370	; 0x1112
 801476e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014772:	ed98 7a14 	vldr	s14, [r8, #80]	; 0x50
 8014776:	edd8 7a15 	vldr	s15, [r8, #84]	; 0x54
 801477a:	bf88      	it	hi
 801477c:	f8ab 3010 	strhhi.w	r3, [fp, #16]
 8014780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014784:	bf88      	it	hi
 8014786:	f241 3314 	movwhi	r3, #4884	; 0x1314
 801478a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801478e:	bf88      	it	hi
 8014790:	f8ab 3012 	strhhi.w	r3, [fp, #18]
 8014794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014798:	bf84      	itt	hi
 801479a:	f241 5316 	movwhi	r3, #5398	; 0x1516
 801479e:	f8ab 3014 	strhhi.w	r3, [fp, #20]
 80147a2:	ed98 7a16 	vldr	s14, [r8, #88]	; 0x58
 80147a6:	edd8 7a17 	vldr	s15, [r8, #92]	; 0x5c
 80147aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80147ae:	ed98 7a18 	vldr	s14, [r8, #96]	; 0x60
 80147b2:	edd8 7a19 	vldr	s15, [r8, #100]	; 0x64
 80147b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147ba:	bf88      	it	hi
 80147bc:	f241 7318 	movwhi	r3, #5912	; 0x1718
 80147c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80147c4:	ed98 7a1a 	vldr	s14, [r8, #104]	; 0x68
 80147c8:	edd8 7a1b 	vldr	s15, [r8, #108]	; 0x6c
 80147cc:	bf88      	it	hi
 80147ce:	f8ab 3016 	strhhi.w	r3, [fp, #22]
 80147d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147d6:	bf88      	it	hi
 80147d8:	f641 131a 	movwhi	r3, #6426	; 0x191a
 80147dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80147e0:	ed98 7a1c 	vldr	s14, [r8, #112]	; 0x70
 80147e4:	edd8 7a1d 	vldr	s15, [r8, #116]	; 0x74
 80147e8:	bf88      	it	hi
 80147ea:	f8ab 3018 	strhhi.w	r3, [fp, #24]
 80147ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147f2:	bf88      	it	hi
 80147f4:	f641 331c 	movwhi	r3, #6940	; 0x1b1c
 80147f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80147fc:	bf88      	it	hi
 80147fe:	f8ab 301a 	strhhi.w	r3, [fp, #26]
 8014802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014806:	bf84      	itt	hi
 8014808:	f641 531e 	movwhi	r3, #7454	; 0x1d1e
 801480c:	f8ab 301c 	strhhi.w	r3, [fp, #28]
 8014810:	2304      	movs	r3, #4
 8014812:	9306      	str	r3, [sp, #24]
 8014814:	2302      	movs	r3, #2
 8014816:	9302      	str	r3, [sp, #8]
 8014818:	9b02      	ldr	r3, [sp, #8]
 801481a:	f103 0901 	add.w	r9, r3, #1
 801481e:	f1b9 0f1f 	cmp.w	r9, #31
 8014822:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8014826:	9304      	str	r3, [sp, #16]
 8014828:	d055      	beq.n	80148d6 <m_kalman_3gyro.isra.6.constprop.36+0xa3e>
 801482a:	2301      	movs	r3, #1
 801482c:	9301      	str	r3, [sp, #4]
 801482e:	9b01      	ldr	r3, [sp, #4]
 8014830:	9a04      	ldr	r2, [sp, #16]
 8014832:	18d7      	adds	r7, r2, r3
 8014834:	2f1f      	cmp	r7, #31
 8014836:	bfa8      	it	ge
 8014838:	271f      	movge	r7, #31
 801483a:	eba7 0a03 	sub.w	sl, r7, r3
 801483e:	f1ba 0f00 	cmp.w	sl, #0
 8014842:	dd40      	ble.n	80148c6 <m_kalman_3gyro.isra.6.constprop.36+0xa2e>
 8014844:	461d      	mov	r5, r3
 8014846:	464e      	mov	r6, r9
 8014848:	2401      	movs	r4, #1
 801484a:	e008      	b.n	801485e <m_kalman_3gyro.isra.6.constprop.36+0x9c6>
 801484c:	3601      	adds	r6, #1
 801484e:	ab8f      	add	r3, sp, #572	; 0x23c
 8014850:	42be      	cmp	r6, r7
 8014852:	541a      	strb	r2, [r3, r0]
 8014854:	f000 81a6 	beq.w	8014ba4 <m_kalman_3gyro.isra.6.constprop.36+0xd0c>
 8014858:	3401      	adds	r4, #1
 801485a:	45a2      	cmp	sl, r4
 801485c:	db2c      	blt.n	80148b8 <m_kalman_3gyro.isra.6.constprop.36+0xa20>
 801485e:	f105 3cff 	add.w	ip, r5, #4294967295
 8014862:	1e71      	subs	r1, r6, #1
 8014864:	f91b 300c 	ldrsb.w	r3, [fp, ip]
 8014868:	f91b 2001 	ldrsb.w	r2, [fp, r1]
 801486c:	eb08 0e83 	add.w	lr, r8, r3, lsl #2
 8014870:	eb08 0082 	add.w	r0, r8, r2, lsl #2
 8014874:	ed50 7a01 	vldr	s15, [r0, #-4]
 8014878:	ed1e 7a01 	vldr	s14, [lr, #-4]
 801487c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014884:	f104 30ff 	add.w	r0, r4, #4294967295
 8014888:	d8e0      	bhi.n	801484c <m_kalman_3gyro.isra.6.constprop.36+0x9b4>
 801488a:	3501      	adds	r5, #1
 801488c:	aa8f      	add	r2, sp, #572	; 0x23c
 801488e:	45a9      	cmp	r9, r5
 8014890:	5413      	strb	r3, [r2, r0]
 8014892:	d1e1      	bne.n	8014858 <m_kalman_3gyro.isra.6.constprop.36+0x9c0>
 8014894:	ab8f      	add	r3, sp, #572	; 0x23c
 8014896:	42be      	cmp	r6, r7
 8014898:	eba7 0206 	sub.w	r2, r7, r6
 801489c:	eb03 0004 	add.w	r0, r3, r4
 80148a0:	4459      	add	r1, fp
 80148a2:	f280 818e 	bge.w	8014bc2 <m_kalman_3gyro.isra.6.constprop.36+0xd2a>
 80148a6:	443c      	add	r4, r7
 80148a8:	1ba4      	subs	r4, r4, r6
 80148aa:	3401      	adds	r4, #1
 80148ac:	f005 fda0 	bl	801a3f0 <memcpy>
 80148b0:	45a2      	cmp	sl, r4
 80148b2:	464d      	mov	r5, r9
 80148b4:	463e      	mov	r6, r7
 80148b6:	dad2      	bge.n	801485e <m_kalman_3gyro.isra.6.constprop.36+0x9c6>
 80148b8:	9b01      	ldr	r3, [sp, #4]
 80148ba:	1e58      	subs	r0, r3, #1
 80148bc:	4458      	add	r0, fp
 80148be:	4652      	mov	r2, sl
 80148c0:	a98f      	add	r1, sp, #572	; 0x23c
 80148c2:	f005 fd95 	bl	801a3f0 <memcpy>
 80148c6:	9b02      	ldr	r3, [sp, #8]
 80148c8:	9701      	str	r7, [sp, #4]
 80148ca:	eb03 0907 	add.w	r9, r3, r7
 80148ce:	f1b9 0f1e 	cmp.w	r9, #30
 80148d2:	ddac      	ble.n	801482e <m_kalman_3gyro.isra.6.constprop.36+0x996>
 80148d4:	9b04      	ldr	r3, [sp, #16]
 80148d6:	9302      	str	r3, [sp, #8]
 80148d8:	9b06      	ldr	r3, [sp, #24]
 80148da:	3b01      	subs	r3, #1
 80148dc:	9306      	str	r3, [sp, #24]
 80148de:	d19b      	bne.n	8014818 <m_kalman_3gyro.isra.6.constprop.36+0x980>
 80148e0:	f99b 200e 	ldrsb.w	r2, [fp, #14]
 80148e4:	f99b 300f 	ldrsb.w	r3, [fp, #15]
 80148e8:	eb08 0282 	add.w	r2, r8, r2, lsl #2
 80148ec:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 80148f0:	ed52 7a01 	vldr	s15, [r2, #-4]
 80148f4:	ed13 7a01 	vldr	s14, [r3, #-4]
 80148f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80148fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014900:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8014904:	bf4c      	ite	mi
 8014906:	2201      	movmi	r2, #1
 8014908:	2200      	movpl	r2, #0
 801490a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801490e:	bf4c      	ite	mi
 8014910:	2301      	movmi	r3, #1
 8014912:	2300      	movpl	r3, #0
 8014914:	429a      	cmp	r2, r3
 8014916:	f000 8156 	beq.w	8014bc6 <m_kalman_3gyro.isra.6.constprop.36+0xd2e>
 801491a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801491e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8014922:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014926:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014928:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801492a:	3204      	adds	r2, #4
 801492c:	920a      	str	r2, [sp, #40]	; 0x28
 801492e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014930:	ece3 7a01 	vstmia	r3!, {s15}
 8014934:	4293      	cmp	r3, r2
 8014936:	9326      	str	r3, [sp, #152]	; 0x98
 8014938:	f47f ae79 	bne.w	801462e <m_kalman_3gyro.isra.6.constprop.36+0x796>
 801493c:	f8dd a6e0 	ldr.w	sl, [sp, #1760]	; 0x6e0
 8014940:	edda 7af3 	vldr	s15, [sl, #972]	; 0x3cc
 8014944:	edda 6af2 	vldr	s13, [sl, #968]	; 0x3c8
 8014948:	ed9a 7af4 	vldr	s14, [sl, #976]	; 0x3d0
 801494c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8014950:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8014954:	eee7 7a07 	vfma.f32	s15, s14, s14
 8014958:	ee17 0a90 	vmov	r0, s15
 801495c:	f7eb fdfc 	bl	8000558 <__aeabi_f2d>
 8014960:	f006 fe98 	bl	801b694 <sqrt>
 8014964:	f7ec f928 	bl	8000bb8 <__aeabi_d2f>
 8014968:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 801496c:	ee2e 6a07 	vmul.f32	s12, s28, s14
 8014970:	ee6e 6a87 	vmul.f32	s13, s29, s14
 8014974:	eecd 7a86 	vdiv.f32	s15, s27, s12
 8014978:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801497a:	9002      	str	r0, [sp, #8]
 801497c:	ee8c 6aa6 	vdiv.f32	s12, s25, s13
 8014980:	ee2f 7a07 	vmul.f32	s14, s30, s14
 8014984:	edc3 7a00 	vstr	s15, [r3]
 8014988:	eec8 6a07 	vdiv.f32	s13, s16, s14
 801498c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801498e:	ed1f 7ad1 	vldr	s14, [pc, #-836]	; 801464c <m_kalman_3gyro.isra.6.constprop.36+0x7b4>
 8014992:	ed83 6a00 	vstr	s12, [r3]
 8014996:	ee77 7a86 	vadd.f32	s15, s15, s12
 801499a:	ee28 8a07 	vmul.f32	s16, s16, s14
 801499e:	ee05 0a90 	vmov	s11, r0
 80149a2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80149a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80149aa:	eeac 8a87 	vfma.f32	s16, s25, s14
 80149ae:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80149b0:	ee25 7a87 	vmul.f32	s14, s11, s14
 80149b4:	edc3 6a00 	vstr	s13, [r3]
 80149b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80149bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80149be:	ed1f 6adc 	vldr	s12, [pc, #-880]	; 8014650 <m_kalman_3gyro.isra.6.constprop.36+0x7b8>
 80149c2:	ed83 7a00 	vstr	s14, [r3]
 80149c6:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 80149ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80149cc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80149d0:	ee28 8a06 	vmul.f32	s16, s16, s12
 80149d4:	edc3 7a00 	vstr	s15, [r3]
 80149d8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80149da:	ed83 8a00 	vstr	s16, [r3]
 80149de:	f89a 38ce 	ldrb.w	r3, [sl, #2254]	; 0x8ce
 80149e2:	2b00      	cmp	r3, #0
 80149e4:	f000 829e 	beq.w	8014f24 <m_kalman_3gyro.isra.6.constprop.36+0x108c>
 80149e8:	f60a 03c8 	addw	r3, sl, #2248	; 0x8c8
 80149ec:	9304      	str	r3, [sp, #16]
 80149ee:	f50a 630c 	add.w	r3, sl, #2240	; 0x8c0
 80149f2:	f60a 09c4 	addw	r9, sl, #2244	; 0x8c4
 80149f6:	9301      	str	r3, [sp, #4]
 80149f8:	f60a 07bc 	addw	r7, sl, #2236	; 0x8bc
 80149fc:	f60a 06b8 	addw	r6, sl, #2232	; 0x8b8
 8014a00:	461c      	mov	r4, r3
 8014a02:	ed99 7a00 	vldr	s14, [r9]
 8014a06:	9b04      	ldr	r3, [sp, #16]
 8014a08:	ed8d 7a12 	vstr	s14, [sp, #72]	; 0x48
 8014a0c:	ed83 7a00 	vstr	s14, [r3]
 8014a10:	e9da 010a 	ldrd	r0, r1, [sl, #40]	; 0x28
 8014a14:	f7ec f8d0 	bl	8000bb8 <__aeabi_d2f>
 8014a18:	ed94 6a00 	vldr	s12, [r4]
 8014a1c:	9004      	str	r0, [sp, #16]
 8014a1e:	ed89 6a00 	vstr	s12, [r9]
 8014a22:	e9da 0108 	ldrd	r0, r1, [sl, #32]
 8014a26:	ed8d 6a0a 	vstr	s12, [sp, #40]	; 0x28
 8014a2a:	f7ec f8c5 	bl	8000bb8 <__aeabi_d2f>
 8014a2e:	edd7 7a00 	vldr	s15, [r7]
 8014a32:	9001      	str	r0, [sp, #4]
 8014a34:	edc4 7a00 	vstr	s15, [r4]
 8014a38:	e9da 0106 	ldrd	r0, r1, [sl, #24]
 8014a3c:	edcd 7a06 	vstr	s15, [sp, #24]
 8014a40:	f7ec f8ba 	bl	8000bb8 <__aeabi_d2f>
 8014a44:	eddd 7a06 	vldr	s15, [sp, #24]
 8014a48:	ed9d 6a0a 	vldr	s12, [sp, #40]	; 0x28
 8014a4c:	edd6 6a00 	vldr	s13, [r6]
 8014a50:	ee07 0a10 	vmov	s14, r0
 8014a54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014a58:	ed9d 7a01 	vldr	s14, [sp, #4]
 8014a5c:	edc7 6a00 	vstr	s13, [r7]
 8014a60:	eee7 7a06 	vfma.f32	s15, s14, s12
 8014a64:	e9da 0104 	ldrd	r0, r1, [sl, #16]
 8014a68:	edcd 6a06 	vstr	s13, [sp, #24]
 8014a6c:	edcd 7a01 	vstr	s15, [sp, #4]
 8014a70:	f7ec f8a2 	bl	8000bb8 <__aeabi_d2f>
 8014a74:	eddd 7a01 	vldr	s15, [sp, #4]
 8014a78:	eddd 6a06 	vldr	s13, [sp, #24]
 8014a7c:	ee07 0a10 	vmov	s14, r0
 8014a80:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014a84:	e9da 0102 	ldrd	r0, r1, [sl, #8]
 8014a88:	ed9d 7a12 	vldr	s14, [sp, #72]	; 0x48
 8014a8c:	eddd 6a04 	vldr	s13, [sp, #16]
 8014a90:	ed86 8a00 	vstr	s16, [r6]
 8014a94:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014a98:	edcd 7a01 	vstr	s15, [sp, #4]
 8014a9c:	f7ec f88c 	bl	8000bb8 <__aeabi_d2f>
 8014aa0:	eddd 7a01 	vldr	s15, [sp, #4]
 8014aa4:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8014aa6:	ee07 0a10 	vmov	s14, r0
 8014aaa:	eee8 7a07 	vfma.f32	s15, s16, s14
 8014aae:	2200      	movs	r2, #0
 8014ab0:	2300      	movs	r3, #0
 8014ab2:	edc1 7a00 	vstr	s15, [r1]
 8014ab6:	f50d 61d7 	add.w	r1, sp, #1720	; 0x6b8
 8014aba:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014abe:	eeb0 8a67 	vmov.f32	s16, s15
 8014ac2:	f7ec f81d 	bl	8000b00 <__aeabi_dcmple>
 8014ac6:	2800      	cmp	r0, #0
 8014ac8:	f040 834a 	bne.w	8015160 <m_kalman_3gyro.isra.6.constprop.36+0x12c8>
 8014acc:	f50d 61d7 	add.w	r1, sp, #1720	; 0x6b8
 8014ad0:	2200      	movs	r2, #0
 8014ad2:	4b4e      	ldr	r3, [pc, #312]	; (8014c0c <m_kalman_3gyro.isra.6.constprop.36+0xd74>)
 8014ad4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014ad8:	f7eb fffe 	bl	8000ad8 <__aeabi_dcmpeq>
 8014adc:	2800      	cmp	r0, #0
 8014ade:	f000 8284 	beq.w	8014fea <m_kalman_3gyro.isra.6.constprop.36+0x1152>
 8014ae2:	eddd 7ab6 	vldr	s15, [sp, #728]	; 0x2d8
 8014ae6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8014aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014aee:	f302 83c0 	bgt.w	8017272 <m_kalman_3gyro.isra.6.constprop.36+0x33da>
 8014af2:	eddd 7ac3 	vldr	s15, [sp, #780]	; 0x30c
 8014af6:	ed9d 7ad0 	vldr	s14, [sp, #832]	; 0x340
 8014afa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014afc:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8014b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b04:	edc3 7a00 	vstr	s15, [r3]
 8014b08:	f142 83bf 	bpl.w	801728a <m_kalman_3gyro.isra.6.constprop.36+0x33f2>
 8014b0c:	ed9d 7adc 	vldr	s14, [sp, #880]	; 0x370
 8014b10:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8014b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b18:	f340 831a 	ble.w	8015150 <m_kalman_3gyro.isra.6.constprop.36+0x12b8>
 8014b1c:	200d      	movs	r0, #13
 8014b1e:	2402      	movs	r4, #2
 8014b20:	2101      	movs	r1, #1
 8014b22:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
 8014b26:	180b      	adds	r3, r1, r0
 8014b28:	085b      	lsrs	r3, r3, #1
 8014b2a:	199a      	adds	r2, r3, r6
 8014b2c:	f50d 65c6 	add.w	r5, sp, #1584	; 0x630
 8014b30:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 8014b34:	f5a5 753c 	sub.w	r5, r5, #752	; 0x2f0
 8014b38:	e00e      	b.n	8014b58 <m_kalman_3gyro.isra.6.constprop.36+0xcc0>
 8014b3a:	18ca      	adds	r2, r1, r3
 8014b3c:	4618      	mov	r0, r3
 8014b3e:	429c      	cmp	r4, r3
 8014b40:	ea4f 0352 	mov.w	r3, r2, lsr #1
 8014b44:	eb03 0206 	add.w	r2, r3, r6
 8014b48:	f50d 65c6 	add.w	r5, sp, #1584	; 0x630
 8014b4c:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 8014b50:	f5a5 753c 	sub.w	r5, r5, #752	; 0x2f0
 8014b54:	f083 810b 	bcs.w	8017d6e <m_kalman_3gyro.isra.6.constprop.36+0x3ed6>
 8014b58:	ed95 7a00 	vldr	s14, [r5]
 8014b5c:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8014b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b64:	dbe9      	blt.n	8014b3a <m_kalman_3gyro.isra.6.constprop.36+0xca2>
 8014b66:	1c5c      	adds	r4, r3, #1
 8014b68:	42a0      	cmp	r0, r4
 8014b6a:	4619      	mov	r1, r3
 8014b6c:	d8db      	bhi.n	8014b26 <m_kalman_3gyro.isra.6.constprop.36+0xc8e>
 8014b6e:	0092      	lsls	r2, r2, #2
 8014b70:	009b      	lsls	r3, r3, #2
 8014b72:	a9d0      	add	r1, sp, #832	; 0x340
 8014b74:	1888      	adds	r0, r1, r2
 8014b76:	4419      	add	r1, r3
 8014b78:	edd0 6a00 	vldr	s13, [r0]
 8014b7c:	ed91 7a00 	vldr	s14, [r1]
 8014b80:	ee78 5a66 	vsub.f32	s11, s16, s13
 8014b84:	ee37 7a66 	vsub.f32	s14, s14, s13
 8014b88:	a9dd      	add	r1, sp, #884	; 0x374
 8014b8a:	ee85 6a87 	vdiv.f32	s12, s11, s14
 8014b8e:	440a      	add	r2, r1
 8014b90:	440b      	add	r3, r1
 8014b92:	ed92 7a00 	vldr	s14, [r2]
 8014b96:	edd3 6a00 	vldr	s13, [r3]
 8014b9a:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8014b9e:	eea6 7a26 	vfma.f32	s14, s12, s13
 8014ba2:	e2d7      	b.n	8015154 <m_kalman_3gyro.isra.6.constprop.36+0x12bc>
 8014ba4:	45a9      	cmp	r9, r5
 8014ba6:	eba9 0205 	sub.w	r2, r9, r5
 8014baa:	eb03 0004 	add.w	r0, r3, r4
 8014bae:	eb0b 010c 	add.w	r1, fp, ip
 8014bb2:	f77f ae51 	ble.w	8014858 <m_kalman_3gyro.isra.6.constprop.36+0x9c0>
 8014bb6:	444c      	add	r4, r9
 8014bb8:	1b64      	subs	r4, r4, r5
 8014bba:	f005 fc19 	bl	801a3f0 <memcpy>
 8014bbe:	464d      	mov	r5, r9
 8014bc0:	e64a      	b.n	8014858 <m_kalman_3gyro.isra.6.constprop.36+0x9c0>
 8014bc2:	464d      	mov	r5, r9
 8014bc4:	e648      	b.n	8014858 <m_kalman_3gyro.isra.6.constprop.36+0x9c0>
 8014bc6:	eddd 6a36 	vldr	s13, [sp, #216]	; 0xd8
 8014bca:	eef4 7a66 	vcmp.f32	s15, s13
 8014bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014bd2:	f43f aea2 	beq.w	801491a <m_kalman_3gyro.isra.6.constprop.36+0xa82>
 8014bd6:	ed9d 6a37 	vldr	s12, [sp, #220]	; 0xdc
 8014bda:	eef4 7a46 	vcmp.f32	s15, s12
 8014bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014be2:	f43f ae9a 	beq.w	801491a <m_kalman_3gyro.isra.6.constprop.36+0xa82>
 8014be6:	eeb4 7a66 	vcmp.f32	s14, s13
 8014bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014bee:	f43f ae94 	beq.w	801491a <m_kalman_3gyro.isra.6.constprop.36+0xa82>
 8014bf2:	eeb4 7a46 	vcmp.f32	s14, s12
 8014bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014bfa:	f43f ae8e 	beq.w	801491a <m_kalman_3gyro.isra.6.constprop.36+0xa82>
 8014bfe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014c02:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8014c06:	eee7 7a26 	vfma.f32	s15, s14, s13
 8014c0a:	e68c      	b.n	8014926 <m_kalman_3gyro.isra.6.constprop.36+0xa8e>
 8014c0c:	3ff00000 	.word	0x3ff00000
 8014c10:	f50d 60d7 	add.w	r0, sp, #1720	; 0x6b8
 8014c14:	ed90 7b00 	vldr	d7, [r0]
 8014c18:	ae47      	add	r6, sp, #284	; 0x11c
 8014c1a:	2101      	movs	r1, #1
 8014c1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014c20:	2500      	movs	r5, #0
 8014c22:	ed8a 7b0e 	vstr	d7, [sl, #56]	; 0x38
 8014c26:	f8ca 4044 	str.w	r4, [sl, #68]	; 0x44
 8014c2a:	f88a 18cd 	strb.w	r1, [sl, #2253]	; 0x8cd
 8014c2e:	f8aa 2030 	strh.w	r2, [sl, #48]	; 0x30
 8014c32:	4621      	mov	r1, r4
 8014c34:	e9ca 4412 	strd	r4, r4, [sl, #72]	; 0x48
 8014c38:	e9ca 4415 	strd	r4, r4, [sl, #84]	; 0x54
 8014c3c:	f8ca 405c 	str.w	r4, [sl, #92]	; 0x5c
 8014c40:	2230      	movs	r2, #48	; 0x30
 8014c42:	edca ca18 	vstr	s25, [sl, #96]	; 0x60
 8014c46:	edca ca14 	vstr	s25, [sl, #80]	; 0x50
 8014c4a:	edca ca10 	vstr	s25, [sl, #64]	; 0x40
 8014c4e:	f10a 0064 	add.w	r0, sl, #100	; 0x64
 8014c52:	6035      	str	r5, [r6, #0]
 8014c54:	6075      	str	r5, [r6, #4]
 8014c56:	60b5      	str	r5, [r6, #8]
 8014c58:	60f5      	str	r5, [r6, #12]
 8014c5a:	9609      	str	r6, [sp, #36]	; 0x24
 8014c5c:	f005 fbd3 	bl	801a406 <memset>
 8014c60:	4bae      	ldr	r3, [pc, #696]	; (8014f1c <m_kalman_3gyro.isra.6.constprop.36+0x1084>)
 8014c62:	f8ca 5094 	str.w	r5, [sl, #148]	; 0x94
 8014c66:	4621      	mov	r1, r4
 8014c68:	f8ca 5098 	str.w	r5, [sl, #152]	; 0x98
 8014c6c:	f8ca 509c 	str.w	r5, [sl, #156]	; 0x9c
 8014c70:	f8ca 30ac 	str.w	r3, [sl, #172]	; 0xac
 8014c74:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8014c78:	edca ca2c 	vstr	s25, [sl, #176]	; 0xb0
 8014c7c:	edca ca2d 	vstr	s25, [sl, #180]	; 0xb4
 8014c80:	f10a 00b8 	add.w	r0, sl, #184	; 0xb8
 8014c84:	f005 fbbf 	bl	801a406 <memset>
 8014c88:	2400      	movs	r4, #0
 8014c8a:	4ba5      	ldr	r3, [pc, #660]	; (8014f20 <m_kalman_3gyro.isra.6.constprop.36+0x1088>)
 8014c8c:	f8ca 30b8 	str.w	r3, [sl, #184]	; 0xb8
 8014c90:	f04f 5b7e 	mov.w	fp, #1065353216	; 0x3f800000
 8014c94:	f04f 3001 	mov.w	r0, #16843009	; 0x1010101
 8014c98:	4621      	mov	r1, r4
 8014c9a:	f8ca 30e0 	str.w	r3, [sl, #224]	; 0xe0
 8014c9e:	f8ca 3108 	str.w	r3, [sl, #264]	; 0x108
 8014ca2:	f8ca 3130 	str.w	r3, [sl, #304]	; 0x130
 8014ca6:	f8ca 3158 	str.w	r3, [sl, #344]	; 0x158
 8014caa:	f8ca 3180 	str.w	r3, [sl, #384]	; 0x180
 8014cae:	f8ca 31a8 	str.w	r3, [sl, #424]	; 0x1a8
 8014cb2:	f8ca 31d0 	str.w	r3, [sl, #464]	; 0x1d0
 8014cb6:	f8ca 31f8 	str.w	r3, [sl, #504]	; 0x1f8
 8014cba:	f8ca 01fc 	str.w	r0, [sl, #508]	; 0x1fc
 8014cbe:	f8ca 0200 	str.w	r0, [sl, #512]	; 0x200
 8014cc2:	f8ca 0204 	str.w	r0, [sl, #516]	; 0x204
 8014cc6:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8014cca:	f8ca 4218 	str.w	r4, [sl, #536]	; 0x218
 8014cce:	f8ca 421c 	str.w	r4, [sl, #540]	; 0x21c
 8014cd2:	f8ca 4220 	str.w	r4, [sl, #544]	; 0x220
 8014cd6:	f8ca 4228 	str.w	r4, [sl, #552]	; 0x228
 8014cda:	f8ca 422c 	str.w	r4, [sl, #556]	; 0x22c
 8014cde:	f8ca 4230 	str.w	r4, [sl, #560]	; 0x230
 8014ce2:	f8ca 423c 	str.w	r4, [sl, #572]	; 0x23c
 8014ce6:	f8ca b234 	str.w	fp, [sl, #564]	; 0x234
 8014cea:	f8ca b224 	str.w	fp, [sl, #548]	; 0x224
 8014cee:	f8ca b214 	str.w	fp, [sl, #532]	; 0x214
 8014cf2:	f8ca 4240 	str.w	r4, [sl, #576]	; 0x240
 8014cf6:	f8ca 4244 	str.w	r4, [sl, #580]	; 0x244
 8014cfa:	f8ca 424c 	str.w	r4, [sl, #588]	; 0x24c
 8014cfe:	f8ca 4250 	str.w	r4, [sl, #592]	; 0x250
 8014d02:	f8ca 4254 	str.w	r4, [sl, #596]	; 0x254
 8014d06:	f8ca b258 	str.w	fp, [sl, #600]	; 0x258
 8014d0a:	f8ca b248 	str.w	fp, [sl, #584]	; 0x248
 8014d0e:	f8ca b238 	str.w	fp, [sl, #568]	; 0x238
 8014d12:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014d14:	f005 fb77 	bl	801a406 <memset>
 8014d18:	f20a 4e24 	addw	lr, sl, #1060	; 0x424
 8014d1c:	f8cd e070 	str.w	lr, [sp, #112]	; 0x70
 8014d20:	f50a 6e85 	add.w	lr, sl, #1064	; 0x428
 8014d24:	f8cd e074 	str.w	lr, [sp, #116]	; 0x74
 8014d28:	f20a 4e2c 	addw	lr, sl, #1068	; 0x42c
 8014d2c:	f8cd e078 	str.w	lr, [sp, #120]	; 0x78
 8014d30:	f50a 6e86 	add.w	lr, sl, #1072	; 0x430
 8014d34:	f8cd e05c 	str.w	lr, [sp, #92]	; 0x5c
 8014d38:	f20a 4e34 	addw	lr, sl, #1076	; 0x434
 8014d3c:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
 8014d40:	f50a 6e87 	add.w	lr, sl, #1080	; 0x438
 8014d44:	f8cd e07c 	str.w	lr, [sp, #124]	; 0x7c
 8014d48:	f20a 4e3c 	addw	lr, sl, #1084	; 0x43c
 8014d4c:	f50a 7375 	add.w	r3, sl, #980	; 0x3d4
 8014d50:	f8cd e044 	str.w	lr, [sp, #68]	; 0x44
 8014d54:	f50a 6e88 	add.w	lr, sl, #1088	; 0x440
 8014d58:	9312      	str	r3, [sp, #72]	; 0x48
 8014d5a:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 8014d5e:	f20a 4e44 	addw	lr, sl, #1092	; 0x444
 8014d62:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8014d64:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 8014d68:	f20a 4004 	addw	r0, sl, #1028	; 0x404
 8014d6c:	f50a 6582 	add.w	r5, sl, #1040	; 0x410
 8014d70:	f50a 6e89 	add.w	lr, sl, #1096	; 0x448
 8014d74:	2600      	movs	r6, #0
 8014d76:	9013      	str	r0, [sp, #76]	; 0x4c
 8014d78:	9514      	str	r5, [sp, #80]	; 0x50
 8014d7a:	f20a 4014 	addw	r0, sl, #1044	; 0x414
 8014d7e:	f50a 6583 	add.w	r5, sl, #1048	; 0x418
 8014d82:	f20a 4c1c 	addw	ip, sl, #1052	; 0x41c
 8014d86:	f8cd e060 	str.w	lr, [sp, #96]	; 0x60
 8014d8a:	f20a 4e4c 	addw	lr, sl, #1100	; 0x44c
 8014d8e:	f8ca 43d4 	str.w	r4, [sl, #980]	; 0x3d4
 8014d92:	f8ca 63c4 	str.w	r6, [sl, #964]	; 0x3c4
 8014d96:	f8ca 63c8 	str.w	r6, [sl, #968]	; 0x3c8
 8014d9a:	f8ca 63cc 	str.w	r6, [sl, #972]	; 0x3cc
 8014d9e:	f8ca 63d0 	str.w	r6, [sl, #976]	; 0x3d0
 8014da2:	9015      	str	r0, [sp, #84]	; 0x54
 8014da4:	607c      	str	r4, [r7, #4]
 8014da6:	60bc      	str	r4, [r7, #8]
 8014da8:	9516      	str	r5, [sp, #88]	; 0x58
 8014daa:	f8cd c06c 	str.w	ip, [sp, #108]	; 0x6c
 8014dae:	f8cd e03c 	str.w	lr, [sp, #60]	; 0x3c
 8014db2:	f8ca 43e0 	str.w	r4, [sl, #992]	; 0x3e0
 8014db6:	f8ca 43e4 	str.w	r4, [sl, #996]	; 0x3e4
 8014dba:	f8ca 43e8 	str.w	r4, [sl, #1000]	; 0x3e8
 8014dbe:	f8ca 43ec 	str.w	r4, [sl, #1004]	; 0x3ec
 8014dc2:	f8ca 43f0 	str.w	r4, [sl, #1008]	; 0x3f0
 8014dc6:	f8ca 43f4 	str.w	r4, [sl, #1012]	; 0x3f4
 8014dca:	f8ca 43f8 	str.w	r4, [sl, #1016]	; 0x3f8
 8014dce:	f8ca 43fc 	str.w	r4, [sl, #1020]	; 0x3fc
 8014dd2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014dd4:	f8ca 4400 	str.w	r4, [sl, #1024]	; 0x400
 8014dd8:	f50a 6881 	add.w	r8, sl, #1032	; 0x408
 8014ddc:	601e      	str	r6, [r3, #0]
 8014dde:	f20a 490c 	addw	r9, sl, #1036	; 0x40c
 8014de2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014de4:	f8c8 6000 	str.w	r6, [r8]
 8014de8:	f8c9 6000 	str.w	r6, [r9]
 8014dec:	601e      	str	r6, [r3, #0]
 8014dee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014df0:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 8014df2:	601e      	str	r6, [r3, #0]
 8014df4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8014df6:	601e      	str	r6, [r3, #0]
 8014df8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014dfa:	f50a 6084 	add.w	r0, sl, #1056	; 0x420
 8014dfe:	601e      	str	r6, [r3, #0]
 8014e00:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8014e02:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
 8014e06:	f8c0 c000 	str.w	ip, [r0]
 8014e0a:	601e      	str	r6, [r3, #0]
 8014e0c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8014e0e:	603e      	str	r6, [r7, #0]
 8014e10:	601e      	str	r6, [r3, #0]
 8014e12:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014e14:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8014e16:	601e      	str	r6, [r3, #0]
 8014e18:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014e1a:	603e      	str	r6, [r7, #0]
 8014e1c:	601e      	str	r6, [r3, #0]
 8014e1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014e20:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8014e22:	f8c3 b000 	str.w	fp, [r3]
 8014e26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014e28:	ed87 8a00 	vstr	s16, [r7]
 8014e2c:	601e      	str	r6, [r3, #0]
 8014e2e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8014e30:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8014e32:	f8c3 b000 	str.w	fp, [r3]
 8014e36:	2532      	movs	r5, #50	; 0x32
 8014e38:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8014e3a:	603e      	str	r6, [r7, #0]
 8014e3c:	f8ca 4450 	str.w	r4, [sl, #1104]	; 0x450
 8014e40:	f8ca 4454 	str.w	r4, [sl, #1108]	; 0x454
 8014e44:	f8ca 445c 	str.w	r4, [sl, #1116]	; 0x45c
 8014e48:	f8ca 5458 	str.w	r5, [sl, #1112]	; 0x458
 8014e4c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014e50:	ab74      	add	r3, sp, #464	; 0x1d0
 8014e52:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8014e56:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014e58:	f8d3 b000 	ldr.w	fp, [r3]
 8014e5c:	f8d3 e004 	ldr.w	lr, [r3, #4]
 8014e60:	f8d3 c008 	ldr.w	ip, [r3, #8]
 8014e64:	ca07      	ldmia	r2, {r0, r1, r2}
 8014e66:	ac77      	add	r4, sp, #476	; 0x1dc
 8014e68:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8014e6c:	9a08      	ldr	r2, [sp, #32]
 8014e6e:	ca07      	ldmia	r2, {r0, r1, r2}
 8014e70:	ac7a      	add	r4, sp, #488	; 0x1e8
 8014e72:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8014e76:	68de      	ldr	r6, [r3, #12]
 8014e78:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8014e7a:	691d      	ldr	r5, [r3, #16]
 8014e7c:	695c      	ldr	r4, [r3, #20]
 8014e7e:	6998      	ldr	r0, [r3, #24]
 8014e80:	69d9      	ldr	r1, [r3, #28]
 8014e82:	6a1a      	ldr	r2, [r3, #32]
 8014e84:	f8cd 9010 	str.w	r9, [sp, #16]
 8014e88:	463b      	mov	r3, r7
 8014e8a:	46c1      	mov	r9, r8
 8014e8c:	f507 6787 	add.w	r7, r7, #1080	; 0x438
 8014e90:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8014e94:	9735      	str	r7, [sp, #212]	; 0xd4
 8014e96:	f8c3 b000 	str.w	fp, [r3]
 8014e9a:	f8c3 e004 	str.w	lr, [r3, #4]
 8014e9e:	f8c3 c008 	str.w	ip, [r3, #8]
 8014ea2:	60de      	str	r6, [r3, #12]
 8014ea4:	611d      	str	r5, [r3, #16]
 8014ea6:	615c      	str	r4, [r3, #20]
 8014ea8:	6198      	str	r0, [r3, #24]
 8014eaa:	61d9      	str	r1, [r3, #28]
 8014eac:	621a      	str	r2, [r3, #32]
 8014eae:	3324      	adds	r3, #36	; 0x24
 8014eb0:	42bb      	cmp	r3, r7
 8014eb2:	d1f0      	bne.n	8014e96 <m_kalman_3gyro.isra.6.constprop.36+0xffe>
 8014eb4:	f8dd 36c0 	ldr.w	r3, [sp, #1728]	; 0x6c0
 8014eb8:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8014ebc:	681a      	ldr	r2, [r3, #0]
 8014ebe:	ed9d ca40 	vldr	s24, [sp, #256]	; 0x100
 8014ec2:	eddd ba3f 	vldr	s23, [sp, #252]	; 0xfc
 8014ec6:	eddd 9a3e 	vldr	s19, [sp, #248]	; 0xf8
 8014eca:	ed9d ba41 	vldr	s22, [sp, #260]	; 0x104
 8014ece:	eddd aa42 	vldr	s21, [sp, #264]	; 0x108
 8014ed2:	ed9d aa43 	vldr	s20, [sp, #268]	; 0x10c
 8014ed6:	f60a 0398 	addw	r3, sl, #2200	; 0x898
 8014eda:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8014ede:	601a      	str	r2, [r3, #0]
 8014ee0:	f8dd 36c0 	ldr.w	r3, [sp, #1728]	; 0x6c0
 8014ee4:	685a      	ldr	r2, [r3, #4]
 8014ee6:	f60a 039c 	addw	r3, sl, #2204	; 0x89c
 8014eea:	46c8      	mov	r8, r9
 8014eec:	601a      	str	r2, [r3, #0]
 8014eee:	f8dd 36c0 	ldr.w	r3, [sp, #1728]	; 0x6c0
 8014ef2:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8014ef6:	6898      	ldr	r0, [r3, #8]
 8014ef8:	f50a 620a 	add.w	r2, sl, #2208	; 0x8a0
 8014efc:	2300      	movs	r3, #0
 8014efe:	6010      	str	r0, [r2, #0]
 8014f00:	f88a 38a4 	strb.w	r3, [sl, #2212]	; 0x8a4
 8014f04:	f8ca 38a6 	str.w	r3, [sl, #2214]	; 0x8a6
 8014f08:	f88a 38ad 	strb.w	r3, [sl, #2221]	; 0x8ad
 8014f0c:	f88a 38ae 	strb.w	r3, [sl, #2222]	; 0x8ae
 8014f10:	f8ca 38b0 	str.w	r3, [sl, #2224]	; 0x8b0
 8014f14:	f8aa 18aa 	strh.w	r1, [sl, #2218]	; 0x8aa
 8014f18:	f7ff b8f8 	b.w	801410c <m_kalman_3gyro.isra.6.constprop.36+0x274>
 8014f1c:	3f666666 	.word	0x3f666666
 8014f20:	40a00000 	.word	0x40a00000
 8014f24:	ed9a 7b02 	vldr	d7, [sl, #8]
 8014f28:	f50a 620c 	add.w	r2, sl, #2240	; 0x8c0
 8014f2c:	4614      	mov	r4, r2
 8014f2e:	2301      	movs	r3, #1
 8014f30:	f60a 06b8 	addw	r6, sl, #2232	; 0x8b8
 8014f34:	f60a 07bc 	addw	r7, sl, #2236	; 0x8bc
 8014f38:	e9da 0104 	ldrd	r0, r1, [sl, #16]
 8014f3c:	f88a 38ce 	strb.w	r3, [sl, #2254]	; 0x8ce
 8014f40:	9201      	str	r2, [sp, #4]
 8014f42:	ed86 8a00 	vstr	s16, [r6]
 8014f46:	e9da 2306 	ldrd	r2, r3, [sl, #24]
 8014f4a:	ed87 8a00 	vstr	s16, [r7]
 8014f4e:	ed84 8a00 	vstr	s16, [r4]
 8014f52:	ed8d 7b06 	vstr	d7, [sp, #24]
 8014f56:	f60a 09c4 	addw	r9, sl, #2244	; 0x8c4
 8014f5a:	f7eb f99f 	bl	800029c <__adddf3>
 8014f5e:	f60a 03c8 	addw	r3, sl, #2248	; 0x8c8
 8014f62:	461c      	mov	r4, r3
 8014f64:	9304      	str	r3, [sp, #16]
 8014f66:	ed89 8a00 	vstr	s16, [r9]
 8014f6a:	e9da 2308 	ldrd	r2, r3, [sl, #32]
 8014f6e:	f7eb f995 	bl	800029c <__adddf3>
 8014f72:	e9da 230a 	ldrd	r2, r3, [sl, #40]	; 0x28
 8014f76:	ed84 8a00 	vstr	s16, [r4]
 8014f7a:	f7eb f98f 	bl	800029c <__adddf3>
 8014f7e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014f82:	f7eb f98b 	bl	800029c <__adddf3>
 8014f86:	4602      	mov	r2, r0
 8014f88:	460b      	mov	r3, r1
 8014f8a:	2000      	movs	r0, #0
 8014f8c:	4973      	ldr	r1, [pc, #460]	; (801515c <m_kalman_3gyro.isra.6.constprop.36+0x12c4>)
 8014f8e:	f7eb fc65 	bl	800085c <__aeabi_ddiv>
 8014f92:	4604      	mov	r4, r0
 8014f94:	460d      	mov	r5, r1
 8014f96:	4602      	mov	r2, r0
 8014f98:	460b      	mov	r3, r1
 8014f9a:	e9da 0102 	ldrd	r0, r1, [sl, #8]
 8014f9e:	f7eb fb33 	bl	8000608 <__aeabi_dmul>
 8014fa2:	4622      	mov	r2, r4
 8014fa4:	462b      	mov	r3, r5
 8014fa6:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8014faa:	e9da 0104 	ldrd	r0, r1, [sl, #16]
 8014fae:	f7eb fb2b 	bl	8000608 <__aeabi_dmul>
 8014fb2:	4622      	mov	r2, r4
 8014fb4:	462b      	mov	r3, r5
 8014fb6:	e9ca 0104 	strd	r0, r1, [sl, #16]
 8014fba:	e9da 0106 	ldrd	r0, r1, [sl, #24]
 8014fbe:	f7eb fb23 	bl	8000608 <__aeabi_dmul>
 8014fc2:	4622      	mov	r2, r4
 8014fc4:	462b      	mov	r3, r5
 8014fc6:	e9ca 0106 	strd	r0, r1, [sl, #24]
 8014fca:	e9da 0108 	ldrd	r0, r1, [sl, #32]
 8014fce:	f7eb fb1b 	bl	8000608 <__aeabi_dmul>
 8014fd2:	4622      	mov	r2, r4
 8014fd4:	e9ca 0108 	strd	r0, r1, [sl, #32]
 8014fd8:	462b      	mov	r3, r5
 8014fda:	e9da 010a 	ldrd	r0, r1, [sl, #40]	; 0x28
 8014fde:	f7eb fb13 	bl	8000608 <__aeabi_dmul>
 8014fe2:	9c01      	ldr	r4, [sp, #4]
 8014fe4:	e9ca 010a 	strd	r0, r1, [sl, #40]	; 0x28
 8014fe8:	e50b      	b.n	8014a02 <m_kalman_3gyro.isra.6.constprop.36+0xb6a>
 8014fea:	eddd 5ad1 	vldr	s11, [sp, #836]	; 0x344
 8014fee:	ed9d 6ab8 	vldr	s12, [sp, #736]	; 0x2e0
 8014ff2:	eddd 7ad2 	vldr	s15, [sp, #840]	; 0x348
 8014ff6:	eddd 4ab9 	vldr	s9, [sp, #740]	; 0x2e4
 8014ffa:	ed9d 5ad3 	vldr	s10, [sp, #844]	; 0x34c
 8014ffe:	eddd 6ab6 	vldr	s13, [sp, #728]	; 0x2d8
 8015002:	ed9d 7ad0 	vldr	s14, [sp, #832]	; 0x340
 8015006:	ed9d 4ab7 	vldr	s8, [sp, #732]	; 0x2dc
 801500a:	ee65 5aa8 	vmul.f32	s11, s11, s17
 801500e:	ee26 6a28 	vmul.f32	s12, s12, s17
 8015012:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8015016:	edcd 5ad1 	vstr	s11, [sp, #836]	; 0x344
 801501a:	ed8d 6ab8 	vstr	s12, [sp, #736]	; 0x2e0
 801501e:	eddd 5aba 	vldr	s11, [sp, #744]	; 0x2e8
 8015022:	ed9d 6ad4 	vldr	s12, [sp, #848]	; 0x350
 8015026:	edcd 7ad2 	vstr	s15, [sp, #840]	; 0x348
 801502a:	eddd 7abb 	vldr	s15, [sp, #748]	; 0x2ec
 801502e:	ee64 4aa8 	vmul.f32	s9, s9, s17
 8015032:	ee25 5a28 	vmul.f32	s10, s10, s17
 8015036:	ee65 5aa8 	vmul.f32	s11, s11, s17
 801503a:	ee26 6a28 	vmul.f32	s12, s12, s17
 801503e:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8015042:	edcd 4ab9 	vstr	s9, [sp, #740]	; 0x2e4
 8015046:	ed8d 5ad3 	vstr	s10, [sp, #844]	; 0x34c
 801504a:	eddd 4ad5 	vldr	s9, [sp, #852]	; 0x354
 801504e:	ed9d 5abc 	vldr	s10, [sp, #752]	; 0x2f0
 8015052:	edcd 5aba 	vstr	s11, [sp, #744]	; 0x2e8
 8015056:	ed8d 6ad4 	vstr	s12, [sp, #848]	; 0x350
 801505a:	eddd 5ad6 	vldr	s11, [sp, #856]	; 0x358
 801505e:	ed9d 6abd 	vldr	s12, [sp, #756]	; 0x2f4
 8015062:	edcd 7abb 	vstr	s15, [sp, #748]	; 0x2ec
 8015066:	eddd 7ad7 	vldr	s15, [sp, #860]	; 0x35c
 801506a:	ee68 6aa6 	vmul.f32	s13, s17, s13
 801506e:	ee24 4a28 	vmul.f32	s8, s8, s17
 8015072:	ee64 4aa8 	vmul.f32	s9, s9, s17
 8015076:	ee25 5a28 	vmul.f32	s10, s10, s17
 801507a:	ee65 5aa8 	vmul.f32	s11, s11, s17
 801507e:	ee26 6a28 	vmul.f32	s12, s12, s17
 8015082:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8015086:	ee28 7a87 	vmul.f32	s14, s17, s14
 801508a:	edcd 4ad5 	vstr	s9, [sp, #852]	; 0x354
 801508e:	ed8d 5abc 	vstr	s10, [sp, #752]	; 0x2f0
 8015092:	edcd 5ad6 	vstr	s11, [sp, #856]	; 0x358
 8015096:	ed8d 6abd 	vstr	s12, [sp, #756]	; 0x2f4
 801509a:	edcd 7ad7 	vstr	s15, [sp, #860]	; 0x35c
 801509e:	edcd 6ab6 	vstr	s13, [sp, #728]	; 0x2d8
 80150a2:	ed8d 7ad0 	vstr	s14, [sp, #832]	; 0x340
 80150a6:	ed8d 4ab7 	vstr	s8, [sp, #732]	; 0x2dc
 80150aa:	ed9d 4abe 	vldr	s8, [sp, #760]	; 0x2f8
 80150ae:	eddd 5ad8 	vldr	s11, [sp, #864]	; 0x360
 80150b2:	ed9d 6abf 	vldr	s12, [sp, #764]	; 0x2fc
 80150b6:	eddd 7ad9 	vldr	s15, [sp, #868]	; 0x364
 80150ba:	eddd 4ac0 	vldr	s9, [sp, #768]	; 0x300
 80150be:	ed9d 5ada 	vldr	s10, [sp, #872]	; 0x368
 80150c2:	ee65 5aa8 	vmul.f32	s11, s11, s17
 80150c6:	ee26 6a28 	vmul.f32	s12, s12, s17
 80150ca:	ee67 7aa8 	vmul.f32	s15, s15, s17
 80150ce:	ee64 4aa8 	vmul.f32	s9, s9, s17
 80150d2:	edcd 5ad8 	vstr	s11, [sp, #864]	; 0x360
 80150d6:	ed8d 6abf 	vstr	s12, [sp, #764]	; 0x2fc
 80150da:	eddd 5ac1 	vldr	s11, [sp, #772]	; 0x304
 80150de:	ed9d 6adb 	vldr	s12, [sp, #876]	; 0x36c
 80150e2:	edcd 7ad9 	vstr	s15, [sp, #868]	; 0x364
 80150e6:	edcd 4ac0 	vstr	s9, [sp, #768]	; 0x300
 80150ea:	eddd 7ac2 	vldr	s15, [sp, #776]	; 0x308
 80150ee:	eddd 4adc 	vldr	s9, [sp, #880]	; 0x370
 80150f2:	ee24 4a28 	vmul.f32	s8, s8, s17
 80150f6:	ee25 5a28 	vmul.f32	s10, s10, s17
 80150fa:	ee65 5aa8 	vmul.f32	s11, s11, s17
 80150fe:	ee26 6a28 	vmul.f32	s12, s12, s17
 8015102:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8015106:	eeb4 8ae6 	vcmpe.f32	s16, s13
 801510a:	ee68 8aa4 	vmul.f32	s17, s17, s9
 801510e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015112:	ed8d 4abe 	vstr	s8, [sp, #760]	; 0x2f8
 8015116:	ed8d 5ada 	vstr	s10, [sp, #872]	; 0x368
 801511a:	edcd 5ac1 	vstr	s11, [sp, #772]	; 0x304
 801511e:	ed8d 6adb 	vstr	s12, [sp, #876]	; 0x36c
 8015122:	edcd 7ac2 	vstr	s15, [sp, #776]	; 0x308
 8015126:	edcd 8adc 	vstr	s17, [sp, #880]	; 0x370
 801512a:	f302 8098 	bgt.w	801725e <m_kalman_3gyro.isra.6.constprop.36+0x33c6>
 801512e:	eddd 7ac3 	vldr	s15, [sp, #780]	; 0x30c
 8015132:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015134:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8015138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801513c:	edc3 7a00 	vstr	s15, [r3]
 8015140:	f342 80a3 	ble.w	801728a <m_kalman_3gyro.isra.6.constprop.36+0x33f2>
 8015144:	eef4 8ac8 	vcmpe.f32	s17, s16
 8015148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801514c:	f302 8471 	bgt.w	8017a32 <m_kalman_3gyro.isra.6.constprop.36+0x3b9a>
 8015150:	ed9d 7ae9 	vldr	s14, [sp, #932]	; 0x3a4
 8015154:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015156:	ed83 7a00 	vstr	s14, [r3]
 801515a:	e009      	b.n	8015170 <m_kalman_3gyro.isra.6.constprop.36+0x12d8>
 801515c:	3ff00000 	.word	0x3ff00000
 8015160:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015162:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015166:	edc3 7a00 	vstr	s15, [r3]
 801516a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801516c:	edc3 7a00 	vstr	s15, [r3]
 8015170:	4bd1      	ldr	r3, [pc, #836]	; (80154b8 <m_kalman_3gyro.isra.6.constprop.36+0x1620>)
 8015172:	ed9a 7a2d 	vldr	s14, [sl, #180]	; 0xb4
 8015176:	edd3 8a00 	vldr	s17, [r3]
 801517a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801517c:	f8df 934c 	ldr.w	r9, [pc, #844]	; 80154cc <m_kalman_3gyro.isra.6.constprop.36+0x1634>
 8015180:	edc3 7a00 	vstr	s15, [r3]
 8015184:	ee78 7ac7 	vsub.f32	s15, s17, s14
 8015188:	eef0 7ae7 	vabs.f32	s15, s15
 801518c:	ee17 0a90 	vmov	r0, s15
 8015190:	f7eb f9e2 	bl	8000558 <__aeabi_f2d>
 8015194:	f006 f8e8 	bl	801b368 <floor>
 8015198:	f7eb fce6 	bl	8000b68 <__aeabi_d2iz>
 801519c:	f8dd 36d4 	ldr.w	r3, [sp, #1748]	; 0x6d4
 80151a0:	7018      	strb	r0, [r3, #0]
 80151a2:	ed9a 7a2d 	vldr	s14, [sl, #180]	; 0xb4
 80151a6:	edda 7a2b 	vldr	s15, [sl, #172]	; 0xac
 80151aa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80151ac:	ee38 7ac7 	vsub.f32	s14, s17, s14
 80151b0:	ee7d 7a67 	vsub.f32	s15, s26, s15
 80151b4:	eeb0 7ac7 	vabs.f32	s14, s14
 80151b8:	eef0 7ae7 	vabs.f32	s15, s15
 80151bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80151c0:	ed89 7a00 	vstr	s14, [r9]
 80151c4:	edc3 7a00 	vstr	s15, [r3]
 80151c8:	ee17 0a90 	vmov	r0, s15
 80151cc:	edcd 7a01 	vstr	s15, [sp, #4]
 80151d0:	f7eb f9c2 	bl	8000558 <__aeabi_f2d>
 80151d4:	a3b6      	add	r3, pc, #728	; (adr r3, 80154b0 <m_kalman_3gyro.isra.6.constprop.36+0x1618>)
 80151d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151da:	f7eb fca5 	bl	8000b28 <__aeabi_dcmpgt>
 80151de:	2800      	cmp	r0, #0
 80151e0:	f001 82ae 	beq.w	8016740 <m_kalman_3gyro.isra.6.constprop.36+0x28a8>
 80151e4:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 80154bc <m_kalman_3gyro.isra.6.constprop.36+0x1624>
 80151e8:	eddd 7a01 	vldr	s15, [sp, #4]
 80151ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80151f0:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80151f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80151f8:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80151fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015204:	f301 86af 	bgt.w	8016f66 <m_kalman_3gyro.isra.6.constprop.36+0x30ce>
 8015208:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801520c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015210:	ee17 0a90 	vmov	r0, s15
 8015214:	f7eb f9a0 	bl	8000558 <__aeabi_f2d>
 8015218:	4604      	mov	r4, r0
 801521a:	460d      	mov	r5, r1
 801521c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015220:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8015224:	eef0 7ae7 	vabs.f32	s15, s15
 8015228:	ee17 0a90 	vmov	r0, s15
 801522c:	f7eb f994 	bl	8000558 <__aeabi_f2d>
 8015230:	2200      	movs	r2, #0
 8015232:	4ba3      	ldr	r3, [pc, #652]	; (80154c0 <m_kalman_3gyro.isra.6.constprop.36+0x1628>)
 8015234:	f7eb f830 	bl	8000298 <__aeabi_dsub>
 8015238:	4622      	mov	r2, r4
 801523a:	462b      	mov	r3, r5
 801523c:	4606      	mov	r6, r0
 801523e:	460f      	mov	r7, r1
 8015240:	f7eb fc68 	bl	8000b14 <__aeabi_dcmpge>
 8015244:	b908      	cbnz	r0, 801524a <m_kalman_3gyro.isra.6.constprop.36+0x13b2>
 8015246:	4626      	mov	r6, r4
 8015248:	462f      	mov	r7, r5
 801524a:	4630      	mov	r0, r6
 801524c:	4639      	mov	r1, r7
 801524e:	f7eb fcb3 	bl	8000bb8 <__aeabi_d2f>
 8015252:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015254:	6018      	str	r0, [r3, #0]
 8015256:	f89a 3031 	ldrb.w	r3, [sl, #49]	; 0x31
 801525a:	f10a 0040 	add.w	r0, sl, #64	; 0x40
 801525e:	9001      	str	r0, [sp, #4]
 8015260:	b17b      	cbz	r3, 8015282 <m_kalman_3gyro.isra.6.constprop.36+0x13ea>
 8015262:	f89a 3030 	ldrb.w	r3, [sl, #48]	; 0x30
 8015266:	b963      	cbnz	r3, 8015282 <m_kalman_3gyro.isra.6.constprop.36+0x13ea>
 8015268:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801526a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801526e:	ee6f 7aa7 	vmul.f32	s15, s31, s15
 8015272:	ed93 7a00 	vldr	s14, [r3]
 8015276:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801527a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801527e:	f101 879b 	bmi.w	80171b8 <m_kalman_3gyro.isra.6.constprop.36+0x3320>
 8015282:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015284:	edd3 7a00 	vldr	s15, [r3]
 8015288:	eef5 7a40 	vcmp.f32	s15, #0.0
 801528c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015290:	f04f 0400 	mov.w	r4, #0
 8015294:	d10f      	bne.n	80152b6 <m_kalman_3gyro.isra.6.constprop.36+0x141e>
 8015296:	edd3 7a01 	vldr	s15, [r3, #4]
 801529a:	eef5 7a40 	vcmp.f32	s15, #0.0
 801529e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152a2:	4619      	mov	r1, r3
 80152a4:	d107      	bne.n	80152b6 <m_kalman_3gyro.isra.6.constprop.36+0x141e>
 80152a6:	edd3 7a02 	vldr	s15, [r3, #8]
 80152aa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80152ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152b2:	f001 872a 	beq.w	801710a <m_kalman_3gyro.isra.6.constprop.36+0x3272>
 80152b6:	f50d 61d6 	add.w	r1, sp, #1712	; 0x6b0
 80152ba:	2200      	movs	r2, #0
 80152bc:	2300      	movs	r3, #0
 80152be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80152c2:	f7eb fc09 	bl	8000ad8 <__aeabi_dcmpeq>
 80152c6:	2800      	cmp	r0, #0
 80152c8:	d144      	bne.n	8015354 <m_kalman_3gyro.isra.6.constprop.36+0x14bc>
 80152ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80152cc:	ee7f faaf 	vadd.f32	s31, s31, s31
 80152d0:	edd3 7a00 	vldr	s15, [r3]
 80152d4:	eef4 7aef 	vcmpe.f32	s15, s31
 80152d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152dc:	d53a      	bpl.n	8015354 <m_kalman_3gyro.isra.6.constprop.36+0x14bc>
 80152de:	eddd 7a23 	vldr	s15, [sp, #140]	; 0x8c
 80152e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80152e4:	edca 7a10 	vstr	s15, [sl, #64]	; 0x40
 80152e8:	eddd 7a24 	vldr	s15, [sp, #144]	; 0x90
 80152ec:	ed8a ba12 	vstr	s22, [sl, #72]	; 0x48
 80152f0:	edca 7a13 	vstr	s15, [sl, #76]	; 0x4c
 80152f4:	eddd 7a25 	vldr	s15, [sp, #148]	; 0x94
 80152f8:	edca aa15 	vstr	s21, [sl, #84]	; 0x54
 80152fc:	ed8a aa18 	vstr	s20, [sl, #96]	; 0x60
 8015300:	ed8a ca11 	vstr	s24, [sl, #68]	; 0x44
 8015304:	edca ba14 	vstr	s23, [sl, #80]	; 0x50
 8015308:	edca 9a17 	vstr	s19, [sl, #92]	; 0x5c
 801530c:	edca 7a16 	vstr	s15, [sl, #88]	; 0x58
 8015310:	9801      	ldr	r0, [sp, #4]
 8015312:	f7fa fc61 	bl	800fbd8 <m_dcm2q_eml>
 8015316:	f8dd 16dc 	ldr.w	r1, [sp, #1756]	; 0x6dc
 801531a:	2300      	movs	r3, #0
 801531c:	2201      	movs	r2, #1
 801531e:	700a      	strb	r2, [r1, #0]
 8015320:	ed8a da2b 	vstr	s26, [sl, #172]	; 0xac
 8015324:	edca 8a2d 	vstr	s17, [sl, #180]	; 0xb4
 8015328:	f8ca 30b8 	str.w	r3, [sl, #184]	; 0xb8
 801532c:	f8ca 30bc 	str.w	r3, [sl, #188]	; 0xbc
 8015330:	f8ca 30c0 	str.w	r3, [sl, #192]	; 0xc0
 8015334:	f8ca 30dc 	str.w	r3, [sl, #220]	; 0xdc
 8015338:	f8ca 30e0 	str.w	r3, [sl, #224]	; 0xe0
 801533c:	f8ca 30e4 	str.w	r3, [sl, #228]	; 0xe4
 8015340:	f8ca 3100 	str.w	r3, [sl, #256]	; 0x100
 8015344:	f8ca 3104 	str.w	r3, [sl, #260]	; 0x104
 8015348:	f8ca 3108 	str.w	r3, [sl, #264]	; 0x108
 801534c:	f8ca 31a8 	str.w	r3, [sl, #424]	; 0x1a8
 8015350:	f8ca 31f8 	str.w	r3, [sl, #504]	; 0x1f8
 8015354:	2300      	movs	r3, #0
 8015356:	f8ca 3094 	str.w	r3, [sl, #148]	; 0x94
 801535a:	f8ca 3098 	str.w	r3, [sl, #152]	; 0x98
 801535e:	f8ca 309c 	str.w	r3, [sl, #156]	; 0x9c
 8015362:	9901      	ldr	r1, [sp, #4]
 8015364:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015366:	f7fa fab7 	bl	800f8d8 <m_q2dcm_eml>
 801536a:	edda 9a2b 	vldr	s19, [sl, #172]	; 0xac
 801536e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015372:	eee9 7ae9 	vfms.f32	s15, s19, s19
 8015376:	ee17 0a90 	vmov	r0, s15
 801537a:	f7eb f8ed 	bl	8000558 <__aeabi_f2d>
 801537e:	f006 f989 	bl	801b694 <sqrt>
 8015382:	f7eb fc19 	bl	8000bb8 <__aeabi_d2f>
 8015386:	ed9a 3a12 	vldr	s6, [sl, #72]	; 0x48
 801538a:	edda 7a10 	vldr	s15, [sl, #64]	; 0x40
 801538e:	edda 5a15 	vldr	s11, [sl, #84]	; 0x54
 8015392:	edda 2a18 	vldr	s5, [sl, #96]	; 0x60
 8015396:	edda 4a13 	vldr	s9, [sl, #76]	; 0x4c
 801539a:	ed9a 5a16 	vldr	s10, [sl, #88]	; 0x58
 801539e:	eddd 3a57 	vldr	s7, [sp, #348]	; 0x15c
 80153a2:	ed9d 4a58 	vldr	s8, [sp, #352]	; 0x160
 80153a6:	ed8a da22 	vstr	s26, [sl, #136]	; 0x88
 80153aa:	ee06 0a10 	vmov	s12, r0
 80153ae:	ee29 7a83 	vmul.f32	s14, s19, s6
 80153b2:	ee69 6aa5 	vmul.f32	s13, s19, s11
 80153b6:	eea6 7a27 	vfma.f32	s14, s12, s15
 80153ba:	ee69 7aa2 	vmul.f32	s15, s19, s5
 80153be:	eee6 6a24 	vfma.f32	s13, s12, s9
 80153c2:	eee6 7a05 	vfma.f32	s15, s12, s10
 80153c6:	ee73 3ac7 	vsub.f32	s7, s7, s14
 80153ca:	ed9d 5a5b 	vldr	s10, [sp, #364]	; 0x16c
 80153ce:	eddd 4a59 	vldr	s9, [sp, #356]	; 0x164
 80153d2:	ed8a 7a82 	vstr	s14, [sl, #520]	; 0x208
 80153d6:	ee35 5a65 	vsub.f32	s10, s10, s11
 80153da:	ed9d 6a5a 	vldr	s12, [sp, #360]	; 0x168
 80153de:	eddd 5a5c 	vldr	s11, [sp, #368]	; 0x170
 80153e2:	edca 3a19 	vstr	s7, [sl, #100]	; 0x64
 80153e6:	ed9a 7a2c 	vldr	s14, [sl, #176]	; 0xb0
 80153ea:	eddf 3a36 	vldr	s7, [pc, #216]	; 80154c4 <m_kalman_3gyro.isra.6.constprop.36+0x162c>
 80153ee:	ed8a 9a23 	vstr	s18, [sl, #140]	; 0x8c
 80153f2:	ee34 4a66 	vsub.f32	s8, s8, s13
 80153f6:	ee74 4ae7 	vsub.f32	s9, s9, s15
 80153fa:	ee75 5ae2 	vsub.f32	s11, s11, s5
 80153fe:	ee36 6a43 	vsub.f32	s12, s12, s6
 8015402:	eeb4 7ae3 	vcmpe.f32	s14, s7
 8015406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801540a:	edca 8a24 	vstr	s17, [sl, #144]	; 0x90
 801540e:	edca 6a83 	vstr	s13, [sl, #524]	; 0x20c
 8015412:	ed8a 4a1a 	vstr	s8, [sl, #104]	; 0x68
 8015416:	edca 7a84 	vstr	s15, [sl, #528]	; 0x210
 801541a:	edca 4a1b 	vstr	s9, [sl, #108]	; 0x6c
 801541e:	ed8a 5a1d 	vstr	s10, [sl, #116]	; 0x74
 8015422:	edca 5a1e 	vstr	s11, [sl, #120]	; 0x78
 8015426:	ed8a 6a1c 	vstr	s12, [sl, #112]	; 0x70
 801542a:	f141 8147 	bpl.w	80166bc <m_kalman_3gyro.isra.6.constprop.36+0x2824>
 801542e:	eddf 7a26 	vldr	s15, [pc, #152]	; 80154c8 <m_kalman_3gyro.isra.6.constprop.36+0x1630>
 8015432:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801543a:	f341 813f 	ble.w	80166bc <m_kalman_3gyro.isra.6.constprop.36+0x2824>
 801543e:	ee79 7a47 	vsub.f32	s15, s18, s14
 8015442:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015444:	eef0 7ae7 	vabs.f32	s15, s15
 8015448:	edc3 7a00 	vstr	s15, [r3]
 801544c:	ee7c 7aa7 	vadd.f32	s15, s25, s15
 8015450:	ed9d 7a98 	vldr	s14, [sp, #608]	; 0x260
 8015454:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015456:	eef4 7ac7 	vcmpe.f32	s15, s14
 801545a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801545e:	edc3 7a00 	vstr	s15, [r3]
 8015462:	f341 8167 	ble.w	8016734 <m_kalman_3gyro.isra.6.constprop.36+0x289c>
 8015466:	ed9d 7aa1 	vldr	s14, [sp, #644]	; 0x284
 801546a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801546e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015472:	f102 813d 	bmi.w	80176f0 <m_kalman_3gyro.isra.6.constprop.36+0x3858>
 8015476:	eddd 8aab 	vldr	s17, [sp, #684]	; 0x2ac
 801547a:	ed9d 9ab5 	vldr	s18, [sp, #724]	; 0x2d4
 801547e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015480:	ed9d 7a5d 	vldr	s14, [sp, #372]	; 0x174
 8015484:	edd3 7a00 	vldr	s15, [r3]
 8015488:	eef4 7ac7 	vcmpe.f32	s15, s14
 801548c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015490:	f341 856d 	ble.w	8016f6e <m_kalman_3gyro.isra.6.constprop.36+0x30d6>
 8015494:	ed9d 7a63 	vldr	s14, [sp, #396]	; 0x18c
 8015498:	eef4 7ac7 	vcmpe.f32	s15, s14
 801549c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80154a0:	f142 8150 	bpl.w	8017744 <m_kalman_3gyro.isra.6.constprop.36+0x38ac>
 80154a4:	2007      	movs	r0, #7
 80154a6:	2402      	movs	r4, #2
 80154a8:	2101      	movs	r1, #1
 80154aa:	f06f 4540 	mvn.w	r5, #3221225472	; 0xc0000000
 80154ae:	e021      	b.n	80154f4 <m_kalman_3gyro.isra.6.constprop.36+0x165c>
 80154b0:	9999999a 	.word	0x9999999a
 80154b4:	3fb99999 	.word	0x3fb99999
 80154b8:	20001bec 	.word	0x20001bec
 80154bc:	3dcccccd 	.word	0x3dcccccd
 80154c0:	3fe00000 	.word	0x3fe00000
 80154c4:	3f99999a 	.word	0x3f99999a
 80154c8:	3f4ccccd 	.word	0x3f4ccccd
 80154cc:	20001bfc 	.word	0x20001bfc
 80154d0:	00000000 	.word	0x00000000
 80154d4:	3d088889 	.word	0x3d088889
 80154d8:	42480000 	.word	0x42480000
 80154dc:	3c23d70a 	.word	0x3c23d70a
 80154e0:	ed93 7a00 	vldr	s14, [r3]
 80154e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80154e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80154ec:	bfb8      	it	lt
 80154ee:	4610      	movlt	r0, r2
 80154f0:	f282 80fa 	bge.w	80176e8 <m_kalman_3gyro.isra.6.constprop.36+0x3850>
 80154f4:	1842      	adds	r2, r0, r1
 80154f6:	0852      	lsrs	r2, r2, #1
 80154f8:	1953      	adds	r3, r2, r5
 80154fa:	f50d 66c6 	add.w	r6, sp, #1584	; 0x630
 80154fe:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8015502:	42a0      	cmp	r0, r4
 8015504:	f2a3 43bc 	subw	r3, r3, #1212	; 0x4bc
 8015508:	d8ea      	bhi.n	80154e0 <m_kalman_3gyro.isra.6.constprop.36+0x1648>
 801550a:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 801550e:	3b01      	subs	r3, #1
 8015510:	009b      	lsls	r3, r3, #2
 8015512:	0089      	lsls	r1, r1, #2
 8015514:	aa5d      	add	r2, sp, #372	; 0x174
 8015516:	18d0      	adds	r0, r2, r3
 8015518:	440a      	add	r2, r1
 801551a:	edd0 6a00 	vldr	s13, [r0]
 801551e:	ed92 7a00 	vldr	s14, [r2]
 8015522:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8015526:	ee37 7a66 	vsub.f32	s14, s14, s13
 801552a:	aa64      	add	r2, sp, #400	; 0x190
 801552c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8015530:	4413      	add	r3, r2
 8015532:	4411      	add	r1, r2
 8015534:	edd3 9a00 	vldr	s19, [r3]
 8015538:	edd1 7a00 	vldr	s15, [r1]
 801553c:	ee77 7ae9 	vsub.f32	s15, s15, s19
 8015540:	eee6 9aa7 	vfma.f32	s19, s13, s15
 8015544:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8015546:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8015548:	ed5f 7a1f 	vldr	s15, [pc, #-124]	; 80154d0 <m_kalman_3gyro.isra.6.constprop.36+0x1638>
 801554c:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 801554e:	edca 7af5 	vstr	s15, [sl, #980]	; 0x3d4
 8015552:	462e      	mov	r6, r5
 8015554:	eef0 6a67 	vmov.f32	s13, s15
 8015558:	eeb0 6a67 	vmov.f32	s12, s15
 801555c:	eef0 5a67 	vmov.f32	s11, s15
 8015560:	edca 7af6 	vstr	s15, [sl, #984]	; 0x3d8
 8015564:	edca 7af7 	vstr	s15, [sl, #988]	; 0x3dc
 8015568:	ed95 7a06 	vldr	s14, [r5, #24]
 801556c:	edd3 7a00 	vldr	s15, [r3]
 8015570:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015574:	3524      	adds	r5, #36	; 0x24
 8015576:	ee75 5aa7 	vadd.f32	s11, s11, s15
 801557a:	330c      	adds	r3, #12
 801557c:	edca 5af5 	vstr	s11, [sl, #980]	; 0x3d4
 8015580:	ed15 7a02 	vldr	s14, [r5, #-8]
 8015584:	ed53 7a02 	vldr	s15, [r3, #-8]
 8015588:	ee77 7a67 	vsub.f32	s15, s14, s15
 801558c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8015590:	ed8a 6af6 	vstr	s12, [sl, #984]	; 0x3d8
 8015594:	ed15 7a01 	vldr	s14, [r5, #-4]
 8015598:	ed53 7a01 	vldr	s15, [r3, #-4]
 801559c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80155a0:	42aa      	cmp	r2, r5
 80155a2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80155a6:	edca 6af7 	vstr	s13, [sl, #988]	; 0x3dc
 80155aa:	d1dd      	bne.n	8015568 <m_kalman_3gyro.isra.6.constprop.36+0x16d0>
 80155ac:	ed5f 7a37 	vldr	s15, [pc, #-220]	; 80154d4 <m_kalman_3gyro.isra.6.constprop.36+0x163c>
 80155b0:	9811      	ldr	r0, [sp, #68]	; 0x44
 80155b2:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80155b6:	ee26 6a27 	vmul.f32	s12, s12, s15
 80155ba:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80155be:	edca 5af5 	vstr	s11, [sl, #980]	; 0x3d4
 80155c2:	ed8a 6af6 	vstr	s12, [sl, #984]	; 0x3d8
 80155c6:	edca 6af7 	vstr	s13, [sl, #988]	; 0x3dc
 80155ca:	f50a 6305 	add.w	r3, sl, #2128	; 0x850
 80155ce:	681a      	ldr	r2, [r3, #0]
 80155d0:	6859      	ldr	r1, [r3, #4]
 80155d2:	625a      	str	r2, [r3, #36]	; 0x24
 80155d4:	689a      	ldr	r2, [r3, #8]
 80155d6:	6299      	str	r1, [r3, #40]	; 0x28
 80155d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80155da:	68d9      	ldr	r1, [r3, #12]
 80155dc:	691a      	ldr	r2, [r3, #16]
 80155de:	6319      	str	r1, [r3, #48]	; 0x30
 80155e0:	635a      	str	r2, [r3, #52]	; 0x34
 80155e2:	6959      	ldr	r1, [r3, #20]
 80155e4:	699a      	ldr	r2, [r3, #24]
 80155e6:	6399      	str	r1, [r3, #56]	; 0x38
 80155e8:	63da      	str	r2, [r3, #60]	; 0x3c
 80155ea:	69d9      	ldr	r1, [r3, #28]
 80155ec:	6a1a      	ldr	r2, [r3, #32]
 80155ee:	6419      	str	r1, [r3, #64]	; 0x40
 80155f0:	645a      	str	r2, [r3, #68]	; 0x44
 80155f2:	3b24      	subs	r3, #36	; 0x24
 80155f4:	4298      	cmp	r0, r3
 80155f6:	d1ea      	bne.n	80155ce <m_kalman_3gyro.isra.6.constprop.36+0x1736>
 80155f8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80155fa:	9919      	ldr	r1, [sp, #100]	; 0x64
 80155fc:	6813      	ldr	r3, [r2, #0]
 80155fe:	600b      	str	r3, [r1, #0]
 8015600:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015602:	982b      	ldr	r0, [sp, #172]	; 0xac
 8015604:	680b      	ldr	r3, [r1, #0]
 8015606:	6003      	str	r3, [r0, #0]
 8015608:	9808      	ldr	r0, [sp, #32]
 801560a:	9c20      	ldr	r4, [sp, #128]	; 0x80
 801560c:	6803      	ldr	r3, [r0, #0]
 801560e:	6023      	str	r3, [r4, #0]
 8015610:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8015612:	6853      	ldr	r3, [r2, #4]
 8015614:	6023      	str	r3, [r4, #0]
 8015616:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8015618:	684b      	ldr	r3, [r1, #4]
 801561a:	6023      	str	r3, [r4, #0]
 801561c:	9c21      	ldr	r4, [sp, #132]	; 0x84
 801561e:	6843      	ldr	r3, [r0, #4]
 8015620:	6023      	str	r3, [r4, #0]
 8015622:	6893      	ldr	r3, [r2, #8]
 8015624:	9a3b      	ldr	r2, [sp, #236]	; 0xec
 8015626:	6013      	str	r3, [r2, #0]
 8015628:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 801562a:	688b      	ldr	r3, [r1, #8]
 801562c:	6013      	str	r3, [r2, #0]
 801562e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8015630:	6883      	ldr	r3, [r0, #8]
 8015632:	6013      	str	r3, [r2, #0]
 8015634:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015636:	2b02      	cmp	r3, #2
 8015638:	f001 808c 	beq.w	8016754 <m_kalman_3gyro.isra.6.constprop.36+0x28bc>
 801563c:	eeb4 eaed 	vcmpe.f32	s28, s27
 8015640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015644:	f301 815e 	bgt.w	8016904 <m_kalman_3gyro.isra.6.constprop.36+0x2a6c>
 8015648:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801564a:	2b00      	cmp	r3, #0
 801564c:	f041 8634 	bne.w	80172b8 <m_kalman_3gyro.isra.6.constprop.36+0x3420>
 8015650:	f8da 20a4 	ldr.w	r2, [sl, #164]	; 0xa4
 8015654:	f8da 30a8 	ldr.w	r3, [sl, #168]	; 0xa8
 8015658:	f8ca 2080 	str.w	r2, [sl, #128]	; 0x80
 801565c:	f89a 2030 	ldrb.w	r2, [sl, #48]	; 0x30
 8015660:	f8da 10a0 	ldr.w	r1, [sl, #160]	; 0xa0
 8015664:	f8ca 3084 	str.w	r3, [sl, #132]	; 0x84
 8015668:	2300      	movs	r3, #0
 801566a:	f8ca 107c 	str.w	r1, [sl, #124]	; 0x7c
 801566e:	f8aa 3202 	strh.w	r3, [sl, #514]	; 0x202
 8015672:	f88a 3204 	strb.w	r3, [sl, #516]	; 0x204
 8015676:	f8ca 345c 	str.w	r3, [sl, #1116]	; 0x45c
 801567a:	2a00      	cmp	r2, #0
 801567c:	f001 8050 	beq.w	8016720 <m_kalman_3gyro.isra.6.constprop.36+0x2888>
 8015680:	f88a 3030 	strb.w	r3, [sl, #48]	; 0x30
 8015684:	ac86      	add	r4, sp, #536	; 0x218
 8015686:	ed5f 7a6c 	vldr	s15, [pc, #-432]	; 80154d8 <m_kalman_3gyro.isra.6.constprop.36+0x1640>
 801568a:	eeb4 9ae7 	vcmpe.f32	s18, s15
 801568e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015692:	f2c1 801e 	blt.w	80166d2 <m_kalman_3gyro.isra.6.constprop.36+0x283a>
 8015696:	2300      	movs	r3, #0
 8015698:	f8aa 3202 	strh.w	r3, [sl, #514]	; 0x202
 801569c:	f88a 3204 	strb.w	r3, [sl, #516]	; 0x204
 80156a0:	f8ca 3458 	str.w	r3, [sl, #1112]	; 0x458
 80156a4:	f8dd 3698 	ldr.w	r3, [sp, #1688]	; 0x698
 80156a8:	990e      	ldr	r1, [sp, #56]	; 0x38
 80156aa:	ed93 5a08 	vldr	s10, [r3, #32]
 80156ae:	edd3 3a06 	vldr	s7, [r3, #24]
 80156b2:	ed93 4a07 	vldr	s8, [r3, #28]
 80156b6:	edd3 4a00 	vldr	s9, [r3]
 80156ba:	edd3 5a01 	vldr	s11, [r3, #4]
 80156be:	ed93 2a02 	vldr	s4, [r3, #8]
 80156c2:	edd3 6a03 	vldr	s13, [r3, #12]
 80156c6:	ed93 7a04 	vldr	s14, [r3, #16]
 80156ca:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80156ce:	edd3 2a05 	vldr	s5, [r3, #20]
 80156d2:	f8dd 2698 	ldr.w	r2, [sp, #1688]	; 0x698
 80156d6:	ed1f 3a7f 	vldr	s6, [pc, #-508]	; 80154dc <m_kalman_3gyro.isra.6.constprop.36+0x1644>
 80156da:	ee24 4a09 	vmul.f32	s8, s8, s18
 80156de:	ee63 3a89 	vmul.f32	s7, s7, s18
 80156e2:	ee25 9a09 	vmul.f32	s18, s10, s18
 80156e6:	ed83 4a07 	vstr	s8, [r3, #28]
 80156ea:	edc3 3a06 	vstr	s7, [r3, #24]
 80156ee:	ed83 9a08 	vstr	s18, [r3, #32]
 80156f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80156f4:	ed91 6a00 	vldr	s12, [r1]
 80156f8:	ed93 4a00 	vldr	s8, [r3]
 80156fc:	ee24 4a06 	vmul.f32	s8, s8, s12
 8015700:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8015704:	ee64 4a84 	vmul.f32	s9, s9, s8
 8015708:	ee38 5a85 	vadd.f32	s10, s17, s10
 801570c:	edc2 4a00 	vstr	s9, [r2]
 8015710:	edd3 4a00 	vldr	s9, [r3]
 8015714:	ed91 6a00 	vldr	s12, [r1]
 8015718:	ee64 4a86 	vmul.f32	s9, s9, s12
 801571c:	460a      	mov	r2, r1
 801571e:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8015722:	f8dd 1698 	ldr.w	r1, [sp, #1688]	; 0x698
 8015726:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 801572a:	edc1 5a01 	vstr	s11, [r1, #4]
 801572e:	edd3 5a00 	vldr	s11, [r3]
 8015732:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015734:	eec6 4a05 	vdiv.f32	s9, s12, s10
 8015738:	ed92 6a00 	vldr	s12, [r2]
 801573c:	ee26 6a25 	vmul.f32	s12, s12, s11
 8015740:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8015744:	ee22 6a06 	vmul.f32	s12, s4, s12
 8015748:	ee67 7aa8 	vmul.f32	s15, s15, s17
 801574c:	ed81 6a02 	vstr	s12, [r1, #8]
 8015750:	ed93 6a00 	vldr	s12, [r3]
 8015754:	ee66 6a86 	vmul.f32	s13, s13, s12
 8015758:	eef4 4ac3 	vcmpe.f32	s9, s6
 801575c:	edc1 6a03 	vstr	s13, [r1, #12]
 8015760:	edd3 6a00 	vldr	s13, [r3]
 8015764:	ee27 7a26 	vmul.f32	s14, s14, s13
 8015768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801576c:	ed81 7a04 	vstr	s14, [r1, #16]
 8015770:	ed93 7a00 	vldr	s14, [r3]
 8015774:	edc1 7a09 	vstr	s15, [r1, #36]	; 0x24
 8015778:	ee62 7a87 	vmul.f32	s15, s5, s14
 801577c:	f8dd 369c 	ldr.w	r3, [sp, #1692]	; 0x69c
 8015780:	edc1 7a05 	vstr	s15, [r1, #20]
 8015784:	edd3 7a06 	vldr	s15, [r3, #24]
 8015788:	bfb8      	it	lt
 801578a:	eef0 4a43 	vmovlt.f32	s9, s6
 801578e:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8015792:	edc3 7a06 	vstr	s15, [r3, #24]
 8015796:	edd1 7a0a 	vldr	s15, [r1, #40]	; 0x28
 801579a:	f8dd 369c 	ldr.w	r3, [sp, #1692]	; 0x69c
 801579e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80157a2:	ee67 7aa8 	vmul.f32	s15, s15, s17
 80157a6:	edc1 7a0a 	vstr	s15, [r1, #40]	; 0x28
 80157aa:	edd3 7a07 	vldr	s15, [r3, #28]
 80157ae:	ee67 7aa4 	vmul.f32	s15, s15, s9
 80157b2:	edc3 7a07 	vstr	s15, [r3, #28]
 80157b6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80157b8:	edd1 7a0b 	vldr	s15, [r1, #44]	; 0x2c
 80157bc:	ed93 7a00 	vldr	s14, [r3]
 80157c0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80157c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80157c6:	edc1 7a0b 	vstr	s15, [r1, #44]	; 0x2c
 80157ca:	b3cb      	cbz	r3, 8015840 <m_kalman_3gyro.isra.6.constprop.36+0x19a8>
 80157cc:	edd1 7a03 	vldr	s15, [r1, #12]
 80157d0:	f8dd 369c 	ldr.w	r3, [sp, #1692]	; 0x69c
 80157d4:	ee67 7aa8 	vmul.f32	s15, s15, s17
 80157d8:	edc1 7a03 	vstr	s15, [r1, #12]
 80157dc:	edd3 7a00 	vldr	s15, [r3]
 80157e0:	ee67 7aa4 	vmul.f32	s15, s15, s9
 80157e4:	edc3 7a00 	vstr	s15, [r3]
 80157e8:	edd1 7a04 	vldr	s15, [r1, #16]
 80157ec:	f8dd 369c 	ldr.w	r3, [sp, #1692]	; 0x69c
 80157f0:	ee67 7aa8 	vmul.f32	s15, s15, s17
 80157f4:	edc1 7a04 	vstr	s15, [r1, #16]
 80157f8:	edd3 7a01 	vldr	s15, [r3, #4]
 80157fc:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8015800:	edc3 7a01 	vstr	s15, [r3, #4]
 8015804:	edd1 7a05 	vldr	s15, [r1, #20]
 8015808:	f8dd 369c 	ldr.w	r3, [sp, #1692]	; 0x69c
 801580c:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8015810:	edc1 7a05 	vstr	s15, [r1, #20]
 8015814:	edd3 7a02 	vldr	s15, [r3, #8]
 8015818:	ee67 7aa4 	vmul.f32	s15, s15, s9
 801581c:	edc3 7a02 	vstr	s15, [r3, #8]
 8015820:	edd1 7a0a 	vldr	s15, [r1, #40]	; 0x28
 8015824:	f8dd 369c 	ldr.w	r3, [sp, #1692]	; 0x69c
 8015828:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801582c:	ee67 8aa8 	vmul.f32	s17, s15, s17
 8015830:	edc1 8a0a 	vstr	s17, [r1, #40]	; 0x28
 8015834:	edd3 7a07 	vldr	s15, [r3, #28]
 8015838:	ee67 7aa4 	vmul.f32	s15, s15, s9
 801583c:	edc3 7a07 	vstr	s15, [r3, #28]
 8015840:	f8dd 369c 	ldr.w	r3, [sp, #1692]	; 0x69c
 8015844:	ed9a 3a2e 	vldr	s6, [sl, #184]	; 0xb8
 8015848:	edd3 2a00 	vldr	s5, [r3]
 801584c:	f8dd 269c 	ldr.w	r2, [sp, #1692]	; 0x69c
 8015850:	edda 3a38 	vldr	s7, [sl, #224]	; 0xe0
 8015854:	ed9a 4a42 	vldr	s8, [sl, #264]	; 0x108
 8015858:	edda 4a4c 	vldr	s9, [sl, #304]	; 0x130
 801585c:	ed9a 5a56 	vldr	s10, [sl, #344]	; 0x158
 8015860:	edda 5a60 	vldr	s11, [sl, #384]	; 0x180
 8015864:	ed9a 6a6a 	vldr	s12, [sl, #424]	; 0x1a8
 8015868:	edda 6a74 	vldr	s13, [sl, #464]	; 0x1d0
 801586c:	ed9d 2a59 	vldr	s4, [sp, #356]	; 0x164
 8015870:	eddd 7a58 	vldr	s15, [sp, #352]	; 0x160
 8015874:	ed9a 7a7e 	vldr	s14, [sl, #504]	; 0x1f8
 8015878:	edc4 7a06 	vstr	s15, [r4, #24]
 801587c:	eea2 3aa2 	vfma.f32	s6, s5, s5
 8015880:	2300      	movs	r3, #0
 8015882:	6023      	str	r3, [r4, #0]
 8015884:	eef1 2a42 	vneg.f32	s5, s4
 8015888:	ed8a 3a2e 	vstr	s6, [sl, #184]	; 0xb8
 801588c:	ed92 3a01 	vldr	s6, [r2, #4]
 8015890:	edc4 2a03 	vstr	s5, [r4, #12]
 8015894:	eee3 3a03 	vfma.f32	s7, s6, s6
 8015898:	eef1 7a67 	vneg.f32	s15, s15
 801589c:	edca 3a38 	vstr	s7, [sl, #224]	; 0xe0
 80158a0:	edd2 3a02 	vldr	s7, [r2, #8]
 80158a4:	eea3 4aa3 	vfma.f32	s8, s7, s7
 80158a8:	ed8a 4a42 	vstr	s8, [sl, #264]	; 0x108
 80158ac:	ed92 4a03 	vldr	s8, [r2, #12]
 80158b0:	eee4 4a04 	vfma.f32	s9, s8, s8
 80158b4:	edca 4a4c 	vstr	s9, [sl, #304]	; 0x130
 80158b8:	edd2 4a04 	vldr	s9, [r2, #16]
 80158bc:	eea4 5aa4 	vfma.f32	s10, s9, s9
 80158c0:	ed8a 5a56 	vstr	s10, [sl, #344]	; 0x158
 80158c4:	ed92 5a05 	vldr	s10, [r2, #20]
 80158c8:	eee5 5a05 	vfma.f32	s11, s10, s10
 80158cc:	edca 5a60 	vstr	s11, [sl, #384]	; 0x180
 80158d0:	edd2 5a06 	vldr	s11, [r2, #24]
 80158d4:	eea5 6aa5 	vfma.f32	s12, s11, s11
 80158d8:	ed8a 6a6a 	vstr	s12, [sl, #424]	; 0x1a8
 80158dc:	ed92 6a07 	vldr	s12, [r2, #28]
 80158e0:	eee6 6a06 	vfma.f32	s13, s12, s12
 80158e4:	edca 6a74 	vstr	s13, [sl, #464]	; 0x1d0
 80158e8:	edd2 6a08 	vldr	s13, [r2, #32]
 80158ec:	f8dd 26a8 	ldr.w	r2, [sp, #1704]	; 0x6a8
 80158f0:	eddd 5a57 	vldr	s11, [sp, #348]	; 0x15c
 80158f4:	ed9d 6a5c 	vldr	s12, [sp, #368]	; 0x170
 80158f8:	edc4 7a02 	vstr	s15, [r4, #8]
 80158fc:	eea6 7aa6 	vfma.f32	s14, s13, s13
 8015900:	6123      	str	r3, [r4, #16]
 8015902:	6223      	str	r3, [r4, #32]
 8015904:	eddd 6a5b 	vldr	s13, [sp, #364]	; 0x16c
 8015908:	ed8a 7a7e 	vstr	s14, [sl, #504]	; 0x1f8
 801590c:	7812      	ldrb	r2, [r2, #0]
 801590e:	f88a 21fc 	strb.w	r2, [sl, #508]	; 0x1fc
 8015912:	f8dd 26a8 	ldr.w	r2, [sp, #1704]	; 0x6a8
 8015916:	ed9d 7a5a 	vldr	s14, [sp, #360]	; 0x168
 801591a:	7812      	ldrb	r2, [r2, #0]
 801591c:	f88a 21fd 	strb.w	r2, [sl, #509]	; 0x1fd
 8015920:	f8dd 26a8 	ldr.w	r2, [sp, #1704]	; 0x6a8
 8015924:	938f      	str	r3, [sp, #572]	; 0x23c
 8015926:	7812      	ldrb	r2, [r2, #0]
 8015928:	f88a 21fe 	strb.w	r2, [sl, #510]	; 0x1fe
 801592c:	f8dd 26a8 	ldr.w	r2, [sp, #1704]	; 0x6a8
 8015930:	9393      	str	r3, [sp, #588]	; 0x24c
 8015932:	7852      	ldrb	r2, [r2, #1]
 8015934:	f88a 21ff 	strb.w	r2, [sl, #511]	; 0x1ff
 8015938:	f8dd 26a8 	ldr.w	r2, [sp, #1704]	; 0x6a8
 801593c:	9397      	str	r3, [sp, #604]	; 0x25c
 801593e:	7852      	ldrb	r2, [r2, #1]
 8015940:	f88a 2200 	strb.w	r2, [sl, #512]	; 0x200
 8015944:	f8dd 26a8 	ldr.w	r2, [sp, #1704]	; 0x6a8
 8015948:	ed84 2a01 	vstr	s4, [r4, #4]
 801594c:	7852      	ldrb	r2, [r2, #1]
 801594e:	f88a 2201 	strb.w	r2, [sl, #513]	; 0x201
 8015952:	eeb1 4a65 	vneg.f32	s8, s11
 8015956:	edc4 5a05 	vstr	s11, [r4, #20]
 801595a:	ed84 4a07 	vstr	s8, [r4, #28]
 801595e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8015960:	ed8d 6a90 	vstr	s12, [sp, #576]	; 0x240
 8015964:	eef1 4a46 	vneg.f32	s9, s12
 8015968:	eeb1 5a66 	vneg.f32	s10, s13
 801596c:	eef1 7a47 	vneg.f32	s15, s14
 8015970:	edcd 4a92 	vstr	s9, [sp, #584]	; 0x248
 8015974:	edcd 6a95 	vstr	s13, [sp, #596]	; 0x254
 8015978:	ed8d 5a91 	vstr	s10, [sp, #580]	; 0x244
 801597c:	ed8d 7a94 	vstr	s14, [sp, #592]	; 0x250
 8015980:	edcd 7a96 	vstr	s15, [sp, #600]	; 0x258
 8015984:	b1ab      	cbz	r3, 80159b2 <m_kalman_3gyro.isra.6.constprop.36+0x1b1a>
 8015986:	f8dd 36a8 	ldr.w	r3, [sp, #1704]	; 0x6a8
 801598a:	785b      	ldrb	r3, [r3, #1]
 801598c:	b18b      	cbz	r3, 80159b2 <m_kalman_3gyro.isra.6.constprop.36+0x1b1a>
 801598e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015990:	ed93 7a00 	vldr	s14, [r3]
 8015994:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015998:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801599c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80159a0:	bfd4      	ite	le
 80159a2:	2301      	movle	r3, #1
 80159a4:	2300      	movgt	r3, #0
 80159a6:	f88a 31ff 	strb.w	r3, [sl, #511]	; 0x1ff
 80159aa:	f88a 3200 	strb.w	r3, [sl, #512]	; 0x200
 80159ae:	f88a 3201 	strb.w	r3, [sl, #513]	; 0x201
 80159b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80159b4:	edd3 7a00 	vldr	s15, [r3]
 80159b8:	eef4 7ac8 	vcmpe.f32	s15, s16
 80159bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80159c0:	f2c0 86b1 	blt.w	8016726 <m_kalman_3gyro.isra.6.constprop.36+0x288e>
 80159c4:	f50d 63d7 	add.w	r3, sp, #1720	; 0x6b8
 80159c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80159cc:	2200      	movs	r2, #0
 80159ce:	2300      	movs	r3, #0
 80159d0:	f7eb f8aa 	bl	8000b28 <__aeabi_dcmpgt>
 80159d4:	2800      	cmp	r0, #0
 80159d6:	f000 86a6 	beq.w	8016726 <m_kalman_3gyro.isra.6.constprop.36+0x288e>
 80159da:	2300      	movs	r3, #0
 80159dc:	f8aa 31fc 	strh.w	r3, [sl, #508]	; 0x1fc
 80159e0:	f88a 31fe 	strb.w	r3, [sl, #510]	; 0x1fe
 80159e4:	f88a 3205 	strb.w	r3, [sl, #517]	; 0x205
 80159e8:	f88a 3207 	strb.w	r3, [sl, #519]	; 0x207
 80159ec:	edda 7a24 	vldr	s15, [sl, #144]	; 0x90
 80159f0:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80159f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80159f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80159fc:	dc06      	bgt.n	8015a0c <m_kalman_3gyro.isra.6.constprop.36+0x1b74>
 80159fe:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8015b64 <m_kalman_3gyro.isra.6.constprop.36+0x1ccc>
 8015a02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a0a:	d508      	bpl.n	8015a1e <m_kalman_3gyro.isra.6.constprop.36+0x1b86>
 8015a0c:	2300      	movs	r3, #0
 8015a0e:	f8aa 31fc 	strh.w	r3, [sl, #508]	; 0x1fc
 8015a12:	f88a 31fe 	strb.w	r3, [sl, #510]	; 0x1fe
 8015a16:	f88a 3205 	strb.w	r3, [sl, #517]	; 0x205
 8015a1a:	f88a 3207 	strb.w	r3, [sl, #519]	; 0x207
 8015a1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015a22:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015a26:	eef0 7ae7 	vabs.f32	s15, s15
 8015a2a:	ee17 0a90 	vmov	r0, s15
 8015a2e:	f7ea fd93 	bl	8000558 <__aeabi_f2d>
 8015a32:	f8dd 3698 	ldr.w	r3, [sp, #1688]	; 0x698
 8015a36:	4606      	mov	r6, r0
 8015a38:	6818      	ldr	r0, [r3, #0]
 8015a3a:	460f      	mov	r7, r1
 8015a3c:	f7ea fd8c 	bl	8000558 <__aeabi_f2d>
 8015a40:	4602      	mov	r2, r0
 8015a42:	460b      	mov	r3, r1
 8015a44:	4630      	mov	r0, r6
 8015a46:	4639      	mov	r1, r7
 8015a48:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8015a4c:	f7eb f862 	bl	8000b14 <__aeabi_dcmpge>
 8015a50:	b908      	cbnz	r0, 8015a56 <m_kalman_3gyro.isra.6.constprop.36+0x1bbe>
 8015a52:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8015a56:	4630      	mov	r0, r6
 8015a58:	4639      	mov	r1, r7
 8015a5a:	f7eb f8ad 	bl	8000bb8 <__aeabi_d2f>
 8015a5e:	f8dd 3698 	ldr.w	r3, [sp, #1688]	; 0x698
 8015a62:	6018      	str	r0, [r3, #0]
 8015a64:	6058      	str	r0, [r3, #4]
 8015a66:	6098      	str	r0, [r3, #8]
 8015a68:	edda 7a23 	vldr	s15, [sl, #140]	; 0x8c
 8015a6c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8015a70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a78:	f300 8613 	bgt.w	80166a2 <m_kalman_3gyro.isra.6.constprop.36+0x280a>
 8015a7c:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8015b68 <m_kalman_3gyro.isra.6.constprop.36+0x1cd0>
 8015a80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a88:	f100 860b 	bmi.w	80166a2 <m_kalman_3gyro.isra.6.constprop.36+0x280a>
 8015a8c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8015a90:	ee37 8ac8 	vsub.f32	s16, s15, s16
 8015a94:	eef0 7ac8 	vabs.f32	s15, s16
 8015a98:	ee17 0a90 	vmov	r0, s15
 8015a9c:	f7ea fd5c 	bl	8000558 <__aeabi_f2d>
 8015aa0:	f8dd 3698 	ldr.w	r3, [sp, #1688]	; 0x698
 8015aa4:	4606      	mov	r6, r0
 8015aa6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8015aa8:	460f      	mov	r7, r1
 8015aaa:	f7ea fd55 	bl	8000558 <__aeabi_f2d>
 8015aae:	4602      	mov	r2, r0
 8015ab0:	460b      	mov	r3, r1
 8015ab2:	4630      	mov	r0, r6
 8015ab4:	4639      	mov	r1, r7
 8015ab6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8015aba:	f7eb f82b 	bl	8000b14 <__aeabi_dcmpge>
 8015abe:	2800      	cmp	r0, #0
 8015ac0:	f001 831f 	beq.w	8017102 <m_kalman_3gyro.isra.6.constprop.36+0x326a>
 8015ac4:	4630      	mov	r0, r6
 8015ac6:	4639      	mov	r1, r7
 8015ac8:	f7eb f876 	bl	8000bb8 <__aeabi_d2f>
 8015acc:	f8dd 3698 	ldr.w	r3, [sp, #1688]	; 0x698
 8015ad0:	ed93 7a03 	vldr	s14, [r3, #12]
 8015ad4:	6298      	str	r0, [r3, #40]	; 0x28
 8015ad6:	ee68 7a08 	vmul.f32	s15, s16, s16
 8015ada:	ee67 6a07 	vmul.f32	s13, s14, s14
 8015ade:	eef4 7ae6 	vcmpe.f32	s15, s13
 8015ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ae6:	f301 82f2 	bgt.w	80170ce <m_kalman_3gyro.isra.6.constprop.36+0x3236>
 8015aea:	ed99 7a00 	vldr	s14, [r9]
 8015aee:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8015af2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015afa:	f341 8211 	ble.w	8016f20 <m_kalman_3gyro.isra.6.constprop.36+0x3088>
 8015afe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015b02:	2300      	movs	r3, #0
 8015b04:	f8dd 2698 	ldr.w	r2, [sp, #1688]	; 0x698
 8015b08:	f8aa 31fc 	strh.w	r3, [sl, #508]	; 0x1fc
 8015b0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015b10:	f88a 31fe 	strb.w	r3, [sl, #510]	; 0x1fe
 8015b14:	edd2 6a0b 	vldr	s13, [r2, #44]	; 0x2c
 8015b18:	ed92 6a09 	vldr	s12, [r2, #36]	; 0x24
 8015b1c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8015b20:	ee26 6a27 	vmul.f32	s12, s12, s15
 8015b24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015b28:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8015b2c:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8015b30:	ed82 6a09 	vstr	s12, [r2, #36]	; 0x24
 8015b34:	edc2 7a0b 	vstr	s15, [r2, #44]	; 0x2c
 8015b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b3c:	bfc4      	itt	gt
 8015b3e:	f88a 3205 	strbgt.w	r3, [sl, #517]	; 0x205
 8015b42:	f88a 3207 	strbgt.w	r3, [sl, #519]	; 0x207
 8015b46:	f89a 38ae 	ldrb.w	r3, [sl, #2222]	; 0x8ae
 8015b4a:	2b0e      	cmp	r3, #14
 8015b4c:	d802      	bhi.n	8015b54 <m_kalman_3gyro.isra.6.constprop.36+0x1cbc>
 8015b4e:	3305      	adds	r3, #5
 8015b50:	f88a 38ae 	strb.w	r3, [sl, #2222]	; 0x8ae
 8015b54:	4623      	mov	r3, r4
 8015b56:	af8f      	add	r7, sp, #572	; 0x23c
 8015b58:	f04f 0900 	mov.w	r9, #0
 8015b5c:	ed9f 8a03 	vldr	s16, [pc, #12]	; 8015b6c <m_kalman_3gyro.isra.6.constprop.36+0x1cd4>
 8015b60:	e027      	b.n	8015bb2 <m_kalman_3gyro.isra.6.constprop.36+0x1d1a>
 8015b62:	bf00      	nop
 8015b64:	3e4ccccd 	.word	0x3e4ccccd
 8015b68:	3ecccccd 	.word	0x3ecccccd
 8015b6c:	00000000 	.word	0x00000000
 8015b70:	ed57 6a03 	vldr	s13, [r7, #-12]
 8015b74:	ed97 7a00 	vldr	s14, [r7]
 8015b78:	edd7 7a03 	vldr	s15, [r7, #12]
 8015b7c:	eb0a 0009 	add.w	r0, sl, r9
 8015b80:	ee76 6aa6 	vadd.f32	s13, s13, s13
 8015b84:	ee37 7a07 	vadd.f32	s14, s14, s14
 8015b88:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8015b8c:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8015b90:	edcd 6a7d 	vstr	s13, [sp, #500]	; 0x1f4
 8015b94:	ed8d 7a7e 	vstr	s14, [sp, #504]	; 0x1f8
 8015b98:	edcd 7a7f 	vstr	s15, [sp, #508]	; 0x1fc
 8015b9c:	bb7a      	cbnz	r2, 8015bfe <m_kalman_3gyro.isra.6.constprop.36+0x1d66>
 8015b9e:	f109 0901 	add.w	r9, r9, #1
 8015ba2:	f1b9 0f0c 	cmp.w	r9, #12
 8015ba6:	f103 0304 	add.w	r3, r3, #4
 8015baa:	f107 0704 	add.w	r7, r7, #4
 8015bae:	f000 84c3 	beq.w	8016538 <m_kalman_3gyro.isra.6.constprop.36+0x26a0>
 8015bb2:	f1b9 0f02 	cmp.w	r9, #2
 8015bb6:	ed8d 8a7d 	vstr	s16, [sp, #500]	; 0x1f4
 8015bba:	ed8d 8a7e 	vstr	s16, [sp, #504]	; 0x1f8
 8015bbe:	ed8d 8a7f 	vstr	s16, [sp, #508]	; 0x1fc
 8015bc2:	ed8d 8a80 	vstr	s16, [sp, #512]	; 0x200
 8015bc6:	ed8d 8a81 	vstr	s16, [sp, #516]	; 0x204
 8015bca:	ed8d 8a82 	vstr	s16, [sp, #520]	; 0x208
 8015bce:	ed8d 8a83 	vstr	s16, [sp, #524]	; 0x20c
 8015bd2:	ed8d 8a84 	vstr	s16, [sp, #528]	; 0x210
 8015bd6:	ed8d 8a85 	vstr	s16, [sp, #532]	; 0x214
 8015bda:	f340 8413 	ble.w	8016404 <m_kalman_3gyro.isra.6.constprop.36+0x256c>
 8015bde:	f1b9 0f05 	cmp.w	r9, #5
 8015be2:	ddc5      	ble.n	8015b70 <m_kalman_3gyro.isra.6.constprop.36+0x1cd8>
 8015be4:	aa7d      	add	r2, sp, #500	; 0x1f4
 8015be6:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 8015bea:	eb0a 0009 	add.w	r0, sl, r9
 8015bee:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8015bf2:	f842 1c0c 	str.w	r1, [r2, #-12]
 8015bf6:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8015bfa:	2a00      	cmp	r2, #0
 8015bfc:	d0cf      	beq.n	8015b9e <m_kalman_3gyro.isra.6.constprop.36+0x1d06>
 8015bfe:	ad74      	add	r5, sp, #464	; 0x1d0
 8015c00:	f10a 02b8 	add.w	r2, sl, #184	; 0xb8
 8015c04:	ed9d da7d 	vldr	s26, [sp, #500]	; 0x1f4
 8015c08:	eddd da7e 	vldr	s27, [sp, #504]	; 0x1f8
 8015c0c:	ed9d ea7f 	vldr	s28, [sp, #508]	; 0x1fc
 8015c10:	eddd ea80 	vldr	s29, [sp, #512]	; 0x200
 8015c14:	ed9d fa81 	vldr	s30, [sp, #516]	; 0x204
 8015c18:	eddd fa82 	vldr	s31, [sp, #520]	; 0x208
 8015c1c:	eddd 6a83 	vldr	s13, [sp, #524]	; 0x20c
 8015c20:	ed9d 6a84 	vldr	s12, [sp, #528]	; 0x210
 8015c24:	eddd 5a85 	vldr	s11, [sp, #532]	; 0x214
 8015c28:	9204      	str	r2, [sp, #16]
 8015c2a:	ed85 8a00 	vstr	s16, [r5]
 8015c2e:	4616      	mov	r6, r2
 8015c30:	ed85 8a01 	vstr	s16, [r5, #4]
 8015c34:	ed85 8a02 	vstr	s16, [r5, #8]
 8015c38:	ed85 8a03 	vstr	s16, [r5, #12]
 8015c3c:	ed85 8a04 	vstr	s16, [r5, #16]
 8015c40:	ed85 8a05 	vstr	s16, [r5, #20]
 8015c44:	ed85 8a06 	vstr	s16, [r5, #24]
 8015c48:	ed85 8a07 	vstr	s16, [r5, #28]
 8015c4c:	ed85 8a08 	vstr	s16, [r5, #32]
 8015c50:	4629      	mov	r1, r5
 8015c52:	f10a 04dc 	add.w	r4, sl, #220	; 0xdc
 8015c56:	ecb2 7a01 	vldmia	r2!, {s14}
 8015c5a:	ecf1 7a01 	vldmia	r1!, {s15}
 8015c5e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8015c62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c66:	d006      	beq.n	8015c76 <m_kalman_3gyro.isra.6.constprop.36+0x1dde>
 8015c68:	eeb5 da40 	vcmp.f32	s26, #0.0
 8015c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c70:	bf18      	it	ne
 8015c72:	eeed 7a07 	vfmane.f32	s15, s26, s14
 8015c76:	ed92 7a08 	vldr	s14, [r2, #32]
 8015c7a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8015c7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c82:	d006      	beq.n	8015c92 <m_kalman_3gyro.isra.6.constprop.36+0x1dfa>
 8015c84:	eef5 da40 	vcmp.f32	s27, #0.0
 8015c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c8c:	bf18      	it	ne
 8015c8e:	eeed 7a87 	vfmane.f32	s15, s27, s14
 8015c92:	ed92 7a11 	vldr	s14, [r2, #68]	; 0x44
 8015c96:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8015c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c9e:	d006      	beq.n	8015cae <m_kalman_3gyro.isra.6.constprop.36+0x1e16>
 8015ca0:	eeb5 ea40 	vcmp.f32	s28, #0.0
 8015ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ca8:	bf18      	it	ne
 8015caa:	eeee 7a07 	vfmane.f32	s15, s28, s14
 8015cae:	ed92 7a1a 	vldr	s14, [r2, #104]	; 0x68
 8015cb2:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8015cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015cba:	d006      	beq.n	8015cca <m_kalman_3gyro.isra.6.constprop.36+0x1e32>
 8015cbc:	eef5 ea40 	vcmp.f32	s29, #0.0
 8015cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015cc4:	bf18      	it	ne
 8015cc6:	eeee 7a87 	vfmane.f32	s15, s29, s14
 8015cca:	ed92 7a23 	vldr	s14, [r2, #140]	; 0x8c
 8015cce:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8015cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015cd6:	d006      	beq.n	8015ce6 <m_kalman_3gyro.isra.6.constprop.36+0x1e4e>
 8015cd8:	eeb5 fa40 	vcmp.f32	s30, #0.0
 8015cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ce0:	bf18      	it	ne
 8015ce2:	eeef 7a07 	vfmane.f32	s15, s30, s14
 8015ce6:	ed92 7a2c 	vldr	s14, [r2, #176]	; 0xb0
 8015cea:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8015cee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015cf2:	d006      	beq.n	8015d02 <m_kalman_3gyro.isra.6.constprop.36+0x1e6a>
 8015cf4:	eef5 fa40 	vcmp.f32	s31, #0.0
 8015cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015cfc:	bf18      	it	ne
 8015cfe:	eeef 7a87 	vfmane.f32	s15, s31, s14
 8015d02:	ed92 7a35 	vldr	s14, [r2, #212]	; 0xd4
 8015d06:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8015d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d0e:	d006      	beq.n	8015d1e <m_kalman_3gyro.isra.6.constprop.36+0x1e86>
 8015d10:	eef5 6a40 	vcmp.f32	s13, #0.0
 8015d14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d18:	bf18      	it	ne
 8015d1a:	eee6 7a87 	vfmane.f32	s15, s13, s14
 8015d1e:	ed92 7a3e 	vldr	s14, [r2, #248]	; 0xf8
 8015d22:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8015d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d2a:	d006      	beq.n	8015d3a <m_kalman_3gyro.isra.6.constprop.36+0x1ea2>
 8015d2c:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8015d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d34:	bf18      	it	ne
 8015d36:	eee6 7a07 	vfmane.f32	s15, s12, s14
 8015d3a:	ed92 7a47 	vldr	s14, [r2, #284]	; 0x11c
 8015d3e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8015d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d46:	d006      	beq.n	8015d56 <m_kalman_3gyro.isra.6.constprop.36+0x1ebe>
 8015d48:	eef5 5a40 	vcmp.f32	s11, #0.0
 8015d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d50:	bf18      	it	ne
 8015d52:	eee5 7a87 	vfmane.f32	s15, s11, s14
 8015d56:	4294      	cmp	r4, r2
 8015d58:	ed41 7a01 	vstr	s15, [r1, #-4]
 8015d5c:	f47f af7b 	bne.w	8015c56 <m_kalman_3gyro.isra.6.constprop.36+0x1dbe>
 8015d60:	eeb5 da40 	vcmp.f32	s26, #0.0
 8015d64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d68:	ed95 ca00 	vldr	s24, [r5]
 8015d6c:	f000 83af 	beq.w	80164ce <m_kalman_3gyro.isra.6.constprop.36+0x2636>
 8015d70:	eeb5 ca40 	vcmp.f32	s24, #0.0
 8015d74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d78:	f000 83a9 	beq.w	80164ce <m_kalman_3gyro.isra.6.constprop.36+0x2636>
 8015d7c:	ee6c 7a0d 	vmul.f32	s15, s24, s26
 8015d80:	eef5 da40 	vcmp.f32	s27, #0.0
 8015d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d88:	ed95 9a01 	vldr	s18, [r5, #4]
 8015d8c:	d006      	beq.n	8015d9c <m_kalman_3gyro.isra.6.constprop.36+0x1f04>
 8015d8e:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8015d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d96:	bf18      	it	ne
 8015d98:	eee9 7a2d 	vfmane.f32	s15, s18, s27
 8015d9c:	eeb5 ea40 	vcmp.f32	s28, #0.0
 8015da0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015da4:	edd5 ba02 	vldr	s23, [r5, #8]
 8015da8:	d006      	beq.n	8015db8 <m_kalman_3gyro.isra.6.constprop.36+0x1f20>
 8015daa:	eef5 ba40 	vcmp.f32	s23, #0.0
 8015dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015db2:	bf18      	it	ne
 8015db4:	eeee 7a2b 	vfmane.f32	s15, s28, s23
 8015db8:	eef5 ea40 	vcmp.f32	s29, #0.0
 8015dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015dc0:	edd5 ca03 	vldr	s25, [r5, #12]
 8015dc4:	d006      	beq.n	8015dd4 <m_kalman_3gyro.isra.6.constprop.36+0x1f3c>
 8015dc6:	eef5 ca40 	vcmp.f32	s25, #0.0
 8015dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015dce:	bf18      	it	ne
 8015dd0:	eeee 7aac 	vfmane.f32	s15, s29, s25
 8015dd4:	eeb5 fa40 	vcmp.f32	s30, #0.0
 8015dd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ddc:	ed95 ba04 	vldr	s22, [r5, #16]
 8015de0:	d006      	beq.n	8015df0 <m_kalman_3gyro.isra.6.constprop.36+0x1f58>
 8015de2:	eeb5 ba40 	vcmp.f32	s22, #0.0
 8015de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015dea:	bf18      	it	ne
 8015dec:	eeef 7a0b 	vfmane.f32	s15, s30, s22
 8015df0:	eef5 fa40 	vcmp.f32	s31, #0.0
 8015df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015df8:	ed95 aa05 	vldr	s20, [r5, #20]
 8015dfc:	d006      	beq.n	8015e0c <m_kalman_3gyro.isra.6.constprop.36+0x1f74>
 8015dfe:	eeb5 aa40 	vcmp.f32	s20, #0.0
 8015e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e06:	bf18      	it	ne
 8015e08:	eeef 7a8a 	vfmane.f32	s15, s31, s20
 8015e0c:	eef5 6a40 	vcmp.f32	s13, #0.0
 8015e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e14:	edd5 aa06 	vldr	s21, [r5, #24]
 8015e18:	d006      	beq.n	8015e28 <m_kalman_3gyro.isra.6.constprop.36+0x1f90>
 8015e1a:	eef5 aa40 	vcmp.f32	s21, #0.0
 8015e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e22:	bf18      	it	ne
 8015e24:	eeea 7aa6 	vfmane.f32	s15, s21, s13
 8015e28:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8015e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e30:	edd5 9a07 	vldr	s19, [r5, #28]
 8015e34:	d006      	beq.n	8015e44 <m_kalman_3gyro.isra.6.constprop.36+0x1fac>
 8015e36:	eef5 9a40 	vcmp.f32	s19, #0.0
 8015e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e3e:	bf18      	it	ne
 8015e40:	eee9 7a86 	vfmane.f32	s15, s19, s12
 8015e44:	eef5 5a40 	vcmp.f32	s11, #0.0
 8015e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e4c:	edd5 8a08 	vldr	s17, [r5, #32]
 8015e50:	d006      	beq.n	8015e60 <m_kalman_3gyro.isra.6.constprop.36+0x1fc8>
 8015e52:	eef5 8a40 	vcmp.f32	s17, #0.0
 8015e56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e5a:	bf18      	it	ne
 8015e5c:	eee8 7aa5 	vfmane.f32	s15, s17, s11
 8015e60:	f8dd 2698 	ldr.w	r2, [sp, #1688]	; 0x698
 8015e64:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 8015e68:	ed92 7a00 	vldr	s14, [r2]
 8015e6c:	eee7 7a07 	vfma.f32	s15, s14, s14
 8015e70:	eb09 0249 	add.w	r2, r9, r9, lsl #1
 8015e74:	1882      	adds	r2, r0, r2
 8015e76:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8015e7a:	ee85 7a27 	vdiv.f32	s14, s10, s15
 8015e7e:	f1b9 0f05 	cmp.w	r9, #5
 8015e82:	9202      	str	r2, [sp, #8]
 8015e84:	ee27 ca0c 	vmul.f32	s24, s14, s24
 8015e88:	ee29 9a07 	vmul.f32	s18, s18, s14
 8015e8c:	ee67 ba2b 	vmul.f32	s23, s14, s23
 8015e90:	ee67 ca2c 	vmul.f32	s25, s14, s25
 8015e94:	ee27 ba0b 	vmul.f32	s22, s14, s22
 8015e98:	ee27 aa0a 	vmul.f32	s20, s14, s20
 8015e9c:	ee67 aa2a 	vmul.f32	s21, s14, s21
 8015ea0:	ee69 9a87 	vmul.f32	s19, s19, s14
 8015ea4:	ee68 8a87 	vmul.f32	s17, s17, s14
 8015ea8:	ed8d ca6b 	vstr	s24, [sp, #428]	; 0x1ac
 8015eac:	ed8d 9a6c 	vstr	s18, [sp, #432]	; 0x1b0
 8015eb0:	edcd ba6d 	vstr	s23, [sp, #436]	; 0x1b4
 8015eb4:	edcd ca6e 	vstr	s25, [sp, #440]	; 0x1b8
 8015eb8:	ed8d ba6f 	vstr	s22, [sp, #444]	; 0x1bc
 8015ebc:	ed8d aa70 	vstr	s20, [sp, #448]	; 0x1c0
 8015ec0:	edcd aa71 	vstr	s21, [sp, #452]	; 0x1c4
 8015ec4:	edcd 9a72 	vstr	s19, [sp, #456]	; 0x1c8
 8015ec8:	edcd 8a73 	vstr	s17, [sp, #460]	; 0x1cc
 8015ecc:	f340 8087 	ble.w	8015fde <m_kalman_3gyro.isra.6.constprop.36+0x2146>
 8015ed0:	eeb5 da40 	vcmp.f32	s26, #0.0
 8015ed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ed8:	ed92 7a19 	vldr	s14, [r2, #100]	; 0x64
 8015edc:	f000 83cd 	beq.w	801667a <m_kalman_3gyro.isra.6.constprop.36+0x27e2>
 8015ee0:	edda 7a25 	vldr	s15, [sl, #148]	; 0x94
 8015ee4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8015ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015eec:	f000 83c5 	beq.w	801667a <m_kalman_3gyro.isra.6.constprop.36+0x27e2>
 8015ef0:	ee67 7a8d 	vmul.f32	s15, s15, s26
 8015ef4:	eef5 da40 	vcmp.f32	s27, #0.0
 8015ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015efc:	d008      	beq.n	8015f10 <m_kalman_3gyro.isra.6.constprop.36+0x2078>
 8015efe:	ed9a 5a26 	vldr	s10, [sl, #152]	; 0x98
 8015f02:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8015f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f0a:	bf18      	it	ne
 8015f0c:	eee5 7a2d 	vfmane.f32	s15, s10, s27
 8015f10:	eeb5 ea40 	vcmp.f32	s28, #0.0
 8015f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f18:	d008      	beq.n	8015f2c <m_kalman_3gyro.isra.6.constprop.36+0x2094>
 8015f1a:	ed9a 5a27 	vldr	s10, [sl, #156]	; 0x9c
 8015f1e:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8015f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f26:	bf18      	it	ne
 8015f28:	eee5 7a0e 	vfmane.f32	s15, s10, s28
 8015f2c:	eef5 ea40 	vcmp.f32	s29, #0.0
 8015f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f34:	d008      	beq.n	8015f48 <m_kalman_3gyro.isra.6.constprop.36+0x20b0>
 8015f36:	ed9a 5a28 	vldr	s10, [sl, #160]	; 0xa0
 8015f3a:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8015f3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f42:	bf18      	it	ne
 8015f44:	eee5 7a2e 	vfmane.f32	s15, s10, s29
 8015f48:	eeb5 fa40 	vcmp.f32	s30, #0.0
 8015f4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f50:	d008      	beq.n	8015f64 <m_kalman_3gyro.isra.6.constprop.36+0x20cc>
 8015f52:	ed9a 5a29 	vldr	s10, [sl, #164]	; 0xa4
 8015f56:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8015f5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f5e:	bf18      	it	ne
 8015f60:	eee5 7a0f 	vfmane.f32	s15, s10, s30
 8015f64:	eef5 fa40 	vcmp.f32	s31, #0.0
 8015f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f6c:	d008      	beq.n	8015f80 <m_kalman_3gyro.isra.6.constprop.36+0x20e8>
 8015f6e:	ed9a 5a2a 	vldr	s10, [sl, #168]	; 0xa8
 8015f72:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8015f76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f7a:	bf18      	it	ne
 8015f7c:	eee5 7a2f 	vfmane.f32	s15, s10, s31
 8015f80:	eef5 6a40 	vcmp.f32	s13, #0.0
 8015f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f88:	d008      	beq.n	8015f9c <m_kalman_3gyro.isra.6.constprop.36+0x2104>
 8015f8a:	ed9a 5a2b 	vldr	s10, [sl, #172]	; 0xac
 8015f8e:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8015f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f96:	bf18      	it	ne
 8015f98:	eee5 7a26 	vfmane.f32	s15, s10, s13
 8015f9c:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8015fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015fa4:	d008      	beq.n	8015fb8 <m_kalman_3gyro.isra.6.constprop.36+0x2120>
 8015fa6:	ed9a 5a2c 	vldr	s10, [sl, #176]	; 0xb0
 8015faa:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8015fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015fb2:	bf18      	it	ne
 8015fb4:	eee5 7a06 	vfmane.f32	s15, s10, s12
 8015fb8:	eef5 5a40 	vcmp.f32	s11, #0.0
 8015fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015fc0:	d008      	beq.n	8015fd4 <m_kalman_3gyro.isra.6.constprop.36+0x213c>
 8015fc2:	ed9a 5a2d 	vldr	s10, [sl, #180]	; 0xb4
 8015fc6:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8015fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015fce:	bf18      	it	ne
 8015fd0:	eee5 7a25 	vfmane.f32	s15, s10, s11
 8015fd4:	9a02      	ldr	r2, [sp, #8]
 8015fd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015fda:	edc2 7a19 	vstr	s15, [r2, #100]	; 0x64
 8015fde:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8015fe2:	2100      	movs	r1, #0
 8015fe4:	4658      	mov	r0, fp
 8015fe6:	930b      	str	r3, [sp, #44]	; 0x2c
 8015fe8:	edcd 5a0a 	vstr	s11, [sp, #40]	; 0x28
 8015fec:	ed8d 6a08 	vstr	s12, [sp, #32]
 8015ff0:	edcd 6a06 	vstr	s13, [sp, #24]
 8015ff4:	f004 fa07 	bl	801a406 <memset>
 8015ff8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015ffa:	eddd 5a0a 	vldr	s11, [sp, #40]	; 0x28
 8015ffe:	ed9d 6a08 	vldr	s12, [sp, #32]
 8016002:	eddd 6a06 	vldr	s13, [sp, #24]
 8016006:	465c      	mov	r4, fp
 8016008:	a96b      	add	r1, sp, #428	; 0x1ac
 801600a:	465a      	mov	r2, fp
 801600c:	ecf1 7a01 	vldmia	r1!, {s15}
 8016010:	eef5 7a40 	vcmp.f32	s15, #0.0
 8016014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016018:	d062      	beq.n	80160e0 <m_kalman_3gyro.isra.6.constprop.36+0x2248>
 801601a:	eeb5 da40 	vcmp.f32	s26, #0.0
 801601e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016022:	d005      	beq.n	8016030 <m_kalman_3gyro.isra.6.constprop.36+0x2198>
 8016024:	ed92 7a00 	vldr	s14, [r2]
 8016028:	eea7 7a8d 	vfma.f32	s14, s15, s26
 801602c:	ed82 7a00 	vstr	s14, [r2]
 8016030:	eef5 da40 	vcmp.f32	s27, #0.0
 8016034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016038:	d005      	beq.n	8016046 <m_kalman_3gyro.isra.6.constprop.36+0x21ae>
 801603a:	ed92 7a09 	vldr	s14, [r2, #36]	; 0x24
 801603e:	eea7 7aad 	vfma.f32	s14, s15, s27
 8016042:	ed82 7a09 	vstr	s14, [r2, #36]	; 0x24
 8016046:	eeb5 ea40 	vcmp.f32	s28, #0.0
 801604a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801604e:	d005      	beq.n	801605c <m_kalman_3gyro.isra.6.constprop.36+0x21c4>
 8016050:	ed92 7a12 	vldr	s14, [r2, #72]	; 0x48
 8016054:	eea7 7a8e 	vfma.f32	s14, s15, s28
 8016058:	ed82 7a12 	vstr	s14, [r2, #72]	; 0x48
 801605c:	eef5 ea40 	vcmp.f32	s29, #0.0
 8016060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016064:	d005      	beq.n	8016072 <m_kalman_3gyro.isra.6.constprop.36+0x21da>
 8016066:	ed92 7a1b 	vldr	s14, [r2, #108]	; 0x6c
 801606a:	eea7 7aae 	vfma.f32	s14, s15, s29
 801606e:	ed82 7a1b 	vstr	s14, [r2, #108]	; 0x6c
 8016072:	eeb5 fa40 	vcmp.f32	s30, #0.0
 8016076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801607a:	d005      	beq.n	8016088 <m_kalman_3gyro.isra.6.constprop.36+0x21f0>
 801607c:	ed92 7a24 	vldr	s14, [r2, #144]	; 0x90
 8016080:	eea7 7a8f 	vfma.f32	s14, s15, s30
 8016084:	ed82 7a24 	vstr	s14, [r2, #144]	; 0x90
 8016088:	eef5 fa40 	vcmp.f32	s31, #0.0
 801608c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016090:	d005      	beq.n	801609e <m_kalman_3gyro.isra.6.constprop.36+0x2206>
 8016092:	ed92 7a2d 	vldr	s14, [r2, #180]	; 0xb4
 8016096:	eea7 7aaf 	vfma.f32	s14, s15, s31
 801609a:	ed82 7a2d 	vstr	s14, [r2, #180]	; 0xb4
 801609e:	eef5 6a40 	vcmp.f32	s13, #0.0
 80160a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80160a6:	d005      	beq.n	80160b4 <m_kalman_3gyro.isra.6.constprop.36+0x221c>
 80160a8:	ed92 7a36 	vldr	s14, [r2, #216]	; 0xd8
 80160ac:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80160b0:	ed82 7a36 	vstr	s14, [r2, #216]	; 0xd8
 80160b4:	eeb5 6a40 	vcmp.f32	s12, #0.0
 80160b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80160bc:	d005      	beq.n	80160ca <m_kalman_3gyro.isra.6.constprop.36+0x2232>
 80160be:	ed92 7a3f 	vldr	s14, [r2, #252]	; 0xfc
 80160c2:	eea7 7a86 	vfma.f32	s14, s15, s12
 80160c6:	ed82 7a3f 	vstr	s14, [r2, #252]	; 0xfc
 80160ca:	eef5 5a40 	vcmp.f32	s11, #0.0
 80160ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80160d2:	d005      	beq.n	80160e0 <m_kalman_3gyro.isra.6.constprop.36+0x2248>
 80160d4:	ed92 7a48 	vldr	s14, [r2, #288]	; 0x120
 80160d8:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80160dc:	ed82 7a48 	vstr	s14, [r2, #288]	; 0x120
 80160e0:	42a9      	cmp	r1, r5
 80160e2:	f102 0204 	add.w	r2, r2, #4
 80160e6:	d191      	bne.n	801600c <m_kalman_3gyro.isra.6.constprop.36+0x2174>
 80160e8:	f8df c664 	ldr.w	ip, [pc, #1636]	; 8016750 <m_kalman_3gyro.isra.6.constprop.36+0x28b8>
 80160ec:	4658      	mov	r0, fp
 80160ee:	2100      	movs	r1, #0
 80160f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80160f4:	fbac e201 	umull	lr, r2, ip, r1
 80160f8:	edd0 7a00 	vldr	s15, [r0]
 80160fc:	08d2      	lsrs	r2, r2, #3
 80160fe:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8016102:	ebb1 0f42 	cmp.w	r1, r2, lsl #1
 8016106:	ee36 7ae7 	vsub.f32	s14, s13, s15
 801610a:	f101 0101 	add.w	r1, r1, #1
 801610e:	bf16      	itet	ne
 8016110:	eef1 7a67 	vnegne.f32	s15, s15
 8016114:	ed80 7a00 	vstreq	s14, [r0]
 8016118:	edc0 7a00 	vstrne	s15, [r0]
 801611c:	2951      	cmp	r1, #81	; 0x51
 801611e:	f100 0004 	add.w	r0, r0, #4
 8016122:	d1e7      	bne.n	80160f4 <m_kalman_3gyro.isra.6.constprop.36+0x225c>
 8016124:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8016128:	9904      	ldr	r1, [sp, #16]
 801612a:	9306      	str	r3, [sp, #24]
 801612c:	4640      	mov	r0, r8
 801612e:	f004 f95f 	bl	801a3f0 <memcpy>
 8016132:	9804      	ldr	r0, [sp, #16]
 8016134:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8016138:	2100      	movs	r1, #0
 801613a:	f004 f964 	bl	801a406 <memset>
 801613e:	9b06      	ldr	r3, [sp, #24]
 8016140:	f10b 0c24 	add.w	ip, fp, #36	; 0x24
 8016144:	f50d 60c6 	add.w	r0, sp, #1584	; 0x630
 8016148:	ecf4 3a01 	vldmia	r4!, {s7}
 801614c:	ed94 4a08 	vldr	s8, [r4, #32]
 8016150:	edd4 4a11 	vldr	s9, [r4, #68]	; 0x44
 8016154:	ed94 5a1a 	vldr	s10, [r4, #104]	; 0x68
 8016158:	edd4 5a23 	vldr	s11, [r4, #140]	; 0x8c
 801615c:	ed94 6a2c 	vldr	s12, [r4, #176]	; 0xb0
 8016160:	edd4 6a35 	vldr	s13, [r4, #212]	; 0xd4
 8016164:	ed94 7a3e 	vldr	s14, [r4, #248]	; 0xf8
 8016168:	edd4 7a47 	vldr	s15, [r4, #284]	; 0x11c
 801616c:	4642      	mov	r2, r8
 801616e:	4631      	mov	r1, r6
 8016170:	eef5 3a40 	vcmp.f32	s7, #0.0
 8016174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016178:	d00c      	beq.n	8016194 <m_kalman_3gyro.isra.6.constprop.36+0x22fc>
 801617a:	ed92 3a00 	vldr	s6, [r2]
 801617e:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8016182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016186:	d005      	beq.n	8016194 <m_kalman_3gyro.isra.6.constprop.36+0x22fc>
 8016188:	edd1 2a00 	vldr	s5, [r1]
 801618c:	eee3 2a83 	vfma.f32	s5, s7, s6
 8016190:	edc1 2a00 	vstr	s5, [r1]
 8016194:	eeb5 4a40 	vcmp.f32	s8, #0.0
 8016198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801619c:	d00c      	beq.n	80161b8 <m_kalman_3gyro.isra.6.constprop.36+0x2320>
 801619e:	ed92 3a01 	vldr	s6, [r2, #4]
 80161a2:	eeb5 3a40 	vcmp.f32	s6, #0.0
 80161a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80161aa:	d005      	beq.n	80161b8 <m_kalman_3gyro.isra.6.constprop.36+0x2320>
 80161ac:	edd1 2a00 	vldr	s5, [r1]
 80161b0:	eee4 2a03 	vfma.f32	s5, s8, s6
 80161b4:	edc1 2a00 	vstr	s5, [r1]
 80161b8:	eef5 4a40 	vcmp.f32	s9, #0.0
 80161bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80161c0:	d00c      	beq.n	80161dc <m_kalman_3gyro.isra.6.constprop.36+0x2344>
 80161c2:	ed92 3a02 	vldr	s6, [r2, #8]
 80161c6:	eeb5 3a40 	vcmp.f32	s6, #0.0
 80161ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80161ce:	d005      	beq.n	80161dc <m_kalman_3gyro.isra.6.constprop.36+0x2344>
 80161d0:	edd1 2a00 	vldr	s5, [r1]
 80161d4:	eee4 2a83 	vfma.f32	s5, s9, s6
 80161d8:	edc1 2a00 	vstr	s5, [r1]
 80161dc:	eeb5 5a40 	vcmp.f32	s10, #0.0
 80161e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80161e4:	d00c      	beq.n	8016200 <m_kalman_3gyro.isra.6.constprop.36+0x2368>
 80161e6:	ed92 3a03 	vldr	s6, [r2, #12]
 80161ea:	eeb5 3a40 	vcmp.f32	s6, #0.0
 80161ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80161f2:	d005      	beq.n	8016200 <m_kalman_3gyro.isra.6.constprop.36+0x2368>
 80161f4:	edd1 2a00 	vldr	s5, [r1]
 80161f8:	eee5 2a03 	vfma.f32	s5, s10, s6
 80161fc:	edc1 2a00 	vstr	s5, [r1]
 8016200:	eef5 5a40 	vcmp.f32	s11, #0.0
 8016204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016208:	d00c      	beq.n	8016224 <m_kalman_3gyro.isra.6.constprop.36+0x238c>
 801620a:	ed92 3a04 	vldr	s6, [r2, #16]
 801620e:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8016212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016216:	d005      	beq.n	8016224 <m_kalman_3gyro.isra.6.constprop.36+0x238c>
 8016218:	edd1 2a00 	vldr	s5, [r1]
 801621c:	eee5 2a83 	vfma.f32	s5, s11, s6
 8016220:	edc1 2a00 	vstr	s5, [r1]
 8016224:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8016228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801622c:	d00c      	beq.n	8016248 <m_kalman_3gyro.isra.6.constprop.36+0x23b0>
 801622e:	ed92 3a05 	vldr	s6, [r2, #20]
 8016232:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8016236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801623a:	d005      	beq.n	8016248 <m_kalman_3gyro.isra.6.constprop.36+0x23b0>
 801623c:	edd1 2a00 	vldr	s5, [r1]
 8016240:	eee6 2a03 	vfma.f32	s5, s12, s6
 8016244:	edc1 2a00 	vstr	s5, [r1]
 8016248:	eef5 6a40 	vcmp.f32	s13, #0.0
 801624c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016250:	d00c      	beq.n	801626c <m_kalman_3gyro.isra.6.constprop.36+0x23d4>
 8016252:	ed92 3a06 	vldr	s6, [r2, #24]
 8016256:	eeb5 3a40 	vcmp.f32	s6, #0.0
 801625a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801625e:	d005      	beq.n	801626c <m_kalman_3gyro.isra.6.constprop.36+0x23d4>
 8016260:	edd1 2a00 	vldr	s5, [r1]
 8016264:	eee6 2a83 	vfma.f32	s5, s13, s6
 8016268:	edc1 2a00 	vstr	s5, [r1]
 801626c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8016270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016274:	d00c      	beq.n	8016290 <m_kalman_3gyro.isra.6.constprop.36+0x23f8>
 8016276:	ed92 3a07 	vldr	s6, [r2, #28]
 801627a:	eeb5 3a40 	vcmp.f32	s6, #0.0
 801627e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016282:	d005      	beq.n	8016290 <m_kalman_3gyro.isra.6.constprop.36+0x23f8>
 8016284:	edd1 2a00 	vldr	s5, [r1]
 8016288:	eee7 2a03 	vfma.f32	s5, s14, s6
 801628c:	edc1 2a00 	vstr	s5, [r1]
 8016290:	eef5 7a40 	vcmp.f32	s15, #0.0
 8016294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016298:	d00c      	beq.n	80162b4 <m_kalman_3gyro.isra.6.constprop.36+0x241c>
 801629a:	ed92 3a08 	vldr	s6, [r2, #32]
 801629e:	eeb5 3a40 	vcmp.f32	s6, #0.0
 80162a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162a6:	d005      	beq.n	80162b4 <m_kalman_3gyro.isra.6.constprop.36+0x241c>
 80162a8:	edd1 2a00 	vldr	s5, [r1]
 80162ac:	eee7 2a83 	vfma.f32	s5, s15, s6
 80162b0:	edc1 2a00 	vstr	s5, [r1]
 80162b4:	3224      	adds	r2, #36	; 0x24
 80162b6:	4282      	cmp	r2, r0
 80162b8:	f101 0124 	add.w	r1, r1, #36	; 0x24
 80162bc:	f47f af58 	bne.w	8016170 <m_kalman_3gyro.isra.6.constprop.36+0x22d8>
 80162c0:	45a4      	cmp	ip, r4
 80162c2:	f106 0604 	add.w	r6, r6, #4
 80162c6:	f47f af3f 	bne.w	8016148 <m_kalman_3gyro.isra.6.constprop.36+0x22b0>
 80162ca:	9a02      	ldr	r2, [sp, #8]
 80162cc:	ed85 8a00 	vstr	s16, [r5]
 80162d0:	eeb5 ca40 	vcmp.f32	s24, #0.0
 80162d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162d8:	ed85 8a01 	vstr	s16, [r5, #4]
 80162dc:	edd2 7a19 	vldr	s15, [r2, #100]	; 0x64
 80162e0:	f000 8098 	beq.w	8016414 <m_kalman_3gyro.isra.6.constprop.36+0x257c>
 80162e4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80162e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162ec:	f000 8092 	beq.w	8016414 <m_kalman_3gyro.isra.6.constprop.36+0x257c>
 80162f0:	ee27 ca8c 	vmul.f32	s24, s15, s24
 80162f4:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80162f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162fc:	ed85 ca00 	vstr	s24, [r5]
 8016300:	f040 85a1 	bne.w	8016e46 <m_kalman_3gyro.isra.6.constprop.36+0x2fae>
 8016304:	eef5 ba40 	vcmp.f32	s23, #0.0
 8016308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801630c:	eeb0 9a48 	vmov.f32	s18, s16
 8016310:	f000 8090 	beq.w	8016434 <m_kalman_3gyro.isra.6.constprop.36+0x259c>
 8016314:	ee67 baab 	vmul.f32	s23, s15, s23
 8016318:	eef5 ca40 	vcmp.f32	s25, #0.0
 801631c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016320:	edc5 ba02 	vstr	s23, [r5, #8]
 8016324:	f000 8095 	beq.w	8016452 <m_kalman_3gyro.isra.6.constprop.36+0x25ba>
 8016328:	ee67 caac 	vmul.f32	s25, s15, s25
 801632c:	eeb5 ba40 	vcmp.f32	s22, #0.0
 8016330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016334:	edc5 ca03 	vstr	s25, [r5, #12]
 8016338:	f000 80eb 	beq.w	8016512 <m_kalman_3gyro.isra.6.constprop.36+0x267a>
 801633c:	ee27 ba8b 	vmul.f32	s22, s15, s22
 8016340:	eeb5 aa40 	vcmp.f32	s20, #0.0
 8016344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016348:	ed85 ba04 	vstr	s22, [r5, #16]
 801634c:	f000 8094 	beq.w	8016478 <m_kalman_3gyro.isra.6.constprop.36+0x25e0>
 8016350:	ee27 aa8a 	vmul.f32	s20, s15, s20
 8016354:	eef5 aa40 	vcmp.f32	s21, #0.0
 8016358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801635c:	ed85 aa05 	vstr	s20, [r5, #20]
 8016360:	f000 80ba 	beq.w	80164d8 <m_kalman_3gyro.isra.6.constprop.36+0x2640>
 8016364:	ee67 aaaa 	vmul.f32	s21, s15, s21
 8016368:	eef5 9a40 	vcmp.f32	s19, #0.0
 801636c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016370:	edc5 aa06 	vstr	s21, [r5, #24]
 8016374:	f000 8098 	beq.w	80164a8 <m_kalman_3gyro.isra.6.constprop.36+0x2610>
 8016378:	ee67 9aa9 	vmul.f32	s19, s15, s19
 801637c:	eef5 8a40 	vcmp.f32	s17, #0.0
 8016380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016384:	edc5 9a07 	vstr	s19, [r5, #28]
 8016388:	f040 809e 	bne.w	80164c8 <m_kalman_3gyro.isra.6.constprop.36+0x2630>
 801638c:	eef0 7a48 	vmov.f32	s15, s16
 8016390:	ed9a 4a25 	vldr	s8, [sl, #148]	; 0x94
 8016394:	edda 6a26 	vldr	s13, [sl, #152]	; 0x98
 8016398:	edda 4a27 	vldr	s9, [sl, #156]	; 0x9c
 801639c:	edda 3a28 	vldr	s7, [sl, #160]	; 0xa0
 80163a0:	ed9a 5a29 	vldr	s10, [sl, #164]	; 0xa4
 80163a4:	ed9a 6a2a 	vldr	s12, [sl, #168]	; 0xa8
 80163a8:	edda 5a2b 	vldr	s11, [sl, #172]	; 0xac
 80163ac:	ed9a 3a2c 	vldr	s6, [sl, #176]	; 0xb0
 80163b0:	ed9a 7a2d 	vldr	s14, [sl, #180]	; 0xb4
 80163b4:	edc5 7a08 	vstr	s15, [r5, #32]
 80163b8:	ee34 ca0c 	vadd.f32	s24, s8, s24
 80163bc:	ee36 9a89 	vadd.f32	s18, s13, s18
 80163c0:	ee74 baab 	vadd.f32	s23, s9, s23
 80163c4:	ee73 caac 	vadd.f32	s25, s7, s25
 80163c8:	ee35 ba0b 	vadd.f32	s22, s10, s22
 80163cc:	ee36 aa0a 	vadd.f32	s20, s12, s20
 80163d0:	ee75 aaaa 	vadd.f32	s21, s11, s21
 80163d4:	ee73 9a29 	vadd.f32	s19, s6, s19
 80163d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80163dc:	ed8a ca25 	vstr	s24, [sl, #148]	; 0x94
 80163e0:	ed8a 9a26 	vstr	s18, [sl, #152]	; 0x98
 80163e4:	edca ba27 	vstr	s23, [sl, #156]	; 0x9c
 80163e8:	edca ca28 	vstr	s25, [sl, #160]	; 0xa0
 80163ec:	ed8a ba29 	vstr	s22, [sl, #164]	; 0xa4
 80163f0:	ed8a aa2a 	vstr	s20, [sl, #168]	; 0xa8
 80163f4:	edca aa2b 	vstr	s21, [sl, #172]	; 0xac
 80163f8:	edca 9a2c 	vstr	s19, [sl, #176]	; 0xb0
 80163fc:	edca 7a2d 	vstr	s15, [sl, #180]	; 0xb4
 8016400:	f7ff bbcd 	b.w	8015b9e <m_kalman_3gyro.isra.6.constprop.36+0x1d06>
 8016404:	edd3 6a00 	vldr	s13, [r3]
 8016408:	ed93 7a03 	vldr	s14, [r3, #12]
 801640c:	edd3 7a06 	vldr	s15, [r3, #24]
 8016410:	f7ff bbb4 	b.w	8015b7c <m_kalman_3gyro.isra.6.constprop.36+0x1ce4>
 8016414:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8016418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801641c:	f000 8130 	beq.w	8016680 <m_kalman_3gyro.isra.6.constprop.36+0x27e8>
 8016420:	eef5 7a40 	vcmp.f32	s15, #0.0
 8016424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016428:	f040 850b 	bne.w	8016e42 <m_kalman_3gyro.isra.6.constprop.36+0x2faa>
 801642c:	eeb0 9a48 	vmov.f32	s18, s16
 8016430:	eeb0 ca48 	vmov.f32	s24, s16
 8016434:	eef5 ca40 	vcmp.f32	s25, #0.0
 8016438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801643c:	ed85 8a02 	vstr	s16, [r5, #8]
 8016440:	d077      	beq.n	8016532 <m_kalman_3gyro.isra.6.constprop.36+0x269a>
 8016442:	eef5 7a40 	vcmp.f32	s15, #0.0
 8016446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801644a:	eef0 ba48 	vmov.f32	s23, s16
 801644e:	f47f af6b 	bne.w	8016328 <m_kalman_3gyro.isra.6.constprop.36+0x2490>
 8016452:	eeb5 ba40 	vcmp.f32	s22, #0.0
 8016456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801645a:	ed85 8a03 	vstr	s16, [r5, #12]
 801645e:	d056      	beq.n	801650e <m_kalman_3gyro.isra.6.constprop.36+0x2676>
 8016460:	eef5 7a40 	vcmp.f32	s15, #0.0
 8016464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016468:	f041 813a 	bne.w	80176e0 <m_kalman_3gyro.isra.6.constprop.36+0x3848>
 801646c:	ed85 8a04 	vstr	s16, [r5, #16]
 8016470:	eeb0 ba48 	vmov.f32	s22, s16
 8016474:	eef0 ca48 	vmov.f32	s25, s16
 8016478:	eef5 aa40 	vcmp.f32	s21, #0.0
 801647c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016480:	ed85 8a05 	vstr	s16, [r5, #20]
 8016484:	d026      	beq.n	80164d4 <m_kalman_3gyro.isra.6.constprop.36+0x263c>
 8016486:	eef5 7a40 	vcmp.f32	s15, #0.0
 801648a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801648e:	f041 8123 	bne.w	80176d8 <m_kalman_3gyro.isra.6.constprop.36+0x3840>
 8016492:	eef5 9a40 	vcmp.f32	s19, #0.0
 8016496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801649a:	ed85 8a06 	vstr	s16, [r5, #24]
 801649e:	d12b      	bne.n	80164f8 <m_kalman_3gyro.isra.6.constprop.36+0x2660>
 80164a0:	eef0 aa48 	vmov.f32	s21, s16
 80164a4:	eeb0 aa48 	vmov.f32	s20, s16
 80164a8:	eef5 8a40 	vcmp.f32	s17, #0.0
 80164ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80164b0:	ed85 8a07 	vstr	s16, [r5, #28]
 80164b4:	f000 84bf 	beq.w	8016e36 <m_kalman_3gyro.isra.6.constprop.36+0x2f9e>
 80164b8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80164bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80164c0:	eef0 9a48 	vmov.f32	s19, s16
 80164c4:	f43f af62 	beq.w	801638c <m_kalman_3gyro.isra.6.constprop.36+0x24f4>
 80164c8:	ee67 7aa8 	vmul.f32	s15, s15, s17
 80164cc:	e760      	b.n	8016390 <m_kalman_3gyro.isra.6.constprop.36+0x24f8>
 80164ce:	eddf 7a9e 	vldr	s15, [pc, #632]	; 8016748 <m_kalman_3gyro.isra.6.constprop.36+0x28b0>
 80164d2:	e455      	b.n	8015d80 <m_kalman_3gyro.isra.6.constprop.36+0x1ee8>
 80164d4:	eeb0 aa48 	vmov.f32	s20, s16
 80164d8:	eef5 9a40 	vcmp.f32	s19, #0.0
 80164dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80164e0:	ed85 8a06 	vstr	s16, [r5, #24]
 80164e4:	f000 849d 	beq.w	8016e22 <m_kalman_3gyro.isra.6.constprop.36+0x2f8a>
 80164e8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80164ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80164f0:	d004      	beq.n	80164fc <m_kalman_3gyro.isra.6.constprop.36+0x2664>
 80164f2:	eef0 aa48 	vmov.f32	s21, s16
 80164f6:	e73f      	b.n	8016378 <m_kalman_3gyro.isra.6.constprop.36+0x24e0>
 80164f8:	eeb0 aa48 	vmov.f32	s20, s16
 80164fc:	ed85 8a07 	vstr	s16, [r5, #28]
 8016500:	eef0 9a48 	vmov.f32	s19, s16
 8016504:	eef0 aa48 	vmov.f32	s21, s16
 8016508:	eef0 7a48 	vmov.f32	s15, s16
 801650c:	e740      	b.n	8016390 <m_kalman_3gyro.isra.6.constprop.36+0x24f8>
 801650e:	eef0 ca48 	vmov.f32	s25, s16
 8016512:	eeb5 aa40 	vcmp.f32	s20, #0.0
 8016516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801651a:	ed85 8a04 	vstr	s16, [r5, #16]
 801651e:	f000 849e 	beq.w	8016e5e <m_kalman_3gyro.isra.6.constprop.36+0x2fc6>
 8016522:	eef5 7a40 	vcmp.f32	s15, #0.0
 8016526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801652a:	eeb0 ba48 	vmov.f32	s22, s16
 801652e:	d0a3      	beq.n	8016478 <m_kalman_3gyro.isra.6.constprop.36+0x25e0>
 8016530:	e70e      	b.n	8016350 <m_kalman_3gyro.isra.6.constprop.36+0x24b8>
 8016532:	eef0 ba48 	vmov.f32	s23, s16
 8016536:	e78c      	b.n	8016452 <m_kalman_3gyro.isra.6.constprop.36+0x25ba>
 8016538:	edda 8a26 	vldr	s17, [sl, #152]	; 0x98
 801653c:	ed9a 9a25 	vldr	s18, [sl, #148]	; 0x94
 8016540:	ed9a 8a27 	vldr	s16, [sl, #156]	; 0x9c
 8016544:	ee28 aaa8 	vmul.f32	s20, s17, s17
 8016548:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801654c:	eea9 aa09 	vfma.f32	s20, s18, s18
 8016550:	eea8 aa08 	vfma.f32	s20, s16, s16
 8016554:	eeb4 aae7 	vcmpe.f32	s20, s15
 8016558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801655c:	f100 84f3 	bmi.w	8016f46 <m_kalman_3gyro.isra.6.constprop.36+0x30ae>
 8016560:	eddf 9a79 	vldr	s19, [pc, #484]	; 8016748 <m_kalman_3gyro.isra.6.constprop.36+0x28b0>
 8016564:	f8ba 3030 	ldrh.w	r3, [sl, #48]	; 0x30
 8016568:	2b00      	cmp	r3, #0
 801656a:	f000 847c 	beq.w	8016e66 <m_kalman_3gyro.isra.6.constprop.36+0x2fce>
 801656e:	f8dd 06c8 	ldr.w	r0, [sp, #1736]	; 0x6c8
 8016572:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016574:	2300      	movs	r3, #0
 8016576:	6003      	str	r3, [r0, #0]
 8016578:	f8dd 06c8 	ldr.w	r0, [sp, #1736]	; 0x6c8
 801657c:	600b      	str	r3, [r1, #0]
 801657e:	6043      	str	r3, [r0, #4]
 8016580:	f8dd 06c8 	ldr.w	r0, [sp, #1736]	; 0x6c8
 8016584:	604b      	str	r3, [r1, #4]
 8016586:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801658a:	608b      	str	r3, [r1, #8]
 801658c:	6083      	str	r3, [r0, #8]
 801658e:	60ca      	str	r2, [r1, #12]
 8016590:	60c2      	str	r2, [r0, #12]
 8016592:	460f      	mov	r7, r1
 8016594:	4638      	mov	r0, r7
 8016596:	9901      	ldr	r1, [sp, #4]
 8016598:	f7f9 f99e 	bl	800f8d8 <m_q2dcm_eml>
 801659c:	ed97 9a01 	vldr	s18, [r7, #4]
 80165a0:	edd7 9a00 	vldr	s19, [r7]
 80165a4:	edd7 8a02 	vldr	s17, [r7, #8]
 80165a8:	ed97 8a03 	vldr	s16, [r7, #12]
 80165ac:	ee69 7a09 	vmul.f32	s15, s18, s18
 80165b0:	f50a 7616 	add.w	r6, sl, #600	; 0x258
 80165b4:	eee9 7aa9 	vfma.f32	s15, s19, s19
 80165b8:	eee8 7aa8 	vfma.f32	s15, s17, s17
 80165bc:	eee8 7a08 	vfma.f32	s15, s16, s16
 80165c0:	ee17 0a90 	vmov	r0, s15
 80165c4:	f7e9 ffc8 	bl	8000558 <__aeabi_f2d>
 80165c8:	f005 f864 	bl	801b694 <sqrt>
 80165cc:	f7ea faf4 	bl	8000bb8 <__aeabi_d2f>
 80165d0:	ee07 0a90 	vmov	s15, r0
 80165d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80165d8:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80165dc:	e9dd 5429 	ldrd	r5, r4, [sp, #164]	; 0xa4
 80165e0:	ee69 9aa7 	vmul.f32	s19, s19, s15
 80165e4:	ee29 9a27 	vmul.f32	s18, s18, s15
 80165e8:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80165ec:	ee28 8a27 	vmul.f32	s16, s16, s15
 80165f0:	edc7 9a00 	vstr	s19, [r7]
 80165f4:	ed87 9a01 	vstr	s18, [r7, #4]
 80165f8:	edc7 8a02 	vstr	s17, [r7, #8]
 80165fc:	ed87 8a03 	vstr	s16, [r7, #12]
 8016600:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8016604:	f8dd 76c4 	ldr.w	r7, [sp, #1732]	; 0x6c4
 8016608:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 801660c:	6821      	ldr	r1, [r4, #0]
 801660e:	6862      	ldr	r2, [r4, #4]
 8016610:	68a3      	ldr	r3, [r4, #8]
 8016612:	68e0      	ldr	r0, [r4, #12]
 8016614:	60e8      	str	r0, [r5, #12]
 8016616:	3410      	adds	r4, #16
 8016618:	42b4      	cmp	r4, r6
 801661a:	6029      	str	r1, [r5, #0]
 801661c:	606a      	str	r2, [r5, #4]
 801661e:	60ab      	str	r3, [r5, #8]
 8016620:	f105 0510 	add.w	r5, r5, #16
 8016624:	d1f2      	bne.n	801660c <m_kalman_3gyro.isra.6.constprop.36+0x2774>
 8016626:	6823      	ldr	r3, [r4, #0]
 8016628:	602b      	str	r3, [r5, #0]
 801662a:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 801662e:	f8da 3094 	ldr.w	r3, [sl, #148]	; 0x94
 8016632:	6013      	str	r3, [r2, #0]
 8016634:	f8da 3098 	ldr.w	r3, [sl, #152]	; 0x98
 8016638:	6053      	str	r3, [r2, #4]
 801663a:	f8da 309c 	ldr.w	r3, [sl, #156]	; 0x9c
 801663e:	6093      	str	r3, [r2, #8]
 8016640:	f8da 30a0 	ldr.w	r3, [sl, #160]	; 0xa0
 8016644:	60d3      	str	r3, [r2, #12]
 8016646:	f8da 30a4 	ldr.w	r3, [sl, #164]	; 0xa4
 801664a:	6113      	str	r3, [r2, #16]
 801664c:	f8da 30a8 	ldr.w	r3, [sl, #168]	; 0xa8
 8016650:	6153      	str	r3, [r2, #20]
 8016652:	f8da 30ac 	ldr.w	r3, [sl, #172]	; 0xac
 8016656:	6193      	str	r3, [r2, #24]
 8016658:	f8da 30b0 	ldr.w	r3, [sl, #176]	; 0xb0
 801665c:	61d3      	str	r3, [r2, #28]
 801665e:	f8da 30b4 	ldr.w	r3, [sl, #180]	; 0xb4
 8016662:	6213      	str	r3, [r2, #32]
 8016664:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016666:	f8dd 26cc 	ldr.w	r2, [sp, #1740]	; 0x6cc
 801666a:	681b      	ldr	r3, [r3, #0]
 801666c:	6013      	str	r3, [r2, #0]
 801666e:	f20d 6d34 	addw	sp, sp, #1588	; 0x634
 8016672:	ecbd 8b10 	vpop	{d8-d15}
 8016676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801667a:	eddf 7a33 	vldr	s15, [pc, #204]	; 8016748 <m_kalman_3gyro.isra.6.constprop.36+0x28b0>
 801667e:	e439      	b.n	8015ef4 <m_kalman_3gyro.isra.6.constprop.36+0x205c>
 8016680:	eef5 ba40 	vcmp.f32	s23, #0.0
 8016684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016688:	f43f aed0 	beq.w	801642c <m_kalman_3gyro.isra.6.constprop.36+0x2594>
 801668c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8016690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016694:	eeb0 9a48 	vmov.f32	s18, s16
 8016698:	eeb0 ca48 	vmov.f32	s24, s16
 801669c:	f43f aeca 	beq.w	8016434 <m_kalman_3gyro.isra.6.constprop.36+0x259c>
 80166a0:	e638      	b.n	8016314 <m_kalman_3gyro.isra.6.constprop.36+0x247c>
 80166a2:	2300      	movs	r3, #0
 80166a4:	f88a 31ff 	strb.w	r3, [sl, #511]	; 0x1ff
 80166a8:	f88a 3200 	strb.w	r3, [sl, #512]	; 0x200
 80166ac:	f88a 3201 	strb.w	r3, [sl, #513]	; 0x201
 80166b0:	f88a 3205 	strb.w	r3, [sl, #517]	; 0x205
 80166b4:	f88a 3206 	strb.w	r3, [sl, #518]	; 0x206
 80166b8:	f7ff ba17 	b.w	8015aea <m_kalman_3gyro.isra.6.constprop.36+0x1c52>
 80166bc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80166c0:	ee79 7a67 	vsub.f32	s15, s18, s15
 80166c4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80166c6:	eef0 7ae7 	vabs.f32	s15, s15
 80166ca:	edc3 7a00 	vstr	s15, [r3]
 80166ce:	f7fe bebd 	b.w	801544c <m_kalman_3gyro.isra.6.constprop.36+0x15b4>
 80166d2:	f8da 2458 	ldr.w	r2, [sl, #1112]	; 0x458
 80166d6:	2a31      	cmp	r2, #49	; 0x31
 80166d8:	f73e afe4 	bgt.w	80156a4 <m_kalman_3gyro.isra.6.constprop.36+0x180c>
 80166dc:	2300      	movs	r3, #0
 80166de:	2a00      	cmp	r2, #0
 80166e0:	f8aa 3202 	strh.w	r3, [sl, #514]	; 0x202
 80166e4:	f88a 3204 	strb.w	r3, [sl, #516]	; 0x204
 80166e8:	f102 0301 	add.w	r3, r2, #1
 80166ec:	dd03      	ble.n	80166f6 <m_kalman_3gyro.isra.6.constprop.36+0x285e>
 80166ee:	2b00      	cmp	r3, #0
 80166f0:	bfd8      	it	le
 80166f2:	f06f 4300 	mvnle.w	r3, #2147483648	; 0x80000000
 80166f6:	f8ca 3458 	str.w	r3, [sl, #1112]	; 0x458
 80166fa:	f7fe bfd3 	b.w	80156a4 <m_kalman_3gyro.isra.6.constprop.36+0x180c>
 80166fe:	f8da 20a4 	ldr.w	r2, [sl, #164]	; 0xa4
 8016702:	f8da 30a8 	ldr.w	r3, [sl, #168]	; 0xa8
 8016706:	f8ca 2080 	str.w	r2, [sl, #128]	; 0x80
 801670a:	f8ca 3084 	str.w	r3, [sl, #132]	; 0x84
 801670e:	f8da 20a0 	ldr.w	r2, [sl, #160]	; 0xa0
 8016712:	f8ca 207c 	str.w	r2, [sl, #124]	; 0x7c
 8016716:	2300      	movs	r3, #0
 8016718:	f8ca 3450 	str.w	r3, [sl, #1104]	; 0x450
 801671c:	f8ca 345c 	str.w	r3, [sl, #1116]	; 0x45c
 8016720:	ac86      	add	r4, sp, #536	; 0x218
 8016722:	f7fe bfb0 	b.w	8015686 <m_kalman_3gyro.isra.6.constprop.36+0x17ee>
 8016726:	2301      	movs	r3, #1
 8016728:	f88a 3205 	strb.w	r3, [sl, #517]	; 0x205
 801672c:	f88a 3207 	strb.w	r3, [sl, #519]	; 0x207
 8016730:	f7ff b95c 	b.w	80159ec <m_kalman_3gyro.isra.6.constprop.36+0x1b54>
 8016734:	eddd 8aa2 	vldr	s17, [sp, #648]	; 0x288
 8016738:	ed9d 9aac 	vldr	s18, [sp, #688]	; 0x2b0
 801673c:	f7fe be9f 	b.w	801547e <m_kalman_3gyro.isra.6.constprop.36+0x15e6>
 8016740:	2400      	movs	r4, #0
 8016742:	4d02      	ldr	r5, [pc, #8]	; (801674c <m_kalman_3gyro.isra.6.constprop.36+0x28b4>)
 8016744:	f7fe bd6a 	b.w	801521c <m_kalman_3gyro.isra.6.constprop.36+0x1384>
 8016748:	00000000 	.word	0x00000000
 801674c:	3ff00000 	.word	0x3ff00000
 8016750:	cccccccd 	.word	0xcccccccd
 8016754:	f60a 0378 	addw	r3, sl, #2168	; 0x878
 8016758:	ed93 7a00 	vldr	s14, [r3]
 801675c:	f60a 0374 	addw	r3, sl, #2164	; 0x874
 8016760:	ee67 7a07 	vmul.f32	s15, s14, s14
 8016764:	ed93 aa00 	vldr	s20, [r3]
 8016768:	ed8d 7a06 	vstr	s14, [sp, #24]
 801676c:	eeea 7a0a 	vfma.f32	s15, s20, s20
 8016770:	f60a 037c 	addw	r3, sl, #2172	; 0x87c
 8016774:	ac86      	add	r4, sp, #536	; 0x218
 8016776:	edd3 aa00 	vldr	s21, [r3]
 801677a:	eeea 7aaa 	vfma.f32	s15, s21, s21
 801677e:	eef7 fa00 	vmov.f32	s31, #112	; 0x3f800000  1.0
 8016782:	ee17 0a90 	vmov	r0, s15
 8016786:	f7e9 fee7 	bl	8000558 <__aeabi_f2d>
 801678a:	f004 ff83 	bl	801b694 <sqrt>
 801678e:	f60a 0384 	addw	r3, sl, #2180	; 0x884
 8016792:	ed93 ba00 	vldr	s22, [r3]
 8016796:	f50a 6308 	add.w	r3, sl, #2176	; 0x880
 801679a:	ed93 da00 	vldr	s26, [r3]
 801679e:	ee6b 7a0b 	vmul.f32	s15, s22, s22
 80167a2:	f60a 0388 	addw	r3, sl, #2184	; 0x888
 80167a6:	eeed 7a0d 	vfma.f32	s15, s26, s26
 80167aa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80167ae:	edd3 ba00 	vldr	s23, [r3]
 80167b2:	eeeb 7aab 	vfma.f32	s15, s23, s23
 80167b6:	ee17 0a90 	vmov	r0, s15
 80167ba:	f7e9 fecd 	bl	8000558 <__aeabi_f2d>
 80167be:	f004 ff69 	bl	801b694 <sqrt>
 80167c2:	f7ea f9f9 	bl	8000bb8 <__aeabi_d2f>
 80167c6:	4bd2      	ldr	r3, [pc, #840]	; (8016b10 <m_kalman_3gyro.isra.6.constprop.36+0x2c78>)
 80167c8:	ee07 0a90 	vmov	s15, r0
 80167cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80167d0:	edc3 7a00 	vstr	s15, [r3]
 80167d4:	ee8f caa7 	vdiv.f32	s24, s31, s15
 80167d8:	f7ea f9ee 	bl	8000bb8 <__aeabi_d2f>
 80167dc:	ee07 0a90 	vmov	s15, r0
 80167e0:	eecf 7aa7 	vdiv.f32	s15, s31, s15
 80167e4:	ee2c da0d 	vmul.f32	s26, s24, s26
 80167e8:	ee27 6aaa 	vmul.f32	s12, s15, s21
 80167ec:	ed9d 7a06 	vldr	s14, [sp, #24]
 80167f0:	ee6c ba2b 	vmul.f32	s23, s24, s23
 80167f4:	ee27 aa8a 	vmul.f32	s20, s15, s20
 80167f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80167fc:	ee2d 7a46 	vnmul.f32	s14, s26, s12
 8016800:	ee2c ca0b 	vmul.f32	s24, s24, s22
 8016804:	eeab 7a8a 	vfma.f32	s14, s23, s20
 8016808:	ee67 6aeb 	vnmul.f32	s13, s15, s23
 801680c:	eef0 aa47 	vmov.f32	s21, s14
 8016810:	eee6 6a0c 	vfma.f32	s13, s12, s24
 8016814:	ee27 7a07 	vmul.f32	s14, s14, s14
 8016818:	ee2a aa4c 	vnmul.f32	s20, s20, s24
 801681c:	eeb0 ba66 	vmov.f32	s22, s13
 8016820:	eea7 aa8d 	vfma.f32	s20, s15, s26
 8016824:	eef0 7a47 	vmov.f32	s15, s14
 8016828:	eee6 7aa6 	vfma.f32	s15, s13, s13
 801682c:	eeea 7a0a 	vfma.f32	s15, s20, s20
 8016830:	ee17 0a90 	vmov	r0, s15
 8016834:	f7e9 fe90 	bl	8000558 <__aeabi_f2d>
 8016838:	f004 ff2c 	bl	801b694 <sqrt>
 801683c:	f7ea f9bc 	bl	8000bb8 <__aeabi_d2f>
 8016840:	ee07 0a90 	vmov	s15, r0
 8016844:	eecf 7aa7 	vdiv.f32	s15, s31, s15
 8016848:	aa7d      	add	r2, sp, #500	; 0x1f4
 801684a:	4620      	mov	r0, r4
 801684c:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801684e:	ed84 da02 	vstr	s26, [r4, #8]
 8016852:	ee6b 6a27 	vmul.f32	s13, s22, s15
 8016856:	ee2a 7aa7 	vmul.f32	s14, s21, s15
 801685a:	ee6a 7a27 	vmul.f32	s15, s20, s15
 801685e:	ee6d 5a47 	vnmul.f32	s11, s26, s14
 8016862:	ee2c 5a67 	vnmul.f32	s10, s24, s15
 8016866:	ee26 6aeb 	vnmul.f32	s12, s13, s23
 801686a:	eeab 5a87 	vfma.f32	s10, s23, s14
 801686e:	eee6 5a8c 	vfma.f32	s11, s13, s24
 8016872:	eea7 6a8d 	vfma.f32	s12, s15, s26
 8016876:	edc4 6a01 	vstr	s13, [r4, #4]
 801687a:	ed84 7a04 	vstr	s14, [r4, #16]
 801687e:	edc4 7a07 	vstr	s15, [r4, #28]
 8016882:	ed84 5a00 	vstr	s10, [r4]
 8016886:	edc4 5a06 	vstr	s11, [r4, #24]
 801688a:	ed84 6a03 	vstr	s12, [r4, #12]
 801688e:	ed84 ca05 	vstr	s24, [r4, #20]
 8016892:	edc4 ba08 	vstr	s23, [r4, #32]
 8016896:	f7f8 fe21 	bl	800f4dc <m_mldivide>
 801689a:	a94b      	add	r1, sp, #300	; 0x12c
 801689c:	a87d      	add	r0, sp, #500	; 0x1f4
 801689e:	f7f9 f99b 	bl	800fbd8 <m_dcm2q_eml>
 80168a2:	eddf 7a9c 	vldr	s15, [pc, #624]	; 8016b14 <m_kalman_3gyro.isra.6.constprop.36+0x2c7c>
 80168a6:	984b      	ldr	r0, [sp, #300]	; 0x12c
 80168a8:	994c      	ldr	r1, [sp, #304]	; 0x130
 80168aa:	9a4d      	ldr	r2, [sp, #308]	; 0x134
 80168ac:	9b4e      	ldr	r3, [sp, #312]	; 0x138
 80168ae:	904f      	str	r0, [sp, #316]	; 0x13c
 80168b0:	eeb0 7a67 	vmov.f32	s14, s15
 80168b4:	eef0 6a67 	vmov.f32	s13, s15
 80168b8:	9150      	str	r1, [sp, #320]	; 0x140
 80168ba:	9251      	str	r2, [sp, #324]	; 0x144
 80168bc:	9352      	str	r3, [sp, #328]	; 0x148
 80168be:	ed96 5a06 	vldr	s10, [r6, #24]
 80168c2:	edd6 5a07 	vldr	s11, [r6, #28]
 80168c6:	ed96 6a08 	vldr	s12, [r6, #32]
 80168ca:	3624      	adds	r6, #36	; 0x24
 80168cc:	42b5      	cmp	r5, r6
 80168ce:	ee76 6a85 	vadd.f32	s13, s13, s10
 80168d2:	ee37 7a25 	vadd.f32	s14, s14, s11
 80168d6:	ee77 7a86 	vadd.f32	s15, s15, s12
 80168da:	d1f0      	bne.n	80168be <m_kalman_3gyro.isra.6.constprop.36+0x2a26>
 80168dc:	ed9f 6a8e 	vldr	s12, [pc, #568]	; 8016b18 <m_kalman_3gyro.isra.6.constprop.36+0x2c80>
 80168e0:	eeb4 eaed 	vcmpe.f32	s28, s27
 80168e4:	ee66 6a86 	vmul.f32	s13, s13, s12
 80168e8:	ee27 7a06 	vmul.f32	s14, s14, s12
 80168ec:	ee67 7a86 	vmul.f32	s15, s15, s12
 80168f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168f4:	edcd 6a3e 	vstr	s13, [sp, #248]	; 0xf8
 80168f8:	ed8d 7a3f 	vstr	s14, [sp, #252]	; 0xfc
 80168fc:	edcd 7a40 	vstr	s15, [sp, #256]	; 0x100
 8016900:	f340 8339 	ble.w	8016f76 <m_kalman_3gyro.isra.6.constprop.36+0x30de>
 8016904:	eef4 eaec 	vcmpe.f32	s29, s25
 8016908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801690c:	f77e ae9c 	ble.w	8015648 <m_kalman_3gyro.isra.6.constprop.36+0x17b0>
 8016910:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8016912:	edd3 7a00 	vldr	s15, [r3]
 8016916:	eeb4 fae7 	vcmpe.f32	s30, s15
 801691a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801691e:	f77e ae93 	ble.w	8015648 <m_kalman_3gyro.isra.6.constprop.36+0x17b0>
 8016922:	9b08      	ldr	r3, [sp, #32]
 8016924:	eddf 7a7d 	vldr	s15, [pc, #500]	; 8016b1c <m_kalman_3gyro.isra.6.constprop.36+0x2c84>
 8016928:	ed93 7a00 	vldr	s14, [r3]
 801692c:	eeb0 7ac7 	vabs.f32	s14, s14
 8016930:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016938:	f57e ae86 	bpl.w	8015648 <m_kalman_3gyro.isra.6.constprop.36+0x17b0>
 801693c:	ed93 7a01 	vldr	s14, [r3, #4]
 8016940:	eeb0 7ac7 	vabs.f32	s14, s14
 8016944:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801694c:	f57e ae7c 	bpl.w	8015648 <m_kalman_3gyro.isra.6.constprop.36+0x17b0>
 8016950:	ed93 7a02 	vldr	s14, [r3, #8]
 8016954:	eeb0 7ac7 	vabs.f32	s14, s14
 8016958:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801695c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016960:	f57e ae72 	bpl.w	8015648 <m_kalman_3gyro.isra.6.constprop.36+0x17b0>
 8016964:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016966:	eddf 7a6e 	vldr	s15, [pc, #440]	; 8016b20 <m_kalman_3gyro.isra.6.constprop.36+0x2c88>
 801696a:	ed93 7a00 	vldr	s14, [r3]
 801696e:	eeb0 7ac7 	vabs.f32	s14, s14
 8016972:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801697a:	f57e ae65 	bpl.w	8015648 <m_kalman_3gyro.isra.6.constprop.36+0x17b0>
 801697e:	ed93 7a01 	vldr	s14, [r3, #4]
 8016982:	eeb0 7ac7 	vabs.f32	s14, s14
 8016986:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801698a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801698e:	f57e ae5b 	bpl.w	8015648 <m_kalman_3gyro.isra.6.constprop.36+0x17b0>
 8016992:	ed93 7a02 	vldr	s14, [r3, #8]
 8016996:	eeb0 7ac7 	vabs.f32	s14, s14
 801699a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801699e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80169a2:	f57e ae51 	bpl.w	8015648 <m_kalman_3gyro.isra.6.constprop.36+0x17b0>
 80169a6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80169a8:	f8da 2450 	ldr.w	r2, [sl, #1104]	; 0x450
 80169ac:	ed93 5a00 	vldr	s10, [r3]
 80169b0:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 80169b2:	edd3 5a00 	vldr	s11, [r3]
 80169b6:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80169b8:	edd3 6a00 	vldr	s13, [r3]
 80169bc:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80169be:	2a09      	cmp	r2, #9
 80169c0:	eef4 5ac5 	vcmpe.f32	s11, s10
 80169c4:	f50a 6198 	add.w	r1, sl, #1216	; 0x4c0
 80169c8:	ed93 7a00 	vldr	s14, [r3]
 80169cc:	ed91 6a00 	vldr	s12, [r1]
 80169d0:	bfcc      	ite	gt
 80169d2:	230a      	movgt	r3, #10
 80169d4:	2305      	movle	r3, #5
 80169d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80169da:	bfb4      	ite	lt
 80169dc:	eef0 7a45 	vmovlt.f32	s15, s10
 80169e0:	eef0 7a65 	vmovge.f32	s15, s11
 80169e4:	eeb4 6ae7 	vcmpe.f32	s12, s15
 80169e8:	bf88      	it	hi
 80169ea:	eef0 5a45 	vmovhi.f32	s11, s10
 80169ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80169f2:	eeb4 6ae5 	vcmpe.f32	s12, s11
 80169f6:	bfa8      	it	ge
 80169f8:	eef0 7a46 	vmovge.f32	s15, s12
 80169fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a00:	bf88      	it	hi
 8016a02:	eeb0 6a65 	vmovhi.f32	s12, s11
 8016a06:	eef4 6ae7 	vcmpe.f32	s13, s15
 8016a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a0e:	eef4 6ac6 	vcmpe.f32	s13, s12
 8016a12:	bfa8      	it	ge
 8016a14:	eef0 7a66 	vmovge.f32	s15, s13
 8016a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a1c:	bf88      	it	hi
 8016a1e:	eef0 6a46 	vmovhi.f32	s13, s12
 8016a22:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a2a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8016a2e:	bfa8      	it	ge
 8016a30:	eef0 7a47 	vmovge.f32	s15, s14
 8016a34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a38:	bf88      	it	hi
 8016a3a:	eeb0 7a66 	vmovhi.f32	s14, s13
 8016a3e:	2b05      	cmp	r3, #5
 8016a40:	d05b      	beq.n	8016afa <m_kalman_3gyro.isra.6.constprop.36+0x2c62>
 8016a42:	f20a 512c 	addw	r1, sl, #1324	; 0x52c
 8016a46:	edd1 6a00 	vldr	s13, [r1]
 8016a4a:	f50a 61aa 	add.w	r1, sl, #1360	; 0x550
 8016a4e:	eef4 6ae7 	vcmpe.f32	s13, s15
 8016a52:	ed91 6a00 	vldr	s12, [r1]
 8016a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a5a:	eef4 6ac7 	vcmpe.f32	s13, s14
 8016a5e:	bfa8      	it	ge
 8016a60:	eef0 7a66 	vmovge.f32	s15, s13
 8016a64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a68:	bf98      	it	ls
 8016a6a:	eeb0 7a66 	vmovls.f32	s14, s13
 8016a6e:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8016a72:	f20a 5174 	addw	r1, sl, #1396	; 0x574
 8016a76:	edd1 6a00 	vldr	s13, [r1]
 8016a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a7e:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8016a82:	bfa8      	it	ge
 8016a84:	eef0 7a46 	vmovge.f32	s15, s12
 8016a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a8c:	bf88      	it	hi
 8016a8e:	eeb0 6a47 	vmovhi.f32	s12, s14
 8016a92:	eef4 6ae7 	vcmpe.f32	s13, s15
 8016a96:	f50a 61b3 	add.w	r1, sl, #1432	; 0x598
 8016a9a:	ed91 7a00 	vldr	s14, [r1]
 8016a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016aa2:	eef4 6ac6 	vcmpe.f32	s13, s12
 8016aa6:	bfa8      	it	ge
 8016aa8:	eef0 7a66 	vmovge.f32	s15, s13
 8016aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ab0:	bf88      	it	hi
 8016ab2:	eef0 6a46 	vmovhi.f32	s13, s12
 8016ab6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016abe:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8016ac2:	bfa8      	it	ge
 8016ac4:	eef0 7a47 	vmovge.f32	s15, s14
 8016ac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016acc:	bf88      	it	hi
 8016ace:	eeb0 7a66 	vmovhi.f32	s14, s13
 8016ad2:	2b0a      	cmp	r3, #10
 8016ad4:	d111      	bne.n	8016afa <m_kalman_3gyro.isra.6.constprop.36+0x2c62>
 8016ad6:	f20a 51bc 	addw	r1, sl, #1468	; 0x5bc
 8016ada:	edd1 6a00 	vldr	s13, [r1]
 8016ade:	eef4 7ae6 	vcmpe.f32	s15, s13
 8016ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ae6:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8016aea:	bfb8      	it	lt
 8016aec:	eef0 7a66 	vmovlt.f32	s15, s13
 8016af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016af4:	bf88      	it	hi
 8016af6:	eeb0 7a66 	vmovhi.f32	s14, s13
 8016afa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016afe:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8016b24 <m_kalman_3gyro.isra.6.constprop.36+0x2c8c>
 8016b02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016b06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b0a:	f73e ad9d 	bgt.w	8015648 <m_kalman_3gyro.isra.6.constprop.36+0x17b0>
 8016b0e:	e00b      	b.n	8016b28 <m_kalman_3gyro.isra.6.constprop.36+0x2c90>
 8016b10:	20001bec 	.word	0x20001bec
 8016b14:	00000000 	.word	0x00000000
 8016b18:	3d088889 	.word	0x3d088889
 8016b1c:	3e4ccccd 	.word	0x3e4ccccd
 8016b20:	3f99999a 	.word	0x3f99999a
 8016b24:	3be56042 	.word	0x3be56042
 8016b28:	9921      	ldr	r1, [sp, #132]	; 0x84
 8016b2a:	ed91 5a00 	vldr	s10, [r1]
 8016b2e:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8016b30:	edd1 5a00 	vldr	s11, [r1]
 8016b34:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8016b36:	edd1 6a00 	vldr	s13, [r1]
 8016b3a:	9933      	ldr	r1, [sp, #204]	; 0xcc
 8016b3c:	eef4 5ac5 	vcmpe.f32	s11, s10
 8016b40:	ed91 7a00 	vldr	s14, [r1]
 8016b44:	f20a 41c4 	addw	r1, sl, #1220	; 0x4c4
 8016b48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b4c:	ed91 6a00 	vldr	s12, [r1]
 8016b50:	bfb4      	ite	lt
 8016b52:	eef0 7a45 	vmovlt.f32	s15, s10
 8016b56:	eef0 7a65 	vmovge.f32	s15, s11
 8016b5a:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8016b5e:	bf88      	it	hi
 8016b60:	eef0 5a45 	vmovhi.f32	s11, s10
 8016b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b68:	eeb4 6ae5 	vcmpe.f32	s12, s11
 8016b6c:	bfa8      	it	ge
 8016b6e:	eef0 7a46 	vmovge.f32	s15, s12
 8016b72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b76:	bf88      	it	hi
 8016b78:	eeb0 6a65 	vmovhi.f32	s12, s11
 8016b7c:	eef4 6ae7 	vcmpe.f32	s13, s15
 8016b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b84:	eef4 6ac6 	vcmpe.f32	s13, s12
 8016b88:	bfa8      	it	ge
 8016b8a:	eef0 7a66 	vmovge.f32	s15, s13
 8016b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b92:	bf88      	it	hi
 8016b94:	eef0 6a46 	vmovhi.f32	s13, s12
 8016b98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ba0:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8016ba4:	bfa8      	it	ge
 8016ba6:	eef0 7a47 	vmovge.f32	s15, s14
 8016baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016bae:	bf88      	it	hi
 8016bb0:	eeb0 7a66 	vmovhi.f32	s14, s13
 8016bb4:	2b05      	cmp	r3, #5
 8016bb6:	d05b      	beq.n	8016c70 <m_kalman_3gyro.isra.6.constprop.36+0x2dd8>
 8016bb8:	f50a 61a6 	add.w	r1, sl, #1328	; 0x530
 8016bbc:	edd1 6a00 	vldr	s13, [r1]
 8016bc0:	f20a 5154 	addw	r1, sl, #1364	; 0x554
 8016bc4:	eef4 6ae7 	vcmpe.f32	s13, s15
 8016bc8:	ed91 6a00 	vldr	s12, [r1]
 8016bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016bd0:	eef4 6ac7 	vcmpe.f32	s13, s14
 8016bd4:	bfa8      	it	ge
 8016bd6:	eef0 7a66 	vmovge.f32	s15, s13
 8016bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016bde:	bf98      	it	ls
 8016be0:	eeb0 7a66 	vmovls.f32	s14, s13
 8016be4:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8016be8:	f50a 61af 	add.w	r1, sl, #1400	; 0x578
 8016bec:	edd1 6a00 	vldr	s13, [r1]
 8016bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016bf4:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8016bf8:	bfa8      	it	ge
 8016bfa:	eef0 7a46 	vmovge.f32	s15, s12
 8016bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c02:	bf88      	it	hi
 8016c04:	eeb0 6a47 	vmovhi.f32	s12, s14
 8016c08:	eef4 6ae7 	vcmpe.f32	s13, s15
 8016c0c:	f20a 519c 	addw	r1, sl, #1436	; 0x59c
 8016c10:	ed91 7a00 	vldr	s14, [r1]
 8016c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c18:	eef4 6ac6 	vcmpe.f32	s13, s12
 8016c1c:	bfa8      	it	ge
 8016c1e:	eef0 7a66 	vmovge.f32	s15, s13
 8016c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c26:	bf88      	it	hi
 8016c28:	eef0 6a46 	vmovhi.f32	s13, s12
 8016c2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c34:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8016c38:	bfa8      	it	ge
 8016c3a:	eef0 7a47 	vmovge.f32	s15, s14
 8016c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c42:	bf88      	it	hi
 8016c44:	eeb0 7a66 	vmovhi.f32	s14, s13
 8016c48:	2b0a      	cmp	r3, #10
 8016c4a:	d111      	bne.n	8016c70 <m_kalman_3gyro.isra.6.constprop.36+0x2dd8>
 8016c4c:	f50a 61b8 	add.w	r1, sl, #1472	; 0x5c0
 8016c50:	edd1 6a00 	vldr	s13, [r1]
 8016c54:	eef4 7ae6 	vcmpe.f32	s15, s13
 8016c58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c5c:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8016c60:	bfb8      	it	lt
 8016c62:	eef0 7a66 	vmovlt.f32	s15, s13
 8016c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c6a:	bf88      	it	hi
 8016c6c:	eeb0 7a66 	vmovhi.f32	s14, s13
 8016c70:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016c74:	ed1f 7a55 	vldr	s14, [pc, #-340]	; 8016b24 <m_kalman_3gyro.isra.6.constprop.36+0x2c8c>
 8016c78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c80:	f73e ace2 	bgt.w	8015648 <m_kalman_3gyro.isra.6.constprop.36+0x17b0>
 8016c84:	9922      	ldr	r1, [sp, #136]	; 0x88
 8016c86:	edd1 6a00 	vldr	s13, [r1]
 8016c8a:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8016c8c:	ed91 5a00 	vldr	s10, [r1]
 8016c90:	9931      	ldr	r1, [sp, #196]	; 0xc4
 8016c92:	edd1 5a00 	vldr	s11, [r1]
 8016c96:	9934      	ldr	r1, [sp, #208]	; 0xd0
 8016c98:	eef4 6ac5 	vcmpe.f32	s13, s10
 8016c9c:	ed91 6a00 	vldr	s12, [r1]
 8016ca0:	f50a 6199 	add.w	r1, sl, #1224	; 0x4c8
 8016ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ca8:	ed91 7a00 	vldr	s14, [r1]
 8016cac:	bfb4      	ite	lt
 8016cae:	eef0 7a45 	vmovlt.f32	s15, s10
 8016cb2:	eef0 7a66 	vmovge.f32	s15, s13
 8016cb6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016cba:	bf88      	it	hi
 8016cbc:	eef0 6a45 	vmovhi.f32	s13, s10
 8016cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016cc4:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8016cc8:	bfa8      	it	ge
 8016cca:	eef0 7a47 	vmovge.f32	s15, s14
 8016cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016cd2:	bf88      	it	hi
 8016cd4:	eeb0 7a66 	vmovhi.f32	s14, s13
 8016cd8:	eef4 7ae5 	vcmpe.f32	s15, s11
 8016cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ce0:	eeb4 7ae5 	vcmpe.f32	s14, s11
 8016ce4:	bfb8      	it	lt
 8016ce6:	eef0 7a65 	vmovlt.f32	s15, s11
 8016cea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016cee:	bf88      	it	hi
 8016cf0:	eeb0 7a65 	vmovhi.f32	s14, s11
 8016cf4:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8016cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016cfc:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8016d00:	bfa8      	it	ge
 8016d02:	eef0 7a46 	vmovge.f32	s15, s12
 8016d06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d0a:	bf88      	it	hi
 8016d0c:	eeb0 7a46 	vmovhi.f32	s14, s12
 8016d10:	2b05      	cmp	r3, #5
 8016d12:	d05b      	beq.n	8016dcc <m_kalman_3gyro.isra.6.constprop.36+0x2f34>
 8016d14:	f20a 5134 	addw	r1, sl, #1332	; 0x534
 8016d18:	ed91 6a00 	vldr	s12, [r1]
 8016d1c:	f50a 61ab 	add.w	r1, sl, #1368	; 0x558
 8016d20:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8016d24:	edd1 6a00 	vldr	s13, [r1]
 8016d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d2c:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8016d30:	bfa8      	it	ge
 8016d32:	eef0 7a46 	vmovge.f32	s15, s12
 8016d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d3a:	bf88      	it	hi
 8016d3c:	eeb0 6a47 	vmovhi.f32	s12, s14
 8016d40:	eef4 6ae7 	vcmpe.f32	s13, s15
 8016d44:	f20a 517c 	addw	r1, sl, #1404	; 0x57c
 8016d48:	ed91 7a00 	vldr	s14, [r1]
 8016d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d50:	eef4 6ac6 	vcmpe.f32	s13, s12
 8016d54:	bfa8      	it	ge
 8016d56:	eef0 7a66 	vmovge.f32	s15, s13
 8016d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d5e:	bf88      	it	hi
 8016d60:	eef0 6a46 	vmovhi.f32	s13, s12
 8016d64:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016d68:	f50a 61b4 	add.w	r1, sl, #1440	; 0x5a0
 8016d6c:	ed91 6a00 	vldr	s12, [r1]
 8016d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d74:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8016d78:	bfa8      	it	ge
 8016d7a:	eef0 7a47 	vmovge.f32	s15, s14
 8016d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d82:	bf88      	it	hi
 8016d84:	eeb0 7a66 	vmovhi.f32	s14, s13
 8016d88:	eef4 7ac6 	vcmpe.f32	s15, s12
 8016d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d90:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8016d94:	bfb8      	it	lt
 8016d96:	eef0 7a46 	vmovlt.f32	s15, s12
 8016d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d9e:	bf88      	it	hi
 8016da0:	eeb0 7a46 	vmovhi.f32	s14, s12
 8016da4:	2b0a      	cmp	r3, #10
 8016da6:	d111      	bne.n	8016dcc <m_kalman_3gyro.isra.6.constprop.36+0x2f34>
 8016da8:	f20a 53c4 	addw	r3, sl, #1476	; 0x5c4
 8016dac:	edd3 6a00 	vldr	s13, [r3]
 8016db0:	eef4 7ae6 	vcmpe.f32	s15, s13
 8016db4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016db8:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8016dbc:	bfb8      	it	lt
 8016dbe:	eef0 7a66 	vmovlt.f32	s15, s13
 8016dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016dc6:	bf88      	it	hi
 8016dc8:	eeb0 7a66 	vmovhi.f32	s14, s13
 8016dcc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016dd0:	ed1f 7aac 	vldr	s14, [pc, #-688]	; 8016b24 <m_kalman_3gyro.isra.6.constprop.36+0x2c8c>
 8016dd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016dd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ddc:	f73e ac34 	bgt.w	8015648 <m_kalman_3gyro.isra.6.constprop.36+0x17b0>
 8016de0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016de2:	2b00      	cmp	r3, #0
 8016de4:	f43e ac34 	beq.w	8015650 <m_kalman_3gyro.isra.6.constprop.36+0x17b8>
 8016de8:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8016dec:	2b01      	cmp	r3, #1
 8016dee:	f040 8268 	bne.w	80172c2 <m_kalman_3gyro.isra.6.constprop.36+0x342a>
 8016df2:	2a0a      	cmp	r2, #10
 8016df4:	f000 85dc 	beq.w	80179b0 <m_kalman_3gyro.isra.6.constprop.36+0x3b18>
 8016df8:	2300      	movs	r3, #0
 8016dfa:	2a00      	cmp	r2, #0
 8016dfc:	f8aa 3202 	strh.w	r3, [sl, #514]	; 0x202
 8016e00:	f88a 3204 	strb.w	r3, [sl, #516]	; 0x204
 8016e04:	f102 0301 	add.w	r3, r2, #1
 8016e08:	dd03      	ble.n	8016e12 <m_kalman_3gyro.isra.6.constprop.36+0x2f7a>
 8016e0a:	2b00      	cmp	r3, #0
 8016e0c:	bfd8      	it	le
 8016e0e:	f06f 4300 	mvnle.w	r3, #2147483648	; 0x80000000
 8016e12:	2200      	movs	r2, #0
 8016e14:	f8ca 3450 	str.w	r3, [sl, #1104]	; 0x450
 8016e18:	f8ca 245c 	str.w	r2, [sl, #1116]	; 0x45c
 8016e1c:	ac86      	add	r4, sp, #536	; 0x218
 8016e1e:	f7fe bc32 	b.w	8015686 <m_kalman_3gyro.isra.6.constprop.36+0x17ee>
 8016e22:	eef5 8a40 	vcmp.f32	s17, #0.0
 8016e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e2a:	eef0 aa48 	vmov.f32	s21, s16
 8016e2e:	ed85 8a07 	vstr	s16, [r5, #28]
 8016e32:	f47f ab41 	bne.w	80164b8 <m_kalman_3gyro.isra.6.constprop.36+0x2620>
 8016e36:	eef0 9a48 	vmov.f32	s19, s16
 8016e3a:	eef0 7a48 	vmov.f32	s15, s16
 8016e3e:	f7ff baa7 	b.w	8016390 <m_kalman_3gyro.isra.6.constprop.36+0x24f8>
 8016e42:	eeb0 ca48 	vmov.f32	s24, s16
 8016e46:	ee27 9a89 	vmul.f32	s18, s15, s18
 8016e4a:	eef5 ba40 	vcmp.f32	s23, #0.0
 8016e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e52:	ed85 9a01 	vstr	s18, [r5, #4]
 8016e56:	f47f aa5d 	bne.w	8016314 <m_kalman_3gyro.isra.6.constprop.36+0x247c>
 8016e5a:	f7ff baeb 	b.w	8016434 <m_kalman_3gyro.isra.6.constprop.36+0x259c>
 8016e5e:	eeb0 ba48 	vmov.f32	s22, s16
 8016e62:	f7ff bb09 	b.w	8016478 <m_kalman_3gyro.isra.6.constprop.36+0x25e0>
 8016e66:	eea9 aaa9 	vfma.f32	s20, s19, s19
 8016e6a:	eeb1 9a49 	vneg.f32	s18, s18
 8016e6e:	ee1a 0a10 	vmov	r0, s20
 8016e72:	f7e9 fb71 	bl	8000558 <__aeabi_f2d>
 8016e76:	f004 fc0d 	bl	801b694 <sqrt>
 8016e7a:	f7e9 fe9d 	bl	8000bb8 <__aeabi_d2f>
 8016e7e:	ee07 0a90 	vmov	s15, r0
 8016e82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016e86:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8016e8a:	f8dd 36a8 	ldr.w	r3, [sp, #1704]	; 0x6a8
 8016e8e:	789c      	ldrb	r4, [r3, #2]
 8016e90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016e92:	6818      	ldr	r0, [r3, #0]
 8016e94:	685a      	ldr	r2, [r3, #4]
 8016e96:	6899      	ldr	r1, [r3, #8]
 8016e98:	904b      	str	r0, [sp, #300]	; 0x12c
 8016e9a:	461d      	mov	r5, r3
 8016e9c:	a853      	add	r0, sp, #332	; 0x14c
 8016e9e:	68db      	ldr	r3, [r3, #12]
 8016ea0:	924c      	str	r2, [sp, #304]	; 0x130
 8016ea2:	eeb1 0a48 	vneg.f32	s0, s16
 8016ea6:	eef1 8a68 	vneg.f32	s17, s17
 8016eaa:	ee29 ba27 	vmul.f32	s22, s18, s15
 8016eae:	ee68 aaa7 	vmul.f32	s21, s17, s15
 8016eb2:	ee20 aa27 	vmul.f32	s20, s0, s15
 8016eb6:	ee29 8aa7 	vmul.f32	s16, s19, s15
 8016eba:	2c00      	cmp	r4, #0
 8016ebc:	d051      	beq.n	8016f62 <m_kalman_3gyro.isra.6.constprop.36+0x30ca>
 8016ebe:	462a      	mov	r2, r5
 8016ec0:	914d      	str	r1, [sp, #308]	; 0x134
 8016ec2:	a94b      	add	r1, sp, #300	; 0x12c
 8016ec4:	934e      	str	r3, [sp, #312]	; 0x138
 8016ec6:	ed8d 9a53 	vstr	s18, [sp, #332]	; 0x14c
 8016eca:	edcd 8a54 	vstr	s17, [sp, #336]	; 0x150
 8016ece:	ed8d 0a55 	vstr	s0, [sp, #340]	; 0x154
 8016ed2:	edcd 9a56 	vstr	s19, [sp, #344]	; 0x158
 8016ed6:	ac4f      	add	r4, sp, #316	; 0x13c
 8016ed8:	f7f8 fcbe 	bl	800f858 <m_qmult_eml>
 8016edc:	ed8d ba4f 	vstr	s22, [sp, #316]	; 0x13c
 8016ee0:	edcd aa50 	vstr	s21, [sp, #320]	; 0x140
 8016ee4:	ed8d aa51 	vstr	s20, [sp, #324]	; 0x144
 8016ee8:	ed8d 8a52 	vstr	s16, [sp, #328]	; 0x148
 8016eec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016eee:	f8dd 46c8 	ldr.w	r4, [sp, #1736]	; 0x6c8
 8016ef2:	ed8d 9a53 	vstr	s18, [sp, #332]	; 0x14c
 8016ef6:	edcd 8a54 	vstr	s17, [sp, #336]	; 0x150
 8016efa:	ed8d 0a55 	vstr	s0, [sp, #340]	; 0x154
 8016efe:	edcd 9a56 	vstr	s19, [sp, #344]	; 0x158
 8016f02:	ed8d 9a4b 	vstr	s18, [sp, #300]	; 0x12c
 8016f06:	edcd 8a4c 	vstr	s17, [sp, #304]	; 0x130
 8016f0a:	ed8d 0a4d 	vstr	s0, [sp, #308]	; 0x134
 8016f0e:	edcd 9a4e 	vstr	s19, [sp, #312]	; 0x138
 8016f12:	6020      	str	r0, [r4, #0]
 8016f14:	6061      	str	r1, [r4, #4]
 8016f16:	60a2      	str	r2, [r4, #8]
 8016f18:	60e3      	str	r3, [r4, #12]
 8016f1a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8016f1c:	f7ff bb3a 	b.w	8016594 <m_kalman_3gyro.isra.6.constprop.36+0x26fc>
 8016f20:	f89a 28ae 	ldrb.w	r2, [sl, #2222]	; 0x8ae
 8016f24:	2a00      	cmp	r2, #0
 8016f26:	f000 8357 	beq.w	80175d8 <m_kalman_3gyro.isra.6.constprop.36+0x3740>
 8016f2a:	2300      	movs	r3, #0
 8016f2c:	3a01      	subs	r2, #1
 8016f2e:	f88a 28ae 	strb.w	r2, [sl, #2222]	; 0x8ae
 8016f32:	f8aa 31fc 	strh.w	r3, [sl, #508]	; 0x1fc
 8016f36:	f88a 31fe 	strb.w	r3, [sl, #510]	; 0x1fe
 8016f3a:	f88a 3205 	strb.w	r3, [sl, #517]	; 0x205
 8016f3e:	f88a 3207 	strb.w	r3, [sl, #519]	; 0x207
 8016f42:	f7fe be07 	b.w	8015b54 <m_kalman_3gyro.isra.6.constprop.36+0x1cbc>
 8016f46:	ee77 7aca 	vsub.f32	s15, s15, s20
 8016f4a:	ee17 0a90 	vmov	r0, s15
 8016f4e:	f7e9 fb03 	bl	8000558 <__aeabi_f2d>
 8016f52:	f004 fb9f 	bl	801b694 <sqrt>
 8016f56:	f7e9 fe2f 	bl	8000bb8 <__aeabi_d2f>
 8016f5a:	ee09 0a90 	vmov	s19, r0
 8016f5e:	f7ff bb01 	b.w	8016564 <m_kalman_3gyro.isra.6.constprop.36+0x26cc>
 8016f62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016f64:	e7ac      	b.n	8016ec0 <m_kalman_3gyro.isra.6.constprop.36+0x3028>
 8016f66:	2400      	movs	r4, #0
 8016f68:	4dcd      	ldr	r5, [pc, #820]	; (80172a0 <m_kalman_3gyro.isra.6.constprop.36+0x3408>)
 8016f6a:	f7fe b957 	b.w	801521c <m_kalman_3gyro.isra.6.constprop.36+0x1384>
 8016f6e:	eddd 9a64 	vldr	s19, [sp, #400]	; 0x190
 8016f72:	f7fe bae7 	b.w	8015544 <m_kalman_3gyro.isra.6.constprop.36+0x16ac>
 8016f76:	2301      	movs	r3, #1
 8016f78:	f88a 3204 	strb.w	r3, [sl, #516]	; 0x204
 8016f7c:	f240 1201 	movw	r2, #257	; 0x101
 8016f80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016f82:	f8aa 2202 	strh.w	r2, [sl, #514]	; 0x202
 8016f86:	edd3 7a00 	vldr	s15, [r3]
 8016f8a:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8016f8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016f92:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8016f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f9a:	f200 844a 	bhi.w	8017832 <m_kalman_3gyro.isra.6.constprop.36+0x399a>
 8016f9e:	f8dd 2698 	ldr.w	r2, [sp, #1688]	; 0x698
 8016fa2:	f89a 38a4 	ldrb.w	r3, [sl, #2212]	; 0x8a4
 8016fa6:	edd2 6a06 	vldr	s13, [r2, #24]
 8016faa:	ed92 7a07 	vldr	s14, [r2, #28]
 8016fae:	edd2 7a08 	vldr	s15, [r2, #32]
 8016fb2:	2b00      	cmp	r3, #0
 8016fb4:	f000 86e1 	beq.w	8017d7a <m_kalman_3gyro.isra.6.constprop.36+0x3ee2>
 8016fb8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8016fbc:	ee66 6a86 	vmul.f32	s13, s13, s12
 8016fc0:	ee27 7a06 	vmul.f32	s14, s14, s12
 8016fc4:	ee67 7a86 	vmul.f32	s15, s15, s12
 8016fc8:	edc2 6a06 	vstr	s13, [r2, #24]
 8016fcc:	ed82 7a07 	vstr	s14, [r2, #28]
 8016fd0:	edc2 7a08 	vstr	s15, [r2, #32]
 8016fd4:	f8ba 38a6 	ldrh.w	r3, [sl, #2214]	; 0x8a6
 8016fd8:	3301      	adds	r3, #1
 8016fda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016fde:	f000 859e 	beq.w	8017b1e <m_kalman_3gyro.isra.6.constprop.36+0x3c86>
 8016fe2:	2b31      	cmp	r3, #49	; 0x31
 8016fe4:	f8aa 38a6 	strh.w	r3, [sl, #2214]	; 0x8a6
 8016fe8:	d918      	bls.n	801701c <m_kalman_3gyro.isra.6.constprop.36+0x3184>
 8016fea:	f89a 38a4 	ldrb.w	r3, [sl, #2212]	; 0x8a4
 8016fee:	b9ab      	cbnz	r3, 801701c <m_kalman_3gyro.isra.6.constprop.36+0x3184>
 8016ff0:	f8dd 3698 	ldr.w	r3, [sp, #1688]	; 0x698
 8016ff4:	ed9f 6aab 	vldr	s12, [pc, #684]	; 80172a4 <m_kalman_3gyro.isra.6.constprop.36+0x340c>
 8016ff8:	edd3 6a06 	vldr	s13, [r3, #24]
 8016ffc:	ed93 7a07 	vldr	s14, [r3, #28]
 8017000:	edd3 7a08 	vldr	s15, [r3, #32]
 8017004:	ee66 6a86 	vmul.f32	s13, s13, s12
 8017008:	ee27 7a06 	vmul.f32	s14, s14, s12
 801700c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8017010:	edc3 6a06 	vstr	s13, [r3, #24]
 8017014:	ed83 7a07 	vstr	s14, [r3, #28]
 8017018:	edc3 7a08 	vstr	s15, [r3, #32]
 801701c:	f8da 38a4 	ldr.w	r3, [sl, #2212]	; 0x8a4
 8017020:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8017024:	f5b3 0f8c 	cmp.w	r3, #4587520	; 0x460000
 8017028:	f000 857f 	beq.w	8017b2a <m_kalman_3gyro.isra.6.constprop.36+0x3c92>
 801702c:	f5b3 0fc8 	cmp.w	r3, #6553600	; 0x640000
 8017030:	f040 8418 	bne.w	8017864 <m_kalman_3gyro.isra.6.constprop.36+0x39cc>
 8017034:	2301      	movs	r3, #1
 8017036:	f88a 38a4 	strb.w	r3, [sl, #2212]	; 0x8a4
 801703a:	f60a 0398 	addw	r3, sl, #2200	; 0x898
 801703e:	f8da 00a0 	ldr.w	r0, [sl, #160]	; 0xa0
 8017042:	f8da 10a4 	ldr.w	r1, [sl, #164]	; 0xa4
 8017046:	f8da 20a8 	ldr.w	r2, [sl, #168]	; 0xa8
 801704a:	6018      	str	r0, [r3, #0]
 801704c:	f60a 039c 	addw	r3, sl, #2204	; 0x89c
 8017050:	6019      	str	r1, [r3, #0]
 8017052:	f50a 630a 	add.w	r3, sl, #2208	; 0x8a0
 8017056:	601a      	str	r2, [r3, #0]
 8017058:	eddd 7a50 	vldr	s15, [sp, #320]	; 0x140
 801705c:	eddd 6a4f 	vldr	s13, [sp, #316]	; 0x13c
 8017060:	ed9d 7a51 	vldr	s14, [sp, #324]	; 0x144
 8017064:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8017068:	ee76 6aa6 	vadd.f32	s13, s13, s13
 801706c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8017070:	ee37 7a07 	vadd.f32	s14, s14, s14
 8017074:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8017078:	eee7 7a07 	vfma.f32	s15, s14, s14
 801707c:	ee17 0a90 	vmov	r0, s15
 8017080:	f7e9 fa6a 	bl	8000558 <__aeabi_f2d>
 8017084:	f004 fb06 	bl	801b694 <sqrt>
 8017088:	f7e9 fd96 	bl	8000bb8 <__aeabi_d2f>
 801708c:	f7e9 fa64 	bl	8000558 <__aeabi_f2d>
 8017090:	a381      	add	r3, pc, #516	; (adr r3, 8017298 <m_kalman_3gyro.isra.6.constprop.36+0x3400>)
 8017092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017096:	f7e9 fd29 	bl	8000aec <__aeabi_dcmplt>
 801709a:	2800      	cmp	r0, #0
 801709c:	f000 854e 	beq.w	8017b3c <m_kalman_3gyro.isra.6.constprop.36+0x3ca4>
 80170a0:	f50d 61d6 	add.w	r1, sp, #1712	; 0x6b0
 80170a4:	2200      	movs	r2, #0
 80170a6:	2300      	movs	r3, #0
 80170a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80170ac:	f7e9 fd14 	bl	8000ad8 <__aeabi_dcmpeq>
 80170b0:	2800      	cmp	r0, #0
 80170b2:	f040 843d 	bne.w	8017930 <m_kalman_3gyro.isra.6.constprop.36+0x3a98>
 80170b6:	f8aa 0202 	strh.w	r0, [sl, #514]	; 0x202
 80170ba:	f88a 0204 	strb.w	r0, [sl, #516]	; 0x204
 80170be:	2301      	movs	r3, #1
 80170c0:	2200      	movs	r2, #0
 80170c2:	f8ca 3450 	str.w	r3, [sl, #1104]	; 0x450
 80170c6:	f8ca 245c 	str.w	r2, [sl, #1116]	; 0x45c
 80170ca:	f7fe badc 	b.w	8015686 <m_kalman_3gyro.isra.6.constprop.36+0x17ee>
 80170ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80170d2:	eef4 7ae6 	vcmpe.f32	s15, s13
 80170d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80170da:	f77e ad06 	ble.w	8015aea <m_kalman_3gyro.isra.6.constprop.36+0x1c52>
 80170de:	ed93 6a04 	vldr	s12, [r3, #16]
 80170e2:	edd3 6a05 	vldr	s13, [r3, #20]
 80170e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80170ea:	ee26 6a27 	vmul.f32	s12, s12, s15
 80170ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80170f2:	ed83 7a03 	vstr	s14, [r3, #12]
 80170f6:	ed83 6a04 	vstr	s12, [r3, #16]
 80170fa:	edc3 7a05 	vstr	s15, [r3, #20]
 80170fe:	f7fe bcf4 	b.w	8015aea <m_kalman_3gyro.isra.6.constprop.36+0x1c52>
 8017102:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8017106:	f7fe bcdd 	b.w	8015ac4 <m_kalman_3gyro.isra.6.constprop.36+0x1c2c>
 801710a:	edd3 7a03 	vldr	s15, [r3, #12]
 801710e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8017112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017116:	f47e a8ce 	bne.w	80152b6 <m_kalman_3gyro.isra.6.constprop.36+0x141e>
 801711a:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
 801711e:	9801      	ldr	r0, [sp, #4]
 8017120:	f8ca 4044 	str.w	r4, [sl, #68]	; 0x44
 8017124:	f8ca 4048 	str.w	r4, [sl, #72]	; 0x48
 8017128:	f8ca 404c 	str.w	r4, [sl, #76]	; 0x4c
 801712c:	f8ca 4054 	str.w	r4, [sl, #84]	; 0x54
 8017130:	f8ca 4058 	str.w	r4, [sl, #88]	; 0x58
 8017134:	f8ca 405c 	str.w	r4, [sl, #92]	; 0x5c
 8017138:	f8ca 5040 	str.w	r5, [sl, #64]	; 0x40
 801713c:	f8ca 5050 	str.w	r5, [sl, #80]	; 0x50
 8017140:	f8ca 5060 	str.w	r5, [sl, #96]	; 0x60
 8017144:	f7f8 fd48 	bl	800fbd8 <m_dcm2q_eml>
 8017148:	f8dd 36c0 	ldr.w	r3, [sp, #1728]	; 0x6c0
 801714c:	f8ca 4094 	str.w	r4, [sl, #148]	; 0x94
 8017150:	f8ca 4098 	str.w	r4, [sl, #152]	; 0x98
 8017154:	f8ca 409c 	str.w	r4, [sl, #156]	; 0x9c
 8017158:	681a      	ldr	r2, [r3, #0]
 801715a:	f8ca 20a0 	str.w	r2, [sl, #160]	; 0xa0
 801715e:	f8dd 26c0 	ldr.w	r2, [sp, #1728]	; 0x6c0
 8017162:	4b51      	ldr	r3, [pc, #324]	; (80172a8 <m_kalman_3gyro.isra.6.constprop.36+0x3410>)
 8017164:	6852      	ldr	r2, [r2, #4]
 8017166:	f8ca 20a4 	str.w	r2, [sl, #164]	; 0xa4
 801716a:	f8dd 26c0 	ldr.w	r2, [sp, #1728]	; 0x6c0
 801716e:	6892      	ldr	r2, [r2, #8]
 8017170:	f8ca 20a8 	str.w	r2, [sl, #168]	; 0xa8
 8017174:	f8ca 30ac 	str.w	r3, [sl, #172]	; 0xac
 8017178:	f8ca 50b0 	str.w	r5, [sl, #176]	; 0xb0
 801717c:	f8ca 50b4 	str.w	r5, [sl, #180]	; 0xb4
 8017180:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8017184:	2100      	movs	r1, #0
 8017186:	f10a 00b8 	add.w	r0, sl, #184	; 0xb8
 801718a:	f003 f93c 	bl	801a406 <memset>
 801718e:	4b47      	ldr	r3, [pc, #284]	; (80172ac <m_kalman_3gyro.isra.6.constprop.36+0x3414>)
 8017190:	f8ca 30b8 	str.w	r3, [sl, #184]	; 0xb8
 8017194:	f8ca 30e0 	str.w	r3, [sl, #224]	; 0xe0
 8017198:	f8ca 3108 	str.w	r3, [sl, #264]	; 0x108
 801719c:	f8ca 3130 	str.w	r3, [sl, #304]	; 0x130
 80171a0:	f8ca 3158 	str.w	r3, [sl, #344]	; 0x158
 80171a4:	f8ca 3180 	str.w	r3, [sl, #384]	; 0x180
 80171a8:	f8ca 31a8 	str.w	r3, [sl, #424]	; 0x1a8
 80171ac:	f8ca 31d0 	str.w	r3, [sl, #464]	; 0x1d0
 80171b0:	f8ca 31f8 	str.w	r3, [sl, #504]	; 0x1f8
 80171b4:	f7fe b87f 	b.w	80152b6 <m_kalman_3gyro.isra.6.constprop.36+0x141e>
 80171b8:	eddd 7a23 	vldr	s15, [sp, #140]	; 0x8c
 80171bc:	ed8a ba12 	vstr	s22, [sl, #72]	; 0x48
 80171c0:	edca 7a10 	vstr	s15, [sl, #64]	; 0x40
 80171c4:	eddd 7a24 	vldr	s15, [sp, #144]	; 0x90
 80171c8:	edca aa15 	vstr	s21, [sl, #84]	; 0x54
 80171cc:	edca 7a13 	vstr	s15, [sl, #76]	; 0x4c
 80171d0:	eddd 7a25 	vldr	s15, [sp, #148]	; 0x94
 80171d4:	ed8a aa18 	vstr	s20, [sl, #96]	; 0x60
 80171d8:	edca 7a16 	vstr	s15, [sl, #88]	; 0x58
 80171dc:	ed8a ca11 	vstr	s24, [sl, #68]	; 0x44
 80171e0:	edca ba14 	vstr	s23, [sl, #80]	; 0x50
 80171e4:	edca 9a17 	vstr	s19, [sl, #92]	; 0x5c
 80171e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80171ea:	f7f8 fcf5 	bl	800fbd8 <m_dcm2q_eml>
 80171ee:	eddf 7a30 	vldr	s15, [pc, #192]	; 80172b0 <m_kalman_3gyro.isra.6.constprop.36+0x3418>
 80171f2:	ed8a da2b 	vstr	s26, [sl, #172]	; 0xac
 80171f6:	eeb4 9ae7 	vcmpe.f32	s18, s15
 80171fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80171fe:	d507      	bpl.n	8017210 <m_kalman_3gyro.isra.6.constprop.36+0x3378>
 8017200:	eddf 7a2c 	vldr	s15, [pc, #176]	; 80172b4 <m_kalman_3gyro.isra.6.constprop.36+0x341c>
 8017204:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8017208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801720c:	f300 85ab 	bgt.w	8017d66 <m_kalman_3gyro.isra.6.constprop.36+0x3ece>
 8017210:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8017214:	f8ca 30b0 	str.w	r3, [sl, #176]	; 0xb0
 8017218:	f44f 72a2 	mov.w	r2, #324	; 0x144
 801721c:	2100      	movs	r1, #0
 801721e:	f10a 00b8 	add.w	r0, sl, #184	; 0xb8
 8017222:	f003 f8f0 	bl	801a406 <memset>
 8017226:	4b21      	ldr	r3, [pc, #132]	; (80172ac <m_kalman_3gyro.isra.6.constprop.36+0x3414>)
 8017228:	f8ca 30b8 	str.w	r3, [sl, #184]	; 0xb8
 801722c:	f8ca 30e0 	str.w	r3, [sl, #224]	; 0xe0
 8017230:	f8ca 3108 	str.w	r3, [sl, #264]	; 0x108
 8017234:	f8ca 3130 	str.w	r3, [sl, #304]	; 0x130
 8017238:	f8ca 3158 	str.w	r3, [sl, #344]	; 0x158
 801723c:	f8ca 3180 	str.w	r3, [sl, #384]	; 0x180
 8017240:	f8ca 31a8 	str.w	r3, [sl, #424]	; 0x1a8
 8017244:	f8ca 31d0 	str.w	r3, [sl, #464]	; 0x1d0
 8017248:	f8ca 31f8 	str.w	r3, [sl, #504]	; 0x1f8
 801724c:	f8dd 36dc 	ldr.w	r3, [sp, #1756]	; 0x6dc
 8017250:	2100      	movs	r1, #0
 8017252:	2201      	movs	r2, #1
 8017254:	f88a 1031 	strb.w	r1, [sl, #49]	; 0x31
 8017258:	701a      	strb	r2, [r3, #0]
 801725a:	f7fe b812 	b.w	8015282 <m_kalman_3gyro.isra.6.constprop.36+0x13ea>
 801725e:	eef4 7ac8 	vcmpe.f32	s15, s16
 8017262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017266:	f300 840f 	bgt.w	8017a88 <m_kalman_3gyro.isra.6.constprop.36+0x3bf0>
 801726a:	eddd 7acf 	vldr	s15, [sp, #828]	; 0x33c
 801726e:	f7fd bf60 	b.w	8015132 <m_kalman_3gyro.isra.6.constprop.36+0x129a>
 8017272:	eddd 7ac2 	vldr	s15, [sp, #776]	; 0x308
 8017276:	eef4 7ac8 	vcmpe.f32	s15, s16
 801727a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801727e:	f300 84d7 	bgt.w	8017c30 <m_kalman_3gyro.isra.6.constprop.36+0x3d98>
 8017282:	eddd 7acf 	vldr	s15, [sp, #828]	; 0x33c
 8017286:	f7fd bc36 	b.w	8014af6 <m_kalman_3gyro.isra.6.constprop.36+0xc5e>
 801728a:	ed9d 7add 	vldr	s14, [sp, #884]	; 0x374
 801728e:	f7fd bf61 	b.w	8015154 <m_kalman_3gyro.isra.6.constprop.36+0x12bc>
 8017292:	bf00      	nop
 8017294:	f3af 8000 	nop.w
 8017298:	47ae147b 	.word	0x47ae147b
 801729c:	3f747ae1 	.word	0x3f747ae1
 80172a0:	40140000 	.word	0x40140000
 80172a4:	3f19999a 	.word	0x3f19999a
 80172a8:	3f666666 	.word	0x3f666666
 80172ac:	40a00000 	.word	0x40a00000
 80172b0:	3f99999a 	.word	0x3f99999a
 80172b4:	3f4ccccd 	.word	0x3f4ccccd
 80172b8:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 80172bc:	2b01      	cmp	r3, #1
 80172be:	f43f aa1e 	beq.w	80166fe <m_kalman_3gyro.isra.6.constprop.36+0x2866>
 80172c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80172c4:	2b02      	cmp	r3, #2
 80172c6:	f000 8348 	beq.w	801795a <m_kalman_3gyro.isra.6.constprop.36+0x3ac2>
 80172ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80172cc:	2b04      	cmp	r3, #4
 80172ce:	f47f aa16 	bne.w	80166fe <m_kalman_3gyro.isra.6.constprop.36+0x2866>
 80172d2:	49cf      	ldr	r1, [pc, #828]	; (8017610 <m_kalman_3gyro.isra.6.constprop.36+0x3778>)
 80172d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80172d6:	f891 0838 	ldrb.w	r0, [r1, #2104]	; 0x838
 80172da:	edd3 3a00 	vldr	s7, [r3]
 80172de:	edd3 0a01 	vldr	s1, [r3, #4]
 80172e2:	ed93 4a02 	vldr	s8, [r3, #8]
 80172e6:	9b08      	ldr	r3, [sp, #32]
 80172e8:	2804      	cmp	r0, #4
 80172ea:	edd3 4a00 	vldr	s9, [r3]
 80172ee:	ed93 5a01 	vldr	s10, [r3, #4]
 80172f2:	edd3 5a02 	vldr	s11, [r3, #8]
 80172f6:	f240 847d 	bls.w	8017bf4 <m_kalman_3gyro.isra.6.constprop.36+0x3d5c>
 80172fa:	f601 023c 	addw	r2, r1, #2108	; 0x83c
 80172fe:	edd2 2a07 	vldr	s5, [r2, #28]
 8017302:	ed9f aac4 	vldr	s20, [pc, #784]	; 8017614 <m_kalman_3gyro.isra.6.constprop.36+0x377c>
 8017306:	ed92 3a04 	vldr	s6, [r2, #16]
 801730a:	ed9f 1ac3 	vldr	s2, [pc, #780]	; 8017618 <m_kalman_3gyro.isra.6.constprop.36+0x3780>
 801730e:	ed92 7a06 	vldr	s14, [r2, #24]
 8017312:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8017314:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8017316:	6193      	str	r3, [r2, #24]
 8017318:	ee62 7a8a 	vmul.f32	s15, s5, s20
 801731c:	f601 0378 	addw	r3, r1, #2168	; 0x878
 8017320:	eee3 7a01 	vfma.f32	s15, s6, s2
 8017324:	61d0      	str	r0, [r2, #28]
 8017326:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8017328:	ed92 6a08 	vldr	s12, [r2, #32]
 801732c:	ed92 2a03 	vldr	s4, [r2, #12]
 8017330:	edd3 aa03 	vldr	s21, [r3, #12]
 8017334:	edd2 ba05 	vldr	s23, [r2, #20]
 8017338:	ed93 ba04 	vldr	s22, [r3, #16]
 801733c:	ed93 0a05 	vldr	s0, [r3, #20]
 8017340:	ed82 7a03 	vstr	s14, [r2, #12]
 8017344:	edc2 2a04 	vstr	s5, [r2, #16]
 8017348:	eef0 1a67 	vmov.f32	s3, s15
 801734c:	edd3 2a07 	vldr	s5, [r3, #28]
 8017350:	edd3 7a08 	vldr	s15, [r3, #32]
 8017354:	6210      	str	r0, [r2, #32]
 8017356:	ee67 6a0a 	vmul.f32	s13, s14, s20
 801735a:	ed93 7a06 	vldr	s14, [r3, #24]
 801735e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8017360:	ed82 2a00 	vstr	s4, [r2]
 8017364:	ed82 3a01 	vstr	s6, [r2, #4]
 8017368:	ed82 6a05 	vstr	s12, [r2, #20]
 801736c:	ed83 7a03 	vstr	s14, [r3, #12]
 8017370:	edc3 aa00 	vstr	s21, [r3]
 8017374:	edc3 2a04 	vstr	s5, [r3, #16]
 8017378:	edc3 7a05 	vstr	s15, [r3, #20]
 801737c:	edc2 ba02 	vstr	s23, [r2, #8]
 8017380:	6198      	str	r0, [r3, #24]
 8017382:	ed83 ba01 	vstr	s22, [r3, #4]
 8017386:	ed83 0a02 	vstr	s0, [r3, #8]
 801738a:	eee2 6a01 	vfma.f32	s13, s4, s2
 801738e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8017390:	61d8      	str	r0, [r3, #28]
 8017392:	ed9f 2aa2 	vldr	s4, [pc, #648]	; 801761c <m_kalman_3gyro.isra.6.constprop.36+0x3784>
 8017396:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8017398:	6218      	str	r0, [r3, #32]
 801739a:	ee62 9a8a 	vmul.f32	s19, s5, s20
 801739e:	edd2 2a0d 	vldr	s5, [r2, #52]	; 0x34
 80173a2:	edc2 0a0d 	vstr	s1, [r2, #52]	; 0x34
 80173a6:	ee26 3a0a 	vmul.f32	s6, s12, s20
 80173aa:	ee27 6a0a 	vmul.f32	s12, s14, s20
 80173ae:	ee27 aa8a 	vmul.f32	s20, s15, s20
 80173b2:	eef0 7a61 	vmov.f32	s15, s3
 80173b6:	eee2 7a82 	vfma.f32	s15, s5, s4
 80173ba:	f601 04b4 	addw	r4, r1, #2228	; 0x8b4
 80173be:	f501 610c 	add.w	r1, r1, #2240	; 0x8c0
 80173c2:	edc2 2a0a 	vstr	s5, [r2, #40]	; 0x28
 80173c6:	edd2 2a0c 	vldr	s5, [r2, #48]	; 0x30
 80173ca:	eddf 1a95 	vldr	s3, [pc, #596]	; 8017620 <m_kalman_3gyro.isra.6.constprop.36+0x3788>
 80173ce:	edc2 2a09 	vstr	s5, [r2, #36]	; 0x24
 80173d2:	eeb0 7a43 	vmov.f32	s14, s6
 80173d6:	eee2 6a82 	vfma.f32	s13, s5, s4
 80173da:	eeab 7a81 	vfma.f32	s14, s23, s2
 80173de:	eee0 7aa1 	vfma.f32	s15, s1, s3
 80173e2:	eea0 aa01 	vfma.f32	s20, s0, s2
 80173e6:	eeaa 6a81 	vfma.f32	s12, s21, s2
 80173ea:	eeeb 9a01 	vfma.f32	s19, s22, s2
 80173ee:	ed92 1a0e 	vldr	s2, [r2, #56]	; 0x38
 80173f2:	edd3 0a0c 	vldr	s1, [r3, #48]	; 0x30
 80173f6:	ed93 3a0d 	vldr	s6, [r3, #52]	; 0x34
 80173fa:	edc4 7a01 	vstr	s15, [r4, #4]
 80173fe:	eee3 6aa1 	vfma.f32	s13, s7, s3
 8017402:	eea1 7a02 	vfma.f32	s14, s2, s4
 8017406:	eef0 aa46 	vmov.f32	s21, s12
 801740a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801740e:	ed93 6a0e 	vldr	s12, [r3, #56]	; 0x38
 8017412:	edc4 6a00 	vstr	s13, [r4]
 8017416:	eea4 7a21 	vfma.f32	s14, s8, s3
 801741a:	eee0 aa82 	vfma.f32	s21, s1, s4
 801741e:	eee3 9a02 	vfma.f32	s19, s6, s4
 8017422:	eea6 aa02 	vfma.f32	s20, s12, s4
 8017426:	eee6 7aa6 	vfma.f32	s15, s13, s13
 801742a:	eee4 aaa1 	vfma.f32	s21, s9, s3
 801742e:	eee5 9a21 	vfma.f32	s19, s10, s3
 8017432:	eea5 aaa1 	vfma.f32	s20, s11, s3
 8017436:	eee7 7a07 	vfma.f32	s15, s14, s14
 801743a:	ed84 7a02 	vstr	s14, [r4, #8]
 801743e:	edc2 3a0c 	vstr	s7, [r2, #48]	; 0x30
 8017442:	ed82 1a0b 	vstr	s2, [r2, #44]	; 0x2c
 8017446:	ed82 4a0e 	vstr	s8, [r2, #56]	; 0x38
 801744a:	edc3 0a09 	vstr	s1, [r3, #36]	; 0x24
 801744e:	edc3 4a0c 	vstr	s9, [r3, #48]	; 0x30
 8017452:	ed83 3a0a 	vstr	s6, [r3, #40]	; 0x28
 8017456:	ed83 5a0d 	vstr	s10, [r3, #52]	; 0x34
 801745a:	ed83 6a0b 	vstr	s12, [r3, #44]	; 0x2c
 801745e:	edc3 5a0e 	vstr	s11, [r3, #56]	; 0x38
 8017462:	ee17 0a90 	vmov	r0, s15
 8017466:	edc1 9a01 	vstr	s19, [r1, #4]
 801746a:	edc1 aa00 	vstr	s21, [r1]
 801746e:	ee69 9aa9 	vmul.f32	s19, s19, s19
 8017472:	ed81 aa02 	vstr	s20, [r1, #8]
 8017476:	f7e9 f86f 	bl	8000558 <__aeabi_f2d>
 801747a:	f004 f90b 	bl	801b694 <sqrt>
 801747e:	eef0 7a69 	vmov.f32	s15, s19
 8017482:	eeea 7aaa 	vfma.f32	s15, s21, s21
 8017486:	4604      	mov	r4, r0
 8017488:	460d      	mov	r5, r1
 801748a:	eeea 7a0a 	vfma.f32	s15, s20, s20
 801748e:	ee17 0a90 	vmov	r0, s15
 8017492:	f7e9 f861 	bl	8000558 <__aeabi_f2d>
 8017496:	f004 f8fd 	bl	801b694 <sqrt>
 801749a:	f7e9 fb8d 	bl	8000bb8 <__aeabi_d2f>
 801749e:	4629      	mov	r1, r5
 80174a0:	ee09 0a90 	vmov	s19, r0
 80174a4:	4620      	mov	r0, r4
 80174a6:	f7e9 fb87 	bl	8000bb8 <__aeabi_d2f>
 80174aa:	ee07 0a90 	vmov	s15, r0
 80174ae:	eef4 eae7 	vcmpe.f32	s29, s15
 80174b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80174b6:	f77f a933 	ble.w	8016720 <m_kalman_3gyro.isra.6.constprop.36+0x2888>
 80174ba:	eeb4 fae9 	vcmpe.f32	s30, s19
 80174be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80174c2:	f77f a92d 	ble.w	8016720 <m_kalman_3gyro.isra.6.constprop.36+0x2888>
 80174c6:	9b08      	ldr	r3, [sp, #32]
 80174c8:	ed93 7a00 	vldr	s14, [r3]
 80174cc:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
 80174d0:	eeb0 7ac7 	vabs.f32	s14, s14
 80174d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80174d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80174dc:	f57f a920 	bpl.w	8016720 <m_kalman_3gyro.isra.6.constprop.36+0x2888>
 80174e0:	9b08      	ldr	r3, [sp, #32]
 80174e2:	ed93 7a01 	vldr	s14, [r3, #4]
 80174e6:	eeb0 7ac7 	vabs.f32	s14, s14
 80174ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80174ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80174f2:	f57f a915 	bpl.w	8016720 <m_kalman_3gyro.isra.6.constprop.36+0x2888>
 80174f6:	9b08      	ldr	r3, [sp, #32]
 80174f8:	ed93 7a02 	vldr	s14, [r3, #8]
 80174fc:	eeb0 7ac7 	vabs.f32	s14, s14
 8017500:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017508:	f57f a90a 	bpl.w	8016720 <m_kalman_3gyro.isra.6.constprop.36+0x2888>
 801750c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801750e:	edd3 7a00 	vldr	s15, [r3]
 8017512:	eef0 7ae7 	vabs.f32	s15, s15
 8017516:	ee17 0a90 	vmov	r0, s15
 801751a:	f7e9 f81d 	bl	8000558 <__aeabi_f2d>
 801751e:	a338      	add	r3, pc, #224	; (adr r3, 8017600 <m_kalman_3gyro.isra.6.constprop.36+0x3768>)
 8017520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017524:	f7e9 fae2 	bl	8000aec <__aeabi_dcmplt>
 8017528:	2800      	cmp	r0, #0
 801752a:	f43f a8f9 	beq.w	8016720 <m_kalman_3gyro.isra.6.constprop.36+0x2888>
 801752e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017530:	edd3 7a01 	vldr	s15, [r3, #4]
 8017534:	eef0 7ae7 	vabs.f32	s15, s15
 8017538:	ee17 0a90 	vmov	r0, s15
 801753c:	f7e9 f80c 	bl	8000558 <__aeabi_f2d>
 8017540:	a32f      	add	r3, pc, #188	; (adr r3, 8017600 <m_kalman_3gyro.isra.6.constprop.36+0x3768>)
 8017542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017546:	f7e9 fad1 	bl	8000aec <__aeabi_dcmplt>
 801754a:	2800      	cmp	r0, #0
 801754c:	f43f a8e8 	beq.w	8016720 <m_kalman_3gyro.isra.6.constprop.36+0x2888>
 8017550:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017552:	edd3 7a02 	vldr	s15, [r3, #8]
 8017556:	eef0 7ae7 	vabs.f32	s15, s15
 801755a:	ee17 0a90 	vmov	r0, s15
 801755e:	f7e8 fffb 	bl	8000558 <__aeabi_f2d>
 8017562:	a327      	add	r3, pc, #156	; (adr r3, 8017600 <m_kalman_3gyro.isra.6.constprop.36+0x3768>)
 8017564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017568:	f7e9 fac0 	bl	8000aec <__aeabi_dcmplt>
 801756c:	2800      	cmp	r0, #0
 801756e:	f43f a8d7 	beq.w	8016720 <m_kalman_3gyro.isra.6.constprop.36+0x2888>
 8017572:	f8da 2450 	ldr.w	r2, [sl, #1104]	; 0x450
 8017576:	2a0a      	cmp	r2, #10
 8017578:	f47f ac3e 	bne.w	8016df8 <m_kalman_3gyro.isra.6.constprop.36+0x2f60>
 801757c:	2301      	movs	r3, #1
 801757e:	9908      	ldr	r1, [sp, #32]
 8017580:	f88a 3204 	strb.w	r3, [sl, #516]	; 0x204
 8017584:	f240 1201 	movw	r2, #257	; 0x101
 8017588:	f8aa 2202 	strh.w	r2, [sl, #514]	; 0x202
 801758c:	680a      	ldr	r2, [r1, #0]
 801758e:	f8ca 207c 	str.w	r2, [sl, #124]	; 0x7c
 8017592:	684a      	ldr	r2, [r1, #4]
 8017594:	f8ca 2080 	str.w	r2, [sl, #128]	; 0x80
 8017598:	688a      	ldr	r2, [r1, #8]
 801759a:	f8ca 2084 	str.w	r2, [sl, #132]	; 0x84
 801759e:	f8dd 26d8 	ldr.w	r2, [sp, #1752]	; 0x6d8
 80175a2:	7013      	strb	r3, [r2, #0]
 80175a4:	f8da 345c 	ldr.w	r3, [sl, #1116]	; 0x45c
 80175a8:	f89a 2030 	ldrb.w	r2, [sl, #48]	; 0x30
 80175ac:	3301      	adds	r3, #1
 80175ae:	f8ca 345c 	str.w	r3, [sl, #1116]	; 0x45c
 80175b2:	2a00      	cmp	r2, #0
 80175b4:	f000 8226 	beq.w	8017a04 <m_kalman_3gyro.isra.6.constprop.36+0x3b6c>
 80175b8:	f8da 1080 	ldr.w	r1, [sl, #128]	; 0x80
 80175bc:	f8da 2084 	ldr.w	r2, [sl, #132]	; 0x84
 80175c0:	f8ca 10a4 	str.w	r1, [sl, #164]	; 0xa4
 80175c4:	f8ca 20a8 	str.w	r2, [sl, #168]	; 0xa8
 80175c8:	f8da 107c 	ldr.w	r1, [sl, #124]	; 0x7c
 80175cc:	f8ca 10a0 	str.w	r1, [sl, #160]	; 0xa0
 80175d0:	2200      	movs	r2, #0
 80175d2:	f88a 2030 	strb.w	r2, [sl, #48]	; 0x30
 80175d6:	e215      	b.n	8017a04 <m_kalman_3gyro.isra.6.constprop.36+0x3b6c>
 80175d8:	f8da 68b0 	ldr.w	r6, [sl, #2224]	; 0x8b0
 80175dc:	b316      	cbz	r6, 8017624 <m_kalman_3gyro.isra.6.constprop.36+0x378c>
 80175de:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80175e0:	6818      	ldr	r0, [r3, #0]
 80175e2:	f7e8 ffb9 	bl	8000558 <__aeabi_f2d>
 80175e6:	a308      	add	r3, pc, #32	; (adr r3, 8017608 <m_kalman_3gyro.isra.6.constprop.36+0x3770>)
 80175e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175ec:	f7e9 fa9c 	bl	8000b28 <__aeabi_dcmpgt>
 80175f0:	b1c0      	cbz	r0, 8017624 <m_kalman_3gyro.isra.6.constprop.36+0x378c>
 80175f2:	3e01      	subs	r6, #1
 80175f4:	f8ca 68b0 	str.w	r6, [sl, #2224]	; 0x8b0
 80175f8:	f7fe baac 	b.w	8015b54 <m_kalman_3gyro.isra.6.constprop.36+0x1cbc>
 80175fc:	f3af 8000 	nop.w
 8017600:	66666666 	.word	0x66666666
 8017604:	3ff66666 	.word	0x3ff66666
 8017608:	33333333 	.word	0x33333333
 801760c:	3fd33333 	.word	0x3fd33333
 8017610:	200013c8 	.word	0x200013c8
 8017614:	bdcccccd 	.word	0xbdcccccd
 8017618:	be4ccccd 	.word	0xbe4ccccd
 801761c:	3dcccccd 	.word	0x3dcccccd
 8017620:	3e4ccccd 	.word	0x3e4ccccd
 8017624:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 8017626:	6818      	ldr	r0, [r3, #0]
 8017628:	f7e8 ff96 	bl	8000558 <__aeabi_f2d>
 801762c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017630:	ee1e 0a90 	vmov	r0, s29
 8017634:	f7e8 ff90 	bl	8000558 <__aeabi_f2d>
 8017638:	2200      	movs	r2, #0
 801763a:	4bda      	ldr	r3, [pc, #872]	; (80179a4 <m_kalman_3gyro.isra.6.constprop.36+0x3b0c>)
 801763c:	f7e8 ffe4 	bl	8000608 <__aeabi_dmul>
 8017640:	4602      	mov	r2, r0
 8017642:	460b      	mov	r3, r1
 8017644:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017648:	f7e9 fa50 	bl	8000aec <__aeabi_dcmplt>
 801764c:	2800      	cmp	r0, #0
 801764e:	f43e aa81 	beq.w	8015b54 <m_kalman_3gyro.isra.6.constprop.36+0x1cbc>
 8017652:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8017654:	6818      	ldr	r0, [r3, #0]
 8017656:	f7e8 ff7f 	bl	8000558 <__aeabi_f2d>
 801765a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801765e:	ee1f 0a10 	vmov	r0, s30
 8017662:	f7e8 ff79 	bl	8000558 <__aeabi_f2d>
 8017666:	2200      	movs	r2, #0
 8017668:	4bce      	ldr	r3, [pc, #824]	; (80179a4 <m_kalman_3gyro.isra.6.constprop.36+0x3b0c>)
 801766a:	f7e8 ffcd 	bl	8000608 <__aeabi_dmul>
 801766e:	4602      	mov	r2, r0
 8017670:	460b      	mov	r3, r1
 8017672:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017676:	f7e9 fa39 	bl	8000aec <__aeabi_dcmplt>
 801767a:	2800      	cmp	r0, #0
 801767c:	f43e aa6a 	beq.w	8015b54 <m_kalman_3gyro.isra.6.constprop.36+0x1cbc>
 8017680:	4bc9      	ldr	r3, [pc, #804]	; (80179a8 <m_kalman_3gyro.isra.6.constprop.36+0x3b10>)
 8017682:	f89a 58ad 	ldrb.w	r5, [sl, #2221]	; 0x8ad
 8017686:	6818      	ldr	r0, [r3, #0]
 8017688:	f7e8 ff66 	bl	8000558 <__aeabi_f2d>
 801768c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017690:	ee1e 0a10 	vmov	r0, s28
 8017694:	f7e8 ff60 	bl	8000558 <__aeabi_f2d>
 8017698:	4602      	mov	r2, r0
 801769a:	460b      	mov	r3, r1
 801769c:	f7e8 fdfe 	bl	800029c <__adddf3>
 80176a0:	4602      	mov	r2, r0
 80176a2:	460b      	mov	r3, r1
 80176a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80176a8:	f7e9 fa3e 	bl	8000b28 <__aeabi_dcmpgt>
 80176ac:	2800      	cmp	r0, #0
 80176ae:	f000 8376 	beq.w	8017d9e <m_kalman_3gyro.isra.6.constprop.36+0x3f06>
 80176b2:	2300      	movs	r3, #0
 80176b4:	2d0e      	cmp	r5, #14
 80176b6:	f8aa 31fc 	strh.w	r3, [sl, #508]	; 0x1fc
 80176ba:	f88a 31fe 	strb.w	r3, [sl, #510]	; 0x1fe
 80176be:	f88a 3205 	strb.w	r3, [sl, #517]	; 0x205
 80176c2:	f88a 3207 	strb.w	r3, [sl, #519]	; 0x207
 80176c6:	bf95      	itete	ls
 80176c8:	3503      	addls	r5, #3
 80176ca:	2364      	movhi	r3, #100	; 0x64
 80176cc:	f88a 58ad 	strbls.w	r5, [sl, #2221]	; 0x8ad
 80176d0:	f8ca 38b0 	strhi.w	r3, [sl, #2224]	; 0x8b0
 80176d4:	f7fe ba3e 	b.w	8015b54 <m_kalman_3gyro.isra.6.constprop.36+0x1cbc>
 80176d8:	eeb0 aa48 	vmov.f32	s20, s16
 80176dc:	f7fe be42 	b.w	8016364 <m_kalman_3gyro.isra.6.constprop.36+0x24cc>
 80176e0:	eef0 ca48 	vmov.f32	s25, s16
 80176e4:	f7fe be2a 	b.w	801633c <m_kalman_3gyro.isra.6.constprop.36+0x24a4>
 80176e8:	1c54      	adds	r4, r2, #1
 80176ea:	4611      	mov	r1, r2
 80176ec:	f7fd bf02 	b.w	80154f4 <m_kalman_3gyro.isra.6.constprop.36+0x165c>
 80176f0:	240a      	movs	r4, #10
 80176f2:	2002      	movs	r0, #2
 80176f4:	2101      	movs	r1, #1
 80176f6:	f06f 4540 	mvn.w	r5, #3221225472	; 0xc0000000
 80176fa:	190a      	adds	r2, r1, r4
 80176fc:	0852      	lsrs	r2, r2, #1
 80176fe:	1953      	adds	r3, r2, r5
 8017700:	f50d 66c6 	add.w	r6, sp, #1584	; 0x630
 8017704:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8017708:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 801770c:	ed93 7a00 	vldr	s14, [r3]
 8017710:	eef4 7ac7 	vcmpe.f32	s15, s14
 8017714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017718:	f280 8189 	bge.w	8017a2e <m_kalman_3gyro.isra.6.constprop.36+0x3b96>
 801771c:	188b      	adds	r3, r1, r2
 801771e:	085b      	lsrs	r3, r3, #1
 8017720:	195c      	adds	r4, r3, r5
 8017722:	f50d 66c6 	add.w	r6, sp, #1584	; 0x630
 8017726:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 801772a:	4290      	cmp	r0, r2
 801772c:	f5a4 7474 	sub.w	r4, r4, #976	; 0x3d0
 8017730:	d212      	bcs.n	8017758 <m_kalman_3gyro.isra.6.constprop.36+0x38c0>
 8017732:	ed94 7a00 	vldr	s14, [r4]
 8017736:	eef4 7ac7 	vcmpe.f32	s15, s14
 801773a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801773e:	da05      	bge.n	801774c <m_kalman_3gyro.isra.6.constprop.36+0x38b4>
 8017740:	461a      	mov	r2, r3
 8017742:	e7eb      	b.n	801771c <m_kalman_3gyro.isra.6.constprop.36+0x3884>
 8017744:	eddd 9a6a 	vldr	s19, [sp, #424]	; 0x1a8
 8017748:	f7fd befc 	b.w	8015544 <m_kalman_3gyro.isra.6.constprop.36+0x16ac>
 801774c:	4614      	mov	r4, r2
 801774e:	1c58      	adds	r0, r3, #1
 8017750:	4284      	cmp	r4, r0
 8017752:	4619      	mov	r1, r3
 8017754:	d8d1      	bhi.n	80176fa <m_kalman_3gyro.isra.6.constprop.36+0x3862>
 8017756:	e000      	b.n	801775a <m_kalman_3gyro.isra.6.constprop.36+0x38c2>
 8017758:	460b      	mov	r3, r1
 801775a:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
 801775e:	185a      	adds	r2, r3, r1
 8017760:	0092      	lsls	r2, r2, #2
 8017762:	009b      	lsls	r3, r3, #2
 8017764:	a898      	add	r0, sp, #608	; 0x260
 8017766:	1884      	adds	r4, r0, r2
 8017768:	4418      	add	r0, r3
 801776a:	edd4 6a00 	vldr	s13, [r4]
 801776e:	ed90 7a00 	vldr	s14, [r0]
 8017772:	ee37 6ae6 	vsub.f32	s12, s15, s13
 8017776:	ee37 7a66 	vsub.f32	s14, s14, s13
 801777a:	a8a2      	add	r0, sp, #648	; 0x288
 801777c:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8017780:	4402      	add	r2, r0
 8017782:	4403      	add	r3, r0
 8017784:	250a      	movs	r5, #10
 8017786:	2402      	movs	r4, #2
 8017788:	2001      	movs	r0, #1
 801778a:	edd2 8a00 	vldr	s17, [r2]
 801778e:	ed93 7a00 	vldr	s14, [r3]
 8017792:	ee37 7a68 	vsub.f32	s14, s14, s17
 8017796:	eee6 8a87 	vfma.f32	s17, s13, s14
 801779a:	182a      	adds	r2, r5, r0
 801779c:	0852      	lsrs	r2, r2, #1
 801779e:	1853      	adds	r3, r2, r1
 80177a0:	f50d 66c6 	add.w	r6, sp, #1584	; 0x630
 80177a4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80177a8:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 80177ac:	ed93 7a00 	vldr	s14, [r3]
 80177b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80177b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177b8:	f280 81d9 	bge.w	8017b6e <m_kalman_3gyro.isra.6.constprop.36+0x3cd6>
 80177bc:	1813      	adds	r3, r2, r0
 80177be:	085b      	lsrs	r3, r3, #1
 80177c0:	185d      	adds	r5, r3, r1
 80177c2:	f50d 66c6 	add.w	r6, sp, #1584	; 0x630
 80177c6:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 80177ca:	42a2      	cmp	r2, r4
 80177cc:	f5a5 7574 	sub.w	r5, r5, #976	; 0x3d0
 80177d0:	d908      	bls.n	80177e4 <m_kalman_3gyro.isra.6.constprop.36+0x394c>
 80177d2:	ed95 7a00 	vldr	s14, [r5]
 80177d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80177da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177de:	da22      	bge.n	8017826 <m_kalman_3gyro.isra.6.constprop.36+0x398e>
 80177e0:	461a      	mov	r2, r3
 80177e2:	e7eb      	b.n	80177bc <m_kalman_3gyro.isra.6.constprop.36+0x3924>
 80177e4:	4603      	mov	r3, r0
 80177e6:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 80177ea:	3a01      	subs	r2, #1
 80177ec:	0091      	lsls	r1, r2, #2
 80177ee:	009b      	lsls	r3, r3, #2
 80177f0:	aa98      	add	r2, sp, #608	; 0x260
 80177f2:	1850      	adds	r0, r2, r1
 80177f4:	441a      	add	r2, r3
 80177f6:	edd0 6a00 	vldr	s13, [r0]
 80177fa:	ed92 7a00 	vldr	s14, [r2]
 80177fe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8017802:	ee37 7a66 	vsub.f32	s14, s14, s13
 8017806:	aaac      	add	r2, sp, #688	; 0x2b0
 8017808:	eec7 6a87 	vdiv.f32	s13, s15, s14
 801780c:	440a      	add	r2, r1
 801780e:	a9ac      	add	r1, sp, #688	; 0x2b0
 8017810:	440b      	add	r3, r1
 8017812:	ed92 9a00 	vldr	s18, [r2]
 8017816:	edd3 7a00 	vldr	s15, [r3]
 801781a:	ee77 7ac9 	vsub.f32	s15, s15, s18
 801781e:	eea6 9aa7 	vfma.f32	s18, s13, s15
 8017822:	f7fd be2c 	b.w	801547e <m_kalman_3gyro.isra.6.constprop.36+0x15e6>
 8017826:	4615      	mov	r5, r2
 8017828:	1c5c      	adds	r4, r3, #1
 801782a:	42ac      	cmp	r4, r5
 801782c:	4618      	mov	r0, r3
 801782e:	d3b4      	bcc.n	801779a <m_kalman_3gyro.isra.6.constprop.36+0x3902>
 8017830:	e7d9      	b.n	80177e6 <m_kalman_3gyro.isra.6.constprop.36+0x394e>
 8017832:	f8dd 3698 	ldr.w	r3, [sp, #1688]	; 0x698
 8017836:	edd3 6a06 	vldr	s13, [r3, #24]
 801783a:	ed93 7a07 	vldr	s14, [r3, #28]
 801783e:	edd3 7a08 	vldr	s15, [r3, #32]
 8017842:	f8dd 2698 	ldr.w	r2, [sp, #1688]	; 0x698
 8017846:	ee69 6aa6 	vmul.f32	s13, s19, s13
 801784a:	ee29 7a87 	vmul.f32	s14, s19, s14
 801784e:	ee69 7aa7 	vmul.f32	s15, s19, s15
 8017852:	2300      	movs	r3, #0
 8017854:	edc2 6a06 	vstr	s13, [r2, #24]
 8017858:	ed82 7a07 	vstr	s14, [r2, #28]
 801785c:	edc2 7a08 	vstr	s15, [r2, #32]
 8017860:	f8aa 38a6 	strh.w	r3, [sl, #2214]	; 0x8a6
 8017864:	f89a 38a4 	ldrb.w	r3, [sl, #2212]	; 0x8a4
 8017868:	2b00      	cmp	r3, #0
 801786a:	f47f abf5 	bne.w	8017058 <m_kalman_3gyro.isra.6.constprop.36+0x31c0>
 801786e:	f89a 2030 	ldrb.w	r2, [sl, #48]	; 0x30
 8017872:	b32a      	cbz	r2, 80178c0 <m_kalman_3gyro.isra.6.constprop.36+0x3a28>
 8017874:	ed9d 7a02 	vldr	s14, [sp, #8]
 8017878:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 801787c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017884:	d51c      	bpl.n	80178c0 <m_kalman_3gyro.isra.6.constprop.36+0x3a28>
 8017886:	ed9a 7af1 	vldr	s14, [sl, #964]	; 0x3c4
 801788a:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 801788e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017896:	d513      	bpl.n	80178c0 <m_kalman_3gyro.isra.6.constprop.36+0x3a28>
 8017898:	f8da 13d8 	ldr.w	r1, [sl, #984]	; 0x3d8
 801789c:	f8ca 1080 	str.w	r1, [sl, #128]	; 0x80
 80178a0:	f8da 13d4 	ldr.w	r1, [sl, #980]	; 0x3d4
 80178a4:	f8da 23dc 	ldr.w	r2, [sl, #988]	; 0x3dc
 80178a8:	f8ca 107c 	str.w	r1, [sl, #124]	; 0x7c
 80178ac:	f8dd 16d8 	ldr.w	r1, [sp, #1752]	; 0x6d8
 80178b0:	f8ca 2084 	str.w	r2, [sl, #132]	; 0x84
 80178b4:	2201      	movs	r2, #1
 80178b6:	700a      	strb	r2, [r1, #0]
 80178b8:	f88a 3030 	strb.w	r3, [sl, #48]	; 0x30
 80178bc:	f7fd bee3 	b.w	8015686 <m_kalman_3gyro.isra.6.constprop.36+0x17ee>
 80178c0:	f8da 2454 	ldr.w	r2, [sl, #1108]	; 0x454
 80178c4:	2a1e      	cmp	r2, #30
 80178c6:	d00e      	beq.n	80178e6 <m_kalman_3gyro.isra.6.constprop.36+0x3a4e>
 80178c8:	2a00      	cmp	r2, #0
 80178ca:	f102 0301 	add.w	r3, r2, #1
 80178ce:	dd03      	ble.n	80178d8 <m_kalman_3gyro.isra.6.constprop.36+0x3a40>
 80178d0:	2b00      	cmp	r3, #0
 80178d2:	bfd8      	it	le
 80178d4:	f06f 4300 	mvnle.w	r3, #2147483648	; 0x80000000
 80178d8:	2200      	movs	r2, #0
 80178da:	f8ca 3454 	str.w	r3, [sl, #1108]	; 0x454
 80178de:	f8ca 245c 	str.w	r2, [sl, #1116]	; 0x45c
 80178e2:	f7fd bed0 	b.w	8015686 <m_kalman_3gyro.isra.6.constprop.36+0x17ee>
 80178e6:	f8ba 38a6 	ldrh.w	r3, [sl, #2214]	; 0x8a6
 80178ea:	2b27      	cmp	r3, #39	; 0x27
 80178ec:	f200 8130 	bhi.w	8017b50 <m_kalman_3gyro.isra.6.constprop.36+0x3cb8>
 80178f0:	f8da 23d8 	ldr.w	r2, [sl, #984]	; 0x3d8
 80178f4:	f8ca 2080 	str.w	r2, [sl, #128]	; 0x80
 80178f8:	f8da 23d4 	ldr.w	r2, [sl, #980]	; 0x3d4
 80178fc:	f8da 33dc 	ldr.w	r3, [sl, #988]	; 0x3dc
 8017900:	f8ca 207c 	str.w	r2, [sl, #124]	; 0x7c
 8017904:	f8dd 26d8 	ldr.w	r2, [sp, #1752]	; 0x6d8
 8017908:	f8ca 3084 	str.w	r3, [sl, #132]	; 0x84
 801790c:	2301      	movs	r3, #1
 801790e:	7013      	strb	r3, [r2, #0]
 8017910:	f8ba 38a8 	ldrh.w	r3, [sl, #2216]	; 0x8a8
 8017914:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017918:	3301      	adds	r3, #1
 801791a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801791e:	bf08      	it	eq
 8017920:	4613      	moveq	r3, r2
 8017922:	2201      	movs	r2, #1
 8017924:	f8aa 38a8 	strh.w	r3, [sl, #2216]	; 0x8a8
 8017928:	f8ca 245c 	str.w	r2, [sl, #1116]	; 0x45c
 801792c:	f7fd beab 	b.w	8015686 <m_kalman_3gyro.isra.6.constprop.36+0x17ee>
 8017930:	f8da 2450 	ldr.w	r2, [sl, #1104]	; 0x450
 8017934:	2a32      	cmp	r2, #50	; 0x32
 8017936:	f000 81a5 	beq.w	8017c84 <m_kalman_3gyro.isra.6.constprop.36+0x3dec>
 801793a:	2300      	movs	r3, #0
 801793c:	2a00      	cmp	r2, #0
 801793e:	f8aa 3202 	strh.w	r3, [sl, #514]	; 0x202
 8017942:	f88a 3204 	strb.w	r3, [sl, #516]	; 0x204
 8017946:	f102 0301 	add.w	r3, r2, #1
 801794a:	f77f abb9 	ble.w	80170c0 <m_kalman_3gyro.isra.6.constprop.36+0x3228>
 801794e:	2b00      	cmp	r3, #0
 8017950:	bfd8      	it	le
 8017952:	f06f 4300 	mvnle.w	r3, #2147483648	; 0x80000000
 8017956:	f7ff bbb3 	b.w	80170c0 <m_kalman_3gyro.isra.6.constprop.36+0x3228>
 801795a:	2301      	movs	r3, #1
 801795c:	f88a 3204 	strb.w	r3, [sl, #516]	; 0x204
 8017960:	f240 1201 	movw	r2, #257	; 0x101
 8017964:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017966:	f8aa 2202 	strh.w	r2, [sl, #514]	; 0x202
 801796a:	edd3 7a00 	vldr	s15, [r3]
 801796e:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8017972:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017976:	eef4 7ac8 	vcmpe.f32	s15, s16
 801797a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801797e:	f280 8136 	bge.w	8017bee <m_kalman_3gyro.isra.6.constprop.36+0x3d56>
 8017982:	f8dd 3698 	ldr.w	r3, [sp, #1688]	; 0x698
 8017986:	eeb4 eaed 	vcmpe.f32	s28, s27
 801798a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801798e:	edd3 6a06 	vldr	s13, [r3, #24]
 8017992:	ed93 7a07 	vldr	s14, [r3, #28]
 8017996:	edd3 7a08 	vldr	s15, [r3, #32]
 801799a:	f300 80ea 	bgt.w	8017b72 <m_kalman_3gyro.isra.6.constprop.36+0x3cda>
 801799e:	ac86      	add	r4, sp, #536	; 0x218
 80179a0:	e74f      	b.n	8017842 <m_kalman_3gyro.isra.6.constprop.36+0x39aa>
 80179a2:	bf00      	nop
 80179a4:	3ff80000 	.word	0x3ff80000
 80179a8:	20001bf0 	.word	0x20001bf0
 80179ac:	3e4ccccd 	.word	0x3e4ccccd
 80179b0:	9908      	ldr	r1, [sp, #32]
 80179b2:	f88a 3204 	strb.w	r3, [sl, #516]	; 0x204
 80179b6:	f240 1201 	movw	r2, #257	; 0x101
 80179ba:	f8aa 2202 	strh.w	r2, [sl, #514]	; 0x202
 80179be:	680a      	ldr	r2, [r1, #0]
 80179c0:	f8ca 207c 	str.w	r2, [sl, #124]	; 0x7c
 80179c4:	684a      	ldr	r2, [r1, #4]
 80179c6:	f8ca 2080 	str.w	r2, [sl, #128]	; 0x80
 80179ca:	688a      	ldr	r2, [r1, #8]
 80179cc:	f8ca 2084 	str.w	r2, [sl, #132]	; 0x84
 80179d0:	f8dd 26d8 	ldr.w	r2, [sp, #1752]	; 0x6d8
 80179d4:	7013      	strb	r3, [r2, #0]
 80179d6:	f8da 345c 	ldr.w	r3, [sl, #1116]	; 0x45c
 80179da:	f89a 2030 	ldrb.w	r2, [sl, #48]	; 0x30
 80179de:	3301      	adds	r3, #1
 80179e0:	f8ca 345c 	str.w	r3, [sl, #1116]	; 0x45c
 80179e4:	b172      	cbz	r2, 8017a04 <m_kalman_3gyro.isra.6.constprop.36+0x3b6c>
 80179e6:	f8da 107c 	ldr.w	r1, [sl, #124]	; 0x7c
 80179ea:	f8da 2080 	ldr.w	r2, [sl, #128]	; 0x80
 80179ee:	f8ca 10a0 	str.w	r1, [sl, #160]	; 0xa0
 80179f2:	f8ca 20a4 	str.w	r2, [sl, #164]	; 0xa4
 80179f6:	f8da 1084 	ldr.w	r1, [sl, #132]	; 0x84
 80179fa:	f8ca 10a8 	str.w	r1, [sl, #168]	; 0xa8
 80179fe:	2200      	movs	r2, #0
 8017a00:	f88a 2030 	strb.w	r2, [sl, #48]	; 0x30
 8017a04:	2b1e      	cmp	r3, #30
 8017a06:	f47e ae8b 	bne.w	8016720 <m_kalman_3gyro.isra.6.constprop.36+0x2888>
 8017a0a:	f60a 0398 	addw	r3, sl, #2200	; 0x898
 8017a0e:	f8da 00a0 	ldr.w	r0, [sl, #160]	; 0xa0
 8017a12:	f8da 10a4 	ldr.w	r1, [sl, #164]	; 0xa4
 8017a16:	f8da 20a8 	ldr.w	r2, [sl, #168]	; 0xa8
 8017a1a:	6018      	str	r0, [r3, #0]
 8017a1c:	f60a 039c 	addw	r3, sl, #2204	; 0x89c
 8017a20:	ac86      	add	r4, sp, #536	; 0x218
 8017a22:	6019      	str	r1, [r3, #0]
 8017a24:	f50a 630a 	add.w	r3, sl, #2208	; 0x8a0
 8017a28:	601a      	str	r2, [r3, #0]
 8017a2a:	f7fd be2c 	b.w	8015686 <m_kalman_3gyro.isra.6.constprop.36+0x17ee>
 8017a2e:	4613      	mov	r3, r2
 8017a30:	e68d      	b.n	801774e <m_kalman_3gyro.isra.6.constprop.36+0x38b6>
 8017a32:	200d      	movs	r0, #13
 8017a34:	2402      	movs	r4, #2
 8017a36:	2101      	movs	r1, #1
 8017a38:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
 8017a3c:	1843      	adds	r3, r0, r1
 8017a3e:	085b      	lsrs	r3, r3, #1
 8017a40:	199a      	adds	r2, r3, r6
 8017a42:	f50d 65c6 	add.w	r5, sp, #1584	; 0x630
 8017a46:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 8017a4a:	f5a5 753c 	sub.w	r5, r5, #752	; 0x2f0
 8017a4e:	e00e      	b.n	8017a6e <m_kalman_3gyro.isra.6.constprop.36+0x3bd6>
 8017a50:	18ca      	adds	r2, r1, r3
 8017a52:	4618      	mov	r0, r3
 8017a54:	429c      	cmp	r4, r3
 8017a56:	ea4f 0352 	mov.w	r3, r2, lsr #1
 8017a5a:	eb03 0206 	add.w	r2, r3, r6
 8017a5e:	f50d 65c6 	add.w	r5, sp, #1584	; 0x630
 8017a62:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 8017a66:	f5a5 753c 	sub.w	r5, r5, #752	; 0x2f0
 8017a6a:	f080 8180 	bcs.w	8017d6e <m_kalman_3gyro.isra.6.constprop.36+0x3ed6>
 8017a6e:	ed95 7a00 	vldr	s14, [r5]
 8017a72:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8017a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a7a:	dbe9      	blt.n	8017a50 <m_kalman_3gyro.isra.6.constprop.36+0x3bb8>
 8017a7c:	1c5c      	adds	r4, r3, #1
 8017a7e:	42a0      	cmp	r0, r4
 8017a80:	4619      	mov	r1, r3
 8017a82:	d8db      	bhi.n	8017a3c <m_kalman_3gyro.isra.6.constprop.36+0x3ba4>
 8017a84:	f7fd b873 	b.w	8014b6e <m_kalman_3gyro.isra.6.constprop.36+0xcd6>
 8017a88:	200d      	movs	r0, #13
 8017a8a:	2402      	movs	r4, #2
 8017a8c:	2101      	movs	r1, #1
 8017a8e:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
 8017a92:	180b      	adds	r3, r1, r0
 8017a94:	085b      	lsrs	r3, r3, #1
 8017a96:	199a      	adds	r2, r3, r6
 8017a98:	f50d 65c6 	add.w	r5, sp, #1584	; 0x630
 8017a9c:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 8017aa0:	f5a5 7556 	sub.w	r5, r5, #856	; 0x358
 8017aa4:	edd5 7a00 	vldr	s15, [r5]
 8017aa8:	eef4 7ac8 	vcmpe.f32	s15, s16
 8017aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ab0:	d915      	bls.n	8017ade <m_kalman_3gyro.isra.6.constprop.36+0x3c46>
 8017ab2:	18ca      	adds	r2, r1, r3
 8017ab4:	4618      	mov	r0, r3
 8017ab6:	429c      	cmp	r4, r3
 8017ab8:	ea4f 0352 	mov.w	r3, r2, lsr #1
 8017abc:	eb03 0206 	add.w	r2, r3, r6
 8017ac0:	f50d 65c6 	add.w	r5, sp, #1584	; 0x630
 8017ac4:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 8017ac8:	f5a5 7556 	sub.w	r5, r5, #856	; 0x358
 8017acc:	f080 8177 	bcs.w	8017dbe <m_kalman_3gyro.isra.6.constprop.36+0x3f26>
 8017ad0:	edd5 7a00 	vldr	s15, [r5]
 8017ad4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8017ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017adc:	dbe9      	blt.n	8017ab2 <m_kalman_3gyro.isra.6.constprop.36+0x3c1a>
 8017ade:	1c5c      	adds	r4, r3, #1
 8017ae0:	42a0      	cmp	r0, r4
 8017ae2:	4619      	mov	r1, r3
 8017ae4:	d8d5      	bhi.n	8017a92 <m_kalman_3gyro.isra.6.constprop.36+0x3bfa>
 8017ae6:	0092      	lsls	r2, r2, #2
 8017ae8:	009b      	lsls	r3, r3, #2
 8017aea:	a9b6      	add	r1, sp, #728	; 0x2d8
 8017aec:	1888      	adds	r0, r1, r2
 8017aee:	4419      	add	r1, r3
 8017af0:	edd0 6a00 	vldr	s13, [r0]
 8017af4:	edd1 7a00 	vldr	s15, [r1]
 8017af8:	ee78 5a66 	vsub.f32	s11, s16, s13
 8017afc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8017b00:	a9c3      	add	r1, sp, #780	; 0x30c
 8017b02:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8017b06:	440a      	add	r2, r1
 8017b08:	440b      	add	r3, r1
 8017b0a:	edd2 7a00 	vldr	s15, [r2]
 8017b0e:	edd3 6a00 	vldr	s13, [r3]
 8017b12:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8017b16:	eee6 7a26 	vfma.f32	s15, s12, s13
 8017b1a:	f7fd bb0a 	b.w	8015132 <m_kalman_3gyro.isra.6.constprop.36+0x129a>
 8017b1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017b22:	f8aa 38a6 	strh.w	r3, [sl, #2214]	; 0x8a6
 8017b26:	f7ff ba60 	b.w	8016fea <m_kalman_3gyro.isra.6.constprop.36+0x3152>
 8017b2a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8017b2e:	f8ca 3130 	str.w	r3, [sl, #304]	; 0x130
 8017b32:	f8ca 3158 	str.w	r3, [sl, #344]	; 0x158
 8017b36:	f8ca 3180 	str.w	r3, [sl, #384]	; 0x180
 8017b3a:	e693      	b.n	8017864 <m_kalman_3gyro.isra.6.constprop.36+0x39cc>
 8017b3c:	f8ca 0450 	str.w	r0, [sl, #1104]	; 0x450
 8017b40:	f8aa 0202 	strh.w	r0, [sl, #514]	; 0x202
 8017b44:	f88a 0204 	strb.w	r0, [sl, #516]	; 0x204
 8017b48:	f8ca 045c 	str.w	r0, [sl, #1116]	; 0x45c
 8017b4c:	f7fd bd9b 	b.w	8015686 <m_kalman_3gyro.isra.6.constprop.36+0x17ee>
 8017b50:	9a08      	ldr	r2, [sp, #32]
 8017b52:	6813      	ldr	r3, [r2, #0]
 8017b54:	f8ca 307c 	str.w	r3, [sl, #124]	; 0x7c
 8017b58:	6853      	ldr	r3, [r2, #4]
 8017b5a:	f8ca 3080 	str.w	r3, [sl, #128]	; 0x80
 8017b5e:	6892      	ldr	r2, [r2, #8]
 8017b60:	f8ca 2084 	str.w	r2, [sl, #132]	; 0x84
 8017b64:	f8dd 26d8 	ldr.w	r2, [sp, #1752]	; 0x6d8
 8017b68:	2301      	movs	r3, #1
 8017b6a:	7013      	strb	r3, [r2, #0]
 8017b6c:	e6d0      	b.n	8017910 <m_kalman_3gyro.isra.6.constprop.36+0x3a78>
 8017b6e:	4613      	mov	r3, r2
 8017b70:	e65a      	b.n	8017828 <m_kalman_3gyro.isra.6.constprop.36+0x3990>
 8017b72:	eef4 eaec 	vcmpe.f32	s29, s25
 8017b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b7a:	f77f af10 	ble.w	801799e <m_kalman_3gyro.isra.6.constprop.36+0x3b06>
 8017b7e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8017b80:	ed93 5a00 	vldr	s10, [r3]
 8017b84:	eeb4 fac5 	vcmpe.f32	s30, s10
 8017b88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b8c:	f77f af07 	ble.w	801799e <m_kalman_3gyro.isra.6.constprop.36+0x3b06>
 8017b90:	ed9d 6a02 	vldr	s12, [sp, #8]
 8017b94:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8017b98:	eeb4 6ae5 	vcmpe.f32	s12, s11
 8017b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ba0:	f57f aefd 	bpl.w	801799e <m_kalman_3gyro.isra.6.constprop.36+0x3b06>
 8017ba4:	ee8d 6a8e 	vdiv.f32	s12, s27, s28
 8017ba8:	ee8c 4aae 	vdiv.f32	s8, s25, s29
 8017bac:	eec5 4a0f 	vdiv.f32	s9, s10, s30
 8017bb0:	ee36 6a04 	vadd.f32	s12, s12, s8
 8017bb4:	eeb7 5a08 	vmov.f32	s10, #120	; 0x3fc00000  1.5
 8017bb8:	ee36 6a24 	vadd.f32	s12, s12, s9
 8017bbc:	eeb4 6ac5 	vcmpe.f32	s12, s10
 8017bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017bc4:	f57f aeeb 	bpl.w	801799e <m_kalman_3gyro.isra.6.constprop.36+0x3b06>
 8017bc8:	f8dd 2698 	ldr.w	r2, [sp, #1688]	; 0x698
 8017bcc:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8017bd0:	ee27 7a25 	vmul.f32	s14, s14, s11
 8017bd4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8017bd8:	2300      	movs	r3, #0
 8017bda:	edc2 6a06 	vstr	s13, [r2, #24]
 8017bde:	ed82 7a07 	vstr	s14, [r2, #28]
 8017be2:	edc2 7a08 	vstr	s15, [r2, #32]
 8017be6:	ac86      	add	r4, sp, #536	; 0x218
 8017be8:	f8aa 38a6 	strh.w	r3, [sl, #2214]	; 0x8a6
 8017bec:	e63a      	b.n	8017864 <m_kalman_3gyro.isra.6.constprop.36+0x39cc>
 8017bee:	ac86      	add	r4, sp, #536	; 0x218
 8017bf0:	f7ff b9d5 	b.w	8016f9e <m_kalman_3gyro.isra.6.constprop.36+0x3106>
 8017bf4:	230c      	movs	r3, #12
 8017bf6:	fb03 f400 	mul.w	r4, r3, r0
 8017bfa:	f601 0378 	addw	r3, r1, #2168	; 0x878
 8017bfe:	4423      	add	r3, r4
 8017c00:	edc3 4a00 	vstr	s9, [r3]
 8017c04:	f601 023c 	addw	r2, r1, #2108	; 0x83c
 8017c08:	ed83 5a01 	vstr	s10, [r3, #4]
 8017c0c:	edc3 5a02 	vstr	s11, [r3, #8]
 8017c10:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 8017c14:	4422      	add	r2, r4
 8017c16:	3001      	adds	r0, #1
 8017c18:	2400      	movs	r4, #0
 8017c1a:	f881 0838 	strb.w	r0, [r1, #2104]	; 0x838
 8017c1e:	edc2 3a00 	vstr	s7, [r2]
 8017c22:	edc2 0a01 	vstr	s1, [r2, #4]
 8017c26:	ed82 4a02 	vstr	s8, [r2, #8]
 8017c2a:	701c      	strb	r4, [r3, #0]
 8017c2c:	f7fe bd1f 	b.w	801666e <m_kalman_3gyro.isra.6.constprop.36+0x27d6>
 8017c30:	240d      	movs	r4, #13
 8017c32:	2002      	movs	r0, #2
 8017c34:	2101      	movs	r1, #1
 8017c36:	f06f 4540 	mvn.w	r5, #3221225472	; 0xc0000000
 8017c3a:	1862      	adds	r2, r4, r1
 8017c3c:	0852      	lsrs	r2, r2, #1
 8017c3e:	1953      	adds	r3, r2, r5
 8017c40:	f50d 66c6 	add.w	r6, sp, #1584	; 0x630
 8017c44:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8017c48:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 8017c4c:	edd3 7a00 	vldr	s15, [r3]
 8017c50:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8017c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c58:	f280 80af 	bge.w	8017dba <m_kalman_3gyro.isra.6.constprop.36+0x3f22>
 8017c5c:	188b      	adds	r3, r1, r2
 8017c5e:	085b      	lsrs	r3, r3, #1
 8017c60:	195c      	adds	r4, r3, r5
 8017c62:	f50d 66c6 	add.w	r6, sp, #1584	; 0x630
 8017c66:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8017c6a:	4290      	cmp	r0, r2
 8017c6c:	f5a4 7456 	sub.w	r4, r4, #856	; 0x358
 8017c70:	d259      	bcs.n	8017d26 <m_kalman_3gyro.isra.6.constprop.36+0x3e8e>
 8017c72:	edd4 7a00 	vldr	s15, [r4]
 8017c76:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8017c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c7e:	da4c      	bge.n	8017d1a <m_kalman_3gyro.isra.6.constprop.36+0x3e82>
 8017c80:	461a      	mov	r2, r3
 8017c82:	e7eb      	b.n	8017c5c <m_kalman_3gyro.isra.6.constprop.36+0x3dc4>
 8017c84:	f8dd 3698 	ldr.w	r3, [sp, #1688]	; 0x698
 8017c88:	ed1f 7ab8 	vldr	s14, [pc, #-736]	; 80179ac <m_kalman_3gyro.isra.6.constprop.36+0x3b14>
 8017c8c:	edd3 7a06 	vldr	s15, [r3, #24]
 8017c90:	f8dd 1698 	ldr.w	r1, [sp, #1688]	; 0x698
 8017c94:	f8da 245c 	ldr.w	r2, [sl, #1116]	; 0x45c
 8017c98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017c9c:	2301      	movs	r3, #1
 8017c9e:	edc1 7a06 	vstr	s15, [r1, #24]
 8017ca2:	f88a 3202 	strb.w	r3, [sl, #514]	; 0x202
 8017ca6:	edd1 7a07 	vldr	s15, [r1, #28]
 8017caa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017cae:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8017cb2:	edc1 7a07 	vstr	s15, [r1, #28]
 8017cb6:	f88a 3203 	strb.w	r3, [sl, #515]	; 0x203
 8017cba:	edd1 7a08 	vldr	s15, [r1, #32]
 8017cbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017cc2:	edc1 7a08 	vstr	s15, [r1, #32]
 8017cc6:	f88a 3204 	strb.w	r3, [sl, #516]	; 0x204
 8017cca:	d014      	beq.n	8017cf6 <m_kalman_3gyro.isra.6.constprop.36+0x3e5e>
 8017ccc:	2a00      	cmp	r2, #0
 8017cce:	f102 0301 	add.w	r3, r2, #1
 8017cd2:	dd03      	ble.n	8017cdc <m_kalman_3gyro.isra.6.constprop.36+0x3e44>
 8017cd4:	2b00      	cmp	r3, #0
 8017cd6:	bfd8      	it	le
 8017cd8:	f06f 4300 	mvnle.w	r3, #2147483648	; 0x80000000
 8017cdc:	993e      	ldr	r1, [sp, #248]	; 0xf8
 8017cde:	f8ca 345c 	str.w	r3, [sl, #1116]	; 0x45c
 8017ce2:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8017ce4:	9b40      	ldr	r3, [sp, #256]	; 0x100
 8017ce6:	f8ca 10a0 	str.w	r1, [sl, #160]	; 0xa0
 8017cea:	f8ca 20a4 	str.w	r2, [sl, #164]	; 0xa4
 8017cee:	f8ca 30a8 	str.w	r3, [sl, #168]	; 0xa8
 8017cf2:	f7fd bcc8 	b.w	8015686 <m_kalman_3gyro.isra.6.constprop.36+0x17ee>
 8017cf6:	f60a 0398 	addw	r3, sl, #2200	; 0x898
 8017cfa:	f8da 00a0 	ldr.w	r0, [sl, #160]	; 0xa0
 8017cfe:	f8da 10a4 	ldr.w	r1, [sl, #164]	; 0xa4
 8017d02:	f8da 20a8 	ldr.w	r2, [sl, #168]	; 0xa8
 8017d06:	6018      	str	r0, [r3, #0]
 8017d08:	f60a 039c 	addw	r3, sl, #2204	; 0x89c
 8017d0c:	6019      	str	r1, [r3, #0]
 8017d0e:	f50a 630a 	add.w	r3, sl, #2208	; 0x8a0
 8017d12:	601a      	str	r2, [r3, #0]
 8017d14:	f240 33e9 	movw	r3, #1001	; 0x3e9
 8017d18:	e7e0      	b.n	8017cdc <m_kalman_3gyro.isra.6.constprop.36+0x3e44>
 8017d1a:	4614      	mov	r4, r2
 8017d1c:	1c58      	adds	r0, r3, #1
 8017d1e:	42a0      	cmp	r0, r4
 8017d20:	4619      	mov	r1, r3
 8017d22:	d38a      	bcc.n	8017c3a <m_kalman_3gyro.isra.6.constprop.36+0x3da2>
 8017d24:	e000      	b.n	8017d28 <m_kalman_3gyro.isra.6.constprop.36+0x3e90>
 8017d26:	460b      	mov	r3, r1
 8017d28:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 8017d2c:	3a01      	subs	r2, #1
 8017d2e:	0092      	lsls	r2, r2, #2
 8017d30:	009b      	lsls	r3, r3, #2
 8017d32:	a9b6      	add	r1, sp, #728	; 0x2d8
 8017d34:	1888      	adds	r0, r1, r2
 8017d36:	4419      	add	r1, r3
 8017d38:	ed90 7a00 	vldr	s14, [r0]
 8017d3c:	edd1 7a00 	vldr	s15, [r1]
 8017d40:	ee38 6a47 	vsub.f32	s12, s16, s14
 8017d44:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017d48:	a9c3      	add	r1, sp, #780	; 0x30c
 8017d4a:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8017d4e:	440a      	add	r2, r1
 8017d50:	440b      	add	r3, r1
 8017d52:	edd2 7a00 	vldr	s15, [r2]
 8017d56:	ed93 7a00 	vldr	s14, [r3]
 8017d5a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8017d5e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8017d62:	f7fc bec8 	b.w	8014af6 <m_kalman_3gyro.isra.6.constprop.36+0xc5e>
 8017d66:	ed8a 9a2c 	vstr	s18, [sl, #176]	; 0xb0
 8017d6a:	f7ff ba55 	b.w	8017218 <m_kalman_3gyro.isra.6.constprop.36+0x3380>
 8017d6e:	f101 4280 	add.w	r2, r1, #1073741824	; 0x40000000
 8017d72:	460b      	mov	r3, r1
 8017d74:	3a01      	subs	r2, #1
 8017d76:	f7fc befa 	b.w	8014b6e <m_kalman_3gyro.isra.6.constprop.36+0xcd6>
 8017d7a:	ed9f 6a25 	vldr	s12, [pc, #148]	; 8017e10 <m_kalman_3gyro.isra.6.constprop.36+0x3f78>
 8017d7e:	f8dd 3698 	ldr.w	r3, [sp, #1688]	; 0x698
 8017d82:	ee66 6a86 	vmul.f32	s13, s13, s12
 8017d86:	ee27 7a06 	vmul.f32	s14, s14, s12
 8017d8a:	ee67 7a86 	vmul.f32	s15, s15, s12
 8017d8e:	edc3 6a06 	vstr	s13, [r3, #24]
 8017d92:	ed83 7a07 	vstr	s14, [r3, #28]
 8017d96:	edc3 7a08 	vstr	s15, [r3, #32]
 8017d9a:	f7ff b91b 	b.w	8016fd4 <m_kalman_3gyro.isra.6.constprop.36+0x313c>
 8017d9e:	b19d      	cbz	r5, 8017dc8 <m_kalman_3gyro.isra.6.constprop.36+0x3f30>
 8017da0:	3d01      	subs	r5, #1
 8017da2:	f88a 58ad 	strb.w	r5, [sl, #2221]	; 0x8ad
 8017da6:	f8aa 01fc 	strh.w	r0, [sl, #508]	; 0x1fc
 8017daa:	f88a 01fe 	strb.w	r0, [sl, #510]	; 0x1fe
 8017dae:	f88a 0205 	strb.w	r0, [sl, #517]	; 0x205
 8017db2:	f88a 0207 	strb.w	r0, [sl, #519]	; 0x207
 8017db6:	f7fd becd 	b.w	8015b54 <m_kalman_3gyro.isra.6.constprop.36+0x1cbc>
 8017dba:	4613      	mov	r3, r2
 8017dbc:	e7ae      	b.n	8017d1c <m_kalman_3gyro.isra.6.constprop.36+0x3e84>
 8017dbe:	f101 4280 	add.w	r2, r1, #1073741824	; 0x40000000
 8017dc2:	460b      	mov	r3, r1
 8017dc4:	3a01      	subs	r2, #1
 8017dc6:	e68e      	b.n	8017ae6 <m_kalman_3gyro.isra.6.constprop.36+0x3c4e>
 8017dc8:	b14e      	cbz	r6, 8017dde <m_kalman_3gyro.isra.6.constprop.36+0x3f46>
 8017dca:	f8aa 51fc 	strh.w	r5, [sl, #508]	; 0x1fc
 8017dce:	f88a 51fe 	strb.w	r5, [sl, #510]	; 0x1fe
 8017dd2:	f88a 5205 	strb.w	r5, [sl, #517]	; 0x205
 8017dd6:	f88a 5207 	strb.w	r5, [sl, #519]	; 0x207
 8017dda:	f7fd bebb 	b.w	8015b54 <m_kalman_3gyro.isra.6.constprop.36+0x1cbc>
 8017dde:	f8dd 3698 	ldr.w	r3, [sp, #1688]	; 0x698
 8017de2:	edd3 6a00 	vldr	s13, [r3]
 8017de6:	ed93 7a01 	vldr	s14, [r3, #4]
 8017dea:	edd3 7a02 	vldr	s15, [r3, #8]
 8017dee:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 8017df2:	ee66 6a86 	vmul.f32	s13, s13, s12
 8017df6:	ee27 7a06 	vmul.f32	s14, s14, s12
 8017dfa:	ee67 7a86 	vmul.f32	s15, s15, s12
 8017dfe:	edc3 6a00 	vstr	s13, [r3]
 8017e02:	ed83 7a01 	vstr	s14, [r3, #4]
 8017e06:	edc3 7a02 	vstr	s15, [r3, #8]
 8017e0a:	f7fd bea3 	b.w	8015b54 <m_kalman_3gyro.isra.6.constprop.36+0x1cbc>
 8017e0e:	bf00      	nop
 8017e10:	3eaaaaab 	.word	0x3eaaaaab

08017e14 <SpacePointAlgorithm.isra.7>:
 8017e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e18:	ed2d 8b10 	vpush	{d8-d15}
 8017e1c:	b0bb      	sub	sp, #236	; 0xec
 8017e1e:	f8df e3c8 	ldr.w	lr, [pc, #968]	; 80181e8 <SpacePointAlgorithm.isra.7+0x3d4>
 8017e22:	f89d 5160 	ldrb.w	r5, [sp, #352]	; 0x160
 8017e26:	9514      	str	r5, [sp, #80]	; 0x50
 8017e28:	f89d 5168 	ldrb.w	r5, [sp, #360]	; 0x168
 8017e2c:	9515      	str	r5, [sp, #84]	; 0x54
 8017e2e:	f89d 516c 	ldrb.w	r5, [sp, #364]	; 0x16c
 8017e32:	9516      	str	r5, [sp, #88]	; 0x58
 8017e34:	f89d 5170 	ldrb.w	r5, [sp, #368]	; 0x170
 8017e38:	9517      	str	r5, [sp, #92]	; 0x5c
 8017e3a:	4682      	mov	sl, r0
 8017e3c:	4688      	mov	r8, r1
 8017e3e:	4693      	mov	fp, r2
 8017e40:	461d      	mov	r5, r3
 8017e42:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017e46:	f10d 0c7c 	add.w	ip, sp, #124	; 0x7c
 8017e4a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017e4e:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8017e52:	9e69      	ldr	r6, [sp, #420]	; 0x1a4
 8017e54:	edcd 0a18 	vstr	s1, [sp, #96]	; 0x60
 8017e58:	e88c 0003 	stmia.w	ip, {r0, r1}
 8017e5c:	e9dd 0156 	ldrd	r0, r1, [sp, #344]	; 0x158
 8017e60:	eef0 ba40 	vmov.f32	s23, s0
 8017e64:	ed8d 1a19 	vstr	s2, [sp, #100]	; 0x64
 8017e68:	eeb0 ea61 	vmov.f32	s28, s3
 8017e6c:	eeb0 ba42 	vmov.f32	s22, s4
 8017e70:	eef0 9a62 	vmov.f32	s19, s5
 8017e74:	eeb0 aa43 	vmov.f32	s20, s6
 8017e78:	eef0 aa63 	vmov.f32	s21, s7
 8017e7c:	f7e8 fe9c 	bl	8000bb8 <__aeabi_d2f>
 8017e80:	f896 38cc 	ldrb.w	r3, [r6, #2252]	; 0x8cc
 8017e84:	9c54      	ldr	r4, [sp, #336]	; 0x150
 8017e86:	f89d 9164 	ldrb.w	r9, [sp, #356]	; 0x164
 8017e8a:	9f64      	ldr	r7, [sp, #400]	; 0x190
 8017e8c:	ee0c 0a10 	vmov	s24, r0
 8017e90:	b923      	cbnz	r3, 8017e9c <SpacePointAlgorithm.isra.7+0x88>
 8017e92:	2200      	movs	r2, #0
 8017e94:	2301      	movs	r3, #1
 8017e96:	6032      	str	r2, [r6, #0]
 8017e98:	f886 38cc 	strb.w	r3, [r6, #2252]	; 0x8cc
 8017e9c:	eddf 7ac6 	vldr	s15, [pc, #792]	; 80181b8 <SpacePointAlgorithm.isra.7+0x3a4>
 8017ea0:	eec7 7aab 	vdiv.f32	s15, s15, s23
 8017ea4:	ee17 0a90 	vmov	r0, s15
 8017ea8:	f7e8 fb56 	bl	8000558 <__aeabi_f2d>
 8017eac:	f003 fbf2 	bl	801b694 <sqrt>
 8017eb0:	f7e8 fe82 	bl	8000bb8 <__aeabi_d2f>
 8017eb4:	ed9f 5ac1 	vldr	s10, [pc, #772]	; 80181bc <SpacePointAlgorithm.isra.7+0x3a8>
 8017eb8:	ed95 6a01 	vldr	s12, [r5, #4]
 8017ebc:	edd5 7a00 	vldr	s15, [r5]
 8017ec0:	edd5 6a02 	vldr	s13, [r5, #8]
 8017ec4:	ed9f 4abe 	vldr	s8, [pc, #760]	; 80181c0 <SpacePointAlgorithm.isra.7+0x3ac>
 8017ec8:	ed9d 1a20 	vldr	s2, [sp, #128]	; 0x80
 8017ecc:	eddd 0a21 	vldr	s1, [sp, #132]	; 0x84
 8017ed0:	eddd 5a22 	vldr	s11, [sp, #136]	; 0x88
 8017ed4:	eddd 4a23 	vldr	s9, [sp, #140]	; 0x8c
 8017ed8:	ee26 6a05 	vmul.f32	s12, s12, s10
 8017edc:	ee07 0a10 	vmov	s14, r0
 8017ee0:	ee67 7a85 	vmul.f32	s15, s15, s10
 8017ee4:	ee66 6a85 	vmul.f32	s13, s13, s10
 8017ee8:	ed85 6a01 	vstr	s12, [r5, #4]
 8017eec:	ed9d 6a24 	vldr	s12, [sp, #144]	; 0x90
 8017ef0:	edc5 7a00 	vstr	s15, [r5]
 8017ef4:	edc5 6a02 	vstr	s13, [r5, #8]
 8017ef8:	ee84 8a07 	vdiv.f32	s16, s8, s14
 8017efc:	ee27 fa01 	vmul.f32	s30, s14, s2
 8017f00:	ee67 ea20 	vmul.f32	s29, s14, s1
 8017f04:	ee67 8a25 	vmul.f32	s17, s14, s11
 8017f08:	ee67 fa24 	vmul.f32	s31, s14, s9
 8017f0c:	ee27 da06 	vmul.f32	s26, s14, s12
 8017f10:	f1b9 0f04 	cmp.w	r9, #4
 8017f14:	d806      	bhi.n	8017f24 <SpacePointAlgorithm.isra.7+0x110>
 8017f16:	e8df f019 	tbh	[pc, r9, lsl #1]
 8017f1a:	0136      	.short	0x0136
 8017f1c:	012b0143 	.word	0x012b0143
 8017f20:	010d0005 	.word	0x010d0005
 8017f24:	eddf 7aa7 	vldr	s15, [pc, #668]	; 80181c4 <SpacePointAlgorithm.isra.7+0x3b0>
 8017f28:	eddf caa7 	vldr	s25, [pc, #668]	; 80181c8 <SpacePointAlgorithm.isra.7+0x3b4>
 8017f2c:	ee69 9aa7 	vmul.f32	s19, s19, s15
 8017f30:	ee2a aa27 	vmul.f32	s20, s20, s15
 8017f34:	ee6a aaa7 	vmul.f32	s21, s21, s15
 8017f38:	ee69 9a8c 	vmul.f32	s19, s19, s24
 8017f3c:	ee2a aa0c 	vmul.f32	s20, s20, s24
 8017f40:	ee6a aa8c 	vmul.f32	s21, s21, s24
 8017f44:	eef6 da00 	vmov.f32	s27, #96	; 0x3f000000  0.5
 8017f48:	2200      	movs	r2, #0
 8017f4a:	2300      	movs	r3, #0
 8017f4c:	e9dd 015e 	ldrd	r0, r1, [sp, #376]	; 0x178
 8017f50:	ed96 9a00 	vldr	s18, [r6]
 8017f54:	f7e8 fdc0 	bl	8000ad8 <__aeabi_dcmpeq>
 8017f58:	b168      	cbz	r0, 8017f76 <SpacePointAlgorithm.isra.7+0x162>
 8017f5a:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 8017f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f62:	f340 80ec 	ble.w	801813e <SpacePointAlgorithm.isra.7+0x32a>
 8017f66:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8017f6a:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8017f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f72:	f140 80e4 	bpl.w	801813e <SpacePointAlgorithm.isra.7+0x32a>
 8017f76:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8017f7a:	ee79 7a27 	vadd.f32	s15, s18, s15
 8017f7e:	ed9f 9a93 	vldr	s18, [pc, #588]	; 80181cc <SpacePointAlgorithm.isra.7+0x3b8>
 8017f82:	ed9f 7a93 	vldr	s14, [pc, #588]	; 80181d0 <SpacePointAlgorithm.isra.7+0x3bc>
 8017f86:	edc6 7a00 	vstr	s15, [r6]
 8017f8a:	ee67 7a89 	vmul.f32	s15, s15, s18
 8017f8e:	ee6b 4a2f 	vmul.f32	s9, s22, s31
 8017f92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8017f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f9a:	bfb8      	it	lt
 8017f9c:	eef0 7a47 	vmovlt.f32	s15, s14
 8017fa0:	ee88 5a27 	vdiv.f32	s10, s16, s15
 8017fa4:	ed9f 6a8b 	vldr	s12, [pc, #556]	; 80181d4 <SpacePointAlgorithm.isra.7+0x3c0>
 8017fa8:	ee6d 5aa8 	vmul.f32	s11, s27, s17
 8017fac:	ee27 1a8f 	vmul.f32	s2, s15, s30
 8017fb0:	ee67 0aae 	vmul.f32	s1, s15, s29
 8017fb4:	ee64 4aa7 	vmul.f32	s9, s9, s15
 8017fb8:	ee2d 6a06 	vmul.f32	s12, s26, s12
 8017fbc:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8017fc0:	edd8 7a01 	vldr	s15, [r8, #4]
 8017fc4:	ed94 3a09 	vldr	s6, [r4, #36]	; 0x24
 8017fc8:	ed94 4a05 	vldr	s8, [r4, #20]
 8017fcc:	edd4 6a03 	vldr	s13, [r4, #12]
 8017fd0:	edd8 3a00 	vldr	s7, [r8]
 8017fd4:	edd4 2a02 	vldr	s5, [r4, #8]
 8017fd8:	edcd 4a37 	vstr	s9, [sp, #220]	; 0xdc
 8017fdc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017fe0:	ed94 7a04 	vldr	s14, [r4, #16]
 8017fe4:	edd4 4a07 	vldr	s9, [r4, #28]
 8017fe8:	ed8d 6a38 	vstr	s12, [sp, #224]	; 0xe0
 8017fec:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8017ff0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8017ff4:	ed94 3a00 	vldr	s6, [r4]
 8017ff8:	edcd 5a34 	vstr	s11, [sp, #208]	; 0xd0
 8017ffc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8018000:	ee67 7a84 	vmul.f32	s15, s15, s8
 8018004:	ed94 4a01 	vldr	s8, [r4, #4]
 8018008:	edcd 5a35 	vstr	s11, [sp, #212]	; 0xd4
 801800c:	eee3 6a23 	vfma.f32	s13, s6, s7
 8018010:	462b      	mov	r3, r5
 8018012:	ad1a      	add	r5, sp, #104	; 0x68
 8018014:	ed94 3a0b 	vldr	s6, [r4, #44]	; 0x2c
 8018018:	edcd 5a36 	vstr	s11, [sp, #216]	; 0xd8
 801801c:	eea3 7a84 	vfma.f32	s14, s7, s8
 8018020:	4650      	mov	r0, sl
 8018022:	a92e      	add	r1, sp, #184	; 0xb8
 8018024:	ed98 4a02 	vldr	s8, [r8, #8]
 8018028:	edd4 5a08 	vldr	s11, [r4, #32]
 801802c:	ed8d 5a25 	vstr	s10, [sp, #148]	; 0x94
 8018030:	ee34 6a43 	vsub.f32	s12, s8, s6
 8018034:	eee2 7aa3 	vfma.f32	s15, s5, s7
 8018038:	f10d 0a94 	add.w	sl, sp, #148	; 0x94
 801803c:	f8df e1ac 	ldr.w	lr, [pc, #428]	; 80181ec <SpacePointAlgorithm.isra.7+0x3d8>
 8018040:	ed94 4a06 	vldr	s8, [r4, #24]
 8018044:	ed8d 5a26 	vstr	s10, [sp, #152]	; 0x98
 8018048:	eea4 7a86 	vfma.f32	s14, s9, s12
 801804c:	465a      	mov	r2, fp
 801804e:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 80181f0 <SpacePointAlgorithm.isra.7+0x3dc>
 8018052:	ed8d 1a2e 	vstr	s2, [sp, #184]	; 0xb8
 8018056:	eee5 7a86 	vfma.f32	s15, s11, s12
 801805a:	f8df 8198 	ldr.w	r8, [pc, #408]	; 80181f4 <SpacePointAlgorithm.isra.7+0x3e0>
 801805e:	eee6 6a04 	vfma.f32	s13, s12, s8
 8018062:	ed8d 7a1d 	vstr	s14, [sp, #116]	; 0x74
 8018066:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 801806a:	ee2b ba07 	vmul.f32	s22, s22, s14
 801806e:	edcd 6a1c 	vstr	s13, [sp, #112]	; 0x70
 8018072:	ed8d 1a2f 	vstr	s2, [sp, #188]	; 0xbc
 8018076:	ed8d 1a30 	vstr	s2, [sp, #192]	; 0xc0
 801807a:	edcd 0a31 	vstr	s1, [sp, #196]	; 0xc4
 801807e:	edcd 0a32 	vstr	s1, [sp, #200]	; 0xc8
 8018082:	edcd 0a33 	vstr	s1, [sp, #204]	; 0xcc
 8018086:	edcd 7a1e 	vstr	s15, [sp, #120]	; 0x78
 801808a:	ed8d ba39 	vstr	s22, [sp, #228]	; 0xe4
 801808e:	ed8d 5a27 	vstr	s10, [sp, #156]	; 0x9c
 8018092:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8018094:	9402      	str	r4, [sp, #8]
 8018096:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8018098:	f88d 4068 	strb.w	r4, [sp, #104]	; 0x68
 801809c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801809e:	f88d 4069 	strb.w	r4, [sp, #105]	; 0x69
 80180a2:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80180a4:	f88d 406a 	strb.w	r4, [sp, #106]	; 0x6a
 80180a8:	9c68      	ldr	r4, [sp, #416]	; 0x1a0
 80180aa:	9411      	str	r4, [sp, #68]	; 0x44
 80180ac:	ed9d 7b60 	vldr	d7, [sp, #384]	; 0x180
 80180b0:	9c67      	ldr	r4, [sp, #412]	; 0x19c
 80180b2:	9410      	str	r4, [sp, #64]	; 0x40
 80180b4:	9c66      	ldr	r4, [sp, #408]	; 0x198
 80180b6:	9504      	str	r5, [sp, #16]
 80180b8:	ed8d 7b08 	vstr	d7, [sp, #32]
 80180bc:	e9cd 740e 	strd	r7, r4, [sp, #56]	; 0x38
 80180c0:	ed9d 7b5e 	vldr	d7, [sp, #376]	; 0x178
 80180c4:	9c63      	ldr	r4, [sp, #396]	; 0x18c
 80180c6:	940c      	str	r4, [sp, #48]	; 0x30
 80180c8:	9c62      	ldr	r4, [sp, #392]	; 0x188
 80180ca:	940b      	str	r4, [sp, #44]	; 0x2c
 80180cc:	ad1b      	add	r5, sp, #108	; 0x6c
 80180ce:	9c55      	ldr	r4, [sp, #340]	; 0x154
 80180d0:	f8cd 900c 	str.w	r9, [sp, #12]
 80180d4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80180d8:	eeb0 2a4c 	vmov.f32	s4, s24
 80180dc:	eef0 1a6b 	vmov.f32	s3, s23
 80180e0:	eeb0 1a6a 	vmov.f32	s2, s21
 80180e4:	eef0 0a4a 	vmov.f32	s1, s20
 80180e8:	eeb0 0a69 	vmov.f32	s0, s19
 80180ec:	e9cd 1a00 	strd	r1, sl, [sp]
 80180f0:	edcd ca28 	vstr	s25, [sp, #160]	; 0xa0
 80180f4:	a91c      	add	r1, sp, #112	; 0x70
 80180f6:	edcd ca29 	vstr	s25, [sp, #164]	; 0xa4
 80180fa:	edcd ca2a 	vstr	s25, [sp, #168]	; 0xa8
 80180fe:	9612      	str	r6, [sp, #72]	; 0x48
 8018100:	940a      	str	r4, [sp, #40]	; 0x28
 8018102:	950d      	str	r5, [sp, #52]	; 0x34
 8018104:	f8cd e0ac 	str.w	lr, [sp, #172]	; 0xac
 8018108:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
 801810c:	f8cd 80b0 	str.w	r8, [sp, #176]	; 0xb0
 8018110:	f7fb fec2 	bl	8013e98 <m_kalman_3gyro.isra.6.constprop.36>
 8018114:	4651      	mov	r1, sl
 8018116:	9862      	ldr	r0, [sp, #392]	; 0x188
 8018118:	f7f7 fbde 	bl	800f8d8 <m_q2dcm_eml>
 801811c:	9a65      	ldr	r2, [sp, #404]	; 0x194
 801811e:	68fb      	ldr	r3, [r7, #12]
 8018120:	6013      	str	r3, [r2, #0]
 8018122:	693b      	ldr	r3, [r7, #16]
 8018124:	6053      	str	r3, [r2, #4]
 8018126:	697b      	ldr	r3, [r7, #20]
 8018128:	6093      	str	r3, [r2, #8]
 801812a:	b03b      	add	sp, #236	; 0xec
 801812c:	ecbd 8b10 	vpop	{d8-d15}
 8018130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018134:	eddf ca28 	vldr	s25, [pc, #160]	; 80181d8 <SpacePointAlgorithm.isra.7+0x3c4>
 8018138:	eef7 da00 	vmov.f32	s27, #112	; 0x3f800000  1.0
 801813c:	e704      	b.n	8017f48 <SpacePointAlgorithm.isra.7+0x134>
 801813e:	eddf 7a27 	vldr	s15, [pc, #156]	; 80181dc <SpacePointAlgorithm.isra.7+0x3c8>
 8018142:	ed9f 6a24 	vldr	s12, [pc, #144]	; 80181d4 <SpacePointAlgorithm.isra.7+0x3c0>
 8018146:	ee3e ea27 	vadd.f32	s28, s28, s15
 801814a:	eddd 7a19 	vldr	s15, [sp, #100]	; 0x64
 801814e:	ee27 1a8f 	vmul.f32	s2, s15, s30
 8018152:	eddd 7a18 	vldr	s15, [sp, #96]	; 0x60
 8018156:	2300      	movs	r3, #0
 8018158:	6033      	str	r3, [r6, #0]
 801815a:	ee67 0aae 	vmul.f32	s1, s15, s29
 801815e:	ee6d 5aa8 	vmul.f32	s11, s27, s17
 8018162:	ee6b 4a2f 	vmul.f32	s9, s22, s31
 8018166:	ee88 5a0e 	vdiv.f32	s10, s16, s28
 801816a:	ee2d 6a06 	vmul.f32	s12, s26, s12
 801816e:	e725      	b.n	8017fbc <SpacePointAlgorithm.isra.7+0x1a8>
 8018170:	ee69 9a8c 	vmul.f32	s19, s19, s24
 8018174:	ee2a aa0c 	vmul.f32	s20, s20, s24
 8018178:	ee6a aa8c 	vmul.f32	s21, s21, s24
 801817c:	eddf ca18 	vldr	s25, [pc, #96]	; 80181e0 <SpacePointAlgorithm.isra.7+0x3cc>
 8018180:	eef1 da04 	vmov.f32	s27, #20	; 0x40a00000  5.0
 8018184:	e6e0      	b.n	8017f48 <SpacePointAlgorithm.isra.7+0x134>
 8018186:	eddf 7a17 	vldr	s15, [pc, #92]	; 80181e4 <SpacePointAlgorithm.isra.7+0x3d0>
 801818a:	eddf ca0f 	vldr	s25, [pc, #60]	; 80181c8 <SpacePointAlgorithm.isra.7+0x3b4>
 801818e:	ee69 9aa7 	vmul.f32	s19, s19, s15
 8018192:	ee2a aa27 	vmul.f32	s20, s20, s15
 8018196:	ee6a aaa7 	vmul.f32	s21, s21, s15
 801819a:	eef7 da00 	vmov.f32	s27, #112	; 0x3f800000  1.0
 801819e:	e6d3      	b.n	8017f48 <SpacePointAlgorithm.isra.7+0x134>
 80181a0:	ee69 9a8c 	vmul.f32	s19, s19, s24
 80181a4:	ee2a aa0c 	vmul.f32	s20, s20, s24
 80181a8:	ee6a aa8c 	vmul.f32	s21, s21, s24
 80181ac:	eddf ca0a 	vldr	s25, [pc, #40]	; 80181d8 <SpacePointAlgorithm.isra.7+0x3c4>
 80181b0:	eef7 da00 	vmov.f32	s27, #112	; 0x3f800000  1.0
 80181b4:	e6c8      	b.n	8017f48 <SpacePointAlgorithm.isra.7+0x134>
 80181b6:	bf00      	nop
 80181b8:	3c03126f 	.word	0x3c03126f
 80181bc:	3c8efa35 	.word	0x3c8efa35
 80181c0:	3b656042 	.word	0x3b656042
 80181c4:	42c80000 	.word	0x42c80000
 80181c8:	3a83126f 	.word	0x3a83126f
 80181cc:	3d4ccccd 	.word	0x3d4ccccd
 80181d0:	3e4ccccd 	.word	0x3e4ccccd
 80181d4:	3f333333 	.word	0x3f333333
 80181d8:	3ac49ba6 	.word	0x3ac49ba6
 80181dc:	358637bd 	.word	0x358637bd
 80181e0:	3727c5ac 	.word	0x3727c5ac
 80181e4:	3dcccccd 	.word	0x3dcccccd
 80181e8:	0801d56c 	.word	0x0801d56c
 80181ec:	3b449ba6 	.word	0x3b449ba6
 80181f0:	3a9d4952 	.word	0x3a9d4952
 80181f4:	3c23d70a 	.word	0x3c23d70a

080181f8 <iNemo_update_6X.constprop.34>:
 80181f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80181fc:	4ce6      	ldr	r4, [pc, #920]	; (8018598 <iNemo_update_6X.constprop.34+0x3a0>)
 80181fe:	4fe7      	ldr	r7, [pc, #924]	; (801859c <iNemo_update_6X.constprop.34+0x3a4>)
 8018200:	f994 343d 	ldrsb.w	r3, [r4, #1085]	; 0x43d
 8018204:	ee07 3a90 	vmov	s15, r3
 8018208:	f994 3440 	ldrsb.w	r3, [r4, #1088]	; 0x440
 801820c:	ee06 3a90 	vmov	s13, r3
 8018210:	f994 3458 	ldrsb.w	r3, [r4, #1112]	; 0x458
 8018214:	ee07 3a10 	vmov	s14, r3
 8018218:	f994 3455 	ldrsb.w	r3, [r4, #1109]	; 0x455
 801821c:	ed2d 8b08 	vpush	{d8-d11}
 8018220:	ee09 3a90 	vmov	s19, r3
 8018224:	f994 343c 	ldrsb.w	r3, [r4, #1084]	; 0x43c
 8018228:	7b3a      	ldrb	r2, [r7, #12]
 801822a:	ee01 3a90 	vmov	s3, r3
 801822e:	f994 343f 	ldrsb.w	r3, [r4, #1087]	; 0x43f
 8018232:	ee02 3a10 	vmov	s4, r3
 8018236:	f994 3457 	ldrsb.w	r3, [r4, #1111]	; 0x457
 801823a:	ee02 3a90 	vmov	s5, r3
 801823e:	f994 3454 	ldrsb.w	r3, [r4, #1108]	; 0x454
 8018242:	ee03 3a90 	vmov	s7, r3
 8018246:	f994 3443 	ldrsb.w	r3, [r4, #1091]	; 0x443
 801824a:	ee08 3a10 	vmov	s16, r3
 801824e:	f994 345b 	ldrsb.w	r3, [r4, #1115]	; 0x45b
 8018252:	ee08 3a90 	vmov	s17, r3
 8018256:	f994 343e 	ldrsb.w	r3, [r4, #1086]	; 0x43e
 801825a:	f604 05cc 	addw	r5, r4, #2252	; 0x8cc
 801825e:	edd5 4a07 	vldr	s9, [r5, #28]
 8018262:	ed95 3a06 	vldr	s6, [r5, #24]
 8018266:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 801826a:	ed95 4a09 	vldr	s8, [r5, #36]	; 0x24
 801826e:	ed95 5a08 	vldr	s10, [r5, #32]
 8018272:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 8018276:	ee00 3a90 	vmov	s1, r3
 801827a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801827e:	f994 3441 	ldrsb.w	r3, [r4, #1089]	; 0x441
 8018282:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8018286:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801828a:	ee01 3a10 	vmov	s2, r3
 801828e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8018292:	f994 3442 	ldrsb.w	r3, [r4, #1090]	; 0x442
 8018296:	ee66 6aa4 	vmul.f32	s13, s13, s9
 801829a:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 801829e:	eee1 7a83 	vfma.f32	s15, s3, s6
 80182a2:	b0e5      	sub	sp, #404	; 0x194
 80182a4:	f10d 0958 	add.w	r9, sp, #88	; 0x58
 80182a8:	ee01 3a90 	vmov	s3, r3
 80182ac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80182b0:	f994 3459 	ldrsb.w	r3, [r4, #1113]	; 0x459
 80182b4:	ee27 7a06 	vmul.f32	s14, s14, s12
 80182b8:	eef8 2ae2 	vcvt.f32.s32	s5, s5
 80182bc:	eee3 6a02 	vfma.f32	s13, s6, s4
 80182c0:	4680      	mov	r8, r0
 80182c2:	ee02 3a10 	vmov	s4, r3
 80182c6:	eef8 9ae9 	vcvt.f32.s32	s19, s19
 80182ca:	f994 3456 	ldrsb.w	r3, [r4, #1110]	; 0x456
 80182ce:	ee69 9a86 	vmul.f32	s19, s19, s12
 80182d2:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 80182d6:	eea4 7a22 	vfma.f32	s14, s8, s5
 80182da:	ee02 3a90 	vmov	s5, r3
 80182de:	f994 345a 	ldrsb.w	r3, [r4, #1114]	; 0x45a
 80182e2:	eee3 9a84 	vfma.f32	s19, s7, s8
 80182e6:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 80182ea:	ee03 3a90 	vmov	s7, r3
 80182ee:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 80182f2:	f994 3444 	ldrsb.w	r3, [r4, #1092]	; 0x444
 80182f6:	ee28 8a24 	vmul.f32	s16, s16, s9
 80182fa:	ee68 8a86 	vmul.f32	s17, s17, s12
 80182fe:	ee04 3a90 	vmov	s9, r3
 8018302:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8018306:	f994 345c 	ldrsb.w	r3, [r4, #1116]	; 0x45c
 801830a:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 801830e:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8018312:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 8018316:	eef8 2ae2 	vcvt.f32.s32	s5, s5
 801831a:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 801831e:	ee06 3a10 	vmov	s12, r3
 8018322:	eee0 7a85 	vfma.f32	s15, s1, s10
 8018326:	2300      	movs	r3, #0
 8018328:	e9c9 3300 	strd	r3, r3, [r9]
 801832c:	eee5 6a01 	vfma.f32	s13, s10, s2
 8018330:	f8c9 3008 	str.w	r3, [r9, #8]
 8018334:	eea3 8a21 	vfma.f32	s16, s6, s3
 8018338:	eea5 7a82 	vfma.f32	s14, s11, s4
 801833c:	eee2 9aa5 	vfma.f32	s19, s5, s11
 8018340:	eee4 8a23 	vfma.f32	s17, s8, s7
 8018344:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8018348:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 801834c:	eef0 ba40 	vmov.f32	s23, s0
 8018350:	eea5 8a24 	vfma.f32	s16, s10, s9
 8018354:	eeb1 ba66 	vneg.f32	s22, s13
 8018358:	eef1 aa67 	vneg.f32	s21, s15
 801835c:	eeb1 aa47 	vneg.f32	s20, s14
 8018360:	eef1 9a69 	vneg.f32	s19, s19
 8018364:	eee5 8a86 	vfma.f32	s17, s11, s12
 8018368:	2a00      	cmp	r2, #0
 801836a:	f000 8125 	beq.w	80185b8 <iNemo_update_6X.constprop.34+0x3c0>
 801836e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8018372:	f8df a23c 	ldr.w	sl, [pc, #572]	; 80185b0 <iNemo_update_6X.constprop.34+0x3b8>
 8018376:	f8df b23c 	ldr.w	fp, [pc, #572]	; 80185b4 <iNemo_update_6X.constprop.34+0x3bc>
 801837a:	eee6 7aa6 	vfma.f32	s15, s13, s13
 801837e:	eee8 7a08 	vfma.f32	s15, s16, s16
 8018382:	ee17 0a90 	vmov	r0, s15
 8018386:	f7e8 f8e7 	bl	8000558 <__aeabi_f2d>
 801838a:	f003 f983 	bl	801b694 <sqrt>
 801838e:	f7e8 fc13 	bl	8000bb8 <__aeabi_d2f>
 8018392:	ee07 0a90 	vmov	s15, r0
 8018396:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801839a:	eec7 7a27 	vdiv.f32	s15, s14, s15
 801839e:	ee2b ba27 	vmul.f32	s22, s22, s15
 80183a2:	ee6a aaa7 	vmul.f32	s21, s21, s15
 80183a6:	ee28 8a27 	vmul.f32	s16, s16, s15
 80183aa:	f894 29fd 	ldrb.w	r2, [r4, #2557]	; 0x9fd
 80183ae:	f894 39fc 	ldrb.w	r3, [r4, #2556]	; 0x9fc
 80183b2:	6fa9      	ldr	r1, [r5, #120]	; 0x78
 80183b4:	f8c5 1088 	str.w	r1, [r5, #136]	; 0x88
 80183b8:	ee09 2a10 	vmov	s18, r2
 80183bc:	4978      	ldr	r1, [pc, #480]	; (80185a0 <iNemo_update_6X.constprop.34+0x3a8>)
 80183be:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 80183c0:	f8d5 6080 	ldr.w	r6, [r5, #128]	; 0x80
 80183c4:	f8c5 208c 	str.w	r2, [r5, #140]	; 0x8c
 80183c8:	f043 0302 	orr.w	r3, r3, #2
 80183cc:	22f8      	movs	r2, #248	; 0xf8
 80183ce:	f8d5 c084 	ldr.w	ip, [r5, #132]	; 0x84
 80183d2:	f8c5 6090 	str.w	r6, [r5, #144]	; 0x90
 80183d6:	f083 0301 	eor.w	r3, r3, #1
 80183da:	188e      	adds	r6, r1, r2
 80183dc:	a826      	add	r0, sp, #152	; 0x98
 80183de:	f884 39fc 	strb.w	r3, [r4, #2556]	; 0x9fc
 80183e2:	f8c5 c094 	str.w	ip, [r5, #148]	; 0x94
 80183e6:	f002 f803 	bl	801a3f0 <memcpy>
 80183ea:	f506 7c9b 	add.w	ip, r6, #310	; 0x136
 80183ee:	6a30      	ldr	r0, [r6, #32]
 80183f0:	f8cd c050 	str.w	ip, [sp, #80]	; 0x50
 80183f4:	2300      	movs	r3, #0
 80183f6:	f506 7e9a 	add.w	lr, r6, #308	; 0x134
 80183fa:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
 80183fe:	f206 1235 	addw	r2, r6, #309	; 0x135
 8018402:	f8cd e048 	str.w	lr, [sp, #72]	; 0x48
 8018406:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 801840a:	9213      	str	r2, [sp, #76]	; 0x4c
 801840c:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
 8018410:	aa1d      	add	r2, sp, #116	; 0x74
 8018412:	632b      	str	r3, [r5, #48]	; 0x30
 8018414:	636b      	str	r3, [r5, #52]	; 0x34
 8018416:	63ab      	str	r3, [r5, #56]	; 0x38
 8018418:	4962      	ldr	r1, [pc, #392]	; (80185a4 <iNemo_update_6X.constprop.34+0x3ac>)
 801841a:	f8cd a0ac 	str.w	sl, [sp, #172]	; 0xac
 801841e:	f10d 0a64 	add.w	sl, sp, #100	; 0x64
 8018422:	932a      	str	r3, [sp, #168]	; 0xa8
 8018424:	9210      	str	r2, [sp, #64]	; 0x40
 8018426:	ed8d ba2c 	vstr	s22, [sp, #176]	; 0xb0
 801842a:	edcd aa2d 	vstr	s21, [sp, #180]	; 0xb4
 801842e:	ed8d 8a2e 	vstr	s16, [sp, #184]	; 0xb8
 8018432:	ed8d aa2f 	vstr	s20, [sp, #188]	; 0xbc
 8018436:	edcd 9a30 	vstr	s19, [sp, #192]	; 0xc0
 801843a:	edcd 8a31 	vstr	s17, [sp, #196]	; 0xc4
 801843e:	f8cd b0a4 	str.w	fp, [sp, #164]	; 0xa4
 8018442:	9115      	str	r1, [sp, #84]	; 0x54
 8018444:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8018448:	f7e8 f886 	bl	8000558 <__aeabi_f2d>
 801844c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8018450:	f894 09de 	ldrb.w	r0, [r4, #2526]	; 0x9de
 8018454:	ed96 ba0b 	vldr	s22, [r6, #44]	; 0x2c
 8018458:	edd6 aa0a 	vldr	s21, [r6, #40]	; 0x28
 801845c:	ed96 aa03 	vldr	s20, [r6, #12]
 8018460:	edd6 9a02 	vldr	s19, [r6, #8]
 8018464:	edd6 8a01 	vldr	s17, [r6, #4]
 8018468:	ed96 8a00 	vldr	s16, [r6]
 801846c:	f7e8 f852 	bl	8000514 <__aeabi_ui2d>
 8018470:	eeb8 9a49 	vcvt.f32.u32	s18, s18
 8018474:	f894 39dc 	ldrb.w	r3, [r4, #2524]	; 0x9dc
 8018478:	f894 c9da 	ldrb.w	ip, [r4, #2522]	; 0x9da
 801847c:	f894 29d9 	ldrb.w	r2, [r4, #2521]	; 0x9d9
 8018480:	f894 e9db 	ldrb.w	lr, [r4, #2523]	; 0x9db
 8018484:	ee29 9a2b 	vmul.f32	s18, s18, s23
 8018488:	edd6 ba0c 	vldr	s23, [r6, #48]	; 0x30
 801848c:	9308      	str	r3, [sp, #32]
 801848e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8018492:	f894 39d8 	ldrb.w	r3, [r4, #2520]	; 0x9d8
 8018496:	6930      	ldr	r0, [r6, #16]
 8018498:	e9cd 3204 	strd	r3, r2, [sp, #16]
 801849c:	e9cd ce06 	strd	ip, lr, [sp, #24]
 80184a0:	f7e8 f85a 	bl	8000558 <__aeabi_f2d>
 80184a4:	ae35      	add	r6, sp, #212	; 0xd4
 80184a6:	f50d 7c82 	add.w	ip, sp, #260	; 0x104
 80184aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80184ae:	eeb0 0a49 	vmov.f32	s0, s18
 80184b2:	eef0 3a6b 	vmov.f32	s7, s23
 80184b6:	eeb0 3a4b 	vmov.f32	s6, s22
 80184ba:	eef0 2a6a 	vmov.f32	s5, s21
 80184be:	eeb0 2a4a 	vmov.f32	s4, s20
 80184c2:	eef0 1a69 	vmov.f32	s3, s19
 80184c6:	eeb0 1a68 	vmov.f32	s2, s17
 80184ca:	eef0 0a48 	vmov.f32	s1, s16
 80184ce:	ab32      	add	r3, sp, #200	; 0xc8
 80184d0:	aa2c      	add	r2, sp, #176	; 0xb0
 80184d2:	a929      	add	r1, sp, #164	; 0xa4
 80184d4:	a848      	add	r0, sp, #288	; 0x120
 80184d6:	e9cd 6c00 	strd	r6, ip, [sp]
 80184da:	f7ff fc9b 	bl	8017e14 <SpacePointAlgorithm.isra.7>
 80184de:	f1b8 0f00 	cmp.w	r8, #0
 80184e2:	d00f      	beq.n	8018504 <iNemo_update_6X.constprop.34+0x30c>
 80184e4:	f8da 2000 	ldr.w	r2, [sl]
 80184e8:	f8da 3004 	ldr.w	r3, [sl, #4]
 80184ec:	f8c8 2000 	str.w	r2, [r8]
 80184f0:	f8c8 3004 	str.w	r3, [r8, #4]
 80184f4:	f8da 2008 	ldr.w	r2, [sl, #8]
 80184f8:	f8da 300c 	ldr.w	r3, [sl, #12]
 80184fc:	f8c8 2008 	str.w	r2, [r8, #8]
 8018500:	f8c8 300c 	str.w	r3, [r8, #12]
 8018504:	4b28      	ldr	r3, [pc, #160]	; (80185a8 <iNemo_update_6X.constprop.34+0x3b0>)
 8018506:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 801850a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 801850e:	f894 2afa 	ldrb.w	r2, [r4, #2810]	; 0xafa
 8018512:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8018516:	f8c3 10fc 	str.w	r1, [r3, #252]	; 0xfc
 801851a:	2a01      	cmp	r2, #1
 801851c:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8018520:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
 8018524:	d119      	bne.n	801855a <iNemo_update_6X.constprop.34+0x362>
 8018526:	f8da 2004 	ldr.w	r2, [sl, #4]
 801852a:	f8da 6000 	ldr.w	r6, [sl]
 801852e:	f8da 0008 	ldr.w	r0, [sl, #8]
 8018532:	f8da 100c 	ldr.w	r1, [sl, #12]
 8018536:	67ea      	str	r2, [r5, #124]	; 0x7c
 8018538:	f8c5 208c 	str.w	r2, [r5, #140]	; 0x8c
 801853c:	2200      	movs	r2, #0
 801853e:	67ae      	str	r6, [r5, #120]	; 0x78
 8018540:	f8c5 6088 	str.w	r6, [r5, #136]	; 0x88
 8018544:	f8c5 0080 	str.w	r0, [r5, #128]	; 0x80
 8018548:	f8c5 0090 	str.w	r0, [r5, #144]	; 0x90
 801854c:	f8c5 1084 	str.w	r1, [r5, #132]	; 0x84
 8018550:	f8c5 1094 	str.w	r1, [r5, #148]	; 0x94
 8018554:	f884 29e8 	strb.w	r2, [r4, #2536]	; 0x9e8
 8018558:	733a      	strb	r2, [r7, #12]
 801855a:	eddf 7a14 	vldr	s15, [pc, #80]	; 80185ac <iNemo_update_6X.constprop.34+0x3b4>
 801855e:	ed99 6a00 	vldr	s12, [r9]
 8018562:	edd9 6a01 	vldr	s13, [r9, #4]
 8018566:	ed99 7a02 	vldr	s14, [r9, #8]
 801856a:	f894 2af9 	ldrb.w	r2, [r4, #2809]	; 0xaf9
 801856e:	ee26 5a27 	vmul.f32	s10, s12, s15
 8018572:	ee66 5aa7 	vmul.f32	s11, s13, s15
 8018576:	ee67 7a27 	vmul.f32	s15, s14, s15
 801857a:	ed85 5a1b 	vstr	s10, [r5, #108]	; 0x6c
 801857e:	edc5 5a1c 	vstr	s11, [r5, #112]	; 0x70
 8018582:	edc5 7a1d 	vstr	s15, [r5, #116]	; 0x74
 8018586:	b1e2      	cbz	r2, 80185c2 <iNemo_update_6X.constprop.34+0x3ca>
 8018588:	f894 2b08 	ldrb.w	r2, [r4, #2824]	; 0xb08
 801858c:	2a09      	cmp	r2, #9
 801858e:	d825      	bhi.n	80185dc <iNemo_update_6X.constprop.34+0x3e4>
 8018590:	3201      	adds	r2, #1
 8018592:	f884 2b08 	strb.w	r2, [r4, #2824]	; 0xb08
 8018596:	e016      	b.n	80185c6 <iNemo_update_6X.constprop.34+0x3ce>
 8018598:	200013c8 	.word	0x200013c8
 801859c:	20000000 	.word	0x20000000
 80185a0:	20001c94 	.word	0x20001c94
 80185a4:	20000010 	.word	0x20000010
 80185a8:	20001dc8 	.word	0x20001dc8
 80185ac:	42652ee1 	.word	0x42652ee1
 80185b0:	bf3504f3 	.word	0xbf3504f3
 80185b4:	3f3504f3 	.word	0x3f3504f3
 80185b8:	f8df a030 	ldr.w	sl, [pc, #48]	; 80185ec <iNemo_update_6X.constprop.34+0x3f4>
 80185bc:	f8df b030 	ldr.w	fp, [pc, #48]	; 80185f0 <iNemo_update_6X.constprop.34+0x3f8>
 80185c0:	e6f3      	b.n	80183aa <iNemo_update_6X.constprop.34+0x1b2>
 80185c2:	f884 2b08 	strb.w	r2, [r4, #2824]	; 0xb08
 80185c6:	f894 39fc 	ldrb.w	r3, [r4, #2556]	; 0x9fc
 80185ca:	f083 0302 	eor.w	r3, r3, #2
 80185ce:	f884 39fc 	strb.w	r3, [r4, #2556]	; 0x9fc
 80185d2:	b065      	add	sp, #404	; 0x194
 80185d4:	ecbd 8b08 	vpop	{d8-d11}
 80185d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80185dc:	ed83 6a22 	vstr	s12, [r3, #136]	; 0x88
 80185e0:	edc3 6a23 	vstr	s13, [r3, #140]	; 0x8c
 80185e4:	ed83 7a24 	vstr	s14, [r3, #144]	; 0x90
 80185e8:	e7ed      	b.n	80185c6 <iNemo_update_6X.constprop.34+0x3ce>
 80185ea:	bf00      	nop
 80185ec:	bf333333 	.word	0xbf333333
 80185f0:	3f333333 	.word	0x3f333333

080185f4 <iNemo_update.constprop.35>:
 80185f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80185f8:	4cf0      	ldr	r4, [pc, #960]	; (80189bc <iNemo_update.constprop.35+0x3c8>)
 80185fa:	f994 3418 	ldrsb.w	r3, [r4, #1048]	; 0x418
 80185fe:	f994 2437 	ldrsb.w	r2, [r4, #1079]	; 0x437
 8018602:	f994 a41a 	ldrsb.w	sl, [r4, #1050]	; 0x41a
 8018606:	f994 7420 	ldrsb.w	r7, [r4, #1056]	; 0x420
 801860a:	f994 9436 	ldrsb.w	r9, [r4, #1078]	; 0x436
 801860e:	f994 6438 	ldrsb.w	r6, [r4, #1080]	; 0x438
 8018612:	f994 1426 	ldrsb.w	r1, [r4, #1062]	; 0x426
 8018616:	f994 e424 	ldrsb.w	lr, [r4, #1060]	; 0x424
 801861a:	f994 c427 	ldrsb.w	ip, [r4, #1063]	; 0x427
 801861e:	ed2d 8b0c 	vpush	{d8-d13}
 8018622:	ee0c 3a10 	vmov	s24, r3
 8018626:	f994 3419 	ldrsb.w	r3, [r4, #1049]	; 0x419
 801862a:	ee07 3a90 	vmov	s15, r3
 801862e:	f994 341b 	ldrsb.w	r3, [r4, #1051]	; 0x41b
 8018632:	ee0b 3a90 	vmov	s23, r3
 8018636:	f994 341c 	ldrsb.w	r3, [r4, #1052]	; 0x41c
 801863a:	ee06 3a10 	vmov	s12, r3
 801863e:	f994 341d 	ldrsb.w	r3, [r4, #1053]	; 0x41d
 8018642:	ee00 3a90 	vmov	s1, r3
 8018646:	f994 341f 	ldrsb.w	r3, [r4, #1055]	; 0x41f
 801864a:	ee0c 3a90 	vmov	s25, r3
 801864e:	f994 341e 	ldrsb.w	r3, [r4, #1054]	; 0x41e
 8018652:	b0e7      	sub	sp, #412	; 0x19c
 8018654:	ee01 3a90 	vmov	s3, r3
 8018658:	f994 3425 	ldrsb.w	r3, [r4, #1061]	; 0x425
 801865c:	f10d 0860 	add.w	r8, sp, #96	; 0x60
 8018660:	ee08 3a10 	vmov	s16, r3
 8018664:	2300      	movs	r3, #0
 8018666:	e9c8 3300 	strd	r3, r3, [r8]
 801866a:	f8c8 3008 	str.w	r3, [r8, #8]
 801866e:	f994 3428 	ldrsb.w	r3, [r4, #1064]	; 0x428
 8018672:	ee08 3a90 	vmov	s17, r3
 8018676:	f994 3429 	ldrsb.w	r3, [r4, #1065]	; 0x429
 801867a:	f604 350c 	addw	r5, r4, #2828	; 0xb0c
 801867e:	edd5 2a09 	vldr	s5, [r5, #36]	; 0x24
 8018682:	ed95 3a03 	vldr	s6, [r5, #12]
 8018686:	ed95 1a06 	vldr	s2, [r5, #24]
 801868a:	ed95 aa07 	vldr	s20, [r5, #28]
 801868e:	edd5 3a08 	vldr	s7, [r5, #32]
 8018692:	edd5 9a0a 	vldr	s19, [r5, #40]	; 0x28
 8018696:	ed95 4a0b 	vldr	s8, [r5, #44]	; 0x2c
 801869a:	ed95 9a04 	vldr	s18, [r5, #16]
 801869e:	edd5 4a05 	vldr	s9, [r5, #20]
 80186a2:	ee06 3a90 	vmov	s13, r3
 80186a6:	f994 342b 	ldrsb.w	r3, [r4, #1067]	; 0x42b
 80186aa:	ee05 3a10 	vmov	s10, r3
 80186ae:	f994 342a 	ldrsb.w	r3, [r4, #1066]	; 0x42a
 80186b2:	ee0a 3a90 	vmov	s21, r3
 80186b6:	f994 342c 	ldrsb.w	r3, [r4, #1068]	; 0x42c
 80186ba:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 80186be:	ee02 3a10 	vmov	s4, r3
 80186c2:	f994 3434 	ldrsb.w	r3, [r4, #1076]	; 0x434
 80186c6:	eef8 aaea 	vcvt.f32.s32	s21, s21
 80186ca:	ee05 3a90 	vmov	s11, r3
 80186ce:	ee25 5a09 	vmul.f32	s10, s10, s18
 80186d2:	f994 3431 	ldrsb.w	r3, [r4, #1073]	; 0x431
 80186d6:	eea3 5a2a 	vfma.f32	s10, s6, s21
 80186da:	4683      	mov	fp, r0
 80186dc:	f994 0430 	ldrsb.w	r0, [r4, #1072]	; 0x430
 80186e0:	ee07 3a10 	vmov	s14, r3
 80186e4:	ee0a 0a90 	vmov	s21, r0
 80186e8:	f994 3433 	ldrsb.w	r3, [r4, #1075]	; 0x433
 80186ec:	48b4      	ldr	r0, [pc, #720]	; (80189c0 <iNemo_update.constprop.35+0x3cc>)
 80186ee:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 80186f2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80186f6:	eea4 5a82 	vfma.f32	s10, s9, s4
 80186fa:	f890 08e0 	ldrb.w	r0, [r0, #2272]	; 0x8e0
 80186fe:	9017      	str	r0, [sp, #92]	; 0x5c
 8018700:	ee0b 3a10 	vmov	s22, r3
 8018704:	ee27 7a29 	vmul.f32	s14, s14, s19
 8018708:	eef8 aaea 	vcvt.f32.s32	s21, s21
 801870c:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8018710:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8018714:	eeaa 7aa2 	vfma.f32	s14, s21, s5
 8018718:	f994 3432 	ldrsb.w	r3, [r4, #1074]	; 0x432
 801871c:	ee0a 2a90 	vmov	s21, r2
 8018720:	ee26 6a0a 	vmul.f32	s12, s12, s20
 8018724:	eef8 baeb 	vcvt.f32.s32	s23, s23
 8018728:	ee65 5aa9 	vmul.f32	s11, s11, s19
 801872c:	eeb8 bacb 	vcvt.f32.s32	s22, s22
 8018730:	eea1 6a2b 	vfma.f32	s12, s2, s23
 8018734:	f994 2435 	ldrsb.w	r2, [r4, #1077]	; 0x435
 8018738:	eee2 5a8b 	vfma.f32	s11, s5, s22
 801873c:	eef8 baec 	vcvt.f32.s32	s23, s25
 8018740:	eeb8 baea 	vcvt.f32.s32	s22, s21
 8018744:	eef0 ca45 	vmov.f32	s25, s10
 8018748:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801874c:	ee05 9a10 	vmov	s10, r9
 8018750:	ee67 7a8a 	vmul.f32	s15, s15, s20
 8018754:	ee6b 9a29 	vmul.f32	s19, s22, s19
 8018758:	ee2b aa8a 	vmul.f32	s20, s23, s20
 801875c:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8018760:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8018764:	eea1 aa21 	vfma.f32	s20, s2, s3
 8018768:	eee2 9a85 	vfma.f32	s19, s5, s10
 801876c:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 8018770:	ee01 2a90 	vmov	s3, r2
 8018774:	ee05 ca10 	vmov	s10, ip
 8018778:	eeb8 cacc 	vcvt.f32.s32	s24, s24
 801877c:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8018780:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8018784:	ee68 8a89 	vmul.f32	s17, s17, s18
 8018788:	eeec 7a01 	vfma.f32	s15, s24, s2
 801878c:	eee3 8a05 	vfma.f32	s17, s6, s10
 8018790:	eee4 5a21 	vfma.f32	s11, s8, s3
 8018794:	ee05 7a10 	vmov	s10, r7
 8018798:	ee0a aa90 	vmov	s21, sl
 801879c:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 80187a0:	ee01 3a90 	vmov	s3, r3
 80187a4:	ee02 ea10 	vmov	s4, lr
 80187a8:	eef8 aaea 	vcvt.f32.s32	s21, s21
 80187ac:	eef8 2ac5 	vcvt.f32.s32	s5, s10
 80187b0:	ee28 8a09 	vmul.f32	s16, s16, s18
 80187b4:	ee05 6a10 	vmov	s10, r6
 80187b8:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 80187bc:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 80187c0:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 80187c4:	eeea 7aa3 	vfma.f32	s15, s21, s7
 80187c8:	eea2 8a03 	vfma.f32	s16, s4, s6
 80187cc:	eea3 6aa0 	vfma.f32	s12, s7, s1
 80187d0:	eeb8 3ac5 	vcvt.f32.s32	s6, s10
 80187d4:	eea1 7a84 	vfma.f32	s14, s3, s8
 80187d8:	ee05 1a10 	vmov	s10, r1
 80187dc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80187e0:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 80187e4:	eef0 da40 	vmov.f32	s27, s0
 80187e8:	eea3 aaa2 	vfma.f32	s20, s7, s5
 80187ec:	eeb1 ba65 	vneg.f32	s22, s11
 80187f0:	eef1 aa47 	vneg.f32	s21, s14
 80187f4:	eee4 9a03 	vfma.f32	s19, s8, s6
 80187f8:	eea5 8a24 	vfma.f32	s16, s10, s9
 80187fc:	eee4 8aa6 	vfma.f32	s17, s9, s13
 8018800:	eeb1 ca46 	vneg.f32	s24, s12
 8018804:	eef1 ba67 	vneg.f32	s23, s15
 8018808:	eeb1 da6c 	vneg.f32	s26, s25
 801880c:	b388      	cbz	r0, 8018872 <iNemo_update.constprop.35+0x27e>
 801880e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8018812:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8018816:	eee6 7a06 	vfma.f32	s15, s12, s12
 801881a:	eeea 7a0a 	vfma.f32	s15, s20, s20
 801881e:	ee17 0a90 	vmov	r0, s15
 8018822:	f7e7 fe99 	bl	8000558 <__aeabi_f2d>
 8018826:	f002 ff35 	bl	801b694 <sqrt>
 801882a:	f7e8 f9c5 	bl	8000bb8 <__aeabi_d2f>
 801882e:	ee07 0a90 	vmov	s15, r0
 8018832:	eec9 7a27 	vdiv.f32	s15, s18, s15
 8018836:	ee28 7a08 	vmul.f32	s14, s16, s16
 801883a:	ee2c ca27 	vmul.f32	s24, s24, s15
 801883e:	eea8 7aa8 	vfma.f32	s14, s17, s17
 8018842:	ee6b baa7 	vmul.f32	s23, s23, s15
 8018846:	eeac 7aac 	vfma.f32	s14, s25, s25
 801884a:	ee2a aa27 	vmul.f32	s20, s20, s15
 801884e:	ee17 0a10 	vmov	r0, s14
 8018852:	f7e7 fe81 	bl	8000558 <__aeabi_f2d>
 8018856:	f002 ff1d 	bl	801b694 <sqrt>
 801885a:	f7e8 f9ad 	bl	8000bb8 <__aeabi_d2f>
 801885e:	ee07 0a90 	vmov	s15, r0
 8018862:	eec9 7a27 	vdiv.f32	s15, s18, s15
 8018866:	ee68 8aa7 	vmul.f32	s17, s17, s15
 801886a:	ee28 8a27 	vmul.f32	s16, s16, s15
 801886e:	ee2d da27 	vmul.f32	s26, s26, s15
 8018872:	f894 3c3c 	ldrb.w	r3, [r4, #3132]	; 0xc3c
 8018876:	f894 2c3d 	ldrb.w	r2, [r4, #3133]	; 0xc3d
 801887a:	4e52      	ldr	r6, [pc, #328]	; (80189c4 <iNemo_update.constprop.35+0x3d0>)
 801887c:	4f52      	ldr	r7, [pc, #328]	; (80189c8 <iNemo_update.constprop.35+0x3d4>)
 801887e:	f8d5 c084 	ldr.w	ip, [r5, #132]	; 0x84
 8018882:	f8d5 907c 	ldr.w	r9, [r5, #124]	; 0x7c
 8018886:	f8d5 e080 	ldr.w	lr, [r5, #128]	; 0x80
 801888a:	f8c5 c094 	str.w	ip, [r5, #148]	; 0x94
 801888e:	ee09 2a10 	vmov	s18, r2
 8018892:	f043 0302 	orr.w	r3, r3, #2
 8018896:	6faa      	ldr	r2, [r5, #120]	; 0x78
 8018898:	f8c5 2088 	str.w	r2, [r5, #136]	; 0x88
 801889c:	f083 0301 	eor.w	r3, r3, #1
 80188a0:	22f8      	movs	r2, #248	; 0xf8
 80188a2:	f5a6 719a 	sub.w	r1, r6, #308	; 0x134
 80188a6:	a828      	add	r0, sp, #160	; 0xa0
 80188a8:	f884 3c3c 	strb.w	r3, [r4, #3132]	; 0xc3c
 80188ac:	f8c5 908c 	str.w	r9, [r5, #140]	; 0x8c
 80188b0:	f8c5 e090 	str.w	lr, [r5, #144]	; 0x90
 80188b4:	f001 fd9c 	bl	801a3f0 <memcpy>
 80188b8:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80188bc:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 80188c0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80188c4:	eddf 7a41 	vldr	s15, [pc, #260]	; 80189cc <iNemo_update.constprop.35+0x3d8>
 80188c8:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
 80188cc:	9715      	str	r7, [sp, #84]	; 0x54
 80188ce:	f106 0efa 	add.w	lr, r6, #250	; 0xfa
 80188d2:	64f0      	str	r0, [r6, #76]	; 0x4c
 80188d4:	6531      	str	r1, [r6, #80]	; 0x50
 80188d6:	6572      	str	r2, [r6, #84]	; 0x54
 80188d8:	f106 03f9 	add.w	r3, r6, #249	; 0xf9
 80188dc:	aa1f      	add	r2, sp, #124	; 0x7c
 80188de:	f106 00f8 	add.w	r0, r6, #248	; 0xf8
 80188e2:	f1a6 016c 	sub.w	r1, r6, #108	; 0x6c
 80188e6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
 80188ea:	edcd ba2f 	vstr	s23, [sp, #188]	; 0xbc
 80188ee:	ed8d aa30 	vstr	s20, [sp, #192]	; 0xc0
 80188f2:	ed56 ba03 	vldr	s23, [r6, #-12]
 80188f6:	ed16 aa0c 	vldr	s20, [r6, #-48]	; 0xffffffd0
 80188fa:	edcd 8a2b 	vstr	s17, [sp, #172]	; 0xac
 80188fe:	ed8d 8a2c 	vstr	s16, [sp, #176]	; 0xb0
 8018902:	ed56 8a0e 	vldr	s17, [r6, #-56]	; 0xffffffc8
 8018906:	ed16 8a0f 	vldr	s16, [r6, #-60]	; 0xffffffc4
 801890a:	ed8d ba31 	vstr	s22, [sp, #196]	; 0xc4
 801890e:	edcd aa32 	vstr	s21, [sp, #200]	; 0xc8
 8018912:	ed16 ba04 	vldr	s22, [r6, #-16]
 8018916:	ed56 aa05 	vldr	s21, [r6, #-20]	; 0xffffffec
 801891a:	edcd 9a33 	vstr	s19, [sp, #204]	; 0xcc
 801891e:	ed8d ca2e 	vstr	s24, [sp, #184]	; 0xb8
 8018922:	ed56 9a0d 	vldr	s19, [r6, #-52]	; 0xffffffcc
 8018926:	ed8d da2d 	vstr	s26, [sp, #180]	; 0xb4
 801892a:	f8cd e050 	str.w	lr, [sp, #80]	; 0x50
 801892e:	e9cd 0312 	strd	r0, r3, [sp, #72]	; 0x48
 8018932:	910f      	str	r1, [sp, #60]	; 0x3c
 8018934:	edc5 7a0c 	vstr	s15, [r5, #48]	; 0x30
 8018938:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801893c:	edc5 7a0e 	vstr	s15, [r5, #56]	; 0x38
 8018940:	9210      	str	r2, [sp, #64]	; 0x40
 8018942:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8018946:	f856 0c1c 	ldr.w	r0, [r6, #-28]
 801894a:	f7e7 fe05 	bl	8000558 <__aeabi_f2d>
 801894e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8018952:	f894 0c1e 	ldrb.w	r0, [r4, #3102]	; 0xc1e
 8018956:	f7e7 fddd 	bl	8000514 <__aeabi_ui2d>
 801895a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801895e:	f894 3c1c 	ldrb.w	r3, [r4, #3100]	; 0xc1c
 8018962:	f894 cc1b 	ldrb.w	ip, [r4, #3099]	; 0xc1b
 8018966:	f894 2c1a 	ldrb.w	r2, [r4, #3098]	; 0xc1a
 801896a:	9308      	str	r3, [sp, #32]
 801896c:	f894 1c19 	ldrb.w	r1, [r4, #3097]	; 0xc19
 8018970:	f894 3c18 	ldrb.w	r3, [r4, #3096]	; 0xc18
 8018974:	f856 0c2c 	ldr.w	r0, [r6, #-44]
 8018978:	eeb8 9a49 	vcvt.f32.u32	s18, s18
 801897c:	e9cd 2c06 	strd	r2, ip, [sp, #24]
 8018980:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8018984:	f7e7 fde8 	bl	8000558 <__aeabi_f2d>
 8018988:	ee29 9a2d 	vmul.f32	s18, s18, s27
 801898c:	f50d 7e86 	add.w	lr, sp, #268	; 0x10c
 8018990:	f10d 0cdc 	add.w	ip, sp, #220	; 0xdc
 8018994:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018998:	eef0 3a6b 	vmov.f32	s7, s23
 801899c:	eeb0 3a4b 	vmov.f32	s6, s22
 80189a0:	eef0 2a6a 	vmov.f32	s5, s21
 80189a4:	eeb0 2a4a 	vmov.f32	s4, s20
 80189a8:	eef0 1a69 	vmov.f32	s3, s19
 80189ac:	eeb0 1a68 	vmov.f32	s2, s17
 80189b0:	eef0 0a48 	vmov.f32	s1, s16
 80189b4:	eeb0 0a49 	vmov.f32	s0, s18
 80189b8:	ab34      	add	r3, sp, #208	; 0xd0
 80189ba:	e009      	b.n	80189d0 <iNemo_update.constprop.35+0x3dc>
 80189bc:	200013c8 	.word	0x200013c8
 80189c0:	20000000 	.word	0x20000000
 80189c4:	20002008 	.word	0x20002008
 80189c8:	200008e8 	.word	0x200008e8
 80189cc:	00000000 	.word	0x00000000
 80189d0:	aa2e      	add	r2, sp, #184	; 0xb8
 80189d2:	a92b      	add	r1, sp, #172	; 0xac
 80189d4:	a84a      	add	r0, sp, #296	; 0x128
 80189d6:	e9cd ce00 	strd	ip, lr, [sp]
 80189da:	f7ff fa1b 	bl	8017e14 <SpacePointAlgorithm.isra.7>
 80189de:	f1bb 0f00 	cmp.w	fp, #0
 80189e2:	d00f      	beq.n	8018a04 <iNemo_update.constprop.35+0x410>
 80189e4:	f8d9 2000 	ldr.w	r2, [r9]
 80189e8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80189ec:	f8cb 2000 	str.w	r2, [fp]
 80189f0:	f8cb 3004 	str.w	r3, [fp, #4]
 80189f4:	f8d9 2008 	ldr.w	r2, [r9, #8]
 80189f8:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80189fc:	f8cb 2008 	str.w	r2, [fp, #8]
 8018a00:	f8cb 300c 	str.w	r3, [fp, #12]
 8018a04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8018a08:	f8c6 3100 	str.w	r3, [r6, #256]	; 0x100
 8018a0c:	f894 3d3a 	ldrb.w	r3, [r4, #3386]	; 0xd3a
 8018a10:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8018a14:	f8c6 20fc 	str.w	r2, [r6, #252]	; 0xfc
 8018a18:	2b01      	cmp	r3, #1
 8018a1a:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8018a1e:	f8c6 2104 	str.w	r2, [r6, #260]	; 0x104
 8018a22:	d055      	beq.n	8018ad0 <iNemo_update.constprop.35+0x4dc>
 8018a24:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018a26:	f103 3aff 	add.w	sl, r3, #4294967295
 8018a2a:	fa5f fa8a 	uxtb.w	sl, sl
 8018a2e:	f1ba 0f08 	cmp.w	sl, #8
 8018a32:	bf9c      	itt	ls
 8018a34:	4b35      	ldrls	r3, [pc, #212]	; (8018b0c <iNemo_update.constprop.35+0x518>)
 8018a36:	f883 a8e0 	strbls.w	sl, [r3, #2272]	; 0x8e0
 8018a3a:	eddf 7a35 	vldr	s15, [pc, #212]	; 8018b10 <iNemo_update.constprop.35+0x51c>
 8018a3e:	ed98 6a00 	vldr	s12, [r8]
 8018a42:	edd8 6a01 	vldr	s13, [r8, #4]
 8018a46:	ed98 7a02 	vldr	s14, [r8, #8]
 8018a4a:	f894 3d39 	ldrb.w	r3, [r4, #3385]	; 0xd39
 8018a4e:	ee26 5a27 	vmul.f32	s10, s12, s15
 8018a52:	ee66 5aa7 	vmul.f32	s11, s13, s15
 8018a56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018a5a:	ed85 5a1b 	vstr	s10, [r5, #108]	; 0x6c
 8018a5e:	edc5 5a1c 	vstr	s11, [r5, #112]	; 0x70
 8018a62:	edc5 7a1d 	vstr	s15, [r5, #116]	; 0x74
 8018a66:	b13b      	cbz	r3, 8018a78 <iNemo_update.constprop.35+0x484>
 8018a68:	f894 3d48 	ldrb.w	r3, [r4, #3400]	; 0xd48
 8018a6c:	2b09      	cmp	r3, #9
 8018a6e:	d828      	bhi.n	8018ac2 <iNemo_update.constprop.35+0x4ce>
 8018a70:	3301      	adds	r3, #1
 8018a72:	f884 3d48 	strb.w	r3, [r4, #3400]	; 0xd48
 8018a76:	e001      	b.n	8018a7c <iNemo_update.constprop.35+0x488>
 8018a78:	f884 3d48 	strb.w	r3, [r4, #3400]	; 0xd48
 8018a7c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8018a80:	f894 3c3c 	ldrb.w	r3, [r4, #3132]	; 0xc3c
 8018a84:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8018a88:	f8c6 20ac 	str.w	r2, [r6, #172]	; 0xac
 8018a8c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8018a90:	f8c6 10b0 	str.w	r1, [r6, #176]	; 0xb0
 8018a94:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8018a98:	f8c6 20b4 	str.w	r2, [r6, #180]	; 0xb4
 8018a9c:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8018aa0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8018aa4:	f8c6 00c4 	str.w	r0, [r6, #196]	; 0xc4
 8018aa8:	f083 0302 	eor.w	r3, r3, #2
 8018aac:	f884 3c3c 	strb.w	r3, [r4, #3132]	; 0xc3c
 8018ab0:	f8c6 10c8 	str.w	r1, [r6, #200]	; 0xc8
 8018ab4:	f8c6 20cc 	str.w	r2, [r6, #204]	; 0xcc
 8018ab8:	b067      	add	sp, #412	; 0x19c
 8018aba:	ecbd 8b0c 	vpop	{d8-d13}
 8018abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ac2:	ed86 6a22 	vstr	s12, [r6, #136]	; 0x88
 8018ac6:	edc6 6a23 	vstr	s13, [r6, #140]	; 0x8c
 8018aca:	ed86 7a24 	vstr	s14, [r6, #144]	; 0x90
 8018ace:	e7d5      	b.n	8018a7c <iNemo_update.constprop.35+0x488>
 8018ad0:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8018ad4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8018ad8:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
 8018adc:	f8c5 2094 	str.w	r2, [r5, #148]	; 0x94
 8018ae0:	4a0a      	ldr	r2, [pc, #40]	; (8018b0c <iNemo_update.constprop.35+0x518>)
 8018ae2:	f8d9 0000 	ldr.w	r0, [r9]
 8018ae6:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8018aea:	67eb      	str	r3, [r5, #124]	; 0x7c
 8018aec:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
 8018af0:	2300      	movs	r3, #0
 8018af2:	67a8      	str	r0, [r5, #120]	; 0x78
 8018af4:	f8c5 0088 	str.w	r0, [r5, #136]	; 0x88
 8018af8:	f8c5 1080 	str.w	r1, [r5, #128]	; 0x80
 8018afc:	f8c5 1090 	str.w	r1, [r5, #144]	; 0x90
 8018b00:	f884 3c28 	strb.w	r3, [r4, #3112]	; 0xc28
 8018b04:	f882 38e0 	strb.w	r3, [r2, #2272]	; 0x8e0
 8018b08:	e797      	b.n	8018a3a <iNemo_update.constprop.35+0x446>
 8018b0a:	bf00      	nop
 8018b0c:	20000000 	.word	0x20000000
 8018b10:	42652ee1 	.word	0x42652ee1
 8018b14:	00000000 	.word	0x00000000

08018b18 <MotionFX_initialize>:
 8018b18:	4a11      	ldr	r2, [pc, #68]	; (8018b60 <MotionFX_initialize+0x48>)
 8018b1a:	4912      	ldr	r1, [pc, #72]	; (8018b64 <MotionFX_initialize+0x4c>)
 8018b1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b20:	6813      	ldr	r3, [r2, #0]
 8018b22:	f023 0301 	bic.w	r3, r3, #1
 8018b26:	6013      	str	r3, [r2, #0]
 8018b28:	680b      	ldr	r3, [r1, #0]
 8018b2a:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8018b2e:	4013      	ands	r3, r2
 8018b30:	f24c 2040 	movw	r0, #49728	; 0xc240
 8018b34:	4283      	cmp	r3, r0
 8018b36:	d01f      	beq.n	8018b78 <MotionFX_initialize+0x60>
 8018b38:	680b      	ldr	r3, [r1, #0]
 8018b3a:	f24c 2170 	movw	r1, #49776	; 0xc270
 8018b3e:	4013      	ands	r3, r2
 8018b40:	428b      	cmp	r3, r1
 8018b42:	d019      	beq.n	8018b78 <MotionFX_initialize+0x60>
 8018b44:	4b08      	ldr	r3, [pc, #32]	; (8018b68 <MotionFX_initialize+0x50>)
 8018b46:	2201      	movs	r2, #1
 8018b48:	601a      	str	r2, [r3, #0]
 8018b4a:	681a      	ldr	r2, [r3, #0]
 8018b4c:	2a00      	cmp	r2, #0
 8018b4e:	d1fc      	bne.n	8018b4a <MotionFX_initialize+0x32>
 8018b50:	4b06      	ldr	r3, [pc, #24]	; (8018b6c <MotionFX_initialize+0x54>)
 8018b52:	4a07      	ldr	r2, [pc, #28]	; (8018b70 <MotionFX_initialize+0x58>)
 8018b54:	601a      	str	r2, [r3, #0]
 8018b56:	681a      	ldr	r2, [r3, #0]
 8018b58:	4b06      	ldr	r3, [pc, #24]	; (8018b74 <MotionFX_initialize+0x5c>)
 8018b5a:	429a      	cmp	r2, r3
 8018b5c:	d02b      	beq.n	8018bb6 <MotionFX_initialize+0x9e>
 8018b5e:	e7fe      	b.n	8018b5e <MotionFX_initialize+0x46>
 8018b60:	e0002000 	.word	0xe0002000
 8018b64:	e000ed00 	.word	0xe000ed00
 8018b68:	40023008 	.word	0x40023008
 8018b6c:	40023000 	.word	0x40023000
 8018b70:	f407a5c2 	.word	0xf407a5c2
 8018b74:	b5e8b5cd 	.word	0xb5e8b5cd
 8018b78:	4beb      	ldr	r3, [pc, #940]	; (8018f28 <MotionFX_initialize+0x410>)
 8018b7a:	681b      	ldr	r3, [r3, #0]
 8018b7c:	2b00      	cmp	r3, #0
 8018b7e:	d1e1      	bne.n	8018b44 <MotionFX_initialize+0x2c>
 8018b80:	4aea      	ldr	r2, [pc, #936]	; (8018f2c <MotionFX_initialize+0x414>)
 8018b82:	6813      	ldr	r3, [r2, #0]
 8018b84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8018b88:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8018b8c:	d006      	beq.n	8018b9c <MotionFX_initialize+0x84>
 8018b8e:	6813      	ldr	r3, [r2, #0]
 8018b90:	f240 4283 	movw	r2, #1155	; 0x483
 8018b94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8018b98:	4293      	cmp	r3, r2
 8018b9a:	d1d3      	bne.n	8018b44 <MotionFX_initialize+0x2c>
 8018b9c:	4be4      	ldr	r3, [pc, #912]	; (8018f30 <MotionFX_initialize+0x418>)
 8018b9e:	2201      	movs	r2, #1
 8018ba0:	601a      	str	r2, [r3, #0]
 8018ba2:	681a      	ldr	r2, [r3, #0]
 8018ba4:	2a00      	cmp	r2, #0
 8018ba6:	d1fc      	bne.n	8018ba2 <MotionFX_initialize+0x8a>
 8018ba8:	4be2      	ldr	r3, [pc, #904]	; (8018f34 <MotionFX_initialize+0x41c>)
 8018baa:	4ae3      	ldr	r2, [pc, #908]	; (8018f38 <MotionFX_initialize+0x420>)
 8018bac:	601a      	str	r2, [r3, #0]
 8018bae:	681a      	ldr	r2, [r3, #0]
 8018bb0:	4be2      	ldr	r3, [pc, #904]	; (8018f3c <MotionFX_initialize+0x424>)
 8018bb2:	429a      	cmp	r2, r3
 8018bb4:	d1d3      	bne.n	8018b5e <MotionFX_initialize+0x46>
 8018bb6:	4ce2      	ldr	r4, [pc, #904]	; (8018f40 <MotionFX_initialize+0x428>)
 8018bb8:	eddf 7ae2 	vldr	s15, [pc, #904]	; 8018f44 <MotionFX_initialize+0x42c>
 8018bbc:	4ee2      	ldr	r6, [pc, #904]	; (8018f48 <MotionFX_initialize+0x430>)
 8018bbe:	eddf 6ae3 	vldr	s13, [pc, #908]	; 8018f4c <MotionFX_initialize+0x434>
 8018bc2:	2500      	movs	r5, #0
 8018bc4:	f04f 0901 	mov.w	r9, #1
 8018bc8:	ed9f 5bcd 	vldr	d5, [pc, #820]	; 8018f00 <MotionFX_initialize+0x3e8>
 8018bcc:	ed9f 1bce 	vldr	d1, [pc, #824]	; 8018f08 <MotionFX_initialize+0x3f0>
 8018bd0:	ed9f 2bcf 	vldr	d2, [pc, #828]	; 8018f10 <MotionFX_initialize+0x3f8>
 8018bd4:	ed9f 3bd0 	vldr	d3, [pc, #832]	; 8018f18 <MotionFX_initialize+0x400>
 8018bd8:	f20f 3b44 	addw	fp, pc, #836	; 0x344
 8018bdc:	e9db ab00 	ldrd	sl, fp, [fp]
 8018be0:	f241 17b6 	movw	r7, #4534	; 0x11b6
 8018be4:	f884 9d49 	strb.w	r9, [r4, #3401]	; 0xd49
 8018be8:	f8c4 5d4c 	str.w	r5, [r4, #3404]	; 0xd4c
 8018bec:	f8c4 5d50 	str.w	r5, [r4, #3408]	; 0xd50
 8018bf0:	f7f7 fa4e 	bl	8010090 <rt_InitInfAndNaN.isra.3>
 8018bf4:	f241 10b4 	movw	r0, #4532	; 0x11b4
 8018bf8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8018bfc:	f606 08e8 	addw	r8, r6, #2280	; 0x8e8
 8018c00:	5235      	strh	r5, [r6, r0]
 8018c02:	55f5      	strb	r5, [r6, r7]
 8018c04:	200a      	movs	r0, #10
 8018c06:	ed88 5b02 	vstr	d5, [r8, #8]
 8018c0a:	ed88 1b04 	vstr	d1, [r8, #16]
 8018c0e:	ed88 2b06 	vstr	d2, [r8, #24]
 8018c12:	e9c8 ab08 	strd	sl, fp, [r8, #32]
 8018c16:	ed88 3b0a 	vstr	d3, [r8, #40]	; 0x28
 8018c1a:	ed88 7a82 	vstr	s14, [r8, #520]	; 0x208
 8018c1e:	f886 08e0 	strb.w	r0, [r6, #2272]	; 0x8e0
 8018c22:	edc8 7a83 	vstr	s15, [r8, #524]	; 0x20c
 8018c26:	edc8 7a84 	vstr	s15, [r8, #528]	; 0x210
 8018c2a:	f8c4 5418 	str.w	r5, [r4, #1048]	; 0x418
 8018c2e:	f8c4 5424 	str.w	r5, [r4, #1060]	; 0x424
 8018c32:	f8c4 5430 	str.w	r5, [r4, #1072]	; 0x430
 8018c36:	f8c4 541c 	str.w	r5, [r4, #1052]	; 0x41c
 8018c3a:	f884 5420 	strb.w	r5, [r4, #1056]	; 0x420
 8018c3e:	f8c4 5428 	str.w	r5, [r4, #1064]	; 0x428
 8018c42:	f884 542c 	strb.w	r5, [r4, #1068]	; 0x42c
 8018c46:	f8c4 5434 	str.w	r5, [r4, #1076]	; 0x434
 8018c4a:	f884 5438 	strb.w	r5, [r4, #1080]	; 0x438
 8018c4e:	f7f7 fa1f 	bl	8010090 <rt_InitInfAndNaN.isra.3>
 8018c52:	f604 330c 	addw	r3, r4, #2828	; 0xb0c
 8018c56:	ed86 5b06 	vstr	d5, [r6, #24]
 8018c5a:	eddf 4abd 	vldr	s9, [pc, #756]	; 8018f50 <MotionFX_initialize+0x438>
 8018c5e:	ed9f 5abd 	vldr	s10, [pc, #756]	; 8018f54 <MotionFX_initialize+0x43c>
 8018c62:	eddf 5abd 	vldr	s11, [pc, #756]	; 8018f58 <MotionFX_initialize+0x440>
 8018c66:	f8df c30c 	ldr.w	ip, [pc, #780]	; 8018f74 <MotionFX_initialize+0x45c>
 8018c6a:	48bc      	ldr	r0, [pc, #752]	; (8018f5c <MotionFX_initialize+0x444>)
 8018c6c:	49bc      	ldr	r1, [pc, #752]	; (8018f60 <MotionFX_initialize+0x448>)
 8018c6e:	4abd      	ldr	r2, [pc, #756]	; (8018f64 <MotionFX_initialize+0x44c>)
 8018c70:	ed86 7a86 	vstr	s14, [r6, #536]	; 0x218
 8018c74:	f604 0ecc 	addw	lr, r4, #2252	; 0x8cc
 8018c78:	f604 4704 	addw	r7, r4, #3076	; 0xc04
 8018c7c:	ed86 1b08 	vstr	d1, [r6, #32]
 8018c80:	ed86 2b0a 	vstr	d2, [r6, #40]	; 0x28
 8018c84:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 8018c88:	e9c6 ab0c 	strd	sl, fp, [r6, #48]	; 0x30
 8018c8c:	ed86 3b0e 	vstr	d3, [r6, #56]	; 0x38
 8018c90:	f04f 0a02 	mov.w	sl, #2
 8018c94:	ed83 7a21 	vstr	s14, [r3, #132]	; 0x84
 8018c98:	ed83 7a25 	vstr	s14, [r3, #148]	; 0x94
 8018c9c:	ed83 7a29 	vstr	s14, [r3, #164]	; 0xa4
 8018ca0:	edc6 7a87 	vstr	s15, [r6, #540]	; 0x21c
 8018ca4:	edc6 7a88 	vstr	s15, [r6, #544]	; 0x220
 8018ca8:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
 8018cac:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
 8018cb0:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
 8018cb4:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
 8018cb8:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
 8018cbc:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
 8018cc0:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
 8018cc4:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
 8018cc8:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
 8018ccc:	f8a6 58dc 	strh.w	r5, [r6, #2268]	; 0x8dc
 8018cd0:	f886 58de 	strb.w	r5, [r6, #2270]	; 0x8de
 8018cd4:	f886 900c 	strb.w	r9, [r6, #12]
 8018cd8:	f04f 3b01 	mov.w	fp, #16843009	; 0x1010101
 8018cdc:	f8c4 543c 	str.w	r5, [r4, #1084]	; 0x43c
 8018ce0:	f8c4 5448 	str.w	r5, [r4, #1096]	; 0x448
 8018ce4:	f8c4 5454 	str.w	r5, [r4, #1108]	; 0x454
 8018ce8:	f8c4 5440 	str.w	r5, [r4, #1088]	; 0x440
 8018cec:	f884 5444 	strb.w	r5, [r4, #1092]	; 0x444
 8018cf0:	f8c4 544c 	str.w	r5, [r4, #1100]	; 0x44c
 8018cf4:	f884 5450 	strb.w	r5, [r4, #1104]	; 0x450
 8018cf8:	f8c4 5458 	str.w	r5, [r4, #1112]	; 0x458
 8018cfc:	f884 545c 	strb.w	r5, [r4, #1116]	; 0x45c
 8018d00:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
 8018d04:	ed83 7a2d 	vstr	s14, [r3, #180]	; 0xb4
 8018d08:	ed83 7a31 	vstr	s14, [r3, #196]	; 0xc4
 8018d0c:	ed83 7a35 	vstr	s14, [r3, #212]	; 0xd4
 8018d10:	ed83 7a39 	vstr	s14, [r3, #228]	; 0xe4
 8018d14:	ed83 7a3d 	vstr	s14, [r3, #244]	; 0xf4
 8018d18:	ed83 7a0f 	vstr	s14, [r3, #60]	; 0x3c
 8018d1c:	ed83 7a13 	vstr	s14, [r3, #76]	; 0x4c
 8018d20:	ed83 7a17 	vstr	s14, [r3, #92]	; 0x5c
 8018d24:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
 8018d28:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
 8018d2c:	edc3 7a2e 	vstr	s15, [r3, #184]	; 0xb8
 8018d30:	edc3 7a2f 	vstr	s15, [r3, #188]	; 0xbc
 8018d34:	edc3 7a30 	vstr	s15, [r3, #192]	; 0xc0
 8018d38:	edc3 7a32 	vstr	s15, [r3, #200]	; 0xc8
 8018d3c:	edc3 7a33 	vstr	s15, [r3, #204]	; 0xcc
 8018d40:	edc3 7a34 	vstr	s15, [r3, #208]	; 0xd0
 8018d44:	edc3 7a36 	vstr	s15, [r3, #216]	; 0xd8
 8018d48:	edc3 7a37 	vstr	s15, [r3, #220]	; 0xdc
 8018d4c:	edc3 7a38 	vstr	s15, [r3, #224]	; 0xe0
 8018d50:	edc3 7a3a 	vstr	s15, [r3, #232]	; 0xe8
 8018d54:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
 8018d58:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
 8018d5c:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
 8018d60:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
 8018d64:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
 8018d68:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
 8018d6c:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
 8018d70:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
 8018d74:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
 8018d78:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
 8018d7c:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
 8018d80:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
 8018d84:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
 8018d88:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
 8018d8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8018d90:	f8c4 cc2c 	str.w	ip, [r4, #3116]	; 0xc2c
 8018d94:	f8c4 0c30 	str.w	r0, [r4, #3120]	; 0xc30
 8018d98:	f8c4 1c34 	str.w	r1, [r4, #3124]	; 0xc34
 8018d9c:	f8c4 2c38 	str.w	r2, [r4, #3128]	; 0xc38
 8018da0:	edc8 7a28 	vstr	s15, [r8, #160]	; 0xa0
 8018da4:	edc8 7a29 	vstr	s15, [r8, #164]	; 0xa4
 8018da8:	edc8 7a2a 	vstr	s15, [r8, #168]	; 0xa8
 8018dac:	ed87 7a08 	vstr	s14, [r7, #32]
 8018db0:	f604 18c4 	addw	r8, r4, #2500	; 0x9c4
 8018db4:	edc7 4a00 	vstr	s9, [r7]
 8018db8:	ed87 5a01 	vstr	s10, [r7, #4]
 8018dbc:	edc7 5a02 	vstr	s11, [r7, #8]
 8018dc0:	edc7 6a03 	vstr	s13, [r7, #12]
 8018dc4:	ed87 6a04 	vstr	s12, [r7, #16]
 8018dc8:	ed8e 7a21 	vstr	s14, [lr, #132]	; 0x84
 8018dcc:	ed8e 7a25 	vstr	s14, [lr, #148]	; 0x94
 8018dd0:	ed8e 7a29 	vstr	s14, [lr, #164]	; 0xa4
 8018dd4:	edce 7a1e 	vstr	s15, [lr, #120]	; 0x78
 8018dd8:	edce 7a1f 	vstr	s15, [lr, #124]	; 0x7c
 8018ddc:	edce 7a20 	vstr	s15, [lr, #128]	; 0x80
 8018de0:	edce 7a22 	vstr	s15, [lr, #136]	; 0x88
 8018de4:	edce 7a23 	vstr	s15, [lr, #140]	; 0x8c
 8018de8:	edce 7a24 	vstr	s15, [lr, #144]	; 0x90
 8018dec:	edce 7a26 	vstr	s15, [lr, #152]	; 0x98
 8018df0:	edce 7a27 	vstr	s15, [lr, #156]	; 0x9c
 8018df4:	edce 7a28 	vstr	s15, [lr, #160]	; 0xa0
 8018df8:	f8a4 3c3c 	strh.w	r3, [r4, #3132]	; 0xc3c
 8018dfc:	f8c4 9c1c 	str.w	r9, [r4, #3100]	; 0xc1c
 8018e00:	f884 9c28 	strb.w	r9, [r4, #3112]	; 0xc28
 8018e04:	f884 5c3e 	strb.w	r5, [r4, #3134]	; 0xc3e
 8018e08:	f8c4 bc18 	str.w	fp, [r4, #3096]	; 0xc18
 8018e0c:	f884 ac20 	strb.w	sl, [r4, #3104]	; 0xc20
 8018e10:	edce 7a2a 	vstr	s15, [lr, #168]	; 0xa8
 8018e14:	ed8e 7a2d 	vstr	s14, [lr, #180]	; 0xb4
 8018e18:	ed8e 7a31 	vstr	s14, [lr, #196]	; 0xc4
 8018e1c:	ed8e 7a35 	vstr	s14, [lr, #212]	; 0xd4
 8018e20:	ed8e 7a39 	vstr	s14, [lr, #228]	; 0xe4
 8018e24:	ed8e 7a3d 	vstr	s14, [lr, #244]	; 0xf4
 8018e28:	ed8e 7a0f 	vstr	s14, [lr, #60]	; 0x3c
 8018e2c:	ed8e 7a13 	vstr	s14, [lr, #76]	; 0x4c
 8018e30:	ed8e 7a17 	vstr	s14, [lr, #92]	; 0x5c
 8018e34:	edce 7a2b 	vstr	s15, [lr, #172]	; 0xac
 8018e38:	edce 7a2c 	vstr	s15, [lr, #176]	; 0xb0
 8018e3c:	edce 7a2e 	vstr	s15, [lr, #184]	; 0xb8
 8018e40:	edce 7a2f 	vstr	s15, [lr, #188]	; 0xbc
 8018e44:	edce 7a30 	vstr	s15, [lr, #192]	; 0xc0
 8018e48:	edce 7a32 	vstr	s15, [lr, #200]	; 0xc8
 8018e4c:	edce 7a33 	vstr	s15, [lr, #204]	; 0xcc
 8018e50:	edce 7a34 	vstr	s15, [lr, #208]	; 0xd0
 8018e54:	edce 7a36 	vstr	s15, [lr, #216]	; 0xd8
 8018e58:	edce 7a37 	vstr	s15, [lr, #220]	; 0xdc
 8018e5c:	edce 7a38 	vstr	s15, [lr, #224]	; 0xe0
 8018e60:	edce 7a3a 	vstr	s15, [lr, #232]	; 0xe8
 8018e64:	edce 7a3b 	vstr	s15, [lr, #236]	; 0xec
 8018e68:	edce 7a3c 	vstr	s15, [lr, #240]	; 0xf0
 8018e6c:	edce 7a10 	vstr	s15, [lr, #64]	; 0x40
 8018e70:	edce 7a11 	vstr	s15, [lr, #68]	; 0x44
 8018e74:	edce 7a12 	vstr	s15, [lr, #72]	; 0x48
 8018e78:	edce 7a14 	vstr	s15, [lr, #80]	; 0x50
 8018e7c:	edce 7a15 	vstr	s15, [lr, #84]	; 0x54
 8018e80:	edce 7a16 	vstr	s15, [lr, #88]	; 0x58
 8018e84:	edce 7a18 	vstr	s15, [lr, #96]	; 0x60
 8018e88:	edce 7a19 	vstr	s15, [lr, #100]	; 0x64
 8018e8c:	edce 7a1a 	vstr	s15, [lr, #104]	; 0x68
 8018e90:	edce 7a1b 	vstr	s15, [lr, #108]	; 0x6c
 8018e94:	edce 7a1c 	vstr	s15, [lr, #112]	; 0x70
 8018e98:	f8a4 39fc 	strh.w	r3, [r4, #2556]	; 0x9fc
 8018e9c:	4b32      	ldr	r3, [pc, #200]	; (8018f68 <MotionFX_initialize+0x450>)
 8018e9e:	f8c4 c9ec 	str.w	ip, [r4, #2540]	; 0x9ec
 8018ea2:	f8c4 09f0 	str.w	r0, [r4, #2544]	; 0x9f0
 8018ea6:	f8c4 19f4 	str.w	r1, [r4, #2548]	; 0x9f4
 8018eaa:	f8c4 29f8 	str.w	r2, [r4, #2552]	; 0x9f8
 8018eae:	f8c4 39d8 	str.w	r3, [r4, #2520]	; 0x9d8
 8018eb2:	edc6 7a2c 	vstr	s15, [r6, #176]	; 0xb0
 8018eb6:	edc6 7a2d 	vstr	s15, [r6, #180]	; 0xb4
 8018eba:	edc6 7a2e 	vstr	s15, [r6, #184]	; 0xb8
 8018ebe:	edc8 4a00 	vstr	s9, [r8]
 8018ec2:	ed88 5a01 	vstr	s10, [r8, #4]
 8018ec6:	edc8 5a02 	vstr	s11, [r8, #8]
 8018eca:	edc8 6a03 	vstr	s13, [r8, #12]
 8018ece:	ed88 6a04 	vstr	s12, [r8, #16]
 8018ed2:	ed88 7a08 	vstr	s14, [r8, #32]
 8018ed6:	edce 7a1d 	vstr	s15, [lr, #116]	; 0x74
 8018eda:	f8c4 99dc 	str.w	r9, [r4, #2524]	; 0x9dc
 8018ede:	f884 99e8 	strb.w	r9, [r4, #2536]	; 0x9e8
 8018ee2:	f884 a9e0 	strb.w	sl, [r4, #2528]	; 0x9e0
 8018ee6:	f884 59fe 	strb.w	r5, [r4, #2558]	; 0x9fe
 8018eea:	f7f7 f9a5 	bl	8010238 <iNemo_setOrientation.constprop.40>
 8018eee:	f7f7 fb7b 	bl	80105e8 <iNemo_setOrientation_6X.constprop.41>
 8018ef2:	f04f 567f 	mov.w	r6, #1069547520	; 0x3fc00000
 8018ef6:	f8df c080 	ldr.w	ip, [pc, #128]	; 8018f78 <MotionFX_initialize+0x460>
 8018efa:	481c      	ldr	r0, [pc, #112]	; (8018f6c <MotionFX_initialize+0x454>)
 8018efc:	491c      	ldr	r1, [pc, #112]	; (8018f70 <MotionFX_initialize+0x458>)
 8018efe:	e03d      	b.n	8018f7c <MotionFX_initialize+0x464>
 8018f00:	60000000 	.word	0x60000000
 8018f04:	3fc76cab 	.word	0x3fc76cab
 8018f08:	20000000 	.word	0x20000000
 8018f0c:	3fc55a40 	.word	0x3fc55a40
 8018f10:	00000000 	.word	0x00000000
 8018f14:	3fbfdfb7 	.word	0x3fbfdfb7
 8018f18:	60000000 	.word	0x60000000
 8018f1c:	3f9f1fed 	.word	0x3f9f1fed
 8018f20:	c0000000 	.word	0xc0000000
 8018f24:	3fb2875e 	.word	0x3fb2875e
 8018f28:	e0042000 	.word	0xe0042000
 8018f2c:	5c001000 	.word	0x5c001000
 8018f30:	58024c08 	.word	0x58024c08
 8018f34:	58024c00 	.word	0x58024c00
 8018f38:	f407a5c2 	.word	0xf407a5c2
 8018f3c:	b5e8b5cd 	.word	0xb5e8b5cd
 8018f40:	200013c8 	.word	0x200013c8
 8018f44:	00000000 	.word	0x00000000
 8018f48:	20000000 	.word	0x20000000
 8018f4c:	3f2ac083 	.word	0x3f2ac083
 8018f50:	3f639581 	.word	0x3f639581
 8018f54:	402ab021 	.word	0x402ab021
 8018f58:	3f13f7cf 	.word	0x3f13f7cf
 8018f5c:	3a09a027 	.word	0x3a09a027
 8018f60:	39b24207 	.word	0x39b24207
 8018f64:	3dcccccd 	.word	0x3dcccccd
 8018f68:	01000101 	.word	0x01000101
 8018f6c:	3a51b717 	.word	0x3a51b717
 8018f70:	3a378034 	.word	0x3a378034
 8018f74:	39712c28 	.word	0x39712c28
 8018f78:	3f666666 	.word	0x3f666666
 8018f7c:	4a14      	ldr	r2, [pc, #80]	; (8018fd0 <MotionFX_initialize+0x4b8>)
 8018f7e:	4b15      	ldr	r3, [pc, #84]	; (8018fd4 <MotionFX_initialize+0x4bc>)
 8018f80:	f8df e054 	ldr.w	lr, [pc, #84]	; 8018fd8 <MotionFX_initialize+0x4c0>
 8018f84:	edc8 6a03 	vstr	s13, [r8, #12]
 8018f88:	edc7 6a03 	vstr	s13, [r7, #12]
 8018f8c:	f884 a9fd 	strb.w	sl, [r4, #2557]	; 0x9fd
 8018f90:	f884 59fe 	strb.w	r5, [r4, #2558]	; 0x9fe
 8018f94:	f884 ac3d 	strb.w	sl, [r4, #3133]	; 0xc3d
 8018f98:	f884 5c3e 	strb.w	r5, [r4, #3134]	; 0xc3e
 8018f9c:	f8c4 bc19 	str.w	fp, [r4, #3097]	; 0xc19
 8018fa0:	f8c4 e9d9 	str.w	lr, [r4, #2521]	; 0x9d9
 8018fa4:	f8c8 c000 	str.w	ip, [r8]
 8018fa8:	f8c7 c000 	str.w	ip, [r7]
 8018fac:	f8c8 6004 	str.w	r6, [r8, #4]
 8018fb0:	607e      	str	r6, [r7, #4]
 8018fb2:	f8c8 0028 	str.w	r0, [r8, #40]	; 0x28
 8018fb6:	62b8      	str	r0, [r7, #40]	; 0x28
 8018fb8:	f8c8 102c 	str.w	r1, [r8, #44]	; 0x2c
 8018fbc:	62f9      	str	r1, [r7, #44]	; 0x2c
 8018fbe:	f8c8 2030 	str.w	r2, [r8, #48]	; 0x30
 8018fc2:	633a      	str	r2, [r7, #48]	; 0x30
 8018fc4:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
 8018fc8:	637b      	str	r3, [r7, #52]	; 0x34
 8018fca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018fce:	bf00      	nop
 8018fd0:	3b378034 	.word	0x3b378034
 8018fd4:	3dcccccd 	.word	0x3dcccccd
 8018fd8:	01010001 	.word	0x01010001

08018fdc <MotionFX_setKnobs>:
 8018fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018fde:	4b2f      	ldr	r3, [pc, #188]	; (801909c <MotionFX_setKnobs+0xc0>)
 8018fe0:	f893 2d49 	ldrb.w	r2, [r3, #3401]	; 0xd49
 8018fe4:	b902      	cbnz	r2, 8018fe8 <MotionFX_setKnobs+0xc>
 8018fe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018fe8:	2800      	cmp	r0, #0
 8018fea:	d0fc      	beq.n	8018fe6 <MotionFX_setKnobs+0xa>
 8018fec:	f603 12c4 	addw	r2, r3, #2500	; 0x9c4
 8018ff0:	6884      	ldr	r4, [r0, #8]
 8018ff2:	6806      	ldr	r6, [r0, #0]
 8018ff4:	6845      	ldr	r5, [r0, #4]
 8018ff6:	60d4      	str	r4, [r2, #12]
 8018ff8:	7b01      	ldrb	r1, [r0, #12]
 8018ffa:	f883 19d9 	strb.w	r1, [r3, #2521]	; 0x9d9
 8018ffe:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8019002:	f8d0 c014 	ldr.w	ip, [r0, #20]
 8019006:	6987      	ldr	r7, [r0, #24]
 8019008:	6317      	str	r7, [r2, #48]	; 0x30
 801900a:	f8c2 e028 	str.w	lr, [r2, #40]	; 0x28
 801900e:	f8c2 c02c 	str.w	ip, [r2, #44]	; 0x2c
 8019012:	f890 7028 	ldrb.w	r7, [r0, #40]	; 0x28
 8019016:	f883 79fd 	strb.w	r7, [r3, #2557]	; 0x9fd
 801901a:	f890 c035 	ldrb.w	ip, [r0, #53]	; 0x35
 801901e:	f883 c9fe 	strb.w	ip, [r3, #2558]	; 0x9fe
 8019022:	f883 1c19 	strb.w	r1, [r3, #3097]	; 0xc19
 8019026:	f603 4104 	addw	r1, r3, #3076	; 0xc04
 801902a:	6016      	str	r6, [r2, #0]
 801902c:	6055      	str	r5, [r2, #4]
 801902e:	6a02      	ldr	r2, [r0, #32]
 8019030:	f8d0 e01c 	ldr.w	lr, [r0, #28]
 8019034:	62ca      	str	r2, [r1, #44]	; 0x2c
 8019036:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8019038:	f883 cc3e 	strb.w	ip, [r3, #3134]	; 0xc3e
 801903c:	f883 7c3d 	strb.w	r7, [r3, #3133]	; 0xc3d
 8019040:	6b87      	ldr	r7, [r0, #56]	; 0x38
 8019042:	f8c1 e028 	str.w	lr, [r1, #40]	; 0x28
 8019046:	630a      	str	r2, [r1, #48]	; 0x30
 8019048:	4a15      	ldr	r2, [pc, #84]	; (80190a0 <MotionFX_setKnobs+0xc4>)
 801904a:	600e      	str	r6, [r1, #0]
 801904c:	604d      	str	r5, [r1, #4]
 801904e:	60cc      	str	r4, [r1, #12]
 8019050:	f8c3 7d54 	str.w	r7, [r3, #3412]	; 0xd54
 8019054:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8019058:	7013      	strb	r3, [r2, #0]
 801905a:	f890 e02d 	ldrb.w	lr, [r0, #45]	; 0x2d
 801905e:	f890 702a 	ldrb.w	r7, [r0, #42]	; 0x2a
 8019062:	f890 602e 	ldrb.w	r6, [r0, #46]	; 0x2e
 8019066:	f890 5032 	ldrb.w	r5, [r0, #50]	; 0x32
 801906a:	f890 402b 	ldrb.w	r4, [r0, #43]	; 0x2b
 801906e:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
 8019072:	f890 c031 	ldrb.w	ip, [r0, #49]	; 0x31
 8019076:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
 801907a:	f882 e004 	strb.w	lr, [r2, #4]
 801907e:	7057      	strb	r7, [r2, #1]
 8019080:	7156      	strb	r6, [r2, #5]
 8019082:	7255      	strb	r5, [r2, #9]
 8019084:	7094      	strb	r4, [r2, #2]
 8019086:	7293      	strb	r3, [r2, #10]
 8019088:	f882 c008 	strb.w	ip, [r2, #8]
 801908c:	7191      	strb	r1, [r2, #6]
 801908e:	f7f7 f8d3 	bl	8010238 <iNemo_setOrientation.constprop.40>
 8019092:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8019096:	f7f7 baa7 	b.w	80105e8 <iNemo_setOrientation_6X.constprop.41>
 801909a:	bf00      	nop
 801909c:	200013c8 	.word	0x200013c8
 80190a0:	20000000 	.word	0x20000000

080190a4 <MotionFX_getKnobs>:
 80190a4:	4b28      	ldr	r3, [pc, #160]	; (8019148 <MotionFX_getKnobs+0xa4>)
 80190a6:	f893 2d49 	ldrb.w	r2, [r3, #3401]	; 0xd49
 80190aa:	b902      	cbnz	r2, 80190ae <MotionFX_getKnobs+0xa>
 80190ac:	4770      	bx	lr
 80190ae:	2800      	cmp	r0, #0
 80190b0:	d0fc      	beq.n	80190ac <MotionFX_getKnobs+0x8>
 80190b2:	b470      	push	{r4, r5, r6}
 80190b4:	f603 4204 	addw	r2, r3, #3076	; 0xc04
 80190b8:	68d1      	ldr	r1, [r2, #12]
 80190ba:	6854      	ldr	r4, [r2, #4]
 80190bc:	6815      	ldr	r5, [r2, #0]
 80190be:	6005      	str	r5, [r0, #0]
 80190c0:	6044      	str	r4, [r0, #4]
 80190c2:	6081      	str	r1, [r0, #8]
 80190c4:	f893 1c19 	ldrb.w	r1, [r3, #3097]	; 0xc19
 80190c8:	7301      	strb	r1, [r0, #12]
 80190ca:	f603 11c4 	addw	r1, r3, #2500	; 0x9c4
 80190ce:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 80190d0:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 80190d2:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 80190d4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80190d6:	6104      	str	r4, [r0, #16]
 80190d8:	6a94      	ldr	r4, [r2, #40]	; 0x28
 80190da:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80190dc:	6242      	str	r2, [r0, #36]	; 0x24
 80190de:	6185      	str	r5, [r0, #24]
 80190e0:	61c4      	str	r4, [r0, #28]
 80190e2:	6146      	str	r6, [r0, #20]
 80190e4:	6201      	str	r1, [r0, #32]
 80190e6:	4a19      	ldr	r2, [pc, #100]	; (801914c <MotionFX_getKnobs+0xa8>)
 80190e8:	f893 1c3d 	ldrb.w	r1, [r3, #3133]	; 0xc3d
 80190ec:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
 80190f0:	f893 6c3e 	ldrb.w	r6, [r3, #3134]	; 0xc3e
 80190f4:	f8d3 5d54 	ldr.w	r5, [r3, #3412]	; 0xd54
 80190f8:	7814      	ldrb	r4, [r2, #0]
 80190fa:	7911      	ldrb	r1, [r2, #4]
 80190fc:	7a13      	ldrb	r3, [r2, #8]
 80190fe:	f880 6035 	strb.w	r6, [r0, #53]	; 0x35
 8019102:	6385      	str	r5, [r0, #56]	; 0x38
 8019104:	f880 4029 	strb.w	r4, [r0, #41]	; 0x29
 8019108:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d
 801910c:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
 8019110:	7854      	ldrb	r4, [r2, #1]
 8019112:	7951      	ldrb	r1, [r2, #5]
 8019114:	7a55      	ldrb	r5, [r2, #9]
 8019116:	f880 402a 	strb.w	r4, [r0, #42]	; 0x2a
 801911a:	2300      	movs	r3, #0
 801911c:	7894      	ldrb	r4, [r2, #2]
 801911e:	f880 102e 	strb.w	r1, [r0, #46]	; 0x2e
 8019122:	7991      	ldrb	r1, [r2, #6]
 8019124:	7a92      	ldrb	r2, [r2, #10]
 8019126:	f880 5032 	strb.w	r5, [r0, #50]	; 0x32
 801912a:	f880 402b 	strb.w	r4, [r0, #43]	; 0x2b
 801912e:	f880 102f 	strb.w	r1, [r0, #47]	; 0x2f
 8019132:	f880 2033 	strb.w	r2, [r0, #51]	; 0x33
 8019136:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 801913a:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
 801913e:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
 8019142:	bc70      	pop	{r4, r5, r6}
 8019144:	4770      	bx	lr
 8019146:	bf00      	nop
 8019148:	200013c8 	.word	0x200013c8
 801914c:	20000000 	.word	0x20000000

08019150 <MotionFX_enable_6X>:
 8019150:	4b0c      	ldr	r3, [pc, #48]	; (8019184 <MotionFX_enable_6X+0x34>)
 8019152:	f893 2d49 	ldrb.w	r2, [r3, #3401]	; 0xd49
 8019156:	b112      	cbz	r2, 801915e <MotionFX_enable_6X+0xe>
 8019158:	f8c3 0d4c 	str.w	r0, [r3, #3404]	; 0xd4c
 801915c:	b900      	cbnz	r0, 8019160 <MotionFX_enable_6X+0x10>
 801915e:	4770      	bx	lr
 8019160:	b430      	push	{r4, r5}
 8019162:	4a09      	ldr	r2, [pc, #36]	; (8019188 <MotionFX_enable_6X+0x38>)
 8019164:	4809      	ldr	r0, [pc, #36]	; (801918c <MotionFX_enable_6X+0x3c>)
 8019166:	f503 6482 	add.w	r4, r3, #1040	; 0x410
 801916a:	2100      	movs	r1, #0
 801916c:	f203 4314 	addw	r3, r3, #1044	; 0x414
 8019170:	f04f 45ff 	mov.w	r5, #2139095040	; 0x7f800000
 8019174:	f8a2 18dc 	strh.w	r1, [r2, #2268]	; 0x8dc
 8019178:	f882 18de 	strb.w	r1, [r2, #2270]	; 0x8de
 801917c:	6025      	str	r5, [r4, #0]
 801917e:	6018      	str	r0, [r3, #0]
 8019180:	bc30      	pop	{r4, r5}
 8019182:	4770      	bx	lr
 8019184:	200013c8 	.word	0x200013c8
 8019188:	20000000 	.word	0x20000000
 801918c:	ff800000 	.word	0xff800000

08019190 <MotionFX_enable_9X>:
 8019190:	4b0d      	ldr	r3, [pc, #52]	; (80191c8 <MotionFX_enable_9X+0x38>)
 8019192:	f893 2d49 	ldrb.w	r2, [r3, #3401]	; 0xd49
 8019196:	b112      	cbz	r2, 801919e <MotionFX_enable_9X+0xe>
 8019198:	f8c3 0d50 	str.w	r0, [r3, #3408]	; 0xd50
 801919c:	b900      	cbnz	r0, 80191a0 <MotionFX_enable_9X+0x10>
 801919e:	4770      	bx	lr
 80191a0:	b430      	push	{r4, r5}
 80191a2:	4a0a      	ldr	r2, [pc, #40]	; (80191cc <MotionFX_enable_9X+0x3c>)
 80191a4:	480a      	ldr	r0, [pc, #40]	; (80191d0 <MotionFX_enable_9X+0x40>)
 80191a6:	f241 15b4 	movw	r5, #4532	; 0x11b4
 80191aa:	2100      	movs	r1, #0
 80191ac:	5351      	strh	r1, [r2, r5]
 80191ae:	f241 15b6 	movw	r5, #4534	; 0x11b6
 80191b2:	f04f 44ff 	mov.w	r4, #2139095040	; 0x7f800000
 80191b6:	5551      	strb	r1, [r2, r5]
 80191b8:	f503 6282 	add.w	r2, r3, #1040	; 0x410
 80191bc:	f203 4314 	addw	r3, r3, #1044	; 0x414
 80191c0:	6014      	str	r4, [r2, #0]
 80191c2:	6018      	str	r0, [r3, #0]
 80191c4:	bc30      	pop	{r4, r5}
 80191c6:	4770      	bx	lr
 80191c8:	200013c8 	.word	0x200013c8
 80191cc:	20000000 	.word	0x20000000
 80191d0:	ff800000 	.word	0xff800000

080191d4 <MotionFX_update>:
 80191d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80191d8:	4ec1      	ldr	r6, [pc, #772]	; (80194e0 <MotionFX_update+0x30c>)
 80191da:	ed2d 8b02 	vpush	{d8}
 80191de:	f896 5d49 	ldrb.w	r5, [r6, #3401]	; 0xd49
 80191e2:	b08b      	sub	sp, #44	; 0x2c
 80191e4:	b925      	cbnz	r5, 80191f0 <MotionFX_update+0x1c>
 80191e6:	b00b      	add	sp, #44	; 0x2c
 80191e8:	ecbd 8b02 	vpop	{d8}
 80191ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80191f0:	4604      	mov	r4, r0
 80191f2:	ed92 8a00 	vldr	s16, [r2]
 80191f6:	2b00      	cmp	r3, #0
 80191f8:	f000 80d7 	beq.w	80193aa <MotionFX_update+0x1d6>
 80191fc:	4ab9      	ldr	r2, [pc, #740]	; (80194e4 <MotionFX_update+0x310>)
 80191fe:	68cf      	ldr	r7, [r1, #12]
 8019200:	f8d1 e000 	ldr.w	lr, [r1]
 8019204:	690d      	ldr	r5, [r1, #16]
 8019206:	f8d1 c018 	ldr.w	ip, [r1, #24]
 801920a:	6197      	str	r7, [r2, #24]
 801920c:	f5a2 7010 	sub.w	r0, r2, #576	; 0x240
 8019210:	f8c2 e00c 	str.w	lr, [r2, #12]
 8019214:	6187      	str	r7, [r0, #24]
 8019216:	684f      	ldr	r7, [r1, #4]
 8019218:	f8c0 e00c 	str.w	lr, [r0, #12]
 801921c:	f8d1 e01c 	ldr.w	lr, [r1, #28]
 8019220:	f8c2 c024 	str.w	ip, [r2, #36]	; 0x24
 8019224:	f8c0 c024 	str.w	ip, [r0, #36]	; 0x24
 8019228:	f8d1 c014 	ldr.w	ip, [r1, #20]
 801922c:	6117      	str	r7, [r2, #16]
 801922e:	6107      	str	r7, [r0, #16]
 8019230:	f8d6 7d54 	ldr.w	r7, [r6, #3412]	; 0xd54
 8019234:	61d5      	str	r5, [r2, #28]
 8019236:	61c5      	str	r5, [r0, #28]
 8019238:	688d      	ldr	r5, [r1, #8]
 801923a:	6a09      	ldr	r1, [r1, #32]
 801923c:	6155      	str	r5, [r2, #20]
 801923e:	f8c2 e028 	str.w	lr, [r2, #40]	; 0x28
 8019242:	f8c2 c020 	str.w	ip, [r2, #32]
 8019246:	62d1      	str	r1, [r2, #44]	; 0x2c
 8019248:	f8c0 e028 	str.w	lr, [r0, #40]	; 0x28
 801924c:	f8c0 c020 	str.w	ip, [r0, #32]
 8019250:	6145      	str	r5, [r0, #20]
 8019252:	62c1      	str	r1, [r0, #44]	; 0x2c
 8019254:	f8d6 2d4c 	ldr.w	r2, [r6, #3404]	; 0xd4c
 8019258:	b187      	cbz	r7, 801927c <MotionFX_update+0xa8>
 801925a:	f896 1c3c 	ldrb.w	r1, [r6, #3132]	; 0xc3c
 801925e:	07cd      	lsls	r5, r1, #31
 8019260:	d403      	bmi.n	801926a <MotionFX_update+0x96>
 8019262:	f896 19fc 	ldrb.w	r1, [r6, #2556]	; 0x9fc
 8019266:	07c8      	lsls	r0, r1, #31
 8019268:	d523      	bpl.n	80192b2 <MotionFX_update+0xde>
 801926a:	489f      	ldr	r0, [pc, #636]	; (80194e8 <MotionFX_update+0x314>)
 801926c:	f8d0 10c0 	ldr.w	r1, [r0, #192]	; 0xc0
 8019270:	2900      	cmp	r1, #0
 8019272:	f340 809c 	ble.w	80193ae <MotionFX_update+0x1da>
 8019276:	3901      	subs	r1, #1
 8019278:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
 801927c:	2a00      	cmp	r2, #0
 801927e:	f000 808e 	beq.w	801939e <MotionFX_update+0x1ca>
 8019282:	f896 29fc 	ldrb.w	r2, [r6, #2556]	; 0x9fc
 8019286:	07d1      	lsls	r1, r2, #31
 8019288:	f140 8089 	bpl.w	801939e <MotionFX_update+0x1ca>
 801928c:	4618      	mov	r0, r3
 801928e:	eeb0 0a48 	vmov.f32	s0, s16
 8019292:	9301      	str	r3, [sp, #4]
 8019294:	f7fe ffb0 	bl	80181f8 <iNemo_update_6X.constprop.34>
 8019298:	f8d6 1d50 	ldr.w	r1, [r6, #3408]	; 0xd50
 801929c:	9b01      	ldr	r3, [sp, #4]
 801929e:	b141      	cbz	r1, 80192b2 <MotionFX_update+0xde>
 80192a0:	f896 2c3c 	ldrb.w	r2, [r6, #3132]	; 0xc3c
 80192a4:	07d2      	lsls	r2, r2, #31
 80192a6:	d504      	bpl.n	80192b2 <MotionFX_update+0xde>
 80192a8:	4618      	mov	r0, r3
 80192aa:	eeb0 0a48 	vmov.f32	s0, s16
 80192ae:	f7ff f9a1 	bl	80185f4 <iNemo_update.constprop.35>
 80192b2:	4d8e      	ldr	r5, [pc, #568]	; (80194ec <MotionFX_update+0x318>)
 80192b4:	69ea      	ldr	r2, [r5, #28]
 80192b6:	69af      	ldr	r7, [r5, #24]
 80192b8:	f8d5 025c 	ldr.w	r0, [r5, #604]	; 0x25c
 80192bc:	f8d5 1258 	ldr.w	r1, [r5, #600]	; 0x258
 80192c0:	60e1      	str	r1, [r4, #12]
 80192c2:	64a7      	str	r7, [r4, #72]	; 0x48
 80192c4:	f8d5 1260 	ldr.w	r1, [r5, #608]	; 0x260
 80192c8:	6a2f      	ldr	r7, [r5, #32]
 80192ca:	64e2      	str	r2, [r4, #76]	; 0x4c
 80192cc:	6120      	str	r0, [r4, #16]
 80192ce:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80192d0:	f8d5 0264 	ldr.w	r0, [r5, #612]	; 0x264
 80192d4:	6527      	str	r7, [r4, #80]	; 0x50
 80192d6:	6161      	str	r1, [r4, #20]
 80192d8:	68ef      	ldr	r7, [r5, #12]
 80192da:	f8d5 124c 	ldr.w	r1, [r5, #588]	; 0x24c
 80192de:	61a0      	str	r0, [r4, #24]
 80192e0:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
 80192e4:	6562      	str	r2, [r4, #84]	; 0x54
 80192e6:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
 80192ea:	63e7      	str	r7, [r4, #60]	; 0x3c
 80192ec:	f8d5 72d4 	ldr.w	r7, [r5, #724]	; 0x2d4
 80192f0:	65a0      	str	r0, [r4, #88]	; 0x58
 80192f2:	f8d5 02e0 	ldr.w	r0, [r5, #736]	; 0x2e0
 80192f6:	6021      	str	r1, [r4, #0]
 80192f8:	6662      	str	r2, [r4, #100]	; 0x64
 80192fa:	6929      	ldr	r1, [r5, #16]
 80192fc:	f8d5 2098 	ldr.w	r2, [r5, #152]	; 0x98
 8019300:	65e2      	str	r2, [r4, #92]	; 0x5c
 8019302:	61e7      	str	r7, [r4, #28]
 8019304:	6421      	str	r1, [r4, #64]	; 0x40
 8019306:	62a0      	str	r0, [r4, #40]	; 0x28
 8019308:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
 801930c:	f8d5 2250 	ldr.w	r2, [r5, #592]	; 0x250
 8019310:	f8d5 72d8 	ldr.w	r7, [r5, #728]	; 0x2d8
 8019314:	f8d5 12e4 	ldr.w	r1, [r5, #740]	; 0x2e4
 8019318:	66a0      	str	r0, [r4, #104]	; 0x68
 801931a:	f8d5 0254 	ldr.w	r0, [r5, #596]	; 0x254
 801931e:	6062      	str	r2, [r4, #4]
 8019320:	696a      	ldr	r2, [r5, #20]
 8019322:	f8d5 32e8 	ldr.w	r3, [r5, #744]	; 0x2e8
 8019326:	6227      	str	r7, [r4, #32]
 8019328:	f8d5 709c 	ldr.w	r7, [r5, #156]	; 0x9c
 801932c:	62e1      	str	r1, [r4, #44]	; 0x2c
 801932e:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
 8019332:	6462      	str	r2, [r4, #68]	; 0x44
 8019334:	f8d5 22dc 	ldr.w	r2, [r5, #732]	; 0x2dc
 8019338:	6262      	str	r2, [r4, #36]	; 0x24
 801933a:	60a0      	str	r0, [r4, #8]
 801933c:	66e1      	str	r1, [r4, #108]	; 0x6c
 801933e:	6323      	str	r3, [r4, #48]	; 0x30
 8019340:	f505 714f 	add.w	r1, r5, #828	; 0x33c
 8019344:	f505 7013 	add.w	r0, r5, #588	; 0x24c
 8019348:	aa03      	add	r2, sp, #12
 801934a:	6627      	str	r7, [r4, #96]	; 0x60
 801934c:	f7f6 fda4 	bl	800fe98 <quatErr2EulerErr>
 8019350:	9b03      	ldr	r3, [sp, #12]
 8019352:	63a3      	str	r3, [r4, #56]	; 0x38
 8019354:	aa03      	add	r2, sp, #12
 8019356:	f105 01fc 	add.w	r1, r5, #252	; 0xfc
 801935a:	f105 000c 	add.w	r0, r5, #12
 801935e:	f7f6 fd9b 	bl	800fe98 <quatErr2EulerErr>
 8019362:	9a03      	ldr	r2, [sp, #12]
 8019364:	f896 39fe 	ldrb.w	r3, [r6, #2558]	; 0x9fe
 8019368:	6762      	str	r2, [r4, #116]	; 0x74
 801936a:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 801936e:	f104 0258 	add.w	r2, r4, #88	; 0x58
 8019372:	f104 0048 	add.w	r0, r4, #72	; 0x48
 8019376:	f7f7 fd37 	bl	8010de8 <iNemo_quat2heading>
 801937a:	f896 3c3e 	ldrb.w	r3, [r6, #3134]	; 0xc3e
 801937e:	ed84 0a1c 	vstr	s0, [r4, #112]	; 0x70
 8019382:	f104 021c 	add.w	r2, r4, #28
 8019386:	4621      	mov	r1, r4
 8019388:	f104 000c 	add.w	r0, r4, #12
 801938c:	f7f7 fd2c 	bl	8010de8 <iNemo_quat2heading>
 8019390:	ed84 0a0d 	vstr	s0, [r4, #52]	; 0x34
 8019394:	b00b      	add	sp, #44	; 0x2c
 8019396:	ecbd 8b02 	vpop	{d8}
 801939a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801939e:	f8d6 1d50 	ldr.w	r1, [r6, #3408]	; 0xd50
 80193a2:	2900      	cmp	r1, #0
 80193a4:	f47f af7c 	bne.w	80192a0 <MotionFX_update+0xcc>
 80193a8:	e783      	b.n	80192b2 <MotionFX_update+0xde>
 80193aa:	ab06      	add	r3, sp, #24
 80193ac:	e726      	b.n	80191fc <MotionFX_update+0x28>
 80193ae:	f8d6 cd58 	ldr.w	ip, [r6, #3416]	; 0xd58
 80193b2:	f8d6 1d50 	ldr.w	r1, [r6, #3408]	; 0xd50
 80193b6:	f10c 0e01 	add.w	lr, ip, #1
 80193ba:	b369      	cbz	r1, 8019418 <MotionFX_update+0x244>
 80193bc:	ee07 ea90 	vmov	s15, lr
 80193c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80193c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80193c8:	ee87 6a27 	vdiv.f32	s12, s14, s15
 80193cc:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80194f8 <MotionFX_update+0x324>
 80193d0:	4847      	ldr	r0, [pc, #284]	; (80194f0 <MotionFX_update+0x31c>)
 80193d2:	46c8      	mov	r8, r9
 80193d4:	ecb8 7a01 	vldmia	r8!, {s14}
 80193d8:	edd0 4a01 	vldr	s9, [r0, #4]
 80193dc:	ed90 5a02 	vldr	s10, [r0, #8]
 80193e0:	ed90 4a00 	vldr	s8, [r0]
 80193e4:	edd8 6a00 	vldr	s13, [r8]
 80193e8:	edd9 7a02 	vldr	s15, [r9, #8]
 80193ec:	ee05 ca90 	vmov	s11, ip
 80193f0:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80193f4:	eea5 7a84 	vfma.f32	s14, s11, s8
 80193f8:	eee5 6aa4 	vfma.f32	s13, s11, s9
 80193fc:	eee5 7a85 	vfma.f32	s15, s11, s10
 8019400:	ee66 6a86 	vmul.f32	s13, s13, s12
 8019404:	ee27 7a06 	vmul.f32	s14, s14, s12
 8019408:	ee67 7a86 	vmul.f32	s15, s15, s12
 801940c:	edc0 6a01 	vstr	s13, [r0, #4]
 8019410:	ed80 7a00 	vstr	s14, [r0]
 8019414:	edc0 7a02 	vstr	s15, [r0, #8]
 8019418:	2a00      	cmp	r2, #0
 801941a:	d071      	beq.n	8019500 <MotionFX_update+0x32c>
 801941c:	ee07 ea90 	vmov	s15, lr
 8019420:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019424:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019428:	eec7 5a27 	vdiv.f32	s11, s14, s15
 801942c:	4830      	ldr	r0, [pc, #192]	; (80194f0 <MotionFX_update+0x31c>)
 801942e:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 80194fc <MotionFX_update+0x328>
 8019432:	f8c6 ed58 	str.w	lr, [r6, #3416]	; 0xd58
 8019436:	4607      	mov	r7, r0
 8019438:	46c8      	mov	r8, r9
 801943a:	4605      	mov	r5, r0
 801943c:	3708      	adds	r7, #8
 801943e:	3504      	adds	r5, #4
 8019440:	f5be 7ffa 	cmp.w	lr, #500	; 0x1f4
 8019444:	ee07 ca90 	vmov	s15, ip
 8019448:	ecf8 6a01 	vldmia	r8!, {s13}
 801944c:	ed97 5a00 	vldr	s10, [r7]
 8019450:	ed99 7a02 	vldr	s14, [r9, #8]
 8019454:	edd5 4a00 	vldr	s9, [r5]
 8019458:	ed90 4a00 	vldr	s8, [r0]
 801945c:	ed98 6a00 	vldr	s12, [r8]
 8019460:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019464:	eea7 7a85 	vfma.f32	s14, s15, s10
 8019468:	eee7 6a84 	vfma.f32	s13, s15, s8
 801946c:	eea7 6aa4 	vfma.f32	s12, s15, s9
 8019470:	eef0 7a47 	vmov.f32	s15, s14
 8019474:	ee26 6a25 	vmul.f32	s12, s12, s11
 8019478:	ee26 7aa5 	vmul.f32	s14, s13, s11
 801947c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8019480:	ed85 6a00 	vstr	s12, [r5]
 8019484:	ed80 7a00 	vstr	s14, [r0]
 8019488:	edc7 7a00 	vstr	s15, [r7]
 801948c:	f47f aef9 	bne.w	8019282 <MotionFX_update+0xae>
 8019490:	2900      	cmp	r1, #0
 8019492:	d046      	beq.n	8019522 <MotionFX_update+0x34e>
 8019494:	eef0 6a46 	vmov.f32	s13, s12
 8019498:	eeb0 7a67 	vmov.f32	s14, s15
 801949c:	edd0 7a00 	vldr	s15, [r0]
 80194a0:	4914      	ldr	r1, [pc, #80]	; (80194f4 <MotionFX_update+0x320>)
 80194a2:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80194a6:	ee66 6a86 	vmul.f32	s13, s13, s12
 80194aa:	ee27 7a06 	vmul.f32	s14, s14, s12
 80194ae:	ee67 7a86 	vmul.f32	s15, s15, s12
 80194b2:	edc1 6a0b 	vstr	s13, [r1, #44]	; 0x2c
 80194b6:	ed81 7a0c 	vstr	s14, [r1, #48]	; 0x30
 80194ba:	edc1 7a0a 	vstr	s15, [r1, #40]	; 0x28
 80194be:	bb82      	cbnz	r2, 8019522 <MotionFX_update+0x34e>
 80194c0:	2100      	movs	r1, #0
 80194c2:	f8d6 2d4c 	ldr.w	r2, [r6, #3404]	; 0xd4c
 80194c6:	6001      	str	r1, [r0, #0]
 80194c8:	2000      	movs	r0, #0
 80194ca:	6029      	str	r1, [r5, #0]
 80194cc:	6039      	str	r1, [r7, #0]
 80194ce:	f8c6 0d58 	str.w	r0, [r6, #3416]	; 0xd58
 80194d2:	f8c6 0d54 	str.w	r0, [r6, #3412]	; 0xd54
 80194d6:	2a00      	cmp	r2, #0
 80194d8:	f47f aed3 	bne.w	8019282 <MotionFX_update+0xae>
 80194dc:	e75f      	b.n	801939e <MotionFX_update+0x1ca>
 80194de:	bf00      	nop
 80194e0:	200013c8 	.word	0x200013c8
 80194e4:	20001ed4 	.word	0x20001ed4
 80194e8:	200010f8 	.word	0x200010f8
 80194ec:	20001dc8 	.word	0x20001dc8
 80194f0:	20002124 	.word	0x20002124
 80194f4:	20001fcc 	.word	0x20001fcc
 80194f8:	20000cec 	.word	0x20000cec
 80194fc:	20000414 	.word	0x20000414
 8019500:	f5be 7ffa 	cmp.w	lr, #500	; 0x1f4
 8019504:	f8c6 ed58 	str.w	lr, [r6, #3416]	; 0xd58
 8019508:	f47f aec9 	bne.w	801929e <MotionFX_update+0xca>
 801950c:	4810      	ldr	r0, [pc, #64]	; (8019550 <MotionFX_update+0x37c>)
 801950e:	1d05      	adds	r5, r0, #4
 8019510:	f100 0708 	add.w	r7, r0, #8
 8019514:	2900      	cmp	r1, #0
 8019516:	d0d3      	beq.n	80194c0 <MotionFX_update+0x2ec>
 8019518:	edd5 6a00 	vldr	s13, [r5]
 801951c:	ed97 7a00 	vldr	s14, [r7]
 8019520:	e7bc      	b.n	801949c <MotionFX_update+0x2c8>
 8019522:	edd5 6a00 	vldr	s13, [r5]
 8019526:	ed97 7a00 	vldr	s14, [r7]
 801952a:	edd0 7a00 	vldr	s15, [r0]
 801952e:	4a09      	ldr	r2, [pc, #36]	; (8019554 <MotionFX_update+0x380>)
 8019530:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8019534:	ee66 6a86 	vmul.f32	s13, s13, s12
 8019538:	ee27 7a06 	vmul.f32	s14, s14, s12
 801953c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8019540:	edc2 6a0b 	vstr	s13, [r2, #44]	; 0x2c
 8019544:	ed82 7a0c 	vstr	s14, [r2, #48]	; 0x30
 8019548:	edc2 7a0a 	vstr	s15, [r2, #40]	; 0x28
 801954c:	e7b8      	b.n	80194c0 <MotionFX_update+0x2ec>
 801954e:	bf00      	nop
 8019550:	20002124 	.word	0x20002124
 8019554:	20001d8c 	.word	0x20001d8c

08019558 <MotionFX_propagate>:
 8019558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801955c:	ed2d 8b0a 	vpush	{d8-d12}
 8019560:	4d48      	ldr	r5, [pc, #288]	; (8019684 <MotionFX_propagate+0x12c>)
 8019562:	f895 3d49 	ldrb.w	r3, [r5, #3401]	; 0xd49
 8019566:	b095      	sub	sp, #84	; 0x54
 8019568:	b923      	cbnz	r3, 8019574 <MotionFX_propagate+0x1c>
 801956a:	b015      	add	sp, #84	; 0x54
 801956c:	ecbd 8b0a 	vpop	{d8-d12}
 8019570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019574:	edd1 4a03 	vldr	s9, [r1, #12]
 8019578:	680f      	ldr	r7, [r1, #0]
 801957a:	edd1 7a04 	vldr	s15, [r1, #16]
 801957e:	edd1 5a05 	vldr	s11, [r1, #20]
 8019582:	688b      	ldr	r3, [r1, #8]
 8019584:	ed91 5a06 	vldr	s10, [r1, #24]
 8019588:	ed91 4a07 	vldr	s8, [r1, #28]
 801958c:	ed91 6a08 	vldr	s12, [r1, #32]
 8019590:	ed92 9a00 	vldr	s18, [r2]
 8019594:	f605 360c 	addw	r6, r5, #2828	; 0xb0c
 8019598:	f605 08cc 	addw	r8, r5, #2252	; 0x8cc
 801959c:	4604      	mov	r4, r0
 801959e:	6848      	ldr	r0, [r1, #4]
 80195a0:	f8d5 1d50 	ldr.w	r1, [r5, #3408]	; 0xd50
 80195a4:	edc6 4a06 	vstr	s9, [r6, #24]
 80195a8:	60f7      	str	r7, [r6, #12]
 80195aa:	f8c8 700c 	str.w	r7, [r8, #12]
 80195ae:	ed86 5a09 	vstr	s10, [r6, #36]	; 0x24
 80195b2:	edc8 4a06 	vstr	s9, [r8, #24]
 80195b6:	ed88 5a09 	vstr	s10, [r8, #36]	; 0x24
 80195ba:	edc6 7a07 	vstr	s15, [r6, #28]
 80195be:	6130      	str	r0, [r6, #16]
 80195c0:	f8c8 0010 	str.w	r0, [r8, #16]
 80195c4:	ed86 4a0a 	vstr	s8, [r6, #40]	; 0x28
 80195c8:	edc8 7a07 	vstr	s15, [r8, #28]
 80195cc:	ed88 4a0a 	vstr	s8, [r8, #40]	; 0x28
 80195d0:	edc6 5a08 	vstr	s11, [r6, #32]
 80195d4:	6173      	str	r3, [r6, #20]
 80195d6:	f8c8 3014 	str.w	r3, [r8, #20]
 80195da:	ed86 6a0b 	vstr	s12, [r6, #44]	; 0x2c
 80195de:	edc8 5a08 	vstr	s11, [r8, #32]
 80195e2:	ed88 6a0b 	vstr	s12, [r8, #44]	; 0x2c
 80195e6:	2900      	cmp	r1, #0
 80195e8:	f040 81fa 	bne.w	80199e0 <MotionFX_propagate+0x488>
 80195ec:	f505 6744 	add.w	r7, r5, #3136	; 0xc40
 80195f0:	f8d5 3d4c 	ldr.w	r3, [r5, #3404]	; 0xd4c
 80195f4:	2b00      	cmp	r3, #0
 80195f6:	d149      	bne.n	801968c <MotionFX_propagate+0x134>
 80195f8:	4e23      	ldr	r6, [pc, #140]	; (8019688 <MotionFX_propagate+0x130>)
 80195fa:	69b3      	ldr	r3, [r6, #24]
 80195fc:	69f2      	ldr	r2, [r6, #28]
 80195fe:	69b9      	ldr	r1, [r7, #24]
 8019600:	64a3      	str	r3, [r4, #72]	; 0x48
 8019602:	69fb      	ldr	r3, [r7, #28]
 8019604:	64e2      	str	r2, [r4, #76]	; 0x4c
 8019606:	60e1      	str	r1, [r4, #12]
 8019608:	6a3a      	ldr	r2, [r7, #32]
 801960a:	6a31      	ldr	r1, [r6, #32]
 801960c:	6123      	str	r3, [r4, #16]
 801960e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8019610:	6521      	str	r1, [r4, #80]	; 0x50
 8019612:	6563      	str	r3, [r4, #84]	; 0x54
 8019614:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019616:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 801961a:	6162      	str	r2, [r4, #20]
 801961c:	68f2      	ldr	r2, [r6, #12]
 801961e:	61a1      	str	r1, [r4, #24]
 8019620:	f8d6 10a0 	ldr.w	r1, [r6, #160]	; 0xa0
 8019624:	63e2      	str	r2, [r4, #60]	; 0x3c
 8019626:	65a3      	str	r3, [r4, #88]	; 0x58
 8019628:	68fa      	ldr	r2, [r7, #12]
 801962a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801962e:	6661      	str	r1, [r4, #100]	; 0x64
 8019630:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8019634:	6022      	str	r2, [r4, #0]
 8019636:	61e3      	str	r3, [r4, #28]
 8019638:	6932      	ldr	r2, [r6, #16]
 801963a:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 801963e:	65e3      	str	r3, [r4, #92]	; 0x5c
 8019640:	62a1      	str	r1, [r4, #40]	; 0x28
 8019642:	6422      	str	r2, [r4, #64]	; 0x40
 8019644:	f8d6 20a4 	ldr.w	r2, [r6, #164]	; 0xa4
 8019648:	693b      	ldr	r3, [r7, #16]
 801964a:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 801964e:	66a2      	str	r2, [r4, #104]	; 0x68
 8019650:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8019654:	6063      	str	r3, [r4, #4]
 8019656:	6973      	ldr	r3, [r6, #20]
 8019658:	f8d6 509c 	ldr.w	r5, [r6, #156]	; 0x9c
 801965c:	f8d6 00a8 	ldr.w	r0, [r6, #168]	; 0xa8
 8019660:	6221      	str	r1, [r4, #32]
 8019662:	62e2      	str	r2, [r4, #44]	; 0x2c
 8019664:	6979      	ldr	r1, [r7, #20]
 8019666:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801966a:	6463      	str	r3, [r4, #68]	; 0x44
 801966c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8019670:	6323      	str	r3, [r4, #48]	; 0x30
 8019672:	6625      	str	r5, [r4, #96]	; 0x60
 8019674:	66e0      	str	r0, [r4, #108]	; 0x6c
 8019676:	60a1      	str	r1, [r4, #8]
 8019678:	6262      	str	r2, [r4, #36]	; 0x24
 801967a:	b015      	add	sp, #84	; 0x54
 801967c:	ecbd 8b0a 	vpop	{d8-d12}
 8019680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019684:	200013c8 	.word	0x200013c8
 8019688:	20001dc8 	.word	0x20001dc8
 801968c:	f995 3443 	ldrsb.w	r3, [r5, #1091]	; 0x443
 8019690:	ed98 0a07 	vldr	s0, [r8, #28]
 8019694:	f995 245b 	ldrsb.w	r2, [r5, #1115]	; 0x45b
 8019698:	ed98 3a06 	vldr	s6, [r8, #24]
 801969c:	ed98 6a08 	vldr	s12, [r8, #32]
 80196a0:	edd8 6a0a 	vldr	s13, [r8, #40]	; 0x28
 80196a4:	ed98 2a09 	vldr	s4, [r8, #36]	; 0x24
 80196a8:	f895 99fd 	ldrb.w	r9, [r5, #2557]	; 0x9fd
 80196ac:	ee0a 3a10 	vmov	s20, r3
 80196b0:	f995 3442 	ldrsb.w	r3, [r5, #1090]	; 0x442
 80196b4:	ee05 3a10 	vmov	s10, r3
 80196b8:	f995 3444 	ldrsb.w	r3, [r5, #1092]	; 0x444
 80196bc:	ee05 3a90 	vmov	s11, r3
 80196c0:	f995 343d 	ldrsb.w	r3, [r5, #1085]	; 0x43d
 80196c4:	eeb8 aaca 	vcvt.f32.s32	s20, s20
 80196c8:	ee07 3a90 	vmov	s15, r3
 80196cc:	f995 3440 	ldrsb.w	r3, [r5, #1088]	; 0x440
 80196d0:	ee09 2a90 	vmov	s19, r2
 80196d4:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 80196d8:	f995 243c 	ldrsb.w	r2, [r5, #1084]	; 0x43c
 80196dc:	ee2a aa00 	vmul.f32	s20, s20, s0
 80196e0:	ee07 3a10 	vmov	s14, r3
 80196e4:	f995 3455 	ldrsb.w	r3, [r5, #1109]	; 0x455
 80196e8:	eea3 aa05 	vfma.f32	s20, s6, s10
 80196ec:	ee0b 2a10 	vmov	s22, r2
 80196f0:	f995 243f 	ldrsb.w	r2, [r5, #1087]	; 0x43f
 80196f4:	ee08 3a10 	vmov	s16, r3
 80196f8:	f995 3458 	ldrsb.w	r3, [r5, #1112]	; 0x458
 80196fc:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8019700:	ee00 2a90 	vmov	s1, r2
 8019704:	f995 2454 	ldrsb.w	r2, [r5, #1108]	; 0x454
 8019708:	ee08 3a90 	vmov	s17, r3
 801970c:	2300      	movs	r3, #0
 801970e:	9308      	str	r3, [sp, #32]
 8019710:	ee01 2a10 	vmov	s2, r2
 8019714:	9309      	str	r3, [sp, #36]	; 0x24
 8019716:	f995 2457 	ldrsb.w	r2, [r5, #1111]	; 0x457
 801971a:	930a      	str	r3, [sp, #40]	; 0x28
 801971c:	eea6 aa25 	vfma.f32	s20, s12, s11
 8019720:	930c      	str	r3, [sp, #48]	; 0x30
 8019722:	930d      	str	r3, [sp, #52]	; 0x34
 8019724:	930e      	str	r3, [sp, #56]	; 0x38
 8019726:	f995 3456 	ldrsb.w	r3, [r5, #1110]	; 0x456
 801972a:	edd8 5a0b 	vldr	s11, [r8, #44]	; 0x2c
 801972e:	ed8d aa04 	vstr	s20, [sp, #16]
 8019732:	ee01 2a90 	vmov	s3, r2
 8019736:	ee04 3a90 	vmov	s9, r3
 801973a:	f995 243e 	ldrsb.w	r2, [r5, #1086]	; 0x43e
 801973e:	f995 3459 	ldrsb.w	r3, [r5, #1113]	; 0x459
 8019742:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8019746:	ee03 2a90 	vmov	s7, r2
 801974a:	ee05 3a10 	vmov	s10, r3
 801974e:	f995 2441 	ldrsb.w	r2, [r5, #1089]	; 0x441
 8019752:	edcd aa0b 	vstr	s21, [sp, #44]	; 0x2c
 8019756:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 801975a:	f995 345a 	ldrsb.w	r3, [r5, #1114]	; 0x45a
 801975e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019762:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019766:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 801976a:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 801976e:	ee02 3a90 	vmov	s5, r3
 8019772:	eef8 9ae9 	vcvt.f32.s32	s19, s19
 8019776:	eeb8 bacb 	vcvt.f32.s32	s22, s22
 801977a:	ee28 8a26 	vmul.f32	s16, s16, s13
 801977e:	ee68 8aa6 	vmul.f32	s17, s17, s13
 8019782:	ee67 7a80 	vmul.f32	s15, s15, s0
 8019786:	ee27 7a00 	vmul.f32	s14, s14, s0
 801978a:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801978e:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8019792:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8019796:	ee69 9aa6 	vmul.f32	s19, s19, s13
 801979a:	f995 345c 	ldrsb.w	r3, [r5, #1116]	; 0x45c
 801979e:	eef8 2ae2 	vcvt.f32.s32	s5, s5
 80197a2:	eeeb 7a03 	vfma.f32	s15, s22, s6
 80197a6:	ee04 2a10 	vmov	s8, r2
 80197aa:	eea3 7a20 	vfma.f32	s14, s6, s1
 80197ae:	eea1 8a02 	vfma.f32	s16, s2, s4
 80197b2:	eee2 8a21 	vfma.f32	s17, s4, s3
 80197b6:	ee06 3a90 	vmov	s13, r3
 80197ba:	eee2 9a22 	vfma.f32	s19, s4, s5
 80197be:	4b84      	ldr	r3, [pc, #528]	; (80199d0 <MotionFX_propagate+0x478>)
 80197c0:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 80197c4:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 80197c8:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 80197cc:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 80197d0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80197d4:	eee3 7a86 	vfma.f32	s15, s7, s12
 80197d8:	7b1b      	ldrb	r3, [r3, #12]
 80197da:	eea6 7a04 	vfma.f32	s14, s12, s8
 80197de:	eea4 8aa5 	vfma.f32	s16, s9, s11
 80197e2:	eee5 8a85 	vfma.f32	s17, s11, s10
 80197e6:	eee5 9aa6 	vfma.f32	s19, s11, s13
 80197ea:	eef1 ba47 	vneg.f32	s23, s14
 80197ee:	eeb1 8a48 	vneg.f32	s16, s16
 80197f2:	eef1 8a68 	vneg.f32	s17, s17
 80197f6:	eeb1 ba67 	vneg.f32	s22, s15
 80197fa:	edcd ba02 	vstr	s23, [sp, #8]
 80197fe:	ed8d 8a06 	vstr	s16, [sp, #24]
 8019802:	edcd 8a05 	vstr	s17, [sp, #20]
 8019806:	edcd 9a07 	vstr	s19, [sp, #28]
 801980a:	ed8d ba03 	vstr	s22, [sp, #12]
 801980e:	b1fb      	cbz	r3, 8019850 <MotionFX_propagate+0x2f8>
 8019810:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8019814:	eee7 7a07 	vfma.f32	s15, s14, s14
 8019818:	eeea 7a0a 	vfma.f32	s15, s20, s20
 801981c:	ee17 0a90 	vmov	r0, s15
 8019820:	f7e6 fe9a 	bl	8000558 <__aeabi_f2d>
 8019824:	f001 ff36 	bl	801b694 <sqrt>
 8019828:	f7e7 f9c6 	bl	8000bb8 <__aeabi_d2f>
 801982c:	ee0c 0a10 	vmov	s24, r0
 8019830:	f7e6 fe92 	bl	8000558 <__aeabi_f2d>
 8019834:	a364      	add	r3, pc, #400	; (adr r3, 80199c8 <MotionFX_propagate+0x470>)
 8019836:	e9d3 2300 	ldrd	r2, r3, [r3]
 801983a:	f7e7 f957 	bl	8000aec <__aeabi_dcmplt>
 801983e:	2800      	cmp	r0, #0
 8019840:	f000 8269 	beq.w	8019d16 <MotionFX_propagate+0x7be>
 8019844:	edcd ba02 	vstr	s23, [sp, #8]
 8019848:	ed8d ba03 	vstr	s22, [sp, #12]
 801984c:	ed8d aa04 	vstr	s20, [sp, #16]
 8019850:	f1b9 0f00 	cmp.w	r9, #0
 8019854:	f000 8257 	beq.w	8019d06 <MotionFX_propagate+0x7ae>
 8019858:	ee07 9a90 	vmov	s15, r9
 801985c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8019860:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019864:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8019868:	464a      	mov	r2, r9
 801986a:	ee68 8aa7 	vmul.f32	s17, s17, s15
 801986e:	ee28 8a27 	vmul.f32	s16, s16, s15
 8019872:	ee69 9aa7 	vmul.f32	s19, s19, s15
 8019876:	f895 39e0 	ldrb.w	r3, [r5, #2528]	; 0x9e0
 801987a:	edd8 6a0c 	vldr	s13, [r8, #48]	; 0x30
 801987e:	ed98 7a0d 	vldr	s14, [r8, #52]	; 0x34
 8019882:	edd8 7a0e 	vldr	s15, [r8, #56]	; 0x38
 8019886:	f895 09dc 	ldrb.w	r0, [r5, #2524]	; 0x9dc
 801988a:	3301      	adds	r3, #1
 801988c:	b2db      	uxtb	r3, r3
 801988e:	ee76 8aa8 	vadd.f32	s17, s13, s17
 8019892:	ee37 8a08 	vadd.f32	s16, s14, s16
 8019896:	ee77 9aa9 	vadd.f32	s19, s15, s19
 801989a:	fbb3 f1f2 	udiv	r1, r3, r2
 801989e:	fb02 3311 	mls	r3, r2, r1, r3
 80198a2:	f885 39e0 	strb.w	r3, [r5, #2528]	; 0x9e0
 80198a6:	edc8 8a0c 	vstr	s17, [r8, #48]	; 0x30
 80198aa:	ed88 8a0d 	vstr	s16, [r8, #52]	; 0x34
 80198ae:	edc8 9a0e 	vstr	s19, [r8, #56]	; 0x38
 80198b2:	2800      	cmp	r0, #0
 80198b4:	f040 8238 	bne.w	8019d28 <MotionFX_propagate+0x7d0>
 80198b8:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
 80198bc:	4a45      	ldr	r2, [pc, #276]	; (80199d4 <MotionFX_propagate+0x47c>)
 80198be:	f102 064c 	add.w	r6, r2, #76	; 0x4c
 80198c2:	4611      	mov	r1, r2
 80198c4:	f1a2 0010 	sub.w	r0, r2, #16
 80198c8:	f7f5 ffc6 	bl	800f858 <m_qmult_eml>
 80198cc:	f1a6 027c 	sub.w	r2, r6, #124	; 0x7c
 80198d0:	4611      	mov	r1, r2
 80198d2:	4650      	mov	r0, sl
 80198d4:	f7f5 ffc0 	bl	800f858 <m_qmult_eml>
 80198d8:	f106 0218 	add.w	r2, r6, #24
 80198dc:	f1a6 019c 	sub.w	r1, r6, #156	; 0x9c
 80198e0:	f1a6 004c 	sub.w	r0, r6, #76	; 0x4c
 80198e4:	f7f5 ffb8 	bl	800f858 <m_qmult_eml>
 80198e8:	f106 0218 	add.w	r2, r6, #24
 80198ec:	4611      	mov	r1, r2
 80198ee:	f1a6 007c 	sub.w	r0, r6, #124	; 0x7c
 80198f2:	f7f5 ffb1 	bl	800f858 <m_qmult_eml>
 80198f6:	edd6 8a07 	vldr	s17, [r6, #28]
 80198fa:	ed96 9a06 	vldr	s18, [r6, #24]
 80198fe:	ed96 8a08 	vldr	s16, [r6, #32]
 8019902:	edd6 9a09 	vldr	s19, [r6, #36]	; 0x24
 8019906:	ee28 7aa8 	vmul.f32	s14, s17, s17
 801990a:	eea9 7a09 	vfma.f32	s14, s18, s18
 801990e:	eea8 7a08 	vfma.f32	s14, s16, s16
 8019912:	eea9 7aa9 	vfma.f32	s14, s19, s19
 8019916:	ee17 0a10 	vmov	r0, s14
 801991a:	f7e6 fe1d 	bl	8000558 <__aeabi_f2d>
 801991e:	f001 feb9 	bl	801b694 <sqrt>
 8019922:	f7e7 f949 	bl	8000bb8 <__aeabi_d2f>
 8019926:	ee07 0a90 	vmov	s15, r0
 801992a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801992e:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8019932:	f895 39e8 	ldrb.w	r3, [r5, #2536]	; 0x9e8
 8019936:	2b01      	cmp	r3, #1
 8019938:	ee27 9a89 	vmul.f32	s18, s15, s18
 801993c:	ee67 8aa8 	vmul.f32	s17, s15, s17
 8019940:	ee27 8a88 	vmul.f32	s16, s15, s16
 8019944:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8019948:	ed86 9a06 	vstr	s18, [r6, #24]
 801994c:	edc6 8a07 	vstr	s17, [r6, #28]
 8019950:	ed86 8a08 	vstr	s16, [r6, #32]
 8019954:	edc6 7a09 	vstr	s15, [r6, #36]	; 0x24
 8019958:	f000 82af 	beq.w	8019eba <MotionFX_propagate+0x962>
 801995c:	f8df b07c 	ldr.w	fp, [pc, #124]	; 80199dc <MotionFX_propagate+0x484>
 8019960:	f895 19fe 	ldrb.w	r1, [r5, #2558]	; 0x9fe
 8019964:	9101      	str	r1, [sp, #4]
 8019966:	f1ab 030c 	sub.w	r3, fp, #12
 801996a:	f1ab 0294 	sub.w	r2, fp, #148	; 0x94
 801996e:	f8cd b000 	str.w	fp, [sp]
 8019972:	f1ab 0088 	sub.w	r0, fp, #136	; 0x88
 8019976:	a902      	add	r1, sp, #8
 8019978:	f7f7 fcc6 	bl	8011308 <output_update>
 801997c:	f895 29fc 	ldrb.w	r2, [r5, #2556]	; 0x9fc
 8019980:	2300      	movs	r3, #0
 8019982:	f885 39de 	strb.w	r3, [r5, #2526]	; 0x9de
 8019986:	0793      	lsls	r3, r2, #30
 8019988:	d409      	bmi.n	801999e <MotionFX_propagate+0x446>
 801998a:	f895 19e0 	ldrb.w	r1, [r5, #2528]	; 0x9e0
 801998e:	fbb1 f3f9 	udiv	r3, r1, r9
 8019992:	fb09 1913 	mls	r9, r9, r3, r1
 8019996:	f019 0fff 	tst.w	r9, #255	; 0xff
 801999a:	f000 81ed 	beq.w	8019d78 <MotionFX_propagate+0x820>
 801999e:	4a0e      	ldr	r2, [pc, #56]	; (80199d8 <MotionFX_propagate+0x480>)
 80199a0:	4650      	mov	r0, sl
 80199a2:	4611      	mov	r1, r2
 80199a4:	f7f5 ff58 	bl	800f858 <m_qmult_eml>
 80199a8:	f895 39fe 	ldrb.w	r3, [r5, #2558]	; 0x9fe
 80199ac:	69b2      	ldr	r2, [r6, #24]
 80199ae:	2b01      	cmp	r3, #1
 80199b0:	f47f ae23 	bne.w	80195fa <MotionFX_propagate+0xa2>
 80199b4:	edd6 7a08 	vldr	s15, [r6, #32]
 80199b8:	69f3      	ldr	r3, [r6, #28]
 80199ba:	61b3      	str	r3, [r6, #24]
 80199bc:	eef1 7a67 	vneg.f32	s15, s15
 80199c0:	61f2      	str	r2, [r6, #28]
 80199c2:	edc6 7a08 	vstr	s15, [r6, #32]
 80199c6:	e618      	b.n	80195fa <MotionFX_propagate+0xa2>
 80199c8:	a0b5ed8d 	.word	0xa0b5ed8d
 80199cc:	3eb0c6f7 	.word	0x3eb0c6f7
 80199d0:	20000000 	.word	0x20000000
 80199d4:	20001d7c 	.word	0x20001d7c
 80199d8:	20001d3c 	.word	0x20001d3c
 80199dc:	20001e68 	.word	0x20001e68
 80199e0:	f995 3419 	ldrsb.w	r3, [r5, #1049]	; 0x419
 80199e4:	f995 2420 	ldrsb.w	r2, [r5, #1056]	; 0x420
 80199e8:	f895 9c3d 	ldrb.w	r9, [r5, #3133]	; 0xc3d
 80199ec:	ee06 3a90 	vmov	s13, r3
 80199f0:	f995 341c 	ldrsb.w	r3, [r5, #1052]	; 0x41c
 80199f4:	ee07 3a10 	vmov	s14, r3
 80199f8:	f995 3434 	ldrsb.w	r3, [r5, #1076]	; 0x434
 80199fc:	ee08 3a90 	vmov	s17, r3
 8019a00:	f995 3431 	ldrsb.w	r3, [r5, #1073]	; 0x431
 8019a04:	ee08 3a10 	vmov	s16, r3
 8019a08:	f995 3418 	ldrsb.w	r3, [r5, #1048]	; 0x418
 8019a0c:	ee03 3a90 	vmov	s7, r3
 8019a10:	f995 341f 	ldrsb.w	r3, [r5, #1055]	; 0x41f
 8019a14:	ee09 3a90 	vmov	s19, r3
 8019a18:	f995 3437 	ldrsb.w	r3, [r5, #1079]	; 0x437
 8019a1c:	ee0a 3a10 	vmov	s20, r3
 8019a20:	f995 341b 	ldrsb.w	r3, [r5, #1051]	; 0x41b
 8019a24:	ee00 3a90 	vmov	s1, r3
 8019a28:	f995 3433 	ldrsb.w	r3, [r5, #1075]	; 0x433
 8019a2c:	ee01 3a10 	vmov	s2, r3
 8019a30:	f995 3430 	ldrsb.w	r3, [r5, #1072]	; 0x430
 8019a34:	ee01 3a90 	vmov	s3, r3
 8019a38:	f995 341a 	ldrsb.w	r3, [r5, #1050]	; 0x41a
 8019a3c:	ee03 3a10 	vmov	s6, r3
 8019a40:	f995 341e 	ldrsb.w	r3, [r5, #1054]	; 0x41e
 8019a44:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8019a48:	ee02 3a10 	vmov	s4, r3
 8019a4c:	f995 3436 	ldrsb.w	r3, [r5, #1078]	; 0x436
 8019a50:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8019a54:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019a58:	eef8 9ae9 	vcvt.f32.s32	s19, s19
 8019a5c:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 8019a60:	ee02 3a90 	vmov	s5, r3
 8019a64:	f995 341d 	ldrsb.w	r3, [r5, #1053]	; 0x41d
 8019a68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019a6c:	ee69 9aa7 	vmul.f32	s19, s19, s15
 8019a70:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 8019a74:	eef0 7a66 	vmov.f32	s15, s13
 8019a78:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8019a7c:	eeb8 aaca 	vcvt.f32.s32	s20, s20
 8019a80:	eee3 7aa4 	vfma.f32	s15, s7, s9
 8019a84:	ee03 3a90 	vmov	s7, r3
 8019a88:	f995 3435 	ldrsb.w	r3, [r5, #1077]	; 0x435
 8019a8c:	ee68 8a84 	vmul.f32	s17, s17, s8
 8019a90:	ee28 8a04 	vmul.f32	s16, s16, s8
 8019a94:	ee2a aa04 	vmul.f32	s20, s20, s8
 8019a98:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8019a9c:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8019aa0:	eef8 2ae2 	vcvt.f32.s32	s5, s5
 8019aa4:	ee04 3a10 	vmov	s8, r3
 8019aa8:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8019aac:	f995 3432 	ldrsb.w	r3, [r5, #1074]	; 0x432
 8019ab0:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 8019ab4:	eee1 8a05 	vfma.f32	s17, s2, s10
 8019ab8:	eea1 8a85 	vfma.f32	s16, s3, s10
 8019abc:	eea2 aa85 	vfma.f32	s20, s5, s10
 8019ac0:	ee05 2a10 	vmov	s10, r2
 8019ac4:	f995 2438 	ldrsb.w	r2, [r5, #1080]	; 0x438
 8019ac8:	eea0 7aa4 	vfma.f32	s14, s1, s9
 8019acc:	eee2 9a24 	vfma.f32	s19, s4, s9
 8019ad0:	ee04 3a90 	vmov	s9, r3
 8019ad4:	ee06 2a90 	vmov	s13, r2
 8019ad8:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8019adc:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 8019ae0:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 8019ae4:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8019ae8:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8019aec:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8019af0:	eee5 7a83 	vfma.f32	s15, s11, s6
 8019af4:	4a9a      	ldr	r2, [pc, #616]	; (8019d60 <MotionFX_propagate+0x808>)
 8019af6:	eea5 7aa3 	vfma.f32	s14, s11, s7
 8019afa:	2300      	movs	r3, #0
 8019afc:	9308      	str	r3, [sp, #32]
 8019afe:	eee6 8a04 	vfma.f32	s17, s12, s8
 8019b02:	9309      	str	r3, [sp, #36]	; 0x24
 8019b04:	930a      	str	r3, [sp, #40]	; 0x28
 8019b06:	eea6 8a24 	vfma.f32	s16, s12, s9
 8019b0a:	930c      	str	r3, [sp, #48]	; 0x30
 8019b0c:	930d      	str	r3, [sp, #52]	; 0x34
 8019b0e:	eee5 9a85 	vfma.f32	s19, s11, s10
 8019b12:	930e      	str	r3, [sp, #56]	; 0x38
 8019b14:	eea6 aa26 	vfma.f32	s20, s12, s13
 8019b18:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
 8019b1c:	eef1 aa67 	vneg.f32	s21, s15
 8019b20:	eeb1 ba47 	vneg.f32	s22, s14
 8019b24:	eef1 8a68 	vneg.f32	s17, s17
 8019b28:	eeb1 8a48 	vneg.f32	s16, s16
 8019b2c:	edcd 9a04 	vstr	s19, [sp, #16]
 8019b30:	edcd aa03 	vstr	s21, [sp, #12]
 8019b34:	ed8d ba02 	vstr	s22, [sp, #8]
 8019b38:	edcd 8a05 	vstr	s17, [sp, #20]
 8019b3c:	ed8d aa07 	vstr	s20, [sp, #28]
 8019b40:	edcd ba0b 	vstr	s23, [sp, #44]	; 0x2c
 8019b44:	edcd ba0f 	vstr	s23, [sp, #60]	; 0x3c
 8019b48:	ed8d 8a06 	vstr	s16, [sp, #24]
 8019b4c:	f892 38e0 	ldrb.w	r3, [r2, #2272]	; 0x8e0
 8019b50:	b1eb      	cbz	r3, 8019b8e <MotionFX_propagate+0x636>
 8019b52:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8019b56:	eee7 7a07 	vfma.f32	s15, s14, s14
 8019b5a:	eee9 7aa9 	vfma.f32	s15, s19, s19
 8019b5e:	ee17 0a90 	vmov	r0, s15
 8019b62:	f7e6 fcf9 	bl	8000558 <__aeabi_f2d>
 8019b66:	f001 fd95 	bl	801b694 <sqrt>
 8019b6a:	f7e7 f825 	bl	8000bb8 <__aeabi_d2f>
 8019b6e:	ee07 0a90 	vmov	s15, r0
 8019b72:	eecb 7aa7 	vdiv.f32	s15, s23, s15
 8019b76:	ee2b ba27 	vmul.f32	s22, s22, s15
 8019b7a:	ee6a aaa7 	vmul.f32	s21, s21, s15
 8019b7e:	ee69 9aa7 	vmul.f32	s19, s19, s15
 8019b82:	ed8d ba02 	vstr	s22, [sp, #8]
 8019b86:	edcd aa03 	vstr	s21, [sp, #12]
 8019b8a:	edcd 9a04 	vstr	s19, [sp, #16]
 8019b8e:	f1b9 0f00 	cmp.w	r9, #0
 8019b92:	f000 80bc 	beq.w	8019d0e <MotionFX_propagate+0x7b6>
 8019b96:	ee07 9a90 	vmov	s15, r9
 8019b9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8019b9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019ba2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8019ba6:	464a      	mov	r2, r9
 8019ba8:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8019bac:	ee28 8a27 	vmul.f32	s16, s16, s15
 8019bb0:	ee2a aa27 	vmul.f32	s20, s20, s15
 8019bb4:	f895 3c20 	ldrb.w	r3, [r5, #3104]	; 0xc20
 8019bb8:	edd6 6a0c 	vldr	s13, [r6, #48]	; 0x30
 8019bbc:	ed96 7a0d 	vldr	s14, [r6, #52]	; 0x34
 8019bc0:	edd6 7a0e 	vldr	s15, [r6, #56]	; 0x38
 8019bc4:	f895 0c1c 	ldrb.w	r0, [r5, #3100]	; 0xc1c
 8019bc8:	3301      	adds	r3, #1
 8019bca:	b2db      	uxtb	r3, r3
 8019bcc:	ee76 8aa8 	vadd.f32	s17, s13, s17
 8019bd0:	ee37 8a08 	vadd.f32	s16, s14, s16
 8019bd4:	ee37 aa8a 	vadd.f32	s20, s15, s20
 8019bd8:	fbb3 f1f2 	udiv	r1, r3, r2
 8019bdc:	fb02 3311 	mls	r3, r2, r1, r3
 8019be0:	f885 3c20 	strb.w	r3, [r5, #3104]	; 0xc20
 8019be4:	edc6 8a0c 	vstr	s17, [r6, #48]	; 0x30
 8019be8:	ed86 8a0d 	vstr	s16, [r6, #52]	; 0x34
 8019bec:	ed86 aa0e 	vstr	s20, [r6, #56]	; 0x38
 8019bf0:	2800      	cmp	r0, #0
 8019bf2:	f040 80a7 	bne.w	8019d44 <MotionFX_propagate+0x7ec>
 8019bf6:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
 8019bfa:	4a5a      	ldr	r2, [pc, #360]	; (8019d64 <MotionFX_propagate+0x80c>)
 8019bfc:	f102 074c 	add.w	r7, r2, #76	; 0x4c
 8019c00:	4611      	mov	r1, r2
 8019c02:	f1a2 0010 	sub.w	r0, r2, #16
 8019c06:	f7f5 fe27 	bl	800f858 <m_qmult_eml>
 8019c0a:	f1a7 027c 	sub.w	r2, r7, #124	; 0x7c
 8019c0e:	4611      	mov	r1, r2
 8019c10:	4650      	mov	r0, sl
 8019c12:	f7f5 fe21 	bl	800f858 <m_qmult_eml>
 8019c16:	f107 0218 	add.w	r2, r7, #24
 8019c1a:	f1a7 019c 	sub.w	r1, r7, #156	; 0x9c
 8019c1e:	f1a7 004c 	sub.w	r0, r7, #76	; 0x4c
 8019c22:	f7f5 fe19 	bl	800f858 <m_qmult_eml>
 8019c26:	f107 0218 	add.w	r2, r7, #24
 8019c2a:	4611      	mov	r1, r2
 8019c2c:	f1a7 007c 	sub.w	r0, r7, #124	; 0x7c
 8019c30:	f7f5 fe12 	bl	800f858 <m_qmult_eml>
 8019c34:	edd7 8a07 	vldr	s17, [r7, #28]
 8019c38:	edd7 9a06 	vldr	s19, [r7, #24]
 8019c3c:	ed97 8a08 	vldr	s16, [r7, #32]
 8019c40:	ed97 aa09 	vldr	s20, [r7, #36]	; 0x24
 8019c44:	ee28 7aa8 	vmul.f32	s14, s17, s17
 8019c48:	eea9 7aa9 	vfma.f32	s14, s19, s19
 8019c4c:	eea8 7a08 	vfma.f32	s14, s16, s16
 8019c50:	eeaa 7a0a 	vfma.f32	s14, s20, s20
 8019c54:	ee17 0a10 	vmov	r0, s14
 8019c58:	f7e6 fc7e 	bl	8000558 <__aeabi_f2d>
 8019c5c:	f001 fd1a 	bl	801b694 <sqrt>
 8019c60:	f7e6 ffaa 	bl	8000bb8 <__aeabi_d2f>
 8019c64:	ee07 0a90 	vmov	s15, r0
 8019c68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019c6c:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8019c70:	f895 3c28 	ldrb.w	r3, [r5, #3112]	; 0xc28
 8019c74:	2b01      	cmp	r3, #1
 8019c76:	ee67 9aa9 	vmul.f32	s19, s15, s19
 8019c7a:	ee67 8aa8 	vmul.f32	s17, s15, s17
 8019c7e:	ee27 8a88 	vmul.f32	s16, s15, s16
 8019c82:	ee67 7a8a 	vmul.f32	s15, s15, s20
 8019c86:	edc7 9a06 	vstr	s19, [r7, #24]
 8019c8a:	edc7 8a07 	vstr	s17, [r7, #28]
 8019c8e:	ed87 8a08 	vstr	s16, [r7, #32]
 8019c92:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 8019c96:	f000 81b7 	beq.w	801a008 <MotionFX_propagate+0xab0>
 8019c9a:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 8019d74 <MotionFX_propagate+0x81c>
 8019c9e:	f895 1c3e 	ldrb.w	r1, [r5, #3134]	; 0xc3e
 8019ca2:	9101      	str	r1, [sp, #4]
 8019ca4:	f1ab 030c 	sub.w	r3, fp, #12
 8019ca8:	f1ab 0294 	sub.w	r2, fp, #148	; 0x94
 8019cac:	a902      	add	r1, sp, #8
 8019cae:	f8cd b000 	str.w	fp, [sp]
 8019cb2:	f1ab 0088 	sub.w	r0, fp, #136	; 0x88
 8019cb6:	f7f7 fb27 	bl	8011308 <output_update>
 8019cba:	f895 2c3c 	ldrb.w	r2, [r5, #3132]	; 0xc3c
 8019cbe:	2300      	movs	r3, #0
 8019cc0:	0791      	lsls	r1, r2, #30
 8019cc2:	f885 3c1e 	strb.w	r3, [r5, #3102]	; 0xc1e
 8019cc6:	d409      	bmi.n	8019cdc <MotionFX_propagate+0x784>
 8019cc8:	f895 1c20 	ldrb.w	r1, [r5, #3104]	; 0xc20
 8019ccc:	fbb1 f3f9 	udiv	r3, r1, r9
 8019cd0:	fb09 1913 	mls	r9, r9, r3, r1
 8019cd4:	f019 0fff 	tst.w	r9, #255	; 0xff
 8019cd8:	f000 80f6 	beq.w	8019ec8 <MotionFX_propagate+0x970>
 8019cdc:	4a22      	ldr	r2, [pc, #136]	; (8019d68 <MotionFX_propagate+0x810>)
 8019cde:	4650      	mov	r0, sl
 8019ce0:	4611      	mov	r1, r2
 8019ce2:	f7f5 fdb9 	bl	800f858 <m_qmult_eml>
 8019ce6:	f895 3c3e 	ldrb.w	r3, [r5, #3134]	; 0xc3e
 8019cea:	2b01      	cmp	r3, #1
 8019cec:	f47f ac80 	bne.w	80195f0 <MotionFX_propagate+0x98>
 8019cf0:	edd7 7a08 	vldr	s15, [r7, #32]
 8019cf4:	69ba      	ldr	r2, [r7, #24]
 8019cf6:	69fb      	ldr	r3, [r7, #28]
 8019cf8:	61bb      	str	r3, [r7, #24]
 8019cfa:	eef1 7a67 	vneg.f32	s15, s15
 8019cfe:	61fa      	str	r2, [r7, #28]
 8019d00:	edc7 7a08 	vstr	s15, [r7, #32]
 8019d04:	e474      	b.n	80195f0 <MotionFX_propagate+0x98>
 8019d06:	2201      	movs	r2, #1
 8019d08:	f885 29fd 	strb.w	r2, [r5, #2557]	; 0x9fd
 8019d0c:	e5b3      	b.n	8019876 <MotionFX_propagate+0x31e>
 8019d0e:	2201      	movs	r2, #1
 8019d10:	f885 2c3d 	strb.w	r2, [r5, #3133]	; 0xc3d
 8019d14:	e74e      	b.n	8019bb4 <MotionFX_propagate+0x65c>
 8019d16:	eeca 7a8c 	vdiv.f32	s15, s21, s24
 8019d1a:	ee6b baa7 	vmul.f32	s23, s23, s15
 8019d1e:	ee2b ba27 	vmul.f32	s22, s22, s15
 8019d22:	ee2a aa27 	vmul.f32	s20, s20, s15
 8019d26:	e58d      	b.n	8019844 <MotionFX_propagate+0x2ec>
 8019d28:	4b10      	ldr	r3, [pc, #64]	; (8019d6c <MotionFX_propagate+0x814>)
 8019d2a:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
 8019d2e:	eeb0 0a49 	vmov.f32	s0, s18
 8019d32:	f1a3 020c 	sub.w	r2, r3, #12
 8019d36:	4618      	mov	r0, r3
 8019d38:	f8cd a000 	str.w	sl, [sp]
 8019d3c:	a905      	add	r1, sp, #20
 8019d3e:	f7f6 f823 	bl	800fd88 <SpacePointGyroProp>
 8019d42:	e5bb      	b.n	80198bc <MotionFX_propagate+0x364>
 8019d44:	4b0a      	ldr	r3, [pc, #40]	; (8019d70 <MotionFX_propagate+0x818>)
 8019d46:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
 8019d4a:	f1a3 020c 	sub.w	r2, r3, #12
 8019d4e:	4618      	mov	r0, r3
 8019d50:	f8cd a000 	str.w	sl, [sp]
 8019d54:	eeb0 0a49 	vmov.f32	s0, s18
 8019d58:	a905      	add	r1, sp, #20
 8019d5a:	f7f6 f815 	bl	800fd88 <SpacePointGyroProp>
 8019d5e:	e74c      	b.n	8019bfa <MotionFX_propagate+0x6a2>
 8019d60:	20000000 	.word	0x20000000
 8019d64:	20001fbc 	.word	0x20001fbc
 8019d68:	20001f7c 	.word	0x20001f7c
 8019d6c:	20001d0c 	.word	0x20001d0c
 8019d70:	20001f4c 	.word	0x20001f4c
 8019d74:	200020a8 	.word	0x200020a8
 8019d78:	f8d8 3088 	ldr.w	r3, [r8, #136]	; 0x88
 8019d7c:	f8d8 008c 	ldr.w	r0, [r8, #140]	; 0x8c
 8019d80:	f8d8 1090 	ldr.w	r1, [r8, #144]	; 0x90
 8019d84:	f8c8 3098 	str.w	r3, [r8, #152]	; 0x98
 8019d88:	f042 0201 	orr.w	r2, r2, #1
 8019d8c:	f8d8 3094 	ldr.w	r3, [r8, #148]	; 0x94
 8019d90:	f8c8 009c 	str.w	r0, [r8, #156]	; 0x9c
 8019d94:	f885 29fc 	strb.w	r2, [r5, #2556]	; 0x9fc
 8019d98:	4650      	mov	r0, sl
 8019d9a:	aa10      	add	r2, sp, #64	; 0x40
 8019d9c:	f8c8 10a0 	str.w	r1, [r8, #160]	; 0xa0
 8019da0:	f5ab 7196 	sub.w	r1, fp, #300	; 0x12c
 8019da4:	f8c8 30a4 	str.w	r3, [r8, #164]	; 0xa4
 8019da8:	f7f5 fd56 	bl	800f858 <m_qmult_eml>
 8019dac:	aa08      	add	r2, sp, #32
 8019dae:	f5ab 71a6 	sub.w	r1, fp, #332	; 0x14c
 8019db2:	f5ab 7086 	sub.w	r0, fp, #268	; 0x10c
 8019db6:	f7f5 fd4f 	bl	800f858 <m_qmult_eml>
 8019dba:	aa08      	add	r2, sp, #32
 8019dbc:	4611      	mov	r1, r2
 8019dbe:	a810      	add	r0, sp, #64	; 0x40
 8019dc0:	f7f5 fd4a 	bl	800f858 <m_qmult_eml>
 8019dc4:	ed9d 9a09 	vldr	s18, [sp, #36]	; 0x24
 8019dc8:	eddd 9a08 	vldr	s19, [sp, #32]
 8019dcc:	eddd 8a0a 	vldr	s17, [sp, #40]	; 0x28
 8019dd0:	ed9d 8a0b 	vldr	s16, [sp, #44]	; 0x2c
 8019dd4:	ee69 7a09 	vmul.f32	s15, s18, s18
 8019dd8:	eee9 7aa9 	vfma.f32	s15, s19, s19
 8019ddc:	eee8 7aa8 	vfma.f32	s15, s17, s17
 8019de0:	eee8 7a08 	vfma.f32	s15, s16, s16
 8019de4:	ee17 0a90 	vmov	r0, s15
 8019de8:	f7e6 fbb6 	bl	8000558 <__aeabi_f2d>
 8019dec:	f001 fc52 	bl	801b694 <sqrt>
 8019df0:	f7e6 fee2 	bl	8000bb8 <__aeabi_d2f>
 8019df4:	f895 39fd 	ldrb.w	r3, [r5, #2557]	; 0x9fd
 8019df8:	ed98 6a33 	vldr	s12, [r8, #204]	; 0xcc
 8019dfc:	edd8 6a32 	vldr	s13, [r8, #200]	; 0xc8
 8019e00:	edd8 4a34 	vldr	s9, [r8, #208]	; 0xd0
 8019e04:	f8d8 10ac 	ldr.w	r1, [r8, #172]	; 0xac
 8019e08:	f8d8 20b0 	ldr.w	r2, [r8, #176]	; 0xb0
 8019e0c:	f8c8 10bc 	str.w	r1, [r8, #188]	; 0xbc
 8019e10:	ee07 3a10 	vmov	s14, r3
 8019e14:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8019e18:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8019e1c:	eec5 7a07 	vdiv.f32	s15, s10, s14
 8019e20:	f8d8 30a8 	ldr.w	r3, [r8, #168]	; 0xa8
 8019e24:	f8c8 30b8 	str.w	r3, [r8, #184]	; 0xb8
 8019e28:	f8d8 30b4 	ldr.w	r3, [r8, #180]	; 0xb4
 8019e2c:	f8c8 20c0 	str.w	r2, [r8, #192]	; 0xc0
 8019e30:	f8c8 30c4 	str.w	r3, [r8, #196]	; 0xc4
 8019e34:	ee07 0a10 	vmov	s14, r0
 8019e38:	eec5 5a07 	vdiv.f32	s11, s10, s14
 8019e3c:	ee27 6a86 	vmul.f32	s12, s15, s12
 8019e40:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8019e44:	ee26 7a06 	vmul.f32	s14, s12, s12
 8019e48:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8019e4c:	eea6 7aa6 	vfma.f32	s14, s13, s13
 8019e50:	ee69 9aa5 	vmul.f32	s19, s19, s11
 8019e54:	eea7 7aa7 	vfma.f32	s14, s15, s15
 8019e58:	ee29 9a25 	vmul.f32	s18, s18, s11
 8019e5c:	ee68 8aa5 	vmul.f32	s17, s17, s11
 8019e60:	ee28 8a25 	vmul.f32	s16, s16, s11
 8019e64:	eeb4 7ac5 	vcmpe.f32	s14, s10
 8019e68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019e6c:	edc8 9a1e 	vstr	s19, [r8, #120]	; 0x78
 8019e70:	ed88 9a1f 	vstr	s18, [r8, #124]	; 0x7c
 8019e74:	edc8 8a20 	vstr	s17, [r8, #128]	; 0x80
 8019e78:	ed88 8a21 	vstr	s16, [r8, #132]	; 0x84
 8019e7c:	ed88 6a37 	vstr	s12, [r8, #220]	; 0xdc
 8019e80:	edc8 6a36 	vstr	s13, [r8, #216]	; 0xd8
 8019e84:	edc8 7a38 	vstr	s15, [r8, #224]	; 0xe0
 8019e88:	f100 80c5 	bmi.w	801a016 <MotionFX_propagate+0xabe>
 8019e8c:	2000      	movs	r0, #0
 8019e8e:	2300      	movs	r3, #0
 8019e90:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8019e94:	f8c8 00e4 	str.w	r0, [r8, #228]	; 0xe4
 8019e98:	f8c8 30a8 	str.w	r3, [r8, #168]	; 0xa8
 8019e9c:	f8c8 30ac 	str.w	r3, [r8, #172]	; 0xac
 8019ea0:	f8c8 30b0 	str.w	r3, [r8, #176]	; 0xb0
 8019ea4:	f8c8 30e8 	str.w	r3, [r8, #232]	; 0xe8
 8019ea8:	f8c8 30ec 	str.w	r3, [r8, #236]	; 0xec
 8019eac:	f8c8 30f0 	str.w	r3, [r8, #240]	; 0xf0
 8019eb0:	f8c8 20b4 	str.w	r2, [r8, #180]	; 0xb4
 8019eb4:	f8c8 20f4 	str.w	r2, [r8, #244]	; 0xf4
 8019eb8:	e576      	b.n	80199a8 <MotionFX_propagate+0x450>
 8019eba:	2300      	movs	r3, #0
 8019ebc:	ed86 7a09 	vstr	s14, [r6, #36]	; 0x24
 8019ec0:	61b3      	str	r3, [r6, #24]
 8019ec2:	61f3      	str	r3, [r6, #28]
 8019ec4:	6233      	str	r3, [r6, #32]
 8019ec6:	e549      	b.n	801995c <MotionFX_propagate+0x404>
 8019ec8:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
 8019ecc:	f8d6 008c 	ldr.w	r0, [r6, #140]	; 0x8c
 8019ed0:	f8d6 1090 	ldr.w	r1, [r6, #144]	; 0x90
 8019ed4:	f8c6 3098 	str.w	r3, [r6, #152]	; 0x98
 8019ed8:	f042 0201 	orr.w	r2, r2, #1
 8019edc:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8019ee0:	f8c6 009c 	str.w	r0, [r6, #156]	; 0x9c
 8019ee4:	f885 2c3c 	strb.w	r2, [r5, #3132]	; 0xc3c
 8019ee8:	4650      	mov	r0, sl
 8019eea:	aa10      	add	r2, sp, #64	; 0x40
 8019eec:	f8c6 10a0 	str.w	r1, [r6, #160]	; 0xa0
 8019ef0:	f5ab 7196 	sub.w	r1, fp, #300	; 0x12c
 8019ef4:	f8c6 30a4 	str.w	r3, [r6, #164]	; 0xa4
 8019ef8:	f7f5 fcae 	bl	800f858 <m_qmult_eml>
 8019efc:	aa08      	add	r2, sp, #32
 8019efe:	f5ab 71a6 	sub.w	r1, fp, #332	; 0x14c
 8019f02:	f5ab 7086 	sub.w	r0, fp, #268	; 0x10c
 8019f06:	f7f5 fca7 	bl	800f858 <m_qmult_eml>
 8019f0a:	aa08      	add	r2, sp, #32
 8019f0c:	4611      	mov	r1, r2
 8019f0e:	a810      	add	r0, sp, #64	; 0x40
 8019f10:	f7f5 fca2 	bl	800f858 <m_qmult_eml>
 8019f14:	eddd 8a09 	vldr	s17, [sp, #36]	; 0x24
 8019f18:	eddd 9a08 	vldr	s19, [sp, #32]
 8019f1c:	ed9d 8a0a 	vldr	s16, [sp, #40]	; 0x28
 8019f20:	ed9d aa0b 	vldr	s20, [sp, #44]	; 0x2c
 8019f24:	ee68 7aa8 	vmul.f32	s15, s17, s17
 8019f28:	eee9 7aa9 	vfma.f32	s15, s19, s19
 8019f2c:	eee8 7a08 	vfma.f32	s15, s16, s16
 8019f30:	eeea 7a0a 	vfma.f32	s15, s20, s20
 8019f34:	ee17 0a90 	vmov	r0, s15
 8019f38:	f7e6 fb0e 	bl	8000558 <__aeabi_f2d>
 8019f3c:	f001 fbaa 	bl	801b694 <sqrt>
 8019f40:	f7e6 fe3a 	bl	8000bb8 <__aeabi_d2f>
 8019f44:	f895 3c3d 	ldrb.w	r3, [r5, #3133]	; 0xc3d
 8019f48:	edd6 5a33 	vldr	s11, [r6, #204]	; 0xcc
 8019f4c:	ed96 6a32 	vldr	s12, [r6, #200]	; 0xc8
 8019f50:	edd6 4a34 	vldr	s9, [r6, #208]	; 0xd0
 8019f54:	f8d6 10ac 	ldr.w	r1, [r6, #172]	; 0xac
 8019f58:	f8d6 20b0 	ldr.w	r2, [r6, #176]	; 0xb0
 8019f5c:	f8c6 10bc 	str.w	r1, [r6, #188]	; 0xbc
 8019f60:	ee07 3a10 	vmov	s14, r3
 8019f64:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8019f68:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8019f6c:	eec5 7a07 	vdiv.f32	s15, s10, s14
 8019f70:	f8d6 30a8 	ldr.w	r3, [r6, #168]	; 0xa8
 8019f74:	f8c6 30b8 	str.w	r3, [r6, #184]	; 0xb8
 8019f78:	f8d6 30b4 	ldr.w	r3, [r6, #180]	; 0xb4
 8019f7c:	f8c6 20c0 	str.w	r2, [r6, #192]	; 0xc0
 8019f80:	f8c6 30c4 	str.w	r3, [r6, #196]	; 0xc4
 8019f84:	ee07 0a10 	vmov	s14, r0
 8019f88:	ee85 7a07 	vdiv.f32	s14, s10, s14
 8019f8c:	ee67 5aa5 	vmul.f32	s11, s15, s11
 8019f90:	ee27 6a86 	vmul.f32	s12, s15, s12
 8019f94:	ee65 6aa5 	vmul.f32	s13, s11, s11
 8019f98:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8019f9c:	eee6 6a06 	vfma.f32	s13, s12, s12
 8019fa0:	ee67 9a29 	vmul.f32	s19, s14, s19
 8019fa4:	eee7 6aa7 	vfma.f32	s13, s15, s15
 8019fa8:	ee67 8a28 	vmul.f32	s17, s14, s17
 8019fac:	ee27 8a08 	vmul.f32	s16, s14, s16
 8019fb0:	eef4 6ac5 	vcmpe.f32	s13, s10
 8019fb4:	ee27 7a0a 	vmul.f32	s14, s14, s20
 8019fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019fbc:	edc6 9a1e 	vstr	s19, [r6, #120]	; 0x78
 8019fc0:	edc6 8a1f 	vstr	s17, [r6, #124]	; 0x7c
 8019fc4:	ed86 8a20 	vstr	s16, [r6, #128]	; 0x80
 8019fc8:	ed86 7a21 	vstr	s14, [r6, #132]	; 0x84
 8019fcc:	edc6 5a37 	vstr	s11, [r6, #220]	; 0xdc
 8019fd0:	ed86 6a36 	vstr	s12, [r6, #216]	; 0xd8
 8019fd4:	edc6 7a38 	vstr	s15, [r6, #224]	; 0xe0
 8019fd8:	d428      	bmi.n	801a02c <MotionFX_propagate+0xad4>
 8019fda:	2000      	movs	r0, #0
 8019fdc:	2300      	movs	r3, #0
 8019fde:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8019fe2:	f8c6 00e4 	str.w	r0, [r6, #228]	; 0xe4
 8019fe6:	f8c6 30a8 	str.w	r3, [r6, #168]	; 0xa8
 8019fea:	f8c6 30ac 	str.w	r3, [r6, #172]	; 0xac
 8019fee:	f8c6 30b0 	str.w	r3, [r6, #176]	; 0xb0
 8019ff2:	f8c6 30e8 	str.w	r3, [r6, #232]	; 0xe8
 8019ff6:	f8c6 30ec 	str.w	r3, [r6, #236]	; 0xec
 8019ffa:	f8c6 30f0 	str.w	r3, [r6, #240]	; 0xf0
 8019ffe:	f8c6 20b4 	str.w	r2, [r6, #180]	; 0xb4
 801a002:	f8c6 20f4 	str.w	r2, [r6, #244]	; 0xf4
 801a006:	e66e      	b.n	8019ce6 <MotionFX_propagate+0x78e>
 801a008:	2300      	movs	r3, #0
 801a00a:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 801a00e:	61bb      	str	r3, [r7, #24]
 801a010:	61fb      	str	r3, [r7, #28]
 801a012:	623b      	str	r3, [r7, #32]
 801a014:	e641      	b.n	8019c9a <MotionFX_propagate+0x742>
 801a016:	ee75 7a47 	vsub.f32	s15, s10, s14
 801a01a:	ee17 0a90 	vmov	r0, s15
 801a01e:	f7e6 fa9b 	bl	8000558 <__aeabi_f2d>
 801a022:	f001 fb37 	bl	801b694 <sqrt>
 801a026:	f7e6 fdc7 	bl	8000bb8 <__aeabi_d2f>
 801a02a:	e730      	b.n	8019e8e <MotionFX_propagate+0x936>
 801a02c:	ee75 7a66 	vsub.f32	s15, s10, s13
 801a030:	ee17 0a90 	vmov	r0, s15
 801a034:	f7e6 fa90 	bl	8000558 <__aeabi_f2d>
 801a038:	f001 fb2c 	bl	801b694 <sqrt>
 801a03c:	f7e6 fdbc 	bl	8000bb8 <__aeabi_d2f>
 801a040:	e7cc      	b.n	8019fdc <MotionFX_propagate+0xa84>
 801a042:	bf00      	nop

0801a044 <MotionFX_MagCal_init>:
 801a044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a048:	4c50      	ldr	r4, [pc, #320]	; (801a18c <MotionFX_MagCal_init+0x148>)
 801a04a:	f894 3d49 	ldrb.w	r3, [r4, #3401]	; 0xd49
 801a04e:	b90b      	cbnz	r3, 801a054 <MotionFX_MagCal_init+0x10>
 801a050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a054:	1e43      	subs	r3, r0, #1
 801a056:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801a05a:	d2f9      	bcs.n	801a050 <MotionFX_MagCal_init+0xc>
 801a05c:	460e      	mov	r6, r1
 801a05e:	4605      	mov	r5, r0
 801a060:	b207      	sxth	r7, r0
 801a062:	2900      	cmp	r1, #0
 801a064:	f000 8089 	beq.w	801a17a <MotionFX_MagCal_init+0x136>
 801a068:	f504 688c 	add.w	r8, r4, #1120	; 0x460
 801a06c:	2600      	movs	r6, #0
 801a06e:	4640      	mov	r0, r8
 801a070:	f7f5 fca0 	bl	800f9b4 <MEMS_DataBuffInit>
 801a074:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801a078:	4631      	mov	r1, r6
 801a07a:	f44f 7248 	mov.w	r2, #800	; 0x320
 801a07e:	f504 60a0 	add.w	r0, r4, #1280	; 0x500
 801a082:	f8a4 34b0 	strh.w	r3, [r4, #1200]	; 0x4b0
 801a086:	f884 64a8 	strb.w	r6, [r4, #1192]	; 0x4a8
 801a08a:	f8c4 64ac 	str.w	r6, [r4, #1196]	; 0x4ac
 801a08e:	f884 6474 	strb.w	r6, [r4, #1140]	; 0x474
 801a092:	f884 6475 	strb.w	r6, [r4, #1141]	; 0x475
 801a096:	f000 f9b6 	bl	801a406 <memset>
 801a09a:	225f      	movs	r2, #95	; 0x5f
 801a09c:	f44f 7080 	mov.w	r0, #256	; 0x100
 801a0a0:	23ff      	movs	r3, #255	; 0xff
 801a0a2:	4631      	mov	r1, r6
 801a0a4:	f884 2501 	strb.w	r2, [r4, #1281]	; 0x501
 801a0a8:	f44f 6c70 	mov.w	ip, #3840	; 0xf00
 801a0ac:	222e      	movs	r2, #46	; 0x2e
 801a0ae:	f8a4 04b4 	strh.w	r0, [r4, #1204]	; 0x4b4
 801a0b2:	f204 40ce 	addw	r0, r4, #1230	; 0x4ce
 801a0b6:	f884 3502 	strb.w	r3, [r4, #1282]	; 0x502
 801a0ba:	f884 3486 	strb.w	r3, [r4, #1158]	; 0x486
 801a0be:	f8c4 6478 	str.w	r6, [r4, #1144]	; 0x478
 801a0c2:	f8c4 647c 	str.w	r6, [r4, #1148]	; 0x47c
 801a0c6:	f8c4 6480 	str.w	r6, [r4, #1152]	; 0x480
 801a0ca:	f8a4 c484 	strh.w	ip, [r4, #1156]	; 0x484
 801a0ce:	f000 f99a 	bl	801a406 <memset>
 801a0d2:	f1a5 030a 	sub.w	r3, r5, #10
 801a0d6:	b29b      	uxth	r3, r3
 801a0d8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801a0dc:	2101      	movs	r1, #1
 801a0de:	2b32      	cmp	r3, #50	; 0x32
 801a0e0:	f884 64cc 	strb.w	r6, [r4, #1228]	; 0x4cc
 801a0e4:	f8c8 207c 	str.w	r2, [r8, #124]	; 0x7c
 801a0e8:	f8c8 208c 	str.w	r2, [r8, #140]	; 0x8c
 801a0ec:	f8c8 209c 	str.w	r2, [r8, #156]	; 0x9c
 801a0f0:	f884 14cd 	strb.w	r1, [r4, #1229]	; 0x4cd
 801a0f4:	d801      	bhi.n	801a0fa <MotionFX_MagCal_init+0xb6>
 801a0f6:	f884 14a8 	strb.w	r1, [r4, #1192]	; 0x4a8
 801a0fa:	2100      	movs	r1, #0
 801a0fc:	4824      	ldr	r0, [pc, #144]	; (801a190 <MotionFX_MagCal_init+0x14c>)
 801a0fe:	f7f5 ffd9 	bl	80100b4 <MEMSLoadMagCalNVM>
 801a102:	f9b4 3462 	ldrsh.w	r3, [r4, #1122]	; 0x462
 801a106:	4a23      	ldr	r2, [pc, #140]	; (801a194 <MotionFX_MagCal_init+0x150>)
 801a108:	1b5b      	subs	r3, r3, r5
 801a10a:	ee07 3a90 	vmov	s15, r3
 801a10e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a112:	23c8      	movs	r3, #200	; 0xc8
 801a114:	eef0 7ae7 	vabs.f32	s15, s15
 801a118:	fb93 f3f5 	sdiv	r3, r3, r5
 801a11c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a120:	b2db      	uxtb	r3, r3
 801a122:	2b0f      	cmp	r3, #15
 801a124:	eef4 7ac7 	vcmpe.f32	s15, s14
 801a128:	bf28      	it	cs
 801a12a:	230f      	movcs	r3, #15
 801a12c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a130:	f884 3d6e 	strb.w	r3, [r4, #3438]	; 0xd6e
 801a134:	f8c2 50c4 	str.w	r5, [r2, #196]	; 0xc4
 801a138:	dc0e      	bgt.n	801a158 <MotionFX_MagCal_init+0x114>
 801a13a:	edd8 7a01 	vldr	s15, [r8, #4]
 801a13e:	eddf 6a16 	vldr	s13, [pc, #88]	; 801a198 <MotionFX_MagCal_init+0x154>
 801a142:	ed9f 7a16 	vldr	s14, [pc, #88]	; 801a19c <MotionFX_MagCal_init+0x158>
 801a146:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801a14a:	eef0 7ae7 	vabs.f32	s15, s15
 801a14e:	eef4 7ac7 	vcmpe.f32	s15, s14
 801a152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a156:	dd0b      	ble.n	801a170 <MotionFX_MagCal_init+0x12c>
 801a158:	480d      	ldr	r0, [pc, #52]	; (801a190 <MotionFX_MagCal_init+0x14c>)
 801a15a:	f7f5 fc27 	bl	800f9ac <MEMS_EmptyDataFrame>
 801a15e:	4a10      	ldr	r2, [pc, #64]	; (801a1a0 <MotionFX_MagCal_init+0x15c>)
 801a160:	f8a4 7462 	strh.w	r7, [r4, #1122]	; 0x462
 801a164:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 801a168:	f8c8 2004 	str.w	r2, [r8, #4]
 801a16c:	f8a4 3460 	strh.w	r3, [r4, #1120]	; 0x460
 801a170:	2300      	movs	r3, #0
 801a172:	f884 3de8 	strb.w	r3, [r4, #3560]	; 0xde8
 801a176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a17a:	f204 4074 	addw	r0, r4, #1140	; 0x474
 801a17e:	f7f5 ffdb 	bl	8010138 <MEMSSaveMagCalNVM>
 801a182:	f504 688c 	add.w	r8, r4, #1120	; 0x460
 801a186:	f884 64a8 	strb.w	r6, [r4, #1192]	; 0x4a8
 801a18a:	e7ba      	b.n	801a102 <MotionFX_MagCal_init+0xbe>
 801a18c:	200013c8 	.word	0x200013c8
 801a190:	20001828 	.word	0x20001828
 801a194:	200010f8 	.word	0x200010f8
 801a198:	3dcccccd 	.word	0x3dcccccd
 801a19c:	3c23d70a 	.word	0x3c23d70a
 801a1a0:	3dcccccd 	.word	0x3dcccccd

0801a1a4 <MotionFX_MagCal_run>:
 801a1a4:	4b4c      	ldr	r3, [pc, #304]	; (801a2d8 <MotionFX_MagCal_run+0x134>)
 801a1a6:	f893 2d49 	ldrb.w	r2, [r3, #3401]	; 0xd49
 801a1aa:	2a00      	cmp	r2, #0
 801a1ac:	d07f      	beq.n	801a2ae <MotionFX_MagCal_run+0x10a>
 801a1ae:	ed90 7a00 	vldr	s14, [r0]
 801a1b2:	eddf 7a4a 	vldr	s15, [pc, #296]	; 801a2dc <MotionFX_MagCal_run+0x138>
 801a1b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a1b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 801a1bc:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801a1c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a1c4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801a1c8:	bfac      	ite	ge
 801a1ca:	ee77 7a87 	vaddge.f32	s15, s15, s14
 801a1ce:	ee77 7ac7 	vsublt.f32	s15, s15, s14
 801a1d2:	b085      	sub	sp, #20
 801a1d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a1d8:	ed90 7a01 	vldr	s14, [r0, #4]
 801a1dc:	edcd 7a01 	vstr	s15, [sp, #4]
 801a1e0:	eddf 7a3e 	vldr	s15, [pc, #248]	; 801a2dc <MotionFX_MagCal_run+0x138>
 801a1e4:	f893 2de8 	ldrb.w	r2, [r3, #3560]	; 0xde8
 801a1e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 801a1ec:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801a1f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a1f4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801a1f8:	bfac      	ite	ge
 801a1fa:	ee77 7a87 	vaddge.f32	s15, s15, s14
 801a1fe:	ee77 7ac7 	vsublt.f32	s15, s15, s14
 801a202:	ed90 7a02 	vldr	s14, [r0, #8]
 801a206:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a20a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801a20e:	edcd 7a02 	vstr	s15, [sp, #8]
 801a212:	eddf 7a32 	vldr	s15, [pc, #200]	; 801a2dc <MotionFX_MagCal_run+0x138>
 801a216:	ee67 7a27 	vmul.f32	s15, s14, s15
 801a21a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a21e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801a222:	bfac      	ite	ge
 801a224:	ee77 7a87 	vaddge.f32	s15, s15, s14
 801a228:	ee77 7ac7 	vsublt.f32	s15, s15, s14
 801a22c:	e9dd 4601 	ldrd	r4, r6, [sp, #4]
 801a230:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a234:	edcd 7a03 	vstr	s15, [sp, #12]
 801a238:	ee17 5a90 	vmov	r5, s15
 801a23c:	b37a      	cbz	r2, 801a29e <MotionFX_MagCal_run+0xfa>
 801a23e:	4828      	ldr	r0, [pc, #160]	; (801a2e0 <MotionFX_MagCal_run+0x13c>)
 801a240:	00d1      	lsls	r1, r2, #3
 801a242:	f8d0 00c4 	ldr.w	r0, [r0, #196]	; 0xc4
 801a246:	185f      	adds	r7, r3, r1
 801a248:	fb10 f002 	smulbb	r0, r0, r2
 801a24c:	f8a7 0d70 	strh.w	r0, [r7, #3440]	; 0xd70
 801a250:	f647 70fe 	movw	r0, #32766	; 0x7ffe
 801a254:	4f23      	ldr	r7, [pc, #140]	; (801a2e4 <MotionFX_MagCal_run+0x140>)
 801a256:	4284      	cmp	r4, r0
 801a258:	bfa8      	it	ge
 801a25a:	4604      	movge	r4, r0
 801a25c:	4285      	cmp	r5, r0
 801a25e:	bfa8      	it	ge
 801a260:	4605      	movge	r5, r0
 801a262:	42bc      	cmp	r4, r7
 801a264:	bfb8      	it	lt
 801a266:	463c      	movlt	r4, r7
 801a268:	42be      	cmp	r6, r7
 801a26a:	db03      	blt.n	801a274 <MotionFX_MagCal_run+0xd0>
 801a26c:	42b0      	cmp	r0, r6
 801a26e:	bfa8      	it	ge
 801a270:	4630      	movge	r0, r6
 801a272:	b200      	sxth	r0, r0
 801a274:	4f1b      	ldr	r7, [pc, #108]	; (801a2e4 <MotionFX_MagCal_run+0x140>)
 801a276:	f893 6d6e 	ldrb.w	r6, [r3, #3438]	; 0xd6e
 801a27a:	3201      	adds	r2, #1
 801a27c:	4419      	add	r1, r3
 801a27e:	b2d2      	uxtb	r2, r2
 801a280:	42bd      	cmp	r5, r7
 801a282:	bfb8      	it	lt
 801a284:	463d      	movlt	r5, r7
 801a286:	4296      	cmp	r6, r2
 801a288:	f883 2de8 	strb.w	r2, [r3, #3560]	; 0xde8
 801a28c:	f8a1 4d72 	strh.w	r4, [r1, #3442]	; 0xd72
 801a290:	f8a1 0d74 	strh.w	r0, [r1, #3444]	; 0xd74
 801a294:	f8a1 5d76 	strh.w	r5, [r1, #3446]	; 0xd76
 801a298:	d00a      	beq.n	801a2b0 <MotionFX_MagCal_run+0x10c>
 801a29a:	b005      	add	sp, #20
 801a29c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a29e:	68c1      	ldr	r1, [r0, #12]
 801a2a0:	f8c3 1d68 	str.w	r1, [r3, #3432]	; 0xd68
 801a2a4:	2101      	movs	r1, #1
 801a2a6:	f883 1d6c 	strb.w	r1, [r3, #3436]	; 0xd6c
 801a2aa:	4611      	mov	r1, r2
 801a2ac:	e7d0      	b.n	801a250 <MotionFX_MagCal_run+0xac>
 801a2ae:	4770      	bx	lr
 801a2b0:	490d      	ldr	r1, [pc, #52]	; (801a2e8 <MotionFX_MagCal_run+0x144>)
 801a2b2:	2200      	movs	r2, #0
 801a2b4:	f6a1 1008 	subw	r0, r1, #2312	; 0x908
 801a2b8:	f883 2de8 	strb.w	r2, [r3, #3560]	; 0xde8
 801a2bc:	f7f5 fbc0 	bl	800fa40 <updateProcBuffer_Temp>
 801a2c0:	490a      	ldr	r1, [pc, #40]	; (801a2ec <MotionFX_MagCal_run+0x148>)
 801a2c2:	f101 0048 	add.w	r0, r1, #72	; 0x48
 801a2c6:	f7f5 fb81 	bl	800f9cc <MEMS_checkTimeToRun>
 801a2ca:	2801      	cmp	r0, #1
 801a2cc:	d1e5      	bne.n	801a29a <MotionFX_MagCal_run+0xf6>
 801a2ce:	b005      	add	sp, #20
 801a2d0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801a2d4:	f7f7 ba8c 	b.w	80117f0 <MEMS_runMagCal.constprop.14>
 801a2d8:	200013c8 	.word	0x200013c8
 801a2dc:	43fa0000 	.word	0x43fa0000
 801a2e0:	200010f8 	.word	0x200010f8
 801a2e4:	ffff8002 	.word	0xffff8002
 801a2e8:	20002130 	.word	0x20002130
 801a2ec:	20001828 	.word	0x20001828

0801a2f0 <MotionFX_MagCal_getParams>:
 801a2f0:	4b15      	ldr	r3, [pc, #84]	; (801a348 <MotionFX_MagCal_getParams+0x58>)
 801a2f2:	f893 2d49 	ldrb.w	r2, [r3, #3401]	; 0xd49
 801a2f6:	b902      	cbnz	r2, 801a2fa <MotionFX_MagCal_getParams+0xa>
 801a2f8:	4770      	bx	lr
 801a2fa:	f503 628c 	add.w	r2, r3, #1120	; 0x460
 801a2fe:	edd2 6a1c 	vldr	s13, [r2, #112]	; 0x70
 801a302:	ed92 7a1d 	vldr	s14, [r2, #116]	; 0x74
 801a306:	edd2 7a1e 	vldr	s15, [r2, #120]	; 0x78
 801a30a:	ed9f 6a10 	vldr	s12, [pc, #64]	; 801a34c <MotionFX_MagCal_getParams+0x5c>
 801a30e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 801a312:	7303      	strb	r3, [r0, #12]
 801a314:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 801a318:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801a31c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a320:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801a324:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a328:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a32c:	ee66 6a86 	vmul.f32	s13, s13, s12
 801a330:	ee27 7a06 	vmul.f32	s14, s14, s12
 801a334:	ee67 7a86 	vmul.f32	s15, s15, s12
 801a338:	edc0 6a00 	vstr	s13, [r0]
 801a33c:	ed80 7a01 	vstr	s14, [r0, #4]
 801a340:	edc0 7a02 	vstr	s15, [r0, #8]
 801a344:	4770      	bx	lr
 801a346:	bf00      	nop
 801a348:	200013c8 	.word	0x200013c8
 801a34c:	3b03126f 	.word	0x3b03126f

0801a350 <MotionFX_GetLibVersion>:
 801a350:	4b10      	ldr	r3, [pc, #64]	; (801a394 <MotionFX_GetLibVersion+0x44>)
 801a352:	f893 3d49 	ldrb.w	r3, [r3, #3401]	; 0xd49
 801a356:	b90b      	cbnz	r3, 801a35c <MotionFX_GetLibVersion+0xc>
 801a358:	4618      	mov	r0, r3
 801a35a:	4770      	bx	lr
 801a35c:	b470      	push	{r4, r5, r6}
 801a35e:	4e0e      	ldr	r6, [pc, #56]	; (801a398 <MotionFX_GetLibVersion+0x48>)
 801a360:	4605      	mov	r5, r0
 801a362:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801a364:	b08b      	sub	sp, #44	; 0x2c
 801a366:	ac01      	add	r4, sp, #4
 801a368:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a36a:	6833      	ldr	r3, [r6, #0]
 801a36c:	f824 3b02 	strh.w	r3, [r4], #2
 801a370:	0c1b      	lsrs	r3, r3, #16
 801a372:	7023      	strb	r3, [r4, #0]
 801a374:	ac01      	add	r4, sp, #4
 801a376:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a378:	8826      	ldrh	r6, [r4, #0]
 801a37a:	60eb      	str	r3, [r5, #12]
 801a37c:	78a4      	ldrb	r4, [r4, #2]
 801a37e:	6028      	str	r0, [r5, #0]
 801a380:	2312      	movs	r3, #18
 801a382:	4618      	mov	r0, r3
 801a384:	6069      	str	r1, [r5, #4]
 801a386:	60aa      	str	r2, [r5, #8]
 801a388:	822e      	strh	r6, [r5, #16]
 801a38a:	74ac      	strb	r4, [r5, #18]
 801a38c:	b00b      	add	sp, #44	; 0x2c
 801a38e:	bc70      	pop	{r4, r5, r6}
 801a390:	4770      	bx	lr
 801a392:	bf00      	nop
 801a394:	200013c8 	.word	0x200013c8
 801a398:	0801d584 	.word	0x0801d584

0801a39c <__errno>:
 801a39c:	4b01      	ldr	r3, [pc, #4]	; (801a3a4 <__errno+0x8>)
 801a39e:	6818      	ldr	r0, [r3, #0]
 801a3a0:	4770      	bx	lr
 801a3a2:	bf00      	nop
 801a3a4:	20001344 	.word	0x20001344

0801a3a8 <__libc_init_array>:
 801a3a8:	b570      	push	{r4, r5, r6, lr}
 801a3aa:	4e0d      	ldr	r6, [pc, #52]	; (801a3e0 <__libc_init_array+0x38>)
 801a3ac:	4c0d      	ldr	r4, [pc, #52]	; (801a3e4 <__libc_init_array+0x3c>)
 801a3ae:	1ba4      	subs	r4, r4, r6
 801a3b0:	10a4      	asrs	r4, r4, #2
 801a3b2:	2500      	movs	r5, #0
 801a3b4:	42a5      	cmp	r5, r4
 801a3b6:	d109      	bne.n	801a3cc <__libc_init_array+0x24>
 801a3b8:	4e0b      	ldr	r6, [pc, #44]	; (801a3e8 <__libc_init_array+0x40>)
 801a3ba:	4c0c      	ldr	r4, [pc, #48]	; (801a3ec <__libc_init_array+0x44>)
 801a3bc:	f002 fe36 	bl	801d02c <_init>
 801a3c0:	1ba4      	subs	r4, r4, r6
 801a3c2:	10a4      	asrs	r4, r4, #2
 801a3c4:	2500      	movs	r5, #0
 801a3c6:	42a5      	cmp	r5, r4
 801a3c8:	d105      	bne.n	801a3d6 <__libc_init_array+0x2e>
 801a3ca:	bd70      	pop	{r4, r5, r6, pc}
 801a3cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801a3d0:	4798      	blx	r3
 801a3d2:	3501      	adds	r5, #1
 801a3d4:	e7ee      	b.n	801a3b4 <__libc_init_array+0xc>
 801a3d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801a3da:	4798      	blx	r3
 801a3dc:	3501      	adds	r5, #1
 801a3de:	e7f2      	b.n	801a3c6 <__libc_init_array+0x1e>
 801a3e0:	0801da98 	.word	0x0801da98
 801a3e4:	0801da98 	.word	0x0801da98
 801a3e8:	0801da98 	.word	0x0801da98
 801a3ec:	0801da9c 	.word	0x0801da9c

0801a3f0 <memcpy>:
 801a3f0:	b510      	push	{r4, lr}
 801a3f2:	1e43      	subs	r3, r0, #1
 801a3f4:	440a      	add	r2, r1
 801a3f6:	4291      	cmp	r1, r2
 801a3f8:	d100      	bne.n	801a3fc <memcpy+0xc>
 801a3fa:	bd10      	pop	{r4, pc}
 801a3fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a400:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a404:	e7f7      	b.n	801a3f6 <memcpy+0x6>

0801a406 <memset>:
 801a406:	4402      	add	r2, r0
 801a408:	4603      	mov	r3, r0
 801a40a:	4293      	cmp	r3, r2
 801a40c:	d100      	bne.n	801a410 <memset+0xa>
 801a40e:	4770      	bx	lr
 801a410:	f803 1b01 	strb.w	r1, [r3], #1
 801a414:	e7f9      	b.n	801a40a <memset+0x4>
	...

0801a418 <iprintf>:
 801a418:	b40f      	push	{r0, r1, r2, r3}
 801a41a:	4b0a      	ldr	r3, [pc, #40]	; (801a444 <iprintf+0x2c>)
 801a41c:	b513      	push	{r0, r1, r4, lr}
 801a41e:	681c      	ldr	r4, [r3, #0]
 801a420:	b124      	cbz	r4, 801a42c <iprintf+0x14>
 801a422:	69a3      	ldr	r3, [r4, #24]
 801a424:	b913      	cbnz	r3, 801a42c <iprintf+0x14>
 801a426:	4620      	mov	r0, r4
 801a428:	f000 fa7a 	bl	801a920 <__sinit>
 801a42c:	ab05      	add	r3, sp, #20
 801a42e:	9a04      	ldr	r2, [sp, #16]
 801a430:	68a1      	ldr	r1, [r4, #8]
 801a432:	9301      	str	r3, [sp, #4]
 801a434:	4620      	mov	r0, r4
 801a436:	f000 fc3b 	bl	801acb0 <_vfiprintf_r>
 801a43a:	b002      	add	sp, #8
 801a43c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a440:	b004      	add	sp, #16
 801a442:	4770      	bx	lr
 801a444:	20001344 	.word	0x20001344

0801a448 <_puts_r>:
 801a448:	b570      	push	{r4, r5, r6, lr}
 801a44a:	460e      	mov	r6, r1
 801a44c:	4605      	mov	r5, r0
 801a44e:	b118      	cbz	r0, 801a458 <_puts_r+0x10>
 801a450:	6983      	ldr	r3, [r0, #24]
 801a452:	b90b      	cbnz	r3, 801a458 <_puts_r+0x10>
 801a454:	f000 fa64 	bl	801a920 <__sinit>
 801a458:	69ab      	ldr	r3, [r5, #24]
 801a45a:	68ac      	ldr	r4, [r5, #8]
 801a45c:	b913      	cbnz	r3, 801a464 <_puts_r+0x1c>
 801a45e:	4628      	mov	r0, r5
 801a460:	f000 fa5e 	bl	801a920 <__sinit>
 801a464:	4b23      	ldr	r3, [pc, #140]	; (801a4f4 <_puts_r+0xac>)
 801a466:	429c      	cmp	r4, r3
 801a468:	d117      	bne.n	801a49a <_puts_r+0x52>
 801a46a:	686c      	ldr	r4, [r5, #4]
 801a46c:	89a3      	ldrh	r3, [r4, #12]
 801a46e:	071b      	lsls	r3, r3, #28
 801a470:	d51d      	bpl.n	801a4ae <_puts_r+0x66>
 801a472:	6923      	ldr	r3, [r4, #16]
 801a474:	b1db      	cbz	r3, 801a4ae <_puts_r+0x66>
 801a476:	3e01      	subs	r6, #1
 801a478:	68a3      	ldr	r3, [r4, #8]
 801a47a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801a47e:	3b01      	subs	r3, #1
 801a480:	60a3      	str	r3, [r4, #8]
 801a482:	b9e9      	cbnz	r1, 801a4c0 <_puts_r+0x78>
 801a484:	2b00      	cmp	r3, #0
 801a486:	da2e      	bge.n	801a4e6 <_puts_r+0x9e>
 801a488:	4622      	mov	r2, r4
 801a48a:	210a      	movs	r1, #10
 801a48c:	4628      	mov	r0, r5
 801a48e:	f000 f897 	bl	801a5c0 <__swbuf_r>
 801a492:	3001      	adds	r0, #1
 801a494:	d011      	beq.n	801a4ba <_puts_r+0x72>
 801a496:	200a      	movs	r0, #10
 801a498:	e011      	b.n	801a4be <_puts_r+0x76>
 801a49a:	4b17      	ldr	r3, [pc, #92]	; (801a4f8 <_puts_r+0xb0>)
 801a49c:	429c      	cmp	r4, r3
 801a49e:	d101      	bne.n	801a4a4 <_puts_r+0x5c>
 801a4a0:	68ac      	ldr	r4, [r5, #8]
 801a4a2:	e7e3      	b.n	801a46c <_puts_r+0x24>
 801a4a4:	4b15      	ldr	r3, [pc, #84]	; (801a4fc <_puts_r+0xb4>)
 801a4a6:	429c      	cmp	r4, r3
 801a4a8:	bf08      	it	eq
 801a4aa:	68ec      	ldreq	r4, [r5, #12]
 801a4ac:	e7de      	b.n	801a46c <_puts_r+0x24>
 801a4ae:	4621      	mov	r1, r4
 801a4b0:	4628      	mov	r0, r5
 801a4b2:	f000 f8d7 	bl	801a664 <__swsetup_r>
 801a4b6:	2800      	cmp	r0, #0
 801a4b8:	d0dd      	beq.n	801a476 <_puts_r+0x2e>
 801a4ba:	f04f 30ff 	mov.w	r0, #4294967295
 801a4be:	bd70      	pop	{r4, r5, r6, pc}
 801a4c0:	2b00      	cmp	r3, #0
 801a4c2:	da04      	bge.n	801a4ce <_puts_r+0x86>
 801a4c4:	69a2      	ldr	r2, [r4, #24]
 801a4c6:	429a      	cmp	r2, r3
 801a4c8:	dc06      	bgt.n	801a4d8 <_puts_r+0x90>
 801a4ca:	290a      	cmp	r1, #10
 801a4cc:	d004      	beq.n	801a4d8 <_puts_r+0x90>
 801a4ce:	6823      	ldr	r3, [r4, #0]
 801a4d0:	1c5a      	adds	r2, r3, #1
 801a4d2:	6022      	str	r2, [r4, #0]
 801a4d4:	7019      	strb	r1, [r3, #0]
 801a4d6:	e7cf      	b.n	801a478 <_puts_r+0x30>
 801a4d8:	4622      	mov	r2, r4
 801a4da:	4628      	mov	r0, r5
 801a4dc:	f000 f870 	bl	801a5c0 <__swbuf_r>
 801a4e0:	3001      	adds	r0, #1
 801a4e2:	d1c9      	bne.n	801a478 <_puts_r+0x30>
 801a4e4:	e7e9      	b.n	801a4ba <_puts_r+0x72>
 801a4e6:	6823      	ldr	r3, [r4, #0]
 801a4e8:	200a      	movs	r0, #10
 801a4ea:	1c5a      	adds	r2, r3, #1
 801a4ec:	6022      	str	r2, [r4, #0]
 801a4ee:	7018      	strb	r0, [r3, #0]
 801a4f0:	e7e5      	b.n	801a4be <_puts_r+0x76>
 801a4f2:	bf00      	nop
 801a4f4:	0801d5f8 	.word	0x0801d5f8
 801a4f8:	0801d618 	.word	0x0801d618
 801a4fc:	0801d5d8 	.word	0x0801d5d8

0801a500 <puts>:
 801a500:	4b02      	ldr	r3, [pc, #8]	; (801a50c <puts+0xc>)
 801a502:	4601      	mov	r1, r0
 801a504:	6818      	ldr	r0, [r3, #0]
 801a506:	f7ff bf9f 	b.w	801a448 <_puts_r>
 801a50a:	bf00      	nop
 801a50c:	20001344 	.word	0x20001344

0801a510 <srand>:
 801a510:	b538      	push	{r3, r4, r5, lr}
 801a512:	4b0d      	ldr	r3, [pc, #52]	; (801a548 <srand+0x38>)
 801a514:	681c      	ldr	r4, [r3, #0]
 801a516:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801a518:	4605      	mov	r5, r0
 801a51a:	b97b      	cbnz	r3, 801a53c <srand+0x2c>
 801a51c:	2018      	movs	r0, #24
 801a51e:	f000 faed 	bl	801aafc <malloc>
 801a522:	4a0a      	ldr	r2, [pc, #40]	; (801a54c <srand+0x3c>)
 801a524:	4b0a      	ldr	r3, [pc, #40]	; (801a550 <srand+0x40>)
 801a526:	63a0      	str	r0, [r4, #56]	; 0x38
 801a528:	e9c0 2300 	strd	r2, r3, [r0]
 801a52c:	4b09      	ldr	r3, [pc, #36]	; (801a554 <srand+0x44>)
 801a52e:	6083      	str	r3, [r0, #8]
 801a530:	230b      	movs	r3, #11
 801a532:	8183      	strh	r3, [r0, #12]
 801a534:	2201      	movs	r2, #1
 801a536:	2300      	movs	r3, #0
 801a538:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801a53c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801a53e:	2200      	movs	r2, #0
 801a540:	611d      	str	r5, [r3, #16]
 801a542:	615a      	str	r2, [r3, #20]
 801a544:	bd38      	pop	{r3, r4, r5, pc}
 801a546:	bf00      	nop
 801a548:	20001344 	.word	0x20001344
 801a54c:	abcd330e 	.word	0xabcd330e
 801a550:	e66d1234 	.word	0xe66d1234
 801a554:	0005deec 	.word	0x0005deec

0801a558 <rand>:
 801a558:	b538      	push	{r3, r4, r5, lr}
 801a55a:	4b13      	ldr	r3, [pc, #76]	; (801a5a8 <rand+0x50>)
 801a55c:	681c      	ldr	r4, [r3, #0]
 801a55e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801a560:	b97b      	cbnz	r3, 801a582 <rand+0x2a>
 801a562:	2018      	movs	r0, #24
 801a564:	f000 faca 	bl	801aafc <malloc>
 801a568:	4a10      	ldr	r2, [pc, #64]	; (801a5ac <rand+0x54>)
 801a56a:	4b11      	ldr	r3, [pc, #68]	; (801a5b0 <rand+0x58>)
 801a56c:	63a0      	str	r0, [r4, #56]	; 0x38
 801a56e:	e9c0 2300 	strd	r2, r3, [r0]
 801a572:	4b10      	ldr	r3, [pc, #64]	; (801a5b4 <rand+0x5c>)
 801a574:	6083      	str	r3, [r0, #8]
 801a576:	230b      	movs	r3, #11
 801a578:	8183      	strh	r3, [r0, #12]
 801a57a:	2201      	movs	r2, #1
 801a57c:	2300      	movs	r3, #0
 801a57e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801a582:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801a584:	480c      	ldr	r0, [pc, #48]	; (801a5b8 <rand+0x60>)
 801a586:	690a      	ldr	r2, [r1, #16]
 801a588:	694b      	ldr	r3, [r1, #20]
 801a58a:	4c0c      	ldr	r4, [pc, #48]	; (801a5bc <rand+0x64>)
 801a58c:	4350      	muls	r0, r2
 801a58e:	fb04 0003 	mla	r0, r4, r3, r0
 801a592:	fba2 2304 	umull	r2, r3, r2, r4
 801a596:	4403      	add	r3, r0
 801a598:	1c54      	adds	r4, r2, #1
 801a59a:	f143 0500 	adc.w	r5, r3, #0
 801a59e:	e9c1 4504 	strd	r4, r5, [r1, #16]
 801a5a2:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 801a5a6:	bd38      	pop	{r3, r4, r5, pc}
 801a5a8:	20001344 	.word	0x20001344
 801a5ac:	abcd330e 	.word	0xabcd330e
 801a5b0:	e66d1234 	.word	0xe66d1234
 801a5b4:	0005deec 	.word	0x0005deec
 801a5b8:	5851f42d 	.word	0x5851f42d
 801a5bc:	4c957f2d 	.word	0x4c957f2d

0801a5c0 <__swbuf_r>:
 801a5c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a5c2:	460e      	mov	r6, r1
 801a5c4:	4614      	mov	r4, r2
 801a5c6:	4605      	mov	r5, r0
 801a5c8:	b118      	cbz	r0, 801a5d2 <__swbuf_r+0x12>
 801a5ca:	6983      	ldr	r3, [r0, #24]
 801a5cc:	b90b      	cbnz	r3, 801a5d2 <__swbuf_r+0x12>
 801a5ce:	f000 f9a7 	bl	801a920 <__sinit>
 801a5d2:	4b21      	ldr	r3, [pc, #132]	; (801a658 <__swbuf_r+0x98>)
 801a5d4:	429c      	cmp	r4, r3
 801a5d6:	d12a      	bne.n	801a62e <__swbuf_r+0x6e>
 801a5d8:	686c      	ldr	r4, [r5, #4]
 801a5da:	69a3      	ldr	r3, [r4, #24]
 801a5dc:	60a3      	str	r3, [r4, #8]
 801a5de:	89a3      	ldrh	r3, [r4, #12]
 801a5e0:	071a      	lsls	r2, r3, #28
 801a5e2:	d52e      	bpl.n	801a642 <__swbuf_r+0x82>
 801a5e4:	6923      	ldr	r3, [r4, #16]
 801a5e6:	b363      	cbz	r3, 801a642 <__swbuf_r+0x82>
 801a5e8:	6923      	ldr	r3, [r4, #16]
 801a5ea:	6820      	ldr	r0, [r4, #0]
 801a5ec:	1ac0      	subs	r0, r0, r3
 801a5ee:	6963      	ldr	r3, [r4, #20]
 801a5f0:	b2f6      	uxtb	r6, r6
 801a5f2:	4283      	cmp	r3, r0
 801a5f4:	4637      	mov	r7, r6
 801a5f6:	dc04      	bgt.n	801a602 <__swbuf_r+0x42>
 801a5f8:	4621      	mov	r1, r4
 801a5fa:	4628      	mov	r0, r5
 801a5fc:	f000 f926 	bl	801a84c <_fflush_r>
 801a600:	bb28      	cbnz	r0, 801a64e <__swbuf_r+0x8e>
 801a602:	68a3      	ldr	r3, [r4, #8]
 801a604:	3b01      	subs	r3, #1
 801a606:	60a3      	str	r3, [r4, #8]
 801a608:	6823      	ldr	r3, [r4, #0]
 801a60a:	1c5a      	adds	r2, r3, #1
 801a60c:	6022      	str	r2, [r4, #0]
 801a60e:	701e      	strb	r6, [r3, #0]
 801a610:	6963      	ldr	r3, [r4, #20]
 801a612:	3001      	adds	r0, #1
 801a614:	4283      	cmp	r3, r0
 801a616:	d004      	beq.n	801a622 <__swbuf_r+0x62>
 801a618:	89a3      	ldrh	r3, [r4, #12]
 801a61a:	07db      	lsls	r3, r3, #31
 801a61c:	d519      	bpl.n	801a652 <__swbuf_r+0x92>
 801a61e:	2e0a      	cmp	r6, #10
 801a620:	d117      	bne.n	801a652 <__swbuf_r+0x92>
 801a622:	4621      	mov	r1, r4
 801a624:	4628      	mov	r0, r5
 801a626:	f000 f911 	bl	801a84c <_fflush_r>
 801a62a:	b190      	cbz	r0, 801a652 <__swbuf_r+0x92>
 801a62c:	e00f      	b.n	801a64e <__swbuf_r+0x8e>
 801a62e:	4b0b      	ldr	r3, [pc, #44]	; (801a65c <__swbuf_r+0x9c>)
 801a630:	429c      	cmp	r4, r3
 801a632:	d101      	bne.n	801a638 <__swbuf_r+0x78>
 801a634:	68ac      	ldr	r4, [r5, #8]
 801a636:	e7d0      	b.n	801a5da <__swbuf_r+0x1a>
 801a638:	4b09      	ldr	r3, [pc, #36]	; (801a660 <__swbuf_r+0xa0>)
 801a63a:	429c      	cmp	r4, r3
 801a63c:	bf08      	it	eq
 801a63e:	68ec      	ldreq	r4, [r5, #12]
 801a640:	e7cb      	b.n	801a5da <__swbuf_r+0x1a>
 801a642:	4621      	mov	r1, r4
 801a644:	4628      	mov	r0, r5
 801a646:	f000 f80d 	bl	801a664 <__swsetup_r>
 801a64a:	2800      	cmp	r0, #0
 801a64c:	d0cc      	beq.n	801a5e8 <__swbuf_r+0x28>
 801a64e:	f04f 37ff 	mov.w	r7, #4294967295
 801a652:	4638      	mov	r0, r7
 801a654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a656:	bf00      	nop
 801a658:	0801d5f8 	.word	0x0801d5f8
 801a65c:	0801d618 	.word	0x0801d618
 801a660:	0801d5d8 	.word	0x0801d5d8

0801a664 <__swsetup_r>:
 801a664:	4b32      	ldr	r3, [pc, #200]	; (801a730 <__swsetup_r+0xcc>)
 801a666:	b570      	push	{r4, r5, r6, lr}
 801a668:	681d      	ldr	r5, [r3, #0]
 801a66a:	4606      	mov	r6, r0
 801a66c:	460c      	mov	r4, r1
 801a66e:	b125      	cbz	r5, 801a67a <__swsetup_r+0x16>
 801a670:	69ab      	ldr	r3, [r5, #24]
 801a672:	b913      	cbnz	r3, 801a67a <__swsetup_r+0x16>
 801a674:	4628      	mov	r0, r5
 801a676:	f000 f953 	bl	801a920 <__sinit>
 801a67a:	4b2e      	ldr	r3, [pc, #184]	; (801a734 <__swsetup_r+0xd0>)
 801a67c:	429c      	cmp	r4, r3
 801a67e:	d10f      	bne.n	801a6a0 <__swsetup_r+0x3c>
 801a680:	686c      	ldr	r4, [r5, #4]
 801a682:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a686:	b29a      	uxth	r2, r3
 801a688:	0715      	lsls	r5, r2, #28
 801a68a:	d42c      	bmi.n	801a6e6 <__swsetup_r+0x82>
 801a68c:	06d0      	lsls	r0, r2, #27
 801a68e:	d411      	bmi.n	801a6b4 <__swsetup_r+0x50>
 801a690:	2209      	movs	r2, #9
 801a692:	6032      	str	r2, [r6, #0]
 801a694:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a698:	81a3      	strh	r3, [r4, #12]
 801a69a:	f04f 30ff 	mov.w	r0, #4294967295
 801a69e:	e03e      	b.n	801a71e <__swsetup_r+0xba>
 801a6a0:	4b25      	ldr	r3, [pc, #148]	; (801a738 <__swsetup_r+0xd4>)
 801a6a2:	429c      	cmp	r4, r3
 801a6a4:	d101      	bne.n	801a6aa <__swsetup_r+0x46>
 801a6a6:	68ac      	ldr	r4, [r5, #8]
 801a6a8:	e7eb      	b.n	801a682 <__swsetup_r+0x1e>
 801a6aa:	4b24      	ldr	r3, [pc, #144]	; (801a73c <__swsetup_r+0xd8>)
 801a6ac:	429c      	cmp	r4, r3
 801a6ae:	bf08      	it	eq
 801a6b0:	68ec      	ldreq	r4, [r5, #12]
 801a6b2:	e7e6      	b.n	801a682 <__swsetup_r+0x1e>
 801a6b4:	0751      	lsls	r1, r2, #29
 801a6b6:	d512      	bpl.n	801a6de <__swsetup_r+0x7a>
 801a6b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a6ba:	b141      	cbz	r1, 801a6ce <__swsetup_r+0x6a>
 801a6bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a6c0:	4299      	cmp	r1, r3
 801a6c2:	d002      	beq.n	801a6ca <__swsetup_r+0x66>
 801a6c4:	4630      	mov	r0, r6
 801a6c6:	f000 fa21 	bl	801ab0c <_free_r>
 801a6ca:	2300      	movs	r3, #0
 801a6cc:	6363      	str	r3, [r4, #52]	; 0x34
 801a6ce:	89a3      	ldrh	r3, [r4, #12]
 801a6d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a6d4:	81a3      	strh	r3, [r4, #12]
 801a6d6:	2300      	movs	r3, #0
 801a6d8:	6063      	str	r3, [r4, #4]
 801a6da:	6923      	ldr	r3, [r4, #16]
 801a6dc:	6023      	str	r3, [r4, #0]
 801a6de:	89a3      	ldrh	r3, [r4, #12]
 801a6e0:	f043 0308 	orr.w	r3, r3, #8
 801a6e4:	81a3      	strh	r3, [r4, #12]
 801a6e6:	6923      	ldr	r3, [r4, #16]
 801a6e8:	b94b      	cbnz	r3, 801a6fe <__swsetup_r+0x9a>
 801a6ea:	89a3      	ldrh	r3, [r4, #12]
 801a6ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a6f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a6f4:	d003      	beq.n	801a6fe <__swsetup_r+0x9a>
 801a6f6:	4621      	mov	r1, r4
 801a6f8:	4630      	mov	r0, r6
 801a6fa:	f000 f9bf 	bl	801aa7c <__smakebuf_r>
 801a6fe:	89a2      	ldrh	r2, [r4, #12]
 801a700:	f012 0301 	ands.w	r3, r2, #1
 801a704:	d00c      	beq.n	801a720 <__swsetup_r+0xbc>
 801a706:	2300      	movs	r3, #0
 801a708:	60a3      	str	r3, [r4, #8]
 801a70a:	6963      	ldr	r3, [r4, #20]
 801a70c:	425b      	negs	r3, r3
 801a70e:	61a3      	str	r3, [r4, #24]
 801a710:	6923      	ldr	r3, [r4, #16]
 801a712:	b953      	cbnz	r3, 801a72a <__swsetup_r+0xc6>
 801a714:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a718:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801a71c:	d1ba      	bne.n	801a694 <__swsetup_r+0x30>
 801a71e:	bd70      	pop	{r4, r5, r6, pc}
 801a720:	0792      	lsls	r2, r2, #30
 801a722:	bf58      	it	pl
 801a724:	6963      	ldrpl	r3, [r4, #20]
 801a726:	60a3      	str	r3, [r4, #8]
 801a728:	e7f2      	b.n	801a710 <__swsetup_r+0xac>
 801a72a:	2000      	movs	r0, #0
 801a72c:	e7f7      	b.n	801a71e <__swsetup_r+0xba>
 801a72e:	bf00      	nop
 801a730:	20001344 	.word	0x20001344
 801a734:	0801d5f8 	.word	0x0801d5f8
 801a738:	0801d618 	.word	0x0801d618
 801a73c:	0801d5d8 	.word	0x0801d5d8

0801a740 <__sflush_r>:
 801a740:	898a      	ldrh	r2, [r1, #12]
 801a742:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a746:	4605      	mov	r5, r0
 801a748:	0710      	lsls	r0, r2, #28
 801a74a:	460c      	mov	r4, r1
 801a74c:	d458      	bmi.n	801a800 <__sflush_r+0xc0>
 801a74e:	684b      	ldr	r3, [r1, #4]
 801a750:	2b00      	cmp	r3, #0
 801a752:	dc05      	bgt.n	801a760 <__sflush_r+0x20>
 801a754:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a756:	2b00      	cmp	r3, #0
 801a758:	dc02      	bgt.n	801a760 <__sflush_r+0x20>
 801a75a:	2000      	movs	r0, #0
 801a75c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a760:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a762:	2e00      	cmp	r6, #0
 801a764:	d0f9      	beq.n	801a75a <__sflush_r+0x1a>
 801a766:	2300      	movs	r3, #0
 801a768:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a76c:	682f      	ldr	r7, [r5, #0]
 801a76e:	6a21      	ldr	r1, [r4, #32]
 801a770:	602b      	str	r3, [r5, #0]
 801a772:	d032      	beq.n	801a7da <__sflush_r+0x9a>
 801a774:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a776:	89a3      	ldrh	r3, [r4, #12]
 801a778:	075a      	lsls	r2, r3, #29
 801a77a:	d505      	bpl.n	801a788 <__sflush_r+0x48>
 801a77c:	6863      	ldr	r3, [r4, #4]
 801a77e:	1ac0      	subs	r0, r0, r3
 801a780:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a782:	b10b      	cbz	r3, 801a788 <__sflush_r+0x48>
 801a784:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a786:	1ac0      	subs	r0, r0, r3
 801a788:	2300      	movs	r3, #0
 801a78a:	4602      	mov	r2, r0
 801a78c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a78e:	6a21      	ldr	r1, [r4, #32]
 801a790:	4628      	mov	r0, r5
 801a792:	47b0      	blx	r6
 801a794:	1c43      	adds	r3, r0, #1
 801a796:	89a3      	ldrh	r3, [r4, #12]
 801a798:	d106      	bne.n	801a7a8 <__sflush_r+0x68>
 801a79a:	6829      	ldr	r1, [r5, #0]
 801a79c:	291d      	cmp	r1, #29
 801a79e:	d848      	bhi.n	801a832 <__sflush_r+0xf2>
 801a7a0:	4a29      	ldr	r2, [pc, #164]	; (801a848 <__sflush_r+0x108>)
 801a7a2:	40ca      	lsrs	r2, r1
 801a7a4:	07d6      	lsls	r6, r2, #31
 801a7a6:	d544      	bpl.n	801a832 <__sflush_r+0xf2>
 801a7a8:	2200      	movs	r2, #0
 801a7aa:	6062      	str	r2, [r4, #4]
 801a7ac:	04d9      	lsls	r1, r3, #19
 801a7ae:	6922      	ldr	r2, [r4, #16]
 801a7b0:	6022      	str	r2, [r4, #0]
 801a7b2:	d504      	bpl.n	801a7be <__sflush_r+0x7e>
 801a7b4:	1c42      	adds	r2, r0, #1
 801a7b6:	d101      	bne.n	801a7bc <__sflush_r+0x7c>
 801a7b8:	682b      	ldr	r3, [r5, #0]
 801a7ba:	b903      	cbnz	r3, 801a7be <__sflush_r+0x7e>
 801a7bc:	6560      	str	r0, [r4, #84]	; 0x54
 801a7be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a7c0:	602f      	str	r7, [r5, #0]
 801a7c2:	2900      	cmp	r1, #0
 801a7c4:	d0c9      	beq.n	801a75a <__sflush_r+0x1a>
 801a7c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a7ca:	4299      	cmp	r1, r3
 801a7cc:	d002      	beq.n	801a7d4 <__sflush_r+0x94>
 801a7ce:	4628      	mov	r0, r5
 801a7d0:	f000 f99c 	bl	801ab0c <_free_r>
 801a7d4:	2000      	movs	r0, #0
 801a7d6:	6360      	str	r0, [r4, #52]	; 0x34
 801a7d8:	e7c0      	b.n	801a75c <__sflush_r+0x1c>
 801a7da:	2301      	movs	r3, #1
 801a7dc:	4628      	mov	r0, r5
 801a7de:	47b0      	blx	r6
 801a7e0:	1c41      	adds	r1, r0, #1
 801a7e2:	d1c8      	bne.n	801a776 <__sflush_r+0x36>
 801a7e4:	682b      	ldr	r3, [r5, #0]
 801a7e6:	2b00      	cmp	r3, #0
 801a7e8:	d0c5      	beq.n	801a776 <__sflush_r+0x36>
 801a7ea:	2b1d      	cmp	r3, #29
 801a7ec:	d001      	beq.n	801a7f2 <__sflush_r+0xb2>
 801a7ee:	2b16      	cmp	r3, #22
 801a7f0:	d101      	bne.n	801a7f6 <__sflush_r+0xb6>
 801a7f2:	602f      	str	r7, [r5, #0]
 801a7f4:	e7b1      	b.n	801a75a <__sflush_r+0x1a>
 801a7f6:	89a3      	ldrh	r3, [r4, #12]
 801a7f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a7fc:	81a3      	strh	r3, [r4, #12]
 801a7fe:	e7ad      	b.n	801a75c <__sflush_r+0x1c>
 801a800:	690f      	ldr	r7, [r1, #16]
 801a802:	2f00      	cmp	r7, #0
 801a804:	d0a9      	beq.n	801a75a <__sflush_r+0x1a>
 801a806:	0793      	lsls	r3, r2, #30
 801a808:	680e      	ldr	r6, [r1, #0]
 801a80a:	bf08      	it	eq
 801a80c:	694b      	ldreq	r3, [r1, #20]
 801a80e:	600f      	str	r7, [r1, #0]
 801a810:	bf18      	it	ne
 801a812:	2300      	movne	r3, #0
 801a814:	eba6 0807 	sub.w	r8, r6, r7
 801a818:	608b      	str	r3, [r1, #8]
 801a81a:	f1b8 0f00 	cmp.w	r8, #0
 801a81e:	dd9c      	ble.n	801a75a <__sflush_r+0x1a>
 801a820:	4643      	mov	r3, r8
 801a822:	463a      	mov	r2, r7
 801a824:	6a21      	ldr	r1, [r4, #32]
 801a826:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801a828:	4628      	mov	r0, r5
 801a82a:	47b0      	blx	r6
 801a82c:	2800      	cmp	r0, #0
 801a82e:	dc06      	bgt.n	801a83e <__sflush_r+0xfe>
 801a830:	89a3      	ldrh	r3, [r4, #12]
 801a832:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a836:	81a3      	strh	r3, [r4, #12]
 801a838:	f04f 30ff 	mov.w	r0, #4294967295
 801a83c:	e78e      	b.n	801a75c <__sflush_r+0x1c>
 801a83e:	4407      	add	r7, r0
 801a840:	eba8 0800 	sub.w	r8, r8, r0
 801a844:	e7e9      	b.n	801a81a <__sflush_r+0xda>
 801a846:	bf00      	nop
 801a848:	20400001 	.word	0x20400001

0801a84c <_fflush_r>:
 801a84c:	b538      	push	{r3, r4, r5, lr}
 801a84e:	690b      	ldr	r3, [r1, #16]
 801a850:	4605      	mov	r5, r0
 801a852:	460c      	mov	r4, r1
 801a854:	b1db      	cbz	r3, 801a88e <_fflush_r+0x42>
 801a856:	b118      	cbz	r0, 801a860 <_fflush_r+0x14>
 801a858:	6983      	ldr	r3, [r0, #24]
 801a85a:	b90b      	cbnz	r3, 801a860 <_fflush_r+0x14>
 801a85c:	f000 f860 	bl	801a920 <__sinit>
 801a860:	4b0c      	ldr	r3, [pc, #48]	; (801a894 <_fflush_r+0x48>)
 801a862:	429c      	cmp	r4, r3
 801a864:	d109      	bne.n	801a87a <_fflush_r+0x2e>
 801a866:	686c      	ldr	r4, [r5, #4]
 801a868:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a86c:	b17b      	cbz	r3, 801a88e <_fflush_r+0x42>
 801a86e:	4621      	mov	r1, r4
 801a870:	4628      	mov	r0, r5
 801a872:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a876:	f7ff bf63 	b.w	801a740 <__sflush_r>
 801a87a:	4b07      	ldr	r3, [pc, #28]	; (801a898 <_fflush_r+0x4c>)
 801a87c:	429c      	cmp	r4, r3
 801a87e:	d101      	bne.n	801a884 <_fflush_r+0x38>
 801a880:	68ac      	ldr	r4, [r5, #8]
 801a882:	e7f1      	b.n	801a868 <_fflush_r+0x1c>
 801a884:	4b05      	ldr	r3, [pc, #20]	; (801a89c <_fflush_r+0x50>)
 801a886:	429c      	cmp	r4, r3
 801a888:	bf08      	it	eq
 801a88a:	68ec      	ldreq	r4, [r5, #12]
 801a88c:	e7ec      	b.n	801a868 <_fflush_r+0x1c>
 801a88e:	2000      	movs	r0, #0
 801a890:	bd38      	pop	{r3, r4, r5, pc}
 801a892:	bf00      	nop
 801a894:	0801d5f8 	.word	0x0801d5f8
 801a898:	0801d618 	.word	0x0801d618
 801a89c:	0801d5d8 	.word	0x0801d5d8

0801a8a0 <std>:
 801a8a0:	2300      	movs	r3, #0
 801a8a2:	b510      	push	{r4, lr}
 801a8a4:	4604      	mov	r4, r0
 801a8a6:	e9c0 3300 	strd	r3, r3, [r0]
 801a8aa:	6083      	str	r3, [r0, #8]
 801a8ac:	8181      	strh	r1, [r0, #12]
 801a8ae:	6643      	str	r3, [r0, #100]	; 0x64
 801a8b0:	81c2      	strh	r2, [r0, #14]
 801a8b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a8b6:	6183      	str	r3, [r0, #24]
 801a8b8:	4619      	mov	r1, r3
 801a8ba:	2208      	movs	r2, #8
 801a8bc:	305c      	adds	r0, #92	; 0x5c
 801a8be:	f7ff fda2 	bl	801a406 <memset>
 801a8c2:	4b05      	ldr	r3, [pc, #20]	; (801a8d8 <std+0x38>)
 801a8c4:	6263      	str	r3, [r4, #36]	; 0x24
 801a8c6:	4b05      	ldr	r3, [pc, #20]	; (801a8dc <std+0x3c>)
 801a8c8:	62a3      	str	r3, [r4, #40]	; 0x28
 801a8ca:	4b05      	ldr	r3, [pc, #20]	; (801a8e0 <std+0x40>)
 801a8cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 801a8ce:	4b05      	ldr	r3, [pc, #20]	; (801a8e4 <std+0x44>)
 801a8d0:	6224      	str	r4, [r4, #32]
 801a8d2:	6323      	str	r3, [r4, #48]	; 0x30
 801a8d4:	bd10      	pop	{r4, pc}
 801a8d6:	bf00      	nop
 801a8d8:	0801b20d 	.word	0x0801b20d
 801a8dc:	0801b22f 	.word	0x0801b22f
 801a8e0:	0801b267 	.word	0x0801b267
 801a8e4:	0801b28b 	.word	0x0801b28b

0801a8e8 <_cleanup_r>:
 801a8e8:	4901      	ldr	r1, [pc, #4]	; (801a8f0 <_cleanup_r+0x8>)
 801a8ea:	f000 b885 	b.w	801a9f8 <_fwalk_reent>
 801a8ee:	bf00      	nop
 801a8f0:	0801a84d 	.word	0x0801a84d

0801a8f4 <__sfmoreglue>:
 801a8f4:	b570      	push	{r4, r5, r6, lr}
 801a8f6:	1e4a      	subs	r2, r1, #1
 801a8f8:	2568      	movs	r5, #104	; 0x68
 801a8fa:	4355      	muls	r5, r2
 801a8fc:	460e      	mov	r6, r1
 801a8fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801a902:	f000 f951 	bl	801aba8 <_malloc_r>
 801a906:	4604      	mov	r4, r0
 801a908:	b140      	cbz	r0, 801a91c <__sfmoreglue+0x28>
 801a90a:	2100      	movs	r1, #0
 801a90c:	e9c0 1600 	strd	r1, r6, [r0]
 801a910:	300c      	adds	r0, #12
 801a912:	60a0      	str	r0, [r4, #8]
 801a914:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801a918:	f7ff fd75 	bl	801a406 <memset>
 801a91c:	4620      	mov	r0, r4
 801a91e:	bd70      	pop	{r4, r5, r6, pc}

0801a920 <__sinit>:
 801a920:	6983      	ldr	r3, [r0, #24]
 801a922:	b510      	push	{r4, lr}
 801a924:	4604      	mov	r4, r0
 801a926:	bb33      	cbnz	r3, 801a976 <__sinit+0x56>
 801a928:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801a92c:	6503      	str	r3, [r0, #80]	; 0x50
 801a92e:	4b12      	ldr	r3, [pc, #72]	; (801a978 <__sinit+0x58>)
 801a930:	4a12      	ldr	r2, [pc, #72]	; (801a97c <__sinit+0x5c>)
 801a932:	681b      	ldr	r3, [r3, #0]
 801a934:	6282      	str	r2, [r0, #40]	; 0x28
 801a936:	4298      	cmp	r0, r3
 801a938:	bf04      	itt	eq
 801a93a:	2301      	moveq	r3, #1
 801a93c:	6183      	streq	r3, [r0, #24]
 801a93e:	f000 f81f 	bl	801a980 <__sfp>
 801a942:	6060      	str	r0, [r4, #4]
 801a944:	4620      	mov	r0, r4
 801a946:	f000 f81b 	bl	801a980 <__sfp>
 801a94a:	60a0      	str	r0, [r4, #8]
 801a94c:	4620      	mov	r0, r4
 801a94e:	f000 f817 	bl	801a980 <__sfp>
 801a952:	2200      	movs	r2, #0
 801a954:	60e0      	str	r0, [r4, #12]
 801a956:	2104      	movs	r1, #4
 801a958:	6860      	ldr	r0, [r4, #4]
 801a95a:	f7ff ffa1 	bl	801a8a0 <std>
 801a95e:	2201      	movs	r2, #1
 801a960:	2109      	movs	r1, #9
 801a962:	68a0      	ldr	r0, [r4, #8]
 801a964:	f7ff ff9c 	bl	801a8a0 <std>
 801a968:	2202      	movs	r2, #2
 801a96a:	2112      	movs	r1, #18
 801a96c:	68e0      	ldr	r0, [r4, #12]
 801a96e:	f7ff ff97 	bl	801a8a0 <std>
 801a972:	2301      	movs	r3, #1
 801a974:	61a3      	str	r3, [r4, #24]
 801a976:	bd10      	pop	{r4, pc}
 801a978:	0801d5d4 	.word	0x0801d5d4
 801a97c:	0801a8e9 	.word	0x0801a8e9

0801a980 <__sfp>:
 801a980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a982:	4b1b      	ldr	r3, [pc, #108]	; (801a9f0 <__sfp+0x70>)
 801a984:	681e      	ldr	r6, [r3, #0]
 801a986:	69b3      	ldr	r3, [r6, #24]
 801a988:	4607      	mov	r7, r0
 801a98a:	b913      	cbnz	r3, 801a992 <__sfp+0x12>
 801a98c:	4630      	mov	r0, r6
 801a98e:	f7ff ffc7 	bl	801a920 <__sinit>
 801a992:	3648      	adds	r6, #72	; 0x48
 801a994:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801a998:	3b01      	subs	r3, #1
 801a99a:	d503      	bpl.n	801a9a4 <__sfp+0x24>
 801a99c:	6833      	ldr	r3, [r6, #0]
 801a99e:	b133      	cbz	r3, 801a9ae <__sfp+0x2e>
 801a9a0:	6836      	ldr	r6, [r6, #0]
 801a9a2:	e7f7      	b.n	801a994 <__sfp+0x14>
 801a9a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801a9a8:	b16d      	cbz	r5, 801a9c6 <__sfp+0x46>
 801a9aa:	3468      	adds	r4, #104	; 0x68
 801a9ac:	e7f4      	b.n	801a998 <__sfp+0x18>
 801a9ae:	2104      	movs	r1, #4
 801a9b0:	4638      	mov	r0, r7
 801a9b2:	f7ff ff9f 	bl	801a8f4 <__sfmoreglue>
 801a9b6:	6030      	str	r0, [r6, #0]
 801a9b8:	2800      	cmp	r0, #0
 801a9ba:	d1f1      	bne.n	801a9a0 <__sfp+0x20>
 801a9bc:	230c      	movs	r3, #12
 801a9be:	603b      	str	r3, [r7, #0]
 801a9c0:	4604      	mov	r4, r0
 801a9c2:	4620      	mov	r0, r4
 801a9c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a9c6:	4b0b      	ldr	r3, [pc, #44]	; (801a9f4 <__sfp+0x74>)
 801a9c8:	6665      	str	r5, [r4, #100]	; 0x64
 801a9ca:	e9c4 5500 	strd	r5, r5, [r4]
 801a9ce:	60a5      	str	r5, [r4, #8]
 801a9d0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801a9d4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 801a9d8:	2208      	movs	r2, #8
 801a9da:	4629      	mov	r1, r5
 801a9dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801a9e0:	f7ff fd11 	bl	801a406 <memset>
 801a9e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801a9e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801a9ec:	e7e9      	b.n	801a9c2 <__sfp+0x42>
 801a9ee:	bf00      	nop
 801a9f0:	0801d5d4 	.word	0x0801d5d4
 801a9f4:	ffff0001 	.word	0xffff0001

0801a9f8 <_fwalk_reent>:
 801a9f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a9fc:	4680      	mov	r8, r0
 801a9fe:	4689      	mov	r9, r1
 801aa00:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801aa04:	2600      	movs	r6, #0
 801aa06:	b914      	cbnz	r4, 801aa0e <_fwalk_reent+0x16>
 801aa08:	4630      	mov	r0, r6
 801aa0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801aa0e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801aa12:	3f01      	subs	r7, #1
 801aa14:	d501      	bpl.n	801aa1a <_fwalk_reent+0x22>
 801aa16:	6824      	ldr	r4, [r4, #0]
 801aa18:	e7f5      	b.n	801aa06 <_fwalk_reent+0xe>
 801aa1a:	89ab      	ldrh	r3, [r5, #12]
 801aa1c:	2b01      	cmp	r3, #1
 801aa1e:	d907      	bls.n	801aa30 <_fwalk_reent+0x38>
 801aa20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801aa24:	3301      	adds	r3, #1
 801aa26:	d003      	beq.n	801aa30 <_fwalk_reent+0x38>
 801aa28:	4629      	mov	r1, r5
 801aa2a:	4640      	mov	r0, r8
 801aa2c:	47c8      	blx	r9
 801aa2e:	4306      	orrs	r6, r0
 801aa30:	3568      	adds	r5, #104	; 0x68
 801aa32:	e7ee      	b.n	801aa12 <_fwalk_reent+0x1a>

0801aa34 <__swhatbuf_r>:
 801aa34:	b570      	push	{r4, r5, r6, lr}
 801aa36:	460e      	mov	r6, r1
 801aa38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801aa3c:	2900      	cmp	r1, #0
 801aa3e:	b096      	sub	sp, #88	; 0x58
 801aa40:	4614      	mov	r4, r2
 801aa42:	461d      	mov	r5, r3
 801aa44:	da07      	bge.n	801aa56 <__swhatbuf_r+0x22>
 801aa46:	2300      	movs	r3, #0
 801aa48:	602b      	str	r3, [r5, #0]
 801aa4a:	89b3      	ldrh	r3, [r6, #12]
 801aa4c:	061a      	lsls	r2, r3, #24
 801aa4e:	d410      	bmi.n	801aa72 <__swhatbuf_r+0x3e>
 801aa50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801aa54:	e00e      	b.n	801aa74 <__swhatbuf_r+0x40>
 801aa56:	466a      	mov	r2, sp
 801aa58:	f000 fc3e 	bl	801b2d8 <_fstat_r>
 801aa5c:	2800      	cmp	r0, #0
 801aa5e:	dbf2      	blt.n	801aa46 <__swhatbuf_r+0x12>
 801aa60:	9a01      	ldr	r2, [sp, #4]
 801aa62:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801aa66:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801aa6a:	425a      	negs	r2, r3
 801aa6c:	415a      	adcs	r2, r3
 801aa6e:	602a      	str	r2, [r5, #0]
 801aa70:	e7ee      	b.n	801aa50 <__swhatbuf_r+0x1c>
 801aa72:	2340      	movs	r3, #64	; 0x40
 801aa74:	2000      	movs	r0, #0
 801aa76:	6023      	str	r3, [r4, #0]
 801aa78:	b016      	add	sp, #88	; 0x58
 801aa7a:	bd70      	pop	{r4, r5, r6, pc}

0801aa7c <__smakebuf_r>:
 801aa7c:	898b      	ldrh	r3, [r1, #12]
 801aa7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801aa80:	079d      	lsls	r5, r3, #30
 801aa82:	4606      	mov	r6, r0
 801aa84:	460c      	mov	r4, r1
 801aa86:	d507      	bpl.n	801aa98 <__smakebuf_r+0x1c>
 801aa88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801aa8c:	6023      	str	r3, [r4, #0]
 801aa8e:	6123      	str	r3, [r4, #16]
 801aa90:	2301      	movs	r3, #1
 801aa92:	6163      	str	r3, [r4, #20]
 801aa94:	b002      	add	sp, #8
 801aa96:	bd70      	pop	{r4, r5, r6, pc}
 801aa98:	ab01      	add	r3, sp, #4
 801aa9a:	466a      	mov	r2, sp
 801aa9c:	f7ff ffca 	bl	801aa34 <__swhatbuf_r>
 801aaa0:	9900      	ldr	r1, [sp, #0]
 801aaa2:	4605      	mov	r5, r0
 801aaa4:	4630      	mov	r0, r6
 801aaa6:	f000 f87f 	bl	801aba8 <_malloc_r>
 801aaaa:	b948      	cbnz	r0, 801aac0 <__smakebuf_r+0x44>
 801aaac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801aab0:	059a      	lsls	r2, r3, #22
 801aab2:	d4ef      	bmi.n	801aa94 <__smakebuf_r+0x18>
 801aab4:	f023 0303 	bic.w	r3, r3, #3
 801aab8:	f043 0302 	orr.w	r3, r3, #2
 801aabc:	81a3      	strh	r3, [r4, #12]
 801aabe:	e7e3      	b.n	801aa88 <__smakebuf_r+0xc>
 801aac0:	4b0d      	ldr	r3, [pc, #52]	; (801aaf8 <__smakebuf_r+0x7c>)
 801aac2:	62b3      	str	r3, [r6, #40]	; 0x28
 801aac4:	89a3      	ldrh	r3, [r4, #12]
 801aac6:	6020      	str	r0, [r4, #0]
 801aac8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801aacc:	81a3      	strh	r3, [r4, #12]
 801aace:	9b00      	ldr	r3, [sp, #0]
 801aad0:	6163      	str	r3, [r4, #20]
 801aad2:	9b01      	ldr	r3, [sp, #4]
 801aad4:	6120      	str	r0, [r4, #16]
 801aad6:	b15b      	cbz	r3, 801aaf0 <__smakebuf_r+0x74>
 801aad8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801aadc:	4630      	mov	r0, r6
 801aade:	f000 fc0d 	bl	801b2fc <_isatty_r>
 801aae2:	b128      	cbz	r0, 801aaf0 <__smakebuf_r+0x74>
 801aae4:	89a3      	ldrh	r3, [r4, #12]
 801aae6:	f023 0303 	bic.w	r3, r3, #3
 801aaea:	f043 0301 	orr.w	r3, r3, #1
 801aaee:	81a3      	strh	r3, [r4, #12]
 801aaf0:	89a3      	ldrh	r3, [r4, #12]
 801aaf2:	431d      	orrs	r5, r3
 801aaf4:	81a5      	strh	r5, [r4, #12]
 801aaf6:	e7cd      	b.n	801aa94 <__smakebuf_r+0x18>
 801aaf8:	0801a8e9 	.word	0x0801a8e9

0801aafc <malloc>:
 801aafc:	4b02      	ldr	r3, [pc, #8]	; (801ab08 <malloc+0xc>)
 801aafe:	4601      	mov	r1, r0
 801ab00:	6818      	ldr	r0, [r3, #0]
 801ab02:	f000 b851 	b.w	801aba8 <_malloc_r>
 801ab06:	bf00      	nop
 801ab08:	20001344 	.word	0x20001344

0801ab0c <_free_r>:
 801ab0c:	b538      	push	{r3, r4, r5, lr}
 801ab0e:	4605      	mov	r5, r0
 801ab10:	2900      	cmp	r1, #0
 801ab12:	d045      	beq.n	801aba0 <_free_r+0x94>
 801ab14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ab18:	1f0c      	subs	r4, r1, #4
 801ab1a:	2b00      	cmp	r3, #0
 801ab1c:	bfb8      	it	lt
 801ab1e:	18e4      	addlt	r4, r4, r3
 801ab20:	f000 fc0e 	bl	801b340 <__malloc_lock>
 801ab24:	4a1f      	ldr	r2, [pc, #124]	; (801aba4 <_free_r+0x98>)
 801ab26:	6813      	ldr	r3, [r2, #0]
 801ab28:	4610      	mov	r0, r2
 801ab2a:	b933      	cbnz	r3, 801ab3a <_free_r+0x2e>
 801ab2c:	6063      	str	r3, [r4, #4]
 801ab2e:	6014      	str	r4, [r2, #0]
 801ab30:	4628      	mov	r0, r5
 801ab32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ab36:	f000 bc04 	b.w	801b342 <__malloc_unlock>
 801ab3a:	42a3      	cmp	r3, r4
 801ab3c:	d90c      	bls.n	801ab58 <_free_r+0x4c>
 801ab3e:	6821      	ldr	r1, [r4, #0]
 801ab40:	1862      	adds	r2, r4, r1
 801ab42:	4293      	cmp	r3, r2
 801ab44:	bf04      	itt	eq
 801ab46:	681a      	ldreq	r2, [r3, #0]
 801ab48:	685b      	ldreq	r3, [r3, #4]
 801ab4a:	6063      	str	r3, [r4, #4]
 801ab4c:	bf04      	itt	eq
 801ab4e:	1852      	addeq	r2, r2, r1
 801ab50:	6022      	streq	r2, [r4, #0]
 801ab52:	6004      	str	r4, [r0, #0]
 801ab54:	e7ec      	b.n	801ab30 <_free_r+0x24>
 801ab56:	4613      	mov	r3, r2
 801ab58:	685a      	ldr	r2, [r3, #4]
 801ab5a:	b10a      	cbz	r2, 801ab60 <_free_r+0x54>
 801ab5c:	42a2      	cmp	r2, r4
 801ab5e:	d9fa      	bls.n	801ab56 <_free_r+0x4a>
 801ab60:	6819      	ldr	r1, [r3, #0]
 801ab62:	1858      	adds	r0, r3, r1
 801ab64:	42a0      	cmp	r0, r4
 801ab66:	d10b      	bne.n	801ab80 <_free_r+0x74>
 801ab68:	6820      	ldr	r0, [r4, #0]
 801ab6a:	4401      	add	r1, r0
 801ab6c:	1858      	adds	r0, r3, r1
 801ab6e:	4282      	cmp	r2, r0
 801ab70:	6019      	str	r1, [r3, #0]
 801ab72:	d1dd      	bne.n	801ab30 <_free_r+0x24>
 801ab74:	6810      	ldr	r0, [r2, #0]
 801ab76:	6852      	ldr	r2, [r2, #4]
 801ab78:	605a      	str	r2, [r3, #4]
 801ab7a:	4401      	add	r1, r0
 801ab7c:	6019      	str	r1, [r3, #0]
 801ab7e:	e7d7      	b.n	801ab30 <_free_r+0x24>
 801ab80:	d902      	bls.n	801ab88 <_free_r+0x7c>
 801ab82:	230c      	movs	r3, #12
 801ab84:	602b      	str	r3, [r5, #0]
 801ab86:	e7d3      	b.n	801ab30 <_free_r+0x24>
 801ab88:	6820      	ldr	r0, [r4, #0]
 801ab8a:	1821      	adds	r1, r4, r0
 801ab8c:	428a      	cmp	r2, r1
 801ab8e:	bf04      	itt	eq
 801ab90:	6811      	ldreq	r1, [r2, #0]
 801ab92:	6852      	ldreq	r2, [r2, #4]
 801ab94:	6062      	str	r2, [r4, #4]
 801ab96:	bf04      	itt	eq
 801ab98:	1809      	addeq	r1, r1, r0
 801ab9a:	6021      	streq	r1, [r4, #0]
 801ab9c:	605c      	str	r4, [r3, #4]
 801ab9e:	e7c7      	b.n	801ab30 <_free_r+0x24>
 801aba0:	bd38      	pop	{r3, r4, r5, pc}
 801aba2:	bf00      	nop
 801aba4:	200027a0 	.word	0x200027a0

0801aba8 <_malloc_r>:
 801aba8:	b570      	push	{r4, r5, r6, lr}
 801abaa:	1ccd      	adds	r5, r1, #3
 801abac:	f025 0503 	bic.w	r5, r5, #3
 801abb0:	3508      	adds	r5, #8
 801abb2:	2d0c      	cmp	r5, #12
 801abb4:	bf38      	it	cc
 801abb6:	250c      	movcc	r5, #12
 801abb8:	2d00      	cmp	r5, #0
 801abba:	4606      	mov	r6, r0
 801abbc:	db01      	blt.n	801abc2 <_malloc_r+0x1a>
 801abbe:	42a9      	cmp	r1, r5
 801abc0:	d903      	bls.n	801abca <_malloc_r+0x22>
 801abc2:	230c      	movs	r3, #12
 801abc4:	6033      	str	r3, [r6, #0]
 801abc6:	2000      	movs	r0, #0
 801abc8:	bd70      	pop	{r4, r5, r6, pc}
 801abca:	f000 fbb9 	bl	801b340 <__malloc_lock>
 801abce:	4a21      	ldr	r2, [pc, #132]	; (801ac54 <_malloc_r+0xac>)
 801abd0:	6814      	ldr	r4, [r2, #0]
 801abd2:	4621      	mov	r1, r4
 801abd4:	b991      	cbnz	r1, 801abfc <_malloc_r+0x54>
 801abd6:	4c20      	ldr	r4, [pc, #128]	; (801ac58 <_malloc_r+0xb0>)
 801abd8:	6823      	ldr	r3, [r4, #0]
 801abda:	b91b      	cbnz	r3, 801abe4 <_malloc_r+0x3c>
 801abdc:	4630      	mov	r0, r6
 801abde:	f000 fb05 	bl	801b1ec <_sbrk_r>
 801abe2:	6020      	str	r0, [r4, #0]
 801abe4:	4629      	mov	r1, r5
 801abe6:	4630      	mov	r0, r6
 801abe8:	f000 fb00 	bl	801b1ec <_sbrk_r>
 801abec:	1c43      	adds	r3, r0, #1
 801abee:	d124      	bne.n	801ac3a <_malloc_r+0x92>
 801abf0:	230c      	movs	r3, #12
 801abf2:	6033      	str	r3, [r6, #0]
 801abf4:	4630      	mov	r0, r6
 801abf6:	f000 fba4 	bl	801b342 <__malloc_unlock>
 801abfa:	e7e4      	b.n	801abc6 <_malloc_r+0x1e>
 801abfc:	680b      	ldr	r3, [r1, #0]
 801abfe:	1b5b      	subs	r3, r3, r5
 801ac00:	d418      	bmi.n	801ac34 <_malloc_r+0x8c>
 801ac02:	2b0b      	cmp	r3, #11
 801ac04:	d90f      	bls.n	801ac26 <_malloc_r+0x7e>
 801ac06:	600b      	str	r3, [r1, #0]
 801ac08:	50cd      	str	r5, [r1, r3]
 801ac0a:	18cc      	adds	r4, r1, r3
 801ac0c:	4630      	mov	r0, r6
 801ac0e:	f000 fb98 	bl	801b342 <__malloc_unlock>
 801ac12:	f104 000b 	add.w	r0, r4, #11
 801ac16:	1d23      	adds	r3, r4, #4
 801ac18:	f020 0007 	bic.w	r0, r0, #7
 801ac1c:	1ac3      	subs	r3, r0, r3
 801ac1e:	d0d3      	beq.n	801abc8 <_malloc_r+0x20>
 801ac20:	425a      	negs	r2, r3
 801ac22:	50e2      	str	r2, [r4, r3]
 801ac24:	e7d0      	b.n	801abc8 <_malloc_r+0x20>
 801ac26:	428c      	cmp	r4, r1
 801ac28:	684b      	ldr	r3, [r1, #4]
 801ac2a:	bf16      	itet	ne
 801ac2c:	6063      	strne	r3, [r4, #4]
 801ac2e:	6013      	streq	r3, [r2, #0]
 801ac30:	460c      	movne	r4, r1
 801ac32:	e7eb      	b.n	801ac0c <_malloc_r+0x64>
 801ac34:	460c      	mov	r4, r1
 801ac36:	6849      	ldr	r1, [r1, #4]
 801ac38:	e7cc      	b.n	801abd4 <_malloc_r+0x2c>
 801ac3a:	1cc4      	adds	r4, r0, #3
 801ac3c:	f024 0403 	bic.w	r4, r4, #3
 801ac40:	42a0      	cmp	r0, r4
 801ac42:	d005      	beq.n	801ac50 <_malloc_r+0xa8>
 801ac44:	1a21      	subs	r1, r4, r0
 801ac46:	4630      	mov	r0, r6
 801ac48:	f000 fad0 	bl	801b1ec <_sbrk_r>
 801ac4c:	3001      	adds	r0, #1
 801ac4e:	d0cf      	beq.n	801abf0 <_malloc_r+0x48>
 801ac50:	6025      	str	r5, [r4, #0]
 801ac52:	e7db      	b.n	801ac0c <_malloc_r+0x64>
 801ac54:	200027a0 	.word	0x200027a0
 801ac58:	200027a4 	.word	0x200027a4

0801ac5c <__sfputc_r>:
 801ac5c:	6893      	ldr	r3, [r2, #8]
 801ac5e:	3b01      	subs	r3, #1
 801ac60:	2b00      	cmp	r3, #0
 801ac62:	b410      	push	{r4}
 801ac64:	6093      	str	r3, [r2, #8]
 801ac66:	da08      	bge.n	801ac7a <__sfputc_r+0x1e>
 801ac68:	6994      	ldr	r4, [r2, #24]
 801ac6a:	42a3      	cmp	r3, r4
 801ac6c:	db01      	blt.n	801ac72 <__sfputc_r+0x16>
 801ac6e:	290a      	cmp	r1, #10
 801ac70:	d103      	bne.n	801ac7a <__sfputc_r+0x1e>
 801ac72:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ac76:	f7ff bca3 	b.w	801a5c0 <__swbuf_r>
 801ac7a:	6813      	ldr	r3, [r2, #0]
 801ac7c:	1c58      	adds	r0, r3, #1
 801ac7e:	6010      	str	r0, [r2, #0]
 801ac80:	7019      	strb	r1, [r3, #0]
 801ac82:	4608      	mov	r0, r1
 801ac84:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ac88:	4770      	bx	lr

0801ac8a <__sfputs_r>:
 801ac8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ac8c:	4606      	mov	r6, r0
 801ac8e:	460f      	mov	r7, r1
 801ac90:	4614      	mov	r4, r2
 801ac92:	18d5      	adds	r5, r2, r3
 801ac94:	42ac      	cmp	r4, r5
 801ac96:	d101      	bne.n	801ac9c <__sfputs_r+0x12>
 801ac98:	2000      	movs	r0, #0
 801ac9a:	e007      	b.n	801acac <__sfputs_r+0x22>
 801ac9c:	463a      	mov	r2, r7
 801ac9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801aca2:	4630      	mov	r0, r6
 801aca4:	f7ff ffda 	bl	801ac5c <__sfputc_r>
 801aca8:	1c43      	adds	r3, r0, #1
 801acaa:	d1f3      	bne.n	801ac94 <__sfputs_r+0xa>
 801acac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801acb0 <_vfiprintf_r>:
 801acb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801acb4:	460c      	mov	r4, r1
 801acb6:	b09d      	sub	sp, #116	; 0x74
 801acb8:	4617      	mov	r7, r2
 801acba:	461d      	mov	r5, r3
 801acbc:	4606      	mov	r6, r0
 801acbe:	b118      	cbz	r0, 801acc8 <_vfiprintf_r+0x18>
 801acc0:	6983      	ldr	r3, [r0, #24]
 801acc2:	b90b      	cbnz	r3, 801acc8 <_vfiprintf_r+0x18>
 801acc4:	f7ff fe2c 	bl	801a920 <__sinit>
 801acc8:	4b7c      	ldr	r3, [pc, #496]	; (801aebc <_vfiprintf_r+0x20c>)
 801acca:	429c      	cmp	r4, r3
 801accc:	d158      	bne.n	801ad80 <_vfiprintf_r+0xd0>
 801acce:	6874      	ldr	r4, [r6, #4]
 801acd0:	89a3      	ldrh	r3, [r4, #12]
 801acd2:	0718      	lsls	r0, r3, #28
 801acd4:	d55e      	bpl.n	801ad94 <_vfiprintf_r+0xe4>
 801acd6:	6923      	ldr	r3, [r4, #16]
 801acd8:	2b00      	cmp	r3, #0
 801acda:	d05b      	beq.n	801ad94 <_vfiprintf_r+0xe4>
 801acdc:	2300      	movs	r3, #0
 801acde:	9309      	str	r3, [sp, #36]	; 0x24
 801ace0:	2320      	movs	r3, #32
 801ace2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801ace6:	2330      	movs	r3, #48	; 0x30
 801ace8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801acec:	9503      	str	r5, [sp, #12]
 801acee:	f04f 0b01 	mov.w	fp, #1
 801acf2:	46b8      	mov	r8, r7
 801acf4:	4645      	mov	r5, r8
 801acf6:	f815 3b01 	ldrb.w	r3, [r5], #1
 801acfa:	b10b      	cbz	r3, 801ad00 <_vfiprintf_r+0x50>
 801acfc:	2b25      	cmp	r3, #37	; 0x25
 801acfe:	d154      	bne.n	801adaa <_vfiprintf_r+0xfa>
 801ad00:	ebb8 0a07 	subs.w	sl, r8, r7
 801ad04:	d00b      	beq.n	801ad1e <_vfiprintf_r+0x6e>
 801ad06:	4653      	mov	r3, sl
 801ad08:	463a      	mov	r2, r7
 801ad0a:	4621      	mov	r1, r4
 801ad0c:	4630      	mov	r0, r6
 801ad0e:	f7ff ffbc 	bl	801ac8a <__sfputs_r>
 801ad12:	3001      	adds	r0, #1
 801ad14:	f000 80c2 	beq.w	801ae9c <_vfiprintf_r+0x1ec>
 801ad18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ad1a:	4453      	add	r3, sl
 801ad1c:	9309      	str	r3, [sp, #36]	; 0x24
 801ad1e:	f898 3000 	ldrb.w	r3, [r8]
 801ad22:	2b00      	cmp	r3, #0
 801ad24:	f000 80ba 	beq.w	801ae9c <_vfiprintf_r+0x1ec>
 801ad28:	2300      	movs	r3, #0
 801ad2a:	f04f 32ff 	mov.w	r2, #4294967295
 801ad2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ad32:	9304      	str	r3, [sp, #16]
 801ad34:	9307      	str	r3, [sp, #28]
 801ad36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ad3a:	931a      	str	r3, [sp, #104]	; 0x68
 801ad3c:	46a8      	mov	r8, r5
 801ad3e:	2205      	movs	r2, #5
 801ad40:	f818 1b01 	ldrb.w	r1, [r8], #1
 801ad44:	485e      	ldr	r0, [pc, #376]	; (801aec0 <_vfiprintf_r+0x210>)
 801ad46:	f7e5 fa53 	bl	80001f0 <memchr>
 801ad4a:	9b04      	ldr	r3, [sp, #16]
 801ad4c:	bb78      	cbnz	r0, 801adae <_vfiprintf_r+0xfe>
 801ad4e:	06d9      	lsls	r1, r3, #27
 801ad50:	bf44      	itt	mi
 801ad52:	2220      	movmi	r2, #32
 801ad54:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801ad58:	071a      	lsls	r2, r3, #28
 801ad5a:	bf44      	itt	mi
 801ad5c:	222b      	movmi	r2, #43	; 0x2b
 801ad5e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801ad62:	782a      	ldrb	r2, [r5, #0]
 801ad64:	2a2a      	cmp	r2, #42	; 0x2a
 801ad66:	d02a      	beq.n	801adbe <_vfiprintf_r+0x10e>
 801ad68:	9a07      	ldr	r2, [sp, #28]
 801ad6a:	46a8      	mov	r8, r5
 801ad6c:	2000      	movs	r0, #0
 801ad6e:	250a      	movs	r5, #10
 801ad70:	4641      	mov	r1, r8
 801ad72:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ad76:	3b30      	subs	r3, #48	; 0x30
 801ad78:	2b09      	cmp	r3, #9
 801ad7a:	d969      	bls.n	801ae50 <_vfiprintf_r+0x1a0>
 801ad7c:	b360      	cbz	r0, 801add8 <_vfiprintf_r+0x128>
 801ad7e:	e024      	b.n	801adca <_vfiprintf_r+0x11a>
 801ad80:	4b50      	ldr	r3, [pc, #320]	; (801aec4 <_vfiprintf_r+0x214>)
 801ad82:	429c      	cmp	r4, r3
 801ad84:	d101      	bne.n	801ad8a <_vfiprintf_r+0xda>
 801ad86:	68b4      	ldr	r4, [r6, #8]
 801ad88:	e7a2      	b.n	801acd0 <_vfiprintf_r+0x20>
 801ad8a:	4b4f      	ldr	r3, [pc, #316]	; (801aec8 <_vfiprintf_r+0x218>)
 801ad8c:	429c      	cmp	r4, r3
 801ad8e:	bf08      	it	eq
 801ad90:	68f4      	ldreq	r4, [r6, #12]
 801ad92:	e79d      	b.n	801acd0 <_vfiprintf_r+0x20>
 801ad94:	4621      	mov	r1, r4
 801ad96:	4630      	mov	r0, r6
 801ad98:	f7ff fc64 	bl	801a664 <__swsetup_r>
 801ad9c:	2800      	cmp	r0, #0
 801ad9e:	d09d      	beq.n	801acdc <_vfiprintf_r+0x2c>
 801ada0:	f04f 30ff 	mov.w	r0, #4294967295
 801ada4:	b01d      	add	sp, #116	; 0x74
 801ada6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801adaa:	46a8      	mov	r8, r5
 801adac:	e7a2      	b.n	801acf4 <_vfiprintf_r+0x44>
 801adae:	4a44      	ldr	r2, [pc, #272]	; (801aec0 <_vfiprintf_r+0x210>)
 801adb0:	1a80      	subs	r0, r0, r2
 801adb2:	fa0b f000 	lsl.w	r0, fp, r0
 801adb6:	4318      	orrs	r0, r3
 801adb8:	9004      	str	r0, [sp, #16]
 801adba:	4645      	mov	r5, r8
 801adbc:	e7be      	b.n	801ad3c <_vfiprintf_r+0x8c>
 801adbe:	9a03      	ldr	r2, [sp, #12]
 801adc0:	1d11      	adds	r1, r2, #4
 801adc2:	6812      	ldr	r2, [r2, #0]
 801adc4:	9103      	str	r1, [sp, #12]
 801adc6:	2a00      	cmp	r2, #0
 801adc8:	db01      	blt.n	801adce <_vfiprintf_r+0x11e>
 801adca:	9207      	str	r2, [sp, #28]
 801adcc:	e004      	b.n	801add8 <_vfiprintf_r+0x128>
 801adce:	4252      	negs	r2, r2
 801add0:	f043 0302 	orr.w	r3, r3, #2
 801add4:	9207      	str	r2, [sp, #28]
 801add6:	9304      	str	r3, [sp, #16]
 801add8:	f898 3000 	ldrb.w	r3, [r8]
 801addc:	2b2e      	cmp	r3, #46	; 0x2e
 801adde:	d10e      	bne.n	801adfe <_vfiprintf_r+0x14e>
 801ade0:	f898 3001 	ldrb.w	r3, [r8, #1]
 801ade4:	2b2a      	cmp	r3, #42	; 0x2a
 801ade6:	d138      	bne.n	801ae5a <_vfiprintf_r+0x1aa>
 801ade8:	9b03      	ldr	r3, [sp, #12]
 801adea:	1d1a      	adds	r2, r3, #4
 801adec:	681b      	ldr	r3, [r3, #0]
 801adee:	9203      	str	r2, [sp, #12]
 801adf0:	2b00      	cmp	r3, #0
 801adf2:	bfb8      	it	lt
 801adf4:	f04f 33ff 	movlt.w	r3, #4294967295
 801adf8:	f108 0802 	add.w	r8, r8, #2
 801adfc:	9305      	str	r3, [sp, #20]
 801adfe:	4d33      	ldr	r5, [pc, #204]	; (801aecc <_vfiprintf_r+0x21c>)
 801ae00:	f898 1000 	ldrb.w	r1, [r8]
 801ae04:	2203      	movs	r2, #3
 801ae06:	4628      	mov	r0, r5
 801ae08:	f7e5 f9f2 	bl	80001f0 <memchr>
 801ae0c:	b140      	cbz	r0, 801ae20 <_vfiprintf_r+0x170>
 801ae0e:	2340      	movs	r3, #64	; 0x40
 801ae10:	1b40      	subs	r0, r0, r5
 801ae12:	fa03 f000 	lsl.w	r0, r3, r0
 801ae16:	9b04      	ldr	r3, [sp, #16]
 801ae18:	4303      	orrs	r3, r0
 801ae1a:	f108 0801 	add.w	r8, r8, #1
 801ae1e:	9304      	str	r3, [sp, #16]
 801ae20:	f898 1000 	ldrb.w	r1, [r8]
 801ae24:	482a      	ldr	r0, [pc, #168]	; (801aed0 <_vfiprintf_r+0x220>)
 801ae26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801ae2a:	2206      	movs	r2, #6
 801ae2c:	f108 0701 	add.w	r7, r8, #1
 801ae30:	f7e5 f9de 	bl	80001f0 <memchr>
 801ae34:	2800      	cmp	r0, #0
 801ae36:	d037      	beq.n	801aea8 <_vfiprintf_r+0x1f8>
 801ae38:	4b26      	ldr	r3, [pc, #152]	; (801aed4 <_vfiprintf_r+0x224>)
 801ae3a:	bb1b      	cbnz	r3, 801ae84 <_vfiprintf_r+0x1d4>
 801ae3c:	9b03      	ldr	r3, [sp, #12]
 801ae3e:	3307      	adds	r3, #7
 801ae40:	f023 0307 	bic.w	r3, r3, #7
 801ae44:	3308      	adds	r3, #8
 801ae46:	9303      	str	r3, [sp, #12]
 801ae48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ae4a:	444b      	add	r3, r9
 801ae4c:	9309      	str	r3, [sp, #36]	; 0x24
 801ae4e:	e750      	b.n	801acf2 <_vfiprintf_r+0x42>
 801ae50:	fb05 3202 	mla	r2, r5, r2, r3
 801ae54:	2001      	movs	r0, #1
 801ae56:	4688      	mov	r8, r1
 801ae58:	e78a      	b.n	801ad70 <_vfiprintf_r+0xc0>
 801ae5a:	2300      	movs	r3, #0
 801ae5c:	f108 0801 	add.w	r8, r8, #1
 801ae60:	9305      	str	r3, [sp, #20]
 801ae62:	4619      	mov	r1, r3
 801ae64:	250a      	movs	r5, #10
 801ae66:	4640      	mov	r0, r8
 801ae68:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ae6c:	3a30      	subs	r2, #48	; 0x30
 801ae6e:	2a09      	cmp	r2, #9
 801ae70:	d903      	bls.n	801ae7a <_vfiprintf_r+0x1ca>
 801ae72:	2b00      	cmp	r3, #0
 801ae74:	d0c3      	beq.n	801adfe <_vfiprintf_r+0x14e>
 801ae76:	9105      	str	r1, [sp, #20]
 801ae78:	e7c1      	b.n	801adfe <_vfiprintf_r+0x14e>
 801ae7a:	fb05 2101 	mla	r1, r5, r1, r2
 801ae7e:	2301      	movs	r3, #1
 801ae80:	4680      	mov	r8, r0
 801ae82:	e7f0      	b.n	801ae66 <_vfiprintf_r+0x1b6>
 801ae84:	ab03      	add	r3, sp, #12
 801ae86:	9300      	str	r3, [sp, #0]
 801ae88:	4622      	mov	r2, r4
 801ae8a:	4b13      	ldr	r3, [pc, #76]	; (801aed8 <_vfiprintf_r+0x228>)
 801ae8c:	a904      	add	r1, sp, #16
 801ae8e:	4630      	mov	r0, r6
 801ae90:	f3af 8000 	nop.w
 801ae94:	f1b0 3fff 	cmp.w	r0, #4294967295
 801ae98:	4681      	mov	r9, r0
 801ae9a:	d1d5      	bne.n	801ae48 <_vfiprintf_r+0x198>
 801ae9c:	89a3      	ldrh	r3, [r4, #12]
 801ae9e:	065b      	lsls	r3, r3, #25
 801aea0:	f53f af7e 	bmi.w	801ada0 <_vfiprintf_r+0xf0>
 801aea4:	9809      	ldr	r0, [sp, #36]	; 0x24
 801aea6:	e77d      	b.n	801ada4 <_vfiprintf_r+0xf4>
 801aea8:	ab03      	add	r3, sp, #12
 801aeaa:	9300      	str	r3, [sp, #0]
 801aeac:	4622      	mov	r2, r4
 801aeae:	4b0a      	ldr	r3, [pc, #40]	; (801aed8 <_vfiprintf_r+0x228>)
 801aeb0:	a904      	add	r1, sp, #16
 801aeb2:	4630      	mov	r0, r6
 801aeb4:	f000 f888 	bl	801afc8 <_printf_i>
 801aeb8:	e7ec      	b.n	801ae94 <_vfiprintf_r+0x1e4>
 801aeba:	bf00      	nop
 801aebc:	0801d5f8 	.word	0x0801d5f8
 801aec0:	0801d638 	.word	0x0801d638
 801aec4:	0801d618 	.word	0x0801d618
 801aec8:	0801d5d8 	.word	0x0801d5d8
 801aecc:	0801d63e 	.word	0x0801d63e
 801aed0:	0801d642 	.word	0x0801d642
 801aed4:	00000000 	.word	0x00000000
 801aed8:	0801ac8b 	.word	0x0801ac8b

0801aedc <_printf_common>:
 801aedc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801aee0:	4691      	mov	r9, r2
 801aee2:	461f      	mov	r7, r3
 801aee4:	688a      	ldr	r2, [r1, #8]
 801aee6:	690b      	ldr	r3, [r1, #16]
 801aee8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801aeec:	4293      	cmp	r3, r2
 801aeee:	bfb8      	it	lt
 801aef0:	4613      	movlt	r3, r2
 801aef2:	f8c9 3000 	str.w	r3, [r9]
 801aef6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801aefa:	4606      	mov	r6, r0
 801aefc:	460c      	mov	r4, r1
 801aefe:	b112      	cbz	r2, 801af06 <_printf_common+0x2a>
 801af00:	3301      	adds	r3, #1
 801af02:	f8c9 3000 	str.w	r3, [r9]
 801af06:	6823      	ldr	r3, [r4, #0]
 801af08:	0699      	lsls	r1, r3, #26
 801af0a:	bf42      	ittt	mi
 801af0c:	f8d9 3000 	ldrmi.w	r3, [r9]
 801af10:	3302      	addmi	r3, #2
 801af12:	f8c9 3000 	strmi.w	r3, [r9]
 801af16:	6825      	ldr	r5, [r4, #0]
 801af18:	f015 0506 	ands.w	r5, r5, #6
 801af1c:	d107      	bne.n	801af2e <_printf_common+0x52>
 801af1e:	f104 0a19 	add.w	sl, r4, #25
 801af22:	68e3      	ldr	r3, [r4, #12]
 801af24:	f8d9 2000 	ldr.w	r2, [r9]
 801af28:	1a9b      	subs	r3, r3, r2
 801af2a:	42ab      	cmp	r3, r5
 801af2c:	dc28      	bgt.n	801af80 <_printf_common+0xa4>
 801af2e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801af32:	6822      	ldr	r2, [r4, #0]
 801af34:	3300      	adds	r3, #0
 801af36:	bf18      	it	ne
 801af38:	2301      	movne	r3, #1
 801af3a:	0692      	lsls	r2, r2, #26
 801af3c:	d42d      	bmi.n	801af9a <_printf_common+0xbe>
 801af3e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801af42:	4639      	mov	r1, r7
 801af44:	4630      	mov	r0, r6
 801af46:	47c0      	blx	r8
 801af48:	3001      	adds	r0, #1
 801af4a:	d020      	beq.n	801af8e <_printf_common+0xb2>
 801af4c:	6823      	ldr	r3, [r4, #0]
 801af4e:	68e5      	ldr	r5, [r4, #12]
 801af50:	f8d9 2000 	ldr.w	r2, [r9]
 801af54:	f003 0306 	and.w	r3, r3, #6
 801af58:	2b04      	cmp	r3, #4
 801af5a:	bf08      	it	eq
 801af5c:	1aad      	subeq	r5, r5, r2
 801af5e:	68a3      	ldr	r3, [r4, #8]
 801af60:	6922      	ldr	r2, [r4, #16]
 801af62:	bf0c      	ite	eq
 801af64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801af68:	2500      	movne	r5, #0
 801af6a:	4293      	cmp	r3, r2
 801af6c:	bfc4      	itt	gt
 801af6e:	1a9b      	subgt	r3, r3, r2
 801af70:	18ed      	addgt	r5, r5, r3
 801af72:	f04f 0900 	mov.w	r9, #0
 801af76:	341a      	adds	r4, #26
 801af78:	454d      	cmp	r5, r9
 801af7a:	d11a      	bne.n	801afb2 <_printf_common+0xd6>
 801af7c:	2000      	movs	r0, #0
 801af7e:	e008      	b.n	801af92 <_printf_common+0xb6>
 801af80:	2301      	movs	r3, #1
 801af82:	4652      	mov	r2, sl
 801af84:	4639      	mov	r1, r7
 801af86:	4630      	mov	r0, r6
 801af88:	47c0      	blx	r8
 801af8a:	3001      	adds	r0, #1
 801af8c:	d103      	bne.n	801af96 <_printf_common+0xba>
 801af8e:	f04f 30ff 	mov.w	r0, #4294967295
 801af92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801af96:	3501      	adds	r5, #1
 801af98:	e7c3      	b.n	801af22 <_printf_common+0x46>
 801af9a:	18e1      	adds	r1, r4, r3
 801af9c:	1c5a      	adds	r2, r3, #1
 801af9e:	2030      	movs	r0, #48	; 0x30
 801afa0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801afa4:	4422      	add	r2, r4
 801afa6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801afaa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801afae:	3302      	adds	r3, #2
 801afb0:	e7c5      	b.n	801af3e <_printf_common+0x62>
 801afb2:	2301      	movs	r3, #1
 801afb4:	4622      	mov	r2, r4
 801afb6:	4639      	mov	r1, r7
 801afb8:	4630      	mov	r0, r6
 801afba:	47c0      	blx	r8
 801afbc:	3001      	adds	r0, #1
 801afbe:	d0e6      	beq.n	801af8e <_printf_common+0xb2>
 801afc0:	f109 0901 	add.w	r9, r9, #1
 801afc4:	e7d8      	b.n	801af78 <_printf_common+0x9c>
	...

0801afc8 <_printf_i>:
 801afc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801afcc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801afd0:	460c      	mov	r4, r1
 801afd2:	7e09      	ldrb	r1, [r1, #24]
 801afd4:	b085      	sub	sp, #20
 801afd6:	296e      	cmp	r1, #110	; 0x6e
 801afd8:	4617      	mov	r7, r2
 801afda:	4606      	mov	r6, r0
 801afdc:	4698      	mov	r8, r3
 801afde:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801afe0:	f000 80b3 	beq.w	801b14a <_printf_i+0x182>
 801afe4:	d822      	bhi.n	801b02c <_printf_i+0x64>
 801afe6:	2963      	cmp	r1, #99	; 0x63
 801afe8:	d036      	beq.n	801b058 <_printf_i+0x90>
 801afea:	d80a      	bhi.n	801b002 <_printf_i+0x3a>
 801afec:	2900      	cmp	r1, #0
 801afee:	f000 80b9 	beq.w	801b164 <_printf_i+0x19c>
 801aff2:	2958      	cmp	r1, #88	; 0x58
 801aff4:	f000 8083 	beq.w	801b0fe <_printf_i+0x136>
 801aff8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801affc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801b000:	e032      	b.n	801b068 <_printf_i+0xa0>
 801b002:	2964      	cmp	r1, #100	; 0x64
 801b004:	d001      	beq.n	801b00a <_printf_i+0x42>
 801b006:	2969      	cmp	r1, #105	; 0x69
 801b008:	d1f6      	bne.n	801aff8 <_printf_i+0x30>
 801b00a:	6820      	ldr	r0, [r4, #0]
 801b00c:	6813      	ldr	r3, [r2, #0]
 801b00e:	0605      	lsls	r5, r0, #24
 801b010:	f103 0104 	add.w	r1, r3, #4
 801b014:	d52a      	bpl.n	801b06c <_printf_i+0xa4>
 801b016:	681b      	ldr	r3, [r3, #0]
 801b018:	6011      	str	r1, [r2, #0]
 801b01a:	2b00      	cmp	r3, #0
 801b01c:	da03      	bge.n	801b026 <_printf_i+0x5e>
 801b01e:	222d      	movs	r2, #45	; 0x2d
 801b020:	425b      	negs	r3, r3
 801b022:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801b026:	486f      	ldr	r0, [pc, #444]	; (801b1e4 <_printf_i+0x21c>)
 801b028:	220a      	movs	r2, #10
 801b02a:	e039      	b.n	801b0a0 <_printf_i+0xd8>
 801b02c:	2973      	cmp	r1, #115	; 0x73
 801b02e:	f000 809d 	beq.w	801b16c <_printf_i+0x1a4>
 801b032:	d808      	bhi.n	801b046 <_printf_i+0x7e>
 801b034:	296f      	cmp	r1, #111	; 0x6f
 801b036:	d020      	beq.n	801b07a <_printf_i+0xb2>
 801b038:	2970      	cmp	r1, #112	; 0x70
 801b03a:	d1dd      	bne.n	801aff8 <_printf_i+0x30>
 801b03c:	6823      	ldr	r3, [r4, #0]
 801b03e:	f043 0320 	orr.w	r3, r3, #32
 801b042:	6023      	str	r3, [r4, #0]
 801b044:	e003      	b.n	801b04e <_printf_i+0x86>
 801b046:	2975      	cmp	r1, #117	; 0x75
 801b048:	d017      	beq.n	801b07a <_printf_i+0xb2>
 801b04a:	2978      	cmp	r1, #120	; 0x78
 801b04c:	d1d4      	bne.n	801aff8 <_printf_i+0x30>
 801b04e:	2378      	movs	r3, #120	; 0x78
 801b050:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801b054:	4864      	ldr	r0, [pc, #400]	; (801b1e8 <_printf_i+0x220>)
 801b056:	e055      	b.n	801b104 <_printf_i+0x13c>
 801b058:	6813      	ldr	r3, [r2, #0]
 801b05a:	1d19      	adds	r1, r3, #4
 801b05c:	681b      	ldr	r3, [r3, #0]
 801b05e:	6011      	str	r1, [r2, #0]
 801b060:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b064:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b068:	2301      	movs	r3, #1
 801b06a:	e08c      	b.n	801b186 <_printf_i+0x1be>
 801b06c:	681b      	ldr	r3, [r3, #0]
 801b06e:	6011      	str	r1, [r2, #0]
 801b070:	f010 0f40 	tst.w	r0, #64	; 0x40
 801b074:	bf18      	it	ne
 801b076:	b21b      	sxthne	r3, r3
 801b078:	e7cf      	b.n	801b01a <_printf_i+0x52>
 801b07a:	6813      	ldr	r3, [r2, #0]
 801b07c:	6825      	ldr	r5, [r4, #0]
 801b07e:	1d18      	adds	r0, r3, #4
 801b080:	6010      	str	r0, [r2, #0]
 801b082:	0628      	lsls	r0, r5, #24
 801b084:	d501      	bpl.n	801b08a <_printf_i+0xc2>
 801b086:	681b      	ldr	r3, [r3, #0]
 801b088:	e002      	b.n	801b090 <_printf_i+0xc8>
 801b08a:	0668      	lsls	r0, r5, #25
 801b08c:	d5fb      	bpl.n	801b086 <_printf_i+0xbe>
 801b08e:	881b      	ldrh	r3, [r3, #0]
 801b090:	4854      	ldr	r0, [pc, #336]	; (801b1e4 <_printf_i+0x21c>)
 801b092:	296f      	cmp	r1, #111	; 0x6f
 801b094:	bf14      	ite	ne
 801b096:	220a      	movne	r2, #10
 801b098:	2208      	moveq	r2, #8
 801b09a:	2100      	movs	r1, #0
 801b09c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801b0a0:	6865      	ldr	r5, [r4, #4]
 801b0a2:	60a5      	str	r5, [r4, #8]
 801b0a4:	2d00      	cmp	r5, #0
 801b0a6:	f2c0 8095 	blt.w	801b1d4 <_printf_i+0x20c>
 801b0aa:	6821      	ldr	r1, [r4, #0]
 801b0ac:	f021 0104 	bic.w	r1, r1, #4
 801b0b0:	6021      	str	r1, [r4, #0]
 801b0b2:	2b00      	cmp	r3, #0
 801b0b4:	d13d      	bne.n	801b132 <_printf_i+0x16a>
 801b0b6:	2d00      	cmp	r5, #0
 801b0b8:	f040 808e 	bne.w	801b1d8 <_printf_i+0x210>
 801b0bc:	4665      	mov	r5, ip
 801b0be:	2a08      	cmp	r2, #8
 801b0c0:	d10b      	bne.n	801b0da <_printf_i+0x112>
 801b0c2:	6823      	ldr	r3, [r4, #0]
 801b0c4:	07db      	lsls	r3, r3, #31
 801b0c6:	d508      	bpl.n	801b0da <_printf_i+0x112>
 801b0c8:	6923      	ldr	r3, [r4, #16]
 801b0ca:	6862      	ldr	r2, [r4, #4]
 801b0cc:	429a      	cmp	r2, r3
 801b0ce:	bfde      	ittt	le
 801b0d0:	2330      	movle	r3, #48	; 0x30
 801b0d2:	f805 3c01 	strble.w	r3, [r5, #-1]
 801b0d6:	f105 35ff 	addle.w	r5, r5, #4294967295
 801b0da:	ebac 0305 	sub.w	r3, ip, r5
 801b0de:	6123      	str	r3, [r4, #16]
 801b0e0:	f8cd 8000 	str.w	r8, [sp]
 801b0e4:	463b      	mov	r3, r7
 801b0e6:	aa03      	add	r2, sp, #12
 801b0e8:	4621      	mov	r1, r4
 801b0ea:	4630      	mov	r0, r6
 801b0ec:	f7ff fef6 	bl	801aedc <_printf_common>
 801b0f0:	3001      	adds	r0, #1
 801b0f2:	d14d      	bne.n	801b190 <_printf_i+0x1c8>
 801b0f4:	f04f 30ff 	mov.w	r0, #4294967295
 801b0f8:	b005      	add	sp, #20
 801b0fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b0fe:	4839      	ldr	r0, [pc, #228]	; (801b1e4 <_printf_i+0x21c>)
 801b100:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801b104:	6813      	ldr	r3, [r2, #0]
 801b106:	6821      	ldr	r1, [r4, #0]
 801b108:	1d1d      	adds	r5, r3, #4
 801b10a:	681b      	ldr	r3, [r3, #0]
 801b10c:	6015      	str	r5, [r2, #0]
 801b10e:	060a      	lsls	r2, r1, #24
 801b110:	d50b      	bpl.n	801b12a <_printf_i+0x162>
 801b112:	07ca      	lsls	r2, r1, #31
 801b114:	bf44      	itt	mi
 801b116:	f041 0120 	orrmi.w	r1, r1, #32
 801b11a:	6021      	strmi	r1, [r4, #0]
 801b11c:	b91b      	cbnz	r3, 801b126 <_printf_i+0x15e>
 801b11e:	6822      	ldr	r2, [r4, #0]
 801b120:	f022 0220 	bic.w	r2, r2, #32
 801b124:	6022      	str	r2, [r4, #0]
 801b126:	2210      	movs	r2, #16
 801b128:	e7b7      	b.n	801b09a <_printf_i+0xd2>
 801b12a:	064d      	lsls	r5, r1, #25
 801b12c:	bf48      	it	mi
 801b12e:	b29b      	uxthmi	r3, r3
 801b130:	e7ef      	b.n	801b112 <_printf_i+0x14a>
 801b132:	4665      	mov	r5, ip
 801b134:	fbb3 f1f2 	udiv	r1, r3, r2
 801b138:	fb02 3311 	mls	r3, r2, r1, r3
 801b13c:	5cc3      	ldrb	r3, [r0, r3]
 801b13e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801b142:	460b      	mov	r3, r1
 801b144:	2900      	cmp	r1, #0
 801b146:	d1f5      	bne.n	801b134 <_printf_i+0x16c>
 801b148:	e7b9      	b.n	801b0be <_printf_i+0xf6>
 801b14a:	6813      	ldr	r3, [r2, #0]
 801b14c:	6825      	ldr	r5, [r4, #0]
 801b14e:	6961      	ldr	r1, [r4, #20]
 801b150:	1d18      	adds	r0, r3, #4
 801b152:	6010      	str	r0, [r2, #0]
 801b154:	0628      	lsls	r0, r5, #24
 801b156:	681b      	ldr	r3, [r3, #0]
 801b158:	d501      	bpl.n	801b15e <_printf_i+0x196>
 801b15a:	6019      	str	r1, [r3, #0]
 801b15c:	e002      	b.n	801b164 <_printf_i+0x19c>
 801b15e:	066a      	lsls	r2, r5, #25
 801b160:	d5fb      	bpl.n	801b15a <_printf_i+0x192>
 801b162:	8019      	strh	r1, [r3, #0]
 801b164:	2300      	movs	r3, #0
 801b166:	6123      	str	r3, [r4, #16]
 801b168:	4665      	mov	r5, ip
 801b16a:	e7b9      	b.n	801b0e0 <_printf_i+0x118>
 801b16c:	6813      	ldr	r3, [r2, #0]
 801b16e:	1d19      	adds	r1, r3, #4
 801b170:	6011      	str	r1, [r2, #0]
 801b172:	681d      	ldr	r5, [r3, #0]
 801b174:	6862      	ldr	r2, [r4, #4]
 801b176:	2100      	movs	r1, #0
 801b178:	4628      	mov	r0, r5
 801b17a:	f7e5 f839 	bl	80001f0 <memchr>
 801b17e:	b108      	cbz	r0, 801b184 <_printf_i+0x1bc>
 801b180:	1b40      	subs	r0, r0, r5
 801b182:	6060      	str	r0, [r4, #4]
 801b184:	6863      	ldr	r3, [r4, #4]
 801b186:	6123      	str	r3, [r4, #16]
 801b188:	2300      	movs	r3, #0
 801b18a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b18e:	e7a7      	b.n	801b0e0 <_printf_i+0x118>
 801b190:	6923      	ldr	r3, [r4, #16]
 801b192:	462a      	mov	r2, r5
 801b194:	4639      	mov	r1, r7
 801b196:	4630      	mov	r0, r6
 801b198:	47c0      	blx	r8
 801b19a:	3001      	adds	r0, #1
 801b19c:	d0aa      	beq.n	801b0f4 <_printf_i+0x12c>
 801b19e:	6823      	ldr	r3, [r4, #0]
 801b1a0:	079b      	lsls	r3, r3, #30
 801b1a2:	d413      	bmi.n	801b1cc <_printf_i+0x204>
 801b1a4:	68e0      	ldr	r0, [r4, #12]
 801b1a6:	9b03      	ldr	r3, [sp, #12]
 801b1a8:	4298      	cmp	r0, r3
 801b1aa:	bfb8      	it	lt
 801b1ac:	4618      	movlt	r0, r3
 801b1ae:	e7a3      	b.n	801b0f8 <_printf_i+0x130>
 801b1b0:	2301      	movs	r3, #1
 801b1b2:	464a      	mov	r2, r9
 801b1b4:	4639      	mov	r1, r7
 801b1b6:	4630      	mov	r0, r6
 801b1b8:	47c0      	blx	r8
 801b1ba:	3001      	adds	r0, #1
 801b1bc:	d09a      	beq.n	801b0f4 <_printf_i+0x12c>
 801b1be:	3501      	adds	r5, #1
 801b1c0:	68e3      	ldr	r3, [r4, #12]
 801b1c2:	9a03      	ldr	r2, [sp, #12]
 801b1c4:	1a9b      	subs	r3, r3, r2
 801b1c6:	42ab      	cmp	r3, r5
 801b1c8:	dcf2      	bgt.n	801b1b0 <_printf_i+0x1e8>
 801b1ca:	e7eb      	b.n	801b1a4 <_printf_i+0x1dc>
 801b1cc:	2500      	movs	r5, #0
 801b1ce:	f104 0919 	add.w	r9, r4, #25
 801b1d2:	e7f5      	b.n	801b1c0 <_printf_i+0x1f8>
 801b1d4:	2b00      	cmp	r3, #0
 801b1d6:	d1ac      	bne.n	801b132 <_printf_i+0x16a>
 801b1d8:	7803      	ldrb	r3, [r0, #0]
 801b1da:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b1de:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b1e2:	e76c      	b.n	801b0be <_printf_i+0xf6>
 801b1e4:	0801d649 	.word	0x0801d649
 801b1e8:	0801d65a 	.word	0x0801d65a

0801b1ec <_sbrk_r>:
 801b1ec:	b538      	push	{r3, r4, r5, lr}
 801b1ee:	4c06      	ldr	r4, [pc, #24]	; (801b208 <_sbrk_r+0x1c>)
 801b1f0:	2300      	movs	r3, #0
 801b1f2:	4605      	mov	r5, r0
 801b1f4:	4608      	mov	r0, r1
 801b1f6:	6023      	str	r3, [r4, #0]
 801b1f8:	f7e8 fb5c 	bl	80038b4 <_sbrk>
 801b1fc:	1c43      	adds	r3, r0, #1
 801b1fe:	d102      	bne.n	801b206 <_sbrk_r+0x1a>
 801b200:	6823      	ldr	r3, [r4, #0]
 801b202:	b103      	cbz	r3, 801b206 <_sbrk_r+0x1a>
 801b204:	602b      	str	r3, [r5, #0]
 801b206:	bd38      	pop	{r3, r4, r5, pc}
 801b208:	20002a7c 	.word	0x20002a7c

0801b20c <__sread>:
 801b20c:	b510      	push	{r4, lr}
 801b20e:	460c      	mov	r4, r1
 801b210:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b214:	f000 f896 	bl	801b344 <_read_r>
 801b218:	2800      	cmp	r0, #0
 801b21a:	bfab      	itete	ge
 801b21c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801b21e:	89a3      	ldrhlt	r3, [r4, #12]
 801b220:	181b      	addge	r3, r3, r0
 801b222:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801b226:	bfac      	ite	ge
 801b228:	6563      	strge	r3, [r4, #84]	; 0x54
 801b22a:	81a3      	strhlt	r3, [r4, #12]
 801b22c:	bd10      	pop	{r4, pc}

0801b22e <__swrite>:
 801b22e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b232:	461f      	mov	r7, r3
 801b234:	898b      	ldrh	r3, [r1, #12]
 801b236:	05db      	lsls	r3, r3, #23
 801b238:	4605      	mov	r5, r0
 801b23a:	460c      	mov	r4, r1
 801b23c:	4616      	mov	r6, r2
 801b23e:	d505      	bpl.n	801b24c <__swrite+0x1e>
 801b240:	2302      	movs	r3, #2
 801b242:	2200      	movs	r2, #0
 801b244:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b248:	f000 f868 	bl	801b31c <_lseek_r>
 801b24c:	89a3      	ldrh	r3, [r4, #12]
 801b24e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b252:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b256:	81a3      	strh	r3, [r4, #12]
 801b258:	4632      	mov	r2, r6
 801b25a:	463b      	mov	r3, r7
 801b25c:	4628      	mov	r0, r5
 801b25e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b262:	f000 b817 	b.w	801b294 <_write_r>

0801b266 <__sseek>:
 801b266:	b510      	push	{r4, lr}
 801b268:	460c      	mov	r4, r1
 801b26a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b26e:	f000 f855 	bl	801b31c <_lseek_r>
 801b272:	1c43      	adds	r3, r0, #1
 801b274:	89a3      	ldrh	r3, [r4, #12]
 801b276:	bf15      	itete	ne
 801b278:	6560      	strne	r0, [r4, #84]	; 0x54
 801b27a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801b27e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801b282:	81a3      	strheq	r3, [r4, #12]
 801b284:	bf18      	it	ne
 801b286:	81a3      	strhne	r3, [r4, #12]
 801b288:	bd10      	pop	{r4, pc}

0801b28a <__sclose>:
 801b28a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b28e:	f000 b813 	b.w	801b2b8 <_close_r>
	...

0801b294 <_write_r>:
 801b294:	b538      	push	{r3, r4, r5, lr}
 801b296:	4c07      	ldr	r4, [pc, #28]	; (801b2b4 <_write_r+0x20>)
 801b298:	4605      	mov	r5, r0
 801b29a:	4608      	mov	r0, r1
 801b29c:	4611      	mov	r1, r2
 801b29e:	2200      	movs	r2, #0
 801b2a0:	6022      	str	r2, [r4, #0]
 801b2a2:	461a      	mov	r2, r3
 801b2a4:	f7e8 fab5 	bl	8003812 <_write>
 801b2a8:	1c43      	adds	r3, r0, #1
 801b2aa:	d102      	bne.n	801b2b2 <_write_r+0x1e>
 801b2ac:	6823      	ldr	r3, [r4, #0]
 801b2ae:	b103      	cbz	r3, 801b2b2 <_write_r+0x1e>
 801b2b0:	602b      	str	r3, [r5, #0]
 801b2b2:	bd38      	pop	{r3, r4, r5, pc}
 801b2b4:	20002a7c 	.word	0x20002a7c

0801b2b8 <_close_r>:
 801b2b8:	b538      	push	{r3, r4, r5, lr}
 801b2ba:	4c06      	ldr	r4, [pc, #24]	; (801b2d4 <_close_r+0x1c>)
 801b2bc:	2300      	movs	r3, #0
 801b2be:	4605      	mov	r5, r0
 801b2c0:	4608      	mov	r0, r1
 801b2c2:	6023      	str	r3, [r4, #0]
 801b2c4:	f7e8 fac1 	bl	800384a <_close>
 801b2c8:	1c43      	adds	r3, r0, #1
 801b2ca:	d102      	bne.n	801b2d2 <_close_r+0x1a>
 801b2cc:	6823      	ldr	r3, [r4, #0]
 801b2ce:	b103      	cbz	r3, 801b2d2 <_close_r+0x1a>
 801b2d0:	602b      	str	r3, [r5, #0]
 801b2d2:	bd38      	pop	{r3, r4, r5, pc}
 801b2d4:	20002a7c 	.word	0x20002a7c

0801b2d8 <_fstat_r>:
 801b2d8:	b538      	push	{r3, r4, r5, lr}
 801b2da:	4c07      	ldr	r4, [pc, #28]	; (801b2f8 <_fstat_r+0x20>)
 801b2dc:	2300      	movs	r3, #0
 801b2de:	4605      	mov	r5, r0
 801b2e0:	4608      	mov	r0, r1
 801b2e2:	4611      	mov	r1, r2
 801b2e4:	6023      	str	r3, [r4, #0]
 801b2e6:	f7e8 fabc 	bl	8003862 <_fstat>
 801b2ea:	1c43      	adds	r3, r0, #1
 801b2ec:	d102      	bne.n	801b2f4 <_fstat_r+0x1c>
 801b2ee:	6823      	ldr	r3, [r4, #0]
 801b2f0:	b103      	cbz	r3, 801b2f4 <_fstat_r+0x1c>
 801b2f2:	602b      	str	r3, [r5, #0]
 801b2f4:	bd38      	pop	{r3, r4, r5, pc}
 801b2f6:	bf00      	nop
 801b2f8:	20002a7c 	.word	0x20002a7c

0801b2fc <_isatty_r>:
 801b2fc:	b538      	push	{r3, r4, r5, lr}
 801b2fe:	4c06      	ldr	r4, [pc, #24]	; (801b318 <_isatty_r+0x1c>)
 801b300:	2300      	movs	r3, #0
 801b302:	4605      	mov	r5, r0
 801b304:	4608      	mov	r0, r1
 801b306:	6023      	str	r3, [r4, #0]
 801b308:	f7e8 fabb 	bl	8003882 <_isatty>
 801b30c:	1c43      	adds	r3, r0, #1
 801b30e:	d102      	bne.n	801b316 <_isatty_r+0x1a>
 801b310:	6823      	ldr	r3, [r4, #0]
 801b312:	b103      	cbz	r3, 801b316 <_isatty_r+0x1a>
 801b314:	602b      	str	r3, [r5, #0]
 801b316:	bd38      	pop	{r3, r4, r5, pc}
 801b318:	20002a7c 	.word	0x20002a7c

0801b31c <_lseek_r>:
 801b31c:	b538      	push	{r3, r4, r5, lr}
 801b31e:	4c07      	ldr	r4, [pc, #28]	; (801b33c <_lseek_r+0x20>)
 801b320:	4605      	mov	r5, r0
 801b322:	4608      	mov	r0, r1
 801b324:	4611      	mov	r1, r2
 801b326:	2200      	movs	r2, #0
 801b328:	6022      	str	r2, [r4, #0]
 801b32a:	461a      	mov	r2, r3
 801b32c:	f7e8 fab4 	bl	8003898 <_lseek>
 801b330:	1c43      	adds	r3, r0, #1
 801b332:	d102      	bne.n	801b33a <_lseek_r+0x1e>
 801b334:	6823      	ldr	r3, [r4, #0]
 801b336:	b103      	cbz	r3, 801b33a <_lseek_r+0x1e>
 801b338:	602b      	str	r3, [r5, #0]
 801b33a:	bd38      	pop	{r3, r4, r5, pc}
 801b33c:	20002a7c 	.word	0x20002a7c

0801b340 <__malloc_lock>:
 801b340:	4770      	bx	lr

0801b342 <__malloc_unlock>:
 801b342:	4770      	bx	lr

0801b344 <_read_r>:
 801b344:	b538      	push	{r3, r4, r5, lr}
 801b346:	4c07      	ldr	r4, [pc, #28]	; (801b364 <_read_r+0x20>)
 801b348:	4605      	mov	r5, r0
 801b34a:	4608      	mov	r0, r1
 801b34c:	4611      	mov	r1, r2
 801b34e:	2200      	movs	r2, #0
 801b350:	6022      	str	r2, [r4, #0]
 801b352:	461a      	mov	r2, r3
 801b354:	f7e8 fa40 	bl	80037d8 <_read>
 801b358:	1c43      	adds	r3, r0, #1
 801b35a:	d102      	bne.n	801b362 <_read_r+0x1e>
 801b35c:	6823      	ldr	r3, [r4, #0]
 801b35e:	b103      	cbz	r3, 801b362 <_read_r+0x1e>
 801b360:	602b      	str	r3, [r5, #0]
 801b362:	bd38      	pop	{r3, r4, r5, pc}
 801b364:	20002a7c 	.word	0x20002a7c

0801b368 <floor>:
 801b368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b36c:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801b370:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801b374:	2e13      	cmp	r6, #19
 801b376:	4602      	mov	r2, r0
 801b378:	460b      	mov	r3, r1
 801b37a:	460c      	mov	r4, r1
 801b37c:	4605      	mov	r5, r0
 801b37e:	4680      	mov	r8, r0
 801b380:	dc35      	bgt.n	801b3ee <floor+0x86>
 801b382:	2e00      	cmp	r6, #0
 801b384:	da16      	bge.n	801b3b4 <floor+0x4c>
 801b386:	a334      	add	r3, pc, #208	; (adr r3, 801b458 <floor+0xf0>)
 801b388:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b38c:	f7e4 ff86 	bl	800029c <__adddf3>
 801b390:	2200      	movs	r2, #0
 801b392:	2300      	movs	r3, #0
 801b394:	f7e5 fbc8 	bl	8000b28 <__aeabi_dcmpgt>
 801b398:	b148      	cbz	r0, 801b3ae <floor+0x46>
 801b39a:	2c00      	cmp	r4, #0
 801b39c:	da59      	bge.n	801b452 <floor+0xea>
 801b39e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801b3a2:	4a2f      	ldr	r2, [pc, #188]	; (801b460 <floor+0xf8>)
 801b3a4:	432b      	orrs	r3, r5
 801b3a6:	2500      	movs	r5, #0
 801b3a8:	42ab      	cmp	r3, r5
 801b3aa:	bf18      	it	ne
 801b3ac:	4614      	movne	r4, r2
 801b3ae:	4623      	mov	r3, r4
 801b3b0:	462a      	mov	r2, r5
 801b3b2:	e025      	b.n	801b400 <floor+0x98>
 801b3b4:	4f2b      	ldr	r7, [pc, #172]	; (801b464 <floor+0xfc>)
 801b3b6:	4137      	asrs	r7, r6
 801b3b8:	ea01 0c07 	and.w	ip, r1, r7
 801b3bc:	ea5c 0c00 	orrs.w	ip, ip, r0
 801b3c0:	d01e      	beq.n	801b400 <floor+0x98>
 801b3c2:	a325      	add	r3, pc, #148	; (adr r3, 801b458 <floor+0xf0>)
 801b3c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b3c8:	f7e4 ff68 	bl	800029c <__adddf3>
 801b3cc:	2200      	movs	r2, #0
 801b3ce:	2300      	movs	r3, #0
 801b3d0:	f7e5 fbaa 	bl	8000b28 <__aeabi_dcmpgt>
 801b3d4:	2800      	cmp	r0, #0
 801b3d6:	d0ea      	beq.n	801b3ae <floor+0x46>
 801b3d8:	2c00      	cmp	r4, #0
 801b3da:	bfbe      	ittt	lt
 801b3dc:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801b3e0:	fa43 f606 	asrlt.w	r6, r3, r6
 801b3e4:	19a4      	addlt	r4, r4, r6
 801b3e6:	ea24 0407 	bic.w	r4, r4, r7
 801b3ea:	2500      	movs	r5, #0
 801b3ec:	e7df      	b.n	801b3ae <floor+0x46>
 801b3ee:	2e33      	cmp	r6, #51	; 0x33
 801b3f0:	dd0a      	ble.n	801b408 <floor+0xa0>
 801b3f2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801b3f6:	d103      	bne.n	801b400 <floor+0x98>
 801b3f8:	f7e4 ff50 	bl	800029c <__adddf3>
 801b3fc:	4602      	mov	r2, r0
 801b3fe:	460b      	mov	r3, r1
 801b400:	4610      	mov	r0, r2
 801b402:	4619      	mov	r1, r3
 801b404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b408:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801b40c:	f04f 3cff 	mov.w	ip, #4294967295
 801b410:	fa2c f707 	lsr.w	r7, ip, r7
 801b414:	4207      	tst	r7, r0
 801b416:	d0f3      	beq.n	801b400 <floor+0x98>
 801b418:	a30f      	add	r3, pc, #60	; (adr r3, 801b458 <floor+0xf0>)
 801b41a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b41e:	f7e4 ff3d 	bl	800029c <__adddf3>
 801b422:	2200      	movs	r2, #0
 801b424:	2300      	movs	r3, #0
 801b426:	f7e5 fb7f 	bl	8000b28 <__aeabi_dcmpgt>
 801b42a:	2800      	cmp	r0, #0
 801b42c:	d0bf      	beq.n	801b3ae <floor+0x46>
 801b42e:	2c00      	cmp	r4, #0
 801b430:	da02      	bge.n	801b438 <floor+0xd0>
 801b432:	2e14      	cmp	r6, #20
 801b434:	d103      	bne.n	801b43e <floor+0xd6>
 801b436:	3401      	adds	r4, #1
 801b438:	ea25 0507 	bic.w	r5, r5, r7
 801b43c:	e7b7      	b.n	801b3ae <floor+0x46>
 801b43e:	2301      	movs	r3, #1
 801b440:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801b444:	fa03 f606 	lsl.w	r6, r3, r6
 801b448:	4435      	add	r5, r6
 801b44a:	4545      	cmp	r5, r8
 801b44c:	bf38      	it	cc
 801b44e:	18e4      	addcc	r4, r4, r3
 801b450:	e7f2      	b.n	801b438 <floor+0xd0>
 801b452:	2500      	movs	r5, #0
 801b454:	462c      	mov	r4, r5
 801b456:	e7aa      	b.n	801b3ae <floor+0x46>
 801b458:	8800759c 	.word	0x8800759c
 801b45c:	7e37e43c 	.word	0x7e37e43c
 801b460:	bff00000 	.word	0xbff00000
 801b464:	000fffff 	.word	0x000fffff

0801b468 <cosf>:
 801b468:	b507      	push	{r0, r1, r2, lr}
 801b46a:	4a1a      	ldr	r2, [pc, #104]	; (801b4d4 <cosf+0x6c>)
 801b46c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 801b470:	4293      	cmp	r3, r2
 801b472:	ee07 0a90 	vmov	s15, r0
 801b476:	dc03      	bgt.n	801b480 <cosf+0x18>
 801b478:	2100      	movs	r1, #0
 801b47a:	f000 ff79 	bl	801c370 <__kernel_cosf>
 801b47e:	e006      	b.n	801b48e <cosf+0x26>
 801b480:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801b484:	db06      	blt.n	801b494 <cosf+0x2c>
 801b486:	ee77 7ae7 	vsub.f32	s15, s15, s15
 801b48a:	ee17 0a90 	vmov	r0, s15
 801b48e:	b003      	add	sp, #12
 801b490:	f85d fb04 	ldr.w	pc, [sp], #4
 801b494:	4669      	mov	r1, sp
 801b496:	f000 fe39 	bl	801c10c <__ieee754_rem_pio2f>
 801b49a:	f000 0203 	and.w	r2, r0, #3
 801b49e:	2a01      	cmp	r2, #1
 801b4a0:	d005      	beq.n	801b4ae <cosf+0x46>
 801b4a2:	2a02      	cmp	r2, #2
 801b4a4:	d00a      	beq.n	801b4bc <cosf+0x54>
 801b4a6:	b972      	cbnz	r2, 801b4c6 <cosf+0x5e>
 801b4a8:	9901      	ldr	r1, [sp, #4]
 801b4aa:	9800      	ldr	r0, [sp, #0]
 801b4ac:	e7e5      	b.n	801b47a <cosf+0x12>
 801b4ae:	9901      	ldr	r1, [sp, #4]
 801b4b0:	9800      	ldr	r0, [sp, #0]
 801b4b2:	f001 fa3f 	bl	801c934 <__kernel_sinf>
 801b4b6:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 801b4ba:	e7e8      	b.n	801b48e <cosf+0x26>
 801b4bc:	9901      	ldr	r1, [sp, #4]
 801b4be:	9800      	ldr	r0, [sp, #0]
 801b4c0:	f000 ff56 	bl	801c370 <__kernel_cosf>
 801b4c4:	e7f7      	b.n	801b4b6 <cosf+0x4e>
 801b4c6:	2201      	movs	r2, #1
 801b4c8:	9901      	ldr	r1, [sp, #4]
 801b4ca:	9800      	ldr	r0, [sp, #0]
 801b4cc:	f001 fa32 	bl	801c934 <__kernel_sinf>
 801b4d0:	e7dd      	b.n	801b48e <cosf+0x26>
 801b4d2:	bf00      	nop
 801b4d4:	3f490fd8 	.word	0x3f490fd8

0801b4d8 <roundf>:
 801b4d8:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 801b4dc:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 801b4e0:	2a16      	cmp	r2, #22
 801b4e2:	ee07 0a90 	vmov	s15, r0
 801b4e6:	dc15      	bgt.n	801b514 <roundf+0x3c>
 801b4e8:	2a00      	cmp	r2, #0
 801b4ea:	da08      	bge.n	801b4fe <roundf+0x26>
 801b4ec:	3201      	adds	r2, #1
 801b4ee:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 801b4f2:	d101      	bne.n	801b4f8 <roundf+0x20>
 801b4f4:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 801b4f8:	ee07 3a90 	vmov	s15, r3
 801b4fc:	e00e      	b.n	801b51c <roundf+0x44>
 801b4fe:	4909      	ldr	r1, [pc, #36]	; (801b524 <roundf+0x4c>)
 801b500:	4111      	asrs	r1, r2
 801b502:	4208      	tst	r0, r1
 801b504:	d00a      	beq.n	801b51c <roundf+0x44>
 801b506:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801b50a:	4113      	asrs	r3, r2
 801b50c:	4403      	add	r3, r0
 801b50e:	ea23 0301 	bic.w	r3, r3, r1
 801b512:	e7f1      	b.n	801b4f8 <roundf+0x20>
 801b514:	2a80      	cmp	r2, #128	; 0x80
 801b516:	d101      	bne.n	801b51c <roundf+0x44>
 801b518:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801b51c:	ee17 0a90 	vmov	r0, s15
 801b520:	4770      	bx	lr
 801b522:	bf00      	nop
 801b524:	007fffff 	.word	0x007fffff

0801b528 <sinf>:
 801b528:	b507      	push	{r0, r1, r2, lr}
 801b52a:	4a1b      	ldr	r2, [pc, #108]	; (801b598 <sinf+0x70>)
 801b52c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 801b530:	4293      	cmp	r3, r2
 801b532:	ee07 0a90 	vmov	s15, r0
 801b536:	dc04      	bgt.n	801b542 <sinf+0x1a>
 801b538:	2200      	movs	r2, #0
 801b53a:	2100      	movs	r1, #0
 801b53c:	f001 f9fa 	bl	801c934 <__kernel_sinf>
 801b540:	e006      	b.n	801b550 <sinf+0x28>
 801b542:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801b546:	db06      	blt.n	801b556 <sinf+0x2e>
 801b548:	ee77 7ae7 	vsub.f32	s15, s15, s15
 801b54c:	ee17 0a90 	vmov	r0, s15
 801b550:	b003      	add	sp, #12
 801b552:	f85d fb04 	ldr.w	pc, [sp], #4
 801b556:	4669      	mov	r1, sp
 801b558:	f000 fdd8 	bl	801c10c <__ieee754_rem_pio2f>
 801b55c:	f000 0003 	and.w	r0, r0, #3
 801b560:	2801      	cmp	r0, #1
 801b562:	d006      	beq.n	801b572 <sinf+0x4a>
 801b564:	2802      	cmp	r0, #2
 801b566:	d009      	beq.n	801b57c <sinf+0x54>
 801b568:	b980      	cbnz	r0, 801b58c <sinf+0x64>
 801b56a:	2201      	movs	r2, #1
 801b56c:	9901      	ldr	r1, [sp, #4]
 801b56e:	9800      	ldr	r0, [sp, #0]
 801b570:	e7e4      	b.n	801b53c <sinf+0x14>
 801b572:	9901      	ldr	r1, [sp, #4]
 801b574:	9800      	ldr	r0, [sp, #0]
 801b576:	f000 fefb 	bl	801c370 <__kernel_cosf>
 801b57a:	e7e9      	b.n	801b550 <sinf+0x28>
 801b57c:	2201      	movs	r2, #1
 801b57e:	9901      	ldr	r1, [sp, #4]
 801b580:	9800      	ldr	r0, [sp, #0]
 801b582:	f001 f9d7 	bl	801c934 <__kernel_sinf>
 801b586:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 801b58a:	e7e1      	b.n	801b550 <sinf+0x28>
 801b58c:	9901      	ldr	r1, [sp, #4]
 801b58e:	9800      	ldr	r0, [sp, #0]
 801b590:	f000 feee 	bl	801c370 <__kernel_cosf>
 801b594:	e7f7      	b.n	801b586 <sinf+0x5e>
 801b596:	bf00      	nop
 801b598:	3f490fd8 	.word	0x3f490fd8

0801b59c <tanf>:
 801b59c:	b507      	push	{r0, r1, r2, lr}
 801b59e:	4a11      	ldr	r2, [pc, #68]	; (801b5e4 <tanf+0x48>)
 801b5a0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 801b5a4:	4293      	cmp	r3, r2
 801b5a6:	ee07 0a90 	vmov	s15, r0
 801b5aa:	dc06      	bgt.n	801b5ba <tanf+0x1e>
 801b5ac:	2201      	movs	r2, #1
 801b5ae:	2100      	movs	r1, #0
 801b5b0:	f001 fa0c 	bl	801c9cc <__kernel_tanf>
 801b5b4:	ee07 0a90 	vmov	s15, r0
 801b5b8:	e004      	b.n	801b5c4 <tanf+0x28>
 801b5ba:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801b5be:	db06      	blt.n	801b5ce <tanf+0x32>
 801b5c0:	ee77 7ae7 	vsub.f32	s15, s15, s15
 801b5c4:	ee17 0a90 	vmov	r0, s15
 801b5c8:	b003      	add	sp, #12
 801b5ca:	f85d fb04 	ldr.w	pc, [sp], #4
 801b5ce:	4669      	mov	r1, sp
 801b5d0:	f000 fd9c 	bl	801c10c <__ieee754_rem_pio2f>
 801b5d4:	0042      	lsls	r2, r0, #1
 801b5d6:	f002 0202 	and.w	r2, r2, #2
 801b5da:	f1c2 0201 	rsb	r2, r2, #1
 801b5de:	9901      	ldr	r1, [sp, #4]
 801b5e0:	9800      	ldr	r0, [sp, #0]
 801b5e2:	e7e5      	b.n	801b5b0 <tanf+0x14>
 801b5e4:	3f490fda 	.word	0x3f490fda

0801b5e8 <asin>:
 801b5e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b5ec:	f8df 809c 	ldr.w	r8, [pc, #156]	; 801b68c <asin+0xa4>
 801b5f0:	b08b      	sub	sp, #44	; 0x2c
 801b5f2:	4604      	mov	r4, r0
 801b5f4:	460d      	mov	r5, r1
 801b5f6:	f000 f8fb 	bl	801b7f0 <__ieee754_asin>
 801b5fa:	f998 3000 	ldrsb.w	r3, [r8]
 801b5fe:	3301      	adds	r3, #1
 801b600:	4606      	mov	r6, r0
 801b602:	460f      	mov	r7, r1
 801b604:	d036      	beq.n	801b674 <asin+0x8c>
 801b606:	4622      	mov	r2, r4
 801b608:	462b      	mov	r3, r5
 801b60a:	4620      	mov	r0, r4
 801b60c:	4629      	mov	r1, r5
 801b60e:	f7e5 fa95 	bl	8000b3c <__aeabi_dcmpun>
 801b612:	4681      	mov	r9, r0
 801b614:	2800      	cmp	r0, #0
 801b616:	d12d      	bne.n	801b674 <asin+0x8c>
 801b618:	4620      	mov	r0, r4
 801b61a:	4629      	mov	r1, r5
 801b61c:	f001 fc4c 	bl	801ceb8 <fabs>
 801b620:	2200      	movs	r2, #0
 801b622:	4b17      	ldr	r3, [pc, #92]	; (801b680 <asin+0x98>)
 801b624:	f7e5 fa80 	bl	8000b28 <__aeabi_dcmpgt>
 801b628:	b320      	cbz	r0, 801b674 <asin+0x8c>
 801b62a:	2301      	movs	r3, #1
 801b62c:	9300      	str	r3, [sp, #0]
 801b62e:	4815      	ldr	r0, [pc, #84]	; (801b684 <asin+0x9c>)
 801b630:	4b15      	ldr	r3, [pc, #84]	; (801b688 <asin+0xa0>)
 801b632:	9301      	str	r3, [sp, #4]
 801b634:	f8cd 9020 	str.w	r9, [sp, #32]
 801b638:	e9cd 4504 	strd	r4, r5, [sp, #16]
 801b63c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 801b640:	f001 fc40 	bl	801cec4 <nan>
 801b644:	f998 3000 	ldrsb.w	r3, [r8]
 801b648:	2b02      	cmp	r3, #2
 801b64a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801b64e:	d104      	bne.n	801b65a <asin+0x72>
 801b650:	f7fe fea4 	bl	801a39c <__errno>
 801b654:	2321      	movs	r3, #33	; 0x21
 801b656:	6003      	str	r3, [r0, #0]
 801b658:	e004      	b.n	801b664 <asin+0x7c>
 801b65a:	4668      	mov	r0, sp
 801b65c:	f001 fc30 	bl	801cec0 <matherr>
 801b660:	2800      	cmp	r0, #0
 801b662:	d0f5      	beq.n	801b650 <asin+0x68>
 801b664:	9b08      	ldr	r3, [sp, #32]
 801b666:	b11b      	cbz	r3, 801b670 <asin+0x88>
 801b668:	f7fe fe98 	bl	801a39c <__errno>
 801b66c:	9b08      	ldr	r3, [sp, #32]
 801b66e:	6003      	str	r3, [r0, #0]
 801b670:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 801b674:	4630      	mov	r0, r6
 801b676:	4639      	mov	r1, r7
 801b678:	b00b      	add	sp, #44	; 0x2c
 801b67a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b67e:	bf00      	nop
 801b680:	3ff00000 	.word	0x3ff00000
 801b684:	0801d63d 	.word	0x0801d63d
 801b688:	0801d66b 	.word	0x0801d66b
 801b68c:	200013a8 	.word	0x200013a8

0801b690 <atan2>:
 801b690:	f000 baaa 	b.w	801bbe8 <__ieee754_atan2>

0801b694 <sqrt>:
 801b694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b698:	b08b      	sub	sp, #44	; 0x2c
 801b69a:	4604      	mov	r4, r0
 801b69c:	460d      	mov	r5, r1
 801b69e:	f000 fb89 	bl	801bdb4 <__ieee754_sqrt>
 801b6a2:	4b24      	ldr	r3, [pc, #144]	; (801b734 <sqrt+0xa0>)
 801b6a4:	f993 a000 	ldrsb.w	sl, [r3]
 801b6a8:	f1ba 3fff 	cmp.w	sl, #4294967295
 801b6ac:	4680      	mov	r8, r0
 801b6ae:	4689      	mov	r9, r1
 801b6b0:	d02b      	beq.n	801b70a <sqrt+0x76>
 801b6b2:	4622      	mov	r2, r4
 801b6b4:	462b      	mov	r3, r5
 801b6b6:	4620      	mov	r0, r4
 801b6b8:	4629      	mov	r1, r5
 801b6ba:	f7e5 fa3f 	bl	8000b3c <__aeabi_dcmpun>
 801b6be:	4683      	mov	fp, r0
 801b6c0:	bb18      	cbnz	r0, 801b70a <sqrt+0x76>
 801b6c2:	2600      	movs	r6, #0
 801b6c4:	2700      	movs	r7, #0
 801b6c6:	4632      	mov	r2, r6
 801b6c8:	463b      	mov	r3, r7
 801b6ca:	4620      	mov	r0, r4
 801b6cc:	4629      	mov	r1, r5
 801b6ce:	f7e5 fa0d 	bl	8000aec <__aeabi_dcmplt>
 801b6d2:	b1d0      	cbz	r0, 801b70a <sqrt+0x76>
 801b6d4:	2301      	movs	r3, #1
 801b6d6:	9300      	str	r3, [sp, #0]
 801b6d8:	4b17      	ldr	r3, [pc, #92]	; (801b738 <sqrt+0xa4>)
 801b6da:	9301      	str	r3, [sp, #4]
 801b6dc:	f8cd b020 	str.w	fp, [sp, #32]
 801b6e0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 801b6e4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 801b6e8:	f1ba 0f00 	cmp.w	sl, #0
 801b6ec:	d112      	bne.n	801b714 <sqrt+0x80>
 801b6ee:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801b6f2:	4668      	mov	r0, sp
 801b6f4:	f001 fbe4 	bl	801cec0 <matherr>
 801b6f8:	b1b8      	cbz	r0, 801b72a <sqrt+0x96>
 801b6fa:	9b08      	ldr	r3, [sp, #32]
 801b6fc:	b11b      	cbz	r3, 801b706 <sqrt+0x72>
 801b6fe:	f7fe fe4d 	bl	801a39c <__errno>
 801b702:	9b08      	ldr	r3, [sp, #32]
 801b704:	6003      	str	r3, [r0, #0]
 801b706:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 801b70a:	4640      	mov	r0, r8
 801b70c:	4649      	mov	r1, r9
 801b70e:	b00b      	add	sp, #44	; 0x2c
 801b710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b714:	4632      	mov	r2, r6
 801b716:	463b      	mov	r3, r7
 801b718:	4630      	mov	r0, r6
 801b71a:	4639      	mov	r1, r7
 801b71c:	f7e5 f89e 	bl	800085c <__aeabi_ddiv>
 801b720:	f1ba 0f02 	cmp.w	sl, #2
 801b724:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801b728:	d1e3      	bne.n	801b6f2 <sqrt+0x5e>
 801b72a:	f7fe fe37 	bl	801a39c <__errno>
 801b72e:	2321      	movs	r3, #33	; 0x21
 801b730:	6003      	str	r3, [r0, #0]
 801b732:	e7e2      	b.n	801b6fa <sqrt+0x66>
 801b734:	200013a8 	.word	0x200013a8
 801b738:	0801d670 	.word	0x0801d670

0801b73c <acosf>:
 801b73c:	b530      	push	{r4, r5, lr}
 801b73e:	ed2d 8b02 	vpush	{d8}
 801b742:	4d27      	ldr	r5, [pc, #156]	; (801b7e0 <acosf+0xa4>)
 801b744:	b08b      	sub	sp, #44	; 0x2c
 801b746:	ee08 0a10 	vmov	s16, r0
 801b74a:	f000 fbdf 	bl	801bf0c <__ieee754_acosf>
 801b74e:	f995 3000 	ldrsb.w	r3, [r5]
 801b752:	3301      	adds	r3, #1
 801b754:	4604      	mov	r4, r0
 801b756:	d03d      	beq.n	801b7d4 <acosf+0x98>
 801b758:	eeb4 8a48 	vcmp.f32	s16, s16
 801b75c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b760:	d638      	bvs.n	801b7d4 <acosf+0x98>
 801b762:	ee18 0a10 	vmov	r0, s16
 801b766:	f001 fbb3 	bl	801ced0 <fabsf>
 801b76a:	ee07 0a10 	vmov	s14, r0
 801b76e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801b772:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b77a:	dd2b      	ble.n	801b7d4 <acosf+0x98>
 801b77c:	2301      	movs	r3, #1
 801b77e:	9300      	str	r3, [sp, #0]
 801b780:	4b18      	ldr	r3, [pc, #96]	; (801b7e4 <acosf+0xa8>)
 801b782:	9301      	str	r3, [sp, #4]
 801b784:	ee18 0a10 	vmov	r0, s16
 801b788:	2300      	movs	r3, #0
 801b78a:	9308      	str	r3, [sp, #32]
 801b78c:	f7e4 fee4 	bl	8000558 <__aeabi_f2d>
 801b790:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b794:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b798:	4813      	ldr	r0, [pc, #76]	; (801b7e8 <acosf+0xac>)
 801b79a:	f001 fb93 	bl	801cec4 <nan>
 801b79e:	f995 3000 	ldrsb.w	r3, [r5]
 801b7a2:	2b02      	cmp	r3, #2
 801b7a4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801b7a8:	d104      	bne.n	801b7b4 <acosf+0x78>
 801b7aa:	f7fe fdf7 	bl	801a39c <__errno>
 801b7ae:	2321      	movs	r3, #33	; 0x21
 801b7b0:	6003      	str	r3, [r0, #0]
 801b7b2:	e004      	b.n	801b7be <acosf+0x82>
 801b7b4:	4668      	mov	r0, sp
 801b7b6:	f001 fb83 	bl	801cec0 <matherr>
 801b7ba:	2800      	cmp	r0, #0
 801b7bc:	d0f5      	beq.n	801b7aa <acosf+0x6e>
 801b7be:	9b08      	ldr	r3, [sp, #32]
 801b7c0:	b11b      	cbz	r3, 801b7ca <acosf+0x8e>
 801b7c2:	f7fe fdeb 	bl	801a39c <__errno>
 801b7c6:	9b08      	ldr	r3, [sp, #32]
 801b7c8:	6003      	str	r3, [r0, #0]
 801b7ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801b7ce:	f7e5 f9f3 	bl	8000bb8 <__aeabi_d2f>
 801b7d2:	4604      	mov	r4, r0
 801b7d4:	4620      	mov	r0, r4
 801b7d6:	b00b      	add	sp, #44	; 0x2c
 801b7d8:	ecbd 8b02 	vpop	{d8}
 801b7dc:	bd30      	pop	{r4, r5, pc}
 801b7de:	bf00      	nop
 801b7e0:	200013a8 	.word	0x200013a8
 801b7e4:	0801d675 	.word	0x0801d675
 801b7e8:	0801d63d 	.word	0x0801d63d
 801b7ec:	00000000 	.word	0x00000000

0801b7f0 <__ieee754_asin>:
 801b7f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b7f4:	4bc4      	ldr	r3, [pc, #784]	; (801bb08 <__ieee754_asin+0x318>)
 801b7f6:	b087      	sub	sp, #28
 801b7f8:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 801b7fc:	429f      	cmp	r7, r3
 801b7fe:	4604      	mov	r4, r0
 801b800:	460d      	mov	r5, r1
 801b802:	9101      	str	r1, [sp, #4]
 801b804:	dd2a      	ble.n	801b85c <__ieee754_asin+0x6c>
 801b806:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 801b80a:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 801b80e:	4603      	mov	r3, r0
 801b810:	433b      	orrs	r3, r7
 801b812:	d114      	bne.n	801b83e <__ieee754_asin+0x4e>
 801b814:	a3a2      	add	r3, pc, #648	; (adr r3, 801baa0 <__ieee754_asin+0x2b0>)
 801b816:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b81a:	f7e4 fef5 	bl	8000608 <__aeabi_dmul>
 801b81e:	a3a2      	add	r3, pc, #648	; (adr r3, 801baa8 <__ieee754_asin+0x2b8>)
 801b820:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b824:	4606      	mov	r6, r0
 801b826:	460f      	mov	r7, r1
 801b828:	4620      	mov	r0, r4
 801b82a:	4629      	mov	r1, r5
 801b82c:	f7e4 feec 	bl	8000608 <__aeabi_dmul>
 801b830:	4602      	mov	r2, r0
 801b832:	460b      	mov	r3, r1
 801b834:	4630      	mov	r0, r6
 801b836:	4639      	mov	r1, r7
 801b838:	f7e4 fd30 	bl	800029c <__adddf3>
 801b83c:	e007      	b.n	801b84e <__ieee754_asin+0x5e>
 801b83e:	4602      	mov	r2, r0
 801b840:	460b      	mov	r3, r1
 801b842:	f7e4 fd29 	bl	8000298 <__aeabi_dsub>
 801b846:	4602      	mov	r2, r0
 801b848:	460b      	mov	r3, r1
 801b84a:	f7e5 f807 	bl	800085c <__aeabi_ddiv>
 801b84e:	4604      	mov	r4, r0
 801b850:	460d      	mov	r5, r1
 801b852:	4620      	mov	r0, r4
 801b854:	4629      	mov	r1, r5
 801b856:	b007      	add	sp, #28
 801b858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b85c:	4bab      	ldr	r3, [pc, #684]	; (801bb0c <__ieee754_asin+0x31c>)
 801b85e:	429f      	cmp	r7, r3
 801b860:	dc0e      	bgt.n	801b880 <__ieee754_asin+0x90>
 801b862:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 801b866:	f280 80ab 	bge.w	801b9c0 <__ieee754_asin+0x1d0>
 801b86a:	a391      	add	r3, pc, #580	; (adr r3, 801bab0 <__ieee754_asin+0x2c0>)
 801b86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b870:	f7e4 fd14 	bl	800029c <__adddf3>
 801b874:	2200      	movs	r2, #0
 801b876:	4ba6      	ldr	r3, [pc, #664]	; (801bb10 <__ieee754_asin+0x320>)
 801b878:	f7e5 f956 	bl	8000b28 <__aeabi_dcmpgt>
 801b87c:	2800      	cmp	r0, #0
 801b87e:	d1e8      	bne.n	801b852 <__ieee754_asin+0x62>
 801b880:	4620      	mov	r0, r4
 801b882:	4629      	mov	r1, r5
 801b884:	f001 fb18 	bl	801ceb8 <fabs>
 801b888:	4602      	mov	r2, r0
 801b88a:	460b      	mov	r3, r1
 801b88c:	2000      	movs	r0, #0
 801b88e:	49a0      	ldr	r1, [pc, #640]	; (801bb10 <__ieee754_asin+0x320>)
 801b890:	f7e4 fd02 	bl	8000298 <__aeabi_dsub>
 801b894:	2200      	movs	r2, #0
 801b896:	4b9f      	ldr	r3, [pc, #636]	; (801bb14 <__ieee754_asin+0x324>)
 801b898:	f7e4 feb6 	bl	8000608 <__aeabi_dmul>
 801b89c:	a386      	add	r3, pc, #536	; (adr r3, 801bab8 <__ieee754_asin+0x2c8>)
 801b89e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b8a2:	4604      	mov	r4, r0
 801b8a4:	460d      	mov	r5, r1
 801b8a6:	f7e4 feaf 	bl	8000608 <__aeabi_dmul>
 801b8aa:	a385      	add	r3, pc, #532	; (adr r3, 801bac0 <__ieee754_asin+0x2d0>)
 801b8ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b8b0:	f7e4 fcf4 	bl	800029c <__adddf3>
 801b8b4:	4622      	mov	r2, r4
 801b8b6:	462b      	mov	r3, r5
 801b8b8:	f7e4 fea6 	bl	8000608 <__aeabi_dmul>
 801b8bc:	a382      	add	r3, pc, #520	; (adr r3, 801bac8 <__ieee754_asin+0x2d8>)
 801b8be:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b8c2:	f7e4 fce9 	bl	8000298 <__aeabi_dsub>
 801b8c6:	4622      	mov	r2, r4
 801b8c8:	462b      	mov	r3, r5
 801b8ca:	f7e4 fe9d 	bl	8000608 <__aeabi_dmul>
 801b8ce:	a380      	add	r3, pc, #512	; (adr r3, 801bad0 <__ieee754_asin+0x2e0>)
 801b8d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b8d4:	f7e4 fce2 	bl	800029c <__adddf3>
 801b8d8:	4622      	mov	r2, r4
 801b8da:	462b      	mov	r3, r5
 801b8dc:	f7e4 fe94 	bl	8000608 <__aeabi_dmul>
 801b8e0:	a37d      	add	r3, pc, #500	; (adr r3, 801bad8 <__ieee754_asin+0x2e8>)
 801b8e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b8e6:	f7e4 fcd7 	bl	8000298 <__aeabi_dsub>
 801b8ea:	4622      	mov	r2, r4
 801b8ec:	462b      	mov	r3, r5
 801b8ee:	f7e4 fe8b 	bl	8000608 <__aeabi_dmul>
 801b8f2:	a37b      	add	r3, pc, #492	; (adr r3, 801bae0 <__ieee754_asin+0x2f0>)
 801b8f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b8f8:	f7e4 fcd0 	bl	800029c <__adddf3>
 801b8fc:	4622      	mov	r2, r4
 801b8fe:	462b      	mov	r3, r5
 801b900:	f7e4 fe82 	bl	8000608 <__aeabi_dmul>
 801b904:	a378      	add	r3, pc, #480	; (adr r3, 801bae8 <__ieee754_asin+0x2f8>)
 801b906:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b90a:	4680      	mov	r8, r0
 801b90c:	4689      	mov	r9, r1
 801b90e:	4620      	mov	r0, r4
 801b910:	4629      	mov	r1, r5
 801b912:	f7e4 fe79 	bl	8000608 <__aeabi_dmul>
 801b916:	a376      	add	r3, pc, #472	; (adr r3, 801baf0 <__ieee754_asin+0x300>)
 801b918:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b91c:	f7e4 fcbc 	bl	8000298 <__aeabi_dsub>
 801b920:	4622      	mov	r2, r4
 801b922:	462b      	mov	r3, r5
 801b924:	f7e4 fe70 	bl	8000608 <__aeabi_dmul>
 801b928:	a373      	add	r3, pc, #460	; (adr r3, 801baf8 <__ieee754_asin+0x308>)
 801b92a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b92e:	f7e4 fcb5 	bl	800029c <__adddf3>
 801b932:	4622      	mov	r2, r4
 801b934:	462b      	mov	r3, r5
 801b936:	f7e4 fe67 	bl	8000608 <__aeabi_dmul>
 801b93a:	a371      	add	r3, pc, #452	; (adr r3, 801bb00 <__ieee754_asin+0x310>)
 801b93c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b940:	f7e4 fcaa 	bl	8000298 <__aeabi_dsub>
 801b944:	4622      	mov	r2, r4
 801b946:	462b      	mov	r3, r5
 801b948:	f7e4 fe5e 	bl	8000608 <__aeabi_dmul>
 801b94c:	4b70      	ldr	r3, [pc, #448]	; (801bb10 <__ieee754_asin+0x320>)
 801b94e:	2200      	movs	r2, #0
 801b950:	f7e4 fca4 	bl	800029c <__adddf3>
 801b954:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b958:	4620      	mov	r0, r4
 801b95a:	4629      	mov	r1, r5
 801b95c:	f000 fa2a 	bl	801bdb4 <__ieee754_sqrt>
 801b960:	4b6d      	ldr	r3, [pc, #436]	; (801bb18 <__ieee754_asin+0x328>)
 801b962:	429f      	cmp	r7, r3
 801b964:	4682      	mov	sl, r0
 801b966:	468b      	mov	fp, r1
 801b968:	f340 80d8 	ble.w	801bb1c <__ieee754_asin+0x32c>
 801b96c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801b970:	4640      	mov	r0, r8
 801b972:	4649      	mov	r1, r9
 801b974:	f7e4 ff72 	bl	800085c <__aeabi_ddiv>
 801b978:	4652      	mov	r2, sl
 801b97a:	465b      	mov	r3, fp
 801b97c:	f7e4 fe44 	bl	8000608 <__aeabi_dmul>
 801b980:	4652      	mov	r2, sl
 801b982:	465b      	mov	r3, fp
 801b984:	f7e4 fc8a 	bl	800029c <__adddf3>
 801b988:	4602      	mov	r2, r0
 801b98a:	460b      	mov	r3, r1
 801b98c:	f7e4 fc86 	bl	800029c <__adddf3>
 801b990:	a345      	add	r3, pc, #276	; (adr r3, 801baa8 <__ieee754_asin+0x2b8>)
 801b992:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b996:	f7e4 fc7f 	bl	8000298 <__aeabi_dsub>
 801b99a:	4602      	mov	r2, r0
 801b99c:	460b      	mov	r3, r1
 801b99e:	a140      	add	r1, pc, #256	; (adr r1, 801baa0 <__ieee754_asin+0x2b0>)
 801b9a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b9a4:	f7e4 fc78 	bl	8000298 <__aeabi_dsub>
 801b9a8:	9b01      	ldr	r3, [sp, #4]
 801b9aa:	2b00      	cmp	r3, #0
 801b9ac:	bfdc      	itt	le
 801b9ae:	4602      	movle	r2, r0
 801b9b0:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 801b9b4:	4604      	mov	r4, r0
 801b9b6:	460d      	mov	r5, r1
 801b9b8:	bfdc      	itt	le
 801b9ba:	4614      	movle	r4, r2
 801b9bc:	461d      	movle	r5, r3
 801b9be:	e748      	b.n	801b852 <__ieee754_asin+0x62>
 801b9c0:	4602      	mov	r2, r0
 801b9c2:	460b      	mov	r3, r1
 801b9c4:	f7e4 fe20 	bl	8000608 <__aeabi_dmul>
 801b9c8:	a33b      	add	r3, pc, #236	; (adr r3, 801bab8 <__ieee754_asin+0x2c8>)
 801b9ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b9ce:	4606      	mov	r6, r0
 801b9d0:	460f      	mov	r7, r1
 801b9d2:	f7e4 fe19 	bl	8000608 <__aeabi_dmul>
 801b9d6:	a33a      	add	r3, pc, #232	; (adr r3, 801bac0 <__ieee754_asin+0x2d0>)
 801b9d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b9dc:	f7e4 fc5e 	bl	800029c <__adddf3>
 801b9e0:	4632      	mov	r2, r6
 801b9e2:	463b      	mov	r3, r7
 801b9e4:	f7e4 fe10 	bl	8000608 <__aeabi_dmul>
 801b9e8:	a337      	add	r3, pc, #220	; (adr r3, 801bac8 <__ieee754_asin+0x2d8>)
 801b9ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b9ee:	f7e4 fc53 	bl	8000298 <__aeabi_dsub>
 801b9f2:	4632      	mov	r2, r6
 801b9f4:	463b      	mov	r3, r7
 801b9f6:	f7e4 fe07 	bl	8000608 <__aeabi_dmul>
 801b9fa:	a335      	add	r3, pc, #212	; (adr r3, 801bad0 <__ieee754_asin+0x2e0>)
 801b9fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba00:	f7e4 fc4c 	bl	800029c <__adddf3>
 801ba04:	4632      	mov	r2, r6
 801ba06:	463b      	mov	r3, r7
 801ba08:	f7e4 fdfe 	bl	8000608 <__aeabi_dmul>
 801ba0c:	a332      	add	r3, pc, #200	; (adr r3, 801bad8 <__ieee754_asin+0x2e8>)
 801ba0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba12:	f7e4 fc41 	bl	8000298 <__aeabi_dsub>
 801ba16:	4632      	mov	r2, r6
 801ba18:	463b      	mov	r3, r7
 801ba1a:	f7e4 fdf5 	bl	8000608 <__aeabi_dmul>
 801ba1e:	a330      	add	r3, pc, #192	; (adr r3, 801bae0 <__ieee754_asin+0x2f0>)
 801ba20:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba24:	f7e4 fc3a 	bl	800029c <__adddf3>
 801ba28:	4632      	mov	r2, r6
 801ba2a:	463b      	mov	r3, r7
 801ba2c:	f7e4 fdec 	bl	8000608 <__aeabi_dmul>
 801ba30:	a32d      	add	r3, pc, #180	; (adr r3, 801bae8 <__ieee754_asin+0x2f8>)
 801ba32:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba36:	4680      	mov	r8, r0
 801ba38:	4689      	mov	r9, r1
 801ba3a:	4630      	mov	r0, r6
 801ba3c:	4639      	mov	r1, r7
 801ba3e:	f7e4 fde3 	bl	8000608 <__aeabi_dmul>
 801ba42:	a32b      	add	r3, pc, #172	; (adr r3, 801baf0 <__ieee754_asin+0x300>)
 801ba44:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba48:	f7e4 fc26 	bl	8000298 <__aeabi_dsub>
 801ba4c:	4632      	mov	r2, r6
 801ba4e:	463b      	mov	r3, r7
 801ba50:	f7e4 fdda 	bl	8000608 <__aeabi_dmul>
 801ba54:	a328      	add	r3, pc, #160	; (adr r3, 801baf8 <__ieee754_asin+0x308>)
 801ba56:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba5a:	f7e4 fc1f 	bl	800029c <__adddf3>
 801ba5e:	4632      	mov	r2, r6
 801ba60:	463b      	mov	r3, r7
 801ba62:	f7e4 fdd1 	bl	8000608 <__aeabi_dmul>
 801ba66:	a326      	add	r3, pc, #152	; (adr r3, 801bb00 <__ieee754_asin+0x310>)
 801ba68:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba6c:	f7e4 fc14 	bl	8000298 <__aeabi_dsub>
 801ba70:	4632      	mov	r2, r6
 801ba72:	463b      	mov	r3, r7
 801ba74:	f7e4 fdc8 	bl	8000608 <__aeabi_dmul>
 801ba78:	2200      	movs	r2, #0
 801ba7a:	4b25      	ldr	r3, [pc, #148]	; (801bb10 <__ieee754_asin+0x320>)
 801ba7c:	f7e4 fc0e 	bl	800029c <__adddf3>
 801ba80:	4602      	mov	r2, r0
 801ba82:	460b      	mov	r3, r1
 801ba84:	4640      	mov	r0, r8
 801ba86:	4649      	mov	r1, r9
 801ba88:	f7e4 fee8 	bl	800085c <__aeabi_ddiv>
 801ba8c:	4622      	mov	r2, r4
 801ba8e:	462b      	mov	r3, r5
 801ba90:	f7e4 fdba 	bl	8000608 <__aeabi_dmul>
 801ba94:	4602      	mov	r2, r0
 801ba96:	460b      	mov	r3, r1
 801ba98:	4620      	mov	r0, r4
 801ba9a:	4629      	mov	r1, r5
 801ba9c:	e6cc      	b.n	801b838 <__ieee754_asin+0x48>
 801ba9e:	bf00      	nop
 801baa0:	54442d18 	.word	0x54442d18
 801baa4:	3ff921fb 	.word	0x3ff921fb
 801baa8:	33145c07 	.word	0x33145c07
 801baac:	3c91a626 	.word	0x3c91a626
 801bab0:	8800759c 	.word	0x8800759c
 801bab4:	7e37e43c 	.word	0x7e37e43c
 801bab8:	0dfdf709 	.word	0x0dfdf709
 801babc:	3f023de1 	.word	0x3f023de1
 801bac0:	7501b288 	.word	0x7501b288
 801bac4:	3f49efe0 	.word	0x3f49efe0
 801bac8:	b5688f3b 	.word	0xb5688f3b
 801bacc:	3fa48228 	.word	0x3fa48228
 801bad0:	0e884455 	.word	0x0e884455
 801bad4:	3fc9c155 	.word	0x3fc9c155
 801bad8:	03eb6f7d 	.word	0x03eb6f7d
 801badc:	3fd4d612 	.word	0x3fd4d612
 801bae0:	55555555 	.word	0x55555555
 801bae4:	3fc55555 	.word	0x3fc55555
 801bae8:	b12e9282 	.word	0xb12e9282
 801baec:	3fb3b8c5 	.word	0x3fb3b8c5
 801baf0:	1b8d0159 	.word	0x1b8d0159
 801baf4:	3fe6066c 	.word	0x3fe6066c
 801baf8:	9c598ac8 	.word	0x9c598ac8
 801bafc:	40002ae5 	.word	0x40002ae5
 801bb00:	1c8a2d4b 	.word	0x1c8a2d4b
 801bb04:	40033a27 	.word	0x40033a27
 801bb08:	3fefffff 	.word	0x3fefffff
 801bb0c:	3fdfffff 	.word	0x3fdfffff
 801bb10:	3ff00000 	.word	0x3ff00000
 801bb14:	3fe00000 	.word	0x3fe00000
 801bb18:	3fef3332 	.word	0x3fef3332
 801bb1c:	4602      	mov	r2, r0
 801bb1e:	460b      	mov	r3, r1
 801bb20:	460f      	mov	r7, r1
 801bb22:	f7e4 fbbb 	bl	800029c <__adddf3>
 801bb26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801bb2a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801bb2e:	4640      	mov	r0, r8
 801bb30:	4649      	mov	r1, r9
 801bb32:	f7e4 fe93 	bl	800085c <__aeabi_ddiv>
 801bb36:	4602      	mov	r2, r0
 801bb38:	460b      	mov	r3, r1
 801bb3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801bb3e:	f7e4 fd63 	bl	8000608 <__aeabi_dmul>
 801bb42:	2600      	movs	r6, #0
 801bb44:	4680      	mov	r8, r0
 801bb46:	4689      	mov	r9, r1
 801bb48:	4632      	mov	r2, r6
 801bb4a:	465b      	mov	r3, fp
 801bb4c:	4630      	mov	r0, r6
 801bb4e:	4659      	mov	r1, fp
 801bb50:	f7e4 fd5a 	bl	8000608 <__aeabi_dmul>
 801bb54:	4602      	mov	r2, r0
 801bb56:	460b      	mov	r3, r1
 801bb58:	4620      	mov	r0, r4
 801bb5a:	4629      	mov	r1, r5
 801bb5c:	f7e4 fb9c 	bl	8000298 <__aeabi_dsub>
 801bb60:	4632      	mov	r2, r6
 801bb62:	4604      	mov	r4, r0
 801bb64:	460d      	mov	r5, r1
 801bb66:	465b      	mov	r3, fp
 801bb68:	4650      	mov	r0, sl
 801bb6a:	4659      	mov	r1, fp
 801bb6c:	f7e4 fb96 	bl	800029c <__adddf3>
 801bb70:	4602      	mov	r2, r0
 801bb72:	460b      	mov	r3, r1
 801bb74:	4620      	mov	r0, r4
 801bb76:	4629      	mov	r1, r5
 801bb78:	f7e4 fe70 	bl	800085c <__aeabi_ddiv>
 801bb7c:	4602      	mov	r2, r0
 801bb7e:	460b      	mov	r3, r1
 801bb80:	f7e4 fb8c 	bl	800029c <__adddf3>
 801bb84:	4602      	mov	r2, r0
 801bb86:	460b      	mov	r3, r1
 801bb88:	a113      	add	r1, pc, #76	; (adr r1, 801bbd8 <__ieee754_asin+0x3e8>)
 801bb8a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bb8e:	f7e4 fb83 	bl	8000298 <__aeabi_dsub>
 801bb92:	4602      	mov	r2, r0
 801bb94:	460b      	mov	r3, r1
 801bb96:	4640      	mov	r0, r8
 801bb98:	4649      	mov	r1, r9
 801bb9a:	f7e4 fb7d 	bl	8000298 <__aeabi_dsub>
 801bb9e:	4632      	mov	r2, r6
 801bba0:	4604      	mov	r4, r0
 801bba2:	460d      	mov	r5, r1
 801bba4:	465b      	mov	r3, fp
 801bba6:	4630      	mov	r0, r6
 801bba8:	4639      	mov	r1, r7
 801bbaa:	f7e4 fb77 	bl	800029c <__adddf3>
 801bbae:	4602      	mov	r2, r0
 801bbb0:	460b      	mov	r3, r1
 801bbb2:	a10b      	add	r1, pc, #44	; (adr r1, 801bbe0 <__ieee754_asin+0x3f0>)
 801bbb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bbb8:	f7e4 fb6e 	bl	8000298 <__aeabi_dsub>
 801bbbc:	4602      	mov	r2, r0
 801bbbe:	460b      	mov	r3, r1
 801bbc0:	4620      	mov	r0, r4
 801bbc2:	4629      	mov	r1, r5
 801bbc4:	f7e4 fb68 	bl	8000298 <__aeabi_dsub>
 801bbc8:	4602      	mov	r2, r0
 801bbca:	460b      	mov	r3, r1
 801bbcc:	a104      	add	r1, pc, #16	; (adr r1, 801bbe0 <__ieee754_asin+0x3f0>)
 801bbce:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bbd2:	e6e7      	b.n	801b9a4 <__ieee754_asin+0x1b4>
 801bbd4:	f3af 8000 	nop.w
 801bbd8:	33145c07 	.word	0x33145c07
 801bbdc:	3c91a626 	.word	0x3c91a626
 801bbe0:	54442d18 	.word	0x54442d18
 801bbe4:	3fe921fb 	.word	0x3fe921fb

0801bbe8 <__ieee754_atan2>:
 801bbe8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bbec:	4690      	mov	r8, r2
 801bbee:	4699      	mov	r9, r3
 801bbf0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801bbf4:	461f      	mov	r7, r3
 801bbf6:	f1c8 0300 	rsb	r3, r8, #0
 801bbfa:	ea43 0308 	orr.w	r3, r3, r8
 801bbfe:	f8df e1b0 	ldr.w	lr, [pc, #432]	; 801bdb0 <__ieee754_atan2+0x1c8>
 801bc02:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801bc06:	4573      	cmp	r3, lr
 801bc08:	4604      	mov	r4, r0
 801bc0a:	460d      	mov	r5, r1
 801bc0c:	d808      	bhi.n	801bc20 <__ieee754_atan2+0x38>
 801bc0e:	4246      	negs	r6, r0
 801bc10:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801bc14:	4306      	orrs	r6, r0
 801bc16:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 801bc1a:	4576      	cmp	r6, lr
 801bc1c:	468c      	mov	ip, r1
 801bc1e:	d908      	bls.n	801bc32 <__ieee754_atan2+0x4a>
 801bc20:	4642      	mov	r2, r8
 801bc22:	464b      	mov	r3, r9
 801bc24:	4620      	mov	r0, r4
 801bc26:	4629      	mov	r1, r5
 801bc28:	f7e4 fb38 	bl	800029c <__adddf3>
 801bc2c:	4604      	mov	r4, r0
 801bc2e:	460d      	mov	r5, r1
 801bc30:	e031      	b.n	801bc96 <__ieee754_atan2+0xae>
 801bc32:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 801bc36:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 801bc3a:	ea56 0608 	orrs.w	r6, r6, r8
 801bc3e:	d103      	bne.n	801bc48 <__ieee754_atan2+0x60>
 801bc40:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc44:	f000 bfa8 	b.w	801cb98 <atan>
 801bc48:	17be      	asrs	r6, r7, #30
 801bc4a:	f006 0602 	and.w	r6, r6, #2
 801bc4e:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 801bc52:	ea53 0100 	orrs.w	r1, r3, r0
 801bc56:	d107      	bne.n	801bc68 <__ieee754_atan2+0x80>
 801bc58:	2e02      	cmp	r6, #2
 801bc5a:	d07a      	beq.n	801bd52 <__ieee754_atan2+0x16a>
 801bc5c:	2e03      	cmp	r6, #3
 801bc5e:	d11a      	bne.n	801bc96 <__ieee754_atan2+0xae>
 801bc60:	a541      	add	r5, pc, #260	; (adr r5, 801bd68 <__ieee754_atan2+0x180>)
 801bc62:	e9d5 4500 	ldrd	r4, r5, [r5]
 801bc66:	e016      	b.n	801bc96 <__ieee754_atan2+0xae>
 801bc68:	ea52 0108 	orrs.w	r1, r2, r8
 801bc6c:	d106      	bne.n	801bc7c <__ieee754_atan2+0x94>
 801bc6e:	f1bc 0f00 	cmp.w	ip, #0
 801bc72:	da72      	bge.n	801bd5a <__ieee754_atan2+0x172>
 801bc74:	a53e      	add	r5, pc, #248	; (adr r5, 801bd70 <__ieee754_atan2+0x188>)
 801bc76:	e9d5 4500 	ldrd	r4, r5, [r5]
 801bc7a:	e00c      	b.n	801bc96 <__ieee754_atan2+0xae>
 801bc7c:	4572      	cmp	r2, lr
 801bc7e:	d123      	bne.n	801bcc8 <__ieee754_atan2+0xe0>
 801bc80:	4293      	cmp	r3, r2
 801bc82:	d114      	bne.n	801bcae <__ieee754_atan2+0xc6>
 801bc84:	2e02      	cmp	r6, #2
 801bc86:	d00a      	beq.n	801bc9e <__ieee754_atan2+0xb6>
 801bc88:	2e03      	cmp	r6, #3
 801bc8a:	d00c      	beq.n	801bca6 <__ieee754_atan2+0xbe>
 801bc8c:	2e01      	cmp	r6, #1
 801bc8e:	d15c      	bne.n	801bd4a <__ieee754_atan2+0x162>
 801bc90:	a539      	add	r5, pc, #228	; (adr r5, 801bd78 <__ieee754_atan2+0x190>)
 801bc92:	e9d5 4500 	ldrd	r4, r5, [r5]
 801bc96:	4620      	mov	r0, r4
 801bc98:	4629      	mov	r1, r5
 801bc9a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bc9e:	a538      	add	r5, pc, #224	; (adr r5, 801bd80 <__ieee754_atan2+0x198>)
 801bca0:	e9d5 4500 	ldrd	r4, r5, [r5]
 801bca4:	e7f7      	b.n	801bc96 <__ieee754_atan2+0xae>
 801bca6:	a538      	add	r5, pc, #224	; (adr r5, 801bd88 <__ieee754_atan2+0x1a0>)
 801bca8:	e9d5 4500 	ldrd	r4, r5, [r5]
 801bcac:	e7f3      	b.n	801bc96 <__ieee754_atan2+0xae>
 801bcae:	2e02      	cmp	r6, #2
 801bcb0:	d04f      	beq.n	801bd52 <__ieee754_atan2+0x16a>
 801bcb2:	2e03      	cmp	r6, #3
 801bcb4:	d0d4      	beq.n	801bc60 <__ieee754_atan2+0x78>
 801bcb6:	2e01      	cmp	r6, #1
 801bcb8:	f04f 0400 	mov.w	r4, #0
 801bcbc:	d102      	bne.n	801bcc4 <__ieee754_atan2+0xdc>
 801bcbe:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 801bcc2:	e7e8      	b.n	801bc96 <__ieee754_atan2+0xae>
 801bcc4:	2500      	movs	r5, #0
 801bcc6:	e7e6      	b.n	801bc96 <__ieee754_atan2+0xae>
 801bcc8:	4573      	cmp	r3, lr
 801bcca:	d0d0      	beq.n	801bc6e <__ieee754_atan2+0x86>
 801bccc:	1a9b      	subs	r3, r3, r2
 801bcce:	151b      	asrs	r3, r3, #20
 801bcd0:	2b3c      	cmp	r3, #60	; 0x3c
 801bcd2:	dc20      	bgt.n	801bd16 <__ieee754_atan2+0x12e>
 801bcd4:	2f00      	cmp	r7, #0
 801bcd6:	da01      	bge.n	801bcdc <__ieee754_atan2+0xf4>
 801bcd8:	333c      	adds	r3, #60	; 0x3c
 801bcda:	db20      	blt.n	801bd1e <__ieee754_atan2+0x136>
 801bcdc:	4642      	mov	r2, r8
 801bcde:	464b      	mov	r3, r9
 801bce0:	4620      	mov	r0, r4
 801bce2:	4629      	mov	r1, r5
 801bce4:	f7e4 fdba 	bl	800085c <__aeabi_ddiv>
 801bce8:	f001 f8e6 	bl	801ceb8 <fabs>
 801bcec:	f000 ff54 	bl	801cb98 <atan>
 801bcf0:	4604      	mov	r4, r0
 801bcf2:	460d      	mov	r5, r1
 801bcf4:	2e01      	cmp	r6, #1
 801bcf6:	d015      	beq.n	801bd24 <__ieee754_atan2+0x13c>
 801bcf8:	2e02      	cmp	r6, #2
 801bcfa:	d017      	beq.n	801bd2c <__ieee754_atan2+0x144>
 801bcfc:	2e00      	cmp	r6, #0
 801bcfe:	d0ca      	beq.n	801bc96 <__ieee754_atan2+0xae>
 801bd00:	a323      	add	r3, pc, #140	; (adr r3, 801bd90 <__ieee754_atan2+0x1a8>)
 801bd02:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd06:	4620      	mov	r0, r4
 801bd08:	4629      	mov	r1, r5
 801bd0a:	f7e4 fac5 	bl	8000298 <__aeabi_dsub>
 801bd0e:	a322      	add	r3, pc, #136	; (adr r3, 801bd98 <__ieee754_atan2+0x1b0>)
 801bd10:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd14:	e016      	b.n	801bd44 <__ieee754_atan2+0x15c>
 801bd16:	a522      	add	r5, pc, #136	; (adr r5, 801bda0 <__ieee754_atan2+0x1b8>)
 801bd18:	e9d5 4500 	ldrd	r4, r5, [r5]
 801bd1c:	e7ea      	b.n	801bcf4 <__ieee754_atan2+0x10c>
 801bd1e:	2400      	movs	r4, #0
 801bd20:	2500      	movs	r5, #0
 801bd22:	e7e7      	b.n	801bcf4 <__ieee754_atan2+0x10c>
 801bd24:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 801bd28:	461d      	mov	r5, r3
 801bd2a:	e7b4      	b.n	801bc96 <__ieee754_atan2+0xae>
 801bd2c:	a318      	add	r3, pc, #96	; (adr r3, 801bd90 <__ieee754_atan2+0x1a8>)
 801bd2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd32:	4620      	mov	r0, r4
 801bd34:	4629      	mov	r1, r5
 801bd36:	f7e4 faaf 	bl	8000298 <__aeabi_dsub>
 801bd3a:	4602      	mov	r2, r0
 801bd3c:	460b      	mov	r3, r1
 801bd3e:	a116      	add	r1, pc, #88	; (adr r1, 801bd98 <__ieee754_atan2+0x1b0>)
 801bd40:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bd44:	f7e4 faa8 	bl	8000298 <__aeabi_dsub>
 801bd48:	e770      	b.n	801bc2c <__ieee754_atan2+0x44>
 801bd4a:	a517      	add	r5, pc, #92	; (adr r5, 801bda8 <__ieee754_atan2+0x1c0>)
 801bd4c:	e9d5 4500 	ldrd	r4, r5, [r5]
 801bd50:	e7a1      	b.n	801bc96 <__ieee754_atan2+0xae>
 801bd52:	a511      	add	r5, pc, #68	; (adr r5, 801bd98 <__ieee754_atan2+0x1b0>)
 801bd54:	e9d5 4500 	ldrd	r4, r5, [r5]
 801bd58:	e79d      	b.n	801bc96 <__ieee754_atan2+0xae>
 801bd5a:	a511      	add	r5, pc, #68	; (adr r5, 801bda0 <__ieee754_atan2+0x1b8>)
 801bd5c:	e9d5 4500 	ldrd	r4, r5, [r5]
 801bd60:	e799      	b.n	801bc96 <__ieee754_atan2+0xae>
 801bd62:	bf00      	nop
 801bd64:	f3af 8000 	nop.w
 801bd68:	54442d18 	.word	0x54442d18
 801bd6c:	c00921fb 	.word	0xc00921fb
 801bd70:	54442d18 	.word	0x54442d18
 801bd74:	bff921fb 	.word	0xbff921fb
 801bd78:	54442d18 	.word	0x54442d18
 801bd7c:	bfe921fb 	.word	0xbfe921fb
 801bd80:	7f3321d2 	.word	0x7f3321d2
 801bd84:	4002d97c 	.word	0x4002d97c
 801bd88:	7f3321d2 	.word	0x7f3321d2
 801bd8c:	c002d97c 	.word	0xc002d97c
 801bd90:	33145c07 	.word	0x33145c07
 801bd94:	3ca1a626 	.word	0x3ca1a626
 801bd98:	54442d18 	.word	0x54442d18
 801bd9c:	400921fb 	.word	0x400921fb
 801bda0:	54442d18 	.word	0x54442d18
 801bda4:	3ff921fb 	.word	0x3ff921fb
 801bda8:	54442d18 	.word	0x54442d18
 801bdac:	3fe921fb 	.word	0x3fe921fb
 801bdb0:	7ff00000 	.word	0x7ff00000

0801bdb4 <__ieee754_sqrt>:
 801bdb4:	4b54      	ldr	r3, [pc, #336]	; (801bf08 <__ieee754_sqrt+0x154>)
 801bdb6:	438b      	bics	r3, r1
 801bdb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bdbc:	460a      	mov	r2, r1
 801bdbe:	4606      	mov	r6, r0
 801bdc0:	460f      	mov	r7, r1
 801bdc2:	460c      	mov	r4, r1
 801bdc4:	d10f      	bne.n	801bde6 <__ieee754_sqrt+0x32>
 801bdc6:	4602      	mov	r2, r0
 801bdc8:	460b      	mov	r3, r1
 801bdca:	f7e4 fc1d 	bl	8000608 <__aeabi_dmul>
 801bdce:	4602      	mov	r2, r0
 801bdd0:	460b      	mov	r3, r1
 801bdd2:	4630      	mov	r0, r6
 801bdd4:	4639      	mov	r1, r7
 801bdd6:	f7e4 fa61 	bl	800029c <__adddf3>
 801bdda:	4606      	mov	r6, r0
 801bddc:	460f      	mov	r7, r1
 801bdde:	4630      	mov	r0, r6
 801bde0:	4639      	mov	r1, r7
 801bde2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bde6:	2900      	cmp	r1, #0
 801bde8:	4605      	mov	r5, r0
 801bdea:	4603      	mov	r3, r0
 801bdec:	dc0e      	bgt.n	801be0c <__ieee754_sqrt+0x58>
 801bdee:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 801bdf2:	ea5c 0505 	orrs.w	r5, ip, r5
 801bdf6:	d0f2      	beq.n	801bdde <__ieee754_sqrt+0x2a>
 801bdf8:	b141      	cbz	r1, 801be0c <__ieee754_sqrt+0x58>
 801bdfa:	4602      	mov	r2, r0
 801bdfc:	460b      	mov	r3, r1
 801bdfe:	f7e4 fa4b 	bl	8000298 <__aeabi_dsub>
 801be02:	4602      	mov	r2, r0
 801be04:	460b      	mov	r3, r1
 801be06:	f7e4 fd29 	bl	800085c <__aeabi_ddiv>
 801be0a:	e7e6      	b.n	801bdda <__ieee754_sqrt+0x26>
 801be0c:	1512      	asrs	r2, r2, #20
 801be0e:	d073      	beq.n	801bef8 <__ieee754_sqrt+0x144>
 801be10:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801be14:	07d5      	lsls	r5, r2, #31
 801be16:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801be1a:	bf48      	it	mi
 801be1c:	0fd9      	lsrmi	r1, r3, #31
 801be1e:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 801be22:	bf44      	itt	mi
 801be24:	005b      	lslmi	r3, r3, #1
 801be26:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 801be2a:	2500      	movs	r5, #0
 801be2c:	1051      	asrs	r1, r2, #1
 801be2e:	0fda      	lsrs	r2, r3, #31
 801be30:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801be34:	005b      	lsls	r3, r3, #1
 801be36:	2216      	movs	r2, #22
 801be38:	4628      	mov	r0, r5
 801be3a:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 801be3e:	1987      	adds	r7, r0, r6
 801be40:	42a7      	cmp	r7, r4
 801be42:	bfde      	ittt	le
 801be44:	19b8      	addle	r0, r7, r6
 801be46:	1be4      	suble	r4, r4, r7
 801be48:	19ad      	addle	r5, r5, r6
 801be4a:	0fdf      	lsrs	r7, r3, #31
 801be4c:	3a01      	subs	r2, #1
 801be4e:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 801be52:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801be56:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801be5a:	d1f0      	bne.n	801be3e <__ieee754_sqrt+0x8a>
 801be5c:	f04f 0c20 	mov.w	ip, #32
 801be60:	4696      	mov	lr, r2
 801be62:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801be66:	4284      	cmp	r4, r0
 801be68:	eb06 070e 	add.w	r7, r6, lr
 801be6c:	dc02      	bgt.n	801be74 <__ieee754_sqrt+0xc0>
 801be6e:	d112      	bne.n	801be96 <__ieee754_sqrt+0xe2>
 801be70:	429f      	cmp	r7, r3
 801be72:	d810      	bhi.n	801be96 <__ieee754_sqrt+0xe2>
 801be74:	2f00      	cmp	r7, #0
 801be76:	eb07 0e06 	add.w	lr, r7, r6
 801be7a:	da42      	bge.n	801bf02 <__ieee754_sqrt+0x14e>
 801be7c:	f1be 0f00 	cmp.w	lr, #0
 801be80:	db3f      	blt.n	801bf02 <__ieee754_sqrt+0x14e>
 801be82:	f100 0801 	add.w	r8, r0, #1
 801be86:	1a24      	subs	r4, r4, r0
 801be88:	429f      	cmp	r7, r3
 801be8a:	bf88      	it	hi
 801be8c:	f104 34ff 	addhi.w	r4, r4, #4294967295
 801be90:	1bdb      	subs	r3, r3, r7
 801be92:	4432      	add	r2, r6
 801be94:	4640      	mov	r0, r8
 801be96:	0064      	lsls	r4, r4, #1
 801be98:	f1bc 0c01 	subs.w	ip, ip, #1
 801be9c:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 801bea0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801bea4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801bea8:	d1dd      	bne.n	801be66 <__ieee754_sqrt+0xb2>
 801beaa:	4323      	orrs	r3, r4
 801beac:	d006      	beq.n	801bebc <__ieee754_sqrt+0x108>
 801beae:	1c54      	adds	r4, r2, #1
 801beb0:	bf13      	iteet	ne
 801beb2:	3201      	addne	r2, #1
 801beb4:	3501      	addeq	r5, #1
 801beb6:	4662      	moveq	r2, ip
 801beb8:	f022 0201 	bicne.w	r2, r2, #1
 801bebc:	106b      	asrs	r3, r5, #1
 801bebe:	0852      	lsrs	r2, r2, #1
 801bec0:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801bec4:	07e8      	lsls	r0, r5, #31
 801bec6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801beca:	bf48      	it	mi
 801becc:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 801bed0:	eb03 5701 	add.w	r7, r3, r1, lsl #20
 801bed4:	4616      	mov	r6, r2
 801bed6:	e782      	b.n	801bdde <__ieee754_sqrt+0x2a>
 801bed8:	0adc      	lsrs	r4, r3, #11
 801beda:	3915      	subs	r1, #21
 801bedc:	055b      	lsls	r3, r3, #21
 801bede:	2c00      	cmp	r4, #0
 801bee0:	d0fa      	beq.n	801bed8 <__ieee754_sqrt+0x124>
 801bee2:	02e6      	lsls	r6, r4, #11
 801bee4:	d50a      	bpl.n	801befc <__ieee754_sqrt+0x148>
 801bee6:	f1c2 0020 	rsb	r0, r2, #32
 801beea:	fa23 f000 	lsr.w	r0, r3, r0
 801beee:	1e55      	subs	r5, r2, #1
 801bef0:	4093      	lsls	r3, r2
 801bef2:	4304      	orrs	r4, r0
 801bef4:	1b4a      	subs	r2, r1, r5
 801bef6:	e78b      	b.n	801be10 <__ieee754_sqrt+0x5c>
 801bef8:	4611      	mov	r1, r2
 801befa:	e7f0      	b.n	801bede <__ieee754_sqrt+0x12a>
 801befc:	0064      	lsls	r4, r4, #1
 801befe:	3201      	adds	r2, #1
 801bf00:	e7ef      	b.n	801bee2 <__ieee754_sqrt+0x12e>
 801bf02:	4680      	mov	r8, r0
 801bf04:	e7bf      	b.n	801be86 <__ieee754_sqrt+0xd2>
 801bf06:	bf00      	nop
 801bf08:	7ff00000 	.word	0x7ff00000

0801bf0c <__ieee754_acosf>:
 801bf0c:	b508      	push	{r3, lr}
 801bf0e:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 801bf12:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 801bf16:	ed2d 8b0c 	vpush	{d8-d13}
 801bf1a:	ee08 0a10 	vmov	s16, r0
 801bf1e:	d10c      	bne.n	801bf3a <__ieee754_acosf+0x2e>
 801bf20:	eddf 7a69 	vldr	s15, [pc, #420]	; 801c0c8 <__ieee754_acosf+0x1bc>
 801bf24:	ed9f 8a69 	vldr	s16, [pc, #420]	; 801c0cc <__ieee754_acosf+0x1c0>
 801bf28:	2800      	cmp	r0, #0
 801bf2a:	bfd8      	it	le
 801bf2c:	eef0 7a48 	vmovle.f32	s15, s16
 801bf30:	ecbd 8b0c 	vpop	{d8-d13}
 801bf34:	ee17 0a90 	vmov	r0, s15
 801bf38:	bd08      	pop	{r3, pc}
 801bf3a:	dd04      	ble.n	801bf46 <__ieee754_acosf+0x3a>
 801bf3c:	ee38 8a48 	vsub.f32	s16, s16, s16
 801bf40:	eec8 7a08 	vdiv.f32	s15, s16, s16
 801bf44:	e7f4      	b.n	801bf30 <__ieee754_acosf+0x24>
 801bf46:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 801bf4a:	da3e      	bge.n	801bfca <__ieee754_acosf+0xbe>
 801bf4c:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 801bf50:	f340 80b7 	ble.w	801c0c2 <__ieee754_acosf+0x1b6>
 801bf54:	ee68 7a08 	vmul.f32	s15, s16, s16
 801bf58:	eddf 6a5d 	vldr	s13, [pc, #372]	; 801c0d0 <__ieee754_acosf+0x1c4>
 801bf5c:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 801c0d4 <__ieee754_acosf+0x1c8>
 801bf60:	ed9f 6a5d 	vldr	s12, [pc, #372]	; 801c0d8 <__ieee754_acosf+0x1cc>
 801bf64:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801bf68:	eddf 6a5c 	vldr	s13, [pc, #368]	; 801c0dc <__ieee754_acosf+0x1d0>
 801bf6c:	eee7 6a27 	vfma.f32	s13, s14, s15
 801bf70:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 801c0e0 <__ieee754_acosf+0x1d4>
 801bf74:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801bf78:	eddf 6a5a 	vldr	s13, [pc, #360]	; 801c0e4 <__ieee754_acosf+0x1d8>
 801bf7c:	eee7 6a27 	vfma.f32	s13, s14, s15
 801bf80:	ed9f 7a59 	vldr	s14, [pc, #356]	; 801c0e8 <__ieee754_acosf+0x1dc>
 801bf84:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801bf88:	eddf 6a58 	vldr	s13, [pc, #352]	; 801c0ec <__ieee754_acosf+0x1e0>
 801bf8c:	eea7 6aa6 	vfma.f32	s12, s15, s13
 801bf90:	eddf 6a57 	vldr	s13, [pc, #348]	; 801c0f0 <__ieee754_acosf+0x1e4>
 801bf94:	eee6 6a27 	vfma.f32	s13, s12, s15
 801bf98:	ed9f 6a56 	vldr	s12, [pc, #344]	; 801c0f4 <__ieee754_acosf+0x1e8>
 801bf9c:	eea6 6aa7 	vfma.f32	s12, s13, s15
 801bfa0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bfa4:	eee6 6a27 	vfma.f32	s13, s12, s15
 801bfa8:	ee27 7a27 	vmul.f32	s14, s14, s15
 801bfac:	eef0 7a66 	vmov.f32	s15, s13
 801bfb0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801bfb4:	eddf 7a50 	vldr	s15, [pc, #320]	; 801c0f8 <__ieee754_acosf+0x1ec>
 801bfb8:	eee8 7a66 	vfms.f32	s15, s16, s13
 801bfbc:	ee38 8a67 	vsub.f32	s16, s16, s15
 801bfc0:	eddf 7a4e 	vldr	s15, [pc, #312]	; 801c0fc <__ieee754_acosf+0x1f0>
 801bfc4:	ee77 7ac8 	vsub.f32	s15, s15, s16
 801bfc8:	e7b2      	b.n	801bf30 <__ieee754_acosf+0x24>
 801bfca:	2800      	cmp	r0, #0
 801bfcc:	eddf da40 	vldr	s27, [pc, #256]	; 801c0d0 <__ieee754_acosf+0x1c4>
 801bfd0:	eddf ca40 	vldr	s25, [pc, #256]	; 801c0d4 <__ieee754_acosf+0x1c8>
 801bfd4:	ed9f ca41 	vldr	s24, [pc, #260]	; 801c0dc <__ieee754_acosf+0x1d0>
 801bfd8:	eddf ba41 	vldr	s23, [pc, #260]	; 801c0e0 <__ieee754_acosf+0x1d4>
 801bfdc:	ed9f ba41 	vldr	s22, [pc, #260]	; 801c0e4 <__ieee754_acosf+0x1d8>
 801bfe0:	eddf 8a41 	vldr	s17, [pc, #260]	; 801c0e8 <__ieee754_acosf+0x1dc>
 801bfe4:	ed9f da41 	vldr	s26, [pc, #260]	; 801c0ec <__ieee754_acosf+0x1e0>
 801bfe8:	eddf aa3b 	vldr	s21, [pc, #236]	; 801c0d8 <__ieee754_acosf+0x1cc>
 801bfec:	ed9f aa40 	vldr	s20, [pc, #256]	; 801c0f0 <__ieee754_acosf+0x1e4>
 801bff0:	eddf 9a40 	vldr	s19, [pc, #256]	; 801c0f4 <__ieee754_acosf+0x1e8>
 801bff4:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 801bff8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801bffc:	da2c      	bge.n	801c058 <__ieee754_acosf+0x14c>
 801bffe:	ee38 8a09 	vadd.f32	s16, s16, s18
 801c002:	ee28 8a27 	vmul.f32	s16, s16, s15
 801c006:	eee8 ca2d 	vfma.f32	s25, s16, s27
 801c00a:	eee8 aa0d 	vfma.f32	s21, s16, s26
 801c00e:	eeac ca88 	vfma.f32	s24, s25, s16
 801c012:	eeaa aa88 	vfma.f32	s20, s21, s16
 801c016:	eeec ba08 	vfma.f32	s23, s24, s16
 801c01a:	eeea 9a08 	vfma.f32	s19, s20, s16
 801c01e:	eeab ba88 	vfma.f32	s22, s23, s16
 801c022:	eea9 9a88 	vfma.f32	s18, s19, s16
 801c026:	eeeb 8a08 	vfma.f32	s17, s22, s16
 801c02a:	ee18 0a10 	vmov	r0, s16
 801c02e:	ee68 8a88 	vmul.f32	s17, s17, s16
 801c032:	f000 f995 	bl	801c360 <__ieee754_sqrtf>
 801c036:	eec8 7a89 	vdiv.f32	s15, s17, s18
 801c03a:	ee06 0a90 	vmov	s13, r0
 801c03e:	ed9f 7a30 	vldr	s14, [pc, #192]	; 801c100 <__ieee754_acosf+0x1f4>
 801c042:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801c046:	eddf 7a2f 	vldr	s15, [pc, #188]	; 801c104 <__ieee754_acosf+0x1f8>
 801c04a:	ee37 7a26 	vadd.f32	s14, s14, s13
 801c04e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801c052:	eee7 7a66 	vfms.f32	s15, s14, s13
 801c056:	e76b      	b.n	801bf30 <__ieee754_acosf+0x24>
 801c058:	ee39 8a48 	vsub.f32	s16, s18, s16
 801c05c:	ee28 8a27 	vmul.f32	s16, s16, s15
 801c060:	ee18 0a10 	vmov	r0, s16
 801c064:	f000 f97c 	bl	801c360 <__ieee754_sqrtf>
 801c068:	eee8 ca2d 	vfma.f32	s25, s16, s27
 801c06c:	f420 637f 	bic.w	r3, r0, #4080	; 0xff0
 801c070:	f023 030f 	bic.w	r3, r3, #15
 801c074:	eee8 aa0d 	vfma.f32	s21, s16, s26
 801c078:	eeac ca88 	vfma.f32	s24, s25, s16
 801c07c:	eeaa aa88 	vfma.f32	s20, s21, s16
 801c080:	eeec ba08 	vfma.f32	s23, s24, s16
 801c084:	eeea 9a08 	vfma.f32	s19, s20, s16
 801c088:	eeab ba88 	vfma.f32	s22, s23, s16
 801c08c:	ee07 3a10 	vmov	s14, r3
 801c090:	eeeb 8a08 	vfma.f32	s17, s22, s16
 801c094:	eef0 5a48 	vmov.f32	s11, s16
 801c098:	ee06 0a90 	vmov	s13, r0
 801c09c:	eee7 5a47 	vfms.f32	s11, s14, s14
 801c0a0:	eea9 9a88 	vfma.f32	s18, s19, s16
 801c0a4:	ee36 6a87 	vadd.f32	s12, s13, s14
 801c0a8:	ee68 8a88 	vmul.f32	s17, s17, s16
 801c0ac:	eec5 7a86 	vdiv.f32	s15, s11, s12
 801c0b0:	ee88 6a89 	vdiv.f32	s12, s17, s18
 801c0b4:	eee6 7a86 	vfma.f32	s15, s13, s12
 801c0b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 801c0bc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801c0c0:	e736      	b.n	801bf30 <__ieee754_acosf+0x24>
 801c0c2:	eddf 7a11 	vldr	s15, [pc, #68]	; 801c108 <__ieee754_acosf+0x1fc>
 801c0c6:	e733      	b.n	801bf30 <__ieee754_acosf+0x24>
 801c0c8:	00000000 	.word	0x00000000
 801c0cc:	40490fdb 	.word	0x40490fdb
 801c0d0:	3811ef08 	.word	0x3811ef08
 801c0d4:	3a4f7f04 	.word	0x3a4f7f04
 801c0d8:	bf303361 	.word	0xbf303361
 801c0dc:	bd241146 	.word	0xbd241146
 801c0e0:	3e4e0aa8 	.word	0x3e4e0aa8
 801c0e4:	bea6b090 	.word	0xbea6b090
 801c0e8:	3e2aaaab 	.word	0x3e2aaaab
 801c0ec:	3d9dc62e 	.word	0x3d9dc62e
 801c0f0:	4001572d 	.word	0x4001572d
 801c0f4:	c019d139 	.word	0xc019d139
 801c0f8:	33a22168 	.word	0x33a22168
 801c0fc:	3fc90fda 	.word	0x3fc90fda
 801c100:	b3a22168 	.word	0xb3a22168
 801c104:	40490fda 	.word	0x40490fda
 801c108:	3fc90fdb 	.word	0x3fc90fdb

0801c10c <__ieee754_rem_pio2f>:
 801c10c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c10e:	4b86      	ldr	r3, [pc, #536]	; (801c328 <__ieee754_rem_pio2f+0x21c>)
 801c110:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 801c114:	429c      	cmp	r4, r3
 801c116:	b087      	sub	sp, #28
 801c118:	ee07 0a90 	vmov	s15, r0
 801c11c:	460d      	mov	r5, r1
 801c11e:	4606      	mov	r6, r0
 801c120:	dc04      	bgt.n	801c12c <__ieee754_rem_pio2f+0x20>
 801c122:	2300      	movs	r3, #0
 801c124:	6028      	str	r0, [r5, #0]
 801c126:	604b      	str	r3, [r1, #4]
 801c128:	2000      	movs	r0, #0
 801c12a:	e020      	b.n	801c16e <__ieee754_rem_pio2f+0x62>
 801c12c:	4b7f      	ldr	r3, [pc, #508]	; (801c32c <__ieee754_rem_pio2f+0x220>)
 801c12e:	429c      	cmp	r4, r3
 801c130:	dc38      	bgt.n	801c1a4 <__ieee754_rem_pio2f+0x98>
 801c132:	2800      	cmp	r0, #0
 801c134:	f024 040f 	bic.w	r4, r4, #15
 801c138:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 801c330 <__ieee754_rem_pio2f+0x224>
 801c13c:	4b7d      	ldr	r3, [pc, #500]	; (801c334 <__ieee754_rem_pio2f+0x228>)
 801c13e:	dd18      	ble.n	801c172 <__ieee754_rem_pio2f+0x66>
 801c140:	429c      	cmp	r4, r3
 801c142:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801c146:	bf09      	itett	eq
 801c148:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 801c338 <__ieee754_rem_pio2f+0x22c>
 801c14c:	ed9f 7a7b 	vldrne	s14, [pc, #492]	; 801c33c <__ieee754_rem_pio2f+0x230>
 801c150:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 801c154:	ed9f 7a7a 	vldreq	s14, [pc, #488]	; 801c340 <__ieee754_rem_pio2f+0x234>
 801c158:	ee77 6ac7 	vsub.f32	s13, s15, s14
 801c15c:	2001      	movs	r0, #1
 801c15e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801c162:	edc1 6a00 	vstr	s13, [r1]
 801c166:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801c16a:	edc1 7a01 	vstr	s15, [r1, #4]
 801c16e:	b007      	add	sp, #28
 801c170:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c172:	429c      	cmp	r4, r3
 801c174:	ee77 7a87 	vadd.f32	s15, s15, s14
 801c178:	bf09      	itett	eq
 801c17a:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 801c338 <__ieee754_rem_pio2f+0x22c>
 801c17e:	ed9f 7a6f 	vldrne	s14, [pc, #444]	; 801c33c <__ieee754_rem_pio2f+0x230>
 801c182:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 801c186:	ed9f 7a6e 	vldreq	s14, [pc, #440]	; 801c340 <__ieee754_rem_pio2f+0x234>
 801c18a:	ee77 6a87 	vadd.f32	s13, s15, s14
 801c18e:	f04f 30ff 	mov.w	r0, #4294967295
 801c192:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801c196:	edc1 6a00 	vstr	s13, [r1]
 801c19a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801c19e:	edc1 7a01 	vstr	s15, [r1, #4]
 801c1a2:	e7e4      	b.n	801c16e <__ieee754_rem_pio2f+0x62>
 801c1a4:	4b67      	ldr	r3, [pc, #412]	; (801c344 <__ieee754_rem_pio2f+0x238>)
 801c1a6:	429c      	cmp	r4, r3
 801c1a8:	dc73      	bgt.n	801c292 <__ieee754_rem_pio2f+0x186>
 801c1aa:	f000 fe91 	bl	801ced0 <fabsf>
 801c1ae:	eddf 6a66 	vldr	s13, [pc, #408]	; 801c348 <__ieee754_rem_pio2f+0x23c>
 801c1b2:	ee07 0a90 	vmov	s15, r0
 801c1b6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801c1ba:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801c1be:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801c1c2:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 801c1c6:	ee17 0a10 	vmov	r0, s14
 801c1ca:	ed9f 7a59 	vldr	s14, [pc, #356]	; 801c330 <__ieee754_rem_pio2f+0x224>
 801c1ce:	eef1 6a65 	vneg.f32	s13, s11
 801c1d2:	eee6 7a87 	vfma.f32	s15, s13, s14
 801c1d6:	281f      	cmp	r0, #31
 801c1d8:	ed9f 7a58 	vldr	s14, [pc, #352]	; 801c33c <__ieee754_rem_pio2f+0x230>
 801c1dc:	ee25 7a87 	vmul.f32	s14, s11, s14
 801c1e0:	ee37 6ac7 	vsub.f32	s12, s15, s14
 801c1e4:	ee16 3a10 	vmov	r3, s12
 801c1e8:	dc1c      	bgt.n	801c224 <__ieee754_rem_pio2f+0x118>
 801c1ea:	1e47      	subs	r7, r0, #1
 801c1ec:	4957      	ldr	r1, [pc, #348]	; (801c34c <__ieee754_rem_pio2f+0x240>)
 801c1ee:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 801c1f2:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 801c1f6:	428a      	cmp	r2, r1
 801c1f8:	d014      	beq.n	801c224 <__ieee754_rem_pio2f+0x118>
 801c1fa:	602b      	str	r3, [r5, #0]
 801c1fc:	edd5 6a00 	vldr	s13, [r5]
 801c200:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801c204:	2e00      	cmp	r6, #0
 801c206:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801c20a:	edc5 7a01 	vstr	s15, [r5, #4]
 801c20e:	daae      	bge.n	801c16e <__ieee754_rem_pio2f+0x62>
 801c210:	eef1 6a66 	vneg.f32	s13, s13
 801c214:	edc5 6a00 	vstr	s13, [r5]
 801c218:	eef1 7a67 	vneg.f32	s15, s15
 801c21c:	edc5 7a01 	vstr	s15, [r5, #4]
 801c220:	4240      	negs	r0, r0
 801c222:	e7a4      	b.n	801c16e <__ieee754_rem_pio2f+0x62>
 801c224:	15e4      	asrs	r4, r4, #23
 801c226:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801c22a:	1aa2      	subs	r2, r4, r2
 801c22c:	2a08      	cmp	r2, #8
 801c22e:	dde4      	ble.n	801c1fa <__ieee754_rem_pio2f+0xee>
 801c230:	ed9f 7a41 	vldr	s14, [pc, #260]	; 801c338 <__ieee754_rem_pio2f+0x22c>
 801c234:	eeb0 6a67 	vmov.f32	s12, s15
 801c238:	eea6 6a87 	vfma.f32	s12, s13, s14
 801c23c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801c240:	eee6 7a87 	vfma.f32	s15, s13, s14
 801c244:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 801c340 <__ieee754_rem_pio2f+0x234>
 801c248:	eed5 7a87 	vfnms.f32	s15, s11, s14
 801c24c:	eeb0 7a67 	vmov.f32	s14, s15
 801c250:	ee76 7a67 	vsub.f32	s15, s12, s15
 801c254:	ee17 3a90 	vmov	r3, s15
 801c258:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801c25c:	1aa4      	subs	r4, r4, r2
 801c25e:	2c19      	cmp	r4, #25
 801c260:	dc04      	bgt.n	801c26c <__ieee754_rem_pio2f+0x160>
 801c262:	edc5 7a00 	vstr	s15, [r5]
 801c266:	eef0 7a46 	vmov.f32	s15, s12
 801c26a:	e7c7      	b.n	801c1fc <__ieee754_rem_pio2f+0xf0>
 801c26c:	ed9f 5a38 	vldr	s10, [pc, #224]	; 801c350 <__ieee754_rem_pio2f+0x244>
 801c270:	eef0 7a46 	vmov.f32	s15, s12
 801c274:	eee6 7a85 	vfma.f32	s15, s13, s10
 801c278:	ee36 7a67 	vsub.f32	s14, s12, s15
 801c27c:	eea6 7a85 	vfma.f32	s14, s13, s10
 801c280:	eddf 6a34 	vldr	s13, [pc, #208]	; 801c354 <__ieee754_rem_pio2f+0x248>
 801c284:	ee95 7aa6 	vfnms.f32	s14, s11, s13
 801c288:	ee77 6ac7 	vsub.f32	s13, s15, s14
 801c28c:	edc5 6a00 	vstr	s13, [r5]
 801c290:	e7b4      	b.n	801c1fc <__ieee754_rem_pio2f+0xf0>
 801c292:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801c296:	db06      	blt.n	801c2a6 <__ieee754_rem_pio2f+0x19a>
 801c298:	ee77 7ae7 	vsub.f32	s15, s15, s15
 801c29c:	edc1 7a01 	vstr	s15, [r1, #4]
 801c2a0:	edc1 7a00 	vstr	s15, [r1]
 801c2a4:	e740      	b.n	801c128 <__ieee754_rem_pio2f+0x1c>
 801c2a6:	15e2      	asrs	r2, r4, #23
 801c2a8:	3a86      	subs	r2, #134	; 0x86
 801c2aa:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 801c2ae:	ee07 3a90 	vmov	s15, r3
 801c2b2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801c2b6:	eddf 6a28 	vldr	s13, [pc, #160]	; 801c358 <__ieee754_rem_pio2f+0x24c>
 801c2ba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c2be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801c2c2:	ed8d 7a03 	vstr	s14, [sp, #12]
 801c2c6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801c2ca:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801c2ce:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c2d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801c2d6:	ed8d 7a04 	vstr	s14, [sp, #16]
 801c2da:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801c2de:	eef5 7a40 	vcmp.f32	s15, #0.0
 801c2e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c2e6:	edcd 7a05 	vstr	s15, [sp, #20]
 801c2ea:	d11a      	bne.n	801c322 <__ieee754_rem_pio2f+0x216>
 801c2ec:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801c2f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c2f4:	bf0c      	ite	eq
 801c2f6:	2301      	moveq	r3, #1
 801c2f8:	2302      	movne	r3, #2
 801c2fa:	4918      	ldr	r1, [pc, #96]	; (801c35c <__ieee754_rem_pio2f+0x250>)
 801c2fc:	9101      	str	r1, [sp, #4]
 801c2fe:	2102      	movs	r1, #2
 801c300:	9100      	str	r1, [sp, #0]
 801c302:	a803      	add	r0, sp, #12
 801c304:	4629      	mov	r1, r5
 801c306:	f000 f897 	bl	801c438 <__kernel_rem_pio2f>
 801c30a:	2e00      	cmp	r6, #0
 801c30c:	f6bf af2f 	bge.w	801c16e <__ieee754_rem_pio2f+0x62>
 801c310:	edd5 7a00 	vldr	s15, [r5]
 801c314:	eef1 7a67 	vneg.f32	s15, s15
 801c318:	edc5 7a00 	vstr	s15, [r5]
 801c31c:	edd5 7a01 	vldr	s15, [r5, #4]
 801c320:	e77a      	b.n	801c218 <__ieee754_rem_pio2f+0x10c>
 801c322:	2303      	movs	r3, #3
 801c324:	e7e9      	b.n	801c2fa <__ieee754_rem_pio2f+0x1ee>
 801c326:	bf00      	nop
 801c328:	3f490fd8 	.word	0x3f490fd8
 801c32c:	4016cbe3 	.word	0x4016cbe3
 801c330:	3fc90f80 	.word	0x3fc90f80
 801c334:	3fc90fd0 	.word	0x3fc90fd0
 801c338:	37354400 	.word	0x37354400
 801c33c:	37354443 	.word	0x37354443
 801c340:	2e85a308 	.word	0x2e85a308
 801c344:	43490f80 	.word	0x43490f80
 801c348:	3f22f984 	.word	0x3f22f984
 801c34c:	0801d67c 	.word	0x0801d67c
 801c350:	2e85a300 	.word	0x2e85a300
 801c354:	248d3132 	.word	0x248d3132
 801c358:	43800000 	.word	0x43800000
 801c35c:	0801d6fc 	.word	0x0801d6fc

0801c360 <__ieee754_sqrtf>:
 801c360:	ee07 0a90 	vmov	s15, r0
 801c364:	eef1 7ae7 	vsqrt.f32	s15, s15
 801c368:	ee17 0a90 	vmov	r0, s15
 801c36c:	4770      	bx	lr
	...

0801c370 <__kernel_cosf>:
 801c370:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 801c374:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801c378:	ee05 0a10 	vmov	s10, r0
 801c37c:	ee07 1a10 	vmov	s14, r1
 801c380:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801c384:	da05      	bge.n	801c392 <__kernel_cosf+0x22>
 801c386:	eefd 7ac5 	vcvt.s32.f32	s15, s10
 801c38a:	ee17 2a90 	vmov	r2, s15
 801c38e:	2a00      	cmp	r2, #0
 801c390:	d03f      	beq.n	801c412 <__kernel_cosf+0xa2>
 801c392:	ee65 5a05 	vmul.f32	s11, s10, s10
 801c396:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801c39a:	ee65 7aa6 	vmul.f32	s15, s11, s13
 801c39e:	ee27 7a45 	vnmul.f32	s14, s14, s10
 801c3a2:	eddf 6a1d 	vldr	s13, [pc, #116]	; 801c418 <__kernel_cosf+0xa8>
 801c3a6:	ed9f 5a1d 	vldr	s10, [pc, #116]	; 801c41c <__kernel_cosf+0xac>
 801c3aa:	4a1d      	ldr	r2, [pc, #116]	; (801c420 <__kernel_cosf+0xb0>)
 801c3ac:	eee5 6a85 	vfma.f32	s13, s11, s10
 801c3b0:	4293      	cmp	r3, r2
 801c3b2:	ed9f 5a1c 	vldr	s10, [pc, #112]	; 801c424 <__kernel_cosf+0xb4>
 801c3b6:	eea6 5aa5 	vfma.f32	s10, s13, s11
 801c3ba:	eddf 6a1b 	vldr	s13, [pc, #108]	; 801c428 <__kernel_cosf+0xb8>
 801c3be:	eee5 6a25 	vfma.f32	s13, s10, s11
 801c3c2:	ed9f 5a1a 	vldr	s10, [pc, #104]	; 801c42c <__kernel_cosf+0xbc>
 801c3c6:	eea6 5aa5 	vfma.f32	s10, s13, s11
 801c3ca:	eddf 6a19 	vldr	s13, [pc, #100]	; 801c430 <__kernel_cosf+0xc0>
 801c3ce:	eee5 6a25 	vfma.f32	s13, s10, s11
 801c3d2:	ee66 6aa5 	vmul.f32	s13, s13, s11
 801c3d6:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801c3da:	eef0 5a47 	vmov.f32	s11, s14
 801c3de:	dc06      	bgt.n	801c3ee <__kernel_cosf+0x7e>
 801c3e0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 801c3e4:	ee76 7a47 	vsub.f32	s15, s12, s14
 801c3e8:	ee17 0a90 	vmov	r0, s15
 801c3ec:	4770      	bx	lr
 801c3ee:	4a11      	ldr	r2, [pc, #68]	; (801c434 <__kernel_cosf+0xc4>)
 801c3f0:	4293      	cmp	r3, r2
 801c3f2:	bfda      	itte	le
 801c3f4:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 801c3f8:	ee06 3a90 	vmovle	s13, r3
 801c3fc:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 801c400:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801c404:	ee36 7a66 	vsub.f32	s14, s12, s13
 801c408:	ee77 7ae5 	vsub.f32	s15, s15, s11
 801c40c:	ee77 7a67 	vsub.f32	s15, s14, s15
 801c410:	e7ea      	b.n	801c3e8 <__kernel_cosf+0x78>
 801c412:	eef0 7a46 	vmov.f32	s15, s12
 801c416:	e7e7      	b.n	801c3e8 <__kernel_cosf+0x78>
 801c418:	310f74f6 	.word	0x310f74f6
 801c41c:	ad47d74e 	.word	0xad47d74e
 801c420:	3e999999 	.word	0x3e999999
 801c424:	b493f27c 	.word	0xb493f27c
 801c428:	37d00d01 	.word	0x37d00d01
 801c42c:	bab60b61 	.word	0xbab60b61
 801c430:	3d2aaaab 	.word	0x3d2aaaab
 801c434:	3f480000 	.word	0x3f480000

0801c438 <__kernel_rem_pio2f>:
 801c438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c43c:	ed2d 8b04 	vpush	{d8-d9}
 801c440:	b0d7      	sub	sp, #348	; 0x15c
 801c442:	4688      	mov	r8, r1
 801c444:	9301      	str	r3, [sp, #4]
 801c446:	9964      	ldr	r1, [sp, #400]	; 0x190
 801c448:	4bd2      	ldr	r3, [pc, #840]	; (801c794 <__kernel_rem_pio2f+0x35c>)
 801c44a:	9002      	str	r0, [sp, #8]
 801c44c:	f853 b021 	ldr.w	fp, [r3, r1, lsl #2]
 801c450:	9b01      	ldr	r3, [sp, #4]
 801c452:	9c65      	ldr	r4, [sp, #404]	; 0x194
 801c454:	ed9f 7ad3 	vldr	s14, [pc, #844]	; 801c7a4 <__kernel_rem_pio2f+0x36c>
 801c458:	3b01      	subs	r3, #1
 801c45a:	1ed1      	subs	r1, r2, #3
 801c45c:	2008      	movs	r0, #8
 801c45e:	fb91 f1f0 	sdiv	r1, r1, r0
 801c462:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 801c466:	1c4d      	adds	r5, r1, #1
 801c468:	1ace      	subs	r6, r1, r3
 801c46a:	a81a      	add	r0, sp, #104	; 0x68
 801c46c:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 801c470:	eb0b 0703 	add.w	r7, fp, r3
 801c474:	eb04 0c86 	add.w	ip, r4, r6, lsl #2
 801c478:	4686      	mov	lr, r0
 801c47a:	2200      	movs	r2, #0
 801c47c:	42ba      	cmp	r2, r7
 801c47e:	dd0f      	ble.n	801c4a0 <__kernel_rem_pio2f+0x68>
 801c480:	af42      	add	r7, sp, #264	; 0x108
 801c482:	2000      	movs	r0, #0
 801c484:	4558      	cmp	r0, fp
 801c486:	dc27      	bgt.n	801c4d8 <__kernel_rem_pio2f+0xa0>
 801c488:	e9dd 2601 	ldrd	r2, r6, [sp, #4]
 801c48c:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 801c490:	4402      	add	r2, r0
 801c492:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
 801c496:	eddf 7ac3 	vldr	s15, [pc, #780]	; 801c7a4 <__kernel_rem_pio2f+0x36c>
 801c49a:	f04f 0c00 	mov.w	ip, #0
 801c49e:	e015      	b.n	801c4cc <__kernel_rem_pio2f+0x94>
 801c4a0:	42d6      	cmn	r6, r2
 801c4a2:	bf5d      	ittte	pl
 801c4a4:	f85c 0022 	ldrpl.w	r0, [ip, r2, lsl #2]
 801c4a8:	ee07 0a90 	vmovpl	s15, r0
 801c4ac:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801c4b0:	eef0 7a47 	vmovmi.f32	s15, s14
 801c4b4:	ecee 7a01 	vstmia	lr!, {s15}
 801c4b8:	3201      	adds	r2, #1
 801c4ba:	e7df      	b.n	801c47c <__kernel_rem_pio2f+0x44>
 801c4bc:	ecf6 6a01 	vldmia	r6!, {s13}
 801c4c0:	ed32 7a01 	vldmdb	r2!, {s14}
 801c4c4:	eee6 7a87 	vfma.f32	s15, s13, s14
 801c4c8:	f10c 0c01 	add.w	ip, ip, #1
 801c4cc:	459c      	cmp	ip, r3
 801c4ce:	ddf5      	ble.n	801c4bc <__kernel_rem_pio2f+0x84>
 801c4d0:	ece7 7a01 	vstmia	r7!, {s15}
 801c4d4:	3001      	adds	r0, #1
 801c4d6:	e7d5      	b.n	801c484 <__kernel_rem_pio2f+0x4c>
 801c4d8:	aa06      	add	r2, sp, #24
 801c4da:	eb02 028b 	add.w	r2, r2, fp, lsl #2
 801c4de:	9204      	str	r2, [sp, #16]
 801c4e0:	eddf 8aad 	vldr	s17, [pc, #692]	; 801c798 <__kernel_rem_pio2f+0x360>
 801c4e4:	ed9f 9aad 	vldr	s18, [pc, #692]	; 801c79c <__kernel_rem_pio2f+0x364>
 801c4e8:	eb04 0281 	add.w	r2, r4, r1, lsl #2
 801c4ec:	9203      	str	r2, [sp, #12]
 801c4ee:	465f      	mov	r7, fp
 801c4f0:	aa56      	add	r2, sp, #344	; 0x158
 801c4f2:	f107 4980 	add.w	r9, r7, #1073741824	; 0x40000000
 801c4f6:	eb02 0287 	add.w	r2, r2, r7, lsl #2
 801c4fa:	f109 39ff 	add.w	r9, r9, #4294967295
 801c4fe:	ed52 7a14 	vldr	s15, [r2, #-80]	; 0xffffffb0
 801c502:	ea4f 0989 	mov.w	r9, r9, lsl #2
 801c506:	aa56      	add	r2, sp, #344	; 0x158
 801c508:	eb02 0109 	add.w	r1, r2, r9
 801c50c:	394c      	subs	r1, #76	; 0x4c
 801c50e:	2200      	movs	r2, #0
 801c510:	1ab8      	subs	r0, r7, r2
 801c512:	2800      	cmp	r0, #0
 801c514:	dc54      	bgt.n	801c5c0 <__kernel_rem_pio2f+0x188>
 801c516:	4629      	mov	r1, r5
 801c518:	ee17 0a90 	vmov	r0, s15
 801c51c:	9305      	str	r3, [sp, #20]
 801c51e:	f000 fd1f 	bl	801cf60 <scalbnf>
 801c522:	ee08 0a10 	vmov	s16, r0
 801c526:	eef4 7a00 	vmov.f32	s15, #64	; 0x3e000000  0.125
 801c52a:	ee68 7a27 	vmul.f32	s15, s16, s15
 801c52e:	ee17 0a90 	vmov	r0, s15
 801c532:	f000 fcd1 	bl	801ced8 <floorf>
 801c536:	ee07 0a10 	vmov	s14, r0
 801c53a:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 801c53e:	eea7 8a67 	vfms.f32	s16, s14, s15
 801c542:	2d00      	cmp	r5, #0
 801c544:	9b05      	ldr	r3, [sp, #20]
 801c546:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801c54a:	ee17 aa90 	vmov	sl, s15
 801c54e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c552:	ee38 8a67 	vsub.f32	s16, s16, s15
 801c556:	dd48      	ble.n	801c5ea <__kernel_rem_pio2f+0x1b2>
 801c558:	1e79      	subs	r1, r7, #1
 801c55a:	aa06      	add	r2, sp, #24
 801c55c:	f1c5 0008 	rsb	r0, r5, #8
 801c560:	f852 6021 	ldr.w	r6, [r2, r1, lsl #2]
 801c564:	fa46 f200 	asr.w	r2, r6, r0
 801c568:	4492      	add	sl, r2
 801c56a:	4082      	lsls	r2, r0
 801c56c:	1ab6      	subs	r6, r6, r2
 801c56e:	aa06      	add	r2, sp, #24
 801c570:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
 801c574:	f1c5 0207 	rsb	r2, r5, #7
 801c578:	4116      	asrs	r6, r2
 801c57a:	2e00      	cmp	r6, #0
 801c57c:	dd44      	ble.n	801c608 <__kernel_rem_pio2f+0x1d0>
 801c57e:	2100      	movs	r1, #0
 801c580:	f10a 0a01 	add.w	sl, sl, #1
 801c584:	4608      	mov	r0, r1
 801c586:	428f      	cmp	r7, r1
 801c588:	dc70      	bgt.n	801c66c <__kernel_rem_pio2f+0x234>
 801c58a:	2d00      	cmp	r5, #0
 801c58c:	dd05      	ble.n	801c59a <__kernel_rem_pio2f+0x162>
 801c58e:	2d01      	cmp	r5, #1
 801c590:	f000 8081 	beq.w	801c696 <__kernel_rem_pio2f+0x25e>
 801c594:	2d02      	cmp	r5, #2
 801c596:	f000 8088 	beq.w	801c6aa <__kernel_rem_pio2f+0x272>
 801c59a:	2e02      	cmp	r6, #2
 801c59c:	d134      	bne.n	801c608 <__kernel_rem_pio2f+0x1d0>
 801c59e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801c5a2:	ee37 8ac8 	vsub.f32	s16, s15, s16
 801c5a6:	b378      	cbz	r0, 801c608 <__kernel_rem_pio2f+0x1d0>
 801c5a8:	ee17 0a90 	vmov	r0, s15
 801c5ac:	4629      	mov	r1, r5
 801c5ae:	9305      	str	r3, [sp, #20]
 801c5b0:	f000 fcd6 	bl	801cf60 <scalbnf>
 801c5b4:	ee07 0a90 	vmov	s15, r0
 801c5b8:	9b05      	ldr	r3, [sp, #20]
 801c5ba:	ee38 8a67 	vsub.f32	s16, s16, s15
 801c5be:	e023      	b.n	801c608 <__kernel_rem_pio2f+0x1d0>
 801c5c0:	ee27 7aa8 	vmul.f32	s14, s15, s17
 801c5c4:	ac06      	add	r4, sp, #24
 801c5c6:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801c5ca:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c5ce:	eee7 7a49 	vfms.f32	s15, s14, s18
 801c5d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c5d6:	ee17 0a90 	vmov	r0, s15
 801c5da:	ed71 7a01 	vldmdb	r1!, {s15}
 801c5de:	f844 0022 	str.w	r0, [r4, r2, lsl #2]
 801c5e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 801c5e6:	3201      	adds	r2, #1
 801c5e8:	e792      	b.n	801c510 <__kernel_rem_pio2f+0xd8>
 801c5ea:	d105      	bne.n	801c5f8 <__kernel_rem_pio2f+0x1c0>
 801c5ec:	1e7a      	subs	r2, r7, #1
 801c5ee:	a906      	add	r1, sp, #24
 801c5f0:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801c5f4:	1236      	asrs	r6, r6, #8
 801c5f6:	e7c0      	b.n	801c57a <__kernel_rem_pio2f+0x142>
 801c5f8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801c5fc:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801c600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c604:	da30      	bge.n	801c668 <__kernel_rem_pio2f+0x230>
 801c606:	2600      	movs	r6, #0
 801c608:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801c60c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c610:	f040 8098 	bne.w	801c744 <__kernel_rem_pio2f+0x30c>
 801c614:	1e7c      	subs	r4, r7, #1
 801c616:	4622      	mov	r2, r4
 801c618:	2000      	movs	r0, #0
 801c61a:	455a      	cmp	r2, fp
 801c61c:	da4c      	bge.n	801c6b8 <__kernel_rem_pio2f+0x280>
 801c61e:	2800      	cmp	r0, #0
 801c620:	f000 8083 	beq.w	801c72a <__kernel_rem_pio2f+0x2f2>
 801c624:	ab06      	add	r3, sp, #24
 801c626:	3d08      	subs	r5, #8
 801c628:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801c62c:	2b00      	cmp	r3, #0
 801c62e:	f000 8087 	beq.w	801c740 <__kernel_rem_pio2f+0x308>
 801c632:	4629      	mov	r1, r5
 801c634:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 801c638:	f000 fc92 	bl	801cf60 <scalbnf>
 801c63c:	00a3      	lsls	r3, r4, #2
 801c63e:	aa42      	add	r2, sp, #264	; 0x108
 801c640:	441a      	add	r2, r3
 801c642:	eddf 6a55 	vldr	s13, [pc, #340]	; 801c798 <__kernel_rem_pio2f+0x360>
 801c646:	ee07 0a10 	vmov	s14, r0
 801c64a:	4621      	mov	r1, r4
 801c64c:	1d10      	adds	r0, r2, #4
 801c64e:	2900      	cmp	r1, #0
 801c650:	f280 80b3 	bge.w	801c7ba <__kernel_rem_pio2f+0x382>
 801c654:	2000      	movs	r0, #0
 801c656:	1a21      	subs	r1, r4, r0
 801c658:	2900      	cmp	r1, #0
 801c65a:	f2c0 80d3 	blt.w	801c804 <__kernel_rem_pio2f+0x3cc>
 801c65e:	4d50      	ldr	r5, [pc, #320]	; (801c7a0 <__kernel_rem_pio2f+0x368>)
 801c660:	eddf 7a50 	vldr	s15, [pc, #320]	; 801c7a4 <__kernel_rem_pio2f+0x36c>
 801c664:	2100      	movs	r1, #0
 801c666:	e0c1      	b.n	801c7ec <__kernel_rem_pio2f+0x3b4>
 801c668:	2602      	movs	r6, #2
 801c66a:	e788      	b.n	801c57e <__kernel_rem_pio2f+0x146>
 801c66c:	aa06      	add	r2, sp, #24
 801c66e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 801c672:	b948      	cbnz	r0, 801c688 <__kernel_rem_pio2f+0x250>
 801c674:	b12a      	cbz	r2, 801c682 <__kernel_rem_pio2f+0x24a>
 801c676:	a806      	add	r0, sp, #24
 801c678:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801c67c:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
 801c680:	2201      	movs	r2, #1
 801c682:	3101      	adds	r1, #1
 801c684:	4610      	mov	r0, r2
 801c686:	e77e      	b.n	801c586 <__kernel_rem_pio2f+0x14e>
 801c688:	ac06      	add	r4, sp, #24
 801c68a:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 801c68e:	f844 2021 	str.w	r2, [r4, r1, lsl #2]
 801c692:	4602      	mov	r2, r0
 801c694:	e7f5      	b.n	801c682 <__kernel_rem_pio2f+0x24a>
 801c696:	1e79      	subs	r1, r7, #1
 801c698:	aa06      	add	r2, sp, #24
 801c69a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 801c69e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801c6a2:	ac06      	add	r4, sp, #24
 801c6a4:	f844 2021 	str.w	r2, [r4, r1, lsl #2]
 801c6a8:	e777      	b.n	801c59a <__kernel_rem_pio2f+0x162>
 801c6aa:	1e79      	subs	r1, r7, #1
 801c6ac:	aa06      	add	r2, sp, #24
 801c6ae:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 801c6b2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 801c6b6:	e7f4      	b.n	801c6a2 <__kernel_rem_pio2f+0x26a>
 801c6b8:	a906      	add	r1, sp, #24
 801c6ba:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801c6be:	3a01      	subs	r2, #1
 801c6c0:	4308      	orrs	r0, r1
 801c6c2:	e7aa      	b.n	801c61a <__kernel_rem_pio2f+0x1e2>
 801c6c4:	3601      	adds	r6, #1
 801c6c6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801c6ca:	2900      	cmp	r1, #0
 801c6cc:	d0fa      	beq.n	801c6c4 <__kernel_rem_pio2f+0x28c>
 801c6ce:	9a01      	ldr	r2, [sp, #4]
 801c6d0:	19d0      	adds	r0, r2, r7
 801c6d2:	0080      	lsls	r0, r0, #2
 801c6d4:	aa1a      	add	r2, sp, #104	; 0x68
 801c6d6:	1884      	adds	r4, r0, r2
 801c6d8:	1c79      	adds	r1, r7, #1
 801c6da:	f109 0904 	add.w	r9, r9, #4
 801c6de:	2200      	movs	r2, #0
 801c6e0:	4437      	add	r7, r6
 801c6e2:	f104 0a04 	add.w	sl, r4, #4
 801c6e6:	428f      	cmp	r7, r1
 801c6e8:	f6ff af02 	blt.w	801c4f0 <__kernel_rem_pio2f+0xb8>
 801c6ec:	ac1a      	add	r4, sp, #104	; 0x68
 801c6ee:	1816      	adds	r6, r2, r0
 801c6f0:	4426      	add	r6, r4
 801c6f2:	9c03      	ldr	r4, [sp, #12]
 801c6f4:	f8dd c008 	ldr.w	ip, [sp, #8]
 801c6f8:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 801c6fc:	9405      	str	r4, [sp, #20]
 801c6fe:	ee07 4a90 	vmov	s15, r4
 801c702:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c706:	eb0a 0e02 	add.w	lr, sl, r2
 801c70a:	edc6 7a00 	vstr	s15, [r6]
 801c70e:	eddf 7a25 	vldr	s15, [pc, #148]	; 801c7a4 <__kernel_rem_pio2f+0x36c>
 801c712:	2600      	movs	r6, #0
 801c714:	429e      	cmp	r6, r3
 801c716:	dd0b      	ble.n	801c730 <__kernel_rem_pio2f+0x2f8>
 801c718:	eb02 0609 	add.w	r6, r2, r9
 801c71c:	ac42      	add	r4, sp, #264	; 0x108
 801c71e:	4426      	add	r6, r4
 801c720:	edc6 7a01 	vstr	s15, [r6, #4]
 801c724:	3101      	adds	r1, #1
 801c726:	3204      	adds	r2, #4
 801c728:	e7dd      	b.n	801c6e6 <__kernel_rem_pio2f+0x2ae>
 801c72a:	9a04      	ldr	r2, [sp, #16]
 801c72c:	2601      	movs	r6, #1
 801c72e:	e7ca      	b.n	801c6c6 <__kernel_rem_pio2f+0x28e>
 801c730:	ecfc 6a01 	vldmia	ip!, {s13}
 801c734:	ed3e 7a01 	vldmdb	lr!, {s14}
 801c738:	3601      	adds	r6, #1
 801c73a:	eee6 7a87 	vfma.f32	s15, s13, s14
 801c73e:	e7e9      	b.n	801c714 <__kernel_rem_pio2f+0x2dc>
 801c740:	3c01      	subs	r4, #1
 801c742:	e76f      	b.n	801c624 <__kernel_rem_pio2f+0x1ec>
 801c744:	4269      	negs	r1, r5
 801c746:	ee18 0a10 	vmov	r0, s16
 801c74a:	f000 fc09 	bl	801cf60 <scalbnf>
 801c74e:	eddf 6a13 	vldr	s13, [pc, #76]	; 801c79c <__kernel_rem_pio2f+0x364>
 801c752:	ee07 0a10 	vmov	s14, r0
 801c756:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801c75a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c75e:	db23      	blt.n	801c7a8 <__kernel_rem_pio2f+0x370>
 801c760:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801c798 <__kernel_rem_pio2f+0x360>
 801c764:	ee67 7a27 	vmul.f32	s15, s14, s15
 801c768:	aa06      	add	r2, sp, #24
 801c76a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c76e:	1c7c      	adds	r4, r7, #1
 801c770:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c774:	3508      	adds	r5, #8
 801c776:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801c77a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c77e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801c782:	ee17 3a10 	vmov	r3, s14
 801c786:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 801c78a:	ee17 3a90 	vmov	r3, s15
 801c78e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801c792:	e74e      	b.n	801c632 <__kernel_rem_pio2f+0x1fa>
 801c794:	0801da40 	.word	0x0801da40
 801c798:	3b800000 	.word	0x3b800000
 801c79c:	43800000 	.word	0x43800000
 801c7a0:	0801da14 	.word	0x0801da14
 801c7a4:	00000000 	.word	0x00000000
 801c7a8:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801c7ac:	aa06      	add	r2, sp, #24
 801c7ae:	ee17 3a10 	vmov	r3, s14
 801c7b2:	463c      	mov	r4, r7
 801c7b4:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 801c7b8:	e73b      	b.n	801c632 <__kernel_rem_pio2f+0x1fa>
 801c7ba:	ad06      	add	r5, sp, #24
 801c7bc:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 801c7c0:	9501      	str	r5, [sp, #4]
 801c7c2:	ee07 5a90 	vmov	s15, r5
 801c7c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c7ca:	3901      	subs	r1, #1
 801c7cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 801c7d0:	ee27 7a26 	vmul.f32	s14, s14, s13
 801c7d4:	ed60 7a01 	vstmdb	r0!, {s15}
 801c7d8:	e739      	b.n	801c64e <__kernel_rem_pio2f+0x216>
 801c7da:	eb02 0781 	add.w	r7, r2, r1, lsl #2
 801c7de:	ecf5 6a01 	vldmia	r5!, {s13}
 801c7e2:	ed97 7a00 	vldr	s14, [r7]
 801c7e6:	eee6 7a87 	vfma.f32	s15, s13, s14
 801c7ea:	3101      	adds	r1, #1
 801c7ec:	4559      	cmp	r1, fp
 801c7ee:	dc01      	bgt.n	801c7f4 <__kernel_rem_pio2f+0x3bc>
 801c7f0:	4288      	cmp	r0, r1
 801c7f2:	daf2      	bge.n	801c7da <__kernel_rem_pio2f+0x3a2>
 801c7f4:	a956      	add	r1, sp, #344	; 0x158
 801c7f6:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 801c7fa:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 801c7fe:	3001      	adds	r0, #1
 801c800:	3a04      	subs	r2, #4
 801c802:	e728      	b.n	801c656 <__kernel_rem_pio2f+0x21e>
 801c804:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801c806:	2a03      	cmp	r2, #3
 801c808:	d846      	bhi.n	801c898 <__kernel_rem_pio2f+0x460>
 801c80a:	e8df f002 	tbb	[pc, r2]
 801c80e:	1e39      	.short	0x1e39
 801c810:	021e      	.short	0x021e
 801c812:	aa56      	add	r2, sp, #344	; 0x158
 801c814:	4413      	add	r3, r2
 801c816:	3b9c      	subs	r3, #156	; 0x9c
 801c818:	461a      	mov	r2, r3
 801c81a:	4621      	mov	r1, r4
 801c81c:	2900      	cmp	r1, #0
 801c81e:	dc57      	bgt.n	801c8d0 <__kernel_rem_pio2f+0x498>
 801c820:	461a      	mov	r2, r3
 801c822:	4621      	mov	r1, r4
 801c824:	2901      	cmp	r1, #1
 801c826:	dc63      	bgt.n	801c8f0 <__kernel_rem_pio2f+0x4b8>
 801c828:	ed5f 7a22 	vldr	s15, [pc, #-136]	; 801c7a4 <__kernel_rem_pio2f+0x36c>
 801c82c:	2c01      	cmp	r4, #1
 801c82e:	dc6f      	bgt.n	801c910 <__kernel_rem_pio2f+0x4d8>
 801c830:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 801c834:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 801c838:	2e00      	cmp	r6, #0
 801c83a:	d16f      	bne.n	801c91c <__kernel_rem_pio2f+0x4e4>
 801c83c:	edc8 6a00 	vstr	s13, [r8]
 801c840:	ed88 7a01 	vstr	s14, [r8, #4]
 801c844:	edc8 7a02 	vstr	s15, [r8, #8]
 801c848:	e026      	b.n	801c898 <__kernel_rem_pio2f+0x460>
 801c84a:	aa56      	add	r2, sp, #344	; 0x158
 801c84c:	4413      	add	r3, r2
 801c84e:	ed1f 7a2b 	vldr	s14, [pc, #-172]	; 801c7a4 <__kernel_rem_pio2f+0x36c>
 801c852:	3b9c      	subs	r3, #156	; 0x9c
 801c854:	4622      	mov	r2, r4
 801c856:	2a00      	cmp	r2, #0
 801c858:	da2b      	bge.n	801c8b2 <__kernel_rem_pio2f+0x47a>
 801c85a:	b386      	cbz	r6, 801c8be <__kernel_rem_pio2f+0x486>
 801c85c:	eef1 7a47 	vneg.f32	s15, s14
 801c860:	edc8 7a00 	vstr	s15, [r8]
 801c864:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 801c868:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801c86c:	aa2f      	add	r2, sp, #188	; 0xbc
 801c86e:	2301      	movs	r3, #1
 801c870:	429c      	cmp	r4, r3
 801c872:	da27      	bge.n	801c8c4 <__kernel_rem_pio2f+0x48c>
 801c874:	b10e      	cbz	r6, 801c87a <__kernel_rem_pio2f+0x442>
 801c876:	eef1 7a67 	vneg.f32	s15, s15
 801c87a:	edc8 7a01 	vstr	s15, [r8, #4]
 801c87e:	e00b      	b.n	801c898 <__kernel_rem_pio2f+0x460>
 801c880:	aa56      	add	r2, sp, #344	; 0x158
 801c882:	4413      	add	r3, r2
 801c884:	ed5f 7a39 	vldr	s15, [pc, #-228]	; 801c7a4 <__kernel_rem_pio2f+0x36c>
 801c888:	3b9c      	subs	r3, #156	; 0x9c
 801c88a:	2c00      	cmp	r4, #0
 801c88c:	da0b      	bge.n	801c8a6 <__kernel_rem_pio2f+0x46e>
 801c88e:	b10e      	cbz	r6, 801c894 <__kernel_rem_pio2f+0x45c>
 801c890:	eef1 7a67 	vneg.f32	s15, s15
 801c894:	edc8 7a00 	vstr	s15, [r8]
 801c898:	f00a 0007 	and.w	r0, sl, #7
 801c89c:	b057      	add	sp, #348	; 0x15c
 801c89e:	ecbd 8b04 	vpop	{d8-d9}
 801c8a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c8a6:	ed33 7a01 	vldmdb	r3!, {s14}
 801c8aa:	3c01      	subs	r4, #1
 801c8ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 801c8b0:	e7eb      	b.n	801c88a <__kernel_rem_pio2f+0x452>
 801c8b2:	ed73 7a01 	vldmdb	r3!, {s15}
 801c8b6:	3a01      	subs	r2, #1
 801c8b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 801c8bc:	e7cb      	b.n	801c856 <__kernel_rem_pio2f+0x41e>
 801c8be:	eef0 7a47 	vmov.f32	s15, s14
 801c8c2:	e7cd      	b.n	801c860 <__kernel_rem_pio2f+0x428>
 801c8c4:	ecb2 7a01 	vldmia	r2!, {s14}
 801c8c8:	3301      	adds	r3, #1
 801c8ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 801c8ce:	e7cf      	b.n	801c870 <__kernel_rem_pio2f+0x438>
 801c8d0:	ed52 7a02 	vldr	s15, [r2, #-8]
 801c8d4:	ed72 6a01 	vldmdb	r2!, {s13}
 801c8d8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801c8dc:	3901      	subs	r1, #1
 801c8de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801c8e2:	ed02 7a01 	vstr	s14, [r2, #-4]
 801c8e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801c8ea:	edc2 7a00 	vstr	s15, [r2]
 801c8ee:	e795      	b.n	801c81c <__kernel_rem_pio2f+0x3e4>
 801c8f0:	ed52 7a02 	vldr	s15, [r2, #-8]
 801c8f4:	ed72 6a01 	vldmdb	r2!, {s13}
 801c8f8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801c8fc:	3901      	subs	r1, #1
 801c8fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801c902:	ed02 7a01 	vstr	s14, [r2, #-4]
 801c906:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801c90a:	edc2 7a00 	vstr	s15, [r2]
 801c90e:	e789      	b.n	801c824 <__kernel_rem_pio2f+0x3ec>
 801c910:	ed33 7a01 	vldmdb	r3!, {s14}
 801c914:	3c01      	subs	r4, #1
 801c916:	ee77 7a87 	vadd.f32	s15, s15, s14
 801c91a:	e787      	b.n	801c82c <__kernel_rem_pio2f+0x3f4>
 801c91c:	eef1 6a66 	vneg.f32	s13, s13
 801c920:	eeb1 7a47 	vneg.f32	s14, s14
 801c924:	edc8 6a00 	vstr	s13, [r8]
 801c928:	ed88 7a01 	vstr	s14, [r8, #4]
 801c92c:	eef1 7a67 	vneg.f32	s15, s15
 801c930:	e788      	b.n	801c844 <__kernel_rem_pio2f+0x40c>
 801c932:	bf00      	nop

0801c934 <__kernel_sinf>:
 801c934:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 801c938:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801c93c:	ee07 0a90 	vmov	s15, r0
 801c940:	ee06 1a10 	vmov	s12, r1
 801c944:	da04      	bge.n	801c950 <__kernel_sinf+0x1c>
 801c946:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801c94a:	ee17 3a10 	vmov	r3, s14
 801c94e:	b1e3      	cbz	r3, 801c98a <__kernel_sinf+0x56>
 801c950:	ee67 6aa7 	vmul.f32	s13, s15, s15
 801c954:	ed9f 7a16 	vldr	s14, [pc, #88]	; 801c9b0 <__kernel_sinf+0x7c>
 801c958:	ed9f 5a16 	vldr	s10, [pc, #88]	; 801c9b4 <__kernel_sinf+0x80>
 801c95c:	eea6 5a87 	vfma.f32	s10, s13, s14
 801c960:	ed9f 7a15 	vldr	s14, [pc, #84]	; 801c9b8 <__kernel_sinf+0x84>
 801c964:	eea5 7a26 	vfma.f32	s14, s10, s13
 801c968:	ed9f 5a14 	vldr	s10, [pc, #80]	; 801c9bc <__kernel_sinf+0x88>
 801c96c:	eea7 5a26 	vfma.f32	s10, s14, s13
 801c970:	ed9f 7a13 	vldr	s14, [pc, #76]	; 801c9c0 <__kernel_sinf+0x8c>
 801c974:	ee67 5aa6 	vmul.f32	s11, s15, s13
 801c978:	eea5 7a26 	vfma.f32	s14, s10, s13
 801c97c:	b942      	cbnz	r2, 801c990 <__kernel_sinf+0x5c>
 801c97e:	ed9f 6a11 	vldr	s12, [pc, #68]	; 801c9c4 <__kernel_sinf+0x90>
 801c982:	eea6 6a87 	vfma.f32	s12, s13, s14
 801c986:	eee6 7a25 	vfma.f32	s15, s12, s11
 801c98a:	ee17 0a90 	vmov	r0, s15
 801c98e:	4770      	bx	lr
 801c990:	ee27 7a65 	vnmul.f32	s14, s14, s11
 801c994:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 801c998:	eea6 7a05 	vfma.f32	s14, s12, s10
 801c99c:	ee97 6a26 	vfnms.f32	s12, s14, s13
 801c9a0:	ed9f 7a09 	vldr	s14, [pc, #36]	; 801c9c8 <__kernel_sinf+0x94>
 801c9a4:	eea5 6a87 	vfma.f32	s12, s11, s14
 801c9a8:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801c9ac:	e7ed      	b.n	801c98a <__kernel_sinf+0x56>
 801c9ae:	bf00      	nop
 801c9b0:	2f2ec9d3 	.word	0x2f2ec9d3
 801c9b4:	b2d72f34 	.word	0xb2d72f34
 801c9b8:	3638ef1b 	.word	0x3638ef1b
 801c9bc:	b9500d01 	.word	0xb9500d01
 801c9c0:	3c088889 	.word	0x3c088889
 801c9c4:	be2aaaab 	.word	0xbe2aaaab
 801c9c8:	3e2aaaab 	.word	0x3e2aaaab

0801c9cc <__kernel_tanf>:
 801c9cc:	ee07 1a10 	vmov	s14, r1
 801c9d0:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
 801c9d4:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 801c9d8:	b510      	push	{r4, lr}
 801c9da:	ee07 0a90 	vmov	s15, r0
 801c9de:	4603      	mov	r3, r0
 801c9e0:	da17      	bge.n	801ca12 <__kernel_tanf+0x46>
 801c9e2:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 801c9e6:	ee16 4a90 	vmov	r4, s13
 801c9ea:	bb44      	cbnz	r4, 801ca3e <__kernel_tanf+0x72>
 801c9ec:	1c53      	adds	r3, r2, #1
 801c9ee:	430b      	orrs	r3, r1
 801c9f0:	d10a      	bne.n	801ca08 <__kernel_tanf+0x3c>
 801c9f2:	f000 fa6d 	bl	801ced0 <fabsf>
 801c9f6:	ee07 0a90 	vmov	s15, r0
 801c9fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c9fe:	eec7 7a27 	vdiv.f32	s15, s14, s15
 801ca02:	ee17 0a90 	vmov	r0, s15
 801ca06:	bd10      	pop	{r4, pc}
 801ca08:	2a01      	cmp	r2, #1
 801ca0a:	d0fa      	beq.n	801ca02 <__kernel_tanf+0x36>
 801ca0c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801ca10:	e7f5      	b.n	801c9fe <__kernel_tanf+0x32>
 801ca12:	484f      	ldr	r0, [pc, #316]	; (801cb50 <__kernel_tanf+0x184>)
 801ca14:	4281      	cmp	r1, r0
 801ca16:	dd12      	ble.n	801ca3e <__kernel_tanf+0x72>
 801ca18:	2b00      	cmp	r3, #0
 801ca1a:	eddf 6a4e 	vldr	s13, [pc, #312]	; 801cb54 <__kernel_tanf+0x188>
 801ca1e:	bfb8      	it	lt
 801ca20:	eef1 7a67 	vneglt.f32	s15, s15
 801ca24:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801ca28:	eddf 6a4b 	vldr	s13, [pc, #300]	; 801cb58 <__kernel_tanf+0x18c>
 801ca2c:	bfb8      	it	lt
 801ca2e:	eeb1 7a47 	vneglt.f32	s14, s14
 801ca32:	ee36 7ac7 	vsub.f32	s14, s13, s14
 801ca36:	ee77 7a27 	vadd.f32	s15, s14, s15
 801ca3a:	ed9f 7a48 	vldr	s14, [pc, #288]	; 801cb5c <__kernel_tanf+0x190>
 801ca3e:	eddf 5a48 	vldr	s11, [pc, #288]	; 801cb60 <__kernel_tanf+0x194>
 801ca42:	ed9f 5a48 	vldr	s10, [pc, #288]	; 801cb64 <__kernel_tanf+0x198>
 801ca46:	eddf 4a48 	vldr	s9, [pc, #288]	; 801cb68 <__kernel_tanf+0x19c>
 801ca4a:	4841      	ldr	r0, [pc, #260]	; (801cb50 <__kernel_tanf+0x184>)
 801ca4c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 801ca50:	4281      	cmp	r1, r0
 801ca52:	ee66 6a06 	vmul.f32	s13, s12, s12
 801ca56:	ee27 4a86 	vmul.f32	s8, s15, s12
 801ca5a:	eea6 5aa5 	vfma.f32	s10, s13, s11
 801ca5e:	eddf 5a43 	vldr	s11, [pc, #268]	; 801cb6c <__kernel_tanf+0x1a0>
 801ca62:	eee5 5a26 	vfma.f32	s11, s10, s13
 801ca66:	ed9f 5a42 	vldr	s10, [pc, #264]	; 801cb70 <__kernel_tanf+0x1a4>
 801ca6a:	eea5 5aa6 	vfma.f32	s10, s11, s13
 801ca6e:	eddf 5a41 	vldr	s11, [pc, #260]	; 801cb74 <__kernel_tanf+0x1a8>
 801ca72:	eee5 5a26 	vfma.f32	s11, s10, s13
 801ca76:	ed9f 5a40 	vldr	s10, [pc, #256]	; 801cb78 <__kernel_tanf+0x1ac>
 801ca7a:	eea5 5aa6 	vfma.f32	s10, s11, s13
 801ca7e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 801cb7c <__kernel_tanf+0x1b0>
 801ca82:	eee6 5aa4 	vfma.f32	s11, s13, s9
 801ca86:	eddf 4a3e 	vldr	s9, [pc, #248]	; 801cb80 <__kernel_tanf+0x1b4>
 801ca8a:	eee5 4aa6 	vfma.f32	s9, s11, s13
 801ca8e:	eddf 5a3d 	vldr	s11, [pc, #244]	; 801cb84 <__kernel_tanf+0x1b8>
 801ca92:	eee4 5aa6 	vfma.f32	s11, s9, s13
 801ca96:	eddf 4a3c 	vldr	s9, [pc, #240]	; 801cb88 <__kernel_tanf+0x1bc>
 801ca9a:	eee5 4aa6 	vfma.f32	s9, s11, s13
 801ca9e:	eddf 5a3b 	vldr	s11, [pc, #236]	; 801cb8c <__kernel_tanf+0x1c0>
 801caa2:	eee4 5aa6 	vfma.f32	s11, s9, s13
 801caa6:	eef0 6a65 	vmov.f32	s13, s11
 801caaa:	eee5 6a06 	vfma.f32	s13, s10, s12
 801caae:	eef0 5a47 	vmov.f32	s11, s14
 801cab2:	eee6 5a84 	vfma.f32	s11, s13, s8
 801cab6:	eddf 6a36 	vldr	s13, [pc, #216]	; 801cb90 <__kernel_tanf+0x1c4>
 801caba:	eea5 7a86 	vfma.f32	s14, s11, s12
 801cabe:	eea4 7a26 	vfma.f32	s14, s8, s13
 801cac2:	ee37 6a87 	vadd.f32	s12, s15, s14
 801cac6:	dd1d      	ble.n	801cb04 <__kernel_tanf+0x138>
 801cac8:	ee06 2a90 	vmov	s13, r2
 801cacc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801cad0:	ee26 5a06 	vmul.f32	s10, s12, s12
 801cad4:	ee36 6a26 	vadd.f32	s12, s12, s13
 801cad8:	179b      	asrs	r3, r3, #30
 801cada:	eec5 5a06 	vdiv.f32	s11, s10, s12
 801cade:	f003 0302 	and.w	r3, r3, #2
 801cae2:	f1c3 0301 	rsb	r3, r3, #1
 801cae6:	ee35 7ac7 	vsub.f32	s14, s11, s14
 801caea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801caee:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 801caf2:	eee7 6ac7 	vfms.f32	s13, s15, s14
 801caf6:	ee07 3a90 	vmov	s15, r3
 801cafa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801cafe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801cb02:	e77e      	b.n	801ca02 <__kernel_tanf+0x36>
 801cb04:	2a01      	cmp	r2, #1
 801cb06:	d01f      	beq.n	801cb48 <__kernel_tanf+0x17c>
 801cb08:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 801cb0c:	ee86 5a86 	vdiv.f32	s10, s13, s12
 801cb10:	4b20      	ldr	r3, [pc, #128]	; (801cb94 <__kernel_tanf+0x1c8>)
 801cb12:	ee16 2a10 	vmov	r2, s12
 801cb16:	401a      	ands	r2, r3
 801cb18:	ee05 2a90 	vmov	s11, r2
 801cb1c:	ee15 2a10 	vmov	r2, s10
 801cb20:	4013      	ands	r3, r2
 801cb22:	ee06 3a90 	vmov	s13, r3
 801cb26:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801cb2a:	eea5 6aa6 	vfma.f32	s12, s11, s13
 801cb2e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 801cb32:	ee37 7a67 	vsub.f32	s14, s14, s15
 801cb36:	eef0 7a46 	vmov.f32	s15, s12
 801cb3a:	eee6 7a87 	vfma.f32	s15, s13, s14
 801cb3e:	eee7 6a85 	vfma.f32	s13, s15, s10
 801cb42:	eef0 7a66 	vmov.f32	s15, s13
 801cb46:	e75c      	b.n	801ca02 <__kernel_tanf+0x36>
 801cb48:	eef0 7a46 	vmov.f32	s15, s12
 801cb4c:	e759      	b.n	801ca02 <__kernel_tanf+0x36>
 801cb4e:	bf00      	nop
 801cb50:	3f2ca13f 	.word	0x3f2ca13f
 801cb54:	3f490fda 	.word	0x3f490fda
 801cb58:	33222168 	.word	0x33222168
 801cb5c:	00000000 	.word	0x00000000
 801cb60:	37d95384 	.word	0x37d95384
 801cb64:	3895c07a 	.word	0x3895c07a
 801cb68:	b79bae5f 	.word	0xb79bae5f
 801cb6c:	398137b9 	.word	0x398137b9
 801cb70:	3abede48 	.word	0x3abede48
 801cb74:	3c11371f 	.word	0x3c11371f
 801cb78:	3d5d0dd1 	.word	0x3d5d0dd1
 801cb7c:	38a3f445 	.word	0x38a3f445
 801cb80:	3a1a26c8 	.word	0x3a1a26c8
 801cb84:	3b6b6916 	.word	0x3b6b6916
 801cb88:	3cb327a4 	.word	0x3cb327a4
 801cb8c:	3e088889 	.word	0x3e088889
 801cb90:	3eaaaaab 	.word	0x3eaaaaab
 801cb94:	fffff000 	.word	0xfffff000

0801cb98 <atan>:
 801cb98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cb9c:	4bbc      	ldr	r3, [pc, #752]	; (801ce90 <atan+0x2f8>)
 801cb9e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801cba2:	429e      	cmp	r6, r3
 801cba4:	4604      	mov	r4, r0
 801cba6:	460d      	mov	r5, r1
 801cba8:	468b      	mov	fp, r1
 801cbaa:	dd18      	ble.n	801cbde <atan+0x46>
 801cbac:	4bb9      	ldr	r3, [pc, #740]	; (801ce94 <atan+0x2fc>)
 801cbae:	429e      	cmp	r6, r3
 801cbb0:	dc01      	bgt.n	801cbb6 <atan+0x1e>
 801cbb2:	d109      	bne.n	801cbc8 <atan+0x30>
 801cbb4:	b140      	cbz	r0, 801cbc8 <atan+0x30>
 801cbb6:	4622      	mov	r2, r4
 801cbb8:	462b      	mov	r3, r5
 801cbba:	4620      	mov	r0, r4
 801cbbc:	4629      	mov	r1, r5
 801cbbe:	f7e3 fb6d 	bl	800029c <__adddf3>
 801cbc2:	4604      	mov	r4, r0
 801cbc4:	460d      	mov	r5, r1
 801cbc6:	e006      	b.n	801cbd6 <atan+0x3e>
 801cbc8:	f1bb 0f00 	cmp.w	fp, #0
 801cbcc:	f340 8123 	ble.w	801ce16 <atan+0x27e>
 801cbd0:	a593      	add	r5, pc, #588	; (adr r5, 801ce20 <atan+0x288>)
 801cbd2:	e9d5 4500 	ldrd	r4, r5, [r5]
 801cbd6:	4620      	mov	r0, r4
 801cbd8:	4629      	mov	r1, r5
 801cbda:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cbde:	4bae      	ldr	r3, [pc, #696]	; (801ce98 <atan+0x300>)
 801cbe0:	429e      	cmp	r6, r3
 801cbe2:	dc11      	bgt.n	801cc08 <atan+0x70>
 801cbe4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 801cbe8:	429e      	cmp	r6, r3
 801cbea:	dc0a      	bgt.n	801cc02 <atan+0x6a>
 801cbec:	a38e      	add	r3, pc, #568	; (adr r3, 801ce28 <atan+0x290>)
 801cbee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cbf2:	f7e3 fb53 	bl	800029c <__adddf3>
 801cbf6:	2200      	movs	r2, #0
 801cbf8:	4ba8      	ldr	r3, [pc, #672]	; (801ce9c <atan+0x304>)
 801cbfa:	f7e3 ff95 	bl	8000b28 <__aeabi_dcmpgt>
 801cbfe:	2800      	cmp	r0, #0
 801cc00:	d1e9      	bne.n	801cbd6 <atan+0x3e>
 801cc02:	f04f 3aff 	mov.w	sl, #4294967295
 801cc06:	e027      	b.n	801cc58 <atan+0xc0>
 801cc08:	f000 f956 	bl	801ceb8 <fabs>
 801cc0c:	4ba4      	ldr	r3, [pc, #656]	; (801cea0 <atan+0x308>)
 801cc0e:	429e      	cmp	r6, r3
 801cc10:	4604      	mov	r4, r0
 801cc12:	460d      	mov	r5, r1
 801cc14:	f300 80b8 	bgt.w	801cd88 <atan+0x1f0>
 801cc18:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801cc1c:	429e      	cmp	r6, r3
 801cc1e:	f300 809c 	bgt.w	801cd5a <atan+0x1c2>
 801cc22:	4602      	mov	r2, r0
 801cc24:	460b      	mov	r3, r1
 801cc26:	f7e3 fb39 	bl	800029c <__adddf3>
 801cc2a:	2200      	movs	r2, #0
 801cc2c:	4b9b      	ldr	r3, [pc, #620]	; (801ce9c <atan+0x304>)
 801cc2e:	f7e3 fb33 	bl	8000298 <__aeabi_dsub>
 801cc32:	2200      	movs	r2, #0
 801cc34:	4606      	mov	r6, r0
 801cc36:	460f      	mov	r7, r1
 801cc38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801cc3c:	4620      	mov	r0, r4
 801cc3e:	4629      	mov	r1, r5
 801cc40:	f7e3 fb2c 	bl	800029c <__adddf3>
 801cc44:	4602      	mov	r2, r0
 801cc46:	460b      	mov	r3, r1
 801cc48:	4630      	mov	r0, r6
 801cc4a:	4639      	mov	r1, r7
 801cc4c:	f7e3 fe06 	bl	800085c <__aeabi_ddiv>
 801cc50:	f04f 0a00 	mov.w	sl, #0
 801cc54:	4604      	mov	r4, r0
 801cc56:	460d      	mov	r5, r1
 801cc58:	4622      	mov	r2, r4
 801cc5a:	462b      	mov	r3, r5
 801cc5c:	4620      	mov	r0, r4
 801cc5e:	4629      	mov	r1, r5
 801cc60:	f7e3 fcd2 	bl	8000608 <__aeabi_dmul>
 801cc64:	4602      	mov	r2, r0
 801cc66:	460b      	mov	r3, r1
 801cc68:	4680      	mov	r8, r0
 801cc6a:	4689      	mov	r9, r1
 801cc6c:	f7e3 fccc 	bl	8000608 <__aeabi_dmul>
 801cc70:	a36f      	add	r3, pc, #444	; (adr r3, 801ce30 <atan+0x298>)
 801cc72:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc76:	4606      	mov	r6, r0
 801cc78:	460f      	mov	r7, r1
 801cc7a:	f7e3 fcc5 	bl	8000608 <__aeabi_dmul>
 801cc7e:	a36e      	add	r3, pc, #440	; (adr r3, 801ce38 <atan+0x2a0>)
 801cc80:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc84:	f7e3 fb0a 	bl	800029c <__adddf3>
 801cc88:	4632      	mov	r2, r6
 801cc8a:	463b      	mov	r3, r7
 801cc8c:	f7e3 fcbc 	bl	8000608 <__aeabi_dmul>
 801cc90:	a36b      	add	r3, pc, #428	; (adr r3, 801ce40 <atan+0x2a8>)
 801cc92:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc96:	f7e3 fb01 	bl	800029c <__adddf3>
 801cc9a:	4632      	mov	r2, r6
 801cc9c:	463b      	mov	r3, r7
 801cc9e:	f7e3 fcb3 	bl	8000608 <__aeabi_dmul>
 801cca2:	a369      	add	r3, pc, #420	; (adr r3, 801ce48 <atan+0x2b0>)
 801cca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cca8:	f7e3 faf8 	bl	800029c <__adddf3>
 801ccac:	4632      	mov	r2, r6
 801ccae:	463b      	mov	r3, r7
 801ccb0:	f7e3 fcaa 	bl	8000608 <__aeabi_dmul>
 801ccb4:	a366      	add	r3, pc, #408	; (adr r3, 801ce50 <atan+0x2b8>)
 801ccb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ccba:	f7e3 faef 	bl	800029c <__adddf3>
 801ccbe:	4632      	mov	r2, r6
 801ccc0:	463b      	mov	r3, r7
 801ccc2:	f7e3 fca1 	bl	8000608 <__aeabi_dmul>
 801ccc6:	a364      	add	r3, pc, #400	; (adr r3, 801ce58 <atan+0x2c0>)
 801ccc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cccc:	f7e3 fae6 	bl	800029c <__adddf3>
 801ccd0:	4642      	mov	r2, r8
 801ccd2:	464b      	mov	r3, r9
 801ccd4:	f7e3 fc98 	bl	8000608 <__aeabi_dmul>
 801ccd8:	a361      	add	r3, pc, #388	; (adr r3, 801ce60 <atan+0x2c8>)
 801ccda:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ccde:	4680      	mov	r8, r0
 801cce0:	4689      	mov	r9, r1
 801cce2:	4630      	mov	r0, r6
 801cce4:	4639      	mov	r1, r7
 801cce6:	f7e3 fc8f 	bl	8000608 <__aeabi_dmul>
 801ccea:	a35f      	add	r3, pc, #380	; (adr r3, 801ce68 <atan+0x2d0>)
 801ccec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ccf0:	f7e3 fad2 	bl	8000298 <__aeabi_dsub>
 801ccf4:	4632      	mov	r2, r6
 801ccf6:	463b      	mov	r3, r7
 801ccf8:	f7e3 fc86 	bl	8000608 <__aeabi_dmul>
 801ccfc:	a35c      	add	r3, pc, #368	; (adr r3, 801ce70 <atan+0x2d8>)
 801ccfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd02:	f7e3 fac9 	bl	8000298 <__aeabi_dsub>
 801cd06:	4632      	mov	r2, r6
 801cd08:	463b      	mov	r3, r7
 801cd0a:	f7e3 fc7d 	bl	8000608 <__aeabi_dmul>
 801cd0e:	a35a      	add	r3, pc, #360	; (adr r3, 801ce78 <atan+0x2e0>)
 801cd10:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd14:	f7e3 fac0 	bl	8000298 <__aeabi_dsub>
 801cd18:	4632      	mov	r2, r6
 801cd1a:	463b      	mov	r3, r7
 801cd1c:	f7e3 fc74 	bl	8000608 <__aeabi_dmul>
 801cd20:	a357      	add	r3, pc, #348	; (adr r3, 801ce80 <atan+0x2e8>)
 801cd22:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd26:	f7e3 fab7 	bl	8000298 <__aeabi_dsub>
 801cd2a:	4632      	mov	r2, r6
 801cd2c:	463b      	mov	r3, r7
 801cd2e:	f7e3 fc6b 	bl	8000608 <__aeabi_dmul>
 801cd32:	4602      	mov	r2, r0
 801cd34:	460b      	mov	r3, r1
 801cd36:	4640      	mov	r0, r8
 801cd38:	4649      	mov	r1, r9
 801cd3a:	f7e3 faaf 	bl	800029c <__adddf3>
 801cd3e:	4622      	mov	r2, r4
 801cd40:	462b      	mov	r3, r5
 801cd42:	f7e3 fc61 	bl	8000608 <__aeabi_dmul>
 801cd46:	f1ba 3fff 	cmp.w	sl, #4294967295
 801cd4a:	4602      	mov	r2, r0
 801cd4c:	460b      	mov	r3, r1
 801cd4e:	d144      	bne.n	801cdda <atan+0x242>
 801cd50:	4620      	mov	r0, r4
 801cd52:	4629      	mov	r1, r5
 801cd54:	f7e3 faa0 	bl	8000298 <__aeabi_dsub>
 801cd58:	e733      	b.n	801cbc2 <atan+0x2a>
 801cd5a:	2200      	movs	r2, #0
 801cd5c:	4b4f      	ldr	r3, [pc, #316]	; (801ce9c <atan+0x304>)
 801cd5e:	f7e3 fa9b 	bl	8000298 <__aeabi_dsub>
 801cd62:	2200      	movs	r2, #0
 801cd64:	4606      	mov	r6, r0
 801cd66:	460f      	mov	r7, r1
 801cd68:	4b4c      	ldr	r3, [pc, #304]	; (801ce9c <atan+0x304>)
 801cd6a:	4620      	mov	r0, r4
 801cd6c:	4629      	mov	r1, r5
 801cd6e:	f7e3 fa95 	bl	800029c <__adddf3>
 801cd72:	4602      	mov	r2, r0
 801cd74:	460b      	mov	r3, r1
 801cd76:	4630      	mov	r0, r6
 801cd78:	4639      	mov	r1, r7
 801cd7a:	f7e3 fd6f 	bl	800085c <__aeabi_ddiv>
 801cd7e:	f04f 0a01 	mov.w	sl, #1
 801cd82:	4604      	mov	r4, r0
 801cd84:	460d      	mov	r5, r1
 801cd86:	e767      	b.n	801cc58 <atan+0xc0>
 801cd88:	4b46      	ldr	r3, [pc, #280]	; (801cea4 <atan+0x30c>)
 801cd8a:	429e      	cmp	r6, r3
 801cd8c:	dc1a      	bgt.n	801cdc4 <atan+0x22c>
 801cd8e:	2200      	movs	r2, #0
 801cd90:	4b45      	ldr	r3, [pc, #276]	; (801cea8 <atan+0x310>)
 801cd92:	f7e3 fa81 	bl	8000298 <__aeabi_dsub>
 801cd96:	2200      	movs	r2, #0
 801cd98:	4606      	mov	r6, r0
 801cd9a:	460f      	mov	r7, r1
 801cd9c:	4b42      	ldr	r3, [pc, #264]	; (801cea8 <atan+0x310>)
 801cd9e:	4620      	mov	r0, r4
 801cda0:	4629      	mov	r1, r5
 801cda2:	f7e3 fc31 	bl	8000608 <__aeabi_dmul>
 801cda6:	2200      	movs	r2, #0
 801cda8:	4b3c      	ldr	r3, [pc, #240]	; (801ce9c <atan+0x304>)
 801cdaa:	f7e3 fa77 	bl	800029c <__adddf3>
 801cdae:	4602      	mov	r2, r0
 801cdb0:	460b      	mov	r3, r1
 801cdb2:	4630      	mov	r0, r6
 801cdb4:	4639      	mov	r1, r7
 801cdb6:	f7e3 fd51 	bl	800085c <__aeabi_ddiv>
 801cdba:	f04f 0a02 	mov.w	sl, #2
 801cdbe:	4604      	mov	r4, r0
 801cdc0:	460d      	mov	r5, r1
 801cdc2:	e749      	b.n	801cc58 <atan+0xc0>
 801cdc4:	4602      	mov	r2, r0
 801cdc6:	460b      	mov	r3, r1
 801cdc8:	2000      	movs	r0, #0
 801cdca:	4938      	ldr	r1, [pc, #224]	; (801ceac <atan+0x314>)
 801cdcc:	f7e3 fd46 	bl	800085c <__aeabi_ddiv>
 801cdd0:	f04f 0a03 	mov.w	sl, #3
 801cdd4:	4604      	mov	r4, r0
 801cdd6:	460d      	mov	r5, r1
 801cdd8:	e73e      	b.n	801cc58 <atan+0xc0>
 801cdda:	4b35      	ldr	r3, [pc, #212]	; (801ceb0 <atan+0x318>)
 801cddc:	4e35      	ldr	r6, [pc, #212]	; (801ceb4 <atan+0x31c>)
 801cdde:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 801cde2:	4456      	add	r6, sl
 801cde4:	449a      	add	sl, r3
 801cde6:	e9da 2300 	ldrd	r2, r3, [sl]
 801cdea:	f7e3 fa55 	bl	8000298 <__aeabi_dsub>
 801cdee:	4622      	mov	r2, r4
 801cdf0:	462b      	mov	r3, r5
 801cdf2:	f7e3 fa51 	bl	8000298 <__aeabi_dsub>
 801cdf6:	4602      	mov	r2, r0
 801cdf8:	460b      	mov	r3, r1
 801cdfa:	e9d6 0100 	ldrd	r0, r1, [r6]
 801cdfe:	f7e3 fa4b 	bl	8000298 <__aeabi_dsub>
 801ce02:	f1bb 0f00 	cmp.w	fp, #0
 801ce06:	4604      	mov	r4, r0
 801ce08:	460d      	mov	r5, r1
 801ce0a:	f6bf aee4 	bge.w	801cbd6 <atan+0x3e>
 801ce0e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801ce12:	461d      	mov	r5, r3
 801ce14:	e6df      	b.n	801cbd6 <atan+0x3e>
 801ce16:	a51c      	add	r5, pc, #112	; (adr r5, 801ce88 <atan+0x2f0>)
 801ce18:	e9d5 4500 	ldrd	r4, r5, [r5]
 801ce1c:	e6db      	b.n	801cbd6 <atan+0x3e>
 801ce1e:	bf00      	nop
 801ce20:	54442d18 	.word	0x54442d18
 801ce24:	3ff921fb 	.word	0x3ff921fb
 801ce28:	8800759c 	.word	0x8800759c
 801ce2c:	7e37e43c 	.word	0x7e37e43c
 801ce30:	e322da11 	.word	0xe322da11
 801ce34:	3f90ad3a 	.word	0x3f90ad3a
 801ce38:	24760deb 	.word	0x24760deb
 801ce3c:	3fa97b4b 	.word	0x3fa97b4b
 801ce40:	a0d03d51 	.word	0xa0d03d51
 801ce44:	3fb10d66 	.word	0x3fb10d66
 801ce48:	c54c206e 	.word	0xc54c206e
 801ce4c:	3fb745cd 	.word	0x3fb745cd
 801ce50:	920083ff 	.word	0x920083ff
 801ce54:	3fc24924 	.word	0x3fc24924
 801ce58:	5555550d 	.word	0x5555550d
 801ce5c:	3fd55555 	.word	0x3fd55555
 801ce60:	2c6a6c2f 	.word	0x2c6a6c2f
 801ce64:	bfa2b444 	.word	0xbfa2b444
 801ce68:	52defd9a 	.word	0x52defd9a
 801ce6c:	3fadde2d 	.word	0x3fadde2d
 801ce70:	af749a6d 	.word	0xaf749a6d
 801ce74:	3fb3b0f2 	.word	0x3fb3b0f2
 801ce78:	fe231671 	.word	0xfe231671
 801ce7c:	3fbc71c6 	.word	0x3fbc71c6
 801ce80:	9998ebc4 	.word	0x9998ebc4
 801ce84:	3fc99999 	.word	0x3fc99999
 801ce88:	54442d18 	.word	0x54442d18
 801ce8c:	bff921fb 	.word	0xbff921fb
 801ce90:	440fffff 	.word	0x440fffff
 801ce94:	7ff00000 	.word	0x7ff00000
 801ce98:	3fdbffff 	.word	0x3fdbffff
 801ce9c:	3ff00000 	.word	0x3ff00000
 801cea0:	3ff2ffff 	.word	0x3ff2ffff
 801cea4:	40037fff 	.word	0x40037fff
 801cea8:	3ff80000 	.word	0x3ff80000
 801ceac:	bff00000 	.word	0xbff00000
 801ceb0:	0801da70 	.word	0x0801da70
 801ceb4:	0801da50 	.word	0x0801da50

0801ceb8 <fabs>:
 801ceb8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801cebc:	4619      	mov	r1, r3
 801cebe:	4770      	bx	lr

0801cec0 <matherr>:
 801cec0:	2000      	movs	r0, #0
 801cec2:	4770      	bx	lr

0801cec4 <nan>:
 801cec4:	2000      	movs	r0, #0
 801cec6:	4901      	ldr	r1, [pc, #4]	; (801cecc <nan+0x8>)
 801cec8:	4770      	bx	lr
 801ceca:	bf00      	nop
 801cecc:	7ff80000 	.word	0x7ff80000

0801ced0 <fabsf>:
 801ced0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801ced4:	4770      	bx	lr
	...

0801ced8 <floorf>:
 801ced8:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
 801cedc:	0dca      	lsrs	r2, r1, #23
 801cede:	3a7f      	subs	r2, #127	; 0x7f
 801cee0:	2a16      	cmp	r2, #22
 801cee2:	ee07 0a90 	vmov	s15, r0
 801cee6:	4603      	mov	r3, r0
 801cee8:	dc2a      	bgt.n	801cf40 <floorf+0x68>
 801ceea:	2a00      	cmp	r2, #0
 801ceec:	da11      	bge.n	801cf12 <floorf+0x3a>
 801ceee:	ed9f 7a19 	vldr	s14, [pc, #100]	; 801cf54 <floorf+0x7c>
 801cef2:	ee77 7a87 	vadd.f32	s15, s15, s14
 801cef6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801cefa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cefe:	dd05      	ble.n	801cf0c <floorf+0x34>
 801cf00:	2800      	cmp	r0, #0
 801cf02:	da25      	bge.n	801cf50 <floorf+0x78>
 801cf04:	4a14      	ldr	r2, [pc, #80]	; (801cf58 <floorf+0x80>)
 801cf06:	2900      	cmp	r1, #0
 801cf08:	bf18      	it	ne
 801cf0a:	4613      	movne	r3, r2
 801cf0c:	ee07 3a90 	vmov	s15, r3
 801cf10:	e01b      	b.n	801cf4a <floorf+0x72>
 801cf12:	4912      	ldr	r1, [pc, #72]	; (801cf5c <floorf+0x84>)
 801cf14:	4111      	asrs	r1, r2
 801cf16:	4208      	tst	r0, r1
 801cf18:	d017      	beq.n	801cf4a <floorf+0x72>
 801cf1a:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 801cf54 <floorf+0x7c>
 801cf1e:	ee77 7a87 	vadd.f32	s15, s15, s14
 801cf22:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801cf26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cf2a:	ddef      	ble.n	801cf0c <floorf+0x34>
 801cf2c:	2800      	cmp	r0, #0
 801cf2e:	bfbe      	ittt	lt
 801cf30:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 801cf34:	fa40 f202 	asrlt.w	r2, r0, r2
 801cf38:	189b      	addlt	r3, r3, r2
 801cf3a:	ea23 0301 	bic.w	r3, r3, r1
 801cf3e:	e7e5      	b.n	801cf0c <floorf+0x34>
 801cf40:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801cf44:	d301      	bcc.n	801cf4a <floorf+0x72>
 801cf46:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801cf4a:	ee17 0a90 	vmov	r0, s15
 801cf4e:	4770      	bx	lr
 801cf50:	2300      	movs	r3, #0
 801cf52:	e7db      	b.n	801cf0c <floorf+0x34>
 801cf54:	7149f2ca 	.word	0x7149f2ca
 801cf58:	bf800000 	.word	0xbf800000
 801cf5c:	007fffff 	.word	0x007fffff

0801cf60 <scalbnf>:
 801cf60:	b508      	push	{r3, lr}
 801cf62:	f030 4300 	bics.w	r3, r0, #2147483648	; 0x80000000
 801cf66:	ed2d 8b02 	vpush	{d8}
 801cf6a:	ee07 0a90 	vmov	s15, r0
 801cf6e:	4602      	mov	r2, r0
 801cf70:	d004      	beq.n	801cf7c <scalbnf+0x1c>
 801cf72:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801cf76:	d306      	bcc.n	801cf86 <scalbnf+0x26>
 801cf78:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801cf7c:	ecbd 8b02 	vpop	{d8}
 801cf80:	ee17 0a90 	vmov	r0, s15
 801cf84:	bd08      	pop	{r3, pc}
 801cf86:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801cf8a:	d220      	bcs.n	801cfce <scalbnf+0x6e>
 801cf8c:	4b1f      	ldr	r3, [pc, #124]	; (801d00c <scalbnf+0xac>)
 801cf8e:	ed9f 7a20 	vldr	s14, [pc, #128]	; 801d010 <scalbnf+0xb0>
 801cf92:	4299      	cmp	r1, r3
 801cf94:	ee67 7a87 	vmul.f32	s15, s15, s14
 801cf98:	db14      	blt.n	801cfc4 <scalbnf+0x64>
 801cf9a:	ee17 2a90 	vmov	r2, s15
 801cf9e:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 801cfa2:	3b19      	subs	r3, #25
 801cfa4:	440b      	add	r3, r1
 801cfa6:	2bfe      	cmp	r3, #254	; 0xfe
 801cfa8:	dd13      	ble.n	801cfd2 <scalbnf+0x72>
 801cfaa:	ed9f 8a1a 	vldr	s16, [pc, #104]	; 801d014 <scalbnf+0xb4>
 801cfae:	ee17 1a90 	vmov	r1, s15
 801cfb2:	ee18 0a10 	vmov	r0, s16
 801cfb6:	f000 f833 	bl	801d020 <copysignf>
 801cfba:	ee07 0a90 	vmov	s15, r0
 801cfbe:	ee67 7a88 	vmul.f32	s15, s15, s16
 801cfc2:	e7db      	b.n	801cf7c <scalbnf+0x1c>
 801cfc4:	ed9f 7a14 	vldr	s14, [pc, #80]	; 801d018 <scalbnf+0xb8>
 801cfc8:	ee67 7a87 	vmul.f32	s15, s15, s14
 801cfcc:	e7d6      	b.n	801cf7c <scalbnf+0x1c>
 801cfce:	0ddb      	lsrs	r3, r3, #23
 801cfd0:	e7e8      	b.n	801cfa4 <scalbnf+0x44>
 801cfd2:	2b00      	cmp	r3, #0
 801cfd4:	dd06      	ble.n	801cfe4 <scalbnf+0x84>
 801cfd6:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 801cfda:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 801cfde:	ee07 3a90 	vmov	s15, r3
 801cfe2:	e7cb      	b.n	801cf7c <scalbnf+0x1c>
 801cfe4:	f113 0f16 	cmn.w	r3, #22
 801cfe8:	da06      	bge.n	801cff8 <scalbnf+0x98>
 801cfea:	f24c 3350 	movw	r3, #50000	; 0xc350
 801cfee:	4299      	cmp	r1, r3
 801cff0:	dcdb      	bgt.n	801cfaa <scalbnf+0x4a>
 801cff2:	ed9f 8a09 	vldr	s16, [pc, #36]	; 801d018 <scalbnf+0xb8>
 801cff6:	e7da      	b.n	801cfae <scalbnf+0x4e>
 801cff8:	3319      	adds	r3, #25
 801cffa:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 801cffe:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 801d002:	ed9f 7a06 	vldr	s14, [pc, #24]	; 801d01c <scalbnf+0xbc>
 801d006:	ee07 3a90 	vmov	s15, r3
 801d00a:	e7dd      	b.n	801cfc8 <scalbnf+0x68>
 801d00c:	ffff3cb0 	.word	0xffff3cb0
 801d010:	4c000000 	.word	0x4c000000
 801d014:	7149f2ca 	.word	0x7149f2ca
 801d018:	0da24260 	.word	0x0da24260
 801d01c:	33000000 	.word	0x33000000

0801d020 <copysignf>:
 801d020:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 801d024:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801d028:	4308      	orrs	r0, r1
 801d02a:	4770      	bx	lr

0801d02c <_init>:
 801d02c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d02e:	bf00      	nop
 801d030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d032:	bc08      	pop	{r3}
 801d034:	469e      	mov	lr, r3
 801d036:	4770      	bx	lr

0801d038 <_fini>:
 801d038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d03a:	bf00      	nop
 801d03c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d03e:	bc08      	pop	{r3}
 801d040:	469e      	mov	lr, r3
 801d042:	4770      	bx	lr
